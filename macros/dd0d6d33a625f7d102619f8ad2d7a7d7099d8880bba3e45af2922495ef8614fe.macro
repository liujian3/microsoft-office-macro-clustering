Attribute VB_Name = "CTSI_Export_r2"
Sub PrintToExportExcel(Optional BudgetExport As Boolean = False, _
                       Optional ExportAll As Boolean = False)

'@@@@@ Recommended set as Keyboard Shortcut: Ctrl+e

If Not ExportAll Then
    Application.ScreenUpdating = False
    Application.EnableEvents = False
    Application.DisplayAlerts = False
    CurrentCalcMode = Application.Calculation
    Application.Calculation = xlManual
End If

Dim home As String 'was variant
Dim newhome As String
Dim R As Long
Dim x As Integer
Dim SourceRange As Range
Dim ColumnNum As Integer
Dim BidBoxNum As Integer
Dim BHidden As Boolean
Dim IsCover As Boolean
Dim IsQuote As Boolean
Dim IsSummary As Boolean

Dim MergeRange As Range
Dim HeaderRange As Range
Dim TotalsRange As Range
Dim SMARange As Range
Dim NotesRange As Range
Dim ExclusionRange As Range
Dim SignatureRange As Range
Dim TermsRange As Range
Dim Free_Range As Range

Dim HeaderCount As Integer
Dim BodyCount As Integer
Dim TotalsCount As Integer
Dim SMACount As Integer
Dim NotesCount As Integer
Dim ExclusionCount As Integer
Dim SignatureCount As Integer
Dim TermsCount As Integer

Dim TitleColumn As Integer

home = ActiveSheet.Name
IsCover = False
IsSummary = False
IsQuote = False

If home = "Job Info & Cover" Then
    IsCover = True
ElseIf InStr(home, "Summary") Then
    IsSummary = True
ElseIf Sheets(home).Type = xlWorksheet Then
    If Sheets(home).Range("A9").Value = True Then
        If home = "2 Year Extended Warranty" _
        Or home = "3 Year Extended Warranty" _
        Or home = "Customer Care Plan" Then
            GoTo SkipToExit
        Else
            IsQuote = True
            TestQuoteFormulasAndLTypes False, False
        End If
    End If
End If

If IsSummary And Columns("V:V").Hidden = False Then
    BidBoxNum = 15
Else
    BidBoxNum = 0
End If

'Application.ScreenUpdating = False
'Application.EnableEvents = False
'Application.DisplayAlerts = False
'Application.Calculation = xlManual
    
'@@@@@ verify the routine is activated in an appropriate sheet, and some conditions.

If Not IsCover And Not IsSummary And Not IsQuote Then
    MsgTimed "This sheet may NOT be used for this Routine", "WARNING", 4, True
    GoTo SkipToExit
ElseIf IsSummary Then
    If Columns("L:L").Hidden = False _
    Or Columns("O:O").Hidden = False _
    Or Columns("AT:AT").Hidden = False Then
        MsgTimed "You MUST hide cost columns to perform this Routine.", "WARNING", 4, True
        GoTo SkipToExit
    End If
ElseIf IsQuote Then
    If Columns("L:L").Hidden = False Or Columns("G:G").Hidden = False Or _
        Columns("P:P").Hidden = False Then
        MsgTimed "You MUST hide cost columns to perform this Routine.", "WARNING", 4, True
        GoTo SkipToExit
    End If
    If BudgetExport _
    And Columns("J:J").Hidden = True Then
        MsgTimed "Quote tab MUST be in Item$ view to perform this Routine.", "WARNING", 4, True
        GoTo SkipToExit
    End If
End If
        
If Sheets("Job Info & Cover").Range("C23").Value = " " Or _
    Sheets("Job Info & Cover").Range("C25").Value = " " Then
        If Sheets("Job Info & Cover").Range("C23").Value = " " Or _
           Sheets("Job Info & Cover").Range("C25").Value = " " Then
                MsgQuick "You MUST Fill-In (minimum):" & Chr(10) & _
                         "RED cells On 'Job Info' Tab" & Chr(10) & _
                         "ORANGE cells highly recommended"
        End If
    GoTo SkipToExit
ElseIf ThereWasAnInappropriateChange Then
    MsgBox "You MUST fix the red formula errors.", , "WARNING"
    GoTo SkipToExit
ElseIf IsQuote Then
    If Range("Quote_DesignBy").Value = Empty Then
        Range("Quote_DesignBy") = InputBox("Quote By / Estimator Name", "ESTIMATOR")
        If Range("Quote_DesignBy").Value = Empty Then
            MsgQuick "You MUST enter a Name."
            GoTo SkipToExit
        End If
    End If
End If

'@@@@@ If the tabname exceeds 29 characters, it must be truncated in the new "e-" sheet
If BudgetExport And IsQuote Then
    newhome = "b-" & Left(home, 29)
Else
    newhome = "e-" & Left(home, 29)
End If

'@@@@@ Delete sheet named newhome if it exists
DeleteSheetIfExists (newhome)

'@@@@@ Create new sheet and name it newhome
Sheets.Add After:=Sheets(Sheets.Count)
ActiveSheet.Name = newhome
    
'@@@@@ if it's the Cover sheet, run the special email subroutine here, then skip to end

If IsCover Then
    Sheets(home).Activate
    Range("Email_Body_Range").Copy
    Sheets(newhome).Activate
    Range("A1").Select
    Selection.PasteSpecial Paste:=xlPasteColumnWidths '@@@@@ columnwidths fixed
    Selection.PasteSpecial Paste:=xlPasteValues
    Selection.PasteSpecial Paste:=xlPasteFormats
    Selection.FormatConditions.Delete
    R = Selection.Rows.Count
    Sheets(home).Activate
    Range("Email_CoverLogo_Range").Copy
    Sheets(newhome).Activate
    Range("A" & R - 5).Select
    ActiveSheet.Paste
    On Error Resume Next
    With ActiveSheet.PageSetup
        .PrintArea = "$A$1:$F$" & R
        .CenterFooter = "&P of &N"
        .TopMargin = Application.InchesToPoints(3)
        .CenterHorizontally = True
        .CenterVertically = True
        .Orientation = xlPortrait
        .PaperSize = xlPaperLetter
        .Zoom = False
        .FitToPagesWide = 1
        .FitToPagesTall = 1
    End With
    On Error GoTo 0
    With ActiveWindow
        .DisplayGridlines = False
        .DisplayZeros = False
    End With
    Range("A1").Select
    GoTo SkipToExit
End If

'@@@@@ determine if b-column is on or off, & record quantity column (adjusted)

Sheets(home).Activate
If Columns("B:B").Hidden = True Then BHidden = True
TitleColumn = Range("Quote_Title").Column
' If BHidden Then TitleColumn = TitleColumn - 1

'@@@@@ Copy the Header and Body Selections, in order to initially correct the top rowheights,
'@@@@@ and paste the logo/etc correctly
Sheets(home).Activate
    
If BHidden Then Columns("B:B").EntireColumn.Hidden = False '@@@@@ unhide for paste logo size
Range("Email_Body_Range").SpecialCells(xlCellTypeVisible).Select
Selection.Copy '@@@@@ must correct target columnwidths & rowhieghts before pasting logo pic
Sheets(newhome).Activate
Range("A1").Select
Selection.PasteSpecial Paste:=xlPasteColumnWidths '@@@@@ columnwidths fixed
ColumnNum = Selection.Columns.Count
If Not IsSummary Then ColumnNum = ColumnNum - 1
If BHidden Then ColumnNum = ColumnNum - 1
BodyCount = Selection.Rows.Count
Sheets(home).Activate
HeaderCount = 0
For R = 10 To 20 '@@@@@ corrects rowheight to row 24 (orig summary)
    If Rows(Range("A" & R).Row).Hidden = False Then
        HeaderCount = HeaderCount + 1
        Sheets(newhome).Range("A" & HeaderCount).RowHeight = Range("A" & R).RowHeight
    End If
Next R
x = HeaderCount
For R = 21 To 24 '@@@@@ corrects rowheight to row 24 (orig summary)
    If Rows(Range("A" & R).Row).Hidden = False Then
        HeaderCount = HeaderCount + 1
        Sheets(newhome).Range("A" & HeaderCount).RowHeight = Range("A" & R).RowHeight
    End If
Next R

'@@@@@ copy the header text

For R = 1 To 3
    If Rows(Range("A" & 20 + R).Row).Hidden = False Then
        Range("Quote_Text" & R).Copy
        Sheets(newhome).Select
        x = x + 1
        Range("B" & x).Select
        ActiveSheet.Paste
        Selection.Resize(1, ColumnNum - 1).Select
        Selection.MergeCells = True
        Sheets(home).Activate
    End If
Next R
    
'@@@@@ copy header-A with logo
    
Range("Email_Header_Range").SpecialCells(xlCellTypeVisible).Select
Set SourceRange = Selection
Selection.Copy
Sheets(newhome).Activate
Set HeaderRange = Range("A1:A" & HeaderCount)
Range("A1").Select
ActiveSheet.Paste '@@@@@ finally paste the logo & other info
Application.CutCopyMode = False
Range("A3:A5").Select
Selection.Copy
Selection.PasteSpecial Paste:=xlPasteValues '@@@@@ removes formula for salsperson name/phone
Sheets(home).Activate

'@@@@@ copy options note if summary tab and row is not hidden (while b-colm is not hidden

If IsSummary Then
    If Rows(Range("Summary_Options_Note").Row).Hidden = False Then
        Range("Summary_Options_Note").Copy
        Sheets(newhome).Select
        Range("B" & HeaderCount + BodyCount + 1).Select
        ActiveSheet.Paste
        Selection.Resize(1, ColumnNum - 1).Select
        Selection.MergeCells = True
        Range("A" & HeaderCount + BodyCount + 1).RowHeight = _
                    Sheets(home).Range("Summary_Options_Note").RowHeight
        Range("A" & HeaderCount + BodyCount + 2).RowHeight = 6
        BodyCount = BodyCount + 2
        Sheets(home).Activate
    End If
End If

If BHidden Then Columns("B:B").EntireColumn.Hidden = True '@@@@@ return b-column to prior state

'@@@@@ copy & paste format & values of body

Range("Email_Body_Range").SpecialCells(xlCellTypeVisible).Select
Selection.Copy
Sheets(newhome).Activate
Range("A" & (HeaderCount + 1)).Select
Selection.PasteSpecial Paste:=xlPasteColumnWidths
Selection.PasteSpecial Paste:=xlPasteValues
Selection.PasteSpecial Paste:=xlPasteFormats
Selection.FormatConditions.Delete
Application.CutCopyMode = False
Y = Selection.Columns.Count - 1
Sheets(home).Activate
x = HeaderCount
For R = 25 To 24 + Range("Email_Body_Range").Rows.Count '@@@@@ corrects rowheights
    If Rows(Range("A" & R).Row).Hidden = False Then
        x = x + 1
        Sheets(newhome).Range("A" & x).RowHeight = Range("A" & R).RowHeight
        If BudgetExport And IsQuote Then '@@@@@ code to modify copied body for budget exports
            If IsNumeric(Sheets(newhome).Cells(x, Y)) Then
                If IsNumeric(Range("X" & R).Value) _
                And IsNumeric(Range("I" & R).Value) Then
                    Sheets(newhome).Cells(x, Y).Value = Range("X" & R).Value - Range("I" & R).Value
                Else
                    Sheets(newhome).Cells(x, Y).Value = Range("X" & R).Value
                End If
            ElseIf Sheets(newhome).Cells(x, Y).Value = "Price Ext." Then
                Sheets(newhome).Cells(x, Y).Value = "Labor Each"
            End If
        End If
    End If
Next R

'@@@@@ copy & paste the titles

Sheets(home).Activate
Cells(10, TitleColumn).Select
Selection.Resize(5, 1).Copy
Sheets(newhome).Activate
Range("A1").Offset(0, ColumnNum + BidBoxNum).Select
Selection.PasteSpecial Paste:=xlPasteColumnWidths
Selection.PasteSpecial Paste:=xlPasteValues
Selection.PasteSpecial Paste:=xlPasteFormats
Selection.FormatConditions.Delete
Application.CutCopyMode = False

Application.ScreenUpdating = False
Application.EnableEvents = False
Application.DisplayAlerts = False
Application.Calculation = xlManual

'@@@@@ copy & paste the contact/company/phone/email area over
Sheets(home).Activate
x = 1
For R = 10 To 15 '@@@@@ initialize x value
    If Rows(Range("A" & R).Row).Hidden = False Then
        x = x + 1
    End If
Next R
For R = 16 To 20
    Sheets(home).Activate
    If Rows(Range("A" & R).Row).Hidden = False Then
        If Not IsSummary Then
            Range("a" & R & ":f" & R).SpecialCells(xlCellTypeVisible).Select
        Else
            Range("a" & R & ":h" & R).SpecialCells(xlCellTypeVisible).Select
        End If
        Selection.Copy
        Sheets(newhome).Activate
        Range("a" & x).Select
        x = x + 1
        Selection.PasteSpecial Paste:=xlPasteColumnWidths
        Selection.PasteSpecial Paste:=xlPasteValues
        Selection.PasteSpecial Paste:=xlPasteFormats
        Selection.FormatConditions.Delete
        Application.CutCopyMode = False
    End If
Next R

'@@@@@ copy the Totals area over

If Not IsSummary Then
    Sheets(home).Activate
    If Rows(Range("Email_Totals_Range").Cells(1, 1).Row).Hidden = False Then
        Range("Email_Totals_Range").SpecialCells(xlCellTypeVisible).Select
        Selection.Copy
        Sheets(newhome).Activate
        Range("A" & (HeaderCount + BodyCount + 1)).Select
        Selection.PasteSpecial Paste:=xlPasteColumnWidths
        Selection.PasteSpecial Paste:=xlPasteValues
        Selection.PasteSpecial Paste:=xlPasteFormats
        Selection.FormatConditions.Delete
        R = Selection.Columns.Count
        TotalsCount = Selection.Rows.Count
        Application.CutCopyMode = False
        Set TotalsRange = Range("A" & (HeaderCount + BodyCount + 1)).Resize(TotalsCount, R)
        TotalsRange.Rows(TotalsCount).RowHeight = 6
    End If
End If

'@@@@@ copy the Warranty-SMA area over

Sheets(home).Activate
If NamedRangeExists("Email_Warranty_SMA_Range") Then
    If Rows(Range("Email_Warranty_SMA_Range").Cells(1, 1).Row).Hidden = False Then
        Range("Email_Warranty_SMA_Range").Resize(5, 1).SpecialCells(xlCellTypeVisible).Select
        Selection.Copy
        If Selection.Rows.Count > 0 Then
            Sheets(newhome).Activate
            Range("A" & (HeaderCount + BodyCount + TotalsCount + 1)).Select
            ActiveSheet.Paste
            SMACount = Selection.Rows.Count
            Application.CutCopyMode = False
            Set SMARange = Range("A" & (HeaderCount + BodyCount + TotalsCount _
                                    + 1)).Resize(SMACount, 1)
            SMARange.Select
            With Sheets(home).Range("Email_Warranty_SMA_Range")
                nR = 1
                For eR = 1 To .Rows.Count
                    If .Rows(eR).RowHeight > 0 Then
                        SMARange.Rows(nR).RowHeight = .Rows(eR).RowHeight
                        nR = nR + 1
                    End If
                Next eR
            End With
            Sheets(home).Activate
            Range("Email_Warranty_SMA_Range").Resize(5, 6).SpecialCells(xlCellTypeVisible).Copy
            Sheets(newhome).Activate
            SMARange.Cells(1, 1).Select
            ActiveSheet.Paste
            Selection.Copy
            Selection.PasteSpecial Paste:=xlPasteValues
            Sheets(home).Activate
        End If
    End If
End If

'@@@@@ copy the Notes area over

Sheets(home).Activate
If Rows(Range("Email_Notes_Range").Cells(1, 1).Row).Hidden = False Then
    Range("Email_Notes_Range").SpecialCells(xlCellTypeVisible).Select
    NotesCount = Selection.Rows.Count
    Selection.Copy
    Sheets(newhome).Activate
    Range("A" & (HeaderCount + BodyCount + TotalsCount + SMACount + 1)).Select
    ActiveSheet.Paste
    Application.CutCopyMode = False
    Set NotesRange = Range("A" & (HeaderCount + BodyCount + TotalsCount + SMACount _
                            + 1)).Resize(NotesCount, 1)
    NotesRange.Select
    With Sheets(home).Range("Email_Notes_Range")
        For R = 1 To .Rows.Count
            NotesRange.Rows(R).RowHeight = .Rows(R).RowHeight
        Next R
    End With
    Sheets(home).Activate
    Range("Quote_Notes").Copy
    Sheets(newhome).Activate
    NotesRange.Cells(1, 2).Select
    ActiveSheet.Paste
    NotesRange.Range(Cells(1, 2), Cells(1, ColumnNum + BidBoxNum)).Select
    With Selection
        .WrapText = True
        .MergeCells = True
    End With
End If

'@@@@@ copy the Exclusions area over

Sheets(home).Activate
If Rows(Range("Email_Exclusion_Range").Cells(1, 1).Row).Hidden = False Then
Range("Email_Exclusion_Range").SpecialCells(xlCellTypeVisible).Select
    ExclusionCount = Selection.Rows.Count
    Selection.Copy
    Sheets(newhome).Activate
    Range("A" & (HeaderCount + BodyCount + TotalsCount + SMACount + NotesCount + 1)).Select
    ActiveSheet.Paste
    Application.CutCopyMode = False
    Set ExclusionRange = Range("A" & (HeaderCount + BodyCount + TotalsCount + SMACount + NotesCount _
                            + 1)).Resize(ExclusionCount, 1)
    ExclusionRange.Select
    With Sheets(home).Range("Email_Exclusion_Range")
        For R = 1 To .Rows.Count
            ExclusionRange.Rows(R).RowHeight = .Rows(R).RowHeight
        Next R
    End With
    Sheets(home).Activate
    Range("Quote_Exclusions").Copy
    Sheets(newhome).Activate
    ExclusionRange.Cells(1, 2).Select
    ActiveSheet.Paste
    ExclusionRange.Range(Cells(1, 2), Cells(1, ColumnNum + BidBoxNum)).Select
    With Selection
        .WrapText = True
        .MergeCells = True
    End With
End If

'@@@@@ copy the Signature area over

Sheets(home).Activate
If Rows(Range("Email_Signature_Range").Cells(1, 1).Row).Hidden = False Then
    Range("Email_Signature_Range").Select 'SpecialCells(xlCellTypeVisible).Select
    SignatureCount = Selection.Rows.Count
    Selection.Copy
    Sheets(newhome).Activate
    Range("A" & (HeaderCount + BodyCount + TotalsCount + SMACount + NotesCount + ExclusionCount _
            + 1)).Select
    Selection.PasteSpecial Paste:=xlPasteColumnWidths
    Selection.PasteSpecial Paste:=xlPasteValues
    Selection.PasteSpecial Paste:=xlPasteFormats
    Selection.FormatConditions.Delete
    R = Selection.Columns.Count
    Application.CutCopyMode = False
    Set SignatureRange = Range("A" & (HeaderCount + BodyCount + TotalsCount + SMACount + NotesCount _
                            + ExclusionCount + 1)).Resize(SignatureCount, R)
    SignatureRange.Select
    With Sheets(home).Range("Email_Signature_Range")
        For R = 1 To .Rows.Count
            SignatureRange.Rows(R).RowHeight = .Rows(R).RowHeight
        Next R
    End With
End If

'@@@@@ copy the Terms area over

Sheets(home).Activate
If Rows(Range("Email_Terms_Range").Cells(1, 1).Row).Hidden = False Then
    Range("Email_Terms_Range").SpecialCells(xlCellTypeVisible).Select
    TermsCount = Selection.Rows.Count
    Selection.Copy
    Sheets(newhome).Activate
    Range("A" & (HeaderCount + BodyCount + TotalsCount + SMACount + NotesCount + ExclusionCount _
            + SignatureCount + 1)).Select
    ActiveSheet.Paste
    Application.CutCopyMode = False
    Set TermsRange = Range("A" & (HeaderCount + BodyCount + TotalsCount + SMACount + NotesCount _
                            + ExclusionCount + SignatureCount _
                            + 1)).Resize(TermsCount, 1)
    TermsRange.Select
    With Sheets(home).Range("Email_Terms_Range")
        For R = 1 To .Rows.Count
            TermsRange.Rows(R).RowHeight = .Rows(R).RowHeight
        Next R
    End With
    Sheets(home).Activate
    Range("Quote_Terms1").Copy
    Sheets(newhome).Activate
    TermsRange.Cells(1, 2).Select
    ActiveSheet.Paste
    Selection.PasteSpecial Paste:=xlPasteValues
    TermsRange.Range(Cells(1, 2), Cells(1, ColumnNum + BidBoxNum)).Select
    With Selection
        .WrapText = True
        .MergeCells = True
    End With
    Sheets(home).Activate
    If Rows(Range("Quote_Terms2").Row).Hidden = False Then
        Range("Quote_Terms2").Copy
        Sheets(newhome).Activate
        TermsRange.Cells(2, 2).Select
        ActiveSheet.Paste
        Selection.PasteSpecial Paste:=xlPasteValues
        TermsRange.Range(Cells(2, 2), Cells(2, ColumnNum + BidBoxNum)).Select
        With Selection
            .WrapText = True
            .MergeCells = True
        End With
    End If
End If

'@@@@@ if home is Summary tab, and bidbox is displayed, copy it

If IsSummary Then
    If BidBoxNum > 0 Then
        Sheets(home).Activate
        Range("Email_BidBox_Range").SpecialCells(xlCellTypeVisible).Select
        Selection.Copy
        Sheets(newhome).Activate
        Set SourceRange = Cells(HeaderCount + 4, ColumnNum + 1)
        SourceRange.Select
        Selection.PasteSpecial Paste:=xlPasteColumnWidths
        Selection.PasteSpecial Paste:=xlPasteValues
        Selection.PasteSpecial Paste:=xlPasteFormats
        Selection.FormatConditions.Delete
        Application.CutCopyMode = False
        Sheets(home).Activate
        Range("Email_BidBoxTitles").Copy
        Sheets(newhome).Activate
        SourceRange.Offset(-1, 0).Select
        ActiveSheet.Paste
        For x = 1 To 15
            SourceRange.Offset(-8, x - 1).Resize(8, 1).Select
            Selection.MergeCells = True
        Next x
    End If
End If

'@@@@@ final settings & cleanup

Sheets(newhome).Activate
With ActiveWindow
    .DisplayGridlines = False
    .DisplayZeros = False
End With
Range("A" & HeaderCount + BodyCount + 1).Resize(TotalsCount + SMACount + NotesCount _
                            + ExclusionCount + SignatureCount + TermsCount).Select
Selection.ClearContents
Range("C3").Select

'@@@@@ for errors or issues that caused a bypass of routine, and to wrapup the routine

SkipToExit:

Set SourceRange = Nothing
Set MergeRange = Nothing
Set HeaderRange = Nothing
Set TotalsRange = Nothing
Set SMARange = Nothing
Set NotesRange = Nothing
Set ExclusionRange = Nothing
Set SignatureRange = Nothing
Set TermsRange = Nothing
Set Free_Range = Nothing

Sheets(home).Activate
If Not IsCover Then Range("C26").Select Else Range("E35").Select

If Not ExportAll Then
    Application.CutCopyMode = False
    Application.Calculation = CurrentCalcMode
    Application.ScreenUpdating = True
    Application.EnableEvents = True
    Application.DisplayAlerts = True
    Set CurrentCalcMode = Nothing
End If

End Sub
'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Sub PrintToExportAllExcel(Optional BudgetExport As Boolean = False)

Application.DisplayAlerts = False
Application.ScreenUpdating = False
Application.EnableEvents = False
CurrentCalcMode = Application.Calculation
Application.Calculation = xlManual

Dim i As Integer
Dim allhome As String
Dim ProgressPercent As Single
Dim ProgressGoal As Single
Dim ProgCounter As Single

allhome = ActiveSheet.Name

ProgressFormShow "Initializing..."
ProgCounter = 0.05
ProgressGoal = Sheets.Count + 0.1

For i = 1 To Sheets.Count
    ProgressPercent = ProgCounter / ProgressGoal
    If Sheets(i).Type = xlWorksheet Then
        home = Sheets(i).Name
        If home = "Job Info & Cover" _
        Or InStr(home, "Summary") _
        Or Sheets(home).Range("A9").Value = True Then
            Sheets(home).Activate
            Application.WindowState = Application.WindowState
            ProgressFormUpdate ProgressPercent, Sheets(i).Name & "...", "Validate & Export..."
            PrintToExportExcel BudgetExport, False
        End If
    End If
    ProgCounter = ProgCounter + 1
Next i

ProgressFormClose
Sheets(allhome).Activate
Application.Calculation = CurrentCalcMode
Application.ScreenUpdating = True
Application.EnableEvents = True
Application.DisplayAlerts = True
Set CurrentCalcMode = Nothing

End Sub
'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Sub PrintToBudgetExcel()
    PrintToExportExcel (True)
End Sub
'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Sub PrintToBudgetAllExcel()
    PrintToExportAllExcel (True)
End Sub
Attribute VB_Name = "CTSI_File_Tools"
#If VBA7 Then
    Dim mXLHwnd As LongPtr    'Excel's window handle
    Dim mhwndForm As LongPtr  'The userform's window handle
    Private Declare PtrSafe Function FindWindowA Lib "user32" (ByVal lpClassName As String, ByVal lpWindowName As String) As LongPtr
    #If Win64 Then
        Private Declare PtrSafe Function SetWindowLongA Lib "user32" Alias "SetWindowLongPtrA" (ByVal hwnd As LongPtr, ByVal nIndex As Long, ByVal dwNewLong As LongPtr) As LongPtr
    #Else
        Private Declare PtrSafe Function SetWindowLongA Lib "user32" (ByVal hwnd As LongPtr, ByVal nIndex As Long, ByVal dwNewLong As LongPtr) As LongPtr
    #End If
    Private Declare PtrSafe Function SetForegroundWindow Lib "user32" (ByVal hwnd As LongPtr) As Long
    Declare PtrSafe Function SetWindowPos Lib "user32" (ByVal hwnd As LongPtr, _
       ByVal hwndInsertAfter As LongPtr, ByVal x As LongPtr, ByVal Y As LongPtr, _
       ByVal cx As LongPtr, ByVal cy As LongPtr, ByVal wFlags As LongPtr) As LongPtr
    Declare PtrSafe Function SHGetPathFromIDListA Lib "shell32.dll" ( _
        ByVal pidl As LongPtr, _
        ByVal pszBuffer As String) As LongPtr
    Declare PtrSafe Function SHBrowseForFolderA Lib "shell32.dll" ( _
        lpBrowseInfo As BROWSEINFO) As LongPtr

    Public Type BROWSEINFO
      hOwner As LongPtr
      pidlRoot As Long
      pszDisplayName As String
      lpszTitle As String
      ulFlags As Long
      lpfn As LongPtr
      lParam As LongPtr
      iImage As Long
    End Type

#Else
    Dim mXLHwnd As Long    'Excel's window handle
    Dim mhwndForm As Long  'The userform's window handle
    Private Declare Function FindWindowA Lib "user32" (ByVal lpClassName As String, ByVal lpWindowName As String) As Long
    Private Declare Function SetWindowLongA Lib "user32" (ByVal hwnd As Long, ByVal nIndex As Long, ByVal dwNewLong As Long) As Long
    Private Declare Function SetForegroundWindow Lib "user32" (ByVal hwnd As Long) As Long
    Declare Function SetWindowPos Lib "user32" (ByVal hwnd As Long, _
       ByVal hwndInsertAfter As Long, ByVal x As Long, ByVal y As Long, _
       ByVal cx As Long, ByVal cy As Long, ByVal wFlags As Long) As Long
    Declare Function SHGetPathFromIDListA Lib "shell32.dll" ( _
        ByVal pidl As Long, _
        ByVal pszBuffer As String) As Long
    Declare Function SHBrowseForFolderA Lib "shell32.dll" ( _
        lpBrowseInfo As BROWSEINFO) As Long

    Type BROWSEINFO
        hOwner As Long
        pidlRoot As Long
        pszDisplayName As String
        lpszTitle As String
        ulFlags As Long
        lpfn As Long
        lParam As Long
        iImage As Long
    End Type

#End If
    
Const SWP_NOSIZE = &H1
Const SWP_NOMOVE = &H2
Const HWND_TOPMOST = -1
Const HWND_NOTOPMOST = -2
Const GWL_HWNDPARENT As Long = -8

Public ExitSearch As Boolean

Public subFolderLevel As Integer

Private Const BIF_RETURNONLYFSDIRS As Long = &H1
Private Const BIF_DONTGOBELOWDOMAIN As Long = &H2
Private Const BIF_RETURNFSANCESTORS As Long = &H8
Private Const BIF_BROWSEFORCOMPUTER As Long = &H1000
Private Const BIF_BROWSEFORPRINTER As Long = &H2000
Private Const BIF_BROWSEINCLUDEFILES As Long = &H4000
Private Const MAX_PATH As Long = 260


Type SHFILEOPSTRUCT
    hwnd As Long
    wFunc As Long
    pFrom As String
    pTo As String
    fFlags As Integer
    fAnyOperationsAborted As Boolean
    hNameMappings As Long
    lpszProgressTitle As String
End Type
'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Private Sub UserForm_Initialize()
    If Val(Application.Version) >= 15 Then        'Only makes sense on Excel 2013 and up
        Set XLApp = Application
        mhwndForm = FindWindowA("ThunderDFrame", Caption)
    End If
End Sub
'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Private Sub XLApp_WindowActivate(ByVal wb As Workbook, ByVal Wn As Window)
    If Val(Application.Version) >= 15 And mhwndForm <> 0 Then 'Only makes sense on Excel 2013 and up
        mXLHwnd = Application.hwnd    'Always get because in Excel 15 SDI each wb has its window with different handle.
        SetWindowLongA mhwndForm, GWL_HWNDPARENT, mXLHwnd
        SetForegroundWindow mhwndForm
    End If
End Sub
'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Private Sub XLApp_WindowResize(ByVal wb As Workbook, ByVal Wn As Window)
    If Not Me.Visible Then Me.Show vbModeless
End Sub
'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Private Sub XLApp_WorkbookBeforeClose(ByVal wb As Workbook, Cancel As Boolean)
    SetWindowLongA mhwndForm, GWL_HWNDPARENT, 0&
End Sub
'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Function BrowseFolder(Optional Caption As String = "") As String

Dim BROWSEINFO As BROWSEINFO
Dim FolderName As String
#If VBA7 Then
    Dim ID As LongPtr
    Dim Res As LongPtr
#Else
    Dim ID As Long
    Dim Res As Long
#End If

With BROWSEINFO
   .hOwner = 0
   .pidlRoot = 0
   .pszDisplayName = String$(MAX_PATH, vbNullChar)
   .lpszTitle = Caption
   .ulFlags = BIF_RETURNONLYFSDIRS
   .lpfn = 0
End With

FolderName = String$(MAX_PATH, vbNullChar)
ID = SHBrowseForFolderA(BROWSEINFO)
If ID Then
   Res = SHGetPathFromIDListA(ID, FolderName)
   If Res Then
       BrowseFolder = Left$(FolderName, InStr(FolderName, vbNullChar) - 1)
   End If
End If

End Function
'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Function FileOrFolderExists(ByVal fpath As String, Optional ByVal fname As String = "", _
                         Optional fattr = vbNormal) As Boolean

'@@@@@ returns TRUE if the file exists
On Error GoTo SkipError
    If fname <> "" Then
        FileOrFolderExists = Len(Dir(fpath & "\" & fname, fattr)) > 0
    Else
        If Not Dir(fpath, vbDirectory) = vbNullString Then
            FileOrFolderExists = True
        Else
            If Not Dir(fpath, vbDirectory + vbHidden) = vbNullString Then
                FileOrFolderExists = True
            Else
SkipError:
                FileOrFolderExists = False
            End If
        End If
On Error GoTo 0
    End If

End Function
'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Function RemoveChars(ByVal sText As String, _
                  Optional KeepChars As String = " *?", _
                  Optional ReplaceWithChar = "") As String

Dim i As Integer
Dim sLen As Integer
Dim KeepString As String
Dim newText As String

KeepString = "0123456789" & _
             "ABCDEFGHIJKLMNOPQRSTUVWXYZ" & _
             "abcdefghijklmnopqrstuvwxyz" & _
             KeepChars

sLen = Len(sText)

For i = 1 To sLen
    schar = Mid(sText, i, 1)
    If InStr(KeepString, schar) = 0 Then
        newText = newText & ReplaceWithChar
    Else
        newText = newText & schar
    End If
Next
RemoveChars = newText
End Function
'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Function RemoveCharsX(ByVal sText As String, _
                  Optional RemChars As String = _
                                    ",.;'[]{}=+_-()&^%$#@!~` " & _
                                    "*|\/?<>:""", _
                  Optional NewChar As String = "", _
                  Optional KeepLastPeriod As Boolean = False) As String
'remove special chars, uppercase
Dim i, j, rChar, CountDown
If NewChar <> "" And InStr(RemChars, NewChar) <> 0 Then GoTo QuickExit
If KeepLastPeriod And InStr(RemChars, ".") <> 0 Then
    rChar = Split(sText, ".")
    CountDown = UBound(rChar)
    ReDim rChar(0)
Else: KeepLastPeriod = False 'no period in remove string anyways
End If
For j = 1 To Len(RemChars)
  rChar = Mid(RemChars, j, 1)
  While 0 <> InStr(sText, rChar)
    If KeepLastPeriod And rChar = "." Then
        If CountDown = 1 Then GoTo KeepPeriod Else: CountDown = CountDown - 1
    End If
    i = InStr(sText, rChar)
    sText = Mid$(sText, 1, i - 1) & NewChar & Mid$(sText, i + 1)
  Wend
KeepPeriod:
Next
QuickExit:
RemoveCharsX = sText
End Function
'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Function SheetExists(ByVal fpath As String, shname As String) As Boolean

If Not FileOrFolderExists(fpath) Then 'file+path must exist
    SheetExists = False
    Exit Function
Else

    Dim wSheet As Worksheet
    Dim fname As String
    Dim home As String
    home = ""
    fname = fPathTofName(fpath)
    
    On Error Resume Next
    If IsFileOpen(fpath) Then ' workbook is open already
        home = ActiveWorkbook.Name
        Workbooks(fpath).Activate
    Else 'not open
        Workbooks.Open fpath
    End If
    
    Set wSheet = Sheets(shname)
    If wSheet Is Nothing Then
        SheetExists = False
    Else
        SheetExists = True
    End If
    
    If home = "" Then
        Workbooks(fname).Close SaveChanges:=False
    Else
        Workbooks(home).Activate
    End If
    
    Set wSheet = Nothing
    On Error GoTo 0

End If

End Function
'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Function FileAndFolderCount(Folder As Object, fSystem As Object) As Long

If Folder.Name = "DfsrPrivate" Then
    FileAndFolderCount = 1
Else
    Dim fcount As Long
    Dim subfolder As Object
    fcount = 1 + Folder.Files.Count
    For Each subfolder In Folder.SubFolders
        fcount = fcount + FileAndFolderCount(subfolder, fSystem)
    Next
    Set subfolder = Nothing
    FileAndFolderCount = fcount
End If

End Function
'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Function fPathTofName(ByVal fpath As String) As String

fPathTofName = fpath
While 0 <> InStr(fPathTofName, "\")
    fPathTofName = Mid$(fPathTofName, InStr(fPathTofName, "\") + 1)
Wend

End Function
'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Function fNameTofext(ByVal fname As String) As String

If 0 <> InStr(fname, ".") Then fNameTofext = fname Else fNameTofext = ""
While 0 <> InStr(fNameTofext, ".")
    fNameTofext = Mid$(fNameTofext, InStr(fNameTofext, ".") + 1)
Wend

End Function
'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Function IsFileOpen(ByVal fpath As String) As Boolean

On Error Resume Next
fname = fPathTofName(fpath)
Set wBook = Workbooks(fname)
If wBook Is Nothing Then 'not open
    IsFileOpen = False
Else ' workbook is open already
    IsFileOpen = True
End If
Set wBook = Nothing

End Function
'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Sub DeleteSheetIfExists(SName As String)
On Error GoTo SkipDelete
    Sheets(SName).Delete
SkipDelete:
End Sub
'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Sub PasteValue(Optional NonSense As Boolean)
Attribute PasteValue.VB_ProcData.VB_Invoke_Func = "b\n14"
'@@@@@ Keyboard Shortcut: Ctrl+b
On Error GoTo SkipPaste
    Selection.PasteSpecial Paste:=xlPasteValues
SkipPaste:
End Sub
'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Function FindFirst(SearchRange As Range, CompareString As String, _
            Optional AfterCell As Range) As Range

If AfterCell Is Nothing Then
    Set AfterCell = SearchRange.Cells(1, 1)
End If

x = Len(CompareString)
If x > 255 Then CompareString = Mid(CompareString, 1, 254)

Set FindFirst = SearchRange.Find(What:=CompareString, After:=AfterCell, _
        LookIn:=xlValues, LookAt:=xlWhole, SearchOrder:=xlByRows, MatchCase:=False)

End Function
'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Function FindFirstWild(SearchRange As Range, CompareString As String, _
            Optional AfterCell As Range) As Range

If AfterCell Is Nothing Then
    Set AfterCell = SearchRange.Cells(1, 1)
End If

x = Len(CompareString)
If x > 255 Then CompareString = Mid(CompareString, 1, 254)

Set FindFirstWild = SearchRange.Find(What:=CompareString, After:=AfterCell, _
        LookIn:=xlValues, LookAt:=xlPart, SearchOrder:=xlByRows, MatchCase:=False)

End Function
'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Sub RangeCopy(DataRange As Range, TargetRange As Range, _
              Optional WithFormulas As Boolean = False, _
              Optional FormulaToValue As Boolean = False, _
              Optional WithBoldUnderline As Boolean = False, _
              Optional WithColorTransferredGreen As Boolean = True, _
              Optional WithNoteValues As Boolean = False)

'@@@@@ Correct for office 2016's new way of dealing with merged cells

If DataRange.MergeCells Then
    Set DataRange = DataRange.Worksheet.Range(DataRange.MergeArea.Address)
    Set TargetRange = TargetRange.Worksheet.Range(TargetRange.MergeArea.Address)
End If

'@@@@@ Verify that the ranges are equivalent size

If DataRange.Rows.Count = TargetRange.Rows.Count _
And DataRange.Columns.Count = TargetRange.Columns.Count Then
    '@@@@@ Ranges are the same dimensions, otherwise
Else: MsgTimed "Ranges Provided are not the same shape", "INPUT ERROR", 4, True
    GoTo SkipToExit
End If

If DataRange.MergeCells Then
    DataRange.Copy
    TargetRange.PasteSpecial Paste:=xlPasteValues
    If WithColorTransferredGreen Then _
        DataRange.Interior.ColorIndex = 4 '@@@ color cells green
    GoTo SkipToExit
End If

With DataRange
    For i = 1 To DataRange.Rows.Count
        For x = 1 To DataRange.Columns.Count
            If WithFormulas Then
                DataRange.Cells(i, x).Copy
                If FormulaToValue Then
                    TargetRange.Cells(i, x).PasteSpecial Paste:=xlPasteValues
                Else
                    If WithNoteValues And DataRange.Cells(i, x).PrefixCharacter = "'" Then
                        TargetRange.Cells(i, x).FormulaR1C1 = "'" & DataRange.Cells(i, x).FormulaR1C1
                    Else
                        TargetRange.Cells(i, x).PasteSpecial Paste:=xlPasteFormulas
                    End If
                End If
                If WithColorTransferredGreen Then _
                    DataRange.Cells(i, x).Interior.ColorIndex = 4 '@@@ color cells green
            ElseIf Not DataRange.Cells(i, x).HasFormula Then
                DataRange.Cells(i, x).Copy
                TargetRange.Cells(i, x).PasteSpecial Paste:=xlPasteValues
                If WithColorTransferredGreen Then _
                    DataRange.Cells(i, x).Interior.ColorIndex = 4 '@@@ color cells green
            End If
            If WithBoldUnderline Then
                If DataRange.Cells(i, x).Font.Bold = True Then
                    TargetRange.Cells(i, x).Font.Bold = True
                End If
                If DataRange.Cells(i, x).Font.Underline <> xlUnderlineStyleNone Then
                    TargetRange.Cells(i, x).Font.Underline = _
                                DataRange.Cells(i, x).Font.Underline
                End If
            End If
        Next x
    Next i
End With

SkipToExit:

Application.CutCopyMode = False

End Sub
'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Function LastRow() As Long
LastRow = ActiveSheet.UsedRange.Row - 1 + ActiveSheet.UsedRange.Rows.Count
End Function
'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Function folderPermission(ByVal fileDir As String, Optional fileName As String = "*.*") As Boolean

On Error GoTo errorEvent
errTest = Dir(fileDir & "\")

folderPermission = True
Exit Function

errorEvent:
folderPermission = False

End Function
'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Function StringGoneWild(ByVal SearchText As String) As String

Dim SearchString As String

SearchString = "*" & SearchText & "*"
SearchText = SearchString
sLen = Len(SearchText) - 1
For i = sLen To 1 Step -1 '@@@@@ add "*" between every pair of chars
    SearchString = Left(SearchString, i - 1) & "*" & Mid(SearchString, i)
Next i

While 0 <> InStr(SearchString, "**") '@@@@@ reduce any instance of "**" to "*"
    i = InStr(SearchString, "**")
    SearchString = Mid$(SearchString, 1, i - 1) & Mid$(SearchString, i + 1)
Wend

StringGoneWild = SearchString

End Function
'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Sub DeleteCellHLink(ByRef HLCell As Range)

If HLCell.Hyperlinks.Count <> 0 Then
    HLCell.Hyperlinks(1).Delete
End If

End Sub
'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Function LastColumnCell(xCol As Range) As Integer
    x = ActiveSheet.UsedRange.Rows.Count
    LastColumnCell = Cells(65536, xCol.Column).End(xlUp).Row
End Function
'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Sub Pause(ByVal tMinutes As Integer, ByVal tSeconds As Integer)

newHour = Hour(Now())
newMinute = Minute(Now()) + tMinutes
newSecond = Second(Now()) + tSeconds
waitTime = TimeSerial(newHour, newMinute, newSecond)
Application.Wait waitTime

End Sub
'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Function FileSearch(ByVal SearchText As String, _
                 Optional fext As String = "", _
                 Optional LookIn As String = "", _
                 Optional FindOnlyFirst As Boolean = True, _
                 Optional WithSubfolderLevels As Integer = 100, _
                 Optional WildMatch As Boolean = True, _
                 Optional SearchGoneWild As Boolean = False) As Variant

Dim fSystem As Object
Dim SearchString As String
Dim Coll_Array() As String
Dim Coll_Docs As New Collection
Set Coll_Docs = Nothing
subFolderLevel = 0

ExitSearch = False

If Not FileOrFolderExists(LookIn) Then
    ReDim Coll_Array(1 To 1) As String
    Coll_Array(1) = "Not Found"
    GoTo QuickExit
End If

If fext <> "" Then
    Do While InStr(fext, ".") <> 0
        fext = Mid(fext, InStr(fext, ".") + 1) '@@@@@ remove "." if exists
    Loop
    fext = "." & fext
End If

If WithSubfolderLevels > 0 Then
    Set fSystem = CreateObject("Scripting.FileSystemObject")
End If

If WildMatch Then
    If SearchGoneWild Then SearchString = StringGoneWild(SearchString) _
                      Else: SearchString = "*" & SearchText & "*"
Else
    If InStr(SearchText, "*") + _
       InStr(SearchText, "?") + _
       InStr(fext, "*") + _
       InStr(fext, "?") > 0 _
       Or SearchGoneWild Then
        MsgBox "WildMatch = False and" & Chr(10) & _
               "SearchText or .ext Wildcards" & Chr(10) & _
               "or SearchGoneWild Mismatch" & Chr(10) & Chr(10) & _
               "Corrected WildMatch Option", , "ERROR"
        WildMatch = True
    End If
    SearchString = SearchText
End If

If LookIn = "" Then LookIn = ActiveWorkbook.Path

FileSearchRecursive fSystem, Coll_Docs, SearchText, fext, LookIn, _
                    FindOnlyFirst, WithSubfolderLevels, SearchString

If Coll_Docs.Count <> 0 Then
    ReDim Coll_Array(1 To Coll_Docs.Count) As String
    For i = 1 To Coll_Docs.Count
        Coll_Array(i) = Coll_Docs(i)
    Next
Else
    ReDim Coll_Array(1) As String
    Coll_Array(1) = "Not Found"
End If

QuickExit:

FileSearch = Coll_Array

ReDim Coll_Array(0)
Set Coll_Docs = Nothing
If WithSubfolderLevels Then Set fSystem = Nothing

End Function
'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Sub FileSearchRecursive(fSystem As Object, _
                  ByVal Coll_Docs As Collection, _
                  ByVal SearchText As String, _
                  ByVal fext As String, _
                        LookIn As String, _
                        FindOnlyFirst As Boolean, _
                        WithSubfolderLevels As Integer, _
                  ByVal SearchString As String)

Dim fname As String
Dim SearchName As String
Dim sString As String
Dim Search_Filter As String
Dim subLookIn As String

If fext = "" Then
      fname = Dir(LookIn & "\" & SearchString, vbDirectory)
Else: fname = Dir(LookIn & "\" & SearchString & fext)
End If
Do Until fname = "" Or fname = vbNullString
    If fext = "" And InStr(fname, ".") > 0 Then GoTo SearchNext '@@@@@ resolves a folder search
    SearchName = UCase(RemoveCharsX(fname, , "*", True))
    sString = UCase(RemoveCharsX(SearchString & fext, , "*", True))
    If SearchName Like sString Then
        Coll_Docs.Add Item:=LookIn + "\" + fname   '@@@@@ adds full path for found file
        If FindOnlyFirst Then
            ExitSearch = True
            GoTo QuickExit
        End If
    End If
SearchNext:
    fname = Dir
Loop

If WithSubfolderLevels > subFolderLevel Then '@@@@@ recursively check all subfolders with the same routine

    Dim RootFolder As Object
    Dim subfolder As Object
    Dim ofolder As Object
    
    Set RootFolder = fSystem.GetFolder(LookIn)
    Set subfolder = RootFolder.SubFolders
    
    For Each ofolder In subfolder
        If folderPermission(ofolder.Path) Then '@@@@@ skip subfolder check w/o access permission
            subLookIn = LookIn & "\" & ofolder.Name
            subFolderLevel = subFolderLevel + 1
            FileSearchRecursive fSystem, Coll_Docs, SearchText, fext, subLookIn, _
                                FindOnlyFirst, WithSubfolderLevels, SearchString
            subFolderLevel = subFolderLevel - 1
        End If
        If ExitSearch Then GoTo QuickExit
    Next ofolder

QuickExit:
    Set RootFolder = Nothing
    Set subfolder = Nothing
    Set ofolder = Nothing

End If

End Sub
'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Public Function ShowXLOnTop(OnTop As Boolean)
    Dim hXL As Long
    Dim setting As Long
    If OnTop Then
        setting = HWND_TOPMOST
    Else
        setting = HWND_NOTOPMOST
    End If
    hXL = Application.hwnd
    SetWindowPos hXL, setting, 0, 0, 0, 0, SWP_NOSIZE Or SWP_NOMOVE
End Function
'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Function CellContainsHyperlink(TestCell As Range) As Boolean

On Error Resume Next
linkAddress = vbNullString
linkAddress = TestCell.Hyperlinks(1).SubAddress
On Error GoTo 0
 
If linkAddress = vbNullString Then
     CellContainsHyperlink = False
Else
     CellContainsHyperlink = True
End If

End Function
'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Sub XLScreenRelease()

ShowXLOnTop False

End Sub
'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Function NamedRangeExists(RangeName As String, _
                 Optional SheetName As String = "") As Boolean

Dim Free_Range As Range
NamedRangeExists = False
If SheetName = "" Then SheetName = ActiveSheet.Name

On Error Resume Next
Set Free_Range = Sheets(SheetName).Range(RangeName)
If Err = 0 Then '@@@@@ the name exists.
    NamedRangeExists = True
End If

End Function
'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Function IsOpenQuote(Optional NonSense As Boolean) As Boolean
    Dim wbk As Workbook
    Dim TestRange As Range
    IsOpenQuote = False
    On Error GoTo SkipIt
    For Each wbk In Workbooks
        If wbk.Name = ActiveWorkbook.Name Then GoTo SkipIt
        Set TestRange = wbk.Sheets("Job Info & Cover").Range("Salesperson")
        IsOpenQuote = True
        Set wbk = Nothing
        On Error GoTo 0
        Exit Function
SkipIt:
        Set TestRange = Nothing
    Next
    Set wbk = Nothing
    On Error GoTo 0
End Function
'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Function Unite(ParamArray Ranges() As Variant) As Range
    Dim ResR As Range
    Dim N As Long
    Dim R As Range
    Set ResR = Nothing
    
    For N = LBound(Ranges) To UBound(Ranges)
        If Not Ranges(N) Is Nothing Then
            If ResR Is Nothing Then
                If TypeOf Ranges(N) Is Excel.Range Then Set ResR = Ranges(N)
            Else
                For Each R In Ranges(N).Cells
                    If Application.Intersect(ResR, R) Is Nothing Then
                        If TypeOf R Is Excel.Range Then
                            Set ResR = Application.Union(ResR, R)
                        End If
                    End If
                Next R
            End If
        End If
    Next N
    Set Unite = ResR
End Function
'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Function ValidationExists(Optional TestCell As Range = Nothing) As Boolean
    If TestCell Is Nothing Then Set TestCell = Selection
    If Not Intersect(TestCell, Sheets(TestCell.Worksheet.Name).Cells.SpecialCells(xlCellTypeAllValidation)) Is Nothing Then
        ValidationExists = True
    Else
        ValidationExists = False
    End If
End Function
'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Function fixfolderpdfs(nfolder As String) As String

Set fso = CreateObject("scripting.FileSystemObject")
Set fFolder = fso.GetFolder(nfolder)
For Each file In fFolder.Files
    fname = RemoveChars(file.Name, " .")
    If InStr(fname, ".pdf") Then
        If Not FileOrFolderExists(nfolder & "\" & file.Name) Then
            file.Copy nfolder & "\fixing " & fname
            file.Delete
            Set file = fso.getfile(nfolder & "\fixing " & fname)
            fixfolderpdfs = fname
            file.Copy nfolder & "\" & fname
            file.Delete
            GoTo quickexitpdffix
        End If
    End If
Next

quickexitpdffix:

Set file = Nothing
Set fFolder = Nothing
Set fso = Nothing

End Function

'Check whether Worksheet Exists
Public Function WorksheetExists(shtName As String, Optional wb As Workbook) As Boolean
    Dim sht As Worksheet

    If wb Is Nothing Then Set wb = ThisWorkbook
    On Error Resume Next
    Set sht = wb.Sheets(shtName)
    On Error GoTo 0
    WorksheetExists = Not sht Is Nothing
End Function
Attribute VB_Name = "CTSI_Forms"
Public TimeSet As Variant
Public OKClicked As Boolean
Public T As Integer
Public YesClicked As Boolean
Public ProgressGoal As Long
Public ProgressPercent As Single
'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Sub MsgQuick(Title As String)
    MsgTimed Title, "INFORMATIONAL NOTICE", 2, False
End Sub
'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Sub MsgTimed(Title As String, Caption As String, time As Single, _
        Optional TimeShow As Boolean = False)

T = time '@@@@@ MUST use the public variable to transfer the received time.
Load MessageForm
With MessageForm
    If TimeShow Then
        .TimeLabel.Caption = "This message will self-destruct in " & T & " seconds."
    Else
        .TimeLabel.Caption = ""
    End If
    .Caption = Caption
    .MainLabel.Caption = Title
    .Show
End With
Unload MessageForm
OKClicked = False

End Sub
'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Sub MsgBoxTimed(MsgBodyText As String, _
                Title As String, _
                Optional time As Single = 4, _
                Optional TimeShow As Boolean = False)
    Dim InfoBox As Object
    If TimeShow Then
        MsgBodyText = MsgBodyText & Chr(10) & _
                      Chr(10) & _
                      "This message will self-destruct in " & time & " seconds."
    End If
    time = Round(time / 3, 2) '@@@@@ correction for the slow behavior of the windows timer
    Set InfoBox = CreateObject("WScript.Shell")
    Select Case InfoBox.Popup(MsgBodyText, time, Title, 0)
        Case 1, -1
            Set InfoBox = Nothing
            Exit Sub
    End Select
End Sub
'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Sub MessageFormOK(Optional NonSense As Boolean)

On Error Resume Next
With MessageForm
    .Hide
End With
Application.OnTime TimeSet, "MessageFormOK", , False
OKClicked = True
Unload MessageForm

End Sub
'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Sub SubmittalMenu(Optional NonSense As Boolean)

Load SubmittalOptionForm
With SubmittalOptionForm

    .Caption = "Submittal Options"
    .HeaderCheckBox.Caption = "Tab Titles Included"
    .SubHeaderCheckBox.Caption = "Sub-headers Included"
    .SortWInHeaderCheckBox.Caption = "Sort Within Headers"
    .MiscItemsCheckBox.Caption = "Include Misc Section"
    .CableCheckBox.Caption = "Include Cable Section"
    
    .SectionCheckBox.Caption = "Section Column"
    
    .DimensionsCheckBox.Caption = "Dimensions Column"
    .BackboxCheckBox.Caption = "Backbox Column"
    .PowerCheckBox.Caption = "Power Column"
    .LoadCheckBox.Caption = "Load Column"
    .WeightCheckBox.Caption = "Weight Column"
    .BTUCheckBox.Caption = "BTU Column"
    
    .Show
End With
Unload SubmittalOptionForm
OKClicked = False

End Sub
'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Sub SubmittalOptionFormOK(Optional NonSense As Boolean)

On Error Resume Next

WithHeaders = SubmittalOptionForm.HeaderCheckBox.Value
WithSubHeaders = SubmittalOptionForm.SubHeaderCheckBox.Value
WithSortHeaders = SubmittalOptionForm.SortWInHeaderCheckBox.Value
NotMisc = Not SubmittalOptionForm.MiscItemsCheckBox.Value
NotCable = Not SubmittalOptionForm.CableCheckBox.Value

SubmittalColms(0) = SubmittalOptionForm.SectionCheckBox.Value

SubmittalColms(1) = SubmittalOptionForm.DimensionsCheckBox.Value
SubmittalColms(2) = SubmittalOptionForm.BackboxCheckBox.Value
SubmittalColms(3) = SubmittalOptionForm.PowerCheckBox.Value
SubmittalColms(4) = SubmittalOptionForm.LoadCheckBox.Value
SubmittalColms(5) = SubmittalOptionForm.WeightCheckBox.Value
SubmittalColms(6) = SubmittalOptionForm.BTUCheckBox.Value

With SubmittalOptionForm
    .Hide
End With
OKClicked = True
Unload SubmittalOptionForm

End Sub
'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Sub YesNoMenu(Caption As String, QuestionAsk As String, Optional YesButton As String = "Yes", _
                                                        Optional NoButton As String = "No")

Load YesNoForm
With YesNoForm
    .Caption = Caption
    .MainLabel.Caption = QuestionAsk
    .YesButton.Caption = YesButton
    .NoButton.Caption = NoButton
    .Show
End With
Unload YesNoForm
OKClicked = False

End Sub
'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Sub YesNoMenuClose(Optional NonSense As Boolean)

On Error Resume Next
With YesNoForm
    .Hide
End With
OKClicked = True
Unload YesNoForm

End Sub
'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Sub ProgressFormShow(ProgressActivity As String, _
            Optional ProgressDetails As String = "")

    Load ProgressForm
    With ProgressForm
        .ActivityLabel.Caption = ProgressActivity
        .DetailsLabel.Caption = ProgressDetails
        .FrameProgress.Caption = Format(0, "0%")
        .ProgressBar.Width = 0
    End With
    ProgressForm.Show
    Application.WindowState = Application.WindowState

End Sub
'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Sub ProgressFormUpdate(PercentDone As Single, _
              Optional ProgressDetails As String = "", _
              Optional NewProgressActivity As String = "")

    If NewProgressActivity <> "" Then
        ProgressActivity = NewProgressActivity
        ProgressForm.ActivityLabel.Caption = ProgressActivity
    End If
    With ProgressForm
        .DetailsLabel.Caption = ProgressDetails
        .FrameProgress.Caption = Format(PercentDone, "0%")
        .ProgressBar.Width = PercentDone * (.FrameProgress.Width - 16)
    End With
    Application.WindowState = Application.WindowState

End Sub
'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Sub ProgressFormClose(Optional NonSense As Boolean)

    On Error Resume Next
    ProgressForm.Hide
    Unload ProgressForm

End Sub
Attribute VB_Name = "CTSI_List_Generator"
'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Sub CompositeGenerator()

Application.ScreenUpdating = False
Application.EnableEvents = False
Application.DisplayAlerts = False
CurrentCalcMode = Application.Calculation
Application.Calculation = xlManual

'Composite "Composite Parts List"
Composite "Composite Parts List", , , , , , True

'@@@@@ then some clean up activities

Application.Calculation = CurrentCalcMode
Application.ScreenUpdating = True
Application.EnableEvents = True
Application.DisplayAlerts = True

Set CurrentCalcMode = Nothing

End Sub
'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Sub Composite(CompChosenName As String, Optional NotMisc As Boolean = False, _
                                        Optional NotCable As Boolean = False, _
                                        Optional WithSubHeaders As Boolean = False, _
                                        Optional WithHeaders As Boolean = False, _
                                        Optional WithSortHeaders As Boolean = False, _
                                        Optional WithWarrantyMaint As Boolean = False)

Dim home As String
Dim TargetRowNum As Integer
Dim IncludedQuoteNum As Integer
Dim Free_Range As Range '@@@@@ Junk Range variable used for many different things
Dim IncludedQuotes As Object
Dim TestRange As Range
Dim CopyRange As Range
Dim JustDoIt As Boolean
Dim OnFirstRun As Boolean
Dim SystemQty As Integer '@@@@@ to account for system quotes that have multiple instances
Dim SortStart As Integer
Dim SortStop As Integer
Dim SheetNum As Integer
Dim SkipSection As Boolean
Dim EndGenMatRow As Integer
Dim SubcontractHeaderRow As Integer
Dim Maint3rdHeaderRow As Integer
Dim Warranty3rdHeaderRow As Integer
SubcontractHeaderRow = 10000
Maint3rdHeaderRow = 10000
Warranty3rdHeaderRow = 10000

Set IncludedQuotes = ActiveWindow.SelectedSheets
TargetRowNum = 4
IncludedQuoteNum = 7
OnFirstRun = True
SheetNum = 0
ProgressGoal = IncludedQuotes.Count
ProgressFormShow "Creating Composite List from Quotes..."

'@@@@@ then get the data from each sheet

For Each oSheet In IncludedQuotes
    oSheet.Activate
    ProgressPercent = ((SheetNum * 3) + 1) / (ProgressGoal * 3)
    ProgressFormUpdate ProgressPercent, oSheet.Name & ": ...Delink & Discovery"
    If oSheet.Type = xlWorksheet Then
        If oSheet.Range("A9").Value = True Then '@@@@@ It's a quote sheet
        
'@@@@@ create the new/target sheet for data dump & consolidation

            home = oSheet.Name
            
            If OnFirstRun Then
            
                '@@@@@ Remove all previous links to CompChosenName before deletion
                CompositeDeLink CompChosenName, Worksheets
                
                DeleteSheetIfExists (CompChosenName)
                Sheets("COMP-BLANK").Visible = True
                Sheets("COMP-BLANK").Copy After:=Sheets(Sheets.Count) '&&&&& PROBLEM HERE &&&&&&&&&&
                ActiveSheet.Name = CompChosenName
                Sheets("COMP-BLANK").Visible = False
                Sheets(home).Activate
                OnFirstRun = False
            End If
            
            '@@@@@ save the view, unfilter & unhide everything
            
            ViewSaveQuoteOpen
    
            '@@@@@ find the ranges to copy to the req format, and the test range (qty)
            
            Set Free_Range = oSheet.Range("Quote_Qty")
            SystemQty = Free_Range.Resize(1, 1).Value '@@@@@ retreives the system multiplier
            Set Free_Range = oSheet.Range("Header_Quote_GenMat")
            Set Free_Range = Free_Range.Offset(1, 0)
            Set TestRange = Cells(Free_Range.Row, 4)
            Set Free_Range = oSheet.Range("Header_Quote_MiscMat")
            EndGenMatRow = Free_Range.Row
            Set Free_Range = oSheet.Range("Footer_Quote_Material")
            Set TestRange = TestRange.Resize(Free_Range.Row - TestRange.Row, 1)
    
            If WithWarrantyMaint Then
                'subcontracts
                If Not NamedRangeExists("Header_Quote_ProServDay2") Then
                    Set Free_Range = FindFirstWild(Range("F:F"), "Professional Services, Day-2")
                    If Not Free_Range Is Nothing Then
                        Range(Free_Range.Row & ":" & Free_Range.Row).Select
                        ActiveWorkbook.Worksheets(ActiveSheet.Name).Names.Add Name:="Header_Quote_ProServDay2", _
                            RefersToR1C1:="='" & ActiveSheet.Name & "'!R" & Free_Range.Row
                    Else
                        GoTo NoDay2
                    End If
                End If
                Set Free_Range = oSheet.Range("Header_Quote_Subcont")
                SubcontractHeaderRow = Free_Range.Row
                Set Free_Range = Cells(Free_Range.Row, 4)
                Set Free_Range = Free_Range.Resize(Range("Header_Quote_ProServDay2").Row - Free_Range.Row, 1)
                Set TestRange = Union(TestRange, Free_Range)
NoDay2:
                '3rd party maintenance
                Set Free_Range = oSheet.Range("Header_Quote_Maint")
                Maint3rdHeaderRow = Free_Range.Row
                Set Free_Range = Cells(Free_Range.Row, 4)
                Set Free_Range = Free_Range.Resize(Range("Header_Quote_Warranty").Row - Free_Range.Row, 1)
                Set TestRange = Union(TestRange, Free_Range)
                '3rd party warranty
                Set Free_Range = oSheet.Range("Header_Quote_Warranty")
                Warranty3rdHeaderRow = Free_Range.Row
                Set Free_Range = Cells(Free_Range.Row, 4)
                Set Free_Range = Free_Range.Resize(Range("Header_Quote_Permit").Row - Free_Range.Row, 1)
                Set TestRange = Union(TestRange, Free_Range)
            End If
    
            '@@@@@ get the tab's title, for each tab in process, if desired
    
            If WithHeaders Then
                Set Free_Range = oSheet.Range("Quote_Title")
                Sheets(CompChosenName).Activate
                If TargetRowNum > 4 Then TargetRowNum = TargetRowNum + 1
                Range("B" & TargetRowNum).Value = Free_Range.Value & " Equipment"
                With Range("B" & TargetRowNum).Font
                    .Bold = True
                    .Underline = xlUnderlineStyleSingle
                    .Color = 16711680
                    .Size = 10
                End With
                TargetRowNum = TargetRowNum + 2
                Sheets(home).Activate
            End If
            
            '@@@@@ loop through the quantity cells and retrieve data from valid rows
            
            ProgressPercent = ((SheetNum * 3) + 2) / (ProgressGoal * 3)
            ProgressFormUpdate ProgressPercent, oSheet.Name & ": ...General Material data transfer"
    
            SkipSection = False
            For Each oCell In TestRange
                JustDoIt = False
                If oCell = "lot" Or oCell = "Lot" Or oCell = "LOT" Then
                    JustDoIt = True
                End If
                If IsNumeric(oCell) Then
                    If oCell.Value <> 0 Then JustDoIt = True
                End If
                
                '@@@@@ allow user to skip the miscellatious or cable sections, or both
                
                If IsError(oCell.Offset(0, 2).Value) Then GoTo SkipTextTest
                If NotMisc Then
                    If oCell.Offset(0, 2).Value = "Miscellaneous Consumables & Hardware" Then _
                        SkipSection = True
                End If
                If NotCable Then
                      If oCell.Offset(0, 2).Value = "Cable" Then SkipSection = True
                Else
                    If oCell.Offset(0, 2).Value = "Cable" Then
                        SkipSection = False
                        ProgressPercent = ((SheetNum * 3) + 3) / (ProgressGoal * 3)
                        ProgressFormUpdate ProgressPercent, oSheet.Name & ": ...Cable data transfer"
                    End If
                End If
                If SkipSection Then GoTo SkipCell
                
                '@@@@@ adjust for subheaders, if included. add space prior if on quote.
                
                If WithSubHeaders Then
                    If oCell.Offset(0, 2).Value = "Miscellaneous Consumables & Hardware" Or _
                        oCell.Offset(0, 2).Value = "Cable" Then
                            If oCell.Value = "lot" Then TargetRowNum = TargetRowNum + 1
                    End If
                    If oCell.Value = "-" Then
                        JustDoIt = True
                        If oCell.Offset(-1, 2).Value = "" Or oCell.Offset(-1, 2).Value = 0 _
                                Then TargetRowNum = TargetRowNum + 1
                        If oCell.Offset(0, 2).Value = "Equipment" And TargetRowNum > 5 _
                                Then TargetRowNum = TargetRowNum + 1
                    End If
                Else '@@@@@ else skip the primary headers too
                    If oCell.Offset(0, 2).Value = "Miscellaneous Consumables & Hardware" Then _
                            JustDoIt = False
                    If oCell.Offset(0, 2).Value = "Cable" Then _
                            JustDoIt = False
                    If oCell.Offset(0, 1).Value = "Labor" Then _
                            JustDoIt = False
                End If
                
                '@@@@@ then copy of data for the cell's row
SkipTextTest:
                If JustDoIt Then
                
                    '@@@@@ adjust for "waste&complete" - for all but nurse call quote tabs
                    
                    Set Free_Range = oCell.Offset(0, 2).Find(What:="Waste/Complete", _
                                                             LookIn:=xlValues, LookAt:=xlPart)
                    If Free_Range Is Nothing Then
                        If InStr(oCell.Offset(0, 2).Formula, "Waste/Complete") _
                        And IsError(oCell.Offset(0, 2)) Then GoTo WasteRow
                    Else
WasteRow:
                        If oCell.Offset(0, 1).Value = oCell.Offset(-1, 1).Value And _
                           oCell.Offset(0, -1).Value = oCell.Offset(-1, -1).Value And _
                           oCell.Offset(0, 3).Value = oCell.Offset(-1, 3).Value Then
                                Sheets(CompChosenName).Activate
                                Range("C" & TargetRowNum - 1).Value = _
                                    Range("C" & TargetRowNum - 1).Value + oCell.Value
                                GoTo SkipCell
                        End If
                    End If
                    
                    '@@@@@ copy columns from "section" thru "cost each"
                    Set CopyRange = oCell.Offset(0, -2)
                    Set CopyRange = CopyRange.Resize(1, 6)
                    CopyRange.Copy
                    Sheets(CompChosenName).Activate
                    Range("A" & TargetRowNum).Select
                    Selection.PasteSpecial Paste:=xlPasteValues
                    
                    If WithSubHeaders Then
                        If Not IsError(oCell.Offset(0, 2)) Then
                            If oCell.Offset(0, 2).Value = "Miscellaneous Consumables & Hardware" Or _
                               oCell.Offset(0, 2).Value = "Cable" Then
                                    If oCell.Value = "lot" Then Range("C" & TargetRowNum).Value = "-"
                            End If
                        End If
                    End If
                    
                    '@@@@@ if a header row, make desc bold, remove qty, and skip remaining copy
                    If Range("C" & TargetRowNum).Value = "-" Then
                        Range("A" & TargetRowNum).Value = Empty
                        Range("B" & TargetRowNum).Value = Range("E" & TargetRowNum).Value
                        Range("C" & TargetRowNum).Value = Empty 'remove qty
                        Range("D" & TargetRowNum).Value = Empty
                        Range("E" & TargetRowNum).Value = Empty
                        With Range("B" & TargetRowNum).Font
                            .Bold = True
                            .Underline = xlUnderlineStyleSingle
                            .Color = 16711680
                        End With
                    Else
                    
                        oSheet.Activate
                        
                        '@@@@@ copy column "fixture", if after misc consumables force "F", until after subcontract
                        If oCell.Row < EndGenMatRow Then
                            Set CopyRange = oCell.Offset(0, 9)
                            CopyRange.Copy
                            Sheets(CompChosenName).Activate
                            Range("G" & TargetRowNum).Select
                            Selection.PasteSpecial Paste:=xlPasteValues
                        Else
                            If oCell.Row > Warranty3rdHeaderRow Then
                                Sheets(CompChosenName).Activate
                                Range("B" & TargetRowNum).Value = "ZZZ+" & Range("B" & TargetRowNum).Value
                                Range("G" & TargetRowNum).Select
                                Selection.Value = "TPW"
                                Selection.Interior.Color = 16764108 'CC purple
                            ElseIf oCell.Row > Maint3rdHeaderRow Then
                                Sheets(CompChosenName).Activate
                                Range("B" & TargetRowNum).Value = "ZZZ+" & Range("B" & TargetRowNum).Value
                                Range("G" & TargetRowNum).Select
                                Selection.Value = "TPM"
                                Selection.Interior.Color = 16764108 'CC purple
                            ElseIf oCell.Row > SubcontractHeaderRow Then
                                Sheets(CompChosenName).Activate
                                Range("B" & TargetRowNum).Value = "ZZZ+" & Range("B" & TargetRowNum).Value
                                Range("G" & TargetRowNum).Select
                                Selection.Value = "SUB"
                                Selection.Interior.Color = 16764057 'admin blue
                            Else
                                Sheets(CompChosenName).Activate
                                Range("G" & TargetRowNum).Value = "F"
                            End If
                        End If
                        
                        '@@@@@ copy the labor type & each columns
                        oSheet.Activate
                        Range("O" & oCell.Row & ":P" & oCell.Row & _
                             ",R" & oCell.Row & ":S" & oCell.Row & _
                             ",U" & oCell.Row & ":V" & oCell.Row).Copy
                        Sheets(CompChosenName).Activate
                        Range("H" & TargetRowNum).Select
                        Selection.PasteSpecial Paste:=xlPasteValues
                        
                        '@@@@@ copy the "Equipment Data" columns
                        oSheet.Activate
                        Range("AA" & oCell.Row & ":AF" & oCell.Row).Copy
                        Sheets(CompChosenName).Activate
                        Range("N" & TargetRowNum).Select
                        Selection.PasteSpecial Paste:=xlPasteValues
                        
                        '@@@@@ copy the "Item Costing" columns
                        oSheet.Activate
                        Range("AH" & oCell.Row & ":AJ" & oCell.Row).Copy
                        Sheets(CompChosenName).Activate
                        Range("T" & TargetRowNum).Select
                        Selection.PasteSpecial Paste:=xlPasteValues
                        
                        '@@@@@ adjust for system multiples
                        If Range("C" & TargetRowNum).Value = "lot" Or _
                            Range("C" & TargetRowNum).Value = "Lot" Or _
                            Range("C" & TargetRowNum).Value = "LOT" _
                                Then Range("C" & TargetRowNum).Value = 1
                            Range("C" & TargetRowNum) = Range("C" & TargetRowNum).Value * SystemQty
                    
                    End If 'end of skip if header section
                    
                    '@@@@@ set target pointer to next row
                    oSheet.Activate
                    TargetRowNum = TargetRowNum + 1
                End If
                
SkipCell:
                
            Next oCell
            
            '@@@@@ fetch the title off the quote sheet and list it on the CompList
            oSheet.Activate
            Set Free_Range = oSheet.Range("Quote_Title")
            Sheets(CompChosenName).Activate
            Cells(1, IncludedQuoteNum).Value = Free_Range.Value
            IncludedQuoteNum = IncludedQuoteNum + 1
            oSheet.Activate
            
            '@@@@@ return to the user's original view
            ViewRestoreQuote
        End If
    End If
    SheetNum = SheetNum + 1
Next oSheet

ProgressFormClose
Sheets(CompChosenName).Activate
Rows(TargetRowNum & ":" & TargetRowNum).Delete Shift:=xlUp

'@@@@@ After the data is gathered: sort and consolidate

If Not OnFirstRun Then '@@@@@ catch the situation where no valid quotes where found

    CompSortConsolodate CompChosenName, WithHeaders, WithSubHeaders, WithSortHeaders, WithWarrantyMaint

    Columns("B:B").Select
    Selection.Replace What:="ZZZ+", Replacement:="", LookAt:=xlPart, SearchOrder:=xlByRows, _
        MatchCase:=False, SearchFormat:=False, ReplaceFormat:=False

    'refind the last row of data
    TargetRowNum = LastRow
    
    '@@@@@ TAG the "END OF LIST"
    If TargetRowNum = 4 _
    And Range("c" & TargetRowNum).Value = "" Then
        Range("B" & TargetRowNum).Select
    Else
        Range("B" & TargetRowNum + 1).Select
    End If
    ActiveCell.FormulaR1C1 = "END OF LIST"
    Selection.Font.Bold = True
    Range(Cells(1, 7), Cells(1, IncludedQuoteNum - 1)).Copy
    Range("W4").Select
    Selection.PasteSpecial Paste:=xlPasteValues, Transpose:=True
    Range("W" & IncludedQuoteNum - 3).Select '___________________________________________________________________________________
    ActiveCell.FormulaR1C1 = "END OF LIST"
    Range(Cells(1, 7), Cells(1, IncludedQuoteNum - 1)).ClearContents
    Range("B2").Select
    ActiveWindow.ScrollColumn = 5

End If '@@@@@ end OnFirstRun test

Set Free_Range = Nothing
Set IncludedQuotes = Nothing
Set TestRange = Nothing
Set CopyRange = Nothing
Set oSheet = Nothing
Set oCell = Nothing

End Sub
'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Sub CompositeToMatReq()

Dim home As String
Dim LastRowNum As Integer
Dim CompListName As String
Dim DeleteOnComplete As Boolean
Dim MaterialStop As Integer
Dim RowsToAdd As Integer
Dim Free_Range As Range

Application.ScreenUpdating = False
Application.EnableEvents = False
Application.DisplayAlerts = False
CurrentCalcMode = Application.Calculation
Application.Calculation = xlManual

DeleteOnComplete = False
RowsToAdd = 0

If ActiveSheet.Type = xlWorksheet Then
    If Range("A1").Value = "Composite Parts List" Then
        '@@@@@ then we're starting from a composite list already, else create a new unique list
        CompListName = ActiveSheet.Name
    Else
        If Range("A9").Value = True Then
            CompListName = "MR-Data " & Format(Date, "dd-mmm-yyyy")
            Composite CompListName, , , , , , True
            DeleteOnComplete = True
        Else
            MsgQuick Chr(10) & "This is not a sheet you can Mat Req"
            GoTo SkipToExit
        End If
    End If
Else
    MsgQuick Chr(10) & "This is not a sheet you can Mat Req"
    GoTo SkipToExit
End If

'@@@@@ find the last row of data on the Composite Parts List

LastRowNum = FindFirst(Range("B:B"), "END OF LIST").Row - 1
If LastRowNum = 3 Then
    If DeleteOnComplete Then Sheets(CompListName).Delete
    GoTo SkipToExit '@@@@@ No items on the list
End If

Columns.EntireColumn.Hidden = False
Rows.EntireRow.Hidden = False

'@@@@@ determine if any expenses other than material are on the list
Set Free_Range = FindFirstWild(Range("G:G"), "SUB")
If Free_Range Is Nothing Then Set Free_Range = FindFirstWild(Range("G:G"), "TPM")
If Free_Range Is Nothing Then Set Free_Range = FindFirstWild(Range("G:G"), "TPW")
If Not Free_Range Is Nothing Then
    MaterialStop = Free_Range.Row - 1
Else
    MaterialStop = LastRowNum
End If

'@@@@@ create the new-unique req sht, then transfer the data to it

Sheets("REQ-BLANK").Visible = True
Sheets("REQ-BLANK").Copy After:=Sheets(Sheets.Count)
home = "MatReq " & Format(Date, "dd-mmm-yyyy, ") & Format(time, "hh.mm am/pm")
DeleteSheetIfExists (home)
ActiveSheet.Name = home
Sheets("REQ-BLANK").Visible = False
Sheets(home).Activate

'@@@@@ if other expenses exist, create the special section for them
If MaterialStop < LastRowNum Then
    '@@@@@ create the new section
    Range("A4:O15").Select
    Selection.Copy
    Range("A22").Select
    ActiveSheet.Paste
    '@@@@@ blank out unused columns
    Range("L22:M33").Select
    Selection.ClearContents
    Selection.Interior.Color = 14540253
    Range("J22:J33").Select
    Selection.ClearContents
    Selection.Interior.Color = 14540253
    Range("I22").Value = "Type"
    '@@@@@ alter the validation to repurpose fixture
    Range("I23:I32").Select
    Selection.ClearContents
    With Selection.Validation
        .Delete
        .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, _
            Operator:=xlBetween, Formula1:="SUB,TPM,TPW"
    End With
    '@@@@@ color the section
    Range("A22:S22").Select
    Selection.Interior.Color = 16764057 'admin blue
    Range("A33:S33").Select
    Selection.Interior.Color = 16764057 'admin blue
    '@@@@@ add rows to the req sheet to maintain 3 unused rows
    If LastRowNum - MaterialStop > 7 Then
        Rows("24:24").Copy
        RowsToAdd = (LastRowNum - MaterialStop) - 7
        Rows("24:" & 23 + RowsToAdd).Insert Shift:=xlDown
    End If
    '@@@@@ copy the admin/special items over to the matreq
    Sheets(CompListName).Activate
    Range("B" & MaterialStop + 1 & ":F" & LastRowNum).Copy
    Sheets(home).Activate
    Range("C23").Select
    Selection.PasteSpecial Paste:=xlPasteValues
    'Sheets(CompListName).Activate
    'Range("G" & MaterialStop + 1 & ":G" & LastRowNum).Copy
    'Sheets(home).Activate
    'Range("I23").Select
    'Selection.PasteSpecial Paste:=xlPasteValues
    Sheets(CompListName).Activate
    Range("T" & MaterialStop + 1 & ":T" & LastRowNum).Copy
    Sheets(home).Activate
    Range("B23").Select
    Selection.PasteSpecial Paste:=xlPasteValues
    'Sheets(CompListName).Activate
    'Range("V" & MaterialStop + 1 & ":V" & LastRowNum).Copy
    'Sheets(home).Activate
    'Range("L23").Select
    'Selection.PasteSpecial Paste:=xlPasteValues
    Set Free_Range = FindFirstWild(Range("I:I"), "TP")
    If Not Free_Range Is Nothing Then
        Free_Range.Select
        Set Free_Range = FindFirst(Range("I" & Free_Range.Row & ":I" & 32 + RowsToAdd), "")
        Range("H" & Selection.Row & ":S" & Free_Range.Row - 1).Select
        Selection.Interior.Color = 16764108 'CC purple
    End If
End If

If MaterialStop > 10 Then '@@@@@ add rows to the req sheet to maintain 3 unused rows
    Rows("6:6").Copy
    RowsToAdd = MaterialStop - 10
    Rows("6:" & 5 + RowsToAdd).Insert Shift:=xlDown
End If
'@@@@@ copy the body of the material over
Sheets(CompListName).Activate
Range("B4:F" & MaterialStop).Copy
Sheets(home).Activate
Range("C5").Select
Selection.PasteSpecial Paste:=xlPasteValues
'Sheets(CompListName).Activate
'Range("G4:G" & MaterialStop).Copy
'Sheets(home).Activate
'Range("I5").Select
'Selection.PasteSpecial Paste:=xlPasteValues
Sheets(CompListName).Activate
Range("T4:T" & MaterialStop).Copy
Sheets(home).Activate
Range("B5").Select
Selection.PasteSpecial Paste:=xlPasteValues
'Sheets(CompListName).Activate
'Range("V4:V" & MaterialStop).Copy
'Sheets(home).Activate
'Range("L5").Select
'Selection.PasteSpecial Paste:=xlPasteValues
Sheets(CompListName).Activate
Range("W4:W" & FindFirst(Range("W:W"), "END OF LIST").Row - 1).Copy '_____________________________________________________________
Sheets(home).Activate
Range("P5").Select
Selection.PasteSpecial Paste:=xlPasteValues
Range("A1").Select
If DeleteOnComplete Then Sheets(CompListName).Delete
ActiveWindow.ScrollColumn = 6

'@@@@@ include some basic job info

Sheets("Job Set-up").Range("F6").Copy
Range("H3").Select
Selection.PasteSpecial Paste:=xlPasteValues
Range("A" & Range("Footer_MatReq").Row + 2).Select
Selection.Value = "Salesperson: " & Sheets("Job Set-up").Range("B4").Value
Selection.Offset(1, 0).Select
Selection.Value = "Project Manager: " & Sheets("Job Set-up").Range("B7").Value
Selection.Offset(1, 0).Select
Selection.Value = "Special Pricing: " & Sheets("Job Info & Cover").Range("C41").Value
Range("D2").Value = Range("D2").Value
Range("D3").Value = Range("D3").Value
Range("H2").Value = Range("H2").Value

'@@@@@ then some clean up activities
SkipToExit:

Set Free_Range = Nothing
Application.Calculation = CurrentCalcMode
Application.ScreenUpdating = True
Application.EnableEvents = True
Application.DisplayAlerts = True
Set CurrentCalcMode = Nothing

End Sub
'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Sub CompositeListLink()

Application.ScreenUpdating = False
Application.EnableEvents = False
Application.DisplayAlerts = False
CurrentCalcMode = Application.Calculation
Application.Calculation = xlManual

Dim TargetRow As Integer
Dim CompListEnd As Integer
Dim CompListRow As Integer
Dim IncludedQuotes As Object
Dim Free_Range As Range '@@@@@ Junk Range variable used for many different things
Dim TestRange As Range
Dim CompTabName As String
Dim EndGenMatRow As Integer
Dim SheetNum As Integer

Set IncludedQuotes = ActiveWindow.SelectedSheets
OnFirstRun = True
ProgressGoal = IncludedQuotes.Count
ProgressFormShow "Creating Quote Links to Composite..."

'@@@@@ confirm that "Composite Parts List" tab exists, else request
For Each oSheet In Worksheets
    If oSheet.Name = "Composite Parts List" Then CompTabName = "Composite Parts List": Exit For
Next

If CompTabName = Empty Then
    CompTabName = InputBox("Composite Tab Name to Use", "INPUT")
End If

On Error GoTo SkipToExit '@@@@@ confirm that the name given exists, else exit
    Sheets(CompTabName).Activate

'@@@@@ find the last row of data on the Composite Parts List

CompListEnd = FindFirst(Range("B:B"), "END OF LIST").Row - 1

'@@@@@ then get the data from each sheet

SheetNum = 0
For Each oSheet In IncludedQuotes
    oSheet.Activate
    ProgressPercent = ((SheetNum * 3) + 1) / (ProgressGoal * 3)
    ProgressFormUpdate ProgressPercent, oSheet.Name & ": ...Linking"
    If oSheet.Type = xlWorksheet Then
        If oSheet.Range("A9").Value = True Then
    
            Set Free_Range = oSheet.Range("Header_Quote_GenMat")
            Set Free_Range = Free_Range.Offset(1, 0)
            Set TestRange = Cells(Free_Range.Row, 5)
            Set Free_Range = oSheet.Range("Footer_Quote_Material")
            Set TestRange = TestRange.Resize(Free_Range.Row - TestRange.Row, 1)
            
            Set Free_Range = oSheet.Range("Header_Quote_MiscMat")
            EndGenMatRow = Free_Range.Row
            
            For Each oCell In TestRange
                Set Free_Range = _
                  FindFirst(Sheets(CompTabName).Range("D4:D" & CompListEnd), oCell.Value)
                If Free_Range Is Nothing Or oCell.Value = "" Then
                    '@@@@@ skip it
                Else
                    If FindFirst(Sheets(CompTabName).Range("D" & Free_Range.Row + 1 & _
                            ":D" & CompListEnd), oCell.Value) Is Nothing Or _
                            Free_Range.Row = CompListEnd Then
                        TargetRow = oCell.Row
                        CompListRow = Free_Range.Row
                        Range("B" & TargetRow).Select
                        Selection.NumberFormat = "General"
                        Selection.Formula = _
                                "=INDEX('" & CompTabName & _
                                "'!$A:$A," & _
                                "MATCH(E" & TargetRow & ",'" & CompTabName & "'!$D:$D,0))"
                        Selection.Interior.Color = 16764057
                        Range("C" & TargetRow).Select
                        Selection.NumberFormat = "General"
                        Selection.Interior.Color = 16764057
                        Selection.Formula = _
                                "=INDEX('" & CompTabName & _
                                "'!$B:$B," & _
                                "MATCH(E" & TargetRow & ",'" & CompTabName & "'!$D:$D,0))"
                        Range("F" & TargetRow).Select
                        Selection.NumberFormat = "General"
                        Selection.Formula = _
                                "=INDEX('" & CompTabName & _
                                "'!$E:$E," & _
                                "MATCH(E" & TargetRow & ",'" & CompTabName & "'!$D:$D,0))"
                        
                        Selection.Interior.Color = 16764057
                        Range("G" & TargetRow).Select
                        Selection.NumberFormat = "_($* #,##0.00_);_($* (#,##0.00);_($* ""-""??_);_(@_)"
                        Selection.Formula = _
                                "=INDEX('" & CompTabName & _
                                "'!$F:$F," & _
                                "MATCH(E" & TargetRow & ",'" & CompTabName & "'!$D:$D,0))"
                        Selection.Interior.Color = 16764057
                        Range("O" & TargetRow).Select
                        Selection.NumberFormat = "General"
                        Selection.Formula = _
                                "=INDEX('" & CompTabName & _
                                "'!$H:$H," & _
                                "MATCH(E" & TargetRow & ",'" & CompTabName & "'!$D:$D,0))"
                        Selection.Interior.Color = 16764057
                        Range("P" & TargetRow).Select
                        Selection.NumberFormat = "General"
                        Selection.Formula = _
                                "=INDEX('" & CompTabName & _
                                "'!$I:$I," & _
                                "MATCH(E" & TargetRow & ",'" & CompTabName & "'!$D:$D,0))"
                        Selection.Interior.Color = 16764057
                        Range("R" & TargetRow).Select
                        Selection.NumberFormat = "General"
                        Selection.Formula = _
                                "=INDEX('" & CompTabName & _
                                "'!$J:$J," & _
                                "MATCH(E" & TargetRow & ",'" & CompTabName & "'!$D:$D,0))"
                        Selection.Interior.Color = 16764057
                        Range("S" & TargetRow).Select
                        Selection.NumberFormat = "General"
                        Selection.Formula = _
                                "=INDEX('" & CompTabName & _
                                "'!$K:$K," & _
                                "MATCH(E" & TargetRow & ",'" & CompTabName & "'!$D:$D,0))"
                        Selection.Interior.Color = 16764057
                        Range("U" & TargetRow).Select
                        Selection.NumberFormat = "General"
                        Selection.Formula = _
                                "=INDEX('" & CompTabName & _
                                "'!$L:$L," & _
                                "MATCH(E" & TargetRow & ",'" & CompTabName & "'!$D:$D,0))"
                        Selection.Interior.Color = 16764057
                        Range("V" & TargetRow).Select
                        Selection.NumberFormat = "General"
                        Selection.Formula = _
                                "=INDEX('" & CompTabName & _
                                "'!$M:$M," & _
                                "MATCH(E" & TargetRow & ",'" & CompTabName & "'!$D:$D,0))"
                        Selection.Interior.Color = 16764057
                        
                        If TargetRow < EndGenMatRow Then
                            Range("M" & TargetRow).Select
                            Selection.NumberFormat = "General"
                            Selection.Formula = _
                                    "=INDEX('" & CompTabName & _
                                    "'!$G:$G," & _
                                    "MATCH(E" & TargetRow & ",'" & CompTabName & "'!$D:$D,0))"
                            Selection.Interior.Color = 16764057
                            Range("AA" & TargetRow).Select
                            Selection.NumberFormat = "General"
                            Selection.Formula = _
                                    "=INDEX('" & CompTabName & _
                                    "'!$N:$N," & _
                                    "MATCH(E" & TargetRow & ",'" & CompTabName & "'!$D:$D,0))"
                            Selection.Interior.Color = 16764057
                            Range("AB" & TargetRow).Select
                            Selection.NumberFormat = "General"
                            Selection.Formula = _
                                    "=INDEX('" & CompTabName & _
                                    "'!$O:$O," & _
                                    "MATCH(E" & TargetRow & ",'" & CompTabName & "'!$D:$D,0))"
                            Selection.Interior.Color = 16764057
                            Range("AC" & TargetRow).Select
                            Selection.NumberFormat = "General"
                            Selection.Formula = _
                                    "=INDEX('" & CompTabName & _
                                    "'!$P:$P," & _
                                    "MATCH(E" & TargetRow & ",'" & CompTabName & "'!$D:$D,0))"
                            Selection.Interior.Color = 16764057
                            Range("AD" & TargetRow).Select
                            Selection.NumberFormat = "General"
                            Selection.Formula = _
                                    "=INDEX('" & CompTabName & _
                                    "'!$Q:$Q," & _
                                    "MATCH(E" & TargetRow & ",'" & CompTabName & "'!$D:$D,0))"
                            Selection.Interior.Color = 16764057
                            Range("AE" & TargetRow).Select
                            Selection.NumberFormat = "General"
                            Selection.Formula = _
                                    "=INDEX('" & CompTabName & _
                                    "'!$R:$R," & _
                                    "MATCH(E" & TargetRow & ",'" & CompTabName & "'!$D:$D,0))"
                            Selection.Interior.Color = 16764057
                            Range("AF" & TargetRow).Select
                            Selection.NumberFormat = "General"
                            Selection.Formula = _
                                    "=INDEX('" & CompTabName & _
                                    "'!$S:$S," & _
                                    "MATCH(E" & TargetRow & ",'" & CompTabName & "'!$D:$D,0))"
                            Selection.Interior.Color = 16764057
                        End If
                    End If
                End If
            Next oCell
        End If
    End If
    SheetNum = SheetNum + 1
Next oSheet

'@@@@@ cleanup activities

SkipToExit:

ProgressFormClose

Set Free_Range = Nothing
Set TestRange = Nothing
Set IncludedQuotes = Nothing
Set oSheet = Nothing
Set oCell = Nothing

Application.Calculation = CurrentCalcMode
Application.ScreenUpdating = True
Application.EnableEvents = True
Application.DisplayAlerts = True
Set CurrentCalcMode = Nothing

End Sub
'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Sub CompositeRemoveLinks()

Application.ScreenUpdating = False
Application.EnableEvents = False
Application.DisplayAlerts = False
CurrentCalcMode = Application.Calculation
Application.Calculation = xlManual

YesClicked = False
YesNoMenu "De-Link Options", "Convert Formulas to Values?"
CompositeDeLink , , YesClicked

Application.Calculation = CurrentCalcMode
Application.ScreenUpdating = True
Application.EnableEvents = True
Application.DisplayAlerts = True
Set CurrentCalcMode = Nothing

End Sub
'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Sub CompositeDeLink(Optional CompTabName As String, Optional IncludedQuotes As Object, _
                    Optional YesClicked As Boolean = True)

Dim TestRange As Range
Dim Free_Range As Range
Dim DidDoIt As Boolean

DidDoIt = False

If IncludedQuotes Is Nothing Then Set IncludedQuotes = ActiveWindow.SelectedSheets

If CompTabName = Empty Then
    For Each oSheet In Worksheets
        If oSheet.Name = "Composite Parts List" Then _
           CompTabName = "Composite Parts List": Exit For
    Next oSheet
    If CompTabName = Empty Then
        CompTabName = InputBox("Composite Tab Name to Use", "INPUT")
        If CompTabName = "" Then Exit Sub
    End If
End If
On Error GoTo SkipSubroutine
Sheets(CompTabName).Activate

'@@@@@ then get the data from each sheet

For Each oSheet In IncludedQuotes
    oSheet.Activate
    If oSheet.Type = xlWorksheet Then
        If oSheet.Range("A9").Value = True Then
            
            '@@@@@ save the view, unfilter & unhide everything
            'ViewSaveQuoteOpen '?? THIS IS NOT NECESSARY
    
            Set Free_Range = oSheet.Range("Header_Quote_GenMat")
            Set Free_Range = Free_Range.Offset(1, 0)
            Set TestRange = Cells(Free_Range.Row, 7)
            Set Free_Range = oSheet.Range("Footer_Quote_Material")
            Set TestRange = TestRange.Resize(Free_Range.Row - TestRange.Row, 1)
            
            Set Free_Range = oSheet.Range("Header_Quote_MiscMat")
            EndGenMatRow = Free_Range.Row
            
            For Each oCell In TestRange
                Set Free_Range = TestRange.Find(What:=CompTabName, LookIn:=xlFormulas, _
                    LookAt:=xlPart, SearchOrder:=xlByRows, MatchCase:=False)
                If Free_Range Is Nothing Then
                    Exit For
                Else
                    TargetRow = Free_Range.Row
                    Range("B" & TargetRow).Select
                    If YesClicked Then
                        Selection.Copy
                        Selection.PasteSpecial Paste:=xlPasteValues
                    Else: Selection.FormulaR1C1 = Empty
                    End If
                    Selection.Interior.Pattern = xlNone
'>>>>>>
                    Range("C" & TargetRow).Select
                    If YesClicked Then
                        Selection.Copy
                        Selection.PasteSpecial Paste:=xlPasteValues
                    Else: Selection.FormulaR1C1 = Empty
                    End If
                    Selection.Interior.Pattern = xlNone
                    Range("F" & TargetRow).Select
                    If YesClicked Then
                        Selection.Copy
                        Selection.PasteSpecial Paste:=xlPasteValues
                    Else: Selection.FormulaR1C1 = Empty
                    End If
                    Selection.Interior.Pattern = xlNone
'>>>>>>
                    Range("G" & TargetRow).Select
                    If YesClicked Then
                        Selection.Copy
                        Selection.PasteSpecial Paste:=xlPasteValues
                    Else: Selection.FormulaR1C1 = Empty
                    End If
                    Selection.Interior.Color = 13434828
                    Range("M" & TargetRow).Select
                    If YesClicked Then
                        Selection.Copy
                        Selection.PasteSpecial Paste:=xlPasteValues
                    Else: Selection.FormulaR1C1 = "F"
                    End If
                    Selection.Interior.Color = 13434828
                    Range("O" & TargetRow).Select
                    If YesClicked Then
                        Selection.Copy
                        Selection.PasteSpecial Paste:=xlPasteValues
                    Else: Selection.FormulaR1C1 = "L"
                    End If
                    Selection.Interior.Color = 13434828
                    Range("P" & TargetRow).Select
                    If YesClicked Then
                        Selection.Copy
                        Selection.PasteSpecial Paste:=xlPasteValues
                    Else: Selection.FormulaR1C1 = Empty
                    End If
                    Selection.Interior.Color = 13434828
                    Range("R" & TargetRow).Select
                    If YesClicked Then
                        Selection.Copy
                        Selection.PasteSpecial Paste:=xlPasteValues
                    Else: Selection.FormulaR1C1 = Empty
                    End If
                    Selection.Interior.Color = 13434828
                    Range("S" & TargetRow).Select
                    If YesClicked Then
                        Selection.Copy
                        Selection.PasteSpecial Paste:=xlPasteValues
                    Else: Selection.FormulaR1C1 = Empty
                    End If
                    Selection.Interior.Color = 13434828
                    Range("U" & TargetRow).Select
                    If YesClicked Then
                        Selection.Copy
                        Selection.PasteSpecial Paste:=xlPasteValues
                    Else: Selection.FormulaR1C1 = Empty
                    End If
                    Selection.Interior.Color = 13434828
                    Range("V" & TargetRow).Select
                    If YesClicked Then
                        Selection.Copy
                        Selection.PasteSpecial Paste:=xlPasteValues
                    Else: Selection.FormulaR1C1 = Empty
                    End If
                    Selection.Interior.Color = 13434828
                    If TargetRow < EndGenMatRow Then
                        Range("AA" & TargetRow).Select
                        If YesClicked Then
                            Selection.Copy
                            Selection.PasteSpecial Paste:=xlPasteValues
                        Else: Selection.FormulaR1C1 = Empty
                        End If
                        Selection.Interior.Color = 13434828
                        Range("AB" & TargetRow).Select
                        If YesClicked Then
                            Selection.Copy
                            Selection.PasteSpecial Paste:=xlPasteValues
                        Else: Selection.FormulaR1C1 = Empty
                        End If
                        Selection.Interior.Color = 13434828
                        Range("AC" & TargetRow).Select
                        If YesClicked Then
                            Selection.Copy
                            Selection.PasteSpecial Paste:=xlPasteValues
                        Else: Selection.FormulaR1C1 = Empty
                        End If
                        Selection.Interior.Color = 13434828
                        Range("AD" & TargetRow).Select
                        If YesClicked Then
                            Selection.Copy
                            Selection.PasteSpecial Paste:=xlPasteValues
                        Else: Selection.FormulaR1C1 = Empty
                        End If
                        Selection.Interior.Color = 13434828
                        Range("AE" & TargetRow).Select
                        If YesClicked Then
                            Selection.Copy
                            Selection.PasteSpecial Paste:=xlPasteValues
                        Else: Selection.FormulaR1C1 = Empty
                        End If
                        Selection.Interior.Color = 13434828
                        Range("AF" & TargetRow).Select
                        If YesClicked Then
                            Selection.Copy
                            Selection.PasteSpecial Paste:=xlPasteValues
                        Else: Selection.FormulaR1C1 = Empty
                        End If
                        Selection.Interior.Color = 13434828
                    End If
                    DidDoIt = True
                End If
            Next oCell
        End If
    End If
Next oSheet

If DidDoIt Then _
    MsgTimed Chr(10) & "All formula Links to " & CompTabName & " have been REMOVED.", _
             "NOTICE", 4, True

SkipSubroutine:

Set Free_Range = Nothing
Set TestRange = Nothing
Set IncludedQuotes = Nothing
Set oSheet = Nothing
Set oCell = Nothing

End Sub
'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Sub CompSortConsolodate(CompChosenName As String, WithHeaders As Boolean, _
                        WithSubHeaders As Boolean, WithSortHeaders As Boolean, _
                        Optional WithWarrantyMaint As Boolean = False)

Dim TestRange As Range
Dim LastRowNum As Integer
Dim MaterialStop As Integer
Dim SortStart As Integer
Dim SortStop As Integer
Dim JustDoIt As Boolean
Dim SortAll As Boolean
Dim Free_Range As Range
SortAll = True

'@@@@@ first sort

If WithHeaders = True Then SortAll = False
If WithSubHeaders = True Then SortAll = False
If WithSortHeaders = True Then SortAll = False
'If WithWarrantyMaint = True Then SortAll = False
Sheets(CompChosenName).Activate

'@@@@@ find the last row of data on the CompList

LastRowNum = LastRow

If LastRowNum = 3 Then
    If DeleteOnComplete Then Sheets(CompListName).Delete
    GoTo SkipToExit '@@@@@ No items on the list
End If

MaterialStop = LastRowNum
SortStart = 4

If SortAll Or WithSortHeaders Then
    
    Do While SortStart < LastRowNum    'loop sort subsections until LastRowNum
    
    'find start & stop of next sort area
    
    For Each oCell In Range("C" & SortStart & ":C" & LastRowNum)
        If IsNumeric(oCell) And oCell.Value <> 0 Then
            SortStart = oCell.Row
            Exit For ' find first numberic 'qty' cell and assign as start of sort
        End If
        If SortStart = LastRowNum Then Exit Do
    Next oCell
    
    If SortAll Then
        SortStop = LastRowNum
    Else
        For Each oCell In Range("C" & SortStart & ":C" & LastRowNum)
            If IsNumeric(oCell) And oCell.Value = 0 Then
                SortStop = oCell.Row - 1
                Exit For
            ElseIf IsNumeric(oCell) And oCell.Value <> 0 Then
                'SortStop = oCell.Row
            Else
                SortStop = oCell.Row - 1
                Exit For
            End If
        Next oCell
    End If

    ' then sort the section found
    Range("A" & SortStart & ":V" & SortStop).Select
    ActiveWorkbook.Worksheets(CompChosenName).Sort.SortFields.Clear
    ActiveWorkbook.Worksheets(CompChosenName).Sort.SortFields.Add Key:=Range("B" & SortStart _
        & ":B" & SortStop), SortOn:=xlSortOnValues, Order:=xlAscending, _
        DataOption:=xlSortNormal
    ActiveWorkbook.Worksheets(CompChosenName).Sort.SortFields.Add Key:=Range("D" & SortStart _
        & ":D" & SortStop), SortOn:=xlSortOnValues, Order:=xlAscending, _
        DataOption:=xlSortNormal
    ActiveWorkbook.Worksheets(CompChosenName).Sort.SortFields.Add Key:=Range("E" & SortStart _
        & ":E" & SortStop), SortOn:=xlSortOnValues, Order:=xlAscending, _
        DataOption:=xlSortNormal
    ActiveWorkbook.Worksheets(CompChosenName).Sort.SortFields.Add Key:=Range("F" & SortStart _
        & ":F" & SortStop), SortOn:=xlSortOnValues, Order:=xlAscending, _
        DataOption:=xlSortNormal
    If MaterialStop = SortStop Then
        With ActiveWorkbook.Worksheets(CompChosenName).Sort
            .SetRange Range("A" & SortStart & ":V" & SortStop)
            .MatchCase = True
            .Orientation = xlTopToBottom
            .SortMethod = xlPinYin
            .Apply
        End With
    Else
        With ActiveWorkbook.Worksheets(CompChosenName).Sort
            .SetRange Range("A" & SortStart & ":V" & MaterialStop)
            .MatchCase = True
            .Orientation = xlTopToBottom
            .SortMethod = xlPinYin
            .Apply
        End With
        With ActiveWorkbook.Worksheets(CompChosenName).Sort
            .SetRange Range("A" & MaterialStop + 1 & ":V" & SortStop)
            .MatchCase = True
            .Orientation = xlTopToBottom
            .SortMethod = xlPinYin
            .Apply
        End With
    End If

    '@@@@@ adjust for "waste&complete" for nurse call quote tabs
                    
    Set Free_Range = FindFirstWild(Range("E" & SortStart - 1 & ":E" & SortStop), "Waste & Complete")
    Do Until Free_Range Is Nothing
        Set Free_Range = FindFirst(Range("D" & SortStart - 1 & ":D" & SortStop), Free_Range.Offset(0, -1).Value)
        Set TestRange = FindFirst(Range("D" & Free_Range.Row & ":D" & SortStop), Free_Range.Value)
        If InStr(Free_Range.Offset(0, 1).Value, "Waste & Complete") Then
            Free_Range.Offset(0, 1).Value = Mid(Free_Range.Offset(0, 1).Value, 1, InStr(Free_Range.Offset(0, 1).Value, "Waste & Complete") - 2)
        End If
        Do Until TestRange Is Nothing
            Free_Range.Offset(0, -1).Value = Free_Range.Offset(0, -1).Value + TestRange.Offset(0, -1).Value
            Free_Range.Offset(0, -1).Value = Application.Round(Free_Range.Offset(0, -1).Value, 4)
            Rows(TestRange.Row & ":" & TestRange.Row).Select
            Selection.Delete Shift:=xlUp
            SortStop = SortStop - 1
            LastRowNum = LastRowNum - 1
            '@@@@@ new code ------------------------------------------------------------
            If Free_Range.Offset(0, -1).Value = 0 Then
                Set TestRange = Free_Range
                Set Free_Range = TestRange.Offset(1, 0)
                Rows(TestRange.Row & ":" & TestRange.Row).Select
                Selection.Delete Shift:=xlUp
                SortStop = SortStop - 1
                LastRowNum = LastRowNum - 1
                If InStr(Free_Range.Offset(0, 1).Value, "Waste & Complete") Then
                    Free_Range.Offset(0, 1).Value = Mid(Free_Range.Offset(0, 1).Value, 1, InStr(Free_Range.Offset(0, 1).Value, "Waste & Complete") - 2)
                End If
            End If
            '@@@@@ ---------------------------------------------------------------------
            If Selection.Row > SortStop Then
                Set TestRange = Nothing
            Else
                Set TestRange = FindFirst(Range("D" & Free_Range.Row + 1 & ":D" & SortStop), Free_Range.Value)
            End If
            If Free_Range.Offset(0, -1).Value = 0 Then
                Rows(Free_Range.Row & ":" & Free_Range.Row).Select
                Selection.Delete Shift:=xlUp
                SortStop = SortStop - 1
                LastRowNum = LastRowNum - 1
            End If
        Loop
        Set Free_Range = FindFirstWild(Range("E" & SortStart - 1 & ":E" & SortStop), "Waste & Complete")
    Loop

    ' advance the indexes to ensure the loop ends

    SortStart = SortStop + 1
    SortStop = SortStart

    Loop 'loop to search for additional sort sections, or done when at LastRowNum

End If

'@@@@@ then consolidate

If SortAll Or WithSortHeaders Then
    Set TestRange = Range("D4:D" & LastRowNum)
    For x = 1 To LastRowNum
        JustDoIt = False
        If Range("D" & x).Value = Range("D" & x).Offset(1, 0).Value _
        And Range("D" & x).Value <> "" Then JustDoIt = True
        If Range("C" & x).Value = 0 Then JustDoIt = False
        If JustDoIt Then '@@@@@ then consolidate the row with the next
            If IsError(Range("B" & x).Value) _
            Or IsError(Range("B" & x).Offset(1, 0).Value) _
            Or IsError(Range("E" & x).Value) _
            Or IsError(Range("E" & x).Offset(1, 0).Value) _
            Or IsError(Range("F" & x).Value) _
            Or IsError(Range("F" & x).Offset(1, 0).Value) Then
                '@@@@@ then ignore these rows due to error
            Else
                If Range("B" & x).Value = Range("B" & x).Offset(1, 0).Value And _
                   Range("E" & x).Value = Range("E" & x).Offset(1, 0).Value And _
                   Range("F" & x).Value = Range("F" & x).Offset(1, 0).Value Then
                        Range("C" & x) = Range("C" & x).Value + Range("C" & x + 1).Value
                        Range("V" & x) = Range("V" & x).Value + Range("V" & x + 1).Value
                        Rows(x + 1 & ":" & x + 1).Select
                        Selection.Delete Shift:=xlUp
                        LastRowNum = LastRowNum - 1
                        x = x - 1
                End If
            End If
        End If
    Next x
End If

SkipToExit:

Set Free_Range = Nothing
Set TestRange = Nothing
Set oCell = Nothing

End Sub
Attribute VB_Name = "CTSI_Macros_r2"
Sub WorkSheetNameList(Optional NonSense As Boolean)

'@@@@@ the following checks the Base System Title, Qty, Notes, and Bidbox columns to see if text
'@@@@@    has been overwritten for a specific tab, checks if the tab still exists, puts the text
'@@@@@    on the tab, and replaces the formula that existed before being overwritten
    
Application.ScreenUpdating = False
CurrentCalcMode = Application.Calculation
Application.Calculation = xlManual

'''*********************************************************************************************
'''************ PROGRAMMERS WARNING - A CRASH HERE WILL LEAVE AUTO-CALCULATION OFF *************
'''*********************************************************************************************

Dim oSheet As Object
Dim oCell As Excel.Range
Dim oCellRow As Single
Dim SystemTabName As String
Dim RowStart As Single
Dim RowStop As Single

'@@@@@ confirm it is a Summary tab
On Error GoTo NotSummaryExit
Set oCell = Range("SummaryQty")
On Error GoTo 0
homeSummary = ActiveSheet.Name

'''*********************************************************************************************
'''****************** Subroutine to Check Summary Columns and fix overwrites *******************
'''*********************************************************************************************

'@@@@@ Check System Title Column in Summary and fix overwrites *********************************

For Each oCell In Range("SummaryQuoteTitles")
    If Not oCell.Cells.HasFormula Then
        oCellRow = oCell.Row
        SystemTabName = Range("N" & oCell.Row)
'@@@@@ Confirm that Tab Name column has a value
        If Not SystemTabName = "" Then
'@@@@@ Confirm that that value is a existing sheet name
On Error GoTo SkipTabTextSet
            Set oSheet = Sheets(SystemTabName)
            If oSheet Is Nothing Then GoTo SkipTabTextSet
            Sheets(SystemTabName).Range("Z12").Value = oCell
SkipTabTextSet:
        End If
'@@@@@ Now replace the overwritten System Title with the formula that should be there
        Range("C9").Copy
        oCell.Select
        ActiveSheet.Paste
    End If
Next

'@@@@@ Check System Qty Column in Summary and fix overwrites ***********************************

For Each oCell In Range("SummaryQty")
    If Not oCell.Cells.HasFormula Then
        oCellRow = oCell.Row
        SystemTabName = Range("N" & oCell.Row)
'@@@@@ Confirm that Tab Name column has a value
        If Not SystemTabName = "" Then
'@@@@@ Confirm that that value is a existing sheet name
On Error GoTo SkipTabQtySet
            Set oSheet = Sheets(SystemTabName)
            If oSheet Is Nothing Then GoTo SkipTabQtySet
            Sheets(SystemTabName).Range("Quote_Qty").Value = oCell
SkipTabQtySet:
        End If
'@@@@@ Now replace the overwritten System Title with the formula that should be there
        Range("I9").Copy
        oCell.Select
        ActiveSheet.Paste
    End If
Next

'@@@@@ Check System Notes Column in Summary and fix overwrites *********************************

For Each oCell In Range("SummaryNotes")
    If Not oCell.Cells.HasFormula Then
        oCellRow = oCell.Row
        SystemTabName = Range("N" & oCell.Row)
'@@@@@ Confirm that Tab Name column has a value
        If Not SystemTabName = "" Then
'@@@@@ Confirm that that value is a existing sheet name
On Error GoTo SkipTabNotesSet
            Set oSheet = Sheets(SystemTabName)
            If oSheet Is Nothing Then GoTo SkipTabNotesSet
            Sheets(SystemTabName).Range("Quote_ShortNote").Value = oCell
SkipTabNotesSet:
        End If
'@@@@@ Now replace the overwritten BaseSystemDesc with the formula that should be there
        Range("U9").Copy
        oCell.Select
        ActiveSheet.Paste
    End If
Next

'@@@@@ Check System BidBox Array in Summary and fix overwrites *********************************

Dim SystemBidBoxArray As Range
Dim ShouldFixBidBox As Boolean
Dim BidBoxField As String

For N = 1 To 2

    If N = 1 Then BidBoxField = "Option"
    If N = 2 Then BidBoxField = "Base"

    RowStart = Range("Header_Summary_" & BidBoxField).Row + 1
    RowStop = Range("Footer_Summary_" & BidBoxField).Row - 1

    For iRow = RowStart To RowStop
        Set SystemBidBoxArray = Range("V" & iRow & ":" & "AJ" & iRow)
        ShouldFixBidBox = False
        For Each oCell In SystemBidBoxArray
            If Not oCell.Cells.HasFormula Then ShouldFixBidBox = True
        Next oCell
        If ShouldFixBidBox Then
            SystemTabName = Range("N" & iRow)
'@@@@@ Confirm that Tab Name column has a value
            If Not SystemTabName = "" Then
                    
'@@@@@ Confirm that that value is a existing sheet name
On Error GoTo SkipTabBidBoxSet
                SystemBidBoxArray.Copy
                Set oSheet = Sheets(SystemTabName)
                If oSheet Is Nothing Then GoTo SkipTabBidBoxSet
                Sheets(SystemTabName).Select
                Range("Quote_YesNo_Range").PasteSpecial Paste:=xlPasteValues, _
                        Operation:=xlNone, SkipBlanks:=False, Transpose:=True
                Range("C26").Select
SkipTabBidBoxSet:
            End If
'@@@@@ Now replace the overwritten BaseSystemDesc with the formula that should be there
            Sheets(homeSummary).Select
            Range("BidBoxFixRange").Copy
            SystemBidBoxArray.Select
            ActiveSheet.Paste
        End If
    Next iRow
Next N

'''*********************************************************************************************
'''****** And Finally following creates the main, base, & option lists of quote tab names ******
'''*********************************************************************************************

Dim IsBaseSystem As Boolean
Dim IsSystemOption As Boolean
Dim MainListCount As Single
Dim BaseListCount As Single
Dim OptionListCount As Single
Dim BaseRowAdjustmt As Single
Dim OptionRowAdjustmt As Single
Dim IsQuoteError As Boolean
'Dim Free_Range As Range
Dim FixApostrophy As Boolean
Dim ApostrophyFirstAsk As Boolean

IsBaseSystem = False
IsSystemOption = True
IsQuoteError = False
FixApostrophy = False
ApostrophyFirstAsk = True
BaseListCount = 0
OptionListCount = 0
MainListCount = 1

Worksheets("Job Info & Cover").Range("AA:AA").ClearContents
Worksheets(homeSummary).Range("QuoteTabList_Summary").ClearContents

BaseRowAdjustmt = Range("Header_Summary_Base").Row
OptionRowAdjustmt = Range("Header_Summary_Option").Row

For i = 1 To Sheets.Count
    If Sheets(i).Name = "Job Info & Cover" Then
        IsBaseSystem = True
        IsSystemOption = False
    ElseIf InStr(Sheets(i).Name, "Summary") Then
        If IsBaseSystem And NamedRangeExists("Header_Summary_Base") Then
            If SheetExists(ActiveWorkbook.Path & "\" & ActiveWorkbook.Name, "2 Year Extended Warranty") Then
                OptionListCount = OptionListCount + 1
                Sheets(homeSummary).Range("N" & OptionListCount + OptionRowAdjustmt) = "2 Year Extended Warranty"
                MainListCount = MainListCount + 1
                Sheets("Job Info & Cover").Range("AA" & MainListCount) = "2 Year Extended Warranty"
            End If
            If SheetExists(ActiveWorkbook.Path & "\" & ActiveWorkbook.Name, "3 Year Extended Warranty") Then
                OptionListCount = OptionListCount + 1
                Sheets(homeSummary).Range("N" & OptionListCount + OptionRowAdjustmt) = "3 Year Extended Warranty"
                MainListCount = MainListCount + 1
                Sheets("Job Info & Cover").Range("AA" & MainListCount) = "3 Year Extended Warranty"
            End If
            If SheetExists(ActiveWorkbook.Path & "\" & ActiveWorkbook.Name, "Customer Care Plan") Then
                OptionListCount = OptionListCount + 1
                Sheets(homeSummary).Range("N" & OptionListCount + OptionRowAdjustmt) = "Customer Care Plan"
                MainListCount = MainListCount + 1
                Sheets("Job Info & Cover").Range("AA" & MainListCount) = "Customer Care Plan"
            End If
        End If
        IsBaseSystem = False
        IsSystemOption = True
    ElseIf InStr(Sheets(i).Name, "2 Year Extended Warranty") Then 'do nothing (already done above)
    ElseIf InStr(Sheets(i).Name, "3 Year Extended Warranty") Then 'do nothing (already done above)
    ElseIf InStr(Sheets(i).Name, "Customer Care Plan") Then 'do nothing (already done above)
    ElseIf Sheets(i).Type = xlWorksheet Then
        '@@@@@ test for quote tab with an apostrophy, if exists ask if auto-fix is desired.
        If Sheets(i).Range("A9").Value = True And Sheets(i).Name Like "*'*" Then
            If ApostrophyFirstAsk And Not FixApostrophy Then
                ApostrophyFirstAsk = False
                YesNoMenu "Tab Name Error", _
                          "A quote tab name contains an apostrophy that will cause" & Chr(10) & _
                          "an error. Do you want it automatically removed and fixed?"
                If YesClicked Then FixApostrophy = True
            End If
            If FixApostrophy Then
                Sheets(i).Name = RemoveCharsX(Sheets(i).Name)
            End If
        End If
        If IsBaseSystem And Sheets(i).Range("A9").Value = True Then
            If BaseListFirst Then
                BaseListFirst = False
            End If
            If Sheets(i).Range("A9").Value Then
                BaseListCount = BaseListCount + 1
                If BaseListCount + BaseRowAdjustmt = Range("Footer_Summary_Base").Row - 1 Then '@@@@@ add row, leave 1 blank
                    Range("Footer_Summary_Base").Offset(-1, 0).Select
                    Selection.Copy
                    Selection.Insert Shift:=xlDown
                    Application.CutCopyMode = False
                    OptionRowAdjustmt = OptionRowAdjustmt + 1
                End If
                Sheets(homeSummary).Range("N" & BaseListCount + BaseRowAdjustmt) = Sheets(i).Name
                MainListCount = MainListCount + 1
                Sheets("Job Info & Cover").Range("AA" & MainListCount) = Sheets(i).Name
            End If
        Else
            If Sheets(i).Range("A9").Value = True Then
                If OptionListFirst Then
                    OptionListFirst = False
                End If
                OptionListCount = OptionListCount + 1
                If OptionListCount + OptionRowAdjustmt = Range("Footer_Summary_Option").Row - 1 Then '@@@@@ add row, leave 1 blank
                    Range("Footer_Summary_Option").Offset(-1, 0).Select
                    Selection.Copy
                    Selection.Insert Shift:=xlDown
                    Application.CutCopyMode = False
                End If
                Sheets(homeSummary).Range("N" & OptionListCount + OptionRowAdjustmt) = Sheets(i).Name
                MainListCount = MainListCount + 1
                Sheets("Job Info & Cover").Range("AA" & MainListCount) = Sheets(i).Name
            End If
        End If
    End If
Next i

'@@@@@ The following deletes the old and recreates the Defined Name providing a List of
'@@@@@ Quote Tabs for Validation dropdown in the Tab-Name Column

    ActiveWorkbook.Names("QuoteTabList_Main").Delete
    ActiveWorkbook.Names.Add Name:="QuoteTabList_Main", RefersToR1C1:= _
        "='Job Info & Cover'!R1C27:R" & MainListCount & "C27"

'@@@@@ And the following Filters Based on the Refreshed List
    ActiveWindow.ScrollColumn = 1
    ActiveWindow.ScrollRow = 1
    Calculate
    ActiveSheet.Range("$A$27").AutoFilter FIELD:=1, Criteria1:="<>"
    Range("C26").Select

'@@@@@ Lastly, if there are any systems with more than one quantity, then open the quantity columns

    If Application.WorksheetFunction.IsError(Range("H" & Range("Footer_Summary_Base").Row + 5)) _
    Or Application.WorksheetFunction.IsError(Range("J" & Range("Footer_Summary_Base").Row + 5)) Then
        IsQuoteError = True
    ElseIf Application.WorksheetFunction.Max(Range("I28:I" & Range("Footer_Summary_Base").Row)) > 1 _
    Or Application.WorksheetFunction.Max(Range("I" & Range("Header_Summary_Option").Row & _
                                              ":I" & Range("Footer_Summary_Option").Row)) > 1 Then
        If Columns("I").Hidden = True Then
            HideSPTQtyColumns
        End If
    End If

If IsQuoteError Then '@@@@@ report the error
    MsgQuick "There is a Quote tab error. Fix and Regenerate."
End If

NotSummaryExit:
    On Error GoTo 0
    Set oCell = Nothing
    Set oSheet = Nothing
    Application.Calculation = CurrentCalcMode
    Application.ScreenUpdating = True

End Sub
'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Sub TestJobInfoEntry(Optional NonSense As Boolean)

'DoEvents
Application.WindowState = Application.WindowState
If Sheets("Job Info & Cover").Range("C23").Value = " " _
Or Sheets("Job Info & Cover").Range("C24").Value = " " _
Or Sheets("Job Info & Cover").Range("C25").Value = " " Then
        MsgQuick "You MUST Fill-In (minimum):" & Chr(10) & _
                 "RED cells On 'Job Info' Tab" & Chr(10) & _
                 "ORANGE cells highly recommended"
    Sheets("Job Info & Cover").Activate
End If

If ActiveSheet.Name <> "Summary" Then
    If Application.Calculation = xlManual Then
        Application.StatusBar = ">>>>> MANUAL CALCULATION <<<<< >>>>> MANUAL CALCULATION <<<<< " & _
                ">>>>> MANUAL CALCULATION <<<<< >>>>> MANUAL CALCULATION <<<<<"
    Else
        Application.StatusBar = False
    End If
End If

End Sub
'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Sub TestQuoteFormulasAndLTypes(Optional TestAllSheets = False, _
                               Optional ShowProg = True) '@@@@ & text in wrong places

Dim oCell As Excel.Range
Dim oSheet As Excel.Worksheet
Dim home As String
Dim ColmErrors As Integer
Dim MissingNeededLType As Boolean
Dim LType As Range
Dim Free_Range As Range
Dim JustDoIt As Boolean
Dim rStart As Integer
Dim rStop As Integer
Dim rTest As Integer
Dim ProgressPercent As Single
Dim ProgressGoal As Single
Dim ProgCounter As Single
Dim errMessage As String

If ShowProg Then
    Application.ScreenUpdating = False
    CurrentCalcMode = Application.Calculation
    Application.Calculation = xlManual
    Application.EnableEvents = False
    
    ProgressFormShow "Workbook Error Checking... Calculating..."
    ProgCounter = 0.05
    ProgressGoal = Sheets.Count + 0.1
    DoEvents
End If

home = ActiveSheet.Name
Calculate
ColmErrors = 0
Err = 0

On Error GoTo ReportError

For iSheet = 1 To Sheets.Count
    If Sheets(iSheet).Type = xlWorksheet Then
        If Sheets(iSheet).Range("A9").Value = True _
        And Sheets(iSheet).Visible = xlSheetVisible Then
            
            Set oSheet = Sheets(iSheet)
            If ShowProg Then
                ProgressPercent = ProgCounter / ProgressGoal
                ProgressFormUpdate ProgressPercent, oSheet.Name & "...", "Workbook Error Checking..."
                ProgCounter = ProgCounter + 1
                DoEvents
            End If
            
            ThereWasAnInappropriateChange = False
        
            If TestAllSheets = False _
            And Sheets(iSheet).Range("J8").Value = Sheets(iSheet).Range("K8").Value _
            And Sheets(iSheet).Range("J8").Value <> 0 Then
                GoTo SkipThisSheet
            Else
                If Not Sheets(iSheet).Range("J8").Cells.HasFormula Then
                    Sheets(iSheet).Range("J8").Formula = _
                            "=D8+1.5*COUNTA(Email_Body_Range)" _
                          & "+COUNTBLANK(Email_Body_Range)" _
                          & "+1.8*COUNTBLANK(OFFSET(Email_Totals_Range,,1))"
                    With Sheets(iSheet).Range("J8:K8").Interior
                        .Pattern = xlSolid
                        .PatternColorIndex = xlAutomatic
                        .Color = 65280
                        .TintAndShade = 0
                        .PatternTintAndShade = 0
                    End With
                    Sheets(iSheet).Range("J8").AddComment
                    With Sheets(iSheet).Range("J8").Comment
                        .Visible = False
                        .Text Text:="Sh Chg Test#" & Chr(10) & "Calculated"
                        .Shape.ScaleWidth 0.68, msoFalse, msoScaleFromTopLeft
                        .Shape.ScaleHeight 0.45, msoFalse, msoScaleFromTopLeft
                    End With
                    Sheets(iSheet).Range("K8").AddComment
                    With Sheets(iSheet).Range("K8").Comment
                        .Visible = False
                        .Text Text:="Sh Chg Test#" & Chr(10) & "Set by Macro"
                        .Shape.ScaleWidth 0.68, msoFalse, msoScaleFromTopLeft
                        .Shape.ScaleHeight 0.45, msoFalse, msoScaleFromTopLeft
                    End With
                    Calculate
                End If
            End If
            
            Sheets(iSheet).Range("K8").Value = Sheets(iSheet).Range("J8").Value
            
            If NamedRangeExists("TestForNonNumeric", oSheet.Name) Then
                For Each oCell In oSheet.Range("TestForNonNumeric")
                    If Not IsNumeric(oCell) _
                    And Not IsError(oCell) Then 'oCell.Cells.HasFormula
                            oCell.Interior.ColorIndex = 3
                            errMessage = errMessage & "Sheet: " & oCell.Worksheet.Name & " Row: " & oCell.Column & " Cell: " & oCell.Row & vbCrLf
                        ThereWasAnInappropriateChange = True
                    End If
                Next oCell
                If ThereWasAnInappropriateChange Then
                    oSheet.Activate
                    Sheets("Job Info & Cover").Range("C40") = "FALSE"
                    Rows("28:28").Select
                    ActiveWindow.FreezePanes = True
                    With ActiveSheet.PageSetup
                        .Orientation = xlLandscape
                    End With
                    Columns("G:Q").EntireColumn.Hidden = False
                    Columns("X:Z").EntireColumn.Hidden = False
                    Columns("AA:AM").EntireColumn.Hidden = False
                    ActiveSheet.Range("$A$27").AutoFilter FIELD:=1
                    ActiveSheet.Range("$D$27").AutoFilter FIELD:=4
                    Rows("15:24").EntireRow.Hidden = True
                    Columns("R:W").EntireColumn.Hidden = False
                    Sheets(iSheet).Range("K8").Value = "X"
                    ' MsgBox "  There's text in a cell" & Chr(10) & _
                           "  that shouldn't be text" & Chr(10) & _
                           "See RED cells to Fix Errors", , "WARNING"
                    MsgBox errMessage, "Text in Numeric cells.  See RED Cells to Fix Errors", "Warning"
                    
                    Set oSheet = Nothing
                    Set LType = Nothing
                    Set Free_Range = Nothing
                    Set oCell = Nothing
                    Set iSheet = Nothing
                    On Error GoTo 0
                    
                    If ShowProg Then
                        ProgressFormClose
                        Application.EnableEvents = True
                        Application.Calculation = CurrentCalcMode
                        Application.ScreenUpdating = True
                        Set CurrentCalcMode = Nothing
                    End If
                    
                    Exit Sub
                End If
            End If
            
            errMessage = ""
            
            If NamedRangeExists("TestForFormulas1", oSheet.Name) Then
                For x = 1 To 2
                    For Each oCell In oSheet.Range("TestForFormulas" & x)
                        If Not oCell.Cells.HasFormula Then
                                oCell.Interior.ColorIndex = 3
                                errMessage = errMessage & "Sheet: " & oCell.Worksheet.Name & " Row: " & oCell.Column & " Cell: " & oCell.Row & vbCrLf
                            ThereWasAnInappropriateChange = True
                        End If
                    Next oCell
                Next x
                If ThereWasAnInappropriateChange Then
                    oSheet.Activate
                    Sheets("Job Info & Cover").Range("C40") = "FALSE"
                    Rows("28:28").Select
                    ActiveWindow.FreezePanes = True
                    With ActiveSheet.PageSetup
                        .Orientation = xlLandscape
                    End With
                    Columns("G:Q").EntireColumn.Hidden = False
                    Columns("X:Z").EntireColumn.Hidden = False
                    Columns("AA:AM").EntireColumn.Hidden = False
                    ActiveSheet.Range("$A$27").AutoFilter FIELD:=1
                    ActiveSheet.Range("$D$27").AutoFilter FIELD:=4
                    Rows("15:24").EntireRow.Hidden = True
                    Columns("R:W").EntireColumn.Hidden = False
                    Sheets(iSheet).Range("K8").Value = "X"
                    'MsgBox "You changed a formula that" & Chr(10) & _
                           "should NEVER be overwritten" & Chr(10) & _
                           "See RED cells to Fix Errors", , "WARNING"
                    
                    MsgBox errMessage, "Formula Changed.  See RED Cells to Fix Errors", "Warning"
                    
                    Set oSheet = Nothing
                    Set LType = Nothing
                    Set Free_Range = Nothing
                    Set oCell = Nothing
                    Set iSheet = Nothing
                    On Error GoTo 0
                    
                    If ShowProg Then
                        ProgressFormClose
                        Application.EnableEvents = True
                        Application.Calculation = CurrentCalcMode
                        Application.ScreenUpdating = True
                        Set CurrentCalcMode = Nothing
                    End If
                    
                    Exit Sub
                End If
            End If
        
            'Calculate 'why???
            If NamedRangeExists("Header_Quote_CTSI", oSheet.Name) _
            And NamedRangeExists("Header_Quote_GenMat", oSheet.Name) Then
'                rStart = oSheet.Range("Header_Quote_GenMat").Row + 1
'                rStop = oSheet.Range("Header_Quote_CTSI").Row
'                For rTest = rStart To rStop
'                    If rTest <> oSheet.Range("Header_Quote_MiscMat").Row _
'                    And rTest <> oSheet.Range("Header_Quote_Cable").Row Then
'                        If IsNumeric(oSheet.Cells(rTest, 9)) _
'                        And IsNumeric(oSheet.Cells(rTest, 10)) Then
'                            If oSheet.Cells(rTest, 4) >= 0 Then
'                                If oSheet.Cells(rTest, 9) > 0 _
'                                And oSheet.Cells(rTest, 9) > oSheet.Cells(rTest, 24) Then
'                                    oSheet.Cells(rTest, 24).Interior.ColorIndex = 3
'                                    ThereWasAnInappropriateChange = True
'                                ElseIf oSheet.Cells(rTest, 10) > 0 _
'                                And oSheet.Cells(rTest, 10) > oSheet.Cells(rTest, 25) Then
'                                    oSheet.Cells(rTest, 25).Interior.ColorIndex = 3
'                                    ThereWasAnInappropriateChange = True
'                                End If
'                            Else
'                                If oSheet.Cells(rTest, 9) > oSheet.Cells(rTest, 24) Then
'                                    oSheet.Cells(rTest, 24).Interior.ColorIndex = 3
'                                    ThereWasAnInappropriateChange = True
'                                ElseIf oSheet.Cells(rTest, 10) < oSheet.Cells(rTest, 25) Then
'                                    oSheet.Cells(rTest, 25).Interior.ColorIndex = 3
'                                    ThereWasAnInappropriateChange = True
'                                End If
'                            End If
'                        End If
'                    End If
'                Next rTest
                If ThereWasAnInappropriateChange Then
                    oSheet.Activate
                    Sheets("Job Info & Cover").Range("C40") = "FALSE"
                    Rows("28:28").Select
                    ActiveWindow.FreezePanes = True
                    With ActiveSheet.PageSetup
                        .Orientation = xlLandscape
                    End With
                    Columns("G:Q").EntireColumn.Hidden = False
                    Columns("X:Z").EntireColumn.Hidden = False
                    Columns("AA:AM").EntireColumn.Hidden = False
                    ActiveSheet.Range("$A$27").AutoFilter FIELD:=1
                    ActiveSheet.Range("$D$27").AutoFilter FIELD:=4
                    Rows("15:24").EntireRow.Hidden = True
                    Columns("R:W").EntireColumn.Hidden = False
                    Sheets(iSheet).Range("K8").Value = "X"
                    MsgBox "There is an installed-sell " & Chr(10) & _
                           "column miscalculation error" & Chr(10) & _
                           "See RED cells to Fix Errors", , "WARNING"
                    
                    Set oSheet = Nothing
                    Set LType = Nothing
                    Set Free_Range = Nothing
                    Set oCell = Nothing
                    Set iSheet = Nothing
                    On Error GoTo 0
                    
                    If ShowProg Then
                        ProgressFormClose
                        Application.EnableEvents = True
                        Application.Calculation = CurrentCalcMode
                        Application.ScreenUpdating = True
                        Set CurrentCalcMode = Nothing
                    End If
                    
                    Exit Sub
                End If
            End If
            
            If NamedRangeExists("Quote_Version", oSheet.Name) Then
                Set oCell = oSheet.Range("Quote_Version").Offset(-1, -2)
                If Not oCell.Cells.HasFormula Then
                    'then add the formula & formating
                    oCell.Formula = "=IF(I" & oCell.Row & ">0,IF((I" & oCell.Row - 1 _
                                    & "-I" & oCell.Row & ")/I" & oCell.Row & _
                                    ">0.005,""WARNING"",""""),"""")"
                    oCell.Font.Bold = True
                    oCell.HorizontalAlignment = xlCenter
                End If
                If Not IsError(oCell) Then
                    If oCell = "WARNING" Then ColmErrors = ColmErrors + 1
                End If
            End If

            oSheet.Activate
            MissingNeededLType = False
            Set Free_Range = oSheet.Range("Header_Quote_GenMat")
            Set LType = Cells(Free_Range.Row + 1, 5)
            Set Free_Range = oSheet.Range("Header_Quote_CTSI")
            Set LType = LType.Resize(Free_Range.Row - LType.Row, 1)
            
            For x = 1 + 27 To LType.Rows.Count + 27
                JustDoIt = False '@@@@@ test qty column for a number or lot
                If Cells(x, 4).Value = "lot" Or Cells(x, 4).Value = "Lot" _
                    Or Cells(x, 4).Value = "Lot" Then
                        JustDoIt = True
                ElseIf WorksheetFunction.IsNumber(Cells(x, 4)) Then
                    If Cells(x, 4).Value <> 0 Then JustDoIt = True
                End If
                If JustDoIt Then
                    If Cells(x, 15).Value = "" And Cells(x, 16).Value <> 0 Then
                        Cells(x, 15).Interior.ColorIndex = 3
                        MissingNeededLType = True
                    End If
                    If Cells(x, 18).Value = "" And Cells(x, 19).Value <> 0 Then
                        Cells(x, 18).Interior.ColorIndex = 3
                        MissingNeededLType = True
                    End If
                    If Cells(x, 21).Value = "" And Cells(x, 22).Value <> 0 Then
                        Cells(x, 21).Interior.ColorIndex = 3
                        MissingNeededLType = True
                    End If
                End If
            Next x
        
            If MissingNeededLType Then
                Sheets("Job Info & Cover").Range("C40") = "FALSE"
                Rows("28:28").Select
                ActiveWindow.FreezePanes = True
                With ActiveSheet.PageSetup
                    .Orientation = xlLandscape
                End With
                Columns("G:Q").EntireColumn.Hidden = False
                Columns("X:Z").EntireColumn.Hidden = False
                Columns("AA:AM").EntireColumn.Hidden = False
                ActiveSheet.Range("$A$27").AutoFilter FIELD:=1
                ActiveSheet.Range("$D$27").AutoFilter FIELD:=4
                Rows("15:24").EntireRow.Hidden = True
                Columns("R:W").EntireColumn.Hidden = False
                Sheets(iSheet).Range("K8").Value = "X"
                MsgBox "A Labor Extended Cell is" & Chr(10) & _
                       "missing a Labor Type." & Chr(10) & _
                       "See RED cells to Fix Errors", , "WARNING"

                Set oSheet = Nothing
                Set LType = Nothing
                Set Free_Range = Nothing
                Set oCell = Nothing
                Set iSheet = Nothing
                On Error GoTo 0
                
                If ShowProg Then
                    ProgressFormClose
                    Application.EnableEvents = True
                    Application.Calculation = CurrentCalcMode
                    Application.ScreenUpdating = True
                    Set CurrentCalcMode = Nothing
                End If
                
                Exit Sub
            Else
                Sheets(home).Activate
            End If

SkipThisSheet:
        End If
    End If
Next iSheet

If ColmErrors > 0 Then MsgBox "There are " & ColmErrors & " quote tabs with" & Chr(10) & _
                              "more than 0.5% labor error," & Chr(10) & _
                              "between item$ to installed$"

ReportError:
If Err <> 0 Then
    If Sheets(iSheet).Name = "2 Year Extended Warranty" _
    Or Sheets(iSheet).Name = "3 Year Extended Warranty" _
    Or Sheets(iSheet).Name = "Customer Care Plan" Then
        Sheets("Summary").Activate
        MsgTimed "Summary Total Amount is Not Valid, Re-Run" & Chr(10) & _
                 "Generate to Correct an Option Tab Error", "WARNING", 3, True
        Range("C26").Select
        
        Set oSheet = Nothing
        Set LType = Nothing
        Set Free_Range = Nothing
        Set oCell = Nothing
        Set iSheet = Nothing
        On Error GoTo 0
        
        If ShowProg Then
            ProgressFormClose
            Application.EnableEvents = True
            Application.Calculation = CurrentCalcMode
            Application.ScreenUpdating = True
            Set CurrentCalcMode = Nothing
        End If
        
        Exit Sub
    Else
        Sheets(iSheet).Activate
        Sheets("Job Info & Cover").Unprotect
        Sheets("Job Info & Cover").Range("C40").Value = "FALSE"
        Sheets("Job Info & Cover").Protect DrawingObjects:=True, Contents:=True, Scenarios:=True
        Rows("28:28").Select
        ActiveWindow.FreezePanes = True
        With ActiveSheet.PageSetup
            .Orientation = xlLandscape
        End With
        Columns("G:Q").EntireColumn.Hidden = False
        Columns("X:Z").EntireColumn.Hidden = False
        Columns("AA:AM").EntireColumn.Hidden = False
        ActiveSheet.Range("$A$27").AutoFilter FIELD:=1
        ActiveSheet.Range("$D$27").AutoFilter FIELD:=4
        Rows("15:24").EntireRow.Hidden = True
        Sheets(iSheet).Range("K8").Value = "X"
        MsgTimed "There is an formula/cell" & Chr(10) & _
                 "error that must be fixed", "WARNING", 2, True
        Range("C26").Select
        
        Set oSheet = Nothing
        Set LType = Nothing
        Set Free_Range = Nothing
        Set oCell = Nothing
        Set iSheet = Nothing
        On Error GoTo 0
        
        If ShowProg Then
            ProgressFormClose
            Application.EnableEvents = True
            Application.Calculation = CurrentCalcMode
            Application.ScreenUpdating = True
            Set CurrentCalcMode = Nothing
        End If
        
        Exit Sub
    End If
End If

'@@@@@ clear all variables

Set oSheet = Nothing
Set LType = Nothing
Set Free_Range = Nothing
Set oCell = Nothing
Set iSheet = Nothing
On Error GoTo 0

'@@@@@ ----------------------

If InStr(home, "Summary") Then
    If Application.Calculation = xlManual _
    And SheetsCount = Sheets.Count Then
        Application.StatusBar = ">>>>> MANUAL CALCULATION <<<<< >>>>> MANUAL CALCULATION <<<<< " & _
                ">>>>> MANUAL CALCULATION <<<<< >>>>> MANUAL CALCULATION <<<<<"
    Else
        'Application.StatusBar = False
    End If
    SheetsCount = Sheets.Count
End If

Sheets(home).Activate

If ShowProg Then
    ProgressFormClose
    Application.EnableEvents = True
    Application.Calculation = CurrentCalcMode
    Application.ScreenUpdating = True
    Set CurrentCalcMode = Nothing
End If

End Sub
'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Sub TestTURNKEY_FixtureLabor()

Application.ScreenUpdating = False
CurrentCalcMode = Application.Calculation
Application.Calculation = xlManual
Application.EnableEvents = False

Dim oCell As Excel.Range
Dim oSheet As Excel.Worksheet
Dim home As String
Dim Test_Range As Range
Dim JustDoIt As Boolean

home = ActiveSheet.Name
Calculate
Err = 0

On Error GoTo ReportError

For iSheet = 1 To Sheets.Count
    If Sheets(iSheet).Type = xlWorksheet Then
        If Sheets(iSheet).Range("A9").Value = True _
        And Sheets(iSheet).Visible = xlSheetVisible Then
            If Sheets(iSheet).Range("Quote_Version").Offset(1, 3).Value = "Y" Then
                Set oSheet = Sheets(iSheet)
                oSheet.Activate
                ThereWasAnInappropriateChange = False
                Set Test_Range = oSheet.Range("M" & Range("Header_Quote_GenMat").Row + 1 & _
                                             ":M" & Range("Footer_Quote_Material").Row - 1)
                For Each oCell In Test_Range
                    If oCell = "F" Then
                        JustDoIt = False
                        If IsNumeric(Cells(oCell.Row, 4)) _
                        And Cells(oCell.Row, 4) <> 0 _
                            Then JustDoIt = True
                        If Cells(oCell.Row, 4) = "lot" _
                        Or Cells(oCell.Row, 4) = "Lot" _
                        Or Cells(oCell.Row, 4) = "LOT" _
                            Then JustDoIt = True
                        If oCell.Row = Range("Header_Quote_MiscMat").Row _
                        Or oCell.Row = Range("Header_Quote_Cable").Row _
                        Or InStr(Cells(oCell.Row, 6), "Waste/Complete") > 0 _
                        Or InStr(Cells(oCell.Row, 6), "Cable Difficulty Factor") > 0 _
                            Then JustDoIt = False
                        If JustDoIt Then
                            If Not IsNumeric(Cells(oCell.Row, 16).Value) _
                            Or Cells(oCell.Row, 16) = 0 Then
                                Cells(oCell.Row, 16).Interior.ColorIndex = 3
                                ThereWasAnInappropriateChange = True
                            End If
                        End If
                    End If
                Next oCell
                If ThereWasAnInappropriateChange Then
                    oSheet.Activate
                    Sheets("Job Info & Cover").Range("C40") = "FALSE"
                    Rows("28:28").Select
                    ActiveWindow.FreezePanes = True
                    With ActiveSheet.PageSetup
                        .Orientation = xlLandscape
                    End With
                    Columns("G:Q").EntireColumn.Hidden = False
                    Columns("X:Z").EntireColumn.Hidden = False
                    Columns("AA:AM").EntireColumn.Hidden = False
                    ActiveSheet.Range("$A$27").AutoFilter FIELD:=1
                    ActiveSheet.Range("$D$27").AutoFilter FIELD:=4
                    Rows("15:24").EntireRow.Hidden = True
                    Columns("R:W").EntireColumn.Hidden = False
                    Sheets(iSheet).Range("K8").Value = "X"
                    MsgBox "  Some Fixture items are" & Chr(10) & _
                           "missing labor colm 1 values" & Chr(10) & _
                           "See RED cells to Fix Errors", , "WARNING"
                    Application.EnableEvents = True
                    Application.Calculation = CurrentCalcMode
                    Application.ScreenUpdating = True
                    
                    Set oSheet = Nothing
                    Set oCell = Nothing
                    Set Test_Range = Nothing
                    Set CurrentCalcMode = Nothing
                    Set iSheet = Nothing
                    On Error GoTo 0
                    
                    Exit Sub
                End If
            End If
        End If
    End If
Next iSheet

ReportError:
If Err <> 0 Then
    oSheet.Activate
    Sheets("Job Info & Cover").Range("C40") = "FALSE"
    Rows("28:28").Select
    ActiveWindow.FreezePanes = True
    With ActiveSheet.PageSetup
        .Orientation = xlLandscape
    End With
    Columns("G:Q").EntireColumn.Hidden = False
    Columns("X:Z").EntireColumn.Hidden = False
    Columns("AA:AM").EntireColumn.Hidden = False
    ActiveSheet.Range("$A$27").AutoFilter FIELD:=1
    ActiveSheet.Range("$D$27").AutoFilter FIELD:=4
    Rows("15:24").EntireRow.Hidden = True
    Sheets(iSheet).Range("K8").Value = "X"
    MsgTimed "There is an formula/cell" & Chr(10) & _
             "error that must be fixed", "WARNING", 3, True
    Application.EnableEvents = True
    Application.Calculation = CurrentCalcMode
    Application.ScreenUpdating = True
    Exit Sub
End If

Set oSheet = Nothing
Set Test_Range = Nothing
Set oCell = Nothing
Set iSheet = Nothing
On Error GoTo 0

Sheets(home).Activate

Application.EnableEvents = True
Application.Calculation = CurrentCalcMode
Application.ScreenUpdating = True
Set CurrentCalcMode = Nothing

End Sub
'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Sub TestALL()

TestJobInfoEntry
TestQuoteFormulasAndLTypes True

End Sub
'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Sub Match_BeforeTax() 'adjusts genmat Q markup to match a known, fixed total
    Application.EnableEvents = False
    Application.DisplayAlerts = False
    Application.ScreenUpdating = False
    CurrentCalcMode = Application.Calculation
    Application.Calculation = xlManual
    
    Dim ExpectedTotal As Double
    Dim QChangeAmount As Double
    Dim TestRange As Range
    
    ExpectedTotal = InputBox("Expected Pre-Tax Total", "QUOTE ADJUSTMENT")
    
    If IsNumeric(ExpectedTotal) And ExpectedTotal <> 0 Then
        QChangeAmount = ExpectedTotal - Range("Quote_Price").Value
        QChangeAmount = Application.RoundUp((Range("I2").Value + QChangeAmount) / _
                                             Range("I2").Value, 5)
        Range("L28").Value = Range("L28").Value * QChangeAmount
        Range("L28").Interior.Color = 65280
    End If
    
    Calculate
    QChangeAmount = ExpectedTotal - Range("Quote_Price").Value
    If QChangeAmount = 0 Then GoTo QuickExit
    Set TestRange = Range("J" & Range("Header_Quote_GenMat").Row + 2 & _
                         ":J" & Range("Header_Quote_MiscMat").Row - 1)
    For Each oCell In TestRange
        If oCell.Value > 0 Then
            QChangeAmount = Application.RoundUp((Range("J" & oCell.Row).Value + QChangeAmount) _
                                               / Range("J" & oCell.Row).Value, 5)
            Range("L" & oCell.Row).Formula = Range("L" & oCell.Row).Formula & _
                                             "*" & QChangeAmount
            Range("L" & oCell.Row).Interior.Color = 65280
            Calculate
            QChangeAmount = ExpectedTotal - Range("Quote_Price").Value
            If QChangeAmount = 0 Then GoTo QuickExit
        End If
    Next oCell
    
    Calculate
    QChangeAmount = ExpectedTotal - Range("Quote_Price").Value
    If QChangeAmount <> 0 Then GoTo QuickExit
    If Range("Quote_Total_Labor_Sell").Value > 0 Then
        Range("Quote_Version").Offset(-1, -3).Formula = _
                        Range("Quote_Version").Offset(-1, -3).Formula & "+" & QChangeAmount
    Else
        MsgBox "Difference remains which can not be removed" & Chr(10) & _
               "by GenMat Markup nor Total Labor adjustment," & Chr(10) & _
               "due to necessary and required rounding."
    End If

QuickExit:
    Set TestRange = Nothing
    Set oCell = Nothing
    
    Application.Calculation = CurrentCalcMode
    Application.ScreenUpdating = True
    Application.EnableEvents = True
    Application.DisplayAlerts = True
    Set CurrentCalcMode = Nothing
    
End Sub
'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Sub Match_TaxAndAfterTax() 'adjust genmat markup to match equip total, then labor mark to match total
    Application.EnableEvents = False
    Application.DisplayAlerts = False
    Application.ScreenUpdating = False
    CurrentCalcMode = Application.Calculation
    Application.Calculation = xlManual
    
    Dim ExpectedSalesTax As Double
    Dim ExpectedEquipTotal As Double
    Dim CurrentEquipTotal As Double
    Dim ExpectedQuoteTotal As Double
    Dim QChangeAmount As Double
    Dim TestRange As Range
    
    ExpectedSalesTax = InputBox("Expected Sales Tax", "QUOTE ADJUSTMENT")
    ExpectedQuoteTotal = InputBox("Expected Post-Tax Quote Total", "QUOTE ADJUSTMENT")
    
    If IsNumeric(ExpectedQuoteTotal) _
    And ExpectedQuoteTotal <> 0 _
    And IsNumeric(ExpectedSalesTax) Then '@@@@@ first, overall fix to genmat markup, to match wanted s-tax
        ExpectedEquipTotal = Application.Round(ExpectedSalesTax / Range("Quote_Price").Offset(1, -2).Value, 2)
        CurrentEquipTotal = Range("I2").Value + Range("I3").Value
        QChangeAmount = ExpectedEquipTotal - CurrentEquipTotal
        QChangeAmount = Application.RoundUp((Range("I2").Value + QChangeAmount) / Range("I2").Value, 5)
        Range("L28").Value = Application.RoundUp(Range("L28").Value * QChangeAmount, 5)
        Range("L28").Interior.Color = 65280
    Else
        GoTo QuickExit
    End If
    
    Calculate
    CurrentEquipTotal = Range("I2").Value + Range("I3").Value
    QChangeAmount = ExpectedEquipTotal - CurrentEquipTotal
    If QChangeAmount = 0 Then GoTo FixAfterTax '@@@@@ then indiv genmat line markup adjustments, to fine-tune
    Set TestRange = Range("J" & Range("Header_Quote_GenMat").Row + 2 & _
                         ":J" & Range("Header_Quote_MiscMat").Row - 1)
    For Each oCell In TestRange
        If oCell.Value > 0 Then
            QChangeAmount = Application.RoundUp((Range("J" & oCell.Row).Value + QChangeAmount) _
                                               / Range("J" & oCell.Row).Value, 5)
            Range("L" & oCell.Row).Formula = Range("L" & oCell.Row).Formula & _
                                             "*" & QChangeAmount
            Range("L" & oCell.Row).Interior.Color = 65280
            Calculate
            CurrentEquipTotal = Range("I2").Value + Range("I3").Value
            QChangeAmount = ExpectedEquipTotal - CurrentEquipTotal
            If QChangeAmount = 0 Then GoTo FixAfterTax
        End If
    Next oCell

FixAfterTax: '@@@@@ adjust labor markup to affect the after-tax total, and match desired total

    Calculate
    QChangeAmount = ExpectedQuoteTotal - Range("Quote_Price").Offset(2, 0).Value
    If QChangeAmount = 0 Then GoTo QuickExit
    If Range("Quote_Total_Labor_Sell").Value > 0 Then
    
        QChangeAmount = Application.RoundUp((Range("S8").Value + QChangeAmount) / Range("S8").Value, 5)
        Cells(Range("Footer_Quote_NonTax").Row + 1, 12).Value = _
            Application.RoundUp(Cells(Range("Footer_Quote_NonTax").Row + 1, 12).Value * QChangeAmount, 5)
        Cells(Range("Footer_Quote_NonTax").Row + 1, 12).Interior.Color = 65280
        
        Calculate
        QChangeAmount = ExpectedQuoteTotal - Range("Quote_Price").Offset(2, 0).Value
        If QChangeAmount = 0 Then GoTo QuickExit
        Set TestRange = Range("J" & Range("Footer_Quote_NonTax").Row + 2 & _
                         ":J" & Range("Quote_Version").Row - 3)
        For Each oCell In TestRange
            If oCell.Value > 0 Then
                QChangeAmount = Application.RoundUp((Range("J" & oCell.Row).Value + QChangeAmount) _
                                                   / Range("J" & oCell.Row).Value, 5)
                Range("L" & oCell.Row).Formula = Range("L" & oCell.Row).Formula & _
                                                 "*" & QChangeAmount
                Range("L" & oCell.Row).Interior.Color = 65280
                Calculate
                QChangeAmount = ExpectedQuoteTotal - Range("Quote_Price").Offset(2, 0).Value
                If QChangeAmount = 0 Then GoTo QuickExit
            End If
        Next oCell
        Range("Quote_Version").Offset(-1, -3).Formula = _
                Range("Quote_Version").Offset(-1, -3).Formula & "+" & QChangeAmount
        Calculate
        QChangeAmount = ExpectedQuoteTotal - Range("Quote_Price").Offset(2, 0).Value
        If QChangeAmount = 0 Then GoTo QuickExit
    End If
    MsgBox "Difference remains which can not be removed" & Chr(10) & _
           "by GenMat Markup nor Total Labor adjustment," & Chr(10) & _
           "while maintaining a fixed sales tax amount."

QuickExit:
    Set TestRange = Nothing
    Set oCell = Nothing
    
    Application.Calculation = CurrentCalcMode
    Application.ScreenUpdating = True
    Application.EnableEvents = True
    Application.DisplayAlerts = True
    Set CurrentCalcMode = Nothing
    
End Sub
'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Sub NewQuote()

Application.ScreenUpdating = False
Application.EnableEvents = False
Application.DisplayAlerts = False
CurrentCalcMode = Application.Calculation
Application.Calculation = xlManual

newhome = "System"
On Error Resume Next
For i = 1 To 60
    Sheets(newhome).Activate
    If Err.Number <> 0 Then GoTo MakeTheSheet
    Err.Number = 0
    newhome = "System (" & i & ")"
Next i

MakeTheSheet:
Sheets("BLANK").Visible = True
Sheets("BLANK").Copy After:=Sheets(Sheets.Count)
ActiveSheet.Name = newhome
Range("A9").Value = "TRUE"
Sheets("BLANK").Visible = False
Sheets(newhome).Activate

On Error GoTo 0

Application.Calculation = CurrentCalcMode
Application.ScreenUpdating = True
Application.EnableEvents = True
Application.DisplayAlerts = True
Set CurrentCalcMode = Nothing
    
End Sub
'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Sub FixJobSetupSell()

Dim homerange As Range

If ActiveSheet.Name = "Job Set-up" Then

    Application.ScreenUpdating = False
    Application.EnableEvents = False
    Application.DisplayAlerts = False
    Application.Calculation = xlManual

    Sheets("Job Set-up").Unprotect

    Set homerange = Selection
    Range("J20:J21").Select
    Selection.Copy
    Selection.PasteSpecial Paste:=xlPasteValues
    Selection.Interior.Color = 16751052
    Range("J24").Select
    Selection.Copy
    Selection.PasteSpecial Paste:=xlPasteValues
    Selection.Interior.Color = 16751052
    Range("J27:J32").Select
    Selection.Copy
    Selection.PasteSpecial Paste:=xlPasteValues
    Selection.Interior.Color = 16751052
    Range("J34:J39").Select
    Selection.Copy
    Selection.PasteSpecial Paste:=xlPasteValues
    Selection.Interior.Color = 16751052
    Range("J41").Select
    Selection.Copy
    Selection.PasteSpecial Paste:=xlPasteValues
    Selection.Interior.Color = 16751052
    Range("J44:J51").Select
    Selection.Copy
    Selection.PasteSpecial Paste:=xlPasteValues
    Selection.Interior.Color = 16751052
    Range("J55").Select
    Selection.Copy
    Selection.PasteSpecial Paste:=xlPasteValues
    Selection.Interior.Color = 16751052
    Application.CutCopyMode = False
    ActiveWindow.SmallScroll Down:=-36
    homerange.Select
    Set homerange = Nothing

    Sheets("Job Set-up").Protect
    
    If SheetExists(ActiveWorkbook.Path & "\" & ActiveWorkbook.Name, "CustomerCare Set-Up") Then
        
        Sheets("CustomerCare Set-up").Activate
        Sheets("CustomerCare Set-up").Unprotect
        
        Set homerange = Selection
        Range("J20:J25").Select
        Selection.Copy
        Selection.PasteSpecial Paste:=xlPasteValues
        Selection.Interior.Color = 16751052
        Range("J32:J39").Select
        Selection.Copy
        Selection.PasteSpecial Paste:=xlPasteValues
        Selection.Interior.Color = 16751052
        Application.CutCopyMode = False
        ActiveWindow.SmallScroll Down:=-36
        homerange.Select
        Set homerange = Nothing
    
        Sheets("CustomerCare Set-up").Protect
        Sheets("Job Set-up").Activate
    
    End If

    Application.Calculation = xlAutomatic
    Application.ScreenUpdating = True
    Application.EnableEvents = True
    Application.DisplayAlerts = True

End If

End Sub
Attribute VB_Name = "CTSI_Matreq_Process"
Public Const adOpenKeyset = 1
Public Const adLockOptimistic = 3
Public Const adCmdTable = 2
'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Sub ProcessMatreq(Optional NonSense As Boolean)

Dim Allowed_Users As String
Dim MR_Orig_fpath As String
Dim MR_Chgs_fpath As String
Dim MR_Revs_fpath As String
Dim MR_Data_fpath As String
Dim MR_Data_fname As String
Dim JobNumber As String
Dim MR_Date As String
Dim MR_Type As String
Dim fSystem As Object
Dim ofile As Object
Dim ffile As String
Dim homefile As String
Dim fpath As String
Dim MRpath As String
Dim MRfile As String
Dim Free_Array() As String
Dim StartRow As Long
Dim StopRow As Long
Dim x As Long
Dim i As Long
Dim DataError As Boolean
Dim IsData As Boolean

Application.ScreenUpdating = False
Application.EnableEvents = False
Application.DisplayAlerts = False
CurrentCalcMode = Application.Calculation
Application.Calculation = xlManual

'@@@@@ variables for this routine

Allowed_Users = "ehodo" & _
                "gruta" & _
                "mboynton" & _
                "abrown" & _
                "jmills" & _
                "wseifert"

MR_Orig_fpath = "\\ctsi2\matreqdata\MR_Orig"
MR_Chgs_fpath = "\\ctsi2\matreqdata\MR_Chgs"
MR_Revs_fpath = "\\ctsi2\matreqdata\MR_Revs"
MR_Data_fpath = "\\ctsi2\matreqdata\MR_Data"
MR_Data_fname = "CTSI_MR_Data.accdb"
MR_Blank = "J:\xL_PD\MRdata.xlsx"

'@@@@@ check and confirm if this matreq has already been processed. exit if it has

If ActiveSheet.ProtectContents Then
    If InStr(Cells(2, 15).Value, "Processed:") Then
        MsgBox "This matreq tab has already been" & Chr(10) & _
                Cells(2, 15).Value
        GoTo QuickExit
    Else
        ActiveSheet.Unprotect
    End If
End If

'@@@@@ control use of macro to specific users, and check for MSAccess software installed.

If InStr(Allowed_Users, Environ("USERNAME")) > 0 Then
    If Not HasMSProg("MSACCESS.EXE") Then '@@@@@ confirms ability to upload data to database.
        MsgQuick "User MUST have Microsoft Access Program" & Chr(10) & _
                 "to process Material Requisitions"
        GoTo QuickExit
    End If

'@@@@@ capture variables specific to this worksheet

homefile = ActiveWorkbook.Name
ffile = ActiveWorkbook.Path & "\" & homefile

'@@@@@ confirm required information is on the MR form, or gather as needed
'Range("h3").Value = "" Or Range("h3").Value = 0 Or
If Range("h3").Value Like "######" _
Or Range("h3").Value Like "######?" _
Or Range("h3").Value Like "SC??####" _
Or Range("h3").Value Like "######S??" _
Or Range("h3").Value Like "TM#####" _
Or Range("h3").Value Like "BX#######" Then
    'then there is already a valid job number entered
    JobNumber = Range("h3").Value
Else '@@@@@ job number?
    If Not Range("h3").HasFormula And SheetExists(ffile, "Job Set-Up") Then
        Range("h3").Formula = "='Job Set-up'!F6"
        Range("h3").HorizontalAlignment = xlCenter
        Range("h3").InsertIndent 1
        If Range("h3").Value = "" Or Range("h3").Value = 0 Then
            JobNumber = InputBox("Enter the Job Number:", "INFO NEEDED")
            If JobNumber Like "######" _
            Or JobNumber Like "######?" _
            Or JobNumber Like "SC??####" _
            Or JobNumber Like "######S??" _
            Or JobNumber Like "TM#####" _
            Or JobNumber Like "BX#######" Then
                Sheets("Job Set-up").Range("f6").Value = JobNumber
            Else: GoTo ErrorMsg
            End If
        Else
            JobNumber = Range("h3").Value
            If JobNumber Like "######" _
            Or JobNumber Like "######?" _
            Or JobNumber Like "SC??####" _
            Or JobNumber Like "######S??" _
            Or JobNumber Like "TM#####" _
            Or JobNumber Like "BX#######" Then
            Else: GoTo ErrorMsg
            End If
        End If
    Else
        JobNumber = InputBox("Enter the Job Number:", "INFO NEEDED")
        If JobNumber Like "######" _
        Or JobNumber Like "######?" _
        Or JobNumber Like "SC??####" _
        Or JobNumber Like "######S??" _
        Or JobNumber Like "TM#####" _
        Or JobNumber Like "BX#######" Then
            Range("h3").Value = JobNumber
            Range("h3").HorizontalAlignment = xlCenter
            Range("h3").InsertIndent 1
        Else: GoTo ErrorMsg
        End If
    End If
End If

MR_Date = Year(Date) & "-"
If Month(Date) < 10 Then
    MR_Date = MR_Date & "0" & Month(Date) & "-"
Else: MR_Date = MR_Date & Month(Date) & "-"
End If
If Day(Date) < 10 Then
    MR_Date = MR_Date & "0" & Day(Date)
Else: MR_Date = MR_Date & Day(Date)
End If

'@@@@@ every line with any data MUST have all these info entered: manuf, model, desc, qty, F/N

StartRow = Range("Header_Matreq").Row + 1
StopRow = Range("Footer_Matreq").Row - 1
DataError = False
IsData = False

For x = StartRow To StopRow
    If Cells(x, 4) = "" Then 'no quantity, then everything else should be zero too.
        If Cells(x, 3) = "" And Cells(x, 5) = "" And Cells(x, 6) = "" Then 'good
        Else: DataError = True
        End If
    Else 'there is a quantity
        If Cells(x, 6) <> "" Then 'confirm desc exists. ignore missing make/model for now ...Cells(x, 3) <> "" And Cells(x, 5) <> "" And
            'If Cells(x, 9) = "F" Or Cells(x, 9) = "N" Then 'confirm F/N is properly filled out
                IsData = True
            'Else: DataError = True
            'End If
        Else: DataError = True
        End If
    End If
    If DataError Then
        MsgBox "Data rows MUST have Qty and Description", , "IMPORTANT"  'ignore Make, Model,
        GoTo QuickExit
    End If
Next x
If Not IsData Then
    MsgBox "the matreq does not contain any items to process."
    GoTo QuickExit
End If

'@@@@@ test for prior existance of 'original' matreq

Set fSystem = CreateObject("Scripting.FileSystemObject")
Free_Array = FileSearch(JobNumber & "_MR-ORIG", "xlsx", MR_Orig_fpath)
fpath = Free_Array(1)
ReDim Free_Array(0)
If fpath = "Not Found" Then fpath = ""

'@@@@@ what type of matreq are we processing?

MRpath = ""
If fpath = "" Then
    YesClicked = False
    YesNoMenu "MATREQ TYPE", "Is this the" & Chr(10) & _
                             "ORIGINAL/COMPLETE" & Chr(10) & _
                             "Project Matreq?"
    If YesClicked Then
        MRpath = MR_Orig_fpath & "\" & JobNumber & "_MR-ORIG"
        MR_Type = "ORIGINAL"
    Else
    '@@@@@ if there is no original MR and the user answers 'no', should i exit on error?
    End If
End If
If MRpath = "" Then
    YesClicked = False
    YesNoMenu "MATREQ TYPE", "Is this a REVISION" & Chr(10) & _
                             "or CHANGE Matreq?", "CHANGE", "REVISION"
    If YesClicked Then
        MR_Type = "CHG"
        MRpath = MR_Chgs_fpath & "\" & JobNumber & "_MR-CHG"
        Free_Array = FileSearch(JobNumber & "_MR-CHG", "xlsx", MR_Chgs_fpath, False)
        fpath = Free_Array(1)
        If fpath = "Not Found" Then
            fpath = ""
        Else
            fpath = Free_Array(Application.CountA(Free_Array))
            fpath = Mid(fpath, Len(MRpath) + 2)
            fpath = Mid(fpath, 1, InStr(fpath, "_") - 1)
        End If
        ReDim Free_Array(0)
    Else
        MR_Type = "REV"
        MRpath = MR_Revs_fpath & "\" & JobNumber & "_MR-REV"
        Free_Array = FileSearch(JobNumber & "_MR-REV", "xlsx", MR_Revs_fpath, False)
        fpath = Free_Array(1)
        If fpath = "Not Found" Then
            fpath = ""
        Else
            fpath = Free_Array(Application.CountA(Free_Array))
            fpath = Mid(fpath, Len(MRpath) + 2)
            fpath = Mid(fpath, 1, InStr(fpath, "_") - 1)
        End If
        ReDim Free_Array(0)
    End If
    If fpath = "" Then x = 1 Else x = Val(fpath) + 1
    If x < 100 Then
        If x < 10 Then
            MRpath = MRpath & "-00" & x
            MR_Type = MR_Type & "-00" & x
        Else
            MRpath = MRpath & "-0" & x
            MR_Type = MR_Type & "-0" & x
        End If
    Else
        MRpath = MRpath & "-" & x
        MR_Type = MR_Type & "-" & x
    End If
End If
MRpath = MRpath & "_" & MR_Date & ".xlsx"

If FileOrFolderExists(MR_Blank) Then
    Set ofile = fSystem.getfile(MR_Blank)
    ofile.Copy MRpath
    Set ofile = Nothing
    Workbooks.Open MRpath
End If
Workbooks(homefile).Activate

'@@@@@ eliminate blank rows to condense the sheet.

x = StartRow
Do Until x = Range("Footer_Matreq").Row
    If Cells(x, 4) = "" Then
        Rows(x & ":" & x).Select
        Selection.Delete Shift:=xlUp
    Else
        x = x + 1
    End If
Loop
StopRow = Range("Footer_Matreq").Row - 1

'@@@@@ now transfer data to the new MR data sheet

MRfile = fPathTofName(MRpath)
i = 2 'row in the target sheet
For x = StartRow To StopRow 'row in the source sheet
    If Cells(x, 4) <> "" Then
        Workbooks(MRfile).Activate
        Cells(i, 1).Value = JobNumber
        Cells(i, 2).Value = MR_Date
        Cells(i, 3).Value = MR_Type
        
        Workbooks(homefile).Activate
        Cells(x, 2).Resize(1, 6).Select 'vender, manuf, qty, model, desc, price
        Selection.Interior.Color = 13434879
        Selection.Copy
        Workbooks(MRfile).Activate
        Cells(i, 4).Select
        Selection.PasteSpecial Paste:=xlPasteValues

        'Workbooks(homefile).Activate
        'Cells(x, 19).Select 'spec.pricing
        'Selection.Interior.Color = 13434828
        'Selection.Copy
        'Workbooks(MRfile).Activate
        'Cells(i, 10).Select
        'Selection.PasteSpecial Paste:=xlPasteValues

        'Workbooks(homefile).Activate
        'Cells(x, 9).Select 'fixture
        'Selection.Interior.Color = 13434879
        'Selection.Copy
        'Workbooks(MRfile).Activate
        'Cells(i, 11).Select
        'Selection.PasteSpecial Paste:=xlPasteValues
        
        Workbooks(homefile).Activate
        Cells(x, 9).Resize(1, 2).Select 'ship to, date reqd
        Selection.Interior.Color = 13434828
        Selection.Copy
        Workbooks(MRfile).Activate
        Cells(i, 13).Select
        Selection.PasteSpecial Paste:=xlPasteValues

        i = i + 1
        Cells(i, 1).Select
        Workbooks(homefile).Activate
        Cells(x, 2).Select
        Selection.Interior.Color = 13434828
        Selection.Locked = False
        
        Cells(x, 4).Select
        Selection.Interior.Color = 13434828
        Selection.Locked = False
        Selection.AddComment
        Cells(x, 4).Comment.Text Text:="Estd Qty: " & Cells(x, 4).Value
        Cells(x, 4).Comment.Visible = True
        Cells(x, 4).Comment.Shape.Select
        Cells(x, 4).Comment.Shape.TextFrame.AutoSize = True
        Cells(x, 4).Comment.Visible = False
        
        Cells(x, 12).Resize(1, 8).Select
        Selection.Locked = False
    End If
Next x
Workbooks(MRfile).Save
Workbooks(homefile).Activate
Cells(2, 8).Replace What:="Material Requ?sition Form", Replacement:="Matreq", _
         LookAt:=xlPart, MatchCase:=False, SearchFormat:=False, ReplaceFormat:=False
Cells(2, 15).Value = "Processed: " & MR_Type & " on " & MR_Date
With Cells(2, 15).Font
        .Name = "Arial Black"
        .Size = 14
        .Color = -16776961
End With
On Error GoTo SkipButton
ActiveSheet.Shapes("Button 1").Select
Selection.Cut
SkipButton:
Cells(5, 15).Select
ActiveSheet.Protect
On Error GoTo 0

'@@@@@ finally, transfer the data from the new MR record file to the database

Workbooks(MRfile).Activate
MRdbDataXfr MRpath, MR_Data_fpath, MR_Data_fname, i - 1
Cells(1, 15).Value = "Uploaded to Database " & Now()
With Cells(1, 15).Font
        .Name = "Arial Black"
        .Size = 10
        .Color = -16776961
End With
Workbooks(MRfile).Save
Workbooks(MRfile).Close

'@@@@@ wrap up the control process

Else
    MsgQuick "Processing of Matreqs is Restricted to Purchasing"
End If

If True = False Then
ErrorMsg:
    MsgQuick "there was an error. exiting routine."
End If

QuickExit:

ReDim Free_Array(0)
Set fSystem = Nothing
Set ofile = Nothing

Application.Calculation = CurrentCalcMode
Application.ScreenUpdating = True
Application.EnableEvents = True
Application.DisplayAlerts = True
Set CurrentCalcMode = Nothing

End Sub
'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Function HasMSProg(ByVal ProgName As Variant) As Boolean
    If Len(Dir$("C:\Program Files (x86)\Microsoft Office\Office12\" & ProgName)) > 0 _
    Or Len(Dir$("C:\Program Files\Microsoft Office\Office12\" & ProgName)) > 0 _
    Or Len(Dir$("C:\Program Files\Microsoft Office\Office15\" & ProgName)) > 0 _
    Or Len(Dir$("C:\Program Files\Microsoft Office\root\Office16\" & ProgName)) > 0 Then
        HasMSProg = True
    Else
        HasMSProg = False
    End If
End Function
'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Sub MRdbDataXfr(MR_ExcelSource As String, _
                MR_Data_fpath As String, _
                dbfile As String, _
                iRows As Long)

'@@@@@ user must enable reference to Microsoft ActiveX Data Objects Library 2.7 or later

Dim dbPath As String
Dim dbConnectStr As String
Dim cn As Object 'ADODB.Connection (changed to late-binding)
Dim rs As Object 'ADODB.Recordset (changed to late-binding)
Dim i As Long

'@@@@@ Connect to matreq database

Set cn = CreateObject("ADODB.Connection") 'New ADODB.Connection (changed to late-binding)
With cn
    .Provider = "Microsoft.ACE.OLEDB.12.0"
    .ConnectionString = "Data Source=" & MR_Data_fpath & "\" & dbfile & ";" _
                        '& "Extended Properties=Excel 12.0;"
    .Open
End With
Set rs = CreateObject("ADODB.Recordset") 'New ADODB.Recordset (changed to late-binding)
rs.Open "Matreq", cn, adOpenKeyset, adLockOptimistic, adCmdTable  '@@@@@ "Matreq" is the table name

'@@@@@ paste data to central matreq database

For i = 2 To iRows
If Len(Range("H" & i).Value) > 255 Then
    Range("H" & i).Value = Mid(Range("H" & i).Value, 1, 252) & "..."
End If
With rs
 .Addnew
 .Fields("Job#") = Range("A" & i).Value
 .Fields("MRDate") = Range("B" & i).Value
 .Fields("MRType") = Range("C" & i).Value
 .Fields("Vender") = Range("D" & i).Value
 .Fields("Manuf") = Range("E" & i).Value
 .Fields("Qty") = Range("F" & i).Value
 .Fields("Model") = Range("G" & i).Value
 .Fields("Desc") = Range("H" & i).Value
 .Fields("Price$") = Range("I" & i).Value
 .Fields("SpecialP") = Range("J" & i).Value
 .Fields("F/N") = Range("K" & i).Value
 .Fields("EstdShip$") = Range("L" & i).Value
 .Fields("ShipTo") = Range("M" & i).Value
 .Fields("DateReqd") = Range("N" & i).Value
 .Update
End With
Next i

'@@@@@ clear out the variables & close up

rs.Close
Set rs = Nothing
cn.Close
Set cn = Nothing

End Sub
'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Sub MRupdatefile()

'Dim fSystem As Object
'Dim ofile As Object
Dim homesheet As String
Dim homefile As String
Dim ffile As String
Dim Matreq_Blank As String
Dim toprow As Long
Dim endrow As Long
Dim i As Long

Application.ScreenUpdating = False
Application.EnableEvents = False
Application.DisplayAlerts = False
CurrentCalcMode = Application.Calculation
Application.Calculation = xlManual

homesheet = ActiveSheet.Name
homefile = ActiveWorkbook.Name
ffile = ActiveWorkbook.Path & "\" & homefile
Matreq_Path = "J:\xL_PD\Matreq Blank r18.xlsm"
Matreq_File = "Matreq Blank r18.xlsm"
Workbooks.Open Matreq_Path
Workbooks(homefile).Activate

For i = 1 To Sheets.Count
    Sheets(i).Activate
    If NamedRangeExists("Header_MatReq") Then
        
        If ActiveSheet.Shapes.Count > 0 Then GoTo nxtsht
        toprow = Range("Header_MatReq").Row + 1
        endrow = Range("Footer_MatReq").Row - 1
        ActiveWindow.SmallScroll Down:=-21
        If InStr(Range("L4").Value, "Shipping") < 1 Then
            Columns("L:L").Select
            Selection.Insert Shift:=xlToRight, CopyOrigin:=xlFormatFromLeftOrAbove
        End If
        Range("A" & toprow & ":A" & endrow & ",H" & toprow & ":H" & endrow & ",J" & toprow & ":K" & endrow).Select
        With Selection.Interior
            .ThemeColor = xlThemeColorDark1
            .TintAndShade = -0.14996795556505
        End With
        Range("H" & toprow - 3 & ":M" & toprow - 3).Select
        Selection.Borders(xlInsideVertical).LineStyle = xlNone
        Workbooks(Matreq_File).Activate
        Range("A2:C2").Select
        Selection.Copy
        Workbooks(homefile).Activate
        Range("A2:C2").Select
        ActiveSheet.Buttons.Add(108.75, 17.25, 45, 16.5).Select
        Selection.OnAction = "ProcessMatreq"
        Selection.Characters.Text = "Process"
        Range("A1").Select
        
    End If
nxtsht:
Next i

Workbooks(Matreq_File).Close
Workbooks(homefile).Activate
Sheets(homesheet).Activate

Application.Calculation = CurrentCalcMode
Application.ScreenUpdating = True
Application.EnableEvents = True
Application.DisplayAlerts = True
Set CurrentCalcMode = Nothing

End Sub
Attribute VB_Name = "CTSI_Quote_Layouts_r3"
Sub HideSPTELOColumns(Optional NonSense As Boolean) '@@@@@ for Summary Pricing Table (SPT) Only
    Application.ScreenUpdating = False
    Columns("E:G").EntireColumn.Hidden = Not Columns("E:G").EntireColumn.Hidden
    If Columns("E").Hidden = True Then
        Range("K" & Range("Footer_Summary_Base").Row) = "TRUE"
        Range("SummarySignELORange").Select
        Selection.Font.ColorIndex = xlAutomatic
        Range("SummarySignELOBrdrRange").Select
        With Selection.Borders(xlEdgeLeft)
            .LineStyle = xlContinuous
            .ColorIndex = 16
        End With
        With Selection.Borders(xlEdgeTop)
            .LineStyle = xlContinuous
            .ColorIndex = 16
        End With
        With Selection.Borders(xlEdgeBottom)
            .LineStyle = xlContinuous
            .ColorIndex = 16
        End With
        With Selection.Borders(xlInsideHorizontal)
            .LineStyle = xlContinuous
            .ColorIndex = 16
            .Weight = xlHairline
        End With
    Else
        Range("K" & Range("Footer_Summary_Base").Row) = "FALSE"
        Range("SummarySignELORange").Select
        Selection.Font.ThemeColor = xlThemeColorDark1
        Range("SummarySignELOBrdrRange").Select
        Selection.Borders(xlEdgeLeft).LineStyle = xlNone
        Selection.Borders(xlEdgeTop).LineStyle = xlNone
        Selection.Borders(xlEdgeBottom).LineStyle = xlNone
        Selection.Borders(xlInsideHorizontal).LineStyle = xlNone
    End If
    Range("C26").Select
    Application.ScreenUpdating = True
End Sub
'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Sub HideSPTQtyColumns(Optional NonSense As Boolean) '@@@@@ for Summary Pricing Table (SPT) Only
    Application.ScreenUpdating = False
    Columns("I:J").EntireColumn.Hidden = Not Columns("I:J").EntireColumn.Hidden
    If Columns("I").Hidden = True Then
        Range("SummaryIndivRange").Select
        Selection.Font.ColorIndex = xlAutomatic
        Range("SummaryIndivRange").Cells(2, 1).Select
        Selection.Borders(xlEdgeTop).LineStyle = xlContinuous
        Range("SummaryIndivRange").Cells(6, 1).Select
        Selection.Borders(xlEdgeTop).LineStyle = xlDouble
        Range("SummaryIndivRange").Cells(7, 1).Select
        Selection.Borders(xlEdgeBottom).LineStyle = xlDouble
    Else
        Range("SummaryIndivRange").Select
        Selection.Font.ThemeColor = xlThemeColorDark1
        Range("SummaryIndivRange").Cells(2, 1).Select
        Selection.Borders(xlEdgeTop).LineStyle = xlNone
        Range("SummaryIndivRange").Cells(6, 1).Select
        Selection.Borders(xlEdgeTop).LineStyle = xlNone
        Range("SummaryIndivRange").Cells(7, 1).Select
        Selection.Borders(xlEdgeBottom).LineStyle = xlNone
    End If
    Range("C26").Select
    Application.ScreenUpdating = True
End Sub
'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Sub HideSPTCostColumns(Optional NonSense As Boolean) '@@@@@ for Summary Pricing Table (SPT) Only
    Columns("K:O").EntireColumn.Hidden = Not Columns("K:O").EntireColumn.Hidden
End Sub
'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Sub HideSPTTaxColumn(Optional NonSense As Boolean) '@@@@@ for Summary Pricing Table (SPT) Only
    Columns("P:S").EntireColumn.Hidden = Not Columns("P:S").EntireColumn.Hidden
    Columns("T").EntireColumn.Hidden = False
End Sub
'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Sub HideSPTBidBoxColumns(Optional NonSense As Boolean) '@@@@@ for Summary Pricing Table (SPT) Only
    Columns("V:AJ").EntireColumn.Hidden = Not Columns("V:AJ").EntireColumn.Hidden
End Sub
'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Sub HideSPTLbrHrsColumns(Optional NonSense As Boolean) '@@@@@ for Summary Pricing Table (SPT) Only
    Columns("AM:BJ").EntireColumn.Hidden = Not Columns("AM:BJ").EntireColumn.Hidden
End Sub
'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Sub SPTDevelop() '@@@@@ for Summary Pricing Table (SPT) Only
    ActiveSheet.Range("$A$25").AutoFilter FIELD:=1
    Range("C26").Select
End Sub
'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Sub HideSectionColumn(Optional NonSense As Boolean)
Attribute HideSectionColumn.VB_ProcData.VB_Invoke_Func = " \n14"
    If ActiveWindow.SelectedSheets.Count = 1 Then
        If Range("A9").Value = True _
        Or InStr(ActiveSheet.Name, "Summary") Then
            Columns("B:B").EntireColumn.Hidden = Not Columns("B:B").EntireColumn.Hidden
        End If
    Else
        Dim home As String
        Dim oSheet As Object
        Dim IncludedQuotes As Object
        Set IncludedQuotes = ActiveWindow.SelectedSheets
        home = ActiveSheet.Name
        Application.EnableEvents = False
        Application.DisplayAlerts = False
        Application.ScreenUpdating = False
        CurrentCalcMode = Application.Calculation
        Application.Calculation = xlManual
        For Each oSheet In IncludedQuotes
            oSheet.Activate
            If Range("A9").Value = True _
            Or InStr(oSheet.Name, "Summary") Then
                Columns("B:B").EntireColumn.Hidden = Not Columns("B:B").EntireColumn.Hidden
            End If
        Next oSheet
        IncludedQuotes.Select
        Sheets(home).Activate
        Set IncludedQuotes = Nothing
        Set oSheet = Nothing
        Application.Calculation = CurrentCalcMode
        Application.ScreenUpdating = True
        Application.EnableEvents = True
        Application.DisplayAlerts = True
        Set CurrentCalcMode = Nothing
    End If
End Sub
'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Sub HideModelColumn(Optional NonSense As Boolean) '@@@@@ for Quote Tabs Only
    If ActiveWindow.SelectedSheets.Count = 1 Then
        If Range("A9").Value = True Then
            Columns("E:E").EntireColumn.Hidden = Not Columns("E:E").EntireColumn.Hidden
        End If
    Else
        Dim home As String
        Dim oSheet As Object
        Dim IncludedQuotes As Object
        Set IncludedQuotes = ActiveWindow.SelectedSheets
        home = ActiveSheet.Name
        Application.EnableEvents = False
        Application.DisplayAlerts = False
        Application.ScreenUpdating = False
        CurrentCalcMode = Application.Calculation
        Application.Calculation = xlManual
        For Each oSheet In IncludedQuotes
            oSheet.Activate
            If Range("A9").Value = True Then
                Columns("E:E").EntireColumn.Hidden = Not Columns("E:E").EntireColumn.Hidden
            End If
        Next oSheet
        IncludedQuotes.Select
        Sheets(home).Activate
        Set IncludedQuotes = Nothing
        Set oSheet = Nothing
        Application.Calculation = CurrentCalcMode
        Application.ScreenUpdating = True
        Application.EnableEvents = True
        Application.DisplayAlerts = True
        Set CurrentCalcMode = Nothing
    End If
End Sub
'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Sub ExtraLaborTypes(Optional NonSense As Boolean) '@@@@@ for Quote Tabs Only
    If ActiveWindow.SelectedSheets.Count = 1 Then
        If Range("A9").Value = True Then
            If Columns("R:W").EntireColumn.Hidden = True Then
                Columns("O:W").EntireColumn.Hidden = False
            Else
                Columns("R:W").EntireColumn.Hidden = True
            End If
        End If
    Else
        Dim home As String
        Dim oSheet As Object
        Dim IncludedQuotes As Object
        Set IncludedQuotes = ActiveWindow.SelectedSheets
        home = ActiveSheet.Name
        Application.EnableEvents = False
        Application.DisplayAlerts = False
        Application.ScreenUpdating = False
        CurrentCalcMode = Application.Calculation
        Application.Calculation = xlManual
        For Each oSheet In IncludedQuotes
            oSheet.Activate
            If Range("A9").Value = True Then
                If Columns("R:W").EntireColumn.Hidden = True Then
                    Columns("O:W").EntireColumn.Hidden = False
                Else
                    Columns("R:W").EntireColumn.Hidden = True
                End If
            End If
        Next oSheet
        IncludedQuotes.Select
        Sheets(home).Activate
        Set IncludedQuotes = Nothing
        Set oSheet = Nothing
        Application.Calculation = CurrentCalcMode
        Application.ScreenUpdating = True
        Application.EnableEvents = True
        Application.DisplayAlerts = True
        Set CurrentCalcMode = Nothing
    End If
End Sub
'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Sub SetCosting(Optional NonSense As Boolean) '@@@@@ for Quote Tabs Only
    Dim home As String
    Dim oSheet As Object
    Dim IncludedQuotes As Object
    Set IncludedQuotes = ActiveWindow.SelectedSheets
    home = ActiveSheet.Name
    Application.EnableEvents = False
    Application.DisplayAlerts = False
    Application.ScreenUpdating = False
    CurrentCalcMode = Application.Calculation
    Application.Calculation = xlManual
    For Each oSheet In IncludedQuotes
        oSheet.Activate
        If Range("A9").Value = True Then
            On Error Resume Next
            With ActiveSheet.PageSetup
                .Orientation = xlPortrait
            End With
            On Error GoTo 0
            Columns("H:AG").EntireColumn.Hidden = True
            ActiveSheet.Range("$D$27").AutoFilter FIELD:=4
            ActiveSheet.Range("$A$27").AutoFilter FIELD:=1, Criteria1:="<>"
            Rows("15:24").EntireRow.Hidden = False
        End If
    Next oSheet
    IncludedQuotes.Select
    Sheets(home).Activate
    Set IncludedQuotes = Nothing
    Set oSheet = Nothing
    Application.Calculation = CurrentCalcMode
    Application.ScreenUpdating = True
    Application.EnableEvents = True
    Application.DisplayAlerts = True
    Set CurrentCalcMode = Nothing
End Sub
'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Sub SetPrintNoItemPricing(Optional NonSense As Boolean) '@@@@@ for Quote Tabs Only
Attribute SetPrintNoItemPricing.VB_ProcData.VB_Invoke_Func = " \n14"
    Dim home As String
    Dim oSheet As Object
    Dim IncludedQuotes As Object
    Set IncludedQuotes = ActiveWindow.SelectedSheets
    home = ActiveSheet.Name
    Application.EnableEvents = False
    Application.DisplayAlerts = False
    Application.ScreenUpdating = False
    CurrentCalcMode = Application.Calculation
    Application.Calculation = xlManual
    For Each oSheet In IncludedQuotes
        oSheet.Activate
        If Range("A9").Value = True Then
            Sheets("Job Info & Cover").Unprotect '@@@@@ unprotect Job Info page
            Sheets("Job Info & Cover").Range("C40") = "FALSE"
            Sheets("Job Info & Cover").Protect DrawingObjects:=True, Contents:=True, Scenarios:=True '@@@@@ reprotect Job Info page
            On Error Resume Next
            With ActiveSheet.PageSetup
                .Orientation = xlPortrait
            End With
            On Error GoTo 0
            Columns("B:B").EntireColumn.Hidden = True
            Columns("G:Y").EntireColumn.Hidden = True
            Columns("Z:Z").EntireColumn.Hidden = False
            Columns("AA:AM").EntireColumn.Hidden = True
            ActiveSheet.Range("$D$27").AutoFilter FIELD:=4
            ActiveSheet.Range("$A$27").AutoFilter FIELD:=1, Criteria1:="<>"
            Rows("15:24").EntireRow.Hidden = False
        End If
    Next oSheet
    IncludedQuotes.Select
    Sheets(home).Activate
    Set IncludedQuotes = Nothing
    Set oSheet = Nothing
    Application.Calculation = CurrentCalcMode
    Application.ScreenUpdating = True
    Application.EnableEvents = True
    Application.DisplayAlerts = True
    Set CurrentCalcMode = Nothing
End Sub
'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Sub SetPrintInstalledItemPricing(Optional NonSense As Boolean) '@@@@@ for Quote Tabs Only
Attribute SetPrintInstalledItemPricing.VB_ProcData.VB_Invoke_Func = " \n14"
    Dim home As String
    Dim oSheet As Object
    Dim IncludedQuotes As Object
    Set IncludedQuotes = ActiveWindow.SelectedSheets
    home = ActiveSheet.Name
    Application.EnableEvents = False
    Application.DisplayAlerts = False
    Application.ScreenUpdating = False
    CurrentCalcMode = Application.Calculation
    Application.Calculation = xlManual
    For Each oSheet In IncludedQuotes
        oSheet.Activate
        If Range("A9").Value = True Then
            Sheets("Job Info & Cover").Unprotect '@@@@@ unprotect Job Info page
            Sheets("Job Info & Cover").Range("C40") = "TRUE"
            Sheets("Job Info & Cover").Protect DrawingObjects:=True, Contents:=True, Scenarios:=True '@@@@@ reprotect Job Info page
            On Error Resume Next
            With ActiveSheet.PageSetup
                .Orientation = xlPortrait
            End With
            On Error GoTo 0
            Columns("G:W").EntireColumn.Hidden = True
            Columns("X:Z").EntireColumn.Hidden = False
            Columns("AA:AM").EntireColumn.Hidden = True
            ActiveSheet.Range("$D$27").AutoFilter FIELD:=4
            ActiveSheet.Range("$A$27").AutoFilter FIELD:=1, Criteria1:="<>L*", _
                Operator:=xlAnd, Criteria2:="<>"
            Rows("15:24").EntireRow.Hidden = False
        End If
    Next oSheet
    IncludedQuotes.Select
    Sheets(home).Activate
    Set IncludedQuotes = Nothing
    Set oSheet = Nothing
    Application.Calculation = CurrentCalcMode
    Application.ScreenUpdating = True
    Application.EnableEvents = True
    Application.DisplayAlerts = True
    Set CurrentCalcMode = Nothing
End Sub
'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Sub ShowAllForEditing() '@@@@@ for Quote Tabs Only
Attribute ShowAllForEditing.VB_ProcData.VB_Invoke_Func = " \n14"
    Dim home As String
    Dim oSheet As Object
    Dim IncludedQuotes As Object
    Set IncludedQuotes = ActiveWindow.SelectedSheets
    home = ActiveSheet.Name
    Application.EnableEvents = False
    Application.DisplayAlerts = False
    Application.ScreenUpdating = False
    CurrentCalcMode = Application.Calculation
    Application.Calculation = xlManual
    For Each oSheet In IncludedQuotes
        oSheet.Activate
        If Range("A9").Value = True Then
            Sheets("Job Info & Cover").Unprotect '@@@@@ unprotect Job Info page
            Sheets("Job Info & Cover").Range("C40") = "FALSE"
            Sheets("Job Info & Cover").Protect DrawingObjects:=True, Contents:=True, Scenarios:=True '@@@@@ reprotect Job Info page
            Rows("28:28").Select
            ActiveWindow.FreezePanes = True
            On Error Resume Next
            With ActiveSheet.PageSetup
                .Orientation = xlLandscape
            End With
            On Error GoTo 0
            'Columns("B:B").EntireColumn.Hidden = False
            Columns("G:Q").EntireColumn.Hidden = False
            If IsError(Application.Sum(Range("X" & Range("Footer_Quote_Material").Row))) Then
                Calculate
                Pause 0, 2
                Columns("O:W").EntireColumn.Hidden = False
            Else
                If Application.Sum(Range("P" & Range("Footer_Quote_Material").Row & ":W" & Range("Footer_Quote_Material").Row)) _
                                <> Range("P" & Range("Footer_Quote_Material").Row).Value Then
                    Columns("O:W").EntireColumn.Hidden = False
                End If
            End If
            Columns("X:Z").EntireColumn.Hidden = False
            Columns("AA:AM").EntireColumn.Hidden = False
            ActiveSheet.Range("$A$27").AutoFilter FIELD:=1
            ActiveSheet.Range("$D$27").AutoFilter FIELD:=4
            Rows("15:24").EntireRow.Hidden = True
            Range("C26").Select
        End If
    Next oSheet
    IncludedQuotes.Select
    Sheets(home).Activate
    Set IncludedQuotes = Nothing
    Set oSheet = Nothing
    Application.Calculation = CurrentCalcMode
    Application.ScreenUpdating = True
    Application.EnableEvents = True
    Application.DisplayAlerts = True
    Set CurrentCalcMode = Nothing
End Sub
'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Sub SetPrintRegItemPricing(Optional NonSense As Boolean) '@@@@@ for Quote Tabs Only
Attribute SetPrintRegItemPricing.VB_ProcData.VB_Invoke_Func = " \n14"
    Dim home As String
    Dim oSheet As Object
    Dim IncludedQuotes As Object
    Set IncludedQuotes = ActiveWindow.SelectedSheets
    home = ActiveSheet.Name
    Application.EnableEvents = False
    Application.DisplayAlerts = False
    Application.ScreenUpdating = False
    CurrentCalcMode = Application.Calculation
    Application.Calculation = xlManual
    For Each oSheet In IncludedQuotes
        oSheet.Activate
        If Range("A9").Value = True Then
            Sheets("Job Info & Cover").Unprotect '@@@@@ unprotect Job Info page
            Sheets("Job Info & Cover").Range("C40") = "FALSE"
            Sheets("Job Info & Cover").Protect DrawingObjects:=True, Contents:=True, Scenarios:=True '@@@@@ reprotect Job Info page
            On Error Resume Next
            With ActiveSheet.PageSetup
                .Orientation = xlPortrait
            End With
            On Error GoTo 0
            Columns("B:B").EntireColumn.Hidden = True
            Columns("G:Y").EntireColumn.Hidden = True
            Columns("I:J").EntireColumn.Hidden = False
            Columns("Z:Z").EntireColumn.Hidden = False
            Columns("AA:AM").EntireColumn.Hidden = True
            ActiveSheet.Range("$A$27").AutoFilter FIELD:=1, Criteria1:="<>"
            ActiveSheet.Range("$D$27").AutoFilter FIELD:=4
            Rows("15:24").EntireRow.Hidden = False
        End If
    Next oSheet
    IncludedQuotes.Select
    Sheets(home).Activate
    Set IncludedQuotes = Nothing
    Set oSheet = Nothing
    Application.Calculation = CurrentCalcMode
    Application.ScreenUpdating = True
    Application.EnableEvents = True
    Application.DisplayAlerts = True
    Set CurrentCalcMode = Nothing
End Sub
'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Sub SetPrintCleanQuote() '@@@@@ for Quote Tabs Only
    Dim home As String
    Dim oSheet As Object
    Dim IncludedQuotes As Object
    Set IncludedQuotes = ActiveWindow.SelectedSheets
    home = ActiveSheet.Name
    Application.EnableEvents = False
    Application.DisplayAlerts = False
    Application.ScreenUpdating = False
    CurrentCalcMode = Application.Calculation
    Application.Calculation = xlManual
    For Each oSheet In IncludedQuotes
        oSheet.Activate
        If Range("A9").Value = True Then
            Sheets("Job Info & Cover").Unprotect '@@@@@ unprotect Job Info page
            Sheets("Job Info & Cover").Range("C40") = "FALSE"
            Sheets("Job Info & Cover").Protect DrawingObjects:=True, Contents:=True, Scenarios:=True '@@@@@ reprotect Job Info page
            On Error Resume Next
            With ActiveSheet.PageSetup
                .Orientation = xlLandscape
            End With
            On Error GoTo 0
            'Columns("B:B").EntireColumn.Hidden = False
            Columns("G:Q").EntireColumn.Hidden = False
            If IsError(Application.Sum(Range("X" & Range("Footer_Quote_Material").Row))) Then
                Calculate
                Pause 0, 2
                Columns("O:W").EntireColumn.Hidden = False
            Else
                If Application.Sum(Range("P" & Range("Footer_Quote_Material").Row & ":W" & Range("Footer_Quote_Material").Row)) _
                                <> Range("P" & Range("Footer_Quote_Material").Row).Value Then
                    Columns("O:W").EntireColumn.Hidden = False
                End If
            End If
            Columns("X:Z").EntireColumn.Hidden = False
            Columns("AA:AM").EntireColumn.Hidden = False
            ActiveSheet.Range("$A$27").AutoFilter FIELD:=1
            ActiveSheet.Range("$D$27").AutoFilter FIELD:=4, Criteria1:="<>"
            Rows("15:24").EntireRow.Hidden = True
        End If
    Next oSheet
    IncludedQuotes.Select
    Sheets(home).Activate
    Set IncludedQuotes = Nothing
    Set oSheet = Nothing
    Application.Calculation = CurrentCalcMode
    Application.ScreenUpdating = True
    Application.EnableEvents = True
    Application.DisplayAlerts = True
    Set CurrentCalcMode = Nothing
End Sub
'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Sub Bob_Style(Optional NonSense As Boolean) '@@@@@ for Quote Tabs Only
    If Range("A9").Value = True Then
        Application.ScreenUpdating = False
        CurrentCalcMode = Application.Calculation
        Application.Calculation = xlManual
        Sheets("Job Info & Cover").Unprotect '@@@@@ unprotect Job Info page
        Sheets("Job Info & Cover").Range("C40") = "FALSE"
        Sheets("Job Info & Cover").Protect DrawingObjects:=True, Contents:=True, Scenarios:=True '@@@@@ reprotect Job Info page
        Rows("28:28").Select
        ActiveWindow.FreezePanes = True
        On Error Resume Next
        With ActiveSheet.PageSetup
            .Orientation = xlLandscape
        End With
        On Error GoTo 0
        ActiveSheet.Range("$A$27").AutoFilter FIELD:=1
        ActiveSheet.Range("$D$27").AutoFilter FIELD:=4
        Rows("15:24").EntireRow.Hidden = True
        Columns("G:W").EntireColumn.Hidden = False
        Columns("K:K").EntireColumn.Hidden = True
        Columns("O:O").EntireColumn.Hidden = True
        Columns("R:R").EntireColumn.Hidden = True
        Columns("U:U").EntireColumn.Hidden = True
        Columns("X:Y").EntireColumn.Hidden = True
        Columns("Z:Z").EntireColumn.Hidden = False
        Range("C26").Select
        Application.Calculation = CurrentCalcMode
        Application.ScreenUpdating = True
        Set CurrentCalcMode = Nothing
    End If
End Sub

Attribute VB_Name = "CTSI_Refresh_Old_Quote_r1"
Sub RefreshOldQuoteVersion()

'@@@@@@@@@@+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++@@@@@@@@@@
Dim Debug_Sub As Boolean
Debug_Sub = False '@@@@@ Sets Report functions on/off for debugging
'@@@@@@@@@@+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++@@@@@@@@@@

Dim home As String
Dim newhome As String
Dim Header_Range As Range
Dim Header_Row As Integer
Dim Free_Range As Range '@@@@@ Junk Range variable used for many different things
Dim Test_Range As Range
Dim IncludesRaulandParts As Boolean
Dim IncludesResponderParts As Boolean
Dim IncludesResponderVParts As Boolean

Dim Colm_Manuf As Integer
Dim Colm_Sectn As Integer
Dim Colm_Qty As Integer
Dim Colm_Model As Integer
Dim Colm_Descr As Integer
Dim Colm_CostEa As Integer
Dim Colm_SellEa As Integer
Dim Colm_Markup As Integer
Dim Colm_Fixtr As Integer
Dim Colm_LbrType1 As Integer
Dim Colm_LbrEach1 As Integer
Dim Colm_LbrType2 As Integer
Dim Colm_LbrEach2 As Integer
Dim Colm_LbrType3 As Integer
Dim Colm_LbrEach3 As Integer
Dim Colm_EquipData1 As Integer
Dim oSheet As Object
Dim IncludedQuotes As Object

Set IncludedQuotes = ActiveWindow.SelectedSheets
origin = ActiveSheet.Name
ProgressFormShow "Initializing..."

'@@@@@ if the sheet is the Job Info & Cover, offer to get values from a prior quote sheet
If ActiveSheet.Name = "Job Info & Cover" Then
    ProgressFormClose
    RefreshJobInfoCover
    Exit Sub
End If

'@@@@@ if the sheet is the Job Info & Cover, offer to get values from a prior quote sheet
If ActiveSheet.Name = "Job Set-up" _
Or ActiveSheet.Name = "CustomerCare Set-up" Then
    ProgressFormClose
    RefreshJobSetup
    Exit Sub
End If

'@@@@@ if job info tab isn't filled out, offer to get values from a prior sheet then proceed
If Sheets("Job Info & Cover").Range("C25").Value = " " Then
    YesClicked = False
    Pause 0, 1
    YesNoMenu "Job Info & Cover Refresh", "Copy another quote's Job Info tab?"
    If YesClicked Then
        Sheets("Job Info & Cover").Activate
        ProgressFormClose
        RefreshJobInfoCover (True)
        ProgressFormShow "Initializing..."
        Sheets(origin).Activate
    End If
End If

x = 0.05
ProgressGoal = IncludedQuotes.Count + 0.05
For Each oSheet In IncludedQuotes

'@@@@@ ~~~~~~~~~~~~~~~ upper boundary of multisheet for each next routine ~~~~~~~~~~~~~~~~ @@@@@

ProgressPercent = x / ProgressGoal
ProgressFormUpdate ProgressPercent, oSheet.Name & "...", "Removing Filters, Freezes, UnHide All, and Locate Columns..."
'@@@@@ confirm the oSheet is a quote sheet (job info has already been done) else skip to next.

If Not oSheet.Range("A9").Value = True Then
    x = x + 1
    GoTo NextoSheet
End If

oSheet.Select
home = oSheet.Name
CurrentCalcMode = Application.Calculation
Application.Calculation = xlManual
Application.EnableEvents = False
Application.ScreenUpdating = False
Application.DisplayAlerts = False
IncludesRaulandParts = False
IncludesResponderParts = False

'@@@@@ First initialize the originating quote tab by removing filters, grouping, and any
'@@@@@      hidden rows and columns.

Cells.Select
Range("A1").Activate
Selection.AutoFilter
Selection.ClearOutline
Selection.EntireRow.Hidden = False
Selection.EntireColumn.Hidden = False
ActiveWindow.FreezePanes = False
Range("A1").Select

'@@@@@ It must include a header row with the following column headers:
'@@@@@      Manufacturer, Qty, Model, Description, Cost Each
'@@@@@ It should also identify the following column headers if available:
'@@@@@      Section/Notes Sell Each, Markup, Fixture, Labor Type & Unit 1, 2, & 3

Set Free_Range = FindFirstWild(Range("A8:G100"), "Manuf")

If Free_Range Is Nothing Then
    MsgQuick "This tab is NOT a quote that can be rebuilt."
    Application.Calculation = CurrentCalcMode
    Exit Sub
Else
    Colm_Manuf = Free_Range.Column '@@@@@ set manufacturer column
    Header_Row = Free_Range.Row
End If

'@@@@@ Adjust manufacturer column location to make transfer of columns more likely to maintain
'@@@@@      formula relationships.

If Colm_Manuf < 3 Then
    Columns("A:A").Resize(, 3 - Colm_Manuf).Select
    Selection.Insert Shift:=xlToRight, CopyOrigin:=xlFormatFromLeftOrAbove
    Colm_Manuf = 3
End If

'@@@@@ establish header test range

Set Header_Range = Range("A" & Header_Row & ":AM" & Header_Row)

'@@@@@@@@@@+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++@@@@@@@@@@
'@@@@@@@@@@                      Locate all the COLUMN headers                        @@@@@@@@@@

'@@@@@ Section column may go by 'section' or 'notes', ignore if neither

Set Free_Range = FindFirstWild(Header_Range, "Sect")
If Free_Range Is Nothing Then
    Set Free_Range = FindFirstWild(Header_Range, "Notes")
End If
If Free_Range Is Nothing Then
    Colm_Sectn = 0
Else
    Colm_Sectn = Free_Range.Column
End If

'@@@@@ Should find these columns

Colm_Model = FindFirstWild(Header_Range, "Model").Column
Colm_Qty = FindFirstWild(Header_Range, "Qty").Column
Colm_Descr = FindFirstWild(Header_Range, "Descr").Column
Colm_Markup = FindFirstWild(Header_Range, "Mark").Column

Set Free_Range = FindFirstWild(Header_Range, "Fix")
If Free_Range Is Nothing Then
    Colm_Fixtr = 0
Else
    Colm_Fixtr = Free_Range.Column
End If

'@@@@@ in older versions, 'unit' term was used in leiu of 'each'

Set Free_Range = FindFirstWild(Header_Range, "Each")
If Free_Range Is Nothing Then
    Colm_CostEa = FindFirst(Header_Range, "Unit").Column
    Colm_SellEa = FindFirst(Header_Range, "Unit", Cells(Header_Row, Colm_CostEa)).Column
Else
    Colm_CostEa = Free_Range.Column
    Colm_SellEa = FindFirstWild(Header_Range, "Each", Free_Range).Column
End If

'@@@@@ locate the labor columns

Set Free_Range = FindFirstWild(Header_Range, "Labor", Cells(Header_Row, Colm_SellEa))
If Free_Range Is Nothing Then
    Set Free_Range = FindFirstWild(Header_Range, "Lbr", Cells(Header_Row, Colm_SellEa))
    If Free_Range Is Nothing Then
        Colm_LbrType1 = 0
    Else
        Colm_LbrType1 = Free_Range.Column
    End If
Else
    Colm_LbrType1 = Free_Range.Column
End If

Set Free_Range = FindFirstWild(Header_Range, "Ea", Cells(Header_Row, Colm_SellEa))
If Free_Range Is Nothing Then
    Colm_LbrEach1 = FindFirstWild(Header_Range, "Unit", Cells(Header_Row, Colm_SellEa)).Column
Else
    Colm_LbrEach1 = Free_Range.Column
End If
Set Free_Range = FindFirstWild(Range("Q" & Header_Row & ":AM" & Header_Row), "Ea")
If Free_Range Is Nothing Then
    Colm_LbrEach2 = 0
    Colm_LbrType2 = 0
    Colm_LbrType3 = 0
    Colm_LbrEach3 = 0
Else
    Colm_LbrEach2 = Free_Range.Column
    Colm_LbrType2 = Colm_LbrEach2 - 1
    Colm_LbrType3 = Colm_LbrEach2 + 2
    Colm_LbrEach3 = Colm_LbrEach2 + 3
    
    '@@@@@ If labor columns exist, check for data columns (in newest quote versions)
    Set Free_Range = FindFirstWild(Header_Range, "Dimensions", Cells(Header_Row, Colm_LbrEach3))
    If Free_Range Is Nothing Then
        Colm_EquipData1 = 0
    Else
        Colm_EquipData1 = Free_Range.Column
        '@@@@@ and if that exists, also check for costing columns (in newest quote versions)
        Set Free_Range = FindFirstWild(Header_Range, "Source", _
                                       Cells(Header_Row, Colm_EquipData1))
        If Free_Range Is Nothing Then
            Colm_Costing1 = 0
        Else
            Colm_Costing1 = Free_Range.Column
        End If
    End If

End If

'@@@@@@@@@@+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++@@@@@@@@@@
'@@@@@@@@@@        Now locate the ROW breakpoints and determine section sizes         @@@@@@@@@@

x = x + 0.05
ProgressPercent = x / ProgressGoal
ProgressFormUpdate ProgressPercent, oSheet.Name & "...", "Locate Rows..."

Dim QuoteRange As Range
Dim CableStart As Integer
Dim CableStop As Integer
Dim MiscStart As Integer
Dim MiscStop As Integer
Dim GenMatStart As Integer
Dim GenMatStop As Integer

'@@@@@ Adjust header_row original location to match current version (row) location

If Header_Row < 27 Then
    Rows(Header_Row & ":" & 27 - 1).Select
    Selection.Insert Shift:=xlDown, CopyOrigin:=xlFormatFromLeftOrAbove
    Header_Row = 27
End If

'@@@@@ First find the Range to test to determine the section splits

RedoAfterRowOrderAdjust:

Set Free_Range = FindFirstWild(Range("J8:Q2000"), "Margin").Offset(-4, 0)
Set QuoteRange = Range(Cells(Header_Row, Colm_Manuf).Address & ":" _
                     & Cells(Free_Range.Row, Colm_Descr).Address)

'@@@@@ cable section - MUST exist

If NamedRangeExists("Header_Quote_Cable") Then
    Set Free_Range = Range("F" & Range("Header_Quote_Cable").Row)
    CableStart = Free_Range.Row + 1
    CableStop = FindFirstWild(QuoteRange, "Fixture", Free_Range).Row - 1
Else
    Set Free_Range = FindFirstWild(QuoteRange, "Cable")
    If Free_Range.Value = "Wire, Cable, & Misc. Hardware" Then
        CableStart = Free_Range.Row + 4
        CableStop = FindFirstWild(QuoteRange, "Rough-In", Cells(CableStart, Colm_Descr)).Row - 5
    Else
        Set Free_Range = FindFirst(QuoteRange, "Cable")
        If Free_Range Is Nothing _
        And Not NamedRangeExists("Header_Quote_Cable") Then
            MsgTimed "Cannot locate Cable section. Cannot Run.", "ERROR - MUST EXIT", 4, True
            GoTo SkipToEnd
        Else
            If Free_Range Is Nothing Then
                CableStart = Range("Header_Quote_Cable").Row + 1
            Else
                CableStart = Free_Range.Row + 1
            End If
        End If
        CableStop = FindFirstWild(QuoteRange, "Fixture", Free_Range).Row - 1
    End If
End If

'@@@@@ adjust Cable section if the last rows don't include difficulty and infection control

If InStr(Sheets(home).Cells(CableStop, Colm_Descr).Value, "Difficulty") = 0 Then
    Rows(CableStop + 1 & ":" & CableStop + 1).Select
    Selection.Insert Shift:=xlDown, CopyOrigin:=xlFormatFromLeftOrAbove
    CableStop = CableStop + 1
    Cells(CableStop, Colm_Descr).Value = "Difficulty"
End If

If InStr(Sheets(home).Cells(CableStop - 1, Colm_Descr).Value, "Infection Control") = 0 Then
    Rows(CableStop & ":" & CableStop).Select
    Selection.Insert Shift:=xlDown, CopyOrigin:=xlFormatFromLeftOrAbove
    CableStop = CableStop + 1
    Cells(CableStop - 1, Colm_Descr).Value = "Infection Control"
End If

'@@@@@ misc & general material sections - GenMat MUST exist

If Cells(Header_Row + 1, Colm_Descr).Value = "Miscellaneous" Then '@@@@@ Misc at top
    MiscStart = Header_Row + 2
    MiscStop = FindFirstWild(QuoteRange, "Field Device").Row - 1
    GenMatStart = MiscStop + 2
    GenMatStop = CableStart - 2
Else
    If Cells(Header_Row, Colm_CostEa).Value = "Unit" Then '@@@@@ very old version
        MiscStart = FindFirst(QuoteRange, "Rough-In").Row + 4
        MiscStop = FindFirstWild(QuoteRange, "Field Device").Row - 5
        GenMatStart = MiscStop + 9
        GenMatStop = FindFirstWild(Range("J8:Q500"), "Margin").Row - 9
    ElseIf FindFirstWild(QuoteRange, "& Hardware") Is Nothing _
    And Not NamedRangeExists("Header_Quote_MiscMat") Then
        MiscStart = 0 '@@@@@ ignore Miscellaneous section, assume older rev
        MiscStop = 0
        GenMatStart = Header_Row + 1
        GenMatStop = CableStart - 2
    Else '@@@@@ should be newest version (or faux new)
        If FindFirstWild(QuoteRange, "& Hardware") Is Nothing Then
            MiscStart = Range("Header_Quote_MiscMat").Row + 1
        Else
            MiscStart = FindFirstWild(QuoteRange, "& Hardware").Row + 1
        End If
        MiscStop = CableStart - 2
        GenMatStart = Header_Row + 2
        GenMatStop = MiscStart - 2
    End If
End If

If MiscStart < GenMatStart And MiscStart <> 0 Then '@@@@@ reorder the rows (cut/paste) and redo
    Cells(MiscStart - 1, Colm_Descr).Value = "Miscellaneous Consumables & Hardware"
    Rows(MiscStart - 1 & ":" & MiscStop).Select
    Selection.Cut
    Rows(GenMatStop + 1 & ":" & GenMatStop + 1).Select
    Selection.Insert Shift:=xlDown
    Rows(MiscStart - 1 & ":" & MiscStart - 1).Select
    Selection.Insert Shift:=xlDown, CopyOrigin:=xlFormatFromLeftOrAbove
    GoTo RedoAfterRowOrderAdjust
End If

'@@@@@ And lastly locate the admin section

Dim NonTaxRange As Range
Dim NonTaxStart As Integer
Dim NonTaxStop As Integer
Dim ExpensesSubSect As Integer
Dim IsAVtemplate As Boolean
IsAVtemplate = False

Set Free_Range = FindFirstWild(QuoteRange, "Fixture")
If Free_Range Is Nothing Then
    If Cells(Header_Row, Colm_Descr).Offset(1, 0).Value = "Engineering Labor" Then '@@@@@ v.old
        Range(Header_Row + 1 & ":" & Header_Row + 2).Select
        Selection.Insert Shift:=xlDown, CopyOrigin:=xlFormatFromLeftOrAbove
        Cells(Header_Row, Colm_Descr).Offset(1, 0).Value = "Fixture"
        Cells(Header_Row, Colm_Descr).Offset(2, 0).Value = "Professional Services"
        NonTaxStart = Header_Row + 2
        NonTaxStop = FindFirst(QuoteRange, "Wire, Cable, & Misc. Hardware") - 5
    Else
        NonTaxStart = 0
        NonTaxStop = 0
    End If
Else: Set Free_Range = Cells(Range("Header_Quote_EngAdm").Row, QuoteRange.Column)
    NonTaxStart = Free_Range.Row + 1
    NonTaxStop = FindFirstWild(QuoteRange, "Total", Free_Range).Row - 1
    Set Free_Range = FindFirstWild(QuoteRange, "Engineered Flow Diagrams", Free_Range)
    If Free_Range Is Nothing Then
    Else
        Set Free_Range = FindFirstWild(QuoteRange, "Architectural Coordination Drawings", Free_Range)
        If Free_Range Is Nothing Then
        Else
            IsAVtemplate = True
        End If
    End If
End If

If NonTaxStart <> 0 Then
    Set NonTaxRange = Range(Cells(NonTaxStart, Colm_Descr).Address & ":" _
                          & Cells(NonTaxStop, Colm_Descr).Address)
End If

'@@@@@ Now determine if the sheet has any Rauland equipment on it

Set Free_Range = FindFirst(Range("C" & Range("Header_Quote_GenMat").Row + 1 & _
                                ":C" & Range("Footer_Quote_Material").Row - 1), "Rauland")
If Not Free_Range Is Nothing Then
    IncludesRaulandParts = True
End If

'@@@@@@@@@@+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++@@@@@@@@@@
'@@@@@@@@@@        Issue a Report of what was data located, if debugging is on        @@@@@@@@@@

If Debug_Sub Then '@@@@@ checks variable set at top, issues report if debugging

'@@@@@ Note the Header Row found - for debugging

Dim HeaderReport As String
    HeaderReport = "Header Range " & Chr(9) & "= " & Header_Range.Address

'@@@@@ Report the Column Headers found

If Colm_Sectn = 0 Then
    HeaderReport = HeaderReport & Chr(10) & Chr(10) & "*** NO Section Column"
Else
    HeaderReport = HeaderReport & Chr(10) & Chr(10) & _
    "Section " & Chr(9) & Chr(9) & "= " & Chr(64 + Colm_Sectn)
End If
HeaderReport = HeaderReport & _
    Chr(10) & "Manufacturer " & Chr(9) & "= " & Chr(64 + Colm_Manuf) & _
    Chr(10) & "Qty " & Chr(9) & Chr(9) & "= " & Chr(64 + Colm_Qty) & _
    Chr(10) & "Model " & Chr(9) & Chr(9) & "= " & Chr(64 + Colm_Model) & _
    Chr(10) & "Description " & Chr(9) & "= " & Chr(64 + Colm_Descr) & _
    Chr(10) & "Cost Each " & Chr(9) & "= " & Chr(64 + Colm_CostEa) & _
    Chr(10) & "Sell Each " & Chr(9) & Chr(9) & "= " & Chr(64 + Colm_SellEa) & _
    Chr(10) & "Markup " & Chr(9) & Chr(9) & "= " & Chr(64 + Colm_Markup)
If Colm_Fixtr = 0 Then
    HeaderReport = HeaderReport & Chr(10) & "*** NO Fixture Column"
Else
    HeaderReport = HeaderReport & Chr(10) & _
    "Fixture " & Chr(9) & Chr(9) & "= " & Chr(64 + Colm_Fixtr)
End If
If Colm_LbrType1 = 0 Then
    HeaderReport = HeaderReport & Chr(10) & "*** NO Labor Type 1 Column"
Else
    HeaderReport = HeaderReport & Chr(10) & _
    "Labor Type 1 " & Chr(9) & "= " & Chr(64 + Colm_LbrType1)
End If
If Colm_LbrEach1 = 0 Then
    HeaderReport = HeaderReport & Chr(10) & "*** NO Labor Each 1 Column"
Else
    HeaderReport = HeaderReport & Chr(10) & _
    "Labor Each 1 " & Chr(9) & "= " & Chr(64 + Colm_LbrEach1)
End If
If Colm_LbrType2 = 0 Then
    HeaderReport = HeaderReport & Chr(10) & "*** NO Labor Type 2 Column"
Else
    HeaderReport = HeaderReport & Chr(10) & _
    "Labor Type 2 " & Chr(9) & "= " & Chr(64 + Colm_LbrType2)
End If
If Colm_LbrEach2 = 0 Then
    HeaderReport = HeaderReport & Chr(10) & "*** NO Labor Each 2 Column"
Else
    HeaderReport = HeaderReport & Chr(10) & _
    "Labor Each 2 " & Chr(9) & "= " & Chr(64 + Colm_LbrEach2)
End If
If Colm_LbrType3 = 0 Then
    HeaderReport = HeaderReport & Chr(10) & "*** NO Labor Type 3 Column"
Else
    HeaderReport = HeaderReport & Chr(10) & _
    "Labor Type 3 " & Chr(9) & "= " & Chr(64 + Colm_LbrType3)
End If
If Colm_LbrEach3 = 0 Then
    HeaderReport = HeaderReport & Chr(10) & "*** NO Labor Each 3 Column"
Else
    HeaderReport = HeaderReport & Chr(10) & _
    "Labor Each 3 " & Chr(9) & "= " & Chr(64 + Colm_LbrEach3)
End If
If Colm_EquipData1 = 0 Then
    HeaderReport = HeaderReport & Chr(10) & "*** NO Data Columns"
Else
    HeaderReport = HeaderReport & Chr(10) & _
    "Data Column 1 " & Chr(9) & "= " & Chr(64 + Colm_EquipData1)
End If
If Colm_Costing1 = 0 Then
    HeaderReport = HeaderReport & Chr(10) & "*** NO Costing Columns"
Else
    HeaderReport = HeaderReport & Chr(10) & _
    "Costing Column 1 " & Chr(9) & "= " & Chr(64 + Colm_Costing1)
End If

'@@@@@ Note Test Range - for debugging

HeaderReport = HeaderReport & Chr(10) & Chr(10) & _
"Quote Test Range " & Chr(9) & "= " & QuoteRange.Address

'@@@@@ Report section splits found

HeaderReport = HeaderReport & Chr(10) & Chr(10) & _
"GenMat Start Row " & Chr(9) & "= " & GenMatStart & Chr(10) & _
"GenMat Stop Row " & Chr(9) & "= " & GenMatStop
If MiscStart = 0 Then
    HeaderReport = HeaderReport & Chr(10) & "*** NO Miscellaneous Section"
Else
    HeaderReport = HeaderReport & Chr(10) & _
    "Misc Start Row " & Chr(9) & "= " & MiscStart & Chr(10) & _
    "Misc Stop Row " & Chr(9) & "= " & MiscStop
End If
HeaderReport = HeaderReport & Chr(10) & _
"Cable Start Row " & Chr(9) & "= " & CableStart & Chr(10) & _
"Cable Stop Row " & Chr(9) & "= " & CableStop

'@@@@@ Report the Admin section if located

If NonTaxStart <> 0 Then
    HeaderReport = HeaderReport & Chr(10) & Chr(10) & _
    "Admin Range " & Chr(9) & "= " & NonTaxRange.Address
End If

If IncludesRaulandParts Then
    HeaderReport = HeaderReport & Chr(10) & Chr(10) & _
    "Rauland Parts are on this QTab " & Free_Range.Address
Else
    HeaderReport = HeaderReport & Chr(10) & Chr(10) & _
    "No Rauland Parts are on this QTab"
End If

MsgBox HeaderReport, , "Quote Data Location Report"

'GoTo SkipToEnd '@@@@@ if just debug report.

End If '@@@@@ end debugging report

'@@@@@@@@@@+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++@@@@@@@@@@
'@@@@@@@@@@   After the info is gathered, build a new sheet to the same dimmensions   @@@@@@@@@@

x = x + 0.05
ProgressPercent = x / ProgressGoal
ProgressFormUpdate ProgressPercent, oSheet.Name & "...", "Create new sheet and resize each section to suit..."

Application.ScreenUpdating = False
Application.EnableEvents = False
Application.DisplayAlerts = False

'@@@@@ If the tabname exceeds 27 characters, it must be truncated in the new "fix-" sheet
newhome = "fix-" & Left(home, 27)
If Len(home) > 27 Then
    MsgQuick "Tabname exceeded 27 characters. Will be truncated."
End If

'@@@@@ Delete sheet named "fix-" & home if it exists
DeleteSheetIfExists (newhome)

'@@@@@ Create new sheet from BLANK and name it "fix-" & home
Sheets("BLANK").Visible = True
Sheets("BLANK").Copy After:=Sheets(Sheets.Count)
ActiveSheet.Name = newhome
Range("A9").Value = "TRUE"
Sheets("BLANK").Visible = False
Sheets(newhome).Activate

'@@@@@ Begin by fixing the number of rows in each section by copy, insert-copy row

Dim GenMatSize As Integer
Dim GenMatBlank As Integer
Dim GenMatCopy As Integer

Dim MiscSize As Integer
Dim MiscBlank As Integer
Dim MiscCopy As Integer

Dim CableSize As Integer
Dim CableBlank As Integer
Dim CableCopy As Integer

Dim BlankRowCount As Integer

GenMatBlank = 10 '@@@@@ sets the template (Blank) number of Rows to be adjusted
GenMatCopy = 30 '@@@@@ sets the template row to be copy/copy-inserted during adjustment
MiscBlank = 6 '@@@@@ sets the template (Blank) number of Rows to be adjusted
MiscCopy = 41 '@@@@@ sets the template row to be copy/copy-inserted during adjustment
CableBlank = 10 '@@@@@ sets the template (Blank) number of Rows to be adjusted
CableCopy = 48 '@@@@@ sets the template row to be copy/copy-inserted during adjustment
AdminCopy = 62 '@@@@@ sets the template row to be copy/copy-inserted during adjustment

'@@@@@ General Material Section

GenMatSize = GenMatStop - GenMatStart + 1
If GenMatSize > GenMatBlank Then '@@@@@ copy/copy-insert rows if greater than the blank
    Rows(GenMatCopy & ":" & GenMatCopy).Copy
    Rows(GenMatCopy & ":" & (GenMatCopy - GenMatBlank - 1) + GenMatSize).Insert Shift:=xlDown
ElseIf GenMatSize < GenMatBlank Then '@@@@@ delete rows if less than the blank
    If GenMatSize = 0 Then '@@@@@ something's wrong, there MUST be a GenMat section
        MsgBox "There MUST be a General Material Section to proceed.", , "WARNING"
        GoTo SkipToEnd
    Else
        Rows(GenMatCopy & ":" & (GenMatCopy + GenMatBlank - 1) - GenMatSize).Delete Shift:=xlUp
    End If
Else
    '@@@@@ do nothing, there's exactly the right number of rows
End If

Application.CutCopyMode = False

'@@@@@ adjustment for AV Subsections (special formatting)

Sheets(home).Activate
If Range("B29").Interior.ThemeColor = xlThemeColorDark1 _
And Range("F29").Interior.ThemeColor = xlThemeColorDark1 _
And Range("P29").Interior.ThemeColor = xlThemeColorDark1 Then 'this is an AV Qtab
    Set Free_Range = Range("P" & Range("Header_Quote_GenMat").Row + 1 & _
                          ":P" & Range("Header_Quote_MiscMat").Row - 1)
    For Each oCell In Free_Range
        If oCell.Interior.ThemeColor = xlThemeColorDark1 _
        And oCell.Interior.ThemeColor = xlThemeColorDark1 _
        And oCell.Interior.ThemeColor = xlThemeColorDark1 Then 'reformat row on the newhome tab
            Sheets(newhome).Activate
            Range("A" & oCell.Row & ":Y" & oCell.Row).Select
            With Selection
                .Font.ThemeColor = xlThemeColorDark1
                .Font.TintAndShade = -0.249977111
                .Interior.PatternColorIndex = xlAutomatic
                .Interior.ThemeColor = xlThemeColorDark1
                .Interior.TintAndShade = -0.249946592608417
                .Interior.PatternTintAndShade = 0
                .Borders(xlEdgeTop).Weight = xlMedium
                .Borders(xlEdgeBottom).Weight = xlMedium
            End With
            Range("F" & oCell.Row).Select
            With Selection.Font
                .FontStyle = "Bold"
                .Underline = xlUnderlineStyleSingle
                .ColorIndex = xlAutomatic
                .TintAndShade = 0
            End With
            Sheets(home).Activate
        End If
    Next oCell
End If
Sheets(newhome).Activate

'@@@@@ Miscellaneous Material Section

If MiscStart <> 0 Then

    MiscCopy = MiscCopy + GenMatSize - GenMatBlank '@@@@@ adjust for GenMat-blank difference

    MiscSize = MiscStop - MiscStart + 1
    If MiscSize > MiscBlank Then '@@@@@ copy/copy-insert rows if greater than the blank
        Rows(MiscCopy & ":" & MiscCopy).Copy
        Rows(MiscCopy & ":" & (MiscCopy - MiscBlank - 1) + MiscSize).Insert Shift:=xlDown
    ElseIf MiscSize < MiscBlank Then '@@@@@ delete rows if less than the blank
        If MiscSize = 0 Then '@@@@@ something's wrong, the Misc section is missing
            MsgTimed "The Miscellaneous Material Section is missing.", "WARNING", 6, True
        Else
            Rows(MiscCopy & ":" & (MiscCopy + MiscBlank - 1) - MiscSize).Delete Shift:=xlUp
        End If
    Else
        '@@@@@ do nothing, there's exactly the right number of rows
    End If
    
    CableCopy = CableCopy + MiscSize - MiscBlank
    AdminCopy = AdminCopy + MiscSize - MiscBlank
    
End If

'@@@@@ Cable Section

CableCopy = CableCopy + GenMatSize - GenMatBlank

CableSize = CableStop - CableStart + 1
If CableSize > CableBlank Then '@@@@@ copy/copy-insert rows if greater than the blank
    Rows(CableCopy & ":" & CableCopy).Copy
    Rows(CableCopy & ":" & (CableCopy - CableBlank - 1) + CableSize).Insert Shift:=xlDown
ElseIf CableSize < CableBlank Then '@@@@@ delete rows if less than the blank
    If CableSize = 0 Then '@@@@@ something's wrong, there MUST be a Cable section
        MsgBox "There MUST be a Cable Section to proceed.", , "WARNING"
        GoTo SkipToEnd
    Else
        Rows(CableCopy & ":" & (CableCopy + CableBlank - 1) - CableSize).Delete Shift:=xlUp
    End If
Else
    '@@@@@ do nothing, there's exactly the right number of rows
End If

Application.CutCopyMode = False

'@@@@@ Admin Section

If IsAVtemplate Then

    AdminCopy = AdminCopy + GenMatSize - GenMatBlank + CableSize - CableBlank

    Rows(AdminCopy & ":" & AdminCopy).Copy
    Rows((AdminCopy - 1) & ":" & AdminCopy).Insert Shift:=xlDown
    Application.CutCopyMode = False

    Cells(AdminCopy - 1, 6).Value = "Engineered Flow Diagrams"
    Cells(AdminCopy, 6).Value = "Architectural Coordination Drawings"
    Cells(AdminCopy + 1, 6).Value = "Submittal Books - Data Sheets"
    Cells(AdminCopy + 2, 6).Value = "Submittal Drawings - Additional Time For Bid Review Set(s)"

End If

'@@@@@@@@@@+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++@@@@@@@@@@
'@@@@@@@@@@        Now copy the data from Original Version to Refreshed Version       @@@@@@@@@@

x = x + 0.05
ProgressPercent = x / ProgressGoal
ProgressFormUpdate ProgressPercent, oSheet.Name & "...", "Copy source data to new quote: general material..."

'@@@@@ Copy GenMat Columns to Target

If Colm_Sectn <> 0 Then _
        RangeCopy Sheets(home).Cells(GenMatStart, Colm_Sectn).Resize(GenMatSize, 1), _
        Sheets(newhome).Cells(GenMatCopy - 1, 2).Resize(GenMatSize, 1), True
RangeCopy Sheets(home).Cells(GenMatStart, Colm_Manuf).Resize(GenMatSize, 1), _
          Sheets(newhome).Cells(GenMatCopy - 1, 3).Resize(GenMatSize, 1), True
RangeCopy Sheets(home).Cells(GenMatStart, Colm_Qty).Resize(GenMatSize, 1), _
          Sheets(newhome).Cells(GenMatCopy - 1, 4).Resize(GenMatSize, 1), True, , , , True
RangeCopy Sheets(home).Cells(GenMatStart, Colm_Model).Resize(GenMatSize, 1), _
          Sheets(newhome).Cells(GenMatCopy - 1, 5).Resize(GenMatSize, 1), True
RangeCopy Sheets(home).Cells(GenMatStart, Colm_Descr).Resize(GenMatSize, 1), _
          Sheets(newhome).Cells(GenMatCopy - 1, 6).Resize(GenMatSize, 1), True, , True
RangeCopy Sheets(home).Cells(GenMatStart, Colm_CostEa).Resize(GenMatSize, 1), _
          Sheets(newhome).Cells(GenMatCopy - 1, 7).Resize(GenMatSize, 1), True
RangeCopy Sheets(home).Cells(GenMatStart, Colm_SellEa).Resize(GenMatSize, 1), _
          Sheets(newhome).Cells(GenMatCopy - 1, 9).Resize(GenMatSize, 1), False
If Colm_Markup <> 0 Then _
        RangeCopy Sheets(home).Cells(GenMatStart - 1, Colm_Markup).Resize(GenMatSize + 1, 1), _
        Sheets(newhome).Cells(GenMatCopy - 2, 12).Resize(GenMatSize + 1, 1)
If Colm_Fixtr <> 0 Then _
        RangeCopy Sheets(home).Cells(GenMatStart, Colm_Fixtr).Resize(GenMatSize, 1), _
        Sheets(newhome).Cells(GenMatCopy - 1, 13).Resize(GenMatSize, 1), True, True
If Colm_LbrType1 <> 0 Then _
        RangeCopy Sheets(home).Cells(GenMatStart, Colm_LbrType1).Resize(GenMatSize, 1), _
        Sheets(newhome).Cells(GenMatCopy - 1, 15).Resize(GenMatSize, 1), True, True
If Colm_LbrEach1 <> 0 Then _
        RangeCopy Sheets(home).Cells(GenMatStart, Colm_LbrEach1).Resize(GenMatSize, 1), _
        Sheets(newhome).Cells(GenMatCopy - 1, 16).Resize(GenMatSize, 1), True
If Colm_LbrType2 <> 0 Then _
        RangeCopy Sheets(home).Cells(GenMatStart, Colm_LbrType2).Resize(GenMatSize, 1), _
        Sheets(newhome).Cells(GenMatCopy - 1, 18).Resize(GenMatSize, 1), True, True
If Colm_LbrEach2 <> 0 Then _
        RangeCopy Sheets(home).Cells(GenMatStart, Colm_LbrEach2).Resize(GenMatSize, 1), _
        Sheets(newhome).Cells(GenMatCopy - 1, 19).Resize(GenMatSize, 1), True
If Colm_LbrType3 <> 0 Then _
        RangeCopy Sheets(home).Cells(GenMatStart, Colm_LbrType3).Resize(GenMatSize, 1), _
        Sheets(newhome).Cells(GenMatCopy - 1, 21).Resize(GenMatSize, 1), True, True
If Colm_LbrEach3 <> 0 Then _
        RangeCopy Sheets(home).Cells(GenMatStart, Colm_LbrEach3).Resize(GenMatSize, 1), _
        Sheets(newhome).Cells(GenMatCopy - 1, 22).Resize(GenMatSize, 1), True
If Colm_EquipData1 <> 0 Then _
        RangeCopy Sheets(home).Cells(GenMatStart, Colm_EquipData1).Resize(GenMatSize, 6), _
        Sheets(newhome).Cells(GenMatCopy - 1, 27).Resize(GenMatSize, 6), True, True
If Colm_Costing1 <> 0 Then _
        RangeCopy Sheets(home).Cells(GenMatStart, Colm_Costing1).Resize(GenMatSize, 3), _
        Sheets(newhome).Cells(GenMatCopy - 1, 34).Resize(GenMatSize, 3), True, True

x = x + 0.2
ProgressPercent = x / ProgressGoal
ProgressFormUpdate ProgressPercent, oSheet.Name & "...", "Copy source data to new quote: misc & cable..."

'@@@@@ Copy Misc Columns to Target

If MiscStart <> 0 Then '@@@@@ Miscellaneous only if found
    If Colm_Sectn <> 0 Then _
        RangeCopy Sheets(home).Cells(MiscStart, Colm_Sectn).Resize(MiscSize, 1), _
        Sheets(newhome).Cells(MiscCopy - 1, 2).Resize(MiscSize, 1), True
    RangeCopy Sheets(home).Cells(MiscStart, Colm_Manuf).Resize(MiscSize, 1), _
          Sheets(newhome).Cells(MiscCopy - 1, 3).Resize(MiscSize, 1), True
    RangeCopy Sheets(home).Cells(MiscStart, Colm_Qty).Resize(MiscSize, 1), _
          Sheets(newhome).Cells(MiscCopy - 1, 4).Resize(MiscSize, 1), True
    RangeCopy Sheets(home).Cells(MiscStart, Colm_Model).Resize(MiscSize, 1), _
          Sheets(newhome).Cells(MiscCopy - 1, 5).Resize(MiscSize, 1), True
    RangeCopy Sheets(home).Cells(MiscStart, Colm_Descr).Resize(MiscSize, 1), _
          Sheets(newhome).Cells(MiscCopy - 1, 6).Resize(MiscSize, 1), True, , True
    RangeCopy Sheets(home).Cells(MiscStart, Colm_CostEa).Resize(MiscSize, 1), _
          Sheets(newhome).Cells(MiscCopy - 1, 7).Resize(MiscSize, 1), True
    RangeCopy Sheets(home).Cells(MiscStart, Colm_SellEa).Resize(MiscSize, 1), _
          Sheets(newhome).Cells(MiscCopy - 1, 9).Resize(MiscSize, 1)
    If Colm_Markup <> 0 Then _
          RangeCopy Sheets(home).Cells(MiscStart - 1, Colm_Markup).Resize(MiscSize + 1, 1), _
          Sheets(newhome).Cells(MiscCopy - 2, 12).Resize(MiscSize + 1, 1)
    If Colm_Fixtr <> 0 Then _
          RangeCopy Sheets(home).Cells(MiscStart, Colm_Fixtr).Resize(MiscSize, 1), _
          Sheets(newhome).Cells(MiscCopy - 1, 13).Resize(MiscSize, 1), True, True
    If Colm_LbrType1 <> 0 Then _
          RangeCopy Sheets(home).Cells(MiscStart, Colm_LbrType1).Resize(MiscSize, 1), _
          Sheets(newhome).Cells(MiscCopy - 1, 15).Resize(MiscSize, 1), True, True
    If Colm_LbrEach1 <> 0 Then _
          RangeCopy Sheets(home).Cells(MiscStart, Colm_LbrEach1).Resize(MiscSize, 1), _
          Sheets(newhome).Cells(MiscCopy - 1, 16).Resize(MiscSize, 1), True
    If Colm_LbrType2 <> 0 Then _
          RangeCopy Sheets(home).Cells(MiscStart, Colm_LbrType2).Resize(MiscSize, 1), _
          Sheets(newhome).Cells(MiscCopy - 1, 18).Resize(MiscSize, 1), True, True
    If Colm_LbrEach2 <> 0 Then _
          RangeCopy Sheets(home).Cells(MiscStart, Colm_LbrEach2).Resize(MiscSize, 1), _
          Sheets(newhome).Cells(MiscCopy - 1, 19).Resize(MiscSize, 1), True
    If Colm_LbrType3 <> 0 Then _
          RangeCopy Sheets(home).Cells(MiscStart, Colm_LbrType3).Resize(MiscSize, 1), _
          Sheets(newhome).Cells(MiscCopy - 1, 21).Resize(MiscSize, 1), True, True
    If Colm_LbrEach3 <> 0 Then _
          RangeCopy Sheets(home).Cells(MiscStart, Colm_LbrEach3).Resize(MiscSize, 1), _
          Sheets(newhome).Cells(MiscCopy - 1, 22).Resize(MiscSize, 1), True
End If '@@@@@ Miscellaneous only if found

'@@@@@ Copy Cable Columns to Target, except if last row if description is about 'difficulty'
'@@@@@      then copy only the Qty column for that row

RangeCopy Sheets(home).Cells(CableStart, Colm_Qty).Resize(CableSize, 1), _
          Sheets(newhome).Cells(CableCopy - 1, 4).Resize(CableSize, 1), True

'@@@@@ if the last row is about difficulty, copy labor1 type and adjust the Cable section size

If InStr(Sheets(home).Cells(CableStop, Colm_Descr).Value, "Difficulty") Then
    If Colm_LbrType1 <> 0 Then _
        RangeCopy Sheets(home).Cells(CableStop, Colm_LbrType1).Resize(1, 1), _
        Sheets(newhome).Cells(CableCopy - 2 + CableSize, 15).Resize(1, 1), True, True
    CableSize = CableSize - 1
End If

'@@@@@ now adjust the Cable section size if the next to last row is about infection control

If InStr(Sheets(home).Cells(CableStop - 1, Colm_Descr).Value, "Infection Control") Then
    If Colm_LbrType1 <> 0 Then _
        RangeCopy Sheets(home).Cells(CableStop - 1, Colm_LbrType1).Resize(1, 1), _
        Sheets(newhome).Cells(CableCopy - 2 + CableSize, 15).Resize(1, 1), True, True
    CableSize = CableSize - 1
End If

If Colm_Sectn <> 0 Then _
        RangeCopy Sheets(home).Cells(CableStart, Colm_Sectn).Resize(CableSize, 1), _
        Sheets(newhome).Cells(CableCopy - 1, 2).Resize(CableSize, 1), True
RangeCopy Sheets(home).Cells(CableStart, Colm_Manuf).Resize(CableSize, 1), _
          Sheets(newhome).Cells(CableCopy - 1, 3).Resize(CableSize, 1), True
RangeCopy Sheets(home).Cells(CableStart, Colm_Model).Resize(CableSize, 1), _
          Sheets(newhome).Cells(CableCopy - 1, 5).Resize(CableSize, 1), True
RangeCopy Sheets(home).Cells(CableStart, Colm_Descr).Resize(CableSize, 1), _
          Sheets(newhome).Cells(CableCopy - 1, 6).Resize(CableSize, 1), True, , True
RangeCopy Sheets(home).Cells(CableStart, Colm_CostEa).Resize(CableSize, 1), _
          Sheets(newhome).Cells(CableCopy - 1, 7).Resize(CableSize, 1), True
RangeCopy Sheets(home).Cells(CableStart, Colm_SellEa).Resize(CableSize, 1), _
          Sheets(newhome).Cells(CableCopy - 1, 9).Resize(CableSize, 1)
If Colm_Markup <> 0 Then _
        RangeCopy Sheets(home).Cells(CableStart - 1, Colm_Markup).Resize(CableSize + 1, 1), _
        Sheets(newhome).Cells(CableCopy - 2, 12).Resize(CableSize + 1, 1)
If Colm_Fixtr <> 0 Then _
        RangeCopy Sheets(home).Cells(CableStart, Colm_Fixtr).Resize(CableSize, 1), _
        Sheets(newhome).Cells(CableCopy - 1, 13).Resize(CableSize, 1), True, True
If Colm_LbrType1 <> 0 Then _
        RangeCopy Sheets(home).Cells(CableStart, Colm_LbrType1).Resize(CableSize, 1), _
        Sheets(newhome).Cells(CableCopy - 1, 15).Resize(CableSize, 1), True, True
If Colm_LbrEach1 <> 0 Then _
        RangeCopy Sheets(home).Cells(CableStart, Colm_LbrEach1).Resize(CableSize, 1), _
        Sheets(newhome).Cells(CableCopy - 1, 16).Resize(CableSize, 1), True
If Colm_LbrType2 <> 0 Then _
        RangeCopy Sheets(home).Cells(CableStart, Colm_LbrType2).Resize(CableSize, 1), _
        Sheets(newhome).Cells(CableCopy - 1, 18).Resize(CableSize, 1), True, True
If Colm_LbrEach2 <> 0 Then _
        RangeCopy Sheets(home).Cells(CableStart, Colm_LbrEach2).Resize(CableSize, 1), _
        Sheets(newhome).Cells(CableCopy - 1, 19).Resize(CableSize, 1), True
If Colm_LbrType3 <> 0 Then _
        RangeCopy Sheets(home).Cells(CableStart, Colm_LbrType3).Resize(CableSize, 1), _
        Sheets(newhome).Cells(CableCopy - 1, 21).Resize(CableSize, 1), True, True
If Colm_LbrEach3 <> 0 Then _
        RangeCopy Sheets(home).Cells(CableStart, Colm_LbrEach3).Resize(CableSize, 1), _
        Sheets(newhome).Cells(CableCopy - 1, 22).Resize(CableSize, 1), True

'@@@@@ check for rows with "waste/complete" in description formulas fill c-g columns grey

Set Free_Range = Range("F" & CableStart & ":F" & CableStart + CableSize)
For Each oCell In Free_Range
    If InStr(oCell.Formula, "Waste/Complete") Then
        oCell.Offset(0, -3).Select
        Selection.Resize(1, 5).Select
        Selection.Interior.Color = 12632256
    End If
Next oCell

'@@@@@ now readjust the Cable section size back if the last row was about difficulty

If InStr(Sheets(home).Cells(CableStop, Colm_Descr).Value, "Difficulty") Then _
        CableSize = CableSize + 1

'@@@@@ Copy Admin Columns to Target if Original Description = Target Description (string),
'@@@@@      except if description is Local Travel, Parking, or after "Maintenance Contract"
'@@@@@      if so, then copy only the Qty column for that row

x = x + 0.2
ProgressPercent = x / ProgressGoal
ProgressFormUpdate ProgressPercent, oSheet.Name & "...", "Copy source data to new quote: admin sections..."

If NonTaxStart <> 0 Then

Set QuoteRange = Range("F" & Range("Header_Quote_EngAdm").Row + 1 & _
                      ":F" & Range("Footer_Quote_NonTax").Row - 1)

If Debug_Sub Then MsgQuick "Target Admin Section = " & QuoteRange.Address

Dim DoNotOverwrite As Boolean

If Colm_Markup <> 0 Then _
    RangeCopy Sheets(home).Cells(Range("Header_Quote_EngAdm").Row, Colm_Markup), _
    Sheets(newhome).Cells(Range("Header_Quote_EngAdm").Row, 12)

For Each oCell In NonTaxRange
        
    'fixes for blank template revisions:
    If IsError(oCell.Value) Then GoTo SkipoCell
    If InStr(oCell.Value, "Job Resetup/MatReq/Review") Then _
             oCell.Value = "Quote/Job Resetup/MatReq/Review"
    If InStr(oCell.Value, "Engineering") And NonTaxStart = oCell.Row Then _
             oCell.Value = "Quote/Job Resetup/MatReq/Review"
    If InStr(oCell.Value, "Test") And oCell.Offset(0, -1).Value = "Testing" Then _
             oCell.Value = "System Testing / Troubleshooting"
    If InStr(oCell.Value, "Presubmittal Meeting") And oCell.Offset(0, -1).Value = "Management" Then _
             oCell.Value = "Coordination/Scheduling"
    If InStr(oCell.Value, "PM Calculated (") And oCell.Offset(0, -1).Value = "Management" Then _
             oCell.Value = "Project Management, Regular"
    
    DoNotOverwrite = False
    Set Free_Range = FindFirst(QuoteRange, oCell.Value)
    If Free_Range Is Nothing Then
        '@@@@@ Match not found, do nothing, go to next cell
    Else
        If NamedRangeExists("Maintenance_CTSI_Cost", home) Then
            If oCell.Row = Sheets(home).Range("Maintenance_CTSI_Cost").Row Then DoNotOverwrite = True
        End If
        If oCell.Offset(0, 4).Value = "" Then DoNotOverwrite = True
        If InStr(oCell.Offset(0, 9).Value, "CustCare") Then DoNotOverwrite = True
        If InStr(oCell.Offset(0, 9).Value, "Professional Services, Day-2") Then DoNotOverwrite = True
        If InStr(oCell.Value, "Local Travel") Then DoNotOverwrite = True
        If InStr(oCell.Value, "Zone Travel") Then DoNotOverwrite = True
        If InStr(oCell.Value, "Year Work") Then DoNotOverwrite = True
        If InStr(oCell.Value, "Life Safety") Then DoNotOverwrite = True
        If InStr(oCell.Value, "Box Sale - No Maintenance") Then DoNotOverwrite = True
        If InStr(oCell.Value, "Basic Maintenance") Then DoNotOverwrite = True
        If InStr(oCell.Value, "Essential Maintenance") Then DoNotOverwrite = True
        If InStr(oCell.Value, "Premium Maintenance") Then DoNotOverwrite = True
        If InStr(oCell.Value, "Discount at System Purchase") Then DoNotOverwrite = True
        If InStr(oCell.Value, "Permit") Then DoNotOverwrite = True
        If InStr(oCell.Value, "Bond") Then DoNotOverwrite = True
        If Not DoNotOverwrite Then
            RangeCopy Sheets(home).Cells(oCell.Row, Colm_Qty), _
                  Sheets(newhome).Cells(Free_Range.Row, 4), True
            If Free_Range.Row < Range("Header_Quote_Maint").Row Then
                If Colm_Sectn <> 0 Then _
                    RangeCopy Sheets(home).Cells(oCell.Row, Colm_Sectn), _
                    Sheets(newhome).Cells(Free_Range.Row, 2)
                RangeCopy Sheets(home).Cells(oCell.Row, Colm_CostEa), _
                    Sheets(newhome).Cells(Free_Range.Row, 7), True
                RangeCopy Sheets(home).Cells(oCell.Row, Colm_SellEa), _
                    Sheets(newhome).Cells(Free_Range.Row, 9)
                If Colm_Markup <> 0 Then _
                    RangeCopy Sheets(home).Cells(oCell.Row, Colm_Markup), _
                    Sheets(newhome).Cells(Free_Range.Row, 12)
                If Colm_LbrType1 <> 0 Then _
                    RangeCopy Sheets(home).Cells(oCell.Row, Colm_LbrType1), _
                    Sheets(newhome).Cells(Free_Range.Row, 15)
                If Colm_LbrEach1 <> 0 Then _
                    RangeCopy Sheets(home).Cells(oCell.Row, Colm_LbrEach1), _
                    Sheets(newhome).Cells(Free_Range.Row, 16)
                If Colm_LbrType2 <> 0 Then _
                    RangeCopy Sheets(home).Cells(oCell.Row, Colm_LbrType2), _
                    Sheets(newhome).Cells(Free_Range.Row, 18)
                If Colm_LbrEach2 <> 0 Then _
                    RangeCopy Sheets(home).Cells(oCell.Row, Colm_LbrEach2), _
                    Sheets(newhome).Cells(Free_Range.Row, 19)
                If Colm_LbrType3 <> 0 Then _
                    RangeCopy Sheets(home).Cells(oCell.Row, Colm_LbrType3), _
                    Sheets(newhome).Cells(Free_Range.Row, 21)
                If Colm_LbrEach3 <> 0 Then _
                    RangeCopy Sheets(home).Cells(oCell.Row, Colm_LbrEach3), _
                    Sheets(newhome).Cells(Free_Range.Row, 22)
            ElseIf oCell.Value = "Manufacturer's Discount (%)" Then
                RangeCopy Sheets(home).Cells(oCell.Row, Colm_Manuf), _
                Sheets(newhome).Cells(Free_Range.Row, 3)
            End If
        ElseIf oCell.Value = "Life Safety 24/7 Emergency On-Call Service" Then
            If ValidationExists(Sheets(home).Range("D" & oCell.Row)) Then
                    RangeCopy Sheets(home).Cells(oCell.Row, Colm_Qty), _
                    Sheets(newhome).Cells(Free_Range.Row, 4)
            End If
        ElseIf oCell.Value = "Construction Permit" Then
            RangeCopy Sheets(home).Cells(oCell.Row, Colm_CostEa), _
            Sheets(newhome).Cells(Free_Range.Row, 7), True
        End If
    End If
SkipoCell:
Next oCell

End If

'@@@@@ update all Rauland parts so cost each references the current Rauland pricelist

x = x + 0.15
ProgressPercent = x / ProgressGoal
ProgressFormUpdate ProgressPercent, oSheet.Name & "...", "Find any Rauland parts and make cost formula to suit the item..."

If IncludesRaulandParts _
And Sheets("Job Info & Cover").Range("AE19").HasFormula = True Then
    Sheets(newhome).Activate
    Set Header_Range = Range("C" & Range("Header_Quote_GenMat").Row + 1 & _
                            ":C" & Range("Footer_Quote_Material").Row)
    Set Test_Range = Nothing
    For Each oCell In Header_Range
        If oCell.Value = "Rauland" _
        And Not oCell.Offset(0, 2).Value Like "* DEMO" _
        And Not oCell.Offset(0, 2).Value Like "* REM/REL" _
        And Not oCell.Offset(0, 2).Value Like "* ETR" _
        And Not oCell.Offset(0, 2).Value Like "* EXISTS" _
        And Not oCell.Offset(0, 2).Value Like "* EXST" _
        And Not oCell.Offset(0, 2).Value = "SMA" Then _
            Set Test_Range = Unite(Test_Range, oCell.Offset(0, 2))
        If oCell.Value Like "Rauland R5*" _
        And Not oCell.Offset(0, 2).Value Like "*DISCOUNT" Then _
            Set Test_Range = Unite(Test_Range, oCell.Offset(0, 2))
    Next oCell
    
    '@@@@@ determine if R5 or R4K parts are on the sheet
    Set Free_Range = Nothing
    For Each oCell In Test_Range 'all in range are known to be "rauland"

        If oCell.Value Like "A*" _
        Or oCell.Value Like "B*" _
        Or oCell.Value Like "CLK*" Or oCell.Value Like "CS*" Or oCell.Value Like "CT*" _
        Or oCell.Value Like "DAX*" _
        Or oCell.Value Like "FAX*" _
        Or oCell.Value Like "G*" _
        Or oCell.Value Like "HC*" _
        Or oCell.Value Like "I*" _
        Or oCell.Value Like "M*" _
        Or oCell.Value Like "NC*" _
        Or oCell.Value Like "P*" _
        Or oCell.Value Like "Q*" _
        Or oCell.Value Like "R*" _
        Or oCell.Value Like "S*" _
        Or oCell.Value Like "T*" _
        Or oCell.Value Like "U*" _
        Or oCell.Value Like "V*" _
        Or oCell.Value Like "WP*" _
        Or oCell.Value Like "X*" _
        Or oCell.Value Like "1*" _
        Or oCell.Value Like "23*" _
        Or oCell.Value Like "360*" _
        Or oCell.Value Like "6*" _
        Or oCell.Value Like "9*" Then
            'test if NC2828 or NCBED
            If oCell.Value Like "NCBED*" _
            Or oCell.Value Like "NC*JACK" _
            Or oCell.Value = "NC2828" _
            Or oCell.Value = "PM300" _
            Or oCell.Value Like "R4K*" Then
                Set Free_Range = Unite(Free_Range, oCell)
            End If
        Else
            Set Free_Range = Unite(Free_Range, oCell)
        End If
    Next oCell
    If Not Free_Range Is Nothing Then '@@@@@ then R5 specific equipment was found
        IncludesResponderParts = True
        IncludesResponderVParts = True
        Sheets(newhome).Activate
        Set Header_Range = Free_Range
        
        '@@@@@ copy the Responder-Other formula to all non-R5 cost each cells
        Sheets("Job Info & Cover").Range("AE18").Copy
        For Each oCell In Test_Range
            If Application.Intersect(Header_Range, oCell) Is Nothing _
            And Not oCell.Value Like "*series" Then
                oCell.Offset(0, 2).Select
                ActiveSheet.Paste
                Sheets(home).Range("G" & oCell.Row).Interior.Color = 65535
            End If
        Next oCell
        
        '@@@@@ then copy the R5-R4K specific formula to all cost each cells
        Sheets("Job Info & Cover").Range("AE17").Copy
        For Each oCell In Header_Range
            oCell.Offset(0, 2).Select
            ActiveSheet.Paste
            Sheets(home).Range("G" & oCell.Row).Interior.Color = 65535
        Next oCell
        
        '@@@@@ special adjustment for R5 Software lines software to 2013 or later pricing
        Set Free_Range = FindFirst(Range("C" & Range("Header_Quote_GenMat").Row + 1 & _
                                        ":C" & Range("Footer_Quote_Material").Row), _
                                        "Rauland R5*")
        If Free_Range Is Nothing Then
            For Each oCell In Test_Range
                If oCell.Value Like "355???" _
                Or oCell.Value Like "36????" _
                Then Set Free_Range = Unite(Free_Range, oCell.Offset(0, -2))
            Next oCell
            If Not Free_Range Is Nothing Then
                Free_Range.Select
                Selection.ClearContents
                Selection.Replace What:="", Replacement:="Rauland R5 Sfwr"
                If Sheets(home).Cells(NonTaxStop - 1, Colm_Manuf).Value = "West Penn" _
                And Sheets(home).Cells(NonTaxStop - 1, Colm_Qty).Value = 0 Then
                    Range("C" & Range("Footer_Quote_NonTax").Row - 2).Value = "Rauland R5 Sfwr"
                    Sheets(home).Cells(NonTaxStop - 1, Colm_Manuf).Interior.Color = 16764057
                End If
                Set Free_Range = FindFirst(Range("C" & Range("Header_Quote_GenMat").Row + 1 & _
                                            ":C" & Range("Footer_Quote_Material").Row), _
                                            "Rauland R5*")
            End If
        End If
        If Not Free_Range Is Nothing Then
            'MsgBox "found the software"
            Sheets("Job Info & Cover").Range("AE16").Copy
            Set Free_Range = Free_Range.Resize(20, 1)
            For Each oCell In Free_Range
                If oCell.Value Like "Rauland R5*" _
                And Not oCell.Offset(0, 2).Value Like "*DISCOUNT" Then
                    oCell.Offset(0, 4).Select
                    ActiveSheet.Paste
                End If
            Next oCell
        End If
        
        '@@@@@ special adjustments for SMA lines
        Set Free_Range = FindFirst(Range("E" & Range("Header_Quote_GenMat").Row + 1 & _
                                        ":E" & Range("Footer_Quote_Material").Row), "SMA")
        If Not Free_Range Is Nothing Then
            If Free_Range.Offset(1, 0).Value = "SMA" Then
                Range("A" & Free_Range.Row & ":A" & Free_Range.Row + 1).Select
                Selection.ClearContents
                Selection.Interior.Color = 65535
                Range("L" & Free_Range.Row & ":L" & Free_Range.Row + 1).Interior.Color = 52479
                Range("I" & Free_Range.Row + 1).Formula = _
                            "=ROUNDUP(G" & Free_Range.Row & "*L" & Free_Range.Row + 1 & _
                            "*(1+LineItemMatlEscalation),LineItemRoundDigits)-I" _
                            & Free_Range.Row
                Range("P" & Free_Range.Row).Interior.Color = 52479
                Range("I" & Free_Range.Row + 2).Formula = Sheets(home).Range("I" _
                            & Free_Range.Row + 2).Formula
            End If
        End If
        IncludesResponderParts = True
        
    '@@@@@ if no R5, determine if other Responder parts are on the sheet
    Else
        Set Free_Range = FindFirst(Test_Range, "R4K*")
        If Not Free_Range Is Nothing Then Set Free_Range = FindFirst(Test_Range, "NC*")
        If Not Free_Range Is Nothing Then
            Sheets("Job Info & Cover").Range("AE18").Copy
            Sheets(newhome).Activate
            For Each oCell In Test_Range
                If Not oCell.Value Like "*series" Then
                    oCell.Offset(0, 2).Select
                    ActiveSheet.Paste
                    Sheets(home).Range("G" & oCell.Row).Interior.Color = 65535
                End If
            Next oCell
            IncludesResponderParts = True
            
        '@@@@@ all other QTabs with Rauland do this
        Else
            Sheets("Job Info & Cover").Range("AE19").Copy
            Sheets(newhome).Activate
            For Each oCell In Test_Range
                oCell.Offset(0, 2).Select
                ActiveSheet.Paste
                Sheets(home).Range("G" & oCell.Row).Interior.Color = 65535
            Next oCell
        End If
    End If
    
    '@@@@@ after that, cells that then result in "n/a" blank and color red
    Calculate
    Set Test_Range = Test_Range.Offset(0, 2)
    For Each oCell In Test_Range
        If IsError(oCell) Then
            oCell.Select
            If IsError(Sheets(home).Range("G" & oCell.Row)) Then
                'the source sheet has n/a too, can't fix the error, only option is don't copy.
                Selection.Value = ""
                Selection.Interior.Color = 14540253
            ElseIf Sheets(home).Range("G" & oCell.Row).HasFormula = False _
            And Sheets(home).Range("G" & oCell.Row).Value <> 0 Then
                Sheets(home).Range("G" & oCell.Row).Copy
                Sheets(home).Range("G" & oCell.Row).Interior.ColorIndex = 4
                ActiveSheet.Paste
                Selection.Interior.Color = 65535
            ElseIf Sheets(home).Range("G" & oCell.Row).HasFormula = True _
            And Not Sheets(home).Range("G" & oCell.Row).Formula Like "*Rauland_ALL*" Then
                If Sheets(home).Range("G" & oCell.Row).Value <> 0 Then
                    Sheets(home).Range("G" & oCell.Row).Copy
                    Sheets(home).Range("G" & oCell.Row).Interior.ColorIndex = 4
                    Selection.PasteSpecial Paste:=xlPasteFormulas
                    If Sheets(home).Range("G" & oCell.Row).Formula Like "*.xlsm]Summary'!*" Then
                        Selection.Interior.Color = 16777164
                    Else
                        Selection.Interior.Color = 65535
                    End If
                Else
                    Selection.Value = ""
                    'Range("G" & oCell.Row).Select
                    Selection.Interior.Color = 14540253
                End If
            Else
                Selection.Value = ""
                Range("E" & oCell.Row & ":G" & oCell.Row).Select
                Selection.Interior.ColorIndex = 3
            End If
        End If
    Next oCell
    
    '@@@@@ Responder specific quote adjustements
    If IncludesResponderParts Then
        Sheets("Job Info & Cover").Unprotect
        
        '@@@@@ colors the cells that are linked to design sheets
        Set Test_Range = Range("G" & Range("Header_Quote_GenMat").Row + 1 & _
                              ":G" & Range("Footer_Quote_Material").Row)
        For Each oCell In Test_Range
            If oCell.Formula Like "*.xlsm]Summary'!*" _
            And Range("C" & oCell.Row).Value <> "Rauland" Then
                If oCell.Interior.Color = 13434828 Then oCell.Interior.Color = 16777164
            End If
        Next oCell
        Set Test_Range = Range("P" & Range("Header_Quote_GenMat").Row + 1 & _
                              ":P" & Range("Footer_Quote_Material").Row)
        For Each oCell In Test_Range
            If oCell.Formula Like "*.xlsm]Summary'!*" Then oCell.Interior.Color = 16777164
        Next oCell
        
        '@@@@@ change all "L" labor types on responder QTabs to "H" labor type
        Range("O" & Range("Header_Quote_GenMat").Row + 1 & _
             ":O" & Range("Header_Quote_CTSI").Row).Select
        Selection.Replace What:="L", Replacement:="H", LookAt:=xlPart, _
        SearchOrder:=xlByRows, MatchCase:=False, SearchFormat:=False, _
        ReplaceFormat:=False

        '@@@@@ change all "N" labor types on responder QTabs to "H4" labor type
        Range("O" & Range("Header_Quote_GenMat").Row + 1 & _
             ":O" & Range("Header_Quote_CTSI").Row).Select
        Selection.Replace What:="N", Replacement:="H4", LookAt:=xlPart, _
        SearchOrder:=xlByRows, MatchCase:=False, SearchFormat:=False, _
        ReplaceFormat:=False

        '@@@@@ confirm or add tech school tuition line in admin section
        Set Free_Range = FindFirst(Range("F" & Range("Header_Quote_EngAdm").Row & _
                                        ":F" & Range("Header_Quote_Exps").Row), _
                                        "Tech School Tuition")
        If Free_Range Is Nothing Then
            Set Free_Range = FindFirst(Range("F" & Range("Header_Quote_EngAdm").Row & _
                                            ":F" & Range("Header_Quote_Exps").Row), _
                                            "Tech Training")
            If Not Free_Range Is Nothing Then
                Rows(Free_Range.Row & ":" & Free_Range.Row).Copy
                Rows(Free_Range.Row + 1 & ":" & Free_Range.Row + 1).Select
                Selection.Insert Shift:=xlDown
                Range("B" & Free_Range.Row + 1).Value = "Stellar Discount"
                Range("F" & Free_Range.Row + 1).Value = "Tech School Tuition"
            End If
        End If

        '@@@@@ for Responder quotes (only), ensure job info tab includes NC_Pricing option
        Sheets("Job Info & Cover").Activate
        If Not ValidationExists(Sheets("Job Info & Cover").Range("C41")) Then
            Range("O83").Copy
            Range("C41").Select
            ActiveSheet.Paste
            Range("N84").Formula = "=IF(C41="" "",5,MATCH(C41,O84:O92,0))"
            Range("E25").Select
        End If
    
    Sheets("Job Info & Cover").Protect
    End If
    
End If

x = x + 0.2
ProgressPercent = x / ProgressGoal
ProgressFormUpdate ProgressPercent, oSheet.Name & "...", "Copy source text from header, notes, and exclusions..."

'@@@@@ copy the general text cells over, if they exist
Sheets(newhome).Activate
ActiveWindow.ScrollRow = 28
Sheets(home).Activate
If NamedRangeExists("Quote_Text1") Then
    RangeCopy Sheets(home).Range("Quote_Text1"), Sheets(newhome).Range("Quote_Text1")
    If Sheets(home).Range("Quote_Text1").RowHeight > 10 Then _
        Sheets(newhome).Range("Quote_Text1").RowHeight = Sheets(home).Range("Quote_Text1").RowHeight
End If
If NamedRangeExists("Quote_Notes") Then
    Sheets(home).Range("Quote_Notes").Select
    Selection.UnMerge
    
    Sheets(newhome).Activate
    Sheets(newhome).Range("Quote_Notes").Select
    Selection.UnMerge
    
    Sheets(home).Activate
    RangeCopy Sheets(home).Range("Quote_Notes"), Sheets(newhome).Range("Quote_Notes")
    
    Range("Quote_Notes").Offset(0, 1).Select
    Selection.Resize(1, 23).Select
    Selection.ClearContents
    Range("Quote_Notes").Select
    Selection.Resize(1, 24).Select
    Selection.Merge
    
    Sheets(newhome).Activate
    Range("Quote_Notes").Offset(0, 1).Select
    Selection.Resize(1, 23).Select
    Selection.ClearContents
    Range("Quote_Notes").Select
    Selection.Resize(1, 24).Select
    Selection.Merge
    
    Range("Quote_Notes").Select
    With ActiveCell.Characters(Start:=1, Length:=6).Font
        .FontStyle = "Bold"
        .Underline = xlUnderlineStyleSingle
    End With
    If Sheets(home).Range("Quote_Notes").RowHeight > 10 Then _
        Sheets(newhome).Range("Quote_Notes").RowHeight = Sheets(home).Range("Quote_Notes").RowHeight
    Sheets(home).Activate
End If
If NamedRangeExists("Quote_Exclusions") Then
    Sheets(home).Range("Quote_Exclusions").Select
    Selection.UnMerge
    
    Sheets(newhome).Activate
    Sheets(newhome).Range("Quote_Exclusions").Select
    Selection.UnMerge
    
    Sheets(home).Activate
    RangeCopy Sheets(home).Range("Quote_Exclusions"), Sheets(newhome).Range("Quote_Exclusions")
    
    Range("Quote_Exclusions").Offset(0, 1).Select
    Selection.Resize(1, 23).Select
    Selection.ClearContents
    Range("Quote_Exclusions").Select
    Selection.Resize(1, 24).Select
    Selection.Merge
    
    Sheets(newhome).Activate
    Range("Quote_Exclusions").Offset(0, 1).Select
    Selection.Resize(1, 23).Select
    Selection.ClearContents
    Range("Quote_Exclusions").Select
    Selection.Resize(1, 24).Select
    Selection.Merge
    
    Range("Quote_Exclusions").Select
    With ActiveCell.Characters(Start:=1, Length:=11).Font
        .FontStyle = "Bold"
        .Underline = xlUnderlineStyleSingle
    End With
    If Sheets(home).Range("Quote_Exclusions").RowHeight > 10 Then _
        Sheets(newhome).Range("Quote_Exclusions").RowHeight = Sheets(home).Range("Quote_Exclusions").RowHeight
    Sheets(home).Activate
End If
If NamedRangeExists("Quote_DesignBy") Then _
    RangeCopy Sheets(home).Range("Quote_DesignBy"), Sheets(newhome).Range("Quote_DesignBy")
If NamedRangeExists("Quote_Qty") Then _
    RangeCopy Sheets(home).Range("Quote_Qty"), Sheets(newhome).Range("Quote_Qty")
If NamedRangeExists("Quote_ShortNote") Then _
    RangeCopy Sheets(home).Range("Quote_ShortNote"), Sheets(newhome).Range("Quote_ShortNote")
If NamedRangeExists("Quote_YesNo_Range") Then
    If Range("Quote_YesNo_Range").Cells.Count = 15 Then _
    RangeCopy Sheets(home).Range("Quote_YesNo_Range").Resize(12, 1), _
              Sheets(newhome).Range("Quote_YesNo_Range").Resize(12, 1)
    RangeCopy Sheets(home).Range("Quote_YesNo_Range").Cells(15, 1), _
              Sheets(newhome).Range("Quote_YesNo_Range").Cells(15, 1)
End If
Range("C26:G26").Copy
Sheets(newhome).Activate
Range("C26:G26").Select
Selection.PasteSpecial Paste:=xlPasteColumnWidths
ActiveSheet.Outline.ShowLevels RowLevels:=2
Range("C26").Select

'@@@@@ ~~~~~~~~~~~~~~~ lower boundary of multisheet for each next routine ~~~~~~~~~~~~~~~~ @@@@@

x = x + 0.1 '@@@@@ for next sheet and progressformupdate

NextoSheet:
Next oSheet
IncludedQuotes.Select
Sheets(home).Activate

ProgressFormClose

'@@@@@@@@@@+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++@@@@@@@@@@
'@@@@@   for errors or issues that caused a bypass of routine, and to wrapup the routine   @@@@@

MsgTimed "        Cells in the Original Tab," & Chr(10) & _
         "   whose data was transferred," & Chr(10) & _
         "have been colored bright GREEN." & Chr(10) & _
         "        All others were ignored.", "NOTE / WARNING", 4, True

SkipToEnd: '@@@@@ collection point for errors, to reset system variables on exit

Set Header_Range = Nothing
Set Free_Range = Nothing
Set Test_Range = Nothing
Set NonTaxRange = Nothing
Set oCell = Nothing
Set oSheet = Nothing
Set IncludedQuotes = Nothing
Set QuoteRange = Nothing

Sheets(home).Activate
Range("C28").Select
ActiveWindow.ScrollRow = 27
Application.CutCopyMode = False
Application.EnableEvents = True
Application.ScreenUpdating = True
Application.DisplayAlerts = True
Application.Calculation = CurrentCalcMode
Set CurrentCalcMode = Nothing

End Sub
'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Sub RefreshJobInfoCover(Optional AlreadyAsked As Boolean = False)

Dim fSystem As Object
Dim ofile As Object
Dim ffile As String
Dim homefile As String
Dim CopyQuoteIsOpen As Boolean
Dim CurrentCalcMode As Variant
Dim CurrentEventMode As Boolean
Dim CurrentScreenMode As Boolean
Dim CurrentDisplayMode As Boolean
Dim Test_Range As Range
Dim Free_Range As Range
Dim CopyJI_Range As Range
Dim oCell As Range
Dim DoNotOverwrite As Boolean

CurrentCalcMode = Application.Calculation
Application.Calculation = xlManual
Application.EnableEvents = False
Application.ScreenUpdating = False
Application.DisplayAlerts = False

YesClicked = AlreadyAsked
CopyQuoteIsOpen = False
homefile = ActiveWorkbook.Name
DoNotOverwrite = False

If Not AlreadyAsked Then _
    YesNoMenu "Job Info & Cover Refresh", "Copy another quote's Job Info tab?"
If YesClicked Then
    ffile = Application.GetOpenFilename
    If SheetExists(ffile, "Job Info & Cover") Then
        Sheets("Job Info & Cover").Unprotect
        If Not IsFileOpen(ffile) Then
            Workbooks.Open ffile
        Else: CopyQuoteIsOpen = True
        End If
        ffile = fPathTofName(ffile)
        Workbooks(ffile).Activate
        Sheets("Job Info & Cover").Activate
        Sheets("Job Info & Cover").Unprotect

        '@@@@@ copy the C-column information
        Set CopyJI_Range = FindFirst(Sheets("Job Info & Cover").Range("B:B"), "Project Name")
        Set Free_Range = FindFirstWild(Sheets("Job Info & Cover").Range("B:B"), _
                                       "Special Pricing")
        If Not CopyJI_Range Is Nothing _
        And Not Free_Range Is Nothing Then
            Set CopyJI_Range = Range("B" & CopyJI_Range.Row - 1 & ":B" & Free_Range.Row + 2)
            Workbooks(homefile).Activate
            Set Test_Range = Range("B16:B43")
            For Each oCell In Test_Range
                Set Free_Range = FindFirst(CopyJI_Range, oCell.Value)
                If Free_Range Is Nothing Then
                    '@@@@@ Match not found, do nothing, go to next cell
                Else
                    If oCell.Value = oCell.Offset(-1, 0).Value Then
                        Set Free_Range = FindFirst(CopyJI_Range, oCell.Value, Free_Range)
                    End If
                    If InStr(oCell.Value, "Phone") Then DoNotOverwrite = True
                    If InStr(oCell.Value, "Use Tax Rate") Then DoNotOverwrite = True
                    If InStr(oCell.Value, "Sales Tax Rate") Then DoNotOverwrite = True
                    'If InStr(oCell.Value, "Maintenance Scenario") Then DoNotOverwrite = True
                    'If InStr(oCell.Value, "Nature of Quote") Then DoNotOverwrite = True
                    'If InStr(oCell.Value, "Special Pricing") Then DoNotOverwrite = True
                    If InStr(oCell.Value, "INSTALLED ITEM") Then DoNotOverwrite = True
                    If InStr(oCell.Value, "PM Calculated") Then DoNotOverwrite = True
                    If InStr(oCell.Value, "Date") Then
                        DoNotOverwrite = True
                        oCell.Offset(0, 1).Value = Date
                    End If
                    If Not DoNotOverwrite Then
                        Free_Range.Offset(0, 1).Copy
                        oCell.Offset(0, 1).Select
                        Selection.PasteSpecial Paste:=xlPasteValues
                    End If
                    DoNotOverwrite = False
                End If
            Next oCell
        End If
        
        '@@@@@ copy the recipient information
        Workbooks(ffile).Activate
        If NamedRangeExists("Customer_Company_Name_1", "Job Info & Cover") Then
            Set CopyJI_Range = Sheets("Job Info & Cover").Range("Customer_Company_Name_1")
        Else
            Set CopyJI_Range = FindFirst(Sheets("Job Info & Cover").Range("Customer_Company_Name_1"), _
                                     "< Company Name 1")
        End If
        If NamedRangeExists("Customer_Phone", "Job Info & Cover") Then
            Set Free_Range = Sheets("Job Info & Cover").Range("Customer_Phone")
        Else
            Set Free_Range = FindFirstWild(Sheets("Job Info & Cover").Range("K:K"), "< Phone")
        End If
        If Not CopyJI_Range Is Nothing _
        And Not Free_Range Is Nothing Then
            Set CopyJI_Range = Range("H" & CopyJI_Range.Row & ":J" & Free_Range.Row + 1)
            If CopyJI_Range.Cells.Count = 24 Then
                CopyJI_Range.Copy
                Workbooks(homefile).Activate
                Range("H39").Select
                Selection.PasteSpecial Paste:=xlPasteValues
            End If
        End If
        
        '@@@@@ copy the ctsi office location
        Workbooks(ffile).Activate
        If Range("d19").Value = "" Then
            'do nothing
        Else
            Range("d19").Select
            Selection.Copy
            Workbooks(homefile).Activate
            Range("d19").Select
            Selection.PasteSpecial Paste:=xlPasteValues
        End If
        
        '@@@@@ copy the maintenance choices

        Workbooks(ffile).Activate
        If NamedRangeExists("Maintenance_Choice", "Job Info & Cover") Then
            Sheets("Job Info & Cover").Range("Maintenance_Choice").Select
            Selection.Copy
            Workbooks(homefile).Activate
            Range("Maintenance_Choice").Select
            Selection.PasteSpecial Paste:=xlPasteValues
        End If
        Workbooks(ffile).Activate
        If NamedRangeExists("Maintenance_Duration", "Job Info & Cover") Then
            Sheets("Job Info & Cover").Range("Maintenance_Duration").Select
            Selection.Copy
            Workbooks(homefile).Activate
            Range("Maintenance_Duration").Select
            Selection.PasteSpecial Paste:=xlPasteValues
        End If
        Workbooks(ffile).Activate
        If NamedRangeExists("Maintenance_Uplift", "Job Info & Cover") Then
            Sheets("Job Info & Cover").Range("Maintenance_Uplift").Select
            Selection.Copy
            Workbooks(homefile).Activate
            Range("Maintenance_Uplift").Select
            Selection.PasteSpecial Paste:=xlPasteValues
        End If
        
        '@@@@@ copy the right-side global settings (if they're there)
        Workbooks(ffile).Activate
        Set CopyJI_Range = FindFirstWild(Sheets("Job Info & Cover").Range("L:L"), _
                                         "Infection Control")
        If Not CopyJI_Range Is Nothing Then
            Set CopyJI_Range = Range("L" & CopyJI_Range.Row & ":L" & CopyJI_Range.Row + 11)
            Workbooks(homefile).Activate
            Set Test_Range = Range("L26:L38")
            For Each oCell In Test_Range
                Set Free_Range = FindFirst(CopyJI_Range, oCell.Value)
                If Free_Range Is Nothing Then
                    '@@@@@ Match not found, do nothing, go to next cell
                Else
                    If InStr(oCell.Value, "Warranty") Then DoNotOverwrite = True
                    If InStr(oCell.Value, ">> individual") Then DoNotOverwrite = True
                    If Not DoNotOverwrite Then
                        Free_Range.Offset(0, -1).Copy
                        oCell.Offset(0, -1).Select
                        Selection.PasteSpecial Paste:=xlPasteValues
                    End If
                    DoNotOverwrite = False
                End If
            Next oCell
        End If
        
        Workbooks(homefile).Activate
        Sheets("Job Info & Cover").Protect
        Range("E25").Select
        If Not CopyQuoteIsOpen Then Workbooks(ffile).Close
    End If
End If

Set fSystem = Nothing
Set ofolder = Nothing
Set CopyJI_Range = Nothing
Set Test_Range = Nothing
Set Free_Range = Nothing
Set oCell = Nothing

Application.EnableEvents = True
Application.ScreenUpdating = True
Application.DisplayAlerts = True
Application.Calculation = CurrentCalcMode
Set CurrentCalcMode = Nothing

End Sub
'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Sub RefreshJobSetup(Optional AlreadyAsked As Boolean = False)

Dim ffile As String
Dim homefile As String
Dim CopyQuoteIsOpen As Boolean
Dim CurrentCalcMode As Variant
Dim JobNumber As String
Dim SetupTabName As String

Dim DoNotOverwrite As Boolean

CurrentCalcMode = Application.Calculation
Application.Calculation = xlManual
Application.EnableEvents = False
Application.ScreenUpdating = False
Application.DisplayAlerts = False

YesClicked = AlreadyAsked
homefile = ActiveWorkbook.Name
DoNotOverwrite = False

If Not AlreadyAsked Then _
    YesNoMenu "Setup Refresh", "Copy the original quote's Set-up tab?"
If YesClicked Then
    SetupTabName = ActiveSheet.Name
    CopyQuoteIsOpen = False
    ffile = Application.GetOpenFilename
    If SheetExists(ffile, SetupTabName) Then
        If Not IsFileOpen(ffile) Then
            Workbooks.Open ffile
        Else: CopyQuoteIsOpen = True
        End If
        ffile = fPathTofName(ffile)
        
        'collect data from old file
        Workbooks(ffile).Activate
        Sheets(SetupTabName).Activate
        Dim HoldText As Variant
        ReDim HoldText(1 To 50)
        HoldText(1) = Range("F4")
        HoldText(2) = Range("J4")
        HoldText(3) = Range("F6")
        HoldText(4) = Range("J6")
        HoldText(5) = Range("F8")
        HoldText(6) = Range("H8")
        HoldText(7) = Range("J8")
        HoldText(8) = Range("L8")
        HoldText(9) = Range("F10")
        HoldText(10) = Range("H10")
        HoldText(11) = Range("J10")
        HoldText(12) = Range("L10")
        HoldText(13) = Range("F12")
        HoldText(14) = Range("F13")
        HoldText(15) = Range("F14")
        HoldText(16) = Range("F15")
        HoldText(17) = Range("F16")
        HoldText(18) = Range("J12")
        HoldText(19) = Range("J13")
        HoldText(20) = Range("J14")
        HoldText(21) = Range("J15")
        HoldText(22) = Range("J16")
        HoldText(23) = Range("A4")
        HoldText(24) = Range("B5")
        HoldText(25) = Range("B6")
        HoldText(26) = Range("B7")
        HoldText(27) = Range("B8")
        HoldText(28) = Range("B9")
        HoldText(29) = Range("B10")
        If Range("A11") = "Sales Code" Then 'it's a newer version quote sheet
            HoldText(30) = Range("B12")
            HoldText(31) = Range("B13")
            HoldText(32) = Range("B14")
            HoldText(33) = Range("D17")
            HoldText(34) = Range("D18")
            HoldText(35) = Range("D19")
            HoldText(36) = Range("D20")
            HoldText(37) = Range("D23")
            HoldText(38) = Range("D24")
            HoldText(39) = Range("B25")
            HoldText(40) = Range("B26")
            HoldText(41) = Range("D27")
            HoldText(42) = Range("B28")
            HoldText(43) = Range("B31")
            HoldText(44) = Range("B32")
            HoldText(45) = Range("B33")
            HoldText(46) = Range("A38")
            HoldText(47) = Range("A39")
            HoldText(48) = Range("A40")
            HoldText(50) = Range("B11")
        Else 'it's an older version of the quote sheet
            HoldText(30) = Range("B11")
            HoldText(31) = Range("B12")
            HoldText(32) = Range("B13")
            HoldText(33) = Range("D16")
            HoldText(34) = Range("D17")
            HoldText(35) = Range("D19")
            HoldText(36) = Range("D20")
            HoldText(37) = Range("D23")
            HoldText(38) = Range("D24")
            HoldText(39) = Range("B25")
            HoldText(40) = Range("B26")
            HoldText(41) = Range("D27")
            HoldText(42) = Range("B28")
            HoldText(43) = Range("B31")
            HoldText(44) = Range("B32")
            HoldText(45) = Range("B33")
            HoldText(46) = Range("A37")
            HoldText(47) = Range("A38")
            HoldText(48) = Range("A39")
            HoldText(50) = ""
        End If
        HoldText(49) = Range("A62")
                                   
        'paste data into current file
        Workbooks(homefile).Activate
        Sheets(SetupTabName).Activate
        Range("F4") = HoldText(1)
        Range("J4") = HoldText(2)
        Range("F6") = HoldText(3)
        Range("J6") = HoldText(4)
        Range("F8") = HoldText(5)
        Range("H8") = HoldText(6)
        Range("J8") = HoldText(7)
        Range("L8") = HoldText(8)
        Range("F10") = HoldText(9)
        Range("H10") = HoldText(10)
        Range("J10") = HoldText(11)
        Range("L10") = HoldText(12)
        Range("F12") = HoldText(13)
        Range("F13") = HoldText(14)
        Range("F14") = HoldText(15)
        Range("F15") = HoldText(16)
        Range("F16") = HoldText(17)
        Range("J12") = HoldText(18)
        Range("J13") = HoldText(19)
        Range("J14") = HoldText(20)
        Range("J15") = HoldText(21)
        Range("J16") = HoldText(22)
        Range("A4") = HoldText(23)
        Range("B5") = HoldText(24)
        Range("B6") = HoldText(25)
        Range("B7") = HoldText(26)
        Range("B8") = HoldText(27)
        Range("B9") = HoldText(28)
        Range("B10") = HoldText(29)
        Range("B11") = HoldText(50)
        Range("B12") = HoldText(30)
        Range("B13") = HoldText(31)
        Range("B14") = HoldText(32)
        Range("D17") = HoldText(33)
        Range("D18") = HoldText(34)
        Range("D19") = HoldText(35)
        Range("D20") = HoldText(36)
        Range("D23") = HoldText(37)
        Range("D24") = HoldText(38)
        Range("B25") = HoldText(39)
        Range("B26") = HoldText(40)
        Range("D27") = HoldText(41)
        Range("B28") = HoldText(42)
        Range("B31") = HoldText(43)
        Range("B32") = HoldText(44)
        Range("B33") = HoldText(45)
        Range("A38") = HoldText(46)
        Range("A39") = HoldText(47)
        Range("A40") = HoldText(48)
        Range("A62") = HoldText(49)
        
        '@@@@@ confirm job number is entered or request it as needed
        If Range("F6").Value Like "######" _
        Or Range("F6").Value Like "######?" _
        Or Range("F6").Value Like "SC??####" _
        Or Range("F6").Value Like "######S??" _
        Or Range("F6").Value Like "TM#####" _
        Or Range("F6").Value Like "BX#######" Then
            'then there is already a valid job number entered. do nothing further.
        Else '@@@@@ job number?
            JobNumber = InputBox("Enter the Job Number:", "INFO NEEDED")
            If JobNumber Like "######" _
            Or JobNumber Like "######?" _
            Or JobNumber Like "SC??####" _
            Or JobNumber Like "######S??" _
            Or JobNumber Like "TM#####" _
            Or JobNumber Like "BX#######" Then
                Range("f6").Value = JobNumber
            End If
        End If
        Range("A4").Select
        
        'then wrap up and exit
'        Sheets("Job Info & Cover").Activate
'        Range("C26").Select
        If Not CopyQuoteIsOpen Then Workbooks(ffile).Close
        
        'Set fSystem = Nothing
        ReDim HoldText(0)
        Erase HoldText
        
    End If
End If
                    
Application.EnableEvents = True
Application.ScreenUpdating = True
Application.DisplayAlerts = True
Application.Calculation = CurrentCalcMode
Set CurrentCalcMode = Nothing

End Sub

Attribute VB_Name = "CTSI_RightClick_Menu"
'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Public Sub MenuAddPly(Optional NonSense As Boolean)
    MenuRemovePly
    On Error Resume Next
    With Application.CommandBars("Ply")
        .Controls.Add(Type:=msoControlButton).Caption = "Refresh Old Quote"
        .Controls.Add(Type:=msoControlButton).Caption = "Composite Parts List"
        .Controls.Add(Type:=msoControlButton).Caption = "Link to Composite"
        .Controls.Add(Type:=msoControlButton).Caption = "Remove Links"
        .Controls.Add(Type:=msoControlButton).Caption = "Material Requisition"
        .Controls.Add(Type:=msoControlButton).Caption = "Build Submittal BOM"
        .Controls("Refresh Old Quote").BeginGroup = True
        .Controls("Refresh Old Quote").OnAction = "RefreshOldQuoteVersion"
        .Controls("Composite Parts List").BeginGroup = True
        .Controls("Composite Parts List").OnAction = "CompositeGenerator"
        .Controls("Link to Composite").OnAction = "CompositeListLink"
        .Controls("Remove Links").OnAction = "CompositeRemoveLinks"
        .Controls("Material Requisition").BeginGroup = True
        .Controls("Material Requisition").OnAction = "CompositeToMatReq"
        .Controls("Build Submittal BOM").BeginGroup = True
        .Controls("Build Submittal BOM").OnAction = "CompositeToSubmittalBOM"
    End With
    On Error GoTo 0
End Sub
'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Public Sub MenuRemovePly(Optional NonSense As Boolean)
    On Error Resume Next
    With Application.CommandBars("Ply")
        .Controls("Refresh Old Quote").Delete
        .Controls("Composite Parts List").Delete
        .Controls("Link to Composite").Delete
        .Controls("Remove Links").Delete
        .Controls("Material Requisition").Delete
        .Controls("Build Submittal BOM").Delete
    End With
    On Error GoTo 0
End Sub


Attribute VB_Name = "CTSI_Save_Restore_QuoteViews"
Private filterArray() As Variant
Private home As String
Private HeaderRow As Integer
Private HiddenColumns As Range
Private HiddenRows As Range
'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Sub ViewSaveQuoteOpen(Optional NonSense As Boolean)

Dim TestCells As Range
Dim OnFirstRun As Boolean
Dim IsQuoteSheet As Boolean
Dim LastRow As Integer
'Dim OriginalFilter As Variant
Dim f As Filter
Dim rw As Long, c1, c2, op

    home = ActiveSheet.Name
    IsQuoteSheet = True
    
'@@@@@ Save the Current Hidden Columns

    OnFirstRun = True
    On Error GoTo NotQuoteSheet
    Set TestCells = Sheets(home).Range("Header_Quote_GenMat")
    GoTo WasQuoteSheet
NotQuoteSheet:
    IsQuoteSheet = False
    On Error GoTo QuickExit
    Set TestCells = Sheets(home).Range("Header_Summary_Base")
WasQuoteSheet:
    HeaderRow = TestCells.Row
    ActiveWindow.FreezePanes = False '@@@@@ Better place for this.

    Set TestCells = Range("A" & HeaderRow & ":AM" & HeaderRow)
    For Each oCell In TestCells
        If oCell.EntireColumn.Hidden = True Then
            If OnFirstRun Then
                Set HiddenColumns = Range(oCell.Address)
                OnFirstRun = False
            Else: Set HiddenColumns = Union(HiddenColumns, oCell)
            End If
        End If
    Next

'@@@@@ Save the Current Hidden Rows

    OnFirstRun = True
    Set TestCells = Sheets(home).Range("Email_Terms_Range")
    LastRow = TestCells.Row + 3

    Set TestCells = Range("A1:A" & LastRow)
    For Each oCell In TestCells
        If oCell.EntireRow.Hidden = True Then
            
            If OnFirstRun Then
                Set HiddenRows = Range(oCell.Address)
                OnFirstRun = False
            Else: Set HiddenRows = Union(HiddenRows, oCell)
            End If
            
        End If
    Next
    
'@@@@@ Save the Currently Applied Filters in Array

    rw = 1
    ReDim filterArray(1 To 5, 1 To 3)
    If Sheets(home).FilterMode Then
        For Each f In Sheets(home).AutoFilter.Filters
            c1 = Empty
            op = Empty
            c2 = Empty
            If f.On Then
                c1 = Right(f.Criteria1, Len(f.Criteria1) - 0)
                If f.Operator Then
                    op = f.Operator
                    c2 = Right(f.Criteria2, Len(f.Criteria2) - 0)
                End If
            End If
            If Not IsEmpty(c1) Then filterArray(rw, 1) = c1
            If Not IsEmpty(op) Then filterArray(rw, 2) = op
            If Not IsEmpty(c2) Then filterArray(rw, 3) = c2
            rw = rw + 1
        Next
    End If

'@@@@@ Unhide All, Remove Filters & Freezes

    If ActiveSheet.FilterMode Then Sheets(home).ShowAllData
    If Sheets(home).AutoFilter Is Nothing Then
    Else
        Selection.AutoFilter
    End If
    Cells.Select
    Selection.EntireColumn.Hidden = False
    Selection.EntireRow.Hidden = False
    'ActiveWindow.FreezePanes = False
    Range("A1").Select
    
    Set f = Nothing   '@@@@@ <<<--- is this necessary??? is it a problem???
    c1 = 0   '@@@@@ <<<--- is this necessary??? is it a problem???
    op = 0   '@@@@@ <<<--- is this necessary??? is it a problem???
    c2 = 0   '@@@@@ <<<--- is this necessary??? is it a problem???
    Set TestCells = Nothing
    Set oCell = Nothing

    On Error GoTo 0
    Exit Sub

QuickExit:
    MsgBox "Not a Quote or Summary sheet, view not saved."
    
    Set f = Nothing   '@@@@@ <<<--- is this necessary??? is it a problem???
    c1 = 0   '@@@@@ <<<--- is this necessary??? is it a problem???
    op = 0   '@@@@@ <<<--- is this necessary??? is it a problem???
    c2 = 0   '@@@@@ <<<--- is this necessary??? is it a problem???
    Set TestCells = Nothing
    Set oCell = Nothing
    On Error GoTo 0

End Sub
'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Sub ViewRestoreQuote(Optional NonSense As Boolean)

' If Not home = ActiveSheet.Name Then GoTo SkipToExit
Dim TestCells As Range

'@@@@@ Replace the Filters and Freezes

    ActiveWindow.ScrollColumn = 1
    ActiveWindow.ScrollRow = 1
    
    On Error GoTo NotQuoteSheet
    Set TestCells = Range("Header_Quote_GenMat")
    Range("A" & TestCells.Row & ":E" & TestCells.Row).Select
    If True = False Then
NotQuoteSheet:
        Set TestCells = Range("Header_Summary_Base")
        Range("A" & TestCells.Row & ":A" & Range("Quote_Terms2").Row).Select
    End If
    On Error GoTo 0
    Selection.AutoFilter
    Range(HeaderRow + 1 & ":" & HeaderRow + 1).Select
    Range("A" & HeaderRow + 1).Activate
    ActiveWindow.FreezePanes = True

'@@@@@ Reapply the Original Filters Saved in Array

    If Not IsEmpty(filterArray) Then
        For col = 1 To UBound(filterArray(), 1)
            If Not IsEmpty(filterArray(col, 1)) Then
                If Not IsEmpty(filterArray(col, 2)) Then
                    Sheets(home).Cells(col, HeaderRow).AutoFilter FIELD:=col, _
                        Criteria1:=filterArray(col, 1), _
                        Operator:=filterArray(col, 2), _
                        Criteria2:=filterArray(col, 3)
                Else
                    Sheets(home).Cells(col, HeaderRow).AutoFilter FIELD:=col, _
                        Criteria1:=filterArray(col, 1)
                End If
            End If
        Next
    End If

'@@@@@ Rehide Columns that were hidden

    If Not HiddenColumns Is Nothing Then
        For Each oCell In HiddenColumns
            oCell.EntireColumn.Hidden = True
        Next
    End If

'@@@@@ Rehide Rows that were hidden (except those filtered)

    If Not HiddenRows Is Nothing Then
        Set HiddenRows = HiddenRows.SpecialCells(xlCellTypeVisible)
        If Not HiddenRows Is Nothing Then
            For Each oCell In HiddenRows
                oCell.EntireRow.Hidden = True
            Next
        End If
    End If

'@@@@@ Return to user

    Range("C26").Select
    
    Set TestCells = Nothing
    Set oCell = Nothing
    
' SkipToExit:

End Sub


Attribute VB_Name = "CTSI_Submittal_Tools"
Public WithSubHeaders As Boolean
Public WithHeaders As Boolean
Public WithSortHeaders As Boolean
Public NotMisc As Boolean
Public NotCable As Boolean
Public SubmittalColms() As Boolean
Public fSystem As Object
Public MasterPD As String '@@@@@ primary PDF library, correct filename structure
Public ManuCutsPD As String '@@@@@ secondary PDF library, possibly incorrect filename structure
Public pdf995 As String '@@@@@ software program utility file location
Public omni995 As String '@@@@@ software conversion utility (ps to pdf)
Public IndexPD_Main As String '@@@@@ path to main Index file
Public IndexPD_Personal As String '@@@@@ path to personal Index file
Public jPDF As String '@@@@@ path to jPDF java program file
'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Sub GetPDFLibraryLocations()

Dim fSystem As Object
Dim ofile As Object
Dim Free_Array() As String
Dim FileNum As Integer
Dim fTest As String
Dim i As Integer

Set fSystem = CreateObject("Scripting.FileSystemObject") '@@@@@ needed for various reasons

fpath = "C:\CTSI-PD"

If FileOrFolderExists(fpath, "CTSI-PD.txt") Then
    FileNum = FreeFile
    Close #FileNum
    Open fpath & "\CTSI-PD.txt" For Input As #FileNum
    ReDim Free_Array(7)
    i = 1
    Do Until EOF(FileNum)
        Line Input #FileNum, fTest
        Free_Array(i) = fTest
        i = i + 1
    Loop
    If i > 7 Then jPDF = Free_Array(7)
    If i > 6 Then IndexPD_Personal = Free_Array(6)
    If i > 5 Then IndexPD_Main = Free_Array(5)
    If i > 4 Then omni995 = Free_Array(4)
    If i > 3 Then pdf995 = Free_Array(3)
    If i > 2 Then ManuCutsPD = Free_Array(2)
    If Free_Array(1) <> "Not Found" Then MasterPD = Free_Array(1)
    ReDim Free_Array(0)
    If Not FileOrFolderExists(MasterPD) Then MasterPD = ""
    If Not FileOrFolderExists(ManuCutsPD) Then ManuCutsPD = ""
    If Not FileOrFolderExists(pdf995) Then pdf995 = ""
    If Not FileOrFolderExists(omni995) Then omni995 = ""
    If Not FileOrFolderExists(IndexPD_Main) Then omni995 = ""
    If Not FileOrFolderExists(IndexPD_Personal) Then omni995 = ""
    If MasterPD = "" _
    Or ManuCutsPD = "" _
    Or pdf995 = "" _
    Or omni995 = "" _
    Or IndexPD_Main = "" _
    Or IndexPD_Personal = "" _
    Or jPDF = "" Then GoTo FindTheMissingFolders
Else
On Error GoTo SkipError
    If Dir(fpath, vbDirectory) = vbNullString _
    And Dir(fpath, vbDirectory + vbHidden) = vbNullString Then
        MkDir (fpath)
        SetAttr fpath, vbHidden
    End If
SkipError:
FindTheMissingFolders:
    If MasterPD = "" Then
        Free_Array = FileSearch("Manufacturer_ProductData", , _
                                          "J:\xL_PD", , 0)
        If Free_Array(1) = "Not Found" Then _
            Free_Array = FileSearch("Manufacturer_ProductData", , "C:", , 0)
        MasterPD = Free_Array(1)
        ReDim Free_Array(0)
        If MasterPD = "Not Found" Then
            MasterPD = BrowseFolder("Select the Main ProductData Documentation" & Chr(10) & _
                                    "(formatted PDF file) Folder")
            If MasterPD = vbNullString Then MasterPD = ""
        End If
    End If
    If ManuCutsPD = "" Then
        Free_Array = FileSearch("ManufacturerCutsheets", , "J:", , 0)
        If Free_Array(1) = "Not Found" Then _
            Free_Array = FileSearch("ManufacturerCutsheets", , "C:", , 0)
        ManuCutsPD = Free_Array(1)
        ReDim Free_Array(0)
        If ManuCutsPD = "Not Found" Then
            ManuCutsPD = _
                BrowseFolder("Select the ""ManufacturerCutsheets"" (raw PDF file) Folder")
            If ManuCutsPD = vbNullString Then ManuCutsPD = ""
        End If
    End If
    If pdf995 = "" Then
        Free_Array = FileSearch("pdfcombine", "exe", "C:\pdf995")
        pdf995 = Free_Array(1)
        ReDim Free_Array(0)
        If pdf995 = "Not Found" Then
            Free_Array = FileSearch("pdfcombine", "exe", "C:\Program Files\pdf995")
            pdf995 = Free_Array(1)
            ReDim Free_Array(0)
        End If
        If pdf995 = "Not Found" Then
            pdf995 = BrowseFolder("Select the pdf995 Utilities Software Folder," & Chr(10) & _
                                  "pdf995 Program MUST Exist for Combine Routines")
            If pdf995 = vbNullString Then pdf995 = ""
        Else
            pdf995 = Mid(pdf995, 1, Len(pdf995) - Len(fPathTofName(pdf995)) - 1)
        End If
    End If
    If omni995 = "" Then
        Free_Array = FileSearch("omniformat", "exe", "C:\omniformat")
        omni995 = Free_Array(1)
        ReDim Free_Array(0)
        If omni995 = "Not Found" Then
            Free_Array = FileSearch("omniformat", "exe", "C:\Program Files\omniformat")
            omni995 = Free_Array(1)
            ReDim Free_Array(0)
        End If
        If omni995 = "Not Found" Then
            omni995 = BrowseFolder("Select the Omniformat Software Folder," & Chr(10) & _
                                  "Program MUST Exist for PS Convert Routines")
            If omni995 = vbNullString Then omni995 = ""
        Else
            omni995 = Mid(omni995, 1, Len(omni995) - Len(fPathTofName(omni995)) - 1)
        End If
    End If
    If IndexPD_Main = "" Then
        IndexPD_Main = MasterPD & "\PD-Index.xlsx"
        If Not FileOrFolderExists(MasterPD, "PD-Index.xlsx") Then
            MsgBox "PD-Index file is missing from master ProductData folder"
        End If
    End If
    If IndexPD_Personal = "" Then
        IndexPD_Personal = "C:\CTSI-PD" & "\PD-Index.xlsx"
        If Not FileOrFolderExists("C:\CTSI-PD", "PD-Index.xlsx") Then
            Set ofile = fSystem.getfile(IndexPD_Main)
            ofile.Copy IndexPD_Personal
        Else
            If FileDateTime(pathname:=IndexPD_Personal) <> _
               FileDateTime(pathname:=IndexPD_Main) Then
                   Set ofile = fSystem.getfile(IndexPD_Main)
                   If Not IsFileOpen(IndexPD_Personal) Then ofile.Copy IndexPD_Personal
            End If
        End If
    End If
    If FileOrFolderExists("C:\CTSI-PD\jpdfbookmarks-2.1.0", "jpdfbookmarks_cli.exe") Then
        jPDF = "C:\CTSI-PD\jpdfbookmarks-2.1.0\jpdfbookmarks_cli.exe"
    Else
        If InStr(MasterPD, "xL_PD") <> 0 _
        And FileOrFolderExists("J:\xL_PD\jpdfbookmarks-2.1.0") Then
            Set ofile = fSystem.GetFolder("J:\xL_PD\jpdfbookmarks-2.1.0")
            ofile.Copy "C:\CTSI-PD\jpdfbookmarks-2.1.0"
            MsgBox "You must install Java v6.18 for Bookmarks"
        Else
            MsgBox "Bookmarks will not be possible without" & Chr(10) & _
                """jpdfbookmarks-2.1.0"" program in CTSI-PD folder"
            jPDF = ""
        End If
    End If
    Set pdfile = fSystem.OpenTextFile(fpath & "\CTSI-PD.txt", 2, True) '@@@@@ for writing, create
    pdfile.Writeline MasterPD
    pdfile.Writeline ManuCutsPD
    pdfile.Writeline pdf995
    pdfile.Writeline omni995
    pdfile.Writeline IndexPD_Main
    pdfile.Writeline IndexPD_Personal
    pdfile.Writeline jPDF
    pdfile.Close
End If

ReDim Free_Array(0)
Set fSystem = Nothing
Set ofolder = Nothing

End Sub
'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Function GetSubmittalFile(Optional NonSense As Boolean) As String

Dim ofile As Object
Dim Free_Array() As String
Dim fpath As String
Dim ffile As String
Dim networkfile As String

networkfile = ""
If MasterPD = "" _
Or ManuCutsPD = "" _
Or IndexPD_Personal = "" Then
    GetPDFLibraryLocations '@@@@@ get folder locations from the txt file
End If

YesClicked = False
Set fSystem = CreateObject("Scripting.FileSystemObject")
Free_Array = FileSearch("submittal", , ActiveWorkbook.Path)
fpath = Free_Array(1)
ReDim Free_Array(0)
If fpath = "Not Found" Then fpath = ActiveWorkbook.Path
Free_Array = FileSearch("submittal", "xls?", fpath)
ffile = Free_Array(1)
ReDim Free_Array(0)

If ffile = "Not Found" Then 'create file
    If fpath = ActiveWorkbook.Path Then 'create folder
        fpath = fpath & "\Submittals " & _
                        Year(Now()) & "-"
            If Month(Now()) < 10 Then fpath = fpath & "0"
            fpath = fpath & Month(Now()) & "-"
            If Day(Now()) < 10 Then fpath = fpath & "0"
            fpath = fpath & Day(Now())
        If Not YesClicked Then _
                        YesNoMenu "File Options", "Make Folder: " & fpath
        If Not YesClicked Then
            fpath = BrowseFolder
        Else
            MkDir fpath
        End If
    End If
    YesClicked = False
    If FileOrFolderExists("J:\xL_PD\Submittal.xlsm") Then
        networkfile = "J:\xL_PD\Submittal.xlsm"
        If Not FileOrFolderExists(fpath) Then
            On Error GoTo SkipError
            If Dir("C:\CTSI-PD", vbDirectory) = vbNullString _
            And Dir("C:\CTSI-PD", vbDirectory + vbHidden) = vbNullString Then
                MkDir ("C:\CTSI-PD")
                SetAttr "C:\CTSI-PD", vbHidden
            End If
SkipError:
            On Error GoTo 0
        End If
        Set ofile = fSystem.getfile("J:\xL_PD\Submittal.xlsm")
        ofile.Copy "C:\CTSI-PD\Submittal.xlsm"
        Set ofile = Nothing
    ElseIf FileOrFolderExists("C:\CTSI-PD\Submittal.xlsm") Then
        networkfile = "C:\CTSI-PD\Submittal.xlsm"
    End If
    '@@@@@ copy network template
    If networkfile <> "" Then
        If Not YesClicked Then _
                        YesNoMenu "File Options", "Create File: " & fpath & "\Submittal.xlsm"
        If Not YesClicked Then GoTo GetTheFile
        Set ofile = fSystem.getfile(networkfile)
        ffile = fpath & "\Submittal.xlsm"
        ofile.Copy ffile
        Set fSystem = Nothing
        Set ofile = Nothing
    Else '@@@@@ could not locate a useable submittal template file
        ffile = ""
        MsgQuick ("Network & Personal Submittal Templates Not Found")
    End If
End If

'@@@@@ Now ask user if they want to use the submittal file found, or choose another

If ffile <> "" And Not YesClicked Then _
                        YesNoMenu "File Options", "Use File: " & ffile

If Not YesClicked Then '@@@@@ let user select the file to use
GetTheFile:
    ffile = Application.GetOpenFilename
End If

If ffile = "" Or ffile = "false" Then Exit Function

'@@@@@ confirm valid file is provided by ffile
If ffile <> "" And SheetExists(ffile, "BOM-BLANK") Then
    'then make the submittal with the file, else bom in workbook
    GetSubmittalFile = ffile
Else
    GetSubmittalFile = ""
    YesClicked = False
End If

Set fSystem = Nothing
Set ofile = Nothing

End Function
'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Sub CompositeToSubmittalBOM()

Dim homefile As String
Dim homesheet As String
Dim submittalFile As String
Dim subsheet As String
Dim tempsheet As String
Dim LastRowNum As Integer
Dim i As Integer
Dim CompListName As String
Dim SeparateFile As Boolean
Dim SeparateSections As Boolean
Dim DeleteOnComplete As Boolean
Dim HoldText As Variant
Dim Free_Range As Range
Dim IncludedQuotes As Object
Dim NumOfSections As Integer

Application.ScreenUpdating = False
Application.EnableEvents = False
Application.DisplayAlerts = False
CurrentCalcMode = Application.Calculation
Application.Calculation = xlManual
DeleteOnComplete = False

homesheet = ActiveSheet.Name
If Range("A1").Value = "Composite Parts List" Then
    '@@@@@ then we're starting from a composite list already, else create a new unique list
    CompListName = ActiveSheet.Name
    x = 0
Else
    Set IncludedQuotes = ActiveWindow.SelectedSheets
    x = IncludedQuotes.Count
    DeleteOnComplete = True
    If ActiveSheet.Type = xlWorksheet Then
        If Range("A9").Value = True Then
            ReDim SubmittalColms(6)
            SubmittalMenu  '@@@@@ Dialog box to get direction on the options @@@@@
        Else
            MsgQuick Chr(10) & "This is not a sheet you can use for a Submittal Book"
            GoTo SkipToExit
        End If
    Else
        MsgQuick Chr(10) & "This is not a sheet you can use for a Submittal Book"
        GoTo SkipToExit
    End If
End If

'@@@@@ determine if the user wants a seperate submittal file, or BOM within the quote

homefile = ActiveWorkbook.Name
YesClicked = False
YesNoMenu "File Options", "Create Separate Submittal File with This BOM?", _
                          "Seperate File", "BOM in Quote"
seperatefile = YesClicked
If seperatefile Then
    submittalFile = GetSubmittalFile
    If submittalFile = "" Then
        If DeleteOnComplete Then Sheets(CompListName).Delete
        GoTo SkipToExit '@@@@@ problem with book location or sheet exist
    End If
    If Not IsFileOpen(submittalFile) Then Workbooks.Open submittalFile
    submittalFile = fPathTofName(submittalFile)
    Workbooks(homefile).Activate
End If

'@@@@@ if seperate file and more than one quote tab, ask if user wants seperate BOM & Index sections

SeperateSections = False
If seperatefile And x > 1 Then
    YesClicked = False
    YesNoMenu "Section Options", "Create Separate BOM and Index per Tab, or Combined?", _
                              "Combined", "Seperate"
    SeperateSections = Not YesClicked
End If

x = 0
CompListName = "BOM-Data" & Format(Date, " dd-mmm-yyyy")
If Not SeperateSections Then
    Composite CompListName, NotMisc, NotCable, WithSubHeaders, WithHeaders, WithSortHeaders
    GoTo OnceThruLoop
End If

'@@@@@ now loop through each quote tab, make a combined comp-list, or seperate comp-lists, and transfer data

For Each iQuoteTab In IncludedQuotes
    If seperatefile Then Workbooks(homefile).Activate
    Sheets(iQuoteTab.Name).Select
    Composite CompListName, NotMisc, NotCable, WithSubHeaders, WithHeaders, WithSortHeaders

OnceThruLoop:
    x = x + 1

'@@@@@ find the last row of data on the Composite Parts List

    LastRowNum = FindFirst(Range("B:B"), "END OF LIST").Row - 1
    If LastRowNum = 3 Then
        If DeleteOnComplete Then Sheets(CompListName).Delete
        If SeperateSections Then
            GoTo NextBOM '@@@@@ No items on this list
        Else
            GoTo SkipToExit
        End If
    End If
    
'@@@@@ create the new-unique BOM sht, then transfer the data to it
    
    If seperatefile Then
        Workbooks(submittalFile).Activate
        Sheets("BOM-BLANK").Visible = True
        Sheets("BOM-BLANK").Copy After:=Sheets((x * 2) + 2) 'Table Of Contents (tabname might be renamed)
        If SeperateSections Then
            subsheet = x & " - BOM"
            Range("SectionTitle").Value = iQuoteTab.Range("Quote_Title").Value
        Else
            subsheet = "Bill of Materials"
        End If
    Else
        Sheets("BOM-BLANK").Visible = True
        Sheets("BOM-BLANK").Copy After:=Sheets(Sheets.Count)
        subsheet = "Submittal BOM"
    End If
    DeleteSheetIfExists (subsheet)
    ActiveSheet.Name = subsheet
    Sheets("BOM-BLANK").Visible = False
    
'@@@@@ adjusts the Table of Contents, to account for seperate sections
    
    If seperatefile Then
        Sheets("Table of Contents").Activate
        Rows("14:14").Select
        Selection.Copy
        Rows(x * 4 + 11 & ":" & x * 4 + 14).Select
        Selection.Insert Shift:=xlDown
        Range("B" & x * 4 + 11).Select
        Selection.EntireRow.ClearContents
        Selection.Offset(1, 0).Select
        If SeperateSections Then
            Selection.Value = iQuoteTab.Range("Quote_Title").Value & " " _
                              & iQuoteTab.Range("Quote_Section").Value
            Selection.Offset(0, 2).Value = x
            Selection.Offset(1, 0).Select
            Selection.Value = "Bill of Materials"
            Selection.Offset(0, 2).Value = x & " - i"
            Selection.Offset(1, 0).Value = "Product Data Index"
            Selection.Offset(1, 2).Value = x & " - ii"
            Selection.Resize(2, 1).Select
            Selection.InsertIndent 2
            Selection.Offset(0, 2).HorizontalAlignment = xlLeft
        Else
            Selection.Value = "Bill of Materials"
            Selection.Offset(0, 2).Value = "iii"
            Selection.Offset(1, 0).EntireRow.ClearContents
            Selection.Offset(2, 0).Value = "Product Data Index"
            Selection.Offset(2, 2).Value = "iv"
        End If
    End If

    Sheets(subsheet).Activate
    If LastRowNum > 12 Then '@@@@@ add rows to the req sheet to maintain 1 unused rows
        Rows("12:12").Copy
        Rows("12:" & 12 + LastRowNum - 13).Insert Shift:=xlDown
    End If
    
    If seperatefile Then Workbooks(homefile).Activate
    Sheets(CompListName).Activate
    Columns("C:C").Cut
    Columns("B:B").Insert Shift:=xlToRight
    Range("A4:E" & LastRowNum).Copy
    
    If seperatefile Then Workbooks(submittalFile).Activate
    Sheets(subsheet).Activate
    Range("A12").Select
    Selection.PasteSpecial Paste:=xlPasteValues
    
    If seperatefile Then Workbooks(homefile).Activate
    Sheets(CompListName).Activate
    Range("N4:S" & LastRowNum).Copy
    
    If seperatefile Then Workbooks(submittalFile).Activate
    Sheets(subsheet).Activate
    Range("G12").Select
    Selection.PasteSpecial Paste:=xlPasteValues
    
'@@@@@ if in separate submittal file, modify the complist data for use in the data sheet index
    
    If seperatefile Then
        Workbooks(homefile).Activate
        Sheets(CompListName).Select
        Sheets(CompListName).Copy After:=Sheets(Sheets.Count)
        tempsheet = "TEMP-SubmtlConsolidate"
        DeleteSheetIfExists (tempsheet)
        ActiveSheet.Name = tempsheet
        Sheets(tempsheet).Activate
        For i = LastRow To 4 Step -1
            If Cells(i, 2) = "" _
            Or Cells(i, 2) = 0 Then _
                Rows(i).Delete
        Next i
    
        Columns("B:B").Cut
        Columns("D:D").Insert Shift:=xlToRight
    
        CompSortConsolodate tempsheet, False, False, False
        
        Columns("C:C").Cut
        Columns("B:B").Insert Shift:=xlToRight
    
'@@@@@ now transfer the data to the data sheet index
        
        Workbooks(submittalFile).Activate
        Sheets("INDEX-BLANK").Visible = True
        Sheets("INDEX-BLANK").Copy After:=Sheets((x * 2) + 3)
        DeleteSheetIfExists ("Data Index")
        If SeperateSections Then
            ActiveSheet.Name = x & " - Data Index"
            Range("H8").Value = iQuoteTab.Name
            Range("F8").Value = x
        Else
            ActiveSheet.Name = "Data Index"
        End If
        Sheets("INDEX-BLANK").Visible = False
        
        Workbooks(homefile).Activate
        Range("C4:E" & LastRow).Copy
        Workbooks(submittalFile).Activate
        Range("A12").Select
        Selection.PasteSpecial Paste:=xlPasteValues
        Range("D10").Select
        Workbooks(homefile).Activate
        Sheets(tempsheet).Delete
    End If
    
'@@@@@ get rid of the quote sheet complist, or return to original as appropriate
    
    If seperatefile Then Workbooks(submittalFile).Activate
    Sheets(subsheet).Activate
    Range("B11").Select
    If seperatefile Then Workbooks(homefile).Activate
    If DeleteOnComplete Then
        Sheets(CompListName).Delete
        Sheets(homesheet).Activate
    Else
        Sheets(CompListName).Activate
        Columns("B:B").Cut
        Columns("D:D").Insert Shift:=xlToRight
    End If

'@@@@@ correct the formatting of headers/subheaders
    
    If seperatefile Then Workbooks(submittalFile).Activate
    Sheets(subsheet).Activate
    If WithSubHeaders Or WithHeaders Then
        For Each oCell In Range("B12:B" & 12 + LastRowNum - 3)
            If oCell.Value = 0 Then
                If oCell.Offset(0, 1).Value <> "" _
                And oCell.Offset(0, 1).Value <> 0 Then
                    With oCell.Offset(0, 1).Font
                        .Bold = True
                        .Underline = xlUnderlineStyleSingle
                        .Color = 16711680
                    End With
                    With oCell.Offset(0, 2).Resize(1, 2)
                        .Borders(xlEdgeLeft).LineStyle = xlNone
                        .Borders(xlEdgeRight).LineStyle = xlNone
                        .Borders(xlInsideVertical).LineStyle = xlNone
                    End With
                End If
            Else
                If InStr(1, oCell.Offset(0, 4).Value, "pkg") _
                Or InStr(1, oCell.Offset(0, 4).Value, "package") Then
                    oCell.Offset(0, 4).Value = "pkg"
                Else
                    oCell.Offset(0, 4).Value = "each" '@@@@@ default product unit
                End If
            End If
        Next oCell
        For Each oCell In Range("B12:B" & 12 + LastRowNum - 3)
            If oCell.Offset(0, 1).Value = "Equipment" _
            And WithHeaders Then
                If oCell.Offset(-1, 1).Value = "" _
                And oCell.Offset(-2, 1).Value = "" _
                And InStr(oCell.Offset(-3, 1).Value, "Equipment") > 1 Then
                    oCell.Offset(-2, 0).Resize(3, 1).EntireRow.Select
                    Selection.Delete
                End If
            End If
        Next oCell
        Range("B11").Select
    End If
    
'@@@@@ Now get rid of the undesired columns (asked user on submittalmenu)
    If Not SubmittalColms(0) Then
        Set Free_Range = FindFirstWild(Range("10:10"), "Section")
        If Not Free_Range Is Nothing Then Free_Range.EntireColumn.Delete
    End If
    If Not SubmittalColms(1) Then
        Set Free_Range = FindFirstWild(Range("10:10"), "Dimension")
        If Not Free_Range Is Nothing Then Free_Range.EntireColumn.Delete
    End If
    If Not SubmittalColms(2) Then
        Set Free_Range = FindFirstWild(Range("10:10"), "Backbox")
        If Not Free_Range Is Nothing Then Free_Range.EntireColumn.Delete
    End If
    If Not SubmittalColms(3) Then
        Set Free_Range = FindFirstWild(Range("10:10"), "Power")
        If Not Free_Range Is Nothing Then Free_Range.EntireColumn.Delete
    End If
    If Not SubmittalColms(4) Then
        Set Free_Range = FindFirstWild(Range("10:10"), "Load")
        If Not Free_Range Is Nothing Then Free_Range.EntireColumn.Delete
    End If
    If Not SubmittalColms(5) Then
        Set Free_Range = FindFirstWild(Range("10:10"), "Weight")
        If Not Free_Range Is Nothing Then Free_Range.EntireColumn.Delete
    End If
    If Not SubmittalColms(6) Then
        Set Free_Range = FindFirstWild(Range("10:10"), "BTU")
        If Not Free_Range Is Nothing Then Free_Range.EntireColumn.Delete
    End If
    
NextBOM:
    If Not SeperateSections Then GoTo ExitBOMLoop
Next iQuoteTab
ExitBOMLoop:

'@@@@@ Now capture title, address, customer, contact info from jobsetup, for cover page
If seperatefile Then
    Workbooks(homefile).Activate
    ReDim HoldText(1 To 20)
    HoldText(1) = ""
    HoldText(2) = ""
    HoldText(3) = ""
    '@@@@@ Build a submittal title
    If IncludedQuotes Is Nothing Then '@@@@@ then working off a composite parts list
        LastRowNum = FindFirst(Range("T:T"), "END OF LIST").Row - 1
        Set Free_Range = Range("T4:T" & LastRowNum)
        For Each oCell In Free_Range
            If HoldText(1) = "" Then
                HoldText(1) = oCell.Value
            ElseIf Len(HoldText(1)) > 38 Then 'Holdtext-1 is full, try the next
                If HoldText(2) = "" Then
                    HoldText(1) = HoldText(1) & "," 'add end comma once
                    HoldText(2) = oCell.Value
                ElseIf Len(HoldText(2)) > 38 Then 'Holdtext-1 is full, try the next
                    If HoldText(3) = "" Then
                        HoldText(2) = HoldText(2) & "," 'add end comma once
                        HoldText(3) = oCell.Value
                    Else
                        HoldText(3) = HoldText(3) & ", " & oCell.Value
                    End If
                Else
                    HoldText(2) = HoldText(2) & ", " & oCell.Value
                End If
            Else
                HoldText(1) = HoldText(1) & ", " & oCell.Value
            End If
        Next oCell
    Else '@@@@@ else working off a set of actual quote tabs
        For Each oSheet In IncludedQuotes
            oSheet.Activate
            If oSheet.Range("A9").Value = True Then '@@@@@ It's a quote sheet
                If HoldText(1) = "" Then
                    HoldText(1) = oSheet.Range("Quote_Title").Value
                ElseIf Len(HoldText(1)) > 38 Then 'Holdtext-1 is full, try the next
                    If HoldText(2) = "" Then
                        HoldText(1) = HoldText(1) & "," 'add end comma once
                        HoldText(2) = oSheet.Range("Quote_Title").Value
                    ElseIf Len(HoldText(2)) > 38 Then 'Holdtext-1 is full, try the next
                        If HoldText(3) = "" Then
                            HoldText(2) = HoldText(2) & "," 'add end comma once
                            HoldText(3) = oSheet.Range("Quote_Title").Value
                        Else
                            HoldText(3) = HoldText(3) & ", " & oSheet.Range("Quote_Title").Value
                        End If
                    Else
                        HoldText(2) = HoldText(2) & ", " & oSheet.Range("Quote_Title").Value
                    End If
                Else
                    HoldText(1) = HoldText(1) & ", " & oSheet.Range("Quote_Title").Value
                End If
            End If
        Next oSheet
    End If
    
    '@@@@@ now replace last title comma (,) with " and" and " systems"
    If HoldText(3) = "" Then
        If HoldText(2) = "" Then
            If HoldText(1) = "" Then
                'nothing to do
            Else
                If InStr(1, HoldText(1), ",") Then
                    i = Len(HoldText(1))
                    While 0 = InStr(i, HoldText(1), ",")
                        i = i - 1
                    Wend
                    If Len(HoldText(1)) + 13 > 44 Then 'result would be too long, move last term
                        HoldText(2) = "and" & Mid$(HoldText(1), i + 1)
                        If InStr(HoldText(2), "System") = 0 Then _
                            HoldText(2) = HoldText(2) & " Systems"
                        If InStr(InStr(1, HoldText(1), ",") + 1, HoldText(1), ",") = 0 Then
                            HoldText(1) = Mid$(HoldText(1), 1, i - 1)
                        Else
                            HoldText(1) = Mid$(HoldText(1), 1, i)
                        End If
                    Else
                        If InStr(InStr(1, HoldText(1), ",") + 1, HoldText(1), ",") = 0 Then
                            HoldText(1) = Mid$(HoldText(1), 1, i - 1) & " and" & _
                                          Mid$(HoldText(1), i + 1)
                            If InStr(HoldText(1), "System") = 0 Then _
                                HoldText(1) = HoldText(1) & " Systems"
                        Else
                            HoldText(1) = Mid$(HoldText(1), 1, i - 1) & ", and" & _
                                          Mid$(HoldText(1), i + 1)
                            If InStr(HoldText(1), "Systems") = 0 Then _
                                HoldText(1) = HoldText(1) & " Systems"
                        End If
                    End If
                Else
                    HoldText(1) = HoldText(1)
                    If InStr(HoldText(1), "System") = 0 Then _
                        HoldText(1) = HoldText(1) & " System"
                End If
            End If
        Else
            If InStr(1, HoldText(2), ",") Then
                i = Len(HoldText(2))
                While 0 = InStr(i, HoldText(2), ",")
                    i = i - 1
                Wend
                If Len(HoldText(1)) + 13 > 44 Then 'result would be too long, move last term
                    HoldText(3) = "and" & Mid$(HoldText(2), i + 1)
                    HoldText(2) = Mid$(HoldText(2), 1, i - 1)
                    If InStr(HoldText(3), "System") = 0 Then _
                        HoldText(3) = HoldText(3) & " Systems"
                Else
                    HoldText(2) = Mid$(HoldText(2), 1, i - 1) & ", and" & _
                                  Mid$(HoldText(2), i + 1)
                    If InStr(HoldText(2), "System") = 0 Then _
                        HoldText(2) = HoldText(2) & " Systems"
                End If
            ElseIf InStr(1, HoldText(1), ",") Then
                i = Len(HoldText(1))
                While 0 = InStr(i, HoldText(1), ",")
                    i = i - 1
                Wend
                If InStr(InStr(1, HoldText(1), ",") + 1, HoldText(1), ",") = 0 Then
                    HoldText(1) = Mid$(HoldText(1), 1, i - 1) & " and"
                Else
                    HoldText(1) = Mid$(HoldText(1), 1, i - 1) & ", and"
                End If
                If InStr(HoldText(2), "System") = 0 Then _
                    HoldText(2) = HoldText(2) & " Systems"
            End If
        End If
    Else
        If InStr(1, HoldText(3), ",") Then
            i = Len(HoldText(3))
            While 0 = InStr(i, HoldText(3), ",")
                i = i - 1
            Wend
            HoldText(3) = Mid$(HoldText(3), 1, i - 1) & ", and" & _
                          Mid$(HoldText(3), i + 1)
            If InStr(HoldText(3), "System") = 0 Then _
                HoldText(3) = HoldText(3) & " Systems"
        ElseIf InStr(1, HoldText(2), ",") Then
            i = Len(HoldText(2))
            While 0 = InStr(i, HoldText(2), ",")
                i = i - 1
            Wend
            HoldText(2) = Mid$(HoldText(2), 1, i - 1) & ", and"
            HoldText(3) = HoldText(3)
            If InStr(HoldText(3), "System") = 0 Then _
                HoldText(3) = HoldText(3) & " Systems"
        End If
    End If
    
    '@@@@@ collect other data for title page
    Sheets("Job Info & Cover").Activate
    HoldText(4) = Range("E16").Value 'facility title 1
    HoldText(5) = Range("E17").Value 'facility title 2
    HoldText(6) = Range("E39").Value 'customer type
    If Sheets("Job Set-Up").Range("J26").Value = "" Then
        HoldText(7) = Range("C21").Value  'jobsite address 1
        HoldText(8) = Range("C22").Value  'jobsite address 2
        HoldText(9) = ""                  'jobsite address 3
        HoldText(10) = Range("H39").Value 'customer name 1
        HoldText(11) = Range("H40").Value 'customer name 2
        HoldText(12) = Range("H41").Value 'customer address 1
        HoldText(13) = Range("H42").Value 'customer address 2
        HoldText(14) = Range("H43").Value 'customer address 3
        HoldText(15) = Range("H44").Value 'customer contact
        HoldText(16) = Range("H45").Value 'customer phone
        HoldText(17) = "Chantilly, Virginia 20151" 'ctsi office location
    Else '@@@@@ get info from JobSetup page if it's been filled out
        Sheets("Job Set-Up").Activate
        HoldText(7) = Range("F12").Value  'jobsite address 1
        HoldText(8) = Range("F13").Value  'jobsite address 2
        HoldText(9) = Range("F14").Value  'jobsite address 3
        HoldText(10) = Range("J4").Value  'customer name 1
        HoldText(11) = ""                 'customer name 2
        HoldText(12) = Range("J12").Value 'customer address 1
        HoldText(13) = Range("J13").Value 'customer address 2
        HoldText(14) = Range("J14").Value 'customer address 3
        HoldText(15) = Range("J8").Value 'customer contact
        HoldText(16) = Range("L8").Value 'customer phone
        HoldText(17) = Sheets("Job Info & Cover").Range("H50").Value 'ctsi office location
    End If
    
    '@@@@@ now for some address reference corrections, always have city state zip in same place
    If HoldText(9) <> "" _
    Or InStr(HoldText(9), "HIDE") > 0 Then
        HoldText(7) = HoldText(7) & ", " & HoldText(8)
        HoldText(8) = HoldText(9)
        HoldText(9) = ""
    End If
    If HoldText(14) = "" _
    Or InStr(HoldText(14), "HIDE") > 0 Then
        HoldText(14) = HoldText(13)
        HoldText(13) = ""
    End If
    
    '@@@@@ paste data collected into cover page cells
    Workbooks(submittalFile).Activate
    Sheets("Cover").Activate
    Range("Title_1") = HoldText(1)
    If HoldText(2) = "" Then
        Range("Title_2").EntireRow.Hidden = True
        Range("Title_3").EntireRow.Hidden = True
    Else
        Range("Title_2") = HoldText(2)
        If HoldText(3) = "" Then
            Range("Title_3").EntireRow.Hidden = True
        Else
            Range("Title_3") = HoldText(3)
        End If
    End If
    Range("Jobsite_1") = HoldText(4)
    If HoldText(5) = "" Then
        Range("Jobsite_2").EntireRow.Hidden = True
    Else: Range("Jobsite_2") = HoldText(5)
    End If
    Range("Customer_Type") = HoldText(6)
    Range("Job_Address_1") = HoldText(7)
    Range("Job_Address_2") = HoldText(8)
    Range("Customer_1") = HoldText(10)
    If HoldText(11) = "" _
    Or InStr(HoldText(11), "HIDE") > 0 Then
        Range("Customer_2").EntireRow.Hidden = True
    Else: Range("Customer_2") = HoldText(11)
    End If
    Range("Customer_Address_1") = HoldText(12)
    If HoldText(13) = "" Then
        Range("Customer_Address_2").EntireRow.Hidden = True
    Else: Range("Customer_Address_2") = HoldText(13)
    End If
    Range("Customer_Address_3") = HoldText(14)
    Range("Customer_Phone") = HoldText(16)
    Range("Customer_Contact") = HoldText(15)
    Range("C6") = HoldText(17)
    Range("Date_1") = Format(Date, " d mmm yyyy ")

'@@@@@ then some clean up activities
    Workbooks(homefile).Activate
    Application.Calculation = xlAutomatic
    Workbooks(submittalFile).Save
    Workbooks(submittalFile).Close
    Application.Calculation = xlManual
End If

Sheets(homesheet).Activate

SkipToExit:

ReDim SubmittalColms(0)
ReDim HoldText(0)
Erase HoldText
Set IncludedQuotes = Nothing
Set oSheet = Nothing
Set oCell = Nothing

Application.Calculation = CurrentCalcMode
Application.ScreenUpdating = True
Application.EnableEvents = True
Application.DisplayAlerts = True

End Sub

Attribute VB_Name = "CTSI_Template_Building_Tools"
'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Sub FixQuoteTemplateVersions()

Dim home As String
Dim WorkbookVersion As String

home = ActiveSheet.Name
WorkbookVersion = Sheets("Job Info & Cover").Range("B15").Value

'@@@@@ This macro is for quote housekeeping, it establishes a string value for the version in
'@@@@@ a quote tab cell of when that quote tab was created. This will help in autiting
'@@@@@ whether all sheets in a workbook are the same version, are out-of-date, or compatible

For i = 1 To Sheets.Count
    If Sheets(i).Range("A9").Value = True Then
        Sheets(i).Range("Quote_Version").Value = WorkbookVersion
    ElseIf Sheets(i).Name = "BLANK" And Sheets(i).Range("A9").Value = False Then
        Sheets(i).Range("Quote_Version").Value = WorkbookVersion
    End If
Next i

End Sub
'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Sub ConvertToBobStyle()

'@@@@@ copy from ltype1 to ltype2

Dim LbrType1 As Range
Dim LbrType2 As Range
Dim LbrType3 As Range
Dim Free_Range As Range '@@@@@ Junk Range variable used for many different things
Dim home As String
Dim IsBlankQ As Boolean
IsBlankQ = False

CurrentCalcMode = Application.Calculation
Application.Calculation = xlManual
Application.EnableEvents = False
Application.ScreenUpdating = False
Application.DisplayAlerts = False
home = ActiveSheet.Name

For i = 1 To Sheets.Count
    If Sheets(i).Range("A9").Value = True _
    Or Sheets(i).Name = "BLANK" Then
        If Sheets(i).Visible = False Then
            If Sheets(i).Name = "BLANK" Then
                Sheets(i).Visible = True
                IsBlankQ = True
            Else
                GoTo SkipQuoteSheet
            End If
        End If
        Sheets(i).Range("Quote_DesignBy").Value = "Bob Garrison"
        Sheets(i).Activate
        ActiveWindow.Zoom = 100
        
        If Not AnExistingBobButton Then
            Set LbrType1 = Nothing
            Set LbrType2 = Nothing
            Set LbrType3 = Nothing
            Set Free_Range = Nothing
            Columns("A:AM").EntireColumn.Hidden = False
            ActiveSheet.Range("$A$27").AutoFilter FIELD:=1
            ActiveSheet.Range("$D$27").AutoFilter FIELD:=4
            On Error Resume Next
            Columns("O:W").EntireColumn.Hidden = False
            Application.GoTo Reference:="Header_Quote_GenMat"
            Set Free_Range = Selection
            Set LbrType1 = FindFirst(Free_Range, "Labor").Offset(1, 0)
            If LbrType1 Is Nothing Then Set LbrType1 = FindFirst(Free_Range, "Labor1").Offset(1, 0)
            If LbrType1 Is Nothing Then Set LbrType1 = FindFirst(Free_Range, "Lbr1").Offset(1, 0)
            Set LbrType2 = FindFirst(Free_Range, "Lbr2").Offset(1, 0)
            If LbrType2 Is Nothing Then Set LbrType2 = FindFirst(Free_Range, "Labor2").Offset(1, 0)
            Set LbrType3 = FindFirst(Free_Range, "Lbr3").Offset(1, 0)
            If LbrType3 Is Nothing Then Set LbrType3 = FindFirst(Free_Range, "Labor3").Offset(1, 0)
            Application.GoTo Reference:="Footer_Quote_Material"
            On Error GoTo 0
            Set Free_Range = Selection
            Set LbrType1 = LbrType1.Resize(Free_Range.Row - LbrType1.Row, 1)
            Set LbrType2 = LbrType2.Resize(Free_Range.Row - LbrType2.Row, 1)
            Set LbrType3 = LbrType3.Resize(Free_Range.Row - LbrType3.Row, 1)
            '    MsgQuick LbrType1.Address  '@@@@@ for debugging
            LbrType1.Copy
            LbrType2.Select
            ActiveSheet.Paste
            LbrType1.Copy
            LbrType3.Select
            ActiveSheet.Paste
            Selection.Replace What:="L", Replacement:="S", LookAt:=xlWhole, SearchOrder:=xlByRows, _
                              MatchCase:=False, SearchFormat:=False, ReplaceFormat:=False
            '@@@@@ Add the button, designer is BobG, run the style macros how bob likes it
            ActiveSheet.Buttons.Add(213, 86.25, 36, 16.5).Select
            Selection.Name = "Bob Button"
            Selection.Characters.Text = "Bob"
            Selection.ShapeRange.IncrementLeft 550
            Selection.OnAction = "Bob_Style"
            Application.Run "HideSectionColumn"
            Application.Run "Bob_Style"
            Range("C26").Select
        End If
        If IsBlankQ Then
            Sheets(home).Activate
            Sheets(i).Visible = False
            IsBlankQ = False
        End If
    ElseIf Sheets(i).Name = "Job Info & Cover" Then
        Range("Salesperson").Value = "Bob Garrison"
        Range("E39").Value = "Customer: "
        Range("C23").Value = "VA - Fairfax County"
        Range("C25").Value = "PROPOSAL / Negotiation"
        Range("C26").Value = "Business / Owner"
        Range("H39").Formula = "=C16"
        Range("H41").Formula = "=C21"
        Range("H42").Formula = "=C22"
    End If
SkipQuoteSheet:
Next i

Set LbrType1 = Nothing
Set LbrType2 = Nothing
Set LbrType3 = Nothing
Set Free_Range = Nothing
Sheets(home).Activate

Application.CutCopyMode = False
Application.EnableEvents = True
Application.ScreenUpdating = True
Application.DisplayAlerts = True
Application.Calculation = CurrentCalcMode
Set CurrentCalcMode = Nothing

End Sub
'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Function AnExistingBobButton()

Dim s As String
On Error Resume Next
s = ActiveSheet.Buttons("Bob Button").Text
If Err.Number = 0 Then
    AnExistingBobButton = True
Else
    AnExistingBobButton = False
End If
On Error GoTo 0

End Function
Attribute VB_Name = "CTSI_UDFs"
Function LaborOfType(LType As String, _
                     OfTypes As String) As Boolean

'@@@@@ Checks to see if a provided Labor Type is withing a Labor Type String,
'@@@@@     default answer is FALSE

LaborOfType = False
If Not LType = "" _
And InStr(1, OfTypes, LType) > 0 Then LaborOfType = True

End Function
'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Function SumLaborOfType(ByVal LType As Range, _
                              Lext As Range, _
                        ByVal OfTypes As String, _
                     Optional MatchLType As Boolean = False) As Double
On Error GoTo Err_Message

Dim x As Integer

x = 1
SumLaborOfType = 0

If MatchLType Then
    For Each oRow In LType.Rows
        If LType.Cells(x, 1).Value Like OfTypes Then _
                        SumLaborOfType = SumLaborOfType + Lext.Cells(x, 1).Value
        If LType.Cells(x, 4).Value Like OfTypes Then _
                        SumLaborOfType = SumLaborOfType + Lext.Cells(x, 4).Value
        If LType.Cells(x, 7).Value Like OfTypes Then _
                        SumLaborOfType = SumLaborOfType + Lext.Cells(x, 7).Value
        x = x + 1
    Next
Else
    For Each oRow In LType.Rows
        If LaborOfType(Mid(LType.Cells(x, 1).Value, 1, 1), OfTypes) Then _
                        SumLaborOfType = SumLaborOfType + Lext.Cells(x, 1).Value
        If LaborOfType(Mid(LType.Cells(x, 4).Value, 1, 1), OfTypes) Then _
                        SumLaborOfType = SumLaborOfType + Lext.Cells(x, 4).Value
        If LaborOfType(Mid(LType.Cells(x, 7).Value, 1, 1), OfTypes) Then _
                        SumLaborOfType = SumLaborOfType + Lext.Cells(x, 7).Value
        x = x + 1
    Next
End If

Set LType = Nothing   '@@@@@ <<<--- is this necessary??? is it a problem???
Set Lext = Nothing   '@@@@@ <<<--- is this necessary??? is it a problem???
Set oRow = Nothing

Err_Message:
    Set LType = Nothing
    Set Lext = Nothing
    Set oRow = Nothing
    'MsgBox Err.Description, vbOKOnly

End Function
'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Function LbrFixToExtend(SWAdj As Double, OTAdj As Double, FldTypes As String, _
                 LType As String, LUnit As Double, LSellR As Double) As Double

Dim LUnitSWAdj As Double
Dim LSellOTAdj As Double
Dim LUnitInstd As Double

'@@@@@ SW & OT Adjustments Applied if Field Labor Type is TRUE

If LaborOfType(LType, FldTypes) Then
    LUnitSWAdj = 1 + SWAdj
    LSellOTAdj = 1 + OTAdj
Else
    LUnitSWAdj = 1
    LSellOTAdj = 1
End If

'@@@@@ Adjustment of Labor Unit Qty for Slow Work, only if Field Labor Type
'@@@@@ condition provided as True or FalseLUnit

LUnitSWAdj = LUnit * LSellR * LUnitSWAdj

'@@@@@ Rounding Adjustment to maintain 2 decimal LUnit values
'@@@@@ (VBA doesn't have a native roundUP routine)

If SWAdj = 0 Then
    LUnitSWAdj = LUnit
Else
    LUnitSWAdj = Application.RoundUp(Application.Round(LUnitSWAdj, 3), 2) / LSellR
    LUnitSWAdj = Application.RoundUp(Application.Round(LUnitSWAdj, 3), 2)
End If

'@@@@@ Adjustment of Labor Rate for Overtime, only if Field Labor Type
'@@@@@ condition provided as True or FalseLUnit

LSellOTAdj = LSellR * LSellOTAdj

'@@@@@ Tabulation of the particular Labor Column's contribution to Installed Sell Unit Price
'@@@@@ (VBA doesn't have a native roundUP routine)

LUnitInstld = LUnitSWAdj * LSellOTAdj
LUnitInstld = Application.Round(LUnitInstld, 2)

'@@@@@ And now back out the applied Labor Rate and OT if applicable, to arrive at final number

LbrFixToExtend = LUnitInstld / LSellOTAdj

End Function
'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Function InstdUnit(MatUnitS As Double, SWAdj As Double, OTAdj As Double, FldTypes As String, _
                   LType1 As String, LUnit1 As Double, LSell1 As Double, _
                   LType2 As String, LUnit2 As Double, LSell2 As Double, _
                   LType3 As String, LUnit3 As Double, LSell3 As Double) As Double

'@@@@@ Function merely simplifies data entry in the unit sell column.
'@@@@@ So less is seen to the use, more done backstage.

Dim LUnitSell1 As Double
Dim LUnitSell2 As Double
Dim LUnitSell3 As Double
Dim OTAdj1 As Double
Dim OTAdj2 As Double
Dim OTAdj3 As Double

If LaborOfType(LType1, FldTypes) Then OTAdj1 = 1 + OTAdj Else OTAdj1 = 1
If LaborOfType(LType2, FldTypes) Then OTAdj2 = 1 + OTAdj Else OTAdj2 = 1
If LaborOfType(LType3, FldTypes) Then OTAdj3 = 1 + OTAdj Else OTAdj3 = 1

If Not LUnit1 = 0 And Not LSell1 = 0 Then
    LUnitSell1 = LbrFixToExtend(SWAdj, OTAdj, FldTypes, LType1, LUnit1, LSell1) _
                        * LSell1 * OTAdj1
Else: LUnitSell1 = 0
End If

If Not LUnit2 = 0 And Not LSell2 = 0 Then
    LUnitSell2 = LbrFixToExtend(SWAdj, OTAdj, FldTypes, LType1, LUnit2, LSell2) _
                        * LSell2 * OTAdj2
Else: LUnitSell2 = 0
End If

If Not LUnit3 = 0 And Not LSell3 = 0 Then
    LUnitSell3 = LbrFixToExtend(SWAdj, OTAdj, FldTypes, LType1, LUnit3, LSell3) _
                        * LSell3 * OTAdj3
Else: LUnitSell3 = 0
End If

InstdUnit = MatUnitS + LUnitSell1 + LUnitSell2 + LUnitSell3

End Function
'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Function ROMROUND(NumToRound As Double, _
         Optional IsBudget As Boolean = False, _
         Optional NumDigits As Variant = "X", _
         Optional RegRound As Boolean = False) As Double
    If IsBudget = True _
    And NumToRound > 0.09 _
    And Not IsNumeric(NumDigits) Then
        If RegRound Then
            ROMROUND = Application.Round(NumToRound, _
                     Int(2 - (Int(Log(Abs(NumToRound)) / Log(10)) + 1) * 3 / 5))
        Else
            ROMROUND = Application.RoundUp(NumToRound, _
                     Int(2 - (Int(Log(Abs(NumToRound)) / Log(10)) + 1) * 3 / 5))
        End If
    Else
        If Not IsNumeric(NumDigits) Then NumDigits = 2
        If RegRound Then
            ROMROUND = Application.Round(NumToRound, NumDigits)
        Else
            ROMROUND = Application.RoundUp(NumToRound, NumDigits)
        End If
    End If
End Function


Attribute VB_Name = "Format_Fixer_r2"
'''Don't know how or why the formats are getting hosed, but here's a macro to fix it.

'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Sub FixFormatsALLSheets()

home = ActiveSheet.Name
Application.ScreenUpdating = False
Application.EnableEvents = False
Application.DisplayAlerts = False
Application.Calculation = xlManual

Dim ReHideIt As Boolean
Dim Free_Range As Range

For i = 1 To Sheets.Count
    FixSheetFormat i, True
Next i

Sheets(home).Activate
Application.Calculation = xlAutomatic
Application.ScreenUpdating = True
Application.EnableEvents = True
Application.DisplayAlerts = True

End Sub
'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Sub FixSheetFormat(Optional ByVal iSheet As Integer, _
                   Optional MultiSheet As Boolean = False)

If Not MultiSheet Then
    Application.ScreenUpdating = False
    Application.EnableEvents = False
    Application.DisplayAlerts = False
    Application.Calculation = xlManual

    Dim ReHideIt As Boolean
    Dim Free_Range As Range
    
    iSheet = ActiveSheet.Number
End If

    If Sheets(iSheet).Visible = False Then
        Sheets(iSheet).Visible = True
        ReHideIt = True
    Else: ReHideIt = False
    End If
    Sheets(iSheet).Activate
    If Sheets(iSheet).Type = xlWorksheet Then
        If Sheets(iSheet).Range("A9").Value = True _
        Or Sheets(iSheet).Name = "BLANK" Then
            ViewSaveQuoteOpen
            Cells.Select
            
            'quote tab body fixes:
            Selection.NumberFormat = "General"
            Range("B" & Range("Header_Quote_GenMat").Row + 2 & ":G" & Range("Header_Quote_MiscMat").Row - 1).Select
            With Selection.Font
                .Name = "Arial"
                .Size = 8
                .ColorIndex = xlAutomatic
            End With
            Range("B" & Range("Header_Quote_GenMat").Row + 2 & ":B" & Range("Header_Quote_MiscMat").Row - 1).Select
            Selection.WrapText = True
            Range("F" & Range("Header_Quote_GenMat").Row + 2 & ":F" & Range("Header_Quote_MiscMat").Row - 1).Select
            Selection.WrapText = True
            Range("G" & Range("Header_Quote_GenMat").Row & ":J" & Range("Quote_Version").Row - 1).Select
            Selection.NumberFormat = "_($* #,##0.00_);_($* (#,##0.00);_($* ""-""??_);_(@_)"
            Range("N" & Range("Header_Quote_GenMat").Row & ":N" & Range("Footer_Quote_Material").Row + 1).Select
            Selection.NumberFormat = "_(#,##0.00_);_((#,##0.00);_(""-""??_);_(@_)"
            Range("AJ" & Range("Header_Quote_GenMat").Row & ":AJ" & Range("Header_Quote_MiscMat").Row - 1).Select
            Selection.NumberFormat = "_($* #,##0.00_);_($* (#,##0.00);_($* ""-""??_);_(@_)"
            Range("K" & Range("Header_Quote_GenMat").Row & ":K" & Range("Quote_Version").Row - 1).Select
            Selection.NumberFormat = "0.0%"
            Range("L" & Range("Header_Quote_GenMat").Row & ":L" & Range("Quote_Version").Row - 1).Select
            Selection.NumberFormat = "General"
            
            
            Range("F" & Range("Quote_Version").Row - 2).Select
            Selection.NumberFormat = """PM Calculated ""#%"
            
            'quote tab margin block fixes:
            Range("L" & Range("Quote_Version").Row + 1).Select
            Selection.NumberFormat = "_($* #,##0.00_);_($* (#,##0.00);_($* ""-""??_);_(@_)"
            Range("L" & Range("Quote_Version").Row + 3).Select
            Selection.NumberFormat = "0.00%"
            Range("L" & Range("Quote_Version").Row + 10).Select
            Selection.NumberFormat = "_($* #,##0.00_);_($* (#,##0.00);_($* ""-""??_);_(@_)"
            Range("L" & Range("Quote_Version").Row + 14).Select
            Selection.NumberFormat = "_($* #,##0.00_);_($* (#,##0.00);_($* ""-""??_);_(@_)"
            
            'quote tab summary fixes:
            Range("D" & Range("Quote_Version").Row + 2 & ":D" & Range("Quote_Total_Bond").Row + 3).Select
            Selection.NumberFormat = "0.00%"
            Range("F" & Range("Quote_Version").Row + 2 & ":H" & Range("Quote_Price").Row + 6).Select
            Selection.NumberFormat = "$#,##0.00_);($#,##0.00)"
            Range("F" & Range("Quote_Total_Equipment").Row & ":F" & Range("Quote_Total_Equipment").Row + 5).Select
            Selection.NumberFormat = "$#,##0.00_)        ;($#,##0.00)        "
            Range("F" & Range("Quote_Total_Permit").Row & ":F" & Range("Quote_Price").Row + 6).Select
            Selection.NumberFormat = "$#,##0.00_)        ;($#,##0.00)        "
            
            'ctsi-only fixes:
            Range("D" & Range("Header_Quote_CTSI").Row + 3 & ":D" & Range("Header_Quote_CTSI").Row + 4).Select
            Selection.NumberFormat = "0.0%"
            Range("D" & Range("Footer_Quote_NonTax").Row - 7 & ":D" & Range("Footer_Quote_NonTax").Row - 1).Select
            Selection.NumberFormat = "0.0%"
            
            'quote tab special cell fixes:
            Range("D" & Range("Footer_Quote_Material").Row - 1).Select
            Selection.NumberFormat = "0%"
            Range("Q26").Select
            Selection.NumberFormat = "d mmm yyyy h:mmAM/PM"
            
            ViewRestoreQuote
            
        ElseIf Sheets(iSheet).Cells(1, 1).Value = "Composite Parts List" Then
            Cells.Select
            Selection.NumberFormat = "General"
            Range("F:F").Select
            Selection.NumberFormat = "_($* #,##0.00_);_($* (#,##0.00);_($* ""-""??_);_(@_)"
            Range("U:U").Select
            Selection.NumberFormat = "_($* #,##0.00_);_($* (#,##0.00);_($* ""-""??_);_(@_)"
            Range("A4").Select
        ElseIf Sheets(iSheet).Name = "Job Info & Cover" Then
            Sheets("Job Info & Cover").Unprotect
            Range("C31:C39").Select
            Selection.NumberFormat = "General"
            Range("O16:X51").Select
            Selection.NumberFormat = "General"
            Range("E25").Select
            Sheets("Job Info & Cover").Protect
        ElseIf InStr(Sheets(iSheet).Name, "Summary") Then
            ViewSaveQuoteOpen
            Cells.Select
            Selection.NumberFormat = "General"
            Range("E" & Range("Header_Summary_Base").Row + 1 & ":H" & Range("Footer_Summary_Option").Row - 1).Select
            Selection.NumberFormat = "_($* #,##0.00_);_($* (#,##0.00);_($* ""-""??_);_(@_)"
            Range("I" & Range("Header_Summary_Base").Row + 1 & ":I" & Range("Footer_Summary_Option").Row - 1).Select
            Selection.NumberFormat = "General"
            Range("J" & Range("Header_Summary_Base").Row + 1 & ":L" & Range("Footer_Summary_Option").Row - 1).Select
            Selection.NumberFormat = "_($* #,##0.00_);_($* (#,##0.00);_($* ""-""??_);_(@_)"
            Range("M" & Range("Header_Summary_Base").Row + 1 & ":M" & Range("Footer_Summary_Option").Row - 1).Select
            Selection.NumberFormat = "0.00%"
            Range("O" & Range("Header_Summary_Base").Row + 1 & ":T" & Range("Footer_Summary_Option").Row - 1).Select
            Selection.NumberFormat = "_($* #,##0.00_);_($* (#,##0.00);_($* ""-""??_);_(@_)"
            ViewRestoreQuote
        Else
            Set Free_Range = FindFirstWild(Range("A1:O3"), "*Material Requ?sition*")
            If Not Free_Range Is Nothing Then
                Cells.Select
                Selection.NumberFormat = "General"
                Range("D3").Select
                Selection.NumberFormat = "mmmm d, yyyy"
                Range("G" & Range("Header_MatReq").Row + 1 & ":H" & Range("Footer_MatReq").Row).Select
                Selection.NumberFormat = "_($* #,##0.00_);_($* (#,##0.00);_($* ""-""??_);_(@_)"
                Range("J" & Range("Header_MatReq").Row + 1 & ":L" & Range("Footer_MatReq").Row).Select
                Selection.NumberFormat = "_($* #,##0.00_);_($* (#,##0.00);_($* ""-""??_);_(@_)"
                Range("A1").Select
            Else
                GoTo NotMatReq
            End If
        GoTo NextItem
NotMatReq:
            Set Free_Range = FindFirstWild(Range("A1:B12"), "*Bill of Materials*")
            If Not Free_Range Is Nothing Then
                Cells.Select
                Selection.NumberFormat = "General"
                Free_Range.Select
                Set Free_Range = Nothing
            End If
        End If
    End If
NextItem:
    If ReHideIt Then Sheets(iSheet).Visible = False

If Not MultiSheet Then
    Application.Calculation = xlAutomatic
    Application.ScreenUpdating = True
    Application.EnableEvents = True
    Application.DisplayAlerts = True
End If

Set Free_Range = Nothing

End Sub
Attribute VB_Name = "MessageForm"
Attribute VB_Base = "0{E9DA6AA7-8674-4A37-B03C-3DB784F74C73}{98C1D420-0090-4CC5-B093-60912413F398}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Private Sub MainLabel_Click()
    MessageFormOK
End Sub
'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Private Sub OKButton_Click()
    MessageFormOK
End Sub
'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Private Sub UserForm_Activate()
    TimeSet = Now + TimeValue("00:00:" & Format(T, "00"))
    Application.OnTime TimeSet, "MessageFormOK"
End Sub
Attribute VB_Name = "Module1"
Option Explicit

Type POINTAPI
    x As Long
    Y As Long
End Type

Type MSLLHOOKSTRUCT
    pt As POINTAPI
    mouseData As Long
    flags As Long
    time As Long
    dwExtraInfo As Long
End Type

#If VBA7 Then
    #If Win64 Then
        Declare PtrSafe Function WindowFromPoint Lib "user32" (ByVal Point As LongLong) As LongPtr
    #Else
        Declare PtrSafe Function WindowFromPoint Lib "user32" (ByVal xPoint As Long, ByVal yPoint As Long) As LongPtr
    #End If
    Declare PtrSafe Function GetClassName Lib "user32" Alias "GetClassNameA" (ByVal hwnd As LongPtr, ByVal lpClassName As String, ByVal nMaxCount As Long) As Long
    Declare PtrSafe Function GetParent Lib "user32" (ByVal hwnd As LongPtr) As LongPtr
    Declare PtrSafe Function GetActiveWindow Lib "user32" () As LongPtr
    Declare PtrSafe Sub CopyMemory Lib "kernel32" Alias "RtlMoveMemory" (Destination As Any, Source As Any, ByVal Length As LongPtr)
    Declare PtrSafe Function GetCursorPos Lib "user32" (ByRef lpPoint As POINTAPI) As LongPtr
    Declare PtrSafe Function SetFocus Lib "user32" (ByVal hwnd As LongPtr) As LongPtr
    Declare PtrSafe Function IsWindow Lib "user32" (ByVal hwnd As LongPtr) As Long
    Declare PtrSafe Function SetWindowsHookEx Lib "user32" Alias "SetWindowsHookExA" (ByVal idHook As Long, ByVal lpfn As LongPtr, ByVal hmod As LongPtr, ByVal dwThreadId As Long) As LongPtr
    Declare PtrSafe Function CallNextHookEx Lib "user32" (ByVal hHook As LongPtr, ByVal nCode As Long, ByVal wParam As LongPtr, lParam As Any) As LongPtr
    Declare PtrSafe Function UnhookWindowsHookEx Lib "user32" (ByVal hHook As LongPtr) As LongPtr
    Dim hwnd As LongPtr, lMouseHook As LongPtr
#Else
    Declare Function WindowFromPoint Lib "user32" (ByVal xPoint As Long, ByVal yPoint As Long) As Long
    Declare Function GetClassName Lib "user32" Alias "GetClassNameA" (ByVal hwnd As Long, ByVal lpClassName As String, ByVal nMaxCount As Long) As Long
    Declare Function GetParent Lib "user32" (ByVal hwnd As Long) As Long
    Declare Function GetActiveWindow Lib "user32" () As Long
    Declare Sub CopyMemory Lib "kernel32" Alias "RtlMoveMemory" (Destination As Any, Source As Any, ByVal Length As Long)
    Declare Function GetCursorPos Lib "user32" (ByRef lpPoint As POINTAPI) As Long
    Declare Function SetFocus Lib "user32" (ByVal hwnd As Long) As Long
    Declare Function IsWindow Lib "user32" (ByVal hwnd As Long) As Long
    Declare Function SetWindowsHookEx Lib "user32" Alias "SetWindowsHookExA" (ByVal idHook As Long, ByVal lpfn As Long, ByVal hmod As Long, ByVal dwThreadId As Long) As Long
    Declare Function CallNextHookEx Lib "user32" (ByVal hHook As Long, ByVal nCode As Long, ByVal wParam As Long, lParam As Any) As Long
    Declare Function UnhookWindowsHookEx Lib "user32" (ByVal hHook As Long) As Long
    Dim hwnd As Long, lMouseHook As Long
#End If

Const WH_MOUSE_LL = 14
Const WM_MOUSEWHEEL = &H20A
Const HC_ACTION = 0

Dim oComboBox As Object

Sub SetComboBoxHook(ByVal Control As Object)
    Dim tPt As POINTAPI
    Dim sBuffer As String
    Dim lRet As Long

    Set oComboBox = Control
    RemoveComboBoxHook
    GetCursorPos tPt
    #If Win64 Then
        Dim lPt As LongPtr
        CopyMemory lPt, tPt, LenB(tPt)
        hwnd = WindowFromPoint(lPt)
    #Else
        hwnd = WindowFromPoint(tPt.x, tPt.Y)
    #End If
    sBuffer = Space(256)
    lRet = GetClassName(GetParent(hwnd), sBuffer, 256)
    If InStr(Left(sBuffer, lRet), "MdcPopup") Then
        SetFocus hwnd
        #If Win64 Then
            lMouseHook = SetWindowsHookEx(WH_MOUSE_LL, AddressOf MouseProc, Application.HinstancePtr, 0)
        #Else
            lMouseHook = SetWindowsHookEx(WH_MOUSE_LL, AddressOf MouseProc, Application.Hinstance, 0)
        #End If
    End If
End Sub

Sub RemoveComboBoxHook()
    UnhookWindowsHookEx lMouseHook
End Sub

#If VBA7 Then
    Function MouseProc(ByVal nCode As Long, ByVal wParam As LongPtr, lParam As MSLLHOOKSTRUCT) As LongPtr
#Else
    Function MouseProc(ByVal nCode As Long, ByVal wParam As Long, lParam As MSLLHOOKSTRUCT) As Long
#End If

    Dim sBuffer As String
    Dim lRet As Long

    sBuffer = Space(256)
    lRet = GetClassName(GetActiveWindow, sBuffer, 256)
    If Left(sBuffer, lRet) = "wndclass_desked_gsk" Then Call RemoveComboBoxHook
    If IsWindow(hwnd) = 0 Then Call RemoveComboBoxHook

    If (nCode = HC_ACTION) Then
        If wParam = WM_MOUSEWHEEL Then
        #If Win64 Then
            Dim lPt As LongPtr
            CopyMemory lPt, lParam.pt, LenB(lParam.pt)
            If WindowFromPoint(lPt) = hwnd Then
        #Else
            If WindowFromPoint(lParam.pt.x, lParam.pt.Y) = hwnd Then
        #End If
                On Error Resume Next
                    If lParam.mouseData > 0 Then
                        oComboBox.TopIndex = oComboBox.TopIndex - 1 '<---u can change this to change the scrolling speed upwards
                        'u can change "TopIndex" to "listIndex" if you want to change the value instead of hovering it, do not use the dynamic listFillrange if u do!
                    Else
                        oComboBox.TopIndex = oComboBox.TopIndex + 2  '<---u can change this to change the scrolling speed downwards
                        'u can change "TopIndex" to "listIndex" if you want to change the value instead of hovering it, do not use the dynamic listFillrange if u do!
                    End If
                On Error GoTo 0
            End If
        End If
    End If

    MouseProc = CallNextHookEx(lMouseHook, nCode, wParam, ByVal lParam)
End Function
Attribute VB_Name = "OutputFactorForm"
Attribute VB_Base = "0{55FA08B7-A7D7-4AB1-8F7F-EF49174B79A6}{44AA940F-588C-40EE-AAC4-DFBE71EAC43B}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False


Private Sub MaterialBurdenTextBox_AfterUpdate()
    MaterialBurdenTextBox.Value = Format(MaterialBurdenTextBox, "Percent")
End Sub
'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Private Sub UseTaxRateTextBox_AfterUpdate()
    UseTaxRateTextBox.Value = Format(UseTaxRateTextBox, "Percent")
End Sub
'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Private Sub WarrantyRateTextBox_AfterUpdate()
    WarrantyRateTextBox.Value = Format(WarrantyRateTextBox, "Percent")
End Sub
'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Private Sub OandMRateTextBox_AfterUpdate()
    OandMRateTextBox.Value = Format(OandMRateTextBox, "Percent")
End Sub
'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Private Sub SafetyRateTextBox_AfterUpdate()
    SafetyRateTextBox.Value = Format(SafetyRateTextBox, "Percent")
End Sub
'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Private Sub OandPRateTextBox_AfterUpdate()
    OandPRateTextBox.Value = Format(OandPRateTextBox, "Percent")
End Sub
'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Private Sub LRateTextBox_Change()
    LRateTextBox.Value = Format(LRateTextBox, "Currency")
End Sub
'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Private Sub ERateTextBox_Change()
    ERateTextBox.Value = Format(ERateTextBox, "Currency")
End Sub
'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Private Sub SRateTextBox_Change()
    SRateTextBox.Value = Format(SRateTextBox, "Currency")
End Sub
'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Private Sub TRateTextBox_Change()
    TRateTextBox.Value = Format(TRateTextBox, "Currency")
End Sub
'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Private Sub MRateTextBox_Change()
    MRateTextBox.Value = Format(MRateTextBox, "Currency")
End Sub
'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Private Sub OKButton_Click()
    OutputFactorFormOK
End Sub

Attribute VB_Name = "Output_Change_Form_Creator"
Public materialburden As Double
Public usetaxrate As Double
Public warrantyrate As Double
Public OandMrate As Double
Public safetyrate As Double
Public OandPrate As Double
Public OTfactor As Double
Public laborLrate As Double
Public laborErate As Double
Public laborSrate As Double
Public laborTrate As Double
Public laborMrate As Double
Public laborLfactor As Double
Public laborEfactor As Double
Public laborSfactor As Double
Public laborTfactor As Double
Public laborMfactor As Double
'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Sub OutputChangeForm()

CurrentCalcMode = Application.Calculation
Application.Calculation = xlManual
Application.EnableEvents = False
Application.ScreenUpdating = False
Application.DisplayAlerts = False

Dim IncludedQuote As Boolean
Dim home As String
Dim fpath As String
Dim ffile As String
Dim networkfile As String
Dim fSystem As Object
Dim ofile As Object
Dim SourceQuote As String
Dim TargetChangeForm As String
Dim newhome As String
Dim compositelistname As String
Dim i As Integer
Dim nRows As Integer
Dim usetax As Double
Dim salestaxrate As Double
Dim salestaxtotal As Double
Dim salestax As Double
Dim bondamount As Double
Dim bondtotal As Double
Dim frontrow As Integer
Dim projectname As String
Dim changename As String
Dim freevar As Double
Dim laborL As Double
Dim laborE As Double
Dim laborS As Double
Dim laborT As Double
Dim laborM As Double
Dim laborLOT As Double
Dim laborEOT As Double
Dim laborSOT As Double
Dim laborTOT As Double
Dim laborMOT As Double

home = ActiveSheet.Name
Sheets("Job Info & Cover").Activate
salestaxtotal = 0
bondtotal = 0
'@@@@@----------------------------------@@@@@@@@@@@@@@@@@@@ -----------------------------------------------------------------

If IsNumeric(Sheets("Job Info & Cover").Range("c29").Value) Then
    salestaxrate = Sheets("Job Info & Cover").Range("c29").Value
ElseIf Sheets("Job Info & Cover").Range("c27").Value = "Yes (Provide Cert)" Then
    salestaxrate = 0
Else
    MsgBox "you must enter the sales tax percent on the Job Info Tab."
    GoTo QuickExit
End If

If Sheets("Job Set-up").Range("i27").Value = 0 _
And Sheets("Job Set-up").Range("i27").Value = 0 Then
    'then there's no installer "I" or draftsman "D" type labor, that's good.
Else
    MsgBox "The quote must not use any Installer (I) or Draftsman (D) type labor. They will not be counted."
    GoTo QuickExit
End If

SourceQuote = ActiveWorkbook.Name
frontrow = 16

'@@@@@ test to make sure it's set as change order, PM% at 15%, and use tax at 6%
If Sheets("Job Info & Cover").Range("c25").Value = "CO - Change Order" _
And Sheets("Job Info & Cover").Range("c42").Value = 0.15 _
And Sheets("Job Info & Cover").Range("c28").Value = 0.06 Then
    '@@@@@ this workbook checks out.
    
    '@@@@@ retrieve adjustment factors from job info (or newly install them) @@@@@@@@@@@@@@@ -----------------------------------------------------------------

    If Sheets("Job Info & Cover").Range("ac57").Value = "" _
    Or Sheets("Job Info & Cover").Range("ac57").Value = 0 Then
        
        Sheets("Job Info & Cover").Unprotect
        
        Sheets("Job Info & Cover").Range("ac57:ac61").Select
        Selection.NumberFormat = "0.00%"
        Sheets("Job Info & Cover").Range("ac72").Select
        Selection.NumberFormat = "0.00%"
        Sheets("Job Info & Cover").Range("ac62:ac66").Select
        Selection.NumberFormat = "$#,##0.00_);($#,##0.00)"
        Sheets("Job Info & Cover").Range("ac67:ac71").Select
        Selection.NumberFormat = "General"
        Sheets("Job Info & Cover").Range("ac73").Select
        Selection.NumberFormat = "General"
        
        Sheets("Job Info & Cover").Range("ac57:ac73").Select
        Selection.Borders(xlEdgeLeft).LineStyle = xlContinuous
        Selection.Borders(xlEdgeRight).LineStyle = xlContinuous
        Selection.Borders(xlEdgeTop).LineStyle = xlContinuous
        Selection.Borders(xlEdgeBottom).LineStyle = xlContinuous
        Selection.Borders(xlInsideHorizontal).LineStyle = xlContinuous
        Selection.HorizontalAlignment = xlCenter
        
        Sheets("Job Info & Cover").Range("ac57").Value = 0.06
        Sheets("Job Info & Cover").Range("ac58").Value = 0.06
        Sheets("Job Info & Cover").Range("ac59").Value = 0.05
        Sheets("Job Info & Cover").Range("ac60").Value = 0.0125
        Sheets("Job Info & Cover").Range("ac61").Value = 0.026
        Sheets("Job Info & Cover").Range("ac62").Value = 48.84
        Sheets("Job Info & Cover").Range("ac63").Value = 91.6
        Sheets("Job Info & Cover").Range("ac64").Value = 91.6
        Sheets("Job Info & Cover").Range("ac65").Value = 89.6
        Sheets("Job Info & Cover").Range("ac66").Value = 89.6
        Sheets("Job Info & Cover").Range("ac67").Value = 1.55
        Sheets("Job Info & Cover").Range("ac68").Value = 1.55
        Sheets("Job Info & Cover").Range("ac69").Value = 1.55
        Sheets("Job Info & Cover").Range("ac70").Value = 1.55
        Sheets("Job Info & Cover").Range("ac71").Value = 1.55
        Sheets("Job Info & Cover").Range("ac72").Value = 0.1
        Sheets("Job Info & Cover").Range("ac73").Value = 1.45
        
        Sheets("Job Info & Cover").Range("ad57").Value = "materialburden"
        Sheets("Job Info & Cover").Range("ad58").Value = "usetaxrate"
        Sheets("Job Info & Cover").Range("ad59").Value = "warrantyrate"
        Sheets("Job Info & Cover").Range("ad60").Value = "OandMrate"
        Sheets("Job Info & Cover").Range("ad61").Value = "safetyrate"
        Sheets("Job Info & Cover").Range("ad62").Value = "laborLrate"
        Sheets("Job Info & Cover").Range("ad63").Value = "laborErate"
        Sheets("Job Info & Cover").Range("ad64").Value = "laborSrate"
        Sheets("Job Info & Cover").Range("ad65").Value = "laborTrate"
        Sheets("Job Info & Cover").Range("ad66").Value = "laborMrate"
        Sheets("Job Info & Cover").Range("ad67").Value = "laborLfactor"
        Sheets("Job Info & Cover").Range("ad68").Value = "laborEfactor"
        Sheets("Job Info & Cover").Range("ad69").Value = "laborSfactor"
        Sheets("Job Info & Cover").Range("ad70").Value = "laborTfactor"
        Sheets("Job Info & Cover").Range("ad71").Value = "laborMfactor"
        Sheets("Job Info & Cover").Range("ad72").Value = "OandPrate"
        Sheets("Job Info & Cover").Range("ad73").Value = "OTfactor"
    
        Sheets("Job Info & Cover").Protect
    
    End If
    
    materialburden = Sheets("Job Info & Cover").Range("ac57").Value
    usetaxrate = Sheets("Job Info & Cover").Range("ac58").Value
    warrantyrate = Sheets("Job Info & Cover").Range("ac59").Value
    OandMrate = Sheets("Job Info & Cover").Range("ac60").Value
    safetyrate = Sheets("Job Info & Cover").Range("ac61").Value
    laborLrate = Sheets("Job Info & Cover").Range("ac62").Value
    laborErate = Sheets("Job Info & Cover").Range("ac63").Value
    laborSrate = Sheets("Job Info & Cover").Range("ac64").Value
    laborTrate = Sheets("Job Info & Cover").Range("ac65").Value
    laborMrate = Sheets("Job Info & Cover").Range("ac66").Value
    laborLfactor = Sheets("Job Info & Cover").Range("ac67").Value
    laborEfactor = Sheets("Job Info & Cover").Range("ac68").Value
    laborSfactor = Sheets("Job Info & Cover").Range("ac69").Value
    laborTfactor = Sheets("Job Info & Cover").Range("ac70").Value
    laborMfactor = Sheets("Job Info & Cover").Range("ac71").Value
    OandPrate = Sheets("Job Info & Cover").Range("ac72").Value
    OTfactor = Sheets("Job Info & Cover").Range("ac73").Value
    
    freevar = materialburden + usetaxrate + warrantyrate + OandMrate + safetyrate + _
    laborLrate + laborErate + laborSrate + laborTrate + laborMrate + _
    laborLfactor + laborEfactor + laborSfactor + laborTfactor + laborMfactor + OandPrate + OTfactor
    
    '@@@@@------ Confirm factors in dialog, or make adjustments to jobinfo -------@@@@@@@@@@@@@@@ ---------------------------
    
    OutputFactorMenu
    
    '@@@@@  test if values changed and update if they did -------------------------------------
    
    If freevar = materialburden + usetaxrate + warrantyrate + OandMrate + safetyrate + _
    laborLrate + laborErate + laborSrate + laborTrate + laborMrate + _
    laborLfactor + laborEfactor + laborSfactor + laborTfactor + laborMfactor + OandPrate + OTfactor Then
        '@@@@@ nothing to change
    Else
        Sheets("Job Info & Cover").Unprotect
        Sheets("Job Info & Cover").Range("ac57").Value = materialburden
        Sheets("Job Info & Cover").Range("ac58").Value = usetaxrate
        Sheets("Job Info & Cover").Range("ac59").Value = warrantyrate
        Sheets("Job Info & Cover").Range("ac60").Value = OandMrate
        Sheets("Job Info & Cover").Range("ac61").Value = safetyrate
        Sheets("Job Info & Cover").Range("ac62").Value = laborLrate
        Sheets("Job Info & Cover").Range("ac63").Value = laborErate
        Sheets("Job Info & Cover").Range("ac64").Value = laborSrate
        Sheets("Job Info & Cover").Range("ac65").Value = laborTrate
        Sheets("Job Info & Cover").Range("ac66").Value = laborMrate
        Sheets("Job Info & Cover").Range("ac67").Value = laborLfactor
        Sheets("Job Info & Cover").Range("ac68").Value = laborEfactor
        Sheets("Job Info & Cover").Range("ac69").Value = laborSfactor
        Sheets("Job Info & Cover").Range("ac70").Value = laborTfactor
        Sheets("Job Info & Cover").Range("ac71").Value = laborMfactor
        Sheets("Job Info & Cover").Range("ac72").Value = OandPrate
        Sheets("Job Info & Cover").Range("ac73").Value = OTfactor
        Sheets("Job Info & Cover").Protect
    End If
    
    projectname = Sheets("Job Info & Cover").Range("c16").Value
    changename = Sheets("Job Info & Cover").Range("c17").Value
    
    fpath = ActiveWorkbook.Path
    TargetChangeForm = projectname & " " & Format(Date, "yyyy-mm-dd") & " " & changename & " Change.xlsx"

    '@@@@@ create or overwrite the change file with the template as necessary. open the change file
    Set fSystem = CreateObject("Scripting.FileSystemObject")
    networkfile = "J:\xL_PD\CTSI Output Change Form Blank.xlsx"
    If IsFileOpen(TargetChangeForm) Then
        MsgBox "you must close the file " & TargetChangeForm & ". it will be deleted and recreated in this macro."
        GoTo QuickExit
    End If
    Set ofile = fSystem.getfile(networkfile)
    ffile = fpath & "\" & TargetChangeForm
    ofile.Copy ffile
    Set fSystem = Nothing
    Set ofile = Nothing
    Workbooks.Open ffile
    Workbooks(SourceQuote).Activate
    
    'On Error GoTo QuickExit
    IncludedQuote = False
    For i = 1 To Sheets.Count
        If Sheets(i).Name = "Job Info & Cover" Then
            IncludedQuote = True
        ElseIf InStr(Sheets(i).Name, "Summary") Then
            IncludedQuote = False
        ElseIf IncludedQuote And Sheets(i).Type = xlWorksheet Then
            If Sheets(i).Range("A9").Value = True Then
                
                salestax = 0
                bondamount = 0
                
                '@@@@@ create the new tab, name it the same, and transfer the data
                
                newhome = Sheets(i).Name
                Sheets(newhome).Activate
                CompositeGenerator '@@@@@ gets the data in an easy to transfer format.
                Application.Calculation = xlManual
                Application.EnableEvents = False
                Application.ScreenUpdating = False '<-----------------------------------------------------------------testing---------------------------------------------------------------
                Application.DisplayAlerts = False
                
                '@@@@@ collect the labor & bond data for the quote tab
                laborL = Sheets(i).Range("d3").Value + _
                         Sheets(i).Range("d4").Value + _
                         Sheets(i).Range("d7").Value 'adds up reg hours for LeadTech,HealthcareTech,Travel
                laborE = Sheets(i).Range("p2").Value 'adds up reg hours for Engineer
                laborS = Sheets(i).Range("p4").Value + _
                         Sheets(i).Range("d6").Value 'adds up reg hours for Programmer and Network Engineer
                laborT = Sheets(i).Range("p5").Value 'adds reg hours for Trainer
                laborM = Sheets(i).Range("p6").Value + Sheets(i).Range("p7").Value 'adds reg, & calc hours for PM
                
                laborLOT = Sheets(i).Range("e3").Value + _
                           Sheets(i).Range("e4").Value + _
                           Sheets(i).Range("e7").Value 'adds up OT hours for LeadTech,HealthcareTech,Travel
                laborEOT = Sheets(i).Range("q2").Value 'adds up OT hours for Engineer
                laborSOT = Sheets(i).Range("q4").Value + _
                           Sheets(i).Range("e6").Value 'adds up OT hours for Programmer and Network Engineer
                laborTOT = Sheets(i).Range("q5").Value 'adds OT hours for Trainer
                laborMOT = Sheets(i).Range("q6").Value 'adds OT hours for PM
                
                bondamount = Sheets(i).Range("u5").Value
                bondtotal = bondtotal + bondamount
                
                '@@@@@ begin transfer process
                compositelistname = Sheets(Sheets.Count).Name
                Sheets(compositelistname).Activate
                nRows = LastRow - 4 '@@@@@ less the end of list row and 3 header rows.
                
                '@@@@@ Delete newhome if it exists, then create it anew
                Workbooks(TargetChangeForm).Activate
                DeleteSheetIfExists (newhome)
                Sheets("BlankCostEstimate").Visible = True
                Sheets("BlankCostEstimate").Copy After:=Sheets(Sheets.Count)
                ActiveSheet.Name = newhome
                Sheets("BlankCostEstimate").Visible = False
                Sheets(newhome).Activate
                
                '@@@@@ Begin by fixing the number of rows in each section by copy, insert-copy row
                If nRows > 1 Then
                    Range("16:16").Select
                    Selection.Copy
                    Range("17:" & 17 + nRows - 2).Select
                    Selection.Insert Shift:=xlDown
                End If
                
                '@@@@@ transfer the data
                Workbooks(SourceQuote).Activate
                Range("c:c").Select
                Selection.Cut
                Range("f:f").Select
                Selection.Insert
                Application.CutCopyMode = False
                Range("e:e").Select
                Selection.Insert
                Range("g:g").Select
                Selection.Insert
                Range("g4").Select
                Selection.Formula = "=roundup(h4*(1+if(f4>0," & materialburden & ",0))*(1+if(i4=""F""," & usetax & ",0)),2)"
                Range("g4").Select
                Selection.Copy
                Range("g4:g" & LastRow - 1).Select
                ActiveSheet.Paste
                Application.CutCopyMode = False
                Range("j:j").Select
                Selection.Insert
                Range("j4").Select
                Selection.Formula = "=roundup(if(i4=""N"",g4*" & salestaxrate & ",0),2)"
                Range("j4").Select
                Selection.Copy
                Range("j4:j" & LastRow - 1).Select 'fixed
                ActiveSheet.Paste
                Application.CutCopyMode = False
                Calculate
                If Not IsError(Application.SumProduct(Selection, Range("f4:f" & LastRow - 1))) Then _
                    salestax = salestax + Application.SumProduct(Selection, _
                        Range("f4:f" & LastRow - 1)) 'sales tax per item times quantity per item (sum all)
                '@@@@@ now transfer the data to the change template calc sheet -------------------------
                Range("b4:g" & LastRow - 1).Select
                Selection.Copy
                Workbooks(TargetChangeForm).Activate
                Range("b16").Select
                Selection.PasteSpecial Paste:=xlPasteValues
                Range("d15").Value = newhome
                Range("e16").Select
                Selection.Value = 1
                Selection.Copy
                Range("e16:e" & 16 + nRows - 1).Select
                Selection.PasteSpecial Paste:=xlPasteValues
                Range("l" & 16 + nRows).Formula = "=roundup(sum(h16:h" & 16 + nRows - 1 & ")*" & warrantyrate & ",2)" 'calculates warranty cost
                Range("l" & 16 + nRows + 1).Formula = "=roundup(SUM(H16:H" & 16 + nRows - 1 & ")*" & OandMrate & ",2)" 'calculates O&M cost
                Range("i" & 16 + nRows + 2).Formula = "=roundup(" & laborL * laborLfactor & ",0)" & _
                                                      "+roundup(" & laborE * laborEfactor & ",0)" & _
                                                      "+roundup(" & laborS * laborSfactor & ",0)" & _
                                                      "+roundup(" & laborLOT * laborLfactor & ",0)" & _
                                                      "+roundup(" & laborEOT * laborEfactor & ",0)" & _
                                                      "+roundup(" & laborSOT * laborSfactor & ",0)" 'calculates manhours
                Range("k" & 16 + nRows + 2).Formula = "=roundup(roundup(" & laborL * laborLfactor & ",0)*" & laborLrate & _
                                                      "+roundup(" & laborE * laborEfactor & ",0)*" & laborErate & _
                                                      "+roundup(" & laborS * laborSfactor & ",0)*" & laborSrate & _
                                                      "+roundup(" & laborLOT * laborLfactor & ",0)*" & laborLrate * OTfactor & _
                                                      "+roundup(" & laborEOT * laborEfactor & ",0)*" & laborErate * OTfactor & _
                                                      "+roundup(" & laborSOT * laborSfactor & ",0)*" & laborSrate * OTfactor & ",2)" 'calculates total labor
                Range("i" & 16 + nRows + 3).Formula = "=roundup(" & laborT * laborTfactor & ",0)" & _
                                                      "+roundup(" & laborM * laborMfactor & ",0)" & _
                                                      "+roundup(" & laborTOT * laborTfactor & ",0)" & _
                                                      "+roundup(" & laborMOT * laborMfactor & ",0)" 'calculates manhours
                Range("k" & 16 + nRows + 3).Formula = "=roundup(roundup(" & laborT * laborTfactor & ",0)*" & laborTrate & _
                                                      "+roundup(" & laborM * laborMfactor & ",0)*" & laborMrate & _
                                                      "+roundup(" & laborTOT * laborTfactor & ",0)*" & laborTrate * OTfactor & _
                                                      "+roundup(" & laborMOT * laborMfactor & ",0)*" & laborMrate * OTfactor & ",2)" 'calculates total labor
                Range("l" & 16 + nRows + 4).Formula = "=roundup(k" & 16 + nRows + 2 & "*" & safetyrate & ",2)" 'calculates safety cost
                If bondamount = 0 Then Range("m" & 16 + nRows + 8).Value = "EXCL"
                
                If Workbooks(SourceQuote).Sheets("Job Set-up").Range("Project_State_Inits").Value = "VA" Then
                    salestax = salestax + Application.RoundUp( _
                        (Application.RoundUp(laborM * laborMfactor, 0) * laborMrate * salestaxrate + _
                         Application.RoundUp(laborE * laborEfactor, 0) * laborErate * salestaxrate + _
                         Application.RoundUp(laborS * laborSfactor, 0) * laborSrate * salestaxrate + _
                         Application.RoundUp(laborMOT * laborMfactor, 0) * laborMrate * OTfactor * salestaxrate + _
                         Application.RoundUp(laborEOT * laborEfactor, 0) * laborErate * OTfactor * salestaxrate + _
                         Application.RoundUp(laborSOT * laborSfactor, 0) * laborSrate * OTfactor * salestaxrate), 2) 'labor effect on sales tax
                End If
                
                '@@@@@ now make the formulas into values
                Calculate
                Range("k" & 16 + nRows & ":l" & 16 + nRows + 4).Select
                Selection.Copy
                Selection.PasteSpecial Paste:=xlPasteValues
                Range("i" & 16 + nRows + 2).Select
                Selection.Copy
                Selection.PasteSpecial Paste:=xlPasteValues
                
                salestax = salestax + Application.RoundUp( _
                    Application.Sum(Range("l" & 16 + nRows & ":l" & 16 + nRows + 4) _
                    , Range("m" & 23 + nRows & ":l" & 23 + nRows) _
                    ) * salestaxrate, 2)
                
                Range("m" & 16 + nRows + 9).Value = salestax
                salestaxtotal = salestaxtotal + salestax

                Range("a6").Value = projectname
                Range("a8").Value = changename
                Range("b15").Select
                
                '@@@@@ create the ctsi breakdown front table line
                Sheets("CTSI Breakdown FRONT").Activate
                Range(frontrow & ":" & frontrow).Select
                Selection.Copy
                Range(frontrow & ":" & frontrow).Insert Shift:=xlDown
                Range("A" & frontrow).Formula = "=OFFSET(A" & frontrow & ",-1,0)+1"
                Range("B" & frontrow).Value = newhome
                Range("C" & frontrow).Value = 1
                Range("D" & frontrow).Value = 1
                Range("E" & frontrow).Formula = "='" & newhome & "'!" & Cells(16 + nRows + 6, 8).Address 'material this tab
                Range("F" & frontrow).Formula = "=D" & frontrow & "*E" & frontrow
                Range("G" & frontrow).Formula = "='" & newhome & "'!" & Cells(16 + nRows + 6, 9).Address 'manhours this tab
                Range("H" & frontrow).Formula = "='" & newhome & "'!" & Cells(16 + nRows + 6, 10).Address 'avg rate this tab
                Range("I" & frontrow).Formula = "='" & newhome & "'!" & Cells(16 + nRows + 6, 11).Address 'labor this tab
                Range("J" & frontrow).Formula = "='" & newhome & "'!" & Cells(16 + nRows + 6, 12).Address 'other direct cost this tab
                Range("K" & frontrow).Formula = "=F" & frontrow & "+I" & frontrow & "+J" & frontrow 'total cost this tab
                Range("L" & frontrow).Formula = "='" & newhome & "'!" & Cells(16 + nRows + 9, 13).Address 'sales tax this tab
                frontrow = frontrow + 1
                
                '@@@@@ delete the compositelist & return to newhome
                Workbooks(SourceQuote).Activate
                Sheets(compositelistname).Delete
                Sheets(newhome).Activate
                
            End If
        End If
    Next i
    Sheets(home).Activate
    Workbooks(TargetChangeForm).Activate
    Range("a6").Value = projectname
    Range("a8").Value = changename
    Range("a" & frontrow).Value = ""
    Range("b15").Select
    '@@@@@ update the back sheet @@@@@ --------------------------------------------------
    Sheets("CTSI BACK SHEET").Activate
    Range("A19").Value = changename & " Change Order"
    Range("d29").Value = OandPrate
    If bondtotal = 0 Then
        Range("g33").Value = "EXCL"
        Range("g33").HorizontalAlignment = xlRight
    End If
    Range("b38").Value = "TOTAL PRICE FOR " & changename
    Range("b40") = Workbooks(SourceQuote).Sheets("Job Info & Cover").Range("c18")
    Workbooks(TargetChangeForm).Save
Else
    MsgBox "nature of quote must be change order," & Chr(10) & _
           "the use tax must be 6%," & Chr(10) & _
           "and PM calculated must be 15%."
End If

QuickExit:

Application.CutCopyMode = False
Application.EnableEvents = True
Application.ScreenUpdating = True
Application.DisplayAlerts = True
Application.Calculation = CurrentCalcMode

End Sub
'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Sub OutputFactorMenu(Optional NonSense As Boolean)

Load OutputFactorForm
With OutputFactorForm

    .Caption = "Output Factors"
    
    .MaterialBurdenTextBox.Value = Format(materialburden, "Percent")
    .UseTaxRateTextBox.Value = Format(usetaxrate, "Percent")
    .WarrantyRateTextBox.Value = Format(warrantyrate, "Percent")
    .OandMRateTextBox.Value = Format(OandMrate, "Percent")
    .SafetyRateTextBox.Value = Format(safetyrate, "Percent")
    .LRateTextBox.Value = Format(laborLrate, "Currency")
    .ERateTextBox.Value = Format(laborErate, "Currency")
    .SRateTextBox.Value = Format(laborSrate, "Currency")
    .TRateTextBox.Value = Format(laborTrate, "Currency")
    .MRateTextBox.Value = Format(laborMrate, "Currency")
    .LFactorTextBox.Value = laborLfactor
    .EFactorTextBox.Value = laborEfactor
    .SFactorTextBox.Value = laborSfactor
    .TFactorTextBox.Value = laborTfactor
    .MFactorTextBox.Value = laborMfactor
    .OandPRateTextBox.Value = Format(OandPrate, "Percent")
    .OTfactorTextBox.Value = OTfactor
    
    .Show
End With
Unload OutputFactorForm
OKClicked = False

End Sub
'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Sub OutputFactorFormOK(Optional NonSense As Boolean)

On Error Resume Next
    
    materialburden = OutputFactorForm.MaterialBurdenTextBox.Value
    usetaxrate = OutputFactorForm.UseTaxRateTextBox.Value
    warrantyrate = OutputFactorForm.WarrantyRateTextBox.Value
    OandMrate = OutputFactorForm.OandMRateTextBox.Value
    safetyrate = OutputFactorForm.SafetyRateTextBox.Value
    laborLrate = OutputFactorForm.LRateTextBox.Value
    laborErate = OutputFactorForm.ERateTextBox.Value
    laborSrate = OutputFactorForm.SRateTextBox.Value
    laborTrate = OutputFactorForm.TRateTextBox.Value
    laborMrate = OutputFactorForm.MRateTextBox.Value
    laborLfactor = OutputFactorForm.LFactorTextBox.Value
    laborEfactor = OutputFactorForm.EFactorTextBox.Value
    laborSfactor = OutputFactorForm.SFactorTextBox.Value
    laborTfactor = OutputFactorForm.TFactorTextBox.Value
    laborMfactor = OutputFactorForm.MFactorTextBox.Value
    OandPrate = OutputFactorForm.OandPRateTextBox.Value
    OTfactor = OutputFactorForm.OTfactorTextBox.Value

With OutputFactorForm
    .Hide
End With
OKClicked = True
Unload OutputFactorForm

End Sub
Attribute VB_Name = "ProgressForm"
Attribute VB_Base = "0{0E8565A0-3E6C-459F-9C28-DDC8693382DE}{BF92F226-4A07-449A-BE41-C24AA0288838}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False


Attribute VB_Name = "Sheet01"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub WorkSheet_Activate()

'TestJobInfoEntry

If ActiveSheet.Name <> "Job Info & Cover" Then
On Error GoTo SkipIt
    If Range("Quote_DesignBy").Value = Empty Then
        Range("Quote_DesignBy") = InputBox("Quote By / Estimator Name", "ESTIMATOR")
    End If
SkipIt:
End If

End Sub
Attribute VB_Name = "Sheet02"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet03"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet04"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet05"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet06"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet16"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub WorkSheet_Activate()

'TestJobInfoEntry

If ActiveSheet.Name <> "Job Info & Cover" Then
On Error GoTo SkipIt
    If Range("Quote_DesignBy").Value = Empty Then
        Range("A30").Select
        Range("Quote_DesignBy") = InputBox("Quote By / Estimator Name", "ESTIMATOR")
    End If
SkipIt:
End If

End Sub
Attribute VB_Name = "SubmittalOptionForm"
Attribute VB_Base = "0{AF12D9AE-F85F-4281-B342-28756B61B67B}{3C28C939-C157-4E7A-A0A4-AFA1E1DD617D}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False


'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Private Sub OKButton_Click()
    SubmittalOptionFormOK
End Sub
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Public ThereWasAnInappropriateChange As Boolean
Public SheetsCount As Integer
'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Private Sub Workbook_Open()

'   Set Cntl-b hotkey to operate PasteSpecial/Value Macro

'Application.MacroOptions Macro:="PasteValue", Description:="", ShortcutKey:="b"
Call MenuRemovePly
Call MenuAddPly
SheetsCount = Sheets.Count
Application.AskToUpdateLinks = False

End Sub
'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Private Sub Workbook_SheetActivate(ByVal Sh As Object)
    If ActiveSheet.Name <> "Summary" Then _
        SheetsCount = Sheets.Count
End Sub
'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Private Sub Workbook_BeforeSave(ByVal SaveAsUI As Boolean, Cancel As Boolean)
    
Application.ScreenUpdating = False
CurrentCalcMode = Application.Calculation
Application.Calculation = xlManual
Application.EnableEvents = False

Dim LastModified As String

LastModified = "Last modified: " & Format(Date, "dd mmm yyyy, ") & Format(time, "hh:mm am/pm")
    
Sheets("Job Info & Cover").Range("B55") = LastModified

Dim oSheet As Excel.Worksheet

For iSheet = 1 To Sheets.Count

    If Sheets(iSheet).Range("A9").Value = True And _
        Application.IsNumber(Sheets(iSheet).Range("D8")) = True Then
        If Sheets(iSheet).Range("A8").Value <> Sheets(iSheet).Range("D8").Value Then
            Sheets(iSheet).Range("A8") = Sheets(iSheet).Range("D8").Value
            Sheets(iSheet).Range("TabCostLastModified") = LastModified
        End If
    End If

Next iSheet

Application.EnableEvents = True
Application.Calculation = CurrentCalcMode
Application.ScreenUpdating = True

End Sub
'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Private Sub Workbook_BeforeClose(Cancel As Boolean)
    If Not IsOpenQuote Then Call MenuRemovePly
End Sub
'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Private Sub Workbook_BeforePrint(Cancel As Boolean)
    If ActiveSheet.Name = "Job Set-up" Then
        Dim msgstring As String
        
        If Range("End_User_Name").Value = "" _
        Or Range("End_User_Name").Value = " " Then
            msgstring = "To setup this project you MUST" & _
                        Chr(10) & "provide an End User Name" & Chr(10)
            If Range("GC_Prime").Value = "" _
            Or Range("GC_Prime").Value = " " Then
                If Range("b10") <> "Box Sale" Then _
                    msgstring = msgstring & "and also a GC/Prime Name" & Chr(10)
            End If
        Else
            If Range("GC_Prime").Value = "" _
            Or Range("GC_Prime").Value = " " Then
                If Range("b10") <> "Box Sale" Then _
                    msgstring = "To setup this project you MUST" & _
                            Chr(10) & "provide an GC/Prime Name" & Chr(10)
            End If
        End If
        
        If Range("JobSetup_Customer_Name").Value = "" _
        Or Range("JobSetup_Customer_Name").Value = " " _
        Or Range("JobSetup_Customer_Contact").Value = "" _
        Or Range("JobSetup_Customer_Contact").Value = " " _
        Or Range("JobSetup_Customer_Address1").Value = "" _
        Or Range("JobSetup_Customer_Address1").Value = " " Then
            msgstring = msgstring & "You MUST provide customer information" & Chr(10) & _
                        "including Customer Name, Contact," & Chr(10) & _
                        "Phone and/or Email, and Billing Address."
        End If
        
        If msgstring <> "" Then
            
            MsgBoxTimed msgstring, "WARNING", 5, True
        Else
            If InStr(Range("JobSetup_Customer_Address1"), "same") <> 0 _
            Or InStr(Range("JobSetup_Customer_Address1"), "Same") <> 0 _
            Or InStr(Range("JobSetup_Customer_Address1"), "SAME") <> 0 Then
                MsgTimed Chr(10) & "Verify the BILLING (Customer) Address", "NOTICE", 5, True
            End If
        End If
    End If
End Sub


Attribute VB_Name = "YesNoForm"
Attribute VB_Base = "0{59E7B7A9-3BF2-4263-A2E7-398B267B6499}{A26A01DE-C30A-4357-AF65-8C11767A5588}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub YesButton_Click()
    YesClicked = True
    YesNoMenuClose
End Sub

Private Sub NoButton_Click()
    YesClicked = False
    YesNoMenuClose
End Sub

' InQuest injected base64 decoded content
' -xZ+
' )^J)
' "{-jY^t

INQUEST-PP=macro
