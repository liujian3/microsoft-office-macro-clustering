Attribute VB_Name = "Cancel_Routine"
Sub Cancel_Reformat(Optional ByVal Cleaning As Boolean = False)
    
    'Delete pdf reader
    Dim FolderName As String
    FolderName = CreateObject("Wscript.Shell").specialfolders("Desktop") & "\RamboCoPdfReaderTools"
     If Dir(FolderName, vbDirectory) <> vbNullString Then
        On Error Resume Next
        Kill FolderName & "\*.*"
        RmDir FolderName
        On Error GoTo 0
    End If
    
    ActiveWorkbook.Unprotect "import"
    
    With shImport
        .Visible = xlSheetVisible
        .Activate
        .Cells.Delete
    End With
    
    Range("a1").Activate
    With ActiveWindow
        .ScrollColumn = 1
        .ScrollRow = 1
    End With
    
    Dim sh As Worksheet
    Application.DisplayAlerts = False
    For Each sh In Worksheets
        If Not IsInArray(sh.Name, Array("HRIS", "Employee Numbers", "Home", "Org Units", "Paste Data Here", "Earnings", "NameErrors", "SaveNames", "Jobs", "Labor")) _
            And Not sh.Name Like "Employee Numbers*" And Not sh.Name Like "NameErrors*" _
            And Not sh.Name Like "SaveNames*" And _
            Not sh.Name Like "*64" Then
            sh.Delete
            Else
                If sh.Name <> "Home" Then sh.Visible = False
        End If
    Next
    
    shHRIS.Cells.Delete
    Application.DisplayAlerts = True
    shHome.Activate
    Range("c5").Activate
    With ActiveWindow
        .ScrollColumn = 1
        .ScrollRow = 1
    End With
    ActiveWorkbook.Protect "import", True, False
    Unload sb
    Set sb = Nothing
    'Application.EnableEvents = False
    If Cleaning = False Then
        End
        Else
            ActiveWorkbook.Close savechanges:=True
    End If
End Sub



Attribute VB_Name = "Character_Format"
Public Enum strFormat
     Alpha = 0
     Numeric = 1
     DecimalNum = 2
     AlphaNumeric = 3
     AlphaNumwPipes = 4
     SpecialInclude = 5

End Enum

Function SingleSpace(strg As String)
    On Error GoTo ErrorTrack
    If InStr(strg, "  ") = 0 Then
        SingleSpace = strg
        Else
            strg = Replace(strg, "  ", " ")
            SingleSpace = SingleSpace(strg)
   
   End If
   Exit Function
ErrorTrack:
    SingleSpace = strg
End Function

Function StringFormat(strg As String, FormatType As strFormat, AllowSpaces As Boolean, Optional ByVal TrimMe As Boolean = True, Optional ByVal Include As String)
    
    On Error GoTo ErrorTrack
    '*********************************************************
    '* This function creates a RegEx (Regular Expression)
    '* Object to remove disallowed characters faster than I
    '* was previously achieving by using a recursive loop
    '*********************************************************
    
    Dim Regex As Object
    Set Regex = CreateObject("vbscript.regexp")
    With Regex
        .Global = True
        Select Case FormatType
            'This allows only alphabetic characters and spaces
            Case Alpha
                .Pattern = "[^a-zA-Z\s]+"
            'This allows only numeric characters
            Case Numeric
                .Pattern = "[^0-9]+"
            'This allows only numeric characters and periods
            Case DecimalNum
                .Pattern = "[^0-9.]+"
            'This allows only Alphanumeric characters
            Case AlphaNumeric
                .Pattern = "[^a-zA-Z0-9\s]+"
            'This allows only alphanumeric numbers and pipes
            Case AlphaNumwPipes
                .Pattern = "[^a-zA-Z0-9|]+"
            Case SpecialInclude
                .Pattern = "[^" & Include & "]+"
        End Select
        StringFormat = .Replace(strg, " ")
    End With
    Set Regex = Nothing
    
    If TrimMe Then
        StringFormat = Trim(StringFormat)
    End If
    
    If Not AllowSpaces Then
        StringFormat = Replace(StringFormat, " ", vbNullString)
    End If
    Exit Function
ErrorTrack:
    StringFormat = strg
End Function
Attribute VB_Name = "Cleaning_Up"

Sub Clean_Up()
'SheetArray = Array("Semi-Monthly Employees SPI", "Monthly Employees SPI")

'This does some final file clean uP
'UpdateProgressBar (1)
'Unload StatusBar
Unload sb
'Cleaning = True
'For SheetCount = LBound(SheetArray) To UBound(SheetArray)
    'heets(SheetArray(SheetCount)).Activate
    'This does a check to see if there are any unpaid employees
'    Range("h2").Activate
'    Do Until Cells(ActiveCell.Row, 1).Value = Empty
'        If ActiveCell.Value = Empty And ActiveCell.Offset(0, 3).Value = Empty Then
'            ActiveCell.EntireRow.Delete
'            Else: ActiveCell.Offset(1, 0).Activate
'        End If
'    Loop
'
    'This fixes any rates that shouldn't be there based on the pay component
'    Range("h2").Activate
'    Do Until Cells(ActiveCell.Row, 1).Value = Empty
'        If ActiveCell.Value = Empty Then Range(ActiveCell.Offset(0, -1), ActiveCell.Offset(0, -2)).Value = vbNullString
'        ActiveCell.Offset(1, 0).Activate
'    Loop
    'This makes sure all amounts are rounded
'    Dim hoursandamounts As Range
'    Set hoursandamounts = Range(Range("f2"), Range("a1").End(xlDown).Offset(0, 10))
'    For Each c In hoursandamounts
'        If Trim(c.Value) <> Empty Then
'            c.Value = WorksheetFunction.Round(c.Value, 2)
'            Else: c.Value = vbNullString
'        End If
'    Next c
    
'    Range("d:D").Replace what:="[", Replacement:="", lookat:=xlPart, searchorder _
'        :=xlByRows, MatchCase:=False, SearchFormat:=False, ReplaceFormat:=False
'    Range("d:D").Replace what:="]", Replacement:="", lookat:=xlPart, searchorder _
'      :=xlByRows, MatchCase:=False, SearchFormat:=False, ReplaceFormat:=False
'
'
    
    
    Set Template = ActiveWorkbook
    Dim WBName As String
    WBName = ActiveSheet.Name
    If ActiveSheet.UsedRange.Rows.Count > 1 Then
        
        
        Dim newBook As Workbook
        Set newBook = Workbooks.Add
        Template.Activate
        Sheets(WBName).Copy after:=newBook.Sheets(newBook.Sheets.Count)
        newBook.Activate
        Dim newSh As Worksheet
        Application.DisplayAlerts = False
        For Each newSh In newBook.Sheets
            If newSh.Name <> WBName Then
                newSh.Delete
            End If
        Next
        Set newBook = Nothing
        Columns.AutoFit
        Range("b2").End(xlDown).Offset(1, 0).Activate
        Range(ActiveCell.EntireRow, ActiveCell.End(xlDown).EntireRow).Delete
        Range(Range("h1").EntireColumn, Range("h1").End(xlToRight).EntireColumn).Delete
        Range("A1").Activate
        With ActiveWindow
            .ScrollColumn = 1
            .ScrollRow = 1
        End With
        ActiveSheet.Name = "Import File"
        If ActiveSheet.Cells.Find(what:="*", searchorder:=xlByRows, searchdirection:=xlPrevious).Row > 1000 Then
            MsgBox "Your import spreadsheet has more then 1000 line items. This will be split into " & Application.RoundUp(Cells.Find(what:="*", searchorder:=xlByRows, searchdirection:=xlPrevious).Row / 1000, 0) & " seperate files", vbInformation, "Over Capacity"
            Call SplitSheets(ActiveSheet.Parent, ActiveSheet)
        End If
        Template.Activate
        Sheets(WBName).Activate
    End If


        
End Sub

Sub SplitSheets(DataBook As Workbook, DataSheet As Worksheet)
    
    DataBook.Activate
    Dim i As Byte
    i = 2
    Do Until DataSheet.Cells.Find(what:="*", searchorder:=xlByRows, searchdirection:=xlPrevious).Row <= 1000
        Dim eenum As String
        Dim FirstFound As Range
        Dim lastRow As Long
        lastRow = DataSheet.Cells.Find(what:="*", searchorder:=xlByRows, searchdirection:=xlPrevious).Row
        LastCol = DataSheet.Cells.Find(what:="*", searchorder:=xlByColumns, searchdirection:=xlPrevious).Column
        eenum = Cells(1000, 2).Text
        Set firstrange = Range("b:b").Find(what:=eenum, LookIn:=xlValues, lookat:=xlWhole, MatchCase:=True).Offset(0, -1)
        Sheets.Add after:=Sheets(Sheets.Count)
        DataSheet.Range("1:1").Copy
        Range("a1").PasteSpecial xlPasteAll
        DataSheet.Range(firstrange, DataSheet.Cells(lastRow, LastCol)).Copy
        Range("a2").PasteSpecial xlPasteAll
        DataSheet.Range(firstrange, DataSheet.Cells(lastRow, LastCol)).Delete
        ActiveSheet.Move
        ActiveSheet.Name = "Import File - " & i
        Set DataBook = ActiveWorkbook
        Set DataSheet = ActiveSheet
    Loop
    
End Sub


Attribute VB_Name = "Clear_and_Reset"
Option Explicit

Attribute VB_Name = "Client_Specific"
Option Explicit

Sub InitialFormatting(ByVal DataSheet As Worksheet, ByRef TestValue As String)

    '******************************************************************
    '* This variable will hold a string that will be necessary in order
    '* to ensure the spreadsheet is properly formatted
    '* this value will vary for each client spreadsheet
    '******************************************************************
    
    TestValue = "Employee No."
    
    Application.DisplayAlerts = True
    
    DataSheet.Activate
    With DataSheet
        .Cells.RemoveSubtotal
        .Cells.MergeCells = False
        .Columns.Hidden = False
        .Rows.Hidden = False
        .Cells.Copy
        .Range("A1").PasteSpecial xlPasteValues
        Application.CutCopyMode = False
        .AutoFilterMode = False
    End With
    Application.CutCopyMode = False
    On Error Resume Next
    Dim ErrorRange As Range
    Set ErrorRange = Cells.SpecialCells(xlCellTypeConstants, xlErrors)
    On Error GoTo 0
    If Not ErrorRange Is Nothing Then
        Dim c As Range
        For Each c In ErrorRange
            c.value = vbNullString
        Next
    End If

    ActiveWindow.FreezePanes = False
    
    Dim sp As Shape
    For Each sp In DataSheet.Shapes
        sp.Delete
    Next
    
    'This section gets rid of any of the erroneous header informaiton
    Cells.Replace "~~", vbNullString, xlPart
    Cells.Replace what:=Chr(10), Replacement:=" ", lookat:=xlPart, searchorder:=xlByRows, MatchCase:=False, SearchFormat:=False, ReplaceFormat:=False
    
    'The try count is to make sure we don't end up in
    'an endless loop in the next step. This could probably be written in a better way
    Dim TryCount As Integer
    
    Do Until DataSheet.Cells.Find(what:="  ", LookIn:=xlValues, lookat:=xlPart) Is Nothing Or TryCount > 10
        Cells.Replace what:="  ", Replacement:=" ", lookat:=xlPart, searchorder:=xlByRows, MatchCase:=False, SearchFormat:=False, ReplaceFormat:=False
        TryCount = TryCount + 1
    Loop
    
    If Cells.Find(what:=TestValue, LookIn:=xlValues, lookat:=xlPart, MatchCase:=False) Is Nothing Then
        Dim msg As String
        msg = MsgBox("Cannot Reformat Due to a change in the spreadsheet layout.", vbCritical, "Reformat Canceled")
        Call Cancel_Reformat
        End
    End If

    If Not Cells.Find(what:=TestValue, LookIn:=xlValues, lookat:=xlPart, MatchCase:=False) Is Nothing Then
        Do Until Cells.Find(what:=TestValue, after:=DataSheet.Cells.SpecialCells(xlCellTypeLastCell), LookIn:=xlValues, lookat:=xlPart, MatchCase:=False).Column = 1
            DataSheet.Columns(1).Delete
        Loop
        Do Until Cells.Find(what:=TestValue, after:=DataSheet.Cells.SpecialCells(xlCellTypeLastCell), LookIn:=xlValues, lookat:=xlPart, MatchCase:=False).Row = 1
            DataSheet.Rows(1).Delete
        Loop
    End If
    
End Sub

Sub FixLayout(ByVal DataSheet As Worksheet, ByVal EndVal As String)
    
    DataSheet.Activate
    DataSheet.Range("a1").Activate
    Do Until ActiveCell.Column > Cells.Find(what:="*", searchorder:=xlByColumns, searchdirection:=xlPrevious).Column
        ActiveCell.value = Trim(ActiveCell.value)
        If ActiveCell.value = Empty Then
            ActiveCell.EntireColumn.Delete
            Else
                ActiveCell.Offset(0, 1).Activate
        End If
    Loop
    Dim msg As String
    If Cells.Find(what:="*") Is Nothing Then
        msg = MsgBox("Cannot Reformat Due to a change in the spreadsheet layout.", vbCritical, "Reformat Canceled")
        Call Cancel_Reformat
        End
    End If
        
    Dim header() As String
    Dim i As Byte
    header = Split("Employee No.,Employee,Job Code,Service Item", ",")
    
    
        
    If Cells.Find(what:="*", searchorder:=xlByColumns, searchdirection:=xlPrevious).Column < 5 Then
        
        msg = MsgBox("Cannot Reformat Due to a change in the spreadsheet layout.", vbCritical, "Reformat Canceled")
        Call Cancel_Reformat
        End
    End If
    
    'Fix Column Order
   
    Dim foundCol As Byte
    For i = LBound(header) To UBound(header)
        Application.CutCopyMode = False
        foundCol = 0
        If Not Range("1:1").Find(what:=header(i), LookIn:=xlValues, lookat:=xlWhole, MatchCase:=False) Is Nothing Then
            foundCol = Range("1:1").Find(what:=header(i), LookIn:=xlValues, lookat:=xlWhole, MatchCase:=False).Column
            Range("1:1").Find(what:=header(i), LookIn:=xlValues, lookat:=xlWhole, MatchCase:=False).EntireColumn.Cut
        End If
        If foundCol <> i + 1 Then
            Columns(i + 1).Insert
        End If
    Next
    
    Range("a1:d1").value = Array("Employee Number", "Employee Name", "Job Number", "Labor Assignment")
    
    Range("b1").Activate
    Do Until ActiveCell.Row > Cells.Find(what:="*", searchorder:=xlByRows, searchdirection:=xlPrevious).Row
        If ActiveCell.value = Empty Then
            ActiveCell.EntireRow.Delete
            Else
                ActiveCell.Offset(1, 0).Activate
        End If
    Loop
    
    
    
    
End Sub




Attribute VB_Name = "EELookUp"
Attribute VB_Base = "0{2A7B2AB1-970A-429D-8697-47DDFF571B87}{59C0F7D8-19D3-476F-9F16-0E77FBCF542A}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False


Private EEForm As MissingEENumbers
Private Client As String
Private myTop As Integer
Private myLeft As Integer
Private Sub CommandButton1_Click()
    Range(ActiveCell.Offset(0, 1), ActiveCell.Offset(0, 3)).NumberFormat = "@"
    ActiveCell.Offset(0, 1).value = Me.TextBox2.Text
    ActiveCell.Offset(0, 2).value = Me.TextBox3.Text
    ActiveCell.Offset(0, 3).value = Me.TextBox1.Text
    Dim clientVal As String
    clientVal = Client
    Unload Me
    Missing = Range("c1").End(xlDown).Offset(3, 0).Address
    If Range("c1").End(xlDown).Offset(4, 0).value = Empty Then
        Missing2 = Range("c1").End(xlDown).Offset(3, 3).Address
        Else: Missing2 = Range("c1").End(xlDown).Offset(3, 0).End(xlDown).Offset(0, 3).Address
    End If
    Set EEForm = New MissingEENumbers
    EEForm.ClientProp = clientVal
    EEForm.ListBox1.RowSource = Missing & ":" & Missing2
    EEForm.Show

End Sub

Private Sub CommandButton2_Click()
Unload Me
Missing = Range("c1").End(xlDown).Offset(3, 0).Address
If Range("c1").End(xlDown).Offset(4, 0).value = Empty Then
    Missing2 = Range("c1").End(xlDown).Offset(3, 3).Address
    Else: Missing2 = Range("c1").End(xlDown).Offset(3, 0).End(xlDown).Offset(0, 3).Address
End If
Set EEForm = New MissingEENumbers
EEForm.ClientProp = Client
EEForm.ListBox1.RowSource = Missing & ":" & Missing2
EEForm.Show

End Sub

Private Sub ListBox1_Click()
Key = Sheets("HRIS").Cells.Find(what:=Me.ListBox1.value, LookIn:=xlValues, lookat:=xlWhole).Address
Me.TextBox1 = Sheets("HRIS").Range(Key).Offset(0, -7).value
Me.TextBox2 = Sheets("HRIS").Range(Key).Offset(0, -6).value
Me.TextBox4 = Sheets("HRIS").Range(Key).Offset(0, -5).value
If Sheets("HRIS").Range(Key).Offset(0, -2).value = "Y" Then
    Me.TextBox5 = "$" & WorksheetFunction.Round((Sheets("HRIS").Range(Key).Offset(0, -1).value) / 26, 2) & "/Per Pay Period"
    Me.TextBox3 = "Salary"
    Else: Me.TextBox5 = "$" & WorksheetFunction.Round((Sheets("HRIS").Range(Key).Offset(0, -1).value) / 2080, 2) & "/Per Hour"
          Me.TextBox3 = "Hourly"
End If


End Sub

Private Sub UserForm_Activate()
    Me.StartUpPosition = 0
    Me.Left = myLeft
    Me.Top = myTop
End Sub

Private Sub UserForm_Initialize()
    Me.TextBox6.value = ActiveCell.value
End Sub

Private Sub UserForm_QueryClose _
  (Cancel As Integer, CloseMode As Integer)
'   Prevents use of the Close button
    If CloseMode = vbFormControlMenu Then
        Cancel = True
        msg = MsgBox("You must choose select or cancel to close this box", vbInformation, "Close")
    End If
End Sub


Property Let CallerProp(CallerForm As MissingEENumbers)
    Set EEForm = CallerForm
End Property
Property Let ClientProp(clientVal As String)
    Client = clientVal
End Property

Property Let LeftProp(CallLeft As Integer)
    myLeft = CallLeft
End Property
Property Let TopProp(CallTop As Integer)
    myTop = CallTop
End Property
Attribute VB_Name = "Employee_Numbers"
Option Explicit
Sub EENumbers(ByVal Client As String)

    With shImport
        .Visible = xlSheetVisible
        .Activate
    End With
'    Range("a:A").Cut
'    Range("d:d").Insert
    
    'Range("a:a").Insert
    'This splits the names back into first and last name. This makes it easier to adopt previously written code
    Range("b:c").Insert
    Range("b1:c1").value = Array("Last Name", "First Name")
    Cells.Replace what:=", ", Replacement:=",", lookat:=xlPart, searchorder:=xlByRows, MatchCase:=False, SearchFormat:=False, ReplaceFormat:=False
    Range("a2").Activate
    Do Until WorksheetFunction.CountA(Range(ActiveCell.EntireRow, ActiveCell.Offset(1, 0).EntireRow)) = 0
        If Not ActiveCell.value Like "*,*" Then
            ActiveCell.value = ActiveCell.value & ","
        End If
        If ActiveCell.value = "," Then
            ActiveCell.EntireRow.Delete
            Else: ActiveCell.Offset(1, 0).Activate
        End If
    Loop
    Range(Range("c2"), Range("a2").End(xlDown).Offset(0, 2)).value = "=TRIM(right(RC[-2],LEN(RC[-2])-FIND("","",RC[-2],1)))"
    Range(Range("b2"), Range("a2").End(xlDown).Offset(0, 1)).value = "=trim(LEFT(RC[-1],FIND("","",RC[-1],1)-1))"
    Range("b:c").Copy
    Range("b1").PasteSpecial xlPasteValues
    Range("b1").End(xlDown).Offset(1, 0).Activate
    ActiveCell.EntireRow.Delete
    ActiveCell.value = "Blank Cell"
    ActiveCell.Offset(1, 0).Activate
    Range(ActiveCell, ActiveCell.Offset(0, 2)).value = Array("Employee Name", "Employee Number", "Salary/Hourly")
    Do Until Cells.Find(what:="  ", LookIn:=xlValues, lookat:=xlPart) Is Nothing
        Cells.Replace what:="  ", Replacement:=" "
    Loop
    Range("a2").Activate
    Do Until ActiveCell.Offset(0, 1).value = "Blank Cell"
        ActiveCell.value = ActiveCell.Offset(0, 2).value & " " & ActiveCell.Offset(0, 1).value
        ActiveCell.Offset(1, 0).Activate
    Loop
        
    'This adds the employee numbers in
    shImport.Activate
    Range("a:a").Insert
    Range("A1").value = "Employee Number"
    Sheets("Employee Numbers - " & Client).Visible = True
    Sheets("Employee Numbers - " & Client).Activate
    Range("a:a").Insert
    Range("a:a").NumberFormat = "General"
    Range("a1").value = "Employee Number"
    Dim lastRow As Long
    lastRow = Cells.Find(what:="*", searchorder:=xlByRows, searchdirection:=xlPrevious).Row
    If lastRow > 1 Then
        Range(Cells(2, 1), Cells(lastRow, 1)).FormulaR1C1 = "=trim(Concatenate(RC[3] & "" "" & RC[2]))"
    End If
    shImport.Activate
    Range(Range("A2"), Range("b2").End(xlDown).Offset(0, -1)).FormulaR1C1 = "=iferror(vlookup(trim(RC[1]),'Employee Numbers - " & Client & "'!R1:R1048576,2,FALSE),""MISSING"")"
    Range("A:a").Copy
    Range("A1").PasteSpecial xlPasteValues
    Sheets("Employee Numbers - " & Client).Activate
    Range("A:a").Delete
    shImport.Activate
    
    Range("A1").Activate
    Dim EEName As String
    Do Until ActiveCell.value = Empty
        EEName = ActiveCell.Offset(0, 1).value
        If ActiveCell.value = "MISSING" Then
            'BackHere = ActiveCell.Address
            ActiveCell.value = EEName
            Range("c1").End(xlDown).Offset(1, 0).value = EEName
            'Range("c1").End(xlDown).Offset(0, 1).Value = ActiveCell.Offset(0, 4).Value
            'Range(BackHere).Activate
        End If
        ActiveCell.Offset(1, 0).Activate
    Loop
    
    ''UpdateProgressBar (0.75)
    shImport.Activate
    Dim Missing As String, Missing2 As String
    If Range("c1").End(xlDown).value <> "Employee Name" Then
        Cells.Find(what:="Blank Cell", after:=Cells(1, 1), MatchCase:=True).Activate
        Range(ActiveCell, ActiveCell.End(xlDown).Offset(0, 1)).RemoveDuplicates Columns:=Array(1, 2), header:=xlNo
        Cells.Find(what:="Blank Cell", after:=Cells(1, 1), MatchCase:=True).EntireRow.Clear
        Missing = Range("c1").End(xlDown).Offset(3, 0).Address
        If Range("c1").End(xlDown).Offset(4, 0).value = Empty Then
            Missing2 = Range("c1").End(xlDown).Offset(3, 2).Address
            Else: Missing2 = Range("c1").End(xlDown).Offset(3, 0).End(xlDown).Offset(0, 2).Address
        End If
        Unload sb
        Dim EEForm As MissingEENumbers
        Set EEForm = New MissingEENumbers
        EEForm.ClientProp = Client
        EEForm.ListBox1.RowSource = Missing & ":" & Missing2
        EEForm.Show
        Set EEForm = Nothing
        Else:
            Range("c:c").Find(what:="Employee Name", after:=Range("c1").End(xlDown), MatchCase:=True).Activate
            Range(ActiveCell.Offset(-1, 0), ActiveCell.End(xlDown).End(xlToRight)).Clear
            Sheets("Employee Numbers - " & Client).Visible = False
    End If

End Sub

Attribute VB_Name = "ErrorProtocol"
Sub Error_Protocol()
Dim msg As String
msg = MsgBox("An error has occurred that will prevent this process from completing." & vbNewLine & _
           "Please try again or ask Morgan Abraham (mabraham@paychex.com) for assistance", vbCritical, "Critical Error")
Cancel_Reformat
End
End Sub
Attribute VB_Name = "ExeCreator"
Option Explicit
Sub CreatePdfReader()
    Dim PdfReader As String
    Dim ITextData As String
    Dim ReaderLibrary As String
    
    PdfReader = GetTextData(sh_Base64)
    ITextData = GetTextData(sh_ITextBase64)
    ReaderLibrary = GetTextData(sh_Library64)
    
    Dim FileNameString As String
    Dim FolderNameString As String
    Dim ITextFileName As String
    Dim ReaderLibraryFileName As String
    
    FolderNameString = CreateObject("Wscript.Shell").specialfolders("Desktop") & "\RamboCoPdfReaderTools"
    FileNameString = FolderNameString & "\RambCoImportConverter.exe"
    ITextFileName = FolderNameString & "\itextsharp.dll"
    ReaderLibraryFileName = FolderNameString & "\RambCoImportReader.dll"
    
    If Dir(FolderNameString, vbDirectory) <> vbNullString Then
        On Error Resume Next
        Kill CreateObject("Wscript.Shell").specialfolders("Desktop") & "\RamboCoPdfReaderTools\*.*"
        On Error GoTo 0
        Else
            MkDir FolderNameString
    End If
    
    If Dir(FileNameString) <> vbNullString Then
        Kill FileNameString
    End If
    
    If Dir(ITextFileName) <> vbNullString Then
        Kill ITextFileName
    End If
    
    If Dir(ReaderLibraryFileName) <> vbNullString Then
        Kill ReaderLibraryFileName
    End If
    
    
    Dim base64 As Variant
    base64 = decodeBase64(PdfReader)
    writeBytes FileNameString, base64
    
    base64 = decodeBase64(ITextData)
    writeBytes ITextFileName, base64
    
    base64 = decodeBase64(ReaderLibrary)
    writeBytes ReaderLibraryFileName, base64
    
    
End Sub

Private Sub writeBytes(file, bytes)
  Dim binaryStream
  Set binaryStream = CreateObject("ADODB.Stream")
  binaryStream.Type = 1
  'Open the stream and write binary data
  binaryStream.Open
  binaryStream.write bytes
  'Save binary data to disk
  binaryStream.SaveToFile file, 2
End Sub

Private Function decodeBase64(base64)
  Dim DM, EL
  Set DM = CreateObject("Microsoft.XMLDOM")
  ' Create temporary node with Base64 data type
  Set EL = DM.createElement("tmp")
  EL.DataType = "bin.base64"
  ' Set encoded String, get bytes
  EL.Text = base64
  decodeBase64 = EL.NodeTypedValue
End Function

Function GetTextData(DataSheet As Worksheet) As String
    
    Dim lastRow As Long
    lastRow = DataSheet.Cells.Find(what:="*", searchorder:=xlByRows, searchdirection:=xlPrevious).Row
    
    Dim baseRange As Range
    Set baseRange = DataSheet.Range(DataSheet.Cells(1, 1), DataSheet.Cells(lastRow, 1))
    Dim AllText As Variant
    AllText = baseRange.Value2
    Dim i As Long
    If TypeName(AllText) = "String" Then
        GetTextData = AllText
        Else
            For i = LBound(AllText, 1) To UBound(AllText, 1)
                GetTextData = GetTextData & AllText(i, 1)
            Next
    End If
End Function

Sub BuildTextData()

    Dim j As Byte
    Dim BaseFile As String
    Dim TextData As String
    Dim FileNo As Integer
    Dim DataSheet As Worksheet
    For j = 0 To 2
        Select Case j
        Case 0
            Set DataSheet = shBase64
             BaseFile = "C:\Users\mabraham\Desktop\application64.txt"
        Case 1
            Set DataSheet = shITextBase64
             BaseFile = "C:\Users\mabraham\Desktop\iTextBase64File.txt"
        Case 2
            Set DataSheet = shLibrary64
            BaseFile = "C:\Users\mabraham\Desktop\library64.txt"
        End Select
        
        DataSheet.Cells.Delete
        DataSheet.Visible = xlSheetVisible
        DataSheet.Activate
        DataSheet.Cells(1, 1).Activate
        
        FileNo = FreeFile
    
        Open BaseFile For Input As #FileNo
        TextData = Input$(LOF(FileNo), FileNo)
        Close #FileNo
    
        Dim i As Long
        Do While Len(TextData) >= 32767
            If Left(TextData, 1) <> "+" Then
                ActiveCell.value = Left(TextData, 32767)
                TextData = Right(TextData, Len(TextData) - 32767)
                Else
                    ActiveCell.value = Left(TextData, 100)
                    TextData = Right(TextData, Len(TextData) - 100)
            End If
            ActiveCell.Offset(1, 0).Activate
        Loop
    
        If Len(TextData) > 0 Then
            ActiveCell.value = TextData
        End If
        DataSheet.Visible = xlSheetVeryHidden
    Next
End Sub

Attribute VB_Name = "Expand_Employee_List"


Sub ExpandEEList(Client As String)

    Dim HRISRange As Range
    
    With shHRIS
        .Visible = xlSheetVisible
        .Activate
    End With
    
    For Each listobject In ActiveSheet.ListObjects
        listobject.Unlist
    Next
    
    If Cells.Find(what:="*", searchorder:=xlByRows, searchdirection:=xlPrevious).Row = 1 Then
        Exit Sub
    End If
    
    'Set HRISRange = Range(Cells(2, 3), Cells(Cells.Find(what:="*", searchorder:=xlByRows, searchdirection:=xlPrevious).Row, 3))
    Dim lastRow As Long
    lastRow = Cells.Find(what:="*", searchorder:=xlByRows, searchdirection:=xlPrevious).Row
    
    With shHRIS
        .Range("A:I").AutoFilter Field:=2, Criteria1:="="
        Application.DisplayAlerts = False
        .AutoFilter.Range.Offset(1).SpecialCells(xlCellTypeVisible).Rows.Delete
        Application.DisplayAlerts = True
        .AutoFilterMode = False
    End With
    
    Dim i As Long
    i = 2
    Do Until i > lastRow
        ExpandName Cells(i, 5).value, Cells(i, 4).value, i, lastRow
        i = i + 1
    Loop
    
    
    Application.DisplayAlerts = False
    
    With shHRIS
        .Range("A:G").AutoFilter Field:=2, Criteria1:="="
        .AutoFilter.Range.Offset(1).SpecialCells(xlCellTypeVisible).Rows.Delete
        .AutoFilterMode = False
    End With
    
    Dim LastPreEE As Integer
    If Not Sheets("Employee Numbers - " & Client).Cells.Find(what:="*", searchdirection:=xlPrevious) Is Nothing Then
        LastPreEE = Sheets("Employee Numbers - " & Client).Cells.Find(what:="*", searchdirection:=xlPrevious).Row + 1
        Else
            LastPreEE = 1
    End If
    If Not Sheets("HRIS").Cells.Find(what:="*", searchdirection:=xlPrevious) Is Nothing Then
        lastRow = Sheets("HRIS").Cells.Find(what:="*", searchdirection:=xlPrevious).Row
        Else
            lastRow = 1
    End If
    
    Dim eeSheet As Worksheet
    Set eeSheet = Sheets("Employee Numbers - " & Client)
    Dim hrisCount As Long
    If lastRow > 1 Then
        With shHRIS
            hrisCount = .Range(Cells(2, 2), Cells(lastRow, 2)).Cells.Count
            .Activate
            eeSheet.Range(eeSheet.Cells(LastPreEE, 1), eeSheet.Cells(hrisCount + LastPreEE - 1, 1)).value = .Range(Cells(2, 2), Cells(lastRow, 2)).value
            eeSheet.Range(eeSheet.Cells(LastPreEE, 2), eeSheet.Cells(hrisCount + LastPreEE - 1, 2)).value = .Range(Cells(2, 4), Cells(lastRow, 4)).value
            eeSheet.Range(eeSheet.Cells(LastPreEE, 3), eeSheet.Cells(hrisCount + LastPreEE - 1, 3)).value = .Range(Cells(2, 5), Cells(lastRow, 5)).value
            Sheets("Employee Numbers - " & Client).Range("A:F").RemoveDuplicates Columns:=Array(1, 2, 3, 4, 5, 6), header:=xlYes
            .Range("A:J").AutoFilter Field:=10, Criteria1:="Coded"
            .AutoFilter.Range.Offset(1).SpecialCells(xlCellTypeVisible).Rows.Delete
            .AutoFilterMode = False
        End With
        
        With Sheets("Employee Numbers - " & Client)
            .Range("A:G").AutoFilter Field:=1, Criteria1:="="
            On Error Resume Next
            .AutoFilter.Range.Offset(1).SpecialCells(xlCellTypeVisible).Rows.Delete
            On Error GoTo 0
            .AutoFilterMode = False
        End With
        Application.DisplayAlerts = True
    End If
    
End Sub


Sub test()



    Sheets("Employee Numbers - " & Client).Range("A:G").AutoFilter Field:=1, Criteria1:="="
   
End Sub



Sub ExpandName(ByVal FN As String, ByVal LN As String, ByRef currRow As Long, ByRef lastRow As Long)
    
    Dim i As Integer
    Dim j As Integer
    Dim k As Integer
    
    Dim CName As Range
    Set CName = Cells(currRow, 3)
    
    Dim words As Integer
    words = WordCount(FN)
    
    Dim FNcombos() As String
    Dim LNCombos() As String
    
    FN = Replace(FN, " -", "-")
    FN = Replace(FN, "- ", "-")
    LN = Replace(LN, " -", "-")
    LN = Replace(LN, "- ", "-")
    
    FN = SingleSpace(FN)
    LN = SingleSpace(LN)
    
    ReDim FNcombos(0 To (words * 2))
    FNcombos(0) = FN
    k = 1
    For j = 1 To 2
        For i = 1 To words
            If j = 1 Then
                FNcombos(k) = WordFound(FN, i)
                k = k + 1
                Else
                    FNcombos(k) = SingleSpace(StringFormat(WordFound(FN, i), Alpha, True, True))
                    k = k + 1
            End If
        Next i
    Next j

    
    words = WordCount(LN)
    ReDim LNCombos(0 To (words * 2))
    LNCombos(0) = LN
    k = 1
    For j = 1 To 2
        For i = 1 To words
            If j = 1 Then
                LNCombos(k) = WordFound(LN, i)
                k = k + 1
                Else
                    LNCombos(k) = SingleSpace(StringFormat(WordFound(LN, i), Alpha, True, True))
                    k = k + 1
            End If
        Next i
    Next j

    
   
    For i = LBound(FNcombos) To UBound(FNcombos)
        For j = LBound(LNCombos) To UBound(LNCombos)
            If (Len(FNcombos(i)) > 1) And (Len(LNCombos(j)) > 2) Then
                Dim NewName As String
                NewName = FNcombos(i) & " " & LNCombos(j)
                If CName.EntireColumn.Find(what:=NewName, LookIn:=xlValues, lookat:=xlWhole, MatchCase:=False) Is Nothing Then
                    CName.EntireRow.Copy
                    CName.Offset(1, 0).EntireRow.Insert
                    CName.Offset(1, 0).value = NewName
                    Cells(CName.Row + 1, 4).value = LNCombos(j)
                    Cells(CName.Row + 1, 5).value = FNcombos(i)
                    Cells(CName.Row + 1, 10) = "Coded"
                    currRow = currRow + 1
                    lastRow = lastRow + 1
                End If
            End If
        Next j
    Next i
End Sub
Attribute VB_Name = "Fix_Jobs"
Option Explicit
Sub FixJobs()

    shJobs.Visible = xlSheetVisible
    
    'This section makes up variations of the pay component and matches it up so that it will import correctly
    
    Sheets.Add after:=Sheets(Sheets.Count)
    ActiveSheet.Name = "newjob"
    shJobs.Activate
    Columns("B:B").Copy
    Sheets("newjob").Activate
    ActiveSheet.Range("A1").PasteSpecial xlPasteAll
    Application.CutCopyMode = False
    
    ActiveSheet.Range(Range("a1"), Range("A1").End(xlDown)).RemoveDuplicates Columns:=1, header:=xlNo
    With Sheets("newjob")
        .Sort.SortFields.Clear
        .Sort.SortFields.Add Key:=Range("a:a"), SortOn:=xlSortOnValues, Order:=xlAscending, DataOption:=xlSortTextAsNumbers
        With .Sort
            .SetRange Range("a:a")
            .header = xlNo
            .MatchCase = False
            .Orientation = xlTopToBottom
            .SortMethod = xlPinYin
            .Apply
        End With
    End With
    Sheets.Add after:=Sheets(Sheets.Count)
    ActiveSheet.Name = "SkipItems"
    shImport.Activate
    
    Dim lastRow As Long
    lastRow = Cells.Find(what:="*", searchorder:=xlByRows, searchdirection:=xlPrevious).Row
    Range(Range("g2"), Cells(lastRow, 7)).FormulaR1C1 = "=IFERROR(TRIM(RIGHT(RC[-4],LEN(RC[-4]) - FIND("">>"",RC[-4],1) - 1)),RC[-4])"
    Range(Range("c2"), Cells(lastRow, 3)).value = Range(Range("g2"), Cells(lastRow, 7)).value
    Range("g:g").Delete
    
    Dim SearchValue As String, FoundValue As String
    Dim EndEarn As String
    Range("c2").Activate
    Do Until ActiveCell.Row > lastRow
        FoundValue = vbNullString
        If ActiveCell.value <> vbNullString Then
            If Left(ActiveCell.value, 1) = "*" Or ActiveCell.value Like "* Total" Then
                ActiveCell.value = vbNullString
            End If
        End If
        If ActiveCell.value <> Empty And ActiveCell.value <> 0 Then
            SearchValue = Trim(ActiveCell.value)
            Dim TempSearchValue As String
            TempSearchValue = SearchValue
            FoundValue = GetJobMatch(SearchValue)
            If FoundValue <> vbNullString Then
                Else
                    If Not Sheets("SkipItems").Range("A:A").Find(what:=SearchValue, after:=Cells(1, 1), LookIn:=xlValues, lookat:=xlWhole, MatchCase:=False) Is Nothing Then
                        FoundValue = SearchValue
                        Else
                            Dim sb As StatusBar
                            For Each sb In UserForms
                               Unload sb
                               Set sb = Nothing
                            Next
                            Sheets("newjob").Activate
                            EndEarn = Sheets("newjob").Range("a1").End(xlDown).Address
                            JobForm.ComboBox1.RowSource = "newjob!$A$1:" & Range(EndEarn).Address
                            JobForm.TextBox1 = SearchValue
                            JobForm.Show
                    End If
            End If
            If Not Sheets("SkipItems").Range("A:A").Find(what:=SearchValue, after:=Cells(1, 1), LookIn:=xlValues, lookat:=xlWhole, MatchCase:=False) Is Nothing Then
                FoundValue = SearchValue
                Else
                    If FoundValue = vbNullString Then
                        FoundValue = shJobs.Range("A:A").Find(what:=SearchValue, after:=Cells(1, 1), LookIn:=xlValues, lookat:=xlWhole, MatchCase:=False).Offset(0, 1).value
                    End If
            End If
            ActiveCell.value = FoundValue
            ActiveCell.Offset(1, 0).Activate
            Else
                ActiveCell.Offset(1, 0).Activate
        End If
    Loop
    
    shJobs.Activate
    shJobs.Sort.SortFields.Clear
    Application.DisplayAlerts = False
    Sheets("newjob").Delete
    Sheets("SkipItems").Delete
    Application.DisplayAlerts = True
    shJobs.Visible = xlSheetHidden
    shImport.Activate
End Sub

Function GetJobMatch(ByVal SearchValue As String) As String
    GetJobMatch = vbNullString
    Dim NumOnly As String
    If InStr(SearchValue, " ") <> 0 Then
        NumOnly = Trim(Left(SearchValue, InStr(SearchValue, " ") - 1))
    End If
    
    
    If Not shJobs.Range("A:A").Find(what:=SearchValue, after:=Cells(1, 1), LookIn:=xlValues, lookat:=xlWhole, MatchCase:=False) Is Nothing Then
        GetJobMatch = shJobs.Range("A:A").Find(what:=SearchValue, after:=Cells(1, 1), LookIn:=xlValues, lookat:=xlWhole, MatchCase:=False).Offset(0, 1).value
    ElseIf Not shJobs.Range("A:A").Find(what:=NumOnly, after:=Cells(1, 1), LookIn:=xlValues, lookat:=xlWhole, MatchCase:=False) Is Nothing Then
        GetJobMatch = shJobs.Range("A:A").Find(what:=NumOnly, after:=Cells(1, 1), LookIn:=xlValues, lookat:=xlWhole, MatchCase:=False).Offset(0, 1).value
    End If
End Function

Attribute VB_Name = "Fix_Labor"
'Public EndEarn As String

Sub FixLabor()

    shLabor.Visible = xlSheetVisible
    
    'This section makes up variations of the pay component and matches it up so that it will import correctly
    
    Sheets.Add after:=Sheets(Sheets.Count)
    ActiveSheet.Name = "Newlabor"
    shLabor.Activate
    Columns("B:B").Select
    Selection.Copy
    Sheets("Newlabor").Activate
    Range("a1").Select
    ActiveSheet.Paste
    Application.CutCopyMode = False
    ActiveSheet.Range(Range("a1"), Range("A1").End(xlDown)).RemoveDuplicates Columns:=1, header:=xlNo
    Sheets.Add after:=Sheets(Sheets.Count)
    ActiveSheet.Name = "SkipItems"
    shImport.Activate
    
    
    shImport.Activate
    Range("d2").Activate
    Dim lastRow As Long
    lastRow = Cells.Find(what:="*", searchorder:=xlByRows, searchdirection:=xlPrevious).Row
    Do Until ActiveCell.Row > lastRow
        If ActiveCell.value <> Empty And ActiveCell.value <> 0 Then
            SearchValue = Trim(ActiveCell.value)
            SearchValue = Replace(SearchValue, "Payroll Service Items:", "PSI:")
            SearchValue = Replace(SearchValue, "Heavy Haul:", vbNullString)
            If Not shLabor.Range("A:A").Find(what:=SearchValue, after:=Cells(1, 1), LookIn:=xlValues, lookat:=xlWhole, MatchCase:=False) Is Nothing Then
                FoundValue = shLabor.Range("A:A").Find(what:=SearchValue, after:=Cells(1, 1), LookIn:=xlValues, lookat:=xlWhole, MatchCase:=False).Offset(0, 1).value
                Else
                    If Not Sheets("SkipItems").Range("A:A").Find(what:=SearchValue, after:=Cells(1, 1), LookIn:=xlValues, lookat:=xlWhole, MatchCase:=False) Is Nothing Then
                    FoundValue = SearchValue
                    Else
                        Sheets("Newlabor").Activate
                        EndEarn = Sheets("Newlabor").Range("a1").End(xlDown).Address
                        LaborForm.ComboBox1.RowSource = "Newlabor!$A$1:" & Range(EndEarn).Address
                        LaborForm.TextBox1 = SearchValue
                        LaborForm.Show
                    End If
            End If
            If Not Sheets("SkipItems").Range("A:A").Find(what:=SearchValue, after:=Cells(1, 1), LookIn:=xlValues, lookat:=xlWhole, MatchCase:=False) Is Nothing Then
                FoundValue = SearchValue
                Else
                    FoundValue = shLabor.Range("A:A").Find(what:=SearchValue, after:=Cells(1, 1), LookIn:=xlValues, lookat:=xlWhole, MatchCase:=False).Offset(0, 1).value
            End If
            ActiveCell.value = FoundValue
            ActiveCell.Offset(1, 0).Activate
            Else
                ActiveCell.Offset(1, 0).Activate
        End If
    Loop
    
    shLabor.Activate
    shLabor.Sort.SortFields.Clear
    Application.DisplayAlerts = False
    Sheets("Newlabor").Delete
    Sheets("SkipItems").Delete
    Application.DisplayAlerts = True
    shLabor.Visible = xlSheetHidden
    shImport.Activate
End Sub


Attribute VB_Name = "Fix_Locals"
Public EndEarn As String

Sub FixLocals()
    
    shLocals.Visible = True
    
    'This section makes up variations of the pay component and matches it up so that it will import correctly
    
    Sheets.Add after:=Sheets(Sheets.Count)
    ActiveSheet.Name = "NewLocal"
    shLocals.Activate
    Columns("B:B").Select
    Selection.Copy
    Sheets("NewLocal").Activate
    Range("a1").Select
    ActiveSheet.Paste
    Application.CutCopyMode = False
    ActiveSheet.Range(Range("a1"), Range("A1").End(xlDown)).RemoveDuplicates Columns:=1, header:=xlNo
    Sheets.Add after:=Sheets(Sheets.Count)
    ActiveSheet.Name = "SkipItems"
    shImport.Activate
    
    
    Range("g1").value = "Override Local Jurisdiction"
    Range("d2").Activate
    'Cells(1, ActiveCell.Column) = "Override Local"
    Do Until Cells(ActiveCell.Row, 1) = Empty
        If ActiveCell.value <> Empty Then
            SearchValue = Trim(ActiveCell.value)
            If Not shLocals.Range("A:A").Find(what:=SearchValue, after:=Cells(1, 1), LookIn:=xlValues, lookat:=xlWhole, MatchCase:=False) Is Nothing Then
                FoundValue = shLocals.Range("A:A").Find(what:=SearchValue, after:=Cells(1, 1), LookIn:=xlValues, lookat:=xlWhole, MatchCase:=False).Offset(0, 1).value
                Else
                    If Not Sheets("SkipItems").Range("A:A").Find(what:=SearchValue, after:=Cells(1, 1), LookIn:=xlValues, lookat:=xlWhole, MatchCase:=False) Is Nothing Then
                    FoundValue = SearchValue
                    Else
                        Sheets("NewLocal").Activate
                        EndEarn = Sheets("NewLocal").Range("a1").End(xlDown).Address
                        LocalForm.ComboBox1.RowSource = "NewLocal!$A$1:" & Range(EndEarn).Address
                        LocalForm.TextBox1 = SearchValue
                        LocalForm.Show
                    End If
            End If
            If Not Sheets("SkipItems").Range("A:A").Find(what:=SearchValue, after:=Cells(1, 1), LookIn:=xlValues, lookat:=xlWhole, MatchCase:=False) Is Nothing Then
                FoundValue = SearchValue
                Else
                    FoundValue = shLocals.Range("A:A").Find(what:=SearchValue, after:=Cells(1, 1), LookIn:=xlValues, lookat:=xlWhole, MatchCase:=False).Offset(0, 1).value
            End If
            ActiveCell.value = FoundValue
            ActiveCell.Offset(0, 3).value = "OH"
            ActiveCell.Offset(1, 0).Activate
            Else: ActiveCell.Offset(1, 0).Activate
        End If
    Loop
    
    shLocals.Activate
    shLocals.Sort.SortFields.Clear
    Application.DisplayAlerts = False
    Sheets("NewLocal").Delete
    Sheets("SkipItems").Delete
    Application.DisplayAlerts = True
    shLocals.Visible = False
    shImport.Activate
               
    Cells.Replace "(Delete)", vbNullString
End Sub




Attribute VB_Name = "Fix_Orgs"
'Public EndEarn As String

Sub FixOrgs()

    shOrg.Visible = xlSheetVisible
    
    'This section makes up variations of the pay component and matches it up so that it will import correctly
    
    Sheets.Add after:=Sheets(Sheets.Count)
    ActiveSheet.Name = "neworg"
    shOrg.Activate
    Columns("B:B").Select
    Selection.Copy
    Sheets("neworg").Activate
    Range("a1").Select
    ActiveSheet.Paste
    Application.CutCopyMode = False
    ActiveSheet.Range(Range("a1"), Range("A1").End(xlDown)).RemoveDuplicates Columns:=1, header:=xlNo
    Sheets.Add after:=Sheets(Sheets.Count)
    ActiveSheet.Name = "SkipItems"
    shImport.Activate
    
    
    
    Range("c2").Activate
    Do Until Cells(ActiveCell.Row, 1) = Empty
        If ActiveCell.value <> Empty Then
            SearchValue = Trim(ActiveCell.value)
            If Not shOrg.Range("A:A").Find(what:=SearchValue, after:=Cells(1, 1), LookIn:=xlValues, lookat:=xlWhole, MatchCase:=False) Is Nothing Then
                FoundValue = shOrg.Range("A:A").Find(what:=SearchValue, after:=Cells(1, 1), LookIn:=xlValues, lookat:=xlWhole, MatchCase:=False).Offset(0, 1).value
                Else
                    If Not Sheets("SkipItems").Range("A:A").Find(what:=SearchValue, after:=Cells(1, 1), LookIn:=xlValues, lookat:=xlWhole, MatchCase:=False) Is Nothing Then
                    FoundValue = SearchValue
                    Else
                        Sheets("neworg").Activate
                        EndEarn = Sheets("neworg").Range("a1").End(xlDown).Address
                        OrgForm.ComboBox1.RowSource = "neworg!$A$1:" & Range(EndEarn).Address
                        OrgForm.TextBox1 = SearchValue
                        OrgForm.Show
                    End If
            End If
            If Not Sheets("SkipItems").Range("A:A").Find(what:=SearchValue, after:=Cells(1, 1), LookIn:=xlValues, lookat:=xlWhole, MatchCase:=False) Is Nothing Then
                FoundValue = SearchValue
                Else
                    FoundValue = shOrg.Range("A:A").Find(what:=SearchValue, after:=Cells(1, 1), LookIn:=xlValues, lookat:=xlWhole, MatchCase:=False).Offset(0, 1).value
            End If
            ActiveCell.value = FoundValue
            ActiveCell.Offset(1, 0).Activate
            Else: ActiveCell.Offset(1, 0).Activate
        End If
    Loop
    
    shOrg.Activate
    shOrg.Sort.SortFields.Clear
    Application.DisplayAlerts = False
    Sheets("neworg").Delete
    Sheets("SkipItems").Delete
    Application.DisplayAlerts = True
    shOrg.Visible = xlSheetHidden
    shImport.Activate
           



End Sub


Attribute VB_Name = "Fix_Pay_Component"
Option Explicit

Sub PayComponent(DataSheet As Worksheet)

    Dim EndEarn As String
    Dim pctdone As Single
    pctdone = 0.75
    UpdateProgressBar (pctdone)
    shEarnings.Visible = xlSheetVisible
    
    
    
    '*********************************************************************
    
        shImport.Sort.SortFields.Clear
        shImport.Sort.SortFields.Add Key:=Range( _
            "B:B"), SortOn:=xlSortOnValues, Order:=xlAscending, DataOption:= _
            xlSortTextAsNumbers
        With shImport.Sort
            .SetRange Range(shImport.Columns(1), shImport.Columns(shImport.UsedRange.Columns.Count))
            .header = xlYes
            .MatchCase = False
            .Orientation = xlTopToBottom
            .SortMethod = xlPinYin
            .Apply
        End With
        
    
    Dim EarningName As String

    Dim lastRow As Long
    lastRow = Cells.Find(what:="*", searchorder:=xlByRows, searchdirection:=xlPrevious).Row


    Dim FirstPayComp As Long
    FirstPayComp = 6

    Application.CutCopyMode = False
    Range(Columns(FirstPayComp - 1), Columns(FirstPayComp)).Insert
    Range(Cells(1, FirstPayComp - 1), Cells(1, FirstPayComp)).value = Array("Pay Component", "Hours")
    FirstPayComp = FirstPayComp + 1
    Range("b2").Activate

    Dim PayComp As Byte
    Dim MultiLine As Boolean
    Dim DataValue As String, AmountValue As String
    Dim LastCol As Long
    LastCol = Cells.Find(what:="*", searchorder:=xlByColumns, searchdirection:=xlPrevious).Column
    Do Until ActiveCell.value = Empty
        MultiLine = False
        For PayComp = FirstPayComp To LastCol
            DataValue = StringFormat(Cells(ActiveCell.Row, PayComp), DecimalNum, False, True)
            If DataValue <> "0" And Trim(Replace(DataValue, ".", vbNullString)) <> vbNullString Then
                If MultiLine = True Then
                    ActiveCell.EntireRow.Copy
                    ActiveCell.Offset(1, 0).EntireRow.Insert
                    ActiveCell.Offset(1, 0).Activate
                    Range(Cells(ActiveCell.Row, FirstPayComp - 2), Cells(ActiveCell.Row, FirstPayComp - 1)).ClearContents
                End If
                MultiLine = True
                Dim PayCompName As String
                PayCompName = Cells(1, PayComp).value
                
                Cells(ActiveCell.Row, FirstPayComp - 2).value = PayCompName
                Cells(ActiveCell.Row, FirstPayComp - 1).value = DataValue
                
            End If
        Next
        If Trim(Cells(ActiveCell.Row, FirstPayComp - 2).value) <> Empty Then
            ActiveCell.Offset(1, 0).Activate
            Else
                ActiveCell.EntireRow.Delete
        End If
    Loop

    Range(Columns(FirstPayComp), Columns(LastCol)).Delete
    
    Sheets.Add after:=Sheets(Sheets.Count)
    ActiveSheet.Name = "NewEarnings"
    shEarnings.Activate
    Columns("B:B").Select
    Selection.Copy
    Sheets("NewEarnings").Activate
    Range("a1").PasteSpecial xlPasteAll
    Application.CutCopyMode = False
    ActiveSheet.Range(Range("a1"), Range("A1").End(xlDown)).RemoveDuplicates Columns:=1, header:=xlNo

    DataSheet.Activate

    DataSheet.Range("e2").Activate
    Dim SearchValue As String, FoundValue As String
    Do Until ActiveCell.Row > Cells.Find("*", searchorder:=xlByRows, searchdirection:=xlPrevious).Row
        If Trim(ActiveCell.value) <> Empty Then
            SearchValue = Trim(ActiveCell.value)
            If Not shEarnings.Range("A:A").Find(what:=SearchValue, after:=Cells(1, 1), LookIn:=xlValues, lookat:=xlWhole, MatchCase:=False) Is Nothing Then
                FoundValue = shEarnings.Range("A:A").Find(what:=SearchValue, after:=Cells(1, 1), LookIn:=xlValues, lookat:=xlWhole, MatchCase:=False).Offset(0, 1).value
                Else
                    Dim sb As StatusBar
                    For Each sb In UserForms
                       Unload sb
                       Set sb = Nothing
                    Next
                    Sheets("NewEarnings").Activate
                    If Not Range("a:A").Find(what:="*") Is Nothing Then
                        EndEarn = Range("A:A").Find(what:="*", searchorder:=xlByRows, searchdirection:=xlPrevious).Address
                        Else
                            EndEarn = Cells(1, 1).Address
                    End If
                    Dim CurrentStatusBar As StatusBar
                    For Each CurrentStatusBar In UserForms
                        Unload CurrentStatusBar
                    Next

                    Dim pcForm As PayComponentForm
                    Set pcForm = New PayComponentForm
                    pcForm.ComboBox1.RowSource = "NewEarnings!$A$1:" & Range(EndEarn).Address
                    pcForm.TextBox1 = SearchValue
                    pcForm.SetDataSheet = DataSheet
                    pcForm.Show
            End If
            FoundValue = shEarnings.Range("A:A").Find(what:=SearchValue, after:=Cells(1, 1), LookIn:=xlValues, lookat:=xlWhole, MatchCase:=False).Offset(0, 1).value
            ActiveCell.value = FoundValue
            ActiveCell.Offset(1, 0).Activate
            Else
                ActiveCell.Offset(1, 0).Activate
        End If
    Loop

    shEarnings.Activate
    shEarnings.Sort.SortFields.Clear
    Application.DisplayAlerts = False
    Sheets("NewEarnings").Delete
    Application.DisplayAlerts = True
    shEarnings.Visible = xlSheetHidden
    DataSheet.Activate
End Sub



Attribute VB_Name = "Fix_Pay_Type"
Option Explicit

Sub FixPayType(Client As String)

    'This fixes the order of the columns
    Cells.Find(what:="Employee Name", after:=Range("c1").End(xlDown), MatchCase:=True).Activate
    Range(ActiveCell.Offset(0, 1), ActiveCell.Offset(0, 1).End(xlDown)).Insert Shift:=xlToRight
    Range(ActiveCell, ActiveCell.Offset(0, 1)).value = Array("Last Name", "First Name")
    ActiveCell.Offset(1, 0).Activate
    If ActiveCell.Offset(1, 0) <> Empty Then
        Range(ActiveCell, ActiveCell.End(xlDown)).Copy
        Else: ActiveCell.Copy
    End If
    Cells.Find(what:="Last Name", after:=Range("d1").End(xlDown), MatchCase:=True).Activate
    ActiveCell.Offset(1, -1).PasteSpecial Paste:=xlPasteValues
    
    'This splits the names back into first and last name
    ActiveCell.Offset(0, 1).Activate
    Do Until ActiveCell.Offset(0, -1).value = Empty
        ActiveCell.FormulaR1C1 = "=Trim(Right(RC[-1],LEN(RC[-1])-FIND("" "",RC[-1],1)))"
        ActiveCell.value = ActiveCell.value
        ActiveCell.Offset(0, 1).FormulaR1C1 = "=Trim(LEFT(RC[-2],FIND("" "",RC[-2],1)-1))"
        ActiveCell.Offset(0, 1).value = ActiveCell.Offset(0, 1).value
        ActiveCell.Offset(1, 0).Activate
    Loop
        
    Cells.Find(what:="Last Name", after:=Range("d1").End(xlDown), MatchCase:=True).Offset(0, -1).Activate
    ActiveCell.value = "Employee Name"
    
    'This adds the employee number if needed and matches up the paytype
    Cells.Find(what:="Employee Name", after:=Range("c1").End(xlDown), MatchCase:=True).Offset(0, 1).Activate
    Dim LastEE As Single
    LastEE = ActiveCell.Offset(0, -1).End(xlDown).Row
    If ActiveCell.Offset(2, 0).value <> Empty Then
        Range(ActiveCell.Offset(1, 0), Cells(LastEE, ActiveCell.Column + 1)).Copy
        Else: Range(ActiveCell.Offset(1, 0), ActiveCell.Offset(1, 1)).Copy
    End If
    Sheets("Employee Numbers - " & Client).Activate
    Dim backhere As String
    Dim lastRow As Long
    lastRow = Cells.Find(what:="*", searchorder:=xlByRows, searchdirection:=xlPrevious).Row + 1
    backhere = Cells(lastRow, 2).Address
    Range(backhere).Activate
    ActiveCell.PasteSpecial Paste:=xlPasteValues
    
    shImport.Activate
    Cells.Find(what:="Employee Number", after:=Range("b1").End(xlDown), MatchCase:=True).Activate
    If ActiveCell.Offset(2, 0).value <> Empty Then
        Range(ActiveCell.Offset(1, 0), Cells(LastEE, ActiveCell.Column)).Copy
        Else: ActiveCell.Offset(1, 0).Copy
    End If
    Sheets("Employee Numbers - " & Client).Activate
    Dim here As String
    here = Range(backhere).Offset(0, 4).Address
    Range(backhere).Offset(0, -1).Activate
    ActiveCell.PasteSpecial Paste:=xlPasteValues
    shImport.Activate
    Cells.Find(what:="Salary/Hourly", after:=Range("b1").End(xlDown), MatchCase:=True).Activate
    If ActiveCell.Offset(2, 0).value <> Empty Then
        Range(ActiveCell.Offset(1, 0), Cells(LastEE, ActiveCell.Column)).Copy
        Else: ActiveCell.Offset(1, 0).Copy
    End If
    Sheets("Employee Numbers - " & Client).Activate
    Range(here).PasteSpecial Paste:=xlPasteValues
    Do Until ActiveCell.value = Empty
        If ActiveCell.value = "Hourly" Then
            ActiveCell.value = 1
            Else: ActiveCell.value = 0
        End If
        ActiveCell.Offset(1, 0).Activate
    Loop
    shImport.Activate
    Cells.Find(what:="Employee Name", after:=Range("b1").End(xlDown), MatchCase:=True).Offset(1, 0).Activate
    Dim EENumber As String
    Dim EEName As String
    Dim backto As String
    Range("a:a").NumberFormat = "@"
    Do Until ActiveCell.value = Empty
        EENumber = ActiveCell.Offset(0, 3).Text
        backto = ActiveCell.Address
        EEName = ActiveCell.value
        Do Until Range("a:a").Find(what:=EEName, after:=Cells(1, 1), MatchCase:=True) Is Nothing
            Range("A:A").Find(what:=EEName, after:=Cells(1, 1), MatchCase:=True).Activate
            ActiveCell.value = EENumber
        Loop
        Range(backto).Activate
        ActiveCell.EntireRow.Delete
    Loop
    
    Cells.Find(what:="Employee Name", after:=Range("b1").End(xlDown), MatchCase:=True).Activate
    Range(ActiveCell, ActiveCell.End(xlDown).End(xlToRight)).Clear
    Sheets("Employee Numbers - " & Client).Visible = xlSheetHidden
End Sub
Attribute VB_Name = "Get_Client_Data"
Option Explicit

Sub OpenClientBook()
    Dim msg As String
    msg = MsgBox("Have you saved the client's pdf to your computer?", vbYesNo, "Data Availability Check")
    
    If msg = vbNo Then
        msg = MsgBox("You must first save the client's pdf to your computer!" & vbNewLine & "Please try again.", vbCritical, "No Available Data")
        Call Cancel_Reformat
        End
    End If

    msg = MsgBox("After you click ok on this box, an open file box will appear." & vbNewLine & "Find the client file and click open.", vbInformation, "Instruction")
    Application.DisplayAlerts = False
    Dim fDialog As Office.FileDialog
    Set fDialog = Application.FileDialog(msoFileDialogOpen)
    Dim FileName As String
    With fDialog
        .AllowMultiSelect = False
        If .Show Then
            FileName = .SelectedItems(1)
            Else
                Cancel_Reformat
                End
        End If
    End With
    
    If LCase(FileName) Like "*.pdf" Then
        PDF_Conversion.ImportPdfData FileName
        Else
            MsgBox "The file you chose was not a pdf and could not be converted", vbCritical, "Invalid File Selection"
    End If
    
    Application.DisplayAlerts = True
    
    
End Sub

Sub FindDataSheet(ByVal ClientBook As Workbook, ByVal Template As Workbook)

    'This checks to see where the client information is on their spreadsheet
    
           
    Dim SheetCount As Integer
    Dim ShCount As Integer
    Dim OrigSheet As Worksheet
    
    Application.DisplayAlerts = False
    For Each OrigSheet In ClientBook.Worksheets
        If OrigSheet.Cells.Find(what:="*", searchdirection:=xlPrevious) Is Nothing Then
            If ClientBook.Sheets.Count = 1 Then
                MsgBox "There is no data in your selected workbook. Please select a client workbook with data and try again", vbCritical, "Data Unavailable"
                ClientBook.Close False
                Call Cancel_Reformat
                End
                Else
                    OrigSheet.Delete
            End If
        End If
    Next
    Application.DisplayAlerts = True
    
    'Dim DataSheets() As String
    Dim i As Integer
    'ReDim DataSheets(Sheets.Count - 1) As String
    'For i = 1 To Sheets.Count
    '    DataSheets(i - 1) = Sheets(i).Name
    'Next
    Dim msg As String
    SheetCount = ClientBook.Sheets.Count
    
    If SheetCount > 1 Then
        For i = 1 To SheetCount
            msg = MsgBox("Do you want to use the data on the sheet named: " & """" & ClientBook.Sheets(i).Name & """?", vbYesNo, "Data Gathering")
                If msg = vbYes Then
                    ShCount = ShCount + 1
                    ClientBook.Sheets(i).Copy after:=Template.Sheets(Template.Sheets.Count)
                    Exit For
                End If
        Next
        Else
            ShCount = ShCount + 1
            ClientBook.Sheets(1).Copy after:=Template.Sheets(Template.Sheets.Count)
    End If
    
    Dim bookName As String
    bookName = ClientBook.FullName
    ClientBook.Close savechanges:=False
    Kill bookName
    Template.Activate
    
    
End Sub
Attribute VB_Name = "HRIS_Data_Query"
Public EndList As String
Sub query(ByVal Branch As String, ByVal Client As String)
    Sheets("HRIS").Visible = True
    Sheets("HRIS").Activate
    ActiveSheet.Rows.Delete
     With ActiveSheet.ListObjects.Add(SourceType:=0, Source:=Array(Array( _
            "ODBC;DSN=hrisreports;UID=s125query;PWD=wither;DBQ=HRISREPORTS;DBA=W;APA=T;EXC=F;FEN=T;QTO=T;FRC=10;FDL=10;LOB=T;RST=T;BTD=F;BNF=F;BAM=IfAllSucc" _
            ), Array( _
            "essful;NUM=NLS;DPM=F;MTS=T;MDI=F;CSR=F;FWC=F;FBS=64000;TLO=O;MLD=0;ODA=F;")), _
            Destination:=Range("$A$1")).QueryTable
            .CommandText = Array( _
              "SELECT CLIENT.CLI_PR_CLIENT_NBR, SEMPLOYEES.SEE_PR_EMP_NBR, SEE_FIRST_NAME||' '||SEE_LAST_NAME, SEMPLOYEES.SEE_LAST" _
            , _
            "_NAME, SEMPLOYEES.SEE_FIRST_NAME, SEMPLOYEES.SEE_SALARIED_YN, SEE_ANNUAL_SALARY,CLI_PR_CLIENT_NBR||SEE_PR_EMP_NBR, SEE_FREQ" & Chr(13) & "" & Chr(10) & "FROM CLTINFO.CLIENT CLIENT, HRI" _
            , _
            "S.SEMPLOYEES SEMPLOYEES" & Chr(13) & "" & Chr(10) & "WHERE SEMPLOYEES.SEE_CLT_ID = CLIENT.CLI_CLIENT_ID AND (CLIENT.CLI_COST_CENTER='" & Branch & "') AND((CLIENT.CLI_PR_CLIENT_NBR='" & Client & "'))")
            .RowNumbers = False
            .FillAdjacentFormulas = False
            .PreserveFormatting = True
            .RefreshOnFileOpen = False
            .BackgroundQuery = True
            .RefreshStyle = xlInsertDeleteCells
            .SavePassword = False
            .SaveData = True
            .AdjustColumnWidth = True
            .RefreshPeriod = 0
            .PreserveColumnInfo = True
            .listobject.DisplayName = "Table_Query_from_hrisreports"
            .Refresh BackgroundQuery:=False
        End With
    
    Dim xConnect As Object
    For Each xConnect In ActiveWorkbook.Connections
        If xConnect.Name <> "ThisWorkbookDataModel" Then xConnect.Delete
    Next xConnect
    
    shHRIS.Range("A1:i1") = Array("Client Number", "EE Number", "Employee Name", "Last Name", "First Name", "Salaried?", "Salary", "Key", "Frequency")
    

       shHRIS.ListObjects("Table_Query_from_hrisreports"). _
            Sort.SortFields.Clear
        shHRIS.ListObjects("Table_Query_from_hrisreports"). _
            Sort.SortFields.Add Key:=Range("Table_Query_from_hrisreports[First Name]"), _
            SortOn:=xlSortOnValues, Order:=xlAscending, DataOption:=xlSortNormal
        With ActiveWorkbook.Worksheets("HRIS").ListObjects( _
            "Table_Query_from_hrisreports").Sort
            .header = xlYes
            .MatchCase = False
            .Orientation = xlTopToBottom
            .SortMethod = xlPinYin
            .Apply
        End With
    
       shHRIS.ListObjects("Table_Query_from_hrisreports"). _
            Sort.SortFields.Clear
    
    ExpandEEList Client
    NameErrors Client
    Sheets("HRIS").Activate
    EndList = Cells(Cells.Find(what:="*", searchorder:=xlByRows, searchdirection:=xlPrevious).Row, 8).Address
    Sheets("HRIS").Visible = xlSheetHidden

End Sub



Attribute VB_Name = "Instructions"
Attribute VB_Base = "0{453DEBD8-D2FE-49B7-BD90-83866CFDA90B}{6A985A09-3904-41F2-BA7D-E822BC8314FC}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False







Private Sub CommandButton1_Click()
Unload Instructions
End Sub

Private Sub UserForm_Initialize()
    Me.StartUpPosition = 0
    Me.Left = Application.Left + (0.5 * Application.Width) - (0.5 * Me.Width)
    Me.Top = Application.Top + (0.5 * Application.Height) - (0.5 * Me.Height)


End Sub
Attribute VB_Name = "IsInArray_Function"
Option Explicit
Function IsInArray(ByVal SearchVal As Variant, ByVal SearchArray As Variant, Optional ByVal Sorted As Boolean = False, Optional ByRef SearchLocation As Long = -1, Optional ByVal ArrayType As Byte = 0) As Boolean

    If (Int(Application.Log(UBound(SearchArray) + 1, 2)) < UBound(SearchArray) + 1) And Sorted = True Then
        IsInArray = BinarySearch(SearchVal, SearchArray, LBound(SearchArray), UBound(SearchArray), SearchLocation, ArrayType)
        Exit Function
    End If
    
    Dim i As Long
    For i = LBound(SearchArray) To UBound(SearchArray)
        If UCase(SearchArray(i)) = UCase(SearchVal) Then
            SearchLocation = i
            IsInArray = True
            Exit For
        End If
    Next

End Function


Function BinarySearch(ByVal SearchVal As Variant, ByVal SearchArray As Variant, ByVal LowerBound As Long, ByVal UpperBound As Long, Optional ByRef SearchLocation As Long = -1, Optional ArrayType As Byte = 0) As Boolean
    'Array Type 0 = string; 1 = not a string
    Dim MidArray As Long
    
    MidArray = (UpperBound + LowerBound) / 2
    If ArrayType = 0 Then
        SearchArray(LowerBound) = UCase(SearchArray(LowerBound))
        SearchArray(MidArray) = UCase(SearchArray(MidArray))
        SearchArray(UpperBound) = UCase(SearchArray(UpperBound))
        SearchVal = UCase(SearchVal)
    End If
    
    If UpperBound - LowerBound < 2 Then
        If SearchArray(UpperBound) = SearchVal Then
            SearchLocation = UpperBound
            BinarySearch = True
            Else
                If SearchArray(LowerBound) = SearchVal Then
                    SearchLocation = LowerBound
                    BinarySearch = True
                    Else
                        BinarySearch = False
                End If
        End If
        Exit Function
    End If
    
            
    
    
    If SearchArray(MidArray) = SearchVal Then
        SearchLocation = MidArray
        BinarySearch = True
        Exit Function
        Else
            If SearchArray(MidArray) < SearchVal Then
                LowerBound = MidArray + 1
                BinarySearch = BinarySearch(SearchVal, SearchArray, LowerBound, UpperBound, SearchLocation, ArrayType)
                Else
                    If SearchArray(MidArray) > SearchVal Then
                        UpperBound = MidArray - 1
                        BinarySearch = BinarySearch(SearchVal, SearchArray, LowerBound, UpperBound, SearchLocation, ArrayType)
                    End If
            End If
    End If
    
End Function

Function IsInCollection(element As Variant, Col As Collection, Optional returnelement As Object) As Boolean
    Dim cItem As Variant
    For Each cItem In Col
        If cItem = element Then
            IsInCollection = True
            'Set returnelement = cItem
            Exit Function
        End If
    Next
    IsInCollection = False
End Function
Attribute VB_Name = "JobForm"
Attribute VB_Base = "0{68431830-F386-4785-91F9-0A2B35929BE5}{7349A758-FDC5-4100-834D-C8526B1CF9D1}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False






Private Sub CmdSkip_Click()
If Sheets("SkipItems").Range("a1").value = Empty Then
    Sheets("SkipItems").Range("a1").NumberFormat = "@"
    Sheets("SkipItems").Range("a1").value = Me.TextBox1
    Else:
        Sheets("SkipItems").Cells(Sheets("SkipItems").UsedRange.Rows.Count + 1, 1).NumberFormat = "@"
        Sheets("SkipItems").Cells(Sheets("SkipItems").UsedRange.Rows.Count + 1, 1).value = Me.TextBox1
End If
Unload Me
shImport.Activate
End Sub

Private Sub ComboBox1_Change()
    Me.CommandButton1.Enabled = Not Trim(Me.ComboBox1.value) = vbNullString
End Sub

Private Sub CommandButton1_Click()
    Sheets("Newjob").Activate
    If Not Cells.Find(what:="*", searchdirection:=xlPrevious) Is Nothing Then
        Cells(Cells.Find(what:="*", searchdirection:=xlPrevious).Row + 1, 1).Activate
        Else
            Range("A1").Activate
    End If
    ActiveCell.NumberFormat = "@"
    ActiveCell.value = JobForm.ComboBox1.value
    shJobs.Activate
    Range("a1").End(xlDown).Offset(1, 0).Activate
    ActiveCell.NumberFormat = "@"
    ActiveCell.value = JobForm.TextBox1.value
    ActiveCell.Offset(0, 1).NumberFormat = "@"
    ActiveCell.Offset(0, 1).value = JobForm.ComboBox1.value
    
    shJobs.Sort.SortFields.Add Key:=Range( _
            "A:A"), SortOn:=xlSortOnValues, Order:=xlAscending, DataOption:= _
            xlSortNormal
        With shJobs.Sort
            .SetRange Range("A:b")
            .header = xlYes
            .MatchCase = False
            .Orientation = xlTopToBottom
            .SortMethod = xlPinYin
            .Apply
        End With
    
    Unload JobForm
    
    shImport.Activate
    'ActiveCell.Offset(-1, 0).Activate
    'Range("f2").Activate


End Sub

Private Sub CommandButton2_Click()
    msg = MsgBox("Canceling will cancel your reformat entirely." & vbNewLine & "Are you sure you want to cancel?", vbYesNo, "Cancel")
    If msg = vbYes Then
        Unload JobForm
        msg = MsgBox("Reformat Canceled", vbInformation, "Confirmation")
        Call Cancel_Reformat
        End
    End If

End Sub

Private Sub CommandButton3_Click()

End Sub

Private Sub UserForm_Initialize()
     'Position top/left of Excel App
    Me.Top = Application.Top
    Me.Left = Application.Left
     
     'Approx over top/left cell (depends on toolbars visible)
    Me.Top = Application.Top
    Me.Left = Application.Left
End Sub
Private Sub UserForm_QueryClose _
  (Cancel As Integer, CloseMode As Integer)
'   Prevents use of the Close button
    If CloseMode = vbFormControlMenu Then
        Cancel = True
        msg = MsgBox("You must choose save or cancel to close this box", vbInformation, "Close")
    End If
End Sub




Attribute VB_Name = "LaborForm"
Attribute VB_Base = "0{B9EA7CBF-4462-48B2-A7B2-6EE583377F3F}{54FBCD53-1E8B-4FC1-8B5B-E3F1E1E7FE5F}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False


Private Sub CmdSkip_Click()
    If Sheets("SkipItems").Range("a1").value = Empty Then
        Sheets("SkipItems").Range("a1").value = Me.TextBox1
        Else: Sheets("SkipItems").Cells(Sheets("SkipItems").UsedRange.Rows.Count + 1, 1).value = Me.TextBox1
    End If
    Unload Me
    shImport.Activate
End Sub
Private Sub CommandButton1_Click()
    Sheets("Newlabor").Activate
    If Not Cells.Find(what:="*", searchdirection:=xlPrevious) Is Nothing Then
        Cells(Cells.Find(what:="*", searchorder:=xlByRows, searchdirection:=xlPrevious).Row + 1, 1).Activate
        Else
            Range("A1").Activate
    End If
    ActiveCell.value = LaborForm.ComboBox1.value
    shLabor.Activate
    Range("a1").End(xlDown).Offset(1, 0).Activate
    ActiveCell.value = LaborForm.TextBox1.value
    ActiveCell.Offset(0, 1).value = LaborForm.ComboBox1.value
    
    shLabor.Sort.SortFields.Add Key:=Range( _
            "A:A"), SortOn:=xlSortOnValues, Order:=xlAscending, DataOption:= _
            xlSortNormal
        With shLabor.Sort
            .SetRange Range("A:b")
            .header = xlYes
            .MatchCase = False
            .Orientation = xlTopToBottom
            .SortMethod = xlPinYin
            .Apply
        End With
    
    Unload LaborForm
    shImport.Activate
    
End Sub

Private Sub CommandButton2_Click()
    msg = MsgBox("Canceling will cancel your reformat entirely." & vbNewLine & "Are you sure you want to cancel?", vbYesNo, "Cancel")
    If msg = vbYes Then
        Unload LaborForm
        msg = MsgBox("Reformat Canceled", vbInformation, "Confirmation")
        Call Cancel_Reformat
        End
    End If

End Sub
Private Sub UserForm_Initialize()
    'Position top/left of Excel App
    Me.Top = Application.Top
    Me.Left = Application.Left
     
    'Approx over top/left cell (depends on toolbars visible)
    Me.Top = Application.Top
    Me.Left = Application.Left
End Sub
Private Sub UserForm_QueryClose _
  (Cancel As Integer, CloseMode As Integer)
'   Prevents use of the Close button
    If CloseMode = vbFormControlMenu Then
        Cancel = True
        msg = MsgBox("You must choose save, cancel, or skip to close this box", vbInformation, "Close")
    End If
End Sub


Attribute VB_Name = "LocalForm"
Attribute VB_Base = "0{A0B2FCA1-534F-4E99-BE89-A48BFBC39D36}{E54A1A4A-2910-43E9-AF94-325580330CC1}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False








Private Sub CmdSkip_Click()
If Sheets("SkipItems").Range("a1").value = Empty Then
    Sheets("SkipItems").Range("a1").value = Me.TextBox1
    Else: Sheets("SkipItems").Cells(Sheets("SkipItems").UsedRange.Rows.Count + 1, 1).value = Me.TextBox1
End If
Unload Me
shImport.Activate
End Sub

Private Sub CommandButton1_Click()
Sheets("NewLocal").Activate
Range("a1").End(xlDown).Offset(1, 0).Activate
ActiveCell.value = LocalForm.ComboBox1.value
shLocals.Activate
Range("a1").End(xlDown).Offset(1, 0).Activate
ActiveCell.value = LocalForm.TextBox1.value
ActiveCell.Offset(0, 1).value = LocalForm.ComboBox1.value

ActiveWorkbook.WorkshLocals.Sort.SortFields.Add Key:=Range( _
        "A:A"), SortOn:=xlSortOnValues, Order:=xlAscending, DataOption:= _
        xlSortNormal
    With ActiveWorkbook.WorkshLocals.Sort
        .SetRange Range("A:b")
        .header = xlYes
        .MatchCase = False
        .Orientation = xlTopToBottom
        .SortMethod = xlPinYin
        .Apply
    End With

Unload LocalForm

shImport.Activate
'ActiveCell.Offset(-1, 0).Activate
'Range("f2").Activate


End Sub

Private Sub CommandButton2_Click()
msg = MsgBox("Canceling will cancel your reformat entirely." & vbNewLine & "Are you sure you want to cancel?", vbYesNo, "Cancel")
    If msg = vbYes Then
       Unload LocalForm
'        Application.DisplayAlerts = False
'        Sheets("NewLocal").Delete
'        shImport.Activate
'        ActiveSheet.Cells.Delete
'        Range("A1").Activate
'        With ActiveWindow
'            .ScrollColumn = 1
'            .ScrollRow = 1
'        End If
'        Application.DisplayAlerts = True
'        Sheets("Employee Numbers").Visible = False
'        shLocals.Visible = False
'        Sheets("HRIS").Visible = False
'        Sheets("Reformat Button").Activate
'        Range("c5").Activate
'        Unload StatusBar
'        Call Cancel_Reformat
'        ActiveWorkbook.Protect "import", True, False
      msg = MsgBox("Reformat Canceled", vbInformation, "Confirmation")
'        ActiveWorkbook.Save
Call Cancel_Reformat
        End
    End If

End Sub

Private Sub CommandButton3_Click()

End Sub

Private Sub UserForm_Initialize()
     'Position top/left of Excel App
    Me.Top = Application.Top
    Me.Left = Application.Left
     
     'Approx over top/left cell (depends on toolbars visible)
    Me.Top = Application.Top
    Me.Left = Application.Left
End Sub
Private Sub UserForm_QueryClose _
  (Cancel As Integer, CloseMode As Integer)
'   Prevents use of the Close button
    If CloseMode = vbFormControlMenu Then
        Cancel = True
        msg = MsgBox("You must choose save or cancel to close this box", vbInformation, "Close")
    End If
End Sub


Attribute VB_Name = "Main"
Option Explicit
Public sb As StatusBar
Sub Instruct()
Instructions.Show
End Sub
Sub Status()
    On Error GoTo retry
    Dim retrycount As Integer
    Set sb = New StatusBar
    sb.Show False
    On Error GoTo 0
    Exit Sub
retry:
    retrycount = retrycount + 1
    On Error GoTo retry
    If retrycount < 3 Then
        Set sb = New StatusBar
        sb.Show
        On Error GoTo 0
    End If
    'StatusBar.Show
End Sub
    '*************************************************
    '* This process takes a client spreadsheet and
    '* reformats it so that it is easily importable
    '* by the payroll specialist
    '**************************************************
Sub MainRoutine()

    Dim Template As Workbook
    'Dim ClientBook As Workbook
    Dim Client As String
    Dim Branch As String
    Dim pctdone As Single
    Dim validClient As Boolean
    Branch = "0047"
    Do
        Client = InputBox("Please enter the 8 digit client number", "Client Number")
        If Client = vbNullString Then
            Cancel_Reformat
            End
            Else
                If Not IsInArray(Client, Array("00471109", "00474207", "00475676", "14056266", "00474204", "14036039")) Then
                    MsgBox "The client number you entered is invalid, please try again", vbCritical, "Invalid client number"
                    Else
                        validClient = True
                        Exit Do
                End If
        End If
    Loop Until validClient
    
    'On Error GoTo ErrorTrap
    UpdateProgressBar 0, sb
    
    'This does some intial formatting
    ActiveWorkbook.Unprotect "import"
    Application.ScreenUpdating = False
    
    With shImport.Cells
        .NumberFormat = "General"
        .Delete
    End With
    
    'This asks for the client information
    Set Template = ActiveWorkbook
    Call OpenClientBook
    
    If shImport.Cells.Find(what:="*", searchorder:=xlByRows, searchdirection:=xlPrevious).Row = 1 Then
        MsgBox "No employee data could be retrieved from the file you provided. Please ensure your input file is a valid payroll pdf file.", vbCritical, "No Employees"
        Cancel_Reformat False
        End
    End If
    pctdone = 0.25
    UpdateProgressBar pctdone, sb
    
    'This loads the client information available in HRIS
    Call query(Branch, Client)
    pctdone = 0.5
    UpdateProgressBar pctdone, sb
    

    Call EENumbers(Client)
    UpdateProgressBar 0.99, sb
    shImport.Activate
    Dim lastRow As Long
    lastRow = Cells.Find(what:="*", searchorder:=xlByRows, searchdirection:=xlPrevious).Row
    Range(Cells(2, 2), Cells(lastRow, 2)).value = "=RC[1] & "" "" & RC[2]"
    Range("B:B").Copy
    Range("B1").PasteSpecial xlPasteValues
    Range("C:D").Delete
    Range("a1:b1").value = vbNullString
    Cells(lastRow + 1, 2) = "Total"
    Cells(lastRow + 1, 3).value = WorksheetFunction.Sum(Range(Cells(2, 3), Cells(lastRow, 3)))
    Cells(lastRow + 1, 5).value = WorksheetFunction.Sum(Range(Cells(2, 5), Cells(lastRow, 5)))
    Cells(lastRow + 1, 7).value = WorksheetFunction.Sum(Range(Cells(2, 7), Cells(lastRow, 7)))

    Call Clean_Up
    Set Template = Nothing
    
    MsgBox "Reformat Complete" & vbNewLine & "Please check for client notes on the original spreadsheet." & vbNewLine & "Save this file as a" & _
                " CSV(Comma Delimited) file and import in Core Advanced", vbInformation, "Complete"
    
    Call Cancel_Reformat(True)
    
    Exit Sub
ErrorTrap:
    Error_Protocol

End Sub


Attribute VB_Name = "MissingEENumbers"
Attribute VB_Base = "0{66550819-0125-4BC8-A6A8-90CA861F5089}{7F2BF45C-825E-4421-A140-2362AB85BBC7}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False


Option Explicit
Private Client As String
Private Sub CmdCancel_Click()
    Dim msg As String
    msg = MsgBox("Canceling will abort your reformat" & vbNewLine & "Are you sure you want to cancel?", vbYesNo, "Cancel")
    If msg = vbYes Then
        Unload Me
        Unload sb
        Call Cancel_Reformat
        ActiveWorkbook.Protect Password:="import", structure:=True, Windows:=False
        ActiveWorkbook.Save
        MsgBox "Reformat canceled" & vbNewLine & "Paste new data to try again", vbInformation, "Canceled"
    End If
End Sub
Private Sub CmdContinue_Click()

    Cells.Find(what:="Employee Name", after:=Range("b1").End(xlDown), MatchCase:=True).Offset(1, 0).Activate
    Do Until ActiveCell.value = Empty
        If ActiveCell.Offset(0, 1).value = Empty Then
            MsgBox "You must enter an employee number for each listed employee or delete them before you can continue", vbCritical, "Missing Information"
            Exit Sub
            Else
                ActiveCell.Offset(1, 0).Activate
        End If
    Loop
    Dim clientVal As String
    clientVal = Client
    Unload Me
    Call FixPayType(clientVal)
End Sub

Private Sub CmdDelete_Click()

    Dim Missing As String
    Dim Missing2 As String
    Dim EmployeeName As String
    EmployeeName = ActiveCell.value
    Dim msg As String
    msg = MsgBox("Are you sure you want to delete " & EmployeeName & " from the import file?", vbYesNo, "Delete")
    
    If msg = vbYes Then
        Unload Me
        Do Until Cells.Find(what:=EmployeeName, MatchCase:=True) Is Nothing
            Cells.Find(what:=EmployeeName, MatchCase:=True).Activate
            ActiveCell.EntireRow.Delete
        Loop
        MsgBox EmployeeName & " has been removed from the import spreadsheet.", vbInformation, "Confirmation"
        
        If Range("c1").End(xlDown).Offset(3, 0).value <> Empty Then
        
            Missing = Range("c1").End(xlDown).Offset(3, 0).Address
            If Range("c1").End(xlDown).Offset(4, 0).value = Empty Then
                Missing2 = Range("c1").End(xlDown).Offset(3, 3).Address
                Else: Missing2 = Range("c1").End(xlDown).Offset(3, 0).End(xlDown).Offset(0, 3).Address
            End If
            Unload Me
            
            Dim EEForm As MissingEENumbers
            Set EEForm = New MissingEENumbers
            EEForm.ListBox1.RowSource = Missing & ":" & Missing2
            EEForm.ClientProp = Client
            EEForm.Show
            Set EEForm = Nothing
            Exit Sub
            Else
                Cells.Find(what:="Employee Name", after:=Range("b1").End(xlDown), MatchCase:=True).Activate
                Range(ActiveCell.Offset(-1, 0), ActiveCell.End(xlDown).End(xlToRight)).Clear
        End If
    
    End If
End Sub


Private Sub ListBox1_Click()
    shImport.Activate
    Cells.Find(what:=Me.ListBox1.value, after:=Range("c1").End(xlDown).Offset(1, 0)).Activate
End Sub


Private Sub ListBox1_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    Dim msg As String
    msg = MsgBox("Would fill in the information from an employee list instead of entering it manually?", vbYesNo, "Information Gather")
    If msg = vbNo Then
        Dim EnterNumber As String
        EnterNumber = InputBox("Enter the employee number for " & Me.ListBox1.value, "Enter the Employee Number")
        ActiveCell.Offset(0, 1).value = EnterNumber
        msg = MsgBox("Is " & Me.ListBox1.value & " a Salaried Employee?", vbYesNo, "Hourly vs Salary")
        If msg = vbYes Then
            ActiveCell.Offset(0, 2).value = "Salary"
            Else
                ActiveCell.Offset(0, 2).value = "Hourly"
        End If
        ActiveCell.Offset(0, 3).value = Client
        Else
            
            Dim LookUp As EELookUp
            Set LookUp = New EELookUp
            LookUp.CallerProp = Me
            LookUp.TopProp = Me.Top
            LookUp.LeftProp = Me.Left
            LookUp.ClientProp = Client
            LookUp.ListBox1.RowSource = "HRIS!$A$2:" & Range(EndList).Address
            Unload Me
            LookUp.Show
            Set LookUp = Nothing
    End If

End Sub
Private Sub UserForm_Initialize()
   Me.StartUpPosition = 0
    Me.Left = Application.Left + (0.5 * Application.Width) - (0.5 * Me.Width)
    Me.Top = Application.Top + (0.5 * Application.Height) - (0.5 * Me.Height)
End Sub

Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
    'Prevents use of the Close button
    If CloseMode = vbFormControlMenu Then
        Cancel = True
        MsgBox "You must choose continue or cancel to close this box", vbInformation, "Close"
    End If
End Sub

Property Let ClientProp(clientVal As String)
    Client = clientVal
End Property






Attribute VB_Name = "NameCompare"
Attribute VB_Base = "0{AD13DCB5-DBE6-479C-AE94-7E7820C10F9B}{60599E7F-D0A8-4E20-B639-923F3033FCD4}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Private Client As String
Private Sub CmdKeep_Click()
Dim Lst As Integer
Dim ERRE As Range
Dim EEName As String
Dim eenum As String
For Lst = 0 To Me.LstError.ListCount - 1
    If Me.LstError.Selected(Lst) = False Then
        EEName = Me.LstError.List(Lst, 0)
        eenum = Me.LstError.List(Lst, 1)
        Exit For
    End If
Next
For Each ERRE In ActiveSheet.Range("a:a").SpecialCells(xlCellTypeVisible)
    If ERRE.value = EEName Then
        Cells(ERRE.Row, 9) = 0
        If Me.CkDontAsk = True Then
            Range(Cells(ERRE.Row, 2), Cells(ERRE.Row, 8)).Copy
            Sheets("SaveNames - " & Client).Cells(Sheets("SaveNames - " & Client).UsedRange.Rows.Count + 1, 1).PasteSpecial xlPasteAll
        End If
    End If
    If WorksheetFunction.CountA(ERRE.EntireRow) = 0 Then Exit For
Next

Unload Me
End Sub

Private Sub CmdSelect_Click()
Dim Lst As Integer
Dim ERRE As Range
Dim EEName As String
Dim eenum As String
For Lst = 0 To Me.LstError.ListCount - 1
    If Me.LstError.Selected(Lst) = True Then
        EEName = Me.LstError.List(Lst, 0)
        eenum = Me.LstError.List(Lst, 1)
        Exit For
    End If
Next
For Each ERRE In ActiveSheet.Range("a:a").SpecialCells(xlCellTypeVisible)
    If ERRE.value = EEName Then
        If ERRE.Offset(0, 1).value <> eenum Then
            Range(Cells(ERRE.Row, 2), Cells(ERRE.Row, 8)).Copy
            Sheets("NameErrors - " & Client).Cells(Sheets("NameErrors - " & Client).UsedRange.Rows.Count + 1, 1).PasteSpecial xlPasteAll
            Cells(ERRE.Row, 9) = 2
            Else
                Cells(ERRE.Row, 9) = 0
        End If
    End If
    If WorksheetFunction.CountA(ERRE.EntireRow) = 0 Then Exit For
Next

Unload Me

End Sub


Private Sub UserForm_Initialize()
    Me.StartUpPosition = 0
    Me.Left = Application.Left + (0.5 * Application.Width) - (0.5 * Me.Width)
    Me.Top = Application.Top + (0.5 * Application.Height) - (0.5 * Me.Height)
End Sub

Property Let ClientNumber(Client_Number As String)
    Client = Client_Number
End Property
Attribute VB_Name = "Name_Duplication_Errors"
Sub NameErrors(Client As String)
Sheets("Employee Numbers - " & Client).Visible = True
Sheets("Employee Numbers - " & Client).Activate
Dim lastRow As Long
lastRow = Cells.Find(what:="*", searchorder:=xlByRows, searchdirection:=xlPrevious).Row
If lastRow = 1 Then
    Exit Sub
End If
Range("a:a").Insert
Range(Cells(2, 1), Cells(lastRow, 1)).value = "=Trim(RC[3]) & "" "" & trim(RC[2])"
If Sheets("NameErrors - " & Client).Range("a2").value <> Empty Then
    Sheets("NameErrors - " & Client).Visible = True
    Sheets("NameErrors - " & Client).Activate
    Range("a:a").Insert
    Range(Range("a2"), Range("b1").End(xlDown).Offset(0, -1)).value = "=TRIM(RC[3]) & "" "" & TRIM(RC[2]) & "" "" & TRIM(RC[1])"
    Sheets("Employee Numbers - " & Client).Activate
    Range(Range("j2"), Cells(Range("a2").End(xlDown).Row, 10)).value = "=vlookup(RC[-9] & "" "" & RC[-8],'NameErrors - " & Client & "'!C[-9],1,FALSE)"
    ActiveSheet.Range("A:J").AutoFilter Field:=10, Criteria1:="<>#N/A", Operator:=xlAnd
    Application.DisplayAlerts = False
    Sheets("Employee Numbers - " & Client).AutoFilter.Range.Offset(1).SpecialCells(xlCellTypeVisible).Rows.Delete
    Application.DisplayAlerts = True
    Sheets("NameErrors - " & Client).Range("a:a").Delete
    Sheets("NameErrors - " & Client).Visible = False
    ActiveSheet.AutoFilterMode = False
    Range("j:j").Delete
End If



Range(Range("i2"), Cells(Range("a2").End(xlDown).Row, 9)).value = "=COUNTIF(C[-8],RC[-8])-COUNTIFS(C[-8],RC[-8],C[-7],RC[-7])"
Cells.Copy
Range("A1").PasteSpecial xlPasteValues
If Sheets("SaveNames - " & Client).Range("a2").value <> Empty Then
    Sheets("SaveNames - " & Client).Visible = True
    Sheets("SaveNames - " & Client).Activate
    Range("a:a").Insert
    Range(Range("a2"), Range("b1").End(xlDown).Offset(0, -1)).value = "=TRIM(RC[3]) & "" "" & TRIM(RC[2]) & "" "" & TRIM(RC[1])"
    Sheets("Employee Numbers - " & Client).Activate
    Range(Range("j2"), Cells(Range("a2").End(xlDown).Row, 10)).value = "=vlookup(RC[-9] & "" "" & RC[-8],'SaveNames - " & Client & "'!C[-9],1,FALSE)"
    ActiveSheet.Range("A:J").AutoFilter Field:=10, Criteria1:="<>#N/A", Operator:=xlAnd
    Dim mRange As Range
    For Each mRange In ActiveSheet.Range("a:a").SpecialCells(xlCellTypeVisible)
      If mRange.value <> Empty Then
        Cells(mRange.Row, 9) = 0
      End If
    If WorksheetFunction.CountA(mRange.EntireRow) = 0 Then Exit For
    Next
    Sheets("SaveNames - " & Client).Range("a:a").Delete
    Sheets("SaveNames - " & Client).Visible = False
    ActiveSheet.AutoFilterMode = False
    Range("j:j").Delete
End If

Dim c As Range
Dim NameDup As Range
Dim EENm As String
Dim DupCount As Integer
Dim LstCount As Integer
Do Until WorksheetFunction.Sum(Range("I:I")) = 0
    ActiveSheet.Range("$A:$I").AutoFilter Field:=9, Criteria1:=">0", Operator:=xlAnd
    ActiveSheet.Range("$A:$I").AutoFilter Field:=1, Criteria1:=ActiveSheet.AutoFilter.Range.Offset(1).SpecialCells(xlCellTypeVisible).Cells(1, 1)
    Set NameDup = ActiveSheet.Range("a:a").SpecialCells(xlCellTypeVisible)
    For Each c In NameDup
        LstCount = 0
        If c.value <> Empty Then
            Dim namecomparison As NameCompare
            Set namecomparison = New NameCompare
            namecomparison.ClientNumber = Client
            c.Activate
            EEName = c.value
            For DupCount = 0 To Cells(c.Row, 9)
                With namecomparison.LstError
                    .AddItem
                    .List(LstCount, 0) = ActiveCell.value
                    .List(LstCount, 1) = ActiveCell.Offset(0, 1).value
                End With
                NameDup.Find(what:=c.value, after:=ActiveCell, LookIn:=xlValues, lookat:=xlWhole).Activate
                LstCount = LstCount + 1
            Next
            'NameCompare.Show
            namecomparison.Show
            Set namecomparison = Nothing
            ActiveSheet.Range("A:i").AutoFilter
            ActiveSheet.Range("A:i").AutoFilter Field:=9, Criteria1:="2", Operator:=xlAnd
            Application.DisplayAlerts = False
            Sheets("Employee Numbers - " & Client).AutoFilter.Range.Offset(1).SpecialCells(xlCellTypeVisible).Rows.Delete
            Application.DisplayAlerts = True
            ActiveSheet.AutoFilterMode = False
            Exit For
            Else:
                If c.Address <> Range("a1").Address Then Exit For
        End If
    Next
Loop
Range("i:i").Delete
Range("a:a").Delete

Sheets("Employee Numbers - " & Client).Range("A:G").AutoFilter Field:=1, Criteria1:="="
Application.DisplayAlerts = False
Sheets("Employee Numbers - " & Client).Activate
Sheets("Employee Numbers - " & Client).AutoFilter.Range.Offset(1).SpecialCells(xlCellTypeVisible).Rows.Delete
Application.DisplayAlerts = True
shImport.Activate
Sheets("Employee Numbers - " & Client).AutoFilterMode = False
End Sub


Attribute VB_Name = "OrgForm"
Attribute VB_Base = "0{377E3949-F858-4C42-84FC-4983CCBB8FAC}{D32BD824-6FFD-441C-B298-1F0DBCA5471A}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False







Private Sub CmdSkip_Click()
If Sheets("SkipItems").Range("a1").value = Empty Then
    Sheets("SkipItems").Range("a1").value = Me.TextBox1
    Else: Sheets("SkipItems").Cells(Sheets("SkipItems").UsedRange.Rows.Count + 1, 1).value = Me.TextBox1
End If
Unload Me
shImport.Activate
End Sub

Private Sub CommandButton1_Click()
Sheets("NewOrg").Activate
Range("a1").End(xlDown).Offset(1, 0).Activate
ActiveCell.value = LocalForm.ComboBox1.value
Sheets("Org Units").Activate
Range("a1").End(xlDown).Offset(1, 0).Activate
ActiveCell.value = LocalForm.TextBox1.value
ActiveCell.Offset(0, 1).value = LocalForm.ComboBox1.value

ActiveWorkbook.Worksheets("Org Units").Sort.SortFields.Add Key:=Range( _
        "A:A"), SortOn:=xlSortOnValues, Order:=xlAscending, DataOption:= _
        xlSortNormal
    With ActiveWorkbook.Worksheets("Org Units").Sort
        .SetRange Range("A:b")
        .header = xlYes
        .MatchCase = False
        .Orientation = xlTopToBottom
        .SortMethod = xlPinYin
        .Apply
    End With

Unload LocalForm

shImport.Activate
'ActiveCell.Offset(-1, 0).Activate
'Range("f2").Activate


End Sub

Private Sub CommandButton2_Click()
msg = MsgBox("Canceling will cancel your reformat entirely." & vbNewLine & "Are you sure you want to cancel?", vbYesNo, "Cancel")
    If msg = vbYes Then
       Unload LocalForm
'        Application.DisplayAlerts = False
'        Sheets("NewOrg").Delete
'        shimport.Activate
'        ActiveSheet.Cells.Delete
'        Range("A1").Activate
'        With ActiveWindow
'            .ScrollColumn = 1
'            .ScrollRow = 1
'        End If
'        Application.DisplayAlerts = True
'        sheenumbers.Visible = False
'        Sheets("Org Units").Visible = False
'        Sheets("HRIS").Visible = False
'        Sheets("Home").Activate
'        Range("c5").Activate
'        Unload StatusBar
'        Call Cancel_Reformat
'        ActiveWorkbook.Protect "import", True, False
      msg = MsgBox("Reformat Canceled", vbInformation, "Confirmation")
'        ActiveWorkbook.Save
Call Cancel_Reformat
        End
    End If

End Sub

Private Sub CommandButton3_Click()

End Sub

Private Sub UserForm_Initialize()
     'Position top/left of Excel App
    Me.Top = Application.Top
    Me.Left = Application.Left
     
     'Approx over top/left cell (depends on toolbars visible)
    Me.Top = Application.Top
    Me.Left = Application.Left
End Sub
Private Sub UserForm_QueryClose _
  (Cancel As Integer, CloseMode As Integer)
'   Prevents use of the Close button
    If CloseMode = vbFormControlMenu Then
        Cancel = True
        msg = MsgBox("You must choose save or cancel to close this box", vbInformation, "Close")
    End If
End Sub


Attribute VB_Name = "PDF_Conversion"
Option Explicit

Sub ImportPdfData(pdfPath As String)
    On Error GoTo Error_Trap
    Dim exportPath As String
    Dim folderPath As String
    Dim applicationPath As String
    
    folderPath = CreateObject("Wscript.Shell").specialfolders("Desktop") & "\RamboCoPdfReaderTools"
    applicationPath = folderPath & "\RambCoImportConverter.exe"
    exportPath = folderPath & "\" & Format(Now, "yyyymmddhhmmss") & ".csv"
    ExeCreator.CreatePdfReader
    
    If Dir(applicationPath) = vbNullString Then
        GoTo Error_Trap
    End If
    
    Dim converter As Object
    Set converter = CreateObject("Wscript.Shell")
    converter.Run """" & applicationPath & """" & " " & """" & pdfPath & """" & " " & """" & exportPath & """", 0
    
    Dim startTime As Date
    startTime = Now
    Do While Second(Now - startTime) < 60 And Dir(exportPath) = vbNullString
    Loop
    
    If Dir(exportPath) = vbNullString Then
        GoTo Error_Trap
    End If
    
    ImportText exportPath
    
    If shImport.Range("a1").value = "An error occurred" Then
        GoTo Error_Trap
    End If
    
    On Error GoTo 0
    Exit Sub
Error_Trap:
    MsgBox "An error occurred while trying to convert your pdf data. The reformat process cannot continue", vbCritical, "Critical Conversion Error"
    Cancel_Reformat
    End
End Sub

Sub ImportText(path As String)
    Dim i As Byte
    Dim cData(0 To 255) As Byte
    For i = LBound(cData) To UBound(cData)
        cData(i) = 2
        If i = 255 Then
            Exit For
        End If
    Next
    shImport.Visible = xlSheetVisible
    shImport.Activate
    With shImport.QueryTables.Add(Connection:="TEXT;" & path, Destination:=Range("$A$1"))
        .FieldNames = True
        .PreserveFormatting = True
        .TextFileParseType = xlDelimited
        .TextFileTextQualifier = xlTextQualifierDoubleQuote
        .TextFileCommaDelimiter = True
        '.TextFileColumnDataTypes = cData
        .TextFileTrailingMinusNumbers = True
        .Refresh BackgroundQuery:=True
    End With
End Sub


Attribute VB_Name = "PayComponentForm"
Attribute VB_Base = "0{B6A44C8B-4942-43AA-8CB2-7613383FF416}{C29B80F1-BF04-4B04-9EAA-43BD8D25EB64}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Private DataSheet As Worksheet
Property Let SetDataSheet(value As Worksheet)
    Set DataSheet = value
End Property

Private Sub ComboBox1_Change()
    Me.CommandButton1.Enabled = Trim(Me.ComboBox1.value) <> vbNullString
End Sub

Private Sub CommandButton1_Click()
Sheets("NewEarnings").Activate
Range("a1").End(xlDown).Offset(1, 0).Activate
ActiveCell.value = Me.ComboBox1.value
shEarnings.Activate
Range("a1").End(xlDown).Offset(1, 0).Activate
ActiveCell.value = Me.TextBox1.value
ActiveCell.Offset(0, 1).value = Me.ComboBox1.value
'msg = MsgBox("Is '" & ActiveCell.Offset(0, 1).Value & "' entered as hours?", vbYesNo, "Hourly vs Amount")
'If msg = vbYes Then
'    ActiveCell.Offset(0, 2).Value = "Hours"
'    Else: ActiveCell.Offset(0, 2).Value = "Amount"
'End If

shEarnings.Sort.SortFields.Add Key:=Range( _
        "A:A"), SortOn:=xlSortOnValues, Order:=xlAscending, DataOption:= _
        xlSortNormal
    With shEarnings.Sort
        .SetRange Range("A:b")
        .header = xlYes
        .MatchCase = False
        .Orientation = xlTopToBottom
        .SortMethod = xlPinYin
        .Apply
    End With

DataSheet.Activate

Unload Me


'ActiveCell.Offset(-1, 0).Activate
'Range("f2").Activate


End Sub

Private Sub CommandButton2_Click()
Dim msg As String
msg = MsgBox("Canceling will cancel your reformat entirely." & vbNewLine & "Are you sure you want to cancel?", vbYesNo, "Cancel")
    If msg = vbYes Then
        Unload Me
'        Application.DisplayAlerts = False
'        Sheets("NewEarnings").Delete
'        dataSheet.Activate
'        ActiveSheet.Cells.Delete
'        Range("A1").Activate
'        With ActiveWindow
'            .ScrollColumn = 1
'            .ScrollRow = 1
'        End If
'        Application.DisplayAlerts = True
'        sheenumbers.Visible = False
'        shEarnings.Visible = False
'        Sheets("HRIS").Visible = False
'        Sheets("Home").Activate
'        Range("c5").Activate
'        Unload StatusBar
'        Call Cancel_Reformat
'        ActiveWorkbook.Protect "import", True, False
        msg = MsgBox("Reformat Canceled", vbInformation, "Confirmation")
      Call Cancel_Reformat
        ActiveWorkbook.Save
        End
    End If

End Sub

Private Sub UserForm_Initialize()
     'Position top/left of Excel App
    Me.Top = Application.Top
    Me.Left = Application.Left
     
     'Approx over top/left cell (depends on toolbars visible)
    Me.Top = Application.Top
    Me.Left = Application.Left
End Sub
Private Sub UserForm_QueryClose _
  (Cancel As Integer, CloseMode As Integer)
'   Prevents use of the Close button
    If CloseMode = vbFormControlMenu Then
        Cancel = True
        MsgBox "You must choose save or cancel to close this box", vbInformation, "Close"
    End If
End Sub


Attribute VB_Name = "ProcessUpdate1"
Sub UpdateProgressBar(pctdone As Single, Optional progressBar As StatusBar)
    With progressBar

        ' Update the Caption property of the Frame control.
        .FrameProgress.Caption = Format(pctdone, "0%")

        ' Widen the Label control.
        .LabelProgress.Width = pctdone * _
            (.FrameProgress.Width - 10)
    End With

    ' The DoEvents allows the UserForm to update.
    DoEvents
End Sub



Attribute VB_Name = "Sheet2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "Sheet3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "Sheet4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "Sheet5"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "Standard_Payroll_Import_Format"
Dim Salaried As Boolean
Sub SPI()

'This fixes the salary amounts if need be
    shImport.Sort.SortFields.Clear
    shImport.Sort.SortFields.Add Key:=Range( _
        "B:B"), SortOn:=xlSortOnValues, Order:=xlAscending, DataOption:= _
        xlSortTextAsNumbers
    With shImport.Sort
        .SetRange Range("A:AA")
        .header = xlYes
        .MatchCase = False
        .Orientation = xlTopToBottom
        .SortMethod = xlPinYin
        .Apply
    End With
 'Range("c:d").Insert
'This fixes The salaries
Range("i1").value = "Rate Number"
Range("k1").value = "Amount"
'Range("h1").Value = "Amount"
Range("b2").Activate
Do Until ActiveCell.Row > Cells.Find(what:="*", searchorder:=xlByRows, searchdirection:=xlPrevious).Row
    If Not IsError(Application.VLookup(Format(ActiveCell.value, "@"), Sheets("HRIS").Range("b:f"), 5, False)) Then
        If Application.VLookup(Format(ActiveCell.value, "@"), shHRIS.Range("b:f"), 5, False) = "Y" Then
            Dim salary As Double
            salary = WorksheetFunction.Round(Application.VLookup(Format(ActiveCell.value, "@"), shHRIS.Range("b:g"), 6, False) / 52, 2)
            If salary <> 0 Then
            'If Cells(ActiveCell.Row, 5).value <> Empty And Cells(ActiveCell.Row, 6).value <> Empty Then
                If Cells(ActiveCell.Row, 6).value <> Empty Then
                    Cells(ActiveCell.Row, Columns("i").Column).value = 6
                End If
                If WorksheetFunction.CountIfs(Range("b:b"), Cells(ActiveCell.Row, 2).value, Columns(11), salary) = 0 Then
                    If Cells(ActiveCell.Row, 5).value = "Hourly" Then
                        Cells(ActiveCell.Row, 5).value = "Salary"
                        Cells(ActiveCell.Row, 11).value = salary
                    ElseIf Cells(ActiveCell.Row, 6).value = 40 And _
                        WorksheetFunction.CountIfs(Range("e:e"), "Hourly", Range("b:b"), Cells(ActiveCell.Row, 2).value) = 0 Then
                        Cells(ActiveCell.Row, 11).value = salary
                    End If
                End If
             End If
            
'            If Cells(ActiveCell.Row, 4).value = "Hourly" Then
'                If Cells(ActiveCell.Row, 3).value = 80 Then
'                    Cells(ActiveCell.Row, 4).value = "[PAY]"
'                    Cells(ActiveCell.Row, 3).value = vbNullString
'                    Else
'                        Cells(ActiveCell.Row, 4).value = "Salary"
'                End If
'            End If
'
'            If Cells(ActiveCell.Row, 5).value = "Hourly" Then
'                If Cells(ActiveCell.Row, 6).value = "40" Then
'                    Cells(ActiveCell.Row, 5).value = "[PAY]"
'                    Cells(ActiveCell.Row, 6).value = vbNullString
'                    Cells(ActiveCell.Row, Columns("i").Column).value = vbNullString
'                    Else
'                        Cells(ActiveCell.Row, Columns("i").Column).value = 1
'                End If
'            ElseIf Cells(ActiveCell.Row, 6).value = "Overtime" Then
'                Cells(ActiveCell.Row, Columns("i").Column).value = 1
'            End If
        End If
    End If
    ActiveCell.Offset(1, 0).Activate
Loop



'This puts the columns in the correct order for the SPI format


SPILayout

Range("A1:p1").value = Array("Client ID", "Worker ID", "Org", "Job Number", "Pay Component", "Rate", _
                       "Rate Number", "Hours", "Units", "Line Date", "Amount", "Check Seq Number", "Override State", _
                       "Override Local", "Override Local Jurisdiction", "Labor Assignment")







'This fixes the salary amounts if need be
'Range("k2").Activate
'Dim SalCell As Range
'Do Until WorksheetFunction.CountA(ActiveCell.EntireRow) = 0
'    Set SalCell = ActiveCell
'    EENum = Cells(ActiveCell.Row, 2)
'    If WorksheetFunction.IfError(Application.VLookup(EENum, Sheets("HRIS").Range("B:G"), 5, False), vbNullString) = "Y" Then
'        If ActiveCell.Value <> Empty Then Salary = ActiveCell.Value
'        Do Until Cells(ActiveCell.Row + 1, 2) <> EENum
'            If Cells(ActiveCell.Row, 5).Value = "Overtime" Then Cells(ActiveCell.Row, 7).Value = vbNullString
'            ActiveCell.Offset(1, 0).Activate
'            If ActiveCell.Value <> Empty Then Salary = ActiveCell.Value
'        Loop
'        If Cells(ActiveCell.Row, 5).Value = "Overtime" Then Cells(ActiveCell.Row, 7).Value = vbNullString
'        Range(SalCell, ActiveCell).ClearContents
'        Hours = WorksheetFunction.Sum(Cells(SalCell.Row, 8), Cells(ActiveCell.Row, 8))
'        If Hours < 80 Then
'            Salary = (Salary / 80) * Hours
'        End If
'        If Range(Cells(SalCell.Row, 1), ActiveCell).Find(what:="Regular", LookIn:=xlValues, lookat:=xlWhole, MatchCase:=True) Is Nothing Then
'            SalCell.Value = Salary
'            Else: Range(Cells(SalCell.Row, 1), ActiveCell).Find(what:="Regular", LookIn:=xlValues, lookat:=xlWhole, MatchCase:=True).Offset(0, 6).Value = Salary
'        End If
'    End If
'    ActiveCell.Offset(1, 0).Activate
'Loop


'This does some initial cleaning up
'Dim LastRow As Long
'Dim LastColumn As Long
'
'LastRow = Cells.Find(what:="*", searchorder:=xlByRows, searchdirection:=xlPrevious).Row
'LastColumn = Cells.Find(what:="*", searchorder:=xlByColumns, searchdirection:=xlPrevious).Column
'
'With Range(Cells(1, 1), Cells(LastRow, LastColumn))
'    .Borders.LineStyle = xlContinuous
'End With

Columns.AutoFit
Cells.Font.Bold = False
Cells.Font.Italic = False
Cells.Borders.LineStyle = xlNone
Range(Range("q1"), Range("q1").End(xlDown).End(xlToRight)).Delete
Range(Range("a1").End(xlDown).Offset(1, 0), Range("a1").End(xlDown).Offset(1, 0).End(xlToRight)).Delete



'UpdateProgressBar (0.75)
End Sub

Sub SPILayout()
    
    Dim SPI() As String
    SPI = Split("Client ID,Worker ID,Org,Job Number,Pay Component,Rate,Rate Number,Hours,Units,Line Date," & _
              "Amount,Check Seq Number,Override State,Override Local,Override Local Jurisdiction,Labor Assignment", ",")
    Dim i As Byte
    Dim foundCol As Byte
    For i = LBound(SPI) To UBound(SPI)
        Application.CutCopyMode = False
        foundCol = 0
        If Not Range("1:1").Find(what:=SPI(i), LookIn:=xlValues, lookat:=xlWhole, MatchCase:=True) Is Nothing Then
            foundCol = Range("1:1").Find(what:=SPI(i), LookIn:=xlValues, lookat:=xlWhole, MatchCase:=True).Column
            Range("1:1").Find(what:=SPI(i), LookIn:=xlValues, lookat:=xlWhole, MatchCase:=True).EntireColumn.Cut
        End If
        If foundCol <> i + 1 Then
            Columns(i + 1).Insert
        End If
    Next
End Sub

Function HasSalaryRow(EmployeeID As String) As Boolean
    Dim FirstFound As Range
    Dim CurrentFound As Range
    Set FirstFound = Range("b:b").Cells.Find(what:=EmployeeID, LookIn:=xlValues, lookat:=xlWhole, MatchCase:=True)
    If Cells(FirstFound.Row, 4).value = "[PAY]" Or Cells(FirstFound.Row, 4).value = "Hourly" Or Cells(FirstFound.Row, 4).value = "Salary" Then
        HasSalaryRow = True
        Exit Function
        Else
            Set CurrentFound = Range("b:b").Cells.Find(what:=EmployeeID, after:=FirstFound, LookIn:=xlValues, lookat:=xlWhole, MatchCase:=True)
            Do Until CurrentFound.Row = FirstFound.Row
                If Cells(CurrentFound.Row, 4).value = "[PAY]" Or Cells(CurrentFound.Row, 4).value = "Hourly" Or Cells(CurrentFound.Row, 4).value = "Salary" Then
                    HasSalaryRow = True
                    Exit Function
                End If
                Set CurrentFound = Range("b:b").Cells.Find(what:=EmployeeID, after:=CurrentFound, LookIn:=xlValues, lookat:=xlWhole, MatchCase:=True)
            Loop
    End If
    HasSalaryRow = False
End Function
Attribute VB_Name = "StatusBar"
Attribute VB_Base = "0{39A10180-3ED0-4D0E-ABEF-E0B1759C6AAC}{8CEA4EFE-B078-4360-BA11-94FA0F63BBF9}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private IsStarted As Boolean
Private Sub UserForm_Activate()
    If Not IsStarted Then
        Me.LabelProgress.Width = 0
        IsStarted = True
        Call MainRoutine
    End If
End Sub

Private Sub UserForm_Initialize()
 'Position top/left of Excel App
    Me.Top = Application.Top
    Me.Left = Application.Left
     
     'Approx over top/left cell (depends on toolbars visible)
    Me.Top = Application.Top
    Me.Left = Application.Left
End Sub

Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Workbook_Activate()

End Sub

Private Sub Workbook_Open()
    On Error Resume Next
    ActiveWorkbook.Unprotect "import"
    Cancel_Reformat
    ActiveWorkbook.Protect "import", True, False
    Call Instruct
End Sub

Attribute VB_Name = "Word_Parse_Functions"
Option Explicit
Function WordFound(ByVal Subject_Text As String, ByVal Word_Number As Integer) As String
    
    Subject_Text = Trim(SingleSpace(Subject_Text))
    
    If Word_Number < 1 Or Word_Number > UBound(Split(Subject_Text, " ")) + 1 Then
        WordFound = vbNullString
        Exit Function
        Else
            WordFound = Split(Subject_Text, " ")(Word_Number - 1)
    End If
  

End Function

Function WordCount(ByVal Subject_Text As String)

    Subject_Text = Trim(SingleSpace(Subject_Text))
    
    If Subject_Text <> vbNullString Then
        WordCount = UBound(Split(Subject_Text, " ")) + 1
        Else: WordCount = 0
    End If

End Function


Attribute VB_Name = "frmDataGather"
Attribute VB_Base = "0{0671B36C-A68C-44AD-87D1-6B853F354229}{827BCD1F-BDE5-4EBA-903D-C958D898BBF1}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private ClientBook As Workbook
Private Template As Workbook
Private Sub CmdNext_Click()
    Dim SelectedCount As Byte
    For i = 0 To Me.lstSheets.ListCount - 1
        If Me.lstSheets.Selected(i) = True Then
            SelectedCount = SelectedCount + 1
        End If
    Next
    If SelectedCount = 0 Then
        Dim msg As String
        msg = MsgBox("You must select at least one sheet to continue." & vbNewLine & "Do you want to cancel?", vbYesNo, "Null Data")
        If msg = vbYes Then
            Call Cancel_Reformat
            Else: Exit Sub
        End If
    End If
    Dim s As Byte
    For i = 0 To Me.lstSheets.ListCount - 1
        If Me.lstSheets.Selected(i) = True Then
            'mySheets(s) = Me.lstSheets.List(i)
            's = s + 1
            'If s > UBound(mySheets) Then Exit For
            ClientBook.Sheets(Me.lstSheets.List(i)).Copy after:=Template.Sheets(Template.Sheets.Count)
        End If
    Next
    'Application.WindowState = xlMaximized
    Unload Me
    

End Sub

Private Sub UserForm_Initialize()
    Application.WindowState = xlMinimized
    Me.Top = Application.Top
    Me.Left = Application.Left

End Sub
Private Sub UserForm_QueryClose _
  (Cancel As Integer, CloseMode As Integer)
'   Prevents use of the Close button
    If CloseMode = vbFormControlMenu Then
        Dim msg As String
        msg = MsgBox("Are you sure you want to cancel?", vbYesNo, "Cancel Reformat")
        If msg = vbNo Then
            Cancel = True
            Else
                Cancel_Reformat
        End If
    End If
End Sub

Property Let SetClientBook(value As Workbook)
    Set ClientBook = value
    Me.lstSheets.Clear
    Dim sh As Worksheet
    For Each sh In ClientBook.Sheets
        If Not sh.Cells.Find(what:="*") Is Nothing Then
            Me.lstSheets.AddItem sh.Name
        End If
    Next
End Property

Property Let SetTemplate(value As Workbook)
    Set Template = value
End Property

Attribute VB_Name = "frmWeekNumber"
Attribute VB_Base = "0{870C1FFF-34CC-40AE-8A47-C7DD47F8729F}{EB4C1E3C-53F1-4511-9913-B0966C2A4809}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Public WeekNumber As Byte

Private Sub CmdCancel_Click()
    Cancel_Reformat
    End
End Sub

Private Sub OptionButton2_Click()

End Sub

Private Sub CmdContinue_Click()
    If OptWeek1.value Then
        WeekNumber = 1
    ElseIf OptWeek2.value Then
        WeekNumber = 2
    Else
        MsgBox "You must select a week number to continue", vbCritical, "Null Selection"
        Exit Sub
    End If
    Unload Me
End Sub

Private Sub UserForm_Initialize()
    Me.Top = Application.Top
    Me.Left = Application.Left
End Sub

Private Sub UserForm_QueryClose _
  (Cancel As Integer, CloseMode As Integer)
'   Prevents use of the Close button
    If CloseMode = vbFormControlMenu Then
        Cancel = True
        MsgBox "You must choose select or cancel to close this box", vbInformation, "Close"
    End If
End Sub

Attribute VB_Name = "shBase64"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit


Attribute VB_Name = "shEENumbers"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "shEENumbers1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "shEENumbers2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "shEENumbers3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "shEarnings"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "shHRIS"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "shHome"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "shITextBase64"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Attribute VB_Name = "shImport"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "shJobs"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "shLabor"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "shLibrary64"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Attribute VB_Name = "shNameErrors"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "shNameErrors1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "shNameErrors2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "shNameErrors3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "shNameErrors4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "shSaveNames"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "shSaveNames1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "shSaveNames2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "shSaveNames3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "shSaveNames4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "sh_Base64"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "sh_ITextBase64"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "sh_Library64"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit



INQUEST-PP=macro
