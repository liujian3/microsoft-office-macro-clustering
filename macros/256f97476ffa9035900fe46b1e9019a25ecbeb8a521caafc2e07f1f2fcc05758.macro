Attribute VB_Name = "BrowseCommandsForm"
Attribute VB_Base = "0{BC99493F-2F2D-4DBF-AE66-0C9855058670}{C74BC514-0C5A-4D9D-84FA-39466277BA6D}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Option Explicit

Private Sub CancelButton_Click()
  BrowseCommandsForm.Hide
End Sub

Private Sub CommentNext_Click()
BrowseNext (wdBrowseComment)
End Sub

Private Sub CommentPrevious_Click()
  BrowsePrevious (wdBrowseComment)
End Sub

Private Sub EditsNext_Click()
BrowseNext (wdBrowseEdit)
End Sub

Private Sub EditsPrevious_Click()
BrowsePrevious (wdBrowseEdit)
End Sub

Private Sub EndnoteNext_Click()
  BrowseNext (wdBrowseEndnote)
End Sub

Private Sub EndnotePrevious_Click()
  BrowsePrevious (wdBrowseEndnote)
End Sub


Private Sub FieldPrevious_Click()
  BrowsePrevious (wdBrowseField)
End Sub

Private Sub FieldNext_Click()
  BrowseNext (wdBrowseField)
End Sub

Private Sub FootnoteNext_Click()
  BrowseNext (wdBrowseFootnote)
End Sub

Private Sub FootnotePrecious_Click()
  BrowsePrevious (wdBrowseFootnote)
End Sub

Private Sub GraphicNext_Click()
  BrowseNext (wdBrowseGraphic)
End Sub

Private Sub GraphicPrevious_Click()
  BrowsePrevious (wdBrowseGraphic)
End Sub

Private Sub HeadingNext_Click()
  BrowseNext (wdBrowseHeading)
End Sub

Private Sub HeadingPrevious_Click()
  BrowsePrevious (wdBrowseHeading)
End Sub

Private Sub PageNext_Click()
  BrowseNext (wdBrowsePage)
End Sub

Private Sub PagePrevious_Click()
  BrowsePrevious (wdBrowsePage)
End Sub

Private Sub SectionNext_Click()
  BrowseNext (wdBrowseSection)
End Sub

Private Sub SectionPrevious_Click()
  BrowsePrevious (wdBrowseSection)
End Sub

Private Sub TableNext_Click()
  BrowseNext (wdBrowseTable)
End Sub

Private Sub TablePrevious_Click()
  BrowsePrevious (wdBrowseTable)
End Sub
Attribute VB_Name = "BrowseForm"
Attribute VB_Base = "0{D057E5F9-B4FF-472E-8B10-E89C5673C8DE}{1C6671CC-E2CC-46F9-B4D2-17593D067477}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Sub CancelButton_Click()
  BrowseForm.Hide
End Sub

Private Sub StyleButton_Click()
  With BrowseForm
    If .StyleListbox.ListIndex > -1 Then _
    ContentControlForm.StyleTextbox.Value = .StyleListbox.List(.StyleListbox.ListIndex)
    .Hide
  End With
End Sub
Attribute VB_Name = "Browser"
Option Explicit

Sub ShowBrowser(n As Long)
  Call GiveScreenPoints(hpoints, vpoints)
  With BrowseCommandsForm
    .Top = 0   'vpoints ' - .Height
    .Top = vpoints - .Height
    .Left = hpoints - .Width - 4
    .Show
  End With
End Sub

Sub BrowseNext(n As Long)
  With Application.Browser
    .Target = n
    .Next
  End With
End Sub

Sub BrowsePrevious(n As Long)
  With Application.Browser
    .Target = n
    .Previous
  End With
End Sub

Attribute VB_Name = "ContentControlForm"
Attribute VB_Base = "0{BE0E59B2-E463-4807-88D1-EE8FC9535759}{101356ED-6FBC-4ACB-BBCE-10771C3CFF99}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Option Explicit

Private Sub AddItemButton_Click()
  AddNewItem (1)
End Sub

Private Sub CancelButton_Click()
  ContentControlForm.Hide
End Sub


Private Sub CreateNewButton_Click()
  CreateNewControl (1)
End Sub

Private Sub DeleteItemButton_Click()
  DeleteItem (1)
End Sub

Private Sub GoToNextButton_Click()
  gotoNextControl (1)
End Sub

Private Sub OptionListbox_Click()
 ' MsgBox "in optionlistbox"
End Sub

Private Sub ReftrshButton_Click()
  getParameters (1)
End Sub

Private Sub RenewListButton_Click()
 go_renewlist (1)
End Sub

Private Sub StyleBrowseButton_Click()
  browseStyles (1)
End Sub

Private Sub StyleCheckbox_Click()
  With ContentControlForm
    If .StyleCheckbox.Value Then
      .StyleBrowseButton.Enabled = True
    Else
      .StyleBrowseButton.Enabled = False
    End If
  End With
End Sub

Private Sub UpdateChangesButton_Click()
  updateChanges (1)
End Sub

Private Sub RichTextOption_Click()
  resetType (False)
End Sub

Private Sub TextOption_Click()
  resetType (False)
End Sub

Private Sub PictureOption_Click()
  resetType (False)
End Sub

Private Sub ComboOption_Click()
  resetType (True)
End Sub

Private Sub DropDownOption_Click()
  resetType (True)
End Sub

Private Sub BuildingBlockOption_Click()
  resetType (False)
End Sub

Private Sub DateOption_Click()
  resetType (False)
End Sub

Private Sub GroupOption_Click()
  resetType (False)
End Sub

Private Sub CheckBoxOption_Click()
  resetType (False)
End Sub

Private Sub NoneOption_Click()
  resetType (False)
End Sub

Attribute VB_Name = "ContentControls"
Option Explicit

Public InhibitClick As Boolean
Dim vpoints As Single
Dim hpoints As Single
Public oCC As ContentControl

Sub GO_CONTROLS(n As Long)
 Call GiveScreenPoints(hpoints, vpoints)
  getParameters (1)

  With ContentControlForm
    .StartUpPosition = 0
    .Top = 0
    .Left = hpoints - .Width - 6
    .Show
  End With
End Sub

Sub updateChanges(n As Long)
Dim sz As Single
'  getParameters (1)
  If oCC Is Nothing Then Exit Sub
  With ContentControlForm
    oCC.LockContentControl = .CannotDeleteCheckbox.Value
    oCC.LockContents = .CannotEditCheckbox.Value
    oCC.Title = .TitleTextbox.Value
    oCC.Tag = .TagTextbox.Value
    If oCC.Type <> 5 And oCC.Type <> 8 And oCC.Type <> 2 And oCC.Type <> 4 Then
      If oCC.LockContents = True Then
        .DisplayTextbox.Value = "LOCKED"
      Else
        If .DisplayTextbox.Value <> "LOCKED" And _
          .DisplayTextbox.Value <> "" Then oCC.SetPlaceholderText Text:=.DisplayTextbox.Value
      End If
    '  oCC.SetPlaceholderText , , .DisplayTextbox.Value
    End If
    If IsNumeric(.DisplaySizeTextbox.Value) Then
      sz = Val(.DisplaySizeTextbox.Value)
    Else
      sz = 12
    End If
    oCC.Range.Font.Size = sz
    ActiveDocument.Styles("Placeholder Text").Font.ColorIndex = getColor
'    oCC.Range.Font.Color = getColor
    If .StyleCheckbox Then ' do last to overwrite font changes
      ' style must be a character style *********
      On Error GoTo errstyle
      oCC.DefaultTextStyle = .StyleTextbox.Value
      
      On Error GoTo 0
    End If
 '   oCC.Range.Text = .TextTextbox.Value

  End With
  getParameters (1)
  Exit Sub
errstyle:
  MsgBox "Error in applying style. Style must be a character style"
  getParameters (1)
End Sub

Sub getParameters(n As Long)
Dim k As Long
Dim j As Long
Dim dropdownList As ContentControlListEntries
  For Each oCC In ActiveDocument.ContentControls
    If Selection.InRange(oCC.Range) Then
      oCC.Range.Select
      GoTo foundcc
    End If
  Next oCC
  If Selection.Range.ContentControls.Count > 0 Then
    Set oCC = Selection.Range.ContentControls(1)
  Else
    Set oCC = Nothing
    ContentControlForm.NoneOption.Value = True
    Exit Sub
  End If
foundcc:
  InhibitClick = True
  k = oCC.Type
  With ContentControlForm
    .TitleTextbox.Value = oCC.Title
    .TagTextbox.Value = oCC.Tag
    Select Case k
      Case 0
        .RichTextOption.Value = True
      Case 1
        .TextOption.Value = True
      Case 2
        .PictureOption.Value = True
      Case 3
        .ComboOption.Value = True
      Case 4
        .DropDownOption.Value = True
      Case 5
        .BuildingBlockOption.Value = True
      Case 6
        .DateOption.Value = True
      Case 7
        .GroupOption.Value = True
      Case 8
        .CheckBoxOption.Value = True
      Case Else
        .NoneOption.Value = True
    End Select
    ' after control type change set title & tag
    .TitleTextbox.Value = oCC.Title
    .TagTextbox.Value = oCC.Tag
    .DisplayTextbox.Value = oCC.Range.Text
    .DisplaySizeTextbox.Value = Trim(str(oCC.Range.Font.Size))
    On Error Resume Next  ' overcomes bug
    If k = 0 Or k = 1 Then .MultiParadCheckbox.Value = oCC.MultiLine
    On Error GoTo 0
    .CannotDeleteCheckbox = oCC.LockContentControl
    .CannotEditCheckbox = oCC.LockContents
    
    If k = 3 Or k = 4 Then
       .OptionListbox.Enabled = True
       .DeleteItemButton.Enabled = True
      .AddItemButton.Enabled = True
       Set dropdownList = oCC.DropdownListEntries
       If dropdownList.Count > 0 Then
        .OptionListbox.Clear
         For j = 1 To dropdownList.Count
          .OptionListbox.AddItem dropdownList(j).Text
         Next j
       End If
    Else
      .OptionListbox.Enabled = False
      .DeleteItemButton.Enabled = False
      .AddItemButton.Enabled = False
    End If
    If Trim(oCC.DefaultTextStyle) = "" Then
      .StyleCheckbox = False
      .StyleTextbox = ""
    Else
      .StyleTextbox.Value = oCC.DefaultTextStyle
      .StyleCheckbox = False
    End If
    
    .StyleTextbox.Value = oCC.DefaultTextStyle
    
    'j = oCC.Range.Font.ColorIndex
    j = ActiveDocument.Styles("Placeholder Text").Font.ColorIndex
    Select Case j
      Case wdBlack, wdAuto
        .BlackOption = True
      Case wdRed
        .RedOption = True
      Case wdBlue
        .BlueOption = True
      Case wdGreen
        .GreenOption = True
      Case wdYellow
        .YellowOption = True
      Case Else
 ' MsgBox "color=" & j
        .GreyOption = True
    End Select
   ' .TextTextbox.Value = oCC.Range.Text
    .ContentCountLlabel = str(ActiveDocument.ContentControls.Count) & " Content Controls"
  End With
  InhibitClick = False
End Sub


Sub DeleteItem(n As Long)
Dim m As Long
  With ContentControlForm.OptionListbox
    m = .ListIndex
    If m > -1 Then
      .RemoveItem m
    End If
  End With
End Sub

Sub AddNewItem(n As Long)
Dim s As String
  s = InputBox("new item", "")
  If s <> "" Then ContentControlForm.OptionListbox.AddItem s
End Sub

Sub go_renewlist(n As Long)
  On Error Resume Next
  putList
End Sub

Private Sub putList()
Dim j As Long
Dim k As Long
Dim s As String
  With ContentControlForm.OptionListbox
    k = .ListCount
    If k < 1 Then Exit Sub
    oCC.DropdownListEntries.Clear
    For j = 0 To k - 1
      s = .List(j)
      If Trim(s) <> "" Then oCC.DropdownListEntries.Add (s)
    Next j
  End With
End Sub

Sub CreateNewControl(n As Long)
Dim k As Long
Dim sz As Single
Dim dispText As String
Dim s As String
  InhibitClick = True
  s = Trim(Selection.Range.Text)
  If s <> "" Then ContentControlForm.DisplayTextbox.Value = s
  dispText = ""
  If Trim(ContentControlForm.DisplayTextbox.Value) <> "" Then
    dispText = ContentControlForm.DisplayTextbox.Value
  Else
    If s <> "" Then
      dispText = s
    Else
      dispText = "Enter text here"
    End If
  End If
  sz = Selection.Range.Font.Size
  k = getType
  If k > 8 Then GoTo err1
  On Error GoTo err1
  
  Set oCC = ActiveDocument.ContentControls.Add(k)
  
  'oCC.SetPlaceholderText Text:="qwerty" ' **** retains grey & select all ****
  
  On Error GoTo err2
On Error GoTo 0
  If k = 6 Then dispText = "Date"
  With ContentControlForm
    .TitleTextbox.Value = ""
    If .ShowTitleCheckbox Then .TitleTextbox.Value = dispText
    .TagTextbox.Value = dispText
If k <> 4 Then oCC.Title = Left(.TitleTextbox.Value, 40) ' **********

    oCC.Tag = Left(.TagTextbox.Value, 40)
    Select Case k
      Case 0, 1, 3, 4, 5, 6


         If k <> 4 Then oCC.SetPlaceholderText Text:=dispText
         
       '  oCC.SetPlaceholderText , , dispText
 
          .DisplaySizeTextbox.Value = Trim(str(sz))
 '       End If
        oCC.Range.Font.Size = sz
   '     If k <> 5 Then oCC.Range.Font.Color = getColor
        If k <> 5 Then ActiveDocument.Styles("Placeholder Text").Font.ColorIndex = getColor
        If k = 3 Or k = 4 Then putList
        oCC.Range.Select
        Application.Dialogs(wdDialogContentControlProperties).Show
        oCC.LockContentControl = .CannotDeleteCheckbox.Value
        oCC.LockContents = .CannotEditCheckbox.Value
      Case 2
        oCC.SetPlaceholderText , , "Picture holder"
      Case 7
        GoTo err1
      Case 8
        oCC.Range.Select
        Application.Dialogs(wdDialogContentControlProperties).Show
        oCC.LockContentControl = .CannotDeleteCheckbox.Value
        oCC.LockContents = .CannotEditCheckbox.Value
    End Select
  End With
  Selection.MoveEnd unit:=wdCharacter, Count:=1
  Selection.Start = Selection.End
  DoEvents
  InhibitClick = False
    ContentControlForm.TitleTextbox.Value = ""
    ContentControlForm.TagTextbox.Value = ""
  Exit Sub
err1:
  If Err.Number = 4605 Then
    MsgBox "Error. Selection is already in a control."
  Else
    MsgBox "Error. Could not create control"
  End If
  InhibitClick = False
  Exit Sub
err2:
  MsgBox "Control created but error in parameter setting"
  On Error Resume Next
  
  InhibitClick = False
End Sub

Sub resetType(isList As Boolean)
  With ContentControlForm
    .DeleteItemButton.Enabled = isList
    .AddItemButton.Enabled = isList
    .TitleTextbox.Value = ""
    .TagTextbox.Value = ""
    .DisplayTextbox.Value = ""
    .OptionListbox.Enabled = isList
  End With
  If Not InhibitClick Then Set oCC = Nothing
End Sub


Function getColor() As Long
  getColor = wdGray50
  With ContentControlForm
    If .BlackOption Then getColor = wdBlack
    If .RedOption Then getColor = wdRed
    If .BlueOption Then getColor = wdBlue
    If .GreenOption Then getColor = wdGreen
    If .YellowOption Then getColor = wdYellow
    If .GreyOption Then getColor = wdGray50
  End With
End Function

Function getType() As Long
  getType = -1
  With ContentControlForm
    If .RichTextOption Then getType = 0
    If .TextOption Then getType = 1
    If .PictureOption Then getType = 2
    If .ComboOption Then getType = 3
    If .DropDownOption Then getType = 4
    If .BuildingBlockOption Then getType = 5
    If .DateOption Then getType = 6
    If .GroupOption Then getType = 7
    If .CheckBoxOption Then getType = 8
  End With
End Function

Sub gotoNextControl(n As Long)
Dim oCC As ContentControl
Dim xa As Long
   xa = Selection.Range.End
   For Each oCC In ActiveDocument.ContentControls
     If oCC.Range.Start > xa Then
       oCC.Range.Select
       getParameters (1)
       Exit Sub
     End If
   Next oCC
   MsgBox "No controls beyond here"
End Sub

Sub browseStyles(n As Integer) ' must be a character style
Dim sty As Style
Dim k As Long
Dim stl() As String
  ReDim stl(0)
  k = 0
  For Each sty In ActiveDocument.Styles
    If sty.Type = wdStyleTypeCharacter And sty.InUse Then
      ReDim Preserve stl(k)
      stl(k) = sty.NameLocal
      k = k + 1
    End If
   Next sty
   With BrowseForm.StyleListbox
     .ListIndex = -1
     .List = stl
     BrowseForm.Show
   End With
End Sub
  

Attribute VB_Name = "EdgeToEdgeForm"
Attribute VB_Base = "0{CFBF13A8-2E98-46A0-901A-1D454C435B4F}{EB396C05-4DC4-4E36-803C-BCD18BCBDA95}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Option Explicit

Private Sub CancelButton_Click()
  EdgeToEdgeForm.Hide
End Sub

Private Sub ExpandToBordersButton_Click()
  Go_EdgeToEdge (False)
End Sub

Private Sub ExpandToEdgeButton_Click()
  Go_EdgeToEdge (True)
End Sub
Attribute VB_Name = "Module1"
Option Explicit
' reference
' http://gregmaxey.mvps.org/word_tip_pages/customize_ribbon_main.html

Sub openUtility(uFile As String, uName As String)
Dim sPath As String
 On Error GoTo Uerr
  sPath = "C:\Users\" & Environ("username") & "\AppData\Roaming\Microsoft\Word\STARTUP\"
  AddIns(sPath & uFile).Installed = True
  Application.Run macroname:=uName
  Exit Sub
Uerr:
  MsgBox "Error in opening module. File " & uFile & " not in the folder" & vbCrLf & sPath
End Sub

Function CheckFileName(uFile As String, uName As String) As Boolean
Dim sPath As String
 On Error GoTo Uerr
  sPath = "C:\Users\" & Environ("username") & "\AppData\Roaming\Microsoft\Word\STARTUP\"
  AddIns(sPath & uFile).Installed = True
  Application.Run macroname:=uName
  CheckFileName = True
  Exit Function
Uerr:
  MsgBox "Module " & uFile & " is not available in the folder" & vbCrLf & sPath & vbCrLf
  CheckFileName = False
End Function

Sub RunLauncher(control As IRibbonControl)
  If CheckFileName("Launcher.dotm", "GO_LAUNCHER") Then Application.Run macroname:="GO_LAUNCHER"
'   Call openUtility("Launcher.dotm", "GO_LAUNCHER")
End Sub

Sub BrowseCommandsRoutine(control As IRibbonControl)
  Browser.ShowBrowser (1)
End Sub

Sub RunStyleUtilities(control As IRibbonControl)
  If CheckFileName("StyleUtilities.dotm", "GO_UTILITIES") Then Application.Run macroname:="GO_UTILITIES"
'  Call openUtility("StyleUtilities.dotm", "GO_UTILITIES")
End Sub
Sub RunTextEditing(control As IRibbonControl)
  If CheckFileName("TextEditing.dotm", "GO_TEXTEDIT") Then Application.Run macroname:="GO_TEXTEDIT"
 ' Call openUtility("TextEditing.dotm", "GO_TEXTEDIT")
End Sub

Sub RunBulletsandNumbering(control As IRibbonControl)
   
   If CheckFileName("BullNum.dotm", "GO_BULNUM") Then Application.Run macroname:="GO_BULNUM"
'  Call openUtility("BullNum.dotm", "GO_BULNUM")
End Sub

Sub RunFields(control As IRibbonControl)
  If CheckFileName("FieldsEdit.dotm", "GO_FIELDS") Then Application.Run macroname:="GO_FIELDS"
'  Call openUtility("FieldsEdit.dotm", "GO_FIELDS")
End Sub

Sub RunTableColumnTabs(control As IRibbonControl)
  If CheckFileName("TableColumnTabs.dotm", "GO_TABLECOLUMNTABS") Then Application.Run macroname:="GO_TABLECOLUMNTABS"
'  Call openUtility("TableColumnTabs.dotm", "GO_TABLECOLUMNTABS")
End Sub

Sub RunTableEditing(control As IRibbonControl)
  If CheckFileName("TableEditing.dotm", "GO_TableEditing") Then Application.Run macroname:="GO_TableEditing"
 '  Call openUtility("TableEditing.dotm", "GO_TableEditing")
 End Sub

Sub RunShapes(control As IRibbonControl)
  If CheckFileName("ShapesEdit.dotm", "GO_SHAPES") Then Application.Run macroname:="GO_SHAPES"
  ' Call openUtility("ShapesEdit.dotm", "GO_SHAPES")
End Sub

Sub RunTOCGeneration(control As IRibbonControl)
  If CheckFileName("TOCGenerator.dotm", "GO_TOC") Then Application.Run macroname:="GO_TOC"
 ' Call openUtility("TOCGenerator.dotm", "GO_TOC")
End Sub

Sub RunStatistics(control As IRibbonControl)
  If CheckFileName("DocStats.dotm", "GO_DOCSTATS") Then Application.Run macroname:="GO_DOCSTATS"
 ' Call openUtility("DocStats.dotm", "GO_DOCSTATS")
End Sub

Sub RunHotKeys(control As IRibbonControl)
  If CheckFileName("HotKeyEditing.dotm", "GO_HOTKEY") Then Application.Run macroname:="GO_HOTKEY"
 ' Call openUtility("HotKeyEditing.dotm", "GO_HOTKEY")
End Sub

Sub RunSpeller(control As IRibbonControl)
  If CheckFileName("SpellerEdit.dotm", "GO_SPELLER") Then Application.Run macroname:="GO_SPELLER"
  Call openUtility("SpellerEdit.dotm", "GO_SPELLER")
End Sub
Attribute VB_Name = "PictureForm"
Attribute VB_Base = "0{34FD98B1-F691-423C-BA62-4FDF4C09AC77}{7986CF54-BE30-4297-95D5-F32741CDCE71}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Option Explicit

Private Sub AddPictureButton_Click()
  insertPicture (1)
End Sub

Private Sub BrowseButton_Click()
  GoPictures (1)
End Sub

Private Sub CancelButton_Click()
  PictureForm.Hide
End Sub

Private Sub CursorPositionOption_Click()
  showSizeFrame (True)
End Sub

Private Sub BackCoverOption_Click()
  showSizeFrame (False)
End Sub

Private Sub FrontCoverOption_Click()
  showSizeFrame (False)
End Sub

Private Sub FloatingOption_Click()
  With PictureForm
    .WrapAroundOption.Enabled = True
    .TopBottomOption.Enabled = True
  End With
End Sub

Private Sub InLineOption_Click()
  With PictureForm
    .WrapAroundOption.Enabled = False
    .TopBottomOption.Enabled = False
  End With
End Sub


Attribute VB_Name = "PicturesAndImages"
Option Explicit
Public hpoints As Single
Public vpoints As Single

Sub ControlsRoutine(control As IRibbonControl)
  GO_CONTROLS (1)
End Sub

Sub EdgeToEdgeRoutine(control As IRibbonControl)
  showEdgeToEdge
End Sub

Private Sub showEdgeToEdge()
  Call GiveScreenPoints(hpoints, vpoints)
  With EdgeToEdgeForm
    .StartUpPosition = 0
    .Top = 5
    .Left = (hpoints - .Width)
    .Show
  End With
End Sub

Sub PictureRoutine(control As IRibbonControl)
  addPictures (1)
End Sub

Sub addpictur()
  EdgeToEdgeForm.Show
End Sub

Sub showSizeFrame(isVisible As Boolean)
  PictureForm.SizeFrame.Visible = isVisible
End Sub

Sub addPictures(n As Long) ' 0=cover, 1=picture
  Call GiveScreenPoints(hpoints, vpoints)
  With PictureForm
    .InLineOption.Value = True
    .FloatingOption.Value = False
    .WrapAroundOption.Value = False
    .BackgroundOption.Value = False
    If n = 0 Then  ' ????????????????????????????????????????
'      .InsertCaptionCheckbox.Enabled = False
'      .FrontCoverOption.Value = True
'      .CursorPositionOption.Enabled = False
'      .Caption = "Insert cover picture and crop to fit"
'      .PercentTextbox.Value = "100"
'      .InsertCaptionCheckbox.Value = False
'      .PageBackgroundOption.Value = True
    Else
      .InsertCaptionCheckbox.Enabled = True
      .ActualSizeOption.Value = True
      .CursorPositionOption = True
      .CursorPositionOption.Enabled = True
      .Caption = "Insert picture"
      .InsertCaptionCheckbox.Value = False
      .TopBottomOption.Value = True
      showSizeFrame (True)
    End If
    .StartUpPosition = 0
    .Top = 5
    .Left = (hpoints - .Width)
    .Show
  End With
End Sub

Sub insertPicture(n As Long) ' from insert picture button
Dim picFileName As String
Dim k As Long
Dim wdthPoints As Long
Dim pgeWidth As Single
Dim pgeHeight As Single
Dim origHeight As Single
Dim origWidth As Single
Dim origRatio As Single
Dim cropPoints As Single
Dim hScale As Single
Dim vScale As Single
Dim brightFact As Single
Dim lExcess As Long
Dim aShape As Shape
Dim aInlineShape As InlineShape
Dim cfact As Single
Dim CursorPos As Range
   
  brightFact = Val(PictureForm.BrightnessTextbox.Value)
  If brightFact <= 100 And brightFact >= 5 Then
    brightFact = 1 - brightFact / 200
  Else
    MsgBox "ERROR: Brightness factor must be in the range 5 to 100%"
    Exit Sub
  End If
  With PictureForm
    picFileName = .TemplateTextBox & .TemplateNameTextbox
    If picFileName = "" Then
      MsgBox "No picture file specified"
      Exit Sub
    End If
  End With
  If PictureForm.PageBackgroundOption Then
    Call setupPicture(picFileName, brightFact, True)
    Exit Sub
  End If
  
  If PictureForm.PercentOption Then
      cfact = Val(PictureForm.PercentTextbox.Value)
      If cfact < 10 Or cfact > 120 Then
        MsgBox "Invalid width percent"
        Exit Sub
      End If
  End If
  
  On Error GoTo PERR
  With PictureForm
    picFileName = .TemplateTextBox & .TemplateNameTextbox
    If picFileName = "" Then
      MsgBox "No picture file specified"
      Exit Sub
    End If
    
    If .FrontCoverOption Or .BackCoverOption Then
      ' **** insert at front or back of document ****
      With ActiveDocument
        If PictureForm.FrontCoverOption Then
          .Bookmarks("\StartOfDoc").Range.Select
        Else
          .Bookmarks("\EndOfDoc").Range.Select
        End If
        Selection.InsertBreak Type:=wdSectionBreakNextPage
        k = Selection.Range.Information(wdActiveEndSectionNumber)
        .Sections(k).Headers(wdHeaderFooterPrimary).LinkToPrevious = False
        .Sections(k).Footers(wdHeaderFooterPrimary).LinkToPrevious = False
      
        .Sections(k).Headers(wdHeaderFooterPrimary).Range.Delete
        .Sections(k).Footers(wdHeaderFooterPrimary).Range.Delete
        If PictureForm.FrontCoverOption Then .Bookmarks("\StartOfDoc").Range.Select
        
        Set aShape = ActiveDocument.Shapes.AddPicture(FileName:= _
             picFileName, LinkToFile:=False, SaveWithDocument:=True)
        
'        aInlineShape = Selection.InlineShapes.AddPicture(FileName:= _
 '       picFileName, LinkToFile:=False, SaveWithDocument:=True)
      End With
     
      Call setEdgeToEdge(aShape, brightFact, False)
      
   ' ############################################
    Else ' **** insert at  cursor ****
      Set CursorPos = Selection.Range
    '  CursorPos.MoveEnd unit:=wdParagraph, Count:=1
      
      CursorPos.Collapse direction:=wdCollapseEnd
      k = Selection.Range.Information(wdActiveEndSectionNumber)
      With ActiveDocument.Sections(k).PageSetup
        wdthPoints = .PageWidth - .LeftMargin - .RightMargin
      End With
      If .PercentOption Then wdthPoints = wdthPoints * cfact / 100

      If PictureForm.InLineOption Then  'And Not PictureForm.PageBackgroundOption Then
         Set aInlineShape = Selection.InlineShapes.AddPicture(FileName:= _
          picFileName, LinkToFile:=False, SaveWithDocument:=True)
          If PictureForm.PageWidthOption Or PictureForm.PercentOption Then
            With aInlineShape
              .LockAspectRatio = msoTrue
              .Width = wdthPoints
              .LockAspectRatio = msoFalse
              .PictureFormat.Brightness = brightFact
            End With
          End If
      Else ' ****** floating image *************
        Selection.Paragraphs(1).Range.Select
        Selection.Collapse
        Selection.TypeText vbCrLf
        Selection.MoveLeft unit:=wdCharacter
        Set CursorPos = Selection.Range
        Set aInlineShape = Selection.InlineShapes.AddPicture(FileName:= _
             picFileName, LinkToFile:=False, SaveWithDocument:=True)
           ' ***** bottom of picture will be at cursor position ******
          Set aShape = aInlineShape.ConvertToShape
          With aShape
            'If PictureForm.PageBackgroundOption Then
            '  Call setEdgeToEdge(aShape, brightFact) '
            '  Exit Sub
            'Else
      '   .Top = .Top + .Height
              If PictureForm.PageWidthOption Or PictureForm.PercentOption Then
                .LockAspectRatio = msoTrue
                .Width = wdthPoints
                .LockAspectRatio = msoFalse
              End If
              If PictureForm.TopBottomOption Then .WrapFormat.Type = wdWrapTopBottom
              If PictureForm.WrapAroundOption Then .WrapFormat.Type = wdWrapTight
              If PictureForm.BackgroundOption Then .WrapFormat.Type = wdWrapBehind
     '         .TopRelative = -.Height
              
              .PictureFormat.Brightness = brightFact
            
           ' End If
          End With
      End If
    End If
    ' ####################################################
    If .InsertCaptionCheckbox.Value And Not PictureForm.PageBackgroundOption _
        And Not .InLineOption And Not .FrontCoverOption And Not .BackCoverOption Then
      On Error Resume Next
      CursorPos.Select
   '   Selection.TypeText vbCrLf
   ' aShape.Select
    '  Selection.MoveRight unit:=wdCharacter, Count:=1
   
   '   Selection.TypeText vbCrLf

      Selection.Style = ActiveDocument.Styles("Caption")
  '    If pictureForm.PercentOption Then Selection.ParagraphFormat.Alignment = wdAlignParagraphCenter
      Selection.TypeText "Figure "
      Selection.Fields.Add Range:=Selection.Range, Type:=wdFieldEmpty, _
          PreserveFormatting:=False, _
          Text:="SEQ Figure \* ARABIC"
    End If
 
  End With
  Exit Sub
PERR:
  MsgBox "Error when trying to save image"
End Sub

Sub Go_EdgeToEdge(toEdges As Boolean)
Dim aShape As Shape
Dim aInlineShape As InlineShape
Dim k As Long
Dim brightFact As Single
  Set aShape = Nothing
  If Selection.ShapeRange.Count > 0 Then
    Set aShape = Selection.ShapeRange(1)
  Else
    If Selection.InlineShapes.Count > 0 Then
      Set aInlineShape = Selection.InlineShapes(1)
      Set aShape = aInlineShape.ConvertToShape
    End If
  End If
  If aShape Is Nothing Then
    MsgBox "ERROR: An image has not been selected"
    EdgeToEdgeForm.Hide
    Exit Sub
  End If
  
  brightFact = Val(EdgeToEdgeForm.BrightnessTextbox.Value)
  If brightFact <= 100 And brightFact >= 5 Then
    brightFact = 1 - brightFact / 200
  Else
    MsgBox "ERROR: Brightness factor must be in the range 5 to 100%"
    Exit Sub
  End If
  EdgeToEdgeForm.Hide
  Call setEdgeToEdge(aShape, brightFact, toEdges)
End Sub

Sub setEdgeToEdge(aShape As Shape, brightFact As Single, toEdges As Boolean)
Dim pgeWidth As Single
Dim pgeHeight As Single
Dim origHeight As Single
Dim origWidth As Single
Dim cropPoints As Single
Dim hScale As Single
Dim vScale As Single
Dim k As Long
   On Error GoTo D_ERR
   If aShape.Type = msoPicture Then
     With aShape.Duplicate
       .ScaleHeight 1, True
       .ScaleWidth 1, True
       origHeight = .Height
       origWidth = .Width
       .Delete
     End With
   Else
     origHeight = aShape.Height
     origWidth = aShape.Width
   End If

   k = Selection.Range.Information(wdActiveEndSectionNumber)
   With ActiveDocument.Sections(k).PageSetup
      pgeWidth = .PageWidth
      pgeHeight = .PageHeight
      If Not toEdges Then
        pgeWidth = pgeWidth - .LeftMargin - .RightMargin
        pgeHeight = pgeHeight - .TopMargin - .BottomMargin
      End If
    End With
        
   With aShape
      hScale = pgeWidth / .Width
      vScale = pgeHeight / .Height
      If .Type = msoPicture Then
        If hScale > vScale Then ' crop height
            cropPoints = (1# - vScale / hScale) * origHeight / 2#
            .PictureFormat.CropTop = cropPoints
            .PictureFormat.CropBottom = cropPoints
        Else ' crop width
            cropPoints = (1# - hScale / vScale) * origWidth / 2#
            .PictureFormat.CropLeft = cropPoints
            .PictureFormat.CropRight = cropPoints
        End If
        .PictureFormat.Brightness = brightFact
      Else ' *** non picture ****
        .LockAspectRatio = msoFalse
        If hScale > vScale Then .Height = .Height * vScale / hScale _
        Else .Width = .Width * hScale / vScale
      End If
      .LockAspectRatio = msoFalse
      .Height = pgeHeight
      .Width = pgeWidth
      If toEdges Then ' **** edge to edge *****
          .RelativeHorizontalPosition = wdRelativeHorizontalPositionPage
          .Left = 0
          .RelativeVerticalPosition = wdRelativeVerticalPositionPage
          .Top = 0
          If hScale > vScale Then .Width = pgeWidth Else .Height = pgeHeight
      Else ' ******** margin to margin *********
           .RelativeHorizontalPosition = wdRelativeHorizontalPositionMargin
          .Left = 0
          .RelativeVerticalPosition = wdRelativeVerticalPositionMargin
          .Top = 0
      End If
      .WrapFormat.Type = wdWrapBehind
      .LockAspectRatio = msoTrue
      .RelativeVerticalPosition = wdRelativeVerticalPositionPage
      .LockAnchor = True
    End With
    ActiveWindow.ScrollIntoView aShape
    Exit Sub
D_ERR:
    MsgBox "Error in positioning image"
End Sub

Private Sub setupPicture(picFileName As String, brightFact As Single, paperEdges As Boolean)
Dim pgeWidth As Single
Dim pgeHeight As Single
Dim origHeight As Single
Dim origWidth As Single
Dim origRatio As Single
Dim cropPoints As Single
Dim hScale As Single
Dim vScale As Single
Dim sectNo As Long
   Selection.Collapse
   sectNo = Selection.Range.Information(wdActiveEndSectionNumber)
   With Selection.InlineShapes.AddPicture(FileName:= _
     picFileName, LinkToFile:=False, SaveWithDocument:=True).ConvertToShape
        origHeight = .Height
        origWidth = .Width
        origRatio = origHeight / origWidth
        With ActiveDocument.Sections(sectNo).PageSetup
          If paperEdges Then
            pgeWidth = .PageWidth
            pgeHeight = .PageHeight
          Else
            pgeWidth = .PageWidth - .LeftMargin - .RightMargin
            pgeHeight = .PageHeight - .TopMargin - .BottomMargin
          End If
        End With
        hScale = pgeWidth / .Width
        vScale = pgeHeight / .Height
        If hScale > vScale Then ' crop height
            cropPoints = (1# - vScale / hScale) * origHeight / 2#
            .PictureFormat.CropTop = cropPoints
            .PictureFormat.CropBottom = cropPoints
        Else ' crop width
            cropPoints = (1# - hScale / vScale) * origWidth / 2#
            .PictureFormat.CropLeft = cropPoints
            .PictureFormat.CropRight = cropPoints
        End If
        .PictureFormat.Brightness = brightFact
        .LockAspectRatio = msoTrue
        .Height = pgeHeight
        If paperEdges Then
          .RelativeHorizontalPosition = wdRelativeHorizontalPositionPage
          .Left = 0
          .RelativeVerticalPosition = wdRelativeVerticalPositionPage
          .Top = 0
        Else
          .RelativeHorizontalPosition = wdRelativeHorizontalPositionMargin
          .Left = 0
          .RelativeVerticalPosition = wdRelativeVerticalPositionMargin
          .Top = 0
        End If
        .WrapFormat.Type = wdWrapBehind
        .LockAspectRatio = msoTrue
        .LockAnchor = True
    End With
    ActiveWindow.ScrollIntoView Selection.Range
End Sub

Sub GoPictures(n As Long) ' browses to picture ****
Dim fDialog As FileDialog
Dim result As Integer
Dim s As String
Dim ss As String
Dim nTemplate As String
  s = Options.DefaultFilePath(wdUserTemplatesPath)
s = Environ("APPDATA") & "\Microsoft\Word\STARTUP"
s = Templates(1).Path
s = "C:"
  Set fDialog = Application.FileDialog(msoFileDialogFilePicker)
  fDialog.AllowMultiSelect = False
  fDialog.Title = "Select a picture file"
  fDialog.InitialFileName = s & "\"
  fDialog.Filters.Clear
  fDialog.Filters.Add "jpg files", "*.gif; *.jpg; *.jpeg; *.bnp; *.gif; *.tif", 1
  
  If fDialog.Show = -1 Then
    nTemplate = fDialog.SelectedItems(1)
    s = Right$(nTemplate, Len(nTemplate) - InStrRev(nTemplate, "\"))
    PictureForm.TemplateNameTextbox = s
    PictureForm.TemplateTextBox.Value = Left$(nTemplate, InStrRev(nTemplate, "\"))
  End If
End Sub

Sub LandscapeRoutine(control As IRibbonControl)
Dim aRange As Range
Dim bRange As Range
Dim startSection As Long
Dim kPara As Long
  kPara = Selection.Paragraphs.Count
  Set bRange = Selection.Range
  bRange.Start = Selection.Paragraphs(1).Range.Start
  Set aRange = Selection.Paragraphs(kPara).Range
  aRange.Collapse direction:=wdCollapseEnd
  bRange.Collapse direction:=wdCollapseStart
  bRange.Select
  startSection = Selection.Range.Information(wdActiveEndSectionNumber)
  bRange.InsertBreak Type:=wdSectionBreakNextPage
  aRange.InsertBreak Type:=wdSectionBreakNextPage
  aRange.Select
  Selection.MoveStart Count:=-1
  Selection.Collapse direction:=wdCollapseStart
  ActiveDocument.Sections(startSection + 1).PageSetup.Orientation = wdOrientLandscape
  ActiveDocument.Sections(startSection + 1).Footers(wdHeaderFooterPrimary).LinkToPrevious = False
  ActiveDocument.Sections(startSection + 2).Footers(wdHeaderFooterPrimary).LinkToPrevious = False
  ActiveDocument.Sections(startSection + 1).Headers(wdHeaderFooterPrimary).LinkToPrevious = False
  ActiveDocument.Sections(startSection + 2).Headers(wdHeaderFooterPrimary).LinkToPrevious = False
End Sub

Attribute VB_Name = "ThisDocument"
Attribute VB_Base = "0{00020906-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "UtilityPrograms"
Option Explicit
'  #If VBA7 to see if working in VBA 7 environment
#If Win64 Then
  Private Declare PtrSafe Function GetDC Lib "User32" (ByVal hWnd As Long) As Long
  Private Declare PtrSafe Function ReleaseDC Lib "User32" ( _
    ByVal hWnd As Long, _
    ByVal hDC As Long) As Long
  Private Declare PtrSafe Function GetDeviceCaps Lib "gdi32" ( _
    ByVal hDC As Long, _
    ByVal nIndex As Long) As Long
  Private Declare PtrSafe Function GetSystemMetrics Lib "User32" ( _
    ByVal nIndex As Long) As Long
#Else
' ***** "32 bit version *****
  Private Declare Function GetDC Lib "User32" (ByVal hWnd As Long) As Long
  Private Declare Function ReleaseDC Lib "User32" ( _
    ByVal hWnd As Long, _
    ByVal hDC As Long) As Long
  Private Declare Function GetDeviceCaps Lib "gdi32" ( _
    ByVal hDC As Long, _
    ByVal nIndex As Long) As Long
  Private Declare Function GetSystemMetrics Lib "User32" ( _
    ByVal nIndex As Long) As Long
#End If

Const PixelX = 88
Const PixelY = 90
Const TwipsPerInch = 1440
Private Const FullScreenX = 16 ' also 0 gives overall screenwidth
Private Const FullScreenY = 17 ' 1 gives overall, 17 gives useable excluding taskbars

Private Sub ConvertPixelsToPoints(ByRef x As Single, ByRef y As Single)
Dim hDC As Long
Dim RetVal As Long
Dim XPixelsPerInch As Long
Dim YPixelsPerInch As Long
    hDC = GetDC(0)
    XPixelsPerInch = GetDeviceCaps(hDC, PixelX)
    YPixelsPerInch = GetDeviceCaps(hDC, PixelY)
    RetVal = ReleaseDC(0, hDC)
    x = x * TwipsPerInch / 20 / XPixelsPerInch
    y = y * TwipsPerInch / 20 / YPixelsPerInch
End Sub
Sub GiveScreenPoints(ByRef scx As Single, ByRef scy As Single)
Dim wt As Single
Dim ht As Single
 wt = GetSystemMetrics(FullScreenX)
 ht = GetSystemMetrics(FullScreenY)
 ConvertPixelsToPoints wt, ht
 scx = wt
 scy = ht
End Sub



INQUEST-PP=macro
