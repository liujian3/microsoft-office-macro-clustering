Attribute VB_Name = "CEventHandler"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Public WithEvents xlApp As Excel.Application
Attribute xlApp.VB_VarHelpID = -1
Private Sub Class_Initialize()
    Set xlApp = Application
End Sub
Private Sub Class_Terminate()
    Set xlApp = Nothing
End Sub
Private Sub xlApp_SheetPivotTableUpdate(ByVal Sh As Object, ByVal Target As PivotTable)
    On Error Resume Next
    Dim show
    If GetSheetVar(ActiveSheet.Name, "IPivot") = "" Then Exit Sub
    If Not PivotUpdate Then Exit Sub
    show = ActiveWorkbook.ShowPivotTableFieldList
    PivotUpdate = False
    XPivotFormat2
    ActiveWorkbook.ShowPivotTableFieldList = show
End Sub
Private Sub xlApp_SheetBeforeRightClick(ByVal Sh As Object, ByVal Target As Range, Cancel As Boolean)
     Cancel = XPBeforeRightClick(Target)
End Sub
Private Sub xlApp_SheetBeforeDoubleClick(ByVal Sh As Object, ByVal Target As Range, Cancel As Boolean)
     On Error Resume Next
     Dim k As Integer
     pivotsource = ""
     EZPivotName = ""
     If ReadKeyVal("EZFormat", "Installfolder") <> "" And _
     ReadKeyValue("UseEZFormat") = "1" Then Exit Sub
     If ReadKeyValue("Drillformat") = "0" Then Exit Sub
     
     If ActiveSheet.PivotTables.Count > 0 Then
       If getINIname("IPivot", True) <> "xxx" Then
         EZPivotName = "1"
       Else
         EZPivotName = ReadKeyValue("DrillFormat1")
         pivotsource = ActiveSheet.PivotTables(1).SourceData
         k = InStr(pivotsource, "!")
         If k > 0 Then
           pivotsource = Mid(pivotsource, 1, k - 1)
         End If
       End If
       pivotsource = Replace(pivotsource, "'", "")
       'ActiveSheet.names.Add "IPivot", "1"
     End If
     If getINIname("PivotName", True) <> "xxx" And ActiveCell.row = 1 Then
       PivotCustomDesc
       XFDoubleClick = True
       Cancel = True
       Exit Sub
     End If
     If getINIname() = "xxx" And getINIname("Pivotname", True) = "xxx" _
     And getINIname("IPivot", True) = "xxx" _
     And getINIname("IsPivot", True) = "xxx" _
     And EZPivotName = "0" Then Exit Sub
     If ActiveSheet.Name = "FormattedData" And ActiveCell.row = 1 Then Exit Sub
 
     Cancel = XPDoubleClick(Target)
    
'     If ActiveSheet.name = "FormattedData" And ActiveCell.row = 1 Then Exit Sub
     If Cancel Or getINIname("PivotName", True) <> "xxx" Then
           Application.SendKeys ("{ESC}")
     End If
'     Application.SendKeys ("{ESC}")
End Sub
Private Sub xlApp_SheetActivate(ByVal Sh As Object)
    On Error Resume Next
    If ActiveSheet.names.Count > 0 Then isdrill = False
    If InStr(ActiveWorkbook.Name, ".xlt") = 0 Then
        ZSheetActivate
    End If
    Dim i, enable As Boolean
    
    If ActiveSheet.PivotTables.Count = 1 Then enable = True
    If isSheetChart(ActiveSheet.Name) Then enable = False
    i = Application.CommandBars(ChRng).Controls.Count - 1
    If CInt(Application.version) = 9 Then
       Application.CommandBars(ChRng).Controls(i).visible = False
       Application.CommandBars(ChRng).Controls(i + 1).visible = False
    End If
    For i = 3 To Application.CommandBars(ChRng).Controls.Count
      Application.CommandBars(ChRng).Controls(i).Enabled = enable
    Next i
    If isSheetChart(ActiveSheet.Name) Then
       Application.CommandBars(ChRng).Controls(3).Enabled = True
    End If
End Sub
Private Sub xlApp_WorkbookActivate(ByVal Wb As Workbook)
    On Error Resume Next
    If GetAppFolder = "" Then Exit Sub
    Application.CommandBars("cell").Reset
    Application.CommandBars("column").Reset
    If InStr(ActiveWorkbook.Name, ".") <> 0 Then ZSheetActivate
    drillset = ""
    isdrill = False
End Sub
Private Sub xlApp_WorkbookBeforeClose(ByVal Wb As Workbook, Cancel As Boolean)
    On Error Resume Next
End Sub
Private Sub xlApp_WorkbookOpen(ByVal Wb As Workbook)
    On Error Resume Next
    ActiveWorkbook.names("EZPivotPass").Delete
    ActiveWorkbook.Saved = True
    If LCase(ActiveWorkbook.Name) <> LCase(ezpivotxls) Then Exit Sub
    Dim ws As Worksheet
    Set ws = sheets("DemoData")
    ws.Cells(1, 11).value = "Days From " & Date
    Set ws = sheets("MixedDataTypes")
    ws.Cells(1, 11).value = "Days From " & Date
    Set ws = sheets("DemoData_T")
    ws.Cells(1, 11).value = "Days From " & Date
    Set ws = sheets("MixedDataTypes_T")
    ws.Cells(1, 11).value = "Days From " & Date
    On Error GoTo over
    If LCase(Wb.Name) = LCase(ezpivotxls) Then
        Application.ScreenUpdating = False
        sheets("DemoData").Select
        MoveInCopy
        sheets("Introduction").visible = True
        sheets("Introduction").Select
        SetDemoButtonsOn
    End If
over:
   On Error Resume Next
   
End Sub
Attribute VB_Name = "Common"
Option Explicit

Public Declare Function XLCDateEdit Lib "tfclcedit1d.dll" (ByVal inifile As String, _
                ByVal col As Long, ByVal colp As Long) As Integer
Public Declare Function XLCDateEdit1 Lib "tfclcedit1d.dll" (ByVal inifile As String, _
                ByVal col As Long, ByVal colp As Long) As Integer
                
Public Declare Function ShowStats1 Lib "tfclcedit1d.dll" () As Integer

Public FormulaCommand As String
Public TestNumber As Boolean
Public Stat_FCol As Integer
Public StatSel As String
Public Stat_Avg As String
Public Stat_Sum As String
Public Stat_Min As String
Public Stat_Max As String
Public Stat_Dev As String
Public Stat_Deva As String
Public Stat_Rng As String
Public Stat_RankUnq As String
Public Stat_RankAll As String
Public Stat_RankUnq1 As String
Public Stat_RankAll1 As String
Public Stat_Mdn As String
Public Stat_Mode As String
Public Stat_Count As String
Public Stat_Value As String
Public Stat_Range As String
Public Stat_Filter As String
Public Stat_DataTitle As String
Public Stat_Unique As String

Public Stat_Ave As String
Public Stat_Avga As String
Public Stat_Counta As String
Public Stat_Countb As String
Public Stat_Kurt As String
Public Stat_Maxa As String
Public Stat_Mina As String
Public Stat_Skew As String
Public Stat_StdDevp As String
Public Stat_StdDevpa As String
Public Stat_Var As String
Public Stat_Vara As String
Public Stat_Varp As String
Public Stat_Varpa As String
Function MakeInt(str As String) As Variant
    On Error Resume Next
    Dim buf As String, isPct As Boolean, isDollar
    buf = str
    If InStr(buf, "$") > 0 Then isDollar = True
    If InStr(buf, "%") > 0 Then isPct = True
    buf = Replace(buf, "$", "")
    buf = Replace(buf, "%", "")
    Dim k
    k = InStr(buf, ".")
    If k > 0 Then
      buf = Mid(buf, 1, k - 1)
    End If
    MakeInt = buf
    If isPct Then
      MakeInt = MakeInt / 100
    Else
      If isDollar Then MakeInt = "$" & MakeInt
    End If
    MakeInt = Trim(MakeInt) & " "
    End Function
Function SeparateAddresses() As Boolean
    Dim k As Integer, addr1, addr2, addr, addr3, addr1a, addr2a
    If Trim(Cells(1, 1).Text) = "" Then Exit Function
    k = InStr(Selection.address, ",")
    Stat_Filter = "None"
    Stat_FCol = 0
    If k = 0 And Selection.Columns.Count > 1 Then Exit Function
    If IsNumeric(ActiveCell) Then SeparateAddresses = True
    If k = 0 Then Exit Function
    addr = Selection.address
    addr1 = Mid(addr, 1, k - 1)
    addr2 = Mid(addr, k + 1)
    addr1a = addr1
    addr2a = addr2
    k = InStr(addr1, ":")
    If k > 0 Then
      addr1a = Mid(addr1, 1, k - 1)
    End If
    k = InStr(addr2, ":")
    If k > 0 Then
      addr2a = Mid(addr2, 1, k - 1)
    End If
    If Not IsNumeric(Range(addr1a)) And Not IsNumeric(Range(addr2a)) Then Exit Function
    If TestNumber Then
       Range(addr).Select
       TestNumber = False
       SeparateAddresses = True
       Exit Function
    End If
    If IsNumeric(Range(addr1a)) Then
       Range(addr2a).Select
       addr3 = addr1
       Stat_Filter = ActiveCell.Text
    Else
       Range(addr1).Select
       Stat_Filter = ActiveCell.Text
       addr3 = addr2
    End If
    Stat_FCol = ActiveCell.column
    Range(addr3).Select
End Function
Sub MoveInCopy()
    On Error Resume Next
    If Application.ScreenUpdating Then Application.ScreenUpdating = False
    Dim sheet As String, sheet1 As String
    sheet1 = ActiveSheet.Name
    sheet = ActiveSheet.Name & "_T"
    If Not isSheet1(sheet) Then
       sheets(sheet1).Copy before:=sheets(1)
       ActiveSheet.Name = sheet
       sheets(sheet).visible = False
       sheets(sheet1).Select
       Exit Sub
    End If
    sheets(sheet).visible = True
    sheets(sheet).Select
    sheets(sheet).Copy before:=sheets(sheet1)
    DelSheet (sheet1)
    ActiveSheet.Name = sheet1
    sheets(sheet).visible = False
End Sub

Sub RightClickStats()
    On Error Resume Next
    Dim objitem, objcol
    Set objcol = Application.CommandBars("Cell")
    Set objitem = objcol.Controls.Add(msoControlButton, , , 1, True)
    Application.CommandBars("cell").Controls("Range Stats").Delete
    objitem.Caption = "Range Stats"
    objitem.OnAction = "ShowTheStats1"
    objitem.FaceId = 97
    objitem.Tag = "EZF_14"
    TestNumber = True
    If Not SeparateAddresses Then
      objitem.Enabled = False
    End If
    If ActiveCell.row = 1 And IsNumeric(Cells(2, ActiveCell.column)) Then
      objitem.Enabled = True
    End If
    TestNumber = False
End Sub
Sub GetLastDataRow()
    Dim i, maxlevel As Integer, detail As Integer, addr, paddr
    addr = ActiveCell.address
    Range("A1").Select
    On Error Resume Next
    For i = Selection.CurrentRegion.Rows.Count To 2 Step -1
       If Rows(i).OutlineLevel = Rows(2).OutlineLevel Then Exit For
    Next i
    paddr = "$A" & i
    paddr = "='" & ActiveSheet.Name & "'!R" & i & "C1"
    ActiveSheet.names.Add Name:="LastDataRow", RefersToR1C1:=paddr
    Range(addr).Select
End Sub
Sub DeleteComments()
    On Error Resume Next
    Dim paddr
    If Application.ScreenUpdating Then Application.ScreenUpdating = False
    paddr = Selection.address
    Cells.Select
    Selection.ClearComments
    Range(paddr).Select
End Sub
Sub AddComments(file As String)
    On Error Resume Next
    If Not exist(file) Then Exit Sub
    Dim paddr As String, font As String, opt As String, i, addr
    If Application.ScreenUpdating Then Application.ScreenUpdating = False
    addr = ActiveCell.address
    Cells.Select
    Selection.ClearComments
    Range(addr).Select
    Dim output As String, value As String, size As String, height, width, Name
    paddr = rd_iniFile(file, "Address")
    If paddr = "" Then Exit Sub
    font = rd_iniFile(file, "Font")
    size = rd_iniFile(file, "Size")
    height = rd_iniFile(file, "Height")
    width = rd_iniFile(file, "Width")
    Name = rd_iniFile(file, "Name")
    Dim j, opt1 As String, value1, value2
    For i = 1 To 254
       opt = i
       value = Replace(rd_iniFile(file, "Value", opt), "_", " ")
       value = Replace(value, "^", chr(10))
       If value = "" Then Exit For
       value2 = ""
       For j = 1 To 254
         opt1 = j
         value1 = Replace(rd_iniFile(file, opt1, opt), "_", " ")
         If value1 = "" Then Exit For
         value1 = Replace(value1, "^", chr(10))
         value2 = value2 & value1 & chr(10)
       Next j
       If value2 <> "" Then
'         Mid(value2, Len(value2), 1) = ""
       End If
       If value2 = "" Then
         output = output & value & chr(10)
       Else
         output = output & value & chr(10) & value2
       End If
       
    Next i
    If output = "" Then Exit Sub
    Range(paddr).Select
    Range(paddr).ClearComments
    Range(paddr).AddComment
    Range(paddr).comment.visible = True
    Range(paddr).comment.Text Text:=output
    Range(paddr).comment.Shape.Select
    With Selection.font
        .Name = Name
        .fontstyle = font
        .size = size
        .Strikethrough = False
        .superscript = False
        .subscript = False
        .OutlineFont = False
        .shadow = False
        .underline = xlUnderlineStyleNone
        .colorindex = xlAutomatic
    End With
    Selection.ShapeRange.ScaleHeight height, msoFalse, msoScaleFromTopLeft
    Selection.ShapeRange.ScaleWidth width, msoFalse, msoScaleFromTopLeft
    
    Dim IncrementLeft As String, IncrementTop As String, TurnOff As String
    TurnOff = rd_iniFile(file, "TurnOff")
    IncrementLeft = rd_iniFile(file, "IncrementLeft")
    IncrementTop = rd_iniFile(file, "IncrementTop")
    Range(paddr).Select
    If IncrementLeft <> "" Or IncrementTop <> "" Then
       Range(paddr).comment.Shape.Select True
       Selection.ShapeRange.IncrementLeft IncrementLeft
       Selection.ShapeRange.IncrementTop IncrementTop
    End If
    If TurnOff = "T" Then
      Application.DisplayCommentIndicator = xlCommentIndicatorOnly
    Else
      Application.DisplayCommentIndicator = xlCommentAndIndicator
    End If
    Range("A1").Select
End Sub
Function AddMessages(file As String) As Integer
    On Error Resume Next
    If Not exist(file) Then Exit Function
    Dim paddr As String, Title As String, opt As String, i, response
    Dim output As String, value As String
    paddr = rd_iniFile(file, "Address")
    Title = rd_iniFile(file, "Title")
    Dim j, opt1 As String, value1, value2
    For i = 1 To 254
       opt = i
       value = Replace(rd_iniFile(file, "Value", opt), "_", " ")
       value = Replace(value, "^", chr(10))
       If value = "" Then Exit For
       value2 = ""
       For j = 1 To 254
         opt1 = j
         value1 = Replace(rd_iniFile(file, opt1, opt), "_", " ")
         If value1 = "" Then Exit For
         value1 = Replace(value1, "^", chr(10))
         value2 = value2 & value1 & chr(10)
       Next j
       If value2 = "" Then
         output = output & value & chr(10)
       Else
         output = output & value & chr(10) & value2
       End If
    Next i
    If output = "" Then Exit Function
    Application.ScreenUpdating = True
    AddMessages = MsgBox(output, 64 + vbOKCancel, Title)
End Function

Sub ToggleComments()
    On Error Resume Next
    Dim addr, x
    If Application.ScreenUpdating Then Application.ScreenUpdating = False
    addr = Selection.address
    x = Application.DisplayCommentIndicator
    If x <> xlCommentAndIndicator Then
       Application.DisplayCommentIndicator = xlCommentAndIndicator
    Else
       Application.DisplayCommentIndicator = xlCommentIndicatorOnly
    End If
End Sub

Sub MakeToggleButton(file As String)
    On Error Resume Next
    If Not isSheet1("Buttons") Then Exit Sub
    Dim sheet
    sheet = ActiveSheet.Name
    If Application.ScreenUpdating Then Application.ScreenUpdating = False
    sheets("Buttons").visible = True
    sheets("Buttons").Select
    ActiveSheet.Shapes("Button 1").Select
    Selection.OnAction = "togglecomments"
    Selection.Copy
    sheets(sheet).Select
    Dim paddr, IncrementLeft As String, IncrementTop As String, Title As String
    paddr = rd_iniFile(file, "Address")
    IncrementLeft = rd_iniFile(file, "IncrementLeft")
    IncrementTop = rd_iniFile(file, "IncrementTop")
    Title = rd_iniFile(file, "ButtonTitle")
    Range(paddr).Select
    ActiveSheet.Paste
    Range(paddr).comment.Shape.Select True
    If IncrementLeft <> "" Or IncrementTop <> "" Then
       Selection.ShapeRange.IncrementLeft IncrementLeft
       Selection.ShapeRange.IncrementTop IncrementTop
    End If
    If Title <> "" Then
       Selection.Characters.Text = Title
    End If
    Application.CutCopyMode = False
    sheets("Buttons").visible = False
    sheet(sheet).Select
    Range("A1").Select
End Sub
Sub AddComment()
    On Error Resume Next
    Dim file As String, pkg
    pkg = ReadKeyValueT("Package")
    file = ReadKeyValueT("EditFile")
    If pkg = "EZStat" Then
      Run "ezstat.xla!addcomments", file
    ElseIf pkg = "EZPivot" Then
      Run "dppiconvert.xla!addcomments", file
    Else
      Run "addcomments", file  ' for the ezchart,calc,format,pivot
    End If
End Sub
Sub AddMessage()
    On Error Resume Next
    Dim file As String, pkg
    pkg = ReadKeyValueT("Package")
    file = ReadKeyValueT("EditFile")
    If pkg = "EZStat" Then
      Run "ezstat.xla!addmessages"
    ElseIf pkg = "EZPivot" Then
      Run "dppiconvert.xla!addmessages"
    Else
      Run "addmessages", file  ' for the ezchart,calc,format,pivot
    End If
End Sub

Sub SetButtonComment()
    On Error Resume Next
    Dim commentno As Integer, pkg As String
    Dim file As String, k
    pkg = ReadKeyValueT("Package")
    file = ReadKeyValueT("EditFile")
    k = InStr(LCase(file), "steps")
    If k = 0 Then Exit Sub
    commentno = Mid(file, k + 5, 1)
    If pkg = "EZStat" Then
      Run "ezstat.xla!SetButtonsComments", commentno
    ElseIf pkg = "EZPivot" Then
      Run "dppiconvert.xla!SetButtonsComments", commentno
    ElseIf pkg = "EZChart" Then
      Run "ezchart.xla!SetButtonsComments", commentno
    ElseIf pkg = "EZPivot" Then
      Run "ezpivot1.xla!SetButtonsComments", commentno
    ElseIf pkg = "EZCalc" Then
      Run "ezcalc.xla!SetButtonsComments", commentno
    ElseIf pkg = "EZFormat" Then
      Run "ezformat.xla!SetButtonsComments", commentno
    End If
End Sub
Attribute VB_Name = "DeluxeSoft"
Option Explicit
Private Declare Function OpenProcess Lib "kernel32" _
  (ByVal dwDesiredAccess As Long, _
   ByVal bInheritHandle As Long, _
   ByVal dwProcessId As Long) As Long
   
Private Declare Function WaitForSingleObject Lib "kernel32" _
  (ByVal hHandle As Long, _
   ByVal dwMilliseconds As Long) As Long
   
Private Declare Function CloseHandle Lib "kernel32" _
  (ByVal hObject As Long) As Long
Sub LaunchEZDeluxe()
    On Error Resume Next
    Const WAIT_INFINITE = -1&
    Const SYNCHRONIZE = &H100000
    Dim installfolder, isXSoftcode As Integer, file As String
    Dim taskid As Long, hprocess As Long
    installfolder = ReadKeyValueD("Installfolder")
    If installfolder = "" Then Exit Sub
    ChDirx (installfolder)
    Application.StatusBar = "Testing EZ-Deluxe Settings ..."
    file = installfolder & "\EZDeluxe" & ReadKeyValueD("CurVersion") & ".exe"
    taskid = Shell(file, vbNormalFocus)
    hprocess = OpenProcess(SYNCHRONIZE, True, taskid)
    Call WaitForSingleObject(hprocess, WAIT_INFINITE)
    CloseHandle hprocess
    ResDir
    IsDeluxe
    Application.StatusBar = False
End Sub
Function IsDeluxe() As Integer
    Dim buf, installfolder, i, istr As String
    installfolder = ReadKeyValueD("Installfolder")
    On Error Resume Next
    IsDeluxe = -1
    If installfolder = "" Then Exit Function
    buf = installfolder & "\softtst.dll"
    ChDirx (installfolder)
    buf = installfolder & "\EZDeluxe" & ReadKeyValueD("CurVersion") & ".exe"
    istr = ReadKeyValueT("Expire")
    i = istr
    Select Case i
       Case 0:
       Case 1:
         buf = installfolder & "\T.exe"
       Case 2:
         buf = installfolder & "\E.exe"
    End Select
    IsDeluxe = SoftCode(buf)
    Dim status As String
    status = "Corrupted License"
    Select Case IsDeluxe
       Case 0:
          status = "Trial"
       Case 1:
          status = "Registered"
       Case 2:
          status = "Corrupted License"
       Case 3:
          status = "Corrupted License"
       Case 4:
          status = "Expired"
       Case 5:
          status = "Expired"
    End Select
    Call WriteKeyValueD("Status", status)
    ResDir
End Function
Sub WriteKeyVDate(pkg)
    On Error Resume Next
    Dim path As String
    path = "Software\DPPI\" & pkg
    Call fWriteValue("HKLM", path, "LastCheckDate", "S", "")
End Sub

Attribute VB_Name = "EventCode"
Option Explicit
Public myobj As New CEventHandler
Sub StartEvents()
    On Error Resume Next
    Set myobj.xlApp = Application
    Application.EnableEvents = True
End Sub
Attribute VB_Name = "MenuCode"
Option Explicit
Public Const ChRng = "EZ-Pivot"
Public Const JPop1 = "EZPV"
Public isAdd As Boolean, visible As Boolean
Sub ShowPopupButtonClickEZPivot()
    On Error Resume Next
    If Workbooks.Count = 0 Then Exit Sub
    
    If isSheetChart(ActiveSheet.Name) Then Exit Sub
    If ActiveSheet.UsedRange.Cells.Count < 2 Then Exit Sub
    CreatePopUpMenuEZPivot
    Application.CommandBars("EZPivot").ShowPopup x:=Application.CommandBars(ChRng).Controls("EZPivot").left, _
    y:=Application.CommandBars(ChRng).Controls("EZPivot").top + Application.CommandBars("EZPivot").Controls(1).height
End Sub
Sub ShowPopupButtonEZChart()
    On Error Resume Next
    Dim psheet As String
    If isSheetChart(ActiveSheet.Name) Then
       psheet = FindPivotTable
       If psheet = "" Then Exit Sub
    ElseIf getINIname("ipivot", True) = "xxx" Then
       Exit Sub
    End If
'    Else
'    If ActiveSheet.PivotTables.Count <> 1 And Not isSheetChart(ActiveSheet.Name) Then Exit Sub
    CreatePopUpMenuEZChart
    Application.CommandBars("XChart").ShowPopup x:=Application.CommandBars(ChRng).Controls("XChart").left, _
    y:=Application.CommandBars(ChRng).Controls("XChart").top + Application.CommandBars(ChRng).Controls(1).height
End Sub
Sub ShowPopupButtonClickEZPivotWalk()
    On Error Resume Next
    If ActiveSheet.PivotTables.Count <> 1 Then Exit Sub
    CreatePopUpMenuEZPivotWalk
    Application.CommandBars("Set Pivot Row").ShowPopup x:=Application.CommandBars(ChRng).Controls("Set Pivot Row").left, _
    y:=Application.CommandBars(ChRng).Controls("Set Pivot Row").top + Application.CommandBars(ChRng).Controls(1).height
End Sub
Sub CreatePopUpMenuEZChart()
    On Error Resume Next
    Application.CommandBars("XChart").Delete
    Dim isembed As String, ispivot As String, ischart As String, buf, k
    Dim notembed As String, notchart As String, ispivotorchart As String, isembedfields As Integer
    Dim ischartfields As Integer, psheet As String, sheet As String, testchart As String
    ischartfields = "0"
    isembedfields = "0"
    ispivotorchart = "0"
    isembed = "0"
    ispivot = "0"
    ischart = "0"
    notchart = "0"
    notembed = "1"
    testchart = Replace(ActiveSheet.Name, "_C", "") & "_C"
    If Not isSheet1(testchart) Then notchart = "1"
    psheet = ActiveSheet.Name
    sheet = ActiveSheet.Name
    If isPivotchart(psheet) Then
       psheet = FindPivotTable()
    End If
    If GetSheetVar(psheet, "PivotEmbedHasFields") = "1" Then isembedfields = 1087
    If GetSheetVar(psheet, "PivotChartHasFields") = "1" Then ischartfields = 1087
    If Not isPivotchart(ActiveSheet.Name) And getINIname("IPivot", True) = "xxx" Then
       notembed = 0
    Else
    
    
     If getINIname("IPivot", True) <> "xxx" Then
       ispivot = "1"
       If ActiveSheet.ChartObjects.Count = 0 Then
         isembed = "1"
         notembed = "0"
       Else
         isembed = "0"
         notembed = "1"
       End If
     ElseIf isSheetChart(ActiveSheet.Name) Then
      k = InStr(ActiveSheet.Name, "_C")
       If (k > 0 And k = Len(ActiveSheet.Name) - 1) Then
          ischart = "1"
          notembed = "0"
       End If
     End If
    End If
    If ispivot = "1" Or ischart = "1" Then ispivotorchart = "1"
    Application.CommandBars.Add Name:="XChart", Position:=msoBarPopup
    Call CreatePopupBar1(Application.CommandBars("XChart"), "Create Separate Chart", 0, 1, _
        "XPivotChartMake", notchart, 0)
    Call CreatePopupBar1(Application.CommandBars("XChart"), "Create Embedded Chart", 0, 2, _
        "XPivotChartEmbed", isembed, 0)
        
    Call CreatePopupBar1(Application.CommandBars("XChart"), "Save Separate Chart Format", 0, 3, _
        "XPivotChartSepSave", ischart, 1)
    Call CreatePopupBar1(Application.CommandBars("XChart"), "Save Embedded Chart Format", 0, 4, _
        "XPivotChartEmbedSave", notembed, 0)
    If CInt(Application.version) < 12 Then
       Call CreatePopupBar1(Application.CommandBars("XChart"), "Field Buttons on Separate Chart", ischartfields, 5, _
        "PivotChartFieldsSet", ischart, 1)
       Call CreatePopupBar1(Application.CommandBars("XChart"), "Field Buttons on Embedded Chart", isembedfields, 6, _
        "PivotEmbedFieldsSet", notembed, 0)
    Else
       Call CreatePopupBar1(Application.CommandBars("XChart"), "Filter Pane for Separate Chart", ischartfields, 5, _
        "PivotChartFieldsSet", ischart, 1)
       Call CreatePopupBar1(Application.CommandBars("XChart"), "Filter Pane for Embedded Chart", isembedfields, 6, _
        "PivotEmbedFieldsSet", notembed, 0)
    End If
    Call CreatePopupBar1(Application.CommandBars("XChart"), "Delete Separate Chart", 1088, 7, _
        "PivotDeleteChart", ischart, 1)
        
    Call CreatePopupBar1(Application.CommandBars("XChart"), "Delete Embedded Chart", 478, 8, _
        "XPivotEmbedDelete", notembed, 0)
    Call CreatePopupBar1(Application.CommandBars("XChart"), "Titles / Print Setup", 0, 9, _
        "XPivotApplyFormatC", ischart, 1)
End Sub
Sub CreatePopUpMenuEZPivot()
    On Error Resume Next
   
    If ActiveSheet.PivotTables.Count < 1 Then
       CreatePopUpMenuNoPivot
       Exit Sub
    ElseIf ActiveSheet.PivotTables.Count = 1 And getINIname("IPivot", True) = "xxx" Then
       CreatePopUpMenuIsPivot
       Exit Sub
    End If
    Dim isembed As String, ispivot As String, ischart As String, buf, k, ispivot2 As String
    Dim notembed As String, notchart As String, isfiltered As String, isOnly As Integer
    Dim isDr As String, isDr1 As String, ispivot1 As String, pivotvisible As Integer
    Dim source As String, isShort As Integer, isSetup As Integer
    Dim isAutoFit As Integer
    If getINIname("isAutofit", True) = "1" Then isAutoFit = 1
    
    If isShortName Then isShort = 1
    
    pivotvisible = CInt(ReadKeyValue("ToolVisible"))
    isSetup = CInt(ReadKeyValue("SetPageSetup"))
    isOnly = 0
    source = getINIname("PivotSource", True)
    If source <> "xxx" Then isOnly = CInt(GetSheetVar(source, "isOnly"))
    isembed = "0"
    ispivot = "0"
    ischart = "0"
    notchart = "1"
    notembed = "1"
    Application.CommandBars("EZPivot").Delete
    Application.CommandBars.Add Name:="EZPivot", Position:=msoBarPopup
    
    If isFilterAll1 Then
      isfiltered = "1"
    Else
      isfiltered = "0"
    End If
    If getINIname("IPivot", True) <> "xxx" Or getINIname("PivotName", True) <> "xxx" Then
      ispivot1 = "1"
    Else
      ispivot1 = "0"
    End If
    If getINIname("IPivot", True) = "xxx" And ActiveSheet.PivotTables.Count > 0 Then
      ispivot2 = "1"
    Else
      ispivot2 = "0"
    End If
    
    If getINIname("IPivot", True) <> "xxx" Then
       ispivot = "1"
       notchart = "0"
       If ActiveSheet.ChartObjects.Count = 0 Then
         isembed = "1"
         notembed = "0"
       End If
    ElseIf isSheetChart(ActiveSheet.Name) Then
       k = InStr(ActiveSheet.Name, "_C")
       If (k > 0 And k = Len(ActiveSheet.Name) - 1) Then
          ischart = "1"
          notchart = "0"
          notembed = "0"
       End If
    End If
    Dim togglecolorid As Integer
    If getINIname("PivotColorOff", True) <> "1" Then
       togglecolorid = 1706
    Else
       togglecolorid = 661
    End If
    Dim isformatted As String
    If getINIname("Inifile") <> "xxx" Then
       isformatted = "1"
    Else
       isformatted = "1"
    End If
    If getINIname("PivotName", True) = "xxx" Then
      isDr = "0"
    Else
      isDr = "1"
    End If
    If getINIname("PivotName", True) = "xxx" And getINIname("IPivot", True) = "xxx" Then
      isDr1 = "1"
    Else
      isDr1 = "0"
    End If
    
    If ActiveSheet.PivotTables.Count = 0 Then
      Call CreatePopupBar1(Application.CommandBars("EZPivot"), "Create PivotTable", 0, 1, _
        "CreatePivotTableP", 0, 0)
    Else
    
      Call CreatePopupBar1(Application.CommandBars("EZPivot"), "Create PivotTable", 0, 1, _
        "CreatePivotTableP", 0, 0)
    End If
    Call CreatePopupBar1(Application.CommandBars("EZPivot"), "Short Data Field Names", 0, 2, _
        "XDataDescToggle", ispivot, 0, isShort)
        
    Call CreatePopupBar1(Application.CommandBars("EZPivot"), "Autofit PivotTable", 0, 3, _
        "DataAutoFit", ispivot, 0, isAutoFit)
    If CInt(Application.version) < 12 Then
       Call CreatePopupBar1(Application.CommandBars("EZPivot"), "PivotTable Layout", 0, 4, _
        "XPivotLayouts", ispivot, 1)
    Else
       Call CreatePopupBar1(Application.CommandBars("EZPivot"), "PivotTable Field List", 0, 4, _
        "ShowFieldList", ispivot, 1)
    End If
    
    Call CreatePopupBar1(Application.CommandBars("EZPivot"), "Titles / Print Setup", 0, 5, _
        "XLPApplyPageFormat", ispivot1, 0)
        
    Call CreatePopupBar1(Application.CommandBars("EZPivot"), "Company and User", 0, 6, _
        "CompanyUser", ispivot1, 0)
    Call CreatePopupBar1(Application.CommandBars("EZPivot"), "Drill Worksheet Sort", 928, 7, _
        "EditPivotSort", ispivot, 1)
    Call CreatePopupBar1(Application.CommandBars("EZPivot"), "AutoFormat Drill Worksheets", 0, 8, _
        "SetDrillOptions", 1, 0, ReadKeyValue("DrillFormat"))
'    Call CreatePopupBar1(Application.CommandBars("EZPivot"), "Pivot Only Visible Data", 0, 9, _
'        "SetIsOnlyOptions", ispivot, 0, isOnly)
    Call CreatePopupBar1(Application.CommandBars("EZPivot"), "Convert to EZ-Pivot", 0, 9, _
        "ConvertToEZPivot", ispivot2, 1, 0)
    Call CreatePopupBar1(Application.CommandBars("EZPivot"), "Refresh EZ-Pivot Data", 459, 10, _
        "RefreshData", ispivot, 0, 0)
    Call CreatePopupBar1(Application.CommandBars("EZPivot"), "Export PivotTable and Chart", 0, 11, _
        "XPivotExport", ispivot, 0, 0)
        Call CreatePopupBar1(Application.CommandBars("EZPivot"), "Delete All Drill Sheets", 358, 12, _
        "DeleteAllDrillsheets", ispivot, 1)
    Call CreatePopupBar1(Application.CommandBars("EZPivot"), "Delete PivotTable and Charts", 1088, 13, _
        "PivotDelete1", ispivot, 0)
    Call CreatePopupBar1(Application.CommandBars("EZPivot"), "Printer Page Setup", 0, 14, _
        "setPageSetup", 1, 1, isSetup)
        
'    Call CreatePopupBar1(Application.CommandBars("EZPivot"), "Save PivotTable Properties", 3, 15, _
'        "PivotPropsSave", ispivot, 1)
'    Call CreatePopupBar1(Application.CommandBars("EZPivot"), "Restore PivotTable Properties", 0, 16, _
'        "PivotPropsRestore", ispivot, 0)
'    Call CreatePopupBar1(Application.CommandBars("EZPivot"), "View PivotTable Property Master", 25, 17, _
'        "ViewPropBook", 1, 0)
End Sub
Sub RefreshData()
     On Error Resume Next
     Dim addr
     addr = Selection.address
     Application.ScreenUpdating = False
     Range("A3").Select
     ActiveSheet.PivotTables(1).RefreshTable
     Range(addr).Select
End Sub
Sub XDataDescToggle()
    On Error Resume Next
    Run "DataDescToggle"
    On Error Resume Next
    Dim isShort As String
    isShort = isShortName
    Call WriteKeyValue("IsShortName", isShort)
    XPivotFormat2
End Sub
Sub SetPageSetup()
    On Error Resume Next
    If CInt(ReadKeyValue("SetPageSetup")) = 1 Then
       Call WriteKeyValue("SetPageSetup", "0")
    Else
       Call WriteKeyValue("SetPageSetup", "1")
    End If
End Sub
Sub SetIconPivotMenu()
    On Error Resume Next
    Const tb = ChRng
    Dim x, MenuObject, X1 As CommandBarControl, combar, combut
    Dim inReport As Boolean, mi, EZVisible1 As Boolean
    Application.CommandBars(1).Controls("EZ-Pivot").Delete
    Const mnu = "EZ-Pivot"
    Const nitems = 20
    x = ""
    x = Application.CommandBars(tb).Name
    
    If x = "" Then
       Application.CommandBars(tb).Delete
       Application.CommandBars.Add Name:=tb, temporary:=False
       isAdd = True
    End If
   
    visible = Application.CommandBars(tb).visible
    If ReadKeyValue("NoCommandbars") = "1" Then
      visible = False
    ElseIf ReadKeyValue("NoCommandBars") = "0" Then
      visible = True
    End If
    
    If x = "" Then
       
       Set MenuObject = Application.CommandBars(tb).Controls.Add(Type:=msoControlPopup, temporary:=False)
       Set combar = Application.CommandBars(tb).Controls.Add(Type:=msoControlButton, temporary:=False)
       With combar
          .style = msoButtonIcon
       End With
       
       Set combar = Application.CommandBars(tb).Controls.Add(Type:=msoControlButton, temporary:=False)
       With combar
          .style = msoButtonIcon
       End With
       Set combar = Application.CommandBars(tb).Controls.Add(Type:=msoControlButton, temporary:=False)
       With combar
          .style = msoButtonIcon
       End With
       
       Set combar = Application.CommandBars(tb).Controls.Add(Type:=msoControlButton, temporary:=False)
       With combar
          .style = msoButtonIcon
       End With
       Set combar = Application.CommandBars(tb).Controls.Add(Type:=msoControlButton, temporary:=False)
       With combar
          .style = msoButtonIcon
       End With
        Set combar = Application.CommandBars(tb).Controls.Add(Type:=msoControlButton, temporary:=False)
       With combar
          .style = msoButtonIcon
       End With
        Set combar = Application.CommandBars(tb).Controls.Add(Type:=msoControlButton, temporary:=False)
       With combar
          .style = msoButtonIcon
       End With
       Set combar = Application.CommandBars(tb).Controls.Add(Type:=msoControlButton, temporary:=False)
       With combar
          .style = msoButtonIcon
       End With
       Set combar = Application.CommandBars(tb).Controls.Add(Type:=msoControlButton, temporary:=False)
       With combar
          .style = msoButtonIcon
       End With
       Set combar = Application.CommandBars(tb).Controls.Add(Type:=msoControlButton, temporary:=False)
       With combar
          .style = msoButtonIcon
       End With
       Set combar = Application.CommandBars(tb).Controls.Add(Type:=msoControlButton, temporary:=False)
       With combar
          .style = msoButtonIcon
       End With
         Set combar = Application.CommandBars(tb).Controls.Add(Type:=msoControlButton, temporary:=False)
       With combar
          .style = msoButtonIcon
       End With
      
       isAdd = True
    End If
    
    Application.CommandBars(tb).Controls(1).Caption = mnu
    Application.CommandBars(tb).Controls(1).Tag = mnu
    Dim j, tag1 As String, z
    For j = 0 To nitems
      On Error Resume Next
      tag1 = "EZP_" & j
      On Error GoTo dout
      Set X1 = Application.CommandBars.FindControl(Tag:=tag1)
      While Not X1 Is Nothing
        z = X1.Caption
        X1.Delete
        On Error GoTo dout
        Set X1 = Application.CommandBars.FindControl(Tag:=tag1)
     Wend
     GoTo dout1
dout:

dout1:
    Next j
    On Error Resume Next
    Dim menu
    Set menu = Application.CommandBars.FindControl(Tag:=mnu)
    

    Set mi = menu.Controls.Add(Type:=msoControlButton)
    mi.Caption = "Run EZ-Pivot Demos"
    mi.OnAction = "EZPivotOpen1"
    mi.Tag = "EZP_1"
    
    Set mi = menu.Controls.Add(Type:=msoControlButton)
    mi.Caption = "Company and User"
    mi.OnAction = "XLPCompanyUser"
    mi.Tag = "EZP_2"
    
    Set mi = menu.Controls.Add(Type:=msoControlButton)
    mi.Caption = "User Guide (PDF)"
    mi.OnAction = "XCPSampleUserGuide"
    mi.Tag = "EZP_3"
    Set mi = menu.Controls.Add(Type:=msoControlButton)
     mi.Caption = "View PivotChart Format"
     mi.OnAction = "EZPivotView"
     mi.BeginGroup = True
     mi.FaceId = 25
     mi.Tag = "EZP_4"
     
    Set mi = menu.Controls.Add(Type:=msoControlButton)
     mi.Caption = "Restore PivotChart Default"
     mi.OnAction = "EZPivotRestore"
    mi.Tag = "EZP_5"
      
    Set mi = menu.Controls.Add(Type:=msoControlButton)
    mi.OnAction = "XCPMovieEnabled"
    mi.Caption = "EZ-Pivot Features Movie"
    mi.FaceId = 1003
    mi.BeginGroup = True
    mi.Tag = "EZP_6"
    
    Set mi = menu.Controls.Add(Type:=msoControlButton)
    mi.Caption = "Movie Web Page"
    mi.OnAction = "XCPSampleMovies"
    mi.Tag = "EZP_7"
    
    
    Set mi = menu.Controls.Add(Type:=msoControlButton)
    mi.Caption = "Downloads Web Page"
    mi.OnAction = "XCPDownloads"
    mi.Tag = "EZP_8"
    
    Set mi = menu.Controls.Add(Type:=msoControlButton)
    mi.OnAction = "SecurelyPurchaseEZPivot"
    mi.Caption = "Securely Purchase"
    mi.BeginGroup = True
    mi.Tag = "EZP_9"
    Set mi = menu.Controls.Add(Type:=msoControlButton)
    mi.OnAction = "ActivateRegisterEZPivot"
    mi.Caption = "Activate / Re-Register"
    mi.BeginGroup = False
    mi.Tag = "EZP_10"
   
    Set mi = menu.Controls.Add(Type:=msoControlButton)
    mi.OnAction = "SelfRegisterEZPivot"
    mi.Caption = "Self-Register"
    mi.BeginGroup = False
    mi.Tag = "EZP_11"
    
    
    Set mi = menu.Controls.Add(Type:=msoControlButton)
    mi.Caption = "Download Latest Version"
    mi.OnAction = "XCPCheckUpdates"
    mi.BeginGroup = True
    mi.Tag = "EZP_12"

  
    Set mi = menu.Controls.Add(Type:=msoControlButton)
    mi.Caption = "Software Support"
    mi.OnAction = "SoftwareSupport"
    mi.BeginGroup = True
    mi.Tag = "EZP_13"
    
    Set mi = menu.Controls.Add(Type:=msoControlButton)
    mi.Caption = "Complete Uninstall"
    mi.OnAction = "XCPUninstall"
    mi.Tag = "EZP_14"
    
    Set mi = menu.Controls.Add(Type:=msoControlButton)
    mi.Caption = "About EZ-Pivot"
    mi.OnAction = "XCPAbout"
    mi.Tag = "EZP_15"
    
   
    If ReadKeyValue("Status") = "" Then
       isXSoftcode
    End If
    
    Set mi = menu.Controls.Add(Type:=msoControlButton)
    mi.Caption = "EZ-Pivot: " & ReadKeyValue("Status")
    mi.Enabled = False
    mi.Tag = "EZPivotStatus"
    mi.Tag = "EZP_16"
    Application.CommandBars(tb).visible = visible
    SetPivotIcons
End Sub
Sub SetPivotIcons()
    On Error Resume Next
   
    visible = Application.CommandBars(ChRng).visible
    Application.CommandBars(ChRng).Controls(2).Caption = "EZPivot"
    Application.CommandBars(ChRng).Controls(2).FaceId = 657
    Application.CommandBars(ChRng).Controls(2).TooltipText = "EZPivot Options"
    Application.CommandBars(ChRng).Controls(2).OnAction = "ShowPopupButtonClickEZPivot"

    Application.CommandBars(ChRng).Controls(2).BeginGroup = True
    
    Application.CommandBars(ChRng).Controls(3).visible = True
    Application.CommandBars(ChRng).Controls(3).Caption = "XChart"
    Application.CommandBars(ChRng).Controls(3).FaceId = 435
    Application.CommandBars(ChRng).Controls(3).OnAction = "ShowPopUpButtonEZChart"
    Application.CommandBars(ChRng).Controls(3).TooltipText = "Pivot Chart Utilities"
    Application.CommandBars(ChRng).Controls(3).BeginGroup = True
    
    Application.CommandBars(ChRng).Controls(4).visible = True
    
    Application.CommandBars(ChRng).Controls(4).FaceId = 1706
    Application.CommandBars(ChRng).Controls(4).TooltipText = "Apply Region Formats"
    Application.CommandBars(ChRng).Controls(4).OnAction = "XPivotFormat2"

    
    Application.CommandBars(ChRng).Controls(5).visible = True
    Application.CommandBars(ChRng).Controls(5).FaceId = 395
    Application.CommandBars(ChRng).Controls(5).TooltipText = "Currency"
    Application.CommandBars(ChRng).Controls(5).OnAction = "X1PivotAddDollar"
 
    
    Application.CommandBars(ChRng).Controls(6).visible = True

    Application.CommandBars(ChRng).Controls(6).FaceId = 398
    Application.CommandBars(ChRng).Controls(6).TooltipText = "Increase Decimal"
    Application.CommandBars(ChRng).Controls(6).OnAction = "X1PivotZeroAdd"
    
    Application.CommandBars(ChRng).Controls(7).visible = True

    Application.CommandBars(ChRng).Controls(7).FaceId = 399
    Application.CommandBars(ChRng).Controls(7).TooltipText = "Decrease Decimal"
    Application.CommandBars(ChRng).Controls(7).OnAction = "X1PivotZeroSub"
    
    

    Application.CommandBars(ChRng).Controls(8).visible = True
   
    Application.CommandBars(ChRng).Controls(8).FaceId = 80
    Application.CommandBars(ChRng).Controls(8).TooltipText = "All Values"
    Application.CommandBars(ChRng).Controls(8).OnAction = "PivotPageAll1"
    
    Application.CommandBars(ChRng).Controls(9).visible = True
 
    Application.CommandBars(ChRng).Controls(9).FaceId = 134
    Application.CommandBars(ChRng).Controls(9).TooltipText = "Previous Page"
    Application.CommandBars(ChRng).Controls(9).OnAction = "PageRowUp"

    Application.CommandBars(ChRng).Controls(10).visible = True

    Application.CommandBars(ChRng).Controls(10).FaceId = 135
    Application.CommandBars(ChRng).Controls(10).TooltipText = "Next Page"
    Application.CommandBars(ChRng).Controls(10).OnAction = "PageRowDown"
    
    Application.CommandBars(ChRng).Controls(11).visible = True
    Application.CommandBars(ChRng).Controls(11).Caption = "Set Pivot Row"
    Application.CommandBars(ChRng).Controls(11).FaceId = 102
    Application.CommandBars(ChRng).Controls(11).TooltipText = "Set Walk Value"
    Application.CommandBars(ChRng).Controls(11).OnAction = "ShowPopupButtonClickEZPivotWalk"
    
    Application.CommandBars(ChRng).Controls(12).visible = True
   
    Application.CommandBars(ChRng).Controls(12).FaceId = 132
    Application.CommandBars(ChRng).Controls(12).TooltipText = "Stack Data by Row"
    Application.CommandBars(ChRng).Controls(12).OnAction = "StackPivotDataOff1"
    
    Application.CommandBars(ChRng).Controls(13).visible = True

    Application.CommandBars(ChRng).Controls(13).FaceId = 133
    Application.CommandBars(ChRng).Controls(13).TooltipText = "Stack Data by Column"
    Application.CommandBars(ChRng).Controls(13).OnAction = "StackPivotDataOn1"
    If isAdd And ReadKeyValue("NoCommandbars") <> "1" Then visible = True
    Application.CommandBars(ChRng).visible = visible
    SetMenu
    Application.EnableEvents = True
End Sub
Sub EnableIconsFormat()
    On Error Resume Next
    Dim enable As Boolean, i
    enable = True
    If getINIname("SubtotalSheet", True) <> "xxx" Then enable = False
    For i = 2 To Application.CommandBars("Ez-Format").Controls.Count
       Application.CommandBars("EZ-Format").Controls(i).Enabled = enable
    Next i
End Sub
Sub EnableIconsSubtotal()
    On Error Resume Next
    Dim enable As Boolean, i
    enable = True
    If getINIname("XCStyles", True) <> "xxx" Then enable = False
    For i = 3 To Application.CommandBars("EZ-Subtotal").Controls.Count
       Application.CommandBars("EZ-Subtotal").Controls(i).Enabled = enable
    Next i
End Sub
Sub SetCommandbars()
    On Error Resume Next
    EnableIconsFormat
    EnableIconsSubtotal
End Sub

Sub CreateEZFormatMenu()
    On Error Resume Next
    Dim k, installfolder As String
    Dim cbpop, mi, x
    Dim menu, i As Integer, nlist As Integer, Name As String
    On Error Resume Next
    Exit Sub
    Application.CommandBars(1).Controls("EZ-Pivot").visible = True
    Set x = Application.CommandBars.FindControl(Tag:="EZ-Pivot")
    If Not x Is Nothing Then Exit Sub

    Set menu = Application.CommandBars(1).Controls.Add(Type:=msoControlPopup, temporary:=False)
    menu.Caption = "EZ-Pivot"
    menu.Tag = "EZ-Pivot"
End Sub
Sub SetMenu()
    On Error Resume Next
    Dim mi
    Set mi = Application.CommandBars.FindControl(Tag:="EZP_16")
    If Not mi Is Nothing Then
      mi.Caption = "Status: " & ReadKeyValue("Status")
    End If
'    Set mi = Application.CommandBars.FindControl(Tag:="EZP_9")
'    If Not mi Is Nothing Then
'       mi.Caption = "Purchase / Activate EZ-Format"
'    End If
'    If ReadKeyValue("Status") = "Registered" Then
'      mi.Caption = "Purchase Additional Copies"
'    End If
'    mi.OnAction = "XCPPurchase"
End Sub
Sub SoftwareSupport()
    Dim file As String
    file = "http://www.datapresentation.com/support/sw_support.html"
    Call ShellExecute(Scr_hDC, "Open", file, "", "", SW_SHOWNORMAL)
End Sub
Function EZPIvotRightClick(ByVal Target As Range) As Boolean
    Dim i, x As String
    Dim objmenu
    Set objmenu = Application.CommandBars("Cell")
    For i = Application.CommandBars("cell").Controls.Count To 1 Step -1
       x = Application.CommandBars("Cell").Controls(i).Tag
       If InStr(x, "EZPV") > 0 Then
         Application.CommandBars("Cell").Controls(i).Delete
       End If
    Next i
    For i = Application.CommandBars("column").Controls.Count To 1 Step -1
       x = Application.CommandBars("column").Controls(i).Tag
       If InStr(x, "EZPV_") > 0 Then
         Application.CommandBars("Column").Controls(i).Delete
       End If
    Next i
End Function
Sub SelfRegisterEZPivot()
    Dim file
    On Error Resume Next
    file = ReadKeyValue("Installfolder") & "\ezpivot" & ReadKeyValue("Curversion") & ".exe"
    If ReadKeyValue("Status") = "Registered" Then
       MsgBox "EZ-Pivot is Aready Registered"
       Exit Sub
    End If
    If Not isUACOn Then Exit Sub
    Application.StatusBar = "Launching Activation / Registration Program..."
    ChDirx (GetAppFolder)
    Call ShellExecute(1, "Open", file, "", "", 1)
  
    Application.StatusBar = False
 '   RunAboutMessage
    ResDir
End Sub
Sub RunAboutMessage()
    Dim response, msg, style
    Exit Sub
    style = vbYesNo + vbDefaultButton2 + vbQuestion
    If ReadKeyValue("Status") = "" Then Exit Sub
    msg = "After Activation or Purchase Click 'Yes' " & chr(10) & chr(10)
    msg = msg & "To Confirm Status of EZ-Format Product"
    response = MsgBox(msg, style, "EZ-Format Activation / Registration Confirmation")
    If response = vbYes Then XCPAbout
End Sub
Sub ActivateRegisterEZPivot()
    Dim file
    If ReadKeyValue("Status") = "Registered" Then
       MsgBox "EZ-Pivot is Aready Registered"
       Exit Sub
    End If
    If Not isUACOn Then Exit Sub
    
    Application.StatusBar = "Launching Activation / Registration Program..."
    file = ReadKeyValue("Installfolder") & "\ezpivot" & ReadKeyValue("Curversion") & ".exe"
    ChDirx (GetAppFolder)
    Call ShellExecute(1, "Open", file, "", "", 1)
    
  '  RunAboutMessage
    ResDir
    Application.StatusBar = False
End Sub
Sub SecurelyPurchaseEZPivot()
    Const sPurchasefile = "https://www.softwrap.com/swpurchase/PurchaseForm.aspx?software_code=DPPIEZPIVOT09&hdd_key=0000&download_url=_ENCR1DZYd3gjk1PAuokPB7ZrbfVW9oz%2bU9VxD65p7OofEKL8ajapirwOE12ZQDTeooVgq6ALCAFbN4jhezPBPPSeWOA%3d%3d"
    Call ShellExecute(1, "Open", sPurchasefile, "", "", 1)
End Sub



Attribute VB_Name = "PivotCode1"
Option Explicit

Public Declare Function ShellExecute Lib "shell32.dll" Alias "ShellExecuteA" (ByVal hwnd As Long, ByVal lpOperation As String, ByVal lpFile As String, ByVal lpParameters As String, ByVal lpDirectory As String, ByVal nShowCmd As Long) As Long
Public Declare Function PortraitPrintWidth Lib "prntinfo.dll" (ByVal HorzWidth As String) As Long
Public Declare Function GetDesktopWindow Lib "user32" () As Long
Public Declare Function FindWindow Lib "user32" Alias "FindWindowA" (ByVal lpClassName As String, ByVal lpWindowName As String) As Long
Public Declare Function SendMessage Lib "user32" Alias "SendMessageA" (ByVal hwnd As Long, ByVal wMsg As Long, ByVal wParam As Long, ByVal lParam As Long) As Long
Public Declare Function GetWindow Lib "user32" (ByVal hwnd As Long, ByVal wCmd As Long) As Long
Public Declare Function GetWindowText Lib "user32" Alias "GetWindowTextA" (ByVal hwnd As Long, ByVal lpString As String, ByVal cch As Long) As Long
Public Declare Function GetParent Lib "user32" (ByVal hwnd As Long) As Long
Public Declare Function PostMessage Lib "user32" Alias "PostMessageA" (ByVal hwnd As Long, ByVal wMsg As Long, ByVal wParam As Long, lParam As Any) As Long
Public w As Worksheet, PivotBandOff As Boolean, EZChartMake As Boolean
Public Declare Function EditPivotSorts Lib "XFeditsubP" () As Integer
Public Declare Function EditPivotSubtotals Lib "XFeditsubP" () As Integer
Public Declare Function EditData Lib "EditText.dll" (ByVal pkg As String, ByVal Title As String, _
                        ByVal dsc As String, ByVal Name As String) As Integer
Public myobject As New CEventHandler
Public PivotSheet As String, drillVisible As Boolean, EmbedDeleteAuto As Boolean
Public NoActivationDisplay As Boolean, NoSetup As Boolean, RegionUpdate As Boolean
Public LastPivotRow As Integer
Public Const PTDATA = "PTData"
Public AutoDelete As Boolean, IsAlignment As Boolean, PivotUpdate As Boolean
Public AutoSubtotals As Boolean
Public ezpivotxls As String, ezpivotxls1 As String
Private Const WAIT_INFINITE = -1&
Private Const SYNCHRONIZE = &H100000
Public Scr_hDC As Long
Public Const SW_SHOWNORMAL = 1
Public isdrill As Boolean, DrillSheet As String, PageAuto As Boolean, PageChart As Boolean
Public OverFormat As Boolean
Public Type ChartVals
    X1 As String
    x2 As String
    x3 As String
    x4 As String
    y1 As Double
    y2 As Double
    y3 As Long
    y4 As Long
End Type

Public ChartTitle As String, XPivotAuto As Boolean, XRegionAuto As Boolean, iscolumnbanded As Boolean
Public EZPivotName As String
Public DemoMode As Boolean, PivotValCur As Integer, nRowVals As Integer, RowValNames() As String
Public nItemValCur As Integer, nItemRowCur As Integer, nItemPageCur
Public PageValNames() As String, PivotColCur As Integer

Public cvals() As ChartVals, xvals() As Integer, yvals() As Integer, CurrentDir As String
Public xfrms() As String, yfrms() As String, xstyles() As String, ystyles() As String
Public nxval As Integer, nyval As Integer, EZPivotType As Integer, AutoPivotCreate As Boolean

Public nFilterCol As Integer, nFilterNumber As Integer, ThisFilterValue As String
Public SetFilterFirstOne As String, SetFilterLastOne As String, PageBreakOn As Boolean
Public StartFilterSet As Boolean, savesheet As String, isXCSort As Boolean
Public StartLastWord As String, CurrentHideSetting As String, BadBoy As Boolean
Public NRowFormat As Integer

Const letters = "ABCDEFGHIJKLMNOPQRSTUVWXYZAAABACADAEAFAGAHAIAJAKALAMANAOAPAQARASATAUAVAWAXAYAZ"

Public Const DPPIPATH = "Software\DPPI\EZPivot"

Public HKLM As String
Public Const BlkChar = "< >"
Public Const SOFTPATH = "http:\\www.softwrap.com\\etc..."
Public Const SOFT1 = "XC4XL"  '129$
Public Const SOFT2 = "XC4SL"  '199$
Public Const SOFT3 = "XC2SL"  '100$  addon

Public Type ltrs
    value As String
End Type
Public ltrs() As ltrs
Public inifile As String, OverrideSubtotal As Boolean

Public Declare Function MakeSystemShortCut Lib "XFeditsubP" (ByVal pkg As String, _
ByVal prog As String) As Integer
Public Declare Function NoOP Lib "XFeditsubP" () As Integer
Public Declare Function EditPivotTitles Lib "XFeditsubP" () As Integer
Public Declare Function EditPivotProps Lib "XFeditsubP" () As Integer
Public Declare Function EditPivotUser Lib "XFeditsubP" () As Integer
Public Declare Function EditPivotOrder Lib "xfeditsubP.dll" () As Integer
Public Declare Function NewFields Lib "tfedit1.dll" (ByVal spec As String, ByVal folder As String) As Integer
Public Declare Function FTP Lib "xftp" (ByVal ftpfile As String, ByVal folder As String) As Integer
Public Declare Function EditTitles Lib "XFeditsubP" () As Integer
Public Declare Function EditAbout Lib "XFeditsubP" (ByVal code As String) As Integer
Public Declare Function EditHide Lib "tfclcedit1d" (ByVal spec As String, _
ByVal folder As String, ByVal col As Long) As Integer
Public Declare Function SoftCode Lib "SoftTst.dll" (ByVal exefile As String) As Integer

Public Declare Function EZWelcome Lib "tfclcedit1d.dll" (ByVal pkg As String) As Integer
Public Declare Function EZExpire Lib "tfclcedit1d.dll" (ByVal pkg As String) As Integer
Public Declare Function SLEEP Lib "tfclcedit1d.dll" (ByVal seconds As Long) As Integer

Private Declare Function OpenProcess Lib "kernel32" _
  (ByVal dwDesiredAccess As Long, _
   ByVal bInheritHandle As Long, _
   ByVal dwProcessId As Long) As Long
   
Private Declare Function WaitForSingleObject Lib "kernel32" _
  (ByVal hHandle As Long, _
   ByVal dwMilliseconds As Long) As Long
   
Private Declare Function CloseHandle Lib "kernel32" _
  (ByVal hObject As Long) As Long

Private Declare Function GetKeyState Lib "user32" _
    (ByVal vKey As Long) As Integer
Private Const VK_SHIFT As Long = &H10
Private Const VK_CONTROL As Long = &H11
Private Const VK_MENU As Long = &H12
Private Const VK_CAPITAL = &H14
Private Const VK_NUMLOCK = &H90
Private Const VK_SCROLL = &H91

Public Enum GetKeyStateKeyboardCodes
 gksKeyboardShift = VK_SHIFT
 gksKeyboardCtrl = VK_CONTROL
 gksKeyboardAlt = VK_MENU
 gksKeyboardCapsLock = VK_CAPITAL
 gksKeyboardNumLock = VK_NUMLOCK
 gksKeyboardScrollLock = VK_SCROLL
End Enum
Public pivotsource As String
Public Sub HKSecurity()
    On Error Resume Next
'    If HKLM <> "" Then Exit Sub
    Dim keyval, value As String, x
    Call fReadValue("HKCU", "Software\DPPI", "HKLM", "S", "", value)
    If HKLM = "" Then HKLM = "HKCU"
    If value = "2" Then
      HKLM = "HKCU"
    Else
      HKLM = "HKLM"
    End If
    StartEvents
End Sub
Public Function rd_iniFile(inifile As String, value As String, Optional opt1 As String) As String
    Dim opt As String
    If opt1 = "" Then
      opt = "Options"
    Else
      opt = opt1
    End If
    Call fReadValue(inifile, opt, value, "S", " ", rd_iniFile)
End Function
Public Function rd_iniFile1(inifile As String, value As String, Optional opt1 As String, Optional def As String) As Integer
    Dim test As String
    On Error Resume Next
    test = rd_iniFile(inifile, value, opt1)
    If test = "" And def <> "" Then
       rd_iniFile1 = Int(def)
       Exit Function
    End If
    If test = "" Then Exit Function
    rd_iniFile1 = Int(test)
End Function
Function rd_ini(value As String, Optional opt1 As String) As String
    Dim inifile As String
    inifile = GetAppFolder & "\format.ini"
    rd_ini = rd_iniFile(inifile, value, opt1)
End Function
Function rd_ini1(value As String, Optional opt1 As String) As Integer
    Dim inifile As String
    inifile = GetAppFolder & "\format.ini"
    rd_ini1 = rd_iniFile1(inifile, value, opt1)
End Function
Public Sub wrt_ini(inifile As String, Name As String, value As String, Optional opt As String = "options")
    Call fWriteValue(inifile, opt, Name, "S", value)
End Sub
Public Sub wrt_ini1(inifile As String, Name As String, valuen As Integer, Optional opt As String = "options")
    Dim value As String
    value = valuen
    Call fWriteValue(inifile, opt, Name, "S", value)
End Sub
Function CurRegRow()
    Dim rng As Range
    On Error Resume Next
    Set rng = Range("A1")
    CurRegRow = rng.CurrentRegion.Rows.Count
End Function
Function CurRegCol()
    Dim rng As Range
    On Error Resume Next
    Set rng = Range("A1")
    CurRegCol = rng.CurrentRegion.Columns.Count
End Function
Sub loadltrs()
    Dim i As Integer
    For i = 1 To 256
       ReDim Preserve ltrs(i)
    Next i
    For i = 1 To 26
       ltrs(i).value = Mid(letters, i, 1)
    Next i
    For i = 1 To 26
       ltrs(i + 26).value = "A" + Mid(letters, i, 1)
    Next i
    For i = 1 To 26
       ltrs(i + 52).value = "B" + Mid(letters, i, 1)
    Next i
    For i = 1 To 26
       ltrs(i + 78).value = "C" + Mid(letters, i, 1)
    Next i
    For i = 1 To 26
       ltrs(i + 104).value = "D" + Mid(letters, i, 1)
    Next i
    For i = 1 To 26
       ltrs(i + 130).value = "E" + Mid(letters, i, 1)
    Next i
    For i = 1 To 26
       ltrs(i + 156).value = "F" + Mid(letters, i, 1)
    Next i
    For i = 1 To 26
       ltrs(i + 182).value = "G" + Mid(letters, i, 1)
    Next i
    For i = 1 To 26
       ltrs(i + 208).value = "H" + Mid(letters, i, 1)
    Next i
    For i = 1 To 22
       ltrs(i + 234).value = "I" + Mid(letters, i, 1)
    Next i
End Sub
Function isNumber(mask As String) As Boolean
    If isDateFormat(mask) Or mask = "@" Or mask = "General" Then Exit Function
    If InStr(mask, "%") > 0 Then Exit Function
    If InStr(mask, "###-") > 0 Then Exit Function
'    If InStr(mask, "#,##") > 0 Then Exit Function
    isNumber = True
End Function
Function isNumber2(mask As String) As Boolean
    If isDateFormat(mask) Or mask = "@" Or mask = "General" Then Exit Function
    If InStr(mask, "%") > 0 Then Exit Function
    If InStr(mask, "###-") > 0 Then Exit Function
    If InStr(mask, "#,##") > 0 Then Exit Function
    isNumber2 = True
End Function
Function isNumber1() As Boolean
    isNumber1 = isNumber(Cells(2, ActiveCell.column).numberformat)
    If InStr(Cells(2, ActiveCell.column).numberformat, "%") > 0 Then isNumber1 = True
End Function
Function isDateFormat(mask As String) As Boolean
     isDateFormat = True
     If mask = "[$-1009]d-mmm-yy;@" Then Exit Function
     If mask = "[$-1009]mmmm d, yyyy;@" Then Exit Function
     If mask = "[$-1409]d mmmm yyyy;@" Then Exit Function
     If mask = "[$-1409]dddd, d mmmm yyyy;@" Then Exit Function
     If mask = "[$-1809]d mmmm yyyy;@" Then Exit Function
     If mask = "[$-1809]dd mmmm yyyy;@" Then Exit Function
     If mask = "[$-1C09]dd mmmm yyyy;@" Then Exit Function
     If mask = "[$-2009]dd mmmm, yyyy;@" Then Exit Function
     If mask = "[$-2009]dddd, dd mmmm, yyyy;@" Then Exit Function
     If mask = "[$-2009]dddd, mmmm dd, yyyy;@" Then Exit Function
     If mask = "[$-2009]mmmm dd, yyyy;@" Then Exit Function
     If mask = "[$-2409]dd mmmm, yyyy;@" Then Exit Function
     If mask = "[$-2409]dddd, dd mmmm, yyyy;@" Then Exit Function
     If mask = "[$-2409]dddd, mmmm dd, yyyy;@" Then Exit Function
     If mask = "[$-2409]mmmm dd, yyyy;@" Then Exit Function
     If mask = "[$-2809]dddd, dd mmmm yyyy;@" Then Exit Function
     If mask = "[$-2C09]dddd, dd mmmm yyyy;@" Then Exit Function
     If mask = "[$-3009]dd mmmm, yyyy;@" Then Exit Function
     If mask = "[$-3009]dddd, dd mmmm, yyyy;@" Then Exit Function
     If mask = "[$-3009]dddd, mmmm dd, yyyy;@" Then Exit Function
     If mask = "[$-3009]dd-mmm-yy;@" Then Exit Function
     If mask = "[$-3009]mmmm dd, yyyy;@" Then Exit Function
     If mask = "[$-3409]dd mmmm, yyyy;@" Then Exit Function
     If mask = "[$-3409]dddd, dd mmmm, yyyy;@" Then Exit Function
     If mask = "[$-3409]dddd, mmmm dd, yyyy;@" Then Exit Function
     If mask = "[$-3409]dd-mmm-yy;@" Then Exit Function
     If mask = "[$-3409]mmmm dd, yyyy;@" Then Exit Function
     If mask = "[$-409]dd-mmm-yy;@" Then Exit Function
     If mask = "[$-409]d-mmm;@" Then Exit Function
     If mask = "[$-409]d-mmm-yy;@" Then Exit Function
     If mask = "[$-409]d-mmm-yyyy;@" Then Exit Function
     If mask = "[$-409]m/d/yy h:mm AM/PM;@" Then Exit Function
     If mask = "[$-409]mmmm d, yyyy;@" Then Exit Function
     If mask = "[$-409]mmmmm;@" Then Exit Function
     If mask = "[$-409]mmmmm-yy;@" Then Exit Function
     If mask = "[$-409]mmmm-yy;@" Then Exit Function
     If mask = "[$-409]mmm-yy;@" Then Exit Function
     If mask = "[$-809]d mmmm yyyy;@" Then Exit Function
     If mask = "[$-809]dd mmmm yyyy;@" Then Exit Function
     If mask = "[$-C09]d mmmm yyyy;@" Then Exit Function
     If mask = "[$-C09]dddd, d mmmm yyyy;@" Then Exit Function
     If mask = "[$-C09]dd-mmmm-yyyy;@" Then Exit Function
     If mask = "[$-C09]dd-mmm-yy;@" Then Exit Function
     If mask = "[$-F800]dddd, mmmm dd, yyyy" Then Exit Function
     If mask = "d.m.yy;@" Then Exit Function
     If mask = "d.mm.yy;@" Then Exit Function
     If mask = "d/m/yy;@" Then Exit Function
     If mask = "d/m/yyyy;@" Then Exit Function
     If mask = "d/mm/yy;@" Then Exit Function
     If mask = "d/mm/yyyy;@" Then Exit Function
     If mask = "dd/mm/yy;@" Then Exit Function
     If mask = "dd/mm/yyyy;@" Then Exit Function
     If mask = "m/d/yy h:mm;@" Then Exit Function
     If mask = "m/d/yy;@" Then Exit Function
     If mask = "m/d/yyyy" Then Exit Function
     If mask = "m/d/yyyy;@" Then Exit Function
     If mask = "m/d;@" Then Exit Function
     If mask = "m/dd/yy;@" Then Exit Function
     If mask = "mm/dd/yy;@" Then Exit Function
     If mask = "mm/dd/yyyy;@" Then Exit Function
     If mask = "yy/mm/dd;@" Then Exit Function
     If mask = "yy-mm-dd;@" Then Exit Function
     If mask = "yyyy/mm/dd;@" Then Exit Function
     If mask = "yyyy-mm-dd;@" Then Exit Function
     If mask = "mm/dd/yyyy" Then Exit Function
     isDateFormat = False
End Function
Public Function exist(file As String) As Boolean
    On Error Resume Next
    Dim file1 As String
    file1 = Replace(file, "\\", "\", 1, 254)
    file = file1
    exist = Dir(file, vbDirectory) <> ""
End Function
Public Function IsKeyPressed _
    (ByVal lKey As GetKeyStateKeyboardCodes) As Boolean

 Dim iResult As Integer
 
 iResult = GetKeyState(lKey)

 Select Case lKey
 Case gksKeyboardCapsLock, gksKeyboardNumLock, _
    gksKeyboardScrollLock

  iResult = iResult And 1
  
 Case Else

  iResult = iResult And &H8000
 End Select

 IsKeyPressed = (iResult <> 0)

End Function
Public Function getINIname(Optional sname As String = "Ini_file", _
                           Optional bUseSheet As Boolean = False) As String
    Dim sIni As String, sDefault As String
    Dim sInifile As String, sInstallfolder As String
    
    sDefault = "xxx"
    If sname = "Custom" Then sDefault = ""
    getINIname = sDefault
    On Error Resume Next
    Err.Clear
    If bUseSheet Then
        sIni = ActiveSheet.names(sname).value
    Else
        sIni = ActiveWorkbook.names(sname).value
    End If
        
    If Err.Number <> 0 Then
        If sname = "Inifile" Then
            Err.Clear
            sInstallfolder = GetAppFolder
            sIni = ActiveWorkbook.names("Ini_file").value
            If Err.Number = 0 Then
                If InStr(1, sIni, """") > 0 Then
                    sIni = Mid(sIni, 3, Len(sIni))
                    sIni = FStrip(Mid(sIni, 1, Len(sIni) - 1))
                Else
                    sIni = FStrip(Mid(sIni, 2, Len(sIni)))
                End If
                getINIname = sInstallfolder & "\inifile\" & sIni
            End If
        End If
        Err.Clear
        getINIname = "xxx"
        Exit Function
    End If
    On Error GoTo badSheet
    If InStr(1, sIni, """") > 0 Then
        sIni = Mid(sIni, 3, Len(sIni))
        getINIname = FStrip(Mid(sIni, 1, Len(sIni) - 1))
    Else
        getINIname = FStrip(Mid(sIni, 2, Len(sIni)))
    End If
    Exit Function
badSheet:
    getINIname = sDefault
End Function
Public Function FStrip(Name As String) As String
    Dim k, name1
    name1 = Replace(Name, "'", "")
    k = InStr(name1, "!Q1")
    FStrip = name1
    If k = 0 Then Exit Function
    FStrip = Replace(Mid(name1, 1, k - 1), "'", "")
End Function

Function ReadKeyValue(value As String) As String
    Call HKSecurity
    Call fReadValue(HKLM, DPPIPATH, value, "S", "", ReadKeyValue)
End Function
Function ReadKeyValueT(value As String) As String
    Call fReadValue(HKLM, "Software\Test", value, "S", "", ReadKeyValueT)
End Function
Function ReadKeyVal(pkg, value) As String
    Call fReadValue(HKLM, "Software\DPPI\" & pkg, value, "S", "", ReadKeyVal)
End Function


Sub WriteKeyValue(Name, value)
    Call fWriteValue(HKLM, DPPIPATH, Name, "S", value)
End Sub

Public Sub wr_ini(Name As String, value As String, Optional opt As String = "options")
    inifile = GetAppFolder & "\format.ini"
    Call fWriteValue(inifile, opt, Name, "S", value)
End Sub
Public Function isStyleThere(style As String) As Boolean
    On Error Resume Next
    Dim size As Variant
    size = ActiveWorkbook.Styles(style).font.size
    If size > 7 Then isStyleThere = True
End Function
Function LongStr(x As String) As Long
    LongStr = x
End Function
Function GetAppFolder() As String
    On Error Resume Next
    Call fReadValue(HKLM, DPPIPATH, "Installfolder", "S", "", GetAppFolder)
End Function
Sub test2()
    Application.CommandBars(1).Reset
End Sub


Sub SetMenu()
    On Error Resume Next
    Dim mi
    Set mi = Application.CommandBars.FindControl(Tag:="EZPivotStatus")
    If Not mi Is Nothing Then
      mi.Caption = "Ez-Pivot Status: " & ReadKeyValue("Status")
    End If
    Set mi = Application.CommandBars.FindControl(Tag:="EZPivotPurchase")
    If Not mi Is Nothing Then
       mi.Caption = "Purchase / Activate EZ-Pivot"
    End If
    If ReadKeyValue("Status") = "Registered" Then
      mi.Caption = "Purchase Additional Copies"
    End If
    
End Sub
Sub XCPMovieEnabled()
    Dim installfolder As String, sDocfile As String
    installfolder = GetAppFolder
    sDocfile = "http://www.datapresentation.com/movies/EZ-Pivot_InDepth/EZ-Pivot_InDepth.html"
    Call ShellExecute(Scr_hDC, "Open", sDocfile, "", installfolder, SW_SHOWNORMAL)
End Sub
Sub XCPSampleUserGuide()
    Dim sDocfile As String
    sDocfile = GetAppFolder & "\EZ-Pivot_User_Guide.pdf"
    If Not exist(sDocfile) Then
      sDocfile = "http://www.datapresentation.com//downloads/EZ-Pivot_User_Guide.pdf"
    End If
    Call ShellExecute(Scr_hDC, "Open", sDocfile, "", "", SW_SHOWNORMAL)
End Sub
Sub XCPSampleMovies()
    Dim installfolder As String, sDocfile As String
    installfolder = GetAppFolder
    sDocfile = "http://www.datapresentation.com/movies"
    Call ShellExecute(Scr_hDC, "Open", sDocfile, "", installfolder, SW_SHOWNORMAL)
End Sub
Sub XCPSampleUnFormatted()
   Dim file As String
    If IsWorkBookOpen(ezpivotxls) Then Exit Sub
    file = GetAppFolder & "\" & ezpivotxls
    Workbooks.Open Filename:=file
End Sub
Sub XCPSampleUnFormattedReset()
    Dim demofile As String, file As String, file1 As String
    file = ezpivotxls
    file1 = GetAppFolder & "\" & ezpivotxls1
    demofile = GetAppFolder & "\" & ezpivotxls
   
    Application.DisplayAlerts = False

    On Error Resume Next
    
    If IsWorkBookOpen(file) Then
       Workbooks(file).Saved = True
       Workbooks(file).Close
    End If
    Call FileCopy(file1, demofile)
    Workbooks.Open Filename:=demofile
End Sub
Function IsWorkBookOpen(Name As String) As Boolean
    Dim i As Integer
    IsWorkBookOpen = True
    For i = 1 To Workbooks.Count
        If LCase(Name) = LCase(Workbooks(i).Name) Then Exit Function
    Next i
    IsWorkBookOpen = False
End Function
Sub CreatePopupBar1(WorkToolBar As Object, MenuBarName As String, MenuBarFaceId As Integer, _
        MenuBarOrder As Integer, OnActionString As String, enable As String, Group As Integer, _
    Optional state As Integer)
    Dim MenuBarId As Variant
    Set MenuBarId = WorkToolBar.Controls.Add(msoControlButton, , , MenuBarOrder)
    On Error Resume Next
    MenuBarId.Caption = MenuBarName
    If state <> "1" Then
       MenuBarId.FaceId = MenuBarFaceId
    End If
    If Not DemoMode Then
       MenuBarId.OnAction = OnActionString
    End If
    MenuBarId.Enabled = CInt(enable)
    MenuBarId.BeginGroup = Group
    If state <> 1 Then Exit Sub
    MenuBarId.state = msoButtonDown
End Sub

Sub ShowPopupButtonClickEZPivotWalk1()
    On Error Resume Next
    CreatePopUpMenuEZPivotWalk
    Application.CommandBars("Set Pivot Row").ShowPopup x:=Application.CommandBars(ChRng).Controls("Set Pivot Row").left, _
    y:=Application.CommandBars(ChRng).Controls("Set Pivot Row").top + Application.CommandBars("Set Pivot Row").Controls(1).height
End Sub
Function NoTab(Name) As String
    NoTab = Replace(Name, chr(10), " ")
End Function
Public Sub CreatePopUpMenuEZPivotWalk()
    On Error Resume Next
    If ActiveSheet.PivotTables.Count <> 1 Then Exit Sub
    Application.CommandBars("Set Pivot Row").Delete
    Application.CommandBars.Add Name:="Set Pivot Row", Position:=msoBarPopup
    Dim nrows, npages, ncols, desc As String, pt As PivotTable, i As Integer, j
    Dim ischecked As Integer, isgroup As Integer
    Set pt = ActiveSheet.PivotTables(1)
    nrows = pt.RowFields.Count
    ncols = pt.columnfields.Count
    npages = pt.PageFields.Count
    If CInt(getINIname("PivotValCur", True)) = 0 And _
    CInt(getINIname("PivotColCur", True)) = 0 Then
       ActiveSheet.names.Add "PivotValCur", "1"
       PivotValCur = 1
       PivotColCur = 0
       PageValuesLoad
       RowValuesLoad
    End If
    Application.CommandBars("EZ-Pivot").Controls("Page All").OnAction = "PivotPageAll1"
    PivotValCur = getINIname("PivotValCur", True)
    Dim n As Integer
    If pt.PageFields.Count > 0 Then
      For i = 1 To 1
        desc = "Walk by " & NoTab(pt.PageFields(i).Name)
        n = 1
        If i = PivotValCur Then ischecked = 1
        Call CreatePopupBar1(Application.CommandBars("Set Pivot Row"), desc, 0, i, _
        "PivotSetValue", 1, 0, ischecked)
      Next i
    End If
    j = 0
    For i = 1 To nrows
        If pt.RowFields(i).Name = "Data" Then Exit For
        desc = "Walk by " & NoTab(pt.RowFields(i).Name)
        If n = 1 And i = 1 Then
           isgroup = 1
        Else
           isgroup = 0
        End If
        If i = PivotValCur - n Then
             ischecked = 1
        Else
             ischecked = 0
        End If
        Call CreatePopupBar1(Application.CommandBars("Set Pivot Row"), desc, 0, i + npages, _
          "PivotSetValue", 1, isgroup, ischecked)
    Next i
    nrows = i
    PivotColCur = CInt(getINIname("PivotColCur", True))
    If pt.columnfields.Count > 0 Then
        If PivotColCur = 1 Then
             ischecked = 1
        Else
             ischecked = 0
        End If
        desc = "Walk by " & NoTab(pt.columnfields(1).Name)
        Call CreatePopupBar1(Application.CommandBars("Set Pivot Row"), desc, 0, nrows + npages, _
          "PivotSetColValue", 1, 1, ischecked)
    End If
    Application.CommandBars("EZ Pivot").Controls("Page All").OnAction = "PivotPageAll1"
End Sub
Sub ShowPopupButtonClickEZPivot1()
    On Error Resume Next
    If getINIname("Instruction", True) <> "xxx" Then
      If isSheet1("DemoData") Then
       sheets("DemoData").visible = True
       sheets("DemoData").Select
      Else
       Exit Sub
      End If
    End If
'    If isXSoftCode = 4 Then Exit Sub
    If ActiveSheet.PivotTables.Count = 0 Then
       CreatePivotTableP
       Exit Sub
    End If
    CreatePopUpMenuEZPivot
    Application.CommandBars("EZPivot").ShowPopup x:=Application.CommandBars("EZ Pivot").Controls(1).left, _
    y:=Application.CommandBars("EZ Pivot").Controls(1).top + Application.CommandBars(1).Controls(1).height
End Sub
Sub CreatePopupBar(WorkToolBar As Object, MenuBarName As String, MenuBarFaceId As Integer, _
    MenuBarOrder As Integer, OnActionString As String, enable As String, Group As Integer)
    Dim MenuBarId As Variant
    Set MenuBarId = WorkToolBar.Controls.Add(msoControlButton, , , MenuBarOrder)
    On Error Resume Next
    MenuBarId.Caption = MenuBarName
    MenuBarId.FaceId = MenuBarFaceId
    MenuBarId.OnAction = OnActionString
    MenuBarId.Enabled = CInt(enable)
    MenuBarId.BeginGroup = Group
End Sub
Sub XCPPurchase()
    Dim installfolder As String, sDocfile As String, i
    If ReadKeyValue("Status") <> "Registered" Then
       XCPLaunchSoftwrap
       Exit Sub
    End If
    installfolder = GetAppFolder
    sDocfile = "https://www.softwrap.com/swpurchase/PurchaseForm.aspx?software_code=DPPIEZPIVOT06&hdd_key=0000&download_url=_ENCR1DZYd3gjk1PAuokPB7ZrbfVW9oz%2bU9VxD65p7OofEKL%2b1TXIRYcSUko5%2bpvQReJF9AOJZqELWMhWph8WB%2faT7fA%3d%3d"
    Call ShellExecute(Scr_hDC, "Open", sDocfile, "", installfolder, SW_SHOWNORMAL)
End Sub
Function GetAppFolderRaw() As String
    Dim folder As String, k
    folder = GetAppFolder
    k = InStr(folder, "\DPPI\")
    If k = 0 Then Exit Function
    GetAppFolderRaw = Mid(folder, 1, k - 1)
End Function
Sub XCPUninstall()
   Dim style, response, file, file1, installfolder, i
    style = vbYesNo + vbDefaultButton2 + vbQuestion
    response = MsgBox("Are you Sure?", style, "EZ-Pivot Uninstall Confirmation")
    If response = vbNo Then Exit Sub
    On Error Resume Next
    If ActiveWorkbook.Name = ezpivotxls Then
       ActiveWorkbook.Saved = True
       ActiveWorkbook.Close
    End If
    If ActiveSheet.Name = "" Or (Workbooks.Count = 1 And ActiveWorkbook.Saved) Then
       ActiveWorkbook.Saved = True
       ActiveWorkbook.Close
    Else
       response = MsgBox("Save all open workbooks first?", style, "Save First")
   
       For i = Workbooks.Count To 1 Step -1
          If response = vbYes Then
             Workbooks(i).Save
          Else
             Workbooks(i).Saved = True
          End If
          Workbooks(i).Close
       Next i
    End If
    On Error GoTo getout
    If ActiveSheet.Name <> "" Then Exit Sub
getout:
    file = GetAppFolder & "\XCPDelete.exe"
    file1 = GetAppFolderRaw & "\XCPDelete.exe"
 '   Call FileCopy(file, file1)
    installfolder = GetAppFolderRaw
    Call ShellExecute(Scr_hDC, "Open", file1, "", installfolder, SW_SHOWNORMAL)
    Application.Quit
End Sub
'Public Function SoftTest() As Integer
'    Dim k
'    k = isXSoftcode
'    If k <> 1 Then
'         If ReadKeyValue("WindowsOS") <> "1" Or k = 4 Then
'           XCPLaunchSoftwrap
'           If ReadKeyValue("WindowsOS") <> "1" Then Exit Function
'           k = isXSoftcode
'           If k > 1 Then Exit Function
'        End If
'    End If
'    If k = 4 Then SoftTest = 0
'    SoftTest = 1
'End Function
'Public Function SoftTest1() As Integer
'    If isXSoftcode <> 1 Then
'         XCPLaunchSoftwrap
'         Exit Function
'    End If
'    SoftTest1 = 1
'End Function
Function XLCGetWrapFile() As String
    Dim installfolder, i, istr, curvr
    curvr = ReadKeyValue("CurVersion")
    installfolder = GetAppFolder
    On Error Resume Next
    XLCGetWrapFile = installfolder & "\EZPivot" & curvr & ".exe"
    istr = ReadKeyValueT("Expire")
    i = istr
    Select Case i
       Case 0:
       Case 1:
         XLCGetWrapFile = installfolder & "\T.exe"
       Case 2:
         XLCGetWrapFile = installfolder & "\E.exe"
    End Select
End Function
Function ReadKeyValueD(value As String) As String
    Call fReadValue(HKLM, "Software\DPPI", value, "S", "", ReadKeyValueD)
End Function
Sub WriteKeyValueD(Name, value)
    Call fWriteValue(HKLM, "Software\DPPI", Name, "S", value)
End Sub
Sub WriteKeyValueP(Name, value)
    Call fWriteValue(HKLM, "Software\DPPI\EZPIvot", Name, "S", value)
End Sub

Function IsRegistered() As Integer
    Dim CurVer As String, buf As String, status As String, j
    On Error Resume Next
    buf = GetAppFolder
    buf = GetAppFolder & "\softtst.dll"
    If Not exist(buf) Then
       Exit Function
    End If
    buf = XLCGetWrapFile
    Application.StatusBar = "Testing EZ-Pivot Software ..."
    ChDirx (GetAppFolder)
    IsRegistered = SoftCode(buf)
    Application.StatusBar = False
    ResDir
    Select Case IsRegistered
       Case 0:
          status = "Trial"
       Case 1:
          status = "Registered"
       Case 2:
          status = "Corrupted License"
          Exit Function
       Case 3:
          status = "Corrupted License"
          MsgBox "License corrupted--Re-install", , "EZ-Pivot"
          Exit Function
       Case 4:
          status = "Expired"
          Exit Function
       Case 5:
          status = "Expired"
          Exit Function
    End Select
    Call WriteKeyValue("Status", status)
End Function
Function isXSoftcode() As Integer
    Dim CurVer As String, buf As String, status As String, j
    On Error Resume Next
    If ReadKeyValue("Installfolder") = "" Then Exit Function
'    If (getINIname("EZPivotPass") = "1" And ReadKeyValue("Status") <> "Expired") Then
'       isXSoftcode = 1
'       Exit Function
'    End If
'    If LCase(Environ("UserName")) = "e601344" Then  'Or LCase(Environ("Username")) = "steve" Then
'       If Year(Date) = 2007 Then
'         isXSoftcode = 1
'         Exit Function
'       End If
'    End If
'    ActiveWorkbook.names.Add "EZPivotPass", "1", visible:=False
'    j = IsDeluxe
'    If j = -1 Then
'      buf = GetAppFolder & "\softtst.dll"
'      If Not exist(buf) Then
'        MsgBox "Illegal install for EZ-Pivot", "Re-install EZ-Pivot"
'        isXSoftcode = 4
'        Exit Function
'      End If
'    End If
'    If j = -1 Or j > 2 Then
      buf = GetAppFolder
      ChDirx (buf)
      status = "Expired"
      buf = XLCGetWrapFile
      Application.StatusBar = "Testing EZ-Pivot Software ..."
      isXSoftcode = SoftCode(buf)
      Application.StatusBar = False
'    Else
'      isXSoftcode = j
''      If isXSoftCode = 0 Then   'And ReadKeyValue("WindowsOS") <> "1" Then
''         isXSoftCode = 4
''      End If
'
'    End If
'    If isXSoftcode > 1 And j < 2 Then isXSoftcode = j
'    If ReadKeyValueT("XPivotPatch") = "1" Then isXSoftcode = 1
    Select Case isXSoftcode
       Case 0:
          status = "Trial"
       Case 1:
          status = "Registered"
       Case 2:
          status = "Corrupted License"
       Case 3:
          status = "Corrupted License"
       Case 4:
          status = "Expired"
       Case 5:
          status = "Expired"
    End Select
    Call WriteKeyValueP("Status", status)
    RestoreDir
End Function

Function XCPLaunchSoftwrap()
    Dim file, installfolder As String, taskid, hprocess
    On Error Resume Next
    installfolder = GetAppFolder
    ChDirx installfolder
    file = XLCGetWrapFile
    Application.StatusBar = "Testing EZ-Pivot Settings ..."
    Application.ScreenUpdating = True
    taskid = Shell(file, vbNormalFocus)
    hprocess = OpenProcess(SYNCHRONIZE, True, taskid)
    Call WaitForSingleObject(hprocess, WAIT_INFINITE)
    CloseHandle hprocess
    RestoreDir
    Application.StatusBar = False
End Function
Sub XCPAbout()
    Dim k, installfolder As String
    k = isXSoftcode
    installfolder = GetAppFolder
    ChDirx installfolder
    k = EditAbout("3")
    RestoreDir
    SetMenu
End Sub
Sub XCPDownloads()
    Dim sDocfile As String
    sDocfile = "http://www.datapresentation.com/support/download.cfm"
    Call ShellExecute(Scr_hDC, "Open", sDocfile, "", "", SW_SHOWNORMAL)
End Sub
Sub XCPCheckUpdates()
    On Error Resume Next
    Dim sDocfile
    sDocfile = "http://www.datapresentation.com/downloads/dppi/ez-pivot.exe"
    Call ShellExecute(Scr_hDC, "Open", sDocfile, "", "", SW_SHOWNORMAL)
End Sub
Sub XCPCheckUpdates1()
    Dim sDocfile As String, k As Integer, version As String
    Dim vctrl As Double, vctrl1 As Double
    On Error Resume Next
    sDocfile = GetAppFolder & "\EZ-Pivot.txt"
    Kill sDocfile
    sDocfile = "EZ-Pivot.txt"
    ChDirx (GetAppFolder)
    k = FTP(sDocfile, "EZPivot")
    RestoreDir
    If k = 1 Then
       sDocfile = GetAppFolder & "\EZ-Pivot.txt"
       version = rd_iniFile(sDocfile, "VersionCtrl")
       vctrl1 = version
       vctrl = ReadKeyValue("VersionCtrl")
       If vctrl1 <= vctrl Then
         Call MsgBox("The latest version of EZ-Pivot is installed.", , "Check / Download Update")
         Exit Sub
       End If
    End If
    
    sDocfile = "http://www.datapresentation.com/products/EZ-Pivot_Download_Redirect.html"
    Call ShellExecute(Scr_hDC, "Open", sDocfile, "", "", SW_SHOWNORMAL)
End Sub
Public Function isSheetChart(sheet As String) As Boolean
    Dim i As Integer
    For i = 1 To ActiveWorkbook.charts.Count
        If ActiveWorkbook.charts(i).Name = sheet Then
           isSheetChart = True
           Exit Function
        End If
    Next i
End Function
Function isSheetPivotChart(sheet As String) As Boolean
    If Not isSheetChart(sheet) Then Exit Function
    Dim pivotname As String
    pivotname = EZFindChartData
    If pivotname = "" Then Exit Function
    On Error Resume Next
    If GetSheetVar(pivotname, "IPivot") <> "" Then isSheetPivotChart = True
End Function
Function isSheetPivotChart1(sheet As String) As Boolean
    If Not isSheetChart(sheet) Then Exit Function
    Dim pivotname As String
    pivotname = EZFindChartData
    If pivotname = "" Then Exit Function
    On Error Resume Next
    If GetSheetVar(pivotname, "IsPivot") <> "" Then isSheetPivotChart1 = True
End Function
Sub ZSheetActivate()
    On Error Resume Next
    Dim ws As Worksheet, k
    If ActiveSheet.Name = "FormattedData" Then Exit Sub
    If ActiveSheet.Name = "StatsMedian" Then Exit Sub
    If EZPivotName = "0" Then
        Range("A1").Select
        EZPivotName = ""
        Rows("1:1").Select
        With Selection.font
          .colorindex = xlAutomatic
        End With
        Selection.Interior.colorindex = xlNone
        Range("A1").Select
        Exit Sub
    End If
    If getINIname("PivotName", True) <> "xxx" Or getINIname("Instruction", True) <> "xxx" Then
       Application.CommandBars("EZ-Excel").Controls("EZPivot").Enabled = False
    ElseIf ReadKeyValue("Installfolder") <> "" Then
       Application.CommandBars("EZ-Excel").Controls("EZPivot").Enabled = True
    End If
    If isSheetChart(ActiveSheet.Name) Then
       Application.CommandBars("EZ-Excel").Controls("EZPivot").Enabled = False
    End If
    If ActiveSheet.PivotTables.Count > 0 Then
       Application.CommandBars("EZ-Excel").Controls("EZPivot").TooltipText = "EZ-Pivot Menu"
    Else
       Application.CommandBars("EZ-Excel").Controls("EZPivot").TooltipText = "Create EZ-Pivot Table"
    End If
    Application.CommandBars("EZ-Excel").Controls("EZPivot").visible = True
    If isSheetChart(ActiveSheet.Name) Then
        If isSheetPivotChart(ActiveSheet.Name) Then
           Application.CommandBars("EZ Pivot").visible = True
           SetIconPivot
         Else
           Application.CommandBars("EZ Pivot").visible = False
        
         End If
    ElseIf getINIname("IPivot", True) <> "xxx" Then
         Application.CommandBars("EZ Pivot").visible = True
         SetIconPivot
    Else
         Application.CommandBars("EZ Pivot").visible = False
    End If

   
    Dim ptsource As String, source As String
    Dim ptdata1 As String
    ptdata1 = FStrip(GetSheetVar(DrillSheet, "PivotSource")) & "_P"
    If Not isSheet1(ptdata1) Then
       ptdata1 = Replace(ptdata1, "_P", "")
    End If
    
    source = FStrip(GetSheetVar(ptdata1, "PTSource"))
    If Not isdrill Then Exit Sub
       If isXSoftcode > 1 Then
          MsgBox "EZ-Pivot trial is complete", , "Purchase or Uninstall the EZ-Pivot product"
          Exit Sub
       End If

    Dim isGeneral As Integer, z As String, x
    If ActiveSheet.PivotTables.Count > 0 Then Exit Sub
    Call StandardDesc
    z = ""
    z = ActiveSheet.PivotTables(1).SourceData
    k = InStr(z, "!")
    If k > 0 Then
       source = "='" & Mid(z, 1, k - 1) & "'!Q1:Q1"
       source = Replace(source, "''", "'")
       source = Replace(source, " (2)", "")
       ActiveSheet.names.Add "PivotSource", RefersToR1C1:=source
       pivotsource = Mid(x, 1, z - 1)
       pivotsource = Replace(pivotsource, "'", "")
    End If
    Application.CommandBars("EZ-Excel").Controls("EZPivot").Enabled = False
    Dim nr, nc, Title As String, pname As String, DrillOrientation As Integer
    Dim style As String, wp As Worksheet, wf As Worksheet, bufvar As String
    Dim stitle As String, Neworder As Boolean, xtotal As String
    Range(Cells(1, 1), Cells(1, ActiveSheet.UsedRange.Columns.Count)).Select
    With Selection.font
          .colorindex = xlAutomatic
    End With
    Selection.Interior.colorindex = xlNone
    Selection.style = "XTotals"
    Application.ScreenUpdating = False
    nr = Selection.CurrentRegion.Rows.Count
    Dim overrides() As Boolean
    For k = 1 To Selection.CurrentRegion.Columns.Count
      Range(Cells(1, k), Cells(nr, k)).Select
      Selection.Borders(xlEdgeLeft).LineStyle = xlContinuous
      Selection.Borders(xlEdgeRight).LineStyle = xlContinuous
      Selection.Borders(xlEdgeLeft).Weight = xlThin
      Selection.Borders(xlEdgeRight).Weight = xlThin
      Selection.Borders(xlEdgeLeft).colorindex = xlAutomatic
      Selection.Borders(xlEdgeRight).colorindex = xlAutomatic
    Next k
    Range(Cells(2, 1), Cells(nr, ActiveSheet.UsedRange.Columns.Count)).Select
    Selection.Borders(xlEdgeTop).LineStyle = xlNone
    Range(Cells(nr, 1), Cells(nr, ActiveSheet.UsedRange.Columns.Count)).Select
    ActiveWindow.DisplayGridlines = False
    Range("A1").Select
    SortDrill
    nr = ActiveSheet.UsedRange.Rows.Count
    nc = ActiveSheet.UsedRange.Columns.Count
    On Error Resume Next
    source = FStrip(XPGetSheetVar(DrillSheet, "PivotSource"))
    If ActiveSheet.Name = source Then
       isdrill = False
       Exit Sub
    End If
    If pivotsource <> "" Then source = pivotsource
    DrillOrientation = CInt(XPGetSheetVar(DrillSheet, "DrillOrientation"))
    If DrillOrientation = 0 Then
      If isSheet1("FormattedData") Then
         Set wf = sheets("FormattedData")
         DrillOrientation = wf.PageSetup.Orientation
      Else
         DrillOrientation = xlLandscape
      End If
      bufvar = "'" & DrillSheet & "'!DrillOrientation"
      ActiveWorkbook.names.Add bufvar, DrillOrientation
    End If
    ActiveSheet.names.Add "XPortrait", GetSheetVar(DrillSheet, "DrillPortrait")
    If Not isSheet1(Trim(source)) Then
       MsgBox "Source for this PivotTable: " & source & chr(10) & chr(10) & _
       "is NOT in this Workbook--Change PivotTable Source to this Workbook for Drill Formatting to work."
       isdrill = False
       Exit Sub
    End If
    If pivotsource <> "" Then ptdata1 = pivotsource
    If Not isSheet1(ptdata1) Then
       ptdata1 = Replace(ptdata1, "_P", "")
    End If
    Set wp = sheets(ptdata1)
    Set ws = ActiveSheet
    If ws.UsedRange.Rows.Count = 1 Then
      isdrill = False
      Application.DisplayAlerts = False
      ActiveWindow.SelectedSheets.Delete
      Application.DisplayAlerts = True
      Exit Sub
    End If
    ActiveSheet.Tab.colorindex = sheets(DrillSheet).Tab.colorindex
    Range(Cells(1, 1), Cells(1, nc)).Select
    Selection.style = "XTitlesUnHidden"
    Selection.font.colorindex = 0
    Selection.VerticalAlignment = xlTop
    
    Application.CommandBars("cell").Reset
    
    Cells(1, 1).Select
    isdrill = False
    ActiveSheet.names.Add "PivotName", DrillSheet
   
    If ReadKeyValue("DrillColMax") = "" Then
       Call WriteKeyValue("DrillColMax", "40")
    End If
    Dim Drillcolmax As Integer
    Drillcolmax = CInt(ReadKeyValue("DrillColMax"))
    Dim sheet As String, maporder As String, i, numberformat As String, frmini As String
    sheet = ActiveSheet.Name
    Application.ScreenUpdating = False
    sheets(DrillSheet).Select
    Title = getINIname("Title", True)
    stitle = getINIname("SubTitle", True)
    If stitle = "xxx" Then stitle = ""
    frmini = GetAppFolder & "\format.ini"
    Call wr_ini("Title", Title)
    Call wr_ini("Subtitle", stitle)
    maporder = getINIname("OutputLine", True)
    If maporder = "xxx" Then maporder = getINIname("Mapline", True)
    sheets(sheet).Select
    ActiveSheet.names.Add "Title", Title
    ActiveSheet.names.Add "SubTitle", stitle
    Dim outputline As String, iswrap As Boolean
    Range("A2").Select
    ActiveWindow.FreezePanes = True
    Dim Wrapped As Boolean
    For i = 1 To nc
          ReDim Preserve overrides(i)
          Range(Cells(2, i), Cells(nr + 2, i)).Select
          Wrapped = Selection.WrapText
          style = "X_" & CleanName(Cells(1, i).Text)
          Selection.column.AutoFit
          If Not Wrapped And ActiveCell.ColumnWidth > Drillcolmax Then
              overrides(i) = True
          End If
          If Not isStyleThere(style) Then
             ActiveWorkbook.Styles.Add Name:=style
             Selection.style = style
             Selection.style.numberformat = wp.Cells(2, i).numberformat
             Selection.style.HorizontalAlignment = wp.Cells(2, i).HorizontalAlignment
             Selection.style.VerticalAlignment = xlTop
             ActiveWorkbook.Styles(style).IncludeBorder = False
             If ActiveCell.ColumnWidth > Drillcolmax Then
                ActiveWorkbook.Styles(style).WrapText = True
                Columns(i).ColumnWidth = Drillcolmax
                iswrap = True
                
             End If
          End If
          If ActiveWorkbook.Styles(style).WrapText Then
            iswrap = True
          End If
          If Selection.style = "Normal" Then
             Selection.numberformat = wp.Cells(2, i).numberformat
             Selection.style = style
          Else
             Selection.style = style
          End If
          If ActiveCell.ColumnWidth > Drillcolmax Then
                Columns(i).ColumnWidth = Drillcolmax
                Selection.style = style
          End If
'          If ActiveWorkbook.Styles(style).WrapText = True Then
'             Selection.WrapText = True
'          End If
          
          If isGeneral = 0 And ActiveWorkbook.Styles(style).numberformat = "General" Then isGeneral = i
    Next i
   
    Range("A1").Select
'    Application.ScreenUpdating = True
'    Application.ScreenUpdating = False
    Application.StatusBar = "Formatting the drill sheet now ..."
    ActiveSheet.names.Add "OutputLine", maporder
   
    Dim bodyarea As String, nrows, ncols
    Range("A1").Select
    nrows = Selection.CurrentRegion.Rows.Count
    ncols = Selection.CurrentRegion.Columns.Count
    bodyarea = "=" & ActiveSheet.Name & "!R2C1:R" & nrows & "C" & ncols
    ActiveSheet.names.Add Name:="body_area", RefersToR1C1:=bodyarea
    ActiveSheet.Name = NextName
    NRowFormat = 2
 '   XLCFormatColumnAll
    
    Range(Cells(1, 1), Cells(1, nc)).Select
    Selection.Borders(xlDiagonalDown).LineStyle = xlNone
    Selection.Borders(xlDiagonalUp).LineStyle = xlNone
    With Selection.Borders(xlEdgeLeft)
        .LineStyle = xlContinuous
        .Weight = xlThin
        .colorindex = xlAutomatic
    End With
    With Selection.Borders(xlEdgeTop)
        .LineStyle = xlContinuous
        .Weight = xlThin
        .colorindex = xlAutomatic
    End With
    With Selection.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .Weight = xlThin
        .colorindex = xlAutomatic
    End With
    With Selection.Borders(xlEdgeRight)
        .LineStyle = xlContinuous
        .Weight = xlThin
        .colorindex = xlAutomatic
    End With
    With Selection.Borders(xlEdgeLeft)
        .LineStyle = xlContinuous
        .Weight = xlThin
        .colorindex = xlAutomatic
    End With
    With Selection.Borders(xlInsideVertical)
        .LineStyle = xlContinuous
        .Weight = xlThin
        .colorindex = xlAutomatic
    End With
    With Selection.Borders(xlInsideHorizontal)
        .LineStyle = xlContinuous
        .Weight = xlThin
        .colorindex = xlAutomatic
    End With
    Range(Cells(nr, 1), Cells(nr, nc)).Select
    Selection.Borders(xlEdgeBottom).LineStyle = xlNone
    For i = 1 To nc
      Range(Cells(2, i), Cells(nr + 2, i)).Select
      Selection.Borders(xlDiagonalDown).LineStyle = xlNone
      Selection.Borders(xlDiagonalUp).LineStyle = xlNone
      Selection.Borders(xlEdgeLeft).LineStyle = xlContinuous
      Selection.Borders(xlEdgeTop).LineStyle = xlNone
      Selection.Borders(xlEdgeBottom).LineStyle = xlNone
      Selection.Borders(xlEdgeRight).LineStyle = xlContinuous
      Selection.Borders(xlInsideVertical).LineStyle = xlNone
      Selection.Borders(xlInsideHorizontal).LineStyle = xlNone
      Selection.Borders(xlEdgeLeft).LineStyle = xlContinuous
      Selection.Borders(xlEdgeBottom).LineStyle = xlNone
    Next i
    Application.StatusBar = "Changing order if required ..."
    If maporder <> "xxx" Then
       XPMapNewOrder (maporder)
    End If
    Application.StatusBar = "Setting Styles and Totals ..."
    Range(Cells(1, nc), Cells(nr + 2, nc)).Select
    Selection.Borders(xlEdgeRight).LineStyle = xlContinuous
    Range(Cells(1, nc), Cells(nr + 2, nc)).Select
    Selection.Borders(xlEdgeLeft).LineStyle = xlContinuous
    Range(Cells(nr + 1, 1), Cells(nr + 1, nc)).Select
    Selection.style = "XBodyBottom"
    Range(Cells(nr + 2, 1), Cells(nr + 2, nc)).Select
    Selection.style = "XTotals"
    ActiveWindow.DisplayGridlines = False
    ActiveWindow.View = xlPageBreakPreview
    ActiveWindow.View = xlNormalView
    ActiveSheet.DisplayAutomaticPageBreaks = False
    XPSetTotalAll
   
    Dim value
    For i = 1 To nc
      style = "X_" & CleanName(Cells(1, i).Text)
      value = GetSheetVar(DrillSheet, style & "_Col")
      If value <> "" Then
'         ActiveWorkbook.Styles(style).WrapText = True
         Columns(i).ColumnWidth = value
      ElseIf overrides(i) Then
         Columns(i).ColumnWidth = Drillcolmax
      End If
      If Columns(i).Hidden Then
         ActiveWorkbook.Styles(style).WrapText = False
      End If
    Next i
    
    XPGetHideStr
    XLCFormatColumnAll
    Application.StatusBar = "Setting Margins and Pages  ..."
    'SetMargins
    XLPApplyPageAuto
    
    ActiveSheet.DisplayAutomaticPageBreaks = False
    ActiveSheet.PageSetup.Orientation = DrillOrientation
    With ActiveSheet.PageSetup
        .zoom = False
        .FitToPagesWide = 1
        .FitToPagesTall = False
        .PrintTitleRows = "$1:$1"
    End With
    ActiveSheet.PageSetup.CenterHorizontally = True
    Cells(1, 1).Select
'    Selection.AutoFilter
    Application.StatusBar = False
    If DrillSheet = "EZPivotTable" Or DrillSheet = "FormattedPivotTable" _
    Or DrillSheet = "PivotTableDemo" Then
        SetButtonsComments (3)
    End If

    Application.StatusBar = False
    If GetSheetVar(DrillSheet, "Subt1") <> "" Then
       RunSubtotalsAuto
    End If
    FixNonXcelerator
    If isGeneral = 0 Then Exit Sub
    Cells(2, isGeneral).Select
End Sub
Function NextName() As String
    Dim i
    For i = 1 To 254
      NextName = DrillSheet & "_" & i
      If Not isSheet1(NextName) Then Exit Function
    Next i
End Function
Public Function XPDoubleClick(ByVal Target As Range) As Boolean
    Dim addr As String, k, x As String, source As String
    On Error Resume Next
    If ActiveSheet.Name = "FormattedData" Then Exit Function
    k = ActiveSheet.PivotTables.Count
    addr = Selection.address
    If getINIname("IPivot", True) <> "xxx" Or getINIname("IsPivot", True) <> "xxx" Or k > 0 Then
       isdrill = True
       DrillSheet = ActiveSheet.Name
    Else
       isdrill = False
       DrillSheet = ""
    '   If ReadKeyValue("installfolder") <> "" Then Application.SendKeys ("{ESC}")
       Exit Function
    End If
    Dim hidstr As String, totstr As String, outputline As String, nc, i
    nc = ActiveSheet.UsedRange.Columns.Count
    If getINIname("IPivot", True) = "xxx" And getINIname("isPivot", True) = "xxx" _
    And ActiveSheet.PivotTables.Count > 0 And getINIname("hidstr", True) = "xxx" Then
       For i = 1 To nc
          hidstr = hidstr & "F"
          totstr = totstr & "1"
       Next i
       ActiveSheet.names.Add "Hidstr", hidstr
       ActiveSheet.names.Add "Totstr", totstr
       ActiveSheet.names.Add "PivotRowBand", ReadKeyValue("PivotRowBand")
    End If
    If k > 0 Then
   '    ActiveSheet.Names.Add "IPivot", "1"
       If getINIname("PivotSource", True) = "xxx" Then
          x = ActiveSheet.PivotTables(1).SourceData
          k = InStr(x, "!")
          If k > 0 Then
             source = "='" & Mid(x, 1, k - 1) & "'!Q1:Q1"
             ActiveSheet.names.Add "PivotSource", RefersToR1C1:=source
          End If
       End If
    End If
    If getINIname("PivotName", True) = "xxx" And getINIname("XCStyles", True) = "xxx" Then Exit Function
    If ReadKeyValue("installfolder") <> "" Then Application.SendKeys ("{ESC}")
End Function
Function isSheet1(sheet As String) As Boolean
    Dim i As Integer, sheet1 As String
    sheet1 = Trim(LCase(sheet))
    On Error Resume Next
    For i = 1 To ActiveWorkbook.sheets.Count
       If sheet1 = Trim(LCase(sheets(i).Name)) Then
          isSheet1 = True
          Exit Function
       End If
    Next i
End Function
Sub XPSetIni()
    On Error Resume Next
    inifile = GetAppFolder & "\format.ini"
    Kill inifile
    Dim ncol As Integer, nrow As Integer, i As Integer, is1 As String, opt As String, js As String
    Dim j As Integer
    Dim mapline As String, xtotal As String
    '
    Range("A1").Select
    Selection.CurrentRegion.Select
    ncol = Selection.CurrentRegion.Columns.Count
    nrow = ActiveCell.row
    For i = 1 To ncol
       opt = "Column " & i
       is1 = i
       Call wrt_ini(inifile, "FDesc", is1, opt)
       Call wrt_ini(inifile, "Rdesc", Cells(1, i).Text, opt)
       Call wrt_ini(inifile, "Numberformat", Cells(2, i).numberformat, opt)
       mapline = mapline & i
       If i < ncol Then mapline = mapline & ","
    Next i
    Call wrt_ini(inifile, "OutputLine", mapline)
End Sub
Public Function GetSheetVar(sheet As String, var As String) As String
    Dim n As Integer, value As String, sheets As String, vars As String, sheet1 As String
    Dim valuet As Variant, valuet1 As String
    sheet1 = LCase(sheet) & "!"
    vars = LCase(var)
    On Error Resume Next
    For n = 1 To ActiveWorkbook.names.Count
        valuet = ActiveWorkbook.names(n).Name
    '    Exit Function
        valuet1 = Replace(valuet, "'", "")
        valuet = LCase(Replace(valuet1, chr(34), ""))
        value = Replace(valuet, sheet1, "")
        If value = vars Then
           valuet = ActiveWorkbook.names(n).value
           value = Replace(Mid(valuet, 2), chr(34), "")
           valuet = Replace(value, "'", "")
           GetSheetVar = valuet
           Exit Function
        End If
    Next n
End Function
Sub XPEditOrder()
    Dim k As Integer, addr, startcol, format As String, cols As String, sheet As String
    Dim source As String, nc, wp As Worksheet, nr
    Dim mapline1 As String, totstr As String
    Application.ScreenUpdating = False
    On Error Resume Next
    addr = ActiveCell.address
    cols = "1"
    If ActiveCell.column <= CurRegCol Then cols = ActiveCell.column
    sheet = ActiveSheet.Name
    source = getINIname("PivotName", True)
    Range("A1").Select
    nc = Selection.CurrentRegion.Columns.Count
    nr = Selection.CurrentRegion.Rows.Count
    For k = 1 To nc
      mapline1 = mapline1 & k
      If k < nc Then mapline1 = mapline1 & ","
    Next k
    XPSetIni
    sheets(sheet).Select
    format = GetAppFolder & "\format.ini"
    Call wrt_ini(format, "StartSort", cols)
    Call wrt_ini(format, "OutputLine", mapline1)
    Range(addr).Select
    Application.ScreenUpdating = True
    ChDirx (GetAppFolder)
    k = EditPivotOrder
    Range(addr).Select
    ResDir
    If k = 2 Then Exit Sub
    Application.ScreenUpdating = False
    mapline1 = rd_iniFile(format, "OutputLine")
    Call XPMapNewOrder(mapline1)
    Application.ScreenUpdating = False
    nr = Selection.CurrentRegion.Rows.Count
    Range(Cells(1, nc), Cells(nr, nc)).Select
    With Selection.Borders(xlEdgeRight)
        .LineStyle = xlContinuous
        .Weight = xlThin
        .colorindex = xlAutomatic
    End With
    mapline1 = mapline1 & ","
    Dim hidstr, hidstr1, off, tst As Integer, i, totstr1
    sheets(source).Select
    hidstr = getINIname("Hidstr", True)
    totstr = getINIname("Totstr", True)
    nc = Len(totstr)
    hidstr1 = ""
    totstr1 = ""
    off = 1
    For i = 1 To nc
      k = InStr(Mid(mapline1, off), ",")
      tst = CInt(Mid(mapline1, off, k - 1))
      off = off + k
      hidstr1 = hidstr1 & Mid(hidstr, tst, 1)
      totstr1 = totstr1 & Mid(totstr, tst, 1)
    Next i
    sheets(sheet).Select
    mapline1 = ""
    Dim ptdata1 As String
    ptdata1 = FStrip(GetSheetVar(DrillSheet, "PivotSource")) & "_P"
    If Not isSheet1(ptdata1) Then
       ptdata1 = Replace(ptdata1, "_P", "")
    End If
    Set wp = sheets(ptdata1)
    For i = 1 To nc
       For k = 1 To nc
          If wp.Cells(1, k).Text = Cells(1, i).Text Then
             mapline1 = mapline1 & k
             Exit For
          End If
       Next k
       If i < nc Then mapline1 = mapline1 & ","
    Next i
    sheets(source).Select
    ActiveSheet.names.Add "Hidstr", hidstr1
    ActiveSheet.names.Add "Totstr", totstr1
    ActiveSheet.names.Add "Outputline", mapline1
    sheets(sheet).Select
    Dim paddr As String
'    paddr = ActiveSheet.UsedRange.Selection.Address
    Range("A1").Select
    Selection.CurrentRegion.Select
    nc = Selection.CurrentRegion.Columns.Count
    Range(Cells(1, 1), Cells(nr + 2, nc)).Select
    paddr = Selection.address
    ActiveSheet.PageSetup.printarea = paddr
    With ActiveSheet.PageSetup
        .FitToPagesWide = 1
        .FitToPagesTall = False
    End With
    Range(addr).Select
End Sub
Public Sub XPMapNewOrder(mapline As String)
    Dim paddr As String, mapwork As String, ws As Worksheet, value As String, wsheet As String
    Dim sheet1 As String
    Dim i As Integer, ncols As Integer, off As Integer, k As Integer, nr As Integer
    Dim n As Integer, n1 As Integer, j As Integer, Rdesc As String, isFilter As Boolean
    Dim sheet As String
    Application.DisplayAlerts = False
    On Error Resume Next
    wsheet = ActiveSheet.Name & "_X"
    sheet = ActiveSheet.Name
    If isSheet1(wsheet) Then
       sheets(wsheet).visible
       sheets(wsheet).Select
       ActiveWindow.SelectedSheets.Delete
    End If
    sheets(sheet).Copy before:=sheets(sheet)
    ActiveSheet.Name = wsheet
    sheets(sheet).Select
    Set ws = sheets(wsheet)
    If ActiveSheet.AutoFilterMode Then
       isFilter = True
       Selection.AutoFilter
    End If
    Range("A1").Select
    ncols = Selection.CurrentRegion.Columns.Count
    loadltrs
    mapwork = mapline & ","
    off = 1
    For i = 1 To ncols
       k = InStr(Mid(mapwork, off), ",")
       n = CInt(Mid(mapwork, off, k - 1))
       off = off + k
       Rdesc = LCase(Replace(ws.Cells(1, n).value, chr(10), " "))
       Rdesc = Replace(Rdesc, "_", " ")
       For j = 1 To ncols
          value = Replace(LCase(Cells(1, j).value), chr(10), " ")
          value = Replace(value, "_", " ")
          If value = Rdesc Then
             GoTo out1
          End If
       Next j
       If isFilter Then
         nr = ActiveSheet.UsedRange.Rows.Count
         Range(Cells(1, 1), Cells(nr - 1, ncols)).Select
         Selection.AutoFilter
         Cells(2, 1).Select
       End If
       Cells(2, 1).Select
       sheets(wsheet).Select
       ActiveWindow.SelectedSheets.Delete
       sheets(sheet).Select
       Exit Sub
out1:
       If j <> i Then    ' here we go move this puppy
         paddr = ltrs(j).value & ":" & ltrs(j).value
         Columns(paddr).Select
         Selection.Cut
         paddr = ltrs(i).value & ":" & ltrs(i).value
         Columns(paddr).Select
         Selection.Insert Shift:=xlToRight
         Application.CutCopyMode = False
       End If
    Next i
    If isFilter Then
         nr = ActiveSheet.UsedRange.Rows.Count
         Range(Cells(1, 1), Cells(nr - 1, ncols)).Select
         Selection.AutoFilter
    End If
    sheets(wsheet).Select
    ActiveWindow.SelectedSheets.Delete
    sheets(sheet).Select
    Cells(2, 1).Select
End Sub
Public Sub MapNewOrder(wsheet As String, mapline As String)
    If Not isSheet1(wsheet) Then Exit Sub
    If ActiveSheet.Name = wsheet Then Exit Sub
    Dim paddr As String, mapwork As String, ws As Worksheet, value As String
    Dim i As Integer, ncols As Integer, off As Integer, k As Integer, nr As Integer
    Dim n As Integer, n1 As Integer, j As Integer, Rdesc As String, isFilter As Boolean
    On Error Resume Next
    loadltrs
    Set ws = sheets(wsheet)
    If ActiveSheet.AutoFilterMode Then
       isFilter = True
       Selection.AutoFilter
    End If
    If CurRegCol > 0 Then
       ncols = CurRegCol
    Else
      ncols = ws.UsedRange.Columns.Count
    End If
    mapwork = mapline & ","
    off = 1
    For i = 1 To ncols
       k = InStr(Mid(mapwork, off), ",")
       n = CInt(Mid(mapwork, off, k - 1))
       off = off + k
       Rdesc = LCase(Replace(ws.Cells(1, n).value, chr(10), " "))
       Rdesc = Replace(Rdesc, "_", " ")
       For j = 1 To ncols
          value = Replace(LCase(Cells(1, j).value), chr(10), " ")
          value = Replace(value, "_", " ")
          If value = Rdesc Then
             GoTo out1
          End If
       Next j
       If isFilter Then
         nr = ActiveSheet.UsedRange.Rows.Count
         Range(Cells(1, 1), Cells(nr - 1, ncols)).Select
         Selection.AutoFilter
         Cells(2, 1).Select
       End If
       Cells(2, 1).Select
       Exit Sub
out1:
       If j <> i Then    ' here we go move this puppy
         paddr = ltrs(j).value & ":" & ltrs(j).value
         Columns(paddr).Select
         Selection.Cut
         paddr = ltrs(i).value & ":" & ltrs(i).value
         Columns(paddr).Select
         Selection.Insert Shift:=xlToRight
         Application.CutCopyMode = False
       End If
    Next i
    If isFilter Then
         nr = ActiveSheet.UsedRange.Rows.Count
         Range(Cells(1, 1), Cells(nr - 1, ncols)).Select
         Selection.AutoFilter
    End If
    Cells(2, 1).Select
End Sub
Sub XLCFormatColumnAll()
    Dim i, ncol, Name As String, pivotname As String, rng As Range
    On Error Resume Next
    pivotname = getINIname("PivotName", True)
    If ActiveSheet.AutoFilterMode Then Selection.AutoFilter
    ncol = CurRegCol
    For i = 1 To ncol
       Name = "X_" & CleanName(Cells(1, i).Text) & "_Col"
       If Not Columns(i).Hidden And GetSheetVar(pivotname, Name) = "" Then
         Cells(1, i).Select
         XLCFormatColumn
       End If
    Next i
    Set rng = Range("A1")
    If Not ActiveSheet.AutoFilterMode Then
       rng.AutoFilter
    End If
    Set rng = Rows(1)
    rng.AutoFit
End Sub
Sub XLCFormatColumn()
    Dim wid As Double, nrow, addr, col, wid1 As Double
    Dim n, rng As Range
    If NRowFormat > 2 Then
       n = 2 'NRowFormat
    Else
       n = 2
    End If
    col = ActiveCell.column
    nrow = CurRegRow + 2
    On Error Resume Next
    Cells(1, col).WrapText = True
    Columns(col).width = 127
    Set rng = Range(Cells(n, col), Cells(nrow + 2, col))
    rng.Columns.AutoFit
    wid = Columns(col).ColumnWidth
    wid1 = XLCFilterAreaD
    Columns(col).width = 127
    If wid1 > wid Then
       Columns(col).ColumnWidth = wid1
    Else
       Columns(col).ColumnWidth = wid
    End If
End Sub
Function XLCFilterAreaD() As Double
    Dim i, j, k, k1, desc As String, testadr As String, ncol, desc1, desc2, desc3
    Dim colwid As Double, ncol1, k2, k3, rng As Range
    loadltrs
    ncol1 = ActiveCell.column
    desc = Cells(1, ActiveCell.column).value
    ncol = CurRegCol + 1
    testadr = ltrs(ncol).value & "1"
    k = InStr(desc, " ")
    If k > 0 Then
      k2 = InStr(Mid(desc, k + 1), " ")
      If k2 > 0 Then
         k2 = k + k2
         k3 = Len(desc) / 2
         If Abs(k3 - k2) < Abs(k3 - k) Then
            k = k2
         End If
      End If
      Cells(1, ncol1).WrapText = True
      desc1 = Mid(desc, 1, k - 1)
      desc2 = Mid(desc, k + 1)
      Cells(1, ncol1).value = Replace(desc, "~", " ")
      Cells(1, ncol).numberformat = "@"
      Cells(1, ncol).value = desc1
      Set rng = Range(testadr)
      rng.font.Bold = True
      rng.Columns.AutoFit
      colwid = Columns(ncol).ColumnWidth
      Cells(1, ncol).value = desc2
      
      rng.Columns.AutoFit
      Set rng = Range(testadr)
      If Columns(ncol).ColumnWidth > colwid Then
        colwid = Columns(ncol).ColumnWidth
      End If
      XLCFilterAreaD = colwid
    Else
      Set rng = Range(testadr)
      Cells(1, ncol1).WrapText = False
      Cells(1, ncol).value = desc
      rng.Columns.AutoFit
      XLCFilterAreaD = Columns(ncol).ColumnWidth
    End If
    Columns(ncol).Delete
End Function
Sub XLPApplyPageAuto()
    PageAuto = True
    XLPApplyPageFormat
    PageAuto = False
End Sub
Sub XLPApplyPageFormat()
    Dim k, runformat, addr
    On Error Resume Next
    addr = Selection.address
    ActiveSheet.names.Add "XRunPageFormat", "1"
    PageChart = isSheetChart(ActiveSheet.Name)
    If Not PageAuto Then
      ChDirx (GetAppFolder)
      k = XLPEditTitle
      ResDir
      If k = 2 Then Exit Sub
      If ReadKeyValue("Installfolder") <> "" Then
        If ReadKeyValue("CompanyName") = "" And ReadKeyValue("UserName") = "" Then
          XLPCompanyUser
        End If
      End If
    End If
    On Error Resume Next
    ActiveSheet.names.Add "XRunPageFormat", "1"
    Application.StatusBar = "Applying Page Format ..."
    XLPApplyPageRun
    FormatGrandTotal
    Range(addr).Select
    Application.StatusBar = False
End Sub
Sub XLPApplyPageFormat1()
    Dim k, runformat
    ActiveSheet.names.Add "XRunPageFormat", "1"
    PageChart = isSheetChart(ActiveSheet.Name)
    Application.ScreenUpdating = False
    If Not PageAuto Then
      k = XLPEditTitle
      If k = 2 Then Exit Sub
      If ReadKeyValue("CompanyName") = "" And ReadKeyValue("UserName") = "" Then
           XLPCompanyUser
      End If
    End If
    On Error Resume Next
    Application.ScreenUpdating = False
    ActiveSheet.names.Add "XRunPageFormat", "1"
    XLPApplyPageRun
End Sub
Sub XLPApplyPageRun1()
    If Cells(1, ActiveCell.column).Text = "" Then Exit Sub
    XLPApplyPageRun
End Sub
Sub PageCompanyUser()
    On Error Resume Next
    '
    Dim CompanyName As String, User As String, CenterHeader As String, k
    Dim sheet As String
    If ReadKeyValue("SetPageSetup") = "0" Then Exit Sub
    CompanyName = ReadKeyValue("CompanyName")
    User = ReadKeyValue("Username")
    If ReadKeyValue("PrintUser") = "0" Then User = ""
    If ReadKeyValue("PrintCompany") = "0" Then CompanyName = ""
    sheet = FindDataSheet(ActiveSheet.Name)
    If sheet = "" Then sheet = ActiveSheet.Name
    CenterHeader = GetSheetVar(sheet, "Title")
    If GetSheetVar(sheet, "Subtitle") <> "" Then
       CenterHeader = CenterHeader & chr(10) & GetSheetVar(sheet, "Subtitle")
    End If
    If CenterHeader = "xxx" Then CenterHeader = ""
    With ActiveSheet.PageSetup
        If User = "" Then
         .LeftHeader = "Date: &D"
         .RightHeader = "Time: &T"
        Else
         .LeftHeader = "Date: &D" & chr(10) & "Time: &T"
         .RightHeader = "User: " & User
        End If
        .LeftFooter = "File:&F Tab:&A"
        .CenterFooter = "Page &P of &N"
        .RightFooter = ""
       ' If CompanyName <> "" Then
          .CenterHeader = "&""Arial,Bold""&12" & CompanyName & chr(10) & CenterHeader
'        Else
'          .CenterHeader = CenterHeader
'        End If
    End With
End Sub
Sub SetPages()
    On Error Resume Next
    If getINIname("IPivot", True) = "xxx" Then Exit Sub
    
    PageCompanyUser
    PageCompanyUserChart
End Sub
Sub PageCompanyUserChart()
    On Error Resume Next
    '
    Dim CompanyName As String, User As String, CenterHeader As String, k
    Dim sheet As String
    If ReadKeyValue("SetPageSetup") = "0" Then Exit Sub
    CompanyName = ReadKeyValue("CompanyName")
    User = ReadKeyValue("Username")
    If ReadKeyValue("PrintUser") = "0" Then User = ""
    If ReadKeyValue("PrintCompany") = "0" Then CompanyName = ""
    sheet = FindDataSheet(ActiveSheet.Name)
    If sheet = "" Then sheet = ActiveSheet.Name
    CenterHeader = GetSheetVar(sheet, "Title")
    If CenterHeader = "xxx" Then CenterHeader = ""
    With ActiveChart.PageSetup
        If User = "" Then
         .LeftHeader = "Date: &D"
         .RightHeader = "Time: &T"
        Else
         .LeftHeader = "Date: &D" & chr(10) & "Time: &T"
         .RightHeader = "User: " & User
        End If
        .LeftFooter = "File:&F Tab:&A"
        .CenterFooter = "Page &P of &N"
        .RightFooter = ""
        If CompanyName <> "" Then
          .CenterHeader = "&""Arial,Bold""&12" & CompanyName & chr(10) & CenterHeader
        Else
          .CenterHeader = CenterHeader
        End If
    End With
End Sub
Sub XLPApplyPageRun()
    If Not PageChart Then
'       If getINIname("XRunPageFormat", True) <> "1" Then Exit Sub
    End If
    On Error Resume Next
    Dim addr
    addr = Selection.address
    Application.ScreenUpdating = False
    SetMargins
    If ReadKeyValue("SetPageSetup") = "1" Then
      PageCompanyUser
    End If
    Applyformat
    Range(addr).Select
End Sub
Sub ResizeChart()
    On Error Resume Next
    If ActiveSheet.ChartObjects.Count < 1 Then Exit Sub
    ResizeColumns
End Sub
Sub X2PivotSetPages()
    Dim i, j, FitToPage As Integer, ovalue As Integer, zoom
    On Error Resume Next
    '
    Application.StatusBar = "Autofitting Pivot Page ..."
    ovalue = CInt(getINIname("XPortrait", True))
    FitToPage = CInt(ReadKeyValue("FitToPage"))
    If FitToPage = 0 Then FitToPage = 83
    ActiveSheet.PageSetup.zoom = False
    ActiveSheet.PageSetup.FitToPagesWide = 1
    ActiveSheet.PageSetup.FitToPagesTall = False
    Select Case ovalue
    Case 0:  ' automatic
         ActiveSheet.PageSetup.Orientation = xlPortrait
         
         ActiveSheet.PageSetup.FitToPagesWide = 1
         ActiveSheet.PageSetup.FitToPagesTall = False
    '     ActiveSheet.PageSetup.FitToPagesWide = False
         zoom = ActiveSheet.PageSetup.zoom
         If zoom >= FitToPage Then GoTo Out
    Case 1:  ' portrait only
         ActiveSheet.PageSetup.FitToPagesWide = False
         ActiveSheet.PageSetup.Orientation = xlPortrait
         ActiveSheet.PageSetup.FitToPagesWide = False
    Case 2:  ' landscape only
         ActiveSheet.PageSetup.Orientation = xlLandscape
    End Select
Out:
    If isSheetChart(ActiveSheet.Name) Then
      ActiveChart.Select
      ActiveChart.ChartArea.Select
      ActiveWindow.zoom = True
      ActiveSheet.PageSetup.Orientation = xlLandscape
      ActiveChart.Select
      ActiveChart.ChartArea.Select
      ActiveWindow.zoom = True
    End If
    Application.StatusBar = False
End Sub

Sub XLPCompanyUser()
    Dim k
    On Error Resume Next
    ChDirx (GetAppFolder)
    k = EditPivotUser
    ResDir
    If k = 2 Then Exit Sub
    If getINIname("PivotName", True) <> "xxx" Or ActiveSheet.PivotTables.Count > 0 Then
        ActiveSheet.names.Add "XRunPageFormat", "1"
        XLPApplyPageRun
        FormatGrandTotal
    End If
End Sub
Sub FormatGrandTotal()
     Dim ncols As Integer, i, j, isFound As Boolean
    Dim addr As String
    
    On Error Resume Next
    If getINIname("PivotName", True) <> "xxx" Then Exit Sub
    If Application.ScreenUpdating Then
       If Application.ScreenUpdating Then Application.ScreenUpdating = False
    End If
    addr = Selection.address
    FormatDataColumns
    For i = ActiveSheet.UsedRange.Columns.Count To 2 Step -1
      For j = 3 To 4
         If Mid(Cells(j, i).Text, 1, 5) = "Grand" Then
            isFound = True
            ncols = i
            Exit For
         End If
      Next j
      If isFound Then Exit For
    Next i
    If isFound Then
      Range(Cells(3, ncols), Cells(4, ncols)).Select
      Cells(3, ncols).value = _
       Replace(Cells(3, ncols).Text, "Grand Total", "Grand" & chr(10) & "Total")
      Cells(4, ncols).value = _
       Replace(Cells(4, ncols).Text, "Grand Total", "Grand" & chr(10) & "Total")
      Rows("3:4").WrapText = True
      Columns(ncols).EntireColumn.AutoFit
      Columns(ncols + 1).Select
      Selection.Delete
    Else
      For i = ActiveSheet.UsedRange.Columns.Count To 1 Step -1
         If Trim(Cells(4, i).Text) <> "" Then Exit For
      Next i
      ncols = i
      Columns(ncols + 1).Select
      Selection.Delete
    End If
    Range("A4").Select
    i = Selection.CurrentRegion.Rows.Count + 2
    Cells(i, 1).value = Replace(Cells(i, 1).Text, chr(10), " ")
    Range(addr).Select

    SetIconPivot
End Sub
Sub XLPDisplayGridLines()
    On Error Resume Next
    If ActiveWindow.DisplayGridlines Then
       ActiveWindow.DisplayGridlines = False
    Else
       ActiveWindow.DisplayGridlines = True
    End If
End Sub
Sub XLPPrintGridLines()
    On Error Resume Next
    If ActiveSheet.PageSetup.PrintGridlines Then
       ActiveSheet.PageSetup.PrintGridlines = False
    Else
       ActiveSheet.PageSetup.PrintGridlines = True
    End If
 End Sub
 
Function EZFindChartData() As String
    Dim colstr As String, i As Integer, Worksheet As String
    On Error Resume Next
    colstr = ActiveChart.SeriesCollection(1).formula
    If Err.Number > 0 Then Exit Function
    If InStr(colstr, "=SERIES") = 0 Then Exit Function
    colstr = Replace(ActiveChart.SeriesCollection(1).formula, "=SERIES(", "")
    colstr = Replace(colstr, "'", "")
    i = 0
    Dim j As Integer
    j = InStr(1, colstr, "!")
    If j < i Then Exit Function
    Worksheet = Replace(Mid(colstr, i + 1, j - i - 1), ",", "")
    On Error Resume Next
    EZFindChartData = Worksheet
End Function
 Function XLPEditTitle() As Integer
    Dim k, frmini As String, Name, pname As String, sheet1, ispivot As Boolean
    Dim xtitle, sheet, stitle, pct, portrait, source As String
    sheet = ActiveSheet.Name
    '
    If PageChart Then
       sheet1 = EZFindChartData
       sheets(sheet1).Select
    End If
    source = getINIname("Pivotsource", True)
    pname = getINIname("PivotName", True)
    If source <> "FormattedData" Then
       frmini = GetAppFolder & "\format.ini"
       ispivot = True
    Else
       frmini = ReadKeyValue("Installfolder") & "\format.ini"
    End If
    frmini = GetAppFolder & "\format.ini"
    On Error Resume Next
    Kill frmini
    xtitle = getINIname("Title", True)
    stitle = getINIname("Subtitle", True)
    If xtitle = "xxx" And GetSheetVar(source, "Title") <> "" Then
       xtitle = GetSheetVar(source, "Title")
    End If
    If xtitle <> "xxx" Then
          ActiveSheet.names.Add "Title", xtitle
    Else
          ActiveSheet.names.Add "Title", GetSheetVar(source, "Title")
    End If
    If stitle = "xxx" And GetSheetVar(source, "subTitle") <> "" Then
       stitle = GetSheetVar(source, "subTitle")
    End If
    If stitle <> "xxx" Then
          ActiveSheet.names.Add "SubTitle", stitle
    End If
    
    If getINIname("Title", True) <> "xxx" Then
       Call wrt_ini(frmini, "Title", getINIname("Title", True))
    End If
    Call wr_ini("AutoPageFormat", getINIname("XRunPageFormat", True))
    
    If getINIname("SubTitle", True) <> "xxx" Then
       Call wrt_ini(frmini, "Subtitle", getINIname("SubTitle", True))
    End If
    
    If getINIname("XPortrait", True) = "xxx" Then
       Call wrt_ini(frmini, "Portrait", "0")
    Else
       Call wrt_ini(frmini, "Portrait", getINIname("XPortrait", True))
    End If
    
    If getINIname("XPct", True) = "xxx" Then
       Call wrt_ini(frmini, "Pct", "83")
    Else
       Call wrt_ini(frmini, "Pct", getINIname("XPct", True))
    End If
    sheets(sheet).Select
    Application.ScreenUpdating = True
    
    ChDirx (GetAppFolder)
    
    k = EditPivotTitles()
    '
    RestoreDir
    If k = 2 Then
      XLPEditTitle = 2
      Exit Function
    End If
    If PageChart Then
       sheets(sheet1).Select
    End If
    ActiveSheet.names.Add "Title", rd_iniFile(frmini, "Title")
    ActiveSheet.names.Add "SubTitle", rd_iniFile(frmini, "SubTitle")
    ActiveSheet.names.Add "XPortrait", rd_iniFile(frmini, "Portrait")
    If pname <> "xxx" Then
      sheets(pname).Select
      ActiveSheet.names.Add "DrillPortrait", rd_iniFile(frmini, "Portrait")
      ActiveSheet.names.Add "Title", rd_iniFile(frmini, "Title")
      ActiveSheet.names.Add "Subtitle", rd_iniFile(frmini, "SubTitle")
    End If
    If source <> "xxx" Then
      sheets(source).Select
      ActiveSheet.names.Add "DrillPortrait", rd_iniFile(frmini, "Portrait")
      ActiveSheet.names.Add "Title", rd_iniFile(frmini, "Title")
      ActiveSheet.names.Add "Subtitle", rd_iniFile(frmini, "SubTitle")
    End If
    
    sheets(sheet).Select
    If PageChart Then
      PageSetupChart
    Else
      PageSetupSheet
    End If
End Function
Function XPGetSheetVar(sheet As String, var As String) As String
    Dim n As Integer, value As String, sheets As String, vars As String, sheet1 As String
    Dim valuet As Variant, valuet1 As String
    sheet1 = LCase(sheet) & "!"
    vars = LCase(var)
    On Error Resume Next
    For n = 1 To ActiveWorkbook.names.Count
        valuet = ActiveWorkbook.names(n).Name
        valuet1 = Replace(valuet, "'", "")
        valuet = LCase(Replace(valuet1, chr(34), ""))
        value = Replace(valuet, sheet1, "")
        If value = vars Then
           valuet = ActiveWorkbook.names(n).value
           value = Replace(Mid(valuet, 2), chr(34), "")
           valuet = Replace(value, "'", "")
           XPGetSheetVar = valuet
           Exit Function
        End If
    Next n
End Function
Sub DeleteDrillSheet1()
    Dim pname As String, portrait As String
    On Error Resume Next
    pname = getINIname("PivotName", True)
    If pname = "xxx" Then Exit Sub
    portrait = ActiveSheet.PageSetup.Orientation
    Application.DisplayAlerts = False
    ActiveWindow.SelectedSheets.Delete
    sheets(pname).Select
    ActiveSheet.names.Add "DrillOrientation", portrait
    Application.DisplayAlerts = True
End Sub
Function XPBeforeRightClick(ByVal Target As Range) As Boolean
    Dim objitem, obj, totstr As String, pname As String, i
    On Error Resume Next
'    Application.CommandBars("Cell").Reset
    Set obj = Application.CommandBars("Column").Controls
'
    Application.CommandBars("Cell").Controls("Reorder Columns").Delete
    pname = getINIname("PivotName", True)
    Set obj = Application.CommandBars("Cell").Controls
    If getINIname("PivotName", True) <> "xxx" Then '  Or ReadKeyValue("Installfolder") = "" Then
      Application.CommandBars("Cell").Reset
      DeleteStdRightClick
    End If
    obj("Delete Drill Sheet").Delete
    obj("Export All Columns").Delete
    obj("Export Visible Columns").Delete
    obj("Titles / Print Setup").Delete
    obj("Hide Columns").Delete
    obj("Fixed Col Width").Delete
    obj("Wrap Text").Delete
    obj("Set Default Max Width").Delete
    obj("Subtotal").Delete
    obj("Subtotals Off").Delete
    obj("Auto Subtotals").Delete
    AddDateRightClicks
    If pname = "xxx" Or ActiveSheet.PivotTables.Count > 0 Then
  '    Application.CommandBars("Cell").Reset
    End If
    If ActiveCell.column > ActiveSheet.UsedRange.Columns.Count Then Exit Function
    If pname <> "xxx" Then
    totstr = XPGetSheetVar(pname, "totstr")
   
    i = ActiveCell.column
    Set objitem = Application.CommandBars("Column").Controls.Add(msoControlButton, , , 1, True)
    objitem.Caption = "UnHide Columns"
    objitem.OnAction = "XPUnHideColumns"
    obj("Cut").BeginGroup = True
    Set objitem = Application.CommandBars("Column").Controls.Add(msoControlButton, , , 1, True)
    objitem.Caption = "Hide Columns"
    objitem.OnAction = "XPHideColumns"
    Set obj = Application.CommandBars("Cell").Controls
    obj("Sum").Delete
    obj("Count").Delete
    obj("Drill Column Style").Delete
    obj("Hide Column").Delete

    obj("Cut").BeginGroup = True
    obj("Auto-Size").BeginGroup = True

  '  objitem.BeginGroup = True
    Dim isformatted As Boolean
    Set objitem = Application.CommandBars("Cell").Controls.Add(msoControlButton, , , 1, True)
    objitem.Caption = "Format Drill Sheet"
    objitem.OnAction = "FormatDrillSheet"
    If getINIname("Body_Area", True) <> "xxx" Then
      objitem.Enabled = False
      isformatted = True
  
    End If
    objitem.BeginGroup = True

    
    Set objitem = Application.CommandBars("Cell").Controls.Add(msoControlButton, , , 1, True)
    objitem.Caption = "Delete Drill Sheet"
    objitem.OnAction = "DeleteDrillSheet1"
    objitem.FaceId = 478
    objitem.BeginGroup = True
    AddDateRightClicks
    Dim source As String, dstyle, isWrapped As Boolean
    dstyle = CleanName(Cells(2, ActiveCell.column).style)
    source = getINIname("PivotName", True)
    isWrapped = ActiveWorkbook.Styles(dstyle).WrapText
    Set objitem = Application.CommandBars("Cell").Controls.Add(msoControlButton, , , 1, True)
    objitem.Caption = "Set Default Max Width"
    objitem.OnAction = "DrillSetColDefault"
    objitem.Enabled = True
    
    
    Set objitem = Application.CommandBars("Cell").Controls.Add(msoControlButton, , , 1, True)
    objitem.Caption = "Wrap Text"
    objitem.OnAction = "DrillSetWrap"
    objitem.state = isWrapped
    objitem.Enabled = True
    
    Set objitem = Application.CommandBars("Cell").Controls.Add(msoControlButton, , , 1, True)
    objitem.Caption = "Fixed Column  Width"
    objitem.OnAction = "DrillSetColWidth"
    objitem.Enabled = True
    
    If GetSheetVar(source, dstyle & "_col") <> "" Then
      objitem.state = True
    End If
    objitem.BeginGroup = True
    
    Set objitem = Application.CommandBars("Cell").Controls.Add(msoControlButton, , , 1, True)
    objitem.Caption = "Export Visible Columns"
    objitem.OnAction = "ExportDrillSheet"
    objitem.Enabled = isformatted
    
    If InStr(GetSheetVar(source, "Hidstr"), "T") > 0 Then
       objitem.Enabled = True
       objitem.Enabled = isformatted
    Else
       objitem.Enabled = False
    End If
    
   
    Set objitem = Application.CommandBars("Cell").Controls.Add(msoControlButton, , , 1, True)
    objitem.Caption = "Export All Columns"
    objitem.OnAction = "ExportDrillSheet1"
    objitem.Enabled = isformatted
    
    If Not isSheet1("FormattedData") Then
      objitem.BeginGroup = True
    Else
      Set objitem = Application.CommandBars("Cell").Controls.Add(msoControlButton, , , 1, True)
      objitem.Caption = "Export Original Data"
      objitem.OnAction = "ExportDrillOriginal"
      objitem.Enabled = isformatted
      objitem.BeginGroup = True
    End If
    
    Set objitem = Application.CommandBars("Cell").Controls.Add(msoControlButton, , , 1, True)
    objitem.Caption = "Reorder Columns"
    objitem.OnAction = "XPEditOrder"
    objitem.FaceId = 315
    objitem.Enabled = isformatted
    objitem.BeginGroup = True
    
    Dim pivotname As String
    pivotname = getINIname("PivotName", True)
    Set objitem = Application.CommandBars("Cell").Controls.Add(msoControlButton, , , 1, True)
    objitem.Caption = "Auto Subtotals"
    objitem.OnAction = "SetAutoSubtotals"
    If Rows(2).OutlineLevel = 1 Then
      objitem.Enabled = False
    Else
      If GetSheetVar(pivotname, "AutoSubtotals") = "1" Then
         objitem.state = True
      End If
    End If
    
    Set objitem = Application.CommandBars("Cell").Controls.Add(msoControlButton, , , 1, True)
    objitem.Caption = "Subtotals Off"
    objitem.OnAction = "NoSubtotals"
    If Rows(2).OutlineLevel = 1 Then objitem.Enabled = False
    
    Set objitem = Application.CommandBars("Cell").Controls.Add(msoControlButton, , , 1, True)
    objitem.Caption = "Subtotal"
    objitem.OnAction = "PivotSubtotals"
    objitem.FaceId = 226
 '   objitem.Enabled = False
    objitem.BeginGroup = True
    
    Set objitem = Application.CommandBars("Cell").Controls.Add(msoControlButton, , , 1, True)
    objitem.Caption = "Hide / UnHide Columns "
    objitem.OnAction = "XPHideColumns1"
    objitem.FaceId = 87
    
    
    objitem.Enabled = True
    objitem.Enabled = isformatted
    
    
    
    Set objitem = Application.CommandBars("Cell").Controls.Add(msoControlButton, , , 1, True)
    objitem.Caption = "Drill Style"
    objitem.OnAction = "XLPStyle"
    
    objitem.BeginGroup = True
    objitem.Enabled = isformatted
    
    Set objitem = Application.CommandBars("Cell").Controls.Add(msoControlButton, , , 1, True)
    objitem.Caption = "Sum"
    objitem.OnAction = "XPSetSum"
    objitem.Enabled = isformatted
   
    If Mid(totstr, i, 1) = "9" Then objitem.state = msoButtonDown
    Set objitem = Application.CommandBars("Cell").Controls.Add(msoControlButton, , , 1, True)
    objitem.Caption = "Count"
    objitem.OnAction = "XPSetCount"
    objitem.Enabled = isformatted
    If Mid(totstr, i, 1) = "3" Then objitem.state = msoButtonDown
    
   
    
    
  End If
    Set obj = Application.CommandBars("Column").Controls
    
    Dim objmenu, cbpop
    
    
    If getINIname("IPivot", True) <> "xxx" Then
          Application.CommandBars("PivotTable Context Menu").Reset
          If Application.version > 9 Then
              Application.CommandBars("PivotTable Context Menu").Controls("Show Field List").OnAction = "ShowFieldList"
          End If
          Set objmenu = Application.CommandBars("PivotTable Context Menu")
          Set objitem = objmenu.Controls("&Format Cells...")
          objitem.BeginGroup = True
          Set objitem = objmenu.Controls.Add(msoControlButton, , , 1, True)
          objitem.Caption = "Delete Pivot Table and Charts"
          objitem.OnAction = "PivotDelete1"
          objitem.FaceId = 1088
          objitem.BeginGroup = True
       
          Dim sepchart As String
          sepchart = ActiveSheet.Name & "_C"
          
          Set cbpop = objmenu.Controls.Add(msoControlPopup, , , 1, True)
          cbpop.Caption = "PivotTable Charts"
          Set objitem = cbpop.Controls.Add(msoControlButton, , , 1, True)
          objitem.Caption = "Save Embedded Chart Format"
          objitem.OnAction = "XPivotChartEmbedSave"
          If ActiveSheet.ChartObjects.Count = 0 Then
             objitem.Enabled = False
          Else
             objitem.Enabled = True
          End If
          
          Set objitem = cbpop.Controls.Add(msoControlButton, , , 1, True)
          objitem.Caption = "Save Separate Chart Format"
          objitem.OnAction = "XPivotChartSepSave"
          If Not isSheet1(sepchart) Then
             objitem.Enabled = False
          Else
             objitem.Enabled = True
          End If
          
          objitem.BeginGroup = True
          
          Set objitem = cbpop.Controls.Add(msoControlButton, , , 1, True)
          objitem.Caption = "Embedded Chart"
          objitem.OnAction = "XPivotChartEmbed"
          If ActiveSheet.ChartObjects.Count > 0 Then
            objitem.state = msoButtonDown
          Else
            objitem.state = msoButtonUp
          End If
          Set objitem = cbpop.Controls.Add(msoControlButton, , , 1, True)
          objitem.Caption = "Separate Chart"
          objitem.OnAction = "XPivotChartMake"
          
          If Not isSheet1(sepchart) Then
             objitem.state = msoButtonUp
          Else
             objitem.state = msoButtonDown
          End If
          
          
          Set cbpop = objmenu.Controls.Add(msoControlPopup, , , 1, True)
          cbpop.Caption = "PivotTable Format Settings"
          Set objitem = cbpop.Controls.Add(msoControlButton, , , 1, True)
          objitem.Caption = "Restore Region Formats from Master"
          objitem.OnAction = "XPivotFormatMasterRestore"
          objitem.FaceId = 129
          Set objitem = cbpop.Controls.Add(msoControlButton, , , 1, True)
          objitem.Caption = "Save Region Formats to Default"
          objitem.OnAction = "XPivotFormatMasterSave"
          objitem.BeginGroup = True
                  
          Set objitem = cbpop.Controls.Add(msoControlButton, , , 1, True)
          objitem.Caption = "Banded Data Row Pattern"
          objitem.OnAction = "XPivotRowBandSet"
          If getINIname("PivotRowBand", True) = "1" Then
            objitem.state = msoButtonDown
          Else
            objitem.state = msoButtonUp
          End If
          Set objitem = cbpop.Controls.Add(msoControlButton, , , 1, True)
          objitem.OnAction = "XPivotGrandOverRideSet"
          objitem.Caption = "Format Grand Total after Subtotals"
          If getINIname("PivotGrandOverride", True) = "1" Then
               objitem.state = msoButtonDown
          Else
               objitem.state = msoButtonUp
          End If
          Set objitem = cbpop.Controls.Add(msoControlButton, , , 1, True)
          objitem.Caption = "Color Region Formats On / Off"
          objitem.OnAction = "PivotColorWhite"
          objitem.BeginGroup = True
          objitem.FaceId = 661
          
          Set objitem = cbpop.Controls.Add(msoControlButton, , , 1, True)
          objitem.Caption = "Grand Totals for Rows"
          objitem.OnAction = "ToggleRowGrandTotals"
          If ActiveSheet.PivotTables(1).RowGrand = True Then
              objitem.state = msoButtonDown
          Else
              objitem.state = msoButtonUp
          End If
          
          Set objitem = cbpop.Controls.Add(msoControlButton, , , 1, True)
          objitem.Caption = "Grand Totals for Columns"
          objitem.OnAction = "ToggleColGrandTotals"
          objitem.BeginGroup = True
          If ActiveSheet.PivotTables(1).ColumnGrand = True Then
              objitem.state = msoButtonDown
          Else
              objitem.state = msoButtonUp
          End If
          
          Set objitem = cbpop.Controls.Add(msoControlButton, , , 1, True)
          objitem.Caption = "Short Data Field Names"
          objitem.OnAction = "XDataDescToggle"
          
          If isShortName = 1 Then
              objitem.state = msoButtonDown
          Else
              objitem.state = msoButtonUp
          End If
          Dim isCol As Boolean
          isCol = True
          If CInt(ReadKeyValue("OfficeNo")) > 9 Then
           If ActiveSheet.PivotTables(1).DataFields.Count > 1 Then
             If ActiveSheet.PivotTables(1).DataPivotField.Orientation <> xlRowField Then
                isCol = False
             End If
           End If
          End If
          Set objitem = objmenu.Controls.Add(msoControlButton, , , 1, True)
          objitem.OnAction = "XPivotLayouts"
          If CInt(Application.version) < 12 Then
             objitem.Caption = "PivotTable Layout"
             objitem.OnAction = "XPivotLayouts"
          Else
             objitem.Caption = "PivotTable Field List"
             objitem.OnAction = "ShowFieldList"
          End If
          objitem.BeginGroup = True
             
          Set objitem = objmenu.Controls.Add(msoControlButton, , , 1, True)
          objitem.OnAction = "XPivotRegionAlignment"
          objitem.Caption = "Region Alignment"
          objitem.Enabled = isCol
          Set objitem = objmenu.Controls.Add(msoControlButton, , , 1, True)
          objitem.OnAction = "XPivotRegionFont"
          objitem.Caption = "Region Font"
          objitem.Enabled = isCol
          Set objitem = objmenu.Controls.Add(msoControlButton, , , 1, True)
          objitem.OnAction = "XPivotRegionPattern"
          objitem.Caption = "Region Pattern"
          objitem.Enabled = isCol
          objitem.BeginGroup = True
          Exit Function
    End If
    
End Function
Sub ExportDrillSheet()
    sheets(ActiveSheet.Name).Select
    Application.EnableEvents = False
    Application.ScreenUpdating = False
    Dim custom As String
    custom = getINIname("Custom")
    sheets(ActiveSheet.Name).Copy
    DeleteShapes
    Dim i, isFilter As Boolean
    For i = ActiveSheet.UsedRange.Rows.Count To 2 Step -1
        If Rows(i).EntireRow.Hidden Then
           Rows(i).Select
           Selection.Delete Shift:=xlUp
        End If
    Next i
    If ActiveSheet.AutoFilterMode Then
       Selection.AutoFilter
       isFilter = True
    End If
    For i = ActiveSheet.UsedRange.Columns.Count To 1 Step -1
       If Columns(i).EntireColumn.Hidden Then
          Columns(i).EntireColumn.Hidden = False
          Columns(i).Select
          Selection.Delete Shift:=xlToLeft
       End If
    Next i
    Range("A2").Select
    If isFilter Then Selection.AutoFilter
    SetColorPallette
    DeleteBookVars
    If custom <> "xxx" Then
      ActiveWorkbook.names.Add "Custom", custom
    End If
    Range("A2").Select
    Application.EnableEvents = True
    ActiveWorkbook.Saved = True
End Sub
Sub ExportDrillSheet1()
    sheets(ActiveSheet.Name).Select
    Application.ScreenUpdating = False
    Application.EnableEvents = False
    Dim custom As String
    custom = getINIname("Custom")
    sheets(ActiveSheet.Name).Copy
    DeleteShapes
    Dim i, isFilter As Boolean
    For i = ActiveSheet.UsedRange.Rows.Count To 2 Step -1
        If Rows(i).EntireRow.Hidden Then
           Rows(i).Select
           Selection.Delete Shift:=xlUp
        End If
    Next i
    SetColorPallette
    DeleteBookVars
    If custom <> "xxx" Then
      ActiveWorkbook.names.Add "Custom", custom
    End If
    Range("A2").Select
    Application.EnableEvents = True
End Sub
Sub DeleteSheetVars()
    Dim i, Name
    On Error Resume Next
    Name = ActiveSheet.names(1).Name
    On Error Resume Next
    For i = ActiveSheet.names.Count To 1 Step -1
        If InStr(LCase(ActiveSheet.names(i).Name), "_filterdatabase") = 0 Then
           ActiveSheet.names(i).Delete
        End If
    Next i
End Sub
Sub DeleteBookVars()
    Dim i
    On Error Resume Next
    For i = ActiveWorkbook.names.Count To 1 Step -1
        If InStr(LCase(ActiveWorkbook.names(i).Name), "_filterdatabase") = 0 Then
           If InStr(LCase(ActiveWorkbook.names(i).Name), "instruction") = 0 Then
              ActiveWorkbook.names(i).Delete
           End If
        End If
    Next i

    
   
End Sub
Sub XPSetSum()
    Dim addr
    On Error Resume Next
    addr = Selection.address
    NRowFormat = 1
    Call XPSetTotal("9", ActiveCell.column)
    XLCFormatColumn
    Range(addr).Select
End Sub
Sub XPSetCount()
    Dim addr As String
    On Error Resume Next
    addr = Selection.address
    NRowFormat = 1
    Call XPSetTotal("3", ActiveCell.column)
    XLCFormatColumn
    Range(addr).Select
End Sub
Sub XPSetTotalAll()
    Dim i As Integer, totstr As String, pname As String
    On Error Resume Next
    pname = getINIname("PivotName", True)
    If pname = "xxx" Then Exit Sub
    totstr = XPGetSheetVar(pname, "Totstr")
    If totstr = "" Then Exit Sub
    For i = 1 To ActiveSheet.UsedRange.Columns.Count
       If Mid(totstr, i, 1) = "3" Then
         Call XPSetTotal("3", i)
         Cells(2, i).Select
       ElseIf Mid(totstr, i, 1) = "9" Then
         Cells(2, i).Select
         Call XPSetTotal("9", i)
       End If
    Next i
    XLCFormatColumnAll
End Sub
Sub XPSetTotal(value As String, nc As Integer)
    Dim nr, totval, pname As String, totstr As String, paddr As String
    Dim i, totvar As String
    pname = getINIname("PivotName", True)
    totstr = XPGetSheetVar(pname, "TotStr")
    Application.ScreenUpdating = False
    For i = Len(totstr) + 1 To ActiveSheet.UsedRange.Columns.Count
        totstr = totstr & "1"
    Next i
    
    If value = 9 And Cells(2, ActiveCell.column).numberformat = "@" Then
        Range(Cells(2, ActiveCell.column), Cells(ActiveSheet.UsedRange.Rows.Count, ActiveCell.column)).Select
        Selection.numberformat = "General"
    End If
    Range(Cells(2, ActiveCell.column), Cells(2, ActiveCell.column)).Select
    If totstr = "" Then
      For i = 1 To ActiveSheet.UsedRange.Columns.Count
         totstr = totstr & "1"
      Next i
    End If
    pname = getINIname("PivotName", True)
    nr = Selection.CurrentRegion.Rows.Count + 2 'ActiveSheet.UsedRange.Rows.Count
    loadltrs
    If Cells(nr, nc).formula = "" Or Mid(totstr, nc, 1) <> value Then
       Mid(totstr, nc, 1) = value
       paddr = "=SUBTOTAL(" & value & "," & ltrs(nc).value & "2:" & ltrs(nc).value & nr - 2 & ")"
    Else
       Mid(totstr, nc, 1) = "1"
       paddr = ""
    End If
    If value = "3" Then
       Cells(nr, nc).numberformat = "General"
    Else
       Cells(nr, nc).numberformat = Cells(nr - 2, nc).numberformat
    End If
    Cells(nr, nc).HorizontalAlignment = Cells(nr - 2, nc).HorizontalAlignment
    Cells(nr, nc).formula = paddr
    totvar = "'" & pname & "'!Totstr"
    ActiveWorkbook.names.Add totvar, totstr
End Sub
Sub XPUnHideColumns()
    Dim addr
    addr = Selection.address
    On Error Resume Next
    Selection.EntireColumn.Hidden = False
    XPSetHideStr
    Range(addr).Select
End Sub
Sub XPHideColumns()
    Dim addr
    addr = Selection.address
    On Error Resume Next
    Selection.EntireColumn.Hidden = True
    XPSetHideStr
End Sub
Sub XPSetHideStr()
    Dim pname As String, hidstr, i, nc, hidvar, style As String
    pname = getINIname("PivotName", True)
    If pname = "xxx" Then Exit Sub
    On Error Resume Next
    nc = Selection.CurrentRegion.Columns.Count
    hidstr = ""
    For i = 1 To nc
           style = Cells(2, i).style
          If Columns(i).EntireColumn.Hidden Then
            hidstr = hidstr & "T"
            ActiveWorkbook.Styles(style).WrapText = False
          Else
            hidstr = hidstr & "F"
          End If
    Next i
    hidvar = "'" & pname & "'!Hidstr"
    ActiveWorkbook.names.Add hidvar, hidstr
End Sub
Sub XPGetHideStr()
    Dim pname As String, hidstr, i, nc, hidvar
    pname = getINIname("PivotName", True)
    If pname = "xxx" Then Exit Sub
    On Error Resume Next
    nc = Selection.CurrentRegion.Columns.Count
    hidstr = XPGetSheetVar(pname, "Hidstr")
    If hidstr = "" Then Exit Sub
    For i = 1 To nc
          If Mid(hidstr, i, 1) = "T" Then
             Columns(i).EntireColumn.Hidden = True
          End If
    Next i
End Sub
Function XCleanName(Name As String)
    Dim buf As String
    buf = Replace(Name, "/", "")
    buf = Replace(buf, "\", "")
    buf = Replace(buf, "*", "")
    buf = Replace(buf, "[", "")
    buf = Replace(buf, "]", "")
    buf = Replace(buf, ":", "")
    buf = Replace(buf, "%", "")
    buf = Replace(buf, "?", "")
    buf = Replace(buf, "-", "")
    buf = Replace(buf, "+", "")
    XCleanName = "x" & buf
End Function
Function CleanName(Name)
    Dim buf As String
    buf = Replace(Name, "/", "")
    buf = Replace(buf, "\", "")
    buf = Replace(buf, "*", "")
    buf = Replace(buf, "[", "")
    buf = Replace(buf, "]", "")
    buf = Replace(buf, ":", "")
    buf = Replace(buf, "%", "")
    buf = Replace(buf, "?", "")
    buf = Replace(buf, "-", "")
    buf = Replace(buf, "+", "")
    buf = Replace(buf, " ", "11")
    CleanName = buf
End Function
Sub XLPStyle()
    Dim dlgrez As Variant, style As String, maxlevel, addr, col
    Dim xtotal As String, xtotals As String
    addr = ActiveCell.address
    Application.ScreenUpdating = False
    If Cells(2, ActiveCell.column).style = "Normal" Then Exit Sub
    Cells(2, ActiveCell.column).Select
    style = ActiveCell.style
    
    If ActiveWorkbook.Styles(style).Interior.colorindex = xlNone Then
       ActiveWorkbook.Styles(style).Interior.pattern = xlSolid
       ActiveWorkbook.Styles(style).Interior.colorindex = 3
       ActiveWorkbook.Styles(style).Interior.PatternColorIndex = xlSolid
       ActiveWorkbook.Styles(style).Interior.pattern = xlSolid
       ActiveWorkbook.Styles(style).Interior.colorindex = 2
       ActiveWorkbook.Styles(style).Interior.PatternColorIndex = xlAutomatic
       ActiveWorkbook.Styles(style).Interior.pattern = xlSolid
    End If
    Application.ScreenUpdating = True
    dlgrez = Application.Dialogs(xlDialogApplyStyle).show
    ActiveCell.style = style
    If Not dlgrez Then
       Range(addr).Select
        Exit Sub
    End If
    col = ActiveCell.column
 '   XLPFormatColumn1"
 '   XLCFormatColumn1
    Range(addr).Select
End Sub
Sub XLCFormatColumn1()
    Dim n
    n = NRowFormat
    NRowFormat = 1
    XLCFormatColumn
    NRowFormat = n
End Sub
Sub SortDrill()
    Dim i As Integer, n, opt As String, source As String, isUp As Boolean
    Dim casesen As String, sheet, col As Integer, addr, up As String
    On Error Resume Next
    sheet = ActiveSheet.Name
    source = DrillSheet
    If Not isSheet1(source) Then Exit Sub
    loadltrs
    Dim SortCase As Boolean
    If rd_ini1("SortCase") = 1 Then SortCase = True
    For n = 6 To 1 Step -1
      opt = "Sort" & n
      col = CInt(GetSheetVar(source, opt))
      opt = "XUp" & n
      up = GetSheetVar(source, opt)
      If col > 0 Then
        addr = ltrs(col).value & "2"
        If up <> "1" Then
         Selection.sort Key1:=Range(addr), Order1:=xlAscending, header:=xlGuess, _
         OrderCustom:=1, MatchCase:=SortCase, Orientation:=xlTopToBottom
        Else
         Selection.sort Key1:=Range(addr), Order1:=xlDescending, header:=xlGuess, _
         OrderCustom:=1, MatchCase:=SortCase, Orientation:=xlTopToBottom
        End If
      End If
    Next n

End Sub
Sub XPivotApplyFormat()
    SetMargins
    On Error Resume Next
    Applyformat
End Sub
'Public Sub SetMargins()
'    On Error Resume Next
'
'    SetMargins
'End Sub
Sub XPivotApplyFormatC()
    On Error Resume Next
    Application.EnableEvents = False
    Application.ScreenUpdating = False
    XLPApplyPageFormat
    On Error Resume Next
    Application.ScreenUpdating = False
    Dim frmini As String, Title
    frmini = GetAppFolder & "\format.ini"
    Title = rd_iniFile(frmini, "Title")
    If Replace(rd_iniFile(frmini, "Subtitle"), "xxx", "") <> "" Then
      Title = Title & chr(10) & Replace(rd_iniFile(frmini, "Subtitle"), "xxx", "")
    End If
    ActiveChart.PlotArea.Select
    With ActiveChart
        .HasTitle = True
        .ChartTitle.Characters.Text = Title
    End With
    Selection.AutoScaleFont = True
    With Selection.font
        .Name = "Arial"
        .size = 18
        .Strikethrough = False
        .superscript = False
        .subscript = False
        .OutlineFont = False
        .shadow = False
        .underline = xlUnderlineStyleNone
        .colorindex = xlAutomatic
        .Background = xlAutomatic
    End With
    If ActiveChart.PageSetup.zoom > 100 Then
       ActiveChart.PageSetup.zoom = 100
    End If
    ActiveChart.Deselect
    Application.EnableEvents = True
End Sub
Sub XPivotExport()
    Dim chartname As String, dataname, sheet1() As Variant, book, book1
    If getINIname("IsPivot", True) = "xxx" And getINIname("IPivot", True) = "xxx" Then Exit Sub
    On Error Resume Next
    Application.ScreenUpdating = False
    dataname = ActiveSheet.Name
    ReDim Preserve sheet1(0)
    sheet1(0) = dataname
    chartname = dataname & "_C"
    If isSheet1(chartname) Then
       ReDim Preserve sheet1(1)
       sheet1(1) = chartname
    End If
    sheets(sheet1).Select
    book = ActiveWorkbook.Name
    sheets(sheet1).Copy
    book1 = ActiveWorkbook.Name
    Windows(book).Activate
    sheets(dataname).Select
    Windows(book1).Activate
    SetColorPallette
    Application.CommandBars("EZ Pivot").visible = False
    Range("A4").Select
    Selection.CurrentRegion.Select
    Cells.Select
    Selection.Copy
    Selection.PasteSpecial Paste:=xlValues, Operation:=xlNone, SkipBlanks:= _
        False, Transpose:=False
    Range("A4").Select
    Application.CutCopyMode = False
    DeleteBookVars

    ActiveWorkbook.Saved = True
    ActiveWorkbook.ShowPivotTableFieldList = False
End Sub
'Sub XPivotExport1()
'    '
'    On Error Resume Next
'    If getINIname("IsPivot", True) = "xxx" And getINIname("IPivot", True) = "xxx" Then Exit Sub
'    Dim book As String, newbook As String, addr, zoom
'    Dim chartsheet As String, newsheet As String
'    addr = ActiveCell.Address
'    Dim lh, ch, rh, lf, cf, rf, widths() As Variant, ncols, i, landscape
'    ncols = ActiveSheet.UsedRange.Columns.Count
'    ActiveChart.Deselect
'    For i = 1 To ncols
'      ReDim Preserve widths(i)
'      widths(i) = Columns(i).ColumnWidth
'    Next i
'    book = ActiveWorkbook.name
'    lh = ActiveSheet.PageSetup.LeftHeader
'    ch = ActiveSheet.PageSetup.CenterHeader
'    rh = ActiveSheet.PageSetup.RightHeader
'    lf = ActiveSheet.PageSetup.LeftFooter
'    cf = ActiveSheet.PageSetup.CenterFooter
'    rf = ActiveSheet.PageSetup.RightFooter
'    landscape = ActiveSheet.PageSetup.Orientation
'    zoom = ActiveSheet.PageSetup.zoom
'    newsheet = ActiveSheet.name
'    Cells.Select
'    Selection.Copy
'    Workbooks.Add
'    Application.DisplayAlerts = False
'    ActiveSheet.name = newsheet
'    Application.DisplayAlerts = True
'    Selection.PasteSpecial Paste:=xlValues, Operation:=xlNone, SkipBlanks:= _
'        False, Transpose:=False
'
'    Selection.PasteSpecial Paste:=xlFormats, Operation:=xlNone, SkipBlanks:= _
'        False, Transpose:=False
'    For i = 1 To ncols
'       Columns(i).ColumnWidth = widths(i)
'    Next i
'    SetColorPallette
'    newbook = ActiveWorkbook.name
'    ActiveSheet.PageSetup.LeftHeader = lh
'    ActiveSheet.PageSetup.CenterHeader = ch
'    ActiveSheet.PageSetup.RightHeader = rh
'    ActiveSheet.PageSetup.LeftFooter = lf
'    ActiveSheet.PageSetup.CenterFooter = cf
'    ActiveSheet.PageSetup.RightFooter = rf
'    ActiveWindow.DisplayGridlines = False
'    ActiveSheet.DisplayAutomaticPageBreaks = False
'    ActiveSheet.PageSetup.CenterHorizontally = True
'    ActiveSheet.PageSetup.Orientation = landscape
'    ActiveSheet.PageSetup.PrintTitleRows = "$3:$4"
'    ActiveSheet.PageSetup.zoom = zoom
'    SetMargins
'    Range(addr).Select
'    Windows(book).Activate
'    sheets(newsheet).Select
'    XPivotEmbedExport (newbook)
'    Range(addr).Select
'    chartsheet = FindPivotChart(ActiveSheet.name)
'
'    If chartsheet <> "" Then
'      Windows(newbook).Activate
'      Call XPivotExportChart(book, chartsheet)
'    End If
'    ActiveWorkbook.Saved = True
'    Windows(book).Activate
'    sheets(newsheet).Select
'    Range(addr).Select
'    Application.CutCopyMode = False
'    Windows(newbook).Activate
'    Application.DisplayAlerts = False
'    For i = Worksheets.Count To 2 Step -1
'       If sheets(i).name <> chartsheet And sheets(i).name <> newsheet Then
'         sheets(i).Select
'         ActiveWindow.SelectedSheets.Delete
'       End If
'    Next i
'    Application.DisplayAlerts = True
'    If chartsheet <> "" Then
'       sheets(newsheet).Select
'       sheets(newsheet).Move Before:=sheets(1)
'    End If
'    sheets(newsheet).Select
'    ActiveWorkbook.Saved = True
'
'    SetIconsOff1
'    IconsHide1
'    Application.CommandBars("Xcelerator").Controls("PivotWizard").Enabled = False
'End Sub
Sub XPivotExportChart(book1 As String, sheet1 As String)
    Dim book As String
    On Error Resume Next
    Dim lh, ch, rh, lf, cf, rf, i, landscape, zoom, newbook
    book = ActiveWorkbook.Name
    sheets.Add
    ActiveSheet.Name = sheet1
    Windows(book1).Activate
    sheets(sheet1).Select
    lh = ActiveChart.PageSetup.LeftHeader
    ch = ActiveChart.PageSetup.CenterHeader
    rh = ActiveChart.PageSetup.RightHeader
    lf = ActiveChart.PageSetup.LeftFooter
    cf = ActiveChart.PageSetup.CenterFooter
    rf = ActiveChart.PageSetup.RightFooter
    landscape = ActiveChart.PageSetup.Orientation
    zoom = ActiveChart.PageSetup.zoom
    ActiveChart.ChartArea.Copy
    Windows(book).Activate
    sheets(sheet1).Select
    ActiveSheet.Paste
    ActiveSheet.ChartObjects(1).Activate
 '   ActiveChart.Deselect
    ActiveChart.PageSetup.LeftHeader = lh
    ActiveChart.PageSetup.CenterHeader = ch
    ActiveChart.PageSetup.RightHeader = rh
    ActiveChart.PageSetup.LeftFooter = lf
    ActiveChart.PageSetup.CenterFooter = cf
    ActiveChart.PageSetup.RightFooter = rf
    ActiveChart.PageSetup.CenterHorizontally = True
    ActiveSheet.PageSetup.LeftHeader = lh
    ActiveSheet.PageSetup.CenterHeader = ch
    ActiveSheet.PageSetup.RightHeader = rh
    ActiveSheet.PageSetup.LeftFooter = lf
    ActiveSheet.PageSetup.CenterFooter = cf
    ActiveSheet.PageSetup.RightFooter = rf
    ActiveSheet.PageSetup.Orientation = landscape
    ActiveSheet.PageSetup.zoom = False
    ActiveSheet.PageSetup.FitToPagesWide = 1
    ActiveSheet.PageSetup.FitToPagesTall = False
    SetMargins
'    SetMarginCharts
    ActiveWindow.visible = False
    ActiveWindow.zoom = 90
End Sub
Public Sub SetColorPallette()
    On Error Resume Next
    ActiveWorkbook.Colors(38) = RGB(245, 245, 245)
    ActiveWorkbook.Colors(48) = RGB(235, 235, 235)
    ActiveWorkbook.Colors(7) = RGB(225, 225, 225)
    ActiveWorkbook.Colors(56) = RGB(215, 215, 215)
    ActiveWorkbook.Colors(55) = RGB(205, 205, 205)
    ActiveWorkbook.Colors(11) = RGB(195, 195, 195)
    ActiveWorkbook.Colors(15) = RGB(192, 192, 192)
    ActiveWorkbook.Colors(16) = RGB(128, 128, 128)
End Sub
Public Function FindDataSheet(chart As String) As String
    Dim savesheet As String, colstr As String, i As Integer, Worksheet As String
    Dim j As Integer
    On Error Resume Next
    savesheet = ActiveSheet.Name
    If Not isSheetChart(chart) Then Exit Function
    sheets(chart).Select
    colstr = ActiveChart.SeriesCollection(1).formula
    i = InStr(colstr, "(")
    If i < 1 Then
       MsgBox ("Bad Series Collection")
       Exit Function
    End If
    j = InStr(i + 1, colstr, "!")
    sheets(savesheet).Select
    If j < i Then
       MsgBox ("Bad Series Collection")
       Exit Function
    End If
    FindDataSheet = Replace(Mid(colstr, i + 1, j - i - 1), "'", "")
    FindDataSheet = Replace(FindDataSheet, ",", "")
End Function

Public Function FindPivotChart(chart As String) As String
    Dim i As Integer, charts As String, sheet As String, colstr As String
    sheet = ActiveSheet.Name
    charts = chart & "!"
    On Error Resume Next
    i = ActiveWorkbook.charts.Count
    For i = 1 To ActiveWorkbook.charts.Count
       colstr = Replace(ActiveWorkbook.charts(i).SeriesCollection(1).formula, "'", "")
       If InStr(1, colstr, charts) Then
          FindPivotChart = ActiveWorkbook.charts(i).Name
          sheets(ActiveWorkbook.charts(i).Name).visible
          Exit Function
       End If
    Next i
End Function
Sub SetIconsOff1()
   
End Sub
Sub IconsHide1()
   
End Sub
Public Sub SetMarginCharts()
    On Error Resume Next
    Dim margins As String, margintop, marginbot, marginleft, marginright, topmargin, botmargin
    Dim marginhdr, marginftr
    Call fReadValue(HKLM, "Software\DPPI\EZPivot", "TopMargin", "S", "", margins)
    topmargin = margins
    ActiveChart.PageSetup.HeaderMargin = 72 * topmargin
    Call fReadValue(HKLM, "Software\DPPI\EZPivot", "BottomMargin", "S", "", margins)
    botmargin = margins
    ActiveChart.PageSetup.FooterMargin = 72 * botmargin
    
    Call fReadValue(HKLM, "Software\DPPI\EZPivot", "MarginTop", "S", "", margins)
    margintop = margins
    ActiveChart.PageSetup.topmargin = margintop * 80 + ActiveChart.PageSetup.HeaderMargin
    Call fReadValue(HKLM, "Software\DPPI\EZPivot", "MarginBottom", "S", "", margins)
    marginbot = margins
    ActiveChart.PageSetup.BottomMargin = marginbot * 72 + ActiveChart.PageSetup.FooterMargin
    Call fReadValue(HKLM, "Software\DPPI\EZPivot", "MarginLeft", "S", "", margins)
    marginleft = margins
    ActiveChart.PageSetup.LeftMargin = marginleft * 72
    Call fReadValue(HKLM, "Software\DPPI\EZPivot", "MarginRight", "S", "", margins)
    marginright = margins
    ActiveChart.PageSetup.RightMargin = marginright * 72
    Call fReadValue(HKLM, "Software\DPPI\EZPivot", "PictureEnable", "S", "", margins)
    If margins <> "1" Then Exit Sub
    Call fReadValue(HKLM, "Software\DPPI\EZPivot", "PictureMin", "S", "", margins)
    If margins = "" Then
       Call fWriteValue(HKLM, "Software\DPPI\EZPivot", "PictureMin", "S", ".80")
       margins = ".80"
    End If
    marginbot = margins
    Call fReadValue(HKLM, "Software\DPPI\EZPivot", "PictureRegion", "S", "", margins)
    If margins <= "3" Then
       ActiveChart.PageSetup.topmargin = marginbot * 72 + ActiveChart.PageSetup.HeaderMargin
    Else
       ActiveChart.PageSetup.BottomMargin = marginbot * 72 + ActiveChart.PageSetup.FooterMargin
    End If
End Sub
Public Sub SetMargins()
    On Error Resume Next
    Dim margins As String, margintop, marginbot, marginleft, marginright, topmargin, botmargin
    Dim marginhdr, marginftr
    Call fReadValue(HKLM, "Software\DPPI\EZPivot", "TopMargin", "S", "", margins)
    topmargin = margins
    ActiveSheet.PageSetup.HeaderMargin = 80 * topmargin
    Call fReadValue(HKLM, "Software\DPPI\EZPivot", "BottomMargin", "S", "", margins)
    botmargin = margins
    ActiveSheet.PageSetup.FooterMargin = 72 * botmargin
    
    Call fReadValue(HKLM, "Software\DPPI\EZPivot", "MarginTop", "S", "", margins)
    margintop = margins
    ActiveSheet.PageSetup.topmargin = margintop * 80 + ActiveSheet.PageSetup.HeaderMargin
    Call fReadValue(HKLM, "Software\DPPI\EZPivot", "MarginBottom", "S", "", margins)
    marginbot = margins
    ActiveSheet.PageSetup.BottomMargin = marginbot * 72 + ActiveSheet.PageSetup.FooterMargin
    Call fReadValue(HKLM, "Software\DPPI\EZPivot", "MarginLeft", "S", "", margins)
    marginleft = margins
    ActiveSheet.PageSetup.LeftMargin = marginleft * 72
    Call fReadValue(HKLM, "Software\DPPI\EZPivot", "MarginRight", "S", "", margins)
    marginright = margins
    ActiveSheet.PageSetup.RightMargin = marginright * 72
    Call fReadValue(HKLM, "Software\DPPI\EZPivot", "PictureEnable", "S", "", margins)
    If margins <> "1" Then Exit Sub
    Call fReadValue(HKLM, "Software\DPPI\EZPivot", "PictureMin", "S", "", margins)
    If margins = "" Then
       Call fWriteValue(HKLM, "Software\DPPI\EZPivot", "PictureMin", "S", ".80")
       margins = ".80"
    End If
    marginbot = margins
    Call fReadValue(HKLM, "Software\DPPI\EZPivot", "PictureRegion", "S", "", margins)
    If margins <= "3" Then
       ActiveSheet.PageSetup.topmargin = marginbot * 72 + ActiveSheet.PageSetup.HeaderMargin
    Else
       ActiveSheet.PageSetup.BottomMargin = marginbot * 72 + ActiveSheet.PageSetup.FooterMargin
    End If
End Sub
Sub XPivotEmbedExport(newbook As String)
    Dim row As Integer, book, lh, ch, rh, lf, rf, cf
    On Error Resume Next
    If ActiveSheet.ChartObjects.Count < 1 Then Exit Sub
    lh = ActiveSheet.PageSetup.LeftHeader
    ch = ActiveSheet.PageSetup.CenterHeader
    rh = ActiveSheet.PageSetup.RightHeader
    lf = ActiveSheet.PageSetup.LeftFooter
    cf = ActiveSheet.PageSetup.CenterFooter
    rf = ActiveSheet.PageSetup.RightFooter
    ActiveSheet.ChartObjects(1).Activate
    ActiveChart.ChartArea.Select
    ActiveChart.ChartArea.Copy
    ActiveWindow.visible = False
    book = ActiveWorkbook.Name
    Windows(newbook).Activate
    row = ActiveSheet.UsedRange.Rows.Count + 3
    Range(Cells(row, 1), Cells(row, 1)).Select
    ActiveSheet.Paste
    ActiveSheet.ChartObjects(1).Activate
    ActiveChart.PageSetup.LeftHeader = lh
    ActiveChart.PageSetup.CenterHeader = ch
    ActiveChart.PageSetup.RightHeader = rh
    ActiveChart.PageSetup.LeftFooter = lf
    ActiveChart.PageSetup.CenterFooter = cf
    ActiveChart.PageSetup.RightFooter = rf
    ActiveChart.PageSetup.CenterHorizontally = True
    SetMarginCharts
    ActiveWindow.visible = False
    Windows(newbook).Activate
    Range("A1").Select
    Windows(book).Activate
End Sub
Sub DeleteStdRightClick()
    On Error Resume Next
    With Application.CommandBars("Cell")
      .Controls("Cut").Delete
      .Controls("Copy").Delete
      .Controls("Paste").Delete
      .Controls("Paste Special...").Delete
      .Controls("Insert...").Delete
      .Controls("Delete...").Delete
      .Controls("Clear Contents").Delete
      .Controls("Insert Comment").Delete
      .Controls("Format Cells...").Delete
      .Controls("Pick From Drop-down List...").Delete
      .Controls("Pick From List...").Delete
      .Controls("Add Watch").Delete
      .Controls("Create List...").Delete
      .Controls("HyperLink...").Delete
      .Controls("Look Up...").Delete
    End With
End Sub
Sub XPHideColumns1()
    Dim k, folder As String, col As Long, spec As String, i, opt As String
    Dim mapfields As String, Rdesc As String, ifile As Integer, addr
    Dim installfolder
    installfolder = GetAppFolder
    
    ChDirx (installfolder)
    folder = installfolder
    spec = installfolder & "\pivotfields.txt"
    mapfields = installfolder & "\mapfields1.txt"
    addr = Selection.address
    ifile = FreeFile
    Application.ScreenUpdating = False
    On Error Resume Next
    Open mapfields For Output Access Write As #ifile
    Dim buf, hides As String
    loadltrs
    Range("A1").Select
    
    For i = 1 To Selection.CurrentRegion.Columns.Count 'ActiveSheet.UsedRange.Columns.Count
       Rdesc = Cells(1, i).Text
       opt = "Column " & i
       If Columns(i).Hidden Then
         hides = "1"
       Else
         hides = "0"
       End If
       Call wrt_ini(spec, "RDesc", Rdesc, opt)
       Call wrt_ini(spec, "Hide", hides, opt)
       buf = ltrs(i).value & " " & Cells(1, i).value & " " & i
       Print #ifile, buf
    Next i
    Range(addr).Select
    If ActiveSheet.PageSetup.Orientation = xlPortrait Then
       Call wrt_ini(spec, "ChooseOrientation", "1")
    Else
       Call wrt_ini(spec, "ChooseOrientation", "2")
    End If
    Close #ifile
    col = ActiveCell.column
    Application.ScreenUpdating = True
    k = EditHide(spec, "Pivot", col)
    RestoreDir
    If k = 2 Then Exit Sub
    Application.ScreenUpdating = False
    If rd_iniFile1(spec, "ChooseOrientation") = 1 Then
       ActiveSheet.PageSetup.Orientation = xlPortrait
    Else
       ActiveSheet.PageSetup.Orientation = xlLandscape
    End If
    Dim hidstr As String, hidvar As String
    
    
    For i = 1 To ActiveSheet.UsedRange.Columns.Count
       opt = "Column " & i
       If rd_iniFile1(spec, "Hide", opt) = 1 Then
          Columns(i).Hidden = True
          hidstr = hidstr & "T"
       Else
          Columns(i).Hidden = False
          hidstr = hidstr & "F"
       End If
    Next i
    If getINIname("PivotName", True) <> "xxx" Then
      hidvar = "'" & getINIname("PivotName", True) & "'!Hidstr"
      ActiveWorkbook.names.Add hidvar, hidstr
    
      hidvar = "'" & getINIname("PivotName", True) & "'!DrillOrientation"
      If ActiveSheet.PageSetup.Orientation = xlLandscape Then
         ActiveWorkbook.names.Add "DrillOrientation", "2"
      Else
         ActiveWorkbook.names.Add "DrillOrientation", "1"
      End If
    End If
End Sub

Sub FormatDrillSheet()
    Dim drillformat As String, isXcelerator As Boolean
    DrillSheet = getINIname("PivotName", True)
    If Not isSheet1(DrillSheet) Then Exit Sub
    OverFormat = True
    isdrill = True
    ZSheetActivate
    OverFormat = False
    isdrill = False
End Sub
Sub ChDirx(folder As String)
    On Error Resume Next
    CurrentDir = CurDir
    ChDrive folder
    ChDir (folder)
End Sub
Sub RestoreDir()
    On Error Resume Next
    ChDrive CurrentDir
    ChDir CurrentDir
End Sub
Sub ResDir()
    On Error Resume Next
    ChDrive CurrentDir
    ChDir CurrentDir
End Sub
Function FindColumn(Name As String) As String
    Dim wo As Worksheet, ws As Worksheet, i
    On Error Resume Next
    If Not isSheet1("OriginalData") Or Not isSheet1("Stylesheet") Then Exit Function
    Set wo = sheets("OriginalData")
    Set ws = sheets("Stylesheet")
    For i = 1 To ws.UsedRange.Columns.Count
       If Name = ws.Cells(1, i).Text Then
          FindColumn = wo.Cells(1, i).Text
          Exit Function
       End If
    Next i
End Function
Sub ExportDrillOriginal()
    If getINIname("PivotName", True) = "xxx" Then Exit Sub
    Application.ScreenUpdating = False
    Dim names() As String, formats() As String, custom As String
    On Error Resume Next
    Range("A2").Select
    Dim nrow, i, ncol
    custom = getINIname("Custom")
    nrow = Selection.CurrentRegion.Rows.Count
    ncol = Selection.CurrentRegion.Columns.Count
    For i = 1 To ncol
       ReDim Preserve names(i)
       ReDim Preserve formats(i)
       names(i) = FindColumn(Cells(1, i).Text)
       formats(i) = Cells(2, i).numberformat
    Next i
    Application.EnableEvents = False
    sheets(ActiveSheet.Name).Select
    sheets(ActiveSheet.Name).Copy
    
    For i = 1 To ncol
       Cells(1, i).value = names(i)
    Next i
    
   For i = nrow To 2 Step -1
       If Rows(i).Hidden Then
          Rows(i).Select
          Selection.Delete Shift:=xlUp
       End If
    Next i
    Range("A2").Select
    Selection.CurrentRegion.Select
    Selection.style = "Normal"
    nrow = Selection.CurrentRegion.Rows.Count
    ncol = Selection.CurrentRegion.Columns.Count
    If ActiveSheet.AutoFilterMode Then Selection.AutoFilter
    Dim paddr
    loadltrs
    paddr = "A:" & ltrs(ncol).value
    Columns(paddr).Select
    Selection.EntireColumn.Hidden = False
    For i = ncol To 1 Step -1
       paddr = ltrs(i).value & ":" & ltrs(i).value
       Columns(paddr).Select
       Selection.numberformat = formats(i)
       If names(i) = "" Then
          Selection.Delete Shift:=xlToLeft
       End If
    Next i
    paddr = nrow + 1 & ":" & nrow + 2
    Rows(paddr).Select
    Selection.Delete Shift:=xlUp
    Range("A2").Select
    Selection.CurrentRegion.Select
    ncol = Selection.CurrentRegion.Columns.Count
    
    Range(Cells(1, 1), Cells(1, ncol)).Select
    Selection.style = "Normal"
   
    Selection.Interior.colorindex = 11
    ActiveWindow.DisplayGridlines = True
    Selection.CurrentRegion.Select
    Selection.Columns.AutoFit
   
    Range("A2").Select
    DeleteBookVars
    ActiveWorkbook.names.Add "Custom", custom
    ActiveWorkbook.Saved = True
    Application.EnableEvents = True
End Sub
Sub AddHdrStyles()
    Dim Wn As Workbook, Wb As Workbook
    Dim template As String, test As String, size As Integer
    Dim bookt As String
    
    template = GetAppFolder & "\Xcelerator.xlt"
    
    On Error Resume Next
    size = ActiveWorkbook.Styles("XTitlesUnhidden").font.size
    If size > 0 Then Exit Sub
    '
    Application.DisplayAlerts = False
    Set Wb = ActiveWorkbook
    test = Wb.Name
    Set Wn = Workbooks.Open(Filename:=template, Editable:=False)
    bookt = ActiveWorkbook.Name
    Windows(test).Activate
    ActiveWorkbook.Styles.merge Workbook:=Workbooks(bookt)
    Windows(bookt).Close
    Windows(test).Activate
End Sub

Sub FormatData1()
    Dim addr, paddr, ncol, nrow, scol, i, nrow1
    On Error Resume Next
    nrow1 = 5
    scol = ActiveSheet.PivotTables(1).RowFields.Count + 2
    If ActiveSheet.PivotTables(1).DataPivotField.Orientation = xlColumnField Then
'.       If ActiveSheet.PivotTables(1).DataFields.Count > 1 Then scol = scol + 1
    Else
      nrow1 = 4
    End If
    loadltrs
    ncol = ActiveSheet.UsedRange.Columns.Count
    nrow = ActiveSheet.UsedRange.Rows.Count - 1
    If scol < ncol Then
      Range(Cells(nrow1, scol), Cells(nrow, ncol)).Select
    Else
      Range(Cells(nrow1, 2), Cells(nrow, 2)).Select
    End If
    Selection.Columns.AutoFit
    Rows("4:4").Select
    Selection.Rows.AutoFit
    paddr = "$A$4:$" & ltrs(ncol).value & "$" & Selection.CurrentRegion.Rows.Count + 2
    ActiveSheet.PageSetup.printarea = paddr
    Range("A6").Select
End Sub
Sub FormatData()
    Dim ncol, nrow, paddr
    loadltrs
    ncol = ActiveSheet.UsedRange.Columns.Count
    nrow = ActiveSheet.UsedRange.Rows.Count
    Range(Cells(4, ncol - 1), Cells(4, ncol)).Select
 '   Range("O4:P4").Select
    With Selection
        .WrapText = True
    End With
    paddr = ltrs(ncol - 1).value & ":" & ltrs(ncol).value
    Columns(paddr).ColumnWidth = 11.43
    Rows("4:4").Select
    Selection.Rows.AutoFit
    Range("A6").Select
End Sub
Sub DataDescToggle()
    Dim i, k, testname As String, ndata As Integer, dataname As String, short As Boolean
    On Error Resume Next
    '
    ndata = ActiveSheet.PivotTables(1).DataFields.Count
    If ndata = 0 Then Exit Sub
    short = IsDataNameShort
    For i = 1 To ndata
      testname = ActiveSheet.PivotTables(1).DataFields(i).Caption
      dataname = "_Data" & i
      k = InStr(testname, " of ")
      If k > 0 And Not short Then
         ActiveSheet.names.Add dataname, testname
         testname = Mid(testname, k + 3)
      Else
         testname = getINIname(dataname, True)
      End If
      If testname <> "xxx" Then
         ActiveSheet.PivotTables(1).DataFields(i).Caption = testname
      End If
    Next i
    
    For i = 2 To 10
        If Cells(4, i).value = "Data" Then Exit For
    Next i
    Columns(i).EntireColumn.AutoFit
End Sub
Sub SetDataDescShort()
    Dim i, k, testname As String, ndata As Integer, dataname As String, short As Boolean
    On Error Resume Next
    '
    ndata = ActiveSheet.PivotTables(1).DataFields.Count
    If ndata = 0 Then Exit Sub
    For i = 1 To ndata
      testname = ActiveSheet.PivotTables(1).DataFields(i).Caption
      dataname = "_Data" & i
      k = InStr(testname, " of ")
      If k > 0 Then
         ActiveSheet.names.Add dataname, testname
         testname = Mid(testname, k + 3)
         ActiveSheet.PivotTables(1).DataFields(i).Caption = testname
      End If
    Next i
    For i = 2 To 10
        If Cells(4, i).value = "Data" Then Exit For
    Next i
    Columns(i).EntireColumn.AutoFit
End Sub
Function IsDataNameShort() As Boolean
    On Error Resume Next
    If InStr(ActiveSheet.PivotTables(1).DataFields(1).Caption, " of ") = 0 Then
        IsDataNameShort = True
    End If
End Function
Sub XPivotChartSepSave()
    Dim sheet As String, book As String, pchart As String, pbook As String, chartname As String
    On Error Resume Next
    Dim style, response
    style = vbYesNo + vbDefaultButton2 + vbQuestion
    response = MsgBox("Are you Sure?", style, "EZ-Pivot Save Pivot Chart")
    If response = vbNo Then Exit Sub
    Application.StatusBar = "Updating Master Chart in Library ..."
    Application.DisplayAlerts = False
    Application.EnableEvents = False
    Application.ScreenUpdating = False
    book = ActiveWorkbook.Name
    sheet = ActiveSheet.Name
    If isSheetChart(sheet) Then
       chartname = ActiveSheet.Name
    Else
       chartname = ActiveSheet.Name & "_C"
    End If
    If Not isSheet1(chartname) Then Exit Sub
    sheets(chartname).visible = True
    sheets(chartname).Select
    pbook = "EzPivotChart.xls"
    pchart = GetAppFolder & "\EzPivotChart.xls"
    If CInt(Application.version) > 11 Then
      pchart = pchart & "x"
      pbook = pbook & "x"
    End If
    If Not IsWorkBookOpen(pbook) Then
       Workbooks.Open (pchart)
    End If
    Workbooks(pbook).Activate
    If isSheet1(chartname) Then
       sheets(chartname).Select
       ActiveWindow.SelectedSheets.Delete
    End If
    Workbooks(book).Activate
    sheets(chartname).Select
    sheets(chartname).Copy before:=Workbooks(pbook).sheets(1)
    Dim sheet1
    sheet1 = ActiveSheet.Name
    If isSheet1("SeparateChart") Then
      sheets("SeparateChart").Select
      ActiveWindow.SelectedSheets.Delete
    End If
    sheets(sheet1).Select
    ActiveSheet.Name = "SeparateChart"
    DeleteBookVars
    Workbooks(pbook).Save
    Workbooks(pbook).Close
    Application.EnableEvents = True
    Workbooks(book).Activate
    sheets(sheet).Select
    Application.DisplayAlerts = True
    Application.EnableEvents = True
    Application.StatusBar = False
End Sub
Sub XPivotChartEmbedSave()
    Dim sheet As String, book As String, pchart As String, pbook As String
    Dim style, response, dataname As String
    style = vbYesNo + vbDefaultButton2 + vbQuestion
    response = MsgBox("Are you Sure?", style, "EZ-Pivot Save Embedded Chart")
    If response = vbNo Then Exit Sub
    On Error Resume Next
    Application.StatusBar = "Updating Master Embedded Chart in Library ..."
    Application.DisplayAlerts = False
    Application.EnableEvents = False
    Application.ScreenUpdating = False
    book = ActiveWorkbook.Name
    sheet = ActiveSheet.Name
    pbook = "EzPivotChart.xls"
    pchart = GetAppFolder & "\EzPivotChart.xls"
    If CInt(Application.version) > 11 Then
      pchart = pchart & "x"
      pbook = pbook & "x"
    End If
    If Not IsWorkBookOpen(pbook) Then
       Workbooks.Open (pchart)
    End If
    Workbooks(pbook).Activate
    If isSheet1(sheet) Then
       sheets(sheet).Select
       ActiveWindow.SelectedSheets.Delete
    End If
    Workbooks(book).Activate
    sheets(sheet).Select
    sheets(sheet).Copy before:=Workbooks(pbook).sheets(1)
    Dim sheet1
    sheet1 = ActiveSheet.Name
    If isSheet1("EmbeddedChart") Then
      sheets("EmbeddedChart").Select
      ActiveWindow.SelectedSheets.Delete
    End If
    sheets(sheet1).Select
    ActiveSheet.Name = "EmbeddedChart"
    DeleteBookVars
    Workbooks(pbook).Save
    Workbooks(pbook).Close
    Workbooks(book).Activate
    Application.EnableEvents = True
    Application.DisplayAlerts = True
    Application.StatusBar = False
End Sub
Sub EZPivotView()
    Dim ezcharts As String, ezchartTemp As String, book As String, booktemp  As String
    On Error Resume Next
    ezcharts = GetAppFolder & "\EzPivotChart.xls"
    ezchartTemp = GetAppFolder & "\EzTemp.xls"
    booktemp = "EZTemp.xls"
    book = "EZPivotchart.xls"
    If CInt(Application.version) > 11 Then
       booktemp = booktemp & "x"
       book = book & "x"
       ezcharts = ezcharts & "x"
       ezchartTemp = ezchartTemp & "x"
    End If
    If Not exist(ezcharts) Then
       EZPivotRestore
    End If
    If IsWorkBookOpen(booktemp) Then
      Workbooks(booktemp).Activate
      Exit Sub
    End If
    Kill ezchartTemp
    Call FileCopy(ezcharts, ezchartTemp)
    Workbooks.Open Filename:=ezchartTemp, ReadOnly:=True
    ActiveWorkbook.ShowPivotTableFieldList = False
End Sub
Sub EZPivotRestore()
    Dim style, response
    On Error Resume Next
    Dim chart1 As String, chart2 As String
    style = vbYesNo + vbDefaultButton2 + vbQuestion
    response = MsgBox("Are you Sure?", style, "Restore PivotChart Default Format")
    If response = vbNo Then Exit Sub
    chart1 = GetAppFolder & "\EZPivotChart.xls"
    chart2 = GetAppFolder & "\EZPivotChartMaster.xls"
    If CInt(Application.version) > 11 Then
       chart1 = chart1 & "x"
       chart2 = chart2 & "x"
    End If
    Call FileCopy(chart2, chart1)
End Sub
Sub ResizeColumns()
   On Error Resume Next
  ' If ResizeDone Then Exit Sub
   Dim lc, wids() As Double, sw As Double, addr
   Dim w, h, toppos, l, chtobj As ChartObject, rng As Range
   Dim nc, nr, i As Integer, gw As Double, tw As Double, value
   nr = 4 'CInt(getINIname("rowstart", True))
   nc = 1 'CInt(getINIname("colstart", True))
   ActiveSheet.ChartObjects(1).Deselect
   addr = ActiveCell.address
   Range(Cells(nr, nc), Cells(nr, nc)).Select
   lc = nc + Selection.CurrentRegion.Columns.Count
   If lc > 26 Then Exit Sub
   loadltrs
   For i = 1 To 26
      ReDim Preserve wids(i)
      value = ltrs(i).value & nr
      Set rng = ActiveSheet.Range(value)
      If i > 0 Then
         wids(i) = wids(i - 1) + rng.width
      End If
   Next i
   ActiveSheet.ChartObjects(1).Activate
   w = ActiveSheet.ChartObjects(1).width
   h = ActiveSheet.ChartObjects(1).height
   l = ActiveSheet.ChartObjects(1).left
   tw = l + w
   For i = 1 To 26
      If tw <= wids(i) Then
        Exit For
      End If
   Next i
   ActiveSheet.ChartObjects(1).Deselect
   Range(addr).Select
'   ResizeDone = True
   If i < lc Then Exit Sub
   Call chgwid(tw - wids(i - 1), i)
   Range(addr).Select
End Sub
Sub chgwid(wid As Double, col As Integer)
    Dim rngwid As Double, pixwid As Double, rng As Range, value, j As Double, nr
    Dim i As Double
    If wid < 1 Then Exit Sub
    loadltrs
    On Error Resume Next
    nr = 3  'CInt(getINIname("RowStart", True))
    value = ltrs(col).value & nr
 '   value = "A3"
    Set rng = ActiveSheet.Range(value)
    pixwid = ActiveSheet.Columns(col).ColumnWidth
    For j = pixwid To 0 Step -1
       ActiveSheet.Columns(col).ColumnWidth = j
       Set rng = ActiveSheet.Range(value)
       If rng.width <= wid Then
         For i = 0 To 1 Step 1
            ActiveSheet.Columns(col).ColumnWidth = j + i
            Set rng = ActiveSheet.Range(value)
            If rng.width > wid Then
               Columns(col).ColumnWidth = j + 1
               Exit Sub
            End If
         Next i
        End If
    Next j
End Sub
Sub XPWorksheetSetSmall()
    Dim book As String, wbook As String
    On Error Resume Next
    book = ezpivotxls
    wbook = GetAppFolder & "\" & book
    If Not IsWorkBookOpen(book) Then
       Exit Sub 'Workbooks.Open wbook
    End If
    Workbooks(book).Activate
    Run "ezcommon.xla!WorksheetSetSmall"
End Sub
Sub XPWorksheetSetLarge()
    Dim book As String, wbook As String
    On Error Resume Next
    book = ezpivotxls
    wbook = GetAppFolder & "\" & book
    If Not IsWorkBookOpen(book) Then
        Exit Sub 'Workbooks.Open wbook
    End If
    Workbooks(book).Activate
    Run "ezcommon.xla!WorksheetSetLarge"
End Sub
Sub HideSheetMenuAdd()
    On Error Resume Next
    Dim menu, mi
    Set menu = Application.CommandBars(1).Controls("EZ-Pivot")
    Set mi = menu.Controls.Add(Type:=msoControlButton)
    mi.Caption = "Small Worksheet Set"
    mi.OnAction = "XPWorksheetSetSmall"
    Set menu = Application.CommandBars(1).Controls("EZ-Pivot")
    Set mi = menu.Controls.Add(Type:=msoControlButton)
    mi.Caption = "Large Worksheet Set"
    mi.OnAction = "XPWorksheetSetLarge"
End Sub
Sub EZPivotWelcome()
'    On Error Resume Next
'    Dim j, frmini As String
'    ChDirx (GetAppFolder)
'    frmini = GetAppFolder & "\format.ini"
'    If ActiveSheet.name <> "Introduction" Then
'       sheets("DemoData").Select
'    End If
'    Application.ScreenUpdating = True
'    Do
'      Call wrt_ini(frmini, "Welcome", "EZ-Pivot for Excel")
'      Call wrt_ini(frmini, "Demo1", "Create a PivotTable")
'      Call wrt_ini(frmini, "Demo2", "Another")
'      Call wrt_ini(frmini, "Movie1", "The Demo")
'      Call wrt_ini(frmini, "VisibleDemo2", "0")
'      Call wrt_ini(frmini, "VisibleMovie2", "0")
'
'      Call wrt_ini(frmini, "Message", "Formatted PivotTables for Excel Lists")
'      j = EZWelcome("EZPivot")
'      Workbooks(ezpivotxls).Activate
'      RestoreDir
'      If j = 2 Then Exit Sub
'      Select Case j
'        Case 1:
'          EZDemoMacro1
'        Case 3:
'          EZDemoMacro2
'        Case 4:
'          EZMovie1
'        Case 5:
'          EZMovie2
'      End Select
'    Loop
'    Application.StatusBar = False
End Sub
Sub EZPivotDemoMacro1()
       Dim Name, tabcolor
       On Error Resume Next
       Name = ActiveSheet.Name
      
       DemoMode = True
       Application.ScreenUpdating = False
       Application.DisplayStatusBar = True
       Workbooks(ezpivotxls).Activate
       Application.ScreenUpdating = False
       DeleteAllDemoSheets
       Dim k, ncol
       DelSheet ("EZPivotTable")
       sheets("DemoData").Select
       Run "ezcommon.xla!moveincopy"
       tabcolor = ActiveSheet.Tab.colorindex

       Range("A1").Select
       
       Dim file As String
       file = GetAppFolder & "\ezpivotmsg1.txt"
       If AddMessages(file) = 2 Then
          sheets("Introduction").Select
          DemoMode = False
          Exit Sub
       End If
       Application.StatusBar = "EZ-Pivot will now format the DemoData sheet using EZ-Pivot Subtotal Icon ..."
       Application.ScreenUpdating = False
       Application.EnableEvents = False
       ChDirx (GetAppFolder)
       EZPivotMacro
       RestoreDir
       Application.StatusBar = False
       Application.ScreenUpdating = False
       MakeToggleCommentButton
       SetButtonsComments (1)
       Application.ScreenUpdating = False
       PivotSetValue
       Application.ScreenUpdating = False
       SetCreateTotals
       Application.EnableEvents = True
       ActiveSheet.names.Add "PivotSource", "DemoData"
       ActiveSheet.Tab.colorindex = tabcolor
       SetIconPivot
       FormatColumnFilter
       Range("A2").Select
       Application.ScreenUpdating = True
       DemoMode = False
End Sub
Sub EZPivotDemoMacro3()
       Dim Name, tabcolor
       On Error Resume Next
       Name = ActiveSheet.Name
       
       DemoMode = True
       Application.DisplayStatusBar = True
       Workbooks(ezpivotxls).Activate
       Application.ScreenUpdating = False
       DeleteAllDemoSheets
       Dim k, ncol
       DelSheet ("EZPivotTable")
       
       sheets("MixedDataTypes").Select
       Run "ezcommon.xla!moveincopy"
       tabcolor = ActiveSheet.Tab.colorindex
       '
       
       Range("C:C,D:D,H:H,K:K,L:L").Select
       
       Dim file As String
       file = GetAppFolder & "\ezpivotmsg3.txt"
       If AddMessages(file) = 2 Then
          sheets("Introduction").Select
          DemoMode = False
          Exit Sub
       End If
       ChDirx (GetAppFolder)
       MixedTypeDemo
       RestoreDir
       FormatColumnFilter
       ActiveSheet.Tab.colorindex = tabcolor
       Application.ScreenUpdating = True
       DemoMode = False
End Sub
Sub EZPivotDemoMacro2()
       Dim Name
       On Error Resume Next
       Name = ActiveSheet.Name
       
       DemoMode = True
       Application.DisplayStatusBar = True
       Application.EnableEvents = False
       Application.ScreenUpdating = False
       Workbooks(ezpivotxls).Activate
       DeleteAllDemoSheets
       Dim k, ncol
       If isSheet1("FormattedPivotTable") Then
         '
         Application.DisplayAlerts = False
         sheets("FormattedPivotTable").visible = True
         sheets("FormattedPivotTable").Select
         ActiveWindow.SelectedSheets.Delete
       End If
       Application.ScreenUpdating = True
       sheets("UnFormattedPivotTable").Select
       Dim file As String
       file = GetAppFolder & "\ezpivotmsg2.txt"
       If AddMessages(file) = 2 Then
          sheets("Introduction").Select
          DemoMode = False
          Application.EnableEvents = True
          Exit Sub
       End If
  '     MsgBox "Click 'OK' and Excel created PivotTable will be Formatted.", , "EZ-Pivot Demo"
       '
       Range("A1").Select
       
       Dim tabcolor
       tabcolor = ActiveWorkbook.sheets("UnFormattedPivotTable").Tab.colorindex
       DemoMode = True
       ChDirx (GetAppFolder)
       ConvertToEZPivot1
       Application.EnableEvents = False
       ActiveWorkbook.sheets("FormattedPivotTable").Tab.colorindex = tabcolor
       '
 '      Application.CommandBars("EZ Pivot").Delete
 '      MakePivotTool"
       DelSheet ("FormattedPivotTable")
       ActiveSheet.Name = "FormattedPivotTable"
'       applyformat"
'       PageCompanyUser
       Range("E1:G1").Select
       Range("A1").Select
       Selection.ClearContents
       
       
       SetButtonsComments (2)
       
       PivotSetValue
       SetCreateTotals
       
       RestoreDir
       ActiveSheet.names.Add "PivotSource", "DemoData"
       Application.StatusBar = False
       Application.ScreenUpdating = True
       Application.EnableEvents = True
       FormatGrandTotal
       FormatColumnFilter
       ActiveSheet.PivotTables("PivotTable1").PivotFields("State").CurrentPage = "CA"
       DemoMode = False
End Sub
Sub EZPivotDemoMacro4()  'drill sheet formatting only
       Dim Name
       On Error Resume Next
       Name = ActiveSheet.Name
       
       DemoMode = True
       Application.DisplayStatusBar = True
       Application.ScreenUpdating = False
       DeleteAllDemoSheets
       Dim k, ncol
       Application.ScreenUpdating = True
       sheets("UnFormattedPivotTable").Select
       Range("G5").Select
       Dim file As String
       file = GetAppFolder & "\ezpivotmsg4.txt"
       If AddMessages(file) = 2 Then
          sheets("Introduction").Select
          Range("C4").Select
          DemoMode = False
          Application.EnableEvents = True
          Exit Sub
       End If
       Application.ScreenUpdating = False
       sheets("SampleDrill").visible = True
       sheets("SampleDrill").Select
       sheets("SampleDrill").Copy before:=sheets("SampleDrill")
       DelSheet ("EZPivot Drill Sample")
       ActiveSheet.Name = "EZPivot Drill Sample"
       sheets("SampleDrill").visible = False
       Range("B1").Select
       file = GetAppFolder & "\ezpivotmsg4a.txt"
       Application.ScreenUpdating = True
       If AddMessages(file) = 2 Then
          DelSheet ("EZPivot Drill Sample")
          sheets("Introduction").Select
          DemoMode = False
          Range("C4").Select
          Application.EnableEvents = True
          Exit Sub
       End If
       Range("A1").Select
       DemoMode = False
End Sub
Sub ConvertToEZPivot1()
    If isSheetChart(ActiveSheet.Name) Then Exit Sub
    ConvertToEZPivotDemo
End Sub
Sub EZPivotMacro()
    Application.ScreenUpdating = False
    On Error Resume Next
    ActiveSheet.names.Add "PivotSource", ActiveSheet.Name
    ActiveWorkbook.PivotCaches.Add(SourceType:=xlDatabase, SourceData:= _
        "DemoData!R1C1:R13C11").CreatePivotTable TableDestination:="", TableName:= _
        "PivotTable1"
    ActiveSheet.PivotTableWizard TableDestination:=ActiveSheet.Cells(3, 1)
    ActiveSheet.Cells(3, 1).Select
    ActiveSheet.PivotTables("PivotTable1").SmallGrid = False
    ActiveSheet.PivotTables("PivotTable1").AddFields RowFields:=Array("City", _
        "Data"), columnfields:="Days from " & Date, PageFields:="State"
    With ActiveSheet.PivotTables("PivotTable1").PivotFields("Owed Amt")
        .Orientation = xlDataField
        .Position = 1
    End With
    ActiveSheet.PivotTables("PivotTable1").PivotFields("Sales Amt").Orientation = _
        xlDataField
    Application.CommandBars("PivotTable").visible = False
    Dim Name As String, newname
    Name = ActiveSheet.Name
    If DemoMode Then
      Columns("C:I").Select
      Selection.Columns.AutoFit
      Range("A1").Select
      ActiveSheet.Name = "PivotTemp"
      Name = ActiveSheet.Name
    End If
    Application.StatusBar = "Typical Formatted Output using Excel PivotWizard Tool ..."

    '
    ConvertToEZPivotDemo
    PageCompanyUser
    ActiveSheet.Name = "EZPivotTable"
    sheets(Name).Select
    
    Application.DisplayAlerts = False
    ActiveWindow.SelectedSheets.Delete
    sheets("EZPivotTable").Select
    Application.ScreenUpdating = True
    Application.StatusBar = "Typical Formatted, Printer Ready Ouput using EZ-Pivot ..."
    Application.DisplayAlerts = True
End Sub

Sub EZPivotMovie1()
    Dim sDocfile As String
    sDocfile = "http://www.datapresentation.com/movies/EZ-Pivot_OverView/EZ-Pivot_OverView.html"
    Call ShellExecute(Scr_hDC, "Open", sDocfile, "", "", SW_SHOWNORMAL)
End Sub
Sub EZMovie2()
    Dim sDocfile As String
    sDocfile = "http://www.datapresentation.com/movies/EZ-Pivot_InDepth/EZ-Pivot_InDepth.html"
    Call ShellExecute(Scr_hDC, "Open", sDocfile, "", "", SW_SHOWNORMAL)
End Sub
Sub EZPivotOpen1()
    Dim book As String, file As String, file1
    book = ezpivotxls
    On Error Resume Next
    file = GetAppFolder & "\" & ezpivotxls
    file1 = GetAppFolder & "\" & ezpivotxls1
    ChDirx (GetAppFolder)
    If IsWorkBookOpen(book) Then
       Workbooks(book).Saved = True
       Workbooks(book).Close
    End If
    Call FileCopy(file1, file)
    Workbooks.Open Filename:=file
    
    RestoreDir
End Sub
Sub DataAutoFit()
    On Error Resume Next
    If getINIname("IsAutoFit", True) <> "1" Then
      XLPApplyPageRun
      Exit Sub
    End If
    Dim ncols, addr, ncolrow, nrows
    ncols = ActiveSheet.UsedRange.Columns.Count
    nrows = ActiveSheet.UsedRange.Rows.Count + 2
    ncolrow = ActiveSheet.PivotTables(1).RowFields.Count
    '
 
    Range(Cells(5, ncols), Cells(nrows, ncols)).Select
    Selection.Columns.AutoFit
    If Columns(ncols).ColumnWidth < 6 Then Columns(ncols).ColumnWidth = 6
    Range("I4").Select
    Range(Cells(4, ncols), Cells(4, ncols)).Select
    With Selection
        .HorizontalAlignment = xlCenter
        .VerticalAlignment = xlBottom
        .WrapText = True
        .Orientation = 0
        .AddIndent = False
        .ShrinkToFit = False
        .MergeCells = False
    End With
    Range(Cells(4, ncolrow + 2), Cells(nrows, ncols - 1)).Select
    Selection.Columns.AutoFit
    Range("A3").Select
    XLPApplyPageRun
End Sub
Sub SetDemoButtonsOn()
    On Error Resume Next
    Dim addr
    addr = ActiveCell.address
    '
    sheets("SampleDrill").visible = False
    sheets("Introduction").Select
    ActiveSheet.Shapes("Button 23").Select
    Selection.OnAction = "ezpivotdemomacro1"
    ActiveSheet.Shapes("Button 33").Select
    Selection.OnAction = "ezpivotdemomacro3"
    ActiveSheet.Shapes("Button 32").Select
    Selection.OnAction = "ezpivotdemomacro2"
    ActiveSheet.Shapes("Button 47").Select
    Selection.OnAction = "ezpivotdemomacro4"
    ActiveSheet.Shapes("Button 26").Select
    Selection.OnAction = "ezpivotmovie1"
    Range("A1").Select
    Application.CommandBars("Reviewing").visible = False
End Sub
Function RunExpire() As Integer
    On Error Resume Next
    Dim k, frmini As String
    If ReadKeyValue("WindowsOS") <> "1" Then
       RunExpire = 1
       Exit Function
    End If
    frmini = GetAppFolder & "\format.ini"
    Kill frmini
    Dim ndays As String
    ndays = 15 - NetDays
    Call wrt_ini(frmini, "Days", ndays)
    Application.ScreenUpdating = True
    ChDirx (GetAppFolder)
    k = EZExpire("EZPivot")
    '
    RestoreDir
    If k = 2 Then Exit Function
    If rd_iniFile1(frmini, "Uninstall") > 0 Then
       RunExpire = -1
       Exit Function
    End If
'    If rd_iniFile1(frmini, "Purchase") > 0 Then
       RunExpire = 1
 '   End If
    If rd_iniFile1(frmini, "RunDemo") > 0 Then
       RunExpire = 2
    End If
End Function
Function NetDays() As Integer
    On Error Resume Next
    If ReadKeyValue("IDate") = "" Then
       Call WriteKeyValue("IDate", Date)
    End If
    Dim x As Date, y
    x = ReadKeyValue("IDate")
    NetDays = Date - x
    If NetDays < 0 Then
       Call WriteKeyValue("IDate", Date - 15)
       NetDays = 15
    End If
End Function
Sub TestComments()
    Dim file As String
    file = GetAppFolder & "\PivotDemo1.txt"
    Run "ezcommon.xla!AddComments", file
End Sub
Function AddMessages(file As String) As Integer
    On Error Resume Next
    If Not exist(file) Then Exit Function
    Dim paddr As String, Title As String, opt As String, i
    Dim output As String, value As String
    paddr = rd_iniFile(file, "Address")
    Title = rd_iniFile(file, "Title")
    For i = 1 To 254
       opt = i
       value = Replace(rd_iniFile(file, "Value", opt), "_", " ")
       If value = "" Then Exit For
       output = output & value & chr(10)
    Next i
    If output = "" Then Exit Function
    Application.ScreenUpdating = True
    AddMessages = MsgBox(output, 64 + vbOKCancel, Title)
End Function
Sub ToggleComments()
    On Error Resume Next
    Dim addr, x
    '
    addr = Selection.address
    x = Application.DisplayCommentIndicator
    If x <> xlCommentAndIndicator Then
       Application.DisplayCommentIndicator = xlCommentAndIndicator
    Else
       Application.DisplayCommentIndicator = xlCommentIndicatorOnly
    End If
End Sub
Sub MakeToggleCommentButton()
    On Error Resume Next
    If Not isSheet1("Buttons") Then Exit Sub
    Dim sheet
    sheet = ActiveSheet.Name
    '
    sheets("Buttons").visible = True
    sheets("Buttons").Select
    ActiveSheet.Shapes("Button 1").Select
    Selection.OnAction = "togglecomments"
    Selection.Copy
    sheets(sheet).Select
    If ActiveSheet.PivotTables.Count > 0 Then
      Range("E1").Select
    Else
      Range("L2").Select
    End If
  '  ActiveSheet.Buttons.Add(528, 35.25, 94.5, 15.75).Select
    ActiveSheet.Paste
    Application.CutCopyMode = False
    sheets("Buttons").visible = False
    sheet(sheet).Select
    Range("A1").Select
End Sub
Sub EZPivotDemoDoIt()
    On Error Resume Next
    If sheets("Do-it-yourself").visible Then
       sheets("Do-it-yourself").visible = False
    Else
       sheets("Do-it-yourself").visible = True
       sheets("Do-it-yourself").Select
    End If
End Sub
Sub DelSheet(sheet As String)
    On Error Resume Next
    If Not isSheet1(sheet) Then Exit Sub
    Dim sheet1
    sheet1 = ActiveSheet.Name
    Application.DisplayAlerts = False
    sheets(sheet).visible = True
    sheets(sheet).Select
    ActiveWindow.SelectedSheets.Delete
    Application.DisplayAlerts = True
    sheets(sheet1).Select
End Sub
Sub HideSheet(sheet As String)
    If Not isSheet1(sheet) Then Exit Sub
    sheets(sheet).visible = False
End Sub
Sub DeleteShapes()
    Dim i
    On Error Resume Next
    For i = ActiveSheet.Shapes.Count To 1 Step -1
       If InStr(ActiveSheet.Shapes(i).Name, "Drop Down") = 0 Then
         ActiveSheet.Shapes(i).Delete
         'ActiveSheet.Shapes(i).Cut
       End If
    Next i
End Sub
Sub DeleteAllDemoSheets()
    On Error Resume Next
    Dim sheet As String
    sheet = ActiveSheet.Name
    '
    HideSheet ("Do-it-yourself")
    DelSheet ("PivotTable")
    DelSheet ("PivotTable_C")
    DelSheet ("FormattedPivotTable")
    DelSheet ("FormattedPivotTable_C")
    DelSheet ("PT_C")
    sheets("SampleDrill").visible = False
    Range("A1").Select
    sheets(sheet).Select
    DeleteAllDrillSheets
End Sub

Function repq(msg As String) As String
    repq = Replace(msg, chr(27), "~")
    repq = Replace(msg, "'", "`")
End Function
Function repq1(msg As String) As String
    repq1 = Replace(msg, "~", chr(27))
    repq1 = Replace(repq1, "`", "'")
    repq1 = Replace(repq1, "^", chr(10))
End Function
Sub SetButtonsComments(n1 As Integer)  ' (button1 as string,button2 as string,textbox as string)
    Dim button1 As String, button2 As String, button3 As String
    Dim textbox As String, sheet, addr
    Dim file As String, combut As String, i, opt As String, comment As String
    Dim IncrementLeft As Double, IncrementTop As Double
    Dim textboxleft, buttonnextleft, textboxwidth
    Dim n As Integer, nrowadd As Integer, NotSameStep As Boolean
    On Error Resume Next
    If CInt(getINIname("CurStep", True)) <> n1 And n1 > 0 Then
      NotSameStep = True
    End If
    If n1 = 0 Then
       n = CInt(getINIname("CurStep", True))
    Else
       n = n1
    End If
    
    file = GetAppFolder & "\EZPivotSteps" & n & ".txt"
    If Not exist(file) Then Exit Sub
    ActiveSheet.names.Add "CurStep", n
    combut = "CommentButtons"
    If Not isSheet1(combut) Then Exit Sub
    sheet = ActiveSheet.Name
    button1 = "Button 2"
    button2 = "Button 3"
    button3 = "Button 4"
    textbox = "Text Box 1"
    For i = ActiveSheet.Shapes.Count To 1 Step -1
        opt = ActiveSheet.Shapes(i).Name
        If InStr(opt, "Drop Down") = 0 Then
            ActiveSheet.Shapes(i).Delete
       End If
    Next i
    On Error Resume Next
    For i = 1 To 500
       opt = i
       If rd_iniFile(file, "Comment", opt) = "" Then Exit For
       ActiveSheet.names.Add "Comment_" & i, i & ". " & repq(rd_iniFile(file, "comment", opt))
    Next i
    If i < 2 Then Exit Sub
    ActiveSheet.names.Add "NoComments", i - 1
    '
    sheets(combut).visible = True
    
    sheets(combut).Select
    ActiveSheet.Shapes(textbox).Select
    Selection.Copy
    sheets(sheet).Select
    addr = AdjustButton(rd_iniFile(file, "Address", "TextBox"))
    Dim savewidth
    savewidth = Columns(1).ColumnWidth
    Columns(1).ColumnWidth = 8.43
    Range(addr).Select
    ActiveSheet.Paste
'    If IsExcelVer > 11 Then
'        ActiveSheet.PasteSpecial format:="Microsoft Office Drawing Object", Link:=False, _
'        DisplayAsIcon:=False
'    Else
'        ActiveSheet.PasteSpecial format:="MS Office Drawing Object", Link:=False, _
'        DisplayAsIcon:=False
'    End If
    IncrementLeft = rd_iniFile(file, "IncrementLeft", "TextBox")
    Selection.ShapeRange.IncrementLeft IncrementLeft
    textboxleft = Selection.left
    textboxwidth = Selection.width
    Columns(1).ColumnWidth = savewidth
    If getINIname("CommentNow", True) = "xxx" Or NotSameStep Then
      ActiveSheet.names.Add "CommentNow", "1"
    End If
    Dim comment1 As String
    comment1 = "Comment_" & getINIname("CommentNow", True)
'    Selection.Characters.text = Replace(getINIname(comment1, True), "^", Chr(10))
    Selection.Characters.Text = repq1(getINIname(comment1, True))
 '   Selection.Characters.text = repq1(getINIname(comment1, True))
    ActiveSheet.names.Add "Textbox", Selection.Name
    sheets(combut).Select
   
    ActiveSheet.Shapes(button1).Select
    Selection.OnAction = "ButtonPrevious"
    ActiveSheet.Shapes(button1).Select
    Selection.Copy
    sheets(sheet).Select
    addr = AdjustButton(rd_iniFile(file, "Address", "Previous"))
    Range(addr).Select
    ActiveSheet.Paste
'    If IsExcelVer > 11 Then
'        ActiveSheet.PasteSpecial format:="Microsoft Office Drawing Object", Link:=False, _
'        DisplayAsIcon:=False
'    Else
'        ActiveSheet.PasteSpecial format:="MS Office Drawing Object", Link:=False, _
'        DisplayAsIcon:=False
'    End If
    IncrementLeft = rd_iniFile(file, "IncrementLeft", "Previous")
    Selection.ShapeRange.IncrementLeft IncrementLeft
    IncrementTop = rd_iniFile(file, "IncrementTop", "Previous")
    Selection.ShapeRange.IncrementTop IncrementTop
    
    sheets(combut).Select
    ActiveSheet.Shapes(button2).Select
    Selection.OnAction = "ButtonNext"
    Selection.Copy
    sheets(sheet).Select
    addr = AdjustButton(rd_iniFile(file, "Address", "Next"))
    Range(addr).Select
'    If IsExcelVer > 11 Then
'        ActiveSheet.PasteSpecial format:="Microsoft Office Drawing Object", Link:=False, _
'        DisplayAsIcon:=False
'    Else
'        ActiveSheet.PasteSpecial format:="MS Office Drawing Object", Link:=False, _
'        DisplayAsIcon:=False
'    End If
    ActiveSheet.Paste
    IncrementLeft = rd_iniFile(file, "IncrementLeft", "Next")
    Selection.ShapeRange.IncrementLeft IncrementLeft
    IncrementTop = rd_iniFile(file, "IncrementTop", "Next")
    Selection.ShapeRange.IncrementTop IncrementTop
    If rd_iniFile(file, "Title", "NextStep") <> "" Then
      sheets(combut).Select
      ActiveSheet.Shapes(button3).Select
      Selection.Copy
      sheets(sheet).Select
      addr = AdjustButton(rd_iniFile(file, "Address", "NextStep"))
      Range(addr).Select
      ActiveSheet.Paste
'      If IsExcelVer > 11 Then
'        ActiveSheet.PasteSpecial format:="Microsoft Office Drawing Object", Link:=False, _
'         DisplayAsIcon:=False
'      Else
'        ActiveSheet.PasteSpecial format:="MS Office Drawing Object", Link:=False, _
'        DisplayAsIcon:=False
'      End If
      buttonnextleft = Selection.left
 '     IncrementLeft = rd_iniFile(file, "IncrementLeft", "NextStep")
      IncrementLeft = textboxleft + textboxwidth - buttonnextleft + 1.5
      Selection.ShapeRange.IncrementLeft IncrementLeft
      IncrementTop = rd_iniFile(file, "IncrementTop", "NextStep")
      Selection.ShapeRange.IncrementTop IncrementTop
      Selection.OnAction = rd_iniFile(file, "OnAction", "NextStep")
      Selection.Characters.Text = rd_iniFile(file, "Title", "NextStep")
    End If
    Columns(1).ColumnWidth = savewidth
    sheets(combut).visible = False
    sheets(sheet).Select
    Range("A1").Select
End Sub
Function AdjustButton(address As String) As String
    On Error Resume Next
    Dim addr
    addr = Selection.address
    Range(address).Select
    AdjustButton = address
 '   Exit Function
    Dim nrow As Integer, usedrow As Integer, ncol
    Range("A1").Select
    usedrow = Selection.CurrentRegion.Rows.Count + 2
    ncol = ActiveCell.column
    If usedrow < 26 Then
      Range(addr).Select
      Exit Function
    End If
    Range(address).Select
    nrow = Selection.row
    ncol = Selection.col
    If nrow <= usedrow Then
      ' nrow = usedrow + (usedrow - Selection.row)
       nrow = nrow + 2
       Range(Cells(nrow, ncol), Cells(nrow, ncol)).Select
       AdjustButton = Replace(Selection.address, "$", "")
    End If
    Range(addr).Select
End Function
Sub ButtonPrevious()
    Dim ncomments As Integer, curcomment As Integer, textbox, comment As String
    Dim value As String, addr
    On Error Resume Next
    addr = Selection.address
    ncomments = CInt(getINIname("NoComments", True))
    curcomment = CInt(getINIname("CommentNow", True))
    If curcomment < 2 Then curcomment = ncomments + 1
    curcomment = curcomment - 1
    comment = "Comment_" & curcomment
    ActiveSheet.names.Add "CommentNow", curcomment
    value = Replace(getINIname(comment, True), "^", chr(10))
    textbox = getINIname("TextBox", True)
    ActiveSheet.Shapes(textbox).Select
    Selection.Characters.Text = repq1(value)
    ActiveWorkbook.Saved = True
    Range(addr).Select
End Sub
Sub ButtonNext()
    Dim ncomments As Integer, curcomment As Integer, textbox, comment As String
    Dim value As String, addr
    On Error Resume Next
    addr = Selection.address
    ncomments = CInt(getINIname("NoComments", True))
    curcomment = CInt(getINIname("CommentNow", True))
    If curcomment >= ncomments Then curcomment = 0
    curcomment = curcomment + 1
    comment = "Comment_" & curcomment
    ActiveSheet.names.Add "CommentNow", curcomment
    value = Replace(getINIname(comment, True), "^", chr(10))
    textbox = getINIname("TextBox", True)
    ActiveSheet.Shapes(textbox).Select
    Selection.Characters.Text = repq1(value)
    Range(addr).Select
    ActiveWorkbook.Saved = True
End Sub
Sub DeleteAllDrillSheets()
    Dim i
    Application.DisplayAlerts = False
    Application.ScreenUpdating = False
    For i = Worksheets.Count To 1 Step -1
       If sheets(i).visible And GetSheetVar(sheets(i).Name, "PivotName") <> "" Then
          sheets(i).visible = True
          sheets(i).Select
          If sheets(i).Name <> "DemoData" And sheets(i).Name <> "SampleDrill" Then
             ActiveWindow.SelectedSheets.Delete
          End If
       End If
    Next i
    Application.DisplayAlerts = True
End Sub
Sub RowValuesBegin()
    On Error Resume Next
    Dim n
    n = ActiveSheet.PivotTables(1).Count
    PivotValCur = 1 + n
    RowValuesLoad
    RowValuesAllClear
End Sub
Sub RowValuesLoad()
    On Error Resume Next
    If ActiveSheet.PivotTables.Count = 0 Then Exit Sub
    Dim nvals As Integer, i, n As Integer
    If ActiveSheet.PivotTables(1).PivotFields.Count > 0 Then n = 1
    If PivotValCur < n + 1 Then PivotValCur = n + 1
    nRowVals = ActiveSheet.PivotTables(1).RowFields.Count
    If nRowVals < 1 Then Exit Sub
    nvals = ActiveSheet.PivotTables(1).RowFields(PivotValCur - n).PivotItems.Count
    For i = 1 To nvals
       ReDim Preserve RowValNames(i)
       RowValNames(i) = ActiveSheet.PivotTables(1).RowFields(PivotValCur - n).PivotItems(i).Name
    Next i
End Sub
Sub PageValuesBegin()
    PivotValCur = 1
    PageValuesLoad
    PageValuesAllClear
End Sub
Sub PageValuesLoad()
    On Error Resume Next
    If ActiveSheet.PivotTables.Count = 0 Then Exit Sub
    Dim nvals As Integer, i, n
    n = ActiveSheet.PivotTables(1).PageFields.Count
    If n < 1 Then Exit Sub
    PivotValCur = 1
    nvals = ActiveSheet.PivotTables(1).PageFields(1).PivotItems.Count
    For i = 1 To nvals
       ReDim Preserve PageValNames(i)
       RowValNames(i) = ActiveSheet.PivotTables(1).PageFields(1).PivotItems(i).Name
    Next i
End Sub

Sub RowValuesUp()
    Dim n As Integer
    On Error Resume Next
    Application.EnableEvents = False
    Application.ScreenUpdating = False
    Dim sheet, sheet1
    sheet = FindDataSheet(ActiveSheet.Name)
    sheet1 = ActiveSheet.Name
    If sheet <> "" Then
       sheets(sheet).Select
    End If
    If ActiveSheet.PivotTables.Count = 0 Then
      Application.EnableEvents = True
      Exit Sub
    End If
    If ActiveSheet.PivotTables.Count = 0 Then Exit Sub
    If ActiveSheet.PivotTables(1).PageFields.Count > 0 Then n = 1
    nItemValCur = nItemValCur - 1
    PivotValCur = CInt(getINIname("PivotValCur", True))
    If PivotValCur < 1 Then
       PivotValCur = 1 + n
    End If
    If nItemValCur < 1 Then
'       nItemValCur = ActiveSheet.PivotTables(1).RowFields(PivotValCur - n).PivotItems.Count
    End If
    RowValuesSet (PivotValCur - n)
    If nItemValCur < 1 Then
       nItemValCur = ActiveSheet.PivotTables(1).RowFields(PivotValCur - n).PivotItems.Count + 1
    End If
    sheets(sheet1).Select
    Application.EnableEvents = True
End Sub
Sub RowValuesDown()
    On Error Resume Next
    Application.EnableEvents = False
    Application.ScreenUpdating = False
    Dim sheet, sheet1
    sheet = FindDataSheet(ActiveSheet.Name)
    sheet1 = ActiveSheet.Name
    If sheet <> "" Then
       sheets(sheet).Select
    End If
    If ActiveSheet.PivotTables.Count = 0 Then
      Application.EnableEvents = True
      Exit Sub
    End If
    If ActiveSheet.PivotTables.Count = 0 Then Exit Sub
    Dim n As Integer
    If ActiveSheet.PivotTables(1).PageFields.Count > 0 Then n = 1
    nItemValCur = nItemValCur + 1
    PivotValCur = CInt(getINIname("PivotValCur", True))
    If PivotValCur < 1 + n Then
       PivotValCur = 1 + n
    End If
    If nItemValCur > ActiveSheet.PivotTables(1).RowFields(PivotValCur - n).PivotItems.Count Then
       nItemValCur = 0
    End If
    RowValuesSet (PivotValCur - n)
    sheets(sheet1).Select
    Application.EnableEvents = True
End Sub
Sub ColValuesUp()
   
    Dim sheet1, sheet
    On Error Resume Next
    Application.EnableEvents = False
    Application.ScreenUpdating = False
    sheet = FindDataSheet(ActiveSheet.Name)
    sheet1 = ActiveSheet.Name
    If sheet <> "" Then
       sheets(sheet).Select
    End If
    If ActiveSheet.PivotTables.Count = 0 Then
      Application.EnableEvents = True
      Exit Sub
    End If
    nItemValCur = nItemValCur - 1
    If nItemValCur < 1 Then
       nItemValCur = 0 'ActiveSheet.PivotTables(1).ColumnFields(1).PivotItems.Count
       ColValuesAllClear
       nItemValCur = ActiveSheet.PivotTables(1).columnfields(1).PivotItems.Count + 1
 '      nItemValCur = 0
       Exit Sub
    End If
    ColValuesSet (1)
    sheets(sheet1).Select
    Application.EnableEvents = True
End Sub
Sub PageValuesUp()
    Dim sheet1, sheet
    On Error Resume Next
    Application.EnableEvents = False
    Application.ScreenUpdating = False
    sheet = FindDataSheet(ActiveSheet.Name)
    sheet1 = ActiveSheet.Name
    If sheet <> "" Then
       sheets(sheet).Select
    End If
    If ActiveSheet.PivotTables.Count = 0 Then
      Application.EnableEvents = True
      Exit Sub
    End If
    nItemValCur = nItemValCur - 1
    If nItemValCur < 1 Then
       nItemValCur = ActiveSheet.PivotTables(1).PageFields(1).PivotItems.Count
       PageValuesAllClear
       nItemValCur = ActiveSheet.PivotTables(1).PageFields(1).PivotItems.Count + 1
       sheets(sheet1).Select
       Application.EnableEvents = True
       Exit Sub
    End If
    PageValuesSet (1)
    sheets(sheet1).Select
    Application.EnableEvents = True
End Sub
Sub PageValuesDown()
    On Error Resume Next
    Dim sheet1, sheet
    On Error Resume Next
    Application.EnableEvents = False
    Application.ScreenUpdating = False
    sheet = FindDataSheet(ActiveSheet.Name)
    sheet1 = ActiveSheet.Name
    If sheet <> "" Then
       sheets(sheet).Select
    End If
    If ActiveSheet.PivotTables.Count = 0 Then
      Application.EnableEvents = True
      Exit Sub
    End If
    If ActiveSheet.PivotTables.Count = 0 Then Exit Sub
    
    nItemValCur = nItemValCur + 1
    If nItemValCur > ActiveSheet.PivotTables(1).PageFields(1).PivotItems.Count Then
       nItemValCur = 0
       PageValuesAllClear
    End If
    PageValuesSet (1)
    sheets(sheet1).Select
    Application.EnableEvents = True
End Sub
Sub ColValuesDown()
    Dim sheet1, sheet
    On Error Resume Next
    Application.EnableEvents = False
    Application.ScreenUpdating = False
    sheet = FindDataSheet(ActiveSheet.Name)
    sheet1 = ActiveSheet.Name
    If sheet <> "" Then
       sheets(sheet).Select
    End If
    If ActiveSheet.PivotTables.Count = 0 Then
      Application.EnableEvents = True
      Exit Sub
    End If
    If ActiveSheet.PivotTables.Count = 0 Then Exit Sub
    nItemValCur = nItemValCur + 1
    If nItemValCur > ActiveSheet.PivotTables(1).columnfields(1).PivotItems.Count Then
       nItemValCur = 0
    End If
    ColValuesSet (1)
    sheets(sheet1).Select
    Application.EnableEvents = True
End Sub
Sub RowValuesAllClear()
    Dim i
    Dim sheet1, sheet
    On Error Resume Next
    Application.EnableEvents = False
    Application.ScreenUpdating = False
    sheet = FindDataSheet(ActiveSheet.Name)
    sheet1 = ActiveSheet.Name
    If sheet <> "" Then
       sheets(sheet).Select
    End If
    If ActiveSheet.PivotTables.Count = 0 Then
      Application.EnableEvents = True
      Exit Sub
    End If
    nItemValCur = 0
    For i = 1 To ActiveSheet.PivotTables(1).RowFields.Count
       RowValuesSet (i)
    Next i
    sheets(sheet1).Select
    Application.EnableEvents = True
End Sub
Sub PageValuesAllClear()
    Dim i, Name
    On Error Resume Next
    Dim sheet1, sheet
    Application.EnableEvents = False
    Application.ScreenUpdating = False
    sheet = FindDataSheet(ActiveSheet.Name)
    sheet1 = ActiveSheet.Name
    If sheet <> "" Then
       sheets(sheet).Select
    End If
    If ActiveSheet.PivotTables.Count = 0 Then
      Application.EnableEvents = True
      Exit Sub
    End If
    nItemValCur = 0
    PageValuesSet (1)
    For i = 1 To ActiveSheet.PivotTables(1).PageFields.Count
       Name = ActiveSheet.PivotTables(1).PageFields(i).Name
       ActiveSheet.PivotTables(1).PivotFields(Name).CurrentPage = _
        "(All)"
    Next i
    sheets(sheet1).Select
    Application.EnableEvents = True
End Sub
Sub ColValuesAllClear()
    Dim i
    On Error Resume Next
    Dim sheet1, sheet
    On Error Resume Next
    Application.EnableEvents = False
    Application.ScreenUpdating = False
    sheet = FindDataSheet(ActiveSheet.Name)
    sheet1 = ActiveSheet.Name
    If sheet <> "" Then
       sheets(sheet).Select
    End If
    If ActiveSheet.PivotTables.Count = 0 Then
      Application.EnableEvents = True
      Exit Sub
    End If
    nItemValCur = 0
    For i = 1 To ActiveSheet.PivotTables(1).columnfields.Count
       ColValuesSet (i)
    Next i
    sheets(sheet1).Select
    Application.EnableEvents = True
End Sub
Sub RowValuesSet(nvalue As Integer)
    Dim i
    On Error Resume Next
    '
    For i = 1 To ActiveSheet.PivotTables(1).RowFields(nvalue).PivotItems.Count
         ActiveSheet.PivotTables(1).RowFields(nvalue).PivotItems(i).visible = True
    Next i
    For i = 1 To ActiveSheet.PivotTables(1).RowFields(nvalue).PivotItems.Count
      If i <> nItemValCur And nItemValCur > 0 Then
         ActiveSheet.PivotTables(1).RowFields(nvalue).PivotItems(i).visible = False
      End If
    Next i
End Sub
Sub PageValuesSet(nvalue As Integer)
    Dim i, Name As String
    On Error Resume Next
    '
    Name = ActiveSheet.PivotTables(1).PageFields(1).Name
    For i = 1 To ActiveSheet.PivotTables(1).PageFields(nvalue).PivotItems.Count
         ActiveSheet.PivotTables(1).PageFields(nvalue).PivotItems(i).visible = True
    Next i
    If nItemValCur < 1 Then Exit Sub
    If nItemValCur > ActiveSheet.PivotTables(1).PageFields(nvalue).PivotItems.Count Then
       nItemValCur = 0
       Exit Sub
    End If
    For i = 1 To ActiveSheet.PivotTables(1).PageFields(nvalue).PivotItems.Count
      If i <> nItemValCur And nItemValCur > 0 Then
         ActiveSheet.PivotTables(1).PageFields(nvalue).PivotItems(i).visible = False
      ElseIf nItemValCur = i Then
         ActiveSheet.PivotTables(1).PivotFields(Name).CurrentPage = _
         ActiveSheet.PivotTables(1).PageFields(nvalue).PivotItems(i).Name
      End If
    Next i
End Sub


Sub ColValuesSet(nvalue As Integer)
    Dim i, Name As String
    On Error Resume Next
    '
    Name = ActiveSheet.PivotTables(1).columnfields(1).Name
    For i = 1 To ActiveSheet.PivotTables(1).columnfields(nvalue).PivotItems.Count
         ActiveSheet.PivotTables(1).columnfields(nvalue).PivotItems(i).visible = True
    Next i
    For i = 1 To ActiveSheet.PivotTables(1).columnfields(nvalue).PivotItems.Count
      If i <> nItemValCur And nItemValCur > 0 Then
         ActiveSheet.PivotTables(1).columnfields(nvalue).PivotItems(i).visible = False
      ElseIf nItemValCur > 0 Then
         ActiveSheet.PivotTables("PivotTable1").PivotFields(Name).CurrentPage = _
         ActiveSheet.PivotTables(1).columnfields(nvalue).PivotItems(i).Name
      End If
    Next i
End Sub
Sub RowValueSet()
    On Error Resume Next
    Dim j, n As Integer
    If ActiveSheet.PivotTables(1).PageFields.Count > 0 Then n = 1
    j = Application.CommandBars.ActionControl.index
    ActiveSheet.names.Add "PivotValCur", j
    PivotValCur = j
    If ActiveSheet.PivotTables(1).RowFields.Count <> j Then
       PageValuesAllClear
       RowValuesAllClear
       ColValuesAllClear
    End If
   
'      Application.CommandBars("EZ Pivot").Controls(8).TooltipText = "Walk " & ActiveSheet.PivotTables(1).RowFields(j - n).Name & " Up"
'      Application.CommandBars("EZ Pivot").Controls(9).TooltipText = "Walk " & ActiveSheet.PivotTables(1).RowFields(j - n).Name & " Down"
   
End Sub


Sub PropBookRestore()
    Dim style, response
    On Error Resume Next
    Dim chart1 As String, chart2 As String
    style = vbYesNo + vbDefaultButton2 + vbQuestion
    response = MsgBox("Are you Sure?", style, "Restore EZ-Pivot Property Master")
    If response = vbNo Then Exit Sub
    chart1 = GetAppFolder & "\PivotProps.xls"
    chart2 = GetAppFolder & "\PivotPropsMaster.xls"
    Call FileCopy(chart2, chart1)
End Sub
Sub ViewPropBook()
    On Error Resume Next
    Dim file As String, sheet
    file = GetAppFolder & "\PivotProps.xls"
    If Not exist(file) Then
       MsgBox "Save a PivotTable First", , "PivotProps Does Not Exist"
       Exit Sub
    End If
    If IsWorkBookOpen("PivotProps.xls") Then
       Windows("PivotProps.xls").Activate
    Else
       Workbooks.Open file, , True
    End If
    sheet = "P" & ReadKeyValue("PivotProp")
    sheets(sheet).Select
    ActiveWorkbook.Saved = True
End Sub
Sub PivotPropsRestore()
    On Error Resume Next
    If ActiveSheet.PivotTables.Count <> 1 Then Exit Sub
    Dim response, style, propbook As String, book As String, propname As String
    On Error Resume Next
    Dim k As Integer, i, frmini As String, opt As String
    Dim pivotprop As String, addr, pivotnum As String, sheet
    pivotnum = getINIname("PivotProp", True)
    
    propbook = "Pivotprops.xls"
    addr = Selection.address
    book = ActiveWorkbook.Name
    propname = GetAppFolder & "\PivotProps.xls"
    '
    Application.DisplayAlerts = False
    If getINIname("PivotProp", True) = "xxx" Then
       ActiveSheet.names.Add "PivotProp", ReadKeyValue("PivotProp")
    End If
    pivotprop = getINIname("PivotProp", True)
    If Not exist(propname) Then Exit Sub
    If IsWorkBookOpen(propbook) Then
       Workbooks.Close
    End If
    Workbooks.Open propname, , True
    
    Workbooks(propbook).Activate
    frmini = GetAppFolder & "\format.ini"
    Kill frmini
    Call wr_ini("Restore", "1")
    For i = 1 To ActiveWorkbook.Worksheets.Count
       Worksheets(i).Select
       If Worksheets(i).Name <> "Sheet1" Then
         opt = getINIname("Name", True)
         Call wrt_ini(frmini, "Title", Cells(1, 1).Text, opt)
        
       End If
    Next i
    Workbooks(book).Activate
    Call wrt_ini(frmini, "Select", pivotprop)
    ChDirx (GetAppFolder)
    Application.ScreenUpdating = True
    k = EditPivotProps
    RestoreDir
    If k = 2 Then
       Workbooks(propbook).Close
       Application.DisplayAlerts = True
       Range(addr).Select
       Exit Sub
    End If
    '
    ActiveSheet.names.Add "PivotProp", ReadKeyValue("PivotProp")
    Workbooks(propbook).Activate
    sheet = "P" & ReadKeyValue("PivotProp")
    sheets(sheet).Select
    Workbooks(book).Activate
    Application.ScreenUpdating = True
    PivotPageAll1
    Range("A2").Select
    '
    PropValsRestore
    Workbooks(propbook).Close
    Application.DisplayAlerts = True
    Range(addr).Select
End Sub
Sub PivotPropsSave()
    On Error Resume Next
    If ActiveSheet.PivotTables.Count <> 1 Then Exit Sub
    Dim response, style, propbook As String, book As String, propname As String
    On Error Resume Next
    Dim k As Integer, i, frmini As String, opt As String, pivotprop As String, addr
    propbook = "Pivotprops.xls"
    addr = Selection.address
    book = ActiveWorkbook.Name
    propname = GetAppFolder & "\PivotProps.xls"
    '
    Application.DisplayAlerts = False
    If getINIname("PivotProp", True) = "xxx" Then
       ActiveSheet.names.Add "PivotProp", ReadKeyValue("PivotProp")
    End If
    pivotprop = getINIname("PivotProp", True)
    If Not exist(propname) Then
       Workbooks.Add
       For i = ActiveWorkbook.sheets.Count To 2 Step -1
          ActiveWindow.SelectedSheets.Delete
       Next i
       ActiveWorkbook.SaveAs propname
       ActiveSheet.Name = "Sheet1"
    End If
    If IsWorkBookOpen(propbook) Then
       Workbooks.Close
    End If
    Workbooks.Open propname, , False
    Workbooks(propbook).Activate
    frmini = GetAppFolder & "\format.ini"
    Kill frmini
    For i = 1 To ActiveWorkbook.Worksheets.Count
       Worksheets(i).Select
       If Worksheets(i).Name <> "Sheet1" Then
         opt = getINIname("Name", True)
         Call wrt_ini(frmini, "Title", Cells(1, 1).Text, opt)
        
       End If
    Next i
    Workbooks(book).Activate
    Call wrt_ini(frmini, "Select", pivotprop)
    ChDirx (GetAppFolder)
    Application.ScreenUpdating = True
    k = EditPivotProps
    RestoreDir
    If k = 2 Then
       Workbooks(propbook).Close
       Application.DisplayAlerts = True
       Range(addr).Select
       Exit Sub
    End If
'    PageValuesAllClear
'    RowValuesAllClear
'    ColValuesAllClear
    
    '
    Dim n As Integer
    n = rd_ini1("Select")
    opt = n
    ActiveSheet.names.Add "PivotProp", opt
    Windows(propbook).Activate
    If n = 0 Then
       sheets(1).Copy after:=sheets(ActiveWorkbook.sheets.Count)
       ActiveSheet.Name = "P" & rd_ini1("MaxVals") + 1 '
       ActiveSheet.names.Add "Name", rd_ini1("MaxVals") + 1
    
       opt = rd_ini1("Maxvals") + 1
       Cells(1, 1).value = rd_ini("Title", opt)
    End If
    
       Range("A1:F1").Select
       Selection.MergeCells = True
       With Selection.font
        .fontstyle = "Bold"
        .size = 12
        .colorindex = xlAutomatic
       End With
       With Selection
        .HorizontalAlignment = xlCenter
        .VerticalAlignment = xlBottom
       End With
       With Selection.Interior
        .colorindex = 37
        .pattern = xlSolid
        .PatternColorIndex = xlAutomatic
       End With
       Range("A2:F2").Select
       With Selection
        .HorizontalAlignment = xlCenter
        .VerticalAlignment = xlBottom
       End With
       With Selection.font
        .Name = "Arial"
        .fontstyle = "Bold"
        .size = 10
        .colorindex = xlAutomatic
      End With
'    End If
    Range("A2").Select
      ActiveCell.FormulaR1C1 = "Page Properties"
      Range("B2").Select
      Columns("A:F").ColumnWidth = 20
      Range("B2").Select
      ActiveCell.FormulaR1C1 = "Row Properties"
      Range("C2").Select
      ActiveCell.FormulaR1C1 = "Column Properties"
      Range("D2").Select
      ActiveCell.FormulaR1C1 = "Data Properties"
      Range("E2").Select
      ActiveCell.FormulaR1C1 = "Grand Properties"
      Range("F2").Select
      ActiveCell.FormulaR1C1 = "Misc. Properties"
      
      Rows("2:2").RowHeight = 21
      Range("A2:F2").Select
      With Selection
        .HorizontalAlignment = xlCenter
        .VerticalAlignment = xlCenter
        .WrapText = False
        .Orientation = 0
        .AddIndent = False
        .ShrinkToFit = False
        .MergeCells = False
      End With
      Range("A2").Select
      
      ActiveSheet.DisplayAutomaticPageBreaks = False
      ActiveSheet.PageSetup.Orientation = xlLandscape
      ActiveSheet.PageSetup.CenterHorizontally = True
      ActiveSheet.PageSetup.PrintGridlines = True
      SetMargins
      SetColorPallette
    For i = ActiveWorkbook.sheets.Count To 1 Step -1
          sheets(i).Select
          If sheets(i).Name = "Sheet1" Then
             ActiveWindow.SelectedSheets.Delete
          Else
            If getINIname("Name", True) = rd_ini("Select") Then
              opt = rd_ini("Select")
              Cells(1, 1).value = rd_ini("Title", opt)
              Range(Cells(1, 1), Cells(1, 8)).Select
              ActiveSheet.names.Add "Title", Cells(1, 1).Text
              PageCompanyUser
              Selection.MergeCells.True
              Selection.HorizontalAlignment = xlCenter
              ActiveSheet.Name = "P" & opt
              Range("A1").Select
              Exit For
             End If
          End If
    Next i
    Range("A2").Select
    Call PropValsSave(propbook, book)
    Workbooks(propbook).Save
    Workbooks(propbook).Close
    ActiveSheet.names.Add "PivotProp", opt
    Application.DisplayAlerts = True
    Range("A2").Select
  '  ViewPropBook
End Sub
Sub TestPropSave()
    Dim propbook As String, book As String, sheet As String
    book = ActiveWorkbook.Name
    propbook = GetAppFolder & "\pivotprops.xls"
    If Not IsWorkBookOpen("pivotprops.xls") Then
       Workbooks.Open propbook
    End If
    Workbooks(book).Activate
    Call PropValsSave("pivotprops.xls", book)
End Sub
Function PropAddrRowGrand() As String
    On Error Resume Next
    If Not ActiveSheet.PivotTables(1).RowGrand Then Exit Function
     Dim buf, ndata
    ndata = ActiveSheet.PivotTables(1).DataFields.Count
   
    buf = chr(39) & ActiveSheet.PivotTables(1).DataFields(1).Name & chr(39)
    If ndata > 1 Then
        buf = buf & ":" & chr(39) & ActiveSheet.PivotTables(1).DataFields(ndata).Name & chr(39)
    End If
    buf = buf & " 'Row Grand Total'"
    If CInt(ReadKeyValue("OfficeNo")) > 9 Then
       ActiveSheet.PivotTables(1).PivotSelect buf, xlDataAndLabel, True
    Else
       ActiveSheet.PivotTables(1).PivotSelect buf, xlDataAndLabel
    End If
    PropAddrRowGrand = ActiveCell.address
End Function
Function PropAddrColGrand() As String
    On Error Resume Next
    If Not ActiveSheet.PivotTables(1).ColumnGrand Then Exit Function
    Dim buf, ndata
    ndata = ActiveSheet.PivotTables(1).DataFields.Count
    buf = chr(39) & ActiveSheet.PivotTables(1).DataFields(1).Name & chr(39)
    If ndata > 1 Then
        buf = buf & ":" & chr(39) & ActiveSheet.PivotTables(1).DataFields(ndata).Name & chr(39)
    End If
    buf = buf & " 'Column Grand Total'"
     If CInt(ReadKeyValue("OfficeNo")) > 9 Then
       ActiveSheet.PivotTables(1).PivotSelect buf, xlDataAndLabel, True
    Else
       ActiveSheet.PivotTables(1).PivotSelect buf, xlDataAndLabel
    End If
    PropAddrColGrand = Cells(ActiveCell.row, Selection.Columns.Count - 1).address
End Function
Function PropAddrGrandTop() As String
    Dim buf As String
    buf = "'Row Grand Total'"
    If CInt(ReadKeyValue("OfficeNo")) > 9 Then
         ActiveSheet.PivotTables(1).PivotSelect buf, xlLabelOnly, True
    Else
         ActiveSheet.PivotTables(1).PivotSelect buf, xlLabelOnly
    End If
    PropAddrGrandTop = ActiveCell.address
End Function
Function PropAddrGrandBottom() As String
    Dim rng1 As Range, WorkRange As Range, addr As String, addr1 As String
    PropAddrRowGrand
    addr = Selection.address
    Set rng1 = Range(addr)
    PropAddrColGrand
    addr1 = Selection.address
    Set WorkRange = Range(addr1)
    Set WorkRange = Intersect(WorkRange, rng1)
    WorkRange.Select
    PropAddrGrandBottom = Cells(Selection.row, Selection.column).address
End Function
Sub PropCopyFormat(wbout As Workbook, woutput As Worksheet, wrow, wcol, Title As String)
    Dim area1 As String, area2 As String, book As String
    Dim Hor, Ver, wrap, orien, addind, shrink, merge
    area1 = Selection.address
    book = ActiveWorkbook.Name
    On Error Resume Next
    With Selection
       Hor = .HorizontalAlignment
       Ver = .VerticalAlignment
       wrap = .WrapText
       orien = .Orientation
       addind = .AddIndent
       shrink = .ShrinkToFit
       merge = .MergeCells
    End With
    Dim Name, fontstyle, size, strike, superscript
    Dim subscript, shadow, underline, colorindex, outline
    With Selection.font
       Name = .Name
       fontstyle = .fontstyle
       size = .size
       strike = .Strikethrough
       superscript = .superscript
       subscript = .subscript
       outline = .OutlineFont
       shadow = .shadow
       underline = .underline
       colorindex = .colorindex
    End With
    Dim colorindexi, pattern, patterncolorindexi
    With Selection.Interior
        colorindexi = .colorindex
        pattern = .pattern
        patterncolorindexi = .PatternColorIndex
    End With
'    If iscolumnbanded Then
'        colorindexi = xlNone
'    End If
    wbout.Activate
    woutput.Select
    Range(Cells(wrow, wcol), Cells(wrow, wcol)).Select
    area2 = Selection.address
    Selection.value = Title
    With Selection
       .HorizontalAlignment = Hor
       .VerticalAlignment = Ver
       .WrapText = wrap
       .Orientation = orien
       .AddIndent = addind
       .ShrinkToFit = shrink
       .MergeCells = merge
    End With
    With Selection.font
       .Name = Name
       .fontstyle = fontstyle
       .size = size
       .Strikethrough = strike
       .superscript = superscript
       .subscript = subscript
       .OutlineFont = outline
       .shadow = shadow
       .underline = underline
       .colorindex = colorindex
    End With
    With Selection.Interior
        .colorindex = colorindexi
        .pattern = pattern
        .PatternColorIndex = patterncolorindexi
    End With
End Sub
Sub PropCopyFormat1(woutput As Worksheet, wrow, wcol, Title As String)
    Dim area1 As String, area2 As String, book As String
    Dim Hor, Ver, wrap, orien, addind, shrink, merge
    
    
    book = ActiveWorkbook.Name
    woutput.Activate
    Range(Cells(wrow, wcol), Cells(wrow, wcol)).Select
    On Error Resume Next
    With Selection
       Hor = .HorizontalAlignment
       Ver = .VerticalAlignment
       wrap = .WrapText
       orien = .Orientation
       addind = .AddIndent
       shrink = .ShrinkToFit
       merge = .MergeCells
    End With
    Dim Name, fontstyle, size, strike, superscript
    Dim subscript, shadow, underline, colorindex, outline
    With Selection.font
       Name = .Name
       fontstyle = .fontstyle
       size = .size
       strike = .Strikethrough
       superscript = .superscript
       subscript = .subscript
       outline = .OutlineFont
       shadow = .shadow
       underline = .underline
       colorindex = .colorindex
    End With
    Dim colorindexi, pattern, patterncolorindexi
    With Selection.Interior
        colorindexi = .colorindex
        pattern = .pattern
        patterncolorindexi = .PatternColorIndex
    End With
'    If iscolumnbanded Then
'        colorindexi = xlNone
'    End If
    Workbooks(book).Activate
    area2 = Selection.address
'    Selection.value = title
    With Selection
       .HorizontalAlignment = Hor
       .VerticalAlignment = Ver
       .WrapText = wrap
       .Orientation = orien
       .AddIndent = addind
       .ShrinkToFit = shrink
       .MergeCells = merge
    End With
    With Selection.font
       .Name = Name
       .fontstyle = fontstyle
       .size = size
       .Strikethrough = strike
       .superscript = superscript
       .subscript = subscript
       .OutlineFont = outline
       .shadow = shadow
       .underline = underline
       .colorindex = colorindex
    End With
    With Selection.Interior
        .colorindex = colorindexi
        .pattern = pattern
        .PatternColorIndex = patterncolorindexi
    End With
End Sub
Function XRowSub(i As Integer) As String
    Dim x() As Variant, Name As String
    If i > ActiveSheet.PivotTables(1).RowFields.Count Then Exit Function
    Name = ActiveSheet.PivotTables(1).RowFields(i).Name
    If Name = "Data" Then Exit Function
    x = ActiveSheet.PivotTables(1).PivotFields(Name).Subtotals
    If x(1) = True Then XRowSub = Name
End Function
Sub test()
    Dim npages, nrows, ncols, ndata, buf As String
    Dim addr As String, i As Integer, x, pagefield, pt As PivotTable, rowfield, colfield
    On Error Resume Next
    Set pt = ActiveSheet.PivotTables(1)
    npages = ActiveSheet.PivotTables(1).PageFields.Count
    nrows = pt.RowFields.Count
    ncols = pt.columnfields.Count
    ndata = pt.DataFields.Count
    For i = 1 To npages
       buf = "'" & pt.PageFields(i).Name & "'" & "[All]"
       addr = RegionAddr(buf, 0)
    Next i
    For i = 1 To nrows
       buf = "'" & pt.RowFields(i).Name & "'" & "[All]"
       addr = RegionAddr(buf, 0)
    Next i
    For i = 1 To ncols
       buf = "'" & pt.columnfields(i).Name & "'" & "[All]"
       addr = RegionAddr(buf, 0)
    Next i
    buf = chr(39) & pt.DataFields(1).Name & chr(39)
    If ndata > 0 Then
       buf = buf & ":" & chr(39) & pt.DataFields(ndata).Name & chr(39)
    End If
    addr = RegionAddr(buf, 1)
    buf = "'Row Grand Total'"    'Grand Heading region
    buf = ""
    For i = 1 To ndata
       buf = buf & chr(39) & pt.columnfields(i).Name & chr(39)
       If i < ndata Then buf = buf & ":"
    Next i
    addr = RegionAddr(buf, 0)
    
    Dim Name As String
    For i = 1 To 10
      Name = ""
      Name = XRowSub(i)
      If Name = "" Then Exit For
      buf = Name & "[All;Total] "
      If ndata > 0 Then
        buf = buf & chr(39) & pt.DataFields(1).Name & chr(39) & ":"
        buf = buf & chr(39) & pt.DataFields(ndata).Name & chr(39)
      End If
      addr = RegionAddr(buf, 2)
    Next i
    buf = buf & "[All]"
    addr = RegionAddr(buf, 0)
    
    addr = RegionAddr("", 4, 1) ' left heading region
    addr = RegionAddr("", 3, 1) ' right heading region
End Sub
Function RegionAddr(buf As String, opt As Integer, Optional all As Integer = 0) As String
    On Error Resume Next
    Dim addr, mode As Integer, j As Integer
    Err.Clear
    If opt = 0 Then
      mode = xlLabelOnly
    ElseIf opt = 1 Then
      mode = xlDataOnly
    ElseIf opt = 2 Then
      mode = xlDataAndLabel
    ElseIf opt = 3 Then
      mode = xlBlanks
    ElseIf opt = 4 Then
      mode = xlOrigin
    End If
    addr = ActiveCell.address
    Range("A3").Select
    ActiveSheet.PivotTables(1).PivotSelect buf, mode
    j = Err.Number
    If j > 0 Then
      Range(addr).Select
      Exit Function
    End If
    RegionAddr = Selection.address
    If all = 1 Then Exit Function
    Range(RegionAddr).Select
    RegionAddr = ActiveCell.address
    Range(addr).Select
End Function
Sub PropValsSave1()
    Dim propbook As String, book As String, propnum As String, sheet
    On Error Resume Next
 '   Exit Sub
    propbook = GetAppFolder & "\PivotProps.xls"
    book = ActiveWorkbook.Name
    If Not exist(propbook) Then Exit Sub
    propnum = getINIname("PivotProp", True)
    If propnum = "xxx" Then Exit Sub
    If Not IsWorkBookOpen("PivotProps.xls") Then
       Workbooks.Open propbook, , False
    End If
    Workbooks("PivotProps.xls").Activate
    sheet = "P" & propnum
    sheets(sheet).Select
    Workbooks(book).Activate
    Call PropValsSave("PivotProps.xls", book)
    Workbooks("PivotProps.xls").Save
    Workbooks("PivotProps.xls").Close
End Sub
Sub PropValsSave(propbook As String, book As String)
    On Error Resume Next
    Exit Sub
    Application.StatusBar = "Saving Properties to Master ..."
    Dim addr As String, addr1, i As Integer
    addr1 = Selection.address
    Dim win As Worksheet, wout As Worksheet, wbin As Workbook, wbout As Workbook
    Set wbin = Workbooks(book)
    Set wbout = Workbooks(propbook)
    Set win = wbin.ActiveSheet
    Set wout = wbout.ActiveSheet
    win.Activate
    addr = PropAddrRowGrand
    Cells(ActiveCell.row + 1, ActiveCell.column).Select
 '   Range(addr).Select
    Call PropCopyFormat(wbout, wout, 3, 5, "Row Grand")
    win.Activate
    addr = PropAddrColGrand
    Range(Cells(ActiveCell.row, Selection.Columns.Count - 1), Cells(ActiveCell.row, Selection.Columns.Count - 1)).Select
  '  Range(addr).Select
    If ActiveSheet.PivotTables(1).ColumnGrand Then
      Call PropCopyFormat(wbout, wout, 4, 5, "Column Grand")
      win.Activate
      If ActiveSheet.PivotTables(1).RowGrand Then
        addr = PropAddrGrandTop
        Range(addr).Select
        Call PropCopyFormat(wbout, wout, 5, 5, "Grand Top")
      End If
    End If
    win.Activate
    If ActiveSheet.PivotTables(1).RowGrand Then
      addr = PropAddrGrandBottom
      Range(addr).Select
      Call PropCopyFormat(wbout, wout, 6, 5, "Grand Bottom")
    End If
    win.Activate
    addr = PropAddrLeftHeader
    Range(addr).Select
    Call PropCopyFormat(wbout, wout, 3, 6, "Left Header")
    win.Activate
    addr = PropAddrRightHeader
    Range(addr).Select
    Call PropCopyFormat(wbout, wout, 4, 6, "Right Header")
    win.Activate
    addr = PropAddrCtrHeader
    Range(addr).Select
    Call PropCopyFormat(wbout, wout, 5, 6, "Center Header")
    win.Activate
    addr = PropAddrColumnHeader
    Range(addr).Select
    Call PropCopyFormat(wbout, wout, 3, 3, "Column Header")
    win.Activate
    If ActiveSheet.PivotTables(1).DataFields.Count > 1 Then
      addr = PropAddrDataColumn
      Range(addr).Select
      Call PropCopyFormat(wbout, wout, 3, 4, "Data Row")
    End If
    win.Activate
    addr = PropAddrDataValues
    Range(addr).Select
    
    Call PropCopyFormat(wbout, wout, 4, 4, "Data Values")
    win.Activate
    For i = 1 To ActiveSheet.PivotTables(1).PageFields.Count
      addr = PropAddrPageValue(i)
      Range(addr).Select
      Call PropCopyFormat(wbout, wout, i + 2, 1, "Page " & i)
      win.Activate
    Next
    win.Activate
    Dim n As Integer
    n = ActiveSheet.PivotTables(1).RowFields.Count
    If ActiveSheet.PivotTables(1).DataFields.Count > 1 Then n = n - 1
    For i = 1 To n
      If ActiveSheet.PivotTables(1).RowFields(i).Name <> "Data" Then
        addr = PropAddrRowColumn(i)
        Range(addr).Select
        Call PropCopyFormat(wbout, wout, i + 2, 2, "Row Column " & i)
        win.Activate
        addr = PropAddrRowSubtotal(i)
        If addr <> "" Then
          Range(addr).Select
 '         Range(Cells(ActiveCell.row, Selection.Columns.Count - 1), Cells(ActiveCell.row, Selection.Columns.Count - 1)).Select
          Call PropCopyFormat(wbout, wout, i + 4, 4, "Row Subtotal " & i)
        End If
      End If
      win.Activate
    Next
    win.Activate
    Range(addr1).Select
    Application.StatusBar = False
End Sub
Sub PropValsRestore1()
    Dim propbook As String, book, propnum As String, sheet
    On Error Resume Next
    propbook = GetAppFolder & "\PivotProps.xls"
    book = ActiveWorkbook.Name
    If Not exist(propbook) Then Exit Sub
    propnum = getINIname("PivotProp", True)
    If propnum = "xxx" Then Exit Sub
    
    If Not IsWorkBookOpen("PivotProps.xls") Then
       Workbooks.Open propbook, , True
    End If
    Workbooks(propbook).Activate
    sheet = "P" & propnum
    sheets(sheet).Select
    Workbooks(book).Activate
    PropValsRestore
    If IsWorkBookOpen("PivotProps.xls") Then
       Application.DisplayAlerts = False
       Workbooks("PivotProps.xls").Close
       Application.DisplayAlerts = True
    End If
    Workbooks(book).Activate
End Sub
Sub PropValsRestore()
    On Error Resume Next
    Dim propbook As String, book As String
    Exit Sub
    propbook = "PivotProps.xls"
    book = ActiveWorkbook.Name
    Application.StatusBar = "Restoring Properties from Master ..."
    
    Dim addr As String, addr1, i As Integer
    addr1 = Selection.address
    Dim win As Worksheet, wbin As Workbook, wbout As Workbook
    Set wbin = Workbooks(propbook)
    Set win = wbin.ActiveSheet
    addr = PropAddrDataValues
    Call PropCopyFormat1(win, 4, 4, "Data Values")
    
    If getINIname("PivotRowBand", True) = "1" And ActiveSheet.PivotTables(1).columnfields.Count > 0 Then
      PivotDataColumnRegionBand
    End If
    addr = PropAddrLeftHeader
    Range(addr).Select
    Call PropCopyFormat1(win, 3, 6, "Left Header")

    addr = PropAddrRightHeader
    Call PropCopyFormat1(win, 4, 6, "Right Header")
    
    addr = PropAddrCtrHeader
    Call PropCopyFormat1(win, 5, 6, "Center Header")
    
    addr = PropAddrColumnHeader
    Call PropCopyFormat1(win, 3, 3, "Column Header")
    If ActiveSheet.PivotTables(1).DataFields.Count > 1 Then
      addr = PropAddrDataColumn
      Call PropCopyFormat1(win, 3, 4, "Data Row")
    End If
    
    For i = 1 To ActiveSheet.PivotTables(1).PageFields.Count
      addr = PropAddrPageValue(i)
      Call PropCopyFormat1(win, i + 2, 1, "Page " & i)
    Next
    
    If ActiveSheet.PivotTables(1).RowGrand Then
      addr = PropAddrRowGrand
      Call PropCopyFormat1(win, 3, 5, "Row Grand")
    End If
    If ActiveSheet.PivotTables(1).ColumnGrand Then
      addr = PropAddrColGrand
      Call PropCopyFormat1(win, 4, 5, "Column Grand")
      If ActiveSheet.PivotTables(1).RowGrand Then
        addr = PropAddrGrandBottom
        Call PropCopyFormat1(win, 6, 5, "Grand Bottom")
      End If
      addr = PropAddrGrandTop
      Call PropCopyFormat1(win, 5, 5, "Grand Top")
    End If
    Dim n As Integer
    n = ActiveSheet.PivotTables(1).RowFields.Count
    If ActiveSheet.PivotTables(1).DataFields.Count Then n = n - 1
    For i = 1 To n
      If ActiveSheet.PivotTables(1).RowFields(i).Name <> "Data" Then
        addr = PropAddrRowColumn(i)
        Call PropCopyFormat1(win, i + 2, 2, "Row Column " & i)
        addr = PropAddrRowSubtotal(i)
        If addr <> "" Then
          Call PropCopyFormat1(win, i + 4, 4, "Row Subtotal " & i)
        End If
      End If
    Next i
    addr = PropAddrLeftHeader
    Range(addr).Select
    Call PropCopyFormat1(win, 3, 6, "Left Header")
    
    Range(addr1).Select
    Application.StatusBar = False
End Sub
Sub PivotDataColumnRegionBand()
    Dim buf As String, addr As String, ndata As Integer, nrow As Integer, i
    On Error Resume Next
    ndata = ActiveSheet.PivotTables(1).DataFields.Count
    If ndata = 1 And ActiveSheet.PivotTables(1).RowFields.Count < 3 Then
       SetSingleRowBand1
       Exit Sub
    ElseIf ndata = 1 Then
       Exit Sub
    End If
    buf = ""
    For i = 1 To ndata
       buf = chr(39) & ActiveSheet.PivotTables(1).DataFields(i).Name & chr(39)
       If CInt(ReadKeyValue("OfficeNo")) > 9 Then
        ActiveSheet.PivotTables("PivotTable1").PivotSelect buf, xlDataOnly, True
       Else
        ActiveSheet.PivotTables("PivotTable1").PivotSelect buf, xlDataOnly
       End If
       If i = 1 Or i = 3 Or i = 5 Then
          iscolumnbanded = False
       Else
          iscolumnbanded = True
       End If
       If iscolumnbanded Then Selection.Interior.colorindex = xlNone
    Next i
End Sub
Sub SetSingleRowBand1()
    Dim buf As String, addr As String, row As Integer, ndata As Integer, i, isband As Boolean
    Dim isrowgrand As Integer, iscolgrand As Integer, srow, erow, scol, ecol, nrow
    On Error Resume Next
    addr = ActiveCell.address
    '
    nrow = ActiveSheet.PivotTables(1).RowFields.Count
    If ActiveSheet.PivotTables(1).DataFields.Count > 1 Then Exit Sub
    If ActiveSheet.PivotTables(1).columnfields.Count < 1 Then Exit Sub
    ndata = 1
    isrowgrand = ActiveSheet.PivotTables(1).RowGrand
    iscolgrand = ActiveSheet.PivotTables(1).ColumnGrand
    srow = Selection.CurrentRegion.row + 1
    erow = srow + Selection.CurrentRegion.Rows.Count - 2 + iscolgrand
    If erow < srow + 3 - iscolgrand Then Exit Sub
    buf = ""
    buf = chr(39) & ActiveSheet.PivotTables(1).DataFields(1).Name & chr(39)
    If CInt(ReadKeyValue("OfficeNo")) > 9 Then
        ActiveSheet.PivotTables("PivotTable1").PivotSelect buf, xlDataOnly, True
    Else
        ActiveSheet.PivotTables("PivotTable1").PivotSelect buf, xlDataOnly
    End If
    Dim colori As Integer
    colori = ActiveCell.Interior.colorindex
    scol = Selection.column
    ecol = scol + Selection.CurrentRegion.Columns.Count - 2 + isrowgrand
    isband = True
    For i = srow + 1 To erow
       Range(Cells(i, scol), Cells(i, ecol)).Select
       If Not isband And Cells(i, nrow).Text <> Cells(i - 1, nrow).Text Then
         Selection.Interior.colorindex = xlNone
         isband = True
       Else
         Selection.Interior.colorindex = colori
         isband = False
       End If
    Next i
    Range(addr).Select
End Sub
Function Quote(buf As String) As String
    buf = Replace(buf, "'", "''")
    If InStr(buf, " ") > 0 Then
       Quote = "'" & buf & "'"
    Else
       Quote = buf
    End If
End Function
Function PropAddrRowSubtotal(row As Integer) As String
    Dim buf As String, addr As String, ndata, Name As String, i, j
    Name = Cells(4, row).Text 'XRowSub(row)
    Err.Clear
    If Name = "" Then Exit Function
    On Error Resume Next
    ndata = ActiveSheet.PivotTables(1).DataFields.Count
    buf = Name & "[All;Total] "
    If ndata > 1 Then
      buf = buf & chr(39) & ActiveSheet.PivotTables(1).DataFields(1).Name & chr(39) & ":"
      buf = buf & chr(39) & ActiveSheet.PivotTables(1).DataFields(ndata).Name & chr(39)
    End If
    addr = ActiveCell.address
    If CInt(ReadKeyValue("OfficeNo")) > 9 Then
      ActiveSheet.PivotTables(1).PivotSelect buf, xlDataAndLabel, True
    Else
      ActiveSheet.PivotTables(1).PivotSelect buf, xlDataAndLabel
    End If
    addr = ActiveCell.address
    j = Err.Number
    If j > 0 Then
       Range(addr).Select
       Exit Function
    End If
    PropAddrRowSubtotal = Cells(ActiveCell.row, Selection.Columns.Count - 1).address
End Function
Function PropAddrRowColumn(row As Integer) As String
    Dim buf As String, addr As String, dlg As Variant, k
    addr = ActiveCell.address
    Range("A3").Select
    If ActiveSheet.PivotTables(1).PageFields.Count > 1 Then Exit Function
    buf = Quote(Cells(4, row).Text) & "[All]"
    If CInt(ReadKeyValue("OfficeNo")) > 9 Then
      ActiveSheet.PivotTables(1).PivotSelect buf, xlLabelOnly, True
    Else
      ActiveSheet.PivotTables(1).PivotSelect buf, xlLabelOnly
    End If
    PropAddrRowColumn = ActiveCell.address
End Function
Function PropAddrRightHeader() As String
    On Error Resume Next
    If CInt(ReadKeyValue("OfficeNo")) > 9 Then
       ActiveSheet.PivotTables(1).PivotSelect "", xlBlanks, True
    Else
       ActiveSheet.PivotTables(1).PivotSelect "", xlBlanks
    End If
    PropAddrRightHeader = ActiveCell.address
End Function
Function PropAddrColumnHeader() As String
    Dim buf As String, addr As String, ndata As Integer, i
    On Error Resume Next
    ndata = ActiveSheet.PivotTables(1).columnfields.Count
    buf = ""
    For i = 1 To ndata
       buf = buf & chr(39) & ActiveSheet.PivotTables(1).columnfields(i).Name & chr(39)
       If i < ndata Then buf = buf & ":"
    Next i
    buf = buf & "[All]"
    If CInt(ReadKeyValue("OfficeNo")) > 9 Then
       ActiveSheet.PivotTables(1).PivotSelect buf, xlLabelOnly, True
    Else
       ActiveSheet.PivotTables(1).PivotSelect buf, xlLabelOnly
    End If
    PropAddrColumnHeader = ActiveCell.address
End Function
Function PropAddrLeftHeader() As String
    On Error Resume Next
    If CInt(ReadKeyValue("OfficeNo")) > 9 Then
       ActiveSheet.PivotTables(1).PivotSelect "", xlOrigin, True
    Else
       ActiveSheet.PivotTables(1).PivotSelect "", xlOrigin
    End If
    PropAddrLeftHeader = ActiveCell.address
End Function
Function PropAddrCtrHeader() As String
    On Error Resume Next
    If CInt(ReadKeyValue("OfficeNo")) > 9 Then
       ActiveSheet.PivotTables(1).PivotSelect "", xlBlanks, True
    Else
       ActiveSheet.PivotTables(1).PivotSelect "", xlBlanks
    End If
    Range(Cells(ActiveCell.row, ActiveCell.column - 1), Cells(ActiveCell.row, ActiveCell.column - 1)).Select

    PropAddrCtrHeader = ActiveCell.address
End Function
Function PropAddrDataColumn() As String
    If CInt(ReadKeyValue("OfficeNo")) > 9 Then
       ActiveSheet.PivotTables(1).PivotSelect "Data[All]", xlLabelOnly, True
    Else
       ActiveSheet.PivotTables(1).PivotSelect "Data[All]", xlLabelOnly
    End If
    ActiveSheet.PivotTables(1).PivotSelect "Data[All]", xlLabelOnly
    PropAddrDataColumn = ActiveCell.address
End Function
Function PropAddrDataValues() As String
    Dim buf As String, addr As String, dlg As Variant, ndata As Integer, i
    On Error Resume Next
    ndata = ActiveSheet.PivotTables(1).DataFields.Count
    buf = buf & chr(39) & ActiveSheet.PivotTables(1).DataFields(1).Name & chr(39)
    If ndata > 1 Then
       buf = buf & ":" & chr(39) & ActiveSheet.PivotTables(1).DataFields(ndata).Name & chr(39)
    End If
    If CInt(ReadKeyValue("OfficeNo")) > 9 Then
       ActiveSheet.PivotTables(1).PivotSelect buf, xlDataOnly, True
    Else
       ActiveSheet.PivotTables(1).PivotSelect buf, xlDataOnly
    End If
    PropAddrDataValues = ActiveCell.address
End Function
Function PropAddrPageValue(page As Integer) As String
    If ActiveSheet.PivotTables(1).PageFields.Count < page Then Exit Function
    Dim buf As String
    buf = ActiveSheet.PivotTables(1).PageFields(page).Name & "[All]"
    ActiveSheet.PivotTables(1).PivotSelect buf, xlLabelOnly
    PropAddrPageValue = ActiveCell.address
End Function
Sub AddDateRightClicks()
    On Error Resume Next
    Run "Ezcommon.xla!AddDateRightClicks"
End Sub
Sub AutoGrandTotal()
    On Error Resume Next
    If ActiveSheet.PivotTables.Count < 1 Then Exit Sub
    '
    Dim i, j, ncols, nr, found As Boolean
    ncols = ActiveSheet.UsedRange.Columns.Count
    Dim nxcol As Integer, paddr As String, colmax As Double
    
    nxcol = ActiveSheet.PivotTables(1).RowFields.Count + 2
    
    Range("A3").Select
    For nr = 1 To 10
       For i = ncols To 2 Step -1
          If Mid(Cells(nr, i).Text, 1, 5) = "Grand" Then
             found = True
             Exit For
          End If
       Next i
       If found Then Exit For
    Next nr
    For j = ncols To i + 1 Step -1
       Columns(j).Select
       Selection.Delete
    Next j
    ActiveSheet.PivotTables(1).GrandTotalName = "Grand" & chr(10) & " Total"
    Columns(i).Select
    With Selection
        .VerticalAlignment = xlBottom
        .WrapText = True
    End With
    Columns(i).EntireColumn.AutoFit
    For j = nxcol To i - 1
       Columns(j).EntireColumn.AutoFit
       If Columns(j).ColumnWidth > colmax Then
         colmax = Columns(j).ColumnWidth
       End If
    Next j
    If colmax < 8 Then  'And Columns(nxcol - 1).ColumnWidth > colmax Then
       colmax = 8   'Columns(nxcol - 1).ColumnWidth
    End If
    loadltrs
    paddr = ltrs(nxcol).value & ":" & ltrs(i - 1).value
    Columns(paddr).Select
    Selection.ColumnWidth = colmax
'    Columns("A:A").Select
'    With Selection
'        .WrapText = True
'    End With
'    Range("A3").Select
'    i = Selection.CurrentRegion.Rows.Count
'    Rows(i).Select
'    With Selection
'        .VerticalAlignment = xlCenter
'    End With
    Range("A3").Select
    i = Selection.CurrentRegion.Rows.Count
    For i = Selection.CurrentRegion.Rows.Count To ActiveSheet.UsedRange.Rows.Count
      Cells(i, 1).value = Replace(Cells(i, 1).Text, chr(10), " ")
    Next i
    FixCountFields
    Range("A3").Select
End Sub
Sub FixCountFields()
    On Error Resume Next
    Dim i, buf
    If ActiveSheet.PivotTables.Count < 1 Then Exit Sub
    For i = 1 To ActiveSheet.PivotTables(1).DataFields.Count
       buf = ActiveSheet.PivotTables(1).DataFields(i).Name
       If InStr(buf, "Count") > 0 And ActiveSheet.PivotTables(1).DataFields(i).numberformat = "@" Then
            ActiveSheet.PivotTables(1).DataFields(i).numberformat = "#,##0"
       End If
    Next i
End Sub
Sub SetEvents()
    Dim myobject As New CEventHandler
    Application.EnableEvents = True
End Sub
Sub StackPivotDataOff()
    On Error Resume Next
     Dim ncols, paddr
    If ActiveSheet.PivotTables(1).DataFields.Count < 2 Then Exit Sub
'    If ActiveSheet.PivotTables(1).datapivotfield.Orientation = xlRowField Then Exit Sub
    '
    Rows(4).Select
    Selection.WrapText = False
    With ActiveSheet.PivotTables(1).DataPivotField
        .Orientation = xlRowField
    End With
    FormatDataColumns
    FormatGrandTotal
 
    ActiveSheet.PivotTables(1).MergeLabels = False
    ActiveSheet.DisplayAutomaticPageBreaks = False
    loadltrs
    ncols = ActiveSheet.PivotTables(1).RowFields.Count + 1
    paddr = ltrs(ncols).value & "5"
    Range("C5").Select
    Range(paddr).Select
    ActiveWindow.FreezePanes = False
    ActiveWindow.FreezePanes = True
    Columns(ncols).ColumnWidth = Columns(ncols).ColumnWidth + 1
    Rows("3:4").Select
    Selection.Rows.AutoFit
    Range("A1").Select
    ActiveWindow.ScrollColumn = 1
End Sub
Sub StackPivotDataOn()
    On Error Resume Next
    If ActiveSheet.PivotTables(1).DataFields.Count < 2 Then Exit Sub
    Dim ncols, nrows, ndata
    Range("A3").Select
    ndata = ActiveSheet.PivotTables(1).DataFields.Count
    nrows = ActiveSheet.PivotTables(1).RowFields.Count
    ncols = Selection.CurrentRegion.Columns.Count
    If (ncols - nrows) * ndata > 24 Then
       MsgBox "Can Not Convert Data Fields for this Many Columns", , "EZ-Pivot"
       Exit Sub
    End If
    Application.ScreenUpdating = False
    ActiveSheet.PivotTables(1).DataPivotField.Orientation = xlColumnField
    FormatDataColumns
    ActiveSheet.PivotTables(1).MergeLabels = True
    Columns(nrows).ColumnWidth = Columns(nrows).ColumnWidth + 1
    Rows("3:4").Select
    Selection.Rows.AutoFit
    Range("B6").Select
    loadltrs
    Dim paddr
    ncols = ActiveSheet.PivotTables(1).RowFields.Count + 1
    paddr = ltrs(ncols).value & "6"
    Range("B6").Select
    Range(paddr).Select
    ActiveWindow.FreezePanes = False
    ActiveWindow.FreezePanes = True
End Sub
Sub XLCPause()
    Run "ezcommon.xla!XCPause"
End Sub
Function IsExcelVer() As Integer
   Dim wdApp As Object
   Dim x
   On Error Resume Next
   Set wdApp = CreateObject("Excel.Application")
   IsExcelVer = wdApp.version
End Function
Sub FormatDataColumns()

End Sub


Sub PivotPageAll1()
    On Error Resume Next
    If ActiveSheet.PivotTables.Count <> 1 Then Exit Sub
    PageValuesAllClear
    RowValuesAllClear
    ColValuesAllClear
    X1PivotPageAll
    FormatGrandTotal
End Sub
Sub X1PivotPageAll()
    Dim index As Integer, maxpages As Integer, sheet As String, psheet As String
    On Error Resume Next
    Exit Sub
    If getINIname("IPivot", True) <> "xxx" Then
      psheet = ActiveSheet.Name
    Else
      psheet = PivotSheet
    End If
    Application.StatusBar = "Setting Data ..."
    If getINIname("IPivot", True) = "xxx" And psheet = "" Then Exit Sub
    Dim pagefield As String
    If Application.ScreenUpdating Then Application.ScreenUpdating = False
    NoActivationDisplay = True
    sheet = ActiveSheet.Name
    sheets(psheet).Select
    Dim maxrows As Integer, rowfield As String, Name As String, i As Integer, j
    If ActiveSheet.PivotTables(1).columnfields.Count > 0 Then SetSingleRowBand
    For j = 1 To 4
      rowfield = ActiveSheet.PivotTables(1).RowFields(j).Name
      maxrows = ActiveSheet.PivotTables(1).PivotFields(rowfield).PivotItems.Count
      For i = 1 To maxrows
         ActiveSheet.PivotTables(1).PivotFields(rowfield).PivotItems(i).visible = True
      Next i
    Next j
    If ActiveSheet.PivotTables(1).PageFields.Count = 1 Then
        pagefield = ActiveSheet.PivotTables(1).PageFields(1).Name
    ElseIf ActiveSheet.PivotTables(1).columnfields.Count > 0 Then
       sheets(sheet).Select
       NoActivationDisplay = False
       SetIconPivot
       SetEmbedChart
       SetSingleRowBand
       Application.StatusBar = False
       Exit Sub
    End If
    If pagefield <> "" Then
       ActiveSheet.PivotTables(1).PivotFields(pagefield).CurrentPage = "All"
       ActiveSheet.PivotTables(1).RefreshTable
    Else
'       ActiveSheet.PivotTables(1).RowFields(1).CurrentPage = "All"
    End If
    ActiveSheet.PivotTables(1).RefreshTable
    sheets(sheet).Select
    SetIconPivot
    SetEmbedChart
    If ActiveSheet.PivotTables(1).columnfields.Count > 0 Then SetSingleRowBand
    Application.StatusBar = False
    NoActivationDisplay = False
End Sub
Sub SetSingleRowBand()
    Dim buf As String, addr As String, row As Integer, ndata As Integer, i, isband As Boolean
    Dim isrowgrand As Integer, iscolgrand As Integer, srow, erow, scol, ecol, nrow
    On Error Resume Next
    addr = ActiveCell.address
    If Application.ScreenUpdating Then Application.ScreenUpdating = False
    nrow = ActiveSheet.PivotTables(1).RowFields.Count
    If ActiveSheet.PivotTables(1).DataFields.Count > 1 Then Exit Sub
 '   If ActiveSheet.PivotTables(1).RowFields.count > 2 Then Exit Sub
    If ActiveSheet.PivotTables(1).columnfields.Count < 1 Then Exit Sub
    ndata = 1
    isrowgrand = ActiveSheet.PivotTables(1).RowGrand
    iscolgrand = ActiveSheet.PivotTables(1).ColumnGrand
    srow = Selection.CurrentRegion.row + 1
    erow = srow + Selection.CurrentRegion.Rows.Count - 2 + iscolgrand
    If erow < srow + 3 - iscolgrand Then Exit Sub
    buf = ""
    buf = chr(39) & ActiveSheet.PivotTables(1).DataFields(1).Name & chr(39)
    If CInt(ReadKeyValue("OfficeNo")) > 9 Then
        ActiveSheet.PivotTables("PivotTable1").PivotSelect buf, xlDataOnly, True
    Else
        ActiveSheet.PivotTables("PivotTable1").PivotSelect buf, xlDataOnly
    End If
    Dim colori As Integer, ws As Worksheet
    Set ws = sheets("Stylesheet")
    colori = ws.Cells(37, 1).Interior.colorindex
    If colori = 2 Or colori = xlNone Then colori = 7

    scol = Selection.column
    ecol = scol + Selection.CurrentRegion.Columns.Count - 2 + isrowgrand
    isband = True
    For i = srow + 1 To erow
       Range(Cells(i, scol), Cells(i, ecol)).Select
       If Not isband And Cells(i, nrow).Text <> Cells(i - 1, nrow).Text Then
         Selection.Interior.colorindex = xlNone
         isband = True
       Else
         Selection.Interior.colorindex = colori
         isband = False
       End If
    Next i
    Range(addr).Select
End Sub
Sub SetEmbedChart()
    On Error Resume Next
 '   Exit Sub
    Dim ischart As Boolean, sheet, sheet1
    If ActiveSheet.ChartObjects.Count < 1 Then
       sheets(sheet).Select
       Exit Sub
    End If
    ischart = isPivotchart(ActiveSheet.Name)
    sheet = ActiveSheet.Name
    If Application.ScreenUpdating Then Application.ScreenUpdating = False
    If ischart Then
       sheet1 = FindPivotTable
       If sheet1 = "" Then
         Exit Sub
       End If
       sheets(sheet1).Select
    End If
    Dim addr As String, rng As Range, top As Double, left As Double
    Range("A3").Select
    addr = "A" & Selection.CurrentRegion.Rows.Count + 4
    Range(addr).Select
    ActiveChart.Deselect
    Set rng = ActiveSheet.Range(addr)
    top = rng.top
    left = rng.left
    ActiveSheet.ChartObjects(1).Activate
    ActiveSheet.ChartObjects(1).top = top
    ActiveSheet.ChartObjects(1).left = left
    Windows(ActiveWorkbook.Name).ScrollRow = 1
    Range("A4").Select
    sheets(sheet).Select
    PageSetupChart
    ActiveChart.Deselect
    sheets(sheet).Select
    Range("A4").Select
End Sub
Function isPivotchart(chart As String) As Boolean
    Dim colstr As String, test As String, i As Integer, n As Integer
    Dim Name As String, sheet As String
    If Not isSheetChart(ActiveSheet.Name) Then Exit Function
    colstr = charts(chart).SeriesCollection(1).formula
    colstr = Replace(colstr, "'", "")
    n = ActiveWorkbook.sheets.Count
    On Error Resume Next
    For i = 1 To n
         Name = ActiveWorkbook.sheets(i).Name
         If GetSheetVar(sheets(i).Name, "IPivot") = "1" Then
            test = Name & "!"
            If InStr(colstr, test) Then
              isPivotchart = True
              Exit Function
            End If
         End If
    Next i
End Function
Function FindPivotTable() As String
       Dim colstr As String, colst1 As String, k As Integer
       On Error Resume Next
       colstr = Replace(ActiveChart.SeriesCollection(1).formula, "'", "")
       k = InStr(colstr, "!")
       If k > 0 Then
          colst1 = Replace(Mid(colstr, 1, k), "=SERIES(", "")
       End If
       colst1 = Replace(colst1, "!", "")
       If Not isSheet1(colst1) Then Exit Function
       FindPivotTable = colst1
End Function
Public Sub PageSetupChart()
       Dim region() As String, i As Integer, ws As Worksheet, wc As chart
       Dim sheet As String, x
       On Error Resume Next
       x = ActiveChart.Name
       x = ActiveSheet.ChartObjects.Count
       If x <> 1 And Not isSheetChart(ActiveSheet.Name) Then Exit Sub
       ActiveSheet.ChartObjects(1).Activate
       ActiveChart.Select
       Set wc = ActiveChart
       sheet = FindDataSheet(ActiveSheet.Name)
       If sheet = "" Then sheet = ActiveSheet.Name
       If sheet = "Stylesheet" Then Exit Sub
       
       Set ws = sheets("Stylesheet")
       If Application.ScreenUpdating Then Application.ScreenUpdating = False
       Dim officeno As String, PictureFile As String, PictureRegion As String
       Dim PictureEnable As String, PictureAbove As String
       Call fReadValue(HKLM, "Software\DPPI\EZPivot", "OfficeNo", "S", "9", officeno)
       Call fReadValue(HKLM, "Software\DPPI\EZPivot", "PictureFile", "S", " ", PictureFile)
       Call fReadValue(HKLM, "Software\DPPI\EZPivot", "PictureRegion", "S", " ", PictureRegion)
       Call fReadValue(HKLM, "Software\DPPI\EZPivot", "PictureEnable", "S", " ", PictureEnable)
       Call fReadValue(HKLM, "Software\DPPI\EZPivot", "PictureAbove", "S", " ", PictureAbove)
       For i = 0 To 5
          ReDim Preserve region(i)
       Next i
       With ws.PageSetup
         region(0) = .LeftHeader
         region(1) = .CenterHeader
         region(2) = .RightHeader
         region(3) = .LeftFooter
         region(4) = .CenterFooter
         region(5) = .RightFooter
       End With
       Dim var() As String, j As Integer
       Dim macros() As String
       ReDim Preserve macros(0)
       ReDim Preserve macros(1)
       ReDim Preserve macros(2)
       ReDim Preserve macros(3)
       macros(0) = "*TITLE"
       macros(1) = "*SUBTITLE"
       macros(2) = "*COMPANY"
       macros(3) = "*USER"
       ReDim Preserve var(0)
       ReDim Preserve var(1)
       ReDim Preserve var(2)
       ReDim Preserve var(3)
       var(0) = getINIname("Title", True)
       var(1) = getINIname("Subtitle", True)
       If var(1) = "xxx" Then var(1) = ""
       var(2) = ReadKeyValue("CompanyName")
       var(3) = ReadKeyValue("UserName")
       For j = 0 To 3
           For i = 0 To 5
              If var(j) = "xxx" Then var(j) = ""
              region(i) = Replace(region(i), macros(j), var(j), 1, 254)
           Next i
       Next j
       Dim PictureThere As Boolean, graphcode As String
       On Error Resume Next
       SetMarginCharts
       If Mid(PictureFile, 1, 1) <> " " Then
          PictureThere = exist(PictureFile)
       End If
       If PictureEnable Then
         graphcode = "&9&G"
       Else
         graphcode = ""
       End If
       On Error Resume Next
       If PictureRegion = "" Then PictureRegion = "0"
       
       If Int(officeno) > 9 And PictureEnable Then
         With ActiveChart.PageSetup
          .LeftHeaderPicture.Filename = ""
          .RightHeaderPicture.Filename = ""
          .CenterHeaderPicture.Filename = ""
          .LeftFooterPicture.Filename = ""
          .RightFooterPicture.Filename = ""
          .CenterFooterPicture.Filename = ""
         End With
         Select Case CInt(PictureRegion)
           Case 0:
           If PictureThere Then
              ActiveChart.PageSetup.LeftHeaderPicture.Filename = PictureFile
              If PictureEnable Then
              region(5) = region(0)
              region(0) = graphcode
              End If
           End If
           Case 1:
           If PictureThere Then ActiveChart.PageSetup.CenterHeaderPicture.Filename = PictureFile
             If PictureEnable Then
               region(5) = region(1)
               region(1) = graphcode
             End If
           Case 2:
           If PictureThere Then ActiveChart.PageSetup.RightHeaderPicture.Filename = PictureFile
             If PictureEnable Then
               region(5) = region(2)
               region(2) = graphcode
               End If
           Case 3:
           If PictureThere Then ActiveChart.PageSetup.LeftFooterPicture.Filename = PictureFile
             If PictureEnable Then
               region(5) = region(3)
               region(3) = graphcode
             End If
           Case 4
           If PictureThere Then ActiveChart.PageSetup.CenterFooterPicture.Filename = PictureFile
           If PictureEnable Then
             region(5) = region(4)
             region(4) = graphcode
           End If
           Case 5:
           If PictureThere Then
               region(5) = graphcode
               ActiveChart.PageSetup.RightFooterPicture.Filename = PictureFile
           End If
         End Select
       End If
       Dim fitpage As Integer
       With ActiveChart.PageSetup
         .LeftHeader = region(0)
         .CenterHeader = region(1)
         .RightHeader = region(2)
         .LeftFooter = region(3)
         .CenterFooter = region(4)
         .RightFooter = region(5)
         .CenterHorizontally = True
         .ChartSize = xlFitToPage
       End With
       ActiveChart.Deselect
End Sub
Sub CreatePopUpMenuNoPivot()
    On Error Resume Next
    Dim ispivot As String, ischecked As Integer, ischecked1 As Integer
    Dim notdemo As String, isAuto As String
    isAuto = "0"
    If ArePivotValues Then isAuto = "1"
    notdemo = "1"
    If DemoMode Then notdemo = "0"
    ispivot = "0"
    If ReadKeyValue("UseExcelLayout") <> "0" Then
       ischecked = 1
    End If
    If ReadKeyValue("SetPageSetup") <> "0" Then
       ischecked1 = 1
    End If
    
    If isPivotTables Then ispivot = "1"
    Application.CommandBars("EZPivot").Delete
    Application.CommandBars.Add Name:="EZPivot", Position:=msoBarPopup
    Call CreatePopupBar1(Application.CommandBars("EZPivot"), "Create PivotTable - Automatic", 0, 1, _
        "UseExcelLayoutNot", isAuto, 0)
    Call CreatePopupBar1(Application.CommandBars("EZPivot"), "Create PivotTable - Use Layout", 0, 2, _
        "UseExcelLayout", 1, 0)
    Call CreatePopupBar1(Application.CommandBars("EZPivot"), "Refresh All EZ PivotTables", 0, 3, _
        "RefreshEZPivotTables", ispivot, 1)
    Call CreatePopupBar1(Application.CommandBars("EZPivot"), "Delete All EZ PivotTables", 1088, 4, _
        "DeleteEZPivotTables", ispivot, 0)
    
    Call CreatePopupBar1(Application.CommandBars("EZPivot"), "Ask Titles / Print Setup on Create", 0, 5, _
        "SetPageSetup1", notdemo, 0, ischecked1)
    Dim i As Integer, desc As String, sheet, np As Integer
    Dim npivot As Integer, buf, grp As Integer
    sheet = ActiveSheet.Name
    npivot = 6
    grp = 1
    np = 1
    For i = 1 To Worksheets.Count
       If Worksheets(i).Name <> sheet Then
          buf = FStrip(GetSheetVar(Worksheets(i).Name, "PivotSource"))
          If Worksheets(i).PivotTables.Count > 0 Then
            If FStrip(GetSheetVar(Worksheets(i).Name, "PivotSource")) = sheet Then
              desc = "Go To PivotTable " & np & ": " & Worksheets(i).Name
              np = np + 1
              Call CreatePopupBar1(Application.CommandBars("EZPivot"), desc, 0, npivot, _
              "SetPivotTables", ispivot, grp)
              npivot = npivot + 1
              grp = 0
            End If
          End If
       End If
    Next i
    desc = "Page 1: " & GetPivotPage
    Call CreatePopupBar1(Application.CommandBars("EZPivot"), desc, 0, npivot, _
              "SetPivotPage1", 0, 1)
    npivot = npivot + 1
    desc = "Row    : " & GetPivotRow
    Call CreatePopupBar1(Application.CommandBars("EZPivot"), desc, 0, npivot, _
              "SetPivotRow1", 0, 0)
    npivot = npivot + 1
    desc = "Colm 1: " & GetPivotColumn
    Call CreatePopupBar1(Application.CommandBars("EZPivot"), desc, 0, npivot, _
              "SetPivotRow1", 0, 0)
    npivot = npivot + 1
    desc = " Data  : " & GetPivotData
    Call CreatePopupBar1(Application.CommandBars("EZPivot"), desc, 0, npivot, _
              "SetPivotData1", 0, 0)
    npivot = npivot + 1
End Sub
Sub CreatePopUpMenuIsPivot()
    On Error Resume Next
    Dim isdrill As Integer
    If ReadKeyValue("Drillformat1") = "" Then
       isdrill = 1
    Else
       isdrill = CInt(ReadKeyValue("DrillFormat1"))
    End If
    Application.CommandBars("EZPivot").Delete
    Application.CommandBars.Add Name:="EZPivot", Position:=msoBarPopup
    Call CreatePopupBar1(Application.CommandBars("EZPivot"), "Convert to EZ-Pivot", 0, 1, _
        "ConvertToEZPivot", 1, 0)
    Call CreatePopupBar1(Application.CommandBars("EZPivot"), "AutoFormat Drill Worksheets", 0, 2, _
        "SetDrillOptions1", 1, 0, isdrill)
    Call CreatePopupBar1(Application.CommandBars("EZPivot"), "Drill Worksheet Sort", 928, 3, _
        "EditPivotSort", 1, 1)
End Sub
Sub SetDrillOptions()
    Dim svalue As String
    If CommandBars.ActionControl.state = msoButtonUp Then
        CommandBars.ActionControl.state = msoButtonDown
        svalue = "1"
    Else
        CommandBars.ActionControl.state = msoButtonUp
        svalue = "0"
    End If
    Call WriteKeyValue("DrillFormat", svalue)
End Sub
Public Sub SetDrillOptions1()
    Dim svalue As String
    If CommandBars.ActionControl.state = msoButtonUp Then
        CommandBars.ActionControl.state = msoButtonDown
        svalue = "1"
    Else
        CommandBars.ActionControl.state = msoButtonUp
        svalue = "0"
    End If
    Call WriteKeyValue("DrillFormat1", svalue)
End Sub
Function isShortName() As Integer
    On Error Resume Next
    If InStr(ActiveSheet.PivotTables(1).DataFields(1).Caption, " of ") = 0 Then
        isShortName = 1
    End If
End Function
Function isFilterAll1() As Boolean
    Dim sheet As String
    If Not isSheet1("FormattedData") Then Exit Function
    Dim ncol, i
    Set w = Worksheets("FormattedData")
    If Not w.AutoFilterMode Then Exit Function
    ncol = FilterCol
    isFilterAll1 = True
    For i = 1 To ncol
       If w.AutoFilter.Filters(i).On Then
         sheets(sheet).Select
         Exit Function
       End If
    Next i
    isFilterAll1 = False
End Function
Sub XPivotFormat2()
    On Error Resume Next
    If CInt(ReadKeyValue("OfficeNo")) > 9 Then
       If ActiveSheet.PivotTables(1).DataPivotField.Orientation = xlColumnField _
       And ActiveSheet.PivotTables(1).DataFields.Count > 1 Then
         Exit Sub
       End If
    End If
    NoSetup = True
    Application.EnableEvents = False
    RegionUpdate = True
    XPivotFormatz
    WritePivotValues
    FormatColumnFilter
    If isShortName Then
       Call WriteKeyValue("IsShortName", "1")
    Else
       Call WriteKeyValue("IsShortName", "0")
    End If
    RegionUpdate = False
    Application.EnableEvents = True
    NoSetup = False
End Sub
Function ArePivotValues() As Boolean
    On Error Resume Next
    Dim sheet As String, sheet1 As String, i As Integer, j As Integer, ndata
    Dim buf, desc As String, ws As Worksheet, page() As String, row() As String
    Dim col() As Variant, data() As Variant, formt() As String
    Dim ispage As Boolean, iscolumn As Boolean, isrow As Boolean, isdata As Boolean
    If ActiveSheet.PivotTables.Count <> 0 Then Exit Function
    sheet = ActiveSheet.Name
    Set ws = sheets(sheet)
    sheet1 = ActiveSheet.Name
    j = CInt(GetSheetVar(sheet, "X_PageNo1"))
    ReDim Preserve page(0)
    If j > 0 Then
       page(0) = ws.Cells(1, j).Text
       ispage = True
    End If
    j = 0
    ReDim Preserve col(0)
    j = CInt(GetSheetVar(sheet, "X_ColNo1"))
    If j > 0 Then
       iscolumn = True
       col(0) = ws.Cells(1, j).Text
    End If
    j = 0
    Dim nrow As Integer
    For i = 1 To 6
      j = 0
      j = CInt(GetSheetVar(sheet, "X_RowNo" & i))
      If j > 0 Then
         ReDim Preserve row(i - 1)
         row(i - 1) = ws.Cells(1, j).Text
         isrow = True
         nrow = i
      Else
         Exit For
      End If
    Next i
    For i = 1 To 6
      j = 0
      j = CInt(GetSheetVar(sheet, "X_DataNo" & i))
      If j > 0 Then
         isdata = True
        ReDim Preserve data(i)
        ReDim Preserve formt(i)
        data(i) = ws.Cells(1, j).Text
        If Not IsNumeric(ws.Cells(2, j).value) Then
           formt(i) = "#,##0"
        End If
        ndata = i
      Else
        Exit For
      End If
    Next i
    
    If page(0) <> "" And col(0) <> "" And row(0) <> "" Then
       ActiveSheet.PivotTables(1).AddFields RowFields:=row, columnfields:=col(0), _
          PageFields:=page(0)
    ElseIf row(0) <> "" And col(0) <> "" Then
       ActiveSheet.PivotTables(1).AddFields columnfields:=col(0), RowFields:=row
    ElseIf page(0) <> "" And col(0) <> "" Then
       ActiveSheet.PivotTables(1).AddFields columnfields:=col(0), PageFields:=page(0)
    Else
       ActiveSheet.PivotTables(1).AddFields columnfields:=col(0), RowFields:=row
    End If
    For i = 1 To nrow
       With ActiveSheet.PivotTables(1).PivotFields(row(i - 1))
        .Orientation = xlRowField
        .Position = i
    End With
    Next i
    For i = 1 To ndata
       ActiveSheet.PivotTables(1).PivotFields(data(i)).Orientation = xlDataField
       ActiveSheet.PivotTables(1).PivotFields(data(i)).Position = i
       If formt(i) <> "" Then
         ActiveSheet.PivotTables(1).PivotFields(data(i)).numberformat = formt(i)
       End If
    Next i
    If Not isdata Then Exit Function
    If Not isrow And Not iscolumn Then Exit Function
    ArePivotValues = True
End Function
Function isPivotTables() As Boolean
    On Error Resume Next
    Dim i, Name
    For i = 1 To Worksheets.Count
       If GetSheetVar(Worksheets(i).Name, "IPivot") <> "" Then
         isPivotTables = True
         Exit Function
       End If
    Next i
End Function
Function GetPivotPage() As String
    On Error Resume Next
    Dim buf As String, i As Integer
    buf = "X_PageNo1"
    i = CInt(getINIname(buf, True))
    If i > 0 Then GetPivotPage = Cells(1, i).Text
End Function
Function GetPivotRow() As String
    On Error Resume Next
    Dim buf As String, i As Integer, j
    For j = 1 To 6
      buf = "X_RowNo" & j
      i = 0
      i = CInt(getINIname(buf, True))
      If i > 0 Then
        GetPivotRow = GetPivotRow & Trim(Cells(1, i).Text) & ", "
      Else
        Exit For
      End If
    Next j
    GetPivotRow = Mid(GetPivotRow, 1, Len(GetPivotRow) - 2)
End Function
Function GetPivotColumn() As String
    On Error Resume Next
    Dim buf As String, i As Integer
    buf = "X_ColNo1"
    i = CInt(getINIname(buf, True))
    If i > 0 Then GetPivotColumn = Cells(1, i).Text
End Function
Function GetPivotData() As String
    On Error Resume Next
    Dim buf As String, i As Integer, j
    For j = 1 To 6
      buf = "X_DataNo" & j
      i = 0
      i = CInt(getINIname(buf, True))
      If i > 0 Then
        GetPivotData = GetPivotData & Trim(Cells(1, i).Text) & ", "
      Else
        Exit For
      End If
    Next j
    GetPivotData = Mid(GetPivotData, 1, Len(GetPivotData) - 2)
End Function
Function FilterCol() As Integer
    Dim printcols As String, mapline As String
    If Not isSheet1("FormattedData") Then Exit Function
    Dim sheet As String
    sheet = ActiveSheet.Name
    On Error Resume Next
    printcols = getINIname("PrintCols")
    If printcols = "xxx" Then
       mapline = rd_ini("OutputLine")
       If mapline <> "" Then
            FilterCol = countcommas(mapline)
       Else
           sheets("FormattedData").Select
           FilterCol = ActiveSheet.UsedRange.Columns.Count - 1
       End If
       sheets(sheet).Select
       ActiveWorkbook.names.Add "PrintCols", FilterCol
       Exit Function
    End If
    FilterCol = CInt(printcols)
    If FilterCol > 0 Then Exit Function
    FilterCol = Len(getINIname("HideStr", True))
    
    sheets(sheet).Select
End Function
Sub XPivotFormatz()
    Dim columnlabel As String, ncolumns As Integer, i, columnfields As String
    Dim ncols, nrows, addr As String, paddr As String, sheet As String, scrcol, scrrow
    If getINIname("IPivot", True) = "xxx" Then Exit Sub
    On Error Resume Next
    addr = ActiveCell.address
    If addr = "" Then addr = "A1"
    Range("A1").Select
    sheet = ActiveSheet.Name
    scrrow = ActiveCell.row - 22
    scrcol = ActiveCell.column - 6
    On Error Resume Next
    If ActiveWindow.FreezePanes = False Then
       ActiveSheet.names.Add "NewFreeze", "0"
    End If
    ActiveWindow.DisplayGridlines = False
    If Application.ScreenUpdating Then Application.ScreenUpdating = False
    ncolumns = ActiveSheet.PivotTables(1).columnfields.Count
    columnfields = chr(39)
    ncols = ActiveSheet.UsedRange.Columns.Count
    nrows = ActiveSheet.UsedRange.Rows.Count
    Dim maxwid As Double, wid As Double, ncolstart, wid1 As Double
    wid1 = Columns(1).ColumnWidth
    ncolstart = 2 + ActiveSheet.PivotTables(1).RowFields.Count
    If Application.ScreenUpdating Then Application.ScreenUpdating = False
    Columns(ncolstart - 1).Select
    Dim x() As Variant
    Dim Name As String
    For i = 1 To ActiveSheet.PivotTables(1).RowFields.Count - 1
          Name = ActiveSheet.PivotTables(1).RowFields(i).Name
          ReDim Preserve x(i)
          x(i) = ActiveSheet.PivotTables(1).PivotFields(Name).Subtotals
          ActiveSheet.PivotTables(1).PivotFields(Name).Subtotals = Array( _
          False, False, False, False, False, False, False, False, False, _
          False, False, False)
    Next i
    Dim buf As String
    Range("A2").Select
   
    ActiveWorkbook.ShowPivotTableFieldList = False
    ActiveSheet.PivotTables(1).HasAutoFormat = False
    Application.CommandBars("PivotTable").visible = False
    Dim nstart As Integer
    nstart = ActiveSheet.PivotTables(1).RowFields.Count
    Dim iscolgrand As Boolean
    iscolgrand = ActiveSheet.PivotTables(1).ColumnGrand
    If iscolgrand Then
       ActiveSheet.PivotTables(1).ColumnGrand = False
       ActiveWorkbook.ShowPivotTableFieldList = False
       Application.CommandBars("PivotTable").visible = False
       If Application.ScreenUpdating Then Application.ScreenUpdating = False
    End If
    For i = 2 To ncolstart - 1
       Columns(i).Select
       Selection.Columns.AutoFit
    Next i
    Range("A3").Select
    buf = Quote(Cells(4, 1).Text) & "[All]"
    ActiveSheet.PivotTables(1).PivotSelect buf, xlLabelOnly
    Columns(1).Select
    Selection.Columns.AutoFit
    Range("A2").Select
    If iscolgrand Then
      ActiveSheet.PivotTables(1).ColumnGrand = iscolgrand
      ActiveWorkbook.ShowPivotTableFieldList = False
      Application.CommandBars("PivotTable").visible = False
    End If
    For i = 1 To ActiveSheet.PivotTables(1).RowFields.Count - 1
       Name = ActiveSheet.PivotTables(1).RowFields(i).Name
       ActiveSheet.PivotTables(1).PivotFields(Name).Subtotals = x(i)
    Next i
    ActiveWorkbook.ShowPivotTableFieldList = False
    Application.CommandBars("PivotTable").visible = False
    
    Dim k, numberformat As String, wp As Worksheet, name1 As String
    Dim ptdata1 As String
    ptdata1 = ActiveSheet.Name & "_P"
    If getINIname() = "Pivot.ini" Then
       Set wp = sheets(ptdata1)
    Else
       Set wp = sheets("Stylesheet")
    End If
    For i = 1 To ActiveSheet.PivotTables(1).DataFields.Count
       Name = ActiveSheet.PivotTables(1).DataFields(i).Name
       numberformat = ActiveSheet.PivotTables("PivotTable1").PivotFields(Name).numberformat
       numberformat = Replace(numberformat, ".00", "")
       If numberformat = "General" Then
         numberformat = "$#,##0"
         ActiveSheet.PivotTables("PivotTable1").PivotFields(Name).numberformat = numberformat
       End If
       If numberformat = "General" Or numberformat = "@" Then
         k = InStr(Name, " of")
         If k Then
            name1 = Mid(Name, k + 4)
            k = PivotFindValue(name1)
            If k Then
               numberformat = Replace(wp.Cells(2, k).numberformat, ".00", "")
               ActiveSheet.PivotTables(1).PivotFields(Name).numberformat = numberformat
            End If
         End If
       End If
    Next i
    NRowFormat = 3
    Cells(3, ncolstart - 1).Select
    Application.StatusBar = "Applying Format Columns ..."
    XLCFormatColumn
    Application.StatusBar = False
    For i = ncolstart To ncols
       Columns(i).Select
       Selection.Columns.AutoFit
    Next i
    Range("A3").Select
    Dim colbuf As String, colno As Integer, opt As String
    colbuf = ActiveSheet.PivotTables(1).columnfields(1).Name
    colno = MapColumnStyle(colbuf)
    If colno = 0 Then
      colno = PivotFindValue(colbuf)
    End If

    If colno > 0 Then
       opt = "Column " & colno
       If rd_ini("PCDesc", opt) <> "" Then
           ActiveSheet.PivotTables(1).columnfields(1).Name = Replace(rd_ini("PCDesc", opt), "~", chr(10))
       Else
           ActiveSheet.PivotTables(1).columnfields(1).Name = Replace(rd_ini("RDesc", opt), "~", chr(10))
       End If
       
    End If
    ActiveSheet.names.Add "PivotColNo1", colno
    XPivotFormatRestore
    Application.ScreenUpdating = False
    For i = nstart To ncolstart - 1
       Columns(i).Select
       Selection.Columns.AutoFit
    Next i
    Rows("3:3").Select
    Selection.Rows.AutoFit
    For i = ncolstart To ncols
       Columns(i).Select
       Selection.Columns.AutoFit
       wid = Selection.ColumnWidth
       If wid > maxwid Then maxwid = wid
    Next i
    XPivotAuto = False
    Rows("3:4").Select
    Selection.Rows.AutoFit
    For i = ncolstart To ncols
       Columns(i).Select
       Selection.ColumnWidth = maxwid
    Next i

    If CInt(getINIname("NewFreeze", True)) <> ActiveSheet.PivotTables(1).RowFields.Count Then
       ActiveWindow.FreezePanes = False
       ActiveWindow.ScrollColumn = 1
       ActiveWindow.ScrollRow = 1
       Range(Cells(5, ncolstart - 1), Cells(5, ncolstart - 1)).Select
       ActiveWindow.FreezePanes = False
       ActiveWindow.FreezePanes = True
    End If
    loadltrs
    
    buf = "$A:$" & ltrs(ActiveSheet.PivotTables(1).RowFields.Count).value
    ActiveSheet.names.Add "Newfreeze", ActiveSheet.PivotTables(1).RowFields.Count
    With ActiveSheet.PageSetup
        .PrintTitleRows = "$3:$4"
'        .PrintTitleColumns = buf
    End With
    ActiveWorkbook.ShowPivotTableFieldList = False
    Application.CommandBars("PivotTable").visible = False
    Columns("A:A").Select
    Selection.HorizontalAlignment = xlLeft
    Selection.WrapText = False
'    If Not NoSetUp Then XPivotApplyFormat
    Application.CommandBars("PivotTable").visible = False
    Columns("A:A").Select
    Selection.HorizontalAlignment = xlLeft
    Selection.WrapText = False
    
    If getINIname("PivotNoColor", True) = "xxx" Then
       If ReadKeyValue("PivotNoColor") = "" Then
          ActiveSheet.names.Add "PivotNoColor", "0"
       Else
          ActiveSheet.names.Add "PivotNoColor", ReadKeyValue("PivotNoColor")
       End If
    End If
    If getINIname("PivotNoColor", True) = "1" Then
       If ActiveSheet.PivotTables(1).PageFields.Count > 0 Then
         Range("A3").Select
         Cells(2, 1).value = " "
       Else
         Range("A3").Select
       End If
       Selection.CurrentRegion.Select
       Selection.Interior.colorindex = xlNone
       Selection.font.colorindex = xlAutomatic
       Range(Cells(4, 1), Cells(4, Selection.Columns.Count)).Select
       With Selection.Interior
           .colorindex = 7
           .pattern = xlSolid
       End With
       With Selection.font
           .colorindex = xlAutomatic
       End With
    End If
    FormatGrandTotal
    Range(addr).Select
    SetIconPivot
End Sub
Sub WritePivotValues()
    On Error Resume Next
    Dim i, ndata As Integer, sheet As String, j, ws As Worksheet, k As Integer
    Dim nrow As Integer, n, wp As PivotTable
    If Application.ScreenUpdating Then Application.ScreenUpdating = False
    If ActiveSheet.PivotTables.Count <> 1 Then Exit Sub
    sheet = FStrip(getINIname("PivotSource", True))
    If Not isSheet1(sheet) Then Exit Sub
    Set wp = ActiveSheet.PivotTables(1)
    Set ws = Worksheets(sheet)
    ndata = ActiveSheet.PivotTables(1).DataFields.Count
    nrow = ActiveSheet.PivotTables(1).RowFields.Count
    For i = 1 To 6
      j = 0
      j = CInt(GetSheetVar(sheet, "X_DataNo" & ndata - i + 1))
      If i <= ndata Then
         n = GetPivotField(wp.DataFields(i).Name, sheet)
         k = 0
         k = wp.DataFields(i).Position
         ws.names.Add "X_DataNo" & k, n
      ElseIf j > 0 Then
         ws.names("X_DataNo" & ndata - i + 1).Delete
      End If
    Next i
    For i = ndata + 1 To 6
       ws.names("X_DataNo" & i).Delete
    Next i
    Dim desc As String
    If ndata > 1 And nrow > 1 Then nrow = nrow - 1
    For i = 1 To 6
      j = 0
      j = CInt(GetSheetVar(sheet, "X_RowNo" & i))
      If i <= nrow Then
         n = GetPivotField(wp.RowFields(i).Name, sheet)
         k = 0
         k = wp.RowFields(i).Position
         ws.names.Add "X_RowNo" & k, n
      Else
         ws.names("X_RowNo" & i).Delete
      End If
    Next i
    j = 0
    j = CInt(GetSheetVar(sheet, "X_PageNo1"))
    If j >= 0 And wp.PageFields.Count > 0 Then
         n = GetPivotField(wp.PageFields(1).Name, sheet)
         ws.names.Add "X_PageNo1", n
    Else
         ws.names("X_PageNo1").Delete
    End If
    j = 0
    j = CInt(GetSheetVar(sheet, "X_ColNo1"))
    If j >= 0 And wp.columnfields.Count > 0 Then
         n = GetPivotField(wp.columnfields(1).Name, sheet)
         ws.names.Add "X_ColNo1", n
    Else
         ws.names("X_ColNo1").Delete
    End If
End Sub
Function countcommas(mapline As String) As Integer
    Dim i As Integer, ln As Integer, off As Integer, j As Integer
    ln = Len(mapline)
    off = 1
    For i = 1 To 254
       j = InStr(mapline, ",")
       If InStr(Mid(mapline, off, 254), ",") < 1 Then Exit For
       off = off + InStr(Mid(mapline, off, 254), ",")
    Next i
    countcommas = i
End Function
Function PivotFindValue(fldname As String) As Integer
    Dim i As Integer, ncols As Integer, Name As String
    Name = Replace(fldname, chr(10), " ")
    Dim ptdata1 As String
    ptdata1 = ActiveSheet.Name & "_P"
    On Error Resume Next
    ncols = sheets(ptdata1).UsedRange.Columns.Count
    
    For i = 1 To ncols
        If Name = sheets(ptdata1).Cells(1, i).value Then
           PivotFindValue = i
           Exit Function
        End If
    Next i
End Function
Function PivotVars() As Integer
    If ActiveSheet.PivotTables.Count <> 1 Then Exit Function
    If Application.ScreenUpdating Then Application.ScreenUpdating = False
    PivotVars = 1
    Dim fldno As Integer, pagefield As String
    On Error Resume Next
     pagefield = ""
     pagefield = ActiveSheet.PivotTables(1).PageFields(1).Name
     fldno = PivotFindValue(pagefield)
     If fldno > 0 Then
         ActiveSheet.names.Add "FieldPage1", fldno
     End If
     pagefield = ""
     pagefield = ActiveSheet.PivotTables(1).RowFields(1).Name
     fldno = PivotFindValue(pagefield)
     If fldno > 0 Then
         ActiveSheet.names.Add "FieldRow1", fldno
     End If
     pagefield = ""
     If ActiveSheet.PivotTables(1).columnfields.Count > 0 Then
        pagefield = ActiveSheet.PivotTables(1).columnfields(1).Name
     End If
     fldno = PivotFindValue(pagefield)
     If fldno > 0 Then
         ActiveSheet.names.Add "FieldColumn1", fldno
     End If
     Dim k As Integer, opt As String
     If getINIname("Currency", True) = "xxx" Then
       pagefield = ActiveSheet.PivotTables(1).DataFields(1).Name
       k = InStr(pagefield, " of ")
       If k > 0 Then
          pagefield = Mid(pagefield, k + 4, 254)
       End If
       fldno = PivotFindValue(pagefield)
       If fldno > 0 Then
          opt = "Column " & fldno
          ActiveSheet.names.Add "Currency", rd_ini("Dollar", opt)
          ActiveSheet.names.Add "WholeDol", "1"
       End If
     End If
     Dim i As Integer, pvar As String, preg As String, pval As String
     For i = 1 To 7
        pvar = "Pvfont" & i
        preg = "Pivotfont" & i
        If getINIname(pvar, True) = "xxx" Then
           If getINIname(pvar, True) = "xxx" Then
           Call fReadValue(HKLM, "Software\DPPI\EZPivot", preg, "S", "", pval)
           ActiveSheet.names.Add pvar, pval
        End If

        End If
        pvar = "Pvcolr" & i
        preg = "Pivotcolor" & i
        If getINIname(pvar, True) = "xxx" Then
           Call fReadValue(HKLM, "Software\DPPI\EZPivot", preg, "S", "", pval)
           ActiveSheet.names.Add pvar, pval
        End If
     Next i
     If getINIname("rebuild", True) = "xxx" Then
        ActiveSheet.names.Add "Rebuild", "0"
     End If
     If getINIname("rowtotals", True) = "xxx" Then
        ActiveSheet.names.Add "RowTotals", "1"
     End If
     If getINIname("coltotals", True) = "xxx" Then
        PivotVars = 3
        ActiveSheet.names.Add "ColTotals", "1"
        ActiveSheet.PageSetup.Orientation = xlLandscape
        PageSetupSheet
        Call Format_Sheets(ActiveSheet.Name, 1)
        ActiveWindow.DisplayGridlines = False
     End If
End Function
Sub Format_Sheets(sheetname As String, ischart As Integer)
    Application.ScreenUpdating = False
    Dim sheet As String
    Dim LeftHeader As String, CenterHeader As String, RightHeader As String
    Dim LeftFooter As String, CenterFooter As String, RightFooter As String
    Dim topmargin As Variant, HeaderMargin As Variant, BottomMargin As Variant
    Dim FooterMargin As Variant, RightMargin As Variant, LeftMargin As Variant
    
    If ActiveSheet.Name = "FormattedData" Or Mid(ActiveSheet.Name, 1) = "." Then Exit Sub
    
    sheets("FormattedData").Select
    topmargin = ActiveSheet.PageSetup.topmargin
    HeaderMargin = ActiveSheet.PageSetup.HeaderMargin
    BottomMargin = ActiveSheet.PageSetup.BottomMargin
    FooterMargin = ActiveSheet.PageSetup.FooterMargin
    LeftHeader = ActiveSheet.PageSetup.LeftHeader
    RightHeader = ActiveSheet.PageSetup.RightHeader
    CenterHeader = ActiveSheet.PageSetup.CenterHeader
    LeftFooter = ActiveSheet.PageSetup.LeftFooter
    CenterFooter = ActiveSheet.PageSetup.CenterFooter
    RightFooter = ActiveSheet.PageSetup.RightFooter
    LeftMargin = ActiveSheet.PageSetup.LeftMargin
    RightMargin = ActiveSheet.PageSetup.RightMargin
    If Application.ScreenUpdating Then Application.ScreenUpdating = False
    sheets(sheetname).Select
 '   MsgBox "stop"
    If ischart Then
      With ActiveChart
       .PageSetup.HeaderMargin = HeaderMargin
       .PageSetup.FooterMargin = FooterMargin
       .PageSetup.BottomMargin = BottomMargin
       .PageSetup.topmargin = topmargin
       .PageSetup.LeftHeader = LeftHeader
       .PageSetup.RightHeader = RightHeader
       .PageSetup.CenterHeader = CenterHeader
       .PageSetup.LeftFooter = LeftFooter
       .PageSetup.RightFooter = RightFooter
       .PageSetup.CenterFooter = CenterFooter
       .PageSetup.RightMargin = RightMargin
       .PageSetup.LeftMargin = LeftMargin
      End With
    Else
      With ActiveSheet
       .PageSetup.HeaderMargin = HeaderMargin
       .PageSetup.FooterMargin = FooterMargin
       .PageSetup.BottomMargin = BottomMargin
       .PageSetup.topmargin = topmargin
       .PageSetup.LeftHeader = LeftHeader
       .PageSetup.RightHeader = RightHeader
       .PageSetup.CenterHeader = CenterHeader
       .PageSetup.LeftFooter = LeftFooter
       .PageSetup.RightFooter = RightFooter
       .PageSetup.CenterFooter = CenterFooter
       .PageSetup.RightMargin = RightMargin
       .PageSetup.LeftMargin = LeftMargin
       .PageSetup.CenterHorizontally = True
       
      End With
      ActiveSheet.DisplayAutomaticPageBreaks = False
      Range("A1").Select
    End If
End Sub
Public Function NoSheet() As Boolean
    On Error GoTo nosheet1
    Dim sheet As String
    sheet = ActiveSheet.Name
    NoSheet = False
    Exit Function
nosheet1:
    NoSheet = True
End Function
Sub PageSetupSheet()
       Dim region() As String, i As Integer, ws As Worksheet
       Dim sheet As String
       If NoSheet Then Exit Sub
       sheet = ActiveSheet.Name
       If sheet = "Stylesheet" Then Exit Sub
       On Error Resume Next
       Set ws = sheets("Stylesheet")
       If Application.ScreenUpdating Then Application.ScreenUpdating = False
       Dim officeno As String, PictureFile As String, PictureRegion As String
       Dim PictureEnable As String, PictureAbove As String
       Call fReadValue(HKLM, "Software\DPPI\EZPivot", "OfficeNo", "S", " ", officeno)
       Call fReadValue(HKLM, "Software\DPPI\EZPivot", "PictureFile", "S", " ", PictureFile)
       Call fReadValue(HKLM, "Software\DPPI\EZPivot", "PictureRegion", "S", " ", PictureRegion)
       Call fReadValue(HKLM, "Software\DPPI\EZPivot", "PictureEnable", "S", " ", PictureEnable)
       Call fReadValue(HKLM, "Software\DPPI\EZPivot", "PictureAbove", "S", " ", PictureAbove)
       For i = 0 To 5
          ReDim Preserve region(i)
       Next i
       With ws.PageSetup
         region(0) = .LeftHeader
         region(1) = .CenterHeader
         region(2) = .RightHeader
         region(3) = .LeftFooter
         region(4) = .CenterFooter
         region(5) = .RightFooter
       End With
       Dim var() As String, j As Integer
       Dim macros() As String
       ReDim Preserve macros(0)
       ReDim Preserve macros(1)
       ReDim Preserve macros(2)
       ReDim Preserve macros(3)
       macros(0) = "*TITLE"
       macros(1) = "*SUBTITLE"
       macros(2) = "*COMPANY"
       macros(3) = "*USER"
       ReDim Preserve var(0)
       ReDim Preserve var(1)
       ReDim Preserve var(2)
       ReDim Preserve var(3)
       
       If isSheetChart(ActiveSheet.Name) Then
         sheets(FindPivotTable).Select
       End If
       var(0) = getINIname("Title", True)
       If var(0) = "xxx" Then
          XLPApplyPageFormat
          var(0) = getINIname("Title", True)
       End If
       var(1) = getINIname("SubTitle", True)
       If var(1) = "xxx" Then var(1) = ""
       var(2) = ReadKeyValue("CompanyName")
       var(3) = ReadKeyValue("UserName")
       For j = 0 To 3
           For i = 0 To 5
              If var(j) = "xxx" Then var(j) = ""
              region(i) = Replace(region(i), macros(j), var(j), 1, 254)
           Next i
       Next j
       sheets(sheet).Select
       Dim PictureThere As Boolean, graphcode As String
       On Error Resume Next
       If Mid(PictureFile, 1, 1) <> " " Then
          PictureThere = exist(PictureFile)
       End If
       If var(1) <> "" Then region(1) = var(0) & chr(10) & var(1)
       If PictureEnable Then
         graphcode = "&9&G"
       Else
         graphcode = ""
       End If
       On Error Resume Next
       If PictureRegion = "" Then PictureRegion = "0"
       
       If Int(officeno) > 9 And PictureEnable Then
         With ActiveSheet
          .LeftHeaderPicture.Filename = ""
          .RightHeaderPicture.Filename = ""
          .CenterHeaderPicture.Filename = ""
          .LeftFooterPicture.Filename = ""
          .RightFooterPicture.Filename = ""
          .CenterFooterPicture.Filename = ""
         End With
         Select Case CInt(PictureRegion)
           Case 0:
           If PictureThere Then
              ActiveSheet.PageSetup.LeftHeaderPicture.Filename = PictureFile
              If PictureEnable Then
              region(5) = region(0)
              region(0) = graphcode
              End If
           End If
           Case 1:
           If PictureThere Then ActiveSheet.PageSetup.CenterHeaderPicture.Filename = PictureFile
             If PictureEnable Then
               region(5) = region(1)
               region(1) = graphcode
             End If
           Case 2:
           If PictureThere Then ActiveSheet.PageSetup.RightHeaderPicture.Filename = PictureFile
             If PictureEnable Then
               region(5) = region(2)
               region(2) = graphcode
               End If
           Case 3:
           If PictureThere Then ActiveSheet.PageSetup.LeftFooterPicture.Filename = PictureFile
             If PictureEnable Then
               region(5) = region(3)
               region(3) = graphcode
             End If
           Case 4
           If PictureThere Then ActiveSheet.PageSetup.CenterFooterPicture.Filename = PictureFile
           If PictureEnable Then
             region(5) = region(4)
             region(4) = graphcode
           End If
           Case 5:
           If PictureThere Then
               region(5) = graphcode
               ActiveSheet.PageSetup.RightFooterPicture.Filename = PictureFile
           End If
         End Select
       End If
       Dim fitpage As Integer
       With ActiveSheet.PageSetup
         .LeftHeader = region(0)
         .CenterHeader = region(1)
         .RightHeader = region(2)
         .LeftFooter = region(3)
         .CenterFooter = region(4)
         .RightFooter = region(5)
         .CenterHorizontally = True
       End With
End Sub
Function MapColumnStyle(desc As String) As Integer
    Dim nflds As Integer, i As Integer, desc1 As String, ws As Worksheet
    Set ws = sheets("Stylesheet")
    nflds = FilterCol
    desc = Replace(desc, chr(10), " ", 1, 254)
    desc = Replace(desc, "~", " ", 1, 254)
    For i = 1 To nflds
       desc1 = ws.Cells(1, i).value
       desc1 = Replace(desc1, chr(10), " ", 1, 254)
       If desc1 = desc Then
           MapColumnStyle = i
           Exit Function
       End If
    Next i
End Function
Sub XPivotFormatRestore()
    If getINIname("PivotProp", True) = "xxx" Then
       ActiveSheet.names.Add "PivotProp", "1"   'ReadKeyValue("PivotProp")
    End If
    If RegionUpdate Then
       PropValsSave1
    End If
    On Error Resume Next
    If getINIname("PivotProp", True) <> "xxx" And Not RegionUpdate Then
       PropValsRestore1
       Exit Sub
    End If
'   If RegionUpdate Then Exit Sub
    XPivotAuto = False
    XRegionAuto = True
    Dim nsubs As Integer
    nsubs = ActiveSheet.PivotTables(1).RowFields.Count - 1
    If ActiveSheet.PivotTables(1).DataFields.Count > 1 Then
      nsubs = nsubs - 1
    End If
    If Application.ScreenUpdating Then Application.ScreenUpdating = False
    On Error Resume Next
    sheets("Stylesheet").visible = True
    If ActiveSheet.PivotTables(1).PageFields.Count = 1 Then
       XPivotPageRegion
       XPivotStyleRestore (17)
    End If
    
    If ActiveSheet.RowGrand Then
      XPivotGrandHeadingRegion
      XPivotStyleRestore (16)
    End If
    XPivotHeadingRegion
    XPivotStyleRestore (1)
    If getINIname("PivotRowBand", True) = "1" And ActiveSheet.PivotTables(1).columnfields.Count > 0 Then
      XPivotDataColumnRegionBand
    Else
      XPivotDataColumnRegion
      XPivotStyleRestore (4)
    End If
    If ActiveSheet.PivotTables(1).DataFields.Count > 1 Then
      XPivotDataRegion
      XPivotStyleRestore (5)
    End If
    If ActiveSheet.PivotTables(1).ColumnGrand Then
      XPivotColumnGrandTotalRegion
      XPivotStyleRestore (2)
    End If
    If ActiveSheet.PivotTables(1).RowGrand Then
      If getINIname("PivotGrandOverride", True) <> "1" Then
         XPivotRowGrandTotalRegion
         XPivotStyleRestore (3)
         If ActiveSheet.PivotTables(1).ColumnGrand Then
           XPivotBothGrandTotalRegion
           XPivotStyleRestore (12)
         End If
      End If
    End If
    If XRowSub(1) <> "" Then
       If XRowTotal1Region Then
          XPivotStyleRestore (6)
       End If
    End If
    If XRowSub(2) <> "" Then
       If XRowTotal2Region Then
          XPivotStyleRestore (7)
       End If
    End If
    If XRowSub(3) <> "" Then
       If XRowTotal3Region Then
          XPivotStyleRestore (8)
       End If
    End If
    If XRowSub(4) <> "" Then
       If XRowTotal4Region Then
          XPivotStyleRestore (18)
       End If
    End If
    If ActiveSheet.PivotTables(1).RowGrand Then
      If getINIname("PivotGrandOverride", True) = "1" Then
        XPivotRowGrandTotalRegion
        XPivotStyleRestore (3)
        If ActiveSheet.PivotTables(1).ColumnGrand Then
          XPivotBothGrandTotalRegion
          XPivotStyleRestore (12)
        End If
      End If
    End If
    XPivotRow1Region
    XPivotStyleRestore (region(1))
    If nsubs > 0 Then   'ActiveSheet.PivotTables(1).RowFields.count > 2 Then
      XPivotRow2Region
      XPivotStyleRestore (region(2))
    End If
    If nsubs > 1 Then  'ActiveSheet.PivotTables(1).RowFields.count > 3 Then
      XPivotRow3Region
      XPivotStyleRestore (region(3))
    End If
    If nsubs > 2 Then  'ActiveSheet.PivotTables(1).RowFields.count > 3 Then
      XPivotRow4Region
      XPivotStyleRestore (region(4))
    End If

    XPivotHeadingRegionLeft
    XPivotStyleRestore (13)
    XPivotHeadingRegionRight
    XPivotStyleRestore (14)
    XPivotRowSelectRegion
    If ActiveSheet.PivotTables(1).columnfields.Count > 0 Then
       XPivotStyleRestore (15)
    ElseIf ActiveSheet.PivotTables(1).DataFields.Count > 1 Then
       XPivotStyleRestore (9)
    End If
    sheets("Stylesheet").visible = False
    XRegionAuto = False
    XPivotAuto = False
End Sub
Function GetPivotField(desc, sheet) As Integer
    On Error Resume Next
    Dim i, ws As Worksheet
    Set ws = sheets(sheet)
    For i = 1 To ws.UsedRange.Columns.Count
        If InStr(desc, Trim(ws.Cells(1, i).Text)) > 0 Then
           GetPivotField = i
           Exit Function
        End If
    Next i
End Function
Sub XPivotPageRegion()
    If ActiveSheet.PivotTables(1).PageFields.Count = 0 Then Exit Sub
    Dim buf As String
    buf = ActiveSheet.PivotTables(1).PageFields(1).Name & "[All]"
    ActiveSheet.PivotTables("PivotTable1").PivotSelect buf, xlLabelOnly
End Sub
Sub CopyWsFormat(nr As Integer, nc As Integer)
    Dim ws As Worksheet, numberformat As String
    On Error Resume Next
    Set ws = sheets("StyleSheet")
    With Selection
'      .numberformat = ws.cells(nr, nc).numberformat
      .HorizontalAlignment = ws.Cells(nr, nc).HorizontalAlignment
      .VerticalAlignment = ws.Cells(nr, nc).VerticalAlignment
      .WrapText = ws.Cells(nr, nc).WrapText
      .Orientation = ws.Cells(nr, nc).Orientation
      .AddIndent = ws.Cells(nr, nc).AddIndent
      .ShrinkToFit = ws.Cells(nr, nc).ShrinkToFit
      .MergeCells = ws.Cells(nr, nc).MergeCells
    End With
    With Selection.font
       .Name = ws.Cells(nr, nc).font.Name
       .fontstyle = ws.Cells(nr, nc).font.fontstyle
       .size = ws.Cells(nr, nc).font.size
       .Strikethrough = ws.Cells(nr, nc).font.Strikethrough
       .superscript = ws.Cells(nr, nc).font.superscript
       .subscript = ws.Cells(nr, nc).font.subscript
       .OutlineFont = ws.Cells(nr, nc).font.OutlineFont
       .underline = ws.Cells(nr, nc).font.underline
       .colorindex = ws.Cells(nr, nc).font.colorindex
    End With
    With Selection.Interior
         .colorindex = ws.Cells(nr, nc).Interior.colorindex
         .pattern = ws.Cells(nr, nc).Interior.pattern
         .PatternColorIndex = ws.Cells(nr, nc).Interior.PatternColorIndex
        If nr = 37 Then
          If Not iscolumnbanded And ReadKeyValue("PivotRowBand") = "1" Or PivotBandOff Then
            .colorindex = xlNone
          ElseIf .colorindex = 2 Or .colorindex = -4142 Then
            If iscolumnbanded Then
              .colorindex = 7
            End If
          End If
        End If
        
    End With
End Sub
Sub XPivotStyleRestore(styleno As Integer)
    Call CopyWsFormat(33 + styleno, 1)
End Sub
Sub XPivotGrandHeadingRegion()
    Dim buf As String
    buf = "'Row Grand Total'"
    If CInt(ReadKeyValue("OfficeNo")) > 9 Then
         ActiveSheet.PivotTables(1).PivotSelect buf, xlLabelOnly, True
    Else
         ActiveSheet.PivotTables(1).PivotSelect buf, xlLabelOnly
    End If
    XPivotTryit (16)
End Sub
Sub XPivotTryit(styleno As Integer)
    Dim wf As Worksheet
    Dim addr As String, ws As Worksheet, style As String
    On Error Resume Next
    If XRegionAuto Then Exit Sub
    Set ws = sheets("Stylesheet")
    Set wf = sheets(ActiveSheet.Name)
    addr = Selection.address
    style = "XPivot" & styleno
    If Not isStyleThere(style) Then
       ActiveWorkbook.Styles.Add style
       ws.visible = True
       ws.Select
       Cells(33 + styleno, 1).Select
       Selection.style = style
    End If
    ws.visible = True
    ws.Select
    Cells(33 + styleno, 1).Select
    Call CopyCellFormats(ws, wf, 0)
End Sub
Sub XPivotHeadingRegion()
    Dim buf As String, addr As String, dlg As Variant, ndata As Integer, i, ngrandcol
    On Error Resume Next
    ndata = ActiveSheet.PivotTables(1).columnfields.Count
    buf = ""
    For i = 1 To ndata
       buf = buf & chr(39) & ActiveSheet.PivotTables(1).columnfields(i).Name & chr(39)
       If i < ndata Then buf = buf & ":"
    Next i
    buf = buf & "[All]"
    If CInt(ReadKeyValue("OfficeNo")) > 9 Then
       ActiveSheet.PivotTables(1).PivotSelect buf, xlLabelOnly, True
    Else
       ActiveSheet.PivotTables(1).PivotSelect buf, xlLabelOnly
    End If
    XPivotTryit (1)
End Sub
Sub XPivotDataColumnRegion()
    Dim buf As String, addr As String, dlg As Variant, ndata As Integer, i
    On Error Resume Next
    ndata = ActiveSheet.PivotTables(1).DataFields.Count
    buf = buf & chr(39) & ActiveSheet.PivotTables(1).DataFields(1).Name & chr(39)
    If ndata > 1 Then
       buf = buf & ":" & chr(39) & ActiveSheet.PivotTables(1).DataFields(ndata).Name & chr(39)
    End If
    If CInt(ReadKeyValue("OfficeNo")) > 9 Then
       ActiveSheet.PivotTables("PivotTable1").PivotSelect buf, xlDataOnly, True
    Else
       ActiveSheet.PivotTables("PivotTable1").PivotSelect buf, xlDataOnly
    End If
    XPivotTryit (4)
End Sub
Sub XPivotDataRegion()
    Dim buf As String, addr As String, dlg As Variant, ndata As Integer, i
    On Error Resume Next
    Range("A2").Select
    addr = ActiveCell.address
    If CInt(ReadKeyValue("OfficeNo")) > 9 Then
       ActiveSheet.PivotTables("PivotTable1").PivotSelect "Data[All]", xlLabelOnly, True
    Else
       ActiveSheet.PivotTables("PivotTable1").PivotSelect "Data[All]", xlLabelOnly
    End If
    ActiveSheet.PivotTables("PivotTable1").PivotSelect "Data[All]", xlLabelOnly
    XPivotTryit (5)
End Sub
Sub XPivotDataColumnRegionBand()
    Dim buf As String, addr As String, ndata As Integer, nrow As Integer, i
    On Error Resume Next
    ndata = ActiveSheet.PivotTables(1).DataFields.Count
    If ndata = 1 And ActiveSheet.PivotTables(1).RowFields.Count < 3 Then
       
       SetSingleRowBand
       Exit Sub
    End If
    buf = ""
    For i = 1 To ndata
       buf = chr(39) & ActiveSheet.PivotTables(1).DataFields(i).Name & chr(39)
       If CInt(ReadKeyValue("OfficeNo")) > 9 Then
        ActiveSheet.PivotTables("PivotTable1").PivotSelect buf, xlDataOnly, True
       Else
        ActiveSheet.PivotTables("PivotTable1").PivotSelect buf, xlDataOnly
       End If
       If i = 1 Or i = 3 Or i = 5 Then
          iscolumnbanded = False
       Else
          iscolumnbanded = True
       End If
       XPivotTryit (4)
       XPivotStyleRestore (4)
    Next i
    iscolumnbanded = False
End Sub
Sub XPivotColumnGrandTotalRegion()
    Dim columnlabel As String, ndata As Integer, i, buf, nscroll
    Dim addr As String
    addr = ActiveCell.address
    On Error Resume Next
    If Application.ScreenUpdating Then Application.ScreenUpdating = False
    If Not ActiveSheet.PivotTables(1).ColumnGrand Then Exit Sub
    ndata = ActiveSheet.PivotTables(1).DataFields.Count
    buf = chr(39) & ActiveSheet.PivotTables(1).DataFields(1).Name & chr(39)
    If ndata > 1 Then
        buf = buf & ":" & chr(39) & ActiveSheet.PivotTables(1).DataFields(ndata).Name & chr(39)
    End If
    buf = buf & " 'Column Grand Total'"
    If CInt(ReadKeyValue("OfficeNo")) > 9 Then
      ActiveSheet.PivotTables(1).PivotSelect buf, xlDataAndLabel, True
    Else
      ActiveSheet.PivotTables(1).PivotSelect buf, xlDataAndLabel
    End If
    addr = Selection.address
    XPivotTryit (2)
    Range(addr).Select
End Sub

Sub XPivotBothGrandTotalRegion()
    Dim rng1 As Range, WorkRange As Range, addr As String, addr1 As String, auto As Boolean
    auto = XPivotAuto
    XPivotAuto = True
    On Error Resume Next
    XPivotColumnGrandTotalRegion
    addr = Selection.address
    Set rng1 = Range(addr)
    XPivotRowGrandTotalRegion
    addr1 = Selection.address
    Set WorkRange = Range(addr1)
    Set WorkRange = Intersect(WorkRange, rng1)
    WorkRange.Select
    XPivotAuto = auto
    XPivotTryit (12)
End Sub
Sub XPivotBothGrandTotalRegion1()
    Dim rng1 As Range, WorkRange As Range, addr As String, addr1 As String
    XPivotAuto = True
    On Error Resume Next
    XPivotColumnGrandTotalRegion
    addr = Selection.address
    Set rng1 = Range(addr)
    XPivotRowGrandTotalRegion
    addr1 = Selection.address
    Set WorkRange = Range(addr1)
    Set WorkRange = Intersect(WorkRange, rng1)
    WorkRange.Select
    XPivotAuto = False
End Sub

Function XRowTotal1Region() As Boolean
    Dim buf As String, addr As String, ndata, Name As String, i, j
    Name = XRowSub(1)
    If Name = "" Then Exit Function
    On Error Resume Next
    Err.Clear
    buf = Name & "[All;Total] "
    ndata = ActiveSheet.PivotTables(1).DataFields.Count
    If ndata > 1 Then
      buf = buf & chr(39) & ActiveSheet.PivotTables(1).DataFields(1).Name & chr(39) & ":"
      buf = buf & chr(39) & ActiveSheet.PivotTables(1).DataFields(ndata).Name & chr(39)
    End If
    addr = ActiveCell.address
    If CInt(ReadKeyValue("OfficeNo")) > 9 Then
      ActiveSheet.PivotTables("PivotTable1").PivotSelect buf, xlDataAndLabel, True
    Else
      ActiveSheet.PivotTables("PivotTable1").PivotSelect buf, xlDataAndLabel
    End If
'    ActiveSheet.PivotTables("PivotTable1").PivotSelect _
'        "Name[All;Total] 'Sum of Sales Amt':'Sum of Paid2'", xlDataAndLabel
    
    j = Err.Number
    If j > 0 Then
      Range(addr).Select
      Exit Function
    End If
    XPivotTryit (6)
    XRowTotal1Region = True
End Function

Function XRowTotal2Region() As Boolean
    Dim buf As String, addr As String, ndata, Name As String, i, j
    Name = XRowSub(2)
    Err.Clear
    If Name = "" Then Exit Function
    On Error Resume Next
    ndata = ActiveSheet.PivotTables(1).DataFields.Count
    buf = Name & "[All;Total] "
    
     If ndata > 1 Then
      buf = buf & chr(39) & ActiveSheet.PivotTables(1).DataFields(1).Name & chr(39) & ":"
      buf = buf & chr(39) & ActiveSheet.PivotTables(1).DataFields(ndata).Name & chr(39)
    End If
    
    addr = ActiveCell.address
    If CInt(ReadKeyValue("OfficeNo")) > 9 Then
      ActiveSheet.PivotTables("PivotTable1").PivotSelect buf, xlDataAndLabel, True
    Else
      ActiveSheet.PivotTables("PivotTable1").PivotSelect buf, xlDataAndLabel
    End If
    addr = Selection.address
    j = Err.Number
    If j > 0 Then
       Range(addr).Select
       Exit Function
    End If
    XPivotTryit (7)
    XRowTotal2Region = True
End Function
Function XRowTotal3Region() As Boolean
    Dim buf As String, addr As String, ndata, Name As String, i, j
    Name = XRowSub(3)
    Err.Clear
    If Name = "" Then Exit Function
    On Error Resume Next
    ndata = ActiveSheet.PivotTables(1).DataFields.Count
    buf = Name & "[All;Total] "
    If ndata > 1 Then
      buf = buf & chr(39) & ActiveSheet.PivotTables(1).DataFields(1).Name & chr(39) & ":"
      buf = buf & chr(39) & ActiveSheet.PivotTables(1).DataFields(ndata).Name & chr(39)
    End If
    addr = ActiveCell.address
    If CInt(ReadKeyValue("OfficeNo")) > 9 Then
      ActiveSheet.PivotTables("PivotTable1").PivotSelect buf, xlDataAndLabel, True
    Else
      ActiveSheet.PivotTables("PivotTable1").PivotSelect buf, xlDataAndLabel
    End If
    addr = Selection.address
    j = Err.Number
    If j > 0 Then
       Range(addr).Select
       Exit Function
    End If
    XPivotTryit (8)
    XRowTotal3Region = True
End Function
Function XRowTotal4Region() As Boolean
    Dim buf As String, addr As String, ndata, Name As String, i, j
    Name = XRowSub(4)
    Err.Clear
    If Name = "" Then Exit Function
    On Error Resume Next
    ndata = ActiveSheet.PivotTables(1).DataFields.Count
    buf = Name & "[All;Total] "
    If ndata > 1 Then
      buf = buf & chr(39) & ActiveSheet.PivotTables(1).DataFields(1).Name & chr(39) & ":"
      buf = buf & chr(39) & ActiveSheet.PivotTables(1).DataFields(ndata).Name & chr(39)
    End If
    addr = ActiveCell.address
    If CInt(ReadKeyValue("OfficeNo")) > 9 Then
      ActiveSheet.PivotTables(1).PivotSelect buf, xlDataAndLabel, True
    Else
      ActiveSheet.PivotTables(1).PivotSelect buf, xlDataAndLabel
    End If
'    ActiveSheet.PivotTables(1).PivotSelect "'Zip Code5'[All]", _
'        xlLabelOnly
    addr = Selection.address
    j = Err.Number
    If j > 0 Then
       Range(addr).Select
       Exit Function
    End If
    XPivotTryit (region(19))
    XRowTotal4Region = True
End Function
Sub XPivotRow1Region()
    Dim buf As String, addr As String, dlg As Variant, k
    addr = ActiveCell.address
    Range("A3").Select
    buf = Quote(ActiveSheet.PivotTables(1).RowFields(1).Name) & "[All]"
    If CInt(ReadKeyValue("OfficeNo")) > 9 Then
      ActiveSheet.PivotTables(1).PivotSelect buf, xlLabelOnly, True
    Else
      ActiveSheet.PivotTables(1).PivotSelect buf, xlLabelOnly
    End If
    k = region(1)
    XPivotTryit (k)
End Sub
Sub XPivotRow2Region()
    Dim buf As String, addr As String, dlg As Variant, k
    addr = ActiveCell.address
    Range("A3").Select
    buf = Quote(ActiveSheet.PivotTables(1).RowFields(2).Name) & "[All]"
    If CInt(ReadKeyValue("OfficeNo")) > 9 Then
      ActiveSheet.PivotTables(1).PivotSelect buf, xlLabelOnly, True
    Else
      ActiveSheet.PivotTables(1).PivotSelect buf, xlLabelOnly
    End If
    k = region(2)
    XPivotTryit (k)
End Sub
Sub XPivotRow3Region()
    Dim buf As String, addr As String, dlg As Variant, k
    addr = ActiveCell.address
    Range("A3").Select
    buf = Quote(ActiveSheet.PivotTables(1).RowFields(3).Name) & "[All]"
    If CInt(ReadKeyValue("OfficeNo")) > 9 Then
       ActiveSheet.PivotTables(1).PivotSelect buf, xlLabelOnly, True
    Else
       ActiveSheet.PivotTables(1).PivotSelect buf, xlLabelOnly
    End If
    k = region(3)
    XPivotTryit (k)
End Sub
Sub XPivotRow4Region()
    Dim buf As String, addr As String, dlg As Variant, k
    addr = ActiveCell.address
    Range("A3").Select
    buf = Quote(ActiveSheet.PivotTables(1).RowFields(4).Name) & "[All]"
    If CInt(ReadKeyValue("OfficeNo")) > 9 Then
       ActiveSheet.PivotTables(1).PivotSelect buf, xlLabelOnly, True
    Else
       ActiveSheet.PivotTables(1).PivotSelect buf, xlLabelOnly
    End If
    k = region(4)
    XPivotTryit (k)
End Sub
Function region(n As Integer) As Integer
    Dim i
    On Error Resume Next
    i = ActiveSheet.PivotTables(1).RowFields(n).Position
    Select Case i
       Case 1:
          region = 9
       Case 2:
          region = 10
       Case 3:
          region = 11
       Case 4:
          region = 19
    End Select
End Function

Sub XPivotHeadingRegionRight()
    If Application.ScreenUpdating Then Application.ScreenUpdating = False
    Dim ncol
'    ActiveWindow.ScrollColumn = 1
'    ActiveWindow.ScrollRow = 1
   
    Dim addr As String
    
    If CInt(ReadKeyValue("OfficeNo")) > 9 Then
       ActiveSheet.PivotTables(1).PivotSelect "", xlBlanks, True
    Else
       ActiveSheet.PivotTables(1).PivotSelect "", xlBlanks
    End If
    addr = Selection.address
    XPivotTryit (14)
'    Range(ActiveCell.address).Select
End Sub
Sub XPivotHeadingRegionLeft()
    If Application.ScreenUpdating Then Application.ScreenUpdating = False
    Dim addr As String
    If CInt(ReadKeyValue("OfficeNo")) > 9 Then
       ActiveSheet.PivotTables(1).PivotSelect "", xlOrigin, True
    Else
       ActiveSheet.PivotTables(1).PivotSelect "", xlOrigin
    End If
    addr = Selection.address
    XPivotTryit (13)
'    Range(ActiveCell.address).Select
End Sub
Sub XPivotRowSelectRegion()
    Dim addr As String
    If Application.ScreenUpdating Then Application.ScreenUpdating = False
'    ActiveWindow.ScrollColumn = 1
'    ActiveWindow.ScrollRow = 1
    If CInt(ReadKeyValue("OfficeNo")) > 9 Then
       ActiveSheet.PivotTables(1).PivotSelect "", xlBlanks, True
    Else
       ActiveSheet.PivotTables(1).PivotSelect "", xlBlanks
    End If
    Range(Cells(ActiveCell.row, ActiveCell.column - 1), Cells(ActiveCell.row, ActiveCell.column - 1)).Select
    addr = Selection.address
    XPivotTryit (15)
'    Range(ActiveCell.address).Select
End Sub
Sub CopyCellFormats(winput As Worksheet, woutput As Worksheet, mode As Integer)
    Dim area1 As String, area2 As String
    Dim Hor, Ver, wrap, orien, addind, shrink, merge, numberformat
    area1 = Selection.address
    On Error Resume Next
    
'    numberformat = Selection.numberformat
    With Selection
       Hor = .HorizontalAlignment
       Ver = .VerticalAlignment
       wrap = .WrapText
       orien = .Orientation
       addind = .AddIndent
       shrink = .ShrinkToFit
       merge = .MergeCells
    End With
    Dim Name, fontstyle, size, strike, superscript
    Dim subscript, shadow, underline, colorindex, outline
    With Selection.font
       Name = .Name
       fontstyle = .fontstyle
       size = .size
       strike = .Strikethrough
       superscript = .superscript
       subscript = .subscript
       outline = .OutlineFont
       shadow = .shadow
       underline = .underline
       colorindex = .colorindex
    End With
    Dim colorindexi, pattern, patterncolorindexi
    With Selection.Interior
        colorindexi = .colorindex
        pattern = .pattern
        patterncolorindexi = .PatternColorIndex
    End With
    If iscolumnbanded Then
        colorindexi = xlNone
    End If
    woutput.Select
    area2 = Selection.address
 '   Selection.numberformat = numberformat
    With Selection
       .HorizontalAlignment = Hor
       .VerticalAlignment = Ver
       .WrapText = wrap
       .Orientation = orien
       .AddIndent = addind
       .ShrinkToFit = shrink
       .MergeCells = merge
    End With
    With Selection.font
       .Name = Name
       .fontstyle = fontstyle
       .size = size
       .Strikethrough = strike
       .superscript = superscript
       .subscript = subscript
       .OutlineFont = outline
       .shadow = shadow
       .underline = underline
       .colorindex = colorindex
    End With
    With Selection.Interior
        .colorindex = colorindexi
        .pattern = pattern
        .PatternColorIndex = patterncolorindexi
    End With
End Sub
Sub SetUseExcel()
    On Error Resume Next
    If ReadKeyValue("UseExcelLayout") <> "0" Then
       Call WriteKeyValue("UseExcelLayout", "0")
    Else
       Call WriteKeyValue("UseExcelLayout", "1")
    End If
End Sub
Sub UseExcelLayout()
    Call WriteKeyValue("UseExcelLayout", "1")
    CreatePivotTableP
End Sub
Sub UseExcelLayoutNot()
    Call WriteKeyValue("UseExcelLayout", "0")
    CreatePivotTableP
End Sub
Sub ConvertToEZPivot()
    On Error Resume Next
    Dim tabcolor, sheet, i, sourcesheet As String, sheet1
    If isSheetChart(ActiveSheet.Name) Then Exit Sub
    If Not DemoMode Then
    i = isXSoftcode
     If i > 1 Or i < 0 Then
        Run "XCPLaunchSoftWrap"
        Exit Sub
      End If
    End If
    Dim frmini As String
    frmini = GetAppFolder & "\format.ini"
    Kill frmini
    frmini = GetAppFolder & "\pivot.ini"
    Kill frmini
    sheet = ActiveSheet.Name
    tabcolor = ActiveSheet.Tab.colorindex
    ActiveSheet.Tab.colorindex = tabcolor
    sheets(sheet).Copy before:=sheets(sheet)
    sheet1 = ActiveSheet.Name
    On Error Resume Next
    tabcolor = ActiveSheet.Tab.colorindex
    ActiveSheet.names.Add "IPivot", "1"
    ActiveSheet.names.Add "PivotRowBand", "1"
    ActiveSheet.names.Add "Title", Replace(ActiveSheet.Name, "(2)", "")
    Dim x, k, source
    x = ""
    x = ActiveSheet.PivotTables(1).SourceData
    k = InStr(x, "!")
    If k > 0 Then
       source = "='" & Mid(x, 1, k - 1) & "'!Q1:Q1"
       source = Replace(source, "''", "'")
       source = Replace(source, " (2)", "")
       ActiveSheet.names.Add "PivotSource", RefersToR1C1:=source
       sourcesheet = Mid(x, 1, k - 1)
       sourcesheet = Replace(sourcesheet, "'", "")
    End If
    ActiveWindow.DisplayGridlines = False
    If Application.ScreenUpdating Then Application.ScreenUpdating = False
    ActiveWindow.DisplayGridlines = False
    ActiveWindow.View = xlPageBreakPreview
    ActiveWindow.View = xlNormalView
    ActiveSheet.DisplayAutomaticPageBreaks = False
    ActiveWorkbook.ShowPivotTableFieldList = False
    If Application.ScreenUpdating Then Application.ScreenUpdating = False
    sheets("StyleSheet").visible = False
    sheets(sourcesheet).Select
    i = NewPivotMake
    sheets("StyleSheet").visible = False
    sheets(sheet1).Select
    If ReadKeyValue("IsShortName") = "1" Then
       SetDataDescShort
    End If
    If DemoMode Then
       sheets(sheet1).Name = "PivotTable"
       ActiveSheet.names.Add "Title", "Pivot Table Demo for DemoData"
    End If
    X1PivotFormats1
    XPivotAutoTotals
    XPivotAutoSort
    PivotSymbol
    PageSetupSheet
    ActiveSheet.names.Add "XPortrait", "0"
    X2PivotSetPages
    PageCompanyUser
    FormatGrandTotal
    FormatColumnFilter
    ActiveSheet.PageSetup.CenterHeader = Replace(ActiveSheet.PageSetup.CenterHeader, "(2)", "")
    Application.CommandBars("EZ Pivot").visible = True
    Application.CommandBars("Pivot Tool").visible = False
End Sub
Sub CompanyUser()
    XLPCompanyUser
End Sub
Sub CompanyUserChart()
    XLPApplyPageRun
End Sub
Function NewPivotMake()
    Dim j As Integer, spec As String, pivotini As String, sheet As String
    Dim nflds As Integer, i, nrows, addr, nfld As String, opt As String, addr1 As String
    Dim sum As String
    Dim isStyle As Boolean
    If Workbooks.Count < 1 Then Exit Function
    addr = ActiveCell.address
    sheet = ActiveSheet.Name
    If Application.ScreenUpdating Then Application.ScreenUpdating = False
    On Error Resume Next
    If isSheet1("Stylesheet") Then
       isStyle = True
       sheets("Stylesheet").visible = True
       sheets("Stylesheet").Select
    Else
       sheets.Add
       ActiveSheet.Name = "StyleSheet"
       ActiveSheet.names.Add "Stylesheet", "1"
       XPivotMasterRestoreCells
       If ActiveSheet.Name = "StyleSheet" Then
          ActiveSheet.visible = True
       End If
    End If
    sheets(sheet).Select
    Dim isOnly As Integer
    isOnly = CInt(getINIname("IsOnly", True))
    Range("A1").Select
    nflds = Selection.CurrentRegion.Columns.Count
    nrows = Selection.CurrentRegion.Rows.Count
    If nrows < 2 Or nflds < 2 Then
       Range(addr).Select
       Exit Function
    End If
    ActiveSheet.CurrentRegion.Select
    spec = "Pivot.ini"
    pivotini = GetAppFolder & "\Pivot.ini"
    Kill pivotini
    Call wrt_ini(pivotini, "RTitle", "Pivot Title Here")
    Call wrt_ini(pivotini, "Title", "Other Pivot Title Here")
    loadltrs
    Dim mapfields As String
    nfld = nflds
    Dim numberformat As String, align As String, dec As String, datex As String
    Dim fldtype As String, dollar As String, dattype As String, comma As String
    For i = 1 To nflds
       opt = "Column " & i
       numberformat = Cells(2, i).numberformat
       dec = "0"
       datex = "0"
       fldtype = "0"
       align = "0"
       dollar = "0"
       dattype = "0"
       comma = "0"
       sum = "0"
       mapfields = mapfields & i
       If i < nflds Then mapfields = mapfields & ","
       If numberformat = "@" Or numberformat = "General" Then
          fldtype = "0"
          dollar = "0"
          align = "0"
          comma = "0"
          datex = "0"
          dec = "0"
          datex = "0"
       ElseIf InStr(numberformat, "$") Then
          If InStr(numberformat, ".") Then
            dec = "2"
          Else
            dec = "0"
          End If
          dollar = "1"
          fldtype = "1"
          align = "2"
          comma = "1"
          sum = "1"
       ElseIf InStr(numberformat, "%") Then
          If InStr(numberformat, ".") Then
            dec = "2"
          Else
            dec = "0"
          End If
          dollar = "2"
          fldtype = "1"
          align = "2"
          comma = "1"
          sum = "1"
       ElseIf IsDate2(numberformat) Then  'InStr(Numberformat, "/") Or InStr(Numberformat, "-") Then
          datex = "1"
          dattype = "16"
          align = "1"
       Else
          fldtype = "1"
          align = "2"
          comma = "1"
       End If
       Call wrt_ini(pivotini, "FDesc", Cells(1, i).Text, opt)
       Call wrt_ini(pivotini, "RDesc", Cells(1, i).Text, opt)
       Call wrt_ini(pivotini, "FldType", fldtype, opt)
       Call wrt_ini(pivotini, "Date", datex, opt)
       Call wrt_ini(pivotini, "Align", align, opt)
       Call wrt_ini(pivotini, "DateType", dattype, opt)
       Call wrt_ini(pivotini, "Dollar", dollar, opt)
       Call wrt_ini(pivotini, "Decimal", dec, opt)
       Call wrt_ini(pivotini, "Commas", comma, opt)
       Call wrt_ini(pivotini, "Sum", sum, opt)
       
    Next i
    Call wrt_ini(pivotini, "OutputLine", mapfields)
    ActiveWorkbook.names.Add "IsPivot1", "1"
    Application.DisplayAlerts = False
    Dim ptdata1 As String
    ptdata1 = ActiveSheet.Name & "_P"
    DelSheet (ptdata1)
    sheets(sheet).Select
    sheets(ActiveSheet.Name).Copy before:=sheets(1)
    ActiveSheet.Name = ptdata1
    Dim sheetname
    sheetname = "='" & sheet & "'!Q1:Q1"
    ActiveSheet.names.Add "PTSource", RefersToR1C1:=sheetname
    Selection.RemoveSubtotal
    Range("A1").Select
    nflds = Selection.CurrentRegion.Columns.Count
    nrows = Selection.CurrentRegion.Rows.Count
    If nrows < 2 Or nflds < 2 Then
       Range(addr).Select
       Exit Function
    End If
    For i = 1 To nflds
       opt = "Column " & i
       Cells(1, i).value = Replace(rd_iniFile(pivotini, "RDesc", opt), "~", " ")
    Next i
    If isOnly = 1 Then
      For i = nrows To 2 Step -1
        If Rows(i).EntireRow.Hidden Then
           Rows(i).Select
           Selection.Delete
        End If
      Next i
    Range("A1").Select
    nrows = Selection.CurrentRegion.Rows.Count
    End If
    ActiveSheet.visible = False
    
    If isSheet1("Stylesheet") Then
       isStyle = True
       sheets("Stylesheet").visible = True
       sheets("Stylesheet").Select
    Else
       sheets.Add
       ActiveSheet.Name = "StyleSheet"
       ActiveSheet.names.Add "Stylesheet", "1"
    End If
    For i = 1 To nflds
       opt = "Column " & i
       Cells(1, i).value = rd_iniFile(pivotini, "RDesc", opt)
       If Trim(Cells(1, i).Text) = "" Then
         nflds = i - 1
         Exit For
       End If
    Next i
    Range(Cells(1, 1), Cells(1, nflds)).Select
    Selection.Columns.AutoFit
    Range("A1").Select
    NewPivotMake = 1
    Range(addr).Select
    sheets(sheet).Select
    addr1 = ptdata1 & "!A1:" & ltrs(nflds).value & nrows
    ActiveSheet.names.Add "PT_Data", addr1
    Application.DisplayAlerts = True
End Function
Sub XPivotMasterRestoreCells()
    Dim book As String, xltfile As String, book2 As String, sheet As String
    Dim xltfile1 As String
    SetColorPallette
    sheet = ActiveSheet.Name
    Application.StatusBar = "Adding Stylesheet ..."
    xltfile = GetAppFolder & "\PivotColors.xlt"
    If Not exist(xltfile) Then
       xltfile1 = GetAppFolder & "\Xcelerator.xlt"
       Call FileCopy(xltfile1, xltfile)
    End If
    Application.EnableEvents = False
    If Application.ScreenUpdating Then Application.ScreenUpdating = False
    Application.DisplayAlerts = False
    book = ActiveWorkbook.Name
    Workbooks.Open Filename:=xltfile, Editable:=True
    book2 = ActiveWorkbook.Name
    Windows(book).Activate
    sheets("StyleSheet").visible = True
    sheets("Stylesheet").Select
    Windows(book2).Activate
    Range("A34:A99").Select
    Selection.Copy
    Windows(book).Activate
    Range("A34").Select
    Selection.PasteSpecial Paste:=xlFormats, Operation:=xlNone, SkipBlanks:= _
        False, Transpose:=False
    Range("A34").Select
    Windows(book2).Activate
    ActiveWorkbook.Close
    Windows(book).Activate

    sheets("Stylesheet").visible = False
    On Error Resume Next
    sheets(sheet).Select
    Application.StatusBar = False
    Application.DisplayAlerts = True
End Sub
 Sub CreatePivotTableP()
    Dim pRng As Range, lVis, ws As Worksheet, sRange As String
    Dim sheet As String, Title As String, tabcolor As Integer, subtitle As String
    On Error Resume Next
    If isSheetChart(ActiveSheet.Name) Then Exit Sub
    Application.EnableEvents = True
    If NoSheet Or isSheetChart(ActiveSheet.Name) Then Exit Sub
    If isXSoftcode > 1 Then
       Run "XCPLaunchSoftWrap"
       Exit Sub
    End If
    Dim frmini As String
    frmini = GetAppFolder & "\format.ini"
    Kill frmini
    frmini = GetAppFolder & "\pivot.ini"
    Kill frmini
    Application.EnableEvents = False
    Application.StatusBar = "Creating an EZ-Pivot PivotTable ..."
    Run "AddHdrStyles"
    SetColorPallette
    Title = getINIname("Title", True)
    If Title = "xxx" And getINIname("XTitle", True) <> "xxx" Then
       Title = getINIname("XTitle", True)
    End If
    If Title = "xxx" Then
       Title = ActiveSheet.Name
    End If
    ActiveSheet.names.Add "Title", Title
    subtitle = getINIname("Subtitle", True)
    
    If subtitle = "xxx" Then
       subtitle = ""
    End If
    ActiveSheet.names.Add "SubTitle", subtitle
    On Error Resume Next
    sheet = ActiveSheet.Name
    On Error Resume Next
    Dim i
    On Error Resume Next
    tabcolor = ActiveSheet.Tab.colorindex
    sheets("StyleSheet").visible = False
    i = NewPivotMake
    sheets("StyleSheet").visible = False
    sheets(sheet).Select
    If i = 0 Then Exit Sub
    sRange = getINIname("PT_Data", True)
    If sRange = "xxx" Then
        MsgBox "Could not determine PivotTable Data."
        Application.EnableEvents = True
        Exit Sub
    End If
    sheets(sheet).Select
    Dim totstr, nl, hidstr, wp As Worksheet
    Set wp = sheets(sheet)
    totstr = ""
    hidstr = ""
    Range("A1").Select
    
    For i = 1 To wp.UsedRange.Columns.Count
       totstr = totstr & "1"
       hidstr = hidstr & "F"
    Next i
    
    Set pRng = Range(sRange)
    lVis = pRng.Parent.visible
    If Application.ScreenUpdating Then Application.ScreenUpdating = False
    Application.DisplayAlerts = False
    pRng.Parent.visible = xlSheetVisible
    pRng.Parent.Select
    
    ActiveWorkbook.PivotCaches.Add(SourceType:=xlDatabase, SourceData:=sRange).CreatePivotTable _
        TableDestination:="", TableName:="PivotTable1"
    ActiveSheet.names.Add "Autoformat", "0"

    ActiveSheet.Tab.colorindex = tabcolor
    Dim sheetname
    sheetname = "='" & sheet & "'!Q1:Q1"
    
    ActiveSheet.names.Add "PivotSource", RefersToR1C1:=sheetname
    
    ActiveSheet.names.Add "totstr", totstr
    ActiveSheet.names.Add "Hidstr", hidstr
    With ActiveSheet
        .Move after:=Worksheets(Worksheets.Count)
        .PivotTableWizard TableDestination:=.Cells(3, 1)
        .Cells(3, 1).Select
        .PivotTables("PivotTable1").SmallGrid = False
        .Name = getPivotName()
    End With
    With ActiveSheet.PivotTables("PivotTable1")
        .HasAutoFormat = False
        .PageFieldOrder = xlOverThenDown
    End With
    pRng.Parent.visible = lVis
    Range("A5").Select
    ActiveWindow.FreezePanes = True
    Dim lastcol, lastrow
    On Error Resume Next
    Range("A3").Select
   
    sheets(ActiveSheet.Name).Move after:=sheets(sheet)
    Application.CommandBars("EZ Pivot").visible = False
    Application.CommandBars("PivotTable").visible = False
    Dim pg, dg
    If rd_ini1("DisplayGridLines") = 1 Then
      dg = "1"
    Else
      dg = "0"
    End If
    If rd_ini1("GridLines") = 1 Then
      pg = "1"
    Else
      pg = "0"
    End If
    ActiveSheet.names.Add "OtherPT", "1"
    ActiveSheet.names.Add "Condition", "1"
    ActiveSheet.names.Add "ColColr", "1"
    ActiveSheet.names.Add "IPivot", "1"
    ActiveSheet.names.Add "DisplayGridLine", dg
    ActiveSheet.names.Add "PrintGridLine", pg
    ActiveSheet.names.Add "MapLine", rd_ini("OutputLine")
    On Error Resume Next
    Dim j, opt As String, sheet1
    Dim drillvisible1 As String, DrillTotals As String
    drillvisible1 = GetSheetVar("FormattedData", "HideStr")
    drillvisible1 = "'"
    For i = 1 To FilterCol
       opt = "Column " & i
       drillvisible1 = drillvisible1 & rd_ini("Hide", opt)
    Next i
    ActiveSheet.names.Add "DrillVisible", drillvisible1
    DrillTotals = "'"
  

    For i = 1 To FilterCol
       opt = "Column " & i
       DrillTotals = DrillTotals & rd_ini("Sum", opt)
    Next i
    ActiveSheet.names.Add "DrillTotals", DrillTotals
 '   Application.ScreenUpdating = True
    drillVisible = "Pivotcolor" & Replace(ActiveSheet.Name, "PT", "")
    ActiveSheet.Tab.colorindex = tabcolor 'CInt(ReadKeyValue(drillvisible))
    
    Dim isOk As Boolean, x, EnoughValues As Boolean
    AutoPivotCreate = True
    ActiveSheet.names.Add "PivotRowBand", ReadKeyValue("PivotRowBand")
    On Error Resume Next
    sheets("StyleSheet").visible = False
    ActiveWindow.DisplayGridlines = False
    ActiveWindow.View = xlPageBreakPreview
    ActiveWindow.View = xlNormalView
    ActiveSheet.DisplayAutomaticPageBreaks = False
    EnoughValues = SetPivotValues
    x = ReadKeyValue("UseExcelLayout")
    If x <> "1" And EnoughValues Then
      EZChartMake = True
    End If
    PivotUpdate = True
    isOk = XPivotLayouts
    If x <> "1" Then EZChartMake = False
    AutoPivotCreate = False
    If Not isOk Then
       Application.DisplayAlerts = False
       ActiveWindow.SelectedSheets.Delete
       Application.DisplayAlerts = True
       sheets(sheet).Select
       Application.EnableEvents = True
       Application.StatusBar = False
       PivotUpdate = False
       Exit Sub
    End If
    Application.StatusBar = "Finishing off the EZ-Pivot Formatting ..."
    SetFormatData
   
      For i = 1 To ActiveSheet.PivotTables(1).DataFields.Count
        nl = GetPivotCol(ActiveSheet.PivotTables(1).DataFields(i).Name)
        If nl > 0 Then Mid(totstr, nl, 1) = "9"
      Next i
   
    ActiveSheet.names.Add "totstr", totstr
    ActiveSheet.names.Add "Hidstr", hidstr
    SetCreateTotals
    Range("A2").Select
    NoActivationDisplay = False
    Dim ndata As Integer
    On Error Resume Next
    Application.CommandBars("EZ Pivot").visible = True
    Application.CommandBars("Pivot Tool").visible = False
    If CInt(Application.version) < 12 Then
       ActiveWorkbook.ShowPivotTableFieldList = False
    End If
    If getINIname() = "Pivot.ini" Then
          ActiveWorkbook.names("Ini_file").Delete
          ActiveWorkbook.names("Inifile").Delete
          ActiveWorkbook.names("Initemp").Delete
          ActiveWorkbook.names("Inifiletemp").Delete
          sheets(ActiveSheet.Name).Select
    End If
    Dim pt As String
    pt = ActiveSheet.Name
    sheets(sheet).Select
    sheets(pt).Select
    ActiveSheet.names.Add "Title", GetSheetVar(sheet, "Title")
    ActiveSheet.names.Add "XTitle", GetSheetVar(sheet, "XTitle")
    Range("A2").Select
    XPivotAutoSort
    
    If ReadKeyValue("IsShortName") = "1" Then
       Run "SetDataDescShort"
    End If

    If ReadKeyValue("AskedCompanyName") <> "1" And Not DemoMode Then
       Application.ScreenUpdating = True
       CompanyUser
       Call WriteKeyValueP("AskedCompanyName", "1")
       If Application.ScreenUpdating Then Application.ScreenUpdating = False
    End If
    If ReadKeyValue("SetPageSetup") <> "0" Then
       XLPApplyPageFormat
    End If
    PageCompanyUser
    Dim nrows1, n, iscolfld
    iscolfld = ActiveSheet.PivotTables(1).DataPivotField.Orientation
    n = ActiveSheet.PivotTables(1).DataFields.Count
    SetMargins
    FormatGrandTotal
    If Application.version > 11 Then
       ActiveWorkbook.ShowPivotTableFieldList = True
       PivotUpdate = True
    End If
    FormatColumnFilter
    Range("A3").Select
    If CInt(Application.version) > 11 Then
       ActiveWorkbook.ShowPivotTableFieldList = True
    End If
    Application.DisplayAlerts = True
    Application.EnableEvents = True
    Application.StatusBar = False
    PivotUpdate = False
    Exit Sub
badpivot:
    Application.EnableEvents = True
    MsgBox "Error creating the Pivot Table. - " & Err.Number & " - " & Err.Description
    Err.Clear
End Sub
Sub X1PivotFormats1()
    Dim addr As String
    On Error Resume Next
    addr = Selection.address
    If addr = "" Then addr = "A1"
    Application.StatusBar = "Re-Applying Pivot Formats ..."
    XPivotFormat2
    Application.StatusBar = "Applying Page Formatting ..."
    SetMargins
    Applyformat
 '   Run "XLPApplyPageRun"
    Application.StatusBar = False
    Range(addr).Select
    If Application.ScreenUpdating Then Application.ScreenUpdating = False
    ActiveWindow.View = xlPageBreakPreview
    ActiveWindow.View = xlNormalView
    ActiveSheet.DisplayAutomaticPageBreaks = False
End Sub
Sub XPivotAutoSort()
    Dim nsort As Integer, ws As Worksheet, source As String, ncol As Integer, i, j
    Dim value As String, k, Name
    On Error Resume Next
    source = getINIname("PivotSource", True)
    If Not isSheet1(source) Then Exit Sub
    Set ws = sheets(source)
    ncol = ws.UsedRange.Columns.Count
    If ActiveSheet.PivotTables(1).PageFields.Count > 0 Then
       Name = ActiveSheet.PivotTables(1).PageFields(1).Name
       For i = 1 To ncol
          If Name = ws.Cells(1, i).value Then
             ActiveSheet.names.Add "Sort1", i
             nsort = 1
             Exit For
          End If
       Next i
    End If
    If ActiveSheet.PivotTables(1).RowFields.Count > 0 Then
    For j = 1 To ActiveSheet.PivotTables(1).RowFields.Count
       For i = 1 To ActiveSheet.PivotTables(1).RowFields.Count
          
            If ActiveSheet.PivotTables(1).RowFields(i).Position = j Then
              Name = ActiveSheet.PivotTables(1).RowFields(i).Name
              For k = 1 To ncol
                If Name = ws.Cells(1, k).value Then
                   Exit For
                End If
              Next k
              If k <= ncol Then
                nsort = nsort + 1
                value = "Sort" & nsort
                ActiveSheet.names.Add value, k
              End If
              Exit For
            End If
          Next i
       Next j
    End If
    nsort = nsort + 1
    If ActiveSheet.PivotTables(1).columnfields.Count < 1 Then Exit Sub
    Name = ActiveSheet.PivotTables(1).columnfields(1).Name
    For k = 1 To ncol
         If Name = ws.Cells(1, k).value Then
               Exit For
          End If
    Next k
    value = "Sort" & nsort
    ActiveSheet.names.Add value, k
    
    
End Sub
Sub XPivotAutoTotals()
    Dim i, j, Name As String, wp As Worksheet, totstr As String, n, k
    Dim isCount As Boolean
    
    On Error Resume Next
    Dim x, source
    x = ActiveSheet.PivotTables(1).SourceData
    k = InStr(x, "!")
    If k > 0 Then
       source = Mid(x, 1, k - 1)
    End If
    source = Replace(source, "'", "")
    Set wp = sheets(source)
    n = wp.UsedRange.Columns.Count
    totstr = getINIname("Totstr", True)
    If totstr = "xxx" Then
       totstr = ""
       For i = 1 To n
         totstr = totstr & "1"
       Next i
    End If
    For i = 1 To ActiveSheet.PivotTables(1).DataFields.Count
       Name = ActiveSheet.PivotTables(1).DataFields(i).Name
       If InStr(Name, "Count of") > 0 Then
          isCount = True
       Else
          isCount = False
       End If
       k = InStr(Name, " of ")
       If k > 0 Then
         Name = Mid(Name, k + 4)
         For j = 1 To n
             If wp.Cells(1, j).Text = Name Then
                If isCount Then
                   Mid(totstr, j, 1) = "9"
                Else
                   Mid(totstr, j, 1) = "9"
                End If
                Exit For
             End If
         Next j
       End If
    Next i
    ActiveSheet.names.Add "Totstr", totstr
End Sub
Sub PivotSymbol()
    Dim i, j, symbol, symbols() As String, mixed As Boolean
    On Error Resume Next
    symbol = "$"
    If getINIname("IPivot", True) = "xxx" Then Exit Sub
    ReDim Preserve symbols(0)
    symbols(0) = "[$|fffd|"
    ReDim Preserve symbols(1)
    symbols(1) = "$"
    ReDim Preserve symbols(2)
    symbols(2) = "%"
    For i = 1 To ActiveSheet.PivotTables(1).DataFields.Count
      For j = 0 To 2
        If InStr(ActiveSheet.PivotTables(1).DataFields(i).numberformat, symbols(j)) > 0 Then
           If symbol <> "" And symbol <> symbols(j) Then mixed = True
           If symbol = "" Then symbol = symbols(j)
           
        End If
      Next j
    Next i
    ActiveSheet.names.Add "Symbol", symbol
End Sub
Function IsDate2(numberformat As String) As Boolean
    IsDate2 = True
    If InStr(numberformat, "dddd, mmmm dd, yyyy") > 0 Then Exit Function
    If InStr(numberformat, "d-mmm") > 0 Then Exit Function
    If InStr(numberformat, "d-mmm-yy") > 0 Then Exit Function
    If InStr(numberformat, "dd-mmm-yy") > 0 Then Exit Function
    If InStr(numberformat, "mmm-yy") > 0 Then Exit Function
    If InStr(numberformat, "m/d/yy") > 0 Then Exit Function
    If InStr(numberformat, "d-mmm-yyyy") > 0 Then Exit Function
    If InStr(numberformat, "mm/dd/yyyy") > 0 Then Exit Function
    If InStr(numberformat, "m/d/yyyy") > 0 Then Exit Function
    If InStr(numberformat, "mm/dd/yyyy") > 0 Then Exit Function
    If InStr(numberformat, "mm/d/yyyy") > 0 Then Exit Function
    If InStr(numberformat, "mmmmm-yy") > 0 Then Exit Function
    If InStr(numberformat, "mmmmm") > 0 Then Exit Function
    If InStr(numberformat, "m/d/yyyy") > 0 Then Exit Function
    IsDate2 = False
End Function
Function getPivotName() As String
    Dim sPName As String, i As Integer, PW As Worksheet
    On Error Resume Next
    For i = 1 To 1000
        sPName = "PT" & i
        Set PW = ActiveWorkbook.Worksheets(sPName)
        If Err.Number <> 0 Then
            Err.Clear
            getPivotName = sPName
            Exit Function
        End If
    Next
    getPivotName = "PT" & format(Now, "hhmmss")
End Function
Function SetPivotValues() As Boolean
    On Error Resume Next
    Dim sheet As String, sheet1 As String, i As Integer, j As Integer, ndata
    Dim buf, desc As String, ws As Worksheet, page() As String, row() As String
    Dim col() As Variant, data() As Variant, formt() As String
    Dim ispage As Boolean, iscolumn As Boolean, isrow As Boolean, isdata As Boolean
    If ActiveSheet.PivotTables.Count <> 1 Then Exit Function
    sheet = FStrip(getINIname("PivotSource", True))
    If sheet = "" Then Exit Function
    Set ws = sheets(sheet)
    sheet1 = ActiveSheet.Name
    j = CInt(GetSheetVar(sheet, "X_PageNo1"))
    ReDim Preserve page(0)
    If j > 0 Then
       page(0) = ws.Cells(1, j).Text
       ispage = True
    End If
    j = 0
    ReDim Preserve col(0)
    j = CInt(GetSheetVar(sheet, "X_ColNo1"))
    If j > 0 Then
       iscolumn = True
       col(0) = ws.Cells(1, j).Text
    End If
    j = 0
    Dim nrow As Integer
    For i = 1 To 6
      j = 0
      j = CInt(GetSheetVar(sheet, "X_RowNo" & i))
      If j > 0 Then
         ReDim Preserve row(i - 1)
         row(i - 1) = ws.Cells(1, j).Text
         isrow = True
         nrow = i
      Else
         Exit For
      End If
    Next i
   
    
    For i = 1 To 6
      j = 0
      j = CInt(GetSheetVar(sheet, "X_DataNo" & i))
      If j > 0 Then
         isdata = True
        ReDim Preserve data(i)
        ReDim Preserve formt(i)
        data(i) = ws.Cells(1, j).Text
        If Not IsNumeric(ws.Cells(2, j).value) Then
           formt(i) = "#,##0"
        End If
        ndata = i
      Else
        Exit For
      End If
    Next i
   
    If page(0) <> "" And col(0) <> "" And row(0) <> "" Then
       ActiveSheet.PivotTables(1).AddFields RowFields:=row, columnfields:=col(0), _
          PageFields:=page(0)
    ElseIf row(0) <> "" And col(0) <> "" Then
       ActiveSheet.PivotTables(1).AddFields columnfields:=col(0), RowFields:=row
    ElseIf page(0) <> "" And col(0) <> "" Then
       ActiveSheet.PivotTables(1).AddFields columnfields:=col(0), PageFields:=page(0)
    Else
       ActiveSheet.PivotTables(1).AddFields columnfields:=col(0), RowFields:=row
    End If
    For i = 1 To nrow
       With ActiveSheet.PivotTables(1).PivotFields(row(i - 1))
        .Orientation = xlRowField
        .Position = i
    End With
    Next i
    For i = 1 To ndata
       ActiveSheet.PivotTables(1).PivotFields(data(i)).Orientation = xlDataField
       ActiveSheet.PivotTables(1).PivotFields(data(i)).Position = i
       If formt(i) <> "" Then
         ActiveSheet.PivotTables(1).PivotFields(data(i)).numberformat = formt(i)
       End If
    Next i
    If Not isdata Then Exit Function
    If Not isrow And Not iscolumn Then Exit Function
    SetPivotValues = True
End Function
 Function XPivotLayouts(Optional DemoMode As Boolean = False)
    On Error Resume Next
    Dim addr As String, dlgrez As Variant, dlg1 As Variant, sheet As String
    sheet = ActiveSheet.Name
    addr = ActiveCell.address
    If Application.ScreenUpdating Then Application.ScreenUpdating = False
    Dim ptdata1 As String
    If getINIname("PivotSource", True) <> "xxx" Then
      ptdata1 = getINIname("PivotSource", True) & "_P"
    Else
      ptdata1 = ActiveSheet.Name & "_P"
    End If
    
    sheets(ptdata1).visible = True
    If Not AutoPivotCreate Then XPivotMakePT
    sheets(ptdata1).visible = False
    sheets(sheet).Select
    Application.CommandBars("PivotTable").visible = False
    ActiveWorkbook.ShowPivotTableFieldList = False
    If DemoMode Then
       MsgBox ("This is a typical pivottable format from Excel BEFORE Formatting ...")
    End If
    
    If Not EZChartMake Then
      If CInt(Application.version) > 11 Then
 '          ActiveWorkbook.ShowPivotTableFieldList = True
           XPivotLayouts = True
           ActiveSheet.names.Add "IPivot", "1"
 '          Exit Function
           dlgrez = True
      Else
         Application.ScreenUpdating = True
         SendKeys "%(L)"
         dlgrez = Application.Dialogs(xlDialogPivotTableWizard).show
         Application.CommandBars("PivotTable").visible = False
      End If
    Else
      dlgrez = True
    End If
    Application.ScreenUpdating = False
    Dim ncolstart As Integer, buf As String, buf1 As String
    buf = ActiveSheet.PivotTables(1).columnfields(1).Name
    buf1 = GetPivotDesc1(buf)
    If buf1 <> "" Then
       ncolstart = ActiveSheet.PivotTables(1).RowFields.Count
       ActiveSheet.PivotTables(1).columnfields(1).Name = buf1
    End If
    
    If dlgrez Or dlg1 Then
        XPivotLayouts = True
        WritePivotValues
    Else
        Exit Function
    End If
  
    PivotSymbol
    X1PivotPageAll
    SetEmbedChart
    If ReadKeyValue("IsShortName") = "1" Then
       Run "SetDataDescShort"
    End If

    ActiveSheet.names.Add "PivotValCur", "0"
    PivotSetValue
    XPivotFormat2
    
    Application.CommandBars("EZ Pivot").visible = True
    If Application.ScreenUpdating Then Application.ScreenUpdating = False
    FormatGrandTotal
End Function
Sub SetFormatData()
    On Error Resume Next
    Dim buf As String, i, ndata As Integer, sheet As String, j, ws As Worksheet
    Dim data() As String
    Dim formt() As String
    If Application.ScreenUpdating Then Application.ScreenUpdating = False
    sheet = FStrip(getINIname("PivotSource", True))
    Set ws = sheets(sheet)
    For i = 1 To 6
      j = 0
      j = CInt(GetSheetVar(sheet, "X_DataNo" & i))
      If j > 0 Then
        ReDim Preserve data(i)
        ReDim Preserve formt(i)
        data(i) = ws.Cells(1, j).Text
        If Not IsNumeric(ws.Cells(2, j).value) Or ws.Cells(2, j).numberformat = "@" Then
           formt(i) = "#,##0"
        End If
        ndata = i
      Else
        Exit For
      End If
    Next i
    Dim desc As String
    For i = 1 To ndata
       If formt(i) <> "" Then
         desc = ActiveSheet.PivotTables(1).DataFields(i).Name
         ActiveSheet.PivotTables(1).PivotFields(desc).numberformat = formt(i)
       End If
    Next i
End Sub
Function GetPivotCol(desc As String) As Integer
    Dim i, wp As Worksheet, desc1
    On Error Resume Next
    desc1 = desc
    i = InStr(Trim(desc1), " of ")
    If i > 0 Then
       desc1 = Mid(desc1, i + 4)
    End If
    Trim desc1
    Dim ptdata1 As String
    If ActiveSheet.PivotTables.Count = 1 Then
      ptdata1 = FStrip(getINIname("PivotSource", True)) & "_P"
    Else
      ptdata1 = ActiveSheet.Name & "_P"
    End If
    Set wp = sheets(ptdata1)
    For i = 1 To wp.UsedRange.Columns.Count
       If Trim(wp.Cells(1, i).Text) = Trim(desc1) Then
          GetPivotCol = i
          Exit Function
       End If
    Next i
End Function
Sub XPivotMakePTF()
    Dim sheet, paddr As String, nc As Integer
    sheet = ActiveSheet.Name
    On Error Resume Next
    sheets(PTDATA).visible = True
    sheets(PTDATA).Select
    Range("A1").Select
    If FilterCol > 0 Then nc = 1
    paddr = PTDATA & "!R1C1:R" & Selection.CurrentRegion.Rows.Count _
            & "C" & Selection.CurrentRegion.Columns.Count - nc
    sheets(PTDATA).visible = False
    sheets(sheet).Select
    Range("A3").Select
    ActiveSheet.PivotTableWizard SourceType:=xlDatabase, SourceData:=paddr
    sheets(sheet).Select
    ActiveSheet.PivotTables(1).RefreshTable
    ActiveSheet.PivotTables(1).PivotCache.Refresh
    Application.CommandBars("PivotTable").visible = False
    XPivotFormat2
End Sub
Sub XPivotMakePT()
    Dim sheet, paddr As String, wp As Worksheet, wf As Worksheet
    sheet = ActiveSheet.Name
    On Error Resume Next
    Dim ptdata1 As String
    If getINIname("PivotSource", True) <> "xxx" Then
      ptdata1 = getINIname("PivotSource", True) & "_P"
    Else
      ptdata1 = ActiveSheet.Name & "_P"
    End If
    Set wp = sheets(ptdata1)
    wp.visible = True
    wp.Select
    Dim nc As Integer
    If FilterCol > 0 Then nc = 1
    Range("A1").Select
    paddr = ptdata1 & "!R1C1:R" & Selection.CurrentRegion.Rows.Count _
            & "C" & Selection.CurrentRegion.Columns.Count - nc
    wp.visible = False
    sheets(sheet).Select
    Range("A3").Select
    ActiveSheet.PivotTableWizard SourceType:=xlDatabase, SourceData:=paddr
    XPivotFix
    ActiveSheet.PivotTableWizard SourceType:=xlDatabase, SourceData:=paddr
    ActiveSheet.PivotTables(1).RefreshTable
    ActiveSheet.PivotTables(1).PivotCache.Refresh
    Application.CommandBars("PivotTable").visible = False
End Sub
Function GetPivotDesc1(Name As String) As String
    Dim i, buf, wp As Worksheet, opt As String
    On Error Resume Next
    Dim ptdata1 As String
    ptdata1 = ActiveSheet.Name & "_P"
    Set wp = sheets(ptdata1)
    For i = 1 To wp.UsedRange.Columns.Count
       If Name = Replace(wp.Cells(1, i).value, chr(10), " ") Then
          opt = "Column " & i
          If rd_ini("PCDesc", opt) <> "" Then
             GetPivotDesc1 = Replace(rd_ini("PCDesc", opt), "~", chr(10))
          Else
             GetPivotDesc1 = Replace(rd_ini("RDesc", opt), "~", chr(10))
          End If
          Exit Function
       End If
    Next i
End Function
Sub XPivotFix()
    Dim coldsc As String, j As Integer, wp As Worksheet, rowarr() As Variant, datarr() As Variant
    Dim ndata, nrow
    Dim pagdsc As String, opt As String, buf As String, i
    If getINIname("IPivot", True) = "xxx" Then Exit Sub
    On Error Resume Next
    nrow = ActiveSheet.PivotTables(1).RowFields.Count
    For j = 1 To nrow
       ReDim Preserve rowarr(j - 1)
       rowarr(j - 1) = ActiveSheet.PivotTables(1).RowFields(j).Name
       coldsc = rowarr(j - 1)
       buf = "PivotRowNo" & j
       i = CInt(getINIname(buf, True))
       If i = 0 Then
          coldsc = ActiveSheet.PivotTables(1).RowFields(j).Name
          i = PivotFindValue(coldsc)
       End If
'       ActiveSheet.PivotTables(1).RowFields(j).delete
       ActiveSheet.names.Add buf, j
    Next j
    Dim ptdata1 As String
   
    If getINIname("PivotSource", True) <> "xxx" Then
      ptdata1 = getINIname("PivotSource", True) & "_P"
    Else
      ptdata1 = ActiveSheet.Name & "_P"
    End If
    Set wp = sheets(ptdata1)
    
    j = CInt(getINIname("PivotColNo1", True))
    If j = 0 Then
       coldsc = ActiveSheet.PivotTables(1).columnfields(1).Name
       j = PivotFindValue(coldsc)
    End If
    opt = "Column " & j
    pagdsc = ActiveSheet.PivotTables(1).PageFields(1).Name
    coldsc = GetDesc(j)

    Range("A3").Select
    ActiveSheet.PivotTables(1).RefreshTable
    ActiveSheet.PivotTables(1).PivotCache.Refresh
    If pagdsc <> "" Then
       ActiveSheet.PivotTables(1).AddFields RowFields:=rowarr, columnfields:=coldsc, _
          PageFields:=pagdsc
    Else
       ActiveSheet.PivotTables(1).AddFields columnfields:=coldsc, RowFields:=rowarr

    End If
End Sub
Function GetDesc(col As Integer) As String
    Dim opt As String, dsc As String
    opt = "Column " & col
    GetDesc = Replace(rd_ini("PCDesc", opt), "~", " ")
    If GetDesc <> "" Then Exit Function
    GetDesc = Replace(rd_ini("RDesc", opt), "~", " ")
End Function
Function isRowWalk() As Boolean
    Dim psheet As String, sheet As String
    If getINIname("IPivot", True) <> "xxx" Then
      psheet = ActiveSheet.Name
    Else
      psheet = FindPivotTable
    End If
    On Error Resume Next
    If GetSheetVar(psheet, "RowWalk") <> "1" Then
       Exit Function
    End If
    isRowWalk = True
End Function
Sub SetIconPivot()
     Dim xcelcontrol
     On Error Resume Next
     Dim IRowWalk As Boolean, Not2000 As Boolean
     If CInt(ReadKeyValue("OfficeNo")) > 9 Then Not2000 = True
     IRowWalk = isRowWalk
     With Application.CommandBars("EZ Pivot")
        Set xcelcontrol = .Controls("Page All")
        If IRowWalk Then
           xcelcontrol.TooltipText = "Set Row Walk Filters to All"
        Else
           xcelcontrol.TooltipText = "Set Page / Row /Column Walk Filters to All"
        End If
        Set xcelcontrol = .Controls("Set Pivot Row")
        If IRowWalk Then
          xcelcontrol.TooltipText = "Walk Page / Row / Column Selection"
        Else
          xcelcontrol.TooltipText = "Walk Page / Row / Column Selection"
        End If
        If isPivotchart(ActiveSheet.Name) Then
          Application.CommandBars("EZ Pivot").Controls("XPivotZeroAdd").Enabled = False
          Application.CommandBars("EZ Pivot").Controls("XPivotZeroSub").Enabled = False
          Application.CommandBars("EZ Pivot").Controls("XPivotAddDollar").Enabled = False
          Application.CommandBars("EZ Pivot").Controls("XPivotFormats").Enabled = False
          
        Else
          Application.CommandBars("EZ Pivot").Controls("Set Pivot Row").Enabled = True
          Application.CommandBars("EZ Pivot").Controls("XPivotZeroAdd").Enabled = True
          Application.CommandBars("EZ Pivot").Controls("XPivotZeroSub").Enabled = True
          Application.CommandBars("EZ Pivot").Controls("XPivotAddDollar").Enabled = True
          Application.CommandBars("EZ Pivot").Controls("XPivotFormats").Enabled = True
        End If
        Set xcelcontrol = .Controls("Previous Page")
      End With
      Application.CommandBars("EZ Pivot").Controls(11).Enabled = Not2000
      Application.CommandBars("EZ Pivot").Controls(12).Enabled = Not2000
      Application.CommandBars("EZ Pivot").visible = True
End Sub
Sub Applyformat()
    On Error Resume Next
    Application.ScreenUpdating = False
    If getINIname("XPortrait", True) <> "0" Then
       If getINIname("XPortrait", True) = "1" Then
         ActiveSheet.PageSetup.Orientation = xlPortrait
         ActiveSheet.PageSetup.fittopagetall = True
       ElseIf getINIname("XPortrait", True) = "2" Then
         ActiveSheet.PageSetup.Orientation = xlLandscape
       End If
       ActiveSheet.PageSetup.FitToPagesWide = 1
       ActiveSheet.PageSetup.FitToPagesTall = False
       ActiveSheet.PageSetup.zoom = False
       Exit Sub
    End If
    If Application.ScreenUpdating Then Application.ScreenUpdating = False
    ActiveSheet.PageSetup.Orientation = xlPortrait
    Dim nrows As Long, buf, i, j, FitToPage As Integer, zoom, vView, addr
    Dim ncols, printarea
    If Application.ScreenUpdating Then Application.ScreenUpdating = False
    Range("A3").Select
    loadltrs
    vView = ActiveWindow.View
    FitToPage = CInt(ReadKeyValue("FitToPage"))
    ActiveSheet.ResetAllPageBreaks
    ActiveSheet.PageSetup.Order = xlOverThenDown
    ActiveWindow.View = xlNormalView
    ActiveSheet.PageSetup.FitToPagesWide = False
    ActiveSheet.PageSetup.FitToPagesTall = False
    ActiveSheet.PageSetup.zoom = FitToPage
    
    ActiveSheet.DisplayAutomaticPageBreaks = True
    ActiveWindow.View = xlNormalView
    ActiveWindow.View = xlPageBreakPreview
    If ActiveSheet.VPageBreaks.Count < 1 Then
      ActiveWindow.View = xlNormalView
      ActiveSheet.PageSetup.zoom = False
      ActiveSheet.PageSetup.FitToPagesWide = 1
      ActiveSheet.PageSetup.FitToPagesTall = False
    Else
      For i = 100 To FitToPage Step -1
        ActiveSheet.PageSetup.zoom = i
        ActiveWindow.View = xlPageBreakPreview
        j = ActiveSheet.VPageBreaks.Count + 1
        ActiveWindow.View = vView
        If j < 2 Then
          Exit For
        End If
       Next i
    End If
   
    If j < 2 Then
       ActiveSheet.DisplayAutomaticPageBreaks = False
       Exit Sub
    End If
    ActiveSheet.PageSetup.Orientation = xlLandscape
    For i = 100 To FitToPage Step -1
       ActiveSheet.PageSetup.zoom = i
       ActiveWindow.View = xlPageBreakPreview
       j = ActiveSheet.VPageBreaks.Count + 1
       ActiveWindow.View = vView
       If j < 2 Then
          Exit For
       End If
    Next i
    ActiveWindow.View = xlPageBreakPreview
    ActiveWindow.View = xlNormalView
    
    ActiveSheet.DisplayAutomaticPageBreaks = False
End Sub
Sub PivotSetValue()
    On Error Resume Next
    Dim j As Integer, n As Integer, k, toolname As String
    toolname = "EZ Pivot"
    PivotPageAll1
    If ActiveSheet.PivotTables(1).PageFields.Count > 0 Then n = 1
    j = Application.CommandBars.ActionControl.index
    If j = 0 Then
       j = getINIname("PivotValSet", True)
       PivotValCur = getINIname("PivotValCur", True)
    End If
    If DemoMode Or j = 0 Or getINIname("PivotValCur", True) = "0" Then
      PivotValCur = 1
    End If
    If PivotValCur <> j Then
       PageValuesLoad
       RowValuesLoad
       If j > 0 Then PivotPageAll1
    End If
    If PivotColCur = 0 Then
       If DemoMode Or getINIname("PivotValCur", True) = "0" Then j = 1
    End If
    ActiveSheet.names.Add "PivotValCur", j
    ActiveSheet.names.Add "PivotColCur", "0"
    PivotValCur = j
    PivotColCur = 0
    Dim i
    Application.CommandBars(toolname).Controls(8).FaceId = 134
    Application.CommandBars(toolname).Controls(9).FaceId = 135
    If j = 1 And n = 1 Then
      Application.CommandBars(toolname).Controls(8).TooltipText = "Walk " & ActiveSheet.PivotTables(1).PageFields(1).Name & " Up"
      Application.CommandBars(toolname).Controls(9).TooltipText = "Walk " & ActiveSheet.PivotTables(1).PageFields(1).Name & " Down"
    Else
      Application.CommandBars(toolname).Controls(8).TooltipText = "Walk " & ActiveSheet.PivotTables(1).RowFields(j - n).Name & " Up"
      Application.CommandBars(toolname).Controls(9).TooltipText = "Walk " & ActiveSheet.PivotTables(1).RowFields(j - n).Name & " Down"
    End If
    If j = 1 And n = 1 Then
       Range("A1").Select
 '      Cells(1, 1).Select
       Exit Sub
    End If
    Dim m As Integer, z As Integer
    k = ActiveSheet.PivotTables(1).RowFields.Count
    z = ActiveSheet.PivotTables(1).DataFields.Count
    If ActiveSheet.PivotTables(1).columnfields.Count = 0 And z > 1 Then
       m = 1
    End If
    If ActiveSheet.PivotTables(1).DataFields.Count > 1 Then k = k - 1
    If k = 0 Then k = 1
    For i = 1 To k
       If Cells(4 - m, i).Text = ActiveSheet.PivotTables(1).RowFields(j - n).Name Then
         Cells(5 - m, i).Select
         Exit For
       End If
    Next i
End Sub
Sub SetCreateTotals()
    On Error Resume Next
    Dim pivotsource As String, ndata As Integer, totstr As String, ws As Worksheet
    totstr = getINIname("Totstr", True)
    pivotsource = FStrip(getINIname("PivotSource", True))
    Set ws = sheets(pivotsource)
    Dim i, desc As String, j, buf
    For i = 1 To ws.UsedRange.Columns.Count
       For j = 1 To ActiveSheet.PivotTables(1).DataFields.Count
          buf = Trim(ActiveSheet.PivotTables(1).DataFields(j).Name)
          If InStr(buf, ws.Cells(1, i).Text) > 0 Then
            If InStr(buf, "Count") > 0 Then  'Or ws.Cells(2, i).numberformat = "@" Then
              Mid(totstr, i, 1) = "3"
            Else
             Mid(totstr, i, 1) = "9"
            End If
          End If
       Next j
    Next i
    ActiveSheet.names.Add "Totstr", totstr
End Sub
Function isPivotRowN() As Boolean
    On Error Resume Next
    isPivotRowN = True
    Dim buf As String, i, j As Integer
    
    For i = 1 To 6
      buf = "X_RowNo" & i
      j = 0
      j = CInt(getINIname(buf, True))
      If j = ActiveCell.column Then
        Exit Function
      End If
    Next i
    isPivotRowN = False
End Function
Function isPivotDataN() As Boolean
    On Error Resume Next
    isPivotDataN = True
    Dim buf As String, i, j As Integer
    For i = 1 To 6
      buf = "X_DataNo" & i
      j = 0
      j = CInt(getINIname(buf, True))
      If j = ActiveCell.column Then
        Exit Function
      End If
    Next i
    isPivotDataN = False
End Function
Sub ResetPivotRows()
    On Error Resume Next
    Dim i, j, lastdata As Integer
    For i = 6 To 1 Step -1
       If getINIname("X_RowNo" & i, True) <> "xxx" Then Exit For
    Next i
    lastdata = i
    For i = 1 To lastdata
       If CInt(getINIname("X_RowNo" & i, True)) = 0 Then
          j = i
          Exit For
       End If
    Next i
    If lastdata > 1 Then
      For i = j To lastdata - 1
       ActiveSheet.names.Add "X_RowNo" & j, getINIname("X_RowNo" & i + 1, True)
      Next i
      ActiveSheet.names("X_RowNo" & lastdata).Delete
    End If
End Sub

Sub SetPivotRow()
    On Error Resume Next
    Dim buf As String, i, j As Integer, flag As String
    flag = "0"
    If isPivotRowN Then flag = "1"
    If flag = "1" Then
      For i = 1 To 6
        buf = "X_RowNo" & i
        j = 0
        j = CInt(getINIname(buf, True))
        If j = ActiveCell.column Then
          ActiveSheet.names(buf).Delete
          ResetPivotRows
          Exit Sub
        End If
      Next i
    Else
      For i = 1 To 6
        buf = "X_RowNo" & i
        j = 0
        j = CInt(getINIname(buf, True))
        If j = 0 Then
          ActiveSheet.names.Add buf, ActiveCell.column
          Exit Sub
        End If
      Next i
    
    End If
End Sub
Function isPivotPage() As Boolean
    On Error Resume Next
    Dim buf As String, i As Integer
    buf = "X_PageNo1"
    i = CInt(getINIname(buf, True))
    If i = ActiveCell.column Then
       isPivotPage = True
    End If
End Function
Function isPivotColumn() As Boolean
    On Error Resume Next
    Dim buf As String, i As Integer
    buf = "X_ColNo1"
    i = CInt(getINIname(buf, True))
    If i = ActiveCell.column Then
       isPivotColumn = True
    End If
End Function
Sub ShutOffRow()
    On Error Resume Next
    Dim i, isDelete As Boolean
    For i = 1 To 6
      If getINIname("X_RowNo" & i, True) = ActiveCell.column Then
       ActiveSheet.names("X_RowNo" & i).Delete
       isDelete = True
       Exit For
      End If
    Next i
    If isDelete Then
       ResetPivotRows
    End If
End Sub
Sub ShutOffCol()
    On Error Resume Next
    If getINIname("X_ColNo1", True) = ActiveCell.column Then
       ActiveSheet.names("X_ColNo1").Delete
    End If
End Sub
Sub ResetPivotData()
    On Error Resume Next
    Dim i, j, lastdata As Integer
    For i = 6 To 1 Step -1
       If getINIname("X_DataNo" & i, True) <> "xxx" Then Exit For
    Next i
    lastdata = i
    For i = 1 To lastdata
       If CInt(getINIname("X_DataNo" & i, True)) = 0 Then
          j = i
          Exit For
       End If
    Next i
    If lastdata > 1 Then
      For i = j To lastdata - 1
       ActiveSheet.names.Add "X_DataNo" & j, getINIname("X_DataNo" & i + 1, True)
      Next i
      ActiveSheet.names("X_DataNo" & lastdata).Delete
    End If
End Sub
Sub ShutOffData()
    On Error Resume Next
    Dim i, isDelete As Boolean
    For i = 1 To 6
      If getINIname("X_DataNo" & i, True) = ActiveCell.column Then
       ActiveSheet.names("X_DataNo" & i).Delete
       isDelete = True
       Exit For
      End If
    Next i
    If isDelete Then
       ResetPivotData
    End If
End Sub
Sub SetPivotPage()
    On Error Resume Next
    Dim buf As String, i
    buf = "X_PageNo1"
    If Not isPivotPage Then
      ActiveSheet.names.Add buf, ActiveCell.column
      ShutOffRow
      ShutOffCol
      ShutOffData
    Else
      ActiveSheet.names.Add buf, "0"
    End If
End Sub
Sub SetPivotData()
    On Error Resume Next
    Dim buf As String, i, j As Integer, flag As String
    flag = "0"
    If isPivotDataN Then flag = "1"
    If flag = "1" Then
      For i = 1 To 6
        buf = "X_DataNo" & i
        j = 0
        j = CInt(getINIname(buf, True))
        If j = ActiveCell.column Then
          ActiveSheet.names(buf).Delete
          ResetPivotData
          Exit Sub
        End If
      Next i
    Else
      For i = 1 To 6
        buf = "X_DataNo" & i
        j = 0
        j = CInt(getINIname(buf, True))
        If j = 0 Then
          ActiveSheet.names.Add buf, ActiveCell.column
          Exit Sub
        End If
      Next i
    End If
End Sub
Sub SetPivotColumn()
    On Error Resume Next
    Dim buf As String, i
    buf = "X_ColNo1"
    If Not isPivotColumn Then
      ActiveSheet.names.Add buf, ActiveCell.column
    Else
      ActiveSheet.names.Add buf, "0"
    End If
End Sub
Sub MixedTypeDemo()
    On Error Resume Next
    Dim ws As Worksheet
    DemoMode = True
    If Not isSheet1("MixedDataTypes") Then Exit Sub
    sheets("MixedDataTypes").Select
    Set ws = ActiveSheet
    Cells(17, 5).comment.visible = False
    Application.ScreenUpdating = False
    ActiveSheet.names("X_PageNo1").Delete
    ActiveSheet.names("X_DataNo1").Delete
    ActiveSheet.names("X_DataNo2").Delete
    ActiveSheet.names("X_RowNo1").Delete
    ActiveSheet.names("X_RowNo2").Delete
    ActiveSheet.names("X_ColNo1").Delete
    Columns(3).Select
    SetPivotRow
    Columns(4).Select
    SetPivotPage
    Columns(8).Select
    SetPivotData
    Columns(11).Select
    SetPivotColumn
    Columns(12).Select
    SetPivotData
    DelSheet ("PivotTableDemo")
    Cells(17, 5).comment.visible = True
    Range("C:C,D:D,H:H,K:K,L:L").Select
    Application.ScreenUpdating = True
    
    Application.ScreenUpdating = True
    Do
      ShowPopupButtonClickEZPivot
      Application.ScreenUpdating = True
      Dim style, response
      style = vbYesNo + vbDefaultButton1 + vbQuestion  ' Define buttons.
      If ActiveSheet.PivotTables.Count = 1 Then
        ActiveSheet.Name = "PivotTableDemo"
        ws.Cells(17, 5).comment.visible = False
        DemoMode = False
        Exit Sub
      Else
        Application.ScreenUpdating = False
        CreatePivotTableP
        ActiveSheet.Name = "PivotTableDemo"
        ws.Cells(17, 5).comment.visible = False
        DemoMode = False
        Exit Sub
      End If
    Loop
    ws.Cells(17, 5).comment.visible = False
    DemoMode = False
End Sub
Sub ConvertToEZPivotDemo()
    DemoMode = True
    ConvertToEZPivot
    DemoMode = False
End Sub
Sub XPivotRowGrandTotalRegion()
    Dim columnlabel As String, ndata As Integer, i, buf
    Dim addr As String
    addr = ActiveCell.address
    On Error Resume Next
    If Not ActiveSheet.PivotTables(1).RowGrand Then Exit Sub
    If Application.ScreenUpdating Then Application.ScreenUpdating = False
    ndata = ActiveSheet.PivotTables(1).DataFields.Count
    Dim datalabel As Integer
    If ndata > 1 Then
      datalabel = xlDataAndLabel
    Else
      datalabel = xlDataOnly
    End If
    If getINIname("PivotGrandOverride", True) <> "1" Then
      buf = buf & chr(39) & ActiveSheet.PivotTables(1).DataFields(1).Name & chr(39)
      If ndata > 1 Then
         buf = buf & ":" & chr(39) & ActiveSheet.PivotTables(1).DataFields(ndata).Name & chr(39)
      End If
      buf = buf & " 'Row Grand Total'"
      If CInt(ReadKeyValue("OfficeNo")) > 9 Then
         ActiveSheet.PivotTables(1).PivotSelect buf, datalabel, True
      Else
         ActiveSheet.PivotTables(1).PivotSelect buf, datalabel
      End If
    Else
      buf = "'Row Grand Total'"
      If CInt(ReadKeyValue("OfficeNo")) > 9 Then
         ActiveSheet.PivotTables(1).PivotSelect buf, xlDataOnly, True
      Else
         ActiveSheet.PivotTables(1).PivotSelect buf, xlDataOnly
      End If
    End If
    addr = Selection.address
    On Error Resume Next
    XPivotTryit (3)
    Range(addr).Select
End Sub
Public Sub XPivotSetZeroSub(i As Integer)
       Dim numberformat
       numberformat = ActiveSheet.PivotTables(1).DataFields(i).numberformat
       If InStr(numberformat, ".") Then
          numberformat = Replace(numberformat, ".0", ".")
       End If
       If Not InStr(numberformat, ".0") > 0 Then
         numberformat = Replace(numberformat, ".", "")
       End If
       ActiveSheet.PivotTables(1).DataFields(i).numberformat = numberformat
       
End Sub
Function isPivotDataNumber() As Integer
    Dim ndata, i, Name As String, ncol
    ncol = ActiveSheet.PivotTables(1).RowFields.Count
    ndata = ActiveSheet.PivotTables(1).DataFields.Count
    If ncol = 0 Then Exit Function
    If ndata = 0 Then Exit Function
    If ndata = 1 Then isPivotDataNumber = 1
    Name = Cells(ActiveCell.row, ncol).Text
    For i = 1 To ndata
        If ActiveSheet.PivotTables(1).DataFields(i).Name = Name Then
           isPivotDataNumber = i
           Exit Function
        End If
    Next i
End Function
Sub X1PivotZeroSub()
    Dim ndata, i, numberformat As String, work As String, j
    On Error Resume Next
    If getINIname("IPivot", True) = "xxx" Then Exit Sub
    ndata = ActiveSheet.PivotTables(1).DataFields.Count
    Application.ScreenUpdating = False

    If ndata = 0 Then Exit Sub

    For i = 1 To ndata
      If GetPivotDec(ActiveSheet.PivotTables(1).DataFields(i).Name) Then
         XPivotSetZeroSub (i)
      End If
    Next i
    If isPoundSigns Then
      FormatGrandTotal 'XPivotFormat2
    Else
      FormatGrandTotal
    End If
End Sub
Function isPoundSigns()
    On Error Resume Next
    Dim addr As String
    addr = Selection.address
    Cells.Find(What:="#", after:=ActiveCell, LookIn:=xlValues, LookAt:= _
        xlPart, SearchOrder:=xlByRows, SearchDirection:=xlNext, MatchCase:=False) _
        .Activate
    If Mid(ActiveCell.Text, 1, 1) = "#" Then isPoundSigns = True
    Range(addr).Select
End Function
Sub XPivotSetZeroAdd(i As Integer)
  '     If getINIname("IPivot", True) = "xxx" Then Exit Sub
       Dim ndata, numberformat As String, work As String, j
       ndata = ActiveSheet.PivotTables(1).DataFields.Count
       If ndata = 0 Then Exit Sub
       numberformat = ActiveSheet.PivotTables(1).DataFields(i).numberformat
       If InStr(numberformat, ".") Then
          numberformat = Replace(numberformat, ".", ".0")
       ElseIf InStr(numberformat, "#") > 0 Then
          If InStr(numberformat, ".") = 0 Then
              numberformat = Replace(numberformat, "#0", "#0.0")
          End If
       End If
       ActiveSheet.PivotTables(1).DataFields(i).numberformat = numberformat
End Sub
Public Sub X1PivotZeroAdd()
    Dim ndata, i, numberformat As String, work As String, j
    Application.ScreenUpdating = False
    On Error Resume Next
    If getINIname("IPivot", True) = "xxx" Then Exit Sub
'    If getINIname("IPivot", True) = "xxx" Then Exit Sub
    ndata = ActiveSheet.PivotTables(1).DataFields.Count
    For i = 1 To ndata
        If GetPivotDec(ActiveSheet.PivotTables(1).DataFields(i).Name) Then
           XPivotSetZeroAdd (i)
        End If
    Next i
    
    If isPoundSigns Then
      FormatGrandTotal
    Else
      FormatGrandTotal
    End If
End Sub
Function GetPivotDec(desc As String) As Boolean
    Dim i, wp As Worksheet, desc1, buf
    On Error Resume Next
    desc1 = desc
    i = InStr(Trim(desc1), " of ")
    If i > 0 Then
       desc1 = Mid(desc1, i + 4)
    End If
    Trim desc1
    Dim ptdata1 As String
    If ActiveSheet.PivotTables.Count = 1 Then
      ptdata1 = FStrip(getINIname("PivotSource", True)) & "_P"
    Else
      ptdata1 = ActiveSheet.Name & "_P"
    End If
    buf = ActiveSheet.PivotTables(1).SourceData
    i = InStr(buf, "!")
    If i > 0 Then
       ptdata1 = Mid(buf, 1, i - 1)
    End If
    Set wp = sheets(ptdata1)
    For i = 1 To wp.UsedRange.Columns.Count
       If Trim(wp.Cells(1, i).Text) = Trim(desc1) Then
          Exit For
       End If
    Next i
    buf = wp.Cells(2, i).numberformat
    If InStr(buf, ".0") > 0 Then GetPivotDec = True
End Function
Public Sub PivotDelete1()
       Dim style, response, pivotsource
       On Error Resume Next
       style = vbYesNo + vbDefaultButton2 + vbQuestion  ' Define buttons.
       If isPivotchart(ActiveSheet.Name) Then
          If Not AutoDelete Then
            response = MsgBox("Are you sure?", style, "Delete Separate Chart")
            If response = vbNo Then Exit Sub
          End If
          Dim Name As String
          Name = FindPivotTable
          Application.ScreenUpdating = False
          Application.DisplayAlerts = False
          ActiveWindow.SelectedSheets.Delete
          sheets(Name).Select
          pivotsource = getINIname("PivotChartData", True)
          If pivotsource <> "xxx" Then
             sheets(pivotsource).Select
             ActiveSheet.names.Add "SepPChart", "0"
             sheets(Name).Select
          End If
          Application.DisplayAlerts = True
          Exit Sub
       End If
       Dim source As String
       source = getINIname("PivotSource", True)
       If Not AutoDelete Then
         response = MsgBox("Are you sure?", style, "Delete Pivot Table")
         If response = vbNo Then Exit Sub
       End If
       Application.ScreenUpdating = False
       NoActivationDisplay = True
       PivotDelete
       On Error Resume Next
       NoActivationDisplay = False
       sheets(source).Select
End Sub
 Sub PivotDelete()
       On Error Resume Next
       Dim chart As String, i As Integer, Name As String
       Name = ActiveSheet.Name
       Application.DisplayAlerts = False
       If isPivotchart(Name) Then
          Name = FindPivotTable
          ActiveWindow.SelectedSheets.Delete
          sheets(Name).Select
          Exit Sub
       End If
       chart = FindPivotChart(ActiveSheet.Name)
       On Error Resume Next
       ActiveWindow.SelectedSheets.Delete
       Dim sheet As String
       sheet = ActiveSheet.Name
       For i = ActiveWorkbook.Worksheets.Count To 1 Step -1
         If GetSheetVar(Worksheets(i).Name, "PivotName") = Name Then
            DelSheet (Worksheets(i).Name)
         End If
       Next i
       On Error Resume Next
       sheets(sheet).Select
       If chart <> "" Then
         DelSheet (chart)
       End If
       Application.CommandBars("EZ Pivot").visible = False
'       Dim objmenu, objitem
'       Set objmenu = Application.CommandBars("Ply")
       Application.DisplayAlerts = True
End Sub
Public Sub PivotDeleteChart()
       Dim Name As String, sheet
       On Error Resume Next
      
       Name = FindPivotChart(ActiveSheet.Name)
       sheet = FindPivotTable()
       If Name = "" Then Name = ActiveSheet.Name
       
       If Not isSheet1(Name) Then Exit Sub
       If Not isSheetChart(Name) Then Exit Sub
       Dim response, style
       style = vbYesNo + vbDefaultButton2 + vbQuestion  ' Define buttons.
   
       response = MsgBox("Are you sure?", style, "Delete Embedded Chart")
       If response = vbNo Then Exit Sub
       Application.ScreenUpdating = False
       DelSheet (Name)
       On Error Resume Next
       sheets(sheet).Select
       
End Sub
Public Sub PivotDelete2()
       On Error Resume Next
       If Not isSheet1("FormattedData") Then Exit Sub
       If ActiveSheet.Name = "FormattedData" Then Exit Sub
       If ActiveSheet.PivotTables.Count < 1 Then Exit Sub
       If getINIname("IPivot", True) <> "xxx" Then Exit Sub
       NoActivationDisplay = True
       If Application.ScreenUpdating Then Application.ScreenUpdating = False
       Application.DisplayAlerts = False
       ActiveWindow.SelectedSheets.Delete
       sheets("FormattedData").Select
       NoActivationDisplay = False
End Sub

Sub XPivotChartMake()
    Dim chartmake As Integer, embedmake As Integer, tabname As String, ChartType As Integer
    Dim FieldPage As Integer, chartname As String, ischart As Boolean, wp As Worksheet
    Dim colorindex As Integer, pivotsource As String, sheet As String, sheet1
    ChartType = 7
    embedmake = 1
    sheet1 = ActiveSheet.Name
    sheet = ActiveSheet.Name & "_C"
    Application.ScreenUpdating = False
    If isSheet1(sheet) Then
       sheets(sheet).Select
       PivotDelete1
       sheets(sheet1).Select
       Exit Sub
    End If
    If getINIname("IPivot", True) = "xxx" Then Exit Sub
    Application.ScreenUpdating = False
    On Error Resume Next
    If FindPivotChart(ActiveSheet.Name) = "" Then
      chartmake = 1
    End If

    tabname = ActiveSheet.Name
    colorindex = ActiveWorkbook.sheets(tabname).Tab.colorindex
    ChartType = CInt(getINIname("Charttype", True))
    FieldPage = CInt(getINIname("FieldPage1", True))
    Dim hasfields As String
    hasfields = getINIname("PivotChartHasFields", True)

    chartname = ActiveSheet.Name & "_C"
    pivotsource = getINIname("PivotChartData", True)
    If pivotsource <> "xxx" Then
       sheets(pivotsource).Select
       ActiveSheet.names.Add "SepPChart", "1"
       sheets(tabname).Select
    End If
    ischart = isSheet1(chartname)
    If ischart Then
       sheets(chartname).Select
       Exit Sub
    End If
    If Application.ScreenUpdating Then Application.ScreenUpdating = False
    Call PivotChartx(chartmake, 0, tabname, FieldPage)
    SetMarginCharts
    Application.EnableEvents = False
    CompanyUserChart
    ActiveWorkbook.sheets(chartname).Tab.colorindex = colorindex
    PivotChartHasFields (hasfields)
    Application.CommandBars(1).visible = True
    ActiveChart.ChartArea.Select
    ActiveWindow.zoom = True
    ActiveChart.PageSetup.ChartSize = xlFitToPage
    With ActiveChart.Axes(xlCategory)
        .TickLabelSpacing = 1
        .TickMarkSpacing = 1
        .ReversePlotOrder = True
        .AxisBetweenCategories = True
    End With
    With ActiveChart.Axes(xlSeries)
        .TickLabelSpacing = 1
        .TickMarkSpacing = 1
        .ReversePlotOrder = True
        .AxisBetweenCategories = True
    End With
    Dim size
    size = ActiveWindow.zoom
    If size > 100 Then
       ActiveWindow.zoom = 100
    End If
    ActiveChart.Deselect
    Application.CommandBars("EZ Pivot").visible = True
    Application.CommandBars("Pivot Tool").visible = False
    Application.EnableEvents = True
    Application.ScreenUpdating = False
    sheets(sheet1).Select
    Application.EnableEvents = False
    sheets(sheet).Select
    Application.EnableEvents = True
End Sub
Sub PivotChartHasFields(hasfields As String)
    On Error Resume Next
    ActiveChart.Activate
    ActiveChart.ChartArea.Select
    If hasfields = "1" Then
       ActiveChart.HasPivotFields = True
       ActiveWorkbook.ShowPivotChartActiveFields = True
    Else
       ActiveChart.HasPivotFields = False
       ActiveWorkbook.ShowPivotChartActiveFields = False
    End If
End Sub
Sub PivotChartx(chart As Integer, embedded As Integer, tabname As String, page As Integer)
    If embedded > 0 And ActiveSheet.ChartObjects.Count > 0 Then embedded = 0
    If chart = 0 And embedded = 0 Then Exit Sub
    Dim sheet As String, i As Integer, Workbook As String, addr As String
    Dim pchart As String, pchartm As String
    Dim isEzChart As Boolean, visible As Boolean, sepchart As String, embchart As String
    Dim chartname As String, waschart As Boolean
    On Error Resume Next
    Application.DisplayAlerts = False
    If Application.ScreenUpdating Then Application.ScreenUpdating = False
    Workbook = ActiveWorkbook.Name
    sheet = ActiveSheet.Name
    sepchart = getINIname("PivotChart", True)
    embchart = getINIname("PivotChartData", True)
    pchartm = GetAppFolder & "\EZPivotChart.xls"
    pchart = "EZPivotChart.xls"
    If sepchart <> "xxx" And embchart <> "xxx" Then
       isEzChart = True
       pchart = ActiveWorkbook.Name
    Else
      sepchart = "SeparateChart"
      embchart = "EmbeddedChart"
    End If
    
    If Not isEzChart And Not IsWorkBookOpen(pchart) Then
        Workbooks.Open Filename:=pchartm
    End If
    Workbooks(pchart).Activate
    If embedded = 0 Then
      visible = sheets(sepchart).visible
      sheets(sepchart).visible = True
      sheets(sepchart).Select
      sheets(sepchart).Copy before:=Workbooks(Workbook).sheets(1)
      chartname = tabname & "_C"
      If isSheet1(chartname) Then
         sheets(chartname).Select
         ActiveWindow.SelectedSheets.Delete
      End If
      ActiveSheet.Name = chartname
      sheets(sepchart).visible = visible
      ActiveChart.SetSourceData source:=sheets(tabname).Range("A3")
      ActiveChart.ChartArea.Select
      ActiveWindow.zoom = True
      ActiveChart.Deselect
      sheets(ActiveSheet.Name).Move after:=sheets(tabname)
      PageSetupSheet
      Call Format_Sheets(ActiveSheet.Name, 1)
      ActiveChart.ChartArea.Select
      ActiveWindow.zoom = True
      If ActiveChart.HasTitle Then
        ActiveChart.ChartTitle.Characters.Text = GetSheetVar(tabname, "Title")
      End If
      ActiveChart.Deselect
      If Not isEzChart Then Workbooks(pchart).Close
      Workbooks(Workbook).Activate
      Exit Sub
    End If
    sheet = ActiveSheet.Name
    Workbooks(pchart).Activate
    sheets(embchart).Select
    ActiveSheet.ChartObjects(1).Select
    ActiveChart.ChartArea.Copy
    Windows(Workbook).Activate
    sheets(sheet).Select
    Range("A3").Select
    If page = 0 Then
       addr = "A" & Selection.CurrentRegion.Rows.Count + 4
    Else
       addr = "A" & Selection.CurrentRegion.Rows.Count + 3
    End If
    Range(addr).Select
    ActiveSheet.Paste
    ActiveChart.SetSourceData source:=sheets(tabname).Range("A3")
    If ActiveChart.HasTitle Then
        ActiveChart.ChartTitle.Characters.Text = GetSheetVar(tabname, "Title")
    End If
    With sheets(ActiveSheet.Name).DrawingObjects(1)
        .Placement = xlFreeFloating
    End With
    SetEmbedChart
    If Not isEzChart Then Workbooks(pchart).Close
    Workbooks(Workbook).Activate
    sheets(tabname).Select
End Sub

Sub XPivotChartEmbed()
    Dim chartmake As Integer, embedmake As Integer, tabname As String, ChartType As Integer
    Dim FieldPage As Integer, chartname As String, ischart As Boolean, pivotsource As String
    ChartType = 7
    embedmake = 1
    
    If getINIname("IPivot", True) = "xxx" Then Exit Sub
    If ActiveSheet.ChartObjects.Count > 0 Then
      XPivotEmbedDelete
      Exit Sub
    End If
    If Application.ScreenUpdating Then Application.ScreenUpdating = False
    On Error Resume Next
 
    If FindPivotChart(ActiveSheet.Name) = "" Then
      chartmake = 1
    End If

    tabname = ActiveSheet.Name
    pivotsource = getINIname("PivotChartData", True)
    If pivotsource <> "xxx" Then
       sheets(pivotsource).Select
       ActiveSheet.names.Add "EmbPChart", "1"
       sheets(tabname).Select
    End If
    On Error Resume Next
    ChartType = CInt(getINIname("Charttype", True))
    FieldPage = CInt(getINIname("FieldPage1", True))

    chartname = ActiveSheet.Name & "_C"
    ischart = isSheet1(chartname)
    Application.StatusBar = "Creating Embedded Chart"
    Call PivotChartx(chartmake, embedmake, tabname, FieldPage)
    Dim hasfields As String
    hasfields = getINIname("PivotEmbedHasFields", True)
    PivotEmbedHasFields (hasfields)
    sheets(tabname).Select
    ActiveSheet.ChartObjects(1).Select
    ActiveSheet.ChartObjects(1).Activate
    PageCompanyUserChart
    ActiveSheet.ChartObjects(1).Deselect
    Application.StatusBar = False
    Range("A3").Select
End Sub

Sub XPivotEmbedDelete()
    On Error Resume Next
    If ActiveSheet.ChartObjects.Count = 0 Then Exit Sub
    Dim response, style, pivotsource, tabname
    style = vbYesNo + vbDefaultButton2 + vbQuestion  ' Define buttons.
    If Not EmbedDeleteAuto Then
    response = MsgBox("Are you sure?", style, "Delete Embedded Chart")
    If response = vbNo Then Exit Sub
    End If
    pivotsource = getINIname("PivotChartData", True)
    tabname = ActiveSheet.Name
    If Application.ScreenUpdating Then Application.ScreenUpdating = False
    If pivotsource <> "xxx" Then
       sheets(pivotsource).Select
       ActiveSheet.names.Add "EmbPChart", "0"
       sheets(tabname).Select
    End If
    ActiveWindow.visible = True
    ActiveSheet.ChartObjects(1).Activate
    If CInt(Application.version) > 11 Then
      Selection.Cut
    Else
      ActiveChart.ChartArea.Select
      ActiveWindow.visible = False
      Selection.Delete
    End If
End Sub
Sub PivotEmbedHasFields(hasfields As String)
    On Error Resume Next
    ActiveSheet.ChartObjects(1).Activate
    ActiveChart.ChartArea.Select
    If hasfields = "1" Then
       ActiveChart.HasPivotFields = True
       ActiveWorkbook.ShowPivotChartActiveFields = True
    Else
       ActiveChart.HasPivotFields = False
       ActiveWorkbook.ShowPivotChartActiveFields = False
    End If
End Sub

Sub PageRowDown()
    On Error Resume Next
    Dim n As Integer
    If getINIname("PivotColCur", True) = "1" Then
       ColValuesDown
    Else
      If ActiveSheet.PivotTables(1).PageFields.Count > 0 Then n = 1
        If PivotValCur > n Then
           RowValuesDown
        Else
           PageValuesDown
      End If
    End If
End Sub
Sub PageRowUp()
    On Error Resume Next
    Dim n As Integer
    If ActiveSheet.PivotTables(1).PageFields.Count > 0 Then n = 1
    If getINIname("PivotColCur", True) = "1" Then
       ColValuesUp
    Else
      If PivotValCur > n Then
       RowValuesUp
      Else
       PageValuesUp
      End If
    End If
End Sub
Sub PivotSetColValue()
    On Error Resume Next
    Dim toolname As String
   
    toolname = "EZ Pivot"
    
    ActiveSheet.names.Add "PivotValCur", "0"
    ActiveSheet.names.Add "PivotColCur", "1"
    PivotValCur = 0
    PivotColCur = 1
    PivotPageAll1
    Application.CommandBars(toolname).Controls(8).FaceId = 132
    Application.CommandBars(toolname).Controls(9).FaceId = 133
    Application.CommandBars(toolname).Controls(8).TooltipText = "Walk " & ActiveSheet.PivotTables(1).columnfields(1).Name & " Up"
    Application.CommandBars(toolname).Controls(9).TooltipText = "Walk " & ActiveSheet.PivotTables(1).columnfields(1).Name & " Down"
    
    Range("A1").Select
End Sub
Public Sub X1PivotAddDollar()
    Dim ndata, i, numberformat As String, work As String, j
    If getINIname("IPivot", True) = "xxx" Then Exit Sub
    ndata = ActiveSheet.PivotTables(1).DataFields.Count
    For i = 1 To ndata
         If InStr(ActiveSheet.PivotTables(1).DataFields(i).Name, "Count of") = 0 Then
             XPivotSetAddDollar (i)
         End If
    Next i
    If isPoundSigns Then
      FormatGrandTotal 'XPivotFormat2
    Else
      FormatGrandTotal
    End If
End Sub
Public Sub XPivotSetAddDollar(i As Integer)
      On Error Resume Next
      Dim numberformat As String, symbol
      If Application.ScreenUpdating Then Application.ScreenUpdating = False
      symbol = getINIname("Symbol", True)
      If symbol = "" Or symbol = "xxx" Then Exit Sub
      numberformat = ActiveSheet.PivotTables(1).DataFields(i).numberformat
      If InStr(numberformat, symbol) > 0 Then
         ActiveSheet.PivotTables(1).DataFields(i).numberformat = Replace(numberformat, symbol, "")
      Else
         numberformat = symbol & numberformat
         ActiveSheet.PivotTables(1).DataFields(i).numberformat = numberformat
      End If
      SetFormatData
End Sub
Sub StackPivotDataOff1()
    On Error Resume Next
    If ActiveSheet.PivotTables(1).DataPivotField.Orientation = xlRowField Then Exit Sub
    StackPivotDataOff
    SetEmbedChart
End Sub
Sub StackPivotDataOn1()
    On Error Resume Next
    If ActiveSheet.PivotTables(1).DataPivotField.Orientation = xlColumnField Then Exit Sub
   StackPivotDataOn
    SetEmbedChart
End Sub
Sub PivotColorWhite()
    If isSheetChart(ActiveSheet.Name) Then Exit Sub
    Dim addr As String
    addr = ActiveCell.address
    On Error Resume Next
    If getINIname("PivotNoColor", True) <> "1" Then
       ActiveSheet.names.Add "PivotNoColor", "1"
       Call WriteKeyValue("PivotNoColor", "1")
    Else
       ActiveSheet.names.Add "PivotNoColor", "0"
       Call WriteKeyValue("PivotNoColor", "0")
    End If
    XPivotFormat2
    DataAutoFit
    Range(addr).Select
End Sub
Sub XPivotGrandOverrideSet()
    Dim svalue As String
    If CommandBars.ActionControl.state = msoButtonUp Then
        CommandBars.ActionControl.state = msoButtonDown
        svalue = "1"
    Else
        CommandBars.ActionControl.state = msoButtonUp
        svalue = "0"
        
    End If
    ActiveSheet.names.Add "PivotGrandOverride", svalue
    XPivotFormatRestore
End Sub
Sub XPivotRowBandSetRibbon()
    On Error Resume Next
    Dim svalue
    If ReadKeyValue("PivotRowBand") = "1" Then
       svalue = "1"
    Else
       PivotBandOff = True
       svalue = "0"
    End If
    XPivotAuto = True
    Call WriteKeyValue("PivotRowBand", svalue)
    ActiveSheet.names.Add "PivotRowBand", svalue
    XPivotFormat2
    PivotBandOff = False
End Sub
Sub XPivotRowBandSet()
    Dim svalue As String
    On Error Resume Next
    If CommandBars.ActionControl.state = msoButtonUp Then
        CommandBars.ActionControl.state = msoButtonDown
        svalue = "1"
    Else
        CommandBars.ActionControl.state = msoButtonUp
        svalue = "0"
        PivotBandOff = True
    End If
    XPivotAuto = True
    Call WriteKeyValue("PivotRowBand", svalue)
    ActiveSheet.names.Add "PivotRowBand", svalue
    XPivotFormat2
    PivotBandOff = False
End Sub
Sub ToggleRowGrandTotals()
    On Error Resume Next
    If Application.ScreenUpdating Then Application.ScreenUpdating = False
    If getINIname("IPivot", True) = "xxx" Then Exit Sub
    Dim toggleon As Boolean
    If ActiveSheet.PivotTables(1).RowGrand = False Then
       toggleon = True
    End If
    ActiveSheet.PivotTables(1).RowGrand = toggleon
    ActiveWorkbook.ShowPivotTableFieldList = False
    Application.CommandBars("PivotTable").visible = False
'    If Not toggleon Then Exit Sub
    Dim addr As String
    addr = Selection.address
    XPivotFormat2
    XLPApplyPageRun
    Range(addr).Select
    If Application.ScreenUpdating Then Application.ScreenUpdating = False
    ActiveWindow.View = xlPageBreakPreview
    ActiveWindow.View = xlNormalView
    ActiveSheet.DisplayAutomaticPageBreaks = False
End Sub
Sub ToggleColGrandTotals()
    On Error Resume Next
    If Application.ScreenUpdating Then Application.ScreenUpdating = False
    If getINIname("IPivot", True) = "xxx" Then Exit Sub
    Dim toggleon As Boolean
    If ActiveSheet.PivotTables(1).ColumnGrand = False Then
       toggleon = True
    End If
    ActiveSheet.PivotTables(1).ColumnGrand = toggleon
    ActiveWorkbook.ShowPivotTableFieldList = False
    Application.CommandBars("PivotTable").visible = False

    XPivotFormat2
End Sub
Sub XPivotRegionFont()
    Dim dlg As Variant, addr, addr1 As String, addr2 As String
    Dim region As Integer
    addr = ActiveCell.address
    addr2 = ActiveCell.address
    region = XPivotGetRegion
    addr1 = Selection.address
    Range(addr).Select
    If region < 1 Then Exit Sub
    If region = 4 And getINIname("PivotRowBand", True) = "1" Then
     If Selection.Interior.colorindex = -4142 Then
       Range(addr1).Select
       addr2 = ActiveCell.address
       Range(addr2).Select
     End If
    End If
    Application.ScreenUpdating = True
    dlg = Application.Dialogs(xlDialogFormatFont).show()
    If Not dlg Then Exit Sub
    Range(addr2).Select
    Call XPivotRegion1(addr1, region)
    Range(addr2).Select
End Sub
Sub XPivotRegionPattern()
    Dim dlg As Variant, addr, addr1 As String, addr2 As String
    Dim region As Integer
    On Error Resume Next
    addr = ActiveCell.address
    addr2 = ActiveCell.address
    region = XPivotGetRegion
    addr1 = Selection.address
    Range(addr).Select
    If region < 1 Then Exit Sub
    If region = 4 And getINIname("PivotRowBand", True) = "1" Then
     If Selection.Interior.colorindex = -4142 Then
       Range(addr1).Select
       addr2 = ActiveCell.address
       Range(addr2).Select
     End If
    End If
    Application.ScreenUpdating = True
    dlg = Application.Dialogs(xlDialogPatterns).show()

   
    If Not dlg Then
       Range(addr).Select
       Exit Sub
    End If
    If Application.ScreenUpdating Then Application.ScreenUpdating = False
    Range(addr2).Select
    
    Call XPivotRegion1(addr1, region)
    
    Range(addr).Select
End Sub
Sub XPivotRegionUpdate(region As Integer)
    Dim wp As Worksheet, ws As Worksheet
    Set wp = sheets(ActiveSheet.Name)
    Application.EnableEvents = False
    RegionUpdate = True
    
    Set ws = sheets("Stylesheet")
    ws.visible = True
    ws.Select
    Range(Cells(33 + region, 1), Cells(33 + region, 1)).Select
    wp.Select
    Call CopyCellFormats(wp, ws, 0)
    wp.Select
    ws.visible = False
    Application.CutCopyMode = False
    XPivotFormat2
    Application.EnableEvents = True
    RegionUpdate = False
End Sub
Function isPivotRow() As Boolean
    If ActiveCell.row >= ActiveSheet.PivotTables(1).RowFields.Count Then Exit Function
    isPivotRow = True
End Function
Function XPivotGetRegion() As Integer
    Dim rng As Range, XPivot, addr, nsubs
    nsubs = ActiveSheet.PivotTables(1).RowFields.Count - 1
    If ActiveSheet.PivotTables(1).DataFields.Count > 1 Then
      nsubs = nsubs - 1
    End If
    addr = ActiveCell.address
    On Error Resume Next
    Set rng = Range(ActiveCell.address)
    If Application.ScreenUpdating Then Application.ScreenUpdating = False
    XRegionAuto = True
    XPivotAuto = True
    If ActiveSheet.PivotTables(1).RowGrand Then
      XPivotGrandHeadingRegion
      If isInRange(rng) Then
        XPivotGetRegion = 16
        GoTo outok
      End If
    End If
    XPivotPageRegion
    If isInRange(rng) Then
       XPivotGetRegion = 17
       GoTo outok
    End If
    XPivotHeadingRegion
    If isInRange(rng) Then
      XPivotGetRegion = 1
      GoTo outok
    End If
    
    XPivotRowSelectRegion
    If isInRange(rng) Then
      XPivotGetRegion = 15
      GoTo outok
    End If
    XPivotHeadingRegionRight
    If isInRange(rng) Then
      XPivotGetRegion = 14
      GoTo outok
    End If
    XPivotHeadingRegionLeft
    If isInRange(rng) Then
      XPivotGetRegion = 13
      GoTo outok
    End If
    If XRowSub(1) <> "" Then
      XRowTotal1Region
      If isInRange(rng) Then
         XPivotGetRegion = 6
         GoTo outok
       End If
    End If
    If XRowSub(2) <> "" Then
      XRowTotal2Region
      If isInRange(rng) Then
        XPivotGetRegion = 7
        GoTo outok
      End If
    End If
    If XRowSub(3) <> "" Then
      XRowTotal3Region
      If isInRange(rng) Then
        XPivotGetRegion = 8
        GoTo outok
      End If
    End If
    If XRowSub(4) <> "" Then
      XRowTotal4Region
      If isInRange(rng) Then
        XPivotGetRegion = 18
        GoTo outok
      End If
    End If
    XPivotRow1Region
    If isInRange(rng) Then
      XPivotGetRegion = region(1)
      GoTo outok
    End If
    If nsubs > 0 Then
    XPivotRow2Region
      If isInRange(rng) Then
        XPivotGetRegion = region(2)
        GoTo outok
      End If
    End If
    If nsubs > 1 Then
      XPivotRow3Region
      If isInRange(rng) Then
        XPivotGetRegion = region(3)
        GoTo outok
      End If
    End If
    If nsubs > 2 Then
      XPivotRow4Region
      If isInRange(rng) Then
        XPivotGetRegion = region(4)
        GoTo outok
      End If
    End If
    If ActiveSheet.PivotTables(1).ColumnGrand And ActiveSheet.PivotTables(1).RowGrand Then
    XPivotBothGrandTotalRegion
    If isInRange(rng) Then
      XPivotGetRegion = 12
      GoTo outok
    End If
    End If
    If ActiveSheet.PivotTables(1).RowGrand Then
      XPivotRowGrandTotalRegion
      If isInRange(rng) Then
        XPivotGetRegion = 3
        GoTo outok
      End If
    End If
    If ActiveSheet.PivotTables(1).ColumnGrand Then
      XPivotColumnGrandTotalRegion
      If isInRange(rng) Then
        XPivotGetRegion = 2
        GoTo outok
      End If
    End If
    XPivotDataColumnRegion
    If isInRange(rng) Then
      XPivotGetRegion = 4
      GoTo outok
    End If
    XPivotDataRegion
    If isInRange(rng) Then
      XPivotGetRegion = 5
      GoTo outok
    End If
outok:
    XRegionAuto = False
    XPivotAuto = False
End Function
Sub XPivotRegion1(area1 As String, region As Integer)
    If Application.ScreenUpdating Then Application.ScreenUpdating = False
    CopyCellFormat1 (area1)
    Call XPivotRegionUpdate(region)
End Sub
Sub CopyCellFormat1(area)
    Dim Hor, Ver, wrap, orien, addind, shrink, merge, numberformat
    numberformat = Selection.numberformat
    On Error Resume Next
    With Selection
       Hor = .HorizontalAlignment
       Ver = .VerticalAlignment
       wrap = .WrapText
       orien = .Orientation
       addind = .AddIndent
       shrink = .ShrinkToFit
       merge = .MergeCells
    End With
    Dim Name, fontstyle, size, strike, superscript
    Dim subscript, shadow, underline, colorindex, outline
    With Selection.font
       Name = .Name
       fontstyle = .fontstyle
       size = .size
       strike = .Strikethrough
       superscript = .superscript
       subscript = .subscript
       outline = .OutlineFont
       shadow = .shadow
       underline = .underline
       colorindex = .colorindex
    End With
    Dim colorindexi, pattern, patterncolorindexi
    With Selection.Interior
        colorindexi = .colorindex
        pattern = .pattern
        patterncolorindexi = .PatternColorIndex
    End With
    Range(area).Select
'    Selection.numberformat = numberformat
    With Selection
     If IsAlignment Then
       .HorizontalAlignment = Hor
       .VerticalAlignment = Ver
       .WrapText = wrap
       .Orientation = orien
       .AddIndent = addind
       .ShrinkToFit = shrink
       .MergeCells = merge
     End If
    End With
    With Selection.font
       .Name = Name
       .fontstyle = fontstyle
       .size = size
       .Strikethrough = strike
       .superscript = superscript
       .subscript = subscript
       .OutlineFont = outline
       .shadow = shadow
       .underline = underline
       .colorindex = colorindex
    End With
    With Selection.Interior
        .colorindex = colorindexi
        .pattern = pattern
        .PatternColorIndex = patterncolorindexi
    End With
End Sub
Sub XPivotRegionAlignment()
    Dim dlg As Variant, addr, addr1 As String, addr2 As String, isband As String
    Dim region As Integer

    addr = ActiveCell.address
    addr2 = ActiveCell.address
    region = XPivotGetRegion
    addr1 = Selection.address
    Range(addr).Select
    If region < 1 Then Exit Sub
    If region = 4 And getINIname("PivotRowBand", True) = "1" Then
     If Selection.Interior.colorindex = -4142 Then
       Range(addr1).Select
       addr2 = ActiveCell.address
       Range(addr2).Select
     End If
    End If
    Application.ScreenUpdating = True
    dlg = Application.Dialogs(xlDialogAlignment).show()
    If Not dlg Then
      Exit Sub
    End If
    Range(addr2).Select
    IsAlignment = True
    Call XPivotRegion1(addr1, region)
    IsAlignment = False
    Range(addr).Select
End Sub
Function isInRange(rng As Range) As Boolean
    Dim rng1 As Range, rngOD As Range, n As Integer, addr
    addr = Selection.address
    Set rng1 = Range(addr)
    Set rngOD = Intersect(rng1, rng)
    On Error Resume Next
    n = rngOD.Cells.Count
    If n > 0 Then isInRange = True
End Function
Sub DeleteEZPivotTables()
    Dim style, response, pivotsource As String, sheet As String, i
    On Error Resume Next
    style = vbYesNo + vbDefaultButton2 + vbQuestion  ' Define buttons.
    response = MsgBox("Are you sure?", style, "Delete All Pivot Tables, Drills and Charts")
    If response = vbNo Then Exit Sub
    sheet = ActiveSheet.Name
    Application.ScreenUpdating = False
    AutoDelete = True
    For i = Worksheets.Count To 1 Step -1
      If Worksheets(i).visible And Worksheets(i).Name <> sheet Then
        If FStrip(GetSheetVar(Worksheets(i).Name, "PivotSource")) = sheet And _
        LCase(Worksheets(i).Name) <> "unformattedpivottable" Then
          Worksheets(i).Select
          PivotDelete1
        End If
      End If
    Next i
    AutoDelete = False
    sheets(sheet).Select
End Sub
Sub ShowFieldList()
    PivotUpdate = True
    On Error Resume Next
    Cells(3, 1).Select
    ActiveWorkbook.ShowPivotTableFieldList = True
    Application.EnableEvents = True
End Sub
Sub EditPivotSort()
    Dim k, sheet, source As String, frmini As String, value As String, i, visible As Boolean
    
    If Application.ScreenUpdating Then Application.ScreenUpdating = False
    On Error Resume Next
    source = getINIname("PivotSource", True)
    If Not isSheet1(source) Then Exit Sub
    sheet = ActiveSheet.Name
    frmini = GetAppFolder & "\format.ini"
    visible = sheets(source).visible
    sheets(source).visible = True
    sheets(source).Select
    XPSetIni
    Range("A1").Select
    sheets(source).visible = visible
    sheets(sheet).Select
    For i = 1 To 6
       value = "Sort" & i
       If getINIname(value, True) <> "xxx" Then
          Call wrt_ini(frmini, value, getINIname(value, True))
       End If
       value = "XUp" & i
       If getINIname(value, True) <> "xxx" Then
          Call wrt_ini(frmini, Mid(value, 2), getINIname(value, True))
       End If
    Next i
    Application.ScreenUpdating = True
    ChDirx GetAppFolder
    k = EditPivotSorts
    ResDir
    If k = 2 Then Exit Sub
    On Error Resume Next
    For i = 1 To 6
       value = "Sort" & i
       ActiveSheet.names.Add value, rd_iniFile(frmini, value)
       value = "XUp" & i
       ActiveSheet.names.Add value, rd_iniFile(frmini, value)
    Next i
End Sub
Sub DrillSetColWidth()
    On Error Resume Next
    Dim addr, stylename, col, value, pivotname As String
    pivotname = getINIname("PivotName", True)
    col = ActiveCell.column
    stylename = CleanName(Cells(2, col).style)
    value = GetSheetVar(pivotname, stylename & "_Col")
    If value = "" Then
'       ActiveWorkbook.Styles(stylename).WrapText = True
       value = ActiveCell.ColumnWidth
    Else
'       ActiveWorkbook.Styles(stylename).WrapText = False
       value = ""
    End If
    Call SetSheetVar1(stylename & "_Col", value)
    
End Sub
Sub DrillSetWrap()
    On Error Resume Next
    Dim dstyle, col, iswrap As Boolean
    col = ActiveCell.column
    dstyle = Cells(2, col).style
    iswrap = ActiveWorkbook.Styles(dstyle).WrapText
    If iswrap Then
      iswrap = False
    Else
      iswrap = True
    End If
    ActiveWorkbook.Styles(dstyle).WrapText = iswrap
End Sub
Sub DrillSetColDefault()
    On Error Resume Next
    Dim style, response
    style = vbYesNo + vbDefaultButton2 + vbQuestion
    response = MsgBox("Set Default Wrap Max Column Width to " & ActiveCell.ColumnWidth, _
    style, "Currently set to " & ReadKeyValue("DrillColMax"))
    If response = vbNo Then Exit Sub
    Call WriteKeyValue("DrillColMax", ActiveCell.ColumnWidth)
    MsgBox "Default Wrap Column Width = " & ActiveCell.ColumnWidth
End Sub
Sub PivotCustomDesc()
    On Error Resume Next
    Dim output As String, addr, k, i, value, lastname
    lastname = ActiveCell.Text
    If GetPivotVar(lastname) = "" Then
        MsgBox "         Create New Drill Sheet to Change Description Again", , "Make One Description Change per Field per Drill"
        Exit Sub
    End If
    ChDirx (GetAppFolder)
    k = EditData("EZPivot", "Current Header Title", "Change Description ...", ActiveCell.Text)
    ResDir
    If k = 2 Then Exit Sub
    output = GetAppFolder & "\namefile.txt"
    If Not exist(output) Then Exit Sub
    output = rd_iniFile(output, "name")
    If output = "" Then Exit Sub
    ActiveCell.value = output
    SetStdDesc (lastname)
    Range(addr).Select
End Sub
Function GetPivotVar(val) As String
    On Error Resume Next
    GetPivotVar = GetSheetVar(getINIname("PivotName", True), "ColD_" & CleanName(val))
End Function
Sub SetPivotVar(Name, value)
    On Error Resume Next
    Dim var
    var = getINIname("Pivotname", True) & "!ColD_" & CleanName(Name)
    ActiveWorkbook.names.Add var, value
End Sub
Sub SetStdDesc(oldvalue)
    On Error Resume Next
    Dim Stdini As String
    Stdini = GetAppFolder & "\stdini.txt"
    Dim value As String, var As String
    var = CleanName(ActiveCell.Text)
    value = GetPivotVar(oldvalue)
    If value = "" Then value = oldvalue
    Call wrt_ini(Stdini, value, Replace(var, "11", " "))
End Sub
Sub SetSheetVar1(value, var)
    On Error Resume Next
    Dim Name
    Name = getINIname("PivotName", True)
    If Name = "xxx" Then Exit Sub
    ActiveWorkbook.names.Add Name & "!" & value, var
End Sub
Sub SetSheetVar(value, var)
    On Error Resume Next
    Dim Name
    Name = DrillSheet   'getINIname("PivotName", True)
    If Name = "xxx" Then Exit Sub
    ActiveWorkbook.names.Add Name & "!ColD_" & CleanName(var), value
End Sub
Sub StandardDesc()
    On Error Resume Next
    Dim i, ncols, val As String, Name As String
    ncols = ActiveSheet.UsedRange.Columns.Count
    For i = 1 To ncols
       val = GetStdDesc(Cells(1, i).Text)
       Call SetSheetVar(Cells(1, i).Text, val)
       Cells(1, i).value = Replace(val, "__", " ")
    Next i
End Sub
Function GetStdDesc(val As String) As String
    Dim Stdini As String
    Stdini = GetAppFolder & "\stdini.txt"
    GetStdDesc = rd_iniFile(Stdini, val)
    If GetStdDesc = "" Then GetStdDesc = val
End Function
Sub PivotChartFieldsSet()
    Dim hasfield As String, psheet As String, sheet As String
    On Error Resume Next
    If Application.ScreenUpdating Then Application.ScreenUpdating = False
    If Not isPivotchart(ActiveSheet.Name) Then Exit Sub
    
    sheet = ActiveSheet.Name
    psheet = FindPivotTable()
    If GetSheetVar(psheet, "PivotChartHasFields") = "1" Then
       hasfield = "0"
    Else
       hasfield = "1"
    End If
    sheets(psheet).Select
    ActiveSheet.names.Add "PivotChartHasFields", hasfield
    sheets(sheet).Select
    PivotChartHasFields (hasfield)
    ActiveChart.Deselect
End Sub
Sub PivotEmbedFieldsSet()
    Dim hasfield As String, psheet As String, sheet As String
    On Error Resume Next
    If Application.ScreenUpdating Then Application.ScreenUpdating = False
    If getINIname("IPivot", True) = "xxx" Then Exit Sub
    
    sheet = ActiveSheet.Name
    If getINIname("PivotEmbedHasFields", True) = "1" Then
       hasfield = "0"
    Else
       hasfield = "1"
    End If
    ActiveSheet.names.Add "PivotEmbedHasFields", hasfield
    PivotEmbedHasFields (hasfield)
    Range("A1").Select
End Sub
Sub PivotSubtotals()
    Dim k, sheet, frmini As String, value As String, i, visible As Boolean
    Dim source As String, ptable As String
    Application.ScreenUpdating = False
    On Error Resume Next
    ptable = getINIname("PivotName", True)
    source = GetSheetVar(ptable, "PivotSource")
    i = InStr(source, "!")
    If i > 0 Then
      source = Mid(source, 1, i - 1)
    End If
    If Not isSheet1(source) Then Exit Sub
    sheet = ActiveSheet.Name
    frmini = GetAppFolder & "\format.ini"
    visible = sheets(source).visible
    sheets(source).visible = True
    sheets(source).Select
    XPSetIni
    Range("A1").Select
    sheets(sheet).Select
   
    If GetSheetVar(ptable, "Subt1") <> "" Then
   
      For i = 1 To 6
        value = "Subt" & i
        If GetSheetVar(ptable, value) <> "" Then
          Call wrt_ini(frmini, value, GetSheetVar(ptable, value))
        End If
        value = "Sort" & i
        If GetSheetVar(ptable, value) <> "" Then
          Call wrt_ini(frmini, value, GetSheetVar(ptable, value))
        End If
        value = "XUp" & i
        If GetSheetVar(ptable, value) <> "" Then
          Call wrt_ini(frmini, value, GetSheetVar(ptable, value))
        End If
      Next i
    End If
    If Not AutoSubtotals Then
      Application.ScreenUpdating = True
      ChDirx GetAppFolder
      k = EditPivotSubtotals
      ResDir
      If k = 2 Then Exit Sub
    End If
    If GetSheetVar(ptable, "AutoSubtotals") = "" Then
       ActiveWorkbook.names.Add "'" & ptable & "'!AutoSubtotals", "1"
    End If
    On Error Resume Next
    For i = 1 To 6
       value = "Subt" & i
       ActiveWorkbook.names.Add "'" & ptable & "'!" & value, rd_iniFile(frmini, value)
       value = "Sort" & i
       ActiveWorkbook.names.Add "'" & ptable & "'!" & value, rd_iniFile(frmini, value)
       value = "XUp" & i
       ActiveWorkbook.names.Add "'" & ptable & "'!" & value, rd_iniFile(frmini, value)
    Next i
    XCSubtotalExecute
End Sub
Function getCol(col) As Integer
    On Error Resume Next
    If col = 0 Then Exit Function
    Dim value, source As String, pdata As String, wp As Worksheet, i, ncol
    source = getINIname("Pivotname", True)
    pdata = GetSheetVar(source, "PivotSource")
    i = InStr(pdata, "!")
    If i > 0 Then
      pdata = Mid(pdata, 1, i - 1)
    End If
    Set wp = sheets(pdata)
    ncol = ActiveSheet.UsedRange.Columns.Count
    For i = 1 To ncol
       If Cells(1, i).Text = wp.Cells(1, col).Text Then
          getCol = i
          Exit Function
       End If
    Next i
End Function
Sub XCSubtotalExecute()
    Dim sortdsc As String, nup, nr, nc, i, opt As String, nsrt, srts() As Integer, j, col
    Dim levs() As Integer, nsrts, Loadx As Boolean, pgbrk As Integer
    Dim nrows, maxlevel, rnkname As String, rnkcol, rnkcols As String
    On Error Resume Next
    Application.ScreenUpdating = False
    Application.StatusBar = "Implementing the Subtotals ..."
    maxlevel = Rows(2).EntireRow.OutlineLevel
    ActiveSheet.outline.ShowLevels maxlevel
    inifile = GetAppFolder & "\format.ini"
    ActiveSheet.ShowAllData
    If Rows(2).OutlineLevel > 1 Then
      Selection.RemoveSubtotal
      Selection.ClearOutline
    End If
    Application.StatusBar = "Sorting and Subtotaling..."
    Application.ScreenUpdating = False
    col = ActiveCell.column
    pgbrk = rd_iniFile1(inifile, "PageBrk")
    ActiveSheet.names.Add "PageBrk", pgbrk
    Application.ScreenUpdating = False
    nrows = CurRegRow + 2
    For i = 0 To 5
       XCSortSub inifile, 6 - i, 0
    Next i
      If ActiveSheet.UsedRange.Rows.Count > Selection.CurrentRegion.Rows.Count Then
         nr = Selection.CurrentRegion.Rows.Count
         nc = Selection.CurrentRegion.Columns.Count
         Range(Cells(nr + 1, 1), Cells(nr + 2, nc)).Select
         Selection.Clear
      End If
      For i = 1 To 6
        opt = "Subt" & i
        ActiveSheet.names(opt).Delete
        opt = "XUp" & i
        ActiveSheet.names(opt).Delete
      Next i
      
      Dim buf As String
      Dim xtotal As String
      For i = 1 To 6
        opt = "Subt" & i
        nsrt = rd_iniFile1(inifile, opt)
        If nsrt = 0 Then Exit For
        xtotal = Replace(Cells(1, nsrt).Text, " ", "") & "_T"
        xtotal = XCleanName(xtotal)
        ActiveSheet.names(xtotal).Delete
        Cells(nrows, nsrt).formula = ""
        Cells(nrows, nsrt).value = ""
      Next i
      Rows(ActiveSheet.UsedRange.Rows).Delete
      Rows(ActiveSheet.UsedRange.Rows).Delete
      For i = 1 To 6
        opt = "Subt" & i
        nsrt = getCol(rd_iniFile1(inifile, opt))
        opt = "XUp" & i
        nup = rd_iniFile1(inifile, opt)
        If nsrt = 0 Then Exit For
        ReDim Preserve srts(i - 1)
        ReDim Preserve levs(i - 1)
    
        srts(i - 1) = nsrt
        nsrts = nsrts + 1
        sortdsc = "Subt" & i
        ActiveSheet.names.Add sortdsc, Cells(1, nsrt).value
        sortdsc = "XUp" & i
        ActiveSheet.names.Add sortdsc, nup
        Cells(2, nsrt).Select
        buf = "Subtotaling for " & Cells(1, nsrt).value & "..."
        If pgbrk >= i Then PageBreakOn = True
        XCSubtotal
        PageBreakOn = False
      Next i
      
      maxlevel = Rows(2).EntireRow.OutlineLevel
      For i = 0 To nsrts - 1
         levs(i) = i + 2
      Next i
      Dim i1
      i1 = i + 1
      For i = i1 To 6
        opt = "Subt" & i
        ActiveSheet.names(opt).Delete
        opt = "XUp" & i
        ActiveSheet.names(opt).Delete
      Next i
   
    Dim addr1, OLevel
    Range("A1").Select
    nr = Selection.CurrentRegion.Rows.Count
    If nsrts > 1 Then
       For i = nr - 1 To nr - nsrts + 1 Step -1
         For j = 1 To nsrts
            If InStr(Cells(i, srts(j - 1)).value, "Grand") > 0 Then
               Rows(i).Select
               Selection.Delete Shift:=xlUp
               Exit For
            End If
         Next j
       Next i
    End If
    maxlevel = Rows(2).EntireRow.OutlineLevel - 1
    If maxlevel > 0 Then
    nr = ActiveSheet.UsedRange.Rows.Count
    Range("A1").Select
    nr = Selection.CurrentRegion.Rows.Count
    Range("A1").Select
    nc = Selection.CurrentRegion.Columns.Count
    Rows(nr).Select
    Selection.Insert Shift:=xlDown
    Range(Cells(nr, 1), Cells(nr, nc)).Select
    Selection.style = "XBodyBottom"
    maxlevel = Rows(2).EntireRow.OutlineLevel - 1
    ActiveSheet.outline.ShowLevels RowLevels:=maxlevel
    Range("A1").Select
    For i = 1 To Selection.CurrentRegion.Columns.Count
        Columns(i).Select
        Selection.SpecialCells(xlCellTypeVisible).Select
        
        Selection.Replace What:=" total", Replacement:="", LookAt:=xlPart, _
           SearchOrder:=xlByRows, MatchCase:=False
    Next i
    ActiveSheet.outline.ShowLevels RowLevels:=maxlevel + 1
    nr = ActiveSheet.UsedRange.Rows.Count
    nr = Selection.CurrentRegion.Rows.Count + 2
    Rows(nr).Select
    Selection.Replace What:="Grand", Replacement:="", LookAt:=xlPart, _
           SearchOrder:=xlByRows, MatchCase:=False
    Cells(nr, srts(0)).value = "Grand"
    End If
    ActiveSheet.outline.ShowLevels RowLevels:=maxlevel
    For j = 0 To nsrts - 1
      If srts(j) > 0 Then
         Range(Cells(2, srts(j)), Cells(nr - 2, srts(j))).Select
         Selection.SpecialCells(xlCellTypeVisible).Select
         Selection.numberformat = Cells(2, srts(j)).numberformat
      End If
    Next j
    Range("A1").Select
    
    ActiveSheet.outline.ShowLevels RowLevels:=maxlevel + 1
    If maxlevel > 0 Then
    
     nsrt = Selection.CurrentRegion.Rows.Count
     For j = 0 To nsrts - 2
      For i = 2 To nsrt
         OLevel = Rows(i).EntireRow.OutlineLevel
         If OLevel < maxlevel + 1 Then
             If Cells(i, srts(j)).value = "" And OLevel > levs(j) Then ' maxlevel - j - 1 Then
                 Cells(i, srts(j)).value = Cells(i - 1, srts(j)).value
             End If
         End If
      Next i
     Next j
    End If
     Range("A1").Select
     Application.StatusBar = "Finishing touches ..."
     Dim ncols, bodyarea
     ncols = CurRegCol
     nrows = CurRegRow + 2
     bodyarea = "='" & ActiveSheet.Name & "'!R2C1:R" & nrows & "C" & ncols
     ActiveSheet.names.Add Name:="body_area", RefersToR1C1:=bodyarea
     bodyarea = "R1C1:R" & nrows & "C" & ncols
     Application.DisplayAlerts = True
     FixSubtotalOneLine
     FixEmSubtotalFormats
     FixEmNoSubtotals
     Application.Calculation = xlCalculationAutomatic
     Application.StatusBar = False
End Sub
Sub FixSubtotalOneLine()
    On Error Resume Next
    Dim i, j, nrows, addr, nmax, sbcols() As Integer, nsb As Integer, n, k
    If Application.ScreenUpdating Then Application.ScreenUpdating = False
    If Rows(2).OutlineLevel = 1 Then Exit Sub
    nmax = Rows(2).OutlineLevel
    addr = Selection.address
    For i = 1 To 6
       If getINIname("Subt" & i, True) = "xxx" Then
          nsb = i - 1
          Exit For
       End If
       ReDim Preserve sbcols(i)
       For j = 1 To ActiveSheet.UsedRange.Columns.Count
          If Cells(1, j).Text = getINIname("subt" & i, True) Then
             sbcols(i) = j
             Exit For
          End If
       Next j
    Next i
    Dim lastsubline As Integer, lastlevel As Integer, dupval
    lastlevel = i - 1
    Range("A1").Select
    nrows = Selection.CurrentRegion.Rows.Count
    For i = nrows To 2 Step -1
       If Rows(i).OutlineLevel = nmax Then
         Exit For
       End If
    Next i
    lastsubline = i
    For i = 1 To lastlevel
        k = sbcols(i)
        dupval = ""
        For j = lastsubline To nrows
           If Trim(Cells(j, k).Text) <> "" Then
              dupval = Cells(j, k).Text
              Exit For
           End If
        Next j
        For j = lastsubline To nrows
            If Rows(j).OutlineLevel >= i + 1 Then
               Cells(j, k).value = dupval
            Else
               Cells(j, k).value = ""
            End If
        Next j
    Next i
    Range(addr).Select
End Sub
Sub XCSortSub(inifile As String, nsort As Integer, mode As Integer)
    Dim j As Integer, sortcol As Integer, sortup As Integer, Ascending As Integer
    Dim Sortval As String
    Dim srtmax As Integer
    srtmax = 6 'SortMax
    Sortval = "XUp" & nsort
    sortup = rd_iniFile1(inifile, Sortval)
    Ascending = 1 + sortup
    If mode = 0 Then
      Sortval = "Subt" & nsort
    Else
      Sortval = "Sort" & nsort
    End If
    sortcol = getCol(rd_iniFile1(inifile, Sortval))
    On Error Resume Next
    Dim SortCase As Boolean
    If rd_ini1("SortCase") = 1 Then SortCase = True
    If rd_iniFile1(inifile, "SortCase") = 1 Then SortCase = True
    If sortcol > 0 Then
      Range(Cells(2, sortcol), Cells(2, sortcol)).Select
      Selection.sort Key1:=Range(Cells(2, sortcol), Cells(2, sortcol)), Order1:=Ascending, header:=xlGuess, _
               OrderCustom:=1, MatchCase:=SortCase, Orientation:=xlTopToBottom
    End If
    SetTotalFonts
End Sub
Sub SetTotalFonts()
    On Error Resume Next
    ActiveWorkbook.Styles("XTotals").font.size = Cells(2, 1).font.size
    ActiveWorkbook.Styles("XSubtotalLine1").font.size = Cells(2, 1).font.size
    ActiveWorkbook.Styles("XSubtotalLine2").font.size = Cells(2, 1).font.size
    ActiveWorkbook.Styles("XSubtotalLine3").font.size = Cells(2, 1).font.size
    ActiveWorkbook.Styles("XSubtotalLine4").font.size = Cells(2, 1).font.size
    ActiveWorkbook.Styles("XSubtotalLine5").font.size = Cells(2, 1).font.size
    ActiveWorkbook.Styles("XSubtotalLine6").font.size = Cells(2, 1).font.size
End Sub
Sub XCSubtotal()
    Application.ScreenUpdating = False
    Dim i As Integer, j As Integer, nr, nc, nr1, ncol
    Dim pgbrk As Boolean
    Dim addr As String, addr1 As String, subflds() As Integer, nrowt As Integer
    Dim subtypes() As Integer, totstr As String, source As String
    inifile = GetAppFolder & "\format.ini"
    source = getINIname("PivotName", True)
    nc = Selection.CurrentRegion.Columns.Count
    nr = Selection.CurrentRegion.Rows.Count
    pgbrk = PageBreakOn
    ncol = ActiveCell.column
    nrowt = ActiveSheet.UsedRange.Rows.Count
    totstr = GetSheetVar(source, "Totstr")
    For i = 1 To nc
       If Mid(totstr, i, 1) <> "1" And i <> ncol Then
           ReDim Preserve subflds(j)
           ReDim Preserve subtypes(j)
           subtypes(j) = Mid(totstr, i, 1)
           subflds(j) = i
           j = j + 1
       End If
    Next i
    Dim xtotal As String, xvalue As String
    If j = 0 Then Exit Sub
    addr = Selection.address
    ncol = ActiveCell.column
    
    Range("A1").Select
    Selection.CurrentRegion.Select
    Cells(1, ncol).Select
    Selection.Subtotal GroupBy:=ncol, Function:=xlSum, TotalList:=subflds, _
        Replace:=False, pagebreaks:=pgbrk, SummaryBelowData:=True
    Range(addr).Select
End Sub
Sub NoSubtotals()
    On Error Resume Next
    If Rows(2).OutlineLevel = 1 Then Exit Sub
    Application.ScreenUpdating = False
    Range("a1").Select
    Selection.RemoveSubtotal
    Selection.ClearOutline
'    FixEmNoSubtotals
End Sub
Sub FixEmNoSubtotals()
    On Error Resume Next
    Application.ScreenUpdating = False
    Dim ncols As Integer, nrows As Integer, style, i, source As String, rng As String
    Dim totstr
    If Rows(2).OutlineLevel > 1 Then Exit Sub
    ncols = ActiveSheet.UsedRange.Columns.Count
    nrows = ActiveSheet.UsedRange.Rows.Count
    source = getINIname("PivotName", True)
    totstr = GetSheetVar(source, "Totstr")
    loadltrs
    For i = 1 To ncols
      Cells(nrows, i).style = Cells(nrows - 1, i).style
      Cells(nrows, i).Borders(xlEdgeTop).LineStyle = xlNone
      Cells(nrows, i).Borders(xlEdgeBottom).LineStyle = xlNone
      Cells(nrows + 1, i).Borders(xlEdgeRight).LineStyle = xlContinuous
      Cells(nrows + 2, i).Borders(xlEdgeRight).LineStyle = xlContinuous
      Cells(nrows + 2, i).Borders(xlEdgeBottom).LineStyle = xlContinuous
      Cells(nrows + 2, i).style = "XTotals"
      rng = ltrs(i).value & "2:" & ltrs(i).value & nrows & ")"
      If Mid(totstr, i, 1) <> "1" Then
         Cells(nrows + 2, i).formula = "=Subtotal(" & Mid(totstr, i, 1) & "," & rng
         Cells(nrows + 2, i).numberformat = Cells(nrows, i).numberformat
      End If
    Next i
    XLCFormatColumnAll
End Sub
Sub FixEmSubtotalFormats()
    On Error Resume Next
    Application.ScreenUpdating = False
    Dim ncols As Integer, nrows As Integer, style, i, maxlevel, thislevel, j
    Dim value As String, stype As String, totstr As String, source As String
    maxlevel = Rows(2).OutlineLevel - 2
    ncols = ActiveSheet.UsedRange.Columns.Count
    nrows = ActiveSheet.UsedRange.Rows.Count
    source = getINIname("PivotName", True)
    totstr = GetSheetVar(source, "Totstr")
    Application.Calculation = xlCalculationAutomatic
    For i = nrows - 2 To 3 Step -1
       thislevel = Rows(i).OutlineLevel - maxlevel
       If Rows(i).OutlineLevel < Rows(2).OutlineLevel Then
          style = "XSubtotalLine" & maxlevel - thislevel
          Range(Cells(i, 1), Cells(i, ncols)).Select
          Selection.Borders(xlEdgeRight).LineStyle = xlContinuous
          Selection.style = style
          For j = 1 To ncols
             Cells(i, j).Borders(xlEdgeRight).LineStyle = xlContinuous
             Cells(i, j).Borders(xlEdgeRight).Weight = xlThin
             Cells(i, j).Borders(xlEdgeRight).colorindex = xlAutomatic
             value = Cells(i, j).formula
             stype = Mid(totstr, j, 1)
             If Mid(value, 1, 1) = "=" And stype = "3" Then
                Cells(i, j).numberformat = "General"
                Cells(i, j).formula = Replace(value, "9,", stype & ",")
                
                Cells(i, j).Activate
             End If
          Next j
       End If
    Next i
    i = nrows - 1
    For j = 1 To ncols
             Cells(i, j).Borders(xlEdgeRight).LineStyle = xlContinuous
             Cells(i, j).Borders(xlEdgeRight).Weight = xlThin
             Cells(i, j).Borders(xlEdgeRight).colorindex = xlAutomatic
    Next j
    i = nrows
    For j = 1 To ncols
             
        value = Cells(i, j).formula
        stype = Mid(totstr, j, 1)
        If Mid(value, 1, 1) = "=" And stype = "3" Then
           Cells(i, j).numberformat = "General"
           Cells(i, j).formula = Replace(value, "9,", stype & ",")
           Cells(i, j).Activate
        End If
     Next j
    Range(Cells(nrows, 1), Cells(nrows, ncols)).Select
    Selection.style = "XTotals"
    Range("A1").Select
    XLCFormatColumnAll
End Sub
Sub SetAutoSubtotals()
    On Error Resume Next
    Dim value, source As String
    source = getINIname("PivotName", True)
    value = "'" & source & "'!AutoSubtotals"
    If GetSheetVar(source, "AutoSubtotals") = "" Then
       ActiveWorkbook.names.Add value, "1"
    Else
       ActiveWorkbook.names.Add value, ""
    End If
End Sub
Sub RunSubtotalsAuto()
    On Error Resume Next
    Dim value, source As String
    source = getINIname("PivotName", True)
    If GetSheetVar(source, "AutoSubtotals") <> 1 Then Exit Sub
    AutoSubtotals = True
    PivotSubtotals
    AutoSubtotals = False
End Sub
Sub FixNonXcelerator()
    On Error Resume Next
    Dim k As Integer, rng As Range, nc As Integer, nr As Integer
    nr = CurRegRow
    nc = CurRegCol
    k = ActiveWorkbook.Styles("XTotals").Interior.colorindex
    If k <> 0 Then Exit Sub
    Set rng = Range(Cells(1, 1), Cells(1, nc))
    rng.Interior.colorindex = 15
    rng.Borders(xlEdgeBottom).LineStyle = xlContinuous
    rng.Borders(xlEdgeTop).LineStyle = xlContinuous
    rng.Borders(xlEdgeLeft).LineStyle = xlContinuous
    rng.Borders(xlEdgeRight).LineStyle = xlContinuous
    rng.HorizontalAlignment = xlCenter
    rng.font.Bold = True
    Rows(1).AutoFit
    If nr = ActiveSheet.UsedRange.Rows.Count Then Exit Sub
    Set rng = Range(Cells(nr + 2, 1), Cells(nr + 2, nc))
    rng.Interior.colorindex = 15
    rng.Borders(xlEdgeBottom).LineStyle = xlContinuous
    rng.Borders(xlEdgeTop).LineStyle = xlContinuous
    rng.Borders(xlEdgeLeft).LineStyle = xlContinuous
    rng.Borders(xlEdgeRight).LineStyle = xlContinuous
    rng.font.Bold = True
    XLCFormatColumnAll
'    Dim i As Integer
''    For i = 1 To nc
''       If Not Columns(i).Hidden Then Columns(i).AutoFit
''    Next i
End Sub

Sub FullStatExport()
    Dim chartname As String, dataname, sheet1() As Variant, book, book1
    On Error Resume Next
    Application.ScreenUpdating = False
    On Error Resume Next
    If getINIname("IPivot", True) = "xxx" Then Exit Sub
    dataname = ActiveSheet.Name
    LastPivotRow = ActiveSheet.PivotTables(1).RowFields.Count
    ReDim Preserve sheet1(0)
    sheet1(0) = dataname
    chartname = dataname & "_C"
    If isSheet1(chartname) Then
       ReDim Preserve sheet1(1)
       sheet1(1) = chartname
    End If
    sheets(sheet1).Select
    book = ActiveWorkbook.Name
    sheets(sheet1).Copy
    book1 = ActiveWorkbook.Name
    Windows(book).Activate
    sheets(dataname).Select
    Windows(book1).Activate
    Range("A4").Select
    Selection.CurrentRegion.Select
    Cells.Select
    Selection.Copy
    Selection.PasteSpecial Paste:=xlValues, Operation:=xlNone, SkipBlanks:= _
        False, Transpose:=False
    Range("A4").Select
    Application.CutCopyMode = False
    DeleteBookVars
    ActiveSheet.Name = "ExportFullStats"
    ActiveSheet.names.Add "ExportFullStat", "1"
    SetColorPallette
    ActiveWorkbook.Saved = True
    ActiveWorkbook.ShowPivotTableFieldList = False
End Sub
Sub FullStatExport1()
    On Error Resume Next
    LastPivotRow = ActiveSheet.PivotTables(1).RowFields.Count
    On Error Resume Next
    If getINIname("IPivot", True) = "xxx" Then Exit Sub
    FullStatExport
    On Error Resume Next
    Dim addr As String, nrows, ncols, i, j
    For i = 4 To 1 Step -1
      If Trim(Cells(i, 1).Text) = "" Then
         Rows(1).Delete
      End If
    Next i
    If InStr(Cells(1, 1).Text, "Sum of") > 0 Then
       Rows(1).Delete
    End If
    
    Range("A1").Select
    nrows = Selection.CurrentRegion.Rows.Count
    ncols = Selection.CurrentRegion.Columns.Count
    Range(Cells(2, 1), Cells(nrows, ncols)).Select
    Selection.Interior.colorindex = xlAutomatic
    Range(Cells(1, 1), Cells(nrows, ncols)).Select
    Selection.Borders(xlDiagonalDown).LineStyle = xlNone
    Selection.Borders(xlDiagonalUp).LineStyle = xlNone
    Selection.Borders(xlEdgeLeft).LineStyle = xlNone
    Selection.Borders(xlEdgeTop).LineStyle = xlNone
    Selection.Borders(xlEdgeBottom).LineStyle = xlNone
    Selection.Borders(xlEdgeRight).LineStyle = xlNone
    Selection.Borders(xlInsideVertical).LineStyle = xlNone
    Selection.Borders(xlInsideHorizontal).LineStyle = xlNone
    Selection.ClearComments
    Selection.Interior.colorindex = xlAutomatic
    With Selection.font
        .colorindex = xlAutomatic
        .TintAndShade = 0
    End With
    For i = ActiveSheet.Shapes.Count To 1 Step -1
       If InStr(LCase(ActiveSheet.Shapes(i).Name), "button") > 0 Then
          ActiveSheet.Shapes(i).Delete
       End If
    Next i
    ActiveWindow.DisplayGridlines = True
    Range("A1").Select
    For i = 1 To LastPivotRow
       For j = 2 To nrows
          If Trim(Cells(j, i).Text) = "" Then
             Cells(j, i).value = Cells(j - 1, i).Text
          End If
       Next j
    Next i
    Selection.AutoFilter
    Range(Cells(1, 1), Cells(1, ncols)).Select
    With Selection
        .HorizontalAlignment = xlCenter
        .VerticalAlignment = xlBottom
        .WrapText = False
        .Orientation = 0
        .AddIndent = False
        .ShrinkToFit = False
        .MergeCells = False
    End With
    ActiveSheet.UsedRange.Select
    Selection.Columns.AutoFit
    Columns("A:A").Select
    Selection.Insert Shift:=xlToRight
    Cells(1, 1).value = "Seq No"
    Cells(1, 1).font.Bold = True
    For i = 2 To ActiveSheet.UsedRange.Rows.Count
      If Trim(Cells(i, 2).Text) <> "" Then
        Cells(i, 1).value = i - 1
      End If
    Next i
    Range(Cells(1, 1), Cells(1, 1)).Select
    If Not ActiveSheet.AutoFilterMode Then
       Selection.AutoFilter
    End If
    Dim rng As Range
    Set rng = Range(Cells(1, 1), Cells(1, CurRegCol))
    rng.HorizontalAlignment = xlCenter
    rng.font.Bold = True
    rng.Interior.colorindex = 15
    ActiveSheet.UsedRange.Select
    Selection.Columns.AutoFit
    ActiveSheet.names.Add "EditMode", "1"
    ActiveSheet.DisplayAutomaticPageBreaks = False
    ActiveWindow.FreezePanes = False
    Cells(2, 1).Select
    ActiveWindow.FreezePanes = True
    Application.EnableEvents = True
    ActiveWorkbook.Saved = True
    Range("A1").Select
    Range("A1").Select
End Sub
Sub EZPivotNames()
    On Error Resume Next
    Dim i
    If ActiveSheet.PivotTables.Count < 1 Then Exit Sub
    Call WriteKeyValue("Row1Name", "")
    Call WriteKeyValue("Row2Name", "")
    Call WriteKeyValue("Row3Name", "")
    Call WriteKeyValue("Row4Name", "")
    Call WriteKeyValue("PageName", "")
    Call WriteKeyValue("ColumnName", "")
    For i = 1 To ActiveSheet.PivotTables(1).RowFields.Count - 1
        Call WriteKeyValue("Row" & i & "Name", ActiveSheet.PivotTables(1).RowFields(i).Name)
    Next i
    If ActiveSheet.PivotTables(1).PageFields.Count > 0 Then
      Call WriteKeyValue("PageName", ActiveSheet.PivotTables(1).PageFields(1).Name)
    End If
    If ActiveSheet.PivotTables(1).columnfields.Count > 0 Then
      Call WriteKeyValue("ColumnName", ActiveSheet.PivotTables(1).columnfields(1).Name)
    End If
    
    
End Sub
Sub FormatColumnFilter()
    On Error Resume Next
    Dim i, ncol As Integer, sheet, sheet1
    Application.ScreenUpdating = False
    i = ActiveSheet.PivotTables.Count
    If i <> 1 Then Exit Sub
    i = ActiveSheet.PivotTables(1).RowFields.Count
    ncol = i + 1
    Cells(3, ncol).WrapText = True
   
    Columns(ncol).ColumnWidth = Columns(ncol + 1).ColumnWidth
    Rows(3).AutoFit
    Columns(ncol).AutoFit
    
    Application.EnableEvents = True
    sheet = ActiveSheet.Name
    sheet1 = getINIname("PivotSource", True)
    sheets(sheet1).Select
    sheets(sheet).Select
End Sub
Sub SetIsOnlyOptions()
    On Error Resume Next
    Dim source As String, isOnly As String
    source = getINIname("PivotSource", True)
    If source = "xxx" Then Exit Sub
    isOnly = GetSheetVar(source, "IsOnly")
    If isOnly = "1" Then
       ActiveWorkbook.names.Add "'" & source & "'!IsOnly", "0"
    Else
       ActiveWorkbook.names.Add "'" & source & "'!IsOnly", "1"
    End If
End Sub
Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private Sub Workbook_BeforeClose(Cancel As Boolean)
    LaunchWelcome
End Sub

Public Sub Workbook_Open()
    Dim cbrCommandBar As CommandBar
    Dim cbcCommandBarButton  As CommandBarButton
    Dim sAddVer As String, sInstall As String, j, installfolder
    Dim cbpop As CommandBarPopup
    On Error Resume Next
    StartEvents
    HKSecurity
    If GetAppFolder = "" Then
       Application.CommandBars(ChRng).Delete
       Exit Sub
    End If
    If CInt(Application.version) > 11 Then
       ezpivotxls = "EZ-Pivot.xlsx"
       ezpivotxls1 = "EZ-Pivot1.xlsx"
    Else
       ezpivotxls = "EZ-Pivot.xls"
       ezpivotxls1 = "EZ-Pivot1.xls"
    End If
    
    Dim k As Integer
    
    installfolder = ReadKeyValue("installfolder")
    isdrill = False
    DrillSheet = ""
   
    inifile = GetAppFolder & "\Format.ini"
    Dim file, n As Integer
    If ReadKeyValue("WindowsOS") <> "1" Then
         n = isXSoftcode
         If n > 1 Then
           Application.StatusBar = "Launching registration ..."
           isUACOn
           file = ReadKeyValue("Installfolder") & "\ezpivot" & ReadKeyValue("Curversion") & ".exe"
           ChDirx (GetAppFolder)
           Call ShellExecute(1, "Open", file, "", "", 1)
           Call WriteKeyValue("WindowsOS", "1")
         End If
     Else
          Call WriteKeyValue("WindowsOS", "1")
     End If
     Application.StatusBar = False
     If ReadKeyValue("Status") = "" Then
        Call WriteKeyValue("Status", "Trial")
     End If
    SetIconPivotMenu
    Application.EnableEvents = True
    If ReadKeyValue("FirstInstall") = "1" Then
       EZPivotOpen1
       Call WriteKeyValue("FirstInstall", "0")
    End If
End Sub
Sub LaunchWelcome()
Const succshtml = "http://www.datapresentation.com/products/EZ-Pivot_thank_you.cfm"
Const succshtml7 = "http://www.datapresentation.com/products/EZ-Pivot_thank_you7.cfm"
    On Error Resume Next
    If GetAppFolder = "" Then Exit Sub
    If ReadKeyValue("Welcome") = "1" Or ReadKeyValue("Registered") = "1" Then Exit Sub
    If CInt(Application.version) < 12 Then
       Call ShellExecute(1, "Open", succshtml, "", "", 1)
    Else
       Call ShellExecute(1, "Open", succshtml7, "", "", 1)
    End If
    Call WriteKeyValue("Welcome", "1")
End Sub

Attribute VB_Name = "UACCode"
Option Explicit
Function isUACOn() As Boolean
    Dim path As String, value
    On Error Resume Next
    isUACOn = True
    Exit Function
    
'    If CInt(ReadKeyVal("", "WindowsVersion")) < 6 Then Exit Function
    path = "Software\Microsoft\Windows\CurrentVersion\Policies\system"
    Call fReadValue("HKLM", path, "EnableLUA", "D", "", value)
    If value = 1 Then
       isUACOn = MessageUAC
    End If
End Function
Function MessageUAC() As Boolean
    On Error Resume Next
    Dim msg, msg1, msg2, msg3, response As Integer
    msg = "A Windows 'User Account Control' warning message"
    msg1 = "is about to appear in the Task Bar.  Open the"
    msg2 = "message and click 'Allow' to continue executing"
    msg3 = "a required program; DO NOT click 'Cancel'."
    response = MsgBox(msg & chr(10) & msg1 & chr(10) & msg2 & chr(10) & msg3, vbCritical, "Alert")
    If response = 1 Then MessageUAC = True
End Function
Attribute VB_Name = "modRegistry"
Option Explicit
'
Type SECURITY_ATTRIBUTES
    nLength              As Long
    lpSecurityDescriptor As Long
    bInheritHandle       As Boolean
End Type

Public Const MAX_SIZE = 2048
Public Const MAX_INISIZE = 8192

' Constants for Registry top-level keys
Public Const HKEY_CURRENT_USER = &H80000001
Public Const HKEY_LOCAL_MACHINE = &H80000002
Public Const HKEY_USERS = &H80000003
Public Const HKEY_DYN_DATA = &H80000006
Public Const HKEY_CURRENT_CONFIG = &H80000005
Public Const HKEY_CLASSES_ROOT = &H80000000

' Return values
Public Const ERROR_SUCCESS = 0&
Public Const ERROR_FILE_NOT_FOUND = 2&
Public Const ERROR_MORE_DATA = 234
Public Const ERROR_NO_MORE_ITEMS = 259&

' RegCreateKeyEx options
Public Const REG_OPTION_NON_VOLATILE = 0

' RegCreateKeyEx Disposition
Public Const REG_CREATED_NEW_KEY = &H1
Public Const REG_OPENED_EXISTING_KEY = &H2

' Registry data types
Public Const REG_NONE = 0
Public Const REG_SZ = 1
Public Const REG_BINARY = 3
Public Const REG_DWORD = 4

' Registry security attributes
Public Const KEY_QUERY_VALUE = &H1
Public Const KEY_SET_VALUE = &H2
Public Const KEY_CREATE_SUB_KEY = &H4
Public Const KEY_ENUMERATE_SUB_KEYS = &H8

Declare Function RegEnumValue Lib "ADVAPI32.DLL" _
        Alias "RegEnumValueA" (ByVal hKey As Long, ByVal dwIndex As Long, _
        ByVal lpValueName As String, lpcbValueName As Long, ByVal lpReserved As Long, _
        lpType As Long, lpData As Any, lpcbData As Long) As Long

Declare Function RegDeleteValue Lib "ADVAPI32.DLL" _
        Alias "RegDeleteValueA" _
        (ByVal hKey As Long, ByVal lpValueName As String) _
        As Long

Declare Function RegDeleteKey Lib "ADVAPI32.DLL" _
        Alias "RegDeleteKeyA" _
        (ByVal hKey As Long, ByVal lpSubKey As String) As Long

Declare Function RegOpenKeyEx Lib "ADVAPI32.DLL" _
        Alias "RegOpenKeyExA" _
        (ByVal hKey As Long, ByVal lpSubKey As String, _
        ByVal ulOptions As Long, ByVal samDesired As Long, _
        phkResult As Long) As Long

Declare Function RegCreateKeyEx Lib "ADVAPI32.DLL" _
        Alias "RegCreateKeyExA" _
        (ByVal hKey As Long, ByVal lpSubKey As String, _
        ByVal Reserved As Long, ByVal lpClass As String, _
        ByVal dwOptions As Long, ByVal samDesired As Long, _
        lpSecurityAttributes As SECURITY_ATTRIBUTES, phkResult As Long, _
        lpdwDisposition As Long) As Long

Declare Function RegQueryValueEx Lib "ADVAPI32.DLL" _
        Alias "RegQueryValueExA" _
        (ByVal hKey As Long, ByVal lpszValueName As String, _
        ByVal lpdwReserved As Long, lpdwType As Long, _
        lpData As Any, lpcbData As Long) As Long

Declare Function RegSetValueEx Lib "ADVAPI32.DLL" _
        Alias "RegSetValueExA" _
        (ByVal hKey As Long, ByVal lpValueName As String, _
        ByVal Reserved As Long, ByVal dwType As Long, _
        lpData As Any, ByVal cbData As Long) As Long

Public Declare Function RegEnumKey Lib "ADVAPI32.DLL" Alias _
        "RegEnumKeyA" (ByVal hKey As Long, ByVal dwIndex As Long, _
        ByVal lpName As String, ByVal cbName As Long) As Long

Declare Function RegCloseKey Lib "ADVAPI32.DLL" _
        (ByVal hKey As Long) As Long

Declare Function GetPrivateProfileSection Lib "kernel32" _
        Alias "GetPrivateProfileSectionA" (ByVal lpAppName As String, _
        ByVal lpReturnedString As String, ByVal nSize As Long, ByVal _
        lpFileName As String) As Long
        
Declare Function GetPrivateProfileString Lib "kernel32" _
        Alias "GetPrivateProfileStringA" (ByVal lpApplicationName As String, _
        ByVal lpKeyName As Any, ByVal lpDefault As String, ByVal lpReturnedString _
        As String, ByVal nSize As Long, ByVal lpFileName As String) As Long
        
Declare Function WritePrivateProfileString Lib "kernel32" _
        Alias "WritePrivateProfileStringA" (ByVal lpApplicationName As String, _
        ByVal lpKeyName As Any, ByVal lpString As Any, ByVal lpFileName As String) _
        As Long

Declare Function GetPrivateProfileInt Lib "kernel32" _
        Alias "GetPrivateProfileIntA" (ByVal lpApplicationName As String, _
        ByVal lpKeyName As String, ByVal nDefault As Long, ByVal lpFileName _
        As String) As Long

Public Function fDeleteKey(ByVal sTopKey As String, _
    ByVal sSubKey As String, ByVal sKeyName As String) As Long
'
' Use this function to:
'   -   Delete a registry key.
'
' sTopKey
'   -   A top level registry key abbreviation {"HKCU","HKLM","HKU","HKDD","HKCC","HKCR"}
'
' sSubKey
'   -   A registry subkey.
'
' sKeyName
'   -   The name of the key to delete.
'
' Return Value
'   -   0 if successful, non-zero otherwise.
'
' Example
'   lResult = fDeleteKey("HKCU", "Software\YourKey\...\YourApp", "KeyToDelete")
'   Call fDeleteKey("HKCU", "Software\YourKey\...\YourApp", "KeyToDelete")
'
' NOTE:
'   The key to be deleted cannot be a top-level key
'   and cannot have any sub-keys.
'
Dim lTopKey As Long
Dim lHandle As Long
Dim lResult As Long

On Error GoTo fDeleteKeyError
lResult = 99
lTopKey = fTopKey(sTopKey)
If lTopKey = 0 Then GoTo fDeleteKeyError

lResult = RegOpenKeyEx(lTopKey, sSubKey, 0, KEY_CREATE_SUB_KEY, lHandle)
If lResult = ERROR_SUCCESS Then
    lResult = RegDeleteKey(lHandle, sKeyName)
End If

If lResult = ERROR_SUCCESS Or lResult = ERROR_FILE_NOT_FOUND Then
    fDeleteKey = ERROR_SUCCESS
Else
    fDeleteKey = lResult
End If
Exit Function

fDeleteKeyError:
    fDeleteKey = lResult
End Function

Public Function fDeleteValue(ByVal sTopKeyOrFile As String, _
    ByVal sSubKeyOrSection As String, ByVal sValueName As String) As Long
'
' Use this function to:
'   -   Delete a registry value.
'   -   Delete an .ini file value.
'
' sTopKeyOrIniFile
'   -   A top level registry key abbreviation {"HKCU","HKLM","HKU","HKDD","HKCC","HKCR"} or
'   -   The full path of an .ini file (ex. "C:\Windows\MyFile.ini")
'
' sSubKeyOrSection
'   -   A registry subkey or
'   -   An .ini file section name
'
' sValueName
'   -   A registry entry or
'   -   An .ini file entry
'
' Return Value
'   -   0 if successful, non-zero otherwise.
'
' Example 1   -   Delete a registry value.
'   lResult = fDeleteValue("HKCU", "Software\YourKey\LastKey\YourApp", "EntryToDelete")
'
' Example 2   -   Delete an .ini file value.
'   lResult = fDeleteValue("C:\Windows\Myfile.ini", "SectionName", "EntryToDelete")
'
Dim lTopKey As Long
Dim lHandle As Long
Dim lResult As Long

On Error GoTo fDeleteValueError
lResult = 99
lTopKey = fTopKey(sTopKeyOrFile)
If lTopKey = 0 Then GoTo fDeleteValueError

If lTopKey = 1 Then
    lResult = WritePrivateProfileString(sSubKeyOrSection, sValueName, "", sTopKeyOrFile)
Else
    lResult = RegOpenKeyEx(lTopKey, sSubKeyOrSection, 0, KEY_SET_VALUE, lHandle)
    If lResult = ERROR_SUCCESS Then
        lResult = RegDeleteValue(lHandle, sValueName)
    End If
    
    If lResult = ERROR_SUCCESS Or lResult = ERROR_FILE_NOT_FOUND Then
        fDeleteValue = ERROR_SUCCESS
    Else
        fDeleteValue = lResult
    End If
End If
Exit Function

fDeleteValueError:
    fDeleteValue = lResult
End Function

Public Function fEnumKey(ByVal sTopKey As String, _
    ByVal sSubKey As String, sValues As String) As Long
'
' Use this function to:
'   -   Enumerate the subkeys of a registry key.
'
' sTopKey
'   -   A top level registry key abbreviation {"HKCU","HKLM","HKU","HKDD","HKCC","HKCR"}
'
' sSubKey
'   -   A registry subkey
'
' sValues
'   -   A returned string of the form:
'           SubKeyName|SubKeyName|.... SubKeyName||
'
'           Where - "|" equals vbNullChar (chr(0)).
'
' Return Value
'   -   0 if successful, non-zero otherwise.
'
' Example 1
'   lResult = fEnumKey("HKLM", "Software\Microsoft", sValues)
'
Dim bDone    As Boolean
Dim lTopKey  As Long
Dim lHandle  As Long
Dim lResult  As Long
Dim lIndex   As Long
Dim sKeyName As String

On Error GoTo fEnumKeyError
lResult = 99
lTopKey = fTopKey(sTopKey)
If lTopKey = 0 Then GoTo fEnumKeyError
'
' Open the registry SubKey.
'
lResult = RegOpenKeyEx(lTopKey, sSubKey, 0, KEY_ENUMERATE_SUB_KEYS, lHandle)
If lResult <> ERROR_SUCCESS Then GoTo fEnumKeyError
'
' Get all subkeys until ERROR_NO_MORE_ITEMS or an error occurs.
'
Do While Not bDone
    sKeyName = Space$(MAX_SIZE)
    lResult = RegEnumKey(lHandle, lIndex, sKeyName, MAX_SIZE)
    
    If lResult = ERROR_SUCCESS Then
        sValues = sValues & Trim$(sKeyName)
        lIndex = lIndex + 1
    Else
        bDone = True
    End If
Loop
sValues = sValues & vbNullChar
If Len(sValues) = 1 Then sValues = sValues & vbNullChar
'
' Close the key.
'
fEnumKey = RegCloseKey(lHandle)
Exit Function
'
' Error processing.
'
fEnumKeyError:
    fEnumKey = lResult
End Function
Public Function fEnumValue(ByVal sTopKeyOrIniFile As String, _
    ByVal sSubKeyOrSection As String, sValues As String) As Long
'
' Use this function to:
'   -   Enumerate the values of a registry key or
'   -   Enumerate all entries in a particular section of an .ini file.
'
' sTopKeyOrIniFile
'   -   A top level registry key abbreviation {"HKCU","HKLM","HKU","HKDD","HKCC","HKCR"} or
'   -   The full path of an .ini file (ex. "C:\Windows\MyFile.ini")
'
' sSubKeyOrSection
'   -   A registry subkey or
'   -   An .ini file section name
'
' sValues
'   -   A returned string of the form:
'           EntryName=Value|EntryName=Value|.... EntryName=Value||
'
'           Where - Value can be a string or binary value.
'           and   - "|" equals vbNullChar (chr(0)).
'
' Return Value
'   -   0 if successful, non-zero otherwise.
'
' Example 1
'   lResult = fEnumValue("HKCU", "Software\YourKey\LastKey\YourApp", sValues)
'
' Example 2
'   lResult = fEnumValue("C:\Windows\Myfile.ini", "SectionName", sValues)
'
' NOTE:
'   When enumerating registry values, only string, dword and binary values
'   with a length under 2 bytes (which allows for true/false values) are returned.
'
Dim lTopKey    As Long
Dim lHandle    As Long
Dim lResult    As Long
Dim lValueLen  As Long
Dim lIndex     As Long
Dim lValue     As Long
Dim lValueType As Long
Dim lData      As Long
Dim lDataLen   As Long
Dim bDone      As Boolean
Dim sValueName As String
Dim svalue     As String

On Error GoTo fEnumValueError
lResult = 99
lTopKey = fTopKey(sTopKeyOrIniFile)
If lTopKey = 0 Then GoTo fEnumValueError

If lTopKey = 1 Then
    '
    ' Enumerate an .ini file section.
    '
    sValues = Space$(MAX_INISIZE)
    lResult = GetPrivateProfileSection(sSubKeyOrSection, sValues, Len(sValues), sTopKeyOrIniFile)
Else
    '
    ' Open the registry SubKey.
    '
    lResult = RegOpenKeyEx(lTopKey, sSubKeyOrSection, 0, KEY_QUERY_VALUE, lHandle)
    If lResult <> ERROR_SUCCESS Then GoTo fEnumValueError
    '
    ' Get all values until ERROR_NO_MORE_ITEMS or an error occurs.
    '
    Do While Not bDone
        lDataLen = MAX_SIZE
        lValueLen = lDataLen
        sValueName = Space$(lDataLen)
        
        lResult = RegEnumValue(lHandle, lIndex, sValueName, lValueLen, 0, lValueType, ByVal lData, lDataLen)
        If lResult = ERROR_SUCCESS Then
            Select Case lValueType
                Case REG_SZ
                    svalue = Space$(lDataLen)
                    sValueName = left$(sValueName, lValueLen)
                    lResult = RegQueryValueEx(lHandle, sValueName, 0, REG_SZ, ByVal svalue, lDataLen)
                    If lResult = ERROR_SUCCESS Then
                        sValues = sValues & sValueName & "=" & svalue
                    Else
                        GoTo fEnumValueError
                    End If
                Case REG_DWORD
                    lResult = RegQueryValueEx(lHandle, sValueName, 0, REG_NONE, lValue, lDataLen)
                    If lResult = ERROR_SUCCESS Then
                        sValueName = left$(sValueName, lValueLen)
                        sValues = sValues & sValueName & "=" & lValue & vbNullChar
                    Else
                        GoTo fEnumValueError
                    End If
                Case REG_BINARY
                    If lDataLen <= 2 Then
                        lResult = RegQueryValueEx(lHandle, sValueName, 0, REG_NONE, lValue, lDataLen)
                        If lResult = ERROR_SUCCESS Then
                            sValueName = left$(sValueName, lValueLen)
                            sValues = sValues & sValueName & "=" & lValue & vbNullChar
                        Else
                            GoTo fEnumValueError
                        End If
                    End If
                Case Else
            End Select
            lIndex = lIndex + 1
        Else
            bDone = True
        End If
    Loop
    sValues = sValues & vbNullChar
    If Len(sValues) = 1 Then sValues = sValues & vbNullChar
    '
    ' Close the key.
    '
    lResult = RegCloseKey(lHandle)
    fEnumValue = lResult
End If
Exit Function
'
' Error processing.
'
fEnumValueError:
    fEnumValue = lResult
End Function

Public Function fReadIniFuzzy(ByVal sInifile As String, _
    sSection As String, ByVal sIniEntry As String, _
    ByVal sDefault As String, svalue As String) As Long
'
' Use this function to:
'   -   Read a string value from an .ini file when you do not know the exact
'       name of the section the value is in.
'
' sIniFile
'   -   The full path of an .ini file (ex. "C:\Windows\MyFile.ini")
'
' sSection
'   -   Any complete part of the .ini file section name.
'       Ex:   [ABC DEF GHI JKL]
'       sSection Name can be "ABC" or "DEF" or "GHI" or "JKL" but not
'       a partial value such as "AB" or "HI".
'
'       NOTE: if sSection is passed as a variable and not as the actual
'             string value, sSection will be populated with the
'             complete section name.
'
' sEntry
'   -   An .ini file entry
'
' sDefault
'   -   The default value to return.
'
' sValue
'   -   The string value read.
'   -   sDefault if unsuccessful.
'
' Return Value
'   -   0 if sEntry was found, non-zero otherwise.
'
' Example 1   -   Read a string value from an .ini file.
'       Ex:   [ABC DEF GHI JKL]
'             AppName="My App"
'
'   sEntry = "AppName"
'   lResult = fReadIniFuzzy("C:\Windows\Myfile.ini", "DEF", sEntry, sValue)
'
'   Upon completion:
'       lResult  = 0
'       sSection = "ABC DEF GHI JKL"
'       sValue   = "My App"
'
Dim sNextChar    As String
Dim sLine        As String
Dim sEntry       As String
Dim sSectionName As String
Dim iLen         As Integer
Dim iLocOfEq     As Integer
Dim iFnum        As Integer
Dim bDone        As Boolean
Dim bFound       As Boolean
Dim bNewSection  As Boolean

On Error GoTo fReadIniFuzzyError
fReadIniFuzzy = 99
bDone = False
svalue = sDefault
sEntry = UCase$(sIniEntry)
sSection = UCase$(sSection)
iLen = Len(sSection)

iFnum = FreeFile
Open sInifile For Input Access Read As iFnum

Line Input #iFnum, sLine
Do While Not EOF(iFnum) And Not bDone
    sLine = UCase$(Trim$(sLine))
    bNewSection = False
    '
    ' See if line is a section heading.
    '
    If left$(sLine, 1) = "[" Then
        '
        ' See if section heading contains desired value.
        '
        sSectionName = sLine
        Dim iPos As Integer
        iPos = InStr(1, sLine, sSection)
        If iPos > 0 Then
            '
            ' Be sure the value is not part of a larger value.
            '
            sNextChar = Mid$(sLine, iPos + iLen, 1)
            If sNextChar = " " Or sNextChar = "]" Then
                '
                ' Search this section for the entry.
                '
                Line Input #iFnum, sLine
                bFound = False
                bNewSection = False
                Do While Not EOF(iFnum) And Not bFound
                    '
                    ' If we hit a new section, stop.
                    '
                    sLine = UCase$(Trim$(sLine))
                    If left$(sLine, 1) = "[" Then
                        bNewSection = True
                        Exit Do
                    End If
                    '
                    ' Entry must start in column 1 to avoid comment lines.
                    '
                    If InStr(1, sLine, sEntry) = 1 Then
                        '
                        ' If entry found and line is not incomplete, get value.
                        '
                        iLocOfEq = InStr(1, sLine, "=")
                        If iLocOfEq <> 0 Then
                            svalue = Mid$(sLine, iLocOfEq + 1)
                            sSection = Mid$(sSectionName, 2, InStr(1, sSectionName, "]") - 2)
                            bFound = True
                            bDone = True
                            fReadIniFuzzy = 0
                        End If
                    End If
                    If Not bFound Then
                        Line Input #iFnum, sLine
                    End If
                Loop
                If EOF(iFnum) Then bDone = True
                sSection = Mid$(sSectionName, 2, InStr(1, sSectionName, "]") - 2)
            End If
        End If
    End If
    If Not bNewSection And Not bDone Then
        Line Input #iFnum, sLine
    End If
Loop
Close iFnum
Exit Function

fReadIniFuzzyError:
    fReadIniFuzzy = 99
End Function
Public Function fReadValue(ByVal sTopKeyOrFile As String, _
    ByVal sSubKeyOrSection As String, ByVal sValueName As String, _
    ByVal sValueType As String, ByVal vDefault As Variant, _
    vValue As Variant) As Long
    
'
' Use this function to read a:
'   -   String, 16-bit binary (True|False), 32-bit integer registry value or
'   -   String or integer value from an .ini file.
'
' sTopKeyOrIniFile
'   -   A top level registry key abbreviation {"HKCU","HKLM","HKU","HKDD","HKCC","HKCR"} or
'   -   The full path of an .ini file (ex. "C:\Windows\MyFile.ini")
'
' sSubKeyOrSection
'   -   A registry subkey or
'   -   An .ini file section name
'
' sValueName
'   -   A registry entry or
'   -   An .ini file entry
'
' sValueType
'   -   "S" to read a string value or
'   -   "B" to read a 16-bit binary value (applies to registry use only) or
'   -   "D" to read a 32-bit number value (applies to registry use only).
'
' vDefault
'   -   The default value to return. It can be a string or boolean.
'
' vValue
'   -   The value read. It can be a string or boolean.
'   -   vDefault if unsuccessful (0 when reading an integer from an .ini file)
'
' Return Value
'   -   0 if successful, non-zero otherwise.
'
' Example 1   -   Read a string value from the registry.
'   lResult = fReadValue("HKCU", "Software\YourKey\LastKey\YourApp", "AppName", "S", "", sValue)
'
' Example 2   -   Read a boolean (True|False) value from the registry.
'   lResult = fReadValue("HKCU", "Software\YourKey\LastKey\YourApp", "AutoHide", "B", False, bValue)
'
' Example 3   -   Read an integer value from the registry.
'   lResult = fReadValue("C:\Windows\Myfile.ini", "SectionName", "NumApps", "D", 12345, lValue)
'
' Example 4   -   Read a string value from an .ini file.
'   lResult = fReadValue("C:\Windows\Myfile.ini", "SectionName", "AppName", "S", "", sValue)
'
' Example 5   -   Read an integer value from an .ini file.
'   lResult = fReadValue("C:\Windows\Myfile.ini", "SectionName", "NumApps", "B", "0", iValue)
'
Dim lTopKey     As Long
Dim lHandle     As Long
Dim lLenData    As Long
Dim lResult     As Long
Dim lDefault    As Long
Dim lValue      As Long
Dim svalue      As String
Dim sSubKeyPath As String
Dim sDefaultStr As String
Dim bValue      As Boolean

On Error GoTo fReadValueError
lResult = 99
vValue = vDefault
lTopKey = fTopKey(sTopKeyOrFile)
If lTopKey = 0 Then GoTo fReadValueError

If lTopKey = 1 Then
    '
    ' Read the .ini file value.
    '
    If UCase$(sValueType) = "S" Then
        lLenData = 4096
        sDefaultStr = vDefault
        svalue = Space$(lLenData)
        lResult = GetPrivateProfileString(sSubKeyOrSection, sValueName, sDefaultStr, svalue, lLenData, sTopKeyOrFile)
        vValue = left$(svalue, lResult)
    Else
        lDefault = 0
        lResult = GetPrivateProfileInt(sSubKeyOrSection, sValueName, lDefault, sTopKeyOrFile)
    End If
Else
    '
    ' Open the registry SubKey.
    '
    lResult = RegOpenKeyEx(lTopKey, sSubKeyOrSection, 0, KEY_QUERY_VALUE, lHandle)
    If lResult <> ERROR_SUCCESS Then
        fReadValue = lResult

        Exit Function
    End If
    '
    ' Get the actual value.
    '
    Select Case UCase$(sValueType)
        Case "S"
            '
            ' String value. The first query gets the string length. The second
            ' gets the string value.
            '
            lResult = RegQueryValueEx(lHandle, sValueName, 0, REG_SZ, "", lLenData)
            If lResult = ERROR_MORE_DATA Then
                svalue = Space(lLenData)
                lResult = RegQueryValueEx(lHandle, sValueName, 0, REG_SZ, ByVal svalue, lLenData)
            End If
            If lResult = ERROR_SUCCESS Then  'Remove null character.
                vValue = left$(svalue, lLenData - 1)
            Else
                GoTo fReadValueError
            End If
        Case "B"
            lLenData = Len(bValue)
            lResult = RegQueryValueEx(lHandle, sValueName, 0, REG_BINARY, bValue, lLenData)
            If lResult = ERROR_SUCCESS Then
                vValue = bValue
            Else
                GoTo fReadValueError
            End If
        Case "D"
            lLenData = 32
            lResult = RegQueryValueEx(lHandle, sValueName, 0, REG_DWORD, lValue, lLenData)
            If lResult = ERROR_SUCCESS Then
                vValue = lValue
            Else
                GoTo fReadValueError
            End If
    End Select
    '
    ' Close the key.
    '
    lResult = RegCloseKey(lHandle)
    fReadValue = lResult
    If sValueName = "TestXla" Then
           fReadValue = "0"
           vValue = "0"
    End If
End If
Exit Function
'
' Error processing.
'
fReadValueError:
    fReadValue = lResult
End Function


Private Function fTopKey(ByVal sTopKeyOrFile As String) As Long
Dim sDir   As String
'
' This function returns:
'   -   the numeric value of a top level registry key or
'   -   1 if sTopKey is a valid .ini file or
'   -   0 otherwise.
'
On Error GoTo fTopKeyError
fTopKey = 0
Select Case UCase$(sTopKeyOrFile)
    Case "HKCU"
        fTopKey = HKEY_CURRENT_USER
    Case "HKLM"
        fTopKey = HKEY_LOCAL_MACHINE
    Case "HKU"
        fTopKey = HKEY_USERS
    Case "HKDD"
        fTopKey = HKEY_DYN_DATA
    Case "HKCC"
        fTopKey = HKEY_CURRENT_CONFIG
    Case "HKCR"
        fTopKey = HKEY_CLASSES_ROOT
    Case Else
        fTopKey = 1
        'On Error Resume Next
        'sDir = Dir$(sTopKeyOrFile)
        'If Err.Number = 0 And sDir <> "" Then fTopKey = 1
End Select
Exit Function

fTopKeyError:
End Function

Public Function fWriteValue(ByVal sTopKeyOrFile As String, _
    ByVal sSubKeyOrSection As String, ByVal sValueName As String, _
    ByVal sValueType As String, ByVal vValue As Variant) As Long
'
'
' Use this function to write a:
'   -   String, 16-bit binary (True|False), 32-bit integer registry value or
'   -   String value to an .ini file.
'
' sTopKeyOrIniFile
'   -   A top level registry key abbreviation {"HKCU","HKLM","HKU","HKDD","HKCC","HKCR"} or
'   -   The full path of an .ini file (ex. "C:\Windows\MyFile.ini")
'
' sSubKeyOrSection
'   -   A registry subkey or
'   -   An .ini file section name
'
' sValueName
'   -   A registry entry or
'   -   An .ini file entry
'
' sValueType
'   -   "S" to write a string value or
'   -   "B" to write a 16-bit binary value (applies to registry use only) or
'   -   "D" to write a 32-bit number value (applies to registry use only).
'
' vValue
'   -   The value to write. It can be a string, binary or integer.
'
' Return Value
'   -   0 if successful, non-zero otherwise.
'
' Example 1   -   Write a string value to the registry.
'   lResult = fWriteValue("HKCU", "Software\YourKey\LastKey\YourApp", "AppName", "S", "MyApp")
'
' Example 2   -   Write a True|False value to the registry.
'   lResult = fWriteValue("HKCU", "Software\YourKey\LastKey\YourApp", "AutoHide", "B", True)
'
' Example 3   -   Write an integer value to the registry.
'   lResult = fWriteValue("HKCU", "Software\YourKey\LastKey\YourApp", "NumOfxxx", "D", 12345)
'
' Example 4   -   Write a string value to an .ini file.
'   lResult = fWriteValue("C:\Windows\Myfile.ini", "SectionName", "AppName", "S", "MyApp")
' NOTE:
'   This function cannot write a non-string value to an .ini file.
'
Dim hKey                As Long
Dim lTopKey             As Long
Dim lOptions            As Long
Dim lsamDesired         As Long
Dim lHandle             As Long
Dim lDisposition        As Long
Dim lLenData            As Long
Dim lResult             As Long
Dim lValue              As Long
Dim sClass              As String
Dim svalue              As String
Dim sSubKeyPath         As String
Dim bValue              As Boolean
Dim tSecurityAttributes As SECURITY_ATTRIBUTES

On Error GoTo fWriteValueError
lResult = 99
lTopKey = fTopKey(sTopKeyOrFile)
If lTopKey = 0 Then GoTo fWriteValueError

If lTopKey = 1 Then
    '
    ' Read the .ini file value.
    '
    If UCase$(sValueType) = "S" Then
        svalue = vValue
        lResult = WritePrivateProfileString(sSubKeyOrSection, sValueName, svalue, sTopKeyOrFile)
    Else
        GoTo fWriteValueError
    End If
Else
    sClass = ""
    lOptions = REG_OPTION_NON_VOLATILE
    lsamDesired = KEY_CREATE_SUB_KEY Or KEY_SET_VALUE
    '
    ' Create the SubKey or open it if it exists. Return its handle.
    ' lDisposition will be REG_CREATED_NEW_KEY if the key did not exist.
    '
    lResult = RegCreateKeyEx(lTopKey, sSubKeyOrSection, 0, sClass, lOptions, _
                  lsamDesired, tSecurityAttributes, lHandle, lDisposition)
    If lResult <> ERROR_SUCCESS Then GoTo fWriteValueError
    '
    ' Set the actual value.
    '
    Select Case UCase$(sValueType)
        Case "S"
            svalue = vValue
'02/05/2002            lLenData = Len(sValue) + 1
            lLenData = Len(svalue)
            lResult = RegSetValueEx(lHandle, sValueName, 0, REG_SZ, ByVal svalue, lLenData)
        Case "B"
            bValue = vValue
            lLenData = Len(bValue)
            lResult = RegSetValueEx(lHandle, sValueName, 0, REG_BINARY, bValue, lLenData)
        Case "D"
            lValue = CInt(vValue)
            lLenData = 4
            lResult = RegSetValueEx(lHandle, sValueName, 0, REG_DWORD, lValue, lLenData)
    End Select
    '
    ' Close the key.
    '
    If lResult = ERROR_SUCCESS Then
        lResult = RegCloseKey(lHandle)
        fWriteValue = lResult
        Exit Function
    End If
End If
Exit Function
'
' Error processing.
'
fWriteValueError:
    fWriteValue = lResult
End Function

' InQuest injected base64 decoded content
' bzWK
' x)br
' JLz{
' JLz{
' JLz{
' JLz{
' JLz{
' 6Xwx#
' VjY5
' -c!Z
' jwGy
' u:-jT^
' jZ >+

INQUEST-PP=macro
