Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "mdlCreateFileList"
Option Explicit

Public Const gcstrCompanyName = "Tele2"  ' H|fffd|r |fffd|ndrar du ALLTID till f|fffd|retagets namn
Private Const mcblnUseCompany As Boolean = False   ' Om du vill att det skall st|fffd| Mallar/templates osv p|fffd| mallknappen |fffd|ndra till false

Private Const mcblnUseUserTemplates As Boolean = True
Private Const mcblnUseWGTemplates As Boolean = True

Private Const mcblnCheckForUserTemplateCompanyFolder As Boolean = True   ' H|fffd|r |fffd|ndrar du om du vill sl|fffd| av att TemplateLibrary skall titta i en undermapp f|fffd|r userTemplates
Private Const mcblnCheckForWGTemplateCompanyFolder As Boolean = True     ' H|fffd|r |fffd|ndrar du om du vill sl|fffd| av att TemplateLibrary skall titta i en undermapp f|fffd|r wgTemplates

Private Const mcblnShowHeaders As Boolean = True


Public Type typFolders
    path As String
    showHeader As Boolean
    headerSW As String
    headerUK As String
    fileType As Long        ' 0 f|fffd|r templates 1 f|fffd|r dokument
    fileExt As String
    idMSO As String
End Type

Public Type typLabelLang
    countryCode As Long
    lblType As String
    labelGroup As String
    labelBtn As String
End Type

Public Function checkValidFile(ByVal vstrFileName As String, ByVal vstrFileExt As String) As Boolean

    Dim avntExcludeFiles(3)
    Dim i As Long
    
    avntExcludeFiles(0) = "Bok.xltx"
    avntExcludeFiles(1) = "Book.xltx"
    avntExcludeFiles(2) = "V|fffd|lkommen till Excel.xltx"
    avntExcludeFiles(3) = "Welcome to Excel.xltx"
    
    If Not Right(LCase(vstrFileName), Len(vstrFileExt)) = LCase(vstrFileExt) Then
        checkValidFile = False
        Exit Function
    End If
    
    For i = LBound(avntExcludeFiles) To UBound(avntExcludeFiles)
        If Trim(LCase(vstrFileName)) = Trim(LCase(avntExcludeFiles(i))) Then
            checkValidFile = False
            Exit Function
        End If
    Next i

    checkValidFile = True

End Function

Public Function checkPathExists(ByVal vstrPath As String) As Boolean

    If Trim(vstrPath) <> "" Then
        On Error GoTo Catch:
        If GetAttr(vstrPath) And vbDirectory And Not (GetAttr(vstrPath) = 18) Then  'GetAttr(vstrPath) = 16 Or GetAttr(vstrPath) = 8208 Or GetAttr(vstrPath) = 8240 Then
            checkPathExists = True
            Exit Function
        End If
    End If

Exit Function

Catch:
    Err.Clear

End Function

Public Function getSourceFolders() As typFolders()

    Dim lngNO_Folders As Long
    Dim lngFld As Long
    Dim typFld() As typFolders
    
    Dim fso As Object
    
    Set fso = CreateObject("Scripting.FileSystemObject")
    
    If mcblnUseUserTemplates Then lngNO_Folders = lngNO_Folders + 1
    If mcblnUseWGTemplates Then lngNO_Folders = lngNO_Folders + 1
    
    If lngNO_Folders > 0 Then
        ReDim typFld(1 To lngNO_Folders)
        
        If mcblnUseUserTemplates Then
            lngFld = lngFld + 1
            typFld(lngFld).path = modOptions.DefaultFilePath(eUserTemplatesPath)
            typFld(lngFld).headerSW = "Lokala mallar"
            typFld(lngFld).headerUK = "Local templates"
            typFld(lngFld).showHeader = mcblnShowHeaders
            typFld(lngFld).fileType = 0
            typFld(lngFld).fileExt = "xltx|xltm|xlt"
            typFld(lngFld).idMSO = "FileSaveAsExcelXlsx"
            
            If mcblnCheckForUserTemplateCompanyFolder Then
                If fso.folderExists(typFld(lngFld).path & "\" & gcstrCompanyName) Then
                    typFld(lngFld).path = typFld(lngFld).path & "\" & gcstrCompanyName
                End If
            End If
            
        End If
        
        If mcblnUseWGTemplates Then
            lngFld = lngFld + 1
            typFld(lngFld).path = modOptions.DefaultFilePath(eWorkGroupTemplatesPath)
            typFld(lngFld).headerSW = "Gruppens mallar"
            typFld(lngFld).headerUK = "Workgroup templates"
            typFld(lngFld).showHeader = mcblnShowHeaders
            typFld(lngFld).fileType = 0
            typFld(lngFld).fileExt = "xltx|xltm|xlt"
            typFld(lngFld).idMSO = "FileSaveAsExcelXlsx"
            
            If mcblnCheckForWGTemplateCompanyFolder Then
                If fso.folderExists(typFld(lngFld).path & "\" & gcstrCompanyName) Then
                    typFld(lngFld).path = typFld(lngFld).path & "\" & gcstrCompanyName
                End If
            End If
        End If
    
    End If

    Set fso = Nothing

    getSourceFolders = typFld

End Function

Public Function getLabelLang() As typLabelLang()

  Dim atypLblLng(1) As typLabelLang
  
  atypLblLng(0).lblType = "Templ"
  atypLblLng(0).countryCode = 1053
  atypLblLng(0).labelGroup = "Mallar"
  If mcblnUseCompany Then
    atypLblLng(0).labelBtn = gcstrCompanyName
  Else
    atypLblLng(0).labelBtn = "Mallar"
  End If
  
  atypLblLng(1).lblType = "Templ"
  atypLblLng(1).countryCode = 1033
  atypLblLng(1).labelGroup = "Templates"
  If mcblnUseCompany Then
    atypLblLng(1).labelBtn = gcstrCompanyName
  Else
    atypLblLng(1).labelBtn = "Templates"
  End If
  
  getLabelLang = atypLblLng

End Function

Public Function getLabelString(ByVal vstrType As String, ByVal vblnGroup As Boolean) As String

  Dim atypLblLng() As typLabelLang
  Dim i As Long
  Dim lngCountryCode As Long
  
  lngCountryCode = Application.LanguageSettings.LanguageID(msoLanguageIDUI)
  
  atypLblLng = getLabelLang
  
  For i = LBound(atypLblLng) To UBound(atypLblLng)
      If atypLblLng(i).lblType = vstrType And atypLblLng(i).countryCode = Application.LanguageSettings.LanguageID(msoLanguageIDUI) Then
          If vblnGroup Then
              getLabelString = atypLblLng(i).labelGroup
              Exit Function
          Else
              getLabelString = atypLblLng(i).labelBtn
              Exit Function
          End If
      End If
  Next i

  For i = LBound(atypLblLng) To UBound(atypLblLng)
      If atypLblLng(i).lblType = vstrType And atypLblLng(i).countryCode = 1033 Then
          If vblnGroup Then
              getLabelString = atypLblLng(i).labelGroup
              Exit Function
          Else
              getLabelString = atypLblLng(i).labelBtn
              Exit Function
          End If
      End If
  Next i

End Function

Public Function getFileList(ByVal vstrPath As String, ByVal vstrFileExt As String) As Variant

    Dim i, j, x, y As Long
    Dim astrFileList() As String
    Dim astrFileTemp() As String
    Dim astrPathList() As String
    Dim astrPathList2Temp() As String
    Dim astrPathList2() As String
    Dim astrFileExt() As String
    
    Dim strFile As String
    Dim strPath As String
    Dim strPath2 As String
    Dim blnHasPath As Boolean
    Dim blnHasPath2 As Boolean
        
    astrFileExt = Split(vstrFileExt, "|")
        
    For y = LBound(astrFileExt) To UBound(astrFileExt)
        
        strFile = Dir$(vstrPath & "\*." & astrFileExt(y), vbNormal)
            
        Do Until LenB(strFile) = 0
            If checkValidFile(strFile, astrFileExt(y)) Then
                ReDim Preserve astrFileTemp(3, i)
                astrFileTemp(0, i) = Replace(strFile, "." & astrFileExt(y), "")
                
                astrFileTemp(1, i) = vstrPath & "\" & strFile
                astrFileTemp(2, i) = "."
                astrFileTemp(3, i) = "."
                i = i + 1
            End If
            strFile = Dir$
            
        Loop
    
    Next y
    
        strPath = Dir$(vstrPath & "\", vbDirectory)
        
        Do Until LenB(strPath) = 0
            If strPath <> "." And strPath <> ".." Then
                If checkPathExists(vstrPath & "\" & strPath) Then
                    ReDim Preserve astrPathList(j)
                    astrPathList(j) = strPath
                    blnHasPath = True
                    j = j + 1
                End If
            End If
            strPath = Dir$(, vbDirectory)
        Loop
    
        If blnHasPath Then
            For j = LBound(astrPathList) To UBound(astrPathList)
                For y = LBound(astrFileExt) To UBound(astrFileExt)
                    strFile = Dir$(vstrPath & "\" & astrPathList(j) & "\*." & astrFileExt(y), vbNormal)
                    
                    Do Until LenB(strFile) = 0
                        
                        If checkValidFile(strFile, astrFileExt(y)) Then
                            ReDim Preserve astrFileTemp(3, i)
                            astrFileTemp(0, i) = Replace(strFile, "." & astrFileExt(y), "")
                            astrFileTemp(1, i) = vstrPath & "\" & astrPathList(j) & "\" & strFile
                            astrFileTemp(2, i) = astrPathList(j)
                            astrFileTemp(3, i) = "."
                            i = i + 1
                        End If
                        
                        strFile = Dir$
                    Loop
                Next y
            Next j
            
        
            For j = LBound(astrPathList) To UBound(astrPathList)
                strPath = Dir$(vstrPath & "\" & astrPathList(j) & "\", vbDirectory)
                
                Do Until LenB(strPath) = 0
                    If strPath <> "." And strPath <> ".." Then
                        If checkPathExists(vstrPath & "\" & astrPathList(j) & "\" & strPath) Then
                            ReDim Preserve astrPathList2Temp(1, x)
                            astrPathList2Temp(0, x) = astrPathList(j)
                            astrPathList2Temp(1, x) = strPath
                            blnHasPath2 = True
                            x = x + 1
                        End If
                    End If
                    strPath = Dir$
                Loop
                
            Next j
        
            If blnHasPath2 Then
                ReDim astrPathList2(UBound(astrPathList2Temp, 2), UBound(astrPathList2Temp, 1))
                For j = LBound(astrPathList2Temp, 2) To UBound(astrPathList2Temp, 2)
                    For x = LBound(astrPathList2Temp, 1) To UBound(astrPathList2Temp, 1)
                        astrPathList2(j, x) = astrPathList2Temp(x, j)
                    Next x
                Next j
                
                For j = LBound(astrPathList2) To UBound(astrPathList2)
                    For y = LBound(astrFileExt) To UBound(astrFileExt)
                        strFile = Dir$(vstrPath & "\" & astrPathList2(j, 0) & "\" & astrPathList2(j, 1) & "\*." & astrFileExt(y), vbNormal)
                        
                        Do Until LenB(strFile) = 0
                            If checkValidFile(strFile, astrFileExt(y)) Then
                                ReDim Preserve astrFileTemp(3, i)
                                
                                astrFileTemp(0, i) = Replace(strFile, "." & astrFileExt(y), "")
                                astrFileTemp(1, i) = vstrPath & "\" & astrPathList2(j, 0) & "\" & astrPathList2(j, 1) & "\" & strFile
                                astrFileTemp(2, i) = astrPathList2(j, 0)
                                astrFileTemp(3, i) = astrPathList2(j, 1)
                                i = i + 1
                            End If
                            strFile = Dir$
                        Loop
                    Next y
                Next j
            
            End If
        
        End If


    If i > 0 Then
        
        ReDim astrFileList(UBound(astrFileTemp, 2), UBound(astrFileTemp, 1))
        
        For i = LBound(astrFileTemp, 2) To UBound(astrFileTemp, 2)
            For j = LBound(astrFileTemp, 1) To UBound(astrFileTemp, 1)
                If j = 0 Or j = 1 Or j = 2 Or j = 3 Then
                    astrFileList(i, j) = Replace(astrFileTemp(j, i), "&", "&amp;&amp;")
                Else
                    astrFileList(i, j) = astrFileTemp(j, i)
                End If
            Next j
        Next i
        
        Call sortArray(astrFileList)
        Call sortArray(astrFileList, 3)
        Call sortArray(astrFileList, 2)
        
        getFileList = astrFileList
    Else
        getFileList = Null
    End If

End Function

Public Sub sortArray(ByRef ravntIn As Variant, Optional ByVal vlngSortCol As Long = 0)

    Dim i, j, y As Long
    Dim t, strCondition As String
    

    For i = LBound(ravntIn, 1) To UBound(ravntIn, 1) - 1
        For j = LBound(ravntIn, 1) To UBound(ravntIn, 1) - 1
             strCondition = ravntIn(j, vlngSortCol) > ravntIn(j + 1, vlngSortCol)
             If strCondition Then
               For y = LBound(ravntIn, 2) To UBound(ravntIn, 2)
                   t = ravntIn(j, y)
                   ravntIn(j, y) = ravntIn(j + 1, y)
                   ravntIn(j + 1, y) = t
                   Next y
               End If
           Next
       Next
End Sub

Public Function breakAvnt(ByVal vavntFiles As Variant) As Variant

    Dim i As Long
    Dim j As Long

    Dim avntPathsTmp() As Variant
    Dim avntPaths As Variant

    Dim strPath1 As String
    Dim strPath2 As String
    
    strPath1 = "."
    strPath2 = "."

    ReDim Preserve avntPathsTmp(1, j)
    
    avntPathsTmp(0, j) = strPath1
    avntPathsTmp(1, j) = strPath2

    For i = LBound(vavntFiles) To UBound(vavntFiles)
        If vavntFiles(i, 2) <> strPath1 Then
            strPath1 = vavntFiles(i, 2)
            j = j + 1
            ReDim Preserve avntPathsTmp(1, j)
            avntPathsTmp(0, j) = strPath1
            avntPathsTmp(1, j) = "."
            strPath2 = "."
        End If
        
        If vavntFiles(i, 3) <> strPath2 Then
            strPath2 = vavntFiles(i, 3)
            j = j + 1
            ReDim Preserve avntPathsTmp(1, j)
            avntPathsTmp(0, j) = strPath1
            avntPathsTmp(1, j) = strPath2
        End If
    Next i

    ReDim avntPaths(LBound(avntPathsTmp, 2) To UBound(avntPathsTmp, 2), LBound(avntPathsTmp, 1) To UBound(avntPathsTmp, 1))
    
    For i = LBound(avntPaths) To UBound(avntPaths)
        For j = LBound(avntPaths, 2) To UBound(avntPaths, 2)
            avntPaths(i, j) = avntPathsTmp(j, i)
        Next j
    Next i

    breakAvnt = avntPaths

End Function

Public Function checkLanguage() As String

    If Application.LanguageSettings.LanguageID(msoLanguageIDUI) = 1053 Then
        checkLanguage = "SWE"
    Else
        checkLanguage = "ENG"
    End If
    
End Function

Public Function buildXML() As String

    Dim blnFilesFound As Boolean
    Dim strXML As String
    Dim avntDocs As Variant
    Dim avntPaths As Variant
    Dim i As Long
    Dim j As Long
    Dim k As Long
    Dim strPath As String
    Dim strPath2 As String
    Dim strPath3 As String
    Dim strID As String
    Dim blnBreak2 As Boolean
    Dim blnMenuStarted As Boolean
    Dim atypSourceFolders() As typFolders
    Dim strHeader As String
    Dim blnSep As Boolean
    Dim strImg As String
    
    
    atypSourceFolders = getSourceFolders
    
    For k = LBound(atypSourceFolders) To UBound(atypSourceFolders)
        
        If checkPathExists(atypSourceFolders(k).path) Then
        
            avntDocs = getFileList(atypSourceFolders(k).path, atypSourceFolders(k).fileExt)
            If IsArray(avntDocs) Then
                avntPaths = breakAvnt(avntDocs)
            Else
                avntPaths = ""
            End If
            
            strImg = atypSourceFolders(k).idMSO
            
            strPath2 = "."
            strPath3 = "."
            
            blnSep = False
            blnBreak2 = False
            
            If IsArray(avntPaths) Then
                For i = LBound(avntPaths) To UBound(avntPaths)
                
                    strPath2 = avntPaths(i, 0)
                    strPath3 = avntPaths(i, 1)
                
                    If strPath2 = "." And strPath3 = "." And Not blnMenuStarted Then
                        strXML = "<menu xmlns=""http://schemas.microsoft.com/office/2006/01/customui"">" & vbCrLf
                        blnMenuStarted = True
                    End If
                    
                    If atypSourceFolders(k).showHeader And Not blnSep Then
                        
                        strID = "sep" & k & "_" & i
                        
                        If checkLanguage = "SWE" Then
                            strHeader = atypSourceFolders(k).headerSW
                        ElseIf checkLanguage = "ENG" Then
                            strHeader = atypSourceFolders(k).headerUK
                        End If
                        
                        strXML = strXML & vbTab & "<menuSeparator id=""" & strID & """ title=""" & strHeader & """ />" & vbCrLf
                    
                        blnSep = True
                    
                    End If
                    
                    If strPath2 = "." And strPath3 = "." Then
                        For j = LBound(avntDocs) To UBound(avntDocs)
                            If avntDocs(j, 2) = strPath2 And avntDocs(j, 3) = strPath3 Then
                                strID = "doc1_" & k & "_" & i & "_" & j
                                strXML = strXML & vbTab & "<button id=""" & strID & """ label=""" & avntDocs(j, 0) & """ " & "tag=""" & avntDocs(j, 1) & """ " & _
                                             "onAction=""openDynTemplate"" imageMso=""" & strImg & """ />" & vbCrLf
                            End If
                        Next j
                    Else
                        If strPath3 = "." Then
                            If blnBreak2 Then
                                strXML = strXML & vbTab & "</menu>" & vbCrLf
                            End If
                            
                            strXML = strXML & vbTab & "<menu id=""" & "path2_" & k & "_" & i & "_" & j & """ label=""" & avntPaths(i, 0) & """ >" & vbCrLf
                            For j = LBound(avntDocs) To UBound(avntDocs)
                                If avntDocs(j, 2) = strPath2 And avntDocs(j, 3) = strPath3 Then
                                    strID = "doc2_" & k & "_" & i & "_" & j
                                    strXML = strXML & vbTab & vbTab & "<button id=""" & strID & """ label=""" & avntDocs(j, 0) & """ " & "tag=""" & avntDocs(j, 1) & """ " & _
                                                 "onAction=""openDynTemplate"" imageMso=""" & strImg & """ />" & vbCrLf
                                End If
                            Next j
                            
                            blnBreak2 = True
                        Else
                            strXML = strXML & vbTab & vbTab & "<menu id=""" & "path3_" & k & "_" & i & "_" & j & """ label=""" & avntPaths(i, 1) & """ >" & vbCrLf
                            For j = LBound(avntDocs) To UBound(avntDocs)
                                If avntDocs(j, 2) = strPath2 And avntDocs(j, 3) = strPath3 Then
                                    strID = "doc3_" & k & "_" & i & "_" & j
                                    strXML = strXML & vbTab & vbTab & vbTab & "<button id=""" & strID & """ label=""" & avntDocs(j, 0) & """ " & "tag=""" & avntDocs(j, 1) & """ " & _
                                                 "onAction=""openDynTemplate"" imageMso=""" & strImg & """ />" & vbCrLf
                                End If
                            Next j
                            strXML = strXML & vbTab & vbTab & "</menu>" & vbCrLf
                        End If
                    End If
                Next i
            
                If blnBreak2 Then
                    strXML = strXML & vbTab & "</menu>" & vbCrLf
                End If
            
            End If
        End If
    Next k

    If blnMenuStarted Then
        strXML = strXML & "</menu>"
    End If

    buildXML = strXML

End Function
Attribute VB_Name = "mdlRibbon"
Option Explicit

Public gRibbon As IRibbonUI
Public gBlnRibbonLoaded As Boolean

Sub loadRibbon(ribbon As IRibbonUI)

    Set gRibbon = ribbon
    gBlnRibbonLoaded = True
End Sub

' H|fffd|mtar inneh|fffd|ll till mallvalsknappen
Sub menu_GetContent(control As IRibbonControl, ByRef content)

    content = buildXML
End Sub

' |fffd|ppnar mall
Public Sub OpenDynTemplate(control As IRibbonControl)

    Dim strTemplatePath As String
    Dim tmplName() As String
    Dim index As Integer
    Dim iRet
    Dim wb As Workbook
    On Error Resume Next

    strTemplatePath = Replace(control.Tag, "&&", "&")
    tmplName = Split(strTemplatePath, "\")
    index = UBound(tmplName)

'    System.Cursor = wdCursorWait

    Set wb = Application.Workbooks.Add(strTemplatePath)
    
' Anv|fffd|nd nedanst|fffd|ende rad om man vill g|fffd|ra n|fffd|got med arbetsboken efter att man har |fffd|ppnat det
'    Call mdlModule.someSub(wb)
 
    Set wb = Nothing
 
End Sub

Sub getLabelGroup(control As IRibbonControl, ByRef value)

  value = getLabelString(control.Tag, True)

End Sub

Sub getLabelBtn(control As IRibbonControl, ByRef value)

  value = getLabelString(control.Tag, False)

End Sub

Attribute VB_Name = "modOptions"
Option Explicit

'  Version flag for NT
Private Const VER_PLATFORM_WIN32_NT As Long = 2

'  The OS version structure.
Private Type OSVERSIONINFO
    dwOSVersionInfoSize As Long
    dwMajorVersion As Long
    dwMinorVersion As Long
    dwBuildNumber As Long
    dwPlatformId As Long
    szCSDVersion As String * 128    ' Maintenance string
End Type

Public Enum eFilePaths
    eUserTemplatesPath
    eWorkGroupTemplatesPath
End Enum

'  Declare for retrieving the extended information about the version of the operating system.
'Private Declare Function GetVersionEx Lib "kernel32" Alias "GetVersionExA" (lpVersionInformation As OSVERSIONINFO) As Long

'  Declare for expanding an environment variable, both ansi and unicode versions.
'Private Declare Function ExpandEnvironmentStringsA Lib "kernel32" (ByVal lpSrc As String, ByVal lpDst As String, ByVal nSize As Long) As Long
'Private Declare Function ExpandEnvironmentStringsW Lib "kernel32" (ByVal lpSrc As Long, ByVal lpDst As Long, ByVal nSize As Long) As Long


'  Enums for the the different type
'  of data in the registry.
Private Enum ERegValue
    eRegValue_None = 0
    eRegValue_Sz = 1
    eRegValue_ExpandSz = 2
    eRegValue_Binary = 3
    eRegValue_DWord = 4
    eRegValue_DWordLittleEndian = 4
    eRegValue_DWordBigEndian = 5
    eRegValue_Link = 6
    eRegValue_MultiSz = 7
    eRegValue_ResourceList = 8
    eRegValue_FullResourceDescriptor = 9
    eRegValue_ResourceRequirementsList = 10
End Enum

'  Private class constants
Private Const KEY_QUERY_VALUE = &H1
Private Const ERROR_MORE_DATA = 234

'  API function declarations for quering the registry
'  Now includes 64-bits decalrations.

#If VBA7 Then
    Private Declare PtrSafe Function RegCloseKey Lib "advapi32.dll" (ByVal hKey As LongPtr) As Long
#Else
    Private Declare Function RegCloseKey Lib "advapi32.dll" (ByVal hKey As Long) As Long
#End If

#If VBA7 Then
    Private Declare PtrSafe Function RegOpenKeyEx Lib "advapi32.dll" Alias "RegOpenKeyExA" (ByVal hKey As LongPtr, ByVal lpSubKey As String, ByVal ulOptions As Long, ByVal samDesired As Long, phkResult As LongPtr) As Long
#Else
    Private Declare Function RegOpenKeyEx Lib "advapi32.dll" Alias "RegOpenKeyExA" (ByVal hKey As Long, ByVal lpSubKey As String, ByVal ulOptions As Long, ByVal samDesired As Long, phkResult As Long) As Long
#End If

#If VBA7 Then
    Private Declare PtrSafe Function RegSetValueExStr Lib "advapi32" Alias "RegSetValueExA" (ByVal hKey As LongPtr, ByVal lpValueName As String, ByVal Reserved As Long, ByVal dwType As Long, szData As String, ByVal cbData As Long) As Long         ' Note that if you declare the lpData parameter as String, you must pass it By Value.
#Else
    Private Declare Function RegSetValueExStr Lib "advapi32" Alias "RegSetValueExA" (ByVal hKey As Long, ByVal lpValueName As String, ByVal Reserved As Long, ByVal dwType As Long, ByVal szData As String, ByVal cbData As Long) As Long
#End If

#If VBA7 Then
    Private Declare PtrSafe Function RegQueryValueExLong Lib "advapi32.dll" Alias "RegQueryValueExA" (ByVal hKey As LongPtr, ByVal lpValueName As String, ByVal lpReserved As LongPtr, lpType As Long, szData As Long, lpcbData As Long) As Long         ' Note that if you declare the lpData parameter as String, you must pass it By Value.
#Else
    Private Declare Function RegQueryValueExLong Lib "advapi32.dll" Alias "RegQueryValueExA" (ByVal hKey As Long, ByVal lpValueName As String, ByVal lpReserved As Long, lpType As Long, szData As Long, lpcbData As Long) As Long         ' Note that if you declare the lpData parameter as String, you must pass it By Value.
#End If

#If VBA7 Then
    Private Declare PtrSafe Function RegQueryValueExByte Lib "advapi32.dll" Alias "RegQueryValueExA" (ByVal hKey As LongPtr, ByVal lpValueName As String, ByVal lpReserved As LongPtr, lpType As Long, szData As Byte, lpcbData As Long) As Long         ' Note that if you declare the lpData parameter as String, you must pass it By Value.
#Else
    Private Declare Function RegQueryValueExByte Lib "advapi32.dll" Alias "RegQueryValueExA" (ByVal hKey As Long, ByVal lpValueName As String, ByVal lpReserved As Long, lpType As Long, szData As Byte, lpcbData As Long) As Long         ' Note that if you declare the lpData parameter as String, you must pass it By Value.
#End If

#If VBA7 Then
    Private Declare PtrSafe Function RegQueryValueExStr Lib "advapi32.dll" Alias "RegQueryValueExA" (ByVal hKey As LongPtr, ByVal lpValueName As String, ByVal lpReserved As LongPtr, lpType As Long, ByVal szData As String, lpcbData As Long) As Long         ' Note that if you declare the lpData parameter as String, you must pass it By Value.
#Else
    Private Declare Function RegQueryValueExStr Lib "advapi32.dll" Alias "RegQueryValueExA" (ByVal hKey As Long, ByVal lpValueName As String, ByVal lpReserved As Long, lpType As Long, ByVal szData As String, lpcbData As Long) As Long         ' Note that if you declare the lpData parameter as String, you must pass it By Value.
#End If

#If VBA7 Then
    Private Declare PtrSafe Sub CopyMemory Lib "kernel32" Alias "RtlMoveMemory" (Destination As Any, Source As Any, ByVal Length As LongPtr)
#Else
    Private Declare Sub CopyMemory Lib "kernel32" Alias "RtlMoveMemory" (lpvDest As Any, lpvSource As Any, ByVal cbCopy As Long)

#End If

#If VBA7 Then
    Private Declare PtrSafe Function ExpandEnvironmentStrings Lib "kernel32" Alias "ExpandEnvironmentStringsA" (ByVal lpSrc As String, ByVal lpDst As String, ByVal nSize As Long) As Long
#Else
    Private Declare Function ExpandEnvironmentStrings Lib "kernel32" Alias "ExpandEnvironmentStringsA" (ByVal lpSrc As String, ByVal lpDst As String, ByVal nSize As Long) As Long
#End If

'-----[DefaultFilePath]------------------------------------------------
'   A substition for Word|fffd|s Options.DefaultFilePath etc
'   which does not exist in PowerPoint.
'
'   Version:
'   Version 1.0.0
'
'      valFilePaths - Either eUserTemplatesPath or
'                     eWorkGroupTemplatesPath

'
'
'-----------------------------------------------------------------------
Public Function DefaultFilePath(ByVal valFilePaths As eFilePaths) As String


    On Error Resume Next

    Select Case valFilePaths

        Case eUserTemplatesPath

            DefaultFilePath = IIf(Right(pvGetUserTemplatesPath, 1) = "\", _
              pvGetUserTemplatesPath, pvGetUserTemplatesPath & "\")

        Case eWorkGroupTemplatesPath

            DefaultFilePath = pvGetWorkGroupTemplatesPath

    End Select

    On Error GoTo 0

End Function


'-----[ pvGetWorkGroupTemplatesPath]------------------------------------------------
'   Returns  Word's Workgroup path from Registry.
'
'   Version:
'   Version 1.0.0
'
'   Deps
'     pvGetValue
'
'
'----------------------------------------------------------------------------
Private Function pvGetWorkGroupTemplatesPath() As String

    Dim strWgTplPath As String
    Dim strVersion As String
    Dim strTemplateSetting As String

    '  Ignore any errors.
    On Error Resume Next

    '  HKCU registry key
    Const c_HKeyCurrentUser As Long = &H80000001

    '  Get the Application version.
    strVersion = Left(Application.Version, InStr(1, Application.Version, ".") - 1)

    Select Case strVersion
        Case "9"
            ' For PPT2K.
            strVersion = "9.0"
        Case "10"
            ' For Office XP.
            strVersion = "10.0"
        Case "11"
            ' For Office 2003.
            strVersion = "11.0"
        Case "12"
            ' For Office 2007.
            strVersion = "12.0"
        Case "14"
            ' For Office 2010.
            strVersion = "14.0"
        Case "15"
            ' For Office 2013.
            strVersion = "15.0"
        Case "16"
            strVersion = "16.0"
    End Select

    '  Build upp registry path.
    strTemplateSetting = "Software\Microsoft\Office\" & strVersion & "\Common\General"

    '  Get the value from registry
    strWgTplPath = pvGetValue(c_HKeyCurrentUser, strTemplateSetting, "SharedTemplates", "")
    '  Workaround for office policy file applied!
    If Len(strWgTplPath) = 0 Then

        strTemplateSetting = "Software\Policies\Microsoft\Office\" & strVersion & "\Common\General"
        ' Get value from registry
        strWgTplPath = pvGetValue(c_HKeyCurrentUser, strTemplateSetting, "SharedTemplates", "")
    End If

    '  Strip any terminating null chars.
    strWgTplPath = pvStripNulls(strWgTplPath)

    pvGetWorkGroupTemplatesPath = strWgTplPath

    On Error GoTo 0

End Function
'-----[pvGetUserTemplatesPath]------------------------------------------------
'   Returns the path for the Word's User Templates from the registry.
'
'   Version:
'   Version 1.0.0
'
'      No Argument

'
'
'-----------------------------------------------------------------------
Private Function pvGetUserTemplatesPath() As String

    Dim strUserTemplatesPath As String
    Dim strVersion As String
    Dim strTemplateSetting As String
    Dim strAppData As String
    Dim strTemplateRoot As String

    '  HKCU registry key
    Const c_HKeyCurrentUser As Long = &H80000001

    '  Ignore errors.
    On Error Resume Next

    '  Expand the strings.
    strAppData = Environ$("appdata") & "\"
    
    '  Get the %appdata%\microsoft folder.
    strAppData = pvCheckEndingSeparator(strAppData)
    strTemplateRoot = strAppData & pvCheckEndingSeparator("Microsoft")

    '   Get Application version.
    strVersion = Left(Application.Version, InStr(1, Application.Version, ".") - 1)

    Select Case strVersion
        Case "9"
            ' For PPT2K.
            strVersion = "9.0"
        Case "10"
            ' For Office XP.
            strVersion = "10.0"
        Case "11"
            ' For Office 2003.
            strVersion = "11.0"
        Case "12"
            ' For Office 2007.
            strVersion = "12.0"
        Case "14"
            ' For Office 2010.
            strVersion = "14.0"
        Case "15"
            ' For Office 2013.
            strVersion = "15.0"
        Case "16"
            strVersion = "16.0"
    End Select

    strTemplateSetting = "Software\Policies\Microsoft\Office\" & strVersion & "\Common\General"
    
    '  If no customized path is saved look for the standard place. The
    '  regkey "Templates" displays the localized name of the folder.
    strUserTemplatesPath = pvGetValue(c_HKeyCurrentUser, strTemplateSetting, "UserTemplates", "")

    '  If no customized path is saved look for the standard place. The
    '  regkey "Templates" displays the localized name of the folder.
    If Len(strUserTemplatesPath) = 0 Then
        strUserTemplatesPath = pvGetValue(c_HKeyCurrentUser, strTemplateSetting, "Templates", "")
    End If

    '  Workaround if a office policy file applied.
    If Len(strUserTemplatesPath) = 0 Then

        '  Build upp registry path.
        strTemplateSetting = "Software\Microsoft\Office\" & strVersion & "\Common\General"

        '  Do we have any customized user template path saved?
        strUserTemplatesPath = pvGetValue(c_HKeyCurrentUser, strTemplateSetting, "UserTemplates", "")

        '  If no customized path is saved look for the standard place. The
        '  regkey "Templates" displays the localized name of the folder.
        If Len(strUserTemplatesPath) = 0 Then
            strUserTemplatesPath = pvGetValue(c_HKeyCurrentUser, strTemplateSetting, "Templates", "")
            '  Make the whole qualified path to the folder.
            strUserTemplatesPath = strTemplateRoot & pvCheckEndingSeparator(strUserTemplatesPath)
        End If

        '        MsgBox "3 - " & strUserTemplatesPath


    End If

    ' Strip any terminating null chars and retrun the path.
    strUserTemplatesPath = pvStripNulls(strUserTemplatesPath)
    pvGetUserTemplatesPath = strUserTemplatesPath

    On Error GoTo 0

End Function

'*****************************************************************************************
'* Function    : pvGetValue
'* Notes       : Returns the value for the specified value name stored in a registry key.
'*               If there is no value stored in that key the Default value is returned.
'*****************************************************************************************
Private Function pvGetValue(ByVal lngRootKey As Long, _
                            ByVal strKeyName As String, _
                            ByVal strValueName As String, _
                            ByVal varDefault As Variant) As Variant


    Dim bytData() As Byte
    Dim cData As Long
    Dim dwData As Long
    Dim lngData As Long
    Dim lngRet As Long
    Dim ordType As Long
    Dim strData As String
    Dim varValue As Variant
    Dim strRet As String
    
    #If VBA7 Then
        Dim hKey As LongPtr
    #Else
        Dim hKey As Long
    #End If

    On Error Resume Next

    '  Set the default value.
    varValue = varDefault

    '  Open the specified registry key and try to see what kind of data
    '  it contains (ordtype)
    lngRet = RegOpenKeyEx(lngRootKey, strKeyName, 0, KEY_QUERY_VALUE, hKey)
    lngRet = RegQueryValueExLong(hKey, strValueName, 0&, ordType, 0&, cData)

    '  Return the default value if we find no more data.
    If lngRet And lngRet <> ERROR_MORE_DATA Then
        pvGetValue = varValue
        Exit Function
    End If

    '  What kind of registry data in the registry do we have?
    Select Case ordType

        Case eRegValue_DWord, eRegValue_DWordLittleEndian
            lngRet = RegQueryValueExLong(hKey, strValueName, 0&, ordType, lngData, cData)
            varValue = CLng(lngData)

        Case eRegValue_DWordBigEndian
            lngRet = RegQueryValueExLong(hKey, strValueName, 0&, ordType, dwData, cData)
            varValue = SwapEndian(dwData)

        Case eRegValue_Sz, eRegValue_MultiSz
            '  Create a string buffer.
            strData = String$(cData - 1, 0)
            lngRet = RegQueryValueExStr(hKey, strValueName, 0&, ordType, strData, cData)
            varValue = strData

        Case eRegValue_ExpandSz
            '  Create a string buffer.
            strData = String$(cData - 1, 0)
            lngRet = RegQueryValueExStr(hKey, strValueName, 0&, ordType, strData, cData)
            '  If we can expand the string return the value found
            strRet = ExpandEnvStr(strData)
            varValue = strRet

        Case Else
            ReDim bytData(cData)
            lngRet = RegQueryValueExByte(hKey, strValueName, 0&, ordType, bytData(0), cData)
            varValue = bytData


    End Select

    pvGetValue = varValue

    On Error GoTo 0

End Function

'*****************************************************************************************
'* Function    : SwapEndian
'* Notes       : Swaps the highest byte with the lowest byte for the BIG_ENDIAN format.
'*****************************************************************************************
Private Function SwapEndian(ByVal dw As Long) As Long

    On Error Resume Next

    CopyMemory ByVal VarPtr(SwapEndian) + 3, dw, 1
    CopyMemory ByVal VarPtr(SwapEndian) + 2, ByVal VarPtr(dw) + 1, 1
    CopyMemory ByVal VarPtr(SwapEndian) + 1, ByVal VarPtr(dw) + 2, 1
    CopyMemory SwapEndian, ByVal VarPtr(dw) + 3, 1

    On Error GoTo 0

End Function



'-----[ pvCheckEndingSeparator]------------------------------------------------
'   Checks if any slash needs to be appended to a path.
'   Returns the path properly slash-terminated.
'
'
'   Version:
'   Version 1.0.0
'
'      strPath     - The path to check.
'
'
'----------------------------------------------------------------------------
Private Function pvCheckEndingSeparator(ByVal strPath As String) As String

    On Error Resume Next

    '  Don't tolerate paths like "\" and empty paths.
    If LenB(strPath) <= 1 Then Exit Function

    If (Right$(strPath, 1)) = "\" Then
        pvCheckEndingSeparator = strPath
    Else
        pvCheckEndingSeparator = strPath & "\"
    End If

    On Error GoTo 0

End Function


'-----[Function pvDirExists]-----------------------------
'   Checks if specified directory exists.
'
'
'   Version:
'   Version 1.0.0
'
'   Returns: True - if it exists.
'
'      strDir - The directory to check
'
'--------------------------------------------------------
Private Function pvDirExists(ByVal strDir As String) As Boolean

    On Error Resume Next

    pvDirExists = ((GetAttr(strDir) And vbDirectory) <> 0)

    On Error GoTo 0

End Function

'-----[ pvStripNulls]------------------------------------------------
'   Strips null chars from string. Strings from
'   the registry often contains null chars that
'   needs to be stripped.
'
'   Version:
'   Version 1.0.0
'
'      strItem     - The string to strip.

'   Returns the stripped string.
'
'
'----------------------------------------------------------------------------
Private Function pvStripNulls(ByVal strItem As String) As String

    Dim lngPos As Long

    On Error Resume Next

    '   Get position of null chars.
    lngPos = InStr(strItem, vbNullChar)

    If lngPos > 0 Then
        pvStripNulls = Left$(strItem, lngPos - 1)
    Else
        pvStripNulls = strItem
    End If

    On Error GoTo 0

End Function


Private Function ExpandEnvStr(sData As String) As String
    
    Dim lRet As Long
    Dim sTemp As String
    
    On Error Resume Next

    sTemp = ""
    lRet = ExpandEnvironmentStrings(sData, sTemp, lRet)
    sTemp = String$(lRet - 1, 0)
    lRet = ExpandEnvironmentStrings(sData, sTemp, lRet)

    ExpandEnvStr = sTemp

    Exit Function

End Function



' InQuest injected base64 decoded content
' (^rAh
' (^rAh
' zjej
' z{l.+-

INQUEST-PP=macro
