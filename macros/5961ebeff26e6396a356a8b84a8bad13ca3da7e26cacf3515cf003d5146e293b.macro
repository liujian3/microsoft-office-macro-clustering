Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "modExtractData"
Public Function RCHExtractData(ByVal pSource As String, _
                                ByVal pElement As String, _
                                ByVal pFind1 As String, _
                                ByVal pFind2 As String, _
                                ByVal pFind3 As String, _
                                ByVal pFind4 As String, _
                                ByVal pRows As Integer, _
                                ByVal pEnd As String, _
                                ByVal pCells As Integer, _
                                ByVal pLook As Integer) As Variant
                                
    '-----------------------------------------------------------------------------------------------------------*
    ' 2011.04.28 -- Change cDec() to smfConvertData()
    '-----------------------------------------------------------------------------------------------------------*
    
    On Error GoTo ErrorExit
    '--------------------------------> Find initial position on web page
    iPos1 = 0
    iPos1 = InStr(iPos1 + 1, sData(3), UCase(pFind1))
    If iPos1 = 0 Then GoTo ErrorExit
    If pFind2 > " " Then
       iPos1 = InStr(iPos1 + 1, sData(3), UCase(pFind2))
       If iPos1 = 0 Then GoTo ErrorExit
       End If
    If pFind3 > " " Then
       iPos1 = InStr(iPos1 + 1, sData(3), UCase(pFind3))
       If iPos1 = 0 Then GoTo ErrorExit
       End If
    If pFind4 > " " Then
       aSplit = Split(UCase(pFind4), "|")
       For i1 = 0 To UBound(aSplit, 1)
           iPos2 = InStr(iPos1 + 1, sData(3), aSplit(i1))
           If iPos2 > 0 Then Exit For
           If i1 = UBound(aSplit, 1) Then GoTo ErrorExit
           Next i1
       iPos1 = iPos2
       End If
    '--------------------------------> Skip backward/forward the number of specified table rows
    Select Case True
       Case pRows > 0
            iPos2 = InStr(iPos1, sData(3), UCase(pEnd))
            For i1 = 1 To pRows
                iPos1 = InStr(iPos1 + 1, sData(3), "<TR")
                iPos3 = InStr(iPos1, sData(3), "</TR")
                If iPos3 > iPos2 Then
                   RCHExtractData = vError
                   Exit Function
                   End If
                Next i1
       Case pRows < 0
            iPos2 = InStrRev(sData(3), UCase(IIf(pEnd = "</BODY", "<BODY", pEnd)), iPos1)
            For i1 = 1 To Abs(pRows)
                iPos1 = InStrRev(sData(3), "<TR", iPos1 - 1)
                If iPos1 < iPos2 Then
                   RCHExtractData = vError
                   Exit Function
                   End If
                Next i1
            End Select
    '--------------------------------> Skip forward or backward the number of specified table cells
    iPos2 = iPos1
    iRowBeg = InStrRev(sData(3), "<TR", iPos2)
    If pCells = 0 Then
       iRowEnd = InStr(iPos2, sData(3), "</TR")
       iLoop = 1
    ElseIf pCells < 0 Then
       iRowEnd = InStr(iPos2, sData(3), "</TR")
       iPos2 = iRowEnd
       iLoop = -pCells
    Else
       iLoop = pCells
       If pEnd <> "" Then
          iRowEnd = InStr(iPos2, sData(3), "</TR")
       Else
          iRowEnd = Len(sData(3))
          End If
       End If
    For i1 = 1 To iLoop + pLook
        If pCells > 0 Then
           iPos2 = InStr(iPos2, sData(3), "<TD")
        Else
           iPos2 = InStrRev(sData(3), "<TD", iPos2)
           End If
        If iPos2 = 0 Or iPos2 < iRowBeg Or iPos2 > iRowEnd Then GoTo ErrorExit
        iPos2 = InStr(iPos2, sData(3), ">")
        If i1 >= iLoop Then
           iPos3 = InStr(iPos2, sData(3), "</TD")
           '-------------------------> Extract cell contents and strip out HTML tags
           s1 = Trim(Mid(sData(2), iPos2 + 1, iPos3 - iPos2 - 1))
           s1 = Replace(Trim(s1), "<br>", Chr(10))
           Do
               iPos4 = InStr(s1, "<")
               If iPos4 = 0 Then Exit Do
               iPos5 = InStr(iPos4, s1, ">")
               If iPos5 = 0 Then Exit Do
               s1 = IIf(iPos4 = 1, "", Left(s1, iPos4 - 1)) & Trim(Mid(s1 & " ", iPos5 + 1, 99999))
               Loop
           If s1 <> "" Then Exit For
           End If
        If pCells < 0 Then
           iPos2 = InStrRev(sData(3), "<TD", iPos2) - 1
           End If
        Next i1
    RCHExtractData = smfConvertData(s1)
    Exit Function
ErrorExit: RCHExtractData = vError
    End Function


Attribute VB_Name = "modGetAdvFNElement"
Public sAdvFNPrefix As String                       ' URL prefix to use for AdvFN
Function smfGetADVFNElement(ByVal pTicker As String, _
                            ByVal pPeriod As String, _
                            ByVal pCells As Integer, _
                   Optional ByVal pFind1 As String = "", _
                   Optional ByVal pFind2 As String = "", _
                   Optional ByVal pError As Variant = "Error", _
                   Optional ByVal pType As Integer = 0) As Variant
                        
   '-----------------------------------------------------------------------------------------------------------*
   ' Function to return a financial statements data element from AdvFN
   '-----------------------------------------------------------------------------------------------------------*
   ' 2009.11.04 -- Created by Randy Harmelink (rharmelink@gmail.com)
   ' 2009.12.19 -- Add smfConvertYahooTicker() processing
   ' 2012.01.30 -- Change AdvFn URL from "http://www..." to "http://us...."
   ' 2012.02.02 -- Make AdvFN URL prefix a variable
   ' 2012.02.04 -- Default AdvFN URL prefix to "www" unless external file exists to set it to something else
   ' 2013.10.16 -- Update for AdvFN URL changes
   ' 2013.10.17 -- Fix for above update
   ' 2014.12.02 -- Fix error processing when calling external functions
   ' 2015.03.05 -- Change "/exchanges/" search string to "/stock-market/"
   ' 2015.03.21 -- Allow exchange prefix on ticker symbol
   ' 2017.05.05 -- Add smfSetAdvFNPrefix() sub
   ' 2018.01.24 -- Change AdvFN URL from "http://" to "https://"
   '-----------------------------------------------------------------------------------------------------------*
   ' Sample of use:
   '
   '    =smfGetADVFNElement("MMM","A",1,">Year End Date")
   '
   '-----------------------------------------------------------------------------------------------------------*
    
    On Error GoTo ErrorExit
    vError = pError
    
    '------------------> Create labels for annual vs quarterly processing
    Dim sTicker As String, sExchange As String
    sTicker = smfConvertYahooTicker(pTicker, "ADVFN")
    sExchange = smfStrExtr(sTicker, "~", ":")
    If sExchange <> "" Then sTicker = smfStrExtr(sTicker, ":", "~")
    Select Case UCase(pPeriod)
       Case "A": sLabel1 = "&mode=annual_reports": sLabel2 = "start_date"
       Case "Q": sLabel1 = "&mode=quarterly_reports": sLabel2 = "istart_date"
       Case Else: vError = "Improper period -- should be A or Q": GoTo ErrorExit
       End Select
    If sAdvFNPrefix = "" Then LoadAdvFNPrefix
    If sExchange = "" Then
       sURL = "https://" & sAdvFNPrefix & ".advfn.com/p.php?pid=financials&mode=quarterly_reports&symbol=" & sTicker
       sExchange = smfStrExtr(RCHGetWebData(sURL, "/stock-market/", 50), "/stock-market/", "/")
       End If
    sURL = "https://" & sAdvFNPrefix & ".advfn.com/stock-market/" & sExchange & "/" & sTicker & "/financials?" _
         & sLabel1 & "&btn=" & sLabel2
    
    '------------------> Determine # of available periods and paging points (5 periods per page)
    nPeriods = smfConvertData(smfStrExtr(Right(smfGetTagContent(sURL, "select", 1, "Select start date", pError:=vError), 35), "'", "'"))
    If pCells = 999 Then
       smfGetADVFNElement = nPeriods + 1
       Exit Function
       End If
    If pCells > nPeriods + 1 Then GoTo ErrorExit
    nRawID = nPeriods - 5 * (Int((pCells - 1) / 5) + 1)
    nColumn = (200 - pCells) Mod 5 + 1
    Select Case nRawID
       Case Is < 0
            If nPeriods < 5 Then
               nPageId = ""
            Else
               nPageId = "&" & sLabel2 & "=0"
               End If
            nColumn = nColumn + nRawID + 1
       Case Is = nPeriods - 5
            nPageId = ""
       Case Else
            nPageId = "&" & sLabel2 & "=" & (nRawID + 1)
       End Select
    
    '------------------> Return data element
    smfGetADVFNElement = RCHGetTableCell(sURL & nPageId, nColumn, pFind1, pFind2, , , , "</TABLE", , vError)
    
    Exit Function

ErrorExit: smfGetADVFNElement = vError
                   
   End Function
Sub smfSetAdvFNPrefix(p1 As String)
    sAdvFNPrefix = p1
    End Sub

Sub LoadAdvFNPrefix()
    sAdvFNPrefix = "www"
    On Error GoTo ErrorExit
    Open ThisWorkbook.Path & "\smf-AdvFN-Prefix.txt" For Input As #1
    Line Input #1, sAdvFNPrefix
    Close #1
ErrorExit:
    End Sub


Attribute VB_Name = "modGetCSVFile"
Public Function smfGetCSVFile(pURL As String, _
               Optional ByVal pDelimiter As String = ",", _
               Optional ByVal pDim1 As Integer = 0, _
               Optional ByVal pDim2 As Integer = 0)
                    
    '-----------------------------------------------------------------------------------------------------------*
    ' User defined function to return an array for a CSV file
    '-----------------------------------------------------------------------------------------------------------*
    ' 2008.07.19 -- Created function
    '-----------------------------------------------------------------------------------------------> Version 2.0h
    ' 2009.09.28 -- Added pDelimiter parameter
    ' 2010.04.21 -- Added pDim1 and pDim2 parameters
    '-----------------------------------------------------------------------------------------------> Version 2.0k
    ' > Example of an invocation (needs to be array-entered):
    '
    '   =smfGetCSVFile("http://finviz.com/grp_export.ashx?g=industry&v=152&o=-perf52w")
    '-----------------------------------------------------------------------------------------------------------*
    
    smfGetCSVFile = RCHGetYahooQuotes(pURL, "", pDelimiter:=pDelimiter, pDim1:=pDim1, pDim2:=pDim2)
    
    End Function

Attribute VB_Name = "modGetEconData"
Function smfGetEconData(pID As String, _
                        pDate As Variant, _
               Optional pError As Variant = "Error")
    
    '-----------------------------------------------------------------------------------------------------------*
    ' Function to grab economic data from the St. Louis Federal Reserve web site
    '-----------------------------------------------------------------------------------------------------------*
    ' 2007.11.19 -- Created
    ' 2010.03.13 -- Add extraction of title elements
    ' 2011.04.28 -- Change cDec() to smfConvertData()
    ' 2016.06.20 -- Change to new URL of "https://fred.stlouisfed.org/data/"
    '-----------------------------------------------------------------------------------------------------------*
    ' Example of usage:
    '
    '        =smfGetEconData("CURRNS", DATE(2007,3,24))
    '-----------------------------------------------------------------------------------------------------------*
    
    Dim sURL As String, sDataE As String
    On Error GoTo ErrorExit

    '--------------------------------> See if web page has already been retrieved
'   sURL = "https://research.stlouisfed.org/fred2/data/" & UCase(pID) & ".txt"
    sURL = "https://fred.stlouisfed.org/data/" & UCase(pID) & ".txt"       ' New URL as of 2016-06-20
    For iData = 1 To kPages
        Select Case True
           Case aData(iData, 1) = ""
                aData(iData, 1) = "0:" & pID
                s2 = RCHGetURLData(sURL)
                s2 = Replace(s2, Chr(10), Chr(13))
                aData(iData, 2) = s2
                Exit For
           Case aData(iData, 1) = "0:" & pID: Exit For
           Case iData = kPages
                smfGetEconData = "Error -- Too many web page retrievals"
                Exit Function
           End Select
        Next iData
    sDataE = aData(iData, 2)
    
    '--------------------------------> Check for special items
    smfGetEconData = ""
    Select Case True
       Case UCase(pDate) = "TITLE": smfGetEconData = Trim(smfStrExtr(sDataE, "Title:", Chr(13)))
       Case UCase(pDate) = "SERIES ID": smfGetEconData = Trim(smfStrExtr(sDataE, "Series ID:", Chr(13)))
       Case UCase(pDate) = "SOURCE": smfGetEconData = Trim(smfStrExtr(sDataE, "Source:", Chr(13)))
       Case UCase(pDate) = "RELEASE": smfGetEconData = Trim(smfStrExtr(sDataE, "Release:", Chr(13)))
       Case UCase(pDate) = "SEASONAL ADJUSTMENT": smfGetEconData = Trim(smfStrExtr(sDataE, "Seasonal Adjustment:", Chr(13)))
       Case UCase(pDate) = "FREQUENCY": smfGetEconData = Trim(smfStrExtr(sDataE, "Frequency:", Chr(13)))
       Case UCase(pDate) = "UNITS": smfGetEconData = Trim(smfStrExtr(sDataE, "Units:", Chr(13)))
       Case UCase(pDate) = "DATE RANGE": smfGetEconData = Trim(smfStrExtr(sDataE, "Date Range:", Chr(13)))
       Case UCase(pDate) = "LAST UPDATED": smfGetEconData = Trim(smfStrExtr(sDataE, "Last Updated:", Chr(13)))
       Case UCase(pDate) = "NOTES"
            smfGetEconData = Trim(smfStrExtr(sDataE, "Notes:", "DATE"))
            iLen = 0
            While iLen <> Len(smfGetEconData)
               iLen = Len(smfGetEconData)
               smfGetEconData = Replace(smfGetEconData, "  ", " ")
               Wend
       End Select
    If smfGetEconData <> "" Then Exit Function
    
    '--------------------------------> Get title of file
    Dim vData(1 To 3) As Variant
    iPos1 = InStr(sDataE, "Title:")
    iPos2 = InStr(iPos1, sDataE, Chr(13))
    sTitle = Trim(Mid(sDataE, iPos1 + 6, iPos2 - iPos1 - 6))
    
    '--------------------------------> Look for date in file
    iPos0 = InStr(sDataE, "Notes:")
    For n1 = pDate To pDate - 800 Step -1
        sDate = Application.WorksheetFunction.Text(n1, "yyyy-mm-dd")
        iPos1 = InStr(iPos0, sDataE, sDate)
        If iPos1 > 0 Then Exit For
        Next n1
    If iPos1 = 0 Then GoTo ErrorExit
       
    iPos2 = InStr(iPos1, sDataE, Chr(13))
    s3 = Mid(sDataE, iPos1 + 11, iPos2 - iPos1 - 11)
    On Error Resume Next
    s3 = smfConvertData(s3)
    On Error GoTo ErrorExit
    vData(1) = s3
    vData(2) = sDate
    vData(3) = sTitle
    smfGetEconData = vData
    Exit Function

ErrorExit:
    smfGetEconData = pError
    
    End Function

Attribute VB_Name = "modGetElementNumber"
Const kVersion = "2.1.2018.01.24"                   ' Version number of add-in
    
Const kElements = 20000                             ' Number of data elements
Dim aParms(1 To kElements) As String                ' Extraction parameters for each element
Public aConstants(1 To 100) As String               ' Constants for use in RCHGetElementNumber() formulas

Public sElementsLocation As String                  ' Location of element defintion files
Public iInit As Integer                             ' Has data element list been initialized?


Public Function RCHGetElementNumber(ByVal pTicker As String, _
                           Optional ByVal pItem As Integer = 1, _
                           Optional ByVal pError As Variant = "Error", _
                           Optional ByVal pFile As String = "")
                           
    '-----------------------------------------------------------------------------------------------------------*
    ' User defined function to retrieve individual data elements from various web sites
    '-----------------------------------------------------------------------------------------------------------*
    ' 2005.08.01 -- Fix 10-year summary retrieval of stocks with less than 10 years of history
    ' 2005.08.06 -- Simplify code flow and remove redundant modules, add comments
    ' 2005.08.06 -- Add Yahoo! Finance Analyst Estimates page
    ' 2005.08.09 -- Add several Morningstar items
    ' 2005.08.14 -- Add BusinessWeek Online ProSearch Criteria Report elements
    ' 2005.08.17 -- Add BusinessWeek Online Financial Summary page
    '-----------------------------------------------------------------------------------------------> Version 1.0
    ' 2006.02.01 -- Fix MSN "% Growth Rate -- EPS..." items; now "% Growth Rate -- Net Income..."
    ' 2006.02.01 -- Fix YahooKS Cash Flow table extraction tags
    ' 2006.02.01 -- Fix YahooAE "EPS Trends" table extraction
    ' 2006.02.01 -- Fix YahooAE "Revenue Est" table extraction
    ' 2006.02.01 -- Add BarCharts Technical Report page
    ' 2006.02.01 -- Add "Next Earnings Date" from YahooAE page
    '-----------------------------------------------------------------------------------------------> Version 1.1
    ' 2006.02.04 -- Add Earnings.com statistics
    ' 2006.02.06 -- Add StockCharts.com P&F pattern/price objective
    ' 2006.03.07 -- Fix YahooAE "Earnings Growth Rates" table extraction
    ' 2006.03.10 -- Add several MSN Quarterly Income Statement and Balance Sheet items
    ' 2006.03.10 -- Add several Yahoo Quarterly Income Statement and Balance Sheet items
    ' 2006.03.13 -- Add Reuters Quarterly and Annual Income Statements
    ' 2006.03.13 -- Add process to convert extracted numeric data
    ' 2006.03.14 -- Allow multiple table extract labels to be searched for
    ' 2006.03.15 -- Add pFile parameter to RCHGetElementNumber()
    ' 2006.03.15 -- Fix several BWOpin elements that were out of sync with parsing rules database
    ' 2006.04.24 -- Add process to convert strings like 2.34M or 2.34B into numeric values
    ' 2006.05.25 -- Add Google financial statement elements
    ' 2006.05.26 -- Add MSNMoney financial statement elements
    ' 2006.06.18 -- Fixed "short table" data extraction problems
    ' 2006.06.18 -- Modified MSN FYI Advisor extraction
    ' 2006.06.19 -- Modify numeric conversion process to handle strings like "8.52%"
    ' 2006.06.19 -- Modify BWOpin extractions due to web page changes
    ' 2006.06.19 -- Add new dividend items added to YahooKS web page
    ' 2006.06.19 -- Modify MSN Market Capitalization for web page change
    '-----------------------------------------------------------------------------------------------> Version 1.2
    ' 2006.06.21 -- Major rewrite to create internal tables of extraction definitions
    ' 2006.06.26 -- Add "YahooPM" data source for mutual fund performance elements
    ' 2006.06.26 -- Add "YahooPR" data source for mutual fund profile elements
    ' 2006.06.26 -- Add "YahooRK" data source for mutual fund risk-related elements
    ' 2006.06.26 -- Add "YahooHL" data source for mutual fund holdings-related elements
    ' 2006.06.27 -- Add the ability to create a calculated field
    ' 2006.07.01 -- Add the ADVFN annual and quarterly financial statements elements
    ' 2006.07.05 -- Add the Reuters Ratios Comparison page elements
    ' 2006.07.10 -- Add "YahooMS" data source for the Yahoo Market Statistics page (Advances and Declines)
    ' 2006.07.12 -- Add company name elements for "YahooKS" and "MSN" data sources
    ' 2006.07.12 -- Allow for custom "Error" value
    ' 2006.07.14 -- Modify P&F "Bullish"/"Bearish" decision to look at P&F Pattern before price objective
    ' 2006.07.19 -- Fix usage of pFile parameter
    ' 2006.07.27 -- Add "YahooIN" data source for sector and industry numbers and names
    ' 2006.07.27 -- Fix "Zacks" data parsing due to web page changes
    ' 2006.08.04 -- Add "Web Page" value for pTicker parameter
    ' 2006.08.07 -- Force pTicker parameter to be upper case
    ' 2006.08.09 -- Add calculated fields for Pitroski/Altman/Rule One/Magic Formula
    ' 2006.08.10 -- Add 10-year price history fields from Business Week Online
    ' 2006.08.14 -- Add more Morningstar pages/fields
    ' 2006.08.14 -- Fixed Barchart.com Buy/Hold/Sell 3-table cell parsing process
    ' 2006.08.16 -- Added MsgBox with error message to XMLHTTP failure
    ' 2006.08.16 -- Added Google financial statements currenty type and magnitude
    ' 2006.08.19 -- Changed MSN 10-year summary of financial statement items to MSN10 web page source
    ' 2006.08.23 -- Obsoleted a number of MSN Financial Statement elements (MSN changed to Reuters data)
    ' 2006.08.27 -- Added RCHGetTableCell() function
    ' 2006.08.29 -- Added RCHGetWebData() function
    ' 2006.09.02 -- Misc changes to RCHExtractData function related to pCells=0 and pRows
    ' 2006.09.18 -- Removed MsgBox with error message upon XMLHTTP failure
    ' 2006.10.07 -- Add SMFForceRecalculation() macro
    ' 2006.11.14 -- Fix RCHExtractData processing to convert M/B into Million and Trillions on non-numeric data
    ' 2006.12.11 -- Fix several MSN tags related to 5-year average growth rates (Canadian stocks had different tag)
    ' 2006.12.20 -- Change all HTML table header tags to normal table cell tags on web pages retrieved
    ' 2007.01.04 -- Change CCur() usage to CDec() because of precision issues
    ' 2007.01.07 -- Fix Earnings.com extraction of Dividends and Splits data when no Splits table exists
    ' 2007.01.16 -- Modify TickerReset and ArrayReset processing
    ' 2007.01.17 -- Fix RCHGetTableCell() to return vError instead of blanks when not finding new rows
    ' 2007.01.19 -- Fix conversion of "- " and "-- " to return zero values
    ' 2007.01.23 -- Transfer BWHist and BWTech data elements to pick up Telescan data
    ' 2007.01.23 -- Obsolete remaining BWOpin elements (726 to 727)
    ' 2007.01.23 -- Obsolete all BWPro elements (884 to 940)
    ' 2007.01.23 -- Obsolete all BWSumm elements (994 To 1214)
    ' 2007.01.27 -- Fix HTML table header tag processing for RCHGetElementNumber()
    ' 2007.03.19 -- Add "Too many web page retrievals" error message
    ' 2007.03.20 -- Add ability to retrieve RCHGetElementNumber parameters via formula
    ' 2007.05.22 -- Obsolete all Telescan elements since website is gone (728 to 779, 837 to 847, 13891 to 13930)
    '-----------------------------------------------------------------------------------------------> Version 1.3
    ' 2007.06.03 -- Externalize element definitions for RCHGetElementNumber()
    '-----------------------------------------------------------------------------------------------> Version 2.0a
    ' 2007.08.09 -- Added ability to retrieve data via IE object for items that fail with XMLHTTP
    '-----------------------------------------------------------------------------------------------> Version 2.0b
    ' 2007.08.14 -- Add conversion of "---" to return zero values
    '-----------------------------------------------------------------------------------------------> Version 2.0c
    ' 2007.08.23 -- Removed IIF() function using pUseIE
    ' 2007.08.27 -- Added ability to use "~~~~~" in Find1-Find4 external parameters for RCHGetElementNumber()
    '-----------------------------------------------------------------------------------------------> Version 2.0d
    ' 2007.08.30 -- Added smfGetAData and smfGetAParms functions for debugging purposes
    '-----------------------------------------------------------------------------------------------> Version 2.0f
    ' 2007.09.10 -- Changed smfForceRecalculation for EXCEL 2000 processing
    '-----------------------------------------------------------------------------------------------> Version 2.0g
    ' 2007.09.21 -- Restored code to initialize Morningstar for retrieval of data from their web site
    '-----------------------------------------------------------------------------------------------> Version 2.0h
    ' 2007.09.30 -- Added translation of chr(160) to blank
    ' 2007.11.20 -- Broke out major functions into their own modules
    ' 2008.03.16 -- Add P-TYPE parameter to RCHGetElementNumber()
    '-----------------------------------------------------------------------------------------------> Version 2.0i
    ' 2009.12.19 -- Add smfConvertYahooTicker() processing
    ' 2009.12.30 -- Modified P&F element extractions from StockCharts.com
    ' 2010.07.06 -- Fix smfGetAdvFNElementNumber() parameter numbering
    ' 2010.07.18 -- Changed location of smfConvertYahooTicker() processing to prevent "Undefine" error
    ' 2010.10.10 -- Added code to change HTML code &#151; to a normal hyphen
    ' 2010.10.22 -- Added code to change HTML code &mdash; to a normal hyphen
    ' 2010.12.15 -- Added code to return regional setting
    ' 2011.01.26 -- Obsoleted "FYI Alerts" from MSN
    ' 2011.04.27 -- Convert to use smfGetWebPage() function
    ' 2012.01.11 -- Add ability to define element as SMF formula by using leading "=" on formula
    ' 2012.05.13 -- Change placement of smfConvertYahooTicker() for EVALUATE() functions
    ' 2013.08.14 -- Add sAdvFNPrefix to "Version" output
    ' 2014.03.08 -- Add sElementsLocation to allow element definitions on Internet
    ' 2014.03.15 -- Add vTemp processing for returned array from evaluate() results
    ' 2015.04.29 -- Add "Definition" value for pTicker parameter
    ' 2015.09.15 -- Fix "Rule #1 MOS Price" (used to be based on obsoleted MSN data elements)
    ' 2016.05.18 -- Add Application.PathSeparator to ease transition between operating systems
    ' 2016.06.14 -- Add Operating System and Version of computer to "Version" string
    ' 2017.05.05 -- Add smfSetElementsLocation() sub
    ' 2017.05.19 -- Add aConstants() processing
    ' 2017.05.21 -- Add smfGetaConstants() function
    ' 2017.07.23 -- Remove iMorningStar variable
    '-----------------------------------------------------------------------------------------------> Version 2.0k
    ' > Example of an invocation to get The "Trend Spotter" value for IBM from the BarChart website:
    '
    '   =RCHGetElementNumber("IBM", 701)
    '   =RCHGetTableCell("http://quote.barchart.com/texpert.asp?sym=IBM",1,"Trend Spotter",,,,,1,3)
    '
    '   The first is the preferred method.
    '-----------------------------------------------------------------------------------------------------------*
       
    Dim sURL As String
    Dim sTicker1 As String
    Dim sTicker2 As String
    Dim vTemp As Variant

    On Error GoTo ErrorExit
    vError = pError
    
    '--------------------------------> Special cases to return immediately
    sTicker1 = UCase(pTicker)
    Select Case True
       Case sTicker1 = "": GoTo ErrorExit
       Case sTicker1 = "NONE": GoTo ErrorExit
       Case sTicker1 = "ERROR": GoTo ErrorExit
       Case sTicker1 = "VERSION": RCHGetElementNumber = "Stock Market Functions add-in, Version " & kVersion & _
                       " (" & ThisWorkbook.Path & "; " _
                            & Application.OperatingSystem & "; " _
                            & Application.Version & "; " _
                            & sAdvFNPrefix & "; " _
                            & sElementsLocation & "; " _
                            & Application.International(xlCountrySetting) & ")"
       Case sTicker1 = "COUNTRY": RCHGetElementNumber = Application.International(xlCountrySetting)
       Case pItem > kElements: RCHGetElementNumber = "EOL"
       Case Else: RCHGetElementNumber = ""
       End Select
    If RCHGetElementNumber <> "" Then Exit Function
    
    '--------------------------------> Load extraction definitions if needed
    If iInit = 0 Then
       iInit = 1
       For i1 = 1 To kPages
           aData(i1, 1) = ""  ' Reset stored ticker array
           Next i1
       Call LoadElementsLocation
       For i1 = 0 To 19
           Select Case sElementsLocation
              Case "Internet": Call LoadElementsFromInternet(i1)
              Case Else: Call LoadElementsFromFile(i1)
              End Select
           Next i1
       Call LoadElementsFromFile(20)  ' User Custom Element Definitions
       Call LoadElementsFromFile(21)  ' User default settings
       Call LoadElementsFromFile(22)  ' Constant values
       End If
    
    '--------------------------------> Additional special cases to return immediately
    aParm = Split(aParms(pItem) & ";N/A;N/A;N/A;N/A;N/A;N/A;N/A;N/A;N/A;N/A", ";")
    sTicker2 = smfConvertYahooTicker(sTicker1, aParm(0))
    Select Case True
       Case aParms(pItem) = "": RCHGetElementNumber = "Undefined"
       Case sTicker1 = "DEFINITION": RCHGetElementNumber = aParms(pItem): Exit Function
       Case sTicker1 = "SOURCE": RCHGetElementNumber = aParm(0): Exit Function
       Case sTicker1 = "ELEMENT": RCHGetElementNumber = aParm(1): Exit Function
       Case sTicker1 = "WEB PAGE": RCHGetElementNumber = aParm(2): Exit Function
       Case sTicker1 = "P-URL": RCHGetElementNumber = aParm(2): Exit Function
       Case sTicker1 = "P-CELLS": RCHGetElementNumber = aParm(3): Exit Function
       Case sTicker1 = "P-FIND1": RCHGetElementNumber = aParm(4): Exit Function
       Case sTicker1 = "P-FIND2": RCHGetElementNumber = aParm(5): Exit Function
       Case sTicker1 = "P-FIND3": RCHGetElementNumber = aParm(6): Exit Function
       Case sTicker1 = "P-FIND4": RCHGetElementNumber = aParm(7): Exit Function
       Case sTicker1 = "P-ROWS": RCHGetElementNumber = aParm(8): Exit Function
       Case sTicker1 = "P-END": RCHGetElementNumber = aParm(9): Exit Function
       Case sTicker1 = "P-LOOK": RCHGetElementNumber = aParm(10): Exit Function
       Case sTicker1 = "P-TYPE": RCHGetElementNumber = aParm(11): Exit Function
       Case aParm(0) = "AdvFN-A"
            RCHGetElementNumber = smfGetADVFNElement(sTicker1, "A", aParm(3), aParm(4), aParm(5), pError)
       Case aParm(0) = "AdvFN-Q"
            RCHGetElementNumber = smfGetADVFNElement(sTicker1, "Q", aParm(3), aParm(4), aParm(5), pError)
       Case aParm(0) = "Evaluate"
#If Mac Then
            RCHGetElementNumber = Evaluate("=" & Replace(aParm(2), "~~~~~", sTicker2))
#Else
            RCHGetElementNumber = Evaluate(Replace(aParm(2), "~~~~~", sTicker2))
#End If
       Case Left(aParm(2), 1) = "="
#If Mac Then
            vTemp = Evaluate("=" & Replace(Mid(aParm(2), 2), "~~~~~", sTicker2))
#Else
            vTemp = Evaluate(Replace(Mid(aParm(2), 2), "~~~~~", sTicker2))
#End If
            If VarType(vTemp) > 8192 Then
               RCHGetElementNumber = vTemp(1)
            Else
               RCHGetElementNumber = vTemp
               End If
       Case Else: RCHGetElementNumber = ""
       End Select
    If RCHGetElementNumber <> "" Then Exit Function
    '--------------------------------> Preprocess web page data
    sURL = Replace(aParm(2), "~~~~~", sTicker2)
    If aParm(0) = "Calculated" Then
       sData(2) = ""
    Else
       sData(2) = smfGetWebPage(sURL, aParm(11), 0)
       End If
    sData(3) = UCase(sData(2))
    '--------------------------------> Return requested item
    If pFile <> "" Then
       On Error GoTo ErrorExit
       Set wb = Application.Workbooks(pFile).Worksheets(aParm(0))
       iRow = 0
       On Error Resume Next
       iRow = Application.WorksheetFunction.Match(pTicker, wb.Columns("A:A"), 0)
       On Error GoTo ErrorExit
       If iRow > 0 Then
          iCol = 0
          On Error Resume Next
          iCol = Application.WorksheetFunction.Match(pItem, wb.Rows("1:1"), 0)
          On Error GoTo ErrorExit
          If iCol = 0 Then
             Set wb = Application.Workbooks(pFile).Worksheets(aParm(0) & "_2")
             iCol = 0
             On Error Resume Next
             iCol = Application.WorksheetFunction.Match(pItem, wb.Rows("1:1"), 0)
             On Error GoTo ErrorExit
             End If
          If iCol = 0 Then
             Set wb = Application.Workbooks(pFile).Worksheets(aParm(0) & "_3")
             iCol = 0
             On Error Resume Next
             iCol = Application.WorksheetFunction.Match(pItem, wb.Rows("1:1"), 0)
             On Error GoTo ErrorExit
             End If
          RCHGetElementNumber = wb.Cells(iRow, iCol)
          Exit Function
          End If
       End If
    Select Case True
       Case aParm(2) = "?": RCHGetElementNumber = RCHSpecialExtraction("" & aParm(1), sTicker1)
       Case aParm(3) = "?": RCHGetElementNumber = RCHSpecialExtraction("" & aParm(1), sTicker1)
       Case Left(aParm(2), 8) = "Obsolete": RCHGetElementNumber = aParm(2)
       Case Else: RCHGetElementNumber = RCHExtractData(aParm(0), aParm(1), _
                                                       Replace(aParm(4), "~~~~~", sTicker2), _
                                                       Replace(aParm(5), "~~~~~", sTicker2), _
                                                       Replace(aParm(6), "~~~~~", sTicker2), _
                                                       Replace(aParm(7), "~~~~~", sTicker2), _
                                                       aParm(8), aParm(9), aParm(3), aParm(10))
       End Select
    
    Exit Function
ErrorExit: RCHGetElementNumber = vError
    End Function
Private Function RCHSpecialExtraction(pLookup As String, Optional pTicker As String = "")
    On Error GoTo ErrorExit
    Select Case pLookup
        Case "Financial Statements Currency Magnitude" ' Google
             iPos2 = InStr(sData(3), "(EXCEPT FOR PER SHARE ITEMS)")
             iPos2 = InStrRev(sData(3), " OF ", iPos2)
             iPos1 = InStrRev(sData(3), ">IN ", iPos2)
             RCHSpecialExtraction = Mid(sData(2), iPos1 + 4, iPos2 - iPos1 - 4)
        Case "Financial Statements Currency Type" ' Google
             iPos2 = InStr(sData(3), "(EXCEPT FOR PER SHARE ITEMS)")
             iPos1 = InStrRev(sData(3), " OF ", iPos2)
             iPos2 = InStr(iPos1, sData(3), "<")
             RCHSpecialExtraction = Mid(sData(2), iPos1 + 4, iPos2 - iPos1 - 4)
        Case "FYI Alerts" ' MSN
             RCHSpecialExtraction = "No longer available"
             'iPos1 = InStr(sData(3), ">ADVISOR FYI<")
        Case "Company Description" ' MSN
             iPos1 = InStr(sData(3), "<BODY")
             iPos1 = InStr(iPos1, sData(3), "COMPANY REPORT")
             iPos1 = InStr(iPos1, sData(3), "<P>") + 2
             iPos2 = InStr(iPos1, sData(3), "</P>")
             RCHSpecialExtraction = Mid(sData(2), iPos1 + 1, iPos2 - iPos1 - 1)
        Case "Company Name" ' MSN
             iPos1 = InStr(sData(3), "<TITLE>")
             iPos2 = InStr(iPos1, sData(3), " REPORT - ")
             RCHSpecialExtraction = Mid(sData(2), iPos1 + 7, iPos2 - iPos1 - 7)
        Case "Risk Grade"  ' MSN
             iPos1 = InStr(sData(3), "RISK:") + 6
             If iPos1 = 6 Then
                RCHSpecialExtraction = vError
             Else
                i1 = CInt(Mid(sData(2), iPos1, 1))
                RCHSpecialExtraction = Mid("ABCDF", i1, 1)
                End If
        Case "Return Grade"  ' MSN
             iPos1 = InStr(sData(3), "RETURN:") + 8
             If iPos1 = 8 Then
                RCHSpecialExtraction = vError
             Else
                i1 = CInt(Mid(sData(2), iPos1, 1))
                RCHSpecialExtraction = Mid("FDCBA", i1, 1)
                End If
        Case "Quick Summary"  ' MSN
             RCHSpecialExtraction = ""
             iPos1 = InStr(sData(3), "RETURN:") + 8
             iPos2 = InStr(sData(3), "QUICK SUMMARY")
             For i1 = 1 To 20
                 iPos2 = InStr(iPos2, sData(3), "<DD>") + 4
                 If iPos2 > iPos1 Or iPos2 = 4 Then Exit For
                 iPos3 = InStr(iPos2, sData(3), "<B>")
                 iPos4 = InStr(iPos2, sData(3), "</B>")
                 s1 = Mid(sData(2), iPos3 + 3, iPos4 - iPos3 - 3)
                 s2 = Mid(sData(2), iPos2, iPos3 - iPos2)
                 RCHSpecialExtraction = RCHSpecialExtraction & s1 & " -- " & s2 & vbLf
                 Next i1
        Case "StockScouter Rating -- Summary"  ' MSN
             iPos1 = InStr(sData(3), "ALT=""STOCKSCOUTER RATING: ")
             iPos1 = InStr(iPos1, sData(3), "<P>") + 3
             iPos2 = InStr(iPos1, sData(3), "</P>")
             RCHSpecialExtraction = Replace(Replace(Mid(sData(2), iPos1, iPos2 - iPos1), "<b>", ""), "</b>", "")
        Case "Short Term Outlook"  ' MSN
             iPos1 = InStr(sData(3), "SHORT-TERM OUTLOOK")
             iPos1 = InStr(iPos1, sData(3), "<P>") + 3
             iPos2 = InStr(iPos1, sData(3), "</P>")
             RCHSpecialExtraction = Replace(Replace(Mid(sData(2), iPos1, iPos2 - iPos1), "<b>", ""), "</b>", "")
        Case "StockScouter Rating -- Current"  ' MSN
             iPos1 = InStr(sData(3), "ALT=""STOCKSCOUTER RATING: ")
             iPos2 = InStr(iPos1, sData(3), ":") + 2
             iPos3 = InStr(iPos2, sData(3), """")
             RCHSpecialExtraction = CInt(Mid(sData(2), iPos2, iPos3 - iPos2))
        Case "Risk Alert Level" ' Reuters
             iPos1 = InStr(sData(3), "IMAGES/SELLALERT")
             iPos1 = InStr(iPos1, sData(3), "ALT=""") + 5
             iPos2 = InStr(iPos1, sData(3), """")
             RCHSpecialExtraction = Mid(sData(2), iPos1, iPos2 - iPos1)
        Case "P&F -- Pattern" ' Stockcharts
             iPos1 = InStr(sData(3), "P&F PATTERN:")
             If iPos1 = 0 Then
                RCHSpecialExtraction = "No P&F Pattern Found"
                Exit Function
                End If
             iPos2 = InStr(iPos1, sData(3), "</DIV")
             iPos1 = InStrRev(sData(3), ">", iPos2) + 1
             iPos3 = InStrRev(sData(3), "#00AA00", iPos1)
             If iPos1 - iPos3 < 40 Then
                RCHSpecialExtraction = "Bullish -- " & Trim(Mid(sData(2), iPos1, iPos2 - iPos1))
                Exit Function
                End If
             iPos3 = InStrRev(sData(3), "#FF0000", iPos1)
             If iPos1 - iPos3 < 40 Then
                RCHSpecialExtraction = "Bearish -- " & Trim(Mid(sData(2), iPos1, iPos2 - iPos1))
                Exit Function
                End If
             RCHSpecialExtraction = "Unknown -- " & Trim(Mid(sData(2), iPos1, iPos2 - iPos1))
        Case "P&F -- Price Objective"  ' Stockcharts
             iPos1 = InStr(sData(3), " PRICE OBJ. ")
             If iPos1 = 0 Then GoTo ErrorExit
             iPos1 = InStr(iPos1, sData(3), ":") + 2
             iPos2 = InStr(iPos1, sData(3), "<")
             RCHSpecialExtraction = Trim(Mid(sData(2), iPos1, iPos2 - iPos1))
        Case "P&F -- Trend"  ' Stockcharts
             iPos1 = InStr(sData(3), " PRICE OBJ. ")
             If iPos1 > 0 Then
                RCHSpecialExtraction = Mid(sData(2), iPos1 - 7, 7)
             Else
                RCHSpecialExtraction = "Unknown"
                End If
        Case "Next Earnings Date" ' Yahoo
             iPos1 = InStr(sData(3), "NEXT EARNINGS DATE: ") + 20
             If iPos1 = 20 Then
                RCHSpecialExtraction = "N/A"
                Exit Function
                End If
             iPos2 = InStr(iPos1, sData(3), " - ")
             If iPos2 = 0 Then GoTo ErrorExit
             RCHSpecialExtraction = Mid(sData(2), iPos1, iPos2 - iPos1)
        Case "Sector Number" ' Yahoo
             iPos1 = InStr(sData(3), "HTTP://BIZ.YAHOO.COM/P/")
             If iPos1 = 0 Then GoTo ErrorExit
             RCHSpecialExtraction = Mid(sData(2), iPos1 + 23, 1)
        Case "Industry Number" ' Yahoo
             iPos1 = InStr(sData(3), ">INDUSTRY:<")
             iPos1 = InStr(iPos1, sData(3), "HTTP://BIZ.YAHOO.COM/IC/")
             If iPos1 = 0 Then GoTo ErrorExit
             RCHSpecialExtraction = Mid(sData(2), iPos1 + 24, 3)
        Case "Industry Symbol" ' Yahoo
             iPos1 = InStr(sData(3), ">^")
             If iPos1 = 0 Then GoTo ErrorExit
             RCHSpecialExtraction = Mid(sData(2), iPos1 + 1, 8)
        Case "Company Name" ' Yahoo
             iPos2 = InStr(sData(3), " (" & pTicker & ")</B>")
             iPos1 = InStrRev(sData(3), "<B>", iPos2)
             RCHSpecialExtraction = Mid(sData(2), iPos1 + 3, iPos2 - iPos1 - 3)
        Case "Fund Profile -- Morningstar Rating" ' Yahoo
             Select Case True
                Case InStr(sData(3), "/STAR1.GIF") > 0: RCHSpecialExtraction = 1
                Case InStr(sData(3), "/STAR2.GIF") > 0: RCHSpecialExtraction = 2
                Case InStr(sData(3), "/STAR3.GIF") > 0: RCHSpecialExtraction = 3
                Case InStr(sData(3), "/STAR4.GIF") > 0: RCHSpecialExtraction = 4
                Case InStr(sData(3), "/STAR5.GIF") > 0: RCHSpecialExtraction = 5
                Case Else: RCHSpecialExtraction = vError
                End Select
        Case "Fund Profile -- Last Dividend -- Date" ' Yahoo
             iPos1 = InStr(sData(3), ">FUND OPERATIONS")
             If iPos1 = 0 Then GoTo ErrorExit
             iPos1 = InStr(iPos1, sData(3), "LAST DIVIDEND")
             If iPos1 = 0 Then GoTo ErrorExit
             iPos1 = InStr(iPos1, sData(3), "(")
             If iPos1 = 0 Then GoTo ErrorExit
             iPos2 = InStr(iPos1, sData(3), ")")
             If iPos2 < iPos1 Then GoTo ErrorExit
             RCHSpecialExtraction = Mid(sData(2), iPos1 + 1, iPos2 - iPos1 - 1)
        Case "Fund Profile -- Last Cap Gain -- Date" ' Yahoo
             iPos1 = InStr(sData(3), ">FUND OPERATIONS")
             If iPos1 = 0 Then GoTo ErrorExit
             iPos1 = InStr(iPos1, sData(3), "LAST CAP GAIN")
             If iPos1 = 0 Then GoTo ErrorExit
             iPos1 = InStr(iPos1, sData(3), "(")
             If iPos1 = 0 Then GoTo ErrorExit
             iPos2 = InStr(iPos1, sData(3), ")")
             If iPos2 < iPos1 Then GoTo ErrorExit
             RCHSpecialExtraction = Mid(sData(2), iPos1 + 1, iPos2 - iPos1 - 1)
        Case "Piotroski 1 (Positive Net Income)"
             n1 = RCHGetElementNumber(pTicker, 8806)  ' FQ1, Net Income (Continuing Operations)
             n2 = RCHGetElementNumber(pTicker, 8807)  ' FQ2, Net Income (Continuing Operations)
             n3 = RCHGetElementNumber(pTicker, 8808)  ' FQ3, Net Income (Continuing Operations)
             n4 = RCHGetElementNumber(pTicker, 8809)  ' FQ4, Net Income (Continuing Operations)
             RCHSpecialExtraction = IIf((n1 + n2 + n3 + n4) > 0, 1, 0)
        Case "Piotroski 2 (Positive Operating Cash Flow)"
             n1 = RCHGetElementNumber(pTicker, 11326) ' FQ1, YTD Net Cash Flow (Continuing Operations)
             n2 = RCHGetElementNumber(pTicker, 11330) ' FQ5, YTD Net Cash Flow (Continuing Operations)
             n3 = RCHGetElementNumber(pTicker, 6856)  ' FY1, Net Cash Flow (Continuing Operations)
             RCHSpecialExtraction = IIf(n1 - n2 + n3 > 0, 1, 0)
        Case "Piotroski 3 (Increasing Net Income)"
             n1 = RCHGetElementNumber(pTicker, 8066)     ' FQ1, Ending Quarter
             If n1 = 4 Then
                n6 = RCHGetElementNumber(pTicker, 5596)  ' FY1, Net Income (Continuing Operations)
                N7 = RCHGetElementNumber(pTicker, 5597)  ' FY2, Net Income (Continuing Operations)
             Else
                n2 = RCHGetElementNumber(pTicker, 8806)  ' FQ1, Net Income (Continuing Operations)
                n3 = RCHGetElementNumber(pTicker, 8807)  ' FQ2, Net Income (Continuing Operations)
                n4 = RCHGetElementNumber(pTicker, 8808)  ' FQ3, Net Income (Continuing Operations)
                n5 = RCHGetElementNumber(pTicker, 8809)  ' FQ4, Net Income (Continuing Operations)
                n6 = n2 + n3 + n4 + n5
                N7 = RCHGetElementNumber(pTicker, 5596)  ' FY1, Net Income (Continuing Operations)
                End If
             RCHSpecialExtraction = IIf(n6 > N7, 1, 0)
        Case "Piotroski 4 (Operating Cash flow exceeds Net Income)"
             n1 = RCHGetElementNumber(pTicker, 11326) ' FQ1, YTD Net Cash Flow (Continuing Operations)
             n2 = RCHGetElementNumber(pTicker, 11330) ' FQ5, YTD Net Cash Flow (Continuing Operations)
             n3 = RCHGetElementNumber(pTicker, 6856)  ' FY1, Net Cash Flow (Continuing Operations)
             n4 = RCHGetElementNumber(pTicker, 8806)  ' FQ1, Net Income (Continuing Operations)
             n5 = RCHGetElementNumber(pTicker, 8807)  ' FQ2, Net Income (Continuing Operations)
             n6 = RCHGetElementNumber(pTicker, 8808)  ' FQ3, Net Income (Continuing Operations)
             N7 = RCHGetElementNumber(pTicker, 8809)  ' FQ4, Net Income (Continuing Operations)
             RCHSpecialExtraction = IIf(n1 - n2 + n3 > n4 + n5 + n6 + N7, 1, 0)
        Case "Piotroski 5 (Decreasing ratio of long-term debt to assets )"
             n1 = RCHGetElementNumber(pTicker, 8066)     ' FQ1, Ending Quarter
             If n1 = 4 Then
                n2 = RCHGetElementNumber(pTicker, 6376)  ' FY1, Long Term Debt
                n3 = RCHGetElementNumber(pTicker, 6266)  ' FY1, Total Assets
                n4 = RCHGetElementNumber(pTicker, 6377)  ' FY2, Long Term Debt
                n5 = RCHGetElementNumber(pTicker, 6267)  ' FY2, Total Assets
             Else
                n2 = RCHGetElementNumber(pTicker, 10366) ' FQ1, Long Term Debt
                n3 = RCHGetElementNumber(pTicker, 10146) ' FQ1, Total Assets
                n4 = RCHGetElementNumber(pTicker, 6376)  ' FY1, Long Term Debt
                n5 = RCHGetElementNumber(pTicker, 6266)  ' FY1, Total Assets
                End If
             RCHSpecialExtraction = IIf((n2 / n3) < (n4 / n5), 1, 0)
        Case "Piotroski 6 (Increasing Current Ratio)"
             n1 = RCHGetElementNumber(pTicker, 8066)     ' FQ1, Ending Quarter
             If n1 = 4 Then
                n2 = RCHGetElementNumber(pTicker, 6116)  ' FY1, Current Assets
                n3 = RCHGetElementNumber(pTicker, 6366)  ' FY1, Current Liabilities
                n4 = RCHGetElementNumber(pTicker, 6117)  ' FY2, Current Assets
                n5 = RCHGetElementNumber(pTicker, 6367)  ' FY2, Current Liabilities
             Else
                n2 = RCHGetElementNumber(pTicker, 9846)  ' FQ1, Current Assets
                n3 = RCHGetElementNumber(pTicker, 10346) ' FQ1, Current Liabilities
                n4 = RCHGetElementNumber(pTicker, 6116)  ' FY1, Current Assets
                n5 = RCHGetElementNumber(pTicker, 6366)  ' FY1, Current Liabilities
                End If
             RCHSpecialExtraction = IIf((n2 / n3) > (n4 / n5), 1, 0)
        Case "Piotroski 7 (No increase in outstanding shares)"
             n1 = RCHGetElementNumber(pTicker, 8066)     ' FQ1, Ending Quarter
             If n1 = 4 Then
                n2 = RCHGetElementNumber(pTicker, 6646)  ' FY1, Total Common Shares Out
                n3 = RCHGetElementNumber(pTicker, 6647)  ' FY2, Total Common Shares Out
             Else
                n2 = RCHGetElementNumber(pTicker, 10906) ' FQ1, Total Common Shares Out
                n3 = RCHGetElementNumber(pTicker, 6646)  ' FY1, Total Common Shares Out
                End If
             RCHSpecialExtraction = IIf(n2 > n3, 0, 1)
        Case "Piotroski 8 (Increasing Gross Margins)"
             n1 = RCHGetElementNumber(pTicker, 8066)     ' FQ1, Ending Quarter
             If n1 = 4 Then
                n6 = RCHGetElementNumber(pTicker, 5346)  ' FY1, Gross Operating Profit
                N7 = RCHGetElementNumber(pTicker, 5347)  ' FY2, Gross Operating Profit
                n8 = RCHGetElementNumber(pTicker, 5286)  ' FY1, Operating Revenue
                n9 = RCHGetElementNumber(pTicker, 5287)  ' FY2, Operating Revenue
             Else
                n2 = RCHGetElementNumber(pTicker, 8306)  ' FQ1, Gross Operating Profit
                n3 = RCHGetElementNumber(pTicker, 8307)  ' FQ2, Gross Operating Profit
                n4 = RCHGetElementNumber(pTicker, 8308)  ' FQ3, Gross Operating Profit
                n5 = RCHGetElementNumber(pTicker, 8309)  ' FQ4, Gross Operating Profit
                n6 = n2 + n3 + n4 + n5
                N7 = RCHGetElementNumber(pTicker, 5346)  ' FY1, Gross Operating Profit
                n2 = RCHGetElementNumber(pTicker, 8186)  ' FQ1, Operating Revenue
                n3 = RCHGetElementNumber(pTicker, 8187)  ' FQ2, Operating Revenue
                n4 = RCHGetElementNumber(pTicker, 8188)  ' FQ3, Operating Revenue
                n5 = RCHGetElementNumber(pTicker, 8189)  ' FQ4, Operating Revenue
                n8 = n2 + n3 + n4 + n5
                n9 = RCHGetElementNumber(pTicker, 5286)  ' FY1, Operating Revenue
                End If
             RCHSpecialExtraction = IIf((n6 / n8) > (N7 / n9), 1, 0)
        Case "Piotroski 9 (Increasing Asset Turnover)"
             n1 = RCHGetElementNumber(pTicker, 8066)     ' FQ1, Ending Quarter
             If n1 = 4 Then
                n6 = RCHGetElementNumber(pTicker, 5286)  ' FY1, Operating Revenue
                N7 = RCHGetElementNumber(pTicker, 6266)  ' FY1, Total Assets
                n8 = RCHGetElementNumber(pTicker, 5287)  ' FY2, Operating Revenue
                n9 = RCHGetElementNumber(pTicker, 6267)  ' FY2, Total Assets
             Else
                n2 = RCHGetElementNumber(pTicker, 8186)  ' FQ1, Operating Revenue
                n3 = RCHGetElementNumber(pTicker, 8187)  ' FQ2, Operating Revenue
                n4 = RCHGetElementNumber(pTicker, 8188)  ' FQ3, Operating Revenue
                n5 = RCHGetElementNumber(pTicker, 8189)  ' FQ4, Operating Revenue
                n6 = n2 + n3 + n4 + n5
                N7 = RCHGetElementNumber(pTicker, 10146) ' FQ1, Total Assets
                n8 = RCHGetElementNumber(pTicker, 5286)  ' FY1, Operating Revenue
                n9 = RCHGetElementNumber(pTicker, 6266)  ' FY1, Total Assets
                End If
             RCHSpecialExtraction = IIf((n6 / N7) > (n8 / n9), 1, 0)
        Case "Piotroski F-Score"
             n1 = RCHGetElementNumber(pTicker, 15001)
             n2 = RCHGetElementNumber(pTicker, 15002)
             n3 = RCHGetElementNumber(pTicker, 15003)
             n4 = RCHGetElementNumber(pTicker, 15004)
             n5 = RCHGetElementNumber(pTicker, 15005)
             n6 = RCHGetElementNumber(pTicker, 15006)
             N7 = RCHGetElementNumber(pTicker, 15007)
             n8 = RCHGetElementNumber(pTicker, 15008)
             n9 = RCHGetElementNumber(pTicker, 15009)
             RCHSpecialExtraction = n1 + n2 + n3 + n4 + n5 + n6 + N7 + n8 + n9
        Case "Altman Z-Score"
             n1 = RCHGetElementNumber(pTicker, 10786)  ' FQ1, Working Capital
             n2 = RCHGetElementNumber(pTicker, 10146)  ' FQ1, Total Assets
             n3 = RCHGetElementNumber(pTicker, 10646)  ' FQ1, Retained Earnings
             n4 = RCHGetElementNumber(pTicker, 8666)   ' FQ1, EBIT
             n5 = RCHGetElementNumber(pTicker, 8667)   ' FQ2, EBIT
             n6 = RCHGetElementNumber(pTicker, 8668)   ' FQ3, EBIT
             N7 = RCHGetElementNumber(pTicker, 8669)   ' FQ4, EBIT
             n8 = n4 + n5 + n6 + N7
             n9 = RCHGetElementNumber(pTicker, 941)   ' Market Capitalization
             n10 = RCHGetElementNumber(pTicker, 10526) ' Total Liabilities
             n11 = RCHGetElementNumber(pTicker, 8186)  ' FQ1, Operating Revenue
             n12 = RCHGetElementNumber(pTicker, 8187)  ' FQ2, Operating Revenue
             n13 = RCHGetElementNumber(pTicker, 8188)  ' FQ3, Operating Revenue
             n14 = RCHGetElementNumber(pTicker, 8189)  ' FQ4, Operating Revenue
             n15 = n11 + n12 + n13 + n14
             RCHSpecialExtraction = 1.2 * (n1 / n2) + 1.4 * (n3 / n2) + 3.3 * (n8 / n2) + 0.6 * (n9 / n10 / 1000) + (n15 / n2)
        Case "Rule #1 MOS Price"
             n1 = RCHGetElementNumber(pTicker, 13630)  ' 5-Year High P/E from Reuter's
             n2 = RCHGetElementNumber(pTicker, 13634)  ' 5-Year Low P/E from Reuter's
             n3 = RCHGetElementNumber(pTicker, 962)    ' Current EPS from Yahoo
             n4 = RCHGetElementNumber(pTicker, 621)    ' 5-Year Projected Growth Rate from Yahoo
             If n1 > 50 Then n1 = 50
             n5 = FV(n4, 10, 0, -n3)
             n6 = PV(0.15, 10, 0, -n5 * (n1 + n2) / 2) / 2
             RCHSpecialExtraction = n6
        Case "Magic Formula Investing -- Earnings Yield"
             n1 = RCHGetElementNumber(pTicker, 949)    ' Enterprise value to EBITDA
             RCHSpecialExtraction = 1 / n1
        Case "Magic Formula Investing -- Return on Capital"
             n1 = RCHGetElementNumber(pTicker, 960)    ' EBITDA
             n2 = RCHGetElementNumber(pTicker, 964)    ' Cash
             n3 = RCHGetElementNumber(pTicker, 10026)  ' FQ1, Net Fixed Assets (Plant & Equipment)
             RCHSpecialExtraction = n1 / (n2 + 1000 * n3)
        Case Else: RCHSpecialExtraction = vError
        End Select
        Exit Function
ErrorExit: RCHSpecialExtraction = vError
    End Function

Sub LoadElementsFromFile(pSuffix As Variant)
    '------------------------------------------------------------------------------------------------------*
    ' 2017.05.05 -- Add processing for settings
    ' 2017.05.19 -- Add processing for constants
    '------------------------------------------------------------------------------------------------------*
    On Error GoTo ErrorExit
    Open ThisWorkbook.Path & Application.PathSeparator & "smf-elements-" & pSuffix & ".txt" For Input As #1
    On Error Resume Next
    Do Until EOF(1) = True
       Line Input #1, sLine
       Select Case True
          Case Left(sLine, 1) = "'"
          Case Left(UCase(sLine), 7) = "SETTING"
               Evaluate (smfWord(sLine, 3, ";"))
          Case Left(UCase(sLine), 8) = "CONSTANT"
               i1 = CInt(smfWord(sLine, 2, ";"))
               aConstants(i1) = smfWord(sLine, 4, ";")
          Case Else
               iPos1 = InStr(sLine, ";")
               aParms(CInt(Left(sLine, iPos1 - 1))) = Mid(sLine, iPos1 + 1)
          End Select
       Loop
    Close #1
ErrorExit:
    End Sub
Sub LoadElementsFromInternet(pSuffix As Variant)
    '-----------------------------------------------------------------------------------------------------------*
    ' 2016.05.18 -- Change to RCHGetURLData to ease transition between operating systems
    '-----------------------------------------------------------------------------------------------------------*
    On Error GoTo ErrorExit
    s1 = RCHGetURLData("http://ogres-crypt.com/SMF/Elements/smf-elements-" & pSuffix & ".txt")
    If s1 = "Error" Then Exit Sub
    v1 = Split(s1, Chr(13) & Chr(10))
    For i1 = 0 To UBound(v1)
       Select Case Left(Trim(v1(i1)) & " ", 1)
          Case "'"
          Case " "
          Case Else
               iPos1 = InStr(v1(i1), ";")
               aParms(CInt(Left(v1(i1), iPos1 - 1))) = Mid(v1(i1), iPos1 + 1)
          End Select
        Next i1
    x = 1
ErrorExit:
    End Sub
    
Sub smfSetElementsLocation(p1 As String)
    sElementsLocation = p1
    End Sub
    
Sub LoadElementsLocation()
    If sElementsLocation = "" Then sElementsLocation = "Local"
    On Error GoTo ErrorExit
    Open ThisWorkbook.Path & Application.PathSeparator & "smf-Elements-Location.txt" For Input As #1
    Line Input #1, sElementsLocation
    Close #1
ErrorExit:
    End Sub

Public Function smfGetAParms(p1 As Integer)
    smfGetAParms = aParms(p1)
    End Function

Public Function smfGetAConstants(p1 As Integer)
    '-----------------------------------------------------------------------------------------------------------*
    ' 2017.05.21 -- New function to view constant values
    '-----------------------------------------------------------------------------------------------------------*
    smfGetAConstants = aConstants(p1)
    End Function

Attribute VB_Name = "modGetGuruFocusData"
Option Explicit
Public aGuruFocusItems(1 To 250) As Variant
Function smfGetGuruFocusData(ByVal pTicker As String, _
                             ByVal pItem As Integer, _
                    Optional ByVal pPeriod As String = "C", _
                    Optional ByVal pOffset As Integer = 0, _
                    Optional ByVal pError As Variant = "Error", _
                    Optional ByVal pType As Integer = 0) As Variant
                        
   '-----------------------------------------------------------------------------------------------------------*
   ' Function to return a data from GuruFocus
   '-----------------------------------------------------------------------------------------------------------*
   ' 2014.12.21 -- Created by Randy Harmelink (rharmelink@gmail.com)
   ' 2017.05.03 -- Change "http://" protocol to "https://"
   '-----------------------------------------------------------------------------------------------------------*
   ' Sample of use:
   '
   '    =smfGetGuruFocusData("MMM",1,"Y1")
   '
   '-----------------------------------------------------------------------------------------------------------*
    
    On Error GoTo ErrorExit
    vError = pError
    
    '------------------> Create high-level labels for GuruFocus URL
    Dim sTicker As String, sCompName As String, sCompName2 As String, sURL As String
    Dim sPeriod2 As String
    sTicker = UCase(pTicker)
    Select Case Left(UCase(pPeriod), 1)
       Case "Y": sPeriod2 = " Annual data"
       Case "Q": sPeriod2 = " Quarterly data"
       Case "C": sPeriod2 = "": pOffset = 0
       Case Else: vError = "Improper period -- first byte should be A or Q or C": GoTo ErrorExit
       End Select
    sCompName = smfStrExtr(smfGetTagContent("https://www.gurufocus.com/stock/" & sTicker, "title", 1), "~", " (")
    sCompName2 = Replace(sCompName, " ", "+")
       
    '------------------> Array of potential formulas
    Dim aLabel As Variant
    If aGuruFocusItems(1) = "" Then smfLoadGuruFocusItems
    aLabel = Split(aGuruFocusItems(pItem), "|")
       
    '------------------> Determine which data items to return
    Select Case aLabel(0)
       Case "0": smfGetGuruFocusData = sCompName: Exit Function
       Case "1": GoTo GF_Variation1
       Case Else: vError = "Invalid item number": GoTo ErrorExit
       End Select
    
    Exit Function
    
GF_Variation1:
    sURL = "https://www.gurufocus.com/term/" & aLabel(1) & "/" & sTicker & "/" & aLabel(2) & "/" & sCompName2
    If pItem = 36 Or pItem = 37 Or pItem = 45 Or pItem = 101 Then sPeriod2 = sCompName & " Historical Data"
    Select Case pOffset
       Case 0
            Select Case aLabel(4)
               Case 0: smfGetGuruFocusData = "N/A"
               Case 1: smfGetGuruFocusData = smfConvertData(smfStrExtr(smfGetTagContent(sURL, "div", -1, "As of "), "~", " ("))
               Case 2: smfGetGuruFocusData = smfConvertData(smfStrExtr(smfGetTagContent(sURL, "font", -1, " Rank:"), ": ", "-"))
               End Select
       Case -10 To -1
            Select Case aLabel(3)
               Case "N/A": smfGetGuruFocusData = "N/A"
               Case Else: smfGetGuruFocusData = RCHGetTableCell(sURL, pOffset, sPeriod2, "<tr")
               End Select
       Case 1 To 10
            Select Case aLabel(3)
               Case "N/A": smfGetGuruFocusData = "N/A"
               Case Else: smfGetGuruFocusData = RCHGetTableCell(sURL, -pOffset, sPeriod2, ">" & aLabel(3))
               End Select
       Case Else: vError = "Invalid offset period -- must be -10 to 10": GoTo ErrorExit
       End Select
    Exit Function

ErrorExit: smfGetGuruFocusData = vError
                   
   End Function

Sub smfLoadGuruFocusItems()
       aGuruFocusItems(1) = "0"
       aGuruFocusItems(2) = "1|zscore|Altman%2BZ-Score|X1|0"
       aGuruFocusItems(3) = "1|zscore|Altman%2BZ-Score|X2|0"
       aGuruFocusItems(4) = "1|zscore|Altman%2BZ-Score|X3|0"
       aGuruFocusItems(5) = "1|zscore|Altman%2BZ-Score|X4|0"
       aGuruFocusItems(6) = "1|zscore|Altman%2BZ-Score|X5|0"
       aGuruFocusItems(7) = "1|zscore|Altman%2BZ-Score|Z-Score|1"
       aGuruFocusItems(8) = "1|mscore|Beneish%2BM-Score|DSRI|0"
       aGuruFocusItems(9) = "1|mscore|Beneish%2BM-Score|GMI|0"
       aGuruFocusItems(10) = "1|mscore|Beneish%2BM-Score|AQI|0"
       aGuruFocusItems(11) = "1|mscore|Beneish%2BM-Score|SGI|0"
       aGuruFocusItems(12) = "1|mscore|Beneish%2BM-Score|DEPI|0"
       aGuruFocusItems(13) = "1|mscore|Beneish%2BM-Score|SGAI|0"
       aGuruFocusItems(14) = "1|mscore|Beneish%2BM-Score|LVGI|0"
       aGuruFocusItems(15) = "1|mscore|Beneish%2BM-Score|TATA|0"
       aGuruFocusItems(16) = "1|mscore|Beneish%2BM-Score|M-score|1"
       aGuruFocusItems(17) = "1|fscore|Piotroski%2BF-Score|Q1|0"
       aGuruFocusItems(18) = "1|fscore|Piotroski%2BF-Score|Q2|0"
       aGuruFocusItems(19) = "1|fscore|Piotroski%2BF-Score|Q3|0"
       aGuruFocusItems(20) = "1|fscore|Piotroski%2BF-Score|Q4|0"
       aGuruFocusItems(21) = "1|fscore|Piotroski%2BF-Score|Q5|0"
       aGuruFocusItems(22) = "1|fscore|Piotroski%2BF-Score|Q6|0"
       aGuruFocusItems(23) = "1|fscore|Piotroski%2BF-Score|Q7|0"
       aGuruFocusItems(24) = "1|fscore|Piotroski%2BF-Score|Q8|0"
       aGuruFocusItems(25) = "1|fscore|Piotroski%2BF-Score|Q9|0"
       aGuruFocusItems(26) = "1|fscore|Piotroski%2BF-Score|F-score|1"
       aGuruFocusItems(27) = "1|Book Value Per Share|Book%2BValue%2Bper%2BShare|Book Value Per Share|1"
       aGuruFocusItems(28) = "1|Dividends Per Share|Dividends%2BPer%2BShare|Dividends Per Share|1"
       aGuruFocusItems(29) = "1|per share eps|Earnings%2Bper%2BShare|per share eps|1"
       aGuruFocusItems(30) = "1|eps_nri|Earnings%2Bper%2Bshare%2Bwithout%2BNon-Recurring%2BItems|eps_nri|1"
       aGuruFocusItems(31) = "1|EBITDA_per_share|EBITDA%2Bper%2BShare|EBITDA_per_share|1"
       aGuruFocusItems(32) = "1|ev|Enterprise%2BValue|ev|1"
       aGuruFocusItems(33) = "1|rank_balancesheet|Financial%2BStrength|N/A|1"
       aGuruFocusItems(34) = "1|per share_freecashflow|Free%2BCashflow%2Bper%2BShare|per share_freecashflow|1"
       aGuruFocusItems(35) = "1|e10|E10|N/A|1"
       aGuruFocusItems(36) = "1|InsiderOwnership|Insider%2BOwnership|Insider Ownership|1"
       aGuruFocusItems(37) = "1|InstitutionalOwnership|Institutional%2BOwnership|Institutional Ownership|1"
       aGuruFocusItems(38) = "1|mktcap|Market%2BCap|mktcap|1"
       aGuruFocusItems(39) = "1|netcash|Net%2BCash|netcash|1"
       aGuruFocusItems(40) = "1|NCAV_real|Net%2BCurrent%2BAsset%2BValue%2B%2528per%2Bshare%2529|NCAV|1"
       aGuruFocusItems(41) = "1|NCAV|Net-Net%2BWorking%2BCapital|NNWC|1"
       aGuruFocusItems(42) = "1|predictability_rank|predictability_rank|N/A|2"
       aGuruFocusItems(43) = "1|rank_profitability|Profitability%2BRank|N/A|1"
       aGuruFocusItems(44) = "1|per share rev|Revenue%2Bper%2BShare|per share rev|1"
       aGuruFocusItems(45) = "1|ShortInterest|Short%2BInterest|Short Interest|1"
       aGuruFocusItems(46) = "1|Tangibles_book_per_share|Tangible%2BBook%2BValue%2Bper%2BShare|Tangibles_book_per_share|1"
       aGuruFocusItems(47) = "1|turnover|Asset%2BTurnover|turnover|1"
       aGuruFocusItems(48) = "1|total_buyback_3y|Buyback%2BRatio|N/A|1"
       aGuruFocusItems(49) = "1|CCC|Cash%2BConversion%2BCycle%2B%2528CCC%2529|CCC|1"
       aGuruFocusItems(50) = "1|cash2debt|Cash%2Bto%2BDebt|cash2debt|1"
       aGuruFocusItems(51) = "1|cogs2rev|COGS%2Bto%2BRevenue|cogs2rev|1"
       aGuruFocusItems(52) = "1|current_ratio|Current%2BRatio|current ratio|1"
       aGuruFocusItems(53) = "1|DaysInventory|Days%2BInventory|DaysInventory|1"
       aGuruFocusItems(54) = "1|DaysPayable|Days%2BPayable|DaysPayable|1"
       aGuruFocusItems(55) = "1|DaysSalesOutstanding|Days%2BSales%2BOutstanding|DaysSalesOutstanding|1"
       aGuruFocusItems(56) = "1|deb2equity|Debt%2Bto%2BEquity%2B%2528%2525%2529|deb2equity|1"
       aGuruFocusItems(57) = "1|Earnings Yield|Earnings%2BYield|N/A|1"
       aGuruFocusItems(58) = "1|earning_yield_greenblatt|Earnings%2BYield%2B%2528Joel%2BGreenblatt%2529|earning_yield_greenblatt|1"
       aGuruFocusItems(59) = "1|equity2asset|Equity%2Bto%2BAsset|equity2asset|1"
       aGuruFocusItems(60) = "1|ev2ebit|EV%252FEBIT|ev2ebit|1"
       aGuruFocusItems(61) = "1|ev2ebitda|EV%252FEBITDA|ev2ebitda|1"
       aGuruFocusItems(62) = "1|ev2rev|EV%252FRevenue|ev2rev|1"
       aGuruFocusItems(63) = "1|forwardPE|Forward%2BP%252FE%2BRatio|N/A|1"
       aGuruFocusItems(64) = "1|RateOfReturn|Forward%2BRate%2Bof%2BReturn|RateOfReturn|1"
       aGuruFocusItems(65) = "1|goodwill2asset|Goodwill%2Bto%2BAsset%2BRatio|goodwill2asset|1"
       aGuruFocusItems(66) = "1|interest_coverage|Interest%2BCoverage|interest_coverage|1"
       aGuruFocusItems(67) = "1|inventory2rev|Inventory%2Bto%2BRevenue|inventory2rev|1"
       aGuruFocusItems(68) = "1|InventoryTurnover|Inventory%2BTurnover|Inventory Turnover|1"
       aGuruFocusItems(69) = "1|ltd2asset|LT%2BDebt%2Bto%2BTotal%2BAsset|ltd2asset|1"
       aGuruFocusItems(70) = "1|pb|P%252FB%2BRatio|pb|1"
       aGuruFocusItems(71) = "1|pe|P%252FE%2BRatio|pe|1"
       aGuruFocusItems(72) = "1|pettm|P%252FE%2BRatio%2528ttm%2529|pettm|1"
       aGuruFocusItems(73) = "1|penri|P%252FE%2Bwithout%2BNRI|penri|1"
       aGuruFocusItems(74) = "1|ps|P%252FS%2BRatio|ps|1"
       aGuruFocusItems(75) = "1|peg|PEG|peg|1"
       aGuruFocusItems(76) = "1|p2tangible_book|Price%2Bto%2BTangible%2BBook|p2tangible_book|1"
       aGuruFocusItems(77) = "1|pfcf|Price-to-Free-Cash-Flow%2Bratio|pfcf|1"
       aGuruFocusItems(78) = "1|quick_ratio|Quick%2BRatio|quick ratio|1"
       aGuruFocusItems(79) = "1|ROA|Return%2Bon%2BAssets|ROA|1"
       aGuruFocusItems(80) = "1|ROC|Return%2Bon%2BCapital|ROC|1"
       aGuruFocusItems(81) = "1|ROC_JOEL|Return%2Bon%2BCapital%2B%2B-%2BJoel%2BGreenblatt|ROC_JOEL|1"
       aGuruFocusItems(82) = "1|ROE|Return%2Bon%2BEquity|ROE|1"
       aGuruFocusItems(83) = "1|ROTA|Return%2Bon%2BTangible%2BAssets|ROTA|1"
       aGuruFocusItems(84) = "1|ROTE|Return%2Bon%2BTangible%2BEquity|ROTE|1"
       aGuruFocusItems(85) = "1|ShillerPE|Shiller%2BP%252FE%2BRatio|N/A|1"
       aGuruFocusItems(86) = "1|Short Ratio|Short%2BRatio|N/A|1"
       aGuruFocusItems(87) = "1|sloanratio|Sloan%2BRatio|sloanratio|1"
       aGuruFocusItems(88) = "1|grossmargin|Gross%2BMargin|Gross Margin|1"
       aGuruFocusItems(89) = "1|netmargin|Net%2BMargin|netmargin|1"
       aGuruFocusItems(90) = "1|operatingmargin|Operating%2BMargin|Operating Margin|1"
       aGuruFocusItems(91) = "1|EPV|Earnings%2BPower%2BValue%2B%2528EPV%2529|EPV|1"
       aGuruFocusItems(92) = "1|GAVA|GAVA|N/A|1"
       aGuruFocusItems(93) = "1|grahamnumber|Graham%2BNumber|grahamnumber|1"
       aGuruFocusItems(94) = "1|iv_dcf_share|Intrinsic%2BValue%2B%2528DCF%2BProjected%2529|iv_dcf_share|1"
       aGuruFocusItems(95) = "1|Intrinsic Value (DCF)|Intrinsic%2BValue%2B%2528DCF%2529|N/A|1"
       aGuruFocusItems(96) = "1|Intrinsic Value (DE)|Intrinsic%2BValue%2B%2528DE%2529|N/A|1"
       aGuruFocusItems(97) = "1|margin_of_safety|Margin%2Bof%2BSafety|N/A|1"
       aGuruFocusItems(98) = "1|medpsvalue|Median%2BP%252FS%2BValue|medpsvalue|1"
       aGuruFocusItems(99) = "1|netcash_per_share|Net%2BCash%2B%2528per%2Bshare%2529|netcash|1"
       aGuruFocusItems(100) = "1|lynchvalue|Peter%2BLynch%2BFair%2BValue|lynchvalue|1"
       aGuruFocusItems(101) = "1|ShortPercentageOfFloat|Short%2BPercentage%2BOf%2BFloat|Short Percentage Of Float|1"
       aGuruFocusItems(102) = "1|dividend_growth_3y|Dividend%2BGrowth%2BRate%2B3y|N/A|1"
       aGuruFocusItems(103) = "1|dividend_growth_5y|Dividend%2BGrowth%2BRate%2B5y|N/A|1"
       aGuruFocusItems(104) = "1|payout|Dividend%2BPayout%2BRatio|payout|1"
       aGuruFocusItems(105) = "1|yield|Dividend%2BYield|N/A|1"
       aGuruFocusItems(106) = "1|yield_on_cost|Yield%2Bon%2BCost|N/A|1"
       aGuruFocusItems(107) = "1|PromotionAndAdvertising|Advertising|PromotionAndAdvertising|1"
       aGuruFocusItems(108) = "1|COGS|Cost%2Bof%2BGoods%2BSold|COGS|1"
       aGuruFocusItems(109) = "1|IS_CreditLossesProvision|Credit%2BLosses%2BProvision|IS_CreditLossesProvision|1"
       aGuruFocusItems(110) = "1|EBITDA|Earnings%2BBefore%2BDepreciation%2Band%2BAmortization|EBITDA|1"
       aGuruFocusItems(111) = "1|eps_basic|EPS%2B%2528Basic%2529|eps_basic|1"
       aGuruFocusItems(112) = "1|eps_diluated|EPS%2B%2528Diluted%2529|eps_diluated|1"
       aGuruFocusItems(113) = "1|IS_FeeRevenueAndOtherIncome|Fees%2Band%2BOther%2BIncome|IS_FeeRevenueAndOtherIncome|1"
       aGuruFocusItems(114) = "1|Gross Profit|Gross%2BProfit|Gross_Profit|1"
       aGuruFocusItems(115) = "1|InterestExpense|Interest%2BExpense|Interest Expense|1"
       aGuruFocusItems(116) = "1|InterestIncome|Interest%2BIncome|InterestIncome|1"
       aGuruFocusItems(117) = "1|Net Income|Net%2BIncome|Net Income|1"
       aGuruFocusItems(118) = "1|Net Income (Continuing Operations)|Net%2BIncome%2B%2528Continuing%2BOperations%2529|Net Income (Continuing Operations)|1"
       aGuruFocusItems(119) = "1|Net Income (Discontinued Operations)|Net%2BIncome%2B%2528Discontinued%2BOperations%2529|Net Income (Discontinued Operations)|1"
       aGuruFocusItems(120) = "1|IS_NetInterestIncome|Net%2BInterest%2BIncome|IS_NetInterestIncome|1"
       aGuruFocusItems(121) = "1|IS_NetInvestmentIncome|Net%2BInvestment%2BIncome|IS_NetInvestmentIncome|1"
       aGuruFocusItems(122) = "1|IS_NonInterestIncome|Non%2BInterest%2BIncome|IS_NonInterestIncome|1"
       aGuruFocusItems(123) = "1|Non Operating Income|Non-Recurring%2BItems|Non Operating Income|1"
       aGuruFocusItems(124) = "1|Operating Income|Operating%2BIncome|Operating Income|1"
       aGuruFocusItems(125) = "1|IS_otherExpense_bank|Other%2BExpenses|IS_otherExpense_bank|1"
       aGuruFocusItems(126) = "1|OtherIncomeExpense|Other%2BIncome%2B%2528Minority%2BInterest%2529|OtherIncomeExpense|1"
       aGuruFocusItems(127) = "1|IS_PolicyAcquisitionExpense|Policy%2BAcquisition%2BExpense|IS_PolicyAcquisitionExpense|1"
       aGuruFocusItems(128) = "1|IS_NetPolicyholderBenefitsAndClaims|Policyholder%2BBenefits%2B%2526%2BClaims|IS_NetPolicyholderBenefitsAndClaims|1"
       aGuruFocusItems(129) = "1|Pretax Income|Pre-Tax%2BIncome|Pretax Income|1"
       aGuruFocusItems(130) = "1|IS_preferred_dividends|Preferred%2Bdividends|IS_preferred_dividends|1"
       aGuruFocusItems(131) = "1|RD|Research%2B%2526%2BDevelopment|Research & Development|1"
       aGuruFocusItems(132) = "1|Revenue|Revenue|Revenue|1"
       aGuruFocusItems(133) = "1|SGA|Selling%252C%2BGeneral%252C%2B%2526%2BAdmin.%2BExpense|SG&A|1"
       aGuruFocusItems(134) = "1|Shares Outstanding|Shares%2BOutstanding|Shares Outstanding|1"
       aGuruFocusItems(135) = "1|SpecialCharges|SpecialCharges|SpecialCharges|1"
       aGuruFocusItems(136) = "1|tax|Tax%2BExpense|tax|1"
       aGuruFocusItems(137) = "1|TaxProvision|Tax%2BProvision|TaxProvision|1"
       aGuruFocusItems(138) = "1|IS_TotalPremiumsEarned|Total%2BPremiums%2BEarned|IS_TotalPremiumsEarned|1"
       aGuruFocusItems(139) = "1|Accts Payable|Accounts%2BPayable|Accts Payable|1"
       aGuruFocusItems(140) = "1|Accts Rec.|Accounts%2BReceivable|Accts Rec.|1"
       aGuruFocusItems(141) = "1|AccumulatedDepreciation|Accumulated%2BDepreciation|AccumulatedDepreciation|1"
       aGuruFocusItems(142) = "1|AdditionalPaidInCapital|Additional%2BPaid-In%2BCapital|AdditionalPaidInCapital|1"
       aGuruFocusItems(143) = "1|BuildingsAndImprovements|Buildings%2BAnd%2BImprovements|BuildingsAndImprovements|1"
       aGuruFocusItems(144) = "1|LongTermCapitalLeaseObligation|Capital%2BLease%2BObligation|LongTermCapitalLeaseObligation|1"
       aGuruFocusItems(145) = "1|Capital Surplus|Capital%2BSurplus|Capital Surplus|1"
       aGuruFocusItems(146) = "1|CashAndCashEquivalents|Cash%2BAnd%2BCash%2BEquivalents|CashAndCashEquivalents|1"
       aGuruFocusItems(147) = "1|BS_CashAndCashEquivalents|Cash%2Band%2Bcash%2Bequivalents|BS_CashAndCashEquivalents|1"
       aGuruFocusItems(148) = "1|CommonStock|Common%2BStock|Common Stock|1"
       aGuruFocusItems(149) = "1|ConstructionInProgress|Construction%2BIn%2BProgress|ConstructionInProgress|1"
       aGuruFocusItems(150) = "1|Short-Term Debt|Current%2BPortion%2Bof%2BLong-Term%2BDebt|Short-Term Debt|1"
       aGuruFocusItems(151) = "1|BS_DeferredPolicyAcquisitionCosts|Deferred%2BPolicy%2BAcquisition%2BCosts|BS_DeferredPolicyAcquisitionCosts|1"
       aGuruFocusItems(152) = "1|BS_EquityInvestments|Equity%2BInvestments|BS_EquityInvestments|1"
       aGuruFocusItems(153) = "1|BS_FixedMaturityInvestment|Fixed%2BMaturity%2BInvestment|BS_FixedMaturityInvestment|1"
       aGuruFocusItems(154) = "1|BS_FuturePolicyBenefits|Future%2BPolicy%2BBenefits|BS_FuturePolicyBenefits|1"
       aGuruFocusItems(155) = "1|GrossPPE|Gross%2BProperty%252C%2BPlant%2Band%2BEquipment|GrossPPE|1"
       aGuruFocusItems(156) = "1|Intangibles|Intangible%2BAssets|Intangibles|1"
       aGuruFocusItems(157) = "1|FinishedGoods|Inventories%252C%2BFinished%2BGoods|FinishedGoods|1"
       aGuruFocusItems(158) = "1|OtherInventories|Inventories%252C%2BOther|OtherInventories|1"
       aGuruFocusItems(159) = "1|RawMaterials|Inventories%252C%2BRaw%2BMaterials%2B%2526%2BComponents|RawMaterials|1"
       aGuruFocusItems(160) = "1|WorkInProcess|Inventories%252C%2BWork%2BIn%2BProcess|WorkInProcess|1"
       aGuruFocusItems(161) = "1|Inventory|Inventory|Inventory|1"
       aGuruFocusItems(162) = "1|LandAndImprovements|Land%2BAnd%2BImprovements|LandAndImprovements|1"
       aGuruFocusItems(163) = "1|Long-Term Debt|Long-Term%2BDebt|Long-Term Debt|1"
       aGuruFocusItems(164) = "1|MarketableSecurities|Marketable%2BSecurities|MarketableSecurities|1"
       aGuruFocusItems(165) = "1|BS_MoneyMarket|Money%2BMarket%2BInvestments|BS_MoneyMarket|1"
       aGuruFocusItems(166) = "1|BS_NetLoan|Net%2BLoan|BS_NetLoan|1"
       aGuruFocusItems(167) = "1|BS_other_assets_Bank|Other%2BAssets|BS_other_assets_Bank|1"
       aGuruFocusItems(168) = "1|Other Current Assets|Other%2BCurrent%2BAssets|Other Current Assets|1"
       aGuruFocusItems(169) = "1|Other Current Liab|Other%2BCurrent%2BLiabilities|Other Current Liab.|1"
       aGuruFocusItems(170) = "1|BS_other_liabilities_bank|Other%2Bliabilities|BS_other_liabilities_bank|1"
       aGuruFocusItems(171) = "1|Other Long-Term Assets|Other%2BLong%2BTerm%2BAssets|Other Long-Term Assets|1"
       aGuruFocusItems(172) = "1|Other Long-Term Liab|Other%2BLong-Term%2BLiabilities|Other Long-Term Liab.|1"
       aGuruFocusItems(173) = "1|Paid-In Capital|Paid-In%2BCapital|Paid-In Capital|1"
       aGuruFocusItems(174) = "1|BS_PolicyholderFunds|Policyholder%2BFunds|BS_PolicyholderFunds|1"
       aGuruFocusItems(175) = "1|Preferred Stock|Preferred%2BStock|Preferred Stock|1"
       aGuruFocusItems(176) = "1|Net PPE|Property%252C%2BPlant%2Band%2BEquipment|Net PPE|1"
       aGuruFocusItems(177) = "1|Retained Earnings|Retained%2BEarnings|Retained Earnings|1"
       aGuruFocusItems(178) = "1|BS_SecuritiesAndInvestments|Securities%2B%2526%2BInvestments|BS_SecuritiesAndInvestments|1"
       aGuruFocusItems(179) = "1|BS_TradingAssets|Short-term%2Binvestments|BS_TradingAssets|1"
       aGuruFocusItems(180) = "1|Total Assets|Total%2BAssets|Total Assets|1"
       aGuruFocusItems(181) = "1|Total Current Assets|Total%2BCurrent%2BAssets|Total Current Assets|1"
       aGuruFocusItems(182) = "1|Total Current Liabilities|Total%2BCurrent%2BLiabilities|Total Current Liabilities|1"
       aGuruFocusItems(183) = "1|BS_TotalDeposits|Total%2BDeposits|BS_TotalDeposits|1"
       aGuruFocusItems(184) = "1|Total Equity|Total%2BEquity|Total Equity|1"
       aGuruFocusItems(185) = "1|Total Liabilities|Total%2BLiabilities|Total Liabilities|1"
       aGuruFocusItems(186) = "1|Treasury Stock|Treasury%2BStock|Treasury Stock|1"
       aGuruFocusItems(187) = "1|BS_UnearnedPremiums|Unearned%2BPremiums|BS_UnearnedPremiums|1"
       aGuruFocusItems(188) = "1|BS_UnpaidLossAndLossReserve|Unpaid%2BLoss%2B%2526%2BLoss%2BReserve|BS_UnpaidLossAndLossReserve|1"
       aGuruFocusItems(189) = "1|Cash Flow_CPEX|Cash%2BFlow%2Bfor%2BCapital%2BExpenditures|Cash Flow_CPEX|1"
       aGuruFocusItems(190) = "1|Dividends|Cash%2BFlow%2Bfor%2BDividends|Dividends|1"
       aGuruFocusItems(191) = "1|Cash Flow from Disc. Op.|Cash%2BFlow%2Bfrom%2BDiscontinued%2BOperations|Cash Flow from Disc. Op.|1"
       aGuruFocusItems(192) = "1|Cash from Financing|Cash%2BFlow%2Bfrom%2BFinancing|Cash from Financing|1"
       aGuruFocusItems(193) = "1|Cash Flow from Investing|Cash%2BFlow%2Bfrom%2BInvesting|Cash Flow from Investing|1"
       aGuruFocusItems(194) = "1|Cash Flow from Operations|Cash%2BFlow%2Bfrom%2BOperations|Cash Flow from Operations|1"
       aGuruFocusItems(195) = "1|Cash Flow from Others|Cash%2BFlow%2Bfrom%2BOthers|Cash Flow from Others|1"
       aGuruFocusItems(196) = "1|CashFromDiscontinuedInvestingActivities|Cash%2BFrom%2BDiscontinued%2BInvesting%2BActivities|CashFromDiscontinuedInvestingActivities|1"
       aGuruFocusItems(197) = "1|CashFromOtherInvestingActivities|Cash%2BFrom%2BOther%2BInvesting%2BActivities|CashFromOtherInvestingActivities|1"
       aGuruFocusItems(198) = "1|ChangeInInventory|Change%2BIn%2BInventory|ChangeInInventory|1"
       aGuruFocusItems(199) = "1|ChangeInReceivables|Change%2BIn%2BReceivables|ChangeInReceivables|1"
       aGuruFocusItems(200) = "1|ChangeInWorkingCapital|Change%2BIn%2BWorking%2BCapital|ChangeInWorkingCapital|1"
       aGuruFocusItems(201) = "1|CumulativeEffectOfAccountingChange|Cumulative%2BEffect%2BOf%2BAccounting%2BChange|CumulativeEffectOfAccountingChange|1"
       aGuruFocusItems(202) = "1|CF_DDA|Depreciation%252C%2BDepletion%2Band%2BAmortization|DDA|1"
       aGuruFocusItems(203) = "1|total_freecashflow|Free%2BCash%2BFlow|total_freecashflow|1"
       aGuruFocusItems(204) = "1|Net Change in Cash|Net%2BChange%2Bin%2BCash|Net Change in Cash|1"
       aGuruFocusItems(205) = "1|NetForeignCurrencyExchangeGainLoss|Net%2BForeign%2BCurrency%2BExchange%2BGain|NetForeignCurrencyExchangeGainLoss|1"
       aGuruFocusItems(206) = "1|NetIncomeFromContinuingOperations|Net%2BIncome%2BFrom%2BContinuing%2BOperations|NetIncomeFromContinuingOperations|1"
       aGuruFocusItems(207) = "1|NetIntangiblesPurchaseAndSale|Net%2BIntangibles%2BPurchase%2BAnd%2BSale|NetIntangiblesPurchaseAndSale|1"
       aGuruFocusItems(208) = "1|Net Issuance of Debt|Net%2BIssuance%2Bof%2BDebt|Net Issuance of Debt|1"
       aGuruFocusItems(209) = "1|Net Issuance of preferred|Net%2BIssuance%2Bof%2BPreferred%2BStock|Net Issuance of preferred|1"
       aGuruFocusItems(210) = "1|Net Issuance of Stock|Net%2BIssuance%2Bof%2BStock|Net Issuance of Stock|1"
       aGuruFocusItems(211) = "1|PurchaseOfPPE|Purchase%2BOf%2BProperty%252C%2BPlant%252C%2BEquipment|PurchaseOfPPE|1"
       aGuruFocusItems(212) = "1|PurchaseOfBusiness|PurchaseOfBusiness|PurchaseOfBusiness|1"
       aGuruFocusItems(213) = "1|PurchaseOfInvestment|PurchaseOfInvestment|PurchaseOfInvestment|1"
       aGuruFocusItems(214) = "1|SaleOfPPE|Sale%2BOf%2BProperty%252C%2BPlant%252C%2BEquipment|SaleOfPPE|1"
       aGuruFocusItems(215) = "1|SaleOfBusiness|SaleOfBusiness|SaleOfBusiness|1"
       aGuruFocusItems(216) = "1|SaleOfInvestment|SaleOfInvestment|SaleOfInvestment|1"
    End Sub

Attribute VB_Name = "modGetGuruFocusItem"
Option Explicit
Public aGuruFocusItems2(1 To 250) As Variant
Function smfGetGuruFocusItem(ByVal pTicker As String, _
                             ByVal pItem As Integer, _
                    Optional ByVal pPeriod As String = "TTM", _
                    Optional ByVal pOffset As Integer = 0, _
                    Optional ByVal pError As Variant = "Error", _
                    Optional ByVal pType As Integer = 0) As Variant
                        
   '-----------------------------------------------------------------------------------------------------------*
   ' Function to return a data item from GuruFocus
   '-----------------------------------------------------------------------------------------------------------*
   ' 2015.07.08 -- Created by Randy Harmelink (rharmelink@gmail.com)
   ' 2015.07.20 -- Fix "Fiscal Periods" for missing data (i.e. pItem = 0)
   ' 2015.11.19 -- Fix "EBIT per share" extraction because of web page change
   ' 2016.04.09 -- Fix iLQ for web page change (5 quarters instead of 9)
   ' 2016.04.19 -- Fix annual extraction of fiscal periods
   ' 2016.09.02 -- Change extraction due to web page change (">Per Share Data" to "id=""Rf""")
   ' 2017.02.13 -- Change extraction due to web page change ("normal" to "normal_pershare")
   ' 2017.05.03 -- Change "http://" protocol to "https://"
   ' 2017.08.13 -- Miscellaneous label changes
   ' 2017.09.17 -- Miscellaneous label changes
   '-----------------------------------------------------------------------------------------------------------*
   ' Sample of use:
   '
   '    =smfGetGuruFocusItem("MMM",1,"TTM")
   '    =smfGetGuruFocusItem("MMM",1,"A",0)
   '    =smfGetGuruFocusItem("MMM",1,"Q",0)
   '
   '-----------------------------------------------------------------------------------------------------------*
    
    On Error GoTo ErrorExit
    vError = pError
       
    '------------------> Array of potential data items
    Dim aLabel As Variant
    If aGuruFocusItems2(1) = "" Then smfLoadGuruFocusItems2
    
    '------------------> Which data period?
    Dim sURL As String, s1 As String
    Dim iFQ As Integer, iLQ As Integer
    sURL = "https://www.gurufocus.com/financials/" & UCase(pTicker)
    If pItem <> 0 Then aLabel = Split(aGuruFocusItems2(pItem), "|")
    Select Case True
       Case UCase(pPeriod) = "L"
            Select Case True
               Case pItem = 0
                    smfGetGuruFocusItem = "Fiscal Period"
               Case Else
                    smfGetGuruFocusItem = aLabel(2)
               End Select
            Exit Function
       Case UCase(pTicker) = "NONE" Or pTicker = ""
            smfGetGuruFocusItem = "--"
            Exit Function
       Case UCase(pPeriod) = "TTM"
            Select Case True
               Case pItem = 0
                    smfGetGuruFocusItem = "TTM"
               Case Else
                    smfGetGuruFocusItem = smfConvertData(smfGetTagContent(sURL, "div", -1, "id=""Rf""", aLabel(0), "yesttm"))
               End Select
            Exit Function
       Case UCase(pPeriod) = "A"
            iFQ = smfConvertData(smfStrExtr(smfGetTagContent(sURL, "td", 1, "id=""Rf""", "/term/per+share+rev/", "ttm"), "normal_pershare", "'"))
            Select Case True
               Case pOffset > (iFQ - 2) Or pOffset < 0
                    smfGetGuruFocusItem = "N/A"
               Case pItem = 0
                    'smfGetGuruFocusItem = smfStrExtr(smfGetTagContent(sURL, "td", iFQ - pOffset - 1, ">Per Share Data", ">Fiscal Period") & "<", "~", "<")
                    smfGetGuruFocusItem = smfStrExtr(smfGetTagContent(sURL, "td", iFQ - pOffset, "id=""Rf""", ">Fiscal Period") & "<", "~", "<")
               Case Else
                    s1 = smfGetTagContent(sURL, "div", -1, "id=""Rf""", aLabel(0), aLabel(1) & (iFQ - pOffset - 1))
                    If Left(s1, 1) = "<" Then
                       smfGetGuruFocusItem = "Premium"
                    Else
                       smfGetGuruFocusItem = smfConvertData(s1)
                       End If
               End Select
            Exit Function
       Case UCase(pPeriod) = "Q"
            iFQ = smfConvertData(smfStrExtr(smfGetTagContent(sURL, "td", 1, "id=""Rf""", "/term/per+share+rev/", "ttm"), "normal_pershare", "'"))
            iLQ = smfConvertData(smfStrExtr(smfGetTagContent(sURL, "td", -1, "id=""Rf""", "/term/per+share+rev/", "ttm", "<tr"), "normal_pershare", "'"))
            Select Case True
               Case pOffset > (iLQ - iFQ) Or pOffset < 0
                    smfGetGuruFocusItem = "N/A"
               Case pItem = 0
                    smfGetGuruFocusItem = smfStrExtr(smfGetTagContent(sURL, "td", iLQ - pOffset + 2, "id=""Rf""", ">Fiscal Period") & "<", "~", "<")
               Case Else
                    s1 = smfGetTagContent(sURL, "div", -1, "id=""Rf""", aLabel(0), aLabel(1) & (iLQ - pOffset))
                    If Left(s1, 1) = "<" Then
                       smfGetGuruFocusItem = "Premium"
                    Else
                       smfGetGuruFocusItem = smfConvertData(s1)
                    End If
               End Select
            Exit Function
       Case Else
            smfGetGuruFocusItem = "Error: Invalid pType parameter -- must be L, TTM, A, Q"
            Exit Function
       End Select

ErrorExit: smfGetGuruFocusItem = vError
                   
   End Function
Sub smfLoadGuruFocusItems2()
   '-----------------------------------------------------------------------------------------------------------*
   ' Array of data items to extract
   '-----------------------------------------------------------------------------------------------------------*
   ' 2017.02.15 -- Updated for GuruFocus web page changes
   ' 2017.08.13 -- Various label changes
   '-----------------------------------------------------------------------------------------------------------*
    
    aGuruFocusItems2(1) = "/term/per+share+rev/|normal_pershare|Revenue per Share"
    aGuruFocusItems2(2) = "/term/EBITDA_per_share/|normal_pershare|EBITDA per Share"
    aGuruFocusItems2(3) = "/term/EBIT_per_share/|normal_pershare|EBIT per Share"
    aGuruFocusItems2(4) = "/term/per+share+eps/|normal_pershare|Earnings per Share (diluted)"
    aGuruFocusItems2(5) = "/term/eps_nri/|normal_pershare|eps without NRI"
    aGuruFocusItems2(6) = "/term/per+share_freecashflow/|normal_pershare|Free Cashflow per Share"
    aGuruFocusItems2(7) = "/term/Dividends+Per+Share/|normal_pershare|Dividends Per Share"
    aGuruFocusItems2(8) = "/term/Book+Value+Per+Share/|normal_pershare|Book Value Per Share"
    aGuruFocusItems2(9) = "/term/Tangibles_book_per_share/|normal_pershare|Tangible Book per share"
    aGuruFocusItems2(10) = "/term/Month+End+Stock+Price/|normal_pershare|Month End Stock Price"
    aGuruFocusItems2(11) = "/term/ROE/|normal_ratio|Return on Equity %"
    aGuruFocusItems2(12) = "/term/ROA/|normal_ratio|Return on Assets %"
    aGuruFocusItems2(13) = "/term/ROIC/|normal_ratio|Return on Invested Capital %"
    aGuruFocusItems2(14) = "/term/ROC_JOEL/|normal_ratio|Return on Capital - Joel Greenblatt %"
    aGuruFocusItems2(15) = "/term/deb2equity/|normal_ratio|Debt to Equity"
    aGuruFocusItems2(16) = "/term/grossmargin/|normal_ratio|Gross Margin %"
    aGuruFocusItems2(17) = "/term/operatingmargin/|normal_ratio|Operating Margin %"
    aGuruFocusItems2(18) = "/term/netmargin/|normal_ratio|Net Margin %"
    aGuruFocusItems2(19) = "/term/equity2asset/|normal_ratio|Total Equity to Total Asset"
    aGuruFocusItems2(20) = "/term/debt2asset/|normal_ratio|LT Debt to Total Asset"
    aGuruFocusItems2(21) = "/term/turnover/|normal_ratio|Asset Turnover"
    aGuruFocusItems2(22) = "/term/payout/|normal_ratio|Dividend Payout Ratio"
    aGuruFocusItems2(23) = "/term/DaysSalesOutstanding/|normal_ratio|Days Sales Outstanding"
    aGuruFocusItems2(24) = "/term/DaysPayable/|normal_ratio|Days Accounts Payable"
    aGuruFocusItems2(25) = "/term/DaysInventory/|normal_ratio|Days Inventory"
    aGuruFocusItems2(26) = "/term/CCC/|normal_ratio|Cash Conversion Cycle"
    aGuruFocusItems2(27) = "/term/InventoryTurnover/|normal_ratio|Inventory Turnover"
    aGuruFocusItems2(28) = "/term/cogs2rev/|normal_ratio|COGS to Revenue"
    aGuruFocusItems2(29) = "/term/inventory2rev/|normal_ratio|Inventory to Revenue"
    aGuruFocusItems2(30) = "/term/Revenue/|is|Revenue"
    aGuruFocusItems2(31) = "/term/COGS/|is|Cost of Goods Sold"
    aGuruFocusItems2(32) = "/term/Gross+Profit/|is|Gross Profit"
    aGuruFocusItems2(33) = "/term/grossmargin/|normal|Gross Margin %"
    aGuruFocusItems2(34) = "/term/SGA/|is|Selling, General, & Admin. Expense"
    aGuruFocusItems2(35) = "/term/PromotionAndAdvertising/|is|Advertising"
    aGuruFocusItems2(36) = "/term/RD/|is|Research & Development"
    aGuruFocusItems2(37) = "/term/other_operating_charges/|is|Other Operating Expense"
    aGuruFocusItems2(38) = "/term/Operating+Income/|is|Operating Income"
    aGuruFocusItems2(39) = "/term/operatingmargin/|normal_ratio|Operating Margin %"
    aGuruFocusItems2(40) = "/term/InterestIncome/|is|Interest Income"
    aGuruFocusItems2(41) = "/term/InterestExpense/|is|Interest Expense"
    aGuruFocusItems2(42) = "/term/OtherIncomeExpense/|incent|Other Income (Expense)"
    aGuruFocusItems2(43) = "/term/OtherIncome_minorityinterest/|is|Other Income (Minority Interest)"
    aGuruFocusItems2(44) = "/term/Pretax+Income/|is|Pre-Tax Income"
    aGuruFocusItems2(45) = "/term/TaxProvision/|is|Tax Provision"
    aGuruFocusItems2(46) = "/term/TaxRate/|incent|Tax Rate %"
    aGuruFocusItems2(47) = "/term/Net+Income+%28Continuing+Operations%29/|is|Net Income (Continuing"
    aGuruFocusItems2(48) = "/term/Net+Income+%28Discontinued+Operations%29/|is|Net Income (Discontinued"
    aGuruFocusItems2(49) = "/term/Net+Income/|is|Net Income"
    aGuruFocusItems2(50) = "/term/netmargin/|normal_ratio|Net Margin %"
    aGuruFocusItems2(51) = "/term/IS_preferred_dividends/|is|Preferred dividends"
    aGuruFocusItems2(52) = "/term/eps_basic/|normal|EPS (Basic)"
    aGuruFocusItems2(53) = "/term/eps_diluated/|normal|EPS (Diluted)"
    aGuruFocusItems2(54) = "/term/Shares+Outstanding/|is|Shares Outstanding (Diluted)"
    aGuruFocusItems2(55) = "/term/DDA/|is|Depreciation, Depletion and Amortization"
    aGuruFocusItems2(56) = "/term/EBITDA/|is|EBITDA"
    aGuruFocusItems2(57) = "/term/CashAndCashEquivalents/|bs|Cash And Cash Equivalents"
    aGuruFocusItems2(58) = "/term/MarketableSecurities/|bs|Marketable Securities"
    aGuruFocusItems2(59) = "/term/Cash+and+Equiv/|bs|Cash, Cash Equivalents, Marketable Securities"
    aGuruFocusItems2(60) = "/term/Accts+Rec/|bs|Accounts Receivable"
    aGuruFocusItems2(61) = "/term/RawMaterials/|bs|Inventories, Raw Materials & Components"
    aGuruFocusItems2(62) = "/term/WorkInProcess/|bs|Inventories, Work In Process"
    aGuruFocusItems2(63) = "/term/InventoriesAdjustmentsAllowances/|bs|Inventories, Inventories Adj"
    aGuruFocusItems2(64) = "/term/FinishedGoods/|bs|Inventories, Finished Goods"
    aGuruFocusItems2(65) = "/term/OtherInventories/|bs|Inventories, Other"
    aGuruFocusItems2(66) = "/term/Inventory/|bs|Total Inventories"
    aGuruFocusItems2(67) = "/term/Other+Current+Assets/|bs|Other Current Assets"
    aGuruFocusItems2(68) = "/term/Total+Current+Assets/|bs|Total Current Assets"
    aGuruFocusItems2(69) = "/term/LandAndImprovements/|bs|Land And Improvements"
    aGuruFocusItems2(70) = "/term/BuildingsAndImprovements/|bs|Buildings And Improvements"
    aGuruFocusItems2(71) = "/term/MachineryFurnitureEquipment/|bs|Machinery, Furniture, Equipment"
    aGuruFocusItems2(72) = "/term/ConstructionInProgress/|bs|Construction In Progress"
    aGuruFocusItems2(73) = "/term/GrossPPE/|bs|Gross Property, Plant and Equipment"
    aGuruFocusItems2(74) = "/term/AccumulatedDepreciation/|bs|Accumulated Depreciation"
    aGuruFocusItems2(75) = "/term/Net+PPE/|bs|Property, Plant and Equipment"
    aGuruFocusItems2(76) = "/term/Intangibles/|bs|Intangible Assets"
    aGuruFocusItems2(77) = "/term/Goodwill/|bs|Goodwill"
    aGuruFocusItems2(78) = "/term/Other+Long-Term+Assets/|bs|Other Long Term Assets"
    aGuruFocusItems2(79) = "/term/Total+Assets/|bs|Total Assets"
    aGuruFocusItems2(80) = "/term/AccountsPayable/|bs|Accounts Payable"
    aGuruFocusItems2(81) = "/term/TotalTaxPayable/|bs|Total Tax Payable"
    aGuruFocusItems2(82) = "/term/OtherAccruedExpenses/|bs|Other Accrued Expense"
    aGuruFocusItems2(83) = "/term/Accts+Payable/|bs|Accounts Payable & Accrued Expense"
    aGuruFocusItems2(84) = "/term/Short-Term+Debt/|bs|Current Portion of Long-Term Debt"
    aGuruFocusItems2(85) = "/term/BS_CurrentDeferredLiabilities/|bs|DeferredTaxAndRevenue"
    aGuruFocusItems2(86) = "/term/Other+Current+Liab/|bs|Other Current Liabilities"
    aGuruFocusItems2(87) = "/term/Total+Current+Liabilities/|bs|Total Current Liabilities"
    aGuruFocusItems2(88) = "/term/LongTermDebt/|bs|Long-Term Debt"
    aGuruFocusItems2(89) = "/term/deb2equity/|normal_ratio|Debt to Equity"
    aGuruFocusItems2(90) = "/term/LongTermCapitalLeaseObligation/|bs|Capital Lease Obligation"
    aGuruFocusItems2(91) = "/term/PensionAndRetirementBenefit/|bs|PensionAndRetirementBenefit"
    aGuruFocusItems2(92) = "/term/NonCurrentDeferredLiabilities/|bs|NonCurrent Deferred Liabilities"
    aGuruFocusItems2(93) = "/term/Other+Long-Term+Liab/|bs|Other Long-Term Liabilities"
    aGuruFocusItems2(94) = "/term/Total+Liabilities/|bs|Total Liabilities"
    aGuruFocusItems2(95) = "/term/CommonStock/|bs|Common Stock"
    aGuruFocusItems2(96) = "/term/Preferred+Stock/|bs|Preferred Stock"
    aGuruFocusItems2(97) = "/term/Retained+Earnings/|bs|Retained Earnings"
    aGuruFocusItems2(98) = "/term/accumulated_other_comprehensive_income/|bs|Accumulated other comp"
    aGuruFocusItems2(99) = "/term/AdditionalPaidInCapital/|bs|Additional Paid-In Capital"
    aGuruFocusItems2(100) = "/term/Treasury+Stock/|bs|Treasury Stock"
    aGuruFocusItems2(101) = "/term/Total+Equity/|bs|Total Equity"
    aGuruFocusItems2(102) = "/term/equity2asset/|normal_ratio|Total Equity to Total Asset"
    aGuruFocusItems2(103) = "/term/CF_Net+Income/|cs|Net Income"
    aGuruFocusItems2(104) = "/term/CumulativeEffectOfAccountingChange/|cs|Cumulative Effect Of Acco"
    aGuruFocusItems2(105) = "/term/NetForeignCurrencyExchangeGainLoss/|cs|Net Foreign Currency Exch"
    aGuruFocusItems2(106) = "/term/NetIncomeFromContinuingOperations/|cs|Net Income From Continuing"
    aGuruFocusItems2(107) = "/term/CF_DDA/|cs|Depreciation, Depletion and Amortization"
    aGuruFocusItems2(108) = "/term/ChangeInReceivables/|cs|Change In Receivables"
    aGuruFocusItems2(109) = "/term/ChangeInInventory/|cs|Change In Inventory"
    aGuruFocusItems2(110) = "/term/ChangeInPrepaidAssets/|cs|Change In Prepaid Assets"
    aGuruFocusItems2(111) = "/term/ChangeInPayablesAndAccruedExpense/|cs|Change In Payables And Acc"
    aGuruFocusItems2(112) = "/term/ChangeInWorkingCapital/|cs|Change In Working Capital"
    aGuruFocusItems2(113) = "/term/CF_DeferredTax/|cs|Change In DeferredTax"
    aGuruFocusItems2(114) = "/term/StockBasedCompensation/|cs|Stock Based Compensation"
    aGuruFocusItems2(115) = "/term/Cash+Flow+from+Disc+Op/|cs|Cash Flow from Discontinued Operati"
    aGuruFocusItems2(116) = "/term/Cash+Flow+from+Others/|cs|Cash Flow from Others"
    aGuruFocusItems2(117) = "/term/Cash+Flow+from+Operations/|cs|Cash Flow from Operations"
    aGuruFocusItems2(118) = "/term/PurchaseOfPPE/|cs|Purchase Of Property, Plant, Equipment"
    aGuruFocusItems2(119) = "/term/SaleOfPPE/|cs|Sale Of Property, Plant, Equipment"
    aGuruFocusItems2(120) = "/term/PurchaseOfBusiness/|cs|Purchase Of Business"
    aGuruFocusItems2(121) = "/term/SaleOfBusiness/|cs|Sale Of Business"
    aGuruFocusItems2(122) = "/term/PurchaseOfInvestment/|cs|Purchase Of Investment"
    aGuruFocusItems2(123) = "/term/SaleOfInvestment/|cs|Sale Of Investment"
    aGuruFocusItems2(124) = "/term/NetIntangiblesPurchaseAndSale/|cs|Net Intangibles Purchase And S"
    aGuruFocusItems2(125) = "/term/CashFromDiscontinuedInvestingActivities/|cs|Cash From Discontinu"
    aGuruFocusItems2(126) = "/term/CashFromOtherInvestingActivities/|cs|Cash From Other Investing A"
    aGuruFocusItems2(127) = "/term/Cash+Flow+from+Investing/|cs|Cash Flow from Investing"
    aGuruFocusItems2(128) = "/term/Issuance_of_Stock/|cs|Issuance of Stock"
    aGuruFocusItems2(129) = "/term/Repurchase_of_Stock/|cs|Repurchase of Stock"
    aGuruFocusItems2(130) = "/term/Net+Issuance+of+preferred/|cs|Net Issuance of Preferred Stock"
    aGuruFocusItems2(131) = "/term/Net+Issuance+of+Debt/|cs|Net Issuance of Debt"
    aGuruFocusItems2(132) = "/term/Dividends/|cs|Cash Flow for Dividends"
    aGuruFocusItems2(133) = "/term/Other+Financing/|cs|Other Financing"
    aGuruFocusItems2(134) = "/term/Cash+from+Financing/|cs|Cash Flow from Financing"
    aGuruFocusItems2(135) = "/term/Net+Change+in+Cash/|cs|Net Change in Cash"
    aGuruFocusItems2(136) = "/term/Cash+Flow_CPEX/|cs|Capital Expenditure"
    aGuruFocusItems2(137) = "/term/total_freecashflow/|cs|Free Cash Flow"
    aGuruFocusItems2(138) = "/term/pettm/|normal_vratio|PE Ratio(ttm)"
    aGuruFocusItems2(139) = "/term/pb/|normal_vratio|Price to Book"
    aGuruFocusItems2(140) = "/term/p2tangible_book/|normal_vratio|Price to Tangible Book"
    aGuruFocusItems2(141) = "/term/pfcf/|normal_vratio|Price-to-Free-Cash-Flow ratio"
    aGuruFocusItems2(142) = "/term/ps/|normal_vratio|PS Ratio"
    aGuruFocusItems2(143) = "/term/peg/|normal_vratio|PEG Ratio"
    aGuruFocusItems2(144) = "/term/ev2rev/|normal_vratio|EV-to-Revenue"
    aGuruFocusItems2(145) = "/term/ev2ebitda/|normal_vratio|EV-to-EBITDA"
    aGuruFocusItems2(146) = "/term/ev2ebit/|normal_vratio|EV-to-EBIT"
    aGuruFocusItems2(147) = "/term/earning_yield_greenblatt/|normal_vratio|Earnings Yield (Joel Greenblatt"
    aGuruFocusItems2(148) = "/term/RateOfReturn/|normal_vratio|Forward Rate of Return"
    aGuruFocusItems2(149) = "/term/ShillerPE/|normal_vratio|Shiller PE Ratio"
    aGuruFocusItems2(150) = "/term/mktcap/|normal_vq|Market Cap"
    aGuruFocusItems2(151) = "/term/ev/|normal_vq|Enterprise Value"
    aGuruFocusItems2(152) = "/term/Month+End+Stock+Price/|normal_pershare|Month End Stock Price"
    aGuruFocusItems2(153) = "/term/netcash/|normal_vq|Net Cash (per share)"
    aGuruFocusItems2(154) = "/term/NCAV_real/|normal_vq|Net Current Asset Value (per share)"
    aGuruFocusItems2(155) = "/term/iv_dcf_share/|normal_vq|Projected FCF (per share)"
    aGuruFocusItems2(156) = "/term/medpsvalue/|normal_vq|Median PS (per share)"
    aGuruFocusItems2(157) = "/term/lynchvalue/|normal_vq|Peter Lynch Fair Value (per share)"
    aGuruFocusItems2(158) = "/term/grahamnumber/|normal_vq|Graham Number (per share)"
    aGuruFocusItems2(159) = "/term/EPV/|normal_vq|Earning Power Value (per share)"
    aGuruFocusItems2(160) = "/term/zscore/|normal_vq|Altman Z-Score"
    aGuruFocusItems2(161) = "/term/fscore/|normal_vq|Piotroski F-Score"
    aGuruFocusItems2(162) = "/term/mscore/|normal_vq|Beneish M-Score"
    aGuruFocusItems2(163) = "/term/sloanratio/|normal_vq|Sloan Ratio (%)"
    aGuruFocusItems2(164) = "/term/price_high/|normal_vq|Highest Stock Price"
    aGuruFocusItems2(165) = "/term/price_low/|normal_vq|Lowest Stock Price"
    aGuruFocusItems2(166) = "/term/total_buyback_3y/|normal|Shares Buyback Ratio (%)"
    aGuruFocusItems2(167) = "/term/growth_per_share_rev/|normal|YoY Rev. per Sh. Growth (%)"
    aGuruFocusItems2(168) = "/term/growth_per_share_eps/|normal|YoY EPS Growth (%)"
    aGuruFocusItems2(169) = "/term/growth_per_share_ebitda/|normal|YoY EBITDA Growth (%)"
    aGuruFocusItems2(170) = "/term/editda_5y_growth/|normal_vq|EBITDA 5-Y Growth (%)"
    aGuruFocusItems2(171) = "/term/shares_basic/|normal_vq|Shares Outstanding (Basic)"
    aGuruFocusItems2(172) = "/term/BS_share/|normal_vq|Shares Outstanding"
    aGuruFocusItems2(173) = "/term/IS_NetInterestIncome/|is|Net Interest Income"
    aGuruFocusItems2(174) = "/term/IS_NonInterestIncome/|is|Non Interest Income"
    aGuruFocusItems2(175) = "/term/IS_CreditLossesProvision/|is|Credit Losses Provision"
    aGuruFocusItems2(176) = "/term/SpecialCharges/|is|Special Charges"
    aGuruFocusItems2(177) = "/term/IS_otherExpense_bank/|is|Other Noninterest Expense"
    aGuruFocusItems2(178) = "/term/BS_CashAndCashEquivalents/|bs|Cash and cash equivalents"
    aGuruFocusItems2(179) = "/term/BS_MoneyMarket/|bs|Money Market Investments"
    aGuruFocusItems2(180) = "/term/BS_NetLoan/|bs|Net Loan"
    aGuruFocusItems2(181) = "/term/BS_SecuritiesAndInvestments/|bs|Securities & Investments"
    aGuruFocusItems2(182) = "/term/BS_DeferredPolicyAcquisitionCosts/|bs|Deferred Policy Acquisitio"
    aGuruFocusItems2(183) = "/term/BS_other_assets_Bank/|bs|Other Assets"
    aGuruFocusItems2(184) = "/term/BS_TotalDeposits/|bs|Total Deposits"
    aGuruFocusItems2(185) = "/term/BS_other_liabilities_bank/|bs|Other liabilities"

    End Sub
Attribute VB_Name = "modGetHTMLTable"
Const kDim3 = 20
Public Function RCHGetHTMLTable(ByVal pURL As String, _
                                ByVal pFind1 As String, _
                       Optional ByVal pDir1 As Integer = -1, _
                       Optional ByVal pFind2 As String = "", _
                       Optional ByVal pDir2 As Integer = 1, _
                       Optional ByVal pRowOnly As Boolean = False, _
                       Optional ByVal pDim1 As Integer = 0, _
                       Optional ByVal pDim2 As Integer = 0, _
                       Optional ByVal pType As Integer = 0, _
                       Optional ByVal pCalc As Integer = 1)
                    
    '-----------------------------------------------------------------------------------------------------------*
    ' User defined function to extract an HTML table from a web page
    '-----------------------------------------------------------------------------------------------------------*
    ' 2005.02.16 -- Fixed pDim1/pDim2 processing
    ' 2006.03.12 -- Fixed COLSPAN='n' interpretation error
    ' 2006.03.12 -- Add process to convert numeric table cells
    ' 2006.07.09 -- Add interpretation of <THEAD> and </THEAD> as if they were <TR> and </TR>
    ' 2006.07.09 -- Remove possibility of "empty" table cells (i.e. <TD></TD> or <TH></TH>)
    ' 2006.09.04 -- Add ability to just return a row of the table
    ' 2007.01.17 -- Change CCur() usage to CDec() because of precision issues
    ' 2007.09.18 -- Modify pDim1/pDim2 processing
    ' 2007.10.13 -- Add LEFT() function to table cell cannot exceed 255 bytes, which causes #VALUE in EXCEL
    ' 2008.03.16 -- Add pType parameter
    ' 2010.08.12 -- Modify pDim1/pDim2 processing so return size can be overridden from worksheet
    ' 2010.10.10 -- Added code to change HTML code &#151; to a normal hyphen
    ' 2010.10.22 -- Added code to change HTML code &mdash; to a normal hyphen
    ' 2011.02.16 -- Convert to use smfGetWebPage() function
    ' 2011.04.28 -- Change cDec() to smfConvertData()
    ' 2011.06.09 -- Added pCalc parameter
    ' 2014.03.27 -- Made pDir1, pFind2, and pDir2 parameters optional by giving them default values
    '-----------------------------------------------------------------------------------------------------------*
    ' > Sample invocation to grab "Price Target Summary" from Yahoo for ticker IBM:
    '
    '   =RCHGetHTMLTable("https://finance.yahoo.com/q/ao?s=IBM", "Mean Target", -3, "Mean Target", 1)
    '-----------------------------------------------------------------------------------------------------------*
    
    '------------------> Leave range alone?
    'If pCalc = 0 Then
    '   On Error Resume Next
    '   RCHGetHTMLTable = Range("A1").Offset(Application.Caller.Row - 1, Application.Caller.Column - 1).Resize(Application.Caller.Rows.Count, Application.Caller.Columns.Count)
    '   On Error GoTo ErrorExit
    '   Exit Function
    '   End If
    
    '------------------> Determine size of array to return
    kDim1 = pDim1  ' Rows
    kDim2 = pDim2  ' Columns
    If pDim1 = 0 Or pDim2 = 0 Then
       If pDim1 = 0 Then kDim1 = 10   ' Old default
       If pDim2 = 0 Then kDim2 = 10   ' Old default
       On Error Resume Next
       kDim1 = Application.Caller.Rows.Count
       kDim2 = Application.Caller.Columns.Count
       On Error GoTo ErrorExit
       End If
    
    '------------------> Initialize returning array
    ReDim vData(1 To kDim1, 1 To kDim2) As Variant
    Dim iTBMinRow(1 To kDim3)
    Dim iTBMaxCol(1 To kDim3)
    Dim iTRMinCol(1 To kDim3)
    Dim iTRMaxRow(1 To kDim3)
    
    For i1 = 1 To kDim1
        For i2 = 1 To kDim2
            vData(i1, i2) = ""
            Next i2
        Next i1
    For i1 = 1 To kDim3
        iTBMinRow(i1) = 0
        iTBMaxCol(i1) = 0
        iTRMinCol(i1) = 0
        iTRMaxRow(i1) = 0
        Next i1
    
    '------------------> Download web page
    sData1 = smfGetWebPage(pURL, pType, 0)
    sData2 = UCase(sData1)
    
    '------------------> Look for the start and the end of the desired data table(s) on the page
    iSel1 = InStr(sData2, UCase(pFind1))
    For i1 = 1 To Abs(pDir1)
        If pDir1 < 0 Then
           iSel1 = InStrRev(sData2, IIf(pRowOnly, "<TR", "<TABLE"), iSel1 - 1)
        Else
           iSel1 = InStr(iSel1 + 1, sData2, IIf(pRowOnly, "<TR", "<TABLE"))
           End If
        Next i1
    
    If pFind2 = "" Then pFind2 = pFind1
    iSel2 = InStr(sData2, UCase(pFind2))
    For i1 = 1 To Abs(pDir2)
        If pDir2 < 0 Then
           iSel2 = InStrRev(sData2, IIf(pRowOnly, "</TR", "</TABLE"), iSel2 - 1)
        Else
           iSel2 = InStr(iSel2 + 1, sData2, IIf(pRowOnly, "</TR", "</TABLE"))
           End If
        Next i1
    
    '------------------> Parse the table into rows and columns
   iTB = 1
   iTR = 1
   iRow = 0
   iCol = 0
   iPos1 = iSel1
   iTD = 0
   Do While True
      iPos1 = InStr(iPos1, sData2, "<")
      If iPos1 = 0 Or iPos1 > iSel2 Then Exit Do
      iPos2 = InStr(iPos1, sData2, ">")
      If iPos2 = 0 Or iPos2 < iPos1 Then Exit Do
      If Mid(sData2, iPos1, 6) = "<TABLE" Then
         iTD = 0                                ' Previous table cell start is not a data cell
         iTB = iTB + 1                          ' Start of new table
         iTBMinRow(iTB) = iRow                  ' Save row that table began at
         If iRow > 0 And iTB > 2 Then iRow = iRow - 1   ' Need next row to start on current row
      ElseIf Mid(sData2, iPos1, 7) = "</TABLE" Then
         If iTB > 0 Then
            If iTB = 2 Then
               iCol = 0
            Else
               iRow = iTBMinRow(iTB)            ' Restore row that table begain at
               iCol = iTBMaxCol(iTB)            ' Set column to max column used by table
               iTBMinRow(iTB) = 0
               iTBMaxCol(iTB) = 0
               End If
            iTB = iTB - 1                       ' End of current table
            End If
      ElseIf Mid(sData2, iPos1, 3) = "<TR" Or Mid(sData2, iPos1, 6) = "<THEAD" Then
         iTR = iTR + 1                          ' Start of new row
         iRow = iRow + 1                        ' Point to next row of array
         iTRMinCol(iTR) = iCol                  ' Save column that row began at
      ElseIf Mid(sData2, iPos1, 4) = "</TR" Or Mid(sData2, iPos1, 7) = "</THEAD" Then
         iTBMaxCol(iTB) = Application.WorksheetFunction.Max(iTBMaxCol(iTB), iCol)
         iCol = iTRMinCol(iTR)                  ' Restore column that the row started at, for next row
         iTR = iTR - 1                          ' End of current row
         If iTR = 0 Then Exit Do
         iTRMaxRow(iTR) = Application.WorksheetFunction.Max(iTRMaxRow(iTR + 1), iRow)
         iRow = iTRMaxRow(iTR)                  ' Set row to max row used during this row
      ElseIf Mid(sData2, iPos1, 3) = "<TD" Or Mid(sData2, iPos1, 3) = "<TH" Then
         iTD = iPos2 + 1                        ' Save possible start of cell data
         sTemp = Mid(sData2, iPos1, iPos2 - iPos1 + 1)
         iPos3 = InStr(sTemp, "COLSPAN=")
         If iPos3 > 0 Then
            iPos4 = InStr(iPos3, sTemp, " ")
            If iPos4 = 0 Then iPos4 = Len(sTemp)
            iColSpan = CInt(Replace(Replace(Mid(sTemp, iPos3 + 8, iPos4 - iPos3 - 8), """", ""), "'", ""))
         Else
            iColSpan = 1
            End If
      ElseIf Mid(sData2, iPos1, 4) = "</TD" Or Mid(sData2, iPos1, 4) = "</TH" Then
         If iTD > 0 Then
            iCol = iCol + 1
            sTemp = Mid(sData1, iTD, iPos1 - iTD)
            Do While True
               iPos3 = InStr(sTemp, "<")
               If iPos3 = 0 Then Exit Do
               iPos4 = InStr(sTemp, ">")
               If iPos4 = 0 Then Exit Do
               sTemp = Mid(sTemp, 1, iPos3 - 1) & Mid(sTemp, iPos4 + 1)
              Loop
            If iRow <= kDim1 And iCol <= kDim2 Then
               vData(iRow, iCol) = smfConvertData(Trim(Left(sTemp, 255)))
               End If
            iCol = iCol + iColSpan - 1
            iTD = 0
            End If
         End If
      iPos1 = iPos2 + 1
      Loop
    
ErrorExit:

    RCHGetHTMLTable = vData
    
    End Function


Attribute VB_Name = "modGetMSNHistory"
Public Function smfGetMSNHistory(pTicker As String, _
                          Optional pStartYear As Integer = 1900, _
                          Optional pStartMonth As Integer = 1, _
                          Optional pEndYear As Integer = 2100, _
                          Optional pEndMonth As Integer = 12, _
                          Optional pItems As String = "DOHLCV", _
                          Optional pNames As Integer = 1, _
                          Optional pResort As Integer = 0, _
                          Optional pDim1 As Integer = 0, _
                          Optional pDim2 As Integer = 0) ' As Variant()
                    
    '-----------------------------------------------------------------------------------------------------------*
    ' User defined function to download historical quotes from MSN
    '-----------------------------------------------------------------------------------------------------------*
    ' 2008.03.17 -- Written by Randy Harmelink (rharmelink@gmail.com)
    ' 2008.11.07 -- Adjust row processing
    ' 2009.11.07 -- Adjust row processing
    ' 2009.04.09 -- Adjust editing of ending date
    ' 2011.04.28 -- Change cDec() to smfConvertData()
    '-----------------------------------------------------------------------------------------------------------*
    ' > Example of an invocation to get daily quotes for 2004 for IBM:
    '
    '   =smfGetMSNHistory("IBM")
    '   =smfGetMSNHistory("IBM",2004,1,2008,3)
    '-----------------------------------------------------------------------------------------------------------*
    
    Dim sURL As String
    
    On Error GoTo ErrorExit
    
    '------------------> Null Return Item
    If pTicker = "None" Or pTicker = "" Then
       ReDim vData(1 To 1, 1 To 1) As Variant
       vData(1, 1) = "None"
       smfGetMSNHistory = vData
       Exit Function
       End If
    
    '------------------> Determine size of array to return
    kDim1 = pDim1  ' Rows
    kDim2 = pDim2  ' Columns
    If pDim1 = 0 Or pDim2 = 0 Then
       On Error Resume Next
       kDim1 = Application.Caller.Rows.Count
       kDim2 = Application.Caller.Columns.Count
       On Error GoTo ErrorExit
       End If
  
    '------------------> Initialize return array
    ReDim vData(1 To kDim1, 1 To kDim2) As Variant
    For i1 = 1 To kDim1
        For i2 = 1 To kDim2
            vData(i1, i2) = ""
            Next i2
        Next i1
    
    '------------------> Edit parameters
    If DateSerial(pStartYear, pStartMonth, 1) < DateSerial(Year(Date) - 9, Month(Date) + 1, 1) Then
       dBegDate = DateSerial(Year(Date) - 9, Month(Date) + 1, 1)
    Else
       dBegDate = DateSerial(pStartYear, pStartMonth, 1)
       End If
    
    If DateSerial(pEndYear, pEndMonth, 1) > DateSerial(Year(Date), Month(Date) + 1, 0) Then
       dEndDate = DateSerial(Year(Date), Month(Date), 1)
    Else
       dEndDate = DateSerial(pEndYear, pEndMonth, 1)
       End If
       
    '------------------> Create URL and download historical quotes
    
    sBase = "http://data.moneycentral.msn.com/scripts/chrtsrv.dll?C1=2&C2=&FileDownload=&C9=0"
    sURL = sBase & "&Symbol=" & pTicker & _
           "&C1=" & Month(dBegDate) & _
           "&C6=" & Year(dBegDate) & _
           "&C7=" & Month(dEndDate) & _
           "&C8=" & Year(dEndDate)

    sqData = RCHGetURLData(sURL)
    
    '------------------> Determine items needed
    pItems2 = UCase(pItems)
    iTick = InStr(pItems2, "T")
    iDate = InStr(pItems2, "D")
    iOpen = InStr(pItems2, "O")
    iHigh = InStr(pItems2, "H")
    iLow = InStr(pItems2, "L")
    iClos = InStr(pItems2, "C")
    iVol = InStr(pItems2, "V")
    If iTick > kDim2 Then iTick = 0
    If iDate > kDim2 Then iDate = 0
    If iOpen > kDim2 Then iOpen = 0
    If iHigh > kDim2 Then iHigh = 0
    If iLow > kDim2 Then iLow = 0
    If iClos > kDim2 Then iClos = 0
    If iVol > kDim2 Then iVol = 0
    
    '------------------> Parse web quotes
    vLine = Split(sqData, Chr(10))
    nLines = IIf(kDim1 - pNames < UBound(vLine) - 1, kDim1 - pNames, UBound(vLine) - 1)
    For iRow = (6 - pNames) To nLines + 5
        vItem = Split(vLine(iRow), ",")
        If iRow = 5 Then
           If iTick > 0 Then vData(iRow + pNames - 5, iTick) = "Ticker"
           If iDate > 0 Then vData(iRow + pNames - 5, iDate) = vItem(0)
           If iOpen > 0 Then vData(iRow + pNames - 5, iOpen) = vItem(1)
           If iHigh > 0 Then vData(iRow + pNames - 5, iHigh) = vItem(2)
           If iLow > 0 Then vData(iRow + pNames - 5, iLow) = vItem(3)
           If iClos > 0 Then vData(iRow + pNames - 5, iClos) = vItem(4)
           If iVol > 0 Then vData(iRow + pNames - 5, iVol) = vItem(5)
        Else
           If iTick > 0 Then vData(iRow + pNames - 5, iTick) = pTicker
           If iDate > 0 Then vData(iRow + pNames - 5, iDate) = CDate(vItem(0))
           If iOpen > 0 Then vData(iRow + pNames - 5, iOpen) = smfConvertData(vItem(1))
           If iHigh > 0 Then vData(iRow + pNames - 5, iHigh) = smfConvertData(vItem(2))
           If iLow > 0 Then vData(iRow + pNames - 5, iLow) = smfConvertData(vItem(3))
           If iClos > 0 Then vData(iRow + pNames - 5, iClos) = smfConvertData(vItem(4))
           If iVol > 0 Then vData(iRow + pNames - 5, iVol) = smfConvertData(vItem(5))
           End If
        Next iRow
    
    '------------------> Reverse the sort order of the data if requested
    If pResort = 1 Then
       Dim vTemp As Variant
       i1 = 1 + pNames
       i2 = nLines + pNames
       Do While i1 < i2
          For i3 = 1 To kDim2
              vTemp = vData(i1, i3)
              vData(i1, i3) = vData(i2, i3)
              vData(i2, i3) = vTemp
              Next i3
          i1 = i1 + 1
          i2 = i2 - 1
          Loop
       End If
    
ErrorExit:
    smfGetMSNHistory = vData
    End Function


Attribute VB_Name = "modGetOptionExpirations"
Option Explicit
Function smfGetOptionExpirations(ByVal pTicker As String, _
                        Optional ByVal pSource As String = "Yahoo", _
                        Optional ByVal pPutCall As String = "X", _
                        Optional ByVal pStrike As Double = 0, _
                        Optional ByVal pRows As Integer = 0, _
                        Optional ByVal pCols As Integer = 0, _
                        Optional ByVal pType As Integer = 0, _
                        Optional ByVal pPeriod As String = "A" _
                        )
                                                      
    '-----------------------------------------------------------------------------------------------------------*
    ' User defined function to get available option expirations from various data sources
    '-----------------------------------------------------------------------------------------------------------*
    ' 2011.04.03 -- Created function
    ' 2011.04.07 -- Added ability to create option ticker symbols for the smfGetOptionQuotes() function
    ' 2011.11.29 -- Added OptionsXpress as possible data source
    ' 2012.01.14 -- Fix overflow on array assignment
    ' 2012.02.14 -- Added 888options.com as possible data source
    ' 2012.01.06 -- Modified Yahoo processing to pick up expiration dates from Yahoo's API feed
    ' 2014.03.15 -- Sort expiration dates
    ' 2014.03.15 -- Add period selection of expiration dates for OptionsXPress
    ' 2014.10.21 -- Modified Yahoo processing for new web page structure
    ' 2015.02.21 -- Drop period selection of expiration dates for OptionsXPress
    ' 2015.02.21 -- Modified OptionsXPress processing for new web page structure
    ' 2015.02.21 -- Backed out Yahoo processing for new web page structure
    ' 2015.08.13 -- Use Yahoo as the data source if NASDAQ is requested
    ' 2016.08.07 -- Update for new Yahoo option quotes page
    ' 2017.03.09 -- Change to use Yahoo as default
    ' 2017.03.09 -- Use Yahoo if Barchart is requested
    ' 2017.03.15 -- Modified Yahoo processing for new JSON call
    ' 2017.06.10 -- Add Vartype() check when creating ticker symbols
    ' 2017.10.10 -- optionsXpress is no longer a valid data source
    ' 2017.12.19 -- Add ability to request Yahoo expirations by type of period
    ' 2017.12.25 -- Add ability to request Yahoo expirations for multiple period types
    '-----------------------------------------------------------------------------------------------------------*
    ' > Examples of invocations to get current quotes for SPY:
    '
    '   =smfGetOptionExpirations("SPY", "Google")
    '-----------------------------------------------------------------------------------------------------------*
    
    On Error GoTo ErrorExit
    
    '------------------> Determine size of array to return
    Dim kRows As Integer, kCols As Integer
    kRows = pRows
    kCols = pCols
    If pRows = 0 Or pCols = 0 Then
       If kRows = 0 Then kRows = 20
       If kCols = 0 Then kCols = 1
       On Error Resume Next
       kRows = Application.Caller.Rows.Count
       kCols = Application.Caller.Columns.Count
       On Error GoTo ErrorExit
       If kRows < 3 Then kRows = 3
       End If
  
    '------------------> Initialize return array
    Dim iRow As Integer, iCol As Integer
    ReDim vData(1 To kRows, 1 To kCols) As Variant
    For iRow = 1 To kRows: For iCol = 1 To kCols: vData(iRow, iCol) = "": Next iCol: Next iRow
    vData(1, 1) = "None"
    
    '------------------> Determine which data source to use
    Dim s1 As String, s2 As String, s3 As String, sURL As String, iPtr As Integer, d1 As Date, i1 As Integer
    Select Case UCase(pSource)
       Case "8", "888": GoTo Source_888
       Case "B", "BC", "BARCHART": GoTo Source_Yahoo
       Case "G", "GOOGLE": GoTo Source_Google
       Case "N", "NASDAQ": GoTo Source_Yahoo
       'Case "OX": GoTo Source_OptionsXpress
       Case "Y", "YAHOO": GoTo Source_Yahoo
       Case Else
            vData(1, 1) = "Invalid Data Source: " & pSource
            GoTo ErrorExit
       End Select

    '------------------> 888options.com processing
Source_888:
    sURL = "http://oic.ivolatility.com/oic_adv_options.j?exp_date=-1&ticker=" & UCase(pTicker)
    s1 = ""
    For iRow = 1 To kRows
        s2 = RCHGetTableCell(sURL, 0, s1, "Days:")
        If s2 = "Error" Then Exit For
        vData(iRow, 1) = DateValue(smfStrExtr(s2, "Expiry:", "Days:"))
        s1 = "Days:" & smfStrExtr(s2 & "|", "Days:", "|")
        Next iRow
    GoTo ExitFunction

    '------------------> Google processing
Source_Google:
    s1 = smfStrExtr(RCHGetWebData("http://www.google.com/finance/option_chain?output=json&q=" & UCase(pTicker)), "expirations:[", "]")
    For iRow = 1 To kRows
        If smfWord(s1, iRow, "}") = "" Then Exit For
        vData(iRow, 1) = DateSerial(smfStrExtr(smfWord(s1, iRow, "}"), "y:", ","), _
                                    smfStrExtr(smfWord(s1, iRow, "}"), "m:", ","), _
                                    smfStrExtr(smfWord(s1, iRow, "}") & "|", "d:", "|"))
        Next iRow
    GoTo ExitFunction


    '------------------> OptionsXpress processing
Source_OptionsXpress:
    sURL = "https://www.optionsxpress.com/OXNetTools/Chains/index.aspx?Range=All&lstMarket=0&ChainType=14&lstMonths=0&Symbol=" & UCase(pTicker)
    s1 = smfGetTagContent(sURL, "select", -1, "id=""lstMonths""")
    For iRow = 1 To kRows
        s2 = smfWord(s1, iRow + 1, "value=""")
        If s2 = "" Then Exit For
        If InStr(s2, ">All<") > 0 Then Exit For
        vData(iRow, 1) = DateValue(smfStrExtr(s2, "~", ";"))
        Next iRow
    GoTo ExitFunction

    '------------------> OptionsXpress processing prior to 2014.03.15
Source_OptionsXpress1:
    s1 = RCHGetWebData("https://www.optionsxpress.com/OXNetTools/Chains/index.aspx?Symbol=" & UCase(pTicker), ":GetOptionChain", 2000)
    d1 = smfGetOptionExpiry(, , "M")
    i1 = 0
    For iRow = 1 To kRows
        s2 = smfStrExtr(smfWord(s1, iRow, ")"), "','", ";")
        If s2 = "" Then Exit For
        i1 = i1 + 1
        If d1 < DateValue(s2) Then
           vData(i1, 1) = d1
           i1 = i1 + 1
           d1 = #12/31/2099#
           End If
        If i1 > kRows Then Exit For
        vData(i1, 1) = DateValue(s2)
        Next iRow
    GoTo ExitFunction


    '------------------> OptionsXpress processing prior to 2015-02-21
Source_OptionsXpress2:
    pPeriod = UCase(pPeriod)
    Dim iM As Integer, iKeep As Integer
    s1 = RCHGetWebData("https://www.optionsxpress.com/OXNetTools/Chains/index.aspx?Symbol=" & UCase(pTicker), ":GetOptionChain", 2000)
    If InStr("AMW", pPeriod) > 0 Then
       vData(1, 1) = smfGetOptionExpiry(, , "M")
       i1 = 1
       iM = 1
    Else
       iM = 0
       i1 = 0
       End If
    For iRow = 1 To 50
        s2 = smfWord(s1, iRow, "|")
        If s2 = "" Then Exit For
        iKeep = 1
        Select Case True
           Case InStr(s2, "strong") > 0
                iKeep = 0
           Case Left(smfStrExtr(s2, ">", "<"), 1) = "Q"
                If InStr("MW", pPeriod) > 0 Then iKeep = 0
           Case Mid(smfStrExtr(s2, ">", "<"), 4, 2) = "Wk"
                If InStr("QM", pPeriod) > 0 Then iKeep = 0
           Case Else
                iM = iM + 1
                If iM > 2 And pPeriod = "W" Then iKeep = 0
                If pPeriod = "Q" Then iKeep = 0
           End Select
        If iKeep = 1 Then
           s3 = smfStrExtr(s2, ",'", ";")
           i1 = i1 + 1
           If i1 > kRows Then Exit For
           vData(i1, 1) = DateValue(s3)
           End If
        Next iRow
    If pPeriod = "W" Then
       If vData(3, 1) = "" Then
          vData(1, 1) = ""
          vData(2, 1) = ""
          End If
       End If
    GoTo ExitFunction
    
    '------------------> Yahoo processing after 2017-03-15
Source_Yahoo:
    Dim vFirst As Variant, vNext As Variant
    sURL = "https://query1.finance.yahoo.com/v7/finance/options/" & UCase(pTicker)
    s1 = smfStrExtr(RCHGetWebData(sURL, """expirationDates"":[", 500), "[", "]")
    vFirst = Int(smfUnix2Date(smfWord(s1, 1, ",", 1)))
    iPtr = 0
    For iRow = 1 To 50
        s2 = smfWord(s1, iRow, ",")
        If s2 = "" Then Exit For
        vNext = Int(smfUnix2Date(0 + s2))
        If UCase(pPeriod) = "A" _
              Or (InStr(UCase(pPeriod), "W") > 0 And vNext <= vFirst + 43 And Weekday(vNext) = 6) _
              Or (InStr(UCase(pPeriod), "M") > 0 And Day(vNext) > 14 And Day(vNext) < 23 And Weekday(vNext) = 6) _
              Or (InStr(UCase(pPeriod), "Q") > 0 And Day(vNext) > 27 And Mid("001001001001", Month(vNext), 1) = "1") _
              Or (InStr(UCase(pPeriod), "H") > 0 And vNext <= vFirst + 43 And Weekday(vNext) = 4) _
              Or (InStr(UCase(pPeriod), "V") > 0 And Day(vNext) > 14 And Day(vNext) < 23 And Weekday(vNext) = 4) _
              Then
           iPtr = iPtr + 1
           vData(iPtr, 1) = vNext
           End If
        Next iRow
    
    GoTo ExitFunction

    '------------------> Yahoo processing prior to 2012.01.06 and after 2015-02-21
Source_Yahoo0:
    sURL = "http://finance.yahoo.com/q/op?s=" & UCase(pTicker)
    s1 = smfGetTagContent(sURL, "td", -1, "Expiration:")
    iPtr = 0
    
    For iRow = 1 To 7
        s2 = smfGetOptionExpiry(, , "W" & iRow)
        If RCHGetWebData(sURL & "&m=" & Format(s2, "yyyy-mm"), pTicker & Format(s2, "yymmdd"), 5) <> "Error" Then
           iPtr = iPtr + 1
           vData(iPtr, 1) = DateValue(s2)
           End If
        Next iRow
    
    For iRow = 2 To kRows
        s2 = smfWord(s1, iRow, "&m=")
        If s2 = "" Then Exit For
        d1 = smfGetOptionExpiry(Left(s2, 4), Mid(s2, 6, 2), "M")
        If d1 > vData(iPtr, 1) Then
           iPtr = iPtr + 1
           If iPtr > kRows Then Exit For
           vData(iPtr, 1) = d1
           Select Case Mid(s2, 6, 2)
              Case "03", "06", "09", "12"
                   s3 = RCHGetWebData(sURL & "&m=" & Left(s2, 7), pTicker & Mid(s2, 3, 2) & Mid(s2, 6, 2) & "3", 12)
                   If s3 <> "Error" Then
                      s3 = "20" & Mid(s3, Len(pTicker) + 1, 6)
                      iPtr = iPtr + 1
                      If iPtr > kRows Then Exit For
                      vData(iPtr, 1) = DateSerial(Mid(s3, 1, 4), Mid(s3, 5, 2), Mid(s3, 7, 2))
                      End If
              End Select
           End If
        Next iRow
    
    GoTo ExitFunction
    
    '------------------> Yahoo processing for new format page that was backed out
Source_Yahoo1:
    sURL = "http://finance.yahoo.com/q/op?s=" & UCase(pTicker)
    iRow = 0
    On Error GoTo ExitFunction
    For i1 = 1 To 1500 ' Arbitrary value to cover 4 years?
        s1 = smfGetTagContent(sURL, "option", i1, "class=""SelectBox-Pick""")
        If s1 <> "Error" Then
           d1 = DateValue(s1)
           d1 = DateSerial(Year(d1), Month(d1), Day(d1))
           iRow = iRow + 1
           vData(iRow, 1) = d1
           End If
        Next i1
    GoTo ExitFunction

ExitFunction:
   
    '------------------> Sort expiration dates
    Dim iRow2 As Integer
    Dim vTemp As Variant
    For iRow = 1 To kRows - 1
        If vData(iRow, 1) = "None" Then Exit For
        For iRow2 = iRow + 1 To kRows
            If vData(iRow, 1) > vData(iRow2, 1) Then
               vTemp = vData(iRow, 1)
               vData(iRow, 1) = vData(iRow2, 1)
               vData(iRow2, 1) = vTemp
               End If
            Next iRow2
        Next iRow

    '------------------> Convert expiration dates into option ticker symbols
    If Left(UCase(pPutCall), 1) = "P" Or Left(UCase(pPutCall), 1) = "C" Then
       For iRow = 1 To kRows
           If IsDate(vData(iRow, 1)) Or VarType(vData(iRow, 1)) = vbDouble Then
              vData(iRow, 1) = UCase(pTicker) & _
                               Format(vData(iRow, 1), " m/d yyyy ") & _
                               Format(pStrike, "$0.00 ") & _
                               IIf(Left(UCase(pPutCall), 1) = "P", "Put", "Call")
              End If
           Next iRow
       End If

ErrorExit:

    smfGetOptionExpirations = vData
                        
    End Function

Attribute VB_Name = "modGetOptionExpiry"
Option Explicit
Public Function smfGetOptionExpiry(Optional ByVal pYear As Integer = 0, _
                                   Optional ByVal pMonth As Integer = 0, _
                                   Optional ByVal pType As String = "M")
                  
    '-----------------------------------------------------------------------------------------------------------*
    ' User defined function to get option expiration date for a given month from Yahoo
    '-----------------------------------------------------------------------------------------------------------*
    ' 2010.04.08 -- Created function
    ' 2011.03.30 -- Fixed usage of iIncr so it is only used for default date values of year and month
    ' 2011.11.23 -- Fixed calculation of quarter end expiration dates that fall on Saturday and Sunday
    ' 2014.08.18 -- Added W3/W4/W5 values for pType
    ' 2014.08.18 -- Changed monthly expiration dates for 2016 and forward, due to alignment to weeklies
    ' 2014.09.15 -- Changed monthly expiration dates for 2015-02-01 and forward, due to alignment to weeklies
    ' 2015.02.21 -- Added W6/W7 values for pType
    '-----------------------------------------------------------------------------------------------------------*
    ' > Examples of invocations to get current quotes for IBM and MMM:
    '
    '   =smfGetOptionExpiry(2012,12)
    '   =smfGetOptionExpiry(2012,12,"M")
    '   =smfGetOptionExpiry(2012,12,"Q")
    '-----------------------------------------------------------------------------------------------------------*
    
    Dim dTemp As Date, iIncr As Integer, iYear As Integer, iMonth As Integer
    pType = UCase(pType)
    If pYear = 0 Or Left(pType, 1) = "W" Then iYear = Year(Date) Else iYear = pYear
    If pMonth = 0 Or Left(pType, 1) = "W" Then iMonth = Month(Date) Else iMonth = pMonth
    dTemp = DateSerial(iYear, iMonth, 21) - Weekday(DateSerial(iYear, iMonth, 16), 1) + 2
    If pMonth = 0 Or pYear = 0 Or Left(pType, 1) = "M" Then iIncr = -(dTemp < Date) Else iIncr = 0
    
    Select Case True
       Case pType = "W" Or pType = "W1" Or pType = "WEEK" Or pType = "WEEKLY"
            smfGetOptionExpiry = Date - Weekday(Date) + 6
       Case pType = "W2"
            smfGetOptionExpiry = Date - Weekday(Date) + 13
       Case pType = "W3"
            smfGetOptionExpiry = Date - Weekday(Date) + 20
       Case pType = "W4"
            smfGetOptionExpiry = Date - Weekday(Date) + 27
       Case pType = "W5"
            smfGetOptionExpiry = Date - Weekday(Date) + 34
       Case pType = "W6"
            smfGetOptionExpiry = Date - Weekday(Date) + 41
       Case pType = "W7"
            smfGetOptionExpiry = Date - Weekday(Date) + 48
       Case pType = "M" Or pType = "M1" Or pType = "MONTH" Or pType = "MONTHLY"
            smfGetOptionExpiry = DateSerial(iYear, iMonth + iIncr, 21) - Weekday(DateSerial(iYear, iMonth + iIncr, 16), 1) + 2
            If smfGetOptionExpiry > DateSerial(2015, 2, 1) Then smfGetOptionExpiry = smfGetOptionExpiry - 1
       Case pType = "M2"
            smfGetOptionExpiry = DateSerial(iYear, iMonth + iIncr + 1, 21) - Weekday(DateSerial(iYear, iMonth + iIncr + 1, 16), 1) + 2
            If smfGetOptionExpiry > DateSerial(2015, 2, 1) Then smfGetOptionExpiry = smfGetOptionExpiry - 1
       Case pType = "M3"
            smfGetOptionExpiry = DateSerial(iYear, iMonth + iIncr + 2, 21) - Weekday(DateSerial(iYear, iMonth + iIncr + 2, 16), 1) + 2
            If smfGetOptionExpiry > DateSerial(2015, 2, 1) Then smfGetOptionExpiry = smfGetOptionExpiry - 1
       Case pType = "M4"
            smfGetOptionExpiry = DateSerial(iYear, iMonth + iIncr + 3, 21) - Weekday(DateSerial(iYear, iMonth + iIncr + 3, 16), 1) + 2
            If smfGetOptionExpiry > DateSerial(2015, 2, 1) Then smfGetOptionExpiry = smfGetOptionExpiry - 1
       Case pType = "M5"
            smfGetOptionExpiry = DateSerial(iYear, iMonth + iIncr + 4, 21) - Weekday(DateSerial(iYear, iMonth + iIncr + 4, 16), 1) + 2
            If smfGetOptionExpiry > DateSerial(2015, 2, 1) Then smfGetOptionExpiry = smfGetOptionExpiry - 1
       Case (pType = "Q" Or pType = "QTR" Or pType = "QUARTER" Or pType = "QUARTERLY") And (iMonth = 3 Or iMonth = 12)
            smfGetOptionExpiry = DateSerial(iYear, iMonth, 31)
            If Weekday(smfGetOptionExpiry) = vbSaturday Then smfGetOptionExpiry = smfGetOptionExpiry - 1
            If Weekday(smfGetOptionExpiry) = vbSunday Then smfGetOptionExpiry = smfGetOptionExpiry - 2
       Case (pType = "Q" Or pType = "QTR" Or pType = "QUARTER" Or pType = "QUARTERLY") And (iMonth = 6 Or iMonth = 9)
            smfGetOptionExpiry = DateSerial(iYear, iMonth, 30)
            If Weekday(smfGetOptionExpiry) = vbSaturday Then smfGetOptionExpiry = smfGetOptionExpiry - 1
            If Weekday(smfGetOptionExpiry) = vbSunday Then smfGetOptionExpiry = smfGetOptionExpiry - 2
       Case (pType = "Q" Or pType = "QTR" Or pType = "QUARTER" Or pType = "QUARTERLY")
            smfGetOptionExpiry = "Invalid month for quarterly option (3, 6, 9, or 12): " & iMonth
       Case Else
            smfGetOptionExpiry = "Invalid period type (W/W1-W7/M/M1-M5/Q): " & pType
       End Select
       
       '------------* Can be removed in 2016, when monthlies and weeklies align on Fridays
       If Left(pType, 1) = "W" Then
          dTemp = smfGetOptionExpiry(Year(smfGetOptionExpiry), Month(smfGetOptionExpiry), "M")
          If dTemp - 1 = smfGetOptionExpiry Then smfGetOptionExpiry = dTemp
          End If

    End Function


Attribute VB_Name = "modGetOptionQuote"
Option Explicit
Public Function smfGetOptionQuote(ByVal pTicker As Variant, _
                                        ByVal pPutCall As Variant, _
                                        ByVal pExpiry As Variant, _
                                        ByVal pStrike As Variant, _
                                        ByVal pItem As Variant, _
                               Optional ByVal pSource As String = "Z")
                  
    '-----------------------------------------------------------------------------------------------------------*
    ' User defined function to get a single option quote item from a specified data source
    '-----------------------------------------------------------------------------------------------------------*
    ' 2011.04.08 -- Created function, meant to replace all the individual data source functions
    '-----------------------------------------------------------------------------------------------------------*
    ' > Examples of invocations to get option bid price for MMM 4/16/2011 $90 call:
    '
    '   =smfGetOptionQuote("MMM","C","4/16/2011",90,"b","Z")
    '-----------------------------------------------------------------------------------------------------------*
    
    On Error GoTo ErrorExit
    Dim s1 As String
    Dim sURL As String, sTicker As String
    Dim sItem As String, iCells As Integer
        
    '------------------> Verify the pPutCall parameter
    Dim sPutCall As String
    sPutCall = Left(Trim(UCase(pPutCall)), 1)
    Select Case sPutCall
       Case "P"
       Case "C"
       Case Else
            smfGetOptionQuote = "Invalid Put/Call indicator (must be a P or C): " & pPutCall
            Exit Function
       End Select
    
    '------------------> Verify pExpiry and pStrike
    pStrike = Trim(UCase(pStrike))
    pTicker = Trim(UCase(pTicker))
    Select Case True
       Case Not (VarType(pExpiry) = vbDouble Or IsDate(pExpiry))
            smfGetOptionQuote = "Bad expiration date: " & pExpiry
            Exit Function
       Case IsNumeric(pStrike)
       Case Else
            smfGetOptionQuote = "Bad strike price: " & pStrike
            Exit Function
       End Select
    
    '------------------> Verify pSource
    Select Case UCase(pSource)
       Case "Z", "ZACKS": GoTo Source_Zacks
       Case Else
            smfGetOptionQuote = "Invalid data source: " & pSource
            Exit Function
       End Select

Source_Zacks:

    sURL = "http://www.zacks.com/research/report.php?type=grk&t=" & pTicker
    sTicker = UCase(pTicker) & Format(pExpiry, " mmmyy ") & Format(pStrike, "0.00 ") & sPutCall
       
    '------------------> Verify the pItem parameter and set the # of cells to skip
    sItem = Trim(UCase(pItem))
    Select Case sItem
       Case "U": iCells = 0     ' Last price of underlying equity
       Case "X": iCells = 0     ' Expiration date
       Case "S": iCells = -17   ' Strike price
       Case "Z": iCells = 0     ' Zacks ticker symbol
       Case "B": iCells = 1     ' Bid price
       Case "A": iCells = 2     ' Ask price
       Case "L": iCells = 3     ' Last price
       Case "C": iCells = 4     ' $ Change
       Case "H": iCells = 5     ' Daily high
       Case "G": iCells = 6     ' Daily low
       Case "V": iCells = 7     ' Volume
       Case "I": iCells = 8     ' Open Interest
       Case "6": iCells = 9     ' Implied Volatility
       Case "Y": iCells = 10    ' Theoretical Value
       Case "5": iCells = 11    ' Delta
       Case "4": iCells = 12    ' Gamma
       Case "2": iCells = 13    ' Theta
       Case "1": iCells = 14    ' Vega
       Case "3": iCells = 15    ' Rho
       Case Else
            smfGetOptionQuote = "Unrecognized item ID: " & pItem
            Exit Function
       End Select
    
    '------------------> Retrieve data item
    Select Case sItem
       Case "U": smfGetOptionQuote = RCHGetTableCell(sURL, 1, ">Last")
       Case "X": smfGetOptionQuote = pExpiry
       Case Else
            smfGetOptionQuote = RCHGetTableCell(sURL, iCells, sTicker)
       End Select
    Exit Function

ErrorExit:
    smfGetOptionQuote = "Error"

    End Function


Attribute VB_Name = "modGetOptionQuotes"
Option Explicit
Public Function smfGetOptionQuotes(ByVal pTickers As Variant, _
                                   ByVal pItems As Variant, _
                          Optional ByVal pHeader As Integer = 0, _
                          Optional ByVal pSource As String = "Y", _
                          Optional ByVal pDim1 As Integer = 0, _
                          Optional ByVal pDim2 As Integer = 0)
                  
    '-----------------------------------------------------------------------------------------------------------*
    ' User defined function to get multiple data items for multiple options from Yahoo or MSN
    '-----------------------------------------------------------------------------------------------------------*
    ' 2010.06.02 -- Created function
    ' 2010.07.16 -- Added ability to send "m/d" as the period designation for the ticker symbol
    ' 2010.07.19 -- Added ability to use 2-digit item codes and retrieve data from multiple sources
    ' 2010.09.10 -- Add "u" data item for last traded price of the underlying equity
    ' 2011.04.01 -- Add Google as a data source
    ' 2011.04.07 -- Change to allow a blank option ticker symbol so output is synchronized with input
    ' 2011.04.07 -- Allow an array to be sent for pTickers (e.g. from another function)
    ' 2011.04.28 -- Change cDec() to smfConvertData()
    ' 2011.11.30 -- Allow cells of input ticker range to contain multiple ticker symbols
    ' 2011.11.30 -- Add OX3 data source
    ' 2012.01.29 -- Return null value for a null pItem and pTicker parameters
    ' 2012.02.14 -- Add "7" data item for alpha
    ' 2015.02.21 -- Add "W2" to "W7" and "M2" to "M5" date choices
    ' 2015.08.13 -- Add NASDAQ as a data source
    ' 2016.08.05 -- Obsolete MSN and MW as data sources
    ' 2016.12.03 -- Add BarChart as a data source
    ' 2017.08.06 -- Restore MW as a data source
    '-----------------------------------------------------------------------------------------------------------*
    ' > Examples of invocations to get current quotes for IBM and MMM:
    '
    '   =smfGetOptionQuotes("SPY Jun 2010 $110 Call+SPY Jun 2010 $120 Call","ba")
    '   =smfGetOptionQuotes("SPY Jun 2010 $110 Call+SPY Jun 2010 $120 Call","ba",1,"MSN")
    '   =smfGetOptionQuotes("SPY Jun 2010 $110 Call+SPY Jun 2010 $120 Call","1b1a32",1,2)
    '-----------------------------------------------------------------------------------------------------------*
    
    Dim iRow As Integer, iCol As Integer
    On Error GoTo ErrorExit
    
    '------------------> Process possible list of option ticker symbols
    Dim sTickers As String, aTickers() As String
    Dim oCell As Object
    Select Case TypeName(pTickers)
        Case "String"
             If pTickers = "None" Then
                smfGetOptionQuotes = ""
                Exit Function
                End If
             sTickers = Replace(pTickers, ",", "+")
        Case "Variant()"
             sTickers = ""
             For iRow = 1 To UBound(pTickers)
                 sTickers = sTickers & pTickers(iRow, 1) & "+"
                 Next iRow
             sTickers = Left(sTickers, Len(sTickers) - 1)
        Case "Range"
             sTickers = ""
             For Each oCell In pTickers
                 sTickers = sTickers & Replace(oCell.Value, ",", "+") & "+"
                 Next oCell
             sTickers = Left(sTickers, Len(sTickers) - 1)
        Case Else
            smfGetOptionQuotes = ""
            Exit Function
        End Select
    aTickers = Split(sTickers, "+")
    
    '------------------> Process possible list of option item codes
    Dim sItems As String, iStep As Integer
    pSource = UCase(pSource)
    If pSource = "2" Then iStep = 2 Else iStep = 1
    Select Case VarType(pItems)
        Case vbString
             sItems = Replace(pItems, " ", "")
        Case Is >= 8192
             sItems = ""
             For Each oCell In pItems
                 sItems = sItems & oCell.Value
                 Next oCell
        Case Else
            smfGetOptionQuotes = ""
            Exit Function
        End Select
    sItems = UCase(sItems)
    
    '------------------> Determine size of array to return
    Dim kDim1 As Integer, kDim2 As Integer
    kDim1 = pDim1  ' Rows
    kDim2 = pDim2  ' Columns
    If kDim1 = 0 Or kDim2 = 0 Then
       If kDim1 = 0 Then kDim1 = 1
       If kDim2 = 0 Then kDim2 = Len(sItems) / iStep
       On Error Resume Next
       kDim1 = Application.Caller.Rows.Count
       kDim2 = Application.Caller.Columns.Count
       On Error GoTo ErrorExit
       End If
  
    '------------------> Initialize return array
    ReDim vData(1 To kDim1, 1 To kDim2) As Variant
    For iRow = 1 To kDim1
        For iCol = 1 To kDim2
            vData(iRow, iCol) = ""
            Next iCol
        Next iRow
    
    '------------------> Create headings if requested
    Dim iPtr As Integer
    If pHeader <> 1 Then
       pHeader = 0
    Else
       iCol = 0
       For iPtr = iStep To Len(sItems) Step iStep
           iCol = iCol + 1
           If iCol > kDim2 Then Exit For
           Select Case Mid(sItems, iPtr, 1)
              Case "%": vData(1, iCol) = "% Change"
              Case "A": vData(1, iCol) = "Ask Price"
              Case "B": vData(1, iCol) = "Bid Price"
              Case "C": vData(1, iCol) = "$ Change"
              Case "E": vData(1, iCol) = "Bid Size"
              Case "F": vData(1, iCol) = "Ask Size"
              Case "G": vData(1, iCol) = "Daily Low"
              Case "H": vData(1, iCol) = "Daily High"
              Case "I": vData(1, iCol) = "Open Interest"
              Case "J": vData(1, iCol) = "Contract Low"
              Case "K": vData(1, iCol) = "Contract High"
              Case "L": vData(1, iCol) = "Last Price"
              Case "O": vData(1, iCol) = "Open"
              Case "P": vData(1, iCol) = "Previous Close"
              Case "S": vData(1, iCol) = "Strike Price"
              Case "T": vData(1, iCol) = "Last Trade Time"
              Case "U": vData(1, iCol) = "Underlying Price"
              Case "V": vData(1, iCol) = "Volume"
              Case "X": vData(1, iCol) = "Expiry"
              Case "Y": vData(1, iCol) = "Time/Theo Value"
              Case "Z": vData(1, iCol) = "Ticker Symbol"
              Case "1": vData(1, iCol) = "Vega"
              Case "2": vData(1, iCol) = "Theta"
              Case "3": vData(1, iCol) = "Rho"
              Case "4": vData(1, iCol) = "Gamma"
              Case "5": vData(1, iCol) = "Delta"
              Case "6": vData(1, iCol) = "Implied Volatility"
              Case "7": vData(1, iCol) = "Alpha"
              Case "8": vData(1, iCol) = "Net"
              Case "9": vData(1, iCol) = "Tick"
              End Select
           Next iPtr
       End If
    
    
    '------------------> Get each individual quote item
    Dim aParts() As String
    Dim vStrike As Variant, vExpiry As Variant
    Dim sType As String, iMonth As Integer, iYear As Integer, sItem As String, sChoice As String
    For iRow = 0 To UBound(aTickers)
        If iRow > kDim1 - 1 Then Exit For
        If aTickers(iRow) = "" Then GoTo NextTicker
        aParts = Split(aTickers(iRow), " ")
        If InStr(aParts(1), "/") > 0 Then
           vExpiry = DateValue(aParts(1) & "/" & aParts(2))
        Else
           Select Case UCase(aParts(1))
              Case "Q1", "Q2", "Q3", "Q4": sType = "Q"
              Case "W", "W1", "WEEK": sType = "W"
              Case "W2" To "W7": sType = UCase(aParts(1))
              Case "M1" To "M5": sType = UCase(aParts(1))
              Case Else: sType = "M"
              End Select
           Select Case UCase(aParts(1))
              Case "JAN": iMonth = 1
              Case "FEB": iMonth = 2
              Case "MAR", "Q1": iMonth = 3
              Case "APR": iMonth = 4
              Case "MAY": iMonth = 5
              Case "JUN", "Q2": iMonth = 6
              Case "JUL": iMonth = 7
              Case "AUG": iMonth = 8
              Case "SEP", "Q3": iMonth = 9
              Case "OCT": iMonth = 10
              Case "NOV": iMonth = 11
              Case "DEC", "Q4": iMonth = 12
              Case 1 To 12: iMonth = aParts(1)
              Case Else: iMonth = Month(Date)
              End Select
           iYear = smfConvertData(aParts(2))
           vExpiry = smfGetOptionExpiry(iYear, iMonth, sType)
           End If
        Select Case True
           Case Left(aParts(3), 3) = "OTM": vStrike = aParts(3)
           Case Left(aParts(3), 3) = "ITM": vStrike = aParts(3)
           Case Else: vStrike = smfConvertData(aParts(3))
           End Select
        iCol = 0
        For iPtr = 1 To Len(sItems) Step iStep
            iCol = iCol + 1
            If iCol > kDim2 Then Exit For
            If pSource = "2" Then
               sChoice = Mid(sItems, iPtr, 1)
               Select Case sChoice
                  Case 1: sChoice = "Y"
                  Case 2: sChoice = "MSN"
                  Case 3: sChoice = "OX"
                  Case 4: sChoice = "MW"
                  Case 5: sChoice = "OX2"
                  Case 6: sChoice = "G"
                  Case 7: sChoice = "OX3"
                  Case 8: sChoice = "8"
                  Case 9: sChoice = "N"
                  End Select
               sItem = Mid(sItems, iPtr + 1, 1)
            Else
               sChoice = pSource
               sItem = Mid(sItems, iPtr, 1)
               End If
            Select Case sChoice
               Case "8"
                    vData(iRow + 1 + pHeader, iCol) = smfGet888OptionQuote(aParts(0), Left(aParts(4), 1), vExpiry, vStrike, sItem)
               Case "Y"
                    vData(iRow + 1 + pHeader, iCol) = smfGetYahooOptionQuote(aParts(0), Left(aParts(4), 1), vExpiry, vStrike, sItem)
               Case "B"
                    vData(iRow + 1 + pHeader, iCol) = smfGetBarChartOptionQuote(aParts(0), Left(aParts(4), 1), vExpiry, vStrike, sItem)
               Case "G"
                    vData(iRow + 1 + pHeader, iCol) = smfGetGoogleOptionQuote(aParts(0), Left(aParts(4), 1), vExpiry, vStrike, sItem)
               Case "MSN"
                    'vData(iRow + 1 + pHeader, iCol) = smfGetMSNOptionQuote(aParts(0), Left(aParts(4), 1), vExpiry, vStrike, sItem)
                    vData(iRow + 1 + pHeader, iCol) = "MSN obsolete"
               Case "MW"
                    vData(iRow + 1 + pHeader, iCol) = smfGetMWOptionQuote(aParts(0), Left(aParts(4), 1), vExpiry, vStrike, sItem)
               Case "N"
                    vData(iRow + 1 + pHeader, iCol) = smfGetNASDAQOptionQuote(aParts(0), Left(aParts(4), 1), vExpiry, vStrike, sItem)
               Case "OX"
                    vData(iRow + 1 + pHeader, iCol) = smfGetOXOptionQuote(aParts(0), Left(aParts(4), 1), vExpiry, vStrike, sItem)
               Case "OX2"
                    vData(iRow + 1 + pHeader, iCol) = smfGetOX2OptionQuote(aParts(0), Left(aParts(4), 1), vExpiry, vStrike, sItem)
               Case "OX3"
                    vData(iRow + 1 + pHeader, iCol) = smfGetOX3OptionQuote(aParts(0), Left(aParts(4), 1), vExpiry, vStrike, sItem)
               Case Else
                    vData(iRow + 1 + pHeader, iCol) = "Bad Source Code: " & pSource
               End Select
            Next iPtr
NextTicker:
        Next iRow
   
ErrorExit:
    smfGetOptionQuotes = vData
    End Function

Public Function smfGet888OptionQuote(ByVal pTicker As Variant, _
                                     ByVal pPutCall As Variant, _
                                     ByVal pExpiry As Variant, _
                                     ByVal pStrike As Variant, _
                                     ByVal pItem As Variant)
                  
    '-----------------------------------------------------------------------------------------------------------*
    ' User defined function to get option quotes and related data from 888options.com
    '-----------------------------------------------------------------------------------------------------------*
    ' 2012.02.14 -- Created function
    ' 2014.06.12 -- Added ticker symbol to search string because of new "7" options
    '-----------------------------------------------------------------------------------------------------------*
    
    On Error GoTo ErrorExit
        
    '------------------> Get the special historical volatility data?
    Dim sItem As String, sURL As String
    sURL = "http://oic.ivolatility.com/oic_adv_options.j?exp_date=-1&ticker=" & UCase(pTicker)
    sItem = Trim(UCase(pItem))
    Select Case sItem
       Case "HV10C": smfGet888OptionQuote = RCHGetTableCell(sURL, 1, "1 Wk Ago", "10 days")
       Case "HV10W": smfGet888OptionQuote = RCHGetTableCell(sURL, 2, "1 Wk Ago", "10 days")
       Case "HV10M": smfGet888OptionQuote = RCHGetTableCell(sURL, 3, "1 Wk Ago", "10 days")
       Case "HV10H": smfGet888OptionQuote = smfConvertData(smfStrExtr("|" & RCHGetTableCell(sURL, 4, "1 Wk Ago", "10 days"), "|", " "))
       Case "HV10HD": smfGet888OptionQuote = smfStrExtr(RCHGetTableCell(sURL, 4, "1 Wk Ago", "10 days") & "|", " - ", "|")
       Case "HV10L": smfGet888OptionQuote = smfConvertData(smfStrExtr("|" & RCHGetTableCell(sURL, 5, "1 Wk Ago", "10 days"), "|", " "))
       Case "HV10LD": smfGet888OptionQuote = smfStrExtr(RCHGetTableCell(sURL, 5, "1 Wk Ago", "10 days") & "|", " - ", "|")
       Case "HV20C": smfGet888OptionQuote = RCHGetTableCell(sURL, 1, "1 Wk Ago", "20 days")
       Case "HV20W": smfGet888OptionQuote = RCHGetTableCell(sURL, 2, "1 Wk Ago", "20 days")
       Case "HV20M": smfGet888OptionQuote = RCHGetTableCell(sURL, 3, "1 Wk Ago", "20 days")
       Case "HV20H": smfGet888OptionQuote = smfConvertData(smfStrExtr("|" & RCHGetTableCell(sURL, 4, "1 Wk Ago", "20 days"), "|", " "))
       Case "HV20HD": smfGet888OptionQuote = smfStrExtr(RCHGetTableCell(sURL, 4, "1 Wk Ago", "20 days") & "|", " - ", "|")
       Case "HV20L": smfGet888OptionQuote = smfConvertData(smfStrExtr("|" & RCHGetTableCell(sURL, 5, "1 Wk Ago", "20 days"), "|", " "))
       Case "HV20LD": smfGet888OptionQuote = smfStrExtr(RCHGetTableCell(sURL, 5, "1 Wk Ago", "20 days") & "|", " - ", "|")
       Case "HV30C": smfGet888OptionQuote = RCHGetTableCell(sURL, 1, "1 Wk Ago", "30 days")
       Case "HV30W": smfGet888OptionQuote = RCHGetTableCell(sURL, 2, "1 Wk Ago", "30 days")
       Case "HV30M": smfGet888OptionQuote = RCHGetTableCell(sURL, 3, "1 Wk Ago", "30 days")
       Case "HV30H": smfGet888OptionQuote = smfConvertData(smfStrExtr("|" & RCHGetTableCell(sURL, 4, "1 Wk Ago", "30 days"), "|", " "))
       Case "HV30HD": smfGet888OptionQuote = smfStrExtr(RCHGetTableCell(sURL, 4, "1 Wk Ago", "30 days") & "|", " - ", "|")
       Case "HV30L": smfGet888OptionQuote = smfConvertData(smfStrExtr("|" & RCHGetTableCell(sURL, 5, "1 Wk Ago", "30 days"), "|", " "))
       Case "HV30LD": smfGet888OptionQuote = smfStrExtr(RCHGetTableCell(sURL, 5, "1 Wk Ago", "30 days") & "|", " - ", "|")
       Case "IVICC": smfGet888OptionQuote = RCHGetTableCell(sURL, 1, "1 Wk Ago", "IV Index Call")
       Case "IVICW": smfGet888OptionQuote = RCHGetTableCell(sURL, 2, "1 Wk Ago", "IV Index Call")
       Case "IVICM": smfGet888OptionQuote = RCHGetTableCell(sURL, 3, "1 Wk Ago", "IV Index Call")
       Case "IVICH": smfGet888OptionQuote = smfConvertData(smfStrExtr("|" & RCHGetTableCell(sURL, 4, "1 Wk Ago", "IV Index Call"), "|", " "))
       Case "IVICHD": smfGet888OptionQuote = smfStrExtr(RCHGetTableCell(sURL, 4, "1 Wk Ago", "IV Index Call") & "|", " - ", "|")
       Case "IVICL": smfGet888OptionQuote = smfConvertData(smfStrExtr("|" & RCHGetTableCell(sURL, 5, "1 Wk Ago", "IV Index Call"), "|", " "))
       Case "IVICLD": smfGet888OptionQuote = smfStrExtr(RCHGetTableCell(sURL, 5, "1 Wk Ago", "IV Index Call") & "|", " - ", "|")
       Case "IVIPC": smfGet888OptionQuote = RCHGetTableCell(sURL, 1, "1 Wk Ago", "IV Index Put")
       Case "IVIPW": smfGet888OptionQuote = RCHGetTableCell(sURL, 2, "1 Wk Ago", "IV Index Put")
       Case "IVIPM": smfGet888OptionQuote = RCHGetTableCell(sURL, 3, "1 Wk Ago", "IV Index Put")
       Case "IVIPH": smfGet888OptionQuote = smfConvertData(smfStrExtr("|" & RCHGetTableCell(sURL, 4, "1 Wk Ago", "IV Index Put"), "|", " "))
       Case "IVIPHD": smfGet888OptionQuote = smfStrExtr(RCHGetTableCell(sURL, 4, "1 Wk Ago", "IV Index Put") & "|", " - ", "|")
       Case "IVIPL": smfGet888OptionQuote = smfConvertData(smfStrExtr("|" & RCHGetTableCell(sURL, 5, "1 Wk Ago", "IV Index Put"), "|", " "))
       Case "IVIPLD": smfGet888OptionQuote = smfStrExtr(RCHGetTableCell(sURL, 5, "1 Wk Ago", "IV Index Put") & "|", " - ", "|")
       Case "IVIMC": smfGet888OptionQuote = RCHGetTableCell(sURL, 1, "1 Wk Ago", "IV Index Mean")
       Case "IVIMW": smfGet888OptionQuote = RCHGetTableCell(sURL, 2, "1 Wk Ago", "IV Index Mean")
       Case "IVIMM": smfGet888OptionQuote = RCHGetTableCell(sURL, 3, "1 Wk Ago", "IV Index Mean")
       Case "IVIMH": smfGet888OptionQuote = smfConvertData(smfStrExtr("|" & RCHGetTableCell(sURL, 4, "1 Wk Ago", "IV Index Mean"), "|", " "))
       Case "IVIMHD": smfGet888OptionQuote = smfStrExtr(RCHGetTableCell(sURL, 4, "1 Wk Ago", "IV Index Mean") & "|", " - ", "|")
       Case "IVIML": smfGet888OptionQuote = smfConvertData(smfStrExtr("|" & RCHGetTableCell(sURL, 5, "1 Wk Ago", "IV Index Mean"), "|", " "))
       Case "IVIMLD": smfGet888OptionQuote = smfStrExtr(RCHGetTableCell(sURL, 5, "1 Wk Ago", "IV Index Mean") & "|", " - ", "|")
       Case "HC30C": smfGet888OptionQuote = RCHGetTableCell(sURL, 1, "1 Wk Ago", "30 days", "30 days")
       Case "HC30W": smfGet888OptionQuote = RCHGetTableCell(sURL, 2, "1 Wk Ago", "30 days", "30 days")
       Case "HC30M": smfGet888OptionQuote = RCHGetTableCell(sURL, 3, "1 Wk Ago", "30 days", "30 days")
       Case "HC30H": smfGet888OptionQuote = smfConvertData(smfStrExtr("|" & RCHGetTableCell(sURL, 4, "1 Wk Ago", "30 days", "30 days"), "|", " "))
       Case "HC30HD": smfGet888OptionQuote = smfStrExtr(RCHGetTableCell(sURL, 4, "1 Wk Ago", "30 days", "30 days") & "|", " - ", "|")
       Case "HC30L": smfGet888OptionQuote = smfConvertData(smfStrExtr("|" & RCHGetTableCell(sURL, 5, "1 Wk Ago", "30 days", "30 days"), "|", " "))
       Case "HC30LD": smfGet888OptionQuote = smfStrExtr(RCHGetTableCell(sURL, 5, "1 Wk Ago", "30 days", "30 days") & "|", " - ", "|")
       Case Else: smfGet888OptionQuote = ""
       End Select
    If smfGet888OptionQuote <> "" Then Exit Function
        
    '------------------> Verify the pPutCall parameter
    Dim sPutCall As String
    sPutCall = Left(Trim(UCase(pPutCall)), 1)
    Select Case sPutCall
       Case "P"
       Case "C"
       Case Else
            smfGet888OptionQuote = "Invalid Put/Call indicator (must be a P or C): " & pPutCall
            Exit Function
       End Select
    
    '------------------> Verify pExpiry and pStrike
    Dim sFind1 As String
    pStrike = Trim(UCase(pStrike))
    pTicker = Trim(UCase(pTicker))
    Select Case True
       Case Not (VarType(pExpiry) = vbDouble Or IsDate(pExpiry))
            smfGet888OptionQuote = "Bad expiration date: " & pExpiry
            Exit Function
       Case IsNumeric(pStrike)
            sFind1 = Left(pTicker & "      ", 6) & Format(pExpiry, "yymmdd") & sPutCall & Format(1000 * pStrike, "00000000")
       Case Else
            smfGet888OptionQuote = "Bad strike price: " & pStrike
            Exit Function
       End Select
       
    '------------------> Verify the pItem parameter and set the # of cells to skip
    Dim iCells As Integer
    Select Case sItem
       Case "A": iCells = 3       ' Ask price
       Case "B": iCells = 2       ' Bid price
       Case "C": iCells = 4       ' $ Change
       Case "I": iCells = 6       ' Open Interest
       Case "L": iCells = 1       ' Bid/Ask Mean
       Case "V": iCells = 5       ' Volume
       Case "6": iCells = 7       ' Implied Volatility
       Case "%": iCells = 4       ' % Change
       Case "7": iCells = 11      ' Alpha
       Case "5": iCells = 8       ' Delta
       Case "4": iCells = 9       ' Gamma
       Case "3": iCells = 13      ' Rho
       Case "2": iCells = 10      ' Theta
       Case "1": iCells = 12      ' Vega
       Case "Z": iCells = 0       ' 888 ticker symbol
       Case "X": iCells = 0       ' Expiration date
       Case "S": iCells = 0       ' Strike price
       Case "U": iCells = 0       ' Last price of underlying equity
       Case Else
            smfGet888OptionQuote = "Unrecognized item ID: " & pItem
            Exit Function
       End Select
    
    '------------------> Find data item
    Dim s1 As String
    Select Case sItem
       Case "C"
            s1 = RCHGetTableCell(sURL, iCells, sFind1)
            smfGet888OptionQuote = 0 + smfStrExtr("|" & s1, "|", "(")
       Case "%"
            s1 = RCHGetTableCell(sURL, iCells, sFind1)
            smfGet888OptionQuote = smfStrExtr(s1, "(", ")") / 100
       Case "S": smfGet888OptionQuote = 0 + pStrike
       Case "U": smfGet888OptionQuote = RCHGetTableCell(sURL, 1, ">Price", "<tr")
       Case "X": smfGet888OptionQuote = pExpiry
       Case "Z": smfGet888OptionQuote = UCase(Trim(pTicker)) & " " & sFind1
       Case Else: smfGet888OptionQuote = RCHGetTableCell(sURL, iCells, sFind1)
       End Select
    Exit Function

ErrorExit:
    smfGet888OptionQuote = "Error"
    
    End Function
Public Function smfGetBarChartOptionQuote(ByVal pTicker As Variant, _
                                          ByVal pPutCall As Variant, _
                                          ByVal pExpiry As Variant, _
                                          ByVal pStrike As Variant, _
                                          ByVal pItem As Variant)
                  
    '-----------------------------------------------------------------------------------------------------------*
    ' User defined function to get option quotes from BarChart
    '-----------------------------------------------------------------------------------------------------------*
    ' 2016.12.03 -- Created function
    ' 2017.08.21 -- Change to allow strike prices of $1000 or more
    '-----------------------------------------------------------------------------------------------------------*
    ' > Examples of invocations to get current quotes for SPY:
    '
    '   =smfGetBarChartOptionQuote("SPY","C",DATE(2012,6,1),110,"b")
    '-----------------------------------------------------------------------------------------------------------*
    
    On Error GoTo ErrorExit
        
    '------------------> Verify the pPutCall parameter
    Dim sPutCall As String
    sPutCall = Left(Trim(UCase(pPutCall)), 1)
    Select Case sPutCall
       Case "P": sPutCall = "Put"
       Case "C": sPutCall = "Call"
       Case Else
            smfGetBarChartOptionQuote = "Invalid Put/Call indicator (must be a P or C): " & pPutCall
            Exit Function
       End Select
    
    '------------------> Verify pExpiry and pStrike
    Dim sFind1 As String, s1 As String
    pStrike = Trim(UCase(pStrike))
    pTicker = Trim(UCase(pTicker))
    Select Case True
       Case Not (VarType(pExpiry) = vbDouble Or IsDate(pExpiry))
            smfGetBarChartOptionQuote = "Bad expiration date: " & pExpiry
            Exit Function
       Case IsNumeric(pStrike)
            sFind1 = """optionType"":""" & sPutCall & """,""strikePrice"":""" & Format(pStrike, "#,##0.00") & """"
       Case Else
            smfGetBarChartOptionQuote = "Bad strike price: " & pStrike
            Exit Function
       End Select
    
    '------------------> Verify the pItem parameter
    Dim sFind2 As String
    pItem = Trim(UCase(pItem))
    Select Case pItem
       Case "%": sFind2 = "percentChange"
       Case "A": sFind2 = "askPrice"
       Case "B": sFind2 = "bidPrice"
       Case "C": sFind2 = "priceChange"
       Case "I": sFind2 = "openInterest"
       Case "L": sFind2 = "lastPrice"
       Case "S": sFind2 = "strikePrice"
       Case "U": sFind2 = ""       ' Last price of underlying equity
       Case "V": sFind2 = "volume"
       Case "X": sFind2 = "expirationDate"
       Case "Y": sFind2 = "theoretical"
       Case "1": sFind2 = "vega"
       Case "2": sFind2 = "theta"
       Case "3": sFind2 = "rho"
       Case "4": sFind2 = "gamma"
       Case "5": sFind2 = "delta"
       Case "6": sFind2 = "volatility"
       Case Else
            smfGetBarChartOptionQuote = "Unrecognized item ID: " & pItem
            Exit Function
       End Select
    
    '------------------> Find data item
    Dim sURL As String
    sURL = "https://core-api.barchart.com/v1/options/chain?fields=" & _
           "optionType,strikePrice,lastPrice,percentFromLast,priceChange,percentChange,bidPrice,midpoint,askPrice,theoretical,volatility,delta,gamma,rho,theta,vega,volume,openInterest,daysToExpiration,expirationDate" & _
           "&groupBy=optionType&raw=0&symbol=" & pTicker & "&expirationDate=" & Format(pExpiry, "yyyy-mm-dd")
    Select Case pItem
       Case "U": smfGetBarChartOptionQuote = RCHGetYahooQuotes(pTicker, "l1")(1, 1)
       Case Else
            s1 = smfStrExtr(RCHGetWebData(sURL, sFind1), "~", "}")
            smfGetBarChartOptionQuote = smfConvertData(Replace(smfStrExtr(s1, """" & sFind2 & """:""", """"), "\", ""))
       End Select
    Exit Function

ErrorExit:
    smfGetBarChartOptionQuote = "Error"

    End Function
Public Function smfGetBigChartsOptionQuote(ByVal pTicker As Variant, _
                                           ByVal pPutCall As Variant, _
                                           ByVal pExpiry As Variant, _
                                           ByVal pStrike As Variant, _
                                           ByVal pItem As Variant, _
                                  Optional ByVal pHistory As Variant = "")
                  
    '-----------------------------------------------------------------------------------------------------------*
    ' User defined function to get option quotes from BigCharts
    '-----------------------------------------------------------------------------------------------------------*
    ' 2012.03.02 -- Created function
    '-----------------------------------------------------------------------------------------------------------*
    ' > Examples of invocations to get current quotes for SPY:
    '
    '   =smfGetBigChartsOptionQuote("SPY","C",DATE(2012,6,1),110,"b")
    '-----------------------------------------------------------------------------------------------------------*
    
    On Error GoTo ErrorExit
        
    '------------------> Verify the pPutCall parameter
    Dim sPutCall As String, iOffset As Integer
    sPutCall = Left(Trim(UCase(pPutCall)), 1)
    Select Case sPutCall
       Case "P": iOffset = 12
       Case "C": iOffset = 0
       Case Else
            smfGetBigChartsOptionQuote = "Invalid Put/Call indicator (must be a P or C): " & pPutCall
            Exit Function
       End Select
    
    '------------------> Verify pExpiry and pStrike
    Dim sTicker As String, s1 As String, s2 As String
    pStrike = Trim(UCase(pStrike))
    pTicker = Trim(UCase(pTicker))
    Select Case True
       Case Not (VarType(pExpiry) = vbDouble Or IsDate(pExpiry))
            smfGetBigChartsOptionQuote = "Bad expiration date: " & pExpiry
            Exit Function
       Case IsNumeric(pStrike)
            'If InStr(pTicker, ":") > 0 Then s1 = smfStrExtr(pTicker & "|", ":", "|") Else s1 = pTicker
            sTicker = pTicker & Chr(64 + Month(pExpiry) + iOffset) & Format(pExpiry, "ddyy")
            If pStrike < 100 Then
               sTicker = sTicker & Format(10000 * pStrike, "4000000")
            Else
               sTicker = sTicker & Format(1000 * pStrike, "3000000")
               End If
       Case Else
            smfGetBigChartsOptionQuote = "Bad strike price: " & pStrike
            Exit Function
       End Select
    
    '------------------> Historical quote request?
    If pHistory <> "" Then GoTo BC_History
    
    '------------------> Verify the pItem parameter
    Dim iCells As Integer
    pItem = Trim(UCase(pItem))
    Select Case pItem
       Case "A": iCells = 5      ' Ask price
       Case "B": iCells = 4      ' Bid price
       Case "C": iCells = 2      ' $ Change
       Case "I": iCells = 6      ' Open Interest
       Case "L": iCells = 1      ' Last price
       Case "S": iCells = 0      ' Strike price
       Case "U": iCells = 0      ' Last price of underlying equity
       Case "V": iCells = 3      ' Volume
       Case "X": iCells = 0      ' Option expiration date
       Case "Z": iCells = 0      ' Option ticker symbol
       Case Else
            smfGetBigChartsOptionQuote = "Unrecognized item ID: " & pItem
            Exit Function
       End Select
    
    '------------------> Find data item
    Dim sURL As String
    sURL = "http://bigcharts.marketwatch.com/quickchart/options.asp?showAll=True&symb=" & pTicker
    Select Case pItem
       Case "S": smfGetBigChartsOptionQuote = pStrike
       Case "U": smfGetBigChartsOptionQuote = RCHGetYahooQuotes(pTicker, "l1")(1, 1)
       Case "X": smfGetBigChartsOptionQuote = pExpiry
       Case "Z": smfGetBigChartsOptionQuote = sTicker
       Case Else
            smfGetBigChartsOptionQuote = RCHGetTableCell(sURL, iCells, sTicker)
       End Select
    Exit Function

BC_History:
    
    '------------------> Create URL
    sURL = "http://bigcharts.marketwatch.com/historical/default.asp?symb=" & sTicker & _
           "&closeDate=" & Format(pHistory, "mm/dd/yy")
    
    '------------------> Verify the pItem parameter
    Dim sFindIt As String
    pItem = Trim(UCase(pItem))
    Select Case pItem
       Case "D": smfGetBigChartsOptionQuote = smfGetTagContent(sURL, "div", 2, "enddate=", "<tr")
       Case "G": smfGetBigChartsOptionQuote = RCHGetTableCell(sURL, 1, "Low:")
       Case "H": smfGetBigChartsOptionQuote = RCHGetTableCell(sURL, 1, "High:")
       Case "L": smfGetBigChartsOptionQuote = RCHGetTableCell(sURL, 1, "Closing Price:")
       Case "O": smfGetBigChartsOptionQuote = RCHGetTableCell(sURL, 1, "Open:")
       Case "V": smfGetBigChartsOptionQuote = RCHGetTableCell(sURL, 1, "Volume:")
       Case "Z": smfGetBigChartsOptionQuote = smfGetTagContent(sURL, "div", 1, "enddate=", "<tr")
       Case Else
            smfGetBigChartsOptionQuote = "Unrecognized item ID: " & pItem
       End Select
    Exit Function

ErrorExit:
    smfGetBigChartsOptionQuote = "Error"

    End Function
Public Function smfGetGoogleOptionQuote(ByVal pTicker As Variant, _
                                        ByVal pPutCall As Variant, _
                                        ByVal pExpiry As Variant, _
                                        ByVal pStrike As Variant, _
                                        ByVal pItem As Variant)
                  
    '-----------------------------------------------------------------------------------------------------------*
    ' User defined function to get option quotes from Google
    '-----------------------------------------------------------------------------------------------------------*
    ' 2011.04.01 -- Created function
    ' 2011.04.02 -- Added code to strip exchange from ticker symbol
    ' 2014.08.17 -- Allow "Put" or "Call" for pPutCall parameter
    '-----------------------------------------------------------------------------------------------------------*
    ' > Examples of invocations to get current quotes for SPY:
    '
    '   =smfGetGoogleOptionQuote("SPY","C",DATE(2012,6,1),110,"b")
    '-----------------------------------------------------------------------------------------------------------*
    
    On Error GoTo ErrorExit
        
    '------------------> Verify the pPutCall parameter
    Dim sPutCall As String
    sPutCall = Left(Trim(UCase(pPutCall)), 1)
    Select Case sPutCall
       Case "P"
       Case "C"
       Case Else
            smfGetGoogleOptionQuote = "Invalid Put/Call indicator (must be a P or C): " & pPutCall
            Exit Function
       End Select
    
    '------------------> Verify pExpiry and pStrike
    Dim sTicker As String, s1 As String
    pStrike = Trim(UCase(pStrike))
    pTicker = Trim(UCase(pTicker))
    Select Case True
       Case Not (VarType(pExpiry) = vbDouble Or IsDate(pExpiry))
            smfGetGoogleOptionQuote = "Bad expiration date: " & pExpiry
            Exit Function
       Case IsNumeric(pStrike)
            If InStr(pTicker, ":") > 0 Then s1 = smfStrExtr(pTicker & "|", ":", "|") Else s1 = pTicker
            sTicker = s1 & Format(pExpiry, "yymmdd") & sPutCall & Format(1000 * pStrike, "00000000")
       Case Else
            smfGetGoogleOptionQuote = "Bad strike price: " & pStrike
            Exit Function
       End Select
    
    '------------------> Verify the pItem parameter
    Dim sFindIt As String
    pItem = Trim(UCase(pItem))
    Select Case pItem
       Case "%": sFindIt = "cp"     ' % change
       Case "A": sFindIt = "a"      ' Ask price
       Case "B": sFindIt = "b"      ' Bid price
       Case "C": sFindIt = "c"      ' $ Change
       Case "I": sFindIt = "oi"     ' Open Interest
       Case "L": sFindIt = "p"      ' Last price
       Case "S": sFindIt = "strike" ' Strike price
       Case "U": sFindIt = ""       ' Last price of underlying equity
       Case "V": sFindIt = "vol"    ' Volume
       Case "X": sFindIt = "expiry" ' Option expiration date
       Case "Z": sFindIt = ""       ' Option ticker symbol
       Case Else
            smfGetGoogleOptionQuote = "Unrecognized item ID: " & pItem
            Exit Function
       End Select
    
    '------------------> Find data item
    Dim sURL As String
    sURL = "http://www.google.com/finance/option_chain?output=json&q=" & pTicker & _
           "&expd=" & Day(pExpiry) & _
           "&expm=" & Month(pExpiry) & _
           "&expy=" & Year(pExpiry)
    Select Case pItem
       Case "U": smfGetGoogleOptionQuote = RCHGetYahooQuotes(pTicker, "l1")(1, 1)
       Case "Z": smfGetGoogleOptionQuote = sTicker
       Case Else
            s1 = smfStrExtr(RCHGetWebData(sURL, sTicker, 200), "," & sFindIt & ":""", """")
            smfGetGoogleOptionQuote = smfConvertData(s1)
       End Select
    Exit Function

ErrorExit:
    smfGetGoogleOptionQuote = "Error"

    End Function

Public Function smfGetMSNOptionQuote(ByVal pTicker As Variant, _
                                     ByVal pPutCall As Variant, _
                                     ByVal pExpiry As Variant, _
                                     ByVal pStrike As Variant, _
                                     ByVal pItem As Variant)
                  
    '-----------------------------------------------------------------------------------------------------------*
    ' User defined function to get option quote from Yahoo
    '-----------------------------------------------------------------------------------------------------------*
    ' 2010.04.07 -- Created function
    ' 2010.09.10 -- Add "u" data item for last traded price of the underlying equity
    ' 2011.11.30 -- Change "u" data item to be able to pick up after hours price
    ' 2012.02.17 -- Change URL for option quotes
    ' 2013.01.04 -- Remove day 1, 30, and 31 assumptions for option expiration date
    ' 2013.12.21 -- Fix sPutCall processing to only use 1st byte of parameter
    ' 2014.08.15 -- Attempted to update to their new option ticker symbol structure
    ' 2014.12.23 -- Obsoleted function
    '-----------------------------------------------------------------------------------------------------------*
    ' > Examples of invocations to get current quotes for IBM and MMM:
    '
    '   =smfGetMSNQuotes("SPY","C",DATE(2012,12,22),65,"b")
    '-----------------------------------------------------------------------------------------------------------*
        
    smfGetMSNOptionQuote = "Obsolete"
    Exit Function
    
    On Error GoTo ErrorExit
    Dim sPutCall As String, sStrike As String, sItem As String
    Dim sURL As String, sFind1 As String, sFind2 As String, sYr As String, sMon As String, sDay As String
    Dim sLabel As String, iCells As Integer, iRows As Integer
    Dim iYear As Integer, iMonth As Integer, iExpiry As Date, iOffset As Integer
    
    '------------------> Verify the pPutCall parameter
    sPutCall = Left(Trim(UCase(pPutCall)), 1)
    Select Case sPutCall
       Case "P"
            iOffset = Asc("M") - 1
       Case "C"
            iOffset = Asc("A") - 1
       Case Else
            smfGetMSNOptionQuote = "Invalid Put/Call indicator (must be a P or C): " & pPutCall
            Exit Function
       End Select
       
    '------------------> Verify the pItem parameter and set the # of cells to skip
    sItem = Trim(UCase(pItem))
    Select Case sItem
       Case "X"                                          ' Expiration date
       Case "S": iCells = -10: sLabel = ""               ' Strike price
       Case "Z": iCells = 0: sLabel = ""                 ' MSN ticker symbol
       Case "L": iCells = 1: sLabel = ""                 ' Last price
       Case "C": iCells = 2: sLabel = ""                 ' $ Change
       Case "%": iCells = 3: sLabel = ""                 ' % Change
       Case "Y": iCells = 4: sLabel = ""                 ' Time Value
       Case "B": iCells = 5: sLabel = ""                 ' Bid price
       Case "A": iCells = 6: sLabel = ""                 ' Ask price
       Case "U": iCells = 0: sLabel = ""                 ' Last price of underlying equity
       Case "V": iCells = 7: sLabel = ""                 ' Volume
       Case "I": iCells = 8: sLabel = ""                 ' Open Interest
       Case "G": iCells = 0: sLabel = ">Day's Low"       ' Daily low
       Case "H": iCells = 0: sLabel = ">Day's High"      ' Daily high
       Case "E": iCells = 0: sLabel = ">Bid Size"        ' Bid size
       Case "F": iCells = 0: sLabel = ">Ask Size"        ' Ask size
       Case "O": iCells = 0: sLabel = ">Open"            ' Open
       Case "P": iCells = 0: sLabel = ">Previous Close"  ' Previous close
       Case "T": iCells = 0: sLabel = ">Last Trade"      ' Last trade time
       Case Else
            smfGetMSNOptionQuote = "Unrecognized item ID: " & pItem
            Exit Function
       End Select
       
    '------------------> Handle special strike price strings
    sStrike = Trim(UCase(pStrike))
    Select Case True
       Case sPutCall & Left(sStrike, 3) = "CITM"
            smfGetMSNOptionQuote = "CITM"
            Exit Function
       Case sPutCall & Left(sStrike, 3) = "COTM"
            smfGetMSNOptionQuote = "COTM"
            Exit Function
       Case sPutCall & Left(sStrike, 3) = "POTM"
            smfGetMSNOptionQuote = "POTM"
            Exit Function
       Case sPutCall & Left(sStrike, 3) = "PITM"
            smfGetMSNOptionQuote = "PITM"
            Exit Function
       Case VarType(pExpiry) = vbDouble Or IsDate(pExpiry)
            iRows = 0
            iExpiry = pExpiry
            sYr = Right(Format(pExpiry, "yyyy"), 1)
            If sPutCall = "C" Then
               sMon = Mid("ABCDEFGHIJKL", Month(pExpiry), 1)
            Else
               sMon = Mid("MNOPQRSTUVWX", Month(pExpiry), 1)
               End If
            sDay = Mid("123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ", Day(pExpiry), 1)
            sFind1 = "." & Trim(UCase(pTicker)) & sYr & sMon & sDay & "C" & Format(1000 * pStrike, "000000")
            sFind2 = ""
       Case Else
            smfGetMSNOptionQuote = "Bad expiration date: " & pExpiry
            Exit Function
       End Select
    
    '------------------> Do primary search
    Select Case sItem
       Case "X": smfGetMSNOptionQuote = iExpiry: Exit Function
       End Select
    sURL = "http://investing.money.msn.com/investments/equity-options/?symbol=" & Trim(UCase(pTicker)) & _
           "&optionsdate=" & Format(pExpiry, "mm/dd/yyyy")
    If sItem = "U" Then
       smfGetMSNOptionQuote = "Error"
       On Error Resume Next
       smfGetMSNOptionQuote = 0 + smfGetTagContent(sURL, "span", -2, "/images/trend")
       On Error GoTo ErrorExit
    Else
       smfGetMSNOptionQuote = RCHGetTableCell(sURL, iCells, sFind1, sFind2, , , iRows, "</table")
       End If
    
    If sLabel = "" Then Exit Function  ' Primary search item already retrieved
    
    '------------------> Do extended search
    sURL = "http://moneycentral.msn.com/detail/market_quote?symbol=" & smfGetMSNOptionQuote
    Select Case sItem
        Case "T"
             smfGetMSNOptionQuote = Mid(smfGetTagContent(sURL, "p", -1, ">Last Trade"), 12, 99)
             smfGetMSNOptionQuote = Trim(Left(smfGetMSNOptionQuote, InStr(smfGetMSNOptionQuote, "<") - 1))
        Case Else
             smfGetMSNOptionQuote = RCHGetTableCell(sURL, 1, sLabel)
        End Select
    
    Exit Function

ErrorExit:
    smfGetMSNOptionQuote = "Error"

    End Function
Public Function smfGetNASDAQOptionQuote(ByVal pTicker As Variant, _
                                        ByVal pPutCall As Variant, _
                                        ByVal pExpiry As Variant, _
                                        ByVal pStrike As Variant, _
                                        ByVal pItem As Variant, _
                               Optional ByVal pHistory As Variant = "")
                  
    '-----------------------------------------------------------------------------------------------------------*
    ' User defined function to get option quotes from NASDAQ
    '-----------------------------------------------------------------------------------------------------------*
    ' 2015.08.13 -- Created function
    '-----------------------------------------------------------------------------------------------------------*
    ' > Examples of invocations to get current quotes for SPY:
    '
    '   =smfGetNASDAQOptionQuote("SPY","C",DATE(2012,6,1),110,"b")
    '-----------------------------------------------------------------------------------------------------------*
    
    On Error GoTo ErrorExit
    
    '------------------> Handle special ticker symbol
    Dim sTicker As String, sMini As String
    sTicker = Trim(LCase(pTicker))
    Select Case Right(sTicker, 1)
       Case "0" To "9"
            sMini = Right(sTicker, 1)
            sTicker = Left(sTicker, Len(sTicker) - 1)
       Case Else
            sMini = ""
       End Select
    
    '------------------> Verify the pPutCall parameter
    Dim sPutCall As String
    sPutCall = Left(Trim(LCase(pPutCall)), 1)
    Select Case sPutCall
       Case "p": sPutCall = "Put"
       Case "c": sPutCall = "Call"
       Case Else
            smfGetNASDAQOptionQuote = "Invalid Put/Call indicator (must start with p or c): " & pPutCall
            Exit Function
       End Select
    
    '------------------> Verify pExpiry and pStrike
    Dim sStrike As String, sURL As String
    sStrike = Trim(UCase(pStrike))
    Select Case True
       Case Not (VarType(pExpiry) = vbDouble Or IsDate(pExpiry))
            smfGetNASDAQOptionQuote = "Bad expiration date: " & pExpiry
            Exit Function
       Case IsNumeric(sStrike)
            sURL = "http://www.nasdaq.com/symbol/" & sTicker & "/option-chain/" & _
            Format(pExpiry, "yymmdd") & Left(sPutCall, 1) & Format(1000 * sStrike, "00000000") & _
            "-" & sTicker & sMini & "-" & sPutCall
       Case Else
            smfGetNASDAQOptionQuote = "Bad strike price: " & pStrike
            Exit Function
       End Select
    
    '------------------> Verify the pItem parameter
    Dim sSearch As String, sTag As String
    pItem = Trim(UCase(pItem))
    Select Case pItem
       Case "A": sTag = "b": sSearch = ">Ask"
       Case "B": sTag = "b": sSearch = ">Bid"
       Case "C"  ' Change in $
       Case "%"  ' Change in %
       Case "E": sTag = "b": sSearch = ">Bid Size"
       Case "F": sTag = "b": sSearch = ">Ask Size"
       Case "G": sTag = "b": sSearch = ">Day Low"
       Case "H": sTag = "b": sSearch = ">Day High"
       Case "I": sTag = "b": sSearch = ">Open Interest"
       Case "J": sTag = "b": sSearch = ">Contract Low"
       Case "K": sTag = "b": sSearch = ">Contract High"
       Case "L": sTag = "b": sSearch = ">Last Sale"
       Case "O": sTag = "b": sSearch = ">Open"
       Case "P": sTag = "b": sSearch = ">Prev Close"
       Case "S"  ' Strike price
       Case "T"  ' Time of last trade
       Case "U"  ' Underlying price
       Case "V": sTag = "b": sSearch = ">Volume"
       Case "X"  ' Expiration date
       Case "Z"  ' Ticker symbol
       Case "1": sTag = "span": sSearch = ">Vega"
       Case "2": sTag = "span": sSearch = ">Theta"
       Case "3": sTag = "span": sSearch = ">Rho"
       Case "4": sTag = "span": sSearch = ">Gamma"
       Case "5": sTag = "span": sSearch = ">Delta"
       Case "6": sTag = "span": sSearch = ">ImpVol"
       Case "7": sTag = "b": sSearch = ">Net"
       Case "8": sTag = "b": sSearch = ">Tick"
       Case Else
            smfGetNASDAQOptionQuote = "Unrecognized item ID: " & pItem
            Exit Function
       End Select
    
    '------------------> Find data item
    Select Case pItem
       Case "C": smfGetNASDAQOptionQuote = smfConvertData(smfGetTagContent(sURL, "b", 1, ">Prev Close")) - smfConvertData(smfGetTagContent(sURL, "b", 1, ">Last Sale"))
       Case "%": smfGetNASDAQOptionQuote = smfConvertData(smfGetTagContent(sURL, "b", 1, ">Prev Close")) / smfConvertData(smfGetTagContent(sURL, "b", 1, ">Last Sale")) - 1
       Case "S": smfGetNASDAQOptionQuote = pStrike
       Case "T": smfGetNASDAQOptionQuote = smfGetTagContent(sURL, "span", -1, "markettime""")
       Case "U": smfGetNASDAQOptionQuote = RCHGetYahooQuotes(sTicker, "l1")(1, 1)
       Case "X": smfGetNASDAQOptionQuote = pExpiry
       Case "Z": smfGetNASDAQOptionQuote = smfStrExtr(sURL, "option-chain/", "~")
       Case "1" To "6"
            If sPutCall = "Call" Then
               smfGetNASDAQOptionQuote = smfConvertData(smfGetTagContent(sURL, sTag, 1, sSearch))
            Else
               smfGetNASDAQOptionQuote = smfConvertData(smfGetTagContent(sURL, sTag, 1, sSearch, sSearch))
               End If
       Case Else
            smfGetNASDAQOptionQuote = smfConvertData(smfGetTagContent(sURL, sTag, 1, sSearch))
       End Select
    Exit Function

ErrorExit:
    smfGetNASDAQOptionQuote = "Error"

    End Function
Public Function smfGetMWOptionQuote(ByVal pTicker As Variant, _
                                    ByVal pPutCall As Variant, _
                                    ByVal pExpiry As Variant, _
                                    ByVal pStrike As Variant, _
                                    ByVal pItem As Variant)
                  
    '-----------------------------------------------------------------------------------------------------------*
    ' User defined function to get option quotes from MarketWatch
    '-----------------------------------------------------------------------------------------------------------*
    ' 2010.07.16 -- Created function
    ' 2010.08.20 -- Added ability to get index options
    ' 2010.09.10 -- Add "u" data item for last traded price of the underlying equity
    ' 2014.08.17 -- Allow "Put" or "Call" for pPutCall parameter
    ' 2017.08.06 -- Update for new web page format
    '-----------------------------------------------------------------------------------------------------------*
    ' > Examples of invocations to get current quotes for IBM and MMM:
    '
    '   =smfGetMWOptionQuote("SPY","C",DATE(2012,6,1),110,"b")
    '-----------------------------------------------------------------------------------------------------------*
    
    On Error GoTo ErrorExit
    
    '------------------> Edit ticker symbol and determine if fund or stock
    pTicker = UCase(Trim(pTicker))
    Dim sURL As String, sURL1 As String, sURL2 As String, sURL3 As String
    sURL1 = "http://www.marketwatch.com/investing/fund/" & pTicker & "/options?countrycode=US&showAll=True"
    sURL2 = "http://www.marketwatch.com/investing/stock/" & pTicker & "/options?countrycode=US&showAll=True"
    sURL3 = "http://www.marketwatch.com/investing/index/" & pTicker & "/options?countrycode=US&showAll=True"
    If RCHGetTableCell(sURL1, 0, "Current price as of") <> "Error" Then
       sURL = sURL1
    ElseIf RCHGetTableCell(sURL2, 0, "Current price as of") <> "Error" Then
       sURL = sURL2
    Else
       sURL = sURL3
       End If
    
    '------------------> Verify the pPutCall parameter
    Dim sPutCall As String
    sPutCall = Left(Trim(UCase(pPutCall)), 1)
    Select Case sPutCall
       Case "P"
       Case "C"
       Case Else
            smfGetMWOptionQuote = "Invalid Put/Call indicator (must be a P or C): " & pPutCall
            Exit Function
       End Select
    
    '------------------> Verify the pItem parameter
    Dim iCells As Integer
    pItem = Trim(UCase(pItem))
    Select Case pItem
       Case "S": If sPutCall = "C" Then iCells = 7 Else iCells = -8  ' Strike price
       Case "L": iCells = 1    ' Last price
       Case "C": iCells = 2    ' Change
       Case "V": iCells = 3    ' Volume
       Case "B": iCells = 4    ' Bid price
       Case "A": iCells = 5    ' Ask price
       Case "I": iCells = 6    ' Open Interest
       Case "U": iCells = 0    ' Last price of underlying equity
       Case "X": iCells = 0    ' Option expiration date
       Case "Z": iCells = 0    ' Option ticker symbol
       Case Else
            smfGetMWOptionQuote = "Unrecognized item ID: " & pItem
            Exit Function
       End Select
       
    '------------------> Handle special strike price strings
    Dim sFind1 As String, sFind2 As String, iRows As Integer
    pStrike = Trim(UCase(pStrike))
    iRows = 0
    Select Case True
       Case Not (VarType(pExpiry) = vbDouble Or IsDate(pExpiry))
            smfGetMWOptionQuote = "Bad expiration date: " & pExpiry
            Exit Function
       Case IsNumeric(pStrike)
            sFind1 = pTicker & Chr(Month(pExpiry) - 12 * (sPutCall = "P") + 64) & Format(pExpiry, "ddyy") & _
                     Left(Right(smfStrExtr(smfGetTagContent(sURL, "td", -1, "/option/"), "/option/", """"), 7), 1) & _
                     Format(IIf(pStrike < 100, 10000, 1000) * pStrike, "000000")
            sFind2 = " "
       Case Mid(pStrike, 2, 2) = "TM"
            sFind1 = Format(pExpiry, "yymmdd") & sPutCall
            sFind2 = "Current Price as of"
       Case Else
            smfGetMWOptionQuote = "Bad strike price: " & pStrike
            Exit Function
       End Select
    Select Case sPutCall & Left(pStrike, 3)
       Case "CITM"
            iRows = -CInt(Mid(pStrike, 4, 2)) - 1
            iCells = iCells + 1
       Case "COTM"
            iRows = CInt(Mid(pStrike, 4, 2))
            iCells = iCells + 1
       Case "POTM"
            iRows = -CInt(Mid(pStrike, 4, 2)) - 1
            If iCells = -8 Then iCells = 8 Else iCells = iCells + 9
       Case "PITM"
            iRows = CInt(Mid(pStrike, 4, 2))
            If iCells = -8 Then iCells = 8 Else iCells = iCells + 9
       End Select
    
    '------------------> Find data item
    Dim nTemp As Variant
    Select Case pItem
       Case "U": smfGetMWOptionQuote = RCHGetTableCell(sURL, 2, "Current Price As Of", , , , -1, , , "Error")
       Case "X": smfGetMWOptionQuote = pExpiry
       Case "Z"
          If Len(sFind1) > 7 Then
             smfGetMWOptionQuote = sFind1
          Else
             nTemp = RCHGetTableCell(sURL, 8, sFind1, sFind2, " ", " ", iRows)
             smfGetMWOptionQuote = pTicker & sFind1 & Format(1000 * nTemp, "00000000")
             End If
       Case Else
          smfGetMWOptionQuote = RCHGetTableCell(sURL, iCells, sFind1, sFind2, " ", " ", iRows)
       End Select
    Exit Function

ErrorExit:
    smfGetMWOptionQuote = "Error"

    End Function
Public Function smfGetOXOptionQuote(ByVal pTicker As Variant, _
                                    ByVal pPutCall As Variant, _
                                    ByVal pExpiry As Variant, _
                                    ByVal pStrike As Variant, _
                                    ByVal pItem As Variant)
                  
    '-----------------------------------------------------------------------------------------------------------*
    ' User defined function to get option quote from Yahoo
    '-----------------------------------------------------------------------------------------------------------*
    ' 2010.06.20 -- Created function
    ' 2010.09.10 -- Add "u" data item for last traded price of the underlying equity
    ' 2013.01.04 -- Remove day 1, 30, and 31 assumptions for option expiration date
    ' 2014.08.17 -- Allow "Put" or "Call" for pPutCall parameter
    ' 2017.01.05 -- Fix "u" data item for last traded price of the underlying equity
    ' 2017.10.10 -- optionsXpress is no longer a valid data source
    '-----------------------------------------------------------------------------------------------------------*
    ' > Examples of invocations to get current quotes for IBM and MMM:
    '
    '   =smfGetOXOptionQuote("SPY","C",DATE(2012,12,22),65,"b")
    '-----------------------------------------------------------------------------------------------------------*
    
    On Error GoTo ErrorExit
    Dim sStrike As String, sItem As String, sTicker As String
    Dim sURL As String, sFind1 As String
    Dim sLabel As String, iCells As Integer
    Dim iYear As Integer, iMonth As Integer, iExpiry As Date
    
    smfGetOXOptionQuote = "Obsolete -- OptionsXpress is no longer a valid data source"
    Exit Function
    
    '------------------> Verify the pPutCall parameter
    Dim sPutCall As String
    sPutCall = Left(Trim(UCase(pPutCall)), 1)
    Select Case sPutCall
       Case "C"
       Case Else
            smfGetOXOptionQuote = "Invalid Put/Call indicator (must be a C): " & pPutCall
            Exit Function
       End Select
       
    '------------------> Verify the pItem parameter and set the # of cells to skip
    sItem = Trim(UCase(pItem))
    Select Case sItem
       Case "S": iCells = -12  ' Strike price
       Case "L": iCells = -11  ' Last price
       Case "B": iCells = -10  ' Bid price
       Case "A": iCells = -9   ' Ask price
       Case "Y": iCells = -8   ' Theoretical Value
       Case "I": iCells = -7   ' Open Interest
       Case "5": iCells = -6   ' Delta
       Case "4": iCells = -5   ' Gamma
       Case "3": iCells = -4   ' Rho
       Case "2": iCells = -3   ' Theta
       Case "1": iCells = -2   ' Vega
       Case "U": iCells = 0    ' Last price of underlying equity
       Case "X": iCells = 0    ' Option expiration date
       Case "Z": iCells = 0    ' Option ticker symbol
       Case Else
            smfGetOXOptionQuote = "Unrecognized item ID: " & pItem
            Exit Function
       End Select
       
    '------------------> Handle special strike price strings
    sStrike = Trim(UCase(pStrike))
    sTicker = Trim(UCase(pTicker))
    Select Case True
       Case VarType(pExpiry) = vbDouble Or IsDate(pExpiry)
            Select Case Day(pExpiry)
               'Case 30, 31 ' Quarterly expiration
               '   iExpiry = smfGetOptionExpiry(Year(pExpiry), Month(pExpiry), "Q")
               '   sFind1 = Left(sTicker & "^^^^^^", 6) & _
               '            Format(iExpiry, "yymmdd") & _
               '            spPutCall & Format(1000 * pStrike, "00000000")
               '   sLabel = Format(iExpiry, "m/d/yyyy") & ";3"
               'Case Is = 1 ' Monthly expiration
               '   iExpiry = smfGetOptionExpiry(Year(pExpiry), Month(pExpiry))
               '   sFind1 = Left(sTicker & "^^^^^^", 6) & _
               '            Format(iExpiry, "yymmdd") & _
               '            sPutCall & Format(1000 * pStrike, "00000000")
               '   sLabel = Format(iExpiry, "m/d/yyyy") & ";1"
               Case Else
                  iExpiry = pExpiry
                  sFind1 = Left(sTicker & "^^^^^^", 6) & _
                           Format(iExpiry, "yymmdd") & _
                           sPutCall & Format(1000 * pStrike, "00000000")
                  sLabel = Format(pExpiry, "m/d/yyyy") & ";1"
               End Select
       Case Else
            smfGetOXOptionQuote = "Bad expiration date: " & pExpiry
            Exit Function
       End Select
    
    '------------------> Find data item
    sURL = "https://www.optionsxpress.com/OXNetTools/Chains/index.aspx?Range=0&lstMarket=0&ChainType=3&lstMonths=" & _
           sLabel & "&Symbol=" & sTicker
    Select Case sItem
       Case "U": smfGetOXOptionQuote = RCHGetTableCell(sURL, 2, ">Change", ">Change", , , 1, , , "Error")
       Case "X": smfGetOXOptionQuote = iExpiry
       Case "Z": smfGetOXOptionQuote = sFind1
       Case Else: smfGetOXOptionQuote = RCHGetTableCell(sURL, iCells, sFind1)
       End Select
    Exit Function

ErrorExit:
    smfGetOXOptionQuote = "Error"

    End Function

Public Function smfGetOX2OptionQuote(ByVal pTicker As Variant, _
                                     ByVal pPutCall As Variant, _
                                     ByVal pExpiry As Variant, _
                                     ByVal pStrike As Variant, _
                                     ByVal pItem As Variant)
                  
    '-----------------------------------------------------------------------------------------------------------*
    ' User defined function to get option quotes from OptionsXPress
    '-----------------------------------------------------------------------------------------------------------*
    ' 2010.07.24 -- Created function
    ' 2010.09.10 -- Add "u" data item for last traded price of the underlying equity
    ' 2011.11.30 -- Change URL to one that gets all expiration dates in one Internet access
    ' 2014.08.17 -- Allow "Put" or "Call" for pPutCall parameter
    ' 2017.01.05 -- Fix "u" data item for last traded price of the underlying equity
    ' 2017.10.10 -- optionsXpress is no longer a valid data source
    '-----------------------------------------------------------------------------------------------------------*
    ' > Examples of invocations to get current quotes for SPY:
    '
    '   =smfGetOX2OptionQuote("SPY","C",DATE(2012,6,1),110,"b")
    '-----------------------------------------------------------------------------------------------------------*
    
    On Error GoTo ErrorExit
    
    smfGetOX2OptionQuote = "Obsolete -- OptionsXpress is no longer a valid data source"
    Exit Function
        
    '------------------> Verify the pPutCall parameter
    Dim iCall As Integer
    Dim sPutCall As String
    sPutCall = Left(Trim(UCase(pPutCall)), 1)
    Select Case sPutCall
       Case "P": iCall = 0
       Case "C": iCall = -9
       Case Else
            smfGetOX2OptionQuote = "Invalid Put/Call indicator (must be a P or C): " & pPutCall
            Exit Function
       End Select
    
    '------------------> Verify pExpiry and pStrike
    Dim sFind1 As String
    pStrike = Trim(UCase(pStrike))
    pTicker = Trim(UCase(pTicker))
    Select Case True
       Case Not (VarType(pExpiry) = vbDouble Or IsDate(pExpiry))
            smfGetOX2OptionQuote = "Bad expiration date: " & pExpiry
            Exit Function
       Case IsNumeric(pStrike)
            sFind1 = Left(pTicker & "^^^^^^", 6) & Format(pExpiry, "yymmdd") & sPutCall & Format(1000 * pStrike, "00000000")
       Case Else
            smfGetOX2OptionQuote = "Bad strike price: " & pStrike
            Exit Function
       End Select
    
    '------------------> Verify the pItem parameter
    Dim iCells As Integer
    pItem = Trim(UCase(pItem))
    Select Case pItem
       Case "5": iCells = -3 + iCall   ' Delta
       Case "6": iCells = -4 + iCall   ' Implied Volatility
       Case "A": iCells = -5 + iCall   ' Ask price
       Case "B": iCells = -6 + iCall   ' Bid price
       Case "C": iCells = -7 + iCall   ' Change
       Case "L": iCells = -8 + iCall   ' Last price
       Case "S": iCells = -9           ' Strike price
       Case "U": iCells = 0            ' Last price of underlying equity
       Case "X": iCells = 0            ' Option expiration date
       Case "Z": iCells = 0            ' Option ticker symbol
       Case Else
            smfGetOX2OptionQuote = "Unrecognized item ID: " & pItem
            Exit Function
       End Select
    
    '------------------> Find data item
    Dim sURL As String
    sURL = "https://www.optionsxpress.com/OXNetTools/Chains/index.aspx?Range=All&lstMarket=0&ChainType=14&lstMonths=" & _
           Format(smfGetOptionExpiry(), "mm/dd/yyyy") & ";7&Symbol=" & pTicker
    Select Case pItem
       Case "U": smfGetOX2OptionQuote = RCHGetTableCell(sURL, 2, ">Change", ">Change", , , 1, , , "Error")
       Case "X": smfGetOX2OptionQuote = pExpiry
       Case "Z": smfGetOX2OptionQuote = sFind1
       Case Else: smfGetOX2OptionQuote = RCHGetTableCell(sURL, iCells, sFind1)
       End Select
    Exit Function

ErrorExit:
    smfGetOX2OptionQuote = "Error"

    End Function

Public Function smfGetOX3OptionQuote(ByVal pTicker As Variant, _
                                     ByVal pPutCall As Variant, _
                                     ByVal pExpiry As Variant, _
                                     ByVal pStrike As Variant, _
                                     ByVal pItem As Variant)
                  
    '-----------------------------------------------------------------------------------------------------------*
    ' User defined function to get option quotes from OptionsXPress
    '-----------------------------------------------------------------------------------------------------------*
    ' 2011.11.30 -- Created function
    ' 2011.12.01 -- Fix strike price extraction because of no "a" tags on zero bid prices
    ' 2014.08.17 -- Allow "Put" or "Call" for pPutCall parameter
    ' 2017.01.05 -- Fix "u" data item for last traded price of the underlying equity
    ' 2017.10.10 -- optionsXpress is no longer a valid data source
    '-----------------------------------------------------------------------------------------------------------*
    ' > Examples of invocations to get current quotes for SPY:
    '
    '   =smfGetOX2OptionQuote("SPY","C",DATE(2012,6,1),110,"b")
    '-----------------------------------------------------------------------------------------------------------*
    
    On Error GoTo ErrorExit
    
    smfGetOX3OptionQuote = "Obsolete -- OptionsXpress is no longer a valid data source"
    Exit Function
        
    '------------------> Verify the pPutCall parameter
    Dim iCall As Integer
    Dim sPutCall As String
    sPutCall = Left(Trim(UCase(pPutCall)), 1)
    Select Case sPutCall
       Case "P": iCall = 0
       Case "C": iCall = -9
       Case Else
            smfGetOX3OptionQuote = "Invalid Put/Call indicator (must be a P or C): " & pPutCall
            Exit Function
       End Select
    
    '------------------> Verify pExpiry and pStrike
    Dim sFind1 As String
    pStrike = Trim(UCase(pStrike))
    pTicker = Trim(UCase(pTicker))
    Select Case True
       Case Not (VarType(pExpiry) = vbDouble Or IsDate(pExpiry))
            smfGetOX3OptionQuote = "Bad expiration date: " & pExpiry
            Exit Function
       Case IsNumeric(pStrike)
            sFind1 = Left(pTicker & "^^^^^^", 6) & Format(pExpiry, "yymmdd") & sPutCall & Format(1000 * pStrike, "00000000")
       Case Else
            smfGetOX3OptionQuote = "Bad strike price: " & pStrike
            Exit Function
       End Select
    
    '------------------> Verify the pItem parameter
    Dim iCells As Integer
    pItem = Trim(UCase(pItem))
    Select Case pItem
       Case "I": iCells = -3 + iCall   ' Open Interest
       Case "V": iCells = -4 + iCall   ' Volume
       Case "A": iCells = -5 + iCall   ' Ask price
       Case "B": iCells = -6 + iCall   ' Bid price
       Case "C": iCells = -7 + iCall   ' Change
       Case "L": iCells = -8 + iCall   ' Last price
       Case "S": iCells = -9           ' Strike price
       Case "U": iCells = 0            ' Last price of underlying equity
       Case "X": iCells = 0            ' Option expiration date
       Case "Z": iCells = 0            ' Option ticker symbol
       Case Else
            smfGetOX3OptionQuote = "Unrecognized item ID: " & pItem
            Exit Function
       End Select
    
    '------------------> Find data item
    Dim sURL As String
    sURL = "https://www.optionsxpress.com/OXNetTools/Chains/index.aspx?Range=All&lstMarket=0&lstMonths=" & _
           Format(smfGetOptionExpiry(), "mm/dd/yyyy") & ";7&Symbol=" & pTicker
    Select Case pItem
       Case "S"
            If iCall = 0 Then iCall = -1 Else iCall = 1
            smfGetOX3OptionQuote = 0 + smfStrExtr(smfGetTagContent(sURL, "div", iCall, sFind1), ">", "<")
       Case "U": smfGetOX3OptionQuote = RCHGetTableCell(sURL, 2, ">Change", ">Change", , , 1, , , "Error")
       Case "X": smfGetOX3OptionQuote = pExpiry
       Case "Z": smfGetOX3OptionQuote = sFind1
       Case Else: smfGetOX3OptionQuote = RCHGetTableCell(sURL, iCells, sFind1)
       End Select
    Exit Function

ErrorExit:
    smfGetOX3OptionQuote = "Error"

    End Function

Public Function smfGetYahooOptionQuote(ByVal pTicker As Variant, _
                                       ByVal pPutCall As Variant, _
                                       ByVal pExpiry As Variant, _
                                       ByVal pStrike As Variant, _
                                       ByVal pItem As Variant)
                  
    '-----------------------------------------------------------------------------------------------------------*
    ' User defined function to get option quote from Yahoo
    '-----------------------------------------------------------------------------------------------------------*
    ' 2010.04.07 -- Created function
    ' 2010.09.10 -- Add "u" data item for last traded price of the underlying equity
    ' 2012.01.15 -- Update elements c/t/u for Yahoo web page changes (dropped last trade and time)
    ' 2013.01.04 -- Remove day 1, 30, and 31 assumptions for option expiration date
    ' 2013.02.06 -- Add workaround to fix the "^VIX" / "VIX" issue
    ' 2013.06.03 -- Add ability to use mini options by apending "7" to ticker symbol
    ' 2013.06.28 -- Add ability to use adjusted ticker symbols (i.e. rightward numeric)
    ' 2013.12.21 -- Fix sPutCall processing to only use 1st byte of parameter
    ' 2016.07.13 -- Update extractions for updated Yahoo website
    ' 2016.08.04 -- Update quotes page URL because of Yahoo change
    ' 2016.11.26 -- Update extractions because of Yahoo change
    ' 2017.04.26 -- Change protocol from "http://" to "https://
    '-----------------------------------------------------------------------------------------------------------*
    ' > Examples of invocations to get current quotes for IBM and MMM:
    '
    '   =smfGetYahooOptionQuote("SPY","C",DATE(2012,6,1),110,"b")
    '-----------------------------------------------------------------------------------------------------------*
    
    On Error GoTo ErrorExit
    Dim sPutCall As String, sStrike As String, sItem As String
    Dim sURL As String, sFind1 As String, sFind2 As String
    Dim sLabel As String, iCells As Integer, iRows As Integer
    Dim iYear As Integer, iMonth As Integer, iDay As Integer
    
    '------------------> Verify the pPutCall parameter
    sPutCall = Left(Trim(UCase(pPutCall)), 1)
    Select Case sPutCall
       Case "P"
       Case "C"
       Case Else
            smfGetYahooOptionQuote = "Invalid Put/Call indicator (must be a P or C): " & pPutCall
            Exit Function
       End Select
       
    '------------------> Handle special strike price strings
    Dim sTicker As String, sMini As String
    sTicker = Trim(UCase(pTicker))
    sMini = ""
    Select Case Right(sTicker, 1)
       Case "0" To "9"
            sMini = Right(sTicker, 1)
            sTicker = Left(sTicker, Len(sTicker) - 1)
       End Select
    sStrike = Trim(UCase(pStrike))
    Select Case True
       Case VarType(pExpiry) = vbDouble Or IsDate(pExpiry)
            sFind1 = sTicker & sMini & Format(pExpiry, "yymmdd") & sPutCall & Format(1000 * pStrike, "00000000")
       Case Else
            smfGetYahooOptionQuote = "Bad expiration date: " & pExpiry
            Exit Function
       End Select
       
    '------------------> Verify the pItem parameter and return data item
    If sTicker = "VIX" Then sTicker = "^VIX"
    sURL = "https://finance.yahoo.com/quote/" & sFind1
    
    sItem = Trim(UCase(pItem))
    Select Case sItem
       Case "A": smfGetYahooOptionQuote = smfGetTagContent(sURL, "td", 1, ">Ask", , , , 1)
       Case "B": smfGetYahooOptionQuote = smfGetTagContent(sURL, "td", 1, ">Bid", , , , 1)
       Case "C": smfGetYahooOptionQuote = smfConvertData(smfStrExtr(smfGetTagContent(sURL, "span", -1, "quote-market-notice"), "~", " "))
       Case "O": smfGetYahooOptionQuote = smfGetTagContent(sURL, "td", 1, ">Open", , , , 1)
       Case "P": smfGetYahooOptionQuote = smfGetTagContent(sURL, "td", 1, ">Previous Close", , , , 1)
       Case "V": smfGetYahooOptionQuote = smfGetTagContent(sURL, "td", 1, ">Volume", , , , 1)
       Case "I": smfGetYahooOptionQuote = smfGetTagContent(sURL, "td", 1, ">Open Interest", , , , 1)
       Case "L": smfGetYahooOptionQuote = smfGetTagContent(sURL, "span", -2, "quote-market-notice", , , , 1)
       Case "S": smfGetYahooOptionQuote = pStrike
       Case "X": smfGetYahooOptionQuote = smfGetTagContent(sURL, "td", 1, ">Expire Date", , , , 1)
       Case "Z": smfGetYahooOptionQuote = sFind1
       Case "%": smfGetYahooOptionQuote = smfConvertData(smfStrExtr(smfGetTagContent(sURL, "span", -1, "quote-market-notice"), "(", ")"))
       Case Else: smfGetYahooOptionQuote = "Unrecognized item ID: " & pItem
       End Select
    Exit Function

ErrorExit:
    smfGetYahooOptionQuote = "Error"

    End Function
    
Public Function smfGetYahooOptionQuote2(ByVal pTicker As Variant, _
                                       ByVal pPutCall As Variant, _
                                       ByVal pExpiry As Variant, _
                                       ByVal pStrike As Variant, _
                                       ByVal pItem As Variant)
                  
    '-----------------------------------------------------------------------------------------------------------*
    ' User defined function to get option quote from Yahoo
    '-----------------------------------------------------------------------------------------------------------*
    ' 2010.04.07 -- Created function
    ' 2010.09.10 -- Add "u" data item for last traded price of the underlying equity
    ' 2012.01.15 -- Update elements c/t/u for Yahoo web page changes (dropped last trade and time)
    ' 2013.01.04 -- Remove day 1, 30, and 31 assumptions for option expiration date
    ' 2013.02.06 -- Add workaround to fix the "^VIX" / "VIX" issue
    ' 2013.06.03 -- Add ability to use mini options by apending "7" to ticker symbol
    ' 2013.06.28 -- Add ability to use adjusted ticker symbols (i.e. rightward numeric)
    ' 2013.12.21 -- Fix sPutCall processing to only use 1st byte of parameter
    ' 2014.10.21 -- Update for changes in Yahoo's option quotes pages
    ' 2014.10.21 -- Removed "xITM" strike price choices
    ' 2014.10.23 -- Handle situations where ticker symbols contain a hypen (e.g. BRK-B)
    ' 2014.10.23 -- Fix offset for picking up the strike price
    ' 2014.10.24 -- Handle situations where ticker symbols contain an uptick (e.g. ^VIX)
    '-----------------------------------------------------------------------------------------------------------*
    ' > Examples of invocations to get current quotes for IBM and MMM:
    '
    '   =smfGetYahooOptionQuote2("SPY","C",DATE(2012,6,1),110,"b")
    '-----------------------------------------------------------------------------------------------------------*
    
    On Error GoTo ErrorExit
    Dim sPutCall As String, sStrike As String, sItem As String
    Dim sURL As String, sFind1 As String, sFind2 As String
    Dim sLabel As String, iCells As Integer, iRows As Integer
    Dim iYear As Integer, iMonth As Integer, iDay As Integer
    
    '------------------> Verify the pPutCall parameter
    sPutCall = Left(Trim(UCase(pPutCall)), 1)
    Select Case sPutCall
       Case "P"
       Case "C"
       Case Else
            smfGetYahooOptionQuote2 = "Invalid Put/Call indicator (must be a P or C): " & pPutCall
            Exit Function
       End Select
       
    '------------------> Verify the pItem parameter and set the # of cells to skip
    sItem = Trim(UCase(pItem))
    Select Case sItem
       Case "S": iCells = -10: sLabel = ""               ' Strike price
       Case "Z": iCells = 0: sLabel = ""                ' Yahoo ticker symbol
       Case "L": iCells = 1: sLabel = ""                ' Last price
       Case "B": iCells = 2: sLabel = ""                ' Bid price
       Case "A": iCells = 3: sLabel = ""                ' Ask price
       Case "C": iCells = 4: sLabel = ""                ' $ Change
       Case "%": iCells = 5: sLabel = ""                ' % Change
       Case "V": iCells = 6: sLabel = ""                ' Volume
       Case "I": iCells = 7: sLabel = ""                ' Open Interest
       Case "6": iCells = 8: sLabel = ""                ' Implied volatility
       Case "G": iCells = 0: sLabel = "Day's Range:"    ' For computing daily low
       Case "H": iCells = 0: sLabel = "Day's Range:"    ' For computing daily high
       Case "J": iCells = 0: sLabel = "Contract Range:" ' For computing contract low
       Case "K": iCells = 0: sLabel = "Contract Range:" ' For computing contract high
       Case "O": iCells = 0: sLabel = "Open:"           ' Open
       Case "P": iCells = 0: sLabel = "Prev Close:"     ' Previous close
       Case "T": iCells = 0: sLabel = "x"               ' Last trade time
       Case "U": iCells = 0: sLabel = ""                ' Last price of underlying equity
       Case "X": iCells = 0: sLabel = ""                ' For computing expiry date
       Case Else
            smfGetYahooOptionQuote2 = "Unrecognized item ID: " & pItem
            Exit Function
       End Select
       
    '------------------> Handle special strike price strings
    Dim sTicker As String, sMini As String, sMini2 As String
    sTicker = Trim(UCase(pTicker))
    sMini = ""
    Select Case Right(sTicker, 1)
       Case "0" To "9"
            sMini = Right(sTicker, 1)
            sTicker = Left(sTicker, Len(sTicker) - 1)
            sMini2 = "&size=mini"
       Case Else
            sMini2 = ""
       End Select
    sStrike = Trim(UCase(pStrike))
    Select Case True
'       Case sPutCall & Left(sStrike, 3) = "CITM"
'            sFind1 = ">Call Options"
'            sFind2 = "yfnc_tabledata1"
'            iRows = -CInt(Mid(sStrike, 4, 2)) - 1
'            iCells = Application.WorksheetFunction.Max(1, iCells + 2)
'       Case sPutCall & Left(sStrike, 3) = "COTM"
'            sFind1 = ">Call Options"
'            sFind2 = "yfnc_tabledata1"
'            iRows = CInt(Mid(sStrike, 4, 2)) - 1
'            If iRows = 0 Then iRows = -1
'            iCells = Application.WorksheetFunction.Max(1, iCells + 2)
'       Case sPutCall & Left(sStrike, 3) = "POTM"
'            sFind1 = ">Put Options"
'            sFind2 = "yfnc_h"
'            iRows = -CInt(Mid(sStrike, 4, 2)) - 1
'            iCells = Application.WorksheetFunction.Max(1, iCells + 2)
'       Case sPutCall & Left(sStrike, 3) = "PITM"
'            sFind1 = ">Put Options"
'            sFind2 = "yfnc_h"
'            iRows = CInt(Mid(sStrike, 4, 2)) - 1
'            If iRows = 0 Then iRows = -1
'            iCells = Application.WorksheetFunction.Max(1, iCells + 2)
       Case VarType(pExpiry) = vbDouble Or IsDate(pExpiry)
            iRows = 0
            Select Case Day(pExpiry)
               'Case 30, 31 ' Quarterly expiration
               '   sFind1 = Format(smfGetOptionExpiry(Year(pExpiry), Month(pExpiry), "Q"), "yymmdd") & _
               '            sPutCall & Format(1000 * pStrike, "00000000")
               'Case Is = 1 ' Monthly expiration
               '   sFind1 = Format(smfGetOptionExpiry(Year(pExpiry), Month(pExpiry)), "yymmdd") & _
               '            sPutCall & Format(1000 * pStrike, "00000000")
               Case Else
                  sFind1 = Replace(Replace(sTicker, "-", ""), "^", "") & sMini & Format(pExpiry, "yymmdd") & sPutCall & Format(1000 * pStrike, "00000000")
               End Select
            sFind2 = ""
       Case Else
            smfGetYahooOptionQuote2 = "Bad expiration date: " & pExpiry
            Exit Function
       End Select
    
    '------------------> Do primary search
    Dim nLast As Variant, dDate As Double
    If sTicker = "VIX" Then sTicker = "^VIX"
    dDate = 86400 * (DateSerial(Year(pExpiry), Month(pExpiry), Day(pExpiry)) - DateSerial(1970, 1, 1))
    sURL = "http://finance.yahoo.com/q/op?s=" & sTicker & sMini2 & "&date=" & dDate

    Select Case sItem
        Case "U"
             smfGetYahooOptionQuote2 = "Error"
             On Error Resume Next
             smfGetYahooOptionQuote2 = smfConvertData(smfGetTagContent(sURL, "span", -1, "yfs_l84_"))
             On Error GoTo ErrorExit
        Case Else
             smfGetYahooOptionQuote2 = RCHGetTableCell(sURL, iCells, sFind1, sFind2, , , iRows, "</table")
        End Select
    
    If sItem = "X" Then
       iYear = Mid(smfGetYahooOptionQuote2, Len(smfGetYahooOptionQuote2) - 14, 2)
       iMonth = Mid(smfGetYahooOptionQuote2, Len(smfGetYahooOptionQuote2) - 12, 2)
       iDay = Mid(smfGetYahooOptionQuote2, Len(smfGetYahooOptionQuote2) - 10, 2)
       smfGetYahooOptionQuote2 = DateSerial(iYear, iMonth, iDay)
       End If
    If sLabel = "" Then Exit Function  ' Primary search item already retrieved
    
    '------------------> Do extended search
    sURL = "http://finance.yahoo.com/q?s=" & smfGetYahooOptionQuote2
    smfGetYahooOptionQuote2 = RCHGetTableCell(sURL, 1, sLabel)
    
    '------------------> Special processing items
    Select Case sItem
        Case "G"
             smfGetYahooOptionQuote2 = smfConvertData(Left(smfGetYahooOptionQuote2, InStr(smfGetYahooOptionQuote2, "-") - 1))
        Case "H"
             smfGetYahooOptionQuote2 = smfConvertData(Mid(smfGetYahooOptionQuote2, InStr(smfGetYahooOptionQuote2, "-") + 1, 99))
        Case "J"
             smfGetYahooOptionQuote2 = smfConvertData(Left(smfGetYahooOptionQuote2, InStr(smfGetYahooOptionQuote2, "-") - 1))
        Case "K"
             smfGetYahooOptionQuote2 = smfConvertData(Mid(smfGetYahooOptionQuote2, InStr(smfGetYahooOptionQuote2, "-") + 1, 99))
        Case "T"
             smfGetYahooOptionQuote2 = "Error"
             On Error Resume Next
             smfGetYahooOptionQuote2 = smfConvertData(smfGetTagContent(sURL, "span", 1, "yfs_t10_"))
             On Error GoTo ErrorExit
        End Select
    
    Exit Function

ErrorExit:
    smfGetYahooOptionQuote2 = "Error"

    End Function


Public Function smfGetYahooOptionQuote3(ByVal pTicker As Variant, _
                                       ByVal pPutCall As Variant, _
                                       ByVal pExpiry As Variant, _
                                       ByVal pStrike As Variant, _
                                       ByVal pItem As Variant)
                  
    '-----------------------------------------------------------------------------------------------------------*
    ' User defined function to get option quote from Yahoo
    '-----------------------------------------------------------------------------------------------------------*
    ' 2010.04.07 -- Created function
    ' 2010.09.10 -- Add "u" data item for last traded price of the underlying equity
    ' 2012.01.15 -- Update elements c/t/u for Yahoo web page changes (dropped last trade and time)
    ' 2013.01.04 -- Remove day 1, 30, and 31 assumptions for option expiration date
    ' 2013.02.06 -- Add workaround to fix the "^VIX" / "VIX" issue
    ' 2013.06.03 -- Add ability to use mini options by apending "7" to ticker symbol
    ' 2013.06.28 -- Add ability to use adjusted ticker symbols (i.e. rightward numeric)
    ' 2013.12.21 -- Fix sPutCall processing to only use 1st byte of parameter
    ' 2016.07.13 -- This processing became obsolete
    '-----------------------------------------------------------------------------------------------------------*
    ' > Examples of invocations to get current quotes for IBM and MMM:
    '
    '   =smfGetYahooOptionQuote3("SPY","C",DATE(2012,6,1),110,"b")
    '-----------------------------------------------------------------------------------------------------------*
    
    On Error GoTo ErrorExit
    Dim sPutCall As String, sStrike As String, sItem As String
    Dim sURL As String, sFind1 As String, sFind2 As String
    Dim sLabel As String, iCells As Integer, iRows As Integer
    Dim iYear As Integer, iMonth As Integer, iDay As Integer
    
    '------------------> Verify the pPutCall parameter
    sPutCall = Left(Trim(UCase(pPutCall)), 1)
    Select Case sPutCall
       Case "P"
       Case "C"
       Case Else
            smfGetYahooOptionQuote3 = "Invalid Put/Call indicator (must be a P or C): " & pPutCall
            Exit Function
       End Select
       
    '------------------> Verify the pItem parameter and set the # of cells to skip
    sItem = Trim(UCase(pItem))
    Select Case sItem
       Case "S": iCells = -8: sLabel = ""               ' Strike price
       Case "Z": iCells = 0: sLabel = ""                ' Yahoo ticker symbol
       Case "L": iCells = 1: sLabel = ""                ' Last price
       Case "B": iCells = 3: sLabel = ""                ' Bid price
       Case "A": iCells = 4: sLabel = ""                ' Ask price
       Case "V": iCells = 5: sLabel = ""                ' Volume
       Case "I": iCells = 6: sLabel = ""                ' Open Interest
       Case "G": iCells = 0: sLabel = "Day's Range:"    ' For computing daily low
       Case "H": iCells = 0: sLabel = "Day's Range:"    ' For computing daily high
       Case "J": iCells = 0: sLabel = "Contract Range:" ' For computing contract low
       Case "K": iCells = 0: sLabel = "Contract Range:" ' For computing contract high
       Case "C": iCells = 0: sLabel = "Prev Close:"     ' Previous close to compute change
       Case "O": iCells = 0: sLabel = "Open:"           ' Open
       Case "P": iCells = 0: sLabel = "Prev Close:"     ' Previous close
       Case "T": iCells = 0: sLabel = "x"               ' Last trade time
       Case "U": iCells = 0: sLabel = ""                ' Last price of underlying equity
       Case "X": iCells = 0: sLabel = ""                ' For computing expiry date
       Case Else
            smfGetYahooOptionQuote3 = "Unrecognized item ID: " & pItem
            Exit Function
       End Select
       
    '------------------> Handle special strike price strings
    Dim sTicker As String, sMini As String
    sTicker = Trim(UCase(pTicker))
    sMini = ""
    Select Case Right(sTicker, 1)
       Case "0" To "9"
            sMini = Right(sTicker, 1)
            sTicker = Left(sTicker, Len(sTicker) - 1)
       End Select
    sStrike = Trim(UCase(pStrike))
    Select Case True
       Case sPutCall & Left(sStrike, 3) = "CITM"
            sFind1 = ">Call Options"
            sFind2 = "yfnc_tabledata1"
            iRows = -CInt(Mid(sStrike, 4, 2)) - 1
            iCells = Application.WorksheetFunction.Max(1, iCells + 2)
       Case sPutCall & Left(sStrike, 3) = "COTM"
            sFind1 = ">Call Options"
            sFind2 = "yfnc_tabledata1"
            iRows = CInt(Mid(sStrike, 4, 2)) - 1
            If iRows = 0 Then iRows = -1
            iCells = Application.WorksheetFunction.Max(1, iCells + 2)
       Case sPutCall & Left(sStrike, 3) = "POTM"
            sFind1 = ">Put Options"
            sFind2 = "yfnc_h"
            iRows = -CInt(Mid(sStrike, 4, 2)) - 1
            iCells = Application.WorksheetFunction.Max(1, iCells + 2)
       Case sPutCall & Left(sStrike, 3) = "PITM"
            sFind1 = ">Put Options"
            sFind2 = "yfnc_h"
            iRows = CInt(Mid(sStrike, 4, 2)) - 1
            If iRows = 0 Then iRows = -1
            iCells = Application.WorksheetFunction.Max(1, iCells + 2)
       Case VarType(pExpiry) = vbDouble Or IsDate(pExpiry)
            iRows = 0
            Select Case Day(pExpiry)
               'Case 30, 31 ' Quarterly expiration
               '   sFind1 = Format(smfGetOptionExpiry(Year(pExpiry), Month(pExpiry), "Q"), "yymmdd") & _
               '            sPutCall & Format(1000 * pStrike, "00000000")
               'Case Is = 1 ' Monthly expiration
               '   sFind1 = Format(smfGetOptionExpiry(Year(pExpiry), Month(pExpiry)), "yymmdd") & _
               '            sPutCall & Format(1000 * pStrike, "00000000")
               Case Else
                  sFind1 = sTicker & sMini & Format(pExpiry, "yymmdd") & sPutCall & Format(1000 * pStrike, "00000000")
               End Select
            sFind2 = ""
       Case Else
            smfGetYahooOptionQuote3 = "Bad expiration date: " & pExpiry
            Exit Function
       End Select
    
    '------------------> Do primary search
    Dim nLast As Variant
    If sTicker = "VIX" Then sTicker = "^VIX"
    sURL = "http://finance.yahoo.com/q/op?s=" & sTicker & "&m=" & Format(pExpiry, "yyyy-mm")

    Select Case sItem
        Case "C"
             nLast = RCHGetTableCell(sURL, 1, sFind1, sFind2, , , iRows, "</table")
             smfGetYahooOptionQuote3 = RCHGetTableCell(sURL, iCells, sFind1, sFind2, , , iRows, "</table")
        Case "U"
             smfGetYahooOptionQuote3 = "Error"
             On Error Resume Next
             smfGetYahooOptionQuote3 = smfConvertData(smfGetTagContent(sURL, "span", -1, "yfs_l84_"))
             On Error GoTo ErrorExit
        Case Else
             smfGetYahooOptionQuote3 = RCHGetTableCell(sURL, iCells, sFind1, sFind2, , , iRows, "</table")
        End Select
    
    If sItem = "X" Then
       iYear = Mid(smfGetYahooOptionQuote3, Len(smfGetYahooOptionQuote3) - 14, 2)
       iMonth = Mid(smfGetYahooOptionQuote3, Len(smfGetYahooOptionQuote3) - 12, 2)
       iDay = Mid(smfGetYahooOptionQuote3, Len(smfGetYahooOptionQuote3) - 10, 2)
       smfGetYahooOptionQuote3 = DateSerial(iYear, iMonth, iDay)
       End If
    If sLabel = "" Then Exit Function  ' Primary search item already retrieved
    
    '------------------> Do extended search
    sURL = "http://finance.yahoo.com/q?s=" & smfGetYahooOptionQuote3
    smfGetYahooOptionQuote3 = RCHGetTableCell(sURL, 1, sLabel)
    
    '------------------> Special processing items
    Select Case sItem
        Case "C"
             smfGetYahooOptionQuote3 = nLast - smfGetYahooOptionQuote3
        Case "G"
             smfGetYahooOptionQuote3 = smfConvertData(Left(smfGetYahooOptionQuote3, InStr(smfGetYahooOptionQuote3, "-") - 1))
        Case "H"
             smfGetYahooOptionQuote3 = smfConvertData(Mid(smfGetYahooOptionQuote3, InStr(smfGetYahooOptionQuote3, "-") + 1, 99))
        Case "J"
             smfGetYahooOptionQuote3 = smfConvertData(Left(smfGetYahooOptionQuote3, InStr(smfGetYahooOptionQuote3, "-") - 1))
        Case "K"
             smfGetYahooOptionQuote3 = smfConvertData(Mid(smfGetYahooOptionQuote3, InStr(smfGetYahooOptionQuote3, "-") + 1, 99))
        Case "T"
             smfGetYahooOptionQuote3 = "Error"
             On Error Resume Next
             smfGetYahooOptionQuote3 = smfConvertData(smfGetTagContent(sURL, "span", 1, "yfs_t10_"))
             On Error GoTo ErrorExit
        End Select
    
    Exit Function

ErrorExit:
    smfGetYahooOptionQuote3 = "Error"

    End Function

Attribute VB_Name = "modGetOptionStrikes"
Option Explicit
Function smfGetOptionStrikes(ByVal pTicker As String, _
                    Optional ByVal pExpiry As Variant = 0, _
                    Optional ByVal pPutCall As String = "P", _
                    Optional ByVal pSource As String = "Y", _
                    Optional ByVal pSymbols As Integer = 0, _
                    Optional ByVal pRows As Integer = 0, _
                    Optional ByVal pCols As Integer = 0, _
                    Optional ByVal pType As Integer = 0)
                                                      
    '-----------------------------------------------------------------------------------------------------------*
    ' User defined function to get available option strikes from various data sources
    '-----------------------------------------------------------------------------------------------------------*
    ' 2011.04.04 -- Created function
    ' 2011.11.29 -- Added OptionsXpress as possible data source
    ' 2011.11.30 -- Fix URL to get all strike prices for OptionsXpress
    ' 2014.10.21 -- Modified Yahoo processing for new web page structure
    ' 2015.02.21 -- Restored Yahoo processing to old web page structure
    ' 2015.08.13 -- Use Yahoo as the data source if NASDAQ is requested
    ' 2017.03.09 -- Change to use Yahoo as default
    ' 2017.03.09 -- Use Yahoo if Barchart is requested
    ' 2017.03.15 -- Modified Yahoo processing for new JSON call
    ' 2017.04.26 -- Change "http://" protocol to "https://" for Yahoo
    ' 2017.07.05 -- Modified Yahoo processing to use smfGetYahooJSONField() to get data
    ' 2017.07.09 -- Removed smfGetYahooJSONField() to get data, as it was not reliable
    ' 2017.10.10 -- optionsXpress is no longer a valid data source
    ' 2017.10.12 -- Try Yahoo processing using smfGetYahooJSONField() to get data again
    ' 2017.10.14 -- Removed smfGetYahooJSONField() to get data, as it was still not reliable with this JSON file
    ' 2017.10.24 -- Add default value of 0 for pExpiry so first available date is used for Yahoo calls
    '-----------------------------------------------------------------------------------------------------------*
    ' > Examples of invocations to get current quotes for SPY:
    '
    '   =smfGetOptionStrikes("SPY", smfGetOptionExpiry(), "P", "Google")
    '-----------------------------------------------------------------------------------------------------------*
    
    On Error GoTo ErrorExit
    Dim dDate As Double
    
    '------------------> Determine size of array to return
    Dim kRows As Integer, kCols As Integer
    kRows = pRows
    kCols = pCols
    If pRows = 0 Or pCols = 0 Then
       If kRows = 0 Then kRows = 40
       If kCols = 0 Then kCols = 1
       On Error Resume Next
       kRows = Application.Caller.Rows.Count
       kCols = Application.Caller.Columns.Count
       On Error GoTo ErrorExit
       End If
  
    '------------------> Initialize return array
    Dim iRow As Integer, iCol As Integer
    Dim vData0(1 To 500)
    ReDim vData(1 To kRows, 1 To kCols) As Variant
    For iRow = 1 To kRows: For iCol = 1 To kCols: vData(iRow, iCol) = "": Next iCol: Next iRow
    vData(1, 1) = "None"
    
    '------------------> Verify Put/Call and expiration date parameters
    Dim sPutCall As String
    sPutCall = Left(Trim(UCase(pPutCall)), 1)
    Select Case sPutCall
       Case "P"
       Case "C"
       Case Else
            vData(1, 1) = "Invalid Put/Call indicator (must be a P or C): " & pPutCall
            GoTo ErrorExit
       End Select
    
    Select Case True
       Case pExpiry = 0 And pSource = "Y"
       Case VarType(pExpiry) = vbDouble
       Case IsDate(pExpiry)
       Case Else
            vData(1, 1) = "Bad expiration date: " & pExpiry
            GoTo ErrorExit
       End Select
    
    '------------------> Determine which data source to use
    Dim s1 As String, s2 As String, s3 As String, sURL As String
    Dim i1 As Integer, iPtr As Integer
    Dim nPrice As Double
    Select Case UCase(pSource)
       Case "8", "888": GoTo Source_888
       Case "B", "BC", "BARCHART": GoTo Source_Yahoo
       Case "G", "GOOGLE": GoTo Source_Google
       Case "N", "NASDAQ": GoTo Source_Yahoo
       Case "Y", "YAHOO": GoTo Source_Yahoo
       Case Else
            vData(1, 1) = "Invalid data source: " & pSource
            GoTo ErrorExit
       End Select

    '------------------> Google processing
Source_888:
    sURL = "http://oic.ivolatility.com/oic_adv_options.j?exp_date=-1&ticker=" & UCase(pTicker)
    nPrice = RCHGetYahooQuotes(pTicker, "l1")(1, 1)
    s1 = Format(pExpiry, "yymmdd") & "C"
    i1 = -1
    iPtr = 0
    For iRow = 1 To 500
        s2 = smfStrExtr(smfGetTagContent(sURL, "tr", i1, s1), "1"">", "<")
        If s2 = "" Then Exit For
        vData0(iRow) = 0 + s2
        If iPtr = 0 And vData0(iRow) > nPrice Then iPtr = iRow   ' First ITM price
        i1 = 2 * iRow
        Next iRow
    GoTo ExitFunction

    '------------------> Google processing
Source_Google:
    Dim sTicker As String
    If InStr(pTicker, ":") > 0 Then sTicker = smfStrExtr(pTicker & "|", ":", "|") Else sTicker = pTicker
    nPrice = RCHGetYahooQuotes(sTicker, "l1")(1, 1)
    sURL = "http://www.google.com/finance/option_chain?output=json&q=" & UCase(pTicker) & _
           "&expd=" & Day(pExpiry) & _
           "&expm=" & Month(pExpiry) & _
           "&expy=" & Year(pExpiry)
    s1 = IIf(sPutCall = "C", "calls:[", "puts:[")
    s2 = smfStrExtr(RCHGetWebData(sURL, s1), s1, "]")
    iPtr = 0
    For iRow = 1 To 500
        s3 = smfStrExtr(smfWord(s2, iRow, "}"), "strike:""", """")
        If s3 = "" Then Exit For
        vData0(iRow) = 0 + s3
        If iPtr = 0 And vData0(iRow) > nPrice Then iPtr = iRow   ' First ITM price
        Next iRow
    GoTo ExitFunction
    
    '------------------> OptionsXpress processing
Source_OptionsXpress:
    sURL = "https://www.optionsxpress.com/OXNetTools/Chains/index.aspx?Range=0&lstMarket=0&Symbol=" & UCase(pTicker) & _
           "&lstMonths=" & Format(pExpiry, "mm/dd/yyyy") & ";7"
    s1 = Format(pExpiry, "yymmdd") & "C"
    iPtr = 0
    nPrice = RCHGetYahooQuotes(pTicker, "l1")(1, 1)
    For iRow = 1 To 500
        s2 = smfStrExtr(smfGetTagContent(sURL, "tr", iRow - 1, s1), s1, "&")
        If s2 = "" Then Exit For
        vData0(iRow) = s2 / 1000
        If iPtr = 0 And vData0(iRow) > nPrice Then iPtr = iRow   ' First ITM price
        Next iRow
    GoTo ExitFunction

    '------------------> Yahoo processing from 2017.10.14 on
Source_Yahoo:
    Dim iPos1 As Double, iPos2 As Double, iPos3 As Double
    If pExpiry = 0 Then
       s1 = ""   ' Use first available expiration date
    Else
       dDate = 86400 * (DateSerial(Year(pExpiry), Month(pExpiry), Day(pExpiry)) - DateSerial(1970, 1, 1))
       s1 = "?date=" & dDate
       End If
    sURL = "https://query1.finance.yahoo.com/v7/finance/options/" & UCase(pTicker) & s1
    nPrice = smfStrExtr(RCHGetWebData(sURL, "regularMarketPrice", 100), ":", ",", 1)
    If pExpiry = 0 Then pExpiry = smfUnix2Date(smfStrExtr(RCHGetWebData(sURL, """expirationDates"":", 100), "[", ",", 1))
    iPtr = 0  ' Pointer for first ITM price
    i1 = 0
    iPos1 = 1
    s1 = RCHGetWebData(sURL, iPos1)
    For iRow = 1 To 500
        iPos2 = InStr(2, s1, """puts"":")
        iPos3 = InStr(2, s1, """strike"":")
        If iPos3 = 0 Or (iPos2 > 0 And iPos2 < iPos3) Then Exit For
        iPos1 = iPos1 + iPos3
        s1 = RCHGetWebData(sURL, iPos1)
        vData0(iRow) = smfStrExtr(s1, ":", ",", 1)
        If iPtr = 0 And vData0(iRow) > nPrice Then iPtr = iRow   ' First ITM price
        Next iRow
    GoTo ExitFunction
    
    '------------------> Yahoo processing from 2017.10.12 to 2017.10.13
Source_Yahoo5:
    dDate = 86400 * (DateSerial(Year(pExpiry), Month(pExpiry), Day(pExpiry)) - DateSerial(1970, 1, 1))
    sURL = "https://query1.finance.yahoo.com/v7/finance/options/" & UCase(pTicker) & "?date=" & dDate
    nPrice = smfGetYahooJSONField(pTicker, sURL, "optionChain.result.0.quote.regularMarketPrice")
    iPtr = 0
    i1 = 0
    For iRow = 1 To 500
        s3 = smfGetYahooJSONField(pTicker, sURL, "optionChain.result.0.options.0.calls." & (iRow - 1) & ".strike")
        If s3 = "Not Found" Then Exit For
        vData0(iRow) = smfConvertData(s3)
        If iPtr = 0 And s3 > nPrice Then iPtr = iRow   ' First ITM price
        Next iRow
    GoTo ExitFunction

    '------------------> Yahoo processing from 2017.03.15 to 2017.10.12
Source_Yahoo4:
    dDate = 86400 * (DateSerial(Year(pExpiry), Month(pExpiry), Day(pExpiry)) - DateSerial(1970, 1, 1))
    sURL = "https://query1.finance.yahoo.com/v7/finance/options/" & UCase(pTicker) & "?date=" & dDate
    nPrice = smfConvertData(smfStrExtr(RCHGetWebData(sURL, "regularMarketPrice"":", 100), ":", ","))
    iPtr = 0
    s1 = smfStrExtr(RCHGetWebData(sURL, """strikes"":[", 1000), "[", "]")
    i1 = 0
    For iRow = 1 To 500
        s3 = smfWord(s1, iRow, ",")
        If s3 = "" Then Exit For
        vData0(iRow) = s3
        If iPtr = 0 And s3 > nPrice Then iPtr = iRow   ' First ITM price
        Next iRow
    GoTo ExitFunction

    '------------------> Yahoo processing prior to 2014.10.21 and from 2015.02.01 to 2017-03-14
Source_Yahoo3:
    sURL = "https://finance.yahoo.com/q/op?s=" & UCase(pTicker) & "&m=" & Format(pExpiry, "yyyy-mm")
    nPrice = RCHGetYahooQuotes(pTicker, "l1")(1, 1)
    iPtr = 0
    s1 = UCase(pTicker) & Format(pExpiry, "yymmdd") & sPutCall
    s2 = IIf(sPutCall = "P", ">Put Options", ">Call Options")
    i1 = 0
    For iRow = 1 To 500
        s3 = smfGetTagContent(sURL, "a", 2 * iRow, s2)
        If Left(Right(s3, 9), 1) <> sPutCall Then Exit For
        If Left(s3, Len(s1)) = s1 Then
           i1 = i1 + 1
           vData0(i1) = Right(s3, 8) / 1000
           If iPtr = 0 And vData0(i1) > nPrice Then iPtr = i1   ' First ITM price
           End If
        Next iRow
    GoTo ExitFunction

    '------------------> Yahoo processing from 2014.10.21 thru 2015.02.21
Source_Yahoo2:
    dDate = 86400 * (DateSerial(Year(pExpiry), Month(pExpiry), Day(pExpiry)) - DateSerial(1970, 1, 1))
    sURL = "http://finance.yahoo.com/q/op?s=" & UCase(pTicker) & "&date=" & dDate
    
    nPrice = RCHGetYahooQuotes(pTicker, "l1")(1, 1)
    iPtr = 0
    s1 = UCase(pTicker) & Format(pExpiry, "yymmdd") & sPutCall
    s2 = IIf(sPutCall = "P", """optionsPuts""", """optionsCalls""")
    i1 = 0
    For iRow = 1 To 500
        s3 = smfGetTagContent(sURL, "a", 2 * iRow + 1, s2)
        If Left(Right(s3, 9), 1) <> sPutCall Then Exit For
        If Left(s3, Len(s1)) = s1 Then
           i1 = i1 + 1
           vData0(i1) = Right(s3, 8) / 1000
           If iPtr = 0 And vData0(i1) > nPrice Then iPtr = i1   ' First ITM price
           End If
        Next iRow
    GoTo ExitFunction

    '------------------> Yahoo processing from 2016.08.07 to 2017-03-14
Source_Yahoo1:
    dDate = 86400 * (DateSerial(Year(pExpiry), Month(pExpiry), Day(pExpiry)) - DateSerial(1970, 1, 1))
    sURL = "http://finance.yahoo.com/quote/" & UCase(pTicker) & "/options?date=" & dDate
    nPrice = RCHGetYahooQuotes(pTicker, "l1")(1, 1)
    iPtr = 0
    s1 = UCase(pTicker) & Format(pExpiry, "yymmdd") & sPutCall
    s2 = IIf(sPutCall = "P", ">Puts", ">Calls")
    i1 = 0
    For iRow = 1 To 500
        s3 = smfGetTagContent(sURL, "a", 2 * iRow, s2)
        If Left(Right(s3, 9), 1) <> sPutCall Then Exit For
        If Left(s3, Len(s1)) = s1 Then
           i1 = i1 + 1
           vData0(i1) = Right(s3, 8) / 1000
           If iPtr = 0 And vData0(i1) > nPrice Then iPtr = i1   ' First ITM price
           End If
        Next iRow
    GoTo ExitFunction

ExitFunction:
    '------------------> Extract requested range of strike prices from full list found
    vData(1, 1) = ""
    For iRow = 1 To kRows
        i1 = iPtr - Int(kRows / 2) + iRow - 1
        Select Case True
           Case i1 < 1
           Case vData0(i1) = Empty: Exit For
           Case pSymbols = 1
                vData(iRow, 1) = UCase(pTicker) & _
                                 Format(pExpiry, " m/d yyyy ") & _
                                 Format(vData0(i1), "$0.00 ") & _
                                 IIf(sPutCall = "P", "Put", "Call")
           Case Else
                vData(iRow, 1) = vData0(i1)
           End Select
        Next iRow

ErrorExit:

    smfGetOptionStrikes = vData
                        
    End Function



Attribute VB_Name = "modGetTableCell"
Public Function RCHGetTableCell(ByVal pURL As String, _
                                ByVal pCells As Integer, _
                       Optional ByVal pFind1 As String = "<BODY", _
                       Optional ByVal pFind2 As String = " ", _
                       Optional ByVal pFind3 As String = " ", _
                       Optional ByVal pFind4 As String = " ", _
                       Optional ByVal pRows As Integer = 0, _
                       Optional ByVal pEnd As String = "</BODY", _
                       Optional ByVal pLook As Integer = 0, _
                       Optional ByVal pError As Variant = "Error", _
                       Optional ByVal pType As Integer = 0) As Variant
    '-----------------------------------------------------------------------------------------------> Version 2.0i
    ' 2009.01.26 -- Add pType variable
    ' 2010.10.10 -- Added code to change HTML code &#151; to a normal hyphen
    ' 2010.10.22 -- Added code to change HTML code &mdash; to a normal hyphen
    ' 2011.04.27 -- Convert to use smfGetWebPage() function
    '-----------------------------------------------------------------------------------------------------------*
    On Error GoTo ErrorExit
    vError = pError
    '------------------> Download web page if necessary and extract data
    sData(2) = smfGetWebPage(pURL, pType, 0)
    sData(3) = UCase(sData(2))
    RCHGetTableCell = RCHExtractData("", "", pFind1, pFind2, pFind3, pFind4, pRows, pEnd, pCells, pLook)
    Exit Function
ErrorExit: RCHGetTableCell = vError
    End Function

Attribute VB_Name = "modGetTagContent"
Public Function smfGetTagContent(ByVal pURL As String, _
                                 ByVal pTag As String, _
                        Optional ByVal pTags As Integer = 1, _
                        Optional ByVal pFind1 As String = "<", _
                        Optional ByVal pFind2 As String = " ", _
                        Optional ByVal pFind3 As String = " ", _
                        Optional ByVal pFind4 As String = " ", _
                        Optional ByVal pConv As Integer = 0, _
                        Optional ByVal pError As Variant = "Error", _
                        Optional ByVal pType As Integer = 0, _
                        Optional ByVal pLen As Integer = 32767) As Variant
                        
    '-----------------------------------------------------------------------------------------------------------*
    ' User defined function to return content from between a paired HTML tags
    '-----------------------------------------------------------------------------------------------> Version 2.0h
    ' 2009.06.14 -- Created function
    ' 2010.10.10 -- Added code to change HTML code &#151; to a normal hyphen
    ' 2010.10.22 -- Added code to change HTML code &mdash; to a normal hyphen
    ' 2011.02.16 -- Convert to use smfGetWebPage() function
    ' 2012.01.27 -- Added "pLen" parm to prevent excessive length of returned data
    ' 2014.04.10 -- Add call to smfStripHTML() for pConv=1
    ' 2017.11.11 -- Allow text string to be passed instead of a URL
    '-----------------------------------------------------------------------------------------------------------*
    ' > Example of an invocation:
    '
    '   =smfGetTagContent("http://finance.google.com/finance?client=ob&q=MUTF:GLRBX", "TD", 2, "Sharpe ratio")
    '-----------------------------------------------------------------------------------------------------------*
    
    On Error GoTo ErrorExit
    vError = pError
    
    '--------------------------------> Retrieve web page
    If Left(pURL, 4) = "http" Then sData1 = smfGetWebPage(pURL, pType, 0) Else sData1 = pURL
    sData2 = UCase(sData1)
    
    '--------------------------------> Find initial position on web page
    iPos1 = 0
    iPos1 = InStr(iPos1 + 1, sData2, UCase(pFind1))
    If iPos1 = 0 Then GoTo ErrorExit
    If pFind2 > " " Then
       iPos1 = InStr(iPos1 + 1, sData2, UCase(pFind2))
       If iPos1 = 0 Then GoTo ErrorExit
       End If
    If pFind3 > " " Then
       iPos1 = InStr(iPos1 + 1, sData2, UCase(pFind3))
       If iPos1 = 0 Then GoTo ErrorExit
       End If
    If pFind4 > " " Then
       iPos1 = InStr(iPos1 + 1, sData2, UCase(pFind4))
       If iPos1 = 0 Then GoTo ErrorExit
       End If
    
    '--------------------------------> Skip forward or backward number of HTML tags
    For i1 = 1 To Abs(pTags)
        If pTags > 0 Then
           iPos1 = InStr(iPos1 + 1, sData2, "<" & UCase(pTag))
        Else
           iPos1 = InStrRev(sData2, "<" & UCase(pTag), iPos1)
           End If
        If iPos1 = 0 Then GoTo ErrorExit
        Next i1
    
    '--------------------------------> Extract data between HTML tags
    iPos2 = InStr(iPos1, sData2, ">")
    iPos3 = InStr(iPos2, sData2, "</" & UCase(pTag))
    If UCase(pTag) = "TD" Then
       iPos4 = InStr(iPos2, sData2, "<TD")
       If iPos4 > 0 And (iPos3 = 0 Or iPos3 > iPos4) Then iPos3 = iPos4
       iPos4 = InStr(iPos2, sData2, "</TR")
       If iPos4 > 0 And (iPos3 = 0 Or iPos3 > iPos4) Then iPos3 = iPos4
       iPos4 = InStr(iPos2, sData2, "<TR")
       If iPos4 > 0 And (iPos3 = 0 Or iPos3 > iPos4) Then iPos3 = iPos4
       iPos4 = InStr(iPos2, sData2, "</TABLE")
       If iPos4 > 0 And (iPos3 = 0 Or iPos3 > iPos4) Then iPos3 = iPos4
       End If
    
    s1 = Trim(Mid(sData1, iPos2 + 1, iPos3 - iPos2 - 1))
    If pConv = 1 Then
       s1 = smfStripHTML(s1)
       s1 = smfConvertData(s1, 0)
       End If
    
    If Len(s1) > pLen Then s1 = Left(s1, pLen)
    smfGetTagContent = s1
    
    Exit Function

ErrorExit: smfGetTagContent = vError
   
   End Function


Attribute VB_Name = "modGetWebData"
Public Function RCHGetWebData(ByVal pURL As String, _
                         Optional ByVal pPos As Variant = 1, _
                         Optional ByVal pLen As Integer = 32767, _
                         Optional ByVal pOffset As Integer = 0, _
                         Optional ByVal pUseIE As Integer = 0) As Variant
    '-----------------------------------------------------------------------------------------------------------*
    ' 2011.02.16 -- Convert to use smfGetWebPage() function
    '-----------------------------------------------------------------------------------------------------------*
    On Error GoTo ErrorExit
    '--------------------------------> Retrieve web page, if needed
    s1 = smfGetWebPage(pURL, pUseIE, 0)
    '--------------------------------> Preprocess web page data
    iPos = IIf(IsNumeric(pPos), pPos, InStr(s1, pPos) + pOffset)
    iLen = IIf(iPos + pLen <= Len(s1), pLen, Len(s1) - iPos + 1)
    RCHGetWebData = Mid(s1, iPos, iLen)
    Exit Function
ErrorExit: RCHGetWebData = "Error"
    End Function


Attribute VB_Name = "modGetYahooHistory"
Public Function RCHGetYahooHistory(pTicker As String, _
                          Optional pStartYear As Integer = 1970, _
                          Optional pStartMonth As Integer = 1, _
                          Optional pStartDay As Integer = 1, _
                          Optional pEndYear As Integer = 2020, _
                          Optional pEndMonth As Integer = 12, _
                          Optional pEndDay As Integer = 31, _
                          Optional pPeriod As String = "d", _
                          Optional pItems As String = "DOHLCVU", _
                          Optional pNames As Integer = 1, _
                          Optional pAdjust As Integer = 1, _
                          Optional pResort As Integer = 0, _
                          Optional pDim1 As Integer = 20000, _
                          Optional pDim2 As Integer = 7) ' As Variant()
                    
    '-----------------------------------------------------------------------------------------------------------*
    ' User defined function to create backward compatible RCHGetYahooHistory() function
    '-----------------------------------------------------------------------------------------------------------*
    ' 2017.05.25 -- Added for backward compatibility
    ' 2017.05.26 -- Check if pDim1 and pDim2 are overridden
    '-----------------------------------------------------------------------------------------------------------*
    
    Dim sItems As String
    sItems = UCase(pItems)
    Select Case True
       Case InStr(sItems, "C") > 0: sItems = Replace(sItems, "A", "")
       Case Else: sItems = Replace(sItems, "A", "C")
       End Select
    
    If pAdjust = 0 Then
       RCHGetYahooHistory = "Error: All data is now adjusted"
       Exit Function
       End If
       
    Dim iDim1 As Integer, iDim2 As Integer
    iDim1 = pDim1
    iDim2 = pDim2
    If pDim1 = 20000 And pDim2 = 7 Then
       On Error Resume Next
       iDim1 = Application.Caller.Rows.Count
       iDim2 = Application.Caller.Columns.Count
       End If
   
    RCHGetYahooHistory = smfGetYahooHistory(pTicker, _
                                            pStartMonth & "/" & pStartDay & "/" & pStartYear, _
                                            pEndMonth & "/" & pEndDay & "/" & pEndYear, _
                                            pPeriod, sItems, pNames, pResort, iDim1, iDim2)

    End Function

Public Function RCHGetYahooHistory2(pTicker As String, _
                          Optional pStartYear As Integer = 0, _
                          Optional pStartMonth As Integer = 0, _
                          Optional pStartDay As Integer = 0, _
                          Optional pEndYear As Integer = 0, _
                          Optional pEndMonth As Integer = 0, _
                          Optional pEndDay As Integer = 0, _
                          Optional pPeriod As String = "d", _
                          Optional pItems As String = "DOHLCVA", _
                          Optional pNames As Integer = 1, _
                          Optional pAdjust As Integer = 0, _
                          Optional pResort As Integer = 0, _
                          Optional pDim1 As Integer = 0, _
                          Optional pDim2 As Integer = 0) ' As Variant()
                    
    '-----------------------------------------------------------------------------------------------------------*
    ' User defined function to download historical quotes from Yahoo!
    '-----------------------------------------------------------------------------------------------------------*
    ' 2005.01.18 -- Written by Randy Harmelink (rharmelink@gmail.com)
    ' 2005.08.14 -- Corrected row dimension to be based on Application.Caller instead of Selection
    ' 2005.08.21 -- Made pPeriod an optional parameter defaulting to daily quotes
    ' 2005.08.21 -- Added optional parameter pItems to allow selection of specific columns of data
    ' 2005.08.21 -- Added ability to add ticker symbol to each output row using the pItems parameter ("T")
    ' 2005.08.21 -- Added optional parameter pNames to allow removal of the first row of data with column names
    ' 2006.04.26 -- Added conversion of pass "pItems" variable into upper case
    ' 2006.04.26 -- Added translation of strings into amounts, where appropriate
    ' 2006.06.11 -- Remove edit of ticker length
    ' 2006.06.15 -- Add "v" (dividends only) possibility to pPeriod
    ' 2006.07.02 -- Fix to all weekly time period (was using "y" instead of "w" for some reason)
    ' 2006.07.10 -- Added ability to adjust data for splits and dividend (i.e. "pAdjust" variable)
    ' 2006.07.10 -- Added ability to resort data in ascending date order (i.e. "pResort" variable)
    ' 2006.07.10 -- Added conversion of date field into an EXCEL serial date number so it can be used as a date
    ' 2006.07.24 -- Changed date parameters to be optional for ease of use
    ' 2006.07.24 -- Added parameters "pDim1" and "pDim2" for VBA function call usage
    ' 2006.08.11 -- Removed adjustment of volume -- apparently Yahoo presents adjusted volume?
    ' 2006.09.11 -- Fix processing if there are more columns of data than can be returned (i.e. kDim2)
    ' 2006.10.06 -- Fix date comparison, using 2-digit months and days
    ' 2007.01.17 -- Change CCur() usage to CDec() because of precision issues
    ' 2007.01.19 -- Change defaults to set the early date because of changes to the Yahoo URL process
    ' 2007.01.22 -- Fix date defaults for weekly/monthly/dividend requests
    ' 2007.01.22 -- Change MsgBox errors to return the error message as the first data cell
    ' 2007.09.18 -- Modify pDim1/pDim2 processing
    ' 2010.02.15 -- Check to see if adjusted closing price is zero before calculating adjustment factor
    ' 2011.04.28 -- Change cDec() to smfConvertData()
    ' 2012.07.06 -- Handle doubling up on current date
    ' 2012.07.06 -- Allow returned dividend data to be resorted
    ' 2012.07.09 -- Fix handling of doubling up on current date
    ' 2017.04.17 -- Change protocol from "http://" to "https://"
    ' 2017.05.31 -- Add call to smfGetYahooHistoryCSV()
    '-----------------------------------------------------------------------------------------------------------*
    ' > Example of an invocation to get daily quotes for 2004 for IBM:
    '
    '   =RCHGetYahooHistory2("IBM",2004,1,1,2004,12,31,"d")
    '-----------------------------------------------------------------------------------------------------------*
    Dim sURL As String
    
    On Error GoTo ErrorExit
    
    '------------------> Null Return Item
    If pTicker = "None" Or pTicker = "" Then
       ReDim vData(1 To 1, 1 To 1) As Variant
       vData(1, 1) = "None"
       RCHGetYahooHistory2 = vData
       Exit Function
       End If
    
    '------------------> Determine size of array to return
    kDim1 = pDim1  ' Rows
    kDim2 = pDim2  ' Columns
    If pDim1 = 0 Or pDim2 = 0 Then
       On Error Resume Next
       kDim1 = Application.Caller.Rows.Count
       kDim2 = Application.Caller.Columns.Count
       On Error GoTo ErrorExit
       End If
  
    '------------------> Initialize return array
    ReDim vData(1 To kDim1, 1 To kDim2) As Variant
    For i1 = 1 To kDim1
        For i2 = 1 To kDim2
            vData(i1, i2) = ""
            Next i2
        Next i1
    
    '------------------> Edit parameters
    If pStartYear = 0 And _
       pStartMonth = 0 And _
       pStartDay = 0 And _
       pEndYear = 0 And _
       pEndMonth = 0 And _
       pEndDay = 0 Then
    Else
       If pStartYear < 1900 Or pStartYear > 2100 Or _
             pStartMonth < 1 Or pStartMonth > 12 Or _
             pStartDay < 1 Or pStartDay > 31 Or _
             pEndYear < 1900 Or pEndYear > 2100 Or _
             pEndMonth < 1 Or pEndMonth > 12 Or _
             pEndDay < 1 Or pEndDay > 31 Or _
                 pStartYear & Right("0" & pStartMonth, 2) & Right("0" & pStartDay, 2) > _
                 pEndYear & Right("0" & pEndMonth, 2) & Right("0" & pEndDay, 2) Then
          vData(1, 1) = "Something wrong with dates -- asked for " & _
                        pStartYear & "/" & pStartMonth & "/" & pStartDay & " thru " & _
                        pEndYear & "/" & pEndMonth & "/" & pEndDay
          GoTo ErrorExit
          End If
       End If
    Select Case pPeriod
       Case "d": iEndYear = Year(Date) - Int(kDim1 / 250) - 1
       Case "w": iEndYear = Year(Date) - Int(kDim1 / 50) - 1
       Case "m": iEndYear = Year(Date) - Int(kDim1 / 12) - 1
       Case "v": iEndYear = Year(Date) - Int(kDim1 / 4) - 1
       Case Else
            vData(1, 1) = "Invalid Period Requested: " & pPeriod
            GoTo ErrorExit
       End Select
       
    '------------------> Create URL and download historical quotes
    
    'sBase = "https://ichart.finance.yahoo.com/table.csv?s="
    'sURL = sBase & pTicker & _
    '       IIf(pStartMonth = 0, "&a=0", "&a=" & (pStartMonth - 1)) & _
    '       IIf(pStartDay = 0, "&b=1", "&b=" & pStartDay) & _
    '       IIf(pStartYear = 0, "&c=" & iEndYear, "&c=" & pStartYear) & _
    '       IIf(pEndMonth = 0, "", "&d=" & (pEndMonth - 1)) & _
    '       IIf(pEndDay = 0, "", "&e=" & pEndDay) & _
    '       IIf(pEndYear = 0, "", "&f=" & pEndYear) & _
    '       "&g=" & pPeriod & _
    '       "&ignore=.csv"
    ' sqData = RCHGetURLData(sURL)
    sURL = "https://query1.finance.yahoo.com/v7/finance/download/MMM?period1=1493610466&period2=1496202466&interval=1d&events=history&crumb="
    sqData = smfGetYahooHistoryCSVData(sURL)
    
    '------------------> Determine items needed
    pItems2 = UCase(pItems)
    If pPeriod = "v" Then
       If InStr(pItems2, "T") > 0 Then iTick = 1
       iDate = 1 + iTick
       iDiv = 2 + iTick
       iOpen = 0
       iHigh = 0
       iLow = 0
       iClos = 0
       iVol = 0
       iAdjC = 0
    Else
       iDiv = 0
       iTick = InStr(pItems2, "T")
       iDate = InStr(pItems2, "D")
       iOpen = InStr(pItems2, "O")
       iHigh = InStr(pItems2, "H")
       iLow = InStr(pItems2, "L")
       iClos = InStr(pItems2, "C")
       iVol = InStr(pItems2, "V")
       iAdjC = InStr(pItems2, "A")
       End If
    If iTick > kDim2 Then iTick = 0
    If iDate > kDim2 Then iDate = 0
    If iDiv > kDim2 Then iDiv = 0
    If iOpen > kDim2 Then iOpen = 0
    If iHigh > kDim2 Then iHigh = 0
    If iLow > kDim2 Then iLow = 0
    If iClos > kDim2 Then iClos = 0
    If iVol > kDim2 Then iVol = 0
    If iAdjC > kDim2 Then iAdjC = 0
    
    '------------------> Parse web quotes
    Dim sPrevDate As String
    vLine = Split(sqData, Chr(10))
    nLines = IIf(kDim1 - pNames < UBound(vLine) + pNames, kDim1 - pNames, UBound(vLine) + pNames)
    iRow = 1 - pNames - 1
    i1 = 1 - pNames - 1
    Do While iRow < nLines And i1 < UBound(vLine) + pNames
        i1 = i1 + 1
        If vLine(i1) = "" Then Exit Do
        vItem = Split(vLine(i1), ",")
        iRow = iRow + 1
        If iRow = 0 Then
           sAdjust = IIf(pAdjust = 1, "Adj. ", "")
           If iTick > 0 Then vData(iRow + pNames, iTick) = "Ticker"
           If iDate > 0 Then vData(iRow + pNames, iDate) = vItem(0)
           If iDiv > 0 Then vData(iRow + pNames, iDiv) = vItem(1)
           If iOpen > 0 Then vData(iRow + pNames, iOpen) = sAdjust & vItem(1)
           If iHigh > 0 Then vData(iRow + pNames, iHigh) = sAdjust & vItem(2)
           If iLow > 0 Then vData(iRow + pNames, iLow) = sAdjust & vItem(3)
           If iClos > 0 Then vData(iRow + pNames, iClos) = sAdjust & vItem(4)
           If iVol > 0 Then vData(iRow + pNames, iVol) = vItem(5)
           If iAdjC > 0 Then vData(iRow + pNames, iAdjC) = vItem(6)
        Else
           If sPrevDate = vItem(0) Then iRow = iRow - 1
           If iTick > 0 Then vData(iRow + pNames, iTick) = pTicker
           If iDate > 0 Then vData(iRow + pNames, iDate) = CDate(vItem(0))
           If iDiv > 0 Then vData(iRow + pNames, iDiv) = smfConvertData(vItem(1))
           sPrevDate = vItem(0)
           If pPeriod <> "v" Then
              If smfConvertData(vItem(4)) = 0 Or pAdjust <> 1 Then
                 nAdjust = 1
              Else
                 nAdjust = smfConvertData(vItem(6)) / smfConvertData(vItem(4))
                 End If
              If iOpen > 0 Then vData(iRow + pNames, iOpen) = smfConvertData(vItem(1)) * nAdjust
              If iHigh > 0 Then vData(iRow + pNames, iHigh) = smfConvertData(vItem(2)) * nAdjust
              If iLow > 0 Then vData(iRow + pNames, iLow) = smfConvertData(vItem(3)) * nAdjust
              If iClos > 0 Then vData(iRow + pNames, iClos) = smfConvertData(vItem(4)) * nAdjust
              If iVol > 0 Then vData(iRow + pNames, iVol) = smfConvertData(vItem(5))
              If iAdjC > 0 Then vData(iRow + pNames, iAdjC) = smfConvertData(vItem(6))
              End If
           End If
        Loop
    
    '------------------> Reverse the sort order of the data if requested
    If pResort = 1 Then
       Dim vTemp As Variant
       i1 = 1 + pNames
       i2 = iRow + pNames
       Do While i1 < i2
          For i3 = 1 To kDim2
              vTemp = vData(i1, i3)
              vData(i1, i3) = vData(i2, i3)
              vData(i2, i3) = vTemp
              Next i3
          i1 = i1 + 1
          i2 = i2 - 1
          Loop
       End If
    
ErrorExit:
    RCHGetYahooHistory2 = vData
    End Function
Attribute VB_Name = "modGetYahooJSONData"
Public Function smfGetYahooJSONField(ByVal pTicker As String, _
                                     ByVal pModule As String, _
                                     ByVal pField As String, _
                            Optional ByVal pStart As Double = 0)
                    
   '-----------------------------------------------------------------------------------------------------------*
   ' User defined function to extract fields from Yahoo's new JSON feeds for financial statements data
   '-----------------------------------------------------------------------------------------------------------*
   ' 2017.04.27 -- Created function (rharmelink@gmail.com)
   ' 2017.05.16 -- Add "portfolioView" processing
   ' 2017.05.16 -- Add "headlineNews" processing
   ' 2017.05.19 -- Add "barChartMM" processing
   ' 2017.07.05 -- Allow URL to be passed for a module
   ' 2017.10.12 -- Add error exit
   ' 2017.10.21 -- Fix "portfolioView" URL
   '-----------------------------------------------------------------------------------------------------------*
   ' > Example of an invocation:
   '
   '   =smfGetYahooJSONField("MMM", "cashFlowStatementHistory", "quoteSummary.result.0.cashflowStatementHistory.cashflowStatements.0.changeInCash.raw")
   '   =smfGetYahooJSONField("MMM", "financialData", "quoteSummary.result.0.financialData.targetMeanPrice.raw")
   '-----------------------------------------------------------------------------------------------------------*
                                    
   smfGetYahooJSONField = "Not Found"
   On Error GoTo ExitFunction
                                    
   Dim sURL As String, s1 As String
   Select Case True
      Case Left(pModule, 4) = "http"
           sURL = pModule
      Case pModule = "barChartMM"
           sURL = aConstants(1)
      Case pModule = "portfolioView"
           sURL = "https://query1.finance.yahoo.com/v7/finance/quote?fields=symbol,longName,shortName,regularMarketPrice,regularMarketTime,regularMarketChange," & _
                  "regularMarketDayHigh,regularMarketDayLow,regularMarketPrice,regularMarketOpen,regularMarketVolume,averageDailyVolume3Month,marketCap,bid,ask," & _
                  "dividendYield,dividendsPerShare,exDividendDate,trailingPE,priceToSales,targetPriceMean&formatted=false&symbols=" & pTicker
      Case pModule = "headlineNews"
           sURL = "https://query1.finance.yahoo.com/v2/finance/news?count=20&symbols=" & pTicker & "&start=" & pStart
      Case Else
           sURL = "https://query1.finance.yahoo.com/v10/finance/quoteSummary/" & pTicker & "?modules=" & pModule
      End Select
   s1 = RCHGetWebData(sURL)
   smfGetYahooJSONField = smfJSONExtractField(s1, pField)
   
ExitFunction:
   End Function


Public Function smfGetYahooJSONData(ByVal pTicker As String, _
                                    ByVal pModule As String, _
                                    ByVal pField As String, _
                           Optional ByVal pPeriod As Integer = 1, _
                           Optional ByVal pProcess As String = "raw")
                    
   '-----------------------------------------------------------------------------------------------------------*
   ' User defined function to extract fields from Yahoo's new JSON feeds for financial statements data
   '-----------------------------------------------------------------------------------------------------------*
   ' 2017.04.19 -- Created function (rharmelink@gmail.com)
   ' 2017.04.21 -- Add multi-level pField parameter
   '-----------------------------------------------------------------------------------------------------------*
   ' > Example of an invocation:
   '
   '   =smfGetYahooJSONData("MMM", "cashFlowStatementHistory", "changeInCash")
   '   =smfGetYahooJSONData("MMM","financialData","targetMeanPrice")
   '-----------------------------------------------------------------------------------------------------------*
                                      
   Dim sURL As String, s1 As String, aSplit As Variant, i1 As Integer
   smfGetYahooJSONData = "Error"
   Select Case Left(pModule, 4)
      Case "http": sURL = Replace(pModule, "~~~~~", pTicker)
      Case Else: sURL = "https://query1.finance.yahoo.com/v10/finance/quoteSummary/" & pTicker & "?modules=" & pModule
      End Select
   aSplit = Split(pField, ".")
   If pPeriod < 1 Then s1 = "" Else s1 = RCHGetWebData(sURL, """" & aSplit(0) & """:")
   For i1 = 1 To UBound(aSplit)
       pField = aSplit(i1)
       s1 = """" & pField & """:" & smfStrExtr(s1, """" & pField & """:", "~")
       Next i1
   s1 = smfWord(s1, pPeriod + 1, """" & pField & """:")
   s1 = smfStrExtr(s1, "~", "}")
   If Left(s1, 4) = "null" Then s1 = ""
   Select Case LCase(pProcess)
      Case "": s1 = smfStrExtr(s1, """", """")
      Case "fmt": s1 = smfStrExtr(s1, """fmt"":""", """")
      Case "raw": s1 = smfStrExtr(s1, """raw"":", ",")
      Case Else: s1 = smfStrExtr(s1, """raw"":", ",")
      End Select
   If s1 = "" Then s1 = "Not found"
   smfGetYahooJSONData = smfConvertData(s1)
   End Function

Attribute VB_Name = "modGetYahooQuotes"
Public Function RCHGetYahooQuotes(ByVal pTickers As Variant, _
                         Optional ByVal pItems As Variant = "sl1d1t1c1ohgv", _
                         Optional ByVal pServerID As String = "", _
                         Optional ByVal pRefresh As Variant = 0, _
                         Optional ByVal pHeader As Integer = 0, _
                         Optional ByVal pDim1 As Integer = 0, _
                         Optional ByVal pDim2 As Integer = 0, _
                         Optional ByVal pDelimiter As String = ",") ' As Variant()
                    
    '-----------------------------------------------------------------------------------------------------------*
    ' User defined function to download historical quotes from Yahoo!
    '-----------------------------------------------------------------------------------------------------------*
    ' 2005.02.16 -- New function; Adapted from other VBA modules
    ' 2005.06.18 -- Add code to convert numeric items to values instead of leaving as strings
    ' 2006.08.08 -- Return Yahoo response if no data can be parsed from the response
    ' 2006.08.17 -- Fixed kDim1/kDim2 processing using iDim1/iDim2
    ' 2006.08.18 -- Fixed line parsing to allow for double-quoted fields in comma-delimited data
    ' 2006.09.12 -- Fixed line parsing for truncation of last digit of non-double-quoted fields
    ' 2006.09.12 -- Added pServerPrefix parameter
    ' 2007.01.17 -- Change CCur() usage to CDec() because of precision issues
    ' 2007.01.19 -- Change URL of quotes server
    ' 2007.08.28 -- Change end-of-line (CR+LF) processing to handle changes in data files
    ' 2007.08.28 -- Convert strings with percentage values into actual percents
    ' 2007.08.30 -- Added pRefresh parameter to allow easy recalculation using NOW() as its passed value
    ' 2007.09.18 -- Modify pDim1/pDim2 processing
    ' 2007.09.26 -- Added pHeader parameter to allow insertion of column headings
    ' 2008.03.10 -- Added another double carriage return removal from parsing process
    ' 2008.07.17 -- Added ability to process any passed URL for a CSV file
    ' 2009.09.28 -- Added pDelimiter parameter
    ' 2010.04.21 -- Modify pDim1/pDim2 processing so return size can be overridden
    ' 2010.05.15 -- Make sure returned string is no longer than 255 bytes (causes #VALUE! error)
    ' 2011.04.28 -- Change cDec() to smfConvertData()
    ' 2011.07.03 -- Add LCASE() function to sItems concatenation to URL
    ' 2012.06.11 -- Force pServerID to be the U.S. server
    ' 2014.01.14 -- Use "XXXXXX" as a placeholder symbol where spaces are found in the passed ticker array
    ' 2014.05.23 -- Prevent "XXXXXX" placeholder lines from having data displayed
    ' 2015.06.08 -- Fix for unexpected "," field in GuruFocus CSV file that stopped parsing
    ' 2016.05.18 -- Modify heading creation to ease transition between operating systems
    ' 2017.04.26 -- Change "http://" protocol to "https://"
    ' 2017.05.31 -- Add alternative process to get CSV file if "&crumb=" is in the URL
    '-----------------------------------------------------------------------------------------------------------*
    ' > Examples of invocations to get current quotes for IBM and MMM:
    '
    '   =RCHGetYahooQuotes("IBM,MMM")
    '   =RCHGetYahooQuotes("IBM,MMM",,,NOW())
    '   =RCHGetYahooQuotes("IBM,MMM","l1d1t1",,NOW(),1)
    '-----------------------------------------------------------------------------------------------------------*
    
    Dim sURL As String
    Dim sItems As String
    
    '------------------> Determine size of array to return
    kDim1 = pDim1  ' Rows
    kDim2 = pDim2  ' Columns
    If pDim1 = 0 Or pDim2 = 0 Then
       If pDim1 = 0 Then kDim1 = 200   ' Old default
       If pDim2 = 0 Then kDim2 = 100   ' Old default
       On Error Resume Next
       kDim1 = Application.Caller.Rows.Count
       kDim2 = Application.Caller.Columns.Count + 1
       On Error GoTo ErrorExit
       End If
  
    '------------------> Initialize return array
    ReDim vData(1 To kDim1, 1 To kDim2) As Variant
    For i1 = 1 To kDim1
        For i2 = 1 To kDim2
            vData(i1, i2) = ""
            Next i2
        Next i1
    
    '------------------> Create URL
    Select Case VarType(pItems)
        Case vbString
             sItems = Replace(pItems, " ", "")
        Case Is >= 8192
             sItems = ""
             For Each oCell In pItems
                 sItems = sItems & oCell.Value
                 Next oCell
        Case Else
            GoTo ErrorExit
        End Select
    Select Case VarType(pTickers)
        Case vbString
             If pTickers = "None" Then GoTo ErrorExit
             sTickers = Replace(pTickers, ",", "+")
        Case Is >= 8192
             sTickers = ""
             For Each oCell In pTickers
                 If oCell.Value > " " Then
                    sTickers = sTickers & oCell.Value & "+"
                 Else
                    sTickers = sTickers & "XXXXXX" & "+"
                    End If
                 Next oCell
             sTickers = Left(sTickers, Len(sTickers) - 1)
        Case Else
            GoTo ErrorExit
        End Select
        
    '------------------> Set the quotes delimiter based on server prefix
    pServerID = ""     ' Temporary?
    Select Case pServerID
        Case ""
             sURL = "https://download.finance.yahoo.com/d/quotes.csv?s="
        Case "jp"
             sURL = "https://finance.yahoo.com." & pServerPrefix & "/d/quotes.csv?s="
        Case "mx"
             sURL = "https://" & pServerID & ".finance.yahoo.com/d/quotes.csv?s="
             sTickers = Replace(sTickers, "+", ",")
        Case Else
             sURL = "https://" & pServerID & ".finance.yahoo.com/d/quotes.csv?s="
        End Select
    sItems = LCase(sItems)
    sURL = sURL & sTickers & "&f=s" & sItems & "&e=.ignore"
    
    '------------------> Set the quotes delimiter based on server prefix
    Select Case pServerID
        Case "ar", "fr", "de", "it"
             sDel = ";"
        Case Else
             sDel = ","
        End Select
    
    '------------------> Create column headings if requested
    If pHeader = 1 Then
       iPos = 1
       iPtr = 1
       Do While (iPos <= Len(sItems))
          sTemp = smfYahooCodeDesc(Mid(sItems & " ", iPos, 2))
          If sTemp = "--" Then
             sTemp = smfYahooCodeDesc(Mid(sItems, iPos, 1))
             iPos = iPos + 1
          Else
             iPos = iPos + 2
             End If
          If iPtr > kDim2 Then Exit Do
          vData(1, iPtr) = sTemp
          iPtr = iPtr + 1
          Loop
       
       End If
    
    '------------------> Overrides for specified CSV file
    If sItems = "" Then
       sURL = pTickers
       pHeader = 0
       sDel = pDelimiter
       iOffset = 0
    Else
       iOffset = -1
       End If
    
    '------------------> Download current quotes
    If InStr(sURL, "&crumb=") > 0 Then
       sqData = smfGetYahooHistoryCSVData(sURL)
    Else
       sqData = RCHGetURLData(sURL) '& Chr(13)
       End If
    vData(1 + pHeader, 1) = sqData
    
    '------------------> Parse returned data
    'sqData = Replace(sqData, Chr(10), Chr(13))
    'sqData = Replace(sqData, Chr(13) & Chr(13), Chr(13))
    'sqData = Replace(sqData, Chr(13) & Chr(13), Chr(13))
    sqData = Replace(sqData, vbCrLf, vbLf)
    sqData = Replace(sqData, ""","","",""", ""","" "",""")  ' Fix for GuruFocus?
    aqData = Split(sqData, vbLf)
    iDim1 = UBound(aqData, 1)
    If iDim1 > kDim1 Then iDim1 = kDim1
    For i1 = 0 To iDim1 - 1
        iPos1 = 1
        For i2 = 0 To 200
            If i2 + 1 > kDim2 Then Exit For
            If iPos1 > Len(aqData(i1)) Then Exit For
            sFind = IIf(Mid(aqData(i1), iPos1, 1) = Chr(34), Chr(34), "") & sDel
            iPos2 = InStr(iPos1, aqData(i1) & sDel, sFind)
            s1 = Left(Mid(aqData(i1), iPos1 + Len(sFind) - 1, iPos2 - iPos1 - Len(sFind) + 1), 255)
            s2 = Trim(s1)
            If iOffset = -1 And s2 = "XXXXXX" Then Exit For
            If Right(s2, 1) = "%" Then
               n1 = 100
               s2 = Left(s2, Len(s2) - 1)
            Else
               n1 = 1
               End If
            On Error Resume Next
            s1 = smfConvertData(s2) / n1
            On Error GoTo ErrorExit
            If iOffset = 0 Or i2 > 0 Then vData(i1 + 1 + pHeader, i2 + 1 + iOffset) = s1
            iPos1 = iPos2 + Len(sFind)
            Next i2
        Next i1

ErrorExit:
    RCHGetYahooQuotes = vData
    End Function

Function smfYahooCodeDesc(pCode As String)
                    
    '-----------------------------------------------------------------------------------------------------------*
    ' User defined function to give a description to a Yahoo code (to be used for column headings)
    '-----------------------------------------------------------------------------------------------------------*
    ' 2007.09.09 -- Created function
    '-----------------------------------------------------------------------------------------------> Version 2.0h
    ' > Examples of an invocation:
    '
    '   =smfYahooCodeDesc("l1")
    '   =smfYahooCodeDesc(A1)
    '-----------------------------------------------------------------------------------------------------------*

    Select Case pCode
       Case "a": smfYahooCodeDesc = "Ask"
       Case "a2": smfYahooCodeDesc = "Average Daily Volume"
       Case "a5": smfYahooCodeDesc = "Ask Size"
       Case "b": smfYahooCodeDesc = "Bid"
       Case "b2": smfYahooCodeDesc = "Ask (ECN)"
       Case "b3": smfYahooCodeDesc = "Bid (ECN)"
       Case "b4": smfYahooCodeDesc = "Book Value"
       Case "b6": smfYahooCodeDesc = "Bid Size"
       Case "c": smfYahooCodeDesc = "Change & Percent"
       Case "c1": smfYahooCodeDesc = "Change"
       Case "c6": smfYahooCodeDesc = "Change (ECN)"
       Case "c8": smfYahooCodeDesc = "After Hours Change (ECN)"
       Case "d": smfYahooCodeDesc = "Dividend/Share"
       Case "d1": smfYahooCodeDesc = "Date of Last Trade"
       Case "e": smfYahooCodeDesc = "Earnings/Share"
       Case "e3": smfYahooCodeDesc = "Expiration date"
       Case "e7": smfYahooCodeDesc = "EPS Est. Current Yr"
       Case "e8": smfYahooCodeDesc = "EPS Est. Next Year"
       Case "e9": smfYahooCodeDesc = "EPS Est. Next Quarter"
       Case "f6": smfYahooCodeDesc = "Float Shares"
       Case "g": smfYahooCodeDesc = "Low"
       Case "g5": smfYahooCodeDesc = "Holdings Gain & Percent (ECN)"
       Case "g6": smfYahooCodeDesc = "Holdings Gain (ECN)"
       Case "h": smfYahooCodeDesc = "High"
       Case "i5": smfYahooCodeDesc = "Order Book (ECN)"
       Case "j": smfYahooCodeDesc = "52-week Low"
       Case "j": smfYahooCodeDesc = "52-week Low"
       Case "j1": smfYahooCodeDesc = "Market Capitalization"
       Case "j3": smfYahooCodeDesc = "Market Cap (ECN)"
       Case "j4": smfYahooCodeDesc = "EBITDA"
       Case "j5": smfYahooCodeDesc = "Change From 52-week Low"
       Case "j6": smfYahooCodeDesc = "Pct Chg From 52-week Low"
       Case "k": smfYahooCodeDesc = "52-week High"
       Case "k": smfYahooCodeDesc = "52-week High"
       Case "k1": smfYahooCodeDesc = "Last Trade (ECN with Time)"
       Case "k2": smfYahooCodeDesc = "Change & Percent (ECN)"
       Case "k3": smfYahooCodeDesc = "Last Trade Size"
       Case "k4": smfYahooCodeDesc = "Change From 52-week High"
       Case "k5": smfYahooCodeDesc = "Pct Chg From 52-week High"
       Case "l": smfYahooCodeDesc = "Last Trade (With Time)"
       Case "l1": smfYahooCodeDesc = "Last Trade"
       Case "m": smfYahooCodeDesc = "Day's Range"
       Case "m2": smfYahooCodeDesc = "Day's Range (ECN)"
       Case "m3": smfYahooCodeDesc = "50-day Moving Avg"
       Case "m4": smfYahooCodeDesc = "200-day Moving Avg"
       Case "m5": smfYahooCodeDesc = "Change From 200-day Moving Avg"
       Case "m6": smfYahooCodeDesc = "% off 200-day Avg"
       Case "m7": smfYahooCodeDesc = "Change From 50-day Moving Avg"
       Case "m8": smfYahooCodeDesc = "% off 50-day Avg"
       Case "n": smfYahooCodeDesc = "Name"
       Case "n": smfYahooCodeDesc = "Name of option"
       Case "o": smfYahooCodeDesc = "Open"
       Case "o1": smfYahooCodeDesc = "Open interest?"
       Case "p": smfYahooCodeDesc = "Previous Close"
       Case "p2": smfYahooCodeDesc = "Percent Change"
       Case "p3": smfYahooCodeDesc = "Type of option"
       Case "p5": smfYahooCodeDesc = "Price/Sales"
       Case "p6": smfYahooCodeDesc = "Price/Book"
       Case "q": smfYahooCodeDesc = "Ex-Dividend Date"
       Case "r": smfYahooCodeDesc = "P/E Ratio"
       Case "r1": smfYahooCodeDesc = "Dividend Pay Date"
       Case "r2": smfYahooCodeDesc = "P/E (ECN)"
       Case "r5": smfYahooCodeDesc = "PEG Ratio"
       Case "r6": smfYahooCodeDesc = "Price/EPS Est. Current Yr"
       Case "r7": smfYahooCodeDesc = "Price/EPS Est. Next Yr"
       Case "s": smfYahooCodeDesc = "Symbol"
       Case "s3": smfYahooCodeDesc = "Strike price"
       Case "s7": smfYahooCodeDesc = "Short Ratio"
       Case "t1": smfYahooCodeDesc = "Time of Last Trade"
       Case "t7": smfYahooCodeDesc = "Ticker Trend"
       Case "t8": smfYahooCodeDesc = "1yr Target Price"
       Case "v": smfYahooCodeDesc = "Volume"
       Case "v7": smfYahooCodeDesc = "Holdings Value (ECN)"
       Case "w": smfYahooCodeDesc = "52-week Range"
       Case "w4": smfYahooCodeDesc = "Day's Value Change (ECN)"
       Case "x": smfYahooCodeDesc = "Exchange"
       Case "y": smfYahooCodeDesc = "Dividend Yield"
       Case Else: smfYahooCodeDesc = "--"
       End Select

    End Function
Attribute VB_Name = "modInCellChart"
Function smfInCellChart(pVector As Variant, _
               Optional pType As String = "Line", _
               Optional pColor As Long = 203) As String
    
    '-----------------------------------------------------------------------------------------------------------*
    ' Function to create "in cell" charts -- line charts, bar charts, or slope of linear regression
    '-----------------------------------------------------------------------------------------------------------*
    ' 2007.09.12 -- Adapted from http://www.dailydoseofexcel.com/archives/2006/02/05/in-cell-charting/
    ' 2007.09.13 -- Change rCaller .Height and .Width attributes to its MergeArea equivalents
    ' 2007.09.13 -- Add ability to pass a column of data instead of just a row
    '-----------------------------------------------------------------------------------------------> Version 2.0g
    ' 2007.09.18 -- Fix range/array processing for Trend/Min/Max functions
    ' 2007.09.24 -- Move code to delete previous shapes closer to top of module
    '-----------------------------------------------------------------------------------------------> Version 2.0h
    ' Examples of usage:
    '
    '        =smfInCellCharts(A14:I14)
    '        =smfInCellCharts(A14:I14, "Line",  203)
    '        =smfInCellCharts(A14:I14, "Bar",   203)
    '        =smfInCellCharts(A14:I14, "Slope", 203)
    '-----------------------------------------------------------------------------------------------------------*

    Const cMargin = 2       ' A margin to buffer the usable cell area
    Const cGap = 1          ' Size of gap to use between bar charts
    Dim rCaller As Range    ' The calling range for the function
    Dim oRange As Range, oShape As Shape
    Dim dMin As Double, dMax As Double
    Dim dBegX As Double, dBigY As Double
    Dim dEndX As Double, dEndY As Double
    Dim iSize As Integer
    Dim dHeight As Double, dWidth As Double, dTop As Double, dLeft As Double
 
    smfInCellChart = ""
    
    '----------------------------------> Identify the calling range
    Set rCaller = Application.Caller
    dHeight = rCaller.MergeArea.Height
    dWidth = rCaller.MergeArea.Width
    dLeft = rCaller.MergeArea.Left
    dTop = rCaller.MergeArea.Top
 
    '----------------------------------> Delete existing shapes in the calling range
    For Each oShape In rCaller.Worksheet.Shapes
        Set oRange = Intersect(Range(oShape.TopLeftCell, oShape.BottomRightCell), rCaller.MergeArea)
        If Not oRange Is Nothing Then
           If oRange.Address = Range(oShape.TopLeftCell, oShape.BottomRightCell).Address Then oShape.Delete
           End If
        Next oShape
    
    '----------------------------------> Copy input range/array to standard array area
    On Error Resume Next
    iSize = UBound(pVector)
    iSize = pVector.Count
    On Error GoTo 0

    ReDim vData(1 To iSize) As Double
    i = 0
    For Each oItem In pVector
        i = i + 1
        vData(i) = oItem
        Next oItem
    
    '------------------> Determine type of chart to create
    
    Select Case UCase(pType)
       Case "BAR": GoTo Bar_Chart
       Case "LINE": GoTo Line_Chart
       Case "SLOPE": GoTo Slope_Chart
       Case Else
            smfInCellChart = "Incorrect type of chart: " & pType
            GoTo ExitFunction
       End Select

'------------------> Create a bar chart
Bar_Chart:
    Dim sngLeft As Single, sngTop As Single, sngWidth As Single, sngHeight As Single
    Dim sngMin As Single, sngMax As Single, shp As Shape

    '------------------> Determine minimum and maximum chartable values
    dMin = Application.WorksheetFunction.Min(vData)
    dMax = Application.WorksheetFunction.Max(vData)
    If dMin > 0 Then dMin = 0
    If dMin = dMax Then
       dMin = dMin - 1
       dMax = dMax + 1
       End If

    '------------------> Draw the bar for each data point
    With rCaller.Worksheet.Shapes
         For i = 0 To iSize - 1
             sngIntv = (dHeight - (cMargin * 2)) / (dMax - dMin)
             sngLeft = cMargin + cGap + dLeft + (i * (dWidth - (cMargin * 2)) / iSize)
             sngTop = cMargin + dTop + (dMax - IIf(vData(i + 1) < 0, 0, vData(i + 1))) * sngIntv
             sngWidth = (dWidth - (cMargin * 2)) / iSize - (cGap * 2)
             sngHeight = Abs(vData(i + 1)) * sngIntv
             With .AddShape(msoShapeRectangle, sngLeft, sngTop, sngWidth, sngHeight)
                  If pColor > 0 Then .Fill.ForeColor.RGB = pColor Else .Fill.ForeColor.SchemeColor = -pColor
                  End With
             Next i
         End With

    GoTo ExitFunction

'------------------> Create a line chart
Line_Chart:

    '------------------> Determine minimum and maximum chartable values
    dMin = Application.WorksheetFunction.Min(vData)
    dMax = Application.WorksheetFunction.Max(vData)
    If dMin = dMax Then
       dMin = dMin - 1
       dMax = dMax + 1
       End If
    
    '------------------> Draw the lines for each pair of data points
    With rCaller.Worksheet.Shapes
         For i = 0 To iSize - 2
             dBegX = cMargin + dLeft + (i * (dWidth - (cMargin * 2)) / (iSize - 1))
             dBegY = cMargin + dTop + (dMax - vData(i + 1)) * (dHeight - (cMargin * 2)) / (dMax - dMin)
             dEndX = cMargin + dLeft + ((i + 1) * (dWidth - (cMargin * 2)) / (iSize - 1))
             dEndY = cMargin + dTop + (dMax - vData(i + 2)) * (dHeight - (cMargin * 2)) / (dMax - dMin)
             With .AddLine(dBegX, dBegY, dEndX, dEndY)
                  If pColor > 0 Then .Line.ForeColor.RGB = pColor Else .Line.ForeColor.SchemeColor = -pColor
                  End With
             Next i
         End With

    GoTo ExitFunction
    
'------------------> Create a chart of a linear regression slope line
Slope_Chart:

    '------------------> Create linear regression trend line
    vTrend = Application.WorksheetFunction.Trend(vData())

    '------------------> Determine minimum and maximum chartable values
    dMin = Application.WorksheetFunction.Min(vData, vTrend)
    dMax = Application.WorksheetFunction.Max(vData, vTrend)
    If dMin = dMax Then
       dMin = dMin - 1
       dMax = dMax + 1
       End If
    
    '------------------> Draw the regression line
    With rCaller.Worksheet.Shapes
         dBegX = cMargin + dLeft
         dBegY = cMargin + dTop + (dMax - vTrend(1)) * (dHeight - (cMargin * 2)) / (dMax - dMin)
         dEndX = dLeft + dWidth - cMargin
         dEndY = cMargin + dTop + (dMax - vTrend(iSize)) * (dHeight - (cMargin * 2)) / (dMax - dMin)
         With .AddLine(dBegX, dBegY, dEndX, dEndY)
              If pColor > 0 Then .Line.ForeColor.RGB = pColor Else .Line.ForeColor.SchemeColor = -pColor
              .Line.BeginArrowheadStyle = msoArrowheadOval
              .Line.BeginArrowheadLength = msoArrowheadShort
              .Line.BeginArrowheadWidth = msoArrowheadNarrow
              .Line.EndArrowheadStyle = msoArrowheadStealth
              End With
         End With
    
    GoTo ExitFunction
    
ExitFunction:
    End Function

Attribute VB_Name = "modJSONExtract"
Option Explicit

Private ScriptEngine As ScriptControl

Public Sub InitScriptEngine()
    Set ScriptEngine = New ScriptControl
    ScriptEngine.Language = "JScript"
    ScriptEngine.AddCode "function getProperty(jsonObj, propertyName) { return jsonObj[propertyName]; } "
    ScriptEngine.AddCode "function getKeys(jsonObj) { var keys = new Array(); for (var i in jsonObj) { keys.push(i); } return keys; } "
End Sub

Public Function DecodeJsonString(ByVal JsonString As String)
    Set DecodeJsonString = ScriptEngine.Eval("(" + JsonString + ")")
End Function

Public Function GetProperty(ByVal JsonObject As Object, ByVal propertyName As String) As Variant
    GetProperty = ScriptEngine.Run("getProperty", JsonObject, propertyName)
End Function

Public Function GetObjectProperty(ByVal JsonObject As Object, ByVal propertyName As String) As Object
    Set GetObjectProperty = ScriptEngine.Run("getProperty", JsonObject, propertyName)
End Function

Public Function GetKeys(ByVal JsonObject As Object) As String()
    Dim Length As Integer
    Dim KeysArray() As String
    Dim KeysObject As Object
    Dim Index As Integer
    Dim Key As Variant

    Set KeysObject = ScriptEngine.Run("getKeys", JsonObject)
    Length = GetProperty(KeysObject, "length")
    ReDim KeysArray(Length - 1)
    Index = 0
    For Each Key In KeysObject
        KeysArray(Index) = Key
        Index = Index + 1
    Next
    GetKeys = KeysArray
End Function

Function smfJSONExtractField(pJSONData As String, pFieldName As String)
    Dim a1 As Variant, i1 As Integer, oJSON As Object

    InitScriptEngine
    
    a1 = Split(pFieldName, ".")
    
    Set oJSON = DecodeJsonString(CStr(pJSONData))
    For i1 = 0 To UBound(a1) - 1
        Set oJSON = GetObjectProperty(oJSON, a1(i1))
        Next i1
        
    smfJSONExtractField = GetProperty(oJSON, a1(i1))
    If smfJSONExtractField = Empty Then smfJSONExtractField = "Not Found"

    End Function

Function smfJSONExtractKeys(pJSONData As String, pFieldName As String)
    Dim a1 As Variant, i1 As Integer, o1 As Object, oJSON As Object, v1 As Variant, vReturn As Variant

    InitScriptEngine
    
    a1 = Split(pFieldName, ".")
    
    Set oJSON = DecodeJsonString(CStr(pJSONData))
    For i1 = 0 To UBound(a1)
        Set oJSON = GetObjectProperty(oJSON, a1(i1))
        Next i1
        
    v1 = GetKeys(oJSON)
    ReDim vReturn(1 To UBound(v1) + 2, 1 To 1)
    For i1 = 0 To UBound(v1)
        vReturn(i1 + 1, 1) = v1(i1)
        Next i1
    vReturn(i1 + 1, 1) = "#N/A"
    smfJSONExtractKeys = vReturn
    
    End Function


Attribute VB_Name = "modMStarReturns"
Option Explicit
Public Function smfGetMorningstarHistReturns(pTicker As String, _
                              Optional ByVal pFreq As String = "m", _
                              Optional ByVal pYears As Integer = 5, _
                              Optional ByVal pDim1 As Integer = 0, _
                              Optional ByVal pError As Variant = "Error")
                              
    '-------------------------------------------------------------------------------------------------------*
    ' 2014.06.01 -- Created function to get historical returns from Morningstar, monthly ("m") or qtrly ("q")
    '-------------------------------------------------------------------------------------------------------*

    Dim iEnd As Integer, iYear As Integer, iPeriod As Integer, iCount As Integer
    Dim iYearDate As Variant
    Dim kDim1 As Integer, kDim2 As Integer, i1 As Integer, i2 As Integer
    Dim sURL As String
    
    On Error GoTo ErrorExit
    
    '------------------> Null Return Item
    If pTicker = "None" Or pTicker = "" Then
       ReDim vData(1 To 1, 1 To 1) As Variant
       vData(1, 1) = "None"
       smfGetMorningstarHistReturns = vData
       Exit Function
       End If
    
    '------------------> Determine size of array to return
    kDim1 = pDim1  ' Rows
    kDim2 = 2      ' Columns
    If pDim1 = 0 Then
       On Error Resume Next
       kDim1 = Application.Caller.Rows.Count
       kDim2 = Application.Caller.Columns.Count
       On Error GoTo ErrorExit
       End If
    If kDim2 = 1 Then kDim2 = 2
  
    '------------------> Initialize return array
    ReDim vData(1 To kDim1, 1 To kDim2) As Variant
    For i1 = 1 To kDim1
        For i2 = 1 To kDim2
            vData(i1, i2) = ""
            Next i2
        Next i1
    
    '------------------> Create initial values
    sURL = "http://performance.morningstar.com/Performance/fund/historical-returns.action?ndec=3&y=" & pYears & "&freq=" & pFreq & "&t=" & pTicker
    iEnd = IIf(pFreq = "m", 11, 3)
    iYear = 0
    iCount = 0
    iPeriod = smfStrExtr(smfGetTagContent(sURL, "tr", -1, "year0_" & pFreq), "_" & pFreq, """") - 1
    
    '------------------> Extract each period until there are no more
    Do While True
       
       iPeriod = IIf(iPeriod = iEnd, 0, iPeriod + 1)
       If iPeriod = 0 Then iYear = iYear + 1
       iYearDate = RCHGetTableCell(sURL, -1, "year" & iYear)
       If iYearDate = "Error" Then Exit Do
       
       iCount = iCount + 1
       vData(iCount, 1) = DateSerial(iYearDate, 13 - IIf(pFreq = "m", 1, 3) * iPeriod, 0)
       vData(iCount, 2) = RCHGetTableCell(sURL, 1, "year" & iYear & "_" & pFreq & iPeriod) / 100
       
       If iCount = kDim1 Then Exit Do
       
       Loop
    
    smfGetMorningstarHistReturns = vData
    Exit Function

ErrorExit:
    smfGetMorningstarHistReturns = pError
    End Function


Attribute VB_Name = "modMacCode"
Public cookieArr As Variant
Public iCookieInit As Integer

'-----------------------------------------------------------
'Retrieve Data from Internet for Macintosh
'written by Paul Dyson
'-----------------------------------------------------------
'2016.05.17 -- version1.0
'   If a login is required, the function only works for Morningstar but can be amended for other sites
'2016.05.22 - allow login for any site by placing cookie file in addin location using syntax URL_cookie.txt
'2016.05.22 - adjust for zack site http error
'-----------------------------------------------------------

Public Function RCHGetURLData1Mac(pURL As String, _
                   Optional ByVal pUseIE As Integer = 0) As String
                        
    
    Dim ScriptToRun As String
    Dim iloc As Integer
    
    'Get path to addin in bash form
'    fPath = ThisWorkbook.Path & Application.PathSeparator
'    fPath = Replace(fPath, ":", "/")
'    pos1 = InStr(fPath, "/")
'    bPath = Right(fPath, Len(fPath) - pos1 + 1)
    bPath = bashPath
    
    Select Case True
        Case pUseIE = 3: pType = "--data "
        Case Else: pType = "--get "
    
    End Select
    
    'curl throws an ssl error with http://www.zack...
    'replace http with https
    If InStr(pURL, "zack") > 0 Then
        pURL = Replace(pURL, "http", "https")
    End If
    
    If iCookieInit <> 1 Then
        cookieArr = cookieFiles
        iCookieInit = 1
    End If
    
    iloc = 999
    For i = 0 To UBound(cookieArr)
    
        If InStr(pURL, cookieArr(i, 0)) > 1 Then
            iloc = i
            Exit For
        End If
    
    Next i
    
    If iloc = 999 Then
        ScriptToRun = "do shell script " & Chr(34) & "curl -L " & pType & " '" & pURL & "'" & Chr(34)
    Else
        If InStr(pURL, "bonds") = 0 Then
            ScriptToRun = "do shell script " & Chr(34) & "curl -L -b '" & bPath & cookieArr(iloc, 1) & "' " & pType & " '" & pURL & "'" & Chr(34)
        Else
            ScriptToRun = "do shell script " & Chr(34) & "curl -L " & pType & " '" & pURL & "'" & Chr(34)
        End If
    End If
        
            
    RCHGetURLData1Mac = MacScript(ScriptToRun)
    ebitLoc = InStr(RCHGetURLData1Mac, "EBITDA")
    If InStr(RCHGetURLData1Mac, Chr(13)) = 0 Then
        RCHGetURLData1Mac = RCHGetURLData1Mac & vbCrLf
        Else
        RCHGetURLData1Mac = Replace(RCHGetURLData1Mac, Chr(13), vbCrLf)
        ebitLoc = InStr(RCHGetURLData1Mac, "EBITDA")
        'changed  & Chr(13) to vbCrLf
        RCHGetURLData1Mac = RCHGetURLData1Mac & vbCrLf
        ebitLoc = InStr(RCHGetURLData1Mac, "EBITDA")
    End If
    
    End Function

Private Function cookieFiles() As Variant

    Dim arr As Variant
    Dim retArr() As String
    Dim result As String
    Dim fPath As String
    Dim pos1 As Integer
    Dim bPath As String
    
    bPath = bashPath
    
    ScriptToRun = "do shell script " & Chr(34) & "find '" & bPath & "' -name '*_cookie.txt' -type f | awk -F/ '{print $NF}'" & Chr(34)
    result = MacScript(ScriptToRun)
    arr = Split(result, Chr(13))
    ArrSize = UBound(arr)
    ReDim retArr(ArrSize, 1)
    
    For i = 0 To ArrSize
        splitString = Split(arr(i), "_")
        retArr(i, 0) = splitString(0)
        retArr(i, 1) = arr(i)
    Next i
    
    cookieFiles = retArr

End Function

Private Function bashPath()

    Dim fPath As String
    Dim pos1 As Integer

    fPath = ThisWorkbook.Path & Application.PathSeparator
    fPath = Replace(fPath, ":", "/")
    pos1 = InStr(fPath, "/")
    bashPath = Right(fPath, Len(fPath) - pos1 + 1)

End Function


Attribute VB_Name = "modMenu"
'-----------------------------------------------------------------------------------------------------------*
' 2014.05.31 -- Originally added all menu routines, thanks go to Andrei Radulescu-Banu
' 2014.06.13 -- Add smfASyncOff and smfASyncOn
' 2017.05.05 -- Add LoadElementsFromFile(21) call
' 2017.05.19 -- Add LoadElementsFromFile(22) call
' 2017.11.08 -- Fix smfMenuRecalculateSelection processing of sWebCache
'-----------------------------------------------------------------------------------------------------------*

Private Const sMenuTag As String = "smfCellControlTag"

Private Sub smfAddToCellMenu()
    Dim ContextMenu As CommandBar
    Dim MySubMenu As CommandBarControl, MySubMenu2 As CommandBarControl

    ' Delete the controls first to avoid duplicates.
    Call smfDeleteFromCellMenu

    ' Set ContextMenu to the Cell context menu.
    Set ContextMenu = Application.CommandBars("Cell")

    ' Add a custom submenu with three buttons.
    Set MySubMenu = ContextMenu.Controls.Add(Type:=msoControlPopup)

    With MySubMenu
        .Caption = "SMF"
        .Tag = sMenuTag
        
        With .Controls.Add(Type:=msoControlButton)
            .OnAction = "smfMenuRecalculateSelection"
            .FaceId = 37
            .Caption = "Recalculate Selection"
        End With
        
        With .Controls.Add(Type:=msoControlButton)
            .OnAction = "smfForceRecalculation"
            .FaceId = 37
            .Caption = "Recalcuate Worksheet"
        End With
        
        
        With .Controls.Add(Type:=msoControlButton)
            .OnAction = "smfFixLinks"
            .FaceId = 5681
            .Caption = "Fix Links"
            .BeginGroup = True
        End With
       
        With .Controls.Add(Type:=msoControlButton)
            .OnAction = "smfUpdateDownloadTable"
            .FaceId = 8
            .Caption = "Update Download Table"
        End With
        
        With .Controls.Add(Type:=msoControlButton)
             .OnAction = "smfASyncOn"
             .FaceId = 1664
             .Caption = "Enable Asynchronous processing"
             .BeginGroup = True
             End With
        
        With .Controls.Add(Type:=msoControlButton)
             .OnAction = "smfASyncOff"
             .FaceId = 51
             .Caption = "Disable Asynchronous processing (default)"
             End With
       
        'With .Controls.Add(Type:=msoControlButton)
        '    .OnAction = "smfEnableWebCache"
        '    .FaceId = 1664
        '    .Caption = "Enable Web Cache"
        'End With
       
        'With .Controls.Add(Type:=msoControlButton)
        '    .OnAction = "smfDisableWebCache"
        '    .FaceId = 51
        '    .Caption = "Disable Web Cache"
        'End With
       
        Set MySubMenu2 = .Controls.Add(Type:=msoControlPopup)
        With MySubMenu2
            .Caption = "Logging"
            .Tag = sMenuTag
            .BeginGroup = True
            With .Controls.Add(Type:=msoControlButton)
                .OnAction = "smfMenuEnableLog"
                .FaceId = 1664
                .Caption = "Enable"
            End With
            With .Controls.Add(Type:=msoControlButton)
                .OnAction = "smfMenuDisableLog"
                .FaceId = 51
                .Caption = "Disable"
            End With
            With .Controls.Add(Type:=msoControlButton)
                .OnAction = "smfOpenLogFile"
                .FaceId = 1923
                .Caption = "Open Log File"
            End With
            With .Controls.Add(Type:=msoControlButton)
                .OnAction = "smfMenuDeleteLogFile"
                .FaceId = 1668
                .Caption = "Delete Log File"
            End With
        End With
    End With

    ' Add a separator to the Cell context menu.
    'ContextMenu.Controls(4).BeginGroup = True
End Sub

Private Sub smfDeleteFromCellMenu()
    Dim ContextMenu As CommandBar
    Dim ctrl As CommandBarControl

    ' Set ContextMenu to the Cell context menu.
    Set ContextMenu = Application.CommandBars("Cell")

    ' Delete the custom controls with the Tag : "smfCellControlTag".
    For Each ctrl In ContextMenu.Controls
        If ctrl.Tag = sMenuTag Then
            ctrl.Delete
        End If
    Next ctrl

End Sub

Private Sub smfMenuRecalculateSelection()
    ' Disable the cache and recalculate the selected range
    sWebCache = "N"
    Selection.Dirty
    On Error Resume Next
    Selection.Calculate
    sWebCache = "Y"
End Sub


Private Sub smfMenuEnableLog()
    Call smfLogInternetCalls("Y")
End Sub

Private Sub smfMenuDisableLog()
    Call smfLogInternetCalls("N")
End Sub

Private Sub smfMenuDeleteLogFile()
    Call smfLogInternetCalls("RESET")
End Sub

Sub Auto_Open()
    'Executed when the first workbook is open. This installs the menu.
    Call smfAddToCellMenu
    Call LoadElementsFromFile(21)
    Call LoadElementsFromFile(22)

End Sub

Sub Auto_Close()
    'Executed when the last workbook is closed. This uninstalls the menu
    Call smfDeleteFromCellMenu
End Sub
Attribute VB_Name = "modPictureInsert"
Public Sub RCHInsertPicture(ByVal Target As Range)
    '-----------------------------------------------------------------------------------------------------------*
    ' Subroutine to insert/update a picture within a cell based on cell content ("Image: http://...")
    '-----------------------------------------------------------------------------------------------------------*
    ' 2005.02.01 -- New subroutine; still under consideration/development
    ' 2007.06.26 -- Add "GoTo NextCell" error handling
    '-----------------------------------------------------------------------------------------------> Version 1.2
    ' 2007.06.26 -- Add "GoTo NextCell" error handling
    '-----------------------------------------------------------------------------------------------> Version 2.0a
    ' To automate use:
    '
    '    Private Sub Worksheet_Change(ByVal Target As Range)
    '       Call RCHInsertPicture(Intersect(Target, UsedRange))
    '       End Sub
    '-----------------------------------------------------------------------------------------------------------*
    For Each oCell In Target
        On Error Resume Next
        ActiveSheet.Shapes("Image:" & oCell.Address).Delete
        On Error GoTo NextCell
        If Left(oCell.Value, 7) = "Image: " Then
           With ActiveSheet.Pictures.Insert(Mid(oCell.Value, 8, 999))
                .Left = oCell.Left + 1
                .Top = oCell.Top + 1
                .Name = "Image:" & oCell.Address
                oCell.RowHeight = .Height + 2
                nRatio = oCell.Width / oCell.ColumnWidth
                oCell.ColumnWidth = .Width / nRatio + 2
                End With
           End If
NextCell:
        Next oCell
    End Sub
Attribute VB_Name = "modPictureTable"
Function RCHImageTable(pTickers As Variant, _
        Optional ByVal pBreaks As Integer = -1, _
        Optional ByVal pChart As String = "6")
                           
    '-----------------------------------------------------------------------------------------------------------*
    ' User defined function to create a table of images (e.g. Stock Charts)
    '-----------------------------------------------------------------------------------------------------------*
    ' 2006.04.27 -- Created by Randy Harmelink (rharmelinkg@gmail.com)
    '-----------------------------------------------------------------------------------------------> Version 1.2
    ' > Example of an invocation to create a table of two normal StockCharts 6-month Candleglance charts:
    '
    '   =RCHImageTable("IBM,GE")
    '-----------------------------------------------------------------------------------------------------------*
    ' Notes:
    '
    ' Possible fundamental charts to add (Revenue Growth and EPS Growth -- need 26 breaks in between):
    ' > http://tools.morningstar.com/charts/MStarCharts.aspx?Security=MMM&bSize=460&Fundamental=RG&Options=F&Stock=&DateFrom=4/30/2005&DateTo=4/29/2006&FPrime=MMM
    ' > http://tools.morningstar.com/charts/MStarCharts.aspx?Security=MMM&bSize=460&Fundamental=EPSG&Options=F&Stock=&DateFrom=4/30/2005&DateTo=4/29/2006&FPrime=MMM
    '-----------------------------------------------------------------------------------------------------------*
    
    On Error GoTo ErrorExit
    If pBreaks >= 0 Then
       sPrefix1 = ""
       sSuffix1 = ""
       sPrefix2 = ""
       sSuffix2 = Replace(String(pBreaks, "!"), "!", "<br>")
    Else
       sPrefix1 = "<table>"
       sSuffix1 = "</table>"
       sPrefix2 = "<tr><td>"
       sSuffix2 = "</td></tr>"
       End If
    Select Case UCase(pChart)
        Case "6": sDisplay = "<img src=""http://stockcharts.com/c-sc/sc?chart=~~~~~,uu[305,a]dacayaci[pb20!b50][dc]"">"
        Case "12": sDisplay = "<img src=""http://stockcharts.com/c-sc/sc?chart=~~~~~,uu[305,a]dacayaci[pb20!b50][dd]"">"
        Case "P&F": sDisplay = "<img src=""http://stockcharts.com/def/servlet/SharpChartv05.ServletDriver?chart=~~~~~,pltad[pa][da][f!3!!]&pnf=y"">"
        Case "SC1": sDisplay = "<img src=""http://stockcharts.com/c-sc/sc?s=~~~~~&p=D&b=3&g=0&id=t08330678207&r=4815"">"
        Case Else: sDisplay = pChart
        End Select
    sDisplay = sPrefix2 & sDisplay & sSuffix2
    
    RCHImageTable = sPrefix1
    Select Case VarType(pTickers)
        Case vbString
             sTickers = Split(pTickers, ",")
             For i1 = 0 To UBound(sTickers, 1)
                 If sTickers(i1) <> "" Then RCHImageTable = RCHImageTable & Replace(sDisplay, "~~~~~", sTickers(i1))
                 Next i1
        Case Is >= 8192
             For Each oCell In pTickers
                 If oCell.Value <> "" Then RCHImageTable = RCHImageTable & Replace(sDisplay, "~~~~~", oCell.Value)
                 Next oCell
        Case Else
            GoTo ErrorExit
        End Select
    RCHImageTable = RCHImageTable & sSuffix1
    
    Exit Function

ErrorExit:
    RCHImageTable = "Error"
    End Function

Attribute VB_Name = "modPictureToggle"
Public Sub RCHTogglePicture()
    '-----------------------------------------------------------------------------------------------------------*
    ' Subroutine to toggle image (i.e. zoom in/zoom out) within a cell
    '-----------------------------------------------------------------------------------------------------------*
    ' 2005.02.01 -- New subroutine; still under consideration/development
    '-----------------------------------------------------------------------------------------------> Version 1.2
    ' 2006.12.10 -- Add zOrder option to bring chart to front when displayed
    '-----------------------------------------------------------------------------------------------> Version 1.3
    '-----------------------------------------------------------------------------------------------------------*
    ' First use requires subroutine be executed while a cell with URL of picture is selected.  After that,
    ' clicking on the image zooms it to normal size or back down to normal cell size.
    '-----------------------------------------------------------------------------------------------------------*
    On Error GoTo NoShape
    Set oShape = ActiveSheet.Shapes(Application.Caller)
    On Error GoTo 0
    sOldURL = oShape.AlternativeText
    sNewURL = oShape.TopLeftCell.Text
    If sOldURL = sNewURL Then
        With oShape
             If Abs(.Height - .TopLeftCell.Height) < 1 Then
                .ScaleHeight 1, msoTrue
                .ScaleWidth 1, msoTrue
             Else
                .Height = .TopLeftCell.Height
                End If
             End With
    Else
       iLeft = oShape.Left
       iTop = oShape.Top
       oShape.Delete
       Set oShape = ActiveSheet.Pictures.Insert(sNewURL)
       oShape.Name = Application.Caller
       oShape.OnAction = "RCHTogglePicture"
       oShape.Left = iLeft
       oShape.Top = iTop
       ActiveSheet.Shapes(Application.Caller).AlternativeText = sNewURL
       End If
    On Error Resume Next
    oShape.ZOrder msoBringToFront
    On Error GoTo 0
    Exit Sub
NoShape:
    sURL = Selection.Text
    Set oShape = ActiveSheet.Pictures.Insert(sURL)
    oShape.OnAction = "RCHTogglePicture"
    oShape.Left = Selection.Left
    oShape.Top = Selection.Top
    ActiveSheet.Shapes(oShape.Name).AlternativeText = sURL
    End Sub
Attribute VB_Name = "modRSITargetPrices"
Option Explicit
Public Function smfRSITargetPrices(ByVal pTicker As String, _
                          Optional ByVal pLoTrigger As Integer = 20, _
                          Optional ByVal pHiTrigger As Integer = 80, _
                          Optional ByVal pItems As Variant = "010203040506070809101112")
                        
   '-----------------------------------------------------------------------------------------------------------*
   ' Function to return RSI indicator buy and sell target prices
   '-----------------------------------------------------------------------------------------------------------*
   ' 2012.01.06 -- Created by Randy Harmelink (rharmelink@gmail.com)
   ' 2017.05.19 -- Change to use smfGetYahooHistory()
   ' 2017.05.23 -- Create starting date for smfGetYahooHistory() call
   '-----------------------------------------------------------------------------------------------------------*
   ' Samples of use:
   '
   '    =smfRSITargetPrices("MMM",20,80)
   '    =smfRSITargetPrices("MMM",20,80,"010203")
   '-----------------------------------------------------------------------------------------------------------*
     
   Const kItems = 12
   Dim vData(1 To 1, 1 To kItems) As Variant
   
   On Error GoTo ErrorExit
   vData(1, 1) = "Error"
   
   Dim i1 As Integer
   If pTicker = "Header" Or pTicker = "Ticker" Or pTicker = "Symbol" Then
      For i1 = 1 To kItems
          Select Case Mid(pItems, 2 * i1 - 1, 2)
             Case "01": vData(1, i1) = "Current RSI"
             Case "02": vData(1, i1) = "Buy Target Price"
             Case "03": vData(1, i1) = "Sell Target Price"
             Case "04": vData(1, i1) = "Last Traded Price"
             Case "05": vData(1, i1) = "Bid Price"
             Case "06": vData(1, i1) = "Ask Price"
             Case "07": vData(1, i1) = "Open Price"
             Case "08": vData(1, i1) = "Low Price"
             Case "09": vData(1, i1) = "High Price"
             Case "10": vData(1, i1) = "Volume"
             Case "11": vData(1, i1) = "Previous Close"
             Case "12": vData(1, i1) = "Previous RSI"
             Case Else: vData(1, i1) = "--"
             End Select
          Next i1
      GoTo ErrorExit
      End If
   
   Dim vCQ As Variant, vHQ As Variant, vRSI As Variant
   vCQ = RCHGetYahooQuotes(pTicker, "l1baoghvd1t1")
   'vHQ = RCHGetYahooHistory2(pTicker, , , , , , , , , , 1, 1, 22, 6)
   vHQ = smfGetYahooHistory(pTicker, Int(Now) - 40, , , , , 1, 22, 6)
   vRSI = SMFTech(vHQ, "RSI", 2)
   
   For i1 = 1 To kItems
       Select Case Mid(pItems, 2 * i1 - 1, 2)
          Case "01": vData(1, i1) = 100 - 100 / (1 + (vRSI(22, 5) + Application.WorksheetFunction.Max(vCQ(1, 1) - vHQ(22, 5), 0)) / (vRSI(22, 6) + Application.WorksheetFunction.Max(0, vHQ(22, 5) - vCQ(1, 1))))
          Case "02": vData(1, i1) = IIf(pLoTrigger > vRSI(22, 1), "--", vHQ(22, 5) + vRSI(22, 6) - vRSI(22, 5) * (100 - pLoTrigger) / pLoTrigger)
          Case "03": vData(1, i1) = IIf(pHiTrigger < vRSI(22, 1), "--", vHQ(22, 5) - vRSI(22, 5) + vRSI(22, 6) * pHiTrigger / (100 - pHiTrigger))
          Case "04": vData(1, i1) = vCQ(1, 1)
          Case "05": vData(1, i1) = vCQ(1, 2)
          Case "06": vData(1, i1) = vCQ(1, 3)
          Case "07": vData(1, i1) = vCQ(1, 4)
          Case "08": vData(1, i1) = vCQ(1, 5)
          Case "09": vData(1, i1) = vCQ(1, 6)
          Case "10": vData(1, i1) = vCQ(1, 7)
          Case "11": vData(1, i1) = vHQ(22, 5)
          Case "12": vData(1, i1) = vRSI(22, 1)
          Case Else: vData(1, i1) = "--"
          End Select
       Next i1
  
ErrorExit:
   
   smfRSITargetPrices = vData
   
   End Function




Attribute VB_Name = "modTechnicalAnalysis"
Const kD = 1
Const kO = 2
Const kH = 3
Const kL = 4
Const kC = 5
Const kV = 6

Function SMFTech(pDataRange As Variant, _
                 pIndicator As String, _
        Optional pParm1 As Variant = "", _
        Optional pParm2 As Variant = "", _
        Optional pParm3 As Variant = "", _
        Optional pParm4 As Variant = "", _
        Optional pParm5 As Variant = "", _
        Optional pParm6 As Variant = "")
                    
    '-----------------------------------------------------------------------------------------------------------*
    ' User defined function to create technical analysis indicators
    '-----------------------------------------------------------------------------------------------------------*
    ' 2006.10.07 -- Created by Randy Harmelink (rharmelink@gmail.com)
    ' 2006.10.07 -- Add Simple Moving Average (SMA) / Average True Range (ATR) / Relative Strength Index (RSI)
    ' 2006.10.08 -- Add Commodity Channel Index (CCI) / Stochastic (Sto)
    ' 2006.10.08 -- Add Moving Average Convergence Divergence (MACD)
    ' 2006.10.13 -- Add Accumulation/Distribuion Line (ADL) / On Balance Volume (OBV)
    ' 2007.01.07 -- Fix ADL to account for days when High and Low price are the same
    '-----------------------------------------------------------------------------------------------> Version 1.3
    ' 2007.09.19 -- Change pRange to be of type Variant instead of Range so an array can be passed to function
    ' 2007.09.20 -- Add Rate of Change (ROC) indicator
    '-----------------------------------------------------------------------------------------------> Version 2.0h
    ' Note: The pDataRange parameter is assumed to be a range of historical quotes data (e.g. from Yahoo!) where
    ' the columns are Date/Open/High/Low/Close/Volume, the first row contain column names, and the rows are in
    ' ascending date sequence.
    '-----------------------------------------------------------------------------------------------------------*
    
    On Error GoTo ErrorExit
  
    '------------------> Initialize return array
    kData = pDataRange
    kDim1 = UBound(kData, 1)
    kDim2 = UBound(kData, 2)
    ReDim vData(1 To kDim1, 1 To 7) As Variant
    For i1 = 1 To kDim1: vData(i1, 1) = "": Next i1

    '------------------> Determine which indicator to return
    Select Case UCase(pIndicator)
       Case "ADL": GoTo TA_ADL
       Case "ATR": GoTo TA_ATR
       Case "CCI": GoTo TA_CCI
       Case "EMA": GoTo TA_EMA
       Case "MACD": GoTo TA_MACD
       Case "OBV": GoTo TA_OBV
       Case "ROC": GoTo TA_ROC
       Case "RSI": GoTo TA_RSI
       Case "SMA": GoTo TA_SMA
       Case "STO": GoTo TA_STO
       Case Else: GoTo ErrorExit
       End Select

'------------------> Accumulation/Distribution Line
TA_ADL:

    vData(1, 1) = "ADL"
    vData(1, 2) = "CLV"
    n1 = 0
    n2 = 0
    For i1 = 2 To kDim1
        If kData(i1, kH) > kData(i1, kL) Then
           n2 = (kData(i1, kC) - kData(i1, kL) + kData(i1, kC) - kData(i1, kH)) / (kData(i1, kH) - kData(i1, kL))
           n1 = n1 + n2 * kData(i1, kV)
           End If
        vData(i1, 1) = n1
        vData(i1, 2) = n2
        Next i1

    GoTo ExitFunction
   
'------------------> Average True Range
TA_ATR:
   
    If pParm1 = "" Then pParm1 = 20
    vData(1, 1) = "ATR" & Chr(10) & pParm1
    vData(1, 2) = "H - L"
    vData(1, 3) = "Abs(H-C1)"
    vData(1, 4) = "Abs(L-C1)"
    vData(1, 5) = "Daily TR"
    nSum = 0
    nTol = IIf(pParm1 = 1, 2, pParm1)
    For i1 = 2 To kDim1
        n2 = kData(i1, kH) - kData(i1, kL)
        If i1 = 2 Then
           n3 = ""
           n4 = ""
           n5 = n2
        Else
           n3 = Abs(kData(i1, kH) - kData(i1 - 1, kC))
           n4 = Abs(kData(i1, kL) - kData(i1 - 1, kC))
           n5 = IIf(n4 > n3, n4, n3)
           n5 = IIf(n5 > n2, n5, n2)
           End If
        If i1 > nTol Then
           n1 = (n5 + (pParm1 - 1) * vData(i1 - 1, 1)) / pParm1
        Else
           nSum = nSum + n5
           n1 = nSum / (i1 - 1)
           End If
        vData(i1, 1) = n1
        vData(i1, 2) = n2
        vData(i1, 3) = n3
        vData(i1, 4) = n4
        vData(i1, 5) = n5
        Next i1

    GoTo ExitFunction

'------------------> Commodity Channel Index
TA_CCI:
   
    If pParm1 = "" Then pParm1 = 20
    vData(1, 1) = "CCI" & Chr(10) & pParm1
    vData(1, 2) = "TP"
    vData(1, 3) = "TPMA"
    vData(1, 4) = "MD"
    For i1 = 2 To pParm1: For i2 = 2 To 4: vData(i1, i2) = "": Next i2: Next i1

    nSum = 0
    For i1 = 2 To kDim1
        n2 = (kData(i1, kC) + kData(i1, kH) + kData(i1, kL)) / 3
        If i1 > pParm1 + 1 Then
           nSum = nSum + n2 - vData(i1 - pParm1, 2)
           n3 = nSum / pParm1
           nSum2 = Abs(n3 - n2)
           For i2 = i1 - pParm1 + 1 To i1 - 1
               nSum2 = nSum2 + Abs(n3 - vData(i2, 2))
               Next i2
           n4 = nSum2 / pParm1
           n1 = (n2 - n3) / (0.015 * n4)
        Else
           nSum = nSum + n2
           n3 = nSum / (i1 - 1)
           n1 = ""
           n4 = ""
           End If
        vData(i1, 1) = n1
        vData(i1, 2) = n2
        vData(i1, 3) = n3
        vData(i1, 4) = n4
        Next i1

    GoTo ExitFunction

'------------------> Exponential Moving Average
TA_EMA:

    If pParm1 = "" Then pParm1 = 50
    nMult = 2 / (pParm1 + 1)
    vData(1, 1) = "EMA" & Chr(10) & pParm1

    nSum = 0
    For i1 = 2 To kDim1
        If i1 > pParm1 + 1 Then
           n1 = nMult * (kData(i1, kC) - n1) + n1
           vData(i1, 1) = n1
        Else
           nSum = nSum + kData(i1, kC)
           n1 = nSum / (i1 - 1)
           vData(i1, 1) = IIf(i1 < pParm1 + 1, "", n1)
           End If
        Next i1

    GoTo ExitFunction

'------------------> Moving Average Convergence Divergence
TA_MACD:
   
    If pParm1 = "" Then pParm1 = 12
    If pParm2 = "" Then pParm2 = 26
    If pParm3 = "" Then pParm3 = 9
    vData(1, 1) = "MACD" & Chr(10) & pParm1 & "-" & pParm2 & "-" & pParm3
    vData(1, 2) = "SMA" & Chr(10) & pParm1
    vData(1, 3) = "SMA" & Chr(10) & pParm2

    nSum1 = 0
    nSum2 = 0
    nSum3 = 0
    For i1 = 2 To kDim1
        If i1 > pParm1 + 1 Then
           nSum2 = nSum2 + kData(i1, kC) - kData(i1 - pParm1, kC)
           n2 = nSum2 / pParm1
        Else
           nSum2 = nSum2 + kData(i1, kC)
           n2 = nSum2 / (i1 - 1)
           End If
        If i1 > pParm2 + 1 Then
           nSum3 = nSum3 + kData(i1, kC) - kData(i1 - pParm2, kC)
           n3 = nSum3 / pParm2
        Else
           nSum3 = nSum3 + kData(i1, kC)
           n3 = nSum3 / (i1 - 1)
           End If
        If i1 > pParm3 + 1 Then
           nSum1 = nSum1 + (n2 - n3) - (vData(i1 - pParm3, 2) - vData(i1 - pParm3, 3))
           n1 = nSum1 / pParm3
        Else
           nSum1 = nSum1 + (n2 - n3)
           n1 = nSum1 / (i1 - 1)
           End If
        vData(i1, 1) = n1
        vData(i1, 2) = n2
        vData(i1, 3) = n3
        Next i1
   
    GoTo ExitFunction

'------------------> On Balance Volume
TA_OBV:

    vData(1, 1) = "OBV"
    n1 = 0
    For i1 = 3 To kDim1
        Select Case (kData(i1, kC) - kData(i1 - 1, kC))
           Case Is > 0: n1 = n1 + kData(i1, kV)
           Case Is < 0: n1 = n1 - kData(i1, kV)
           End Select
        vData(i1, 1) = n1
        Next i1

    GoTo ExitFunction
    
'------------------> Rate of Change
TA_ROC:
    If pParm1 = "" Then pParm1 = 21
    vData(1, 1) = "ROC" & Chr(10) & pParm1
    
    For i1 = 2 To kDim1
        If i1 < pParm1 + 2 Then
           vData(i1, 1) = ""
        Else
           vData(i1, 1) = kData(i1, kC) / kData(i1 - pParm1, kC) - 1
           End If
        Next i1
    
    GoTo ExitFunction
    
'------------------> Relative Strength Index
TA_RSI:
   
    If pParm1 = "" Then pParm1 = 20
    vData(1, 1) = "RSI" & Chr(10) & pParm1
    vData(1, 2) = "Chg"
    vData(1, 3) = "Adva"
    vData(1, 4) = "Decl"
    vData(1, 5) = "AvgGain"
    vData(1, 6) = "AvgLoss"
    vData(1, 7) = "RS"
    For i1 = 2 To pParm1: For i2 = 2 To 7: vData(i1, i2) = "": Next i2: Next i1

    s3 = 0
    s4 = 0
    For i1 = 3 To kDim1
        n2 = kData(i1, kC) - kData(i1 - 1, kC)
        If i1 > pParm1 + 2 Then
            If n2 > 0 Then
              n3 = n2
              n4 = ""
              n5 = ((pParm1 - 1) * n5 + n2) / pParm1
              n6 = ((pParm1 - 1) * n6) / pParm1
           Else
              n3 = ""
              n4 = -n2
              n5 = ((pParm1 - 1) * n5) / pParm1
              n6 = ((pParm1 - 1) * n6 - n2) / pParm1
              End If
        Else
            If n2 > 0 Then
              n3 = n2
              s3 = s3 + n2
              n4 = ""
           Else
              n3 = ""
              n4 = -n2
              s4 = s4 - n2
              End If
           If i1 = pParm1 + 2 Then
              n5 = s3 / pParm1
              n6 = s4 / pParm1
           Else
              n5 = ""
              n6 = ""
              End If
           End If
        If n5 = "" Then
           n1 = ""
           N7 = ""
        Else
           If n6 = 0 Then
              N7 = 0
              n1 = 100
           Else
              N7 = n5 / n6
              n1 = 100 - (100 / (1 + N7))
              End If
           End If
        vData(i1, 1) = n1
        vData(i1, 2) = n2
        vData(i1, 3) = n3
        vData(i1, 4) = n4
        vData(i1, 5) = n5
        vData(i1, 6) = n6
        vData(i1, 7) = N7
        Next i1
    
    GoTo ExitFunction

'------------------> Simple Moving Average
TA_SMA:
   
    If pParm1 = "" Then pParm1 = 50
    vData(1, 1) = "SMA" & Chr(10) & pParm1
    
    nSum = 0
    For i1 = 2 To kDim1
        If i1 > pParm1 + 1 Then
           nSum = nSum + kData(i1, kC) - kData(i1 - pParm1, kC)
           vData(i1, 1) = nSum / pParm1
        Else
           nSum = nSum + kData(i1, kC)
           vData(i1, 1) = nSum / (i1 - 1)
           End If
        Next i1

    GoTo ExitFunction

'------------------> Stochastics
TA_STO:
   
    If pParm1 = "" Then pParm1 = 14
    If pParm2 = "" Then pParm2 = 5
    If pParm3 = "" Then pParm3 = 1
    vData(1, 1) = "Stoch" & Chr(10) & pParm1 & "-" & pParm2 & "-" & pParm3
    vData(1, 2) = "%K"
    vData(1, 3) = "%D"
    For i1 = 2 To pParm1: For i2 = 2 To 4: vData(i1, i2) = "": Next i2: Next i1

    nSum1 = 0
    nSum3 = 0
    For i1 = 2 To kDim1
        nHi = kData(i1, kH)
        nLo = kData(i1, kL)
        For i2 = IIf(i1 - pParm1 + 1 > 1, i1 - pParm1 + 1, 2) To i1 - 1
            If kData(i2, kH) > nHi Then nHi = kData(i2, kH)
            If kData(i2, kL) < nLo Then nLo = kData(i2, kL)
            Next i2
        n2 = 100 * (kData(i1, kC) - nLo) / (nHi - nLo)
        If i1 > pParm2 + 1 Then
           nSum3 = nSum3 + n2 - vData(i1 - pParm2, 2)
           n3 = nSum3 / pParm2
        Else
           nSum3 = nSum3 + n2
           n3 = nSum3 / (i1 - 1)
           End If
        If i1 > pParm3 + 1 Then
           nSum1 = nSum1 + n3 - vData(i1 - pParm3, 3)
           n1 = nSum1 / pParm3
        Else
           nSum1 = nSum1 + n3
           n1 = nSum1 / (i1 - 1)
           End If
        vData(i1, 1) = n1
        vData(i1, 2) = n2
        vData(i1, 3) = n3
        Next i1

    GoTo ExitFunction

ExitFunction:
ErrorExit:

    SMFTech = vData
    End Function
Attribute VB_Name = "modYahooAPIData"
Option Explicit
Function smfYahooAPIData(pTicker As String, _
         Optional pItem As String = "LastTradePriceOnly", _
         Optional pFeed As String = "a", _
         Optional pOptionSymbol As String = "")
                                    
    '-----------------------------------------------------------------------------------------------------------*
    ' User defined function to access Yahoo API feeds
    '-----------------------------------------------------------------------------------------------------------*
    ' 2012.12.11 -- Created by Randy Harmelink (rharmelink@gmail.com)
    '            -- Based on http://www.philadelphia-reflections.com/blog/2392.htm
    '            -- "a" feed is from the CSV data
    '            -- "b" feed is from yahoo.finance.quotes
    '            -- "c" and "d" feeds are from yahoo.finance.quant and quant2
    '            -- "e" feed is from yahoo.finance.stocks
    '            -- "f" feed is from yahoo.finance.options
    ' 2017.04.26 -- Change "http://" protocol to "https://"
    '-----------------------------------------------------------------------------------------------------------*
         
    Const kURLa = "https://query.yahooapis.com/v1/public/yql?q=select%20*%20from%20csv%20where%20url%3D'http%3A%2F%2Fdownload.finance.yahoo.com%2Fd%2Fquotes.csv%3Fs%3D~~~~~" _
                & "%26f%3Dsnll1d1t1cc1p2t7va2ibb6aa5pomwj5j6k4k5ers7r1qdyj1t8e7e8e9r6r7r5b4p6p5j4m3m7m8m4m5m6k1b3b2i5x%26e%3D.csv'%20and%20" _
                & "columns%3D'Symbol%2CName%2CLastTradeWithTime%2CLastTradePriceOnly%2CLastTradeDate%2CLastTradeTime%2CChange%20PercentChange%2CChange%2CChangeinPercent%2CTickerTrend%2CVolume%2CAverageDailyVolume%2CMoreInfo%2CBid%2CBidSize%2CAsk%2CAskSize%2CPreviousClose%2COpen%2CDayRange%2CFiftyTwoWeekRange%2CChangeFromFiftyTwoWeekLow%2CPercentChangeFromFiftyTwoWeekLow%2CChangeFromFiftyTwoWeekHigh%2CPercentChangeFromFiftyTwoWeekHigh%2CEarningsPerShare%2CPE%20Ratio%2CShortRatio%2CDividendPayDate%2CExDividendDate%2CDividendPerShare%2CDividend%20Yield%2CMarketCapitalization%2COneYearTargetPrice%2CEPS%20Est%20Current%20Yr%2CEPS%20Est%20Next%20Year%2CEPS%20Est%20Next%20Quarter%2CPrice%20per%20EPS%20Est%20Current%20Yr%2CPrice%20per%20EPS%20Est%20Next%20Yr%2CPEG%20Ra" _
                & "tio%2CBook%20Value%2CPrice%20to%20Book%2CPrice%20to%20Sales%2CEBITDA%2CFiftyDayMovingAverage%2CChangeFromFiftyDayMovingAverage%2CPercentChangeFromFiftyDayMovingAverage%2CTwoHundredDayMovingAverage%2CChangeFromTwoHundredDayMovingAverage%2CPercentChangeFromTwoHundredDayMovingAverage%2CLastTrade%20(Real-time)%20with%20Time%2CBid%20(Real-time)%2CAsk%20(Real-time)%2COrderBook%20(Real-time)%2CStockExchange'"
    Const kURLb = "http://query.yahooapis.com/v1/public/yql?q=select%20*%20from%20yahoo.finance.quotes%20where%20symbol%20in%20%28%22~~~~~%22%29&diagnostics=false&env=store%3A%2F%2Fdatatables.org%2Falltableswithkeys"
    Const kURLc = "http://query.yahooapis.com/v1/public/yql?q=select%20*%20from%20yahoo.finance.quant%20where%20symbol%20in%20(%22~~~~~%22)&env=store%3A%2F%2Fdatatables.org%2Falltableswithkeys"
    Const kURLd = "http://query.yahooapis.com/v1/public/yql?q=select%20*%20from%20yahoo.finance.quant2%20where%20symbol%20in%20(%22~~~~~%22)&env=store%3A%2F%2Fdatatables.org%2Falltableswithkeys"
    Const kURLe = "http://query.yahooapis.com/v1/public/yql?q=select%20*%20from%20yahoo.finance.stocks%20where%20symbol%20in%20(%22~~~~~%22)&env=store%3A%2F%2Fdatatables.org%2Falltableswithkeys"
    Const kURLf = "http://query.yahooapis.com/v1/public/yql?q=SELECT%20*%20FROM%20yahoo.finance.options%20WHERE%20symbol=%22~~~~~%22%20AND%20expiration%20in%20%28SELECT%20contract%20FROM%20yahoo.finance.option_contracts%20WHERE%20symbol=%22~~~~~%22%29&env=http%3A%2F%2Fdatatables.org%2Falltables.env"
         
    Dim sURL As String
    Select Case UCase(pFeed)
       Case "A": sURL = Replace(kURLa, "~~~~~", pTicker)
       Case "B": sURL = Replace(kURLb, "~~~~~", pTicker)
       Case "C": sURL = Replace(kURLc, "~~~~~", pTicker)
       Case "D": sURL = Replace(kURLd, "~~~~~", pTicker)
       Case "E": sURL = Replace(kURLe, "~~~~~", pTicker)
       Case "F": sURL = Replace(kURLf, "~~~~~", pTicker)
       End Select
         
    smfYahooAPIData = smfConvertData(smfGetTagContent(sURL, pItem & ">", 1, pOptionSymbol))

End Function
Attribute VB_Name = "modZAdditional"


Public Function DateOfHigh(pTicker As String, pDays As Integer)
   Dim vData() As Variant
   vData = RCHGetYahooHistory2(pTicker, , , , , , , "d", "DH", 0, 1, 0, pDays, 2)
   dStart = vData(1, 1)
   dHighDay = dStart
   nHighDay = vData(1, 2)
   For i1 = 2 To UBound(vData, 1)
       If vData(i1, 1) < dStart - pDays Then Exit For
       If vData(i1, 2) > nHighDay Then
          nHighDay = vData(i1, 2)
          dHighDay = vData(i1, 1)
          End If
       Next i1
   DateOfHigh = dHighDay
   End Function
Public Function SMFHighBetween(pTicker As String, pBegDate As Variant, pEndDate As Variant)
   ' Checks for highest price between two dates
   Dim vData(1 To 1, 1 To 4) As Variant
   vHQ = RCHGetYahooHistory2(pTicker, , , , , , , "d", "DHOC", 0, 1, 0, 9999, 4)
   vData(1, 1) = 0    ' Value of high price
   vData(1, 2) = ""   ' Day of high price
   vData(1, 3) = 0    ' Starting price
   vData(1, 4) = 0    ' Ending price
   For i1 = 1 To UBound(vHQ, 1)
       Select Case vHQ(i1, 1)
          Case Is > pEndDate
          Case Is < pBegDate: Exit For
          Case Else
               If vHQ(i1, 1) = pBegDate Then vData(1, 3) = vHQ(i1, 3)
               If vHQ(i1, 1) = pEndDate Then vData(1, 4) = vHQ(i1, 4)
               If vHQ(i1, 2) > vData(1, 1) Then
                  vData(1, 1) = vHQ(i1, 2)
                  vData(1, 2) = vHQ(i1, 1)
                  End If
       End Select
       Next i1
   SMFHighBetween = vData
   End Function
Public Function SMFLowBetween(pTicker As String, pBegDate As Variant, pEndDate As Variant)
   ' Checks for highest price between two dates
   Dim vData(1 To 1, 1 To 4) As Variant
   vHQ = RCHGetYahooHistory2(pTicker, , , , , , , "d", "DLOC", 0, 1, 0, 9999, 4)
   vData(1, 1) = 999999 ' Value of low price
   vData(1, 2) = ""     ' Day of low price
   vData(1, 3) = 0      ' Starting price
   vData(1, 4) = 0      ' Ending price
   For i1 = 1 To UBound(vHQ, 1)
       Select Case vHQ(i1, 1)
          Case Is > pEndDate
          Case Is < pBegDate: Exit For
          Case Else
               If vData(1, 4) = 0 Then vData(1, 4) = vHQ(i1, 4)
               vData(1, 3) = vHQ(i1, 3)
               If vHQ(i1, 2) < vData(1, 1) Then
                  vData(1, 1) = vHQ(i1, 2)
                  vData(1, 2) = vHQ(i1, 1)
                  End If
       End Select
       Next i1
   SMFLowBetween = vData
   End Function
Public Function smfLastPrice(pTicker As String, pEndDate As Variant) As Variant
   '-----------------------------------------------------------------------------------------------------------*
   ' Sample routine to get the last traded price (adjusted) for a given day
   '-----------------------------------------------------------------------------------------------------------*
   ' 2007.07.26 -- Created by Randy Harmelink (rharmelink@gmail.com)
   '-----------------------------------------------------------------------------------------------------------*
   ' Sample of use:
   '
   '    =smfLastPrice("MMM",DATE(2007,1,1))
   '
   '-----------------------------------------------------------------------------------------------------------*
   vHQ = RCHGetYahooHistory2(pTicker, , , , , , , "d", "DA", 0, 1, 0, 9999, 2)
   smfLastPrice = 0
   For i1 = 1 To UBound(vHQ, 1)
       If vHQ(i1, 1) <= pEndDate Then
          smfLastPrice = vHQ(i1, 2)
          Exit Function
          End If
       Next i1

   End Function
Sub Testing2()
    Open ThisWorkbook.Path & "\smf-elements.txt" For Input As #1
    Do Until EOF(1) = True
       Line Input #1, sLine
       Loop
    Close #1
    On Error GoTo ErrorExit
    Open ThisWorkbook.Path & "\smf-elements-1.txt" For Input As #1
    Do Until EOF(1) = True
       Line Input #1, sLine
       Loop
    Close #1
ErrorExit:
    End Sub
Attribute VB_Name = "smfConvertData_"
Public Function smfConvertData(ByVal pData As String, _
                      Optional ByVal pConv As Integer = 0)
    '-----------------------------------------------------------------------------------------------------------*
    ' 2011.02.16 -- Add routine
    ' 2012.01.21 -- Trim data coming in to function
    ' 2012.04.07 -- Add "Bill" and "Mill" suffixes conversions
    ' 2014.06.20 -- Add "Billion" and "Million" suffixes conversions
    ' 2014.08.15 -- Add "bil" and "mil" suffixes conversions
    ' 2016.05.18 -- Change CDec() to smfCDec() to ease transition between operating systems
    ' 2016.07.13 -- Add "K" suffix
    '-----------------------------------------------------------------------------------------------------------*
    s1 = Trim(pData)
    On Error GoTo ErrorExit
    If InStr(s1, "/") > 0 Then
    Else
        If s1 = "-" Then s1 = "0"
        If s1 = "--" Then s1 = "0"
        If s1 = "---" Then s1 = "0"
        If s1 = Chr(150) Then s1 = "0"
        If Left(s1, 1) = "$" Then s1 = Mid(s1, 2)
        If Left(s1, 1) = "(" And Right(s1, 1) = ")" Then s1 = "-" & Mid(s1, 2, Len(s1) - 2)
        s2 = s1
        
        Select Case True
            Case UCase(Right(s2, 1)) = "B": s2 = Left(s2, Len(s2) - 1): nMult = 1000000
            Case UCase(Right(s2, 1)) = "K": s2 = Left(s2, Len(s2) - 1): nMult = 1000
            Case UCase(Right(s2, 1)) = "M": s2 = Left(s2, Len(s2) - 1): nMult = 1000
            Case Right(s2, 1) = "%": s2 = Left(s2, Len(s2) - 1): nMult = 0.01
            Case Right(s2, 4) = " Bil": s2 = Left(s2, Len(s2) - 4): nMult = 1000000000
            Case Right(s2, 4) = " Mil": s2 = Left(s2, Len(s2) - 4): nMult = 1000000
            Case Right(s2, 4) = " bil": s2 = Left(s2, Len(s2) - 4): nMult = 1000000000
            Case Right(s2, 4) = " mil": s2 = Left(s2, Len(s2) - 4): nMult = 1000000
            Case Right(s2, 5) = " Bill": s2 = Left(s2, Len(s2) - 5): nMult = 1000000000
            Case Right(s2, 5) = " Mill": s2 = Left(s2, Len(s2) - 5): nMult = 1000000
            Case Right(s2, 8) = " Billion": s2 = Left(s2, Len(s2) - 8): nMult = 1000000000
            Case Right(s2, 8) = " Million": s2 = Left(s2, Len(s2) - 8): nMult = 1000000
            Case Else: nMult = 1
            End Select
       
       On Error Resume Next
       s1 = smfCDec(s2) * nMult
       On Error GoTo ErrorExit
       End If
    
ErrorExit:
    smfConvertData = s1
    
    End Function


Attribute VB_Name = "smfConvertYahooTicker_"
Function smfConvertYahooTicker(ByVal pTicker As String, _
                               ByVal pSource As String) As String
                         
   '-----------------------------------------------------------------------------------------------------------*
   ' User defined function to convert a Yahoo ticker symbol into another data provider's ticker symbol
   '-----------------------------------------------------------------------------------------------------------*
   ' 2009.12.02 -- Created function
   ' 2009.12.24 -- Add ".OB" translations
   ' 2012.05.13 -- Add ".V" translations
   ' 2012.07.13 -- Add "-" conversion to "." for Canadian ticker symbols going from Yahoo to MSN
   ' 2013.10.26 -- Add "-" conversion to "." for going from Yahoo to Zacks
   ' 2017.06.26 -- Correction to length of ".V" translation
   '-----------------------------------------------------------------------------------------------------------*
   ' > Example of an invocation:
   '
   '   =smfConvertYahooTicker("CMG.TO", "MSN2")
   '-----------------------------------------------------------------------------------------------------------*

   Dim sTicker As String
   Const sYahooxNDX = "~^DJI  "
   Const sGoogleNDX = "~.DJI  "
   Const sMSNxxxNDX = "~$INDU "
                               
   sTicker = Trim(UCase(pTicker))
   Select Case True
      Case Left(UCase(pSource), 5) = "ADVFN": GoTo Yahoo2AdvFN
      Case Left(UCase(pSource), 8) = "BARCHART": GoTo Yahoo2BarChart
      Case Left(UCase(pSource), 8) = "EARNINGS": GoTo Yahoo2Earnings
      Case Left(UCase(pSource), 3) = "MSN": GoTo Yahoo2MSN
      Case Left(UCase(pSource), 6) = "GOOGLE": GoTo Yahoo2Google
      Case Left(UCase(pSource), 11) = "MORNINGSTAR": GoTo Yahoo2MorningStar
      Case Left(UCase(pSource), 7) = "REUTERS": GoTo Yahoo2Reuters
      Case Left(UCase(pSource), 11) = "STOCKCHARTS": GoTo Yahoo2StockCharts
      Case Left(UCase(pSource), 10) = "STOCKHOUSE": GoTo Yahoo2StockHouse
      Case Left(UCase(pSource), 5) = "ZACKS": GoTo Yahoo2Zacks
      End Select
   GoTo ExitFunction
      
Yahoo2AdvFN:
   Select Case True
      Case Right(sTicker, 3) = ".OB": sTicker = "USBB:" & Replace(sTicker, ".OB", "")
      Case Right(sTicker, 3) = ".TO": sTicker = "TSE:" & Replace(sTicker, ".TO", "")
      Case Right(sTicker, 2) = ".V": sTicker = "TSE:" & Replace(sTicker, ".V", "")
      End Select
   GoTo ExitFunction
      
Yahoo2BarChart:
   Select Case True
      Case Right(sTicker, 3) = ".OB": sTicker = Replace(sTicker, ".OB", "")
      'Case Right(sTicker, 3) = ".TO"
      End Select
   GoTo ExitFunction
      
Yahoo2Earnings:
   Select Case True
      Case Right(sTicker, 3) = ".OB": sTicker = Replace(sTicker, ".OB", "")
      'Case Right(sTicker, 3) = ".TO"
      End Select
   GoTo ExitFunction
     
Yahoo2Google:
   Select Case True
      Case Right(sTicker, 3) = ".OB": sTicker = "OTC:" & Replace(sTicker, ".OB", "")
      Case Right(sTicker, 3) = ".TO": sTicker = "CVE:" & Replace(sTicker, ".TO", "")
      Case Right(sTicker, 2) = ".V": sTicker = "TSE:" & Replace(sTicker, ".V", "")
      Case InStr(sYahooxNDX, "~" & sTicker) > 0: sTicker = Trim(Mid(sGoogleNDX, InStr(sYahooxNDX, "~" & sTicker) + 1, 5))
      End Select
   GoTo ExitFunction

Yahoo2MorningStar:
   Select Case True
      Case Right(sTicker, 3) = ".OB": sTicker = Replace(sTicker, ".OB", "")
      Case Right(sTicker, 3) = ".TO": sTicker = "XTSE:" & Replace(sTicker, ".TO", "")
      End Select
   GoTo ExitFunction
      
Yahoo2MSN:
   Select Case True
      Case Right(sTicker, 3) = ".OB": sTicker = Replace(sTicker, ".OB", "")
      Case Right(sTicker, 3) = ".TO": sTicker = "CA:" & Replace(Replace(Replace(sTicker, ".TO", ""), "-P", "."), "-", ".")
      Case Right(sTicker, 2) = ".V": sTicker = "CA:" & Replace(sTicker, ".V", "")
      Case Right(sTicker, 2) = ".X": sTicker = "." & Replace(sTicker, ".X", "")
      Case InStr(sTicker, "-P") > 0: sTicker = Replace(sTicker, "-P", "-")
      Case InStr(sTicker, "-") > 0: sTicker = Replace(sTicker, "-", "/")
      Case InStr(sYahooxNDX, "~" & sTicker) > 0: sTicker = Trim(Mid(sMSNxxxNDX, InStr(sYahooxNDX, "~" & sTicker) + 1, 5))
      End Select
   GoTo ExitFunction
      
Yahoo2Reuters:
   Select Case True
      'Case Right(sTicker, 3) = ".OB"
      'Case Right(sTicker, 3) = ".TO"
      End Select
   GoTo ExitFunction
      
Yahoo2StockCharts:
   Select Case True
      Case Right(sTicker, 3) = ".OB": sTicker = Replace(sTicker, ".OB", "")
      'Case Right(sTicker, 3) = ".TO"
      End Select
   GoTo ExitFunction

Yahoo2StockHouse:
   Select Case True
      Case Right(sTicker, 3) = ".OB": sTicker = Replace(sTicker, ".OB", "")
      Case Right(sTicker, 3) = ".TO": sTicker = "T." & Replace(sTicker, ".TO", "")
      End Select
   GoTo ExitFunction

Yahoo2Zacks:
   Select Case True
      Case Right(sTicker, 3) = ".OB": sTicker = Replace(sTicker, ".OB", "")
      Case Right(sTicker, 3) = ".TO": sTicker = "T." & Replace(sTicker, ".TO", "")
      Case InStr(sTicker, "-") > 0: sTicker = Replace(sTicker, "-", ".")
      End Select
   GoTo ExitFunction
                                
ExitFunction:
   smfConvertYahooTicker = sTicker
   End Function


Attribute VB_Name = "smfCreateComment_"
Public Function RCHCreateComment(pTicker As String, _
                  Optional ByVal pChoice As Integer = 1, _
                  Optional ByVal pWidth As Integer = 0, _
                  Optional ByVal pHeight As Integer = 0, _
                  Optional ByVal pVisible As Integer = 0, _
                  Optional ByVal pTop As Integer = 1, _
                  Optional ByVal pLeft As Integer = 1, _
                  Optional ByVal pScale As Single = 1#, _
                  Optional ByVal pText As String = "", _
                  Optional ByVal pReturn As String = "Chart")
Attribute RCHCreateComment.VB_Description = "Creates a comment box for the cell that can contain text and/or an image (e.g. a stock chart). "

    '-----------------------------------------------------------------------------------------------------------*
    ' Function to create a comment object and insert image/text into it
    '-----------------------------------------------------------------------------------------------------------*
    ' 2007.01.17 -- Change CCur() usage to CDec() because of precision issues
    ' 2007.09.24 -- Set the comment line color to white in order to "hide" it
    ' 2009.06.26 -- Add ActiveWorkbook.Name error check
    ' 2016.05.18 -- Change CDec() to smfCDec() to ease transition between operating systems
    ' 2018.01.24 -- Change AdvFN URL from "http://" to "https://"
    '-----------------------------------------------------------------------------------------------------------*
    ' Examples of usage:
    '
    '    =RCHCreateComment("MMM")
    '    =RCHCreateComment("MMM",1,350,390,1,1,1)
    '
    '-----------------------------------------------------------------------------------------------------------*
    
    Set oCell = Cells(Application.Caller.Cells.Row, Application.Caller.Cells.Column)
    If ActiveWorkbook.Name <> Application.Caller.Parent.Parent.Name Then Exit Function
    If ActiveSheet.Name <> Application.Caller.Worksheet.Name Then Exit Function
    On Error Resume Next
    oCell.Comment.Delete
    On Error GoTo 0
    Select Case True
       Case UCase(pTicker) = "NONE": RCHCreateComment = "None": Exit Function
       Case pChoice = 0
            sURL = ""
            If pWidth = 0 Then pWidth = 300
            If pHeight = 0 Then pHeight = 200
       Case pTicker = "": GoTo ErrorExit
       Case pScale <= 0: GoTo ErrorExit
       Case pWidth < 0: GoTo ErrorExit
       Case pHeight < 0: GoTo ErrorExit
       Case pChoice = 1      ' Daily Chart of Gallery View from StockCharts
            sURL = "http://stockcharts.com/c-sc/sc?chart=" & pTicker & ",uu[h,a]daclyyay[pb50!b200!f][vc60][iue12,26,9!lc20]"
            If pWidth = 0 Then pWidth = 350 * pScale
            If pHeight = 0 Then pHeight = 390 * pScale
       Case pChoice = 2      ' P&F Chart from StockCharts
            sURL = "http://stockcharts.com/def/servlet/SharpChartv05.ServletDriver?chart=" & pTicker & ",pltad[pa][da][f!3!!]&pnf=y"
            If pWidth = 0 Then pWidth = 390 * pScale
            If pHeight = 0 Then pHeight = 314 * pScale
       Case pChoice = 3      ' 6-month Candleglance Chart from StockCharts
            sURL = "http://stockcharts.com/c-sc/sc?chart=" & pTicker & ",uu[305,a]dacayaci[pb20!b50][dc]"
            If pWidth = 0 Then pWidth = 229 * pScale
            If pHeight = 0 Then pHeight = 132 * pScale
       Case pChoice = 4      ' 6-month chart from Business Week Online
            sURL = "http://stockcharts.com/c-sc/sc?s=" & pTicker & "&p=D&yr=0&mn=6&dy=0&i=t94339682869&r=4806"
            If pWidth = 0 Then pWidth = 638 * pScale
            If pHeight = 0 Then pHeight = 501 * pScale
       Case pChoice = 5      ' 6-month chart Rule #1 Technicals from StockCharts
            sURL = "http://stockcharts.com/c-sc/sc?s=" & pTicker & "&p=D&yr=0&mn=6&dy=0&i=t39628903145&r=9933"
            If pWidth = 0 Then pWidth = 350 * pScale
            If pHeight = 0 Then pHeight = 360 * pScale
       Case pChoice = 97
            sURL = "https://www.advfn.com/p.php?pid=financialgraphs" '&a0=13&a1=13&a2=10&a3=8&a4=8&a5=10"
            aSplit = Split(pTicker, ",")
            iNbr = UBound(aSplit, 1)
            If iNbr <> 4 Then GoTo ErrorExit
            For i1 = 0 To iNbr
                sURL = sURL & "&a" & i1 & "=" & aSplit(i1)
                Next i1
            If pWidth = 0 Then pWidth = 263 * pScale
            If pHeight = 0 Then pHeight = 169 * pScale
       Case pChoice = 98
            sURL = "http://ogres-crypt.com/php/chart.php?d="
            aSplit = Split(pTicker, ",")
            iNbr = UBound(aSplit, 1)
            iMax = 0.01
            iMin = 999999999
            For i1 = 0 To iNbr
                iTemp = 0
                On Error Resume Next
                iTemp = smfCDec(aSplit(i1))
                On Error GoTo 0
                If (iTemp > iMax) Then iMax = iTemp
                If (iTemp < iMin And iTemp > 0) Then iMin = iTemp
                Next i1
            For i1 = 0 To iNbr
                iTemp = 0
                On Error Resume Next
                iTemp = smfCDec(aSplit(i1))
                On Error GoTo 0
                iTemp = IIf(iTemp > 0, 1 + 97 * (iTemp - iMin) / (iMax - iMin), 0)
                sURL = sURL & CInt(iTemp) & IIf(i1 = iNbr, "", ",")
                Next i1
            If pWidth = 0 Then pWidth = 36 * iNbr * pScale
            If pHeight = 0 Then pHeight = 90 * pScale
       Case pChoice = 99
            sURL = pTicker
            If pWidth = 0 Then pWidth = 400
            If pHeight = 0 Then pHeight = 300
       Case Else: GoTo ErrorExit
       End Select
    oCell.AddComment ("")
    If sURL <> "" Then oCell.Comment.Shape.Fill.UserPicture sURL
    oCell.Comment.Text Text:=IIf(pText = "", Chr(32), pText)
    oCell.Comment.Shape.Width = pWidth
    oCell.Comment.Shape.Height = pHeight
    oCell.Comment.Shape.Top = pTop + oCell.Top
    oCell.Comment.Shape.Left = pLeft + oCell.Left
    oCell.Comment.Shape.Line.Visible = False             ' Doesn't work
    oCell.Comment.Shape.Line.ForeColor.SchemeColor = 9   ' Set line color to background color
    oCell.Comment.Shape.Shadow.Visible = False
    oCell.Comment.Visible = IIf(pVisible = 1, True, False)
    RCHCreateComment = pReturn
    Exit Function
ErrorExit:
    RCHCreateComment = "Error"
    End Function


Attribute VB_Name = "smfDownloadTable_"
Public Sub smfUpdateDownloadTable()
    '-----------------------------------------------------------------------------------------------------------*
    ' Macro to download data to fill in a 2-dimensional table
    '-----------------------------------------------------------------------------------------------------------*
    ' 2006.12.15 -- Created as a test process
    ' 2007.07.13 -- Add check for "X" to skip the replacement process
    ' 2007.07.13 -- Add progress information to status bar
    ' 2010.12.02 -- Add ability to refer to data in a prior column of the same row
    ' 2012.07.14 -- Fix element number processing for formula-based element definitions
    ' 2014.05.01 -- Rewrite to allow the update of only selected areas of data
    ' 2014.08.27 -- Modify error messages
    ' 2017.12.08 -- Allow for 50 (instead of 30) backward column reference
    '-----------------------------------------------------------------------------------------------------------*
    ' Download table requires several setup items:
    ' 1. The upper left hand corner cell of the table needs to be named name "Ticker"
    ' 2. The cells below the "Ticker" cell should be filled in with ticker symbols, one per cell
    ' 3. The cells to the right of the "Ticker" cell should be filled with column titles
    ' 4. The cells above the column titles need to be filled in with SMF add-in formulas or element numbers.  Use
    '    five tildas as a substitute for a ticker symbol.  For example, any of the following text strings could be
    '    used to get "Market Capitalization" from Yahoo:
    '
    '        941
    '        RCHGetElementNumber("~~~~~", 941)
    '        RCHGetTableCell("https://finance.yahoo.com/q/ks?s=~~~~~",1,">Market Cap")
    '-----------------------------------------------------------------------------------------------------------*
    
    On Error GoTo ErrorExit
          
    Set rTicker = Range("Ticker")
    If Selection.Address = Selection.EntireColumn.Address Or (Selection.Rows.Count = 1 And Selection.Columns.Count = 1) Then
       nTickers = rTicker.End(xlDown).Row - rTicker.Row
       nRowOffset = 0
    Else
       nTickers = Selection.Rows.Count
       nRowOffset = Selection.Row - rTicker.Row - 1
       If nRowOffset < 0 Then
          MsgBox "The first highlighted row must be below the ""Ticker"" range, within the data table. Update aborted."
          Exit Sub
          End If
       End If
    If Selection.Address = Selection.EntireRow.Address Or (Selection.Rows.Count = 1 And Selection.Columns.Count = 1) Then
       nFormulas = rTicker.Offset(-1, 1).End(xlToRight).Column - rTicker.Column
       nColOffset = 0
    Else
       nFormulas = Selection.Columns.Count
       nColOffset = Selection.Column - rTicker.Column - 1
       If nColOffset < 0 Then
          MsgBox "The first highlighted column must be to the right of the ""Ticker"" range, within the data table. Update aborted."
          Exit Sub
          End If
       End If
    
    oldStatusBar = Application.DisplayStatusBar
    Application.DisplayStatusBar = True
    
    For iRow = 1 To nTickers
        sTicker = rTicker.Offset(iRow + nRowOffset, 0)
        If sTicker = "" Then Exit For
        Application.StatusBar = Round(100 * ((iRow - 1) / nTickers), 0) & "% Completed " & _
                                " -- now processing " & sTicker & " -- #" & iRow & " of " & nTickers
        For iCol = 1 To nFormulas
            sFormula = rTicker.Offset(-1, iCol + nColOffset)
            If sFormula = "" Then Exit For
            If UCase(sFormula) <> "X" Then
               If IsNumeric(sFormula) Then
                  If smfGetAParms(1) = "" Then s1 = RCHGetElementNumber("Source", 1)
                  s1 = smfWord(smfGetAParms(0 + sFormula), 3, ";")
                  If Left(s1, 1) = "=" Then
                     sFormula = s1
                  Else
                     sFormula = "RCHGetElementNumber(""~~~~~"", " & sFormula & ")"
                     End If
                  End If
               sFormula = Replace(sFormula, "~~~~~", sTicker)
               For i1 = 1 To 50
                   If InStr(sFormula, "~~~") = 0 Then Exit For
                   If InStr(sFormula, "~~~" & i1 & "~~~") > 0 Then
                      sFormula = Replace(sFormula, "~~~" & i1 & "~~~", rTicker.Offset(iRow + nRowOffset, iCol + nColOffset).Offset(0, -i1).Value2)
                      End If
                   Next i1
                  rTicker.Offset(iRow + nRowOffset, iCol + nColOffset) = Evaluate(sFormula)
               End If
            Next iCol
        Next iRow
ErrorExit:
    Application.StatusBar = False
    Application.DisplayStatusBar = oldStatusBar
   End Sub
Attribute VB_Name = "smfGetBarChartHistoryCSV_"
Option Explicit

Function smfGetBarChartHistoryCSV(ByVal pTicker As String, _
                   Optional ByVal pPeriod As String = "d", _
                   Optional ByVal pSort As String = "d", _
                   Optional ByVal pRows As Integer = 1000, _
                   Optional ByVal pCols As Integer = 7)

    '-----------------------------------------------------------------------------------------------------------*
    ' User defined function to process CSV file from BarChart
    '-----------------------------------------------------------------------------------------------------------*
    ' 2017.06.02 -- Added
    '-----------------------------------------------------------------------------------------------------------*
                   
    ReDim vData(1 To 1, 1 To 1) As Variant
    vData(1, 1) = "Error"
    
    On Error GoTo ErrorExit
    
    '------------------> Null Return Item
    If pTicker = "None" Or pTicker = "" Then
       vData(1, 1) = "None"
       GoTo ErrorExit
       End If
       
    '------------------> Process pPeriod
    Dim sPeriod As String
    Select Case UCase(pPeriod)
       Case "": sPeriod = "daily"
       Case "D": sPeriod = "daily"
       Case "W": sPeriod = "weekly"
       Case "M": sPeriod = "monthly"
       Case "Q": sPeriod = "quarterly"
       Case "A": sPeriod = "yearly"
       Case Else
            vData(1, 1) = "Error on period: " & pPeriod
            GoTo ErrorExit
       End Select
       
    '------------------> Process pSort
    Dim sSort As String
    Select Case UCase(pSort)
       Case "": sSort = "desc"
       Case "A": sSort = "asc"
       Case "D": sSort = "desc"
       Case Else
            vData(1, 1) = "Error on sort: " & pSort
            GoTo ErrorExit
       End Select
    
    '------------------> Determine size of array to return and initialize array
    Dim iRows As Integer, iCols As Integer, i1 As Integer, i2 As Integer
    iRows = pRows  ' Rows
    iCols = pCols  ' Columns
    On Error Resume Next
    iRows = Application.Caller.Rows.Count
    iCols = Application.Caller.Columns.Count
    On Error GoTo ErrorExit
  
    ReDim vData(1 To iRows, 1 To iCols) As Variant
    For i1 = 1 To iRows
        For i2 = 1 To iCols
            vData(i1, i2) = ""
            Next i2
        Next i1
    
    '------------------> Get CSV file
    Dim sURL As String
    sURL = "https://www.barchart.com/proxies/timeseries/queryeod.ashx?symbol=" & UCase(pTicker) & _
           "&data=" & sPeriod & "&maxrecords=" & iRows & "&volume=total&order=" & sSort & "&dividends=true&backadjust=false"
    vData = smfGetCSVFile(sURL, ",", iRows, iCols)

ErrorExit:
    smfGetBarChartHistoryCSV = vData
                   
   End Function

Attribute VB_Name = "smfGetBarchartPortfolioView_"
Option Explicit
Public Function smfGetBarchartPortfolioView(ByVal pTickers As Variant, _
                         Optional ByVal pItems As Variant = "001016009010011006007008012013021022", _
                         Optional ByVal pMultiple As String = "N", _
                         Optional ByVal pHeader As Integer = 0, _
                         Optional ByVal pDim1 As Integer = 0, _
                         Optional ByVal pDim2 As Integer = 0)
                    
    '-----------------------------------------------------------------------------------------------------------*
    ' User defined function to download columns from a portfolio view on Barchart!
    '-----------------------------------------------------------------------------------------------------------*
    ' 2017.11.06 -- Created by Randy Harmelink (rharmelink@gmail.com)
    ' 2017.11.17 -- Allow a ticker symbol to be returned more than once
    '-----------------------------------------------------------------------------------------------------------*
    ' > Examples of invocations to get portfolio quotes for IBM and MMM:
    '
    '   =smfGetBarchartPortfolioView("IBM,MMM")
    '   =smfGetBarchartPortfolioView("IBM,MMM","001002")
    '   =smfGetBarchartPortfolioView("IBM,MMM","001002",,1)
    '-----------------------------------------------------------------------------------------------------------*
    
    'On Error GoTo ErrorExit
    Dim aUseWhich() As String:  aUseWhich = Split("--,1,1,1,1,1,1,1,1,1,1,2,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2", ",")
    Dim aFieldName() As String:  aFieldName = Split("--,symbol,symbolName,symbolShortName,contractName,exchange,openPrice,highPrice,lowPrice,lastPrice,priceChange,percentChange,volume,previousPrice,industry,contractExpirationDate,tradeTime,hasOptions,standardDeviation,weightedAlpha,openInterest,highPrice1y,lowPrice1y,pivotPoint,resistanceLevel1,resistanceLevel2,supportLevel1,supportLevel2,marketCap,sharesOutstanding,annualSales,annualNetIncome,beta,percentInsider,percentInstitutional,growth1y,growth3y,growth5y,revenueGrowth5y,earningsGrowth5y,dividen" & _
                                                    "dGrowth5y,earnings,epsDate,nextEarningsDate,epsAnnual,epsGrowthQuarter,epsGrowthYear,dividendRate,dividendYield,dividend,dividendDate,dividendExDate,paymentDate,dividendPayout,split,splitDate,peRatioTrailing,peRatioForward,pegRatio,returnOnEquity,returnOnAssets,profitMargin,debtEquity,priceSales,priceCashFlow,priceBook,bookValue,interestCoverage,movingAverage1m,movingAverage65d,movingAverage130d,movingAverage9m,movingAverage260d,movingAverageYtd,movingAverage5d,movingAverage20d,movingAverage50d," & _
                                                    "movingAverage100d,movingAverage200d,averageVolume1m,averageVolume3m,averageVolume6m,averageVolume9m,averageVolume1y,averageVolumeYtd,averageVolume5d,averageVolume20d,averageVolume50d,averageVolume100d,averageVolume200d,rawStochastic9d,rawStochastic14d,rawStochastic20d,rawStochastic50d,rawStochastic100d,stochasticK9d,stochasticK14d,stochasticK20d,stochasticK50d,stochasticK100d,stochasticD9d,stochasticD14d,stochasticD20d,stochasticD50d,stochasticD100d,averageTrueRange9d,averageTrueRange14d,average" & _
                                                    "TrueRange20d,averageTrueRange50d,averageTrueRange100d,relativeStrength9d,relativeStrength14d,relativeStrength20d,relativeStrength50d,relativeStrength100d,percentR9d,percentR14d,percentR20d,percentR50d,percentR100d,historicVolatility9d,historicVolatility14d,historicVolatility20d,historicVolatility50d,historicVolatility100d,macdOscillator9d,macdOscillator14d,macdOscillator20d,macdOscillator50d,macdOscillator100d,priceChange1m,priceChange3m,priceChange6m,priceChange9m,priceChange1y,priceChangeYtd,p" & _
                                                    "riceChange5d,priceChange20d,priceChange50d,priceChange100d,priceChange200d,percentChange1m,percentChange3m,percentChange6m,percentChange9m,percentChange1y,percentChangeYtd,percentChange5d,percentChange20d,percentChange50d,percentChange100d,percentChange200d,highPrice5d,highDate5d,lowPrice5d,lowDate5d,highHits5d,highPercent5d,lowHits5d,lowPercent5d,highPrice1m,highDate1m,lowPrice1m,lowDate1m,highHits1m,highPercent1m,lowHits1m,lowPercent1m,highPrice3m,highDate3m,lowPrice3m,lowDate3m,highHits3m,hig" & _
                                                    "hPercent3m,lowHits3m,lowPercent3m,highPrice6m,highDate6m,lowPrice6m,lowDate6m,highHits6m,highPercent6m,lowHits6m,lowPercent6m,highDate1y,lowDate1y,highHits1y,highPercent1y,lowHits1y,lowPercent1y,highPriceYtd,highDateYtd,lowPriceYtd,lowDateYtd,highHitsYtd,highPercentYtd,lowHitsYtd,lowPercentYtd,opinion,opinionStrength,opinionDirection,opinionPrevious,opinionLastWeek,opinionLastMonth,opinionShortTerm,opinionMediumTerm,opinionLongTerm,averageRecommendation,trendSpotterSignal,trendSpotterStrength,tr" & _
                                                    "endSpotterDirection,average7dSignal,average7dStrength,average7dDirection,movingAverage10to8dSignal,movingAverage10to8dStrength,movingAverage10to8dDirection,movingAverage20dSignal,movingAverage20dStrength,movingAverage20dDirection,macd20to50dSignal,macd20to50dStrength,macd20to50dDirection,bollingerBands20dSignal,bollingerBands20dStrength,bollingerBands20dDirection,commodityChannel40dSignal,commodityChannel40dStrength,commodityChannel40dDirection,movingAverage50dSignal,movingAverage50dStrength,mov" & _
                                                    "ingAverage50dDirection,macd20to100dSignal,macd20to100dStrength,macd20to100dDirection,parabolicTimePrice50dSignal,parabolicTimePrice50dStrength,parabolicTimePrice50dDirection,commodityChannel60dSignal,commodityChannel60dStrength,commodityChannel60dDirection,movingAverage100dSignal,movingAverage100dStrength,movingAverage100dDirection,macd50to100dSignal,macd50to100dStrength,macd50to100dDirection,opinion,opinionStrength,opinionDirection,opinionPrevious,opinionLastWeek,opinionLastMonth,opinionShortTe" & _
                                                    "rm,opinionMediumTerm,opinionLongTerm,trendSpotterSignal,trendSpotterStrength,trendSpotterDirection,average7dSignal,average7dStrength,average7dDirection,movingAverage10to8dSignal,movingAverage10to8dStrength,movingAverage10to8dDirection,movingAverage20dSignal,movingAverage20dStrength,movingAverage20dDirection,macd20to50dSignal,macd20to50dStrength,macd20to50dDirection,bollingerBands20dSignal,bollingerBands20dStrength,bollingerBands20dDirection,commodityChannel40dSignal,commodityChannel40dStrength,c" & _
                                                    "ommodityChannel40dDirection,movingAverage50dSignal,movingAverage50dStrength,movingAverage50dDirection,macd20to100dSignal,macd20to100dStrength,macd20to100dDirection,parabolicTimePrice50dSignal,parabolicTimePrice50dStrength,parabolicTimePrice50dDirection,commodityChannel60dSignal,commodityChannel60dStrength,commodityChannel60dDirection,movingAverage100dSignal,movingAverage100dStrength,movingAverage100dDirection,macd50to100dSignal,macd50to100dStrength,macd50to100dDirection", ",")
    Dim aHeading() As String:  aHeading = Split("--,Symbol,Name,Short Name,Contract Name,Exchange,Open,High,Low,Last,Change $,Change %,Volume,Previous,Industry,Expiration Date,Trade Time,Has Options,Std Dev,Wtd Alpha,Open Interest,52W High,52W Low,Pivot Point,1st Resistance,2nd Resistance,1st Support,2nd Support,Market Cap,Shares Outstanding,Annual Sales,Net Income,Beta,% Insider,% Institutional,1Y Return%,3Y Return%,5Y Return%,5Y Rev%,5Y Earn%,5Y Div%,Earnings,Earnings Date,Next Earnings Date,Earnings ttm,EPS Growth Prv Qtr,EPS Growth Prv Yr,Ann" & _
                                                    "ual Dividend,Dividend Yield,Dividend,Last Div Date,Ex-Div Date,Div Pymt Date,Div Payout%,Split Amt,Split Date,P/E ttm,Fwd P/E,PEG,ROE%,ROA%,Profit%,Debt/Equity,P/S,P/CF,P/B,Book Value,Int Coverage,1M SMA,3M SMA,6M SMA,9M SMA,12M SMA,YTD SMA,5D SMA,20D SMA,50D SMA,100D SMA,200D SMA,1M Avg Vol,3M Avg Vol,6M Avg Vol,9M Avg Vol,52W Avg Vol,YTD Avg Vol,5D Avg Vol,20D Avg Vol,50D Avg Vol,100D Avg Vol,200D Avg Vol,9D Stoch R,14D Stoch R,20D Stoch R,50D Stoch R,100D Stoch R,9D Stoch %K,14D Stoch %K,20D " & _
                                                    "Stoch %K,50D Stoch %K,100D Stoch %K,9D Stoch %D,14D Stoch %D,20D Stoch %D,50D Stoch %D,100D Stoch %D,9D Range,14D Range,20D Range,50D Range,100D Range,9D Rel Str,14D Rel Str,20D Rel Str,50D Rel Str,100D Rel Str,9D %R,14D %R,20D %R,50D %R,100D %R,9D Hist Volatility,14D Hist Volatility,20D Hist Volatility,50D Hist Volatility,100D Hist Volatility,9D MACD,14D MACD,20D MACD,50D MACD,100D MACD,1M Chg,3M Chg,6M Chg,9M Chg,52W Chg,YTD Chg,5D Chg,20D Chg,50D Chg,100D Chg,200D Chg,1M %Chg,3M %Chg,6M %Chg," & _
                                                    "9M %Chg,52W %Chg,YTD %Chg,5D %Chg,20D %Chg,50D %Chg,100D %Chg,200D %Chg,5D High,5D High Date,5D Low,5D Low Date,5D #Highs,5D %/High,5D #Lows,5D %/Low,1M High,1M High Date,1M Low,1M Low Date,1M #Highs,1M %/High,1M #Lows,1M %/Low,3M High,3M High Date,3M Low,3M Low Date,3M #Highs,3M %/High,3M #Lows,3M %/Low,6M High,6M High Date,6M Low,6M Low Date,6M #Highs,6M %/High,6M #Lows,6M %/Low,52W High Date,52W Low Date,52W #Highs,52W %/High,52W #Lows,52W %/Low,YTD High,YTD High Date,YTD Low,YTD Low Date,YTD" & _
                                                    " #Highs,YTD %/High,YTD #Lows,YTD %/Low,Opinion,Opin Strength,Opin Direction,Opin Previous,Opin Last Week,Opin Last Month,Opin Short Term,Opin Medium Term,Opin Long Term,Avg Recommend,Trendspotter Signal,Trendspotter Strength,Trendspotter Direction,7D ADX Signal,7D ADX Strength,7D ADX Direction,10-8D HiLo MA,10-8D HiLo MA Strength,10-8D HiLo MA Direction,20D MA Signal,20D MA Strength,20D MA Direction,20-50D MACD,20-50D MACD Strength,20-50D MACD Direction,20D BBands Signal,20D BBands Strength,20D " & _
                                                    "BBands Direction,40D CCI Signal,40D CCI Strength,40D CCI Direction,50D MA Signal,50D MA Strength,50D MA Direction,20-100D MACD Signal,20-100D MACD Strength,20-100D MACD Direction,50D Parabolic Signal,50D Parabolic Strength,50D Parabolic Direction,60D CCI Signal,60D CCI Strength,60D CCI Direction,100D MA Signal,100D MA Strength,100D MA Direction,50-100D MACD Signal,50-100D MACD Strength,50-100D MACD Direction,Opinion Score,Opin Strength Score,Opin Direction Score,Opin Previous Score,Opin Last Wee" & _
                                                    "k Score,Opin Last Month Score,Opin Short Term Score,Opin Medium Term Score,Opin Long Term Score,Trendspotter Signal Score,Trendspotter Strength Score,Trendspotter Direction Score,7D ADX Signal Score,7D ADX Strength Score,7D ADX Direction Score,10-8D HiLo MA Score,10-8D HiLo MA Strength Score,10-8D HiLo MA Direction Score,20D MA Signal Score,20D MA Strength Score,20D MA Direction Score,20-50D MACD Score,20-50D MACD Strength Score,20-50D MACD Direction Score,20D BBands Signal Score,20D BBands Stre" & _
                                                    "ngth Score,20D BBands Direction Score,40D CCI Signal Score,40D CCI Strength Score,40D CCI Direction Score,50D MA Signal Score,50D MA Strength Score,50D MA Direction Score,20-100D MACD Signal Score,20-100D MACD Strength Score,20-100D MACD Direction Score,50D Parabolic Signal Score,50D Parabolic Strength Score,50D Parabolic Direction Score,60D CCI Signal Score,60D CCI Strength Score,60D CCI Direction Score,100D MA Signal Score,100D MA Strength Score,100D MA Direction Score,50-100D MACD Signal Scor" & _
                                                    "e,50-100D MACD Strength Score,50-100D MACD Direction Score", ",")
    
    Dim i1 As Integer, i2 As Integer, i3 As Integer, i4 As Integer, s1 As String
        
    '------------------> Determine size of array to return
    Dim iRows As Integer, iCols As Integer
    iRows = pDim1  ' Rows
    iCols = pDim2  ' Columns
    If pDim1 = 0 Or pDim2 = 0 Then
       If pDim1 = 0 Then iRows = 200   ' Old default
       If pDim2 = 0 Then iCols = 100   ' Old default
       On Error Resume Next
       iRows = Application.Caller.Rows.Count
       iCols = Application.Caller.Columns.Count
       On Error GoTo ErrorExit
       End If
  
    '------------------> Initialize return array
    ReDim vData(1 To iRows, 1 To iCols) As Variant
    For i1 = 1 To iRows
        For i2 = 1 To iCols
            vData(i1, i2) = "--"
            Next i2
        Next i1
    
    '------------------> Verify item and ticker and view parameters
    Dim oCell As Range, sItems As String, sTickers As String, aCols(1 To 300) As String, sFieldList As String
    Dim iFind As Integer, aTickers As Variant
    Select Case VarType(pItems)
        Case vbString
             sItems = LCase(Replace(pItems, " ", ""))
        Case Is >= 8192
             sItems = ""
             For Each oCell In pItems
                 If oCell.Value > "" Then sItems = sItems & Right(LCase(Format(oCell.Value, "000")), 3)
                 Next oCell
        Case Else
            smfGetBarchartPortfolioView = "Invalid items parameter: " & pItems
            Exit Function
        End Select
    i1 = Len(sItems) / 3
    If i1 < iCols Then iCols = i1
    sFieldList = ",symbol,"
    For i1 = 1 To iCols
        s1 = Mid(sItems & String$(1000, "0"), 3 * i1 - 2, 3)   ' Make sure string is long enough
        Select Case s1
           Case "000" To "294"
                aCols(i1) = CInt(s1)
                iFind = InStr(sFieldList, "," & aFieldName(s1) & ",")
                If iFind = 0 Then sFieldList = sFieldList & aFieldName(s1) & ","
           Case Else: aCols(i1) = 0
           End Select
        Next i1
    sFieldList = Mid(sFieldList, 2, Len(sFieldList) - 2)  ' Remove leading and trailing comma
           
    Select Case VarType(pTickers)
        Case vbString
             If pTickers = "None" Then GoTo ErrorExit
             sTickers = UCase(pTickers)
        Case Is >= 8192
             sTickers = ""
             For Each oCell In pTickers
                 sTickers = sTickers & IIf(oCell.Value <> "", UCase(oCell.Value), "XXXXX") & ","
                 Next oCell
             sTickers = Left(sTickers, Len(sTickers) - 1)
        Case Else
            smfGetBarchartPortfolioView = "Invalid tickers parameter: " & pTickers
            Exit Function
        End Select
    aTickers = Split(sTickers, ",")
    
    '------------------> Create header if requested
    If pHeader = 1 Then
       For i1 = 1 To iCols
           vData(1, i1) = aHeading(aCols(i1))
           Next i1
       End If
    If aTickers(0) = "NONE" Then GoTo ErrorExit
    
    '------------------> Extract requested data items
    Dim iPtr As Long, iPos1 As Long, sData As String, sLine1 As String, sLine2 As String, sURL As String, v1 As Variant
    sURL = "https://core-api.barchart.com/v1/quotes/get?symbols=" & Replace(sTickers, ",XXXXX", "") & "&fields=" & sFieldList & "&raw=1"
    iPtr = 1
    sData = RCHGetWebData(sURL, iPtr, 30000)
    iPos1 = InStr(2, sData, """data"":")
    iPtr = iPtr + iPos1 + 1
    sData = RCHGetWebData(sURL, iPtr, 30000)
    For i2 = 1 + pHeader To iRows
        iPos1 = InStr(2, sData, "{")
        If iPos1 = 0 Then Exit For
        iPtr = iPtr + iPos1 + 1
        sData = RCHGetWebData(sURL, iPtr, 30000)
        'sLine = """" & smfStrExtr(sData & "}", "~", "}") & ","""
        sLine1 = """" & smfStrExtr(sData & "}", "~", """raw"":") & ","""
        sLine2 = """" & smfStrExtr(sData & "}", """raw"":{", "}") & ","""
        iPos1 = InStr(2, sData, "}}")
        If iPos1 = 0 Then Exit For
        iPtr = iPtr + iPos1 + 1
        sData = RCHGetWebData(sURL, iPtr, 30000)
        s1 = smfStrExtr(sLine1 & ",", """symbol"":""", """")
        For i3 = 0 To UBound(aTickers)
            If s1 = aTickers(i3) Then
               i4 = i3 + 1 + pHeader
               For i1 = 1 To iCols
                   If aFieldName(aCols(i1)) <> "--" Then
                      v1 = smfStrExtr(IIf(aUseWhich(aCols(i1)) = 1, sLine1, sLine2) & ",", """" & aFieldName(aCols(i1)) & """:", ",""")
                      v1 = smfConvertData(Replace(v1, "\/", "/"))
                      If v1 = "" Then
                         vData(i4, i1) = "--"
                      Else
                         If Left(v1, 1) = """" Then v1 = smfStrExtr(v1 & """", """", """", 1)
                         Select Case 0 + aCols(i1)
                            Case 16, 42, 43, 50, 51, 52, 55, 153, 155, 161, 163, 169, 171, 177, 179, 184, 185, 191, 193
                                 vData(i4, i1) = v1
                                 On Error Resume Next
                                 vData(i4, i1) = DateValue(v1)
                                 On Error GoTo ErrorExit
                            Case Else
                                 vData(i4, i1) = v1
                            End Select
                         End If ' v1
                      End If ' aFieldName
                   Next i1
               If pMultiple = "N" Then Exit For
               End If ' s1
            Next i3
        Next i2

ErrorExit:
    smfGetBarchartPortfolioView = vData
    End Function









Attribute VB_Name = "smfGetGoogleHistoryCSV_"
Option Explicit

Function smfGetGoogleHistoryCSV(ByVal pTicker As String, _
                   Optional ByVal pStartDate As Variant = "", _
                   Optional ByVal pEndDate As Variant = "", _
                   Optional ByVal pPeriod As String = "d", _
                   Optional ByVal pRows As Integer = 10000, _
                   Optional ByVal pCols As Integer = 7)

    '-----------------------------------------------------------------------------------------------------------*
    ' User defined function to process CSV file from Google
    '-----------------------------------------------------------------------------------------------------------*
    ' 2017.06.12 -- Added
    ' 2017.11.30 -- Change URL ("www" to "finance"
    '-----------------------------------------------------------------------------------------------------------*
                   
    ReDim vData(1 To 1, 1 To 1) As Variant
    vData(1, 1) = "Error"
    
    On Error GoTo ErrorExit
    
    '------------------> Null Return Item
    If pTicker = "None" Or pTicker = "" Then
       vData(1, 1) = "None"
       GoTo ErrorExit
       End If
       
    '------------------> Verify and Process starting and ending dates
    Dim dBegin As Variant, dEnd As Variant
    vData(1, 1) = "Error on starting date: " & pStartDate
    Select Case True
          Case VarType(pStartDate) = vbDate Or VarType(pStartDate) = vbDouble
               dBegin = pStartDate
          Case pStartDate = ""
               dBegin = DateValue("1/1/1970")
          Case Else
               dBegin = DateValue(pStartDate)
          End Select
    vData(1, 1) = "Error on ending date: " & pEndDate
    Select Case True
          Case VarType(pEndDate) = vbDate Or VarType(pEndDate) = vbDouble
               dEnd = Int(pEndDate)
          Case pEndDate = ""
               dEnd = Int(Now)
          Case Else
               dEnd = Int(DateValue(pEndDate))
          End Select
     If dBegin > dEnd Then
        vData(1, 1) = "Error: Starting date cannot be after ending date: " & pStartDate & "," & pEndDate
        GoTo ErrorExit
        End If
       
    '------------------> Process period
    ' No processing at this point
    
    '------------------> Determine size of array to return and initialize array
    Dim iRows As Integer, iCols As Integer, i1 As Integer, i2 As Integer
    iRows = pRows  ' Rows
    iCols = pCols  ' Columns
    On Error Resume Next
    iRows = Application.Caller.Rows.Count
    iCols = Application.Caller.Columns.Count
    On Error GoTo ErrorExit
  
    ReDim vData(1 To iRows, 1 To iCols) As Variant
    For i1 = 1 To iRows
        For i2 = 1 To iCols
            vData(i1, i2) = ""
            Next i2
        Next i1
    
    '------------------> Get CSV file
    Dim sURL As String
    sURL = "http://finance.google.com/finance/historical?output=csv&q=" & UCase(pTicker) & _
           "&startdate=" & Format(dBegin, "mmm d, yyyy") & "&enddate=" & Format(dEnd, "mmm d, yyyy")
    vData = smfGetCSVFile(sURL, ",", iRows, iCols)

ErrorExit:
    smfGetGoogleHistoryCSV = vData
                   
   End Function

Attribute VB_Name = "smfGetGuruFocusCSVItem_"
Option Explicit
Function smfGetGuruFocusCSVItem(ByVal pTicker As String, _
                                ByVal pItem As String, _
                       Optional ByVal pPeriod As Variant = "TTM", _
                       Optional ByVal pError As Variant = "Error", _
                       Optional ByVal pType As Integer = 0) As Variant
                  
   '-----------------------------------------------------------------------------------------------------------*
   ' Function to return a data item from GuruFocus CSV file
   '-----------------------------------------------------------------------------------------------------------*
   ' 2017.09.26 -- Created by Randy Harmelink (rharmelink@gmail.com)
   ' 2017.10.12 -- Official release
   '-----------------------------------------------------------------------------------------------------------*
   ' Sample of use:
   '
   '    =smfGetGuruFocusCSVItem("MMM","Fiscal Period","TTM")
   '    =smfGetGuruFocusCSVItem("MMM","Fiscal Period","A0")
   '    =smfGetGuruFocusCSVItem("MMM","Fiscal Period","Q0")
   '
   '-----------------------------------------------------------------------------------------------------------*
    
    On Error GoTo ErrorExit
    Dim vError As Variant, sURL As String, sLine As String
    
    smfGetGuruFocusCSVItem = pError
    
    If UCase(pTicker) = "NONE" Then
       smfGetGuruFocusCSVItem = "--"
       Exit Function
       End If
        
    '------------------> Extract line of desired item
    sURL = "https://www.gurufocus.com/download_financials_in_CSV.php?symbol=" & UCase(pTicker)
    Select Case UCase(pItem)
       Case "DOWNLOADED"
            smfGetGuruFocusCSVItem = "Downloaded " & smfStrExtr(RCHGetWebData(sURL, "Downloaded ", 3000), "~", ",")
            Exit Function
       Case "HEADER"
            smfGetGuruFocusCSVItem = "30 Year Financials " & smfStrExtr(RCHGetWebData(sURL, "30 Year Financials ", 3000), "~", "All Numbers")
            Exit Function
       Case "ALL NUMBERS"
            smfGetGuruFocusCSVItem = "All Numbers " & smfStrExtr(RCHGetWebData(sURL, "All Numbers ", 3000), "~", "Annual Data:")
            Exit Function
       Case "NAME"
            smfGetGuruFocusCSVItem = smfWord(smfStrExtr(RCHGetWebData(sURL, "Change log", 10000), "~", "Key Statistics:"), 2, ",")
            Exit Function
       Case "COUNTRY"
            smfGetGuruFocusCSVItem = smfWord(smfStrExtr(RCHGetWebData(sURL, "Change log", 10000), "~", "Key Statistics:"), 3, ",")
            Exit Function
       Case "SECTOR"
            smfGetGuruFocusCSVItem = smfWord(smfStrExtr(RCHGetWebData(sURL, "Change log", 10000), "~", "Key Statistics:"), 4, ",")
            Exit Function
       Case "INDUSTRY"
            smfGetGuruFocusCSVItem = smfWord(smfStrExtr(RCHGetWebData(sURL, "Change log", 10000), "~", "Key Statistics:"), 5, ",")
            Exit Function
       Case "KS-PB RATIO", "KS-PE RATIO", "KS-PS RATIO"
            sLine = Replace(RCHGetWebData(sURL, """" & Replace(pItem, "KS-", "") & """", 3000), "Growth Rates:", ",")
       Case "BOOK VALUE GROWTH (%)"
            sLine = smfStrExtr(RCHGetWebData(sURL, """" & pItem & """", 3000), "~", "30 Year Financials ")
       Case "PB RATIO", "PE RATIO", "PS RATIO"
            sLine = """" & pItem & """" & smfStrExtr(RCHGetWebData(sURL, """Free Cash Flow""", 20000), """" & pItem & """", "~")
       Case Else
            sLine = RCHGetWebData(sURL, """" & pItem & """", 3000)
       End Select
    If sLine = "" Then
       smfGetGuruFocusCSVItem = "Error -- pItem not found: " & pItem
       Exit Function
       End If
    sLine = smfStrExtr(Replace(Replace(sLine, ","""",", ","" "","), ","""",", ","" "",") & """""", """", """""")
    
    '------------------> Which data period?
    Select Case UCase(pPeriod)
       Case "TTM"
            smfGetGuruFocusCSVItem = smfWord(sLine, 32, """,""", 1)
       Case "Q0" To "Q9", "Q10" To "Q99", "Q100" To "Q119"
            smfGetGuruFocusCSVItem = smfWord(sLine, 153 - Mid(pPeriod, 2, 6), """,""", 1)
       Case "A0" To "A9", "A10" To "A29"
            smfGetGuruFocusCSVItem = smfWord(sLine, 31 - Mid(pPeriod, 2, 6), """,""", 1)
       Case 1 To 154
            smfGetGuruFocusCSVItem = smfWord(sLine, pPeriod, """,""", 1)
       Case Else
            smfGetGuruFocusCSVItem = "Error -- Invalid pPeriod parameter: " & pPeriod
       End Select
    
ErrorExit:
   End Function

Attribute VB_Name = "smfGetMorningStarCSV_"
Option Explicit

Function smfGetMorningstarHistoryCSV(ByVal pTicker As String, _
                            Optional ByVal pStartDate As Variant = "", _
                            Optional ByVal pEndDate As Variant = "", _
                            Optional ByVal pPeriod As String = "d", _
                            Optional ByVal pRows As Integer = 10000, _
                            Optional ByVal pCols As Integer = 7)

    '-----------------------------------------------------------------------------------------------------------*
    ' User defined function to process CSV file from Morningstar
    '-----------------------------------------------------------------------------------------------------------*
    ' 2017.06.12 -- Added
    '-----------------------------------------------------------------------------------------------------------*
                   
    ReDim vData(1 To 1, 1 To 1) As Variant
    vData(1, 1) = "Error"
    
    On Error GoTo ErrorExit
    
    '------------------> Null Return Item
    If pTicker = "None" Or pTicker = "" Then
       vData(1, 1) = "None"
       GoTo ErrorExit
       End If
       
    '------------------> Verify and Process starting and ending dates
    Dim dBegin As Variant, dEnd As Variant
    vData(1, 1) = "Error on starting date: " & pStartDate
    Select Case True
          Case VarType(pStartDate) = vbDate Or VarType(pStartDate) = vbDouble
               dBegin = pStartDate
          Case pStartDate = ""
               dBegin = DateValue("1/1/1970")
          Case Else
               dBegin = DateValue(pStartDate)
          End Select
    vData(1, 1) = "Error on ending date: " & pEndDate
    Select Case True
          Case VarType(pEndDate) = vbDate Or VarType(pEndDate) = vbDouble
               dEnd = Int(pEndDate)
          Case pEndDate = ""
               dEnd = Int(Now)
          Case Else
               dEnd = Int(DateValue(pEndDate))
          End Select
     If dBegin > dEnd Then
        vData(1, 1) = "Error: Starting date cannot be after ending date: " & pStartDate & "," & pEndDate
        GoTo ErrorExit
        End If
       
    '------------------> Process period
    Dim sPeriod As String
    sPeriod = Left(LCase(pPeriod), 1)
    Select Case sPeriod
       Case "": sPeriod = "d"
       Case "d", "w", "m", "q", "a"
       Case Else
            vData(1, 1) = "Error on period: " & pPeriod
            GoTo ErrorExit
       End Select
    
    '------------------> Determine size of array to return and initialize array
    Dim iRows As Integer, iCols As Integer, i1 As Integer, i2 As Integer
    iRows = pRows  ' Rows
    iCols = pCols  ' Columns
    On Error Resume Next
    iRows = Application.Caller.Rows.Count
    iCols = Application.Caller.Columns.Count
    On Error GoTo ErrorExit
  
    ReDim vData(1 To iRows, 1 To iCols) As Variant
    For i1 = 1 To iRows
        For i2 = 1 To iCols
            vData(i1, i2) = ""
            Next i2
        Next i1
    
    '------------------> Get CSV file
    Dim sURL As String
    sURL = "http://performance.morningstar.com/perform/Performance/stock/exportStockPrice.action?t=" & UCase(pTicker) & _
           "&pd=custom&freq=" & sPeriod & "&sd=" & Format(dBegin, "mm/dd/yyyy") & "&ed=" & Format(dEnd, "mm/dd/yyyy")
    vData = smfGetCSVFile(sURL, ",", iRows, iCols)

ErrorExit:
    smfGetMorningstarHistoryCSV = vData
                   
   End Function



Attribute VB_Name = "smfGetYahooHistoryCSV_"
Option Explicit

Function smfGetYahooHistoryCSV(ByVal pTicker As String, _
                   Optional ByVal pStartDate As Variant = "", _
                   Optional ByVal pEndDate As Variant = "", _
                   Optional ByVal pPeriod As String = "d", _
                   Optional ByVal pRows As Integer = 10000, _
                   Optional ByVal pCols As Integer = 7)

    '-----------------------------------------------------------------------------------------------------------*
    ' User defined function to process CSV file from Yahoo
    '-----------------------------------------------------------------------------------------------------------*
    ' 2017.05.31 -- Added
    '-----------------------------------------------------------------------------------------------------------*
                   
    ReDim vData(1 To 1, 1 To 1) As Variant
    vData(1, 1) = "Error"
    
    On Error GoTo ErrorExit
    
    '------------------> Null Return Item
    If pTicker = "None" Or pTicker = "" Then
       vData(1, 1) = "None"
       GoTo ErrorExit
       End If
       
    '------------------> Verify and Process starting and ending dates
    Dim dBegin As Double, dEnd As Double
    vData(1, 1) = "Error on starting date: " & pStartDate
    Select Case True
          Case VarType(pStartDate) = vbDate Or VarType(pStartDate) = vbDouble
               dBegin = smfDate2Unix(pStartDate)
          Case pStartDate = ""
               dBegin = smfDate2Unix(DateValue("1/1/1970"))
          Case Else
               dBegin = smfDate2Unix(DateValue(pStartDate))
          End Select
    vData(1, 1) = "Error on ending date: " & pEndDate
    Select Case True
          Case VarType(pEndDate) = vbDate Or VarType(pEndDate) = vbDouble
               dEnd = smfDate2Unix(Int(pEndDate) + 1)
          Case pEndDate = ""
               dEnd = smfDate2Unix(Int(Now) + 1)
          Case Else
               dEnd = smfDate2Unix(Int(DateValue(pEndDate)) + 1)
          End Select
     If dBegin > dEnd Then
        vData(1, 1) = "Error: Starting date cannot be after ending date: " & pStartDate & "," & pEndDate
        GoTo ErrorExit
        End If
       
    '------------------> Process period
    Dim sPeriod As String, sEvent As String, sInterval As String
    sPeriod = UCase(pPeriod)
    Select Case sPeriod
       Case "D": sEvent = "history": sInterval = "1d"
       Case "W": sEvent = "history": sInterval = "1wk"
       Case "M": sEvent = "history": sInterval = "1mo"
       Case "S": sEvent = "split": sInterval = "1d"
       Case "V": sEvent = "div": sInterval = "1d"
       Case Else
            vData(1, 1) = "Error on period: " & pPeriod
            GoTo ErrorExit
       End Select
    
    '------------------> Determine size of array to return and initialize array
    Dim iRows As Integer, iCols As Integer, i1 As Integer, i2 As Integer
    iRows = pRows  ' Rows
    iCols = pCols  ' Columns
    On Error Resume Next
    iRows = Application.Caller.Rows.Count
    iCols = Application.Caller.Columns.Count
    On Error GoTo ErrorExit
  
    ReDim vData(1 To iRows, 1 To iCols) As Variant
    For i1 = 1 To iRows
        For i2 = 1 To iCols
            vData(i1, i2) = ""
            Next i2
        Next i1
    
    '------------------> Get CSV file
    Dim sURL As String
    sURL = "https://query1.finance.yahoo.com/v7/finance/download/" & UCase(pTicker) & _
           "?period1=" & dBegin & "&period2=" & dEnd & "&interval=" & sInterval & "&events=" & sEvent & "&crumb="
    vData = smfGetCSVFile(sURL, ",", iRows, iCols)

ErrorExit:
    smfGetYahooHistoryCSV = vData
                   
   End Function



Function smfGetYahooHistoryCSVData(Optional ByRef pURL As String = "https://query1.finance.yahoo.com/v7/finance/download/MMM?period1=1493610466&period2=1496202466&interval=1d&events=history&crumb=")

   '-----------------------------------------------------------------------------------------------------------*
   ' User defined function to download historical quotes data file from Yahoo
   '-----------------------------------------------------------------------------------------------------------*
   ' 2017.05.31 -- Adapted from code at http://www.xlautomation.com.au/free-spreadsheets/yahoo-historical-price-extract
   '-----------------------------------------------------------------------------------------------------------*

   Dim sURL As String
   Dim sCrumb As String, sCookie As String, sResult As String
   Dim i1 As Integer, b1 As Boolean
   Dim oData As Object
   
   sURL = "https://finance.yahoo.com/lookup?s=%7B0%7D"
   Set oData = New WinHttp.WinHttpRequest
   b1 = True
   For i1 = 1 To 5
       With oData
            .Open "GET", sURL, b1
            Select Case i1
               Case 1: .setRequestHeader "Content-Type", "application/x-www-form-urlencoded; charset=UTF-8"
               Case Else: .setRequestHeader "Cookie", sCookie
               End Select
            .send
            .waitForResponse
            Select Case i1
               Case 1
                    sCrumb = smfStrExtr(smfStrExtr(.responseText, "CrumbStore", "~"), """:""", """")
                    sCookie = Split(.getResponseHeader("Set-Cookie"), ";")(0)
                    sURL = pURL + sCrumb
               Case Else
                    sResult = .responseText
                    If Left(sResult, 4) = "Date" Then Exit For
               End Select
            End With
       b1 = False
       Next i1
   
    smfGetYahooHistoryCSVData = sResult
      
End Function
Attribute VB_Name = "smfGetYahooHistory_"
Option Explicit

Function smfGetYahooHistory(ByVal pTicker As String, _
                   Optional ByVal pStartDate As Variant = "", _
                   Optional ByVal pEndDate As Variant = "", _
                   Optional ByVal pPeriod As String = "d", _
                   Optional ByVal pItems As String = "dohlcvufgxs", _
                   Optional ByVal pNames As Integer = 1, _
                   Optional ByVal pResort As Integer = 0, _
                   Optional ByVal pRows As Integer = 0, _
                   Optional ByVal pCols As Integer = 0)
                    
    '-----------------------------------------------------------------------------------------------------------*
    ' User defined function to download historical quotes from Yahoo!
    '-----------------------------------------------------------------------------------------------------------*
    ' 2017.05.18 -- Written by Randy Harmelink (rharmelink@gmail.com)
    ' 2017.05.19 -- Set minimum rows to 2 (for processing, not returning)
    ' 2017.05.19 -- Add varType() function to cumulative dividend processing
    ' 2017.05.20 -- Set defaults on pRows and pCols for VBA calls, with no range involved
    ' 2017.05.21 -- Change default starting date to "1/1/1970"
    ' 2017.05.21 -- Change "null" values to zeroes and backfill zeroed values
    ' 2017.05.29 -- Fix sorting of split or dividend requests
    ' 2017.05.30 -- Change to use smfGetWebPage() instead of RCHGetURLData(), to remove redundant retrievals
    ' 2017.06.09 -- Remove calculated dividend adjustments, as Yahoo appears to be doing them now
    ' 2017.07.12 -- Add back in adjustments for O/H/L amounts, get adjusted close and close
    '-----------------------------------------------------------------------------------------------------------*
    ' > Example of an invocation to get daily quotes for 2004 for IBM:
    '
    '   =smfGetYahooHistory("IBM","1/1/2017","5/18/2017","d")
    '-----------------------------------------------------------------------------------------------------------*
    
    Dim s1 As String, sURL As String, sData As String, sFind As String, sFound As String
    Dim i1 As Integer, i2 As Integer, i3 As Integer, i4 As Integer
    Dim iRows As Integer, iCols As Integer, iRow As Integer
    Dim vDivAmt As Variant, vNum As Variant, vDen As Variant
    Dim dAdj As Double, d1 As Double, d2 As Double, dSplitAdj As Double
    Dim vByDay As Variant
    ReDim vData(1 To 1, 1 To 1) As Variant
    
    vData(1, 1) = "Error"
    
    On Error GoTo ErrorExit
    
    '------------------> Set defaults, if necessary
    If pPeriod = "" Then pPeriod = "d"
    If pItems = "" Then pItems = "dohlcvufgxs"
    
    '------------------> Null Return Item
    If pTicker = "None" Or pTicker = "" Then
       vData(1, 1) = "None"
       GoTo ErrorExit
       End If
       
    '------------------> Verify and Process starting and ending dates
    Dim dBegin As Double, dEnd As Double
    vData(1, 1) = "Error on starting date: " & pStartDate
    Select Case True
          Case VarType(pStartDate) = vbDate Or VarType(pStartDate) = vbDouble
               dBegin = smfDate2Unix(pStartDate)
          Case pStartDate = ""
               dBegin = smfDate2Unix(DateValue("1/1/1970"))
          Case Else
               dBegin = smfDate2Unix(DateValue(pStartDate))
          End Select
    vData(1, 1) = "Error on ending date: " & pEndDate
    Select Case True
          Case VarType(pEndDate) = vbDate Or VarType(pEndDate) = vbDouble
               dEnd = smfDate2Unix(Int(pEndDate) + 1)
          Case pEndDate = ""
               dEnd = smfDate2Unix(Int(Now) + 1)
          Case Else
               dEnd = smfDate2Unix(Int(DateValue(pEndDate)) + 1)
          End Select
     If dBegin > dEnd Then
        vData(1, 1) = "Error: Starting date cannot be after ending date: " & pStartDate & "," & pEndDate
        GoTo ErrorExit
        End If
    
    '------------------> Determine size of array to return
    iRows = pRows  ' Rows
    iCols = pCols  ' Columns
    If pRows = 0 Or pCols = 0 Then
       On Error Resume Next
       iRows = Application.Caller.Rows.Count
       iCols = Application.Caller.Columns.Count
       On Error GoTo ErrorExit
       End If
    If iRows = 0 Then iRows = Int(smfUnix2Date(Int(dEnd)) - smfUnix2Date(Int(dBegin))) + 2
    If iCols = 0 Then iCols = Len(pItems) + 1
    If iRows = 1 Then iRows = 2
  
    '------------------> Initialize return array
    ReDim vData(1 To iRows, 1 To iCols) As Variant
    For i1 = 1 To iRows
        For i2 = 1 To iCols
            vData(i1, i2) = ""
            Next i2
        Next i1
    vData(1, 1) = "Error"
       
    '------------------> Process period
    Dim sPeriod As String, sFreq As String, sfilter As String, sInterval As String
    vData(1, 1) = "Error on period: " & pPeriod
    sPeriod = UCase(pPeriod)
    Select Case sPeriod
       Case "D": sFreq = "1d": sfilter = "history": sInterval = "1d"
       Case "W": sFreq = "1wk": sfilter = "history": sInterval = "1wk"
       Case "A", "Q", "M": sFreq = "1mo": sfilter = "history": sInterval = "1mo"
       Case "V": sFreq = "1d": sfilter = "div": sInterval = "div|split"
       Case "S": sFreq = "1d": sfilter = "split": sInterval = "div|split"
       Case Else: GoTo ErrorExit
       End Select
    vData(1, 1) = "Error"
    
    '------------------> Verify and Process pItems parameter
    Const kItemList As String = "Ticker,Date,Open,High,Low,Close,Volume,Unadj,Div Adj,Split Adj,Dividend,Split"
    Dim sItems As String, aItems(1 To 12) As Integer
    For i1 = 1 To 12: aItems(i1) = 0: Next i1
    sItems = UCase(pItems)
    Select Case sPeriod
       Case "V"
            If InStr(sItems, "T") > 0 Then aItems(1) = 1
            aItems(2) = 1 + aItems(1)  ' Date
            aItems(11) = 2 + aItems(1) ' Dividends
       Case "S"
            If InStr(sItems, "T") > 0 Then aItems(1) = 1
            aItems(2) = 1 + aItems(1)  ' Date
            aItems(12) = 2 + aItems(1) ' Splits
       Case Else
            For i1 = 1 To Len(sItems)
                i2 = InStr("TDOHLCVUFGXS", Mid(sItems, i1, 1))
                If i2 = 0 Then
                   vData(1, 1) = "Invalid data item requested: " & Mid(sItems, i1, 1)
                   GoTo ErrorExit
                   End If
                If i1 <= iCols Then aItems(i2) = i1
                Next i1
        End Select
  
    '------------------> Verify and Process pNames parameter
    Select Case pNames
       Case 0
       Case 1
            For i1 = 1 To 12
                If aItems(i1) > 0 Then vData(1, aItems(i1)) = smfWord(kItemList, i1, ",")
                Next i1
       Case Else
            vData(1, 1) = "Invalid pNames parameter: " & pNames
       End Select
  
    '------------------> Create URL and retrieve data
    sURL = "https://finance.yahoo.com/quote/" & pTicker & "/history?period1=" & dBegin & "&period2=" & dEnd & _
           "&interval=" & sInterval & "&filter=" & sfilter & "&frequency=" & sFreq
    'sData = RCHGetURLData(sURL)
    sData = smfGetWebPage(sURL)
    sData = smfStrExtr(sData, "HistoricalPriceStore", "]")   ' Keep only the "HistoricalPriceStore" JSON data
    vByDay = Split(sData, "},{")
  
    '------------------> Extract data
    dAdj = 1
    dSplitAdj = 1
    vDivAmt = 0
    vDen = 0
    iRow = pNames
    For i1 = 0 To UBound(vByDay)
       s1 = vByDay(i1) & "}"
       s1 = Replace(s1, "null", 0)
       Select Case True
          Case InStr(s1, "DIVIDEND") > 0
               vDivAmt = smfStrExtr(s1, """amount"":", ",", 1)
          Case InStr(s1, "SPLIT") > 0
               vDen = smfStrExtr(s1, """denominator"":", ",", 1)
               vNum = smfStrExtr(s1, """numerator"":", ",", 1)
          Case Else
               If iRow > iRows Then Exit For
               Select Case True
                  Case vDivAmt > 0 And sPeriod <> "S"
                       If sPeriod = "V" Then iRow = iRow + 1
                       i2 = aItems(11)
                       If i2 > 0 And iRow > pNames Then
                          If VarType(vData(iRow, i2)) = vbString Then vData(iRow, i2) = 0
                          vData(iRow, i2) = vData(iRow, i2) + vDivAmt
                          End If
                       d1 = smfStrExtr(s1, """close"":", ",", 1)
                       If d1 <> 0 Then dAdj = dAdj * (d1 - vDivAmt) / d1
                       vDivAmt = 0
                  Case vDen > 0 And sPeriod <> "V"
                       If sPeriod = "S" Then iRow = iRow + 1
                       If aItems(12) > 0 Then vData(iRow, aItems(12)) = vDen & " for " & vNum
                       dSplitAdj = dSplitAdj * vNum / vDen
                       vDen = 0
                       vNum = 0
                  End Select
               d1 = Int(smfUnix2Date(smfStrExtr(s1, """date"":", ",")))
               Select Case True
                  Case iRow > pNames And sPeriod = "A" And Month(d1) <> 1
                  Case iRow > pNames And sPeriod = "Q" And Month(d1) <> 1 And Month(d1) <> 4 And Month(d1) <> 7 And Month(d1) <> 10
                  Case Else
                       If iRow = iRows Then Exit For
                       iRow = iRow + 1
                       If aItems(1) > 0 Then vData(iRow, aItems(1)) = pTicker
                       If aItems(2) > 0 Then vData(iRow, aItems(2)) = d1
                       If aItems(3) > 0 Then vData(iRow, aItems(3)) = smfStrExtr(s1, """open"":", ",", 1) * dAdj
                       If aItems(4) > 0 Then vData(iRow, aItems(4)) = smfStrExtr(s1, """high"":", ",", 1) * dAdj
                       If aItems(5) > 0 Then vData(iRow, aItems(5)) = smfStrExtr(s1, """low"":", ",", 1) * dAdj
                       d2 = smfStrExtr(s1, """adjclose"":", "}", 1) ' * dAdj
                       If aItems(6) > 0 Then vData(iRow, aItems(6)) = d2
                       If aItems(7) > 0 Then vData(iRow, aItems(7)) = smfStrExtr(s1, """volume"":", ",", 1)
                       'If aItems(8) > 0 Then vData(iRow, aItems(8)) = smfStrExtr(s1, """unadjclose"":", "}".1)
                       If aItems(8) > 0 Then vData(iRow, aItems(8)) = smfStrExtr(s1, """close"":", ",", 1)
                       If aItems(9) > 0 Then vData(iRow, aItems(9)) = dAdj
                       If aItems(10) > 0 Then vData(iRow, aItems(10)) = dSplitAdj
                       '----------------------------* Forward fill missing data
                       If d2 > 0 Then
                          For i4 = 3 To 6
                              If aItems(i4) > 0 Then
                                 For i2 = iRow - 1 To pNames + 1 Step -1
                                     If vData(i2, aItems(i4)) <> 0 Then Exit For
                                     If aItems(i4) > 0 Then vData(i2, aItems(i4)) = d2
                                     Next i2
                                 End If
                              Next i4
                          If aItems(8) > 0 Then
                             For i2 = iRow - 1 To pNames + 1 Step -1
                                 If vData(i2, aItems(8)) <> 0 Then Exit For
                                 vData(i2, aItems(8)) = vData(iRow, aItems(8))
                                 Next i2
                              End If
                          End If
                       If sPeriod = "S" Or sPeriod = "V" Then iRow = iRow - 1
                   End Select
          End Select
       Next i1
    If sPeriod = "S" Or sPeriod = "V" Then
       For i1 = 1 To iCols
           If iRow + 1 > UBound(vData) Then Exit For
           vData(iRow + 1, i1) = ""
           Next i1
       End If
    
    '------------------> Reverse the sort order of the data if requested
    If pResort = 1 Then
       Dim vTemp As Variant
       i1 = 1 + pNames
       i2 = iRow
       Do While i1 < i2
          For i3 = 1 To iCols
              vTemp = vData(i1, i3)
              vData(i1, i3) = vData(i2, i3)
              vData(i2, i3) = vTemp
              Next i3
          i1 = i1 + 1
          i2 = i2 - 1
          Loop
       End If
    
ErrorExit:
    smfGetYahooHistory = vData
    
    End Function
Attribute VB_Name = "smfGetYahooPortfolio_"
Option Explicit
Public Function smfGetYahooPortfolioView(ByVal pTickers As Variant, _
                         Optional ByVal pItems As Variant = "01020304050607080910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091", _
                         Optional ByVal pMultiple As String = "N", _
                         Optional ByVal pHeader As Integer = 0, _
                         Optional ByVal pDim1 As Integer = 0, _
                         Optional ByVal pDim2 As Integer = 0)
                    
    '-----------------------------------------------------------------------------------------------------------*
    ' User defined function to download columns from a portfolio view on Yahoo!
    '-----------------------------------------------------------------------------------------------------------*
    ' 2016.08.05 -- Created by Randy Harmelink (rharmelink@gmail.com)
    ' 2017.05.02 -- Obsoleted because portfolio table was replaced by JSON file
    ' 2017.06.21 -- Rewrite to extract fields from JSON file
    ' 2017.10.21 -- Rewrite to extract line by line instead of by field name
    ' 2017.11.02 -- Minor updates
    ' 2017.11.03 -- Fix to handle non-US currency combinations
    ' 2017.11.04 -- Add 52 additional fields
    ' 2017.11.04 -- Create list of request fields instead of asking for everything
    ' 2017.11.04 -- Maintain order of ticker symbol requests
    ' 2017.11.04 -- Add processing for EXCEL serial date/time values
    ' 2017.11.04 -- Divide percentage fields by 100, as needed
    ' 2017.11.04 -- Fix earnings dates
    ' 2017.11.06 -- Allow a ticker of "NONE" in first spot to bypass processing
    ' 2017.11.06 -- Adjust necessary date/time fields by GMT offset
    ' 2017.11.08 -- Fix errors on percentage adjustments when value returned is non-numeric
    ' 2017.11.09 -- Backed out percentage adjustments for fields 58, 61, 65, 68
    ' 2017.11.09 -- Fixed field list adjustment when only default fields are requested
    ' 2017.11.17 -- Allow a ticker symbol to be returned more than once
    '-----------------------------------------------------------------------------------------------------------*
    ' > Examples of invocations to get portfolio quotes for IBM and MMM:
    '
    '   =smfGetYahooPortfolioView("IBM,MMM")
    '   =smfGetYahooPortfolioView("IBM,MMM","00010203")
    '   =smfGetYahooPortfolioView("IBM,MMM","0001021011",,1)
    '-----------------------------------------------------------------------------------------------------------*
    
    Dim aFieldNeed() As String:  aFieldNeed = Split("0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1", ",")
    Dim aFieldName() As String:  aFieldName = Split("--,symbol,longName,shortName,exchange,fullExchangeName,market,marketState,sourceInterval,exchangeTimezoneName,exchangeTimezoneShortName,gmtOffSetMilliseconds,language,quoteType,quoteSourceName,regularMarketPrice,regularMarketTime,regularMarketChange,regularMarketOpen,regularMarketDayHigh,regularMarketDayLow,regularMarketVolume,bid,ask,sharesOutstanding,marketCap,averageDailyVolume3Month,targetPriceMean,revenue,priceToSales,trailingPE,epsTrailingTwelveMonths,exDividendDate,dividendsPerShare,dividend" & _
                                                    "Yield,dividendDate,dividendRate,trailingAnnualDividendYield,trailingAnnualDividendRate,earningsTimestamp,priceToBook,bookValue,epsForward,pegRatio,forwardPE,ebitda,shortRatio,shareFloat,currency,bidSize,askSize,regularMarketPreviousClose,regularMarketChangePercent,regularMarketDayRange,averageDailyVolume10Day,exchangeDataDelayedBy,fiftyDayAverage,fiftyDayAverageChange,fiftyDayAverageChangePercent,twoHundredDayAverage,twoHundredDayAverageChange,twoHundredDayAverageChangePercent,fiftyTwoWeekRange,fifty" & _
                                                    "TwoWeekLow,fiftyTwoWeekLowChange,fiftyTwoWeekLowChangePercent,fiftyTwoWeekHigh,fiftyTwoWeekHighChange,fiftyTwoWeekHighChangePercent,postMarketTime,postMarketPrice,postMarketChange,postMarketChangePercent,preMarketTime,preMarketPrice,preMarketChange,preMarketChangePercent,tradeable,regularMarketTime,regularMarketTime,exDividendDate,dividendDate,earningsTimestamp,postMarketTime,postMarketTime,preMarketTime,preMarketTime,regularMarketTime,postMarketTime,preMarketTime,earningsTimestampStart,earningsTimestampEnd", ",")
    Dim aHeading() As String:  aHeading = Split("--,Symbol,Long Name,Short Name,Exchange,Full Exchange Name,Market,Market State,Source Interval,Exchange Timezone Name,Exchange Timezone Short Name,GMT Offset Milliseconds,Language,Quote Type,Quote Source Name,Last Price,Last Traded (UNIX),Change,Open,High,Low,Volume,Bid,Ask,Shares Outstanding,Market Cap,Average 3M Volume,Mean Target Price,Revenue,P/S,P/E,EPS TTM,Ex-Dividend Date (UNIX),Dividends Per Share,Dividend Yield,Dividend Payment Date (UNIX),Forward Annual Div Rate,Trailing Annual Div Yield," & _
                                                "Trailing Annual Div Rate,Earnings Date (UNIX),Price/Book,Book Val,EPS Est Next Year,PEG Ratio (5yr expected),Forward P/E,EBITDA,Short Ratio,Float,Currency,Bid Size,Ask Size,Prev Close,% Chg,Day Range,Avg Vol (10 day),Data Delayed,50-DMA,50-DMA Chg,50-DMA Chg %,200-DMA,200-DMA Chg,200-DMA Chg %,52-Wk Range,52-Wk Low,52-Wk Low Chg,52-Wk Low Chg %,52-Wk High,52-Wk High Chg,52-Wk High Chg %,Post-Mkt Time (UNIX),Post-Mkt Price,Post-Mkt Chg,Post-Mkt % Chg,Pre-Mkt Time (UNIX),Pre-Mkt Price,Pre-Mkt Chg," & _
                                                "Pre-Mkt % Chg,Tradeable,Last Traded Date,Last Traded Time,Ex-Dividend Date,Dividend Payment Date,Earnings Date,Post-Mkt Date,Post-Mkt Time,Pre-Mkt Date,Pre-Mkt Time,Last Traded Date/Time,Post-Mkt Date/Time,Pre-Mkt Date/Time,Earnings Date Start,Earnings Date End", ",")
    
    Dim i1 As Integer, i2 As Integer, i3 As Integer, i4 As Integer, s1 As String
        
    '------------------> Determine size of array to return
    Dim iRows As Integer, iCols As Integer
    iRows = pDim1  ' Rows
    iCols = pDim2  ' Columns
    If pDim1 = 0 Or pDim2 = 0 Then
       If pDim1 = 0 Then iRows = 200   ' Old default
       If pDim2 = 0 Then iCols = 100   ' Old default
       On Error Resume Next
       iRows = Application.Caller.Rows.Count
       iCols = Application.Caller.Columns.Count
       On Error GoTo ErrorExit
       End If
  
    '------------------> Initialize return array
    ReDim vData(1 To iRows, 1 To iCols) As Variant
    For i1 = 1 To iRows
        For i2 = 1 To iCols
            vData(i1, i2) = "--"
            Next i2
        Next i1
    
    '------------------> Verify item and ticker and view parameters
    Dim oCell As Range, sItems As String, sTickers As String, aCols(1 To 99) As String, sFieldList As String
    Dim iFind As Integer, aTickers As Variant
    Select Case VarType(pItems)
        Case vbString
             sItems = LCase(Replace(pItems, " ", ""))
        Case Is >= 8192
             sItems = ""
             For Each oCell In pItems
                 If oCell.Value > "" Then sItems = sItems & Right(LCase(Format(oCell.Value, "00")), 2)
                 Next oCell
        Case Else
            smfGetYahooPortfolioView = "Invalid items parameter: " & pItems
            Exit Function
        End Select
    i1 = Len(sItems) / 2
    If i1 < iCols Then iCols = i1
    sFieldList = ","
    For i1 = 1 To iCols
        s1 = Mid(sItems & String$(68, "0"), 2 * i1 - 1, 2)
        Select Case s1
           Case "00" To "91"
                aCols(i1) = CInt(s1)
                If aFieldNeed(s1) <> 0 Then
                   iFind = InStr(sFieldList, "," & aFieldName(s1) & ",")
                   If iFind = 0 Then sFieldList = sFieldList & aFieldName(s1) & ","
                   End If
           Case Else: aCols(i1) = 0
           End Select
        Next i1
    If Len(sFieldList) > 2 Then sFieldList = Mid(sFieldList, 2, Len(sFieldList) - 2)  ' Remove leading and trailing comma
           
    Select Case VarType(pTickers)
        Case vbString
             sTickers = UCase(pTickers)
        Case Is >= 8192
             sTickers = ""
             For Each oCell In pTickers
                 sTickers = sTickers & IIf(oCell.Value <> "", UCase(oCell.Value), "XXXXX") & ","
                 Next oCell
             sTickers = Left(sTickers, Len(sTickers) - 1)
        Case Else
            smfGetYahooPortfolioView = "Invalid tickers parameter: " & pTickers
            Exit Function
        End Select
    aTickers = Split(sTickers, ",")
    
    '------------------> Create header if requested
    If pHeader = 1 Then
       For i1 = 1 To iCols
           vData(1, i1) = aHeading(aCols(i1))
           Next i1
       End If
    If aTickers(0) = "NONE" Then GoTo ErrorExit
    
    '------------------> Extract requested data items
    Dim iPtr As Long, iPos1 As Long, sData As String, sLine As String, sURL As String, v1 As Variant, vGMTOffset As Variant
    sURL = "https://query1.finance.yahoo.com/v7/finance/quote?fields=" & sFieldList & "&formatted=false&symbols=" & Replace(sTickers, ",XXXXX", "")
    iPtr = 1
    sData = RCHGetWebData(sURL, iPtr, 6000)
    iPos1 = InStr(2, sData, "result")
    iPtr = iPtr + iPos1 + 1
    sData = RCHGetWebData(sURL, iPtr, 6000)
    For i2 = 1 + pHeader To iRows
        iPos1 = InStr(2, sData, "{")
        If iPos1 = 0 Then Exit For
        iPtr = iPtr + iPos1 + 1
        sData = RCHGetWebData(sURL, iPtr, 6000)
        sLine = """" & smfStrExtr(sData & "}", "~", "}") & ","""
        s1 = smfStrExtr(sLine & ",", """symbol"":""", """")
        vGMTOffset = smfStrExtr(sLine & ",", """gmtOffSetMilliseconds"":", ",", 1) / 86400000
        For i3 = 0 To UBound(aTickers)
            If s1 = aTickers(i3) Then
               i4 = i3 + 1 + pHeader
               For i1 = 1 To iCols
                   v1 = smfStrExtr(sLine & ",", """" & aFieldName(aCols(i1)) & """:", ",""", 1)
                   If v1 = "" Then
                      vData(i4, i1) = "--"
                   Else
                      If Left(v1, 1) = """" Then v1 = smfStrExtr(v1 & """", """", """", 1)
                      Select Case 0 + aCols(i1)
                         Case 34, 52, 72, 76
                              On Error Resume Next
                              v1 = v1 / 100
                              On Error GoTo ErrorExit
                              vData(i4, i1) = v1
                         Case 80, 81, 82, 90, 91
                              vData(i4, i1) = Int(smfUnix2Date(0 + v1))
                         Case 78, 83, 85
                              vData(i4, i1) = Int(smfUnix2Date(0 + v1) + vGMTOffset)
                         Case 79, 84, 86
                              vData(i4, i1) = smfUnix2Date(0 + v1) + vGMTOffset - Int(smfUnix2Date(0 + v1) + vGMTOffset)
                         Case 87, 88, 89
                              vData(i4, i1) = smfUnix2Date(0 + v1) + vGMTOffset
                         Case Else
                              vData(i4, i1) = v1
                         End Select
                      End If ' v1
                   Next i1
               If pMultiple = "N" Then Exit For
               End If ' s1
            Next i3
        Next i2

ErrorExit:
    smfGetYahooPortfolioView = vData
    End Function





Attribute VB_Name = "smfPricesBetween_"
Public Function smfPricesBetween(ByVal pTicker As String, _
                        Optional ByVal pBegDate As Variant, _
                        Optional ByVal pEndDate As Variant, _
                        Optional ByVal pItems As Variant = "01020304050607080910111213")
                        
   '-----------------------------------------------------------------------------------------------------------*
   ' Sample routine to summarize historical data between two dates -- O/H/L/C/V/PC
   '-----------------------------------------------------------------------------------------------------------*
   ' 2007.05.17 -- Created by Randy Harmelink (rharmelink@gmail.com)
   ' 2007.08.08 -- Added return element #10 (previous closing price)
   ' 2007.08.08 -- Added parameter to specify return results
   ' 2007.08.08 -- Customized number of days to return
   ' 2007.08.29 -- Increased number of days to return
   ' 2007.10.03 -- Added ability to generate column headings
   ' 2007.10.03 -- Added ErrorExit
   ' 2017.05.19 -- Change to use smfGetYahooHistory()
   ' 2017.07.23 -- Add total return / max drawdown / CAGR output options
   '-----------------------------------------------------------------------------------------------------------*
   ' Samples of use:
   '
   '    =smfPricesBetween("MMM",DATE(2007,1,1),DATE(2007,3,4))
   '    =TRANSPOSE(smfPricesBetween("MMM",DATE(2007,1,1),DATE(2007,3,4)))
   '
   ' Both would need to be array-entered.  The first would return a 1-row by 10-column range.  The second would
   ' return a 1-column by 10-row range.  The 9 elements of the range would be Date and Value of opening price,
   ' Date and Value of highest price, Date and Value of Lowest price, Data and Value of closing price, total
   ' volume between the two dates, as well as the previous closing price.
   '-----------------------------------------------------------------------------------------------------------*
     
   Const kItems = 13
   Dim vData(1 To 1, 1 To kItems) As Variant
   
   On Error GoTo ErrorExit
   vData(1, 1) = "Error"
   
   If pTicker = "Header" Or pTicker = "Ticker" Or pTicker = "Symbol" Then
      vData(1, 1) = "Open Date"
      vData(1, 2) = "Open Price"
      vData(1, 3) = "High Date"
      vData(1, 4) = "High Price"
      vData(1, 5) = "Low Date"
      vData(1, 6) = "Low Price"
      vData(1, 7) = "Close Date"
      vData(1, 8) = "Close Price"
      vData(1, 9) = "Volume"
      vData(1, 10) = "Previous Close"
      vData(1, 11) = "Total Return"
      vData(1, 12) = "CAGR"
      vData(1, 13) = "Max Drawdown"
      GoTo SkipRetrieval
      End If
   
   'vHQ = RCHGetYahooHistory2(pTicker, , , , , , , "d", "DOHLCV", 0, 1, 0, Int(Now - pBegDate + 3), 6)
   vHQ = smfGetYahooHistory(pTicker, pBegDate - 5, Int(Now) + 1, "d", "DOHLCV", 0, 0, Int(Now - pBegDate + 5), 6)
  
   vData(1, 1) = ""     ' Date of open price
   vData(1, 2) = 0      ' Value of open price
   vData(1, 3) = ""     ' Date of high price
   vData(1, 4) = 0      ' Value of high price
   vData(1, 5) = ""     ' Date of low price
   vData(1, 6) = 0      ' Value of low price
   vData(1, 7) = ""     ' Date of closing price
   vData(1, 8) = 0      ' Value of closing price
   vData(1, 9) = 0      ' Total volume during period
   vData(1, 10) = 0     ' Value of previous closing price
   vData(1, 11) = 0     ' Total return
   vData(1, 12) = 0     ' CAGR
   vData(1, 13) = 0     ' Max drawdown
   
   For i1 = 1 To UBound(vHQ, 1)
       Select Case vHQ(i1, 1)
          Case Is > pEndDate
          Case Is < pBegDate: Exit For
          Case Else
               If vData(1, 8) = 0 Then
                  vData(1, 3) = vHQ(i1, 1) ' Latest date
                  vData(1, 4) = vHQ(i1, 3) ' Latest high
                  vData(1, 5) = vHQ(i1, 1) ' Latest date
                  vData(1, 6) = vHQ(i1, 4) ' Latest low
                  vData(1, 7) = vHQ(i1, 1) ' Latest date
                  vData(1, 8) = vHQ(i1, 5) ' Latest close
                  End If
               vData(1, 1) = vHQ(i1, 1)    ' Earliest date
               vData(1, 2) = vHQ(i1, 2)    ' Earliest open
               vData(1, 10) = vHQ(i1 + 1, 5)    ' Previous closing price
               vData(1, 9) = vData(1, 9) + vHQ(i1, 6)
               If vData(1, 6) > vHQ(i1, 4) Then
                  vData(1, 5) = vHQ(i1, 1) ' Date of lowest
                  vData(1, 6) = vHQ(i1, 4) ' Lower low
                  End If
               If vData(1, 4) < vHQ(i1, 3) Then
                  vData(1, 3) = vHQ(i1, 1) ' Date of highest
                  vData(1, 4) = vHQ(i1, 3) ' Higher high
                  End If
       End Select
       Next i1
       vData(1, 11) = vData(1, 8) / vData(1, 10) - 1
       vData(1, 12) = (vData(1, 8) / vData(1, 10)) ^ (365 / (vData(1, 7) - vData(1, 1) + 1)) - 1
       vData(1, 13) = vData(1, 6) / vData(1, 10) - 1
       
   
SkipRetrieval:
   
   Dim vReturn(1 To 1, 1 To kItems) As Variant
   For i1 = 1 To kItems
       If 2 * i1 > Len(pItems) Then
          vReturn(1, i1) = ""
       Else
          iItem = CInt(Mid(pItems, 2 * i1 - 1, 2))
          vReturn(1, i1) = vData(1, iItem)
          End If
       Next i1
   
ErrorExit:
   
   smfPricesBetween = vReturn
   
   End Function


Attribute VB_Name = "smfPricesByDates_"
Public Function smfPricesByDates(ByVal pTicker As String, _
                            ParamArray pDates() As Variant)
                        
   '-----------------------------------------------------------------------------------------------------------*
   ' Function to return prices for multiple historical dates
   '-----------------------------------------------------------------------------------------------------------*
   ' 2008.05.23 -- Created by Randy Harmelink (rharmelink@gmail.com)
   ' 2009.01.01 -- Added vbDouble "Case" for DATE() and DATEVALUE() passed items, but check YEAR() values
   ' 2009.01.02 -- Change date lookup to be a binary search
   ' 2009.01.02 -- Change invalid date returns to be EXCEL #N/A error values
   ' 2009.01.02 -- Add ability to pass string dates (e.g. "12/31/2006")
   ' 2009.01.02 -- Add retrieval of current date for today's date after available history
   ' 2015.02.21 -- Fix retrieval of current date for today's date after available history
   ' 2017.05.18 -- Change to use new smfGetYahooHistory() function
   ' 2017.05.21 -- Allow range of string dates to be passed
   '-----------------------------------------------------------------------------------------------> Version 2.0i
   ' Samples of use:
   '
   '    =smfPricesByDates("MMM",DATE(2007,1,1),DATE(2007,3,4))
   '    =smfPricesByDates("MMM","1/1/2007")
   '    =smfPricesByDates("MMM",C4:D4)
   '    =smfPricesByDates("MMM",DATE(2007,1,1),DATE(2007,3,4),C4:D4)
   '
   '-----------------------------------------------------------------------------------------------------------*
      
   '----------------------------------> Extract passed dates from parameters and/or ranges
   ReDim vDates(1 To 1) As Variant
   iCount = 0
   dBegin = Int(Now)
   For i1 = 0 To UBound(pDates)
       Select Case VarType(pDates(i1))
          Case vbDate, vbDouble: Call AddToList(vDates, iCount, dBegin, pDates(i1))
          Case vbString
             If IsDate(pDates(i1)) Then
                Call AddToList(vDates, iCount, dBegin, DateValue(pDates(i1)))
             Else
                Call AddToList(vDates, iCount, dBegin, "")
                End If
          Case Is >= 8192
               For Each oCell In pDates(i1)
                   Select Case True
                      Case VarType(oCell.Value) = vbDate: Call AddToList(vDates, iCount, dBegin, oCell.Value)
                      Case VarType(oCell.Value) = vbString And IsDate(oCell.Value): Call AddToList(vDates, iCount, dBegin, DateValue(oCell.Value))
                      Case Else: Call AddToList(vDates, iCount, dBegin, "")
                      End Select
                   Next oCell
          Case Else: Call AddToList(vDates, iCount, dBegin, "")
          End Select
       Next i1
   
   '----------------------------------> Get historical data and extract requested data
   Dim iDays As Integer
   iDays = Int(Now - dBegin + 3)
   vHQ = smfGetYahooHistory(pTicker, dBegin - 5, Int(Now), "d", "DC", 0, 0, iDays, 2)
   ReDim vReturn(1 To iCount) As Variant
   For i1 = 1 To iCount
       If vDates(i1) = "" Or vDates(i1) > Date Then
          vReturn(i1) = CVErr(xlErrNA)
       ElseIf vDates(i1) > vHQ(1, 1) Then
          If vDates(i1) = Date Then
             vPrice = RCHGetYahooQuotes(pTicker, "l1", , , , 1, 2)
             vReturn(i1) = vPrice(1, 1)
          Else
             vReturn(i1) = vHQ(1, 2)
             End If
       Else
          iLo = 1
          iHi = iDays
          Do
             i2 = Int((iHi + iLo) / 2)
             If vDates(i1) = vHQ(i2, 1) Then
                vReturn(i1) = vHQ(i2, 2)
                Exit Do
             ElseIf iLo = iHi - 1 Then
                If vHQ(iHi, 2) <> "" Then
                   vReturn(i1) = vHQ(iHi, 2)
                Else
                   vReturn(i1) = CVErr(xlErrNA)
                   End If
                Exit Do
             Else
                If vDates(i1) > vHQ(i2, 1) Or vHQ(i2, 1) = "" Then
                   iHi = i2
                Else
                   iLo = i2
                   End If
                End If
             Loop While True
          End If
       Next i1
       
   '----------------------------------> Return data
   smfPricesByDates = vReturn
               
ErrorExit:
               
    End Function

Private Sub AddToList(pList As Variant, pCount As Variant, pBegin As Variant, pDate As Variant)
    pCount = pCount + 1
    ReDim Preserve pList(1 To pCount) As Variant
    If pDate = "" Then
       pList(pCount) = ""
    ElseIf Year(pDate) < 1928 Or Year(pDate) > Year(Date) Then
       pList(pCount) = ""
    Else
       pList(pCount) = pDate
       If pDate < pBegin Then pBegin = pDate
       End If
    End Sub

Attribute VB_Name = "smfUtilities_"
Public Const kPages = 1000                      ' Number of data pages to save
Public Const kUnix1970 As Long = 25569          ' CDbl(DateSerial(1970, 1, 1))
Public vError As Variant                        ' Value to return if error
Public aData(1 To kPages, 1 To 2) As String     ' Saved web page data (2) and its ticker-source (1)
Public sData(1 To 3) As String                  ' 1 = Raw data, 2 = Stripped data, 3 = Upper case of stripped data
Public sLog As String
Public sWebCache As String                      ' Set to "N" to force SMF to web pages for selected ranges
Public bASync As Boolean                        ' Set to TRUE for Asyncrhonous XMLHTTP processing


Public Function smfLogInternetCalls(pLog As String)
    '-----------------------------------------------------------------------------------------------------------*
    ' 2014.05.24 -- Created. Function to control whether URL calls are logged into a CSV file
    ' 2016.05.18 -- Add Application.PathSeparator to ease transition between operating systems
    '-----------------------------------------------------------------------------------------------------------*
    On Error Resume Next
    sLog = UCase(pLog)
    Select Case sLog
       Case "Y": smfLogInternetCalls = "Logging on"
       Case "DELETE"
            Kill ThisWorkbook.Path & Application.PathSeparator & "smf-log.csv"
            sLog = "N"
            smfLogInternetCalls = "Logging off, file deleted"
       Case "RESET"
            Kill ThisWorkbook.Path & Application.PathSeparator & "smf-log.csv"
            sLog = "Y"
            smfLogInternetCalls = "Logging on, file reset"
       Case Else: smfLogInternetCalls = "Logging off"
       End Select
    End Function
Public Sub smfOpenLogFile()
    '-----------------------------------------------------------------------------------------------------------*
    ' 2014.05.24 -- Created. Macro to open and format SMF log file
    ' 2014.05.25 -- Added With statement
    ' 2014.05.25 -- Open in ReadOnly mode and use worksheet specific instructions
    ' 2016.05.18 -- Add Application.PathSeparator to ease transition between operating systems
    '-----------------------------------------------------------------------------------------------------------*
    Dim wb As Workbook
    Set wb = Workbooks.Open(ThisWorkbook.Path & Application.PathSeparator & "smf-log.csv", False, True)
    With wb.ActiveSheet
         .Range("A1").EntireRow.Insert
         .Range("A1").Value = "Time Stamp"
         .Range("B1").Value = "Duration"
         .Range("C1").Value = "Called URL"
         .Columns("A:A").NumberFormat = "yyyy-mm-dd hh:mm:ss"
         .Columns("A:A").HorizontalAlignment = xlCenter
         .Columns("B:B").NumberFormat = "0.0000"
         .Columns("B:B").HorizontalAlignment = xlRight
         .Columns("C:C").ColumnWidth = 99.86
         .Range("A2").Select
         ActiveWindow.FreezePanes = True
         End With
    
    End Sub

Public Sub smfForceRecalculation()
Attribute smfForceRecalculation.VB_ProcData.VB_Invoke_Func = "R\n14"
    '-----------------------------------------------------------------------------------------------------------*
    ' 2016.05.29 -- Add reset of iCookieInit global variable, for loading Mac cookies
    ' 2017.07.23 -- Remove iMorningStar variable
    '-----------------------------------------------------------------------------------------------------------*
    sAdvFNPrefix = ""
    iInit = 0
    iCookieInit = 0         ' Reset Mac Cookie flag
    aGuruFocusItems(1) = "" ' Reset stored GuruFocus array
    For i1 = 1 To kPages
        aData(i1, 1) = ""  ' Reset stored ticker array
        Next i1
    If Val(Application.Version) < 10 Then
       Application.CalculateFull
    Else
       Application.CalculateFullRebuild
       End If
    End Sub
Public Sub smfASyncOn() ' Turn Asynchronous XMLHTTP on
    bASync = True
    End Sub
Public Sub smfASyncOff() ' Turn Asynchronous XMLHTTP off
    bASync = False
    End Sub
Public Function RCHGetURLData1(pURL As String, _
                     Optional ByVal pType As String = "GET") As String
                     
    '-----------------------------------------------------------------------------------------------> Version 2.0i
    ' 2008.07.18 -- Expand oHTTP.Status selections for "OK" to include zero
    ' 2009.01.26 -- Allow "GET" or "POST" requests
    ' 2014.06.13 -- Add bASync parameter
    ' 2017.05.01 -- Add "User-Agent" option
    '-----------------------------------------------------------------------------------------------------------*
    On Error GoTo ErrorExit
    Dim oHTTP As New XMLHTTP
    oHTTP.Open pType, pURL, bASync
    oHTTP.setRequestHeader "User-Agent", "XMLHTTP/1.0"
    oHTTP.send
    Do While bASync
       DoEvents
       If oHTTP.ReadyState = 4 Then Exit Do
       Loop
    Select Case oHTTP.Status
       Case 0: RCHGetURLData1 = oHTTP.responseText
       Case 200: RCHGetURLData1 = oHTTP.responseText
       Case Else: GoTo ErrorExit
       End Select
    Exit Function
ErrorExit:
    RCHGetURLData1 = vError
    End Function

Public Function RCHGetURLData2(pURL As String) As String
    On Error GoTo ErrorExit
    Dim oIE As Object
    Set oIE = CreateObject("InternetExplorer.Application")
    oIE.Visible = False
    With oIE
        .Navigate pURL
        Do Until Not .Busy
            DoEvents
            Loop
        RCHGetURLData2 = .Document.documentElement.outerHTML
        .Quit
        End With
    Set oIE = Nothing
    Exit Function
ErrorExit:
    RCHGetURLData2 = vError
    End Function

Public Function RCHGetURLData3(pURL As String) As String
    '-----------------------------------------------------------------------------------------------> Version 2.0i
    ' 2009.01.26 -- Drop ".Document" qualifier
    '-----------------------------------------------------------------------------------------------> Version 2.0k
    ' 2009.07.13 -- Add fnWait call
    '-----------------------------------------------------------------------------------------------------------*
    On Error GoTo ErrorExit
    Dim oHTML As New HTMLDocument
    Set oDoc = oHTML.createDocumentFromUrl(pURL, vbNullString)
    Do: DoEvents: Loop Until oDoc.ReadyState = "complete"
    Call fnWait(2)  ' Wait for JavaScript to run on page?
    RCHGetURLData3 = oDoc.documentElement.outerHTML
    Exit Function
ErrorExit:
    RCHGetURLData3 = vError
    End Function

Public Function RCHGetURLData(ByVal pURL As String, _
                     Optional ByVal pUseIE As Integer = 0) As String
                     
    '-----------------------------------------------------------------------------------------------> Version 2.0i
    ' 2009.01.26 -- Add pUseIE options of 2 and 3
    ' 2009.03.16 -- Add documentation
    ' 2014.05.24 -- Add CSV output for logging of data requests
    ' 2014.05.25 -- Add double quotes around URL
    ' 2016.05.18 -- Add Application.PathSeparator to ease transition between operating systems
    ' 2016.05.18 -- Add call to RCHGetURLData1Mac for Mac usage
    '-----------------------------------------------------------------------------------------------------------*
    
    Dim i1 As Integer
    Dim tStart As Single, tEnd As Single, dDate As Date
    dDate = Now
    tStart = Timer
    
#If Mac Then
    RCHGetURLData = RCHGetURLData1Mac(pURL, pUseIE)
#Else
    Select Case True
       Case pUseIE = 1: RCHGetURLData = RCHGetURLData2(pURL)                  ' IE Object
       Case pUseIE = 2: RCHGetURLData = RCHGetURLData3(pURL)                  ' HTMLDocument
       Case pUseIE = 3: RCHGetURLData = RCHGetURLData1(pURL, "POST")          ' XMLHTTP Post
       Case Else: RCHGetURLData = RCHGetURLData1(pURL, "GET")                 ' XMLHTTP Get
       End Select
#End If
    
    If sLog = "Y" Then
       tEnd = Timer
       i1 = FreeFile()
       Open ThisWorkbook.Path & Application.PathSeparator & "smf-log.csv" For Append As #i1
       Print #i1, dDate & "," & (tEnd - tStart) & ",""" & Left(pURL, 150) & """"
       Close #i1
       End If
    
    End Function
Public Function smfCDec(ByVal pString As String) As Variant
    
    '-----------------------------------------------------------------------------------------------------------*
    ' 2016.05.18 -- Add routine to ease transition between operating systems
    '-----------------------------------------------------------------------------------------------------------*
    
    smfCDec = pString
    On Error Resume Next
    
    #If Mac Then
        smfCDec = CCur(smfCDec)
    #Else
        smfCDec = CDec(smfCDec)
    #End If

    End Function
                         

Public Function smfGetWebPage(ByVal pURL As String, _
                     Optional ByVal pUseIE As Integer = 0, _
                     Optional ByVal pConvType As Integer = 0) As String
    '-----------------------------------------------------------------------------------------------------------*
    ' 2011.02.16 -- Add routine
    ' 2011.04.27 -- Add HTML codes &#48; thru &#57;
    ' 2014.05.31 -- Add sWebCache variable to allow re-retrieval of a web page
    ' 2017.11.08 -- Modify sWebCache processing
    '-----------------------------------------------------------------------------------------------------------*
    For iData = 1 To kPages
        Select Case True
           Case aData(iData, 1) = "" Or (aData(iData, 1) = pUseIE & ":" & pURL And sWebCache = "N")
                'sWebCache = "Y"
                s2 = RCHGetURLData(pURL, pUseIE)
                Select Case pConvType
                     Case 0
                          s2 = Replace(s2, "&amp;", "&")
                          s2 = Replace(s2, "&nbsp;<b>", "<b> ")
                          s2 = Replace(s2, "&nbsp;", " ")
                          s2 = Replace(s2, Chr(9), " ")
                          s2 = Replace(s2, Chr(10), "")
                          s2 = Replace(s2, Chr(13), "")
                          s2 = Replace(s2, "&#48;", "0")
                          s2 = Replace(s2, "&#49;", "1")
                          s2 = Replace(s2, "&#50;", "2")
                          s2 = Replace(s2, "&#51;", "3")
                          s2 = Replace(s2, "&#52;", "4")
                          s2 = Replace(s2, "&#53;", "5")
                          s2 = Replace(s2, "&#54;", "6")
                          s2 = Replace(s2, "&#55;", "7")
                          s2 = Replace(s2, "&#56;", "8")
                          s2 = Replace(s2, "&#57;", "9")
                          s2 = Replace(s2, "&#150;", Chr(150))
                          s2 = Replace(s2, "&#151;", "-")
                          s2 = Replace(s2, "&mdash;", "-")
                          s2 = Replace(s2, "&#160;", " ")
                          s2 = Replace(s2, Chr(160), " ")
                          s2 = Replace(s2, "<TH", "<td")
                          s2 = Replace(s2, "</TH", "</td")
                          s2 = Replace(s2, "<th", "<td")
                          s2 = Replace(s2, "</th", "</td")
                     Case 1
                          s2 = Replace(s2, Chr(10), Chr(13))
                     End Select
                Select Case pURL
                   Case "https://finance.yahoo.com/advances"
                        s2 = Replace(s2, "<sup>1</sup>", "")
                   End Select
                aData(iData, 1) = pUseIE & ":" & pURL
                aData(iData, 2) = s2
                smfGetWebPage = s2
                Exit Function
           Case aData(iData, 1) = pUseIE & ":" & pURL
                smfGetWebPage = aData(iData, 2)
                Exit Function
           Case iData = kPages
                smfGetWebPage = "Error -- Too many web page retrievals"
                Exit Function
           End Select
        Next iData
    smfGetWebPage = "Error"
    End Function

Public Function smfGetAData(p1 As Integer, p2 As Integer)
   smfGetAData = Left(aData(p1, p2), 32767)
   End Function
Public Sub smfFixLinks()
    '-----------------------------------------------------------------------------------------------------------*
    ' 2012.01.02 -- Expand to do all sheets in workbook
    '-----------------------------------------------------------------------------------------------------------*
    Dim Sht As Worksheet
    For Each Sht In Worksheets
        Sht.Cells.Replace _
            What:="'*\RCH_Stock_Market_Functions.xla'!", _
            Replacement:="", _
            LookAt:=xlPart, _
            SearchOrder:=xlByRows, _
            MatchCase:=False, _
            SearchFormat:=False, _
            ReplaceFormat:=False
        Next Sht
    End Sub

Function IfError(formula As Variant, show As String)

    On Error GoTo ErrorHandler

    If IsError(formula) Then
        IfError = show
    Else
        IfError = formula
    End If

    Exit Function

ErrorHandler:
    Resume Next

End Function

Public Function fnWait(iSeconds As Integer)
   Dim varStart As Variant
   varStart = Timer
   Do While Timer < varStart + iSeconds
      DoEvents
      Loop
End Function

Function smfStrExtr(pString As String, _
                    pStart As String, _
                    pEnd As String, _
           Optional pConvert As Integer = 0)
    '-----------------------------------------------------------------------------------------------------------*
    ' 2010.01.22 -- Add function
    ' 2010.06.06 -- Add error checking
    ' 2011.07.12 -- Add dummy characters to represent start and end of input string
    ' 2017.07.09 -- Add pConvert parameter
    '-----------------------------------------------------------------------------------------------------------*
    If pStart = "~" Then
       iPos1 = 1
       iPos3 = 2
    Else
       iPos1 = InStr(pString, pStart) + Len(pStart)
       iPos3 = iPos1
       If iPos1 = Len(pStart) Then
          smfStrExtr = ""
          Exit Function
          End If
       End If
    If pEnd = "~" Then iPos2 = Len(pString) + 1 Else iPos2 = InStr(iPos3, pString, pEnd)
    If iPos2 = 0 Then
       smfStrExtr = ""
       Exit Function
       End If
    smfStrExtr = Mid(pString, iPos1, iPos2 - iPos1)
    If pConvert = 1 Then smfStrExtr = smfConvertData(smfStrExtr)
    End Function

Function smfEval(pData As String)
    '-----------------------------------------------------------------------------------------------------------*
    ' 2012.01.21 -- Add function
    '-----------------------------------------------------------------------------------------------------------*
    smfEval = "Error"
    smfEval = Evaluate(pData)
    End Function

Function smfJoin(myRange As Range, myDelimiter As String)
    '-----------------------------------------------------------------------------------------------------------*
    ' 2011.02.16 -- Add function
    '-----------------------------------------------------------------------------------------------------------*
    smfJoin = ""
    For Each oCell In myRange
        If smfJoin <> "" And oCell.Value <> "" Then smfJoin = smfJoin & myDelimiter
        smfJoin = smfJoin & oCell.Value
        Next oCell
    End Function

Public Function smfWord(ByVal Haystack As String, _
                        ByVal Occurrence As Long, _
               Optional ByVal Delimiter As String = " ", _
               Optional ByVal pConvert As Integer = 0)
    '-----------------------------------------------------------------------------------------------------------*
    ' 2011.02.16 -- Add function
    ' 2017.09.20 -- Add pConvert parameter
    '-----------------------------------------------------------------------------------------------------------*
    On Error GoTo ErrorHandler
    smfWord = Split(Haystack, Delimiter)(Occurrence - 1)
    If pConvert = 1 Then smfWord = smfConvertData(smfWord)
    Exit Function
ErrorHandler:
    smfWord = ""
    End Function

Public Function smfStripHTML(ByVal sHTML As String) As String
    '-----------------------------------------------------------------------------------------------------------*
    ' 2014.04.07 -- Add function
    '-----------------------------------------------------------------------------------------------------------*
    Dim oDoc As HTMLDocument
    Set oDoc = New HTMLDocument
    oDoc.body.innerHTML = sHTML
    smfStripHTML = oDoc.body.innerText
    End Function
  
Public Function smfDate2Unix(ByVal pDate As Date) As Long
    '-----------------------------------------------------------------------------------------------------------*
    ' 2017.05.17 -- Add function
    '-----------------------------------------------------------------------------------------------------------*
    smfDate2Unix = DateDiff("s", kUnix1970, pDate)
    End Function

Public Function smfUnix2Date(pUnixDate As Long) As Date
    '-----------------------------------------------------------------------------------------------------------*
    ' 2017.05.17 -- Add function
    '-----------------------------------------------------------------------------------------------------------*
    smfUnix2Date = DateAdd("s", pUnixDate, kUnix1970)
    End Function
Public Function smfHTMLDecode(pString As String) As String
    '-----------------------------------------------------------------------------------------------------------*
    ' 2017.06.16 -- Add function
    '-----------------------------------------------------------------------------------------------------------*
    smfHTMLDecode = pString
    smfHTMLDecode = Replace(smfHTMLDecode, "&quot;", """")
    smfHTMLDecode = Replace(smfHTMLDecode, "&lt;", "<")
    smfHTMLDecode = Replace(smfHTMLDecode, "&gt;", ">")
    smfHTMLDecode = Replace(smfHTMLDecode, "&nbsp;", " ")
    smfHTMLDecode = Replace(smfHTMLDecode, "&apos;", "'")
    smfHTMLDecode = Replace(smfHTMLDecode, "&#39;", "'")
    smfHTMLDecode = Replace(smfHTMLDecode, "&#039;", "'")
    smfHTMLDecode = Replace(smfHTMLDecode, "&#150;", "|fffd|")
    smfHTMLDecode = Replace(smfHTMLDecode, "&#151;", "-")
    smfHTMLDecode = Replace(smfHTMLDecode, "&mdash;", "-")
    smfHTMLDecode = Replace(smfHTMLDecode, "&#160;", "|fffd|")
    smfHTMLDecode = Replace(smfHTMLDecode, "&amp;", "&")
    End Function
Attribute VB_Name = "smfxDatabaseUpdate_"
Sub UpdateStockDatabase()
    '-----------------------------------------------------------------------------------------------------------*
    ' Subroutine to update a number of stock databases, one sheet per data source
    '-----------------------------------------------------------------------------------------------------------*
    ' 2006.03.15 -- Created
    '-----------------------------------------------------------------------------------------------> Version 1.2
    ' 2007.10.03 -- Removed Business Week and Telescan sheetname options
    '-----------------------------------------------------------------------------------------------> Version 2.0i
    For Each oSheet In ActiveWorkbook.Sheets
        
        Dim iElement As Integer
        Dim sSymbol As String
        
        sVersion = RCHGetElementNumber("Version")    ' Initialize the list of available elements
        
        For iElement = 1 To kElements
            Select Case True
               Case oSheet.Name = RCHGetElementNumber("Source", iElement): Exit For
               Case iElement = kElements: GoTo Next_WorkSheet
               End Select
            Next iElement
        
        iTicker = 2                                    ' Set initial ticker pointer
        Do While True
           
           iTicker = iTicker + 1                       ' Go to next ticker symbol in list
           sSymbol = oSheet.Cells(iTicker, 1)          ' Get ticker symbol of company
           If sSymbol = "" Then GoTo Next_WorkSheet    ' No more ticker symbols
           
           nDate = oSheet.Cells(iTicker, 2)            ' Get date of last update for company
           If nDate <> 0 Then GoTo Next_Company        ' Valid date, no need to update
           oSheet.Cells(iTicker, 2) = Date             ' Update the last update date
           
           iElement = 0                                ' Set initial element pointer
           iColumn = 2                                 ' Set initial column pointer
           iSheet = 1                                  ' Set sheet pointer for 256+ element sources
           Set oUpdate = oSheet
           
           Do While True
              iElement = iElement + 1                             ' Go to next available element
              sSource = RCHGetElementNumber("Source", iElement)   ' Get data source of element
              If sSource = "EOL" Then GoTo Next_Company
              If sSource <> oSheet.Name Then GoTo Next_Element    ' Not an applicable element for worksheet
              iColumn = iColumn + 1                               ' Go to next output column
              If oUpdate.Cells(2, iColumn) = "" Then
                 oUpdate.Cells(1, iColumn) = iElement
                 oUpdate.Cells(2, iColumn) = RCHGetElementNumber("Element", iElement)
                 End If
              Application.StatusBar = "Now updating ticker " & sSymbol & " on worksheet " & oUpdate.Name
              oUpdate.Cells(iTicker, iColumn) = RCHGetElementNumber(sSymbol, iElement)
              If iColumn = 256 Then
                 iSheet = iSheet + 1
                 Set oUpdate = ActiveWorkbook.Sheets(sSource & "_" & iSheet)
                 oUpdate.Cells(iTicker, 1) = oSheet.Cells(iTicker, 1)
                 oUpdate.Cells(iTicker, 2) = oSheet.Cells(iTicker, 2)
                 iColumn = 2
                 End If
              'Call TickerReset
Next_Element: Loop

Next_Company: Loop

Next_WorkSheet: Next oSheet
    
    Application.StatusBar = False
    
    End Sub
    
    

' InQuest injected base64 decoded content
' &"{^
' |Yhj
' Liz{
' *'jS
' *'"s
' fz{l
' s!1r
' -jwb
' x>"w(
' fz{l
' z{Cy
' z{~.&
' "t^q
' jx"nW
' wRjW
' RMEV]
' !~Z0J
' j)rV
' \sZv
' J('j
' J('j
' {]4u(
' {]4t8
' IR-z
' j)rV
' x,N)

INQUEST-PP=macro
