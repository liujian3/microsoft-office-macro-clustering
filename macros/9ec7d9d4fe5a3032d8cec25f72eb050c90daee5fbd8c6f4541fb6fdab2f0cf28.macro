Attribute VB_Name = "Sheet10"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "ComboBoxCMDTYModelNum, 1, 0, MSForms, ComboBox"
Attribute VB_Control = "ResizeButton, 2, 1, MSForms, CommandButton"
Attribute VB_Control = "CreateButton, 3, 2, MSForms, CommandButton"
Option Explicit
Private hasBeenInitialised As Boolean


Private Sub CreateButton_Click()
    On Error GoTo errorHandler
    Application.EnableEvents = False
    Dim rngCMDTYModelList As Range: Set rngCMDTYModelList = Range("NX_" & ActiveSheet.Name & "_M_CMDTYModelList")
    Dim rngModelListAnchor As Range: Set rngModelListAnchor = rngCMDTYModelList.Cells(1, 1).Offset(-1, 0)
    Dim numCMDTYModels%: numCMDTYModels = rngCMDTYModelList.Rows.count
    Dim rngCMDTYModels As Range: Set rngCMDTYModels = Range("NX_" & ActiveSheet.Name & "_M_CMDTYModels")
    rngCMDTYModels.Formula = "=nxlibdata(" & Range(rngModelListAnchor, rngModelListAnchor.Offset(0, 1)).Address & "," & Range(rngModelListAnchor.Offset(1, 0), rngModelListAnchor.Offset(numCMDTYModels, 1)).Address & "," & """" & "IR_CMDTYB_CMDTYModel.Data" & """" & ")"
    ActiveSheet.Calculate
    
CleanUp:
    Application.EnableEvents = True
    Exit Sub
errorHandler:
    Call VBA.MsgBox("Error in creating model table data", vbCritical + vbOKOnly, "Error")
    GoTo CleanUp
    End Sub

Private Sub ResizeButton_Click()
    On Error GoTo CleanUp
    Application.ScreenUpdating = False
    Dim temp As Variant: temp = Split(ComboBoxCMDTYModelNum.Text, " ")
    If Not IsNumeric(temp(0)) Then
        MsgBox "Fatal error when resizing ComboBox"
        GoTo CleanUp
    Else
        Resize CInt(temp(0))
    End If
    On Error GoTo 0
    
CleanUp:
    Application.ScreenUpdating = True
    ActiveSheet.Calculate
End Sub



Public Sub Resize(numCMDTYModel As Integer)
    On Error GoTo errorHandler
    Application.EnableEvents = False
    Application.ScreenUpdating = False
    
    Dim asn$: asn = ActiveSheet.Name
    Dim rngCMDTYModels As Range: Set rngCMDTYModels = Range("NX_" & asn & "_M_CMDTYModels")
    Dim rngCMDTYModelList As Range: Set rngCMDTYModelList = Range("NX_" & asn & "_M_CMDTYModelList")
    Dim rngIRModelFactorNum As Range: Set rngIRModelFactorNum = Range("NX_" & asn & "_M_IRModelFactorNum")
    Dim rngCorrAnchor As Range: Set rngCorrAnchor = Range("NX_" & asn & "_M_CorrAnchor")
    Dim rngCMDTYModelListAnchor As Range: Set rngCMDTYModelListAnchor = rngCMDTYModelList.Cells(1, 1).Offset(-1, 0)
        
    rngCMDTYModelList.Clear
    rngCorrAnchor.CurrentRegion.Clear
    rngCMDTYModels = "<LINK>"
    rngIRModelFactorNum.Value = 1
    
    'Resize the CR Model table
    Dim i%, j%
    For i = 1 To numCMDTYModel
        rngCMDTYModelListAnchor.Offset(i, 0) = "<LINK>"
        rngCMDTYModelListAnchor.Offset(i, 1) = "<LINK>"
        rngCMDTYModelListAnchor.Offset(i, 2) = 1
    Next i
    Range(rngCMDTYModelListAnchor.Offset(1, 0), rngCMDTYModelListAnchor.Offset(numCMDTYModel, 2)).Select
    ActiveWorkbook.Names.Add Name:="NX_" & asn & "_M_CMDTYModelList", RefersTo:=Selection
    Set rngCMDTYModelList = Range("NX_" & asn & "_M_CMDTYModelList")
    Call formatColorAndBorder(rngCMDTYModelList)
    Call addConditionalFormat(Range(rngCMDTYModelListAnchor.Offset(1, 0), rngCMDTYModelListAnchor.Offset(numCMDTYModel, 1)))
    Call addDataValidation(Range(rngCMDTYModelListAnchor.Offset(1, 2), rngCMDTYModelListAnchor.Offset(numCMDTYModel, 2)))
    
    rngCorrAnchor.Offset(0, 1) = "DomesticModelFactor1"
    rngCorrAnchor.Offset(1, 0) = "DomesticModelFactor1"

    For i = 1 To numCMDTYModel
        rngCorrAnchor.Offset(0, i + 1) = "=" & rngCMDTYModelList.Cells(i, 1).Address & "&" & """" & "Factor1" & """"
        rngCorrAnchor.Offset(i + 1, 0) = "=" & rngCMDTYModelList.Cells(i, 1).Address & "&" & """" & "Factor1" & """"
    Next i
    
    For i = 1 To numCMDTYModel + 1
        rngCorrAnchor.Offset(i, i) = 1
        For j = i + 1 To numCMDTYModel + 1
            rngCorrAnchor.Offset(i, j) = 0
        Next j
    Next i
    
    rngCorrAnchor.Formula = "=nxlibmatrix(" & Range(rngCorrAnchor.Offset(0, 1), rngCorrAnchor.Offset(0, numCMDTYModel + 1)).Address & "," _
                                            & Range(rngCorrAnchor.Offset(1, 0), rngCorrAnchor.Offset(numCMDTYModel + 1, 0)).Address & "," _
                                            & Range(rngCorrAnchor.Offset(1, 1), rngCorrAnchor.Offset(numCMDTYModel + 1, numCMDTYModel + 1)).Address & "," _
                                            & """" & "IR_CMDTYB_Corr.Data" & """" & ")"
    Call formatColorAndBorder(rngCorrAnchor)
    Call formatColorAndBorder(Range(rngCorrAnchor.Offset(1, 1), rngCorrAnchor.Offset(numCMDTYModel + 1, numCMDTYModel + 1)))
    Call formatHeader(Range(rngCorrAnchor.Offset(0, 1), rngCorrAnchor.Offset(0, numCMDTYModel + 1)))
    Call formatHeader(Range(rngCorrAnchor.Offset(1, 0), rngCorrAnchor.Offset(numCMDTYModel + 1, 0)))
          
CleanUp:
    Application.EnableEvents = True
    Application.ScreenUpdating = True
    Exit Sub
   
errorHandler:
    Call VBA.MsgBox("Error in resizing the model", vbCritical + vbOKOnly, "Error")
    GoTo CleanUp
    End Sub


Private Sub Worksheet_Activate()
    On Error GoTo CleanUp
    ComboBoxCMDTYModelNum.Clear
    ComboBoxCMDTYModelNum.AddItem ("1 CMDTY Model")
    ComboBoxCMDTYModelNum.AddItem ("2 CMDTY Models")
    ComboBoxCMDTYModelNum.AddItem ("3 CMDTY Models")
    ComboBoxCMDTYModelNum.AddItem ("4 CMDTY Models")
    ComboBoxCMDTYModelNum.AddItem ("5 CMDTY Models")
    ComboBoxCMDTYModelNum.AddItem ("6 CMDTY Models")
    ComboBoxCMDTYModelNum.AddItem ("7 CMDTY Models")
    ComboBoxCMDTYModelNum.AddItem ("8 CMDTY Models")
    ComboBoxCMDTYModelNum.AddItem ("9 CMDTY Models")
    ComboBoxCMDTYModelNum.AddItem ("10 CMDTY Models")
    ComboBoxCMDTYModelNum.Text = "1 CMDTY Model"
    hasBeenInitialised = True

CleanUp:
    ActiveSheet.Calculate
End Sub

'Resizing the correlation matrix after changing the Factor number for any model
Private Sub Worksheet_Change(ByVal Target As Range)
    On Error GoTo CleanUp
    Application.EnableEvents = False
    Application.ScreenUpdating = False
    
    Dim asn$: asn = ActiveSheet.Name
    Dim rngCMDTYModelList As Range: Set rngCMDTYModelList = Range("NX_" & asn & "_M_CMDTYModelList")
    Dim numCMDTYModels%: numCMDTYModels = rngCMDTYModelList.Rows.count
    Dim rngCMDTYModelFactorNumList As Range: Set rngCMDTYModelFactorNumList = Range(rngCMDTYModelList.Cells(1, 3), rngCMDTYModelList.Cells(numCMDTYModels, 3))
    Dim rngIRModelFactorNum As Range: Set rngIRModelFactorNum = Range("NX_" & asn & "_M_IRMOdelFactorNum")
    
    If Intersect(Target, rngCMDTYModelFactorNumList) Is Nothing And Intersect(Target, rngIRModelFactorNum) Is Nothing Then
        GoTo CleanUp
    End If
            
    Dim rngCorrAnchor As Range: Set rngCorrAnchor = Range("NX_" & asn & "_M_CorrAnchor")
    rngCorrAnchor.CurrentRegion.Clear
    Dim IRModelFactorNum%: IRModelFactorNum = rngIRModelFactorNum.Value
    Dim CMDTYModelFactorNum%
    Dim i%, j%
    Dim count%: count = 0
    
    For i = 1 To IRModelFactorNum
        count = count + 1
        rngCorrAnchor.Offset(0, count) = "DomesticModelFactor" & CStr(i)
        rngCorrAnchor.Offset(count, 0) = "DomesticModelFactor" & CStr(i)
    Next i
    
    For i = 1 To numCMDTYModels
        CMDTYModelFactorNum = rngCMDTYModelList.Cells(i, 3).Value
        For j = 1 To CMDTYModelFactorNum
            count = count + 1
            rngCorrAnchor.Offset(0, count) = "=" & rngCMDTYModelList.Cells(i, 1).Address & "&" & """" & "Factor" & CStr(j) & """"
            rngCorrAnchor.Offset(count, 0) = "=" & rngCMDTYModelList.Cells(i, 1).Address & "&" & """" & "Factor" & CStr(j) & """"
        Next j
    Next i
    
    For i = 1 To count
        rngCorrAnchor.Offset(i, i) = 1
        For j = i + 1 To count
            rngCorrAnchor.Offset(i, j) = 0
        Next j
    Next i
    
    rngCorrAnchor.Formula = "=nxlibmatrix(" & Range(rngCorrAnchor.Offset(0, 1), rngCorrAnchor.Offset(0, count)).Address & "," _
                                            & Range(rngCorrAnchor.Offset(1, 0), rngCorrAnchor.Offset(count, 0)).Address & "," _
                                            & Range(rngCorrAnchor.Offset(1, 1), rngCorrAnchor.Offset(count, count)).Address & "," _
                                            & """" & "IR_CMDTYB_Corr.Data" & """" & ")"
    
    
    Call formatColorAndBorder(rngCorrAnchor)
    Call formatColorAndBorder(Range(rngCorrAnchor.Offset(1, 1), rngCorrAnchor.Offset(count, count)))
    Call formatHeader(Range(rngCorrAnchor.Offset(0, 1), rngCorrAnchor.Offset(0, count)))
    Call formatHeader(Range(rngCorrAnchor.Offset(1, 0), rngCorrAnchor.Offset(count, 0)))
       
    Range(rngCorrAnchor.Offset(1, 1), rngCorrAnchor.Offset(count, count)).Select
    
CleanUp:

    Application.EnableEvents = True
    Application.ScreenUpdating = True

End Sub



''' Formatting Module

Private Sub addConditionalFormat(tempRng As Range)
    tempRng.Select
    Selection.FormatConditions.Delete
    Selection.FormatConditions.Add Type:=xlCellValue, Operator:=xlEqual, _
        Formula1:="=""<LINK>"""
    Selection.FormatConditions(1).Interior.ColorIndex = 3
    Cells(1, 1).Select
End Sub

Private Sub formatHeader(tempRng As Range)
    tempRng.Select
    With Selection.Interior
        .Pattern = xlSolid
        .PatternColorIndex = xlAutomatic
        .Color = 10040115
    End With
    With Selection.Font
        .ColorIndex = 2
        .Name = "Calibri"
        .Size = 11
    End With
    Cells(1, 1).Select
End Sub

Private Sub formatColorAndBorder(tempRng As Range)
    tempRng.Select
    Selection.HorizontalAlignment = xlCenter
    Selection.Borders(xlDiagonalDown).LineStyle = xlNone
    Selection.Borders(xlDiagonalUp).LineStyle = xlNone
    With Selection.Borders(xlEdgeLeft)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlEdgeTop)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlEdgeRight)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .Weight = xlThin
    End With
    Selection.Borders(xlInsideVertical).LineStyle = xlNone
    Selection.Borders(xlInsideHorizontal).LineStyle = xlNone
    With Selection.Interior
        .Pattern = xlSolid
        .PatternColorIndex = xlAutomatic
        .ColorIndex = 2
    End With
    With Selection.Font
        .Name = "Calibri"
        .Size = 11
    End With
    Cells(1, 1).Select
End Sub


Private Sub addDataValidation(tempRng As Range)
    tempRng.Select
    With Selection.Validation
        .Delete
        .Add Type:=xlValidateWholeNumber, AlertStyle:=xlValidAlertStop, _
        Operator:=xlGreaterEqual, Formula1:="1"
        .IgnoreBlank = True
        .InCellDropdown = True
        .InputTitle = ""
        .ErrorTitle = "Incorrect Input"
        .InputMessage = ""
        .ErrorMessage = "Please input an integer"
        .ShowInput = True
        .ShowError = True
    End With
    Cells(1, 1).Select
End Sub




Attribute VB_Name = "Sheet11"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "ComboBoxCRModelNum, 1, 0, MSForms, ComboBox"
Attribute VB_Control = "ResizeButton, 2, 1, MSForms, CommandButton"
Attribute VB_Control = "CreateButton, 3, 2, MSForms, CommandButton"
Option Explicit
Private hasBeenInitialised As Boolean


Private Sub CreateButton_Click()
    On Error GoTo errorHandler
    Application.EnableEvents = False
    Dim rngCRModelList As Range: Set rngCRModelList = Range("NX_" & ActiveSheet.Name & "_M_CRModelList")
    Dim rngModelListAnchor As Range: Set rngModelListAnchor = rngCRModelList.Cells(1, 1).Offset(-1, 0)
    Dim numCRModels%: numCRModels = rngCRModelList.Rows.count
    Dim rngCRModels As Range: Set rngCRModels = Range("NX_" & ActiveSheet.Name & "_M_CRModels")
    rngCRModels.Formula = "=nxlibdata(" & rngModelListAnchor.Address & "," & Range(rngModelListAnchor.Offset(1, 0), rngModelListAnchor.Offset(numCRModels, 0)).Address & "," & """" & "IR_CRB_CRModel.Data" & """" & ")"
    ActiveSheet.Calculate
CleanUp:
    Application.EnableEvents = True
    Exit Sub
errorHandler:
    Call VBA.MsgBox("Error in creating model table data", vbCritical + vbOKOnly, "Error")
    GoTo CleanUp
    End Sub

Private Sub ResizeButton_Click()
    On Error GoTo CleanUp
    Application.ScreenUpdating = False
    Dim temp As Variant: temp = Split(ComboBoxCRModelNum.Text, " ")
    If Not IsNumeric(temp(0)) Then
        MsgBox "Fatal error when resizing ComboBox"
        GoTo CleanUp
    Else
        Resize CInt(temp(0))
    End If
    On Error GoTo 0
    
CleanUp:
    Application.ScreenUpdating = True
    ActiveSheet.Calculate
End Sub



Public Sub Resize(numCRModel As Integer)
    On Error GoTo errorHandler
    Application.EnableEvents = False
    Application.ScreenUpdating = False
    
    Dim asn$: asn = ActiveSheet.Name
    Dim rngCRModels As Range: Set rngCRModels = Range("NX_" & asn & "_M_CRModels")
    Dim rngCRModelList As Range: Set rngCRModelList = Range("NX_" & asn & "_M_CRModelList")
    Dim rngIRModelFactorNum As Range: Set rngIRModelFactorNum = Range("NX_" & asn & "_M_IRModelFactorNum")
    Dim rngCorrAnchor As Range: Set rngCorrAnchor = Range("NX_" & asn & "_M_CorrAnchor")
    Dim rngCRModelListAnchor As Range: Set rngCRModelListAnchor = rngCRModelList.Cells(1, 1).Offset(-1, 0)
        
    rngCRModelList.Clear
    rngCorrAnchor.CurrentRegion.Clear
    rngCRModels = "<LINK>"
    rngIRModelFactorNum.Value = 1
    
    'Resize the CR Model table
    Dim i%, j%
    For i = 1 To numCRModel
        rngCRModelListAnchor.Offset(i, 0) = "<LINK>"
        rngCRModelListAnchor.Offset(i, 1) = 1
    Next i
    Range(rngCRModelListAnchor.Offset(1, 0), rngCRModelListAnchor.Offset(numCRModel, 1)).Select
    ActiveWorkbook.Names.Add Name:="NX_" & asn & "_M_CRModelList", RefersTo:=Selection
    Set rngCRModelList = Range("NX_" & asn & "_M_CRModelList")
    Call formatColorAndBorder(rngCRModelList)
    Call addConditionalFormat(Range(rngCRModelListAnchor.Offset(1, 0), rngCRModelListAnchor.Offset(numCRModel, 0)))
    Call addDataValidation(Range(rngCRModelListAnchor.Offset(1, 1), rngCRModelListAnchor.Offset(numCRModel, 1)))
    
    rngCorrAnchor.Offset(0, 1) = "DomesticModelFactor1"
    rngCorrAnchor.Offset(1, 0) = "DomesticModelFactor1"

    For i = 1 To numCRModel
        rngCorrAnchor.Offset(0, i + 1) = "CR" & CStr(i) & "Factor1"
        rngCorrAnchor.Offset(i + 1, 0) = "CR" & CStr(i) & "Factor1"
    Next i
    
    For i = 1 To numCRModel + 1
        rngCorrAnchor.Offset(i, i) = 1
        For j = i + 1 To numCRModel + 1
            rngCorrAnchor.Offset(i, j) = 0
        Next j
    Next i
    
    rngCorrAnchor.Formula = "=nxlibmatrix(" & Range(rngCorrAnchor.Offset(0, 1), rngCorrAnchor.Offset(0, numCRModel + 1)).Address & "," _
                                            & Range(rngCorrAnchor.Offset(1, 0), rngCorrAnchor.Offset(numCRModel + 1, 0)).Address & "," _
                                            & Range(rngCorrAnchor.Offset(1, 1), rngCorrAnchor.Offset(numCRModel + 1, numCRModel + 1)).Address & "," _
                                            & """" & "IR_CRB_Corr.Data" & """" & ")"
    Call formatColorAndBorder(rngCorrAnchor)
    Call formatColorAndBorder(Range(rngCorrAnchor.Offset(1, 1), rngCorrAnchor.Offset(numCRModel + 1, numCRModel + 1)))
    Call formatHeader(Range(rngCorrAnchor.Offset(0, 1), rngCorrAnchor.Offset(0, numCRModel + 1)))
    Call formatHeader(Range(rngCorrAnchor.Offset(1, 0), rngCorrAnchor.Offset(numCRModel + 1, 0)))
          
CleanUp:
    Application.EnableEvents = True
    Application.ScreenUpdating = True
    Exit Sub
   
errorHandler:
    Call VBA.MsgBox("Error in resizing the model", vbCritical + vbOKOnly, "Error")
    GoTo CleanUp
    End Sub


Private Sub Worksheet_Activate()
    On Error GoTo CleanUp
    ComboBoxCRModelNum.Clear
    ComboBoxCRModelNum.AddItem ("1 CR Model")
    ComboBoxCRModelNum.AddItem ("2 CR Models")
    ComboBoxCRModelNum.AddItem ("3 CR Models")
    ComboBoxCRModelNum.AddItem ("4 CR Models")
    ComboBoxCRModelNum.AddItem ("5 CR Models")
    ComboBoxCRModelNum.AddItem ("6 CR Models")
    ComboBoxCRModelNum.AddItem ("7 CR Models")
    ComboBoxCRModelNum.AddItem ("8 CR Models")
    ComboBoxCRModelNum.AddItem ("9 CR Models")
    ComboBoxCRModelNum.AddItem ("10 CR Models")
    ComboBoxCRModelNum.Text = "1 CR Model"
    hasBeenInitialised = True

CleanUp:
    ActiveSheet.Calculate
End Sub

'Resizing the correlation matrix after changing the Factor number for any model
Private Sub Worksheet_Change(ByVal Target As Range)
    On Error GoTo CleanUp
    Application.EnableEvents = False
    Application.ScreenUpdating = False
    
    Dim asn$: asn = ActiveSheet.Name
    Dim rngCRModelList As Range: Set rngCRModelList = Range("NX_" & asn & "_M_CRModelList")
    Dim numCRModels%: numCRModels = rngCRModelList.Rows.count
    Dim rngCRModelFactorNumList As Range: Set rngCRModelFactorNumList = Range(rngCRModelList.Cells(1, 2), rngCRModelList.Cells(numCRModels, 2))
    Dim rngIRModelFactorNum As Range: Set rngIRModelFactorNum = Range("NX_" & asn & "_M_IRMOdelFactorNum")
    
    If Intersect(Target, rngCRModelFactorNumList) Is Nothing And Intersect(Target, rngIRModelFactorNum) Is Nothing Then
        GoTo CleanUp
    End If
            
    Dim rngCorrAnchor As Range: Set rngCorrAnchor = Range("NX_" & asn & "_M_CorrAnchor")
    rngCorrAnchor.CurrentRegion.Clear
    Dim IRModelFactorNum%: IRModelFactorNum = rngIRModelFactorNum.Value
    Dim CRModelFactorNum%
    Dim i%, j%
    Dim count%: count = 0
    
    For i = 1 To IRModelFactorNum
        count = count + 1
        rngCorrAnchor.Offset(0, count) = "DomesticModelFactor" & CStr(i)
        rngCorrAnchor.Offset(count, 0) = "DomesticModelFactor" & CStr(i)
    Next i
    
    For i = 1 To numCRModels
        CRModelFactorNum = rngCRModelList.Cells(i, 2).Value
        For j = 1 To CRModelFactorNum
            count = count + 1
            rngCorrAnchor.Offset(0, count) = "CR" & CStr(i) & "Factor" & CStr(j)
            rngCorrAnchor.Offset(count, 0) = "CR" & CStr(i) & "Factor" & CStr(j)
        Next j
    Next i
    
    For i = 1 To count
        rngCorrAnchor.Offset(i, i) = 1
        For j = i + 1 To count
            rngCorrAnchor.Offset(i, j) = 0
        Next j
    Next i
    
    rngCorrAnchor.Formula = "=nxlibmatrix(" & Range(rngCorrAnchor.Offset(0, 1), rngCorrAnchor.Offset(0, count)).Address & "," _
                                            & Range(rngCorrAnchor.Offset(1, 0), rngCorrAnchor.Offset(count, 0)).Address & "," _
                                            & Range(rngCorrAnchor.Offset(1, 1), rngCorrAnchor.Offset(count, count)).Address & "," _
                                            & """" & "IR_CRB_Corr.Data" & """" & ")"
    
    
    Call formatColorAndBorder(rngCorrAnchor)
    Call formatColorAndBorder(Range(rngCorrAnchor.Offset(1, 1), rngCorrAnchor.Offset(count, count)))
    Call formatHeader(Range(rngCorrAnchor.Offset(0, 1), rngCorrAnchor.Offset(0, count)))
    Call formatHeader(Range(rngCorrAnchor.Offset(1, 0), rngCorrAnchor.Offset(count, 0)))
    Range(rngCorrAnchor.Offset(1, 1), rngCorrAnchor.Offset(count, count)).Select
    
CleanUp:
    Application.EnableEvents = True
    Application.ScreenUpdating = True
End Sub



''' Formatting Module

Private Sub addConditionalFormat(tempRng As Range)
    tempRng.Select
    Selection.FormatConditions.Delete
    Selection.FormatConditions.Add Type:=xlCellValue, Operator:=xlEqual, _
        Formula1:="=""<LINK>"""
    Selection.FormatConditions(1).Interior.ColorIndex = 3
    Cells(1, 1).Select
End Sub

Private Sub formatHeader(tempRng As Range)
    tempRng.Select
    With Selection.Interior
        .Pattern = xlSolid
        .PatternColorIndex = xlAutomatic
        .Color = 10040115
    End With
    With Selection.Font
        .ColorIndex = 2
        .Name = "Calibri"
        .Size = 11
    End With
    Cells(1, 1).Select
End Sub

Private Sub formatColorAndBorder(tempRng As Range)
    tempRng.Select
    Selection.HorizontalAlignment = xlCenter
    Selection.Borders(xlDiagonalDown).LineStyle = xlNone
    Selection.Borders(xlDiagonalUp).LineStyle = xlNone
    With Selection.Borders(xlEdgeLeft)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlEdgeTop)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlEdgeRight)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .Weight = xlThin
    End With
    Selection.Borders(xlInsideVertical).LineStyle = xlNone
    Selection.Borders(xlInsideHorizontal).LineStyle = xlNone
    With Selection.Interior
        .Pattern = xlSolid
        .PatternColorIndex = xlAutomatic
        .ColorIndex = 2
    End With
    With Selection.Font
        .Name = "Calibri"
        .Size = 11
    End With
    Cells(1, 1).Select
End Sub


Private Sub addDataValidation(tempRng As Range)
    tempRng.Select
    With Selection.Validation
        .Delete
        .Add Type:=xlValidateWholeNumber, AlertStyle:=xlValidAlertStop, _
        Operator:=xlGreaterEqual, Formula1:="1"
        .IgnoreBlank = True
        .InCellDropdown = True
        .InputTitle = ""
        .ErrorTitle = "Incorrect Input"
        .InputMessage = ""
        .ErrorMessage = "Please input an integer"
        .ShowInput = True
        .ShowError = True
    End With
    Cells(1, 1).Select
End Sub




Attribute VB_Name = "Sheet12"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "ComboBoxForeignModelNum, 1, 0, MSForms, ComboBox"
Attribute VB_Control = "ResizeButton, 2, 1, MSForms, CommandButton"
Attribute VB_Control = "CreateButton, 3, 2, MSForms, CommandButton"
Option Explicit
Private hasBeenInitialised As Boolean


Private Sub CreateButton_Click()
    On Error GoTo errorHandler
    Application.EnableEvents = False
    Application.ScreenUpdating = False
    
    Dim asn$: asn = ActiveSheet.Name
    Dim rngForeignModelList As Range: Set rngForeignModelList = Range("NX_" & asn & "_M_ForeignModelList")
    Dim numForeignModels%: numForeignModels = rngForeignModelList.Rows.count
    Dim rngForeignModelListAnchor As Range: Set rngForeignModelListAnchor = rngForeignModelList.Cells(1, 1).Offset(-1, 0)
    Dim rngForeignModels As Range: Set rngForeignModels = Range("NX_" & asn & "_M_ForeignModels")
    rngForeignModels.Formula = "=nxlibdata(" & rngForeignModelListAnchor.Address & "," & Range(rngForeignModelListAnchor.Offset(1, 0), rngForeignModelListAnchor.Offset(numForeignModels, 0)).Address & "," & """" & "NCurrency_HY_ForeignModel.Data" & """" & ")"
    Dim rngFXModelList As Range: Set rngFXModelList = Range("NX_" & asn & "_M_FXModelList")
    Dim numFXModels%: numFXModels = rngFXModelList.Rows.count
    Dim rngFXModelListAnchor As Range: Set rngFXModelListAnchor = rngFXModelList.Cells(1, 1).Offset(-1, 0)
    Dim rngFXModels As Range: Set rngFXModels = Range("NX_" & asn & "_M_FXModels")
    rngFXModels.Formula = "=nxlibdata(" & rngFXModelListAnchor.Address & "," & Range(rngFXModelListAnchor.Offset(1, 0), rngFXModelListAnchor.Offset(numFXModels, 0)).Address & "," & """" & "NCurrency_HY_FXModel.Data" & """" & ")"
    ActiveSheet.Calculate
    
CleanUp:
    Application.EnableEvents = True
    Application.ScreenUpdating = True
    Exit Sub
errorHandler:
    Call VBA.MsgBox("Error in creating model table data", vbCritical + vbOKOnly, "Error")
    GoTo CleanUp
    End Sub

Private Sub ResizeButton_Click()
    On Error GoTo CleanUp
    Application.ScreenUpdating = False
    Dim temp1 As Variant: temp1 = Split(ComboBoxForeignModelNum.Text, " ")
    If Not IsNumeric(temp1(0)) Then
        MsgBox "Fatal error when resizing ComboBox"
        GoTo CleanUp
    Else
        Resize CInt(temp1(0))
    End If
    On Error GoTo 0
    
CleanUp:
    Application.ScreenUpdating = True
    ActiveSheet.Calculate
End Sub


Public Sub Resize(numForeignModel As Integer)
    On Error GoTo errorHandler
    Application.EnableEvents = False
    Application.ScreenUpdating = False
    
    Dim numFXModel%: numFXModel = numForeignModel
    Dim asn$: asn = ActiveSheet.Name
    Dim rngForeignModels As Range: Set rngForeignModels = Range("NX_" & asn & "_M_ForeignModels")
    Dim rngForeignModelList As Range: Set rngForeignModelList = Range("NX_" & asn & "_M_ForeignModelList")
    Dim rngFXModels As Range: Set rngFXModels = Range("NX_" & asn & "_M_FXModels")
    Dim rngFXModelList As Range: Set rngFXModelList = Range("NX_" & asn & "_M_FXModelList")
    Dim rngIRModelFactorNum As Range: Set rngIRModelFactorNum = Range("NX_" & asn & "_M_IRModelFactorNum")
    Dim rngCorrAnchor As Range: Set rngCorrAnchor = Range("NX_" & asn & "_M_CorrAnchor")
    Dim rngForeignModelListAnchor As Range: Set rngForeignModelListAnchor = rngForeignModelList.Cells(1, 1).Offset(-1, 0)
    Dim rngFXModelListAnchor As Range: Set rngFXModelListAnchor = rngFXModelList.Cells(1, 1).Offset(-1, 0)
    
    rngForeignModelList.Clear
    rngFXModelList.Clear
    rngCorrAnchor.CurrentRegion.Clear
    rngForeignModels = "<LINK>"
    rngFXModels = "<LINK>"
    rngIRModelFactorNum.Value = 1
    
    'Resize the CR Model table
    Dim i%, j%
    For i = 1 To numForeignModel
        rngForeignModelListAnchor.Offset(i, 0) = "<LINK>"
        rngForeignModelListAnchor.Offset(i, 1) = 1
    Next i
    Range(rngForeignModelListAnchor.Offset(1, 0), rngForeignModelListAnchor.Offset(numForeignModel, 1)).Select
    ActiveWorkbook.Names.Add Name:="NX_" & asn & "_M_ForeignModelList", RefersTo:=Selection
    Set rngForeignModelList = Range("NX_" & asn & "_M_ForeignModelList")
    Call formatColorAndBorder(rngForeignModelList)
    Call addConditionalFormat(Range(rngForeignModelListAnchor.Offset(1, 0), rngForeignModelListAnchor.Offset(numForeignModel, 0)))
    Call addDataValidation(Range(rngForeignModelListAnchor.Offset(1, 1), rngForeignModelListAnchor.Offset(numForeignModel, 1)))
        
    'Resize the EQ Model Table
    For i = 1 To numFXModel
        rngFXModelListAnchor.Offset(i, 0) = "<LINK>"
        rngFXModelListAnchor.Offset(i, 1) = 1
    Next i
    Range(rngFXModelListAnchor.Offset(1, 0), rngFXModelListAnchor.Offset(numFXModel, 1)).Select
    ActiveWorkbook.Names.Add Name:="NX_" & asn & "_M_FXModelList", RefersTo:=Selection
    Set rngFXModelList = Range("NX_" & asn & "_M_FXModelList")
    Call formatColorAndBorder(rngFXModelList)
    Call addConditionalFormat(Range(rngFXModelListAnchor.Offset(1, 0), rngFXModelListAnchor.Offset(numFXModel, 0)))
    Call addDataValidation(Range(rngFXModelListAnchor.Offset(1, 1), rngFXModelListAnchor.Offset(numFXModel, 1)))
          
    rngCorrAnchor.Offset(0, 1) = "DomesticModelFactor1"
    rngCorrAnchor.Offset(1, 0) = "DomesticModelFactor1"
    
    For i = 1 To numFXModel
        rngCorrAnchor.Offset(0, i + 1) = "Foreign" & CStr(i) & "ModelFactor1"
        rngCorrAnchor.Offset(i + 1, 0) = "Foreign" & CStr(i) & "ModelFactor1"
    Next i
    
    For i = 1 To numForeignModel
        rngCorrAnchor.Offset(0, i + numFXModel + 1) = "FX" & CStr(i) & "ModelFactor1"
        rngCorrAnchor.Offset(i + numFXModel + 1, 0) = "FX" & CStr(i) & "ModelFactor1"
    Next i
    
    For i = 1 To numFXModel + numForeignModel + 1
        rngCorrAnchor.Offset(i, i) = 1
        For j = i + 1 To numFXModel + numForeignModel + 1
            rngCorrAnchor.Offset(i, j) = 0
        Next j
    Next i
    
    rngCorrAnchor.Formula = "=nxlibmatrix(" & Range(rngCorrAnchor.Offset(0, 1), rngCorrAnchor.Offset(0, numFXModel + numForeignModel + 1)).Address & "," _
                                            & Range(rngCorrAnchor.Offset(1, 0), rngCorrAnchor.Offset(numFXModel + numForeignModel + 1, 0)).Address & "," _
                                            & Range(rngCorrAnchor.Offset(1, 1), rngCorrAnchor.Offset(numFXModel + numForeignModel + 1, numFXModel + numForeignModel + 1)).Address & "," _
                                            & """" & "NCurrency_HY_Corr.Data" & """" & ")"
                                            
    Call formatColorAndBorder(rngCorrAnchor)
    Call formatColorAndBorder(Range(rngCorrAnchor.Offset(1, 1), rngCorrAnchor.Offset(numFXModel + numForeignModel + 1, numFXModel + numForeignModel + 1)))
    Call formatHeader(Range(rngCorrAnchor.Offset(0, 1), rngCorrAnchor.Offset(0, numFXModel + numForeignModel + 1)))
    Call formatHeader(Range(rngCorrAnchor.Offset(1, 0), rngCorrAnchor.Offset(numFXModel + numForeignModel + 1, 0)))

CleanUp:
    Application.EnableEvents = True
    Application.ScreenUpdating = True
    Set rngForeignModels = Nothing
    Set rngForeignModelList = Nothing
    Set rngForeignModelListAnchor = Nothing
    Set rngFXModels = Nothing
    Set rngFXModelList = Nothing
    Set rngFXModelListAnchor = Nothing
    Set rngCorrAnchor = Nothing
    Exit Sub
   
errorHandler:
    Call VBA.MsgBox("Error in resizing the model", vbCritical + vbOKOnly, "Error")
    GoTo CleanUp
    End Sub

Private Sub Worksheet_Activate()

    On Error GoTo CleanUp
    ComboBoxForeignModelNum.Clear
    ComboBoxForeignModelNum.AddItem ("1 Foreign Model")
    ComboBoxForeignModelNum.AddItem ("2 Foreign Models")
    ComboBoxForeignModelNum.AddItem ("4 Foreign Models")
    ComboBoxForeignModelNum.AddItem ("5 Foreign Models")
    ComboBoxForeignModelNum.AddItem ("6 Foreign Models")
    ComboBoxForeignModelNum.AddItem ("7 Foreign Models")
    ComboBoxForeignModelNum.AddItem ("8 Foreign Models")
    ComboBoxForeignModelNum.AddItem ("9 Foreign Models")
    ComboBoxForeignModelNum.AddItem ("10 Foreign Models")
    ComboBoxForeignModelNum.Text = "1 Foreign Model"
   
    hasBeenInitialised = True

CleanUp:
    ActiveSheet.Calculate
End Sub


'Resizing the correlation matrix after changing the Factor number for any model
Private Sub Worksheet_Change(ByVal Target As Range)
    On Error GoTo CleanUp
    Application.EnableEvents = False
    Application.ScreenUpdating = False
    
    Dim asn$: asn = ActiveSheet.Name
    Dim rngForeignModelList As Range: Set rngForeignModelList = Range("NX_" & asn & "_M_ForeignModelList")
    Dim numForeignModels%: numForeignModels = rngForeignModelList.Rows.count
    Dim rngForeignModelFactorNumList As Range: Set rngForeignModelFactorNumList = Range(rngForeignModelList.Cells(1, 2), rngForeignModelList.Cells(numForeignModels, 2))
    Dim rngFXModelList As Range: Set rngFXModelList = Range("NX_" & asn & "_M_FXModelList")
    Dim numFXModels%: numFXModels = rngFXModelList.Rows.count
    Dim rngFXModelFactorNumList As Range: Set rngFXModelFactorNumList = Range(rngFXModelList(1, 2), rngFXModelList(numFXModels, 2))
    Dim rngIRModelFactorNum As Range: Set rngIRModelFactorNum = Range("NX_" & asn & "_M_IRMOdelFactorNum")
    
    If Intersect(Target, rngForeignModelFactorNumList) Is Nothing And Intersect(Target, rngFXModelFactorNumList) Is Nothing And _
        Intersect(Target, rngIRModelFactorNum) Is Nothing Then
        GoTo CleanUp
    End If
    
    Dim rngCorrAnchor As Range: Set rngCorrAnchor = Range("NX_" & asn & "_M_CorrAnchor")
    rngCorrAnchor.CurrentRegion.Clear
    Dim IRModelFactorNum%: IRModelFactorNum = rngIRModelFactorNum.Value
    Dim FXModelFactorNum%, ForeignModelFactorNum%
    Dim i%, j%
    Dim count%: count = 0
    For i = 1 To IRModelFactorNum
        count = count + 1
        rngCorrAnchor.Offset(0, count) = "DomesticModelFactor" & CStr(i)
        rngCorrAnchor.Offset(count, 0) = "DomesticModelFactor" & CStr(i)
    Next i
    
    For i = 1 To numFXModels
        FXModelFactorNum = rngFXModelList.Cells(i, 2).Value
        For j = 1 To FXModelFactorNum
            count = count + 1
            rngCorrAnchor.Offset(0, count) = "FX" & CStr(i) & "ModelFactor" & CStr(j)
            rngCorrAnchor.Offset(count, 0) = "FX" & CStr(i) & "ModelFactor" & CStr(j)
        Next j
    Next i
    
    For i = 1 To numForeignModels
        ForeignModelFactorNum = rngForeignModelList.Cells(i, 2).Value
        For j = 1 To ForeignModelFactorNum
            count = count + 1
            rngCorrAnchor.Offset(0, count) = "Foreign" & CStr(i) & "ModelFactor" & CStr(j)
            rngCorrAnchor.Offset(count, 0) = "Foreign" & CStr(i) & "ModelFactor" & CStr(j)
        Next j
    Next i
    
    For i = 1 To count
        rngCorrAnchor.Offset(i, i) = 1
        For j = i + 1 To count
            rngCorrAnchor.Offset(i, j) = 0
        Next j
    Next i
    
    rngCorrAnchor.Formula = "=nxlibmatrix(" & Range(rngCorrAnchor.Offset(0, 1), rngCorrAnchor.Offset(0, count)).Address & "," _
                                            & Range(rngCorrAnchor.Offset(1, 0), rngCorrAnchor.Offset(count, 0)).Address & "," _
                                            & Range(rngCorrAnchor.Offset(1, 1), rngCorrAnchor.Offset(count, count)).Address & "," _
                                            & """" & "NCurrency_HY_Corr.Data" & """" & ")"
    
    
    Call formatColorAndBorder(rngCorrAnchor)
    Call formatColorAndBorder(Range(rngCorrAnchor.Offset(1, 1), rngCorrAnchor.Offset(count, count)))
    Call formatHeader(Range(rngCorrAnchor.Offset(0, 1), rngCorrAnchor.Offset(0, count)))
    Call formatHeader(Range(rngCorrAnchor.Offset(1, 0), rngCorrAnchor.Offset(count, 0)))
       
    Range(rngCorrAnchor.Offset(1, 1), rngCorrAnchor.Offset(count, count)).Select
    
CleanUp:
    Application.EnableEvents = True
    Application.ScreenUpdating = True
End Sub





''' Formatting Module

Private Sub addConditionalFormat(tempRng As Range)
    tempRng.Select
    Selection.FormatConditions.Delete
    Selection.FormatConditions.Add Type:=xlCellValue, Operator:=xlEqual, _
        Formula1:="=""<LINK>"""
    Selection.FormatConditions(1).Interior.ColorIndex = 3
        
    Cells(1, 1).Select
End Sub

Private Sub formatHeader(tempRng As Range)
    tempRng.Select
    With Selection.Interior
        .Pattern = xlSolid
        .PatternColorIndex = xlAutomatic
        .Color = 10040115
    End With
    With Selection.Font
        .ColorIndex = 2
        .Name = "Calibri"
        .Size = 11
    End With
    Cells(1, 1).Select
End Sub

Private Sub formatColorAndBorder(tempRng As Range)
    tempRng.Select
    Selection.HorizontalAlignment = xlCenter
    Selection.Borders(xlDiagonalDown).LineStyle = xlNone
    Selection.Borders(xlDiagonalUp).LineStyle = xlNone
    With Selection.Borders(xlEdgeLeft)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlEdgeTop)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlEdgeRight)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .Weight = xlThin
    End With
    Selection.Borders(xlInsideVertical).LineStyle = xlNone
    Selection.Borders(xlInsideHorizontal).LineStyle = xlNone
    With Selection.Interior
        .Pattern = xlSolid
        .PatternColorIndex = xlAutomatic
        .ColorIndex = 2
    End With
    With Selection.Font
        .Name = "Calibri"
        .Size = 11
    End With
    Cells(1, 1).Select

End Sub

Private Sub addDataValidation(tempRng As Range)
    tempRng.Select
    With Selection.Validation
        .Delete
        .Add Type:=xlValidateWholeNumber, AlertStyle:=xlValidAlertStop, _
        Operator:=xlGreaterEqual, Formula1:="1"
        .IgnoreBlank = True
        .InCellDropdown = True
        .InputTitle = ""
        .ErrorTitle = "Incorrect Input"
        .InputMessage = ""
        .ErrorMessage = "Please input an integer"
        .ShowInput = True
        .ShowError = True
    End With
    Cells(1, 1).Select
End Sub

Attribute VB_Name = "Sheet13"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "ComboBoxForeignModelNum, 1, 0, MSForms, ComboBox"
Attribute VB_Control = "ResizeButton, 2, 1, MSForms, CommandButton"
Attribute VB_Control = "CreateButton, 3, 2, MSForms, CommandButton"
Attribute VB_Control = "ComboBoxEQModelNum, 4, 3, MSForms, ComboBox"
Option Explicit
Private hasBeenInitialised As Boolean


Private Sub CreateButton_Click()
    On Error GoTo errorHandler
    Application.EnableEvents = False
    Dim asn$: asn = ActiveSheet.Name
    Dim rngForeignModelList As Range: Set rngForeignModelList = Range("NX_" & asn & "_M_ForeignModelList")
    Dim numForeignModels%: numForeignModels = rngForeignModelList.Rows.count
    Dim rngForeignModelListAnchor As Range: Set rngForeignModelListAnchor = rngForeignModelList.Cells(1, 1).Offset(-1, 0)
    Dim rngForeignModels As Range: Set rngForeignModels = Range("NX_" & asn & "_M_ForeignModels")
    rngForeignModels.Formula = "=nxlibdata(" & rngForeignModelListAnchor.Address & "," & Range(rngForeignModelListAnchor.Offset(1, 0), rngForeignModelListAnchor.Offset(numForeignModels, 0)).Address & "," & """" & "CC_EQB_ForeignModel.Data" & """" & ")"
    Dim rngFXModelList As Range: Set rngFXModelList = Range("NX_" & asn & "_M_FXModelList")
    Dim numFXModels%: numFXModels = rngFXModelList.Rows.count
    Dim rngFXModelListAnchor As Range: Set rngFXModelListAnchor = rngFXModelList.Cells(1, 1).Offset(-1, 0)
    Dim rngFXModels As Range: Set rngFXModels = Range("NX_" & asn & "_M_FXModels")
    rngFXModels.Formula = "=nxlibdata(" & rngFXModelListAnchor.Address & "," & Range(rngFXModelListAnchor.Offset(1, 0), rngFXModelListAnchor.Offset(numFXModels, 0)).Address & "," & """" & "CC_EQB_FXModel.Data" & """" & ")"
    Dim rngEQModelList As Range: Set rngEQModelList = Range("NX_" & asn & "_M_EQModelList")
    Dim numEQModels%: numEQModels = rngEQModelList.Rows.count
    Dim rngEQModelListAnchor As Range: Set rngEQModelListAnchor = rngEQModelList.Cells(1, 1).Offset(-1, 0)
    Dim rngEQModels As Range: Set rngEQModels = Range("NX_" & asn & "_M_EQModels")
    rngEQModels.Formula = "=nxlibdata(" & Range(rngEQModelListAnchor, rngEQModelListAnchor.Offset(0, 1)).Address & "," & Range(rngEQModelListAnchor.Offset(1, 0), rngEQModelListAnchor.Offset(numEQModels, 1)).Address & "," & """" & "CC_EQB_EQModel.Data" & """" & ")"
    ActiveSheet.Calculate
CleanUp:
    Application.EnableEvents = True
    Exit Sub
errorHandler:
    Call VBA.MsgBox("Error in creating model table data", vbCritical + vbOKOnly, "Error")
    GoTo CleanUp
    End Sub

Private Sub ResizeButton_Click()
    On Error GoTo CleanUp
    Application.ScreenUpdating = False
    Dim temp1 As Variant: temp1 = Split(ComboBoxForeignModelNum.Text, " ")
    Dim temp2 As Variant: temp2 = Split(ComboBoxEQModelNum.Text, " ")
    If Not IsNumeric(temp1(0)) Or Not IsNumeric(temp2(0)) Then
        MsgBox "Fatal error when resizing ComboBox"
        GoTo CleanUp
    Else
        Resize CInt(temp1(0)), CInt(temp2(0))
    End If
    On Error GoTo 0
    
CleanUp:
    Application.ScreenUpdating = True
    ActiveSheet.Calculate
    
End Sub


Public Sub Resize(numForeignModel As Integer, numEQModel As Integer)
    On Error GoTo errorHandler
    Application.EnableEvents = False
    Application.ScreenUpdating = False
    
    Dim numFXModel%: numFXModel = numForeignModel
    Dim asn$: asn = ActiveSheet.Name
    Dim rngForeignModels As Range: Set rngForeignModels = Range("NX_" & asn & "_M_ForeignModels")
    Dim rngForeignModelList As Range: Set rngForeignModelList = Range("NX_" & asn & "_M_ForeignModelList")
    Dim rngFXModels As Range: Set rngFXModels = Range("NX_" & asn & "_M_FXModels")
    Dim rngFXModelList As Range: Set rngFXModelList = Range("NX_" & asn & "_M_FXModelList")
    Dim rngEQModels As Range: Set rngEQModels = Range("NX_" & asn & "_M_EQModels")
    Dim rngEQModelList As Range: Set rngEQModelList = Range("NX_" & asn & "_M_EQModelList")
        
    Dim rngIRModelFactorNum As Range: Set rngIRModelFactorNum = Range("NX_" & asn & "_M_IRModelFactorNum")
    Dim rngCorrAnchor As Range: Set rngCorrAnchor = Range("NX_" & asn & "_M_CorrAnchor")
    Dim rngForeignModelListAnchor As Range: Set rngForeignModelListAnchor = rngForeignModelList.Cells(1, 1).Offset(-1, 0)
    Dim rngFXModelListAnchor As Range: Set rngFXModelListAnchor = rngFXModelList.Cells(1, 1).Offset(-1, 0)
    Dim rngEQModelListAnchor As Range: Set rngEQModelListAnchor = rngEQModelList.Cells(1, 1).Offset(-1, 0)
    
    rngForeignModelList.Clear
    rngFXModelList.Clear
    rngEQModelList.Clear
    rngCorrAnchor.CurrentRegion.Clear
    rngForeignModels = "<LINK>"
    rngFXModels = "<LINK>"
    rngEQModels = "<LINK>"
    rngIRModelFactorNum.Value = 1
    
    'Resize the Foreign Model table
    Dim i%, j%
    For i = 1 To numForeignModel
        rngForeignModelListAnchor.Offset(i, 0) = "<LINK>"
        rngForeignModelListAnchor.Offset(i, 1) = 1
    Next i
    Range(rngForeignModelListAnchor.Offset(1, 0), rngForeignModelListAnchor.Offset(numForeignModel, 1)).Select
    ActiveWorkbook.Names.Add Name:="NX_" & asn & "_M_ForeignModelList", RefersTo:=Selection
    Set rngForeignModelList = Range("NX_" & asn & "_M_ForeignModelList")
    Call formatColorAndBorder(rngForeignModelList)
    Call addConditionalFormat(Range(rngForeignModelListAnchor.Offset(1, 0), rngForeignModelListAnchor.Offset(numForeignModel, 0)))
    Call addDataValidation(Range(rngForeignModelListAnchor.Offset(1, 1), rngForeignModelListAnchor.Offset(numForeignModel, 1)))
        
    'Resize the FX Model Table
    For i = 1 To numFXModel
        rngFXModelListAnchor.Offset(i, 0) = "<LINK>"
        rngFXModelListAnchor.Offset(i, 1) = 1
    Next i
    Range(rngFXModelListAnchor.Offset(1, 0), rngFXModelListAnchor.Offset(numFXModel, 1)).Select
    ActiveWorkbook.Names.Add Name:="NX_" & asn & "_M_FXModelList", RefersTo:=Selection
    Set rngFXModelList = Range("NX_" & asn & "_M_FXModelList")
    Call formatColorAndBorder(rngFXModelList)
    Call addConditionalFormat(Range(rngFXModelListAnchor.Offset(1, 0), rngFXModelListAnchor.Offset(numFXModel, 0)))
    Call addDataValidation(Range(rngFXModelListAnchor.Offset(1, 1), rngFXModelListAnchor.Offset(numFXModel, 1)))
          
    'Resize the EQ Model Table
    For i = 1 To numEQModel
        rngEQModelListAnchor.Offset(i, 0) = "<LINK>"
        rngEQModelListAnchor.Offset(i, 1) = "<LINK>"
        rngEQModelListAnchor.Offset(i, 2) = 1
    Next i
    Range(rngEQModelListAnchor.Offset(1, 0), rngEQModelListAnchor.Offset(numEQModel, 2)).Select
    ActiveWorkbook.Names.Add Name:="NX_" & asn & "_M_EQModelList", RefersTo:=Selection
    Set rngEQModelList = Range("NX_" & asn & "_M_EQModelList")
    Call formatColorAndBorder(rngEQModelList)
    Call addConditionalFormat(Range(rngEQModelListAnchor.Offset(1, 0), rngEQModelListAnchor.Offset(numEQModel, 1)))
    Call addDataValidation(Range(rngEQModelListAnchor.Offset(1, 2), rngEQModelListAnchor.Offset(numEQModel, 2)))
          
          
    rngCorrAnchor.Offset(0, 1) = "DomesticModelFactor1"
    rngCorrAnchor.Offset(1, 0) = "DomesticModelFactor1"
    
    For i = 1 To numFXModel
        rngCorrAnchor.Offset(0, i + 1) = "Foreign" & CStr(i) & "ModelFactor1"
        rngCorrAnchor.Offset(i + 1, 0) = "Foreign" & CStr(i) & "ModelFactor1"
    Next i
    
    For i = 1 To numForeignModel
        rngCorrAnchor.Offset(0, i + numFXModel + 1) = "FX" & CStr(i) & "ModelFactor1"
        rngCorrAnchor.Offset(i + numFXModel + 1, 0) = "FX" & CStr(i) & "ModelFactor1"
    Next i
    
    For i = 1 To numEQModel
        rngCorrAnchor.Offset(0, i + numFXModel + numForeignModel + 1) = "=" & rngEQModelListAnchor.Offset(i, 0).Address & "&" & """" & "Factor1" & """"
        rngCorrAnchor.Offset(i + numFXModel + numForeignModel + 1, 0) = "=" & rngEQModelListAnchor.Offset(i, 0).Address & "&" & """" & "Factor1" & """"
    Next i
    
    For i = 1 To numFXModel + numForeignModel + numEQModel + 1
        rngCorrAnchor.Offset(i, i) = 1
        For j = i + 1 To numFXModel + numForeignModel + numEQModel + 1
            rngCorrAnchor.Offset(i, j) = 0
        Next j
    Next i
    
    rngCorrAnchor.Formula = "=nxlibmatrix(" & Range(rngCorrAnchor.Offset(0, 1), rngCorrAnchor.Offset(0, numFXModel + numForeignModel + numEQModel + 1)).Address & "," _
                                            & Range(rngCorrAnchor.Offset(1, 0), rngCorrAnchor.Offset(numFXModel + numForeignModel + numEQModel + 1, 0)).Address & "," _
                                            & Range(rngCorrAnchor.Offset(1, 1), rngCorrAnchor.Offset(numFXModel + numForeignModel + numEQModel + 1, numFXModel + numForeignModel + numEQModel + 1)).Address & "," _
                                            & """" & "CC_EQB_Corr.Data" & """" & ")"
                                            
    Call formatColorAndBorder(rngCorrAnchor)
    Call formatColorAndBorder(Range(rngCorrAnchor.Offset(1, 1), rngCorrAnchor.Offset(numFXModel + numForeignModel + numEQModel + 1, numFXModel + numForeignModel + numEQModel + 1)))
    Call formatHeader(Range(rngCorrAnchor.Offset(0, 1), rngCorrAnchor.Offset(0, numFXModel + numForeignModel + numEQModel + 1)))
    Call formatHeader(Range(rngCorrAnchor.Offset(1, 0), rngCorrAnchor.Offset(numFXModel + numForeignModel + numEQModel + 1, 0)))

CleanUp:
    Application.EnableEvents = True
    Application.ScreenUpdating = True
    Set rngForeignModels = Nothing
    Set rngForeignModelList = Nothing
    Set rngForeignModelListAnchor = Nothing
    Set rngFXModels = Nothing
    Set rngFXModelList = Nothing
    Set rngFXModelListAnchor = Nothing
    Set rngEQModels = Nothing
    Set rngEQModelList = Nothing
    Set rngEQModelListAnchor = Nothing
    Set rngCorrAnchor = Nothing
    Exit Sub
   
errorHandler:
    Call VBA.MsgBox("Error in resizing the model", vbCritical + vbOKOnly, "Error")
    GoTo CleanUp
    End Sub

Private Sub Worksheet_Activate()

    On Error GoTo CleanUp
    ComboBoxForeignModelNum.Clear
    ComboBoxForeignModelNum.AddItem ("1 Foreign Model")
    ComboBoxForeignModelNum.AddItem ("2 Foreign Models")
    ComboBoxForeignModelNum.AddItem ("4 Foreign Models")
    ComboBoxForeignModelNum.AddItem ("5 Foreign Models")
    ComboBoxForeignModelNum.AddItem ("6 Foreign Models")
    ComboBoxForeignModelNum.AddItem ("7 Foreign Models")
    ComboBoxForeignModelNum.AddItem ("8 Foreign Models")
    ComboBoxForeignModelNum.AddItem ("9 Foreign Models")
    ComboBoxForeignModelNum.AddItem ("10 Foreign Models")
    ComboBoxForeignModelNum.Text = "1 Foreign Model"
    
    ComboBoxEQModelNum.Clear
    ComboBoxEQModelNum.AddItem ("1 EQ Model")
    ComboBoxEQModelNum.AddItem ("2 EQ Models")
    ComboBoxEQModelNum.AddItem ("3 EQ Models")
    ComboBoxEQModelNum.AddItem ("4 EQ Models")
    ComboBoxEQModelNum.AddItem ("5 EQ Models")
    ComboBoxEQModelNum.AddItem ("6 EQ Models")
    ComboBoxEQModelNum.AddItem ("7 EQ Models")
    ComboBoxEQModelNum.AddItem ("8 EQ Models")
    ComboBoxEQModelNum.AddItem ("9 EQ Models")
    ComboBoxEQModelNum.AddItem ("10 EQ Models")
    ComboBoxEQModelNum.Text = "1 EQ Model"
    
    hasBeenInitialised = True

CleanUp:
    ActiveSheet.Calculate
End Sub


'Resizing the correlation matrix after changing the Factor number for any model
Private Sub Worksheet_Change(ByVal Target As Range)
    On Error GoTo CleanUp
    Application.EnableEvents = False
    Application.ScreenUpdating = False
    
    Dim asn$: asn = ActiveSheet.Name
    Dim rngForeignModelList As Range: Set rngForeignModelList = Range("NX_" & asn & "_M_ForeignModelList")
    Dim numForeignModels%: numForeignModels = rngForeignModelList.Rows.count
    Dim rngForeignModelFactorNumList As Range: Set rngForeignModelFactorNumList = Range(rngForeignModelList.Cells(1, 2), rngForeignModelList.Cells(numForeignModels, 2))
    Dim rngFXModelList As Range: Set rngFXModelList = Range("NX_" & asn & "_M_FXModelList")
    Dim numFXModels%: numFXModels = rngFXModelList.Rows.count
    Dim rngFXModelFactorNumList As Range: Set rngFXModelFactorNumList = Range(rngFXModelList(1, 2), rngFXModelList(numFXModels, 2))
    Dim rngEQModelList As Range: Set rngEQModelList = Range("NX_" & asn & "_M_EQModelList")
    Dim numEQModels%: numEQModels = rngEQModelList.Rows.count
    Dim rngEQModelFactorNumList As Range: Set rngEQModelFactorNumList = Range(rngEQModelList.Cells(1, 3), rngEQModelList.Cells(numEQModels, 3))
    Dim rngIRModelFactorNum As Range: Set rngIRModelFactorNum = Range("NX_" & asn & "_M_IRMOdelFactorNum")
    
    If Intersect(Target, rngForeignModelFactorNumList) Is Nothing And Intersect(Target, rngFXModelFactorNumList) Is Nothing And _
        Intersect(Target, rngEQModelFactorNumList) Is Nothing And Intersect(Target, rngIRModelFactorNum) Is Nothing Then
        GoTo CleanUp
    End If
    
    Dim rngCorrAnchor As Range: Set rngCorrAnchor = Range("NX_" & asn & "_M_CorrAnchor")
    rngCorrAnchor.CurrentRegion.Clear
    Dim IRModelFactorNum%: IRModelFactorNum = rngIRModelFactorNum.Value
    Dim FXModelFactorNum%, ForeignModelFactorNum%, EQModelFactorNum%
    Dim i%, j%
    Dim count%: count = 0
    For i = 1 To IRModelFactorNum
        count = count + 1
        rngCorrAnchor.Offset(0, count) = "DomesticModelFactor" & CStr(i)
        rngCorrAnchor.Offset(count, 0) = "DomesticModelFactor" & CStr(i)
    Next i
    
    For i = 1 To numFXModels
        FXModelFactorNum = rngFXModelList.Cells(i, 2).Value
        For j = 1 To FXModelFactorNum
            count = count + 1
            rngCorrAnchor.Offset(0, count) = "FX" & CStr(i) & "ModelFactor" & CStr(j)
            rngCorrAnchor.Offset(count, 0) = "FX" & CStr(i) & "ModelFactor" & CStr(j)
        Next j
    Next i
    
    For i = 1 To numForeignModels
        ForeignModelFactorNum = rngForeignModelList.Cells(i, 2).Value
        For j = 1 To ForeignModelFactorNum
            count = count + 1
            rngCorrAnchor.Offset(0, count) = "Foreign" & CStr(i) & "ModelFactor" & CStr(j)
            rngCorrAnchor.Offset(count, 0) = "Foreign" & CStr(i) & "ModelFactor" & CStr(j)
        Next j
    Next i
    
    For i = 1 To numEQModels
        EQModelFactorNum = rngEQModelList.Cells(i, 3).Value
        For j = 1 To EQModelFactorNum
            count = count + 1
            rngCorrAnchor.Offset(0, count) = "=" & rngEQModelList.Cells(i, 1).Address & "&" & """" & "Factor" & CStr(j) & """"
            rngCorrAnchor.Offset(count, 0) = "=" & rngEQModelList.Cells(i, 1).Address & "&" & """" & "Factor" & CStr(j) & """"
        Next j
    Next i
    
    For i = 1 To count
        rngCorrAnchor.Offset(i, i) = 1
        For j = i + 1 To count
            rngCorrAnchor.Offset(i, j) = 0
        Next j
    Next i
    
    rngCorrAnchor.Formula = "=nxlibmatrix(" & Range(rngCorrAnchor.Offset(0, 1), rngCorrAnchor.Offset(0, count)).Address & "," _
                                            & Range(rngCorrAnchor.Offset(1, 0), rngCorrAnchor.Offset(count, 0)).Address & "," _
                                            & Range(rngCorrAnchor.Offset(1, 1), rngCorrAnchor.Offset(count, count)).Address & "," _
                                            & """" & "CC_EQB_Corr.Data" & """" & ")"
    
    
    Call formatColorAndBorder(rngCorrAnchor)
    Call formatColorAndBorder(Range(rngCorrAnchor.Offset(1, 1), rngCorrAnchor.Offset(count, count)))
    Call formatHeader(Range(rngCorrAnchor.Offset(0, 1), rngCorrAnchor.Offset(0, count)))
    Call formatHeader(Range(rngCorrAnchor.Offset(1, 0), rngCorrAnchor.Offset(count, 0)))
       
    Range(rngCorrAnchor.Offset(1, 1), rngCorrAnchor.Offset(count, count)).Select
    
CleanUp:
    Application.EnableEvents = True
    Application.ScreenUpdating = True
End Sub





''' Formatting Module

Private Sub addConditionalFormat(tempRng As Range)
    tempRng.Select
    Selection.FormatConditions.Delete
    Selection.FormatConditions.Add Type:=xlCellValue, Operator:=xlEqual, _
        Formula1:="=""<LINK>"""
    Selection.FormatConditions(1).Interior.ColorIndex = 3
        
    Cells(1, 1).Select
End Sub

Private Sub formatHeader(tempRng As Range)
    tempRng.Select
    With Selection.Interior
        .Pattern = xlSolid
        .PatternColorIndex = xlAutomatic
        .Color = 10040115
    End With
    With Selection.Font
        .ColorIndex = 2
        .Name = "Calibri"
        .Size = 11
    End With
    Cells(1, 1).Select
End Sub

Private Sub formatColorAndBorder(tempRng As Range)
    tempRng.Select
    Selection.HorizontalAlignment = xlCenter
    Selection.Borders(xlDiagonalDown).LineStyle = xlNone
    Selection.Borders(xlDiagonalUp).LineStyle = xlNone
    With Selection.Borders(xlEdgeLeft)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlEdgeTop)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlEdgeRight)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .Weight = xlThin
    End With
    Selection.Borders(xlInsideVertical).LineStyle = xlNone
    Selection.Borders(xlInsideHorizontal).LineStyle = xlNone
    With Selection.Interior
        .Pattern = xlSolid
        .PatternColorIndex = xlAutomatic
        .ColorIndex = 2
    End With
    With Selection.Font
        .Name = "Calibri"
        .Size = 11
    End With
    Cells(1, 1).Select

End Sub

Private Sub addDataValidation(tempRng As Range)
    tempRng.Select
    With Selection.Validation
        .Delete
        .Add Type:=xlValidateWholeNumber, AlertStyle:=xlValidAlertStop, _
        Operator:=xlGreaterEqual, Formula1:="1"
        .IgnoreBlank = True
        .InCellDropdown = True
        .InputTitle = ""
        .ErrorTitle = "Incorrect Input"
        .InputMessage = ""
        .ErrorMessage = "Please input an integer"
        .ShowInput = True
        .ShowError = True
    End With
    Cells(1, 1).Select
End Sub

Attribute VB_Name = "Sheet14"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "ComboBoxForeignModelNum, 1, 0, MSForms, ComboBox"
Attribute VB_Control = "ResizeButton, 2, 1, MSForms, CommandButton"
Attribute VB_Control = "CreateButton, 3, 2, MSForms, CommandButton"
Attribute VB_Control = "ComboBoxCRModelNum, 4, 3, MSForms, ComboBox"
Option Explicit
Private hasBeenInitialised As Boolean



Private Sub CreateButton_Click()
    On Error GoTo errorHandler
    Application.EnableEvents = False
    Dim asn$: asn = ActiveSheet.Name
    Dim rngForeignModelList As Range: Set rngForeignModelList = Range("NX_" & asn & "_M_ForeignModelList")
    Dim numForeignModels%: numForeignModels = rngForeignModelList.Rows.count
    Dim rngForeignModelListAnchor As Range: Set rngForeignModelListAnchor = rngForeignModelList.Cells(1, 1).Offset(-1, 0)
    Dim rngForeignModels As Range: Set rngForeignModels = Range("NX_" & asn & "_M_ForeignModels")
    rngForeignModels.Formula = "=nxlibdata(" & rngForeignModelListAnchor.Address & "," & Range(rngForeignModelListAnchor.Offset(1, 0), rngForeignModelListAnchor.Offset(numForeignModels, 0)).Address & "," & """" & "CC_CRB_ForeignModel.Data" & """" & ")"
    Dim rngFXModelList As Range: Set rngFXModelList = Range("NX_" & asn & "_M_FXModelList")
    Dim numFXModels%: numFXModels = rngFXModelList.Rows.count
    Dim rngFXModelListAnchor As Range: Set rngFXModelListAnchor = rngFXModelList.Cells(1, 1).Offset(-1, 0)
    Dim rngFXModels As Range: Set rngFXModels = Range("NX_" & asn & "_M_FXModels")
    rngFXModels.Formula = "=nxlibdata(" & rngFXModelListAnchor.Address & "," & Range(rngFXModelListAnchor.Offset(1, 0), rngFXModelListAnchor.Offset(numFXModels, 0)).Address & "," & """" & "CC_CRB_FXModel.Data" & """" & ")"
    Dim rngCRModelList As Range: Set rngCRModelList = Range("NX_" & asn & "_M_CRModelList")
    Dim numCRModels%: numCRModels = rngCRModelList.Rows.count
    Dim rngCRModelListAnchor As Range: Set rngCRModelListAnchor = rngCRModelList.Cells(1, 1).Offset(-1, 0)
    Dim rngCRModels As Range: Set rngCRModels = Range("NX_" & asn & "_M_CRModels")
    rngCRModels.Formula = "=nxlibdata(" & Range(rngCRModelListAnchor, rngCRModelListAnchor.Offset(0, 1)).Address & "," & Range(rngCRModelListAnchor.Offset(1, 0), rngCRModelListAnchor.Offset(numCRModels, 1)).Address & "," & """" & "CC_CRB_CRModel.Data" & """" & ")"
    ActiveSheet.Calculate
CleanUp:
    Application.EnableEvents = True
    Exit Sub
errorHandler:
    Call VBA.MsgBox("Error in creating model table data", vbCritical + vbOKOnly, "Error")
    GoTo CleanUp
    End Sub

Private Sub ResizeButton_Click()
    On Error GoTo CleanUp
    Application.ScreenUpdating = False
    Dim temp1 As Variant: temp1 = Split(ComboBoxForeignModelNum.Text, " ")
    Dim temp2 As Variant: temp2 = Split(ComboBoxCRModelNum.Text, " ")
    If Not IsNumeric(temp1(0)) Or Not IsNumeric(temp2(0)) Then
        MsgBox "Fatal error when resizing ComboBox"
        GoTo CleanUp
    Else
        Resize CInt(temp1(0)), CInt(temp2(0))
    End If
    On Error GoTo 0
CleanUp:
    Application.ScreenUpdating = True
    ActiveSheet.Calculate
End Sub


Public Sub Resize(numForeignModel As Integer, numCRModel As Integer)
    On Error GoTo errorHandler
    Application.EnableEvents = False
    Application.ScreenUpdating = False
    
    Dim numFXModel%: numFXModel = numForeignModel
    Dim asn$: asn = ActiveSheet.Name
    Dim rngForeignModels As Range: Set rngForeignModels = Range("NX_" & asn & "_M_ForeignModels")
    Dim rngForeignModelList As Range: Set rngForeignModelList = Range("NX_" & asn & "_M_ForeignModelList")
    Dim rngFXModels As Range: Set rngFXModels = Range("NX_" & asn & "_M_FXModels")
    Dim rngFXModelList As Range: Set rngFXModelList = Range("NX_" & asn & "_M_FXModelList")
    Dim rngCRModels As Range: Set rngCRModels = Range("NX_" & asn & "_M_CRModels")
    Dim rngCRModelList As Range: Set rngCRModelList = Range("NX_" & asn & "_M_CRModelList")
        
    Dim rngIRModelFactorNum As Range: Set rngIRModelFactorNum = Range("NX_" & asn & "_M_IRModelFactorNum")
    Dim rngCorrAnchor As Range: Set rngCorrAnchor = Range("NX_" & asn & "_M_CorrAnchor")
    Dim rngForeignModelListAnchor As Range: Set rngForeignModelListAnchor = rngForeignModelList.Cells(1, 1).Offset(-1, 0)
    Dim rngFXModelListAnchor As Range: Set rngFXModelListAnchor = rngFXModelList.Cells(1, 1).Offset(-1, 0)
    Dim rngCRModelListAnchor As Range: Set rngCRModelListAnchor = rngCRModelList.Cells(1, 1).Offset(-1, 0)
    
    rngForeignModelList.Clear
    rngFXModelList.Clear
    rngCRModelList.Clear
    rngCorrAnchor.CurrentRegion.Clear
    rngForeignModels = "<LINK>"
    rngFXModels = "<LINK>"
    rngCRModels = "<LINK>"
    rngIRModelFactorNum.Value = 1
    
    'Resize the Foreign Model table
    Dim i%, j%
    For i = 1 To numForeignModel
        rngForeignModelListAnchor.Offset(i, 0) = "<LINK>"
        rngForeignModelListAnchor.Offset(i, 1) = 1
    Next i
    Range(rngForeignModelListAnchor.Offset(1, 0), rngForeignModelListAnchor.Offset(numForeignModel, 1)).Select
    ActiveWorkbook.Names.Add Name:="NX_" & asn & "_M_ForeignModelList", RefersTo:=Selection
    Set rngForeignModelList = Range("NX_" & asn & "_M_ForeignModelList")
    Call formatColorAndBorder(rngForeignModelList)
    Call addConditionalFormat(Range(rngForeignModelListAnchor.Offset(1, 0), rngForeignModelListAnchor.Offset(numForeignModel, 0)))
    Call addDataValidation(Range(rngForeignModelListAnchor.Offset(1, 1), rngForeignModelListAnchor.Offset(numForeignModel, 1)))
        
    'Resize the FX Model Table
    For i = 1 To numFXModel
        rngFXModelListAnchor.Offset(i, 0) = "<LINK>"
        rngFXModelListAnchor.Offset(i, 1) = 1
    Next i
    Range(rngFXModelListAnchor.Offset(1, 0), rngFXModelListAnchor.Offset(numFXModel, 1)).Select
    ActiveWorkbook.Names.Add Name:="NX_" & asn & "_M_FXModelList", RefersTo:=Selection
    Set rngFXModelList = Range("NX_" & asn & "_M_FXModelList")
    Call formatColorAndBorder(rngFXModelList)
    Call addConditionalFormat(Range(rngFXModelListAnchor.Offset(1, 0), rngFXModelListAnchor.Offset(numFXModel, 0)))
    Call addDataValidation(Range(rngFXModelListAnchor.Offset(1, 1), rngFXModelListAnchor.Offset(numFXModel, 1)))
          
    'Resize the CR Model Table
    For i = 1 To numCRModel
        rngCRModelListAnchor.Offset(i, 0) = "<LINK>"
        rngCRModelListAnchor.Offset(i, 1) = ""
        rngCRModelListAnchor.Offset(i, 2) = 1
    Next i
    Range(rngCRModelListAnchor.Offset(1, 0), rngCRModelListAnchor.Offset(numCRModel, 2)).Select
    ActiveWorkbook.Names.Add Name:="NX_" & asn & "_M_CRModelList", RefersTo:=Selection
    Set rngCRModelList = Range("NX_" & asn & "_M_CRModelList")
    Call formatColorAndBorder(rngCRModelList)
    Call addConditionalFormat(Range(rngCRModelListAnchor.Offset(1, 0), rngCRModelListAnchor.Offset(numCRModel, 0)))
    Call addDataValidation(Range(rngCRModelListAnchor.Offset(1, 2), rngCRModelListAnchor.Offset(numCRModel, 2)))
          
          
    rngCorrAnchor.Offset(0, 1) = "DomesticModelFactor1"
    rngCorrAnchor.Offset(1, 0) = "DomesticModelFactor1"
    
    For i = 1 To numFXModel
        rngCorrAnchor.Offset(0, i + 1) = "Foreign" & CStr(i) & "ModelFactor1"
        rngCorrAnchor.Offset(i + 1, 0) = "Foreign" & CStr(i) & "ModelFactor1"
    Next i
    
    For i = 1 To numForeignModel
        rngCorrAnchor.Offset(0, i + numFXModel + 1) = "FX" & CStr(i) & "ModelFactor1"
        rngCorrAnchor.Offset(i + numFXModel + 1, 0) = "FX" & CStr(i) & "ModelFactor1"
    Next i
    
    For i = 1 To numCRModel
        rngCorrAnchor.Offset(0, i + numFXModel + numForeignModel + 1) = "CR" & CStr(i) & "Factor1"
        rngCorrAnchor.Offset(i + numFXModel + numForeignModel + 1, 0) = "CR" & CStr(i) & "Factor1"
    Next i
    
    For i = 1 To numFXModel + numForeignModel + numCRModel + 1
        rngCorrAnchor.Offset(i, i) = 1
        For j = i + 1 To numFXModel + numForeignModel + numCRModel + 1
            rngCorrAnchor.Offset(i, j) = 0
        Next j
    Next i
    
    rngCorrAnchor.Formula = "=nxlibmatrix(" & Range(rngCorrAnchor.Offset(0, 1), rngCorrAnchor.Offset(0, numFXModel + numForeignModel + numCRModel + 1)).Address & "," _
                                            & Range(rngCorrAnchor.Offset(1, 0), rngCorrAnchor.Offset(numFXModel + numForeignModel + numCRModel + 1, 0)).Address & "," _
                                            & Range(rngCorrAnchor.Offset(1, 1), rngCorrAnchor.Offset(numFXModel + numForeignModel + numCRModel + 1, numFXModel + numForeignModel + numCRModel + 1)).Address & "," _
                                            & """" & "CC_CRB_Corr.Data" & """" & ")"
                                            
    Call formatColorAndBorder(rngCorrAnchor)
    Call formatColorAndBorder(Range(rngCorrAnchor.Offset(1, 1), rngCorrAnchor.Offset(numFXModel + numForeignModel + numCRModel + 1, numFXModel + numForeignModel + numCRModel + 1)))
    Call formatHeader(Range(rngCorrAnchor.Offset(0, 1), rngCorrAnchor.Offset(0, numFXModel + numForeignModel + numCRModel + 1)))
    Call formatHeader(Range(rngCorrAnchor.Offset(1, 0), rngCorrAnchor.Offset(numFXModel + numForeignModel + numCRModel + 1, 0)))

CleanUp:
    Application.EnableEvents = True
    Application.ScreenUpdating = True
    Set rngForeignModels = Nothing
    Set rngForeignModelList = Nothing
    Set rngForeignModelListAnchor = Nothing
    Set rngFXModels = Nothing
    Set rngFXModelList = Nothing
    Set rngFXModelListAnchor = Nothing
    Set rngCRModels = Nothing
    Set rngCRModelList = Nothing
    Set rngCRModelListAnchor = Nothing
    Set rngCorrAnchor = Nothing
    Exit Sub
   
errorHandler:
    Call VBA.MsgBox("Error in resizing the model", vbCritical + vbOKOnly, "Error")
    GoTo CleanUp
    End Sub

Private Sub Worksheet_Activate()

    On Error GoTo CleanUp
    ComboBoxForeignModelNum.Clear
    ComboBoxForeignModelNum.AddItem ("1 Foreign Model")
    ComboBoxForeignModelNum.AddItem ("2 Foreign Models")
    ComboBoxForeignModelNum.AddItem ("4 Foreign Models")
    ComboBoxForeignModelNum.AddItem ("5 Foreign Models")
    ComboBoxForeignModelNum.AddItem ("6 Foreign Models")
    ComboBoxForeignModelNum.AddItem ("7 Foreign Models")
    ComboBoxForeignModelNum.AddItem ("8 Foreign Models")
    ComboBoxForeignModelNum.AddItem ("9 Foreign Models")
    ComboBoxForeignModelNum.AddItem ("10 Foreign Models")
    ComboBoxForeignModelNum.Text = "1 Foreign Model"
    
    ComboBoxCRModelNum.Clear
    ComboBoxCRModelNum.AddItem ("1 CR Model")
    ComboBoxCRModelNum.AddItem ("2 CR Models")
    ComboBoxCRModelNum.AddItem ("3 CR Models")
    ComboBoxCRModelNum.AddItem ("4 CR Models")
    ComboBoxCRModelNum.AddItem ("5 CR Models")
    ComboBoxCRModelNum.AddItem ("6 CR Models")
    ComboBoxCRModelNum.AddItem ("7 CR Models")
    ComboBoxCRModelNum.AddItem ("8 CR Models")
    ComboBoxCRModelNum.AddItem ("9 CR Models")
    ComboBoxCRModelNum.AddItem ("10 CR Models")
    ComboBoxCRModelNum.Text = "1 CR Model"
    
    hasBeenInitialised = True

CleanUp:
    ActiveSheet.Calculate
End Sub


'Resizing the correlation matrix after changing the Factor number for any model
Private Sub Worksheet_Change(ByVal Target As Range)
    On Error GoTo CleanUp
    Application.EnableEvents = False
    Application.ScreenUpdating = False
    
    Dim asn$: asn = ActiveSheet.Name
    Dim rngForeignModelList As Range: Set rngForeignModelList = Range("NX_" & asn & "_M_ForeignModelList")
    Dim numForeignModels%: numForeignModels = rngForeignModelList.Rows.count
    Dim rngForeignModelFactorNumList As Range: Set rngForeignModelFactorNumList = Range(rngForeignModelList.Cells(1, 2), rngForeignModelList.Cells(numForeignModels, 2))
    Dim rngFXModelList As Range: Set rngFXModelList = Range("NX_" & asn & "_M_FXModelList")
    Dim numFXModels%: numFXModels = rngFXModelList.Rows.count
    Dim rngFXModelFactorNumList As Range: Set rngFXModelFactorNumList = Range(rngFXModelList(1, 2), rngFXModelList(numFXModels, 2))
    Dim rngCRModelList As Range: Set rngCRModelList = Range("NX_" & asn & "_M_CRModelList")
    Dim numCRModels%: numCRModels = rngCRModelList.Rows.count
    Dim rngCRModelFactorNumList As Range: Set rngCRModelFactorNumList = Range(rngCRModelList.Cells(1, 3), rngCRModelList.Cells(numCRModels, 3))
    Dim rngIRModelFactorNum As Range: Set rngIRModelFactorNum = Range("NX_" & asn & "_M_IRMOdelFactorNum")
    
    If Intersect(Target, rngForeignModelFactorNumList) Is Nothing And Intersect(Target, rngFXModelFactorNumList) Is Nothing And _
        Intersect(Target, rngCRModelFactorNumList) Is Nothing And Intersect(Target, rngIRModelFactorNum) Is Nothing Then
        GoTo CleanUp
    End If
    
    Dim rngCorrAnchor As Range: Set rngCorrAnchor = Range("NX_" & asn & "_M_CorrAnchor")
    rngCorrAnchor.CurrentRegion.Clear
    Dim IRModelFactorNum%: IRModelFactorNum = rngIRModelFactorNum.Value
    Dim FXModelFactorNum%, ForeignModelFactorNum%, CRModelFactorNum%
    Dim i%, j%
    Dim count%: count = 0
    For i = 1 To IRModelFactorNum
        count = count + 1
        rngCorrAnchor.Offset(0, count) = "DomesticModelFactor" & CStr(i)
        rngCorrAnchor.Offset(count, 0) = "DomesticModelFactor" & CStr(i)
    Next i
    
    For i = 1 To numFXModels
        FXModelFactorNum = rngFXModelList.Cells(i, 2).Value
        For j = 1 To FXModelFactorNum
            count = count + 1
            rngCorrAnchor.Offset(0, count) = "FX" & CStr(i) & "ModelFactor" & CStr(j)
            rngCorrAnchor.Offset(count, 0) = "FX" & CStr(i) & "ModelFactor" & CStr(j)
        Next j
    Next i
    
    For i = 1 To numForeignModels
        ForeignModelFactorNum = rngForeignModelList.Cells(i, 2).Value
        For j = 1 To ForeignModelFactorNum
            count = count + 1
            rngCorrAnchor.Offset(0, count) = "Foreign" & CStr(i) & "ModelFactor" & CStr(j)
            rngCorrAnchor.Offset(count, 0) = "Foreign" & CStr(i) & "ModelFactor" & CStr(j)
        Next j
    Next i
    
    For i = 1 To numCRModels
        CRModelFactorNum = rngCRModelList.Cells(i, 3).Value
        For j = 1 To CRModelFactorNum
            count = count + 1
            rngCorrAnchor.Offset(0, count) = "CR" & CStr(i) & "Factor" & CStr(j)
            rngCorrAnchor.Offset(count, 0) = "CR" & CStr(i) & "Factor" & CStr(j)
        Next j
    Next i
    
    For i = 1 To count
        rngCorrAnchor.Offset(i, i) = 1
        For j = i + 1 To count
            rngCorrAnchor.Offset(i, j) = 0
        Next j
    Next i
    
    rngCorrAnchor.Formula = "=nxlibmatrix(" & Range(rngCorrAnchor.Offset(0, 1), rngCorrAnchor.Offset(0, count)).Address & "," _
                                            & Range(rngCorrAnchor.Offset(1, 0), rngCorrAnchor.Offset(count, 0)).Address & "," _
                                            & Range(rngCorrAnchor.Offset(1, 1), rngCorrAnchor.Offset(count, count)).Address & "," _
                                            & """" & "CC_CRB_Corr.Data" & """" & ")"
    
    
    Call formatColorAndBorder(rngCorrAnchor)
    Call formatColorAndBorder(Range(rngCorrAnchor.Offset(1, 1), rngCorrAnchor.Offset(count, count)))
    Call formatHeader(Range(rngCorrAnchor.Offset(0, 1), rngCorrAnchor.Offset(0, count)))
    Call formatHeader(Range(rngCorrAnchor.Offset(1, 0), rngCorrAnchor.Offset(count, 0)))
       
    Range(rngCorrAnchor.Offset(1, 1), rngCorrAnchor.Offset(count, count)).Select
    
CleanUp:
    Application.EnableEvents = True
    Application.ScreenUpdating = True
End Sub





''' Formatting Module

Private Sub addConditionalFormat(tempRng As Range)
    tempRng.Select
    Selection.FormatConditions.Delete
    Selection.FormatConditions.Add Type:=xlCellValue, Operator:=xlEqual, _
        Formula1:="=""<LINK>"""
    Selection.FormatConditions(1).Interior.ColorIndex = 3
        
    Cells(1, 1).Select
End Sub

Private Sub formatHeader(tempRng As Range)
    tempRng.Select
    With Selection.Interior
        .Pattern = xlSolid
        .PatternColorIndex = xlAutomatic
        .Color = 10040115
    End With
    With Selection.Font
        .ColorIndex = 2
        .Name = "Calibri"
        .Size = 11
    End With
    Cells(1, 1).Select
End Sub

Private Sub formatColorAndBorder(tempRng As Range)
    tempRng.Select
    Selection.HorizontalAlignment = xlCenter
    Selection.Borders(xlDiagonalDown).LineStyle = xlNone
    Selection.Borders(xlDiagonalUp).LineStyle = xlNone
    With Selection.Borders(xlEdgeLeft)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlEdgeTop)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlEdgeRight)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .Weight = xlThin
    End With
    Selection.Borders(xlInsideVertical).LineStyle = xlNone
    Selection.Borders(xlInsideHorizontal).LineStyle = xlNone
    With Selection.Interior
        .Pattern = xlSolid
        .PatternColorIndex = xlAutomatic
        .ColorIndex = 2
    End With
    With Selection.Font
        .Name = "Calibri"
        .Size = 11
    End With
    Cells(1, 1).Select

End Sub

Private Sub addDataValidation(tempRng As Range)
    tempRng.Select
    With Selection.Validation
        .Delete
        .Add Type:=xlValidateWholeNumber, AlertStyle:=xlValidAlertStop, _
        Operator:=xlGreaterEqual, Formula1:="1"
        .IgnoreBlank = True
        .InCellDropdown = True
        .InputTitle = ""
        .ErrorTitle = "Incorrect Input"
        .InputMessage = ""
        .ErrorMessage = "Please input an integer"
        .ShowInput = True
        .ShowError = True
    End With
    Cells(1, 1).Select
End Sub

Attribute VB_Name = "Sheet15"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "ComboBoxForeignModelNum, 1, 0, MSForms, ComboBox"
Attribute VB_Control = "ResizeButton, 2, 1, MSForms, CommandButton"
Attribute VB_Control = "CreateButton, 3, 2, MSForms, CommandButton"
Attribute VB_Control = "ComboBoxCRModelNum, 4, 3, MSForms, ComboBox"
Attribute VB_Control = "ComboBoxEQModelNum, 5, 4, MSForms, ComboBox"
Option Explicit
Private hasBeenInitialised As Boolean



Private Sub CreateButton_Click()
    On Error GoTo errorHandler
    Application.EnableEvents = False
    Dim asn$: asn = ActiveSheet.Name
    Dim rngForeignModelList As Range: Set rngForeignModelList = Range("NX_" & asn & "_M_ForeignModelList")
    Dim numForeignModels%: numForeignModels = rngForeignModelList.Rows.count
    Dim rngForeignModelListAnchor As Range: Set rngForeignModelListAnchor = rngForeignModelList.Cells(1, 1).Offset(-1, 0)
    Dim rngForeignModels As Range: Set rngForeignModels = Range("NX_" & asn & "_M_ForeignModels")
    rngForeignModels.Formula = "=nxlibdata(" & rngForeignModelListAnchor.Address & "," & Range(rngForeignModelListAnchor.Offset(1, 0), rngForeignModelListAnchor.Offset(numForeignModels, 0)).Address & "," & """" & "CC_CRB_EQB_ForeignModel.Data" & """" & ")"
    Dim rngFXModelList As Range: Set rngFXModelList = Range("NX_" & asn & "_M_FXModelList")
    Dim numFXModels%: numFXModels = rngFXModelList.Rows.count
    Dim rngFXModelListAnchor As Range: Set rngFXModelListAnchor = rngFXModelList.Cells(1, 1).Offset(-1, 0)
    Dim rngFXModels As Range: Set rngFXModels = Range("NX_" & asn & "_M_FXModels")
    rngFXModels.Formula = "=nxlibdata(" & rngFXModelListAnchor.Address & "," & Range(rngFXModelListAnchor.Offset(1, 0), rngFXModelListAnchor.Offset(numFXModels, 0)).Address & "," & """" & "CC_CRB_EQB_FXModel.Data" & """" & ")"
    Dim rngCRModelList As Range: Set rngCRModelList = Range("NX_" & asn & "_M_CRModelList")
    Dim numCRModels%: numCRModels = rngCRModelList.Rows.count
    Dim rngCRModelListAnchor As Range: Set rngCRModelListAnchor = rngCRModelList.Cells(1, 1).Offset(-1, 0)
    Dim rngCRModels As Range: Set rngCRModels = Range("NX_" & asn & "_M_CRModels")
    rngCRModels.Formula = "=nxlibdata(" & Range(rngCRModelListAnchor, rngCRModelListAnchor.Offset(0, 1)).Address & "," & Range(rngCRModelListAnchor.Offset(1, 0), rngCRModelListAnchor.Offset(numCRModels, 1)).Address & "," & """" & "CC_CRB_EQB_CRModel.Data" & """" & ")"
    Dim rngEQModelList As Range: Set rngEQModelList = Range("NX_" & asn & "_M_EQModelList")
    Dim numEQModels%: numEQModels = rngEQModelList.Rows.count
    Dim rngEQModelListAnchor As Range: Set rngEQModelListAnchor = rngEQModelList.Cells(1, 1).Offset(-1, 0)
    Dim rngEQModels As Range: Set rngEQModels = Range("NX_" & asn & "_M_EQModels")
    rngEQModels.Formula = "=nxlibdata(" & Range(rngEQModelListAnchor, rngEQModelListAnchor.Offset(0, 1)).Address & "," & Range(rngEQModelListAnchor.Offset(1, 0), rngEQModelListAnchor.Offset(numEQModels, 1)).Address & "," & """" & "CC_CRB_EQB_EQModel.Data" & """" & ")"
    ActiveSheet.Calculate
    
CleanUp:
    Application.EnableEvents = True
    Exit Sub
errorHandler:
    Call VBA.MsgBox("Error in creating model table data", vbCritical + vbOKOnly, "Error")
    GoTo CleanUp
    End Sub

Private Sub ResizeButton_Click()
    On Error GoTo CleanUp
    Application.ScreenUpdating = False
    Dim temp1 As Variant: temp1 = Split(ComboBoxForeignModelNum.Text, " ")
    Dim temp2 As Variant: temp2 = Split(ComboBoxCRModelNum.Text, " ")
    Dim temp3 As Variant: temp3 = Split(ComboBoxEQModelNum.Text, " ")
    If Not IsNumeric(temp1(0)) Or Not IsNumeric(temp2(0)) Or Not IsNumeric(temp3(0)) Then
        MsgBox "Fatal error when resizing ComboBox"
        GoTo CleanUp
    Else
        Resize CInt(temp1(0)), CInt(temp2(0)), CInt(temp3(0))
    End If
    On Error GoTo 0
    
CleanUp:
    Application.ScreenUpdating = True
    ActiveSheet.Calculate
    
End Sub


Public Sub Resize(numForeignModel As Integer, numCRModel As Integer, numEQModel As Integer)
    On Error GoTo errorHandler
    Application.EnableEvents = False
    Application.ScreenUpdating = False
    
    Dim numFXModel%: numFXModel = numForeignModel
    Dim asn$: asn = ActiveSheet.Name
    Dim rngForeignModels As Range: Set rngForeignModels = Range("NX_" & asn & "_M_ForeignModels")
    Dim rngForeignModelList As Range: Set rngForeignModelList = Range("NX_" & asn & "_M_ForeignModelList")
    Dim rngFXModels As Range: Set rngFXModels = Range("NX_" & asn & "_M_FXModels")
    Dim rngFXModelList As Range: Set rngFXModelList = Range("NX_" & asn & "_M_FXModelList")
    Dim rngCRModels As Range: Set rngCRModels = Range("NX_" & asn & "_M_CRModels")
    Dim rngCRModelList As Range: Set rngCRModelList = Range("NX_" & asn & "_M_CRModelList")
    Dim rngEQModels As Range: Set rngEQModels = Range("NX_" & asn & "_M_EQModels")
    Dim rngEQModelList As Range: Set rngEQModelList = Range("NX_" & asn & "_M_EQModelList")
           
    Dim rngIRModelFactorNum As Range: Set rngIRModelFactorNum = Range("NX_" & asn & "_M_IRModelFactorNum")
    Dim rngCorrAnchor As Range: Set rngCorrAnchor = Range("NX_" & asn & "_M_CorrAnchor")
    Dim rngForeignModelListAnchor As Range: Set rngForeignModelListAnchor = rngForeignModelList.Cells(1, 1).Offset(-1, 0)
    Dim rngFXModelListAnchor As Range: Set rngFXModelListAnchor = rngFXModelList.Cells(1, 1).Offset(-1, 0)
    Dim rngCRModelListAnchor As Range: Set rngCRModelListAnchor = rngCRModelList.Cells(1, 1).Offset(-1, 0)
    Dim rngEQModelListAnchor As Range: Set rngEQModelListAnchor = rngEQModelList.Cells(1, 1).Offset(-1, 0)
    
    rngForeignModelList.Clear
    rngFXModelList.Clear
    rngCRModelList.Clear
    rngEQModelList.Clear
    rngCorrAnchor.CurrentRegion.Clear
    rngForeignModels = "<LINK>"
    rngFXModels = "<LINK>"
    rngCRModels = "<LINK>"
    rngEQModels = "<LINK>"
    rngIRModelFactorNum.Value = 1
    
    'Resize the Foreign Model table
    Dim i%, j%
    For i = 1 To numForeignModel
        rngForeignModelListAnchor.Offset(i, 0) = "<LINK>"
        rngForeignModelListAnchor.Offset(i, 1) = 1
    Next i
    Range(rngForeignModelListAnchor.Offset(1, 0), rngForeignModelListAnchor.Offset(numForeignModel, 1)).Select
    ActiveWorkbook.Names.Add Name:="NX_" & asn & "_M_ForeignModelList", RefersTo:=Selection
    Set rngForeignModelList = Range("NX_" & asn & "_M_ForeignModelList")
    Call formatColorAndBorder(rngForeignModelList)
    Call addConditionalFormat(Range(rngForeignModelListAnchor.Offset(1, 0), rngForeignModelListAnchor.Offset(numForeignModel, 0)))
    Call addDataValidation(Range(rngForeignModelListAnchor.Offset(1, 1), rngForeignModelListAnchor.Offset(numForeignModel, 1)))
        
    'Resize the FX Model Table
    For i = 1 To numFXModel
        rngFXModelListAnchor.Offset(i, 0) = "<LINK>"
        rngFXModelListAnchor.Offset(i, 1) = 1
    Next i
    Range(rngFXModelListAnchor.Offset(1, 0), rngFXModelListAnchor.Offset(numFXModel, 1)).Select
    ActiveWorkbook.Names.Add Name:="NX_" & asn & "_M_FXModelList", RefersTo:=Selection
    Set rngFXModelList = Range("NX_" & asn & "_M_FXModelList")
    Call formatColorAndBorder(rngFXModelList)
    Call addConditionalFormat(Range(rngFXModelListAnchor.Offset(1, 0), rngFXModelListAnchor.Offset(numFXModel, 0)))
    Call addDataValidation(Range(rngFXModelListAnchor.Offset(1, 1), rngFXModelListAnchor.Offset(numFXModel, 1)))
          
    'Resize the CR Model Table
    For i = 1 To numCRModel
        rngCRModelListAnchor.Offset(i, 0) = "<LINK>"
        rngCRModelListAnchor.Offset(i, 1) = ""
        rngCRModelListAnchor.Offset(i, 2) = 1
    Next i
    Range(rngCRModelListAnchor.Offset(1, 0), rngCRModelListAnchor.Offset(numCRModel, 2)).Select
    ActiveWorkbook.Names.Add Name:="NX_" & asn & "_M_CRModelList", RefersTo:=Selection
    Set rngCRModelList = Range("NX_" & asn & "_M_CRModelList")
    Call formatColorAndBorder(rngCRModelList)
    Call addConditionalFormat(Range(rngCRModelListAnchor.Offset(1, 0), rngCRModelListAnchor.Offset(numCRModel, 0)))
    Call addDataValidation(Range(rngCRModelListAnchor.Offset(1, 2), rngCRModelListAnchor.Offset(numCRModel, 2)))
          
    'Resize the EQ Model Table
    For i = 1 To numEQModel
        rngEQModelListAnchor.Offset(i, 0) = "<LINK>"
        rngEQModelListAnchor.Offset(i, 1) = "<LINK>"
        rngEQModelListAnchor.Offset(i, 2) = 1
    Next i
    Range(rngEQModelListAnchor.Offset(1, 0), rngEQModelListAnchor.Offset(numEQModel, 2)).Select
    ActiveWorkbook.Names.Add Name:="NX_" & asn & "_M_EQModelList", RefersTo:=Selection
    Set rngEQModelList = Range("NX_" & asn & "_M_EQModelList")
    Call formatColorAndBorder(rngEQModelList)
    Call addConditionalFormat(Range(rngEQModelListAnchor.Offset(1, 0), rngEQModelListAnchor.Offset(numEQModel, 1)))
    Call addDataValidation(Range(rngEQModelListAnchor.Offset(1, 2), rngEQModelListAnchor.Offset(numEQModel, 2)))
          
    rngCorrAnchor.Offset(0, 1) = "DomesticModelFactor1"
    rngCorrAnchor.Offset(1, 0) = "DomesticModelFactor1"
    
    For i = 1 To numFXModel
        rngCorrAnchor.Offset(0, i + 1) = "Foreign" & CStr(i) & "ModelFactor1"
        rngCorrAnchor.Offset(i + 1, 0) = "Foreign" & CStr(i) & "ModelFactor1"
    Next i
    
    For i = 1 To numForeignModel
        rngCorrAnchor.Offset(0, i + numFXModel + 1) = "FX" & CStr(i) & "ModelFactor1"
        rngCorrAnchor.Offset(i + numFXModel + 1, 0) = "FX" & CStr(i) & "ModelFactor1"
    Next i
    
    For i = 1 To numCRModel
        rngCorrAnchor.Offset(0, i + numFXModel + numForeignModel + 1) = "CR" & CStr(i) & "Factor1"
        rngCorrAnchor.Offset(i + numFXModel + numForeignModel + 1, 0) = "CR" & CStr(i) & "Factor1"
    Next i
    
    For i = 1 To numEQModel
        rngCorrAnchor.Offset(0, i + numFXModel + numForeignModel + numCRModel + 1) = "=" & rngEQModelListAnchor.Offset(i, 0).Address & "&" & """" & "Factor1" & """"
        rngCorrAnchor.Offset(i + numFXModel + numForeignModel + numCRModel + 1, 0) = "=" & rngEQModelListAnchor.Offset(i, 0).Address & "&" & """" & "Factor1" & """"
    Next i
    
    For i = 1 To numFXModel + numForeignModel + numCRModel + 1
        rngCorrAnchor.Offset(i, i) = 1
        For j = i + 1 To numFXModel + numForeignModel + numCRModel + 1
            rngCorrAnchor.Offset(i, j) = 0
        Next j
    Next i
    
    rngCorrAnchor.Formula = "=nxlibmatrix(" & Range(rngCorrAnchor.Offset(0, 1), rngCorrAnchor.Offset(0, numFXModel + numForeignModel + numCRModel + numEQModel + 1)).Address & "," _
                                            & Range(rngCorrAnchor.Offset(1, 0), rngCorrAnchor.Offset(numFXModel + numForeignModel + numCRModel + numEQModel + 1, 0)).Address & "," _
                                            & Range(rngCorrAnchor.Offset(1, 1), rngCorrAnchor.Offset(numFXModel + numForeignModel + numCRModel + numEQModel + 1, numFXModel + numForeignModel + numCRModel + numEQModel + 1)).Address & "," _
                                            & """" & "CC_CRB_EQB_Corr.Data" & """" & ")"
                                            
    Call formatColorAndBorder(rngCorrAnchor)
    Call formatColorAndBorder(Range(rngCorrAnchor.Offset(1, 1), rngCorrAnchor.Offset(numFXModel + numForeignModel + numCRModel + numEQModel + 1, numFXModel + numForeignModel + numCRModel + numEQModel + 1)))
    Call formatHeader(Range(rngCorrAnchor.Offset(0, 1), rngCorrAnchor.Offset(0, numFXModel + numForeignModel + numCRModel + numEQModel + 1)))
    Call formatHeader(Range(rngCorrAnchor.Offset(1, 0), rngCorrAnchor.Offset(numFXModel + numForeignModel + numCRModel + numEQModel + 1, 0)))
    
CleanUp:
    Application.EnableEvents = True
    Application.ScreenUpdating = True
    Set rngForeignModels = Nothing
    Set rngForeignModelList = Nothing
    Set rngForeignModelListAnchor = Nothing
    Set rngFXModels = Nothing
    Set rngFXModelList = Nothing
    Set rngFXModelListAnchor = Nothing
    Set rngCRModels = Nothing
    Set rngCRModelList = Nothing
    Set rngCRModelListAnchor = Nothing
    Set rngCorrAnchor = Nothing
    Exit Sub
   
errorHandler:
    Call VBA.MsgBox("Error in resizing the model", vbCritical + vbOKOnly, "Error")
    GoTo CleanUp
    End Sub

Private Sub Worksheet_Activate()

    On Error GoTo CleanUp
    ComboBoxForeignModelNum.Clear
    ComboBoxForeignModelNum.AddItem ("1 Foreign Model")
    ComboBoxForeignModelNum.AddItem ("2 Foreign Models")
    ComboBoxForeignModelNum.AddItem ("4 Foreign Models")
    ComboBoxForeignModelNum.AddItem ("5 Foreign Models")
    ComboBoxForeignModelNum.AddItem ("6 Foreign Models")
    ComboBoxForeignModelNum.AddItem ("7 Foreign Models")
    ComboBoxForeignModelNum.AddItem ("8 Foreign Models")
    ComboBoxForeignModelNum.AddItem ("9 Foreign Models")
    ComboBoxForeignModelNum.AddItem ("10 Foreign Models")
    ComboBoxForeignModelNum.Text = "1 Foreign Model"
    
    ComboBoxCRModelNum.Clear
    ComboBoxCRModelNum.AddItem ("1 CR Model")
    ComboBoxCRModelNum.AddItem ("2 CR Models")
    ComboBoxCRModelNum.AddItem ("3 CR Models")
    ComboBoxCRModelNum.AddItem ("4 CR Models")
    ComboBoxCRModelNum.AddItem ("5 CR Models")
    ComboBoxCRModelNum.AddItem ("6 CR Models")
    ComboBoxCRModelNum.AddItem ("7 CR Models")
    ComboBoxCRModelNum.AddItem ("8 CR Models")
    ComboBoxCRModelNum.AddItem ("9 CR Models")
    ComboBoxCRModelNum.AddItem ("10 CR Models")
    ComboBoxCRModelNum.Text = "1 CR Model"
    
    ComboBoxEQModelNum.Clear
    ComboBoxEQModelNum.AddItem ("1 EQ Model")
    ComboBoxEQModelNum.AddItem ("2 EQ Models")
    ComboBoxEQModelNum.AddItem ("3 EQ Models")
    ComboBoxEQModelNum.AddItem ("4 EQ Models")
    ComboBoxEQModelNum.AddItem ("5 EQ Models")
    ComboBoxEQModelNum.AddItem ("6 EQ Models")
    ComboBoxEQModelNum.AddItem ("7 EQ Models")
    ComboBoxEQModelNum.AddItem ("8 EQ Models")
    ComboBoxEQModelNum.AddItem ("9 EQ Models")
    ComboBoxEQModelNum.AddItem ("10 EQ Models")
    ComboBoxEQModelNum.Text = "1 EQ Model"
    
    
    hasBeenInitialised = True

CleanUp:
    ActiveSheet.Calculate
End Sub


'Resizing the correlation matrix after changing the Factor number for any model
Private Sub Worksheet_Change(ByVal Target As Range)
    On Error GoTo CleanUp
    Application.EnableEvents = False
    Application.ScreenUpdating = False
    
    Dim asn$: asn = ActiveSheet.Name
    Dim rngForeignModelList As Range: Set rngForeignModelList = Range("NX_" & asn & "_M_ForeignModelList")
    Dim numForeignModels%: numForeignModels = rngForeignModelList.Rows.count
    Dim rngForeignModelFactorNumList As Range: Set rngForeignModelFactorNumList = Range(rngForeignModelList.Cells(1, 2), rngForeignModelList.Cells(numForeignModels, 2))
    Dim rngFXModelList As Range: Set rngFXModelList = Range("NX_" & asn & "_M_FXModelList")
    Dim numFXModels%: numFXModels = rngFXModelList.Rows.count
    Dim rngFXModelFactorNumList As Range: Set rngFXModelFactorNumList = Range(rngFXModelList(1, 2), rngFXModelList(numFXModels, 2))
    Dim rngCRModelList As Range: Set rngCRModelList = Range("NX_" & asn & "_M_CRModelList")
    Dim numCRModels%: numCRModels = rngCRModelList.Rows.count
    Dim rngCRModelFactorNumList As Range: Set rngCRModelFactorNumList = Range(rngCRModelList.Cells(1, 3), rngCRModelList.Cells(numCRModels, 3))
    Dim rngEQModelList As Range: Set rngEQModelList = Range("NX_" & asn & "_M_EQModelList")
    Dim numEQModels%: numEQModels = rngEQModelList.Rows.count
    Dim rngEQModelFactorNumList As Range: Set rngEQModelFactorNumList = Range(rngEQModelList.Cells(1, 3), rngEQModelList.Cells(numEQModels, 3))
    Dim rngIRModelFactorNum As Range: Set rngIRModelFactorNum = Range("NX_" & asn & "_M_IRMOdelFactorNum")
    
    If Intersect(Target, rngForeignModelFactorNumList) Is Nothing And Intersect(Target, rngFXModelFactorNumList) Is Nothing And _
        Intersect(Target, rngCRModelFactorNumList) Is Nothing And Intersect(Target, rngEQModelFactorNumList) Is Nothing And _
        Intersect(Target, rngIRModelFactorNum) Is Nothing Then
        GoTo CleanUp
    End If
    
    Dim rngCorrAnchor As Range: Set rngCorrAnchor = Range("NX_" & asn & "_M_CorrAnchor")
    rngCorrAnchor.CurrentRegion.Clear
    Dim IRModelFactorNum%: IRModelFactorNum = rngIRModelFactorNum.Value
    Dim FXModelFactorNum%, ForeignModelFactorNum%, CRModelFactorNum%, EQModelFactorNum%
    Dim i%, j%
    Dim count%: count = 0
    For i = 1 To IRModelFactorNum
        count = count + 1
        rngCorrAnchor.Offset(0, count) = "DomesticModelFactor" & CStr(i)
        rngCorrAnchor.Offset(count, 0) = "DomesticModelFactor" & CStr(i)
    Next i
    
    For i = 1 To numFXModels
        FXModelFactorNum = rngFXModelList.Cells(i, 2).Value
        For j = 1 To FXModelFactorNum
            count = count + 1
            rngCorrAnchor.Offset(0, count) = "FX" & CStr(i) & "ModelFactor" & CStr(j)
            rngCorrAnchor.Offset(count, 0) = "FX" & CStr(i) & "ModelFactor" & CStr(j)
        Next j
    Next i
    
    For i = 1 To numForeignModels
        ForeignModelFactorNum = rngForeignModelList.Cells(i, 2).Value
        For j = 1 To ForeignModelFactorNum
            count = count + 1
            rngCorrAnchor.Offset(0, count) = "Foreign" & CStr(i) & "ModelFactor" & CStr(j)
            rngCorrAnchor.Offset(count, 0) = "Foreign" & CStr(i) & "ModelFactor" & CStr(j)
        Next j
    Next i
    
    For i = 1 To numCRModels
        CRModelFactorNum = rngCRModelList.Cells(i, 3).Value
        For j = 1 To CRModelFactorNum
            count = count + 1
            rngCorrAnchor.Offset(0, count) = "CR" & CStr(i) & "Factor" & CStr(j)
            rngCorrAnchor.Offset(count, 0) = "CR" & CStr(i) & "Factor" & CStr(j)
        Next j
    Next i
    
    For i = 1 To numEQModels
        EQModelFactorNum = rngEQModelList.Cells(i, 3).Value
        For j = 1 To EQModelFactorNum
            count = count + 1
            rngCorrAnchor.Offset(0, count) = "=" & rngEQModelList.Cells(i, 1).Address & "&" & """" & "Factor" & CStr(j) & """"
            rngCorrAnchor.Offset(count, 0) = "=" & rngEQModelList.Cells(i, 1).Address & "&" & """" & "Factor" & CStr(j) & """"
        Next j
    Next i
    
    For i = 1 To count
        rngCorrAnchor.Offset(i, i) = 1
        For j = i + 1 To count
            rngCorrAnchor.Offset(i, j) = 0
        Next j
    Next i
    
    rngCorrAnchor.Formula = "=nxlibmatrix(" & Range(rngCorrAnchor.Offset(0, 1), rngCorrAnchor.Offset(0, count)).Address & "," _
                                            & Range(rngCorrAnchor.Offset(1, 0), rngCorrAnchor.Offset(count, 0)).Address & "," _
                                            & Range(rngCorrAnchor.Offset(1, 1), rngCorrAnchor.Offset(count, count)).Address & "," _
                                            & """" & "CC_CRB_EQB_Corr.Data" & """" & ")"
    
    
    Call formatColorAndBorder(rngCorrAnchor)
    Call formatColorAndBorder(Range(rngCorrAnchor.Offset(1, 1), rngCorrAnchor.Offset(count, count)))
    Call formatHeader(Range(rngCorrAnchor.Offset(0, 1), rngCorrAnchor.Offset(0, count)))
    Call formatHeader(Range(rngCorrAnchor.Offset(1, 0), rngCorrAnchor.Offset(count, 0)))
       
    Range(rngCorrAnchor.Offset(1, 1), rngCorrAnchor.Offset(count, count)).Select
    
CleanUp:
    Application.EnableEvents = True
    Application.ScreenUpdating = True
End Sub





''' Formatting Module

Private Sub addConditionalFormat(tempRng As Range)
    tempRng.Select
    Selection.FormatConditions.Delete
    Selection.FormatConditions.Add Type:=xlCellValue, Operator:=xlEqual, _
        Formula1:="=""<LINK>"""
    Selection.FormatConditions(1).Interior.ColorIndex = 3
        
    Cells(1, 1).Select
End Sub

Private Sub formatHeader(tempRng As Range)
    tempRng.Select
    With Selection.Interior
        .Pattern = xlSolid
        .PatternColorIndex = xlAutomatic
        .Color = 10040115
    End With
    With Selection.Font
        .ColorIndex = 2
        .Name = "Calibri"
        .Size = 11
    End With
    Cells(1, 1).Select
End Sub

Private Sub formatColorAndBorder(tempRng As Range)
    tempRng.Select
    Selection.HorizontalAlignment = xlCenter
    Selection.Borders(xlDiagonalDown).LineStyle = xlNone
    Selection.Borders(xlDiagonalUp).LineStyle = xlNone
    With Selection.Borders(xlEdgeLeft)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlEdgeTop)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlEdgeRight)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .Weight = xlThin
    End With
    Selection.Borders(xlInsideVertical).LineStyle = xlNone
    Selection.Borders(xlInsideHorizontal).LineStyle = xlNone
    With Selection.Interior
        .Pattern = xlSolid
        .PatternColorIndex = xlAutomatic
        .ColorIndex = 2
    End With
    With Selection.Font
        .Name = "Calibri"
        .Size = 11
    End With
    Cells(1, 1).Select

End Sub

Private Sub addDataValidation(tempRng As Range)
    tempRng.Select
    With Selection.Validation
        .Delete
        .Add Type:=xlValidateWholeNumber, AlertStyle:=xlValidAlertStop, _
        Operator:=xlGreaterEqual, Formula1:="1"
        .IgnoreBlank = True
        .InCellDropdown = True
        .InputTitle = ""
        .ErrorTitle = "Incorrect Input"
        .InputMessage = ""
        .ErrorMessage = "Please input an integer"
        .ShowInput = True
        .ShowError = True
    End With
    Cells(1, 1).Select
End Sub

Attribute VB_Name = "Sheet16"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "ComboBoxForeignModelNum, 1, 0, MSForms, ComboBox"
Attribute VB_Control = "ResizeButton, 2, 1, MSForms, CommandButton"
Attribute VB_Control = "CreateButton, 3, 2, MSForms, CommandButton"
Attribute VB_Control = "ComboBoxCRModelNum, 4, 3, MSForms, ComboBox"
Attribute VB_Control = "ComboBoxCMDTYModelNum, 5, 4, MSForms, ComboBox"
Option Explicit
Private hasBeenInitialised As Boolean



Private Sub CreateButton_Click()
    On Error GoTo errorHandler
    Application.EnableEvents = False
    Dim asn$: asn = ActiveSheet.Name
    Dim rngForeignModelList As Range: Set rngForeignModelList = Range("NX_" & asn & "_M_ForeignModelList")
    Dim numForeignModels%: numForeignModels = rngForeignModelList.Rows.count
    Dim rngForeignModelListAnchor As Range: Set rngForeignModelListAnchor = rngForeignModelList.Cells(1, 1).Offset(-1, 0)
    Dim rngForeignModels As Range: Set rngForeignModels = Range("NX_" & asn & "_M_ForeignModels")
    rngForeignModels.Formula = "=nxlibdata(" & rngForeignModelListAnchor.Address & "," & Range(rngForeignModelListAnchor.Offset(1, 0), rngForeignModelListAnchor.Offset(numForeignModels, 0)).Address & "," & """" & "CC_CRB_CMDTYB_ForeignModel.Data" & """" & ")"
    Dim rngFXModelList As Range: Set rngFXModelList = Range("NX_" & asn & "_M_FXModelList")
    Dim numFXModels%: numFXModels = rngFXModelList.Rows.count
    Dim rngFXModelListAnchor As Range: Set rngFXModelListAnchor = rngFXModelList.Cells(1, 1).Offset(-1, 0)
    Dim rngFXModels As Range: Set rngFXModels = Range("NX_" & asn & "_M_FXModels")
    rngFXModels.Formula = "=nxlibdata(" & rngFXModelListAnchor.Address & "," & Range(rngFXModelListAnchor.Offset(1, 0), rngFXModelListAnchor.Offset(numFXModels, 0)).Address & "," & """" & "CC_CRB_CMDTYB_FXModel.Data" & """" & ")"
    Dim rngCRModelList As Range: Set rngCRModelList = Range("NX_" & asn & "_M_CRModelList")
    Dim numCRModels%: numCRModels = rngCRModelList.Rows.count
    Dim rngCRModelListAnchor As Range: Set rngCRModelListAnchor = rngCRModelList.Cells(1, 1).Offset(-1, 0)
    Dim rngCRModels As Range: Set rngCRModels = Range("NX_" & asn & "_M_CRModels")
    rngCRModels.Formula = "=nxlibdata(" & Range(rngCRModelListAnchor, rngCRModelListAnchor.Offset(0, 1)).Address & "," & Range(rngCRModelListAnchor.Offset(1, 0), rngCRModelListAnchor.Offset(numCRModels, 1)).Address & "," & """" & "CC_CRB_CMDTYB_CRModel.Data" & """" & ")"
    Dim rngCMDTYModelList As Range: Set rngCMDTYModelList = Range("NX_" & asn & "_M_CMDTYModelList")
    Dim numCMDTYModels%: numCMDTYModels = rngCMDTYModelList.Rows.count
    Dim rngCMDTYModelListAnchor As Range: Set rngCMDTYModelListAnchor = rngCMDTYModelList.Cells(1, 1).Offset(-1, 0)
    Dim rngCMDTYModels As Range: Set rngCMDTYModels = Range("NX_" & asn & "_M_CMDTYModels")
    rngCMDTYModels.Formula = "=nxlibdata(" & Range(rngCMDTYModelListAnchor, rngCMDTYModelListAnchor.Offset(0, 1)).Address & "," & Range(rngCMDTYModelListAnchor.Offset(1, 0), rngCMDTYModelListAnchor.Offset(numCMDTYModels, 1)).Address & "," & """" & "CC_CRB_CMDTYB_CMDTYModel.Data" & """" & ")"
    ActiveSheet.Calculate
    
CleanUp:
    Application.EnableEvents = True
    Exit Sub
errorHandler:
    Call VBA.MsgBox("Error in creating model table data", vbCritical + vbOKOnly, "Error")
    GoTo CleanUp
    End Sub

Private Sub ResizeButton_Click()
    On Error GoTo CleanUp
    Application.ScreenUpdating = False
    Dim temp1 As Variant: temp1 = Split(ComboBoxForeignModelNum.Text, " ")
    Dim temp2 As Variant: temp2 = Split(ComboBoxCRModelNum.Text, " ")
    Dim temp3 As Variant: temp3 = Split(ComboBoxCMDTYModelNum.Text, " ")
    If Not IsNumeric(temp1(0)) Or Not IsNumeric(temp2(0)) Or Not IsNumeric(temp3(0)) Then
        MsgBox "Fatal error when resizing ComboBox"
        GoTo CleanUp
    Else
        Resize CInt(temp1(0)), CInt(temp2(0)), CInt(temp3(0))
    End If
    On Error GoTo 0
    
CleanUp:
    Application.ScreenUpdating = True
    ActiveSheet.Calculate
End Sub


Public Sub Resize(numForeignModel As Integer, numCRModel As Integer, numCMDTYModel As Integer)
    On Error GoTo errorHandler
    Application.EnableEvents = False
    Application.ScreenUpdating = False
    
    Dim numFXModel%: numFXModel = numForeignModel
    Dim asn$: asn = ActiveSheet.Name
    Dim rngForeignModels As Range: Set rngForeignModels = Range("NX_" & asn & "_M_ForeignModels")
    Dim rngForeignModelList As Range: Set rngForeignModelList = Range("NX_" & asn & "_M_ForeignModelList")
    Dim rngFXModels As Range: Set rngFXModels = Range("NX_" & asn & "_M_FXModels")
    Dim rngFXModelList As Range: Set rngFXModelList = Range("NX_" & asn & "_M_FXModelList")
    Dim rngCRModels As Range: Set rngCRModels = Range("NX_" & asn & "_M_CRModels")
    Dim rngCRModelList As Range: Set rngCRModelList = Range("NX_" & asn & "_M_CRModelList")
    Dim rngCMDTYModels As Range: Set rngCMDTYModels = Range("NX_" & asn & "_M_CMDTYModels")
    Dim rngCMDTYModelList As Range: Set rngCMDTYModelList = Range("NX_" & asn & "_M_CMDTYModelList")
           
    Dim rngIRModelFactorNum As Range: Set rngIRModelFactorNum = Range("NX_" & asn & "_M_IRModelFactorNum")
    Dim rngCorrAnchor As Range: Set rngCorrAnchor = Range("NX_" & asn & "_M_CorrAnchor")
    Dim rngForeignModelListAnchor As Range: Set rngForeignModelListAnchor = rngForeignModelList.Cells(1, 1).Offset(-1, 0)
    Dim rngFXModelListAnchor As Range: Set rngFXModelListAnchor = rngFXModelList.Cells(1, 1).Offset(-1, 0)
    Dim rngCRModelListAnchor As Range: Set rngCRModelListAnchor = rngCRModelList.Cells(1, 1).Offset(-1, 0)
    Dim rngCMDTYModelListAnchor As Range: Set rngCMDTYModelListAnchor = rngCMDTYModelList.Cells(1, 1).Offset(-1, 0)
    
    rngForeignModelList.Clear
    rngFXModelList.Clear
    rngCRModelList.Clear
    rngCMDTYModelList.Clear
    rngCorrAnchor.CurrentRegion.Clear
    rngForeignModels = "<LINK>"
    rngFXModels = "<LINK>"
    rngCRModels = "<LINK>"
    rngCMDTYModels = "<LINK>"
    rngIRModelFactorNum.Value = 1
    
    'Resize the Foreign Model table
    Dim i%, j%
    For i = 1 To numForeignModel
        rngForeignModelListAnchor.Offset(i, 0) = "<LINK>"
        rngForeignModelListAnchor.Offset(i, 1) = 1
    Next i
    Range(rngForeignModelListAnchor.Offset(1, 0), rngForeignModelListAnchor.Offset(numForeignModel, 1)).Select
    ActiveWorkbook.Names.Add Name:="NX_" & asn & "_M_ForeignModelList", RefersTo:=Selection
    Set rngForeignModelList = Range("NX_" & asn & "_M_ForeignModelList")
    Call formatColorAndBorder(rngForeignModelList)
    Call addConditionalFormat(Range(rngForeignModelListAnchor.Offset(1, 0), rngForeignModelListAnchor.Offset(numForeignModel, 0)))
    Call addDataValidation(Range(rngForeignModelListAnchor.Offset(1, 1), rngForeignModelListAnchor.Offset(numForeignModel, 1)))
        
    'Resize the FX Model Table
    For i = 1 To numFXModel
        rngFXModelListAnchor.Offset(i, 0) = "<LINK>"
        rngFXModelListAnchor.Offset(i, 1) = 1
    Next i
    Range(rngFXModelListAnchor.Offset(1, 0), rngFXModelListAnchor.Offset(numFXModel, 1)).Select
    ActiveWorkbook.Names.Add Name:="NX_" & asn & "_M_FXModelList", RefersTo:=Selection
    Set rngFXModelList = Range("NX_" & asn & "_M_FXModelList")
    Call formatColorAndBorder(rngFXModelList)
    Call addConditionalFormat(Range(rngFXModelListAnchor.Offset(1, 0), rngFXModelListAnchor.Offset(numFXModel, 0)))
    Call addDataValidation(Range(rngFXModelListAnchor.Offset(1, 1), rngFXModelListAnchor.Offset(numFXModel, 1)))
          
    'Resize the CR Model Table
    For i = 1 To numCRModel
        rngCRModelListAnchor.Offset(i, 0) = "<LINK>"
        rngCRModelListAnchor.Offset(i, 1) = ""
        rngCRModelListAnchor.Offset(i, 2) = 1
    Next i
    Range(rngCRModelListAnchor.Offset(1, 0), rngCRModelListAnchor.Offset(numCRModel, 2)).Select
    ActiveWorkbook.Names.Add Name:="NX_" & asn & "_M_CRModelList", RefersTo:=Selection
    Set rngCRModelList = Range("NX_" & asn & "_M_CRModelList")
    Call formatColorAndBorder(rngCRModelList)
    Call addConditionalFormat(Range(rngCRModelListAnchor.Offset(1, 0), rngCRModelListAnchor.Offset(numCRModel, 0)))
    Call addDataValidation(Range(rngCRModelListAnchor.Offset(1, 2), rngCRModelListAnchor.Offset(numCRModel, 2)))
          
    'Resize the CMDTY Model Table
    For i = 1 To numCMDTYModel
        rngCMDTYModelListAnchor.Offset(i, 0) = "<LINK>"
        rngCMDTYModelListAnchor.Offset(i, 1) = "<LINK>"
        rngCMDTYModelListAnchor.Offset(i, 2) = 1
    Next i
    Range(rngCMDTYModelListAnchor.Offset(1, 0), rngCMDTYModelListAnchor.Offset(numCMDTYModel, 2)).Select
    ActiveWorkbook.Names.Add Name:="NX_" & asn & "_M_CMDTYModelList", RefersTo:=Selection
    Set rngCMDTYModelList = Range("NX_" & asn & "_M_CMDTYModelList")
    Call formatColorAndBorder(rngCMDTYModelList)
    Call addConditionalFormat(Range(rngCMDTYModelListAnchor.Offset(1, 0), rngCMDTYModelListAnchor.Offset(numCMDTYModel, 1)))
    Call addDataValidation(Range(rngCMDTYModelListAnchor.Offset(1, 2), rngCMDTYModelListAnchor.Offset(numCMDTYModel, 2)))
          
    rngCorrAnchor.Offset(0, 1) = "DomesticModelFactor1"
    rngCorrAnchor.Offset(1, 0) = "DomesticModelFactor1"
    
    For i = 1 To numFXModel
        rngCorrAnchor.Offset(0, i + 1) = "Foreign" & CStr(i) & "ModelFactor1"
        rngCorrAnchor.Offset(i + 1, 0) = "Foreign" & CStr(i) & "ModelFactor1"
    Next i
    
    For i = 1 To numForeignModel
        rngCorrAnchor.Offset(0, i + numFXModel + 1) = "FX" & CStr(i) & "ModelFactor1"
        rngCorrAnchor.Offset(i + numFXModel + 1, 0) = "FX" & CStr(i) & "ModelFactor1"
    Next i
    
    For i = 1 To numCRModel
        rngCorrAnchor.Offset(0, i + numFXModel + numForeignModel + 1) = "CR" & CStr(i) & "Factor1"
        rngCorrAnchor.Offset(i + numFXModel + numForeignModel + 1, 0) = "CR" & CStr(i) & "Factor1"
    Next i
    
    For i = 1 To numCMDTYModel
        rngCorrAnchor.Offset(0, i + numFXModel + numForeignModel + numCRModel + 1) = "=" & rngCMDTYModelListAnchor.Offset(i, 0).Address & "&" & """" & "Factor1" & """"
        rngCorrAnchor.Offset(i + numFXModel + numForeignModel + numCRModel + 1, 0) = "=" & rngCMDTYModelListAnchor.Offset(i, 0).Address & "&" & """" & "Factor1" & """"
    Next i
    
    For i = 1 To numFXModel + numForeignModel + numCRModel + 1
        rngCorrAnchor.Offset(i, i) = 1
        For j = i + 1 To numFXModel + numForeignModel + numCRModel + 1
            rngCorrAnchor.Offset(i, j) = 0
        Next j
    Next i
    
    rngCorrAnchor.Formula = "=nxlibmatrix(" & Range(rngCorrAnchor.Offset(0, 1), rngCorrAnchor.Offset(0, numFXModel + numForeignModel + numCRModel + numCMDTYModel + 1)).Address & "," _
                                            & Range(rngCorrAnchor.Offset(1, 0), rngCorrAnchor.Offset(numFXModel + numForeignModel + numCRModel + numCMDTYModel + 1, 0)).Address & "," _
                                            & Range(rngCorrAnchor.Offset(1, 1), rngCorrAnchor.Offset(numFXModel + numForeignModel + numCRModel + numCMDTYModel + 1, numFXModel + numForeignModel + numCRModel + numCMDTYModel + 1)).Address & "," _
                                            & """" & "CC_CRB_CMDTYB_Corr.Data" & """" & ")"
                                            
    Call formatColorAndBorder(rngCorrAnchor)
    Call formatColorAndBorder(Range(rngCorrAnchor.Offset(1, 1), rngCorrAnchor.Offset(numFXModel + numForeignModel + numCRModel + numCMDTYModel + 1, numFXModel + numForeignModel + numCRModel + numCMDTYModel + 1)))
    Call formatHeader(Range(rngCorrAnchor.Offset(0, 1), rngCorrAnchor.Offset(0, numFXModel + numForeignModel + numCRModel + numCMDTYModel + 1)))
    Call formatHeader(Range(rngCorrAnchor.Offset(1, 0), rngCorrAnchor.Offset(numFXModel + numForeignModel + numCRModel + numCMDTYModel + 1, 0)))

CleanUp:
    Application.EnableEvents = True
    Application.ScreenUpdating = True
    Set rngForeignModels = Nothing
    Set rngForeignModelList = Nothing
    Set rngForeignModelListAnchor = Nothing
    Set rngFXModels = Nothing
    Set rngFXModelList = Nothing
    Set rngFXModelListAnchor = Nothing
    Set rngCRModels = Nothing
    Set rngCRModelList = Nothing
    Set rngCRModelListAnchor = Nothing
    Set rngCorrAnchor = Nothing
    Exit Sub
   
errorHandler:
    Call VBA.MsgBox("Error in resizing the model", vbCritical + vbOKOnly, "Error")
    GoTo CleanUp
    End Sub

Private Sub Worksheet_Activate()

    On Error GoTo CleanUp
    ComboBoxForeignModelNum.Clear
    ComboBoxForeignModelNum.AddItem ("1 Foreign Model")
    ComboBoxForeignModelNum.AddItem ("2 Foreign Models")
    ComboBoxForeignModelNum.AddItem ("4 Foreign Models")
    ComboBoxForeignModelNum.AddItem ("5 Foreign Models")
    ComboBoxForeignModelNum.AddItem ("6 Foreign Models")
    ComboBoxForeignModelNum.AddItem ("7 Foreign Models")
    ComboBoxForeignModelNum.AddItem ("8 Foreign Models")
    ComboBoxForeignModelNum.AddItem ("9 Foreign Models")
    ComboBoxForeignModelNum.AddItem ("10 Foreign Models")
    ComboBoxForeignModelNum.Text = "1 Foreign Model"
    
    ComboBoxCRModelNum.Clear
    ComboBoxCRModelNum.AddItem ("1 CR Model")
    ComboBoxCRModelNum.AddItem ("2 CR Models")
    ComboBoxCRModelNum.AddItem ("3 CR Models")
    ComboBoxCRModelNum.AddItem ("4 CR Models")
    ComboBoxCRModelNum.AddItem ("5 CR Models")
    ComboBoxCRModelNum.AddItem ("6 CR Models")
    ComboBoxCRModelNum.AddItem ("7 CR Models")
    ComboBoxCRModelNum.AddItem ("8 CR Models")
    ComboBoxCRModelNum.AddItem ("9 CR Models")
    ComboBoxCRModelNum.AddItem ("10 CR Models")
    ComboBoxCRModelNum.Text = "1 CR Model"
    
    ComboBoxCMDTYModelNum.Clear
    ComboBoxCMDTYModelNum.AddItem ("1 CMDTY Model")
    ComboBoxCMDTYModelNum.AddItem ("2 CMDTY Models")
    ComboBoxCMDTYModelNum.AddItem ("3 CMDTY Models")
    ComboBoxCMDTYModelNum.AddItem ("4 CMDTY Models")
    ComboBoxCMDTYModelNum.AddItem ("5 CMDTY Models")
    ComboBoxCMDTYModelNum.AddItem ("6 CMDTY Models")
    ComboBoxCMDTYModelNum.AddItem ("7 CMDTY Models")
    ComboBoxCMDTYModelNum.AddItem ("8 CMDTY Models")
    ComboBoxCMDTYModelNum.AddItem ("9 CMDTY Models")
    ComboBoxCMDTYModelNum.AddItem ("10 CMDTY Models")
    ComboBoxCMDTYModelNum.Text = "1 CMDTY Model"
    
    
    hasBeenInitialised = True

CleanUp:
    ActiveSheet.Calculate
End Sub


'Resizing the correlation matrix after changing the Factor number for any model
Private Sub Worksheet_Change(ByVal Target As Range)
    On Error GoTo CleanUp
    Application.EnableEvents = False
    Dim asn$: asn = ActiveSheet.Name
    Dim rngForeignModelList As Range: Set rngForeignModelList = Range("NX_" & asn & "_M_ForeignModelList")
    Dim numForeignModels%: numForeignModels = rngForeignModelList.Rows.count
    Dim rngForeignModelFactorNumList As Range: Set rngForeignModelFactorNumList = Range(rngForeignModelList.Cells(1, 2), rngForeignModelList.Cells(numForeignModels, 2))
    Dim rngFXModelList As Range: Set rngFXModelList = Range("NX_" & asn & "_M_FXModelList")
    Dim numFXModels%: numFXModels = rngFXModelList.Rows.count
    Dim rngFXModelFactorNumList As Range: Set rngFXModelFactorNumList = Range(rngFXModelList(1, 2), rngFXModelList(numFXModels, 2))
    Dim rngCRModelList As Range: Set rngCRModelList = Range("NX_" & asn & "_M_CRModelList")
    Dim numCRModels%: numCRModels = rngCRModelList.Rows.count
    Dim rngCRModelFactorNumList As Range: Set rngCRModelFactorNumList = Range(rngCRModelList.Cells(1, 3), rngCRModelList.Cells(numCRModels, 3))
    Dim rngCMDTYModelList As Range: Set rngCMDTYModelList = Range("NX_" & asn & "_M_CMDTYModelList")
    Dim numCMDTYModels%: numCMDTYModels = rngCMDTYModelList.Rows.count
    Dim rngCMDTYModelFactorNumList As Range: Set rngCMDTYModelFactorNumList = Range(rngCMDTYModelList.Cells(1, 3), rngCMDTYModelList.Cells(numCMDTYModels, 3))
    Dim rngIRModelFactorNum As Range: Set rngIRModelFactorNum = Range("NX_" & asn & "_M_IRMOdelFactorNum")
    
    If Intersect(Target, rngForeignModelFactorNumList) Is Nothing And Intersect(Target, rngFXModelFactorNumList) Is Nothing And _
        Intersect(Target, rngCRModelFactorNumList) Is Nothing And Intersect(Target, rngCMDTYModelFactorNumList) Is Nothing And _
        Intersect(Target, rngIRModelFactorNum) Is Nothing Then
        GoTo CleanUp
    End If
    
    Dim rngCorrAnchor As Range: Set rngCorrAnchor = Range("NX_" & asn & "_M_CorrAnchor")
    rngCorrAnchor.CurrentRegion.Clear
    Dim IRModelFactorNum%: IRModelFactorNum = rngIRModelFactorNum.Value
    Dim FXModelFactorNum%, ForeignModelFactorNum%, CRModelFactorNum%, CMDTYModelFactorNum%
    Dim i%, j%
    Dim count%: count = 0
    For i = 1 To IRModelFactorNum
        count = count + 1
        rngCorrAnchor.Offset(0, count) = "DomesticModelFactor" & CStr(i)
        rngCorrAnchor.Offset(count, 0) = "DomesticModelFactor" & CStr(i)
    Next i
    
    For i = 1 To numFXModels
        FXModelFactorNum = rngFXModelList.Cells(i, 2).Value
        For j = 1 To FXModelFactorNum
            count = count + 1
            rngCorrAnchor.Offset(0, count) = "FX" & CStr(i) & "ModelFactor" & CStr(j)
            rngCorrAnchor.Offset(count, 0) = "FX" & CStr(i) & "ModelFactor" & CStr(j)
        Next j
    Next i
    
    For i = 1 To numForeignModels
        ForeignModelFactorNum = rngForeignModelList.Cells(i, 2).Value
        For j = 1 To ForeignModelFactorNum
            count = count + 1
            rngCorrAnchor.Offset(0, count) = "Foreign" & CStr(i) & "ModelFactor" & CStr(j)
            rngCorrAnchor.Offset(count, 0) = "Foreign" & CStr(i) & "ModelFactor" & CStr(j)
        Next j
    Next i
    
    For i = 1 To numCRModels
        CRModelFactorNum = rngCRModelList.Cells(i, 3).Value
        For j = 1 To CRModelFactorNum
            count = count + 1
            rngCorrAnchor.Offset(0, count) = "CR" & CStr(i) & "Factor" & CStr(j)
            rngCorrAnchor.Offset(count, 0) = "CR" & CStr(i) & "Factor" & CStr(j)
        Next j
    Next i
    
    For i = 1 To numCMDTYModels
        CMDTYModelFactorNum = rngCMDTYModelList.Cells(i, 3).Value
        For j = 1 To CMDTYModelFactorNum
            count = count + 1
            rngCorrAnchor.Offset(0, count) = "=" & rngCMDTYModelList.Cells(i, 1).Address & "&" & """" & "Factor" & CStr(j) & """"
            rngCorrAnchor.Offset(count, 0) = "=" & rngCMDTYModelList.Cells(i, 1).Address & "&" & """" & "Factor" & CStr(j) & """"
        Next j
    Next i
    
    For i = 1 To count
        rngCorrAnchor.Offset(i, i) = 1
        For j = i + 1 To count
            rngCorrAnchor.Offset(i, j) = 0
        Next j
    Next i
    
    rngCorrAnchor.Formula = "=nxlibmatrix(" & Range(rngCorrAnchor.Offset(0, 1), rngCorrAnchor.Offset(0, count)).Address & "," _
                                            & Range(rngCorrAnchor.Offset(1, 0), rngCorrAnchor.Offset(count, 0)).Address & "," _
                                            & Range(rngCorrAnchor.Offset(1, 1), rngCorrAnchor.Offset(count, count)).Address & "," _
                                            & """" & "CC_CRB_EQB_Corr.Data" & """" & ")"
    
    
    Call formatColorAndBorder(rngCorrAnchor)
    Call formatColorAndBorder(Range(rngCorrAnchor.Offset(1, 1), rngCorrAnchor.Offset(count, count)))
    Call formatHeader(Range(rngCorrAnchor.Offset(0, 1), rngCorrAnchor.Offset(0, count)))
    Call formatHeader(Range(rngCorrAnchor.Offset(1, 0), rngCorrAnchor.Offset(count, 0)))
       
    Range(rngCorrAnchor.Offset(1, 1), rngCorrAnchor.Offset(count, count)).Select
    
CleanUp:

    Application.EnableEvents = True

End Sub





''' Formatting Module

Private Sub addConditionalFormat(tempRng As Range)
    tempRng.Select
    Selection.FormatConditions.Delete
    Selection.FormatConditions.Add Type:=xlCellValue, Operator:=xlEqual, _
        Formula1:="=""<LINK>"""
    Selection.FormatConditions(1).Interior.ColorIndex = 3
        
    Cells(1, 1).Select
End Sub

Private Sub formatHeader(tempRng As Range)
    tempRng.Select
    With Selection.Interior
        .Pattern = xlSolid
        .PatternColorIndex = xlAutomatic
        .Color = 10040115
    End With
    With Selection.Font
        .ColorIndex = 2
        .Name = "Calibri"
        .Size = 11
    End With
    Cells(1, 1).Select
End Sub

Private Sub formatColorAndBorder(tempRng As Range)
    tempRng.Select
    Selection.HorizontalAlignment = xlCenter
    Selection.Borders(xlDiagonalDown).LineStyle = xlNone
    Selection.Borders(xlDiagonalUp).LineStyle = xlNone
    With Selection.Borders(xlEdgeLeft)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlEdgeTop)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlEdgeRight)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .Weight = xlThin
    End With
    Selection.Borders(xlInsideVertical).LineStyle = xlNone
    Selection.Borders(xlInsideHorizontal).LineStyle = xlNone
    With Selection.Interior
        .Pattern = xlSolid
        .PatternColorIndex = xlAutomatic
        .ColorIndex = 2
    End With
    With Selection.Font
        .Name = "Calibri"
        .Size = 11
    End With
    Cells(1, 1).Select

End Sub

Private Sub addDataValidation(tempRng As Range)
    tempRng.Select
    With Selection.Validation
        .Delete
        .Add Type:=xlValidateWholeNumber, AlertStyle:=xlValidAlertStop, _
        Operator:=xlGreaterEqual, Formula1:="1"
        .IgnoreBlank = True
        .InCellDropdown = True
        .InputTitle = ""
        .ErrorTitle = "Incorrect Input"
        .InputMessage = ""
        .ErrorMessage = "Please input an integer"
        .ShowInput = True
        .ShowError = True
    End With
    Cells(1, 1).Select
End Sub

Attribute VB_Name = "Sheet17"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "ComboBoxForeignModelNum, 1, 0, MSForms, ComboBox"
Attribute VB_Control = "ResizeButton, 2, 1, MSForms, CommandButton"
Attribute VB_Control = "CreateButton, 3, 2, MSForms, CommandButton"
Attribute VB_Control = "ComboBoxCMDTYModelNum, 4, 3, MSForms, ComboBox"
Option Explicit
Private hasBeenInitialised As Boolean


Private Sub CreateButton_Click()
    On Error GoTo errorHandler
    Application.EnableEvents = False
    Dim asn$: asn = ActiveSheet.Name
    Dim rngForeignModelList As Range: Set rngForeignModelList = Range("NX_" & asn & "_M_ForeignModelList")
    Dim numForeignModels%: numForeignModels = rngForeignModelList.Rows.count
    Dim rngForeignModelListAnchor As Range: Set rngForeignModelListAnchor = rngForeignModelList.Cells(1, 1).Offset(-1, 0)
    Dim rngForeignModels As Range: Set rngForeignModels = Range("NX_" & asn & "_M_ForeignModels")
    rngForeignModels.Formula = "=nxlibdata(" & rngForeignModelListAnchor.Address & "," & Range(rngForeignModelListAnchor.Offset(1, 0), rngForeignModelListAnchor.Offset(numForeignModels, 0)).Address & "," & """" & "CC_CMDTYB_ForeignModel.Data" & """" & ")"
    Dim rngFXModelList As Range: Set rngFXModelList = Range("NX_" & asn & "_M_FXModelList")
    Dim numFXModels%: numFXModels = rngFXModelList.Rows.count
    Dim rngFXModelListAnchor As Range: Set rngFXModelListAnchor = rngFXModelList.Cells(1, 1).Offset(-1, 0)
    Dim rngFXModels As Range: Set rngFXModels = Range("NX_" & asn & "_M_FXModels")
    rngFXModels.Formula = "=nxlibdata(" & rngFXModelListAnchor.Address & "," & Range(rngFXModelListAnchor.Offset(1, 0), rngFXModelListAnchor.Offset(numFXModels, 0)).Address & "," & """" & "CC_CMDTYB_FXModel.Data" & """" & ")"
    Dim rngCMDTYModelList As Range: Set rngCMDTYModelList = Range("NX_" & asn & "_M_CMDTYModelList")
    Dim numCMDTYModels%: numCMDTYModels = rngCMDTYModelList.Rows.count
    Dim rngCMDTYModelListAnchor As Range: Set rngCMDTYModelListAnchor = rngCMDTYModelList.Cells(1, 1).Offset(-1, 0)
    Dim rngCMDTYModels As Range: Set rngCMDTYModels = Range("NX_" & asn & "_M_CMDTYModels")
    rngCMDTYModels.Formula = "=nxlibdata(" & Range(rngCMDTYModelListAnchor, rngCMDTYModelListAnchor.Offset(0, 1)).Address & "," & Range(rngCMDTYModelListAnchor.Offset(1, 0), rngCMDTYModelListAnchor.Offset(numCMDTYModels, 1)).Address & "," & """" & "CC_CMDTYB_CMDTYModel.Data" & """" & ")"
    ActiveSheet.Calculate

CleanUp:
    Application.EnableEvents = True
    Exit Sub
errorHandler:
    Call VBA.MsgBox("Error in creating model table data", vbCritical + vbOKOnly, "Error")
    GoTo CleanUp
    End Sub

Private Sub ResizeButton_Click()
    On Error GoTo CleanUp
    Application.ScreenUpdating = False
    Dim temp1 As Variant: temp1 = Split(ComboBoxForeignModelNum.Text, " ")
    Dim temp2 As Variant: temp2 = Split(ComboBoxCMDTYModelNum.Text, " ")
    If Not IsNumeric(temp1(0)) Or Not IsNumeric(temp2(0)) Then
        MsgBox "Fatal error when resizing ComboBox"
        GoTo CleanUp
    Else
        Resize CInt(temp1(0)), CInt(temp2(0))
    End If
    On Error GoTo 0
    
CleanUp:
    Application.ScreenUpdating = True
    ActiveSheet.Calculate
    
End Sub


Public Sub Resize(numForeignModel As Integer, numCMDTYModel As Integer)
    On Error GoTo errorHandler
    Application.EnableEvents = False
    Application.ScreenUpdating = False
    
    Dim numFXModel%: numFXModel = numForeignModel
    Dim asn$: asn = ActiveSheet.Name
    Dim rngForeignModels As Range: Set rngForeignModels = Range("NX_" & asn & "_M_ForeignModels")
    Dim rngForeignModelList As Range: Set rngForeignModelList = Range("NX_" & asn & "_M_ForeignModelList")
    Dim rngFXModels As Range: Set rngFXModels = Range("NX_" & asn & "_M_FXModels")
    Dim rngFXModelList As Range: Set rngFXModelList = Range("NX_" & asn & "_M_FXModelList")
    Dim rngCMDTYModels As Range: Set rngCMDTYModels = Range("NX_" & asn & "_M_CMDTYModels")
    Dim rngCMDTYModelList As Range: Set rngCMDTYModelList = Range("NX_" & asn & "_M_CMDTYModelList")
        
    Dim rngIRModelFactorNum As Range: Set rngIRModelFactorNum = Range("NX_" & asn & "_M_IRModelFactorNum")
    Dim rngCorrAnchor As Range: Set rngCorrAnchor = Range("NX_" & asn & "_M_CorrAnchor")
    Dim rngForeignModelListAnchor As Range: Set rngForeignModelListAnchor = rngForeignModelList.Cells(1, 1).Offset(-1, 0)
    Dim rngFXModelListAnchor As Range: Set rngFXModelListAnchor = rngFXModelList.Cells(1, 1).Offset(-1, 0)
    Dim rngCMDTYModelListAnchor As Range: Set rngCMDTYModelListAnchor = rngCMDTYModelList.Cells(1, 1).Offset(-1, 0)
    
    rngForeignModelList.Clear
    rngFXModelList.Clear
    rngCMDTYModelList.Clear
    rngCorrAnchor.CurrentRegion.Clear
    rngForeignModels = "<LINK>"
    rngFXModels = "<LINK>"
    rngCMDTYModels = "<LINK>"
    rngIRModelFactorNum.Value = 1
    
    'Resize the Foreign Model table
    Dim i%, j%
    For i = 1 To numForeignModel
        rngForeignModelListAnchor.Offset(i, 0) = "<LINK>"
        rngForeignModelListAnchor.Offset(i, 1) = 1
    Next i
    Range(rngForeignModelListAnchor.Offset(1, 0), rngForeignModelListAnchor.Offset(numForeignModel, 1)).Select
    ActiveWorkbook.Names.Add Name:="NX_" & asn & "_M_ForeignModelList", RefersTo:=Selection
    Set rngForeignModelList = Range("NX_" & asn & "_M_ForeignModelList")
    Call formatColorAndBorder(rngForeignModelList)
    Call addConditionalFormat(Range(rngForeignModelListAnchor.Offset(1, 0), rngForeignModelListAnchor.Offset(numForeignModel, 0)))
    Call addDataValidation(Range(rngForeignModelListAnchor.Offset(1, 1), rngForeignModelListAnchor.Offset(numForeignModel, 1)))
        
    'Resize the FX Model Table
    For i = 1 To numFXModel
        rngFXModelListAnchor.Offset(i, 0) = "<LINK>"
        rngFXModelListAnchor.Offset(i, 1) = 1
    Next i
    Range(rngFXModelListAnchor.Offset(1, 0), rngFXModelListAnchor.Offset(numFXModel, 1)).Select
    ActiveWorkbook.Names.Add Name:="NX_" & asn & "_M_FXModelList", RefersTo:=Selection
    Set rngFXModelList = Range("NX_" & asn & "_M_FXModelList")
    Call formatColorAndBorder(rngFXModelList)
    Call addConditionalFormat(Range(rngFXModelListAnchor.Offset(1, 0), rngFXModelListAnchor.Offset(numFXModel, 0)))
    Call addDataValidation(Range(rngFXModelListAnchor.Offset(1, 1), rngFXModelListAnchor.Offset(numFXModel, 1)))
          
    'Resize the CMDTY Model Table
    For i = 1 To numCMDTYModel
        rngCMDTYModelListAnchor.Offset(i, 0) = "<LINK>"
        rngCMDTYModelListAnchor.Offset(i, 1) = "<LINK>"
        rngCMDTYModelListAnchor.Offset(i, 2) = 1
    Next i
    Range(rngCMDTYModelListAnchor.Offset(1, 0), rngCMDTYModelListAnchor.Offset(numCMDTYModel, 2)).Select
    ActiveWorkbook.Names.Add Name:="NX_" & asn & "_M_CMDTYModelList", RefersTo:=Selection
    Set rngCMDTYModelList = Range("NX_" & asn & "_M_CMDTYModelList")
    Call formatColorAndBorder(rngCMDTYModelList)
    Call addConditionalFormat(Range(rngCMDTYModelListAnchor.Offset(1, 0), rngCMDTYModelListAnchor.Offset(numCMDTYModel, 1)))
    Call addDataValidation(Range(rngCMDTYModelListAnchor.Offset(1, 2), rngCMDTYModelListAnchor.Offset(numCMDTYModel, 2)))
          
          
    rngCorrAnchor.Offset(0, 1) = "DomesticModelFactor1"
    rngCorrAnchor.Offset(1, 0) = "DomesticModelFactor1"
    
    For i = 1 To numFXModel
        rngCorrAnchor.Offset(0, i + 1) = "Foreign" & CStr(i) & "ModelFactor1"
        rngCorrAnchor.Offset(i + 1, 0) = "Foreign" & CStr(i) & "ModelFactor1"
    Next i
    
    For i = 1 To numForeignModel
        rngCorrAnchor.Offset(0, i + numFXModel + 1) = "FX" & CStr(i) & "ModelFactor1"
        rngCorrAnchor.Offset(i + numFXModel + 1, 0) = "FX" & CStr(i) & "ModelFactor1"
    Next i
    
    For i = 1 To numCMDTYModel
        rngCorrAnchor.Offset(0, i + numFXModel + numForeignModel + 1) = "=" & rngCMDTYModelListAnchor.Offset(i, 0).Address & "&" & """" & "Factor1" & """"
        rngCorrAnchor.Offset(i + numFXModel + numForeignModel + 1, 0) = "=" & rngCMDTYModelListAnchor.Offset(i, 0).Address & "&" & """" & "Factor1" & """"
    Next i
    
    For i = 1 To numFXModel + numForeignModel + numCMDTYModel + 1
        rngCorrAnchor.Offset(i, i) = 1
        For j = i + 1 To numFXModel + numForeignModel + numCMDTYModel + 1
            rngCorrAnchor.Offset(i, j) = 0
        Next j
    Next i
    
    rngCorrAnchor.Formula = "=nxlibmatrix(" & Range(rngCorrAnchor.Offset(0, 1), rngCorrAnchor.Offset(0, numFXModel + numForeignModel + numCMDTYModel + 1)).Address & "," _
                                            & Range(rngCorrAnchor.Offset(1, 0), rngCorrAnchor.Offset(numFXModel + numForeignModel + numCMDTYModel + 1, 0)).Address & "," _
                                            & Range(rngCorrAnchor.Offset(1, 1), rngCorrAnchor.Offset(numFXModel + numForeignModel + numCMDTYModel + 1, numFXModel + numForeignModel + numCMDTYModel + 1)).Address & "," _
                                            & """" & "CC_CMDTYB_Corr.Data" & """" & ")"
                                            
    Call formatColorAndBorder(rngCorrAnchor)
    Call formatColorAndBorder(Range(rngCorrAnchor.Offset(1, 1), rngCorrAnchor.Offset(numFXModel + numForeignModel + numCMDTYModel + 1, numFXModel + numForeignModel + numCMDTYModel + 1)))
    Call formatHeader(Range(rngCorrAnchor.Offset(0, 1), rngCorrAnchor.Offset(0, numFXModel + numForeignModel + numCMDTYModel + 1)))
    Call formatHeader(Range(rngCorrAnchor.Offset(1, 0), rngCorrAnchor.Offset(numFXModel + numForeignModel + numCMDTYModel + 1, 0)))
    
CleanUp:
    Application.EnableEvents = True
    Application.ScreenUpdating = True
    Set rngForeignModels = Nothing
    Set rngForeignModelList = Nothing
    Set rngForeignModelListAnchor = Nothing
    Set rngFXModels = Nothing
    Set rngFXModelList = Nothing
    Set rngFXModelListAnchor = Nothing
    Set rngCMDTYModels = Nothing
    Set rngCMDTYModelList = Nothing
    Set rngCMDTYModelListAnchor = Nothing
    Set rngCorrAnchor = Nothing
    Exit Sub
   
errorHandler:
    Call VBA.MsgBox("Error in resizing the model", vbCritical + vbOKOnly, "Error")
    GoTo CleanUp
    End Sub

Private Sub Worksheet_Activate()

    On Error GoTo CleanUp
    ComboBoxForeignModelNum.Clear
    ComboBoxForeignModelNum.AddItem ("1 Foreign Model")
    ComboBoxForeignModelNum.AddItem ("2 Foreign Models")
    ComboBoxForeignModelNum.AddItem ("4 Foreign Models")
    ComboBoxForeignModelNum.AddItem ("5 Foreign Models")
    ComboBoxForeignModelNum.AddItem ("6 Foreign Models")
    ComboBoxForeignModelNum.AddItem ("7 Foreign Models")
    ComboBoxForeignModelNum.AddItem ("8 Foreign Models")
    ComboBoxForeignModelNum.AddItem ("9 Foreign Models")
    ComboBoxForeignModelNum.AddItem ("10 Foreign Models")
    ComboBoxForeignModelNum.Text = "1 Foreign Model"
    
    ComboBoxCMDTYModelNum.Clear
    ComboBoxCMDTYModelNum.AddItem ("1 CMDTY Model")
    ComboBoxCMDTYModelNum.AddItem ("2 CMDTY Models")
    ComboBoxCMDTYModelNum.AddItem ("3 CMDTY Models")
    ComboBoxCMDTYModelNum.AddItem ("4 CMDTY Models")
    ComboBoxCMDTYModelNum.AddItem ("5 CMDTY Models")
    ComboBoxCMDTYModelNum.AddItem ("6 CMDTY Models")
    ComboBoxCMDTYModelNum.AddItem ("7 CMDTY Models")
    ComboBoxCMDTYModelNum.AddItem ("8 CMDTY Models")
    ComboBoxCMDTYModelNum.AddItem ("9 CMDTY Models")
    ComboBoxCMDTYModelNum.AddItem ("10 CMDTY Models")
    ComboBoxCMDTYModelNum.Text = "1 CMDTY Model"
    
    hasBeenInitialised = True

CleanUp:
    ActiveSheet.Calculate
End Sub


'Resizing the correlation matrix after changing the Factor number for any model
Private Sub Worksheet_Change(ByVal Target As Range)
    On Error GoTo CleanUp
    Application.EnableEvents = False
    Application.ScreenUpdating = False
    
    Dim asn$: asn = ActiveSheet.Name
    Dim rngForeignModelList As Range: Set rngForeignModelList = Range("NX_" & asn & "_M_ForeignModelList")
    Dim numForeignModels%: numForeignModels = rngForeignModelList.Rows.count
    Dim rngForeignModelFactorNumList As Range: Set rngForeignModelFactorNumList = Range(rngForeignModelList.Cells(1, 2), rngForeignModelList.Cells(numForeignModels, 2))
    Dim rngFXModelList As Range: Set rngFXModelList = Range("NX_" & asn & "_M_FXModelList")
    Dim numFXModels%: numFXModels = rngFXModelList.Rows.count
    Dim rngFXModelFactorNumList As Range: Set rngFXModelFactorNumList = Range(rngFXModelList(1, 2), rngFXModelList(numFXModels, 2))
    Dim rngCMDTYModelList As Range: Set rngCMDTYModelList = Range("NX_" & asn & "_M_CMDTYModelList")
    Dim numCMDTYModels%: numCMDTYModels = rngCMDTYModelList.Rows.count
    Dim rngCMDTYModelFactorNumList As Range: Set rngCMDTYModelFactorNumList = Range(rngCMDTYModelList.Cells(1, 3), rngCMDTYModelList.Cells(numCMDTYModels, 3))
    Dim rngIRModelFactorNum As Range: Set rngIRModelFactorNum = Range("NX_" & asn & "_M_IRMOdelFactorNum")
    
    If Intersect(Target, rngForeignModelFactorNumList) Is Nothing And Intersect(Target, rngFXModelFactorNumList) Is Nothing And _
        Intersect(Target, rngCMDTYModelFactorNumList) Is Nothing And Intersect(Target, rngIRModelFactorNum) Is Nothing Then
        GoTo CleanUp
    End If
    
    Dim rngCorrAnchor As Range: Set rngCorrAnchor = Range("NX_" & asn & "_M_CorrAnchor")
    rngCorrAnchor.CurrentRegion.Clear
    Dim IRModelFactorNum%: IRModelFactorNum = rngIRModelFactorNum.Value
    Dim FXModelFactorNum%, ForeignModelFactorNum%, CMDTYModelFactorNum%
    Dim i%, j%
    Dim count%: count = 0
    For i = 1 To IRModelFactorNum
        count = count + 1
        rngCorrAnchor.Offset(0, count) = "DomesticModelFactor" & CStr(i)
        rngCorrAnchor.Offset(count, 0) = "DomesticModelFactor" & CStr(i)
    Next i
    
    For i = 1 To numFXModels
        FXModelFactorNum = rngFXModelList.Cells(i, 2).Value
        For j = 1 To FXModelFactorNum
            count = count + 1
            rngCorrAnchor.Offset(0, count) = "FX" & CStr(i) & "ModelFactor" & CStr(j)
            rngCorrAnchor.Offset(count, 0) = "FX" & CStr(i) & "ModelFactor" & CStr(j)
        Next j
    Next i
    
    For i = 1 To numForeignModels
        ForeignModelFactorNum = rngForeignModelList.Cells(i, 2).Value
        For j = 1 To ForeignModelFactorNum
            count = count + 1
            rngCorrAnchor.Offset(0, count) = "Foreign" & CStr(i) & "ModelFactor" & CStr(j)
            rngCorrAnchor.Offset(count, 0) = "Foreign" & CStr(i) & "ModelFactor" & CStr(j)
        Next j
    Next i
    
    For i = 1 To numCMDTYModels
        CMDTYModelFactorNum = rngCMDTYModelList.Cells(i, 3).Value
        For j = 1 To CMDTYModelFactorNum
            count = count + 1
            rngCorrAnchor.Offset(0, count) = "=" & rngCMDTYModelList.Cells(i, 1).Address & "&" & """" & "Factor" & CStr(j) & """"
            rngCorrAnchor.Offset(count, 0) = "=" & rngCMDTYModelList.Cells(i, 1).Address & "&" & """" & "Factor" & CStr(j) & """"
        Next j
    Next i
    
    For i = 1 To count
        rngCorrAnchor.Offset(i, i) = 1
        For j = i + 1 To count
            rngCorrAnchor.Offset(i, j) = 0
        Next j
    Next i
    
    rngCorrAnchor.Formula = "=nxlibmatrix(" & Range(rngCorrAnchor.Offset(0, 1), rngCorrAnchor.Offset(0, count)).Address & "," _
                                            & Range(rngCorrAnchor.Offset(1, 0), rngCorrAnchor.Offset(count, 0)).Address & "," _
                                            & Range(rngCorrAnchor.Offset(1, 1), rngCorrAnchor.Offset(count, count)).Address & "," _
                                            & """" & "CC_CMDTYB_Corr.Data" & """" & ")"
    
    
    Call formatColorAndBorder(rngCorrAnchor)
    Call formatColorAndBorder(Range(rngCorrAnchor.Offset(1, 1), rngCorrAnchor.Offset(count, count)))
    Call formatHeader(Range(rngCorrAnchor.Offset(0, 1), rngCorrAnchor.Offset(0, count)))
    Call formatHeader(Range(rngCorrAnchor.Offset(1, 0), rngCorrAnchor.Offset(count, 0)))
       
    Range(rngCorrAnchor.Offset(1, 1), rngCorrAnchor.Offset(count, count)).Select
    
CleanUp:
    Application.EnableEvents = True
    Application.ScreenUpdating = True
End Sub





''' Formatting Module

Private Sub addConditionalFormat(tempRng As Range)
    tempRng.Select
    Selection.FormatConditions.Delete
    Selection.FormatConditions.Add Type:=xlCellValue, Operator:=xlEqual, _
        Formula1:="=""<LINK>"""
    Selection.FormatConditions(1).Interior.ColorIndex = 3
        
    Cells(1, 1).Select
End Sub

Private Sub formatHeader(tempRng As Range)
    tempRng.Select
    With Selection.Interior
        .Pattern = xlSolid
        .PatternColorIndex = xlAutomatic
        .Color = 10040115
    End With
    With Selection.Font
        .ColorIndex = 2
        .Name = "Calibri"
        .Size = 11
    End With
    Cells(1, 1).Select
End Sub

Private Sub formatColorAndBorder(tempRng As Range)
    tempRng.Select
    Selection.HorizontalAlignment = xlCenter
    Selection.Borders(xlDiagonalDown).LineStyle = xlNone
    Selection.Borders(xlDiagonalUp).LineStyle = xlNone
    With Selection.Borders(xlEdgeLeft)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlEdgeTop)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlEdgeRight)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .Weight = xlThin
    End With
    Selection.Borders(xlInsideVertical).LineStyle = xlNone
    Selection.Borders(xlInsideHorizontal).LineStyle = xlNone
    With Selection.Interior
        .Pattern = xlSolid
        .PatternColorIndex = xlAutomatic
        .ColorIndex = 2
    End With
    With Selection.Font
        .Name = "Calibri"
        .Size = 11
    End With
    Cells(1, 1).Select

End Sub

Private Sub addDataValidation(tempRng As Range)
    tempRng.Select
    With Selection.Validation
        .Delete
        .Add Type:=xlValidateWholeNumber, AlertStyle:=xlValidAlertStop, _
        Operator:=xlGreaterEqual, Formula1:="1"
        .IgnoreBlank = True
        .InCellDropdown = True
        .InputTitle = ""
        .ErrorTitle = "Incorrect Input"
        .InputMessage = ""
        .ErrorMessage = "Please input an integer"
        .ShowInput = True
        .ShowError = True
    End With
    Cells(1, 1).Select
End Sub

Attribute VB_Name = "Sheet18"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "ComboBoxForeignModelNum, 1, 0, MSForms, ComboBox"
Attribute VB_Control = "ResizeButton, 2, 1, MSForms, CommandButton"
Attribute VB_Control = "CreateButton, 3, 2, MSForms, CommandButton"
Attribute VB_Control = "ComboBoxEQModelNum, 4, 3, MSForms, ComboBox"
Attribute VB_Control = "ComboBoxCMDTYModelNum, 5, 4, MSForms, ComboBox"
Option Explicit
Private hasBeenInitialised As Boolean

Private Sub CreateButton_Click()
    On Error GoTo errorHandler
    Application.EnableEvents = False
    
    Dim asn$: asn = ActiveSheet.Name
    Dim rngForeignModelList As Range: Set rngForeignModelList = Range("NX_" & asn & "_M_ForeignModelList")
    Dim numForeignModels%: numForeignModels = rngForeignModelList.Rows.count
    Dim rngForeignModelListAnchor As Range: Set rngForeignModelListAnchor = rngForeignModelList.Cells(1, 1).Offset(-1, 0)
    Dim rngForeignModels As Range: Set rngForeignModels = Range("NX_" & asn & "_M_ForeignModels")
    rngForeignModels.Formula = "=nxlibdata(" & rngForeignModelListAnchor.Address & "," & Range(rngForeignModelListAnchor.Offset(1, 0), rngForeignModelListAnchor.Offset(numForeignModels, 0)).Address & "," & """" & "CC_EQB_CMDTYB_ForeignModel.Data" & """" & ")"
    Dim rngFXModelList As Range: Set rngFXModelList = Range("NX_" & asn & "_M_FXModelList")
    Dim numFXModels%: numFXModels = rngFXModelList.Rows.count
    Dim rngFXModelListAnchor As Range: Set rngFXModelListAnchor = rngFXModelList.Cells(1, 1).Offset(-1, 0)
    Dim rngFXModels As Range: Set rngFXModels = Range("NX_" & asn & "_M_FXModels")
    rngFXModels.Formula = "=nxlibdata(" & rngFXModelListAnchor.Address & "," & Range(rngFXModelListAnchor.Offset(1, 0), rngFXModelListAnchor.Offset(numFXModels, 0)).Address & "," & """" & "CC_EQB_CMDTYB_FXModel.Data" & """" & ")"
    Dim rngEQModelList As Range: Set rngEQModelList = Range("NX_" & asn & "_M_EQModelList")
    Dim numEQModels%: numEQModels = rngEQModelList.Rows.count
    Dim rngEQModelListAnchor As Range: Set rngEQModelListAnchor = rngEQModelList.Cells(1, 1).Offset(-1, 0)
    Dim rngEQModels As Range: Set rngEQModels = Range("NX_" & asn & "_M_EQModels")
    rngEQModels.Formula = "=nxlibdata(" & Range(rngEQModelListAnchor, rngEQModelListAnchor.Offset(0, 1)).Address & "," & Range(rngEQModelListAnchor.Offset(1, 0), rngEQModelListAnchor.Offset(numEQModels, 1)).Address & "," & """" & "CC_EQB_CMDTYB_EQModel.Data" & """" & ")"
    Dim rngCMDTYModelList As Range: Set rngCMDTYModelList = Range("NX_" & asn & "_M_CMDTYModelList")
    Dim numCMDTYModels%: numCMDTYModels = rngCMDTYModelList.Rows.count
    Dim rngCMDTYModelListAnchor As Range: Set rngCMDTYModelListAnchor = rngCMDTYModelList.Cells(1, 1).Offset(-1, 0)
    Dim rngCMDTYModels As Range: Set rngCMDTYModels = Range("NX_" & asn & "_M_CMDTYModels")
    rngCMDTYModels.Formula = "=nxlibdata(" & Range(rngCMDTYModelListAnchor, rngCMDTYModelListAnchor.Offset(0, 1)).Address & "," & Range(rngCMDTYModelListAnchor.Offset(1, 0), rngCMDTYModelListAnchor.Offset(numCMDTYModels, 1)).Address & "," & """" & "CC_EQB_CMDTYB_CMDTYModel.Data" & """" & ")"
       
    ActiveSheet.Calculate
    
CleanUp:
    Application.EnableEvents = True
    Exit Sub
errorHandler:
    Call VBA.MsgBox("Error in creating EQ Model list", vbCritical + vbOKOnly, "Error")
    GoTo CleanUp
    End Sub

Private Sub ResizeButton_Click()
    On Error GoTo CleanUp
    Application.ScreenUpdating = False
    Dim temp1 As Variant: temp1 = Split(ComboBoxForeignModelNum.Text, " ")
    Dim temp2 As Variant: temp2 = Split(ComboBoxEQModelNum.Text, " ")
    Dim temp3 As Variant: temp3 = Split(ComboBoxCMDTYModelNum.Text, " ")
    If Not IsNumeric(temp1(0)) Or Not IsNumeric(temp2(0)) Or Not IsNumeric(temp3(0)) Then
        MsgBox "Fatal error when resizing ComboBox"
        GoTo CleanUp
    Else
        Resize CInt(temp1(0)), CInt(temp2(0)), CInt(temp3(0))
    End If
    On Error GoTo 0
CleanUp:
    Application.ScreenUpdating = True
    ActiveSheet.Calculate
End Sub


Public Sub Resize(numForeignModel As Integer, numEQModel As Integer, numCMDTYModel As Integer)
    On Error GoTo errorHandler
    Application.EnableEvents = False
    Application.ScreenUpdating = False
    
    Dim numFXModel%: numFXModel = numForeignModel
    Dim asn$: asn = ActiveSheet.Name
    Dim rngForeignModels As Range: Set rngForeignModels = Range("NX_" & asn & "_M_ForeignModels")
    Dim rngForeignModelList As Range: Set rngForeignModelList = Range("NX_" & asn & "_M_ForeignModelList")
    Dim rngFXModels As Range: Set rngFXModels = Range("NX_" & asn & "_M_FXModels")
    Dim rngFXModelList As Range: Set rngFXModelList = Range("NX_" & asn & "_M_FXModelList")
    Dim rngEQModels As Range: Set rngEQModels = Range("NX_" & asn & "_M_EQModels")
    Dim rngEQModelList As Range: Set rngEQModelList = Range("NX_" & asn & "_M_EQModelList")
    Dim rngCMDTYModels As Range: Set rngCMDTYModels = Range("NX_" & asn & "_M_CMDTYModels")
    Dim rngCMDTYModelList As Range: Set rngCMDTYModelList = Range("NX_" & asn & "_M_CMDTYModelList")
           
    Dim rngIRModelFactorNum As Range: Set rngIRModelFactorNum = Range("NX_" & asn & "_M_IRModelFactorNum")
    Dim rngCorrAnchor As Range: Set rngCorrAnchor = Range("NX_" & asn & "_M_CorrAnchor")
    Dim rngForeignModelListAnchor As Range: Set rngForeignModelListAnchor = rngForeignModelList.Cells(1, 1).Offset(-1, 0)
    Dim rngFXModelListAnchor As Range: Set rngFXModelListAnchor = rngFXModelList.Cells(1, 1).Offset(-1, 0)
    Dim rngEQModelListAnchor As Range: Set rngEQModelListAnchor = rngEQModelList.Cells(1, 1).Offset(-1, 0)
    Dim rngCMDTYModelListAnchor As Range: Set rngCMDTYModelListAnchor = rngCMDTYModelList.Cells(1, 1).Offset(-1, 0)
    
    rngForeignModelList.Clear
    rngFXModelList.Clear
    rngEQModelList.Clear
    rngCMDTYModelList.Clear
    rngCorrAnchor.CurrentRegion.Clear
    rngForeignModels = "<LINK>"
    rngFXModels = "<LINK>"
    rngEQModels = "<LINK>"
    rngCMDTYModels = "<LINK>"
    rngIRModelFactorNum.Value = 1
    
    'Resize the Foreign Model table
    Dim i%, j%
    For i = 1 To numForeignModel
        rngForeignModelListAnchor.Offset(i, 0) = "<LINK>"
        rngForeignModelListAnchor.Offset(i, 1) = 1
    Next i
    Range(rngForeignModelListAnchor.Offset(1, 0), rngForeignModelListAnchor.Offset(numForeignModel, 1)).Select
    ActiveWorkbook.Names.Add Name:="NX_" & asn & "_M_ForeignModelList", RefersTo:=Selection
    Set rngForeignModelList = Range("NX_" & asn & "_M_ForeignModelList")
    Call formatColorAndBorder(rngForeignModelList)
    Call addConditionalFormat(Range(rngForeignModelListAnchor.Offset(1, 0), rngForeignModelListAnchor.Offset(numForeignModel, 0)))
    Call addDataValidation(Range(rngForeignModelListAnchor.Offset(1, 1), rngForeignModelListAnchor.Offset(numForeignModel, 1)))
        
    'Resize the FX Model Table
    For i = 1 To numFXModel
        rngFXModelListAnchor.Offset(i, 0) = "<LINK>"
        rngFXModelListAnchor.Offset(i, 1) = 1
    Next i
    Range(rngFXModelListAnchor.Offset(1, 0), rngFXModelListAnchor.Offset(numFXModel, 1)).Select
    ActiveWorkbook.Names.Add Name:="NX_" & asn & "_M_FXModelList", RefersTo:=Selection
    Set rngFXModelList = Range("NX_" & asn & "_M_FXModelList")
    Call formatColorAndBorder(rngFXModelList)
    Call addConditionalFormat(Range(rngFXModelListAnchor.Offset(1, 0), rngFXModelListAnchor.Offset(numFXModel, 0)))
    Call addDataValidation(Range(rngFXModelListAnchor.Offset(1, 1), rngFXModelListAnchor.Offset(numFXModel, 1)))
          
    'Resize the EQ Model Table
    For i = 1 To numEQModel
        rngEQModelListAnchor.Offset(i, 0) = "<LINK>"
        rngEQModelListAnchor.Offset(i, 1) = "<LINK>"
        rngEQModelListAnchor.Offset(i, 2) = 1
    Next i
    Range(rngEQModelListAnchor.Offset(1, 0), rngEQModelListAnchor.Offset(numEQModel, 2)).Select
    ActiveWorkbook.Names.Add Name:="NX_" & asn & "_M_EQModelList", RefersTo:=Selection
    Set rngEQModelList = Range("NX_" & asn & "_M_EQModelList")
    Call formatColorAndBorder(rngEQModelList)
    Call addConditionalFormat(Range(rngEQModelListAnchor.Offset(1, 0), rngEQModelListAnchor.Offset(numEQModel, 1)))
    Call addDataValidation(Range(rngEQModelListAnchor.Offset(1, 2), rngEQModelListAnchor.Offset(numEQModel, 2)))
          
    'Resize the CMDTY Model Table
    For i = 1 To numCMDTYModel
        rngCMDTYModelListAnchor.Offset(i, 0) = "<LINK>"
        rngCMDTYModelListAnchor.Offset(i, 1) = "<LINK>"
        rngCMDTYModelListAnchor.Offset(i, 2) = 1
    Next i
    Range(rngCMDTYModelListAnchor.Offset(1, 0), rngCMDTYModelListAnchor.Offset(numCMDTYModel, 2)).Select
    ActiveWorkbook.Names.Add Name:="NX_" & asn & "_M_CMDTYModelList", RefersTo:=Selection
    Set rngCMDTYModelList = Range("NX_" & asn & "_M_CMDTYModelList")
    Call formatColorAndBorder(rngCMDTYModelList)
    Call addConditionalFormat(Range(rngCMDTYModelListAnchor.Offset(1, 0), rngCMDTYModelListAnchor.Offset(numCMDTYModel, 1)))
    Call addDataValidation(Range(rngCMDTYModelListAnchor.Offset(1, 2), rngCMDTYModelListAnchor.Offset(numCMDTYModel, 2)))
          
    rngCorrAnchor.Offset(0, 1) = "DomesticModelFactor1"
    rngCorrAnchor.Offset(1, 0) = "DomesticModelFactor1"
    
    For i = 1 To numFXModel
        rngCorrAnchor.Offset(0, i + 1) = "Foreign" & CStr(i) & "ModelFactor1"
        rngCorrAnchor.Offset(i + 1, 0) = "Foreign" & CStr(i) & "ModelFactor1"
    Next i
    
    For i = 1 To numForeignModel
        rngCorrAnchor.Offset(0, i + numFXModel + 1) = "FX" & CStr(i) & "ModelFactor1"
        rngCorrAnchor.Offset(i + numFXModel + 1, 0) = "FX" & CStr(i) & "ModelFactor1"
    Next i
    
    For i = 1 To numEQModel
        rngCorrAnchor.Offset(0, i + numFXModel + numForeignModel + 1) = "CR" & CStr(i) & "Factor1"
        rngCorrAnchor.Offset(i + numFXModel + numForeignModel + 1, 0) = "CR" & CStr(i) & "Factor1"
    Next i
    
    For i = 1 To numCMDTYModel
        rngCorrAnchor.Offset(0, i + numFXModel + numForeignModel + numEQModel + 1) = "=" & rngCMDTYModelListAnchor.Offset(i, 0).Address & "&" & """" & "Factor1" & """"
        rngCorrAnchor.Offset(i + numFXModel + numForeignModel + numEQModel + 1, 0) = "=" & rngCMDTYModelListAnchor.Offset(i, 0).Address & "&" & """" & "Factor1" & """"
    Next i
    
    For i = 1 To numFXModel + numForeignModel + numEQModel + 1
        rngCorrAnchor.Offset(i, i) = 1
        For j = i + 1 To numFXModel + numForeignModel + numEQModel + 1
            rngCorrAnchor.Offset(i, j) = 0
        Next j
    Next i
    
    rngCorrAnchor.Formula = "=nxlibmatrix(" & Range(rngCorrAnchor.Offset(0, 1), rngCorrAnchor.Offset(0, numFXModel + numForeignModel + numEQModel + numCMDTYModel + 1)).Address & "," _
                                            & Range(rngCorrAnchor.Offset(1, 0), rngCorrAnchor.Offset(numFXModel + numForeignModel + numEQModel + numCMDTYModel + 1, 0)).Address & "," _
                                            & Range(rngCorrAnchor.Offset(1, 1), rngCorrAnchor.Offset(numFXModel + numForeignModel + numEQModel + numCMDTYModel + 1, numFXModel + numForeignModel + numEQModel + numCMDTYModel + 1)).Address & "," _
                                            & """" & "CC_EQB_CMDTYB_Corr.Data" & """" & ")"
                                            
    Call formatColorAndBorder(rngCorrAnchor)
    Call formatColorAndBorder(Range(rngCorrAnchor.Offset(1, 1), rngCorrAnchor.Offset(numFXModel + numForeignModel + numEQModel + numCMDTYModel + 1, numFXModel + numForeignModel + numEQModel + numCMDTYModel + 1)))
    Call formatHeader(Range(rngCorrAnchor.Offset(0, 1), rngCorrAnchor.Offset(0, numFXModel + numForeignModel + numEQModel + numCMDTYModel + 1)))
    Call formatHeader(Range(rngCorrAnchor.Offset(1, 0), rngCorrAnchor.Offset(numFXModel + numForeignModel + numEQModel + numCMDTYModel + 1, 0)))
    
CleanUp:
    Application.EnableEvents = True
    Application.ScreenUpdating = True
    Set rngForeignModels = Nothing
    Set rngForeignModelList = Nothing
    Set rngForeignModelListAnchor = Nothing
    Set rngFXModels = Nothing
    Set rngFXModelList = Nothing
    Set rngFXModelListAnchor = Nothing
    Set rngEQModels = Nothing
    Set rngEQModelList = Nothing
    Set rngEQModelListAnchor = Nothing
    Set rngCorrAnchor = Nothing
    Exit Sub
   
errorHandler:
    Call VBA.MsgBox("Error in resizing the model", vbCritical + vbOKOnly, "Error")
    GoTo CleanUp
    End Sub

Private Sub Worksheet_Activate()

    On Error GoTo CleanUp
    ComboBoxForeignModelNum.Clear
    ComboBoxForeignModelNum.AddItem ("1 Foreign Model")
    ComboBoxForeignModelNum.AddItem ("2 Foreign Models")
    ComboBoxForeignModelNum.AddItem ("4 Foreign Models")
    ComboBoxForeignModelNum.AddItem ("5 Foreign Models")
    ComboBoxForeignModelNum.AddItem ("6 Foreign Models")
    ComboBoxForeignModelNum.AddItem ("7 Foreign Models")
    ComboBoxForeignModelNum.AddItem ("8 Foreign Models")
    ComboBoxForeignModelNum.AddItem ("9 Foreign Models")
    ComboBoxForeignModelNum.AddItem ("10 Foreign Models")
    ComboBoxForeignModelNum.Text = "1 Foreign Model"
    
    ComboBoxEQModelNum.Clear
    ComboBoxEQModelNum.AddItem ("1 EQ Model")
    ComboBoxEQModelNum.AddItem ("2 EQ Models")
    ComboBoxEQModelNum.AddItem ("3 EQ Models")
    ComboBoxEQModelNum.AddItem ("4 EQ Models")
    ComboBoxEQModelNum.AddItem ("5 EQ Models")
    ComboBoxEQModelNum.AddItem ("6 EQ Models")
    ComboBoxEQModelNum.AddItem ("7 EQ Models")
    ComboBoxEQModelNum.AddItem ("8 EQ Models")
    ComboBoxEQModelNum.AddItem ("9 EQ Models")
    ComboBoxEQModelNum.AddItem ("10 EQ Models")
    ComboBoxEQModelNum.Text = "1 EQ Model"
    
    ComboBoxCMDTYModelNum.Clear
    ComboBoxCMDTYModelNum.AddItem ("1 CMDTY Model")
    ComboBoxCMDTYModelNum.AddItem ("2 CMDTY Models")
    ComboBoxCMDTYModelNum.AddItem ("3 CMDTY Models")
    ComboBoxCMDTYModelNum.AddItem ("4 CMDTY Models")
    ComboBoxCMDTYModelNum.AddItem ("5 CMDTY Models")
    ComboBoxCMDTYModelNum.AddItem ("6 CMDTY Models")
    ComboBoxCMDTYModelNum.AddItem ("7 CMDTY Models")
    ComboBoxCMDTYModelNum.AddItem ("8 CMDTY Models")
    ComboBoxCMDTYModelNum.AddItem ("9 CMDTY Models")
    ComboBoxCMDTYModelNum.AddItem ("10 CMDTY Models")
    ComboBoxCMDTYModelNum.Text = "1 CMDTY Model"
    
    hasBeenInitialised = True

CleanUp:
    ActiveSheet.Calculate
End Sub


'Resizing the correlation matrix after changing the Factor number for any model
Private Sub Worksheet_Change(ByVal Target As Range)
    On Error GoTo CleanUp
    Application.EnableEvents = False
    Application.ScreenUpdating = False
    
    Dim asn$: asn = ActiveSheet.Name
    Dim rngForeignModelList As Range: Set rngForeignModelList = Range("NX_" & asn & "_M_ForeignModelList")
    Dim numForeignModels%: numForeignModels = rngForeignModelList.Rows.count
    Dim rngForeignModelFactorNumList As Range: Set rngForeignModelFactorNumList = Range(rngForeignModelList.Cells(1, 2), rngForeignModelList.Cells(numForeignModels, 2))
    Dim rngFXModelList As Range: Set rngFXModelList = Range("NX_" & asn & "_M_FXModelList")
    Dim numFXModels%: numFXModels = rngFXModelList.Rows.count
    Dim rngFXModelFactorNumList As Range: Set rngFXModelFactorNumList = Range(rngFXModelList(1, 2), rngFXModelList(numFXModels, 2))
    Dim rngEQModelList As Range: Set rngEQModelList = Range("NX_" & asn & "_M_EQModelList")
    Dim numEQModels%: numEQModels = rngEQModelList.Rows.count
    Dim rngEQModelFactorNumList As Range: Set rngEQModelFactorNumList = Range(rngEQModelList.Cells(1, 3), rngEQModelList.Cells(numEQModels, 3))
    Dim rngCMDTYModelList As Range: Set rngCMDTYModelList = Range("NX_" & asn & "_M_CMDTYModelList")
    Dim numCMDTYModels%: numCMDTYModels = rngCMDTYModelList.Rows.count
    Dim rngCMDTYModelFactorNumList As Range: Set rngCMDTYModelFactorNumList = Range(rngCMDTYModelList.Cells(1, 3), rngCMDTYModelList.Cells(numCMDTYModels, 3))
    Dim rngIRModelFactorNum As Range: Set rngIRModelFactorNum = Range("NX_" & asn & "_M_IRMOdelFactorNum")
    
    If Intersect(Target, rngForeignModelFactorNumList) Is Nothing And Intersect(Target, rngFXModelFactorNumList) Is Nothing And _
        Intersect(Target, rngEQModelFactorNumList) Is Nothing And Intersect(Target, rngCMDTYModelFactorNumList) Is Nothing And _
        Intersect(Target, rngIRModelFactorNum) Is Nothing Then
        GoTo CleanUp
    End If
    
    Dim rngCorrAnchor As Range: Set rngCorrAnchor = Range("NX_" & asn & "_M_CorrAnchor")
    rngCorrAnchor.CurrentRegion.Clear
    Dim IRModelFactorNum%: IRModelFactorNum = rngIRModelFactorNum.Value
    Dim FXModelFactorNum%, ForeignModelFactorNum%, EQModelFactorNum%, CMDTYModelFactorNum%
    Dim i%, j%
    Dim count%: count = 0
    For i = 1 To IRModelFactorNum
        count = count + 1
        rngCorrAnchor.Offset(0, count) = "DomesticModelFactor" & CStr(i)
        rngCorrAnchor.Offset(count, 0) = "DomesticModelFactor" & CStr(i)
    Next i
    
    For i = 1 To numFXModels
        FXModelFactorNum = rngFXModelList.Cells(i, 2).Value
        For j = 1 To FXModelFactorNum
            count = count + 1
            rngCorrAnchor.Offset(0, count) = "FX" & CStr(i) & "ModelFactor" & CStr(j)
            rngCorrAnchor.Offset(count, 0) = "FX" & CStr(i) & "ModelFactor" & CStr(j)
        Next j
    Next i
    
    For i = 1 To numForeignModels
        ForeignModelFactorNum = rngForeignModelList.Cells(i, 2).Value
        For j = 1 To ForeignModelFactorNum
            count = count + 1
            rngCorrAnchor.Offset(0, count) = "Foreign" & CStr(i) & "ModelFactor" & CStr(j)
            rngCorrAnchor.Offset(count, 0) = "Foreign" & CStr(i) & "ModelFactor" & CStr(j)
        Next j
    Next i
    
    For i = 1 To numEQModels
        EQModelFactorNum = rngEQModelList.Cells(i, 3).Value
        For j = 1 To EQModelFactorNum
            count = count + 1
            rngCorrAnchor.Offset(0, count) = "CR" & CStr(i) & "Factor" & CStr(j)
            rngCorrAnchor.Offset(count, 0) = "CR" & CStr(i) & "Factor" & CStr(j)
        Next j
    Next i
    
    For i = 1 To numCMDTYModels
        CMDTYModelFactorNum = rngCMDTYModelList.Cells(i, 3).Value
        For j = 1 To CMDTYModelFactorNum
            count = count + 1
            rngCorrAnchor.Offset(0, count) = "=" & rngCMDTYModelList.Cells(i, 1).Address & "&" & """" & "Factor" & CStr(j) & """"
            rngCorrAnchor.Offset(count, 0) = "=" & rngCMDTYModelList.Cells(i, 1).Address & "&" & """" & "Factor" & CStr(j) & """"
        Next j
    Next i
    
    For i = 1 To count
        rngCorrAnchor.Offset(i, i) = 1
        For j = i + 1 To count
            rngCorrAnchor.Offset(i, j) = 0
        Next j
    Next i
    
    rngCorrAnchor.Formula = "=nxlibmatrix(" & Range(rngCorrAnchor.Offset(0, 1), rngCorrAnchor.Offset(0, count)).Address & "," _
                                            & Range(rngCorrAnchor.Offset(1, 0), rngCorrAnchor.Offset(count, 0)).Address & "," _
                                            & Range(rngCorrAnchor.Offset(1, 1), rngCorrAnchor.Offset(count, count)).Address & "," _
                                            & """" & "CC_EQB_CMDTYB_Corr.Data" & """" & ")"
    
    
    Call formatColorAndBorder(rngCorrAnchor)
    Call formatColorAndBorder(Range(rngCorrAnchor.Offset(1, 1), rngCorrAnchor.Offset(count, count)))
    Call formatHeader(Range(rngCorrAnchor.Offset(0, 1), rngCorrAnchor.Offset(0, count)))
    Call formatHeader(Range(rngCorrAnchor.Offset(1, 0), rngCorrAnchor.Offset(count, 0)))
       
    Range(rngCorrAnchor.Offset(1, 1), rngCorrAnchor.Offset(count, count)).Select
    
CleanUp:
    Application.EnableEvents = True
    Application.ScreenUpdating = True
End Sub





''' Formatting Module

Private Sub addConditionalFormat(tempRng As Range)
    tempRng.Select
    Selection.FormatConditions.Delete
    Selection.FormatConditions.Add Type:=xlCellValue, Operator:=xlEqual, _
        Formula1:="=""<LINK>"""
    Selection.FormatConditions(1).Interior.ColorIndex = 3
        
    Cells(1, 1).Select
End Sub

Private Sub formatHeader(tempRng As Range)
    tempRng.Select
    With Selection.Interior
        .Pattern = xlSolid
        .PatternColorIndex = xlAutomatic
        .Color = 10040115
    End With
    With Selection.Font
        .ColorIndex = 2
        .Name = "Calibri"
        .Size = 11
    End With
    Cells(1, 1).Select
End Sub

Private Sub formatColorAndBorder(tempRng As Range)
    tempRng.Select
    Selection.HorizontalAlignment = xlCenter
    Selection.Borders(xlDiagonalDown).LineStyle = xlNone
    Selection.Borders(xlDiagonalUp).LineStyle = xlNone
    With Selection.Borders(xlEdgeLeft)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlEdgeTop)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlEdgeRight)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .Weight = xlThin
    End With
    Selection.Borders(xlInsideVertical).LineStyle = xlNone
    Selection.Borders(xlInsideHorizontal).LineStyle = xlNone
    With Selection.Interior
        .Pattern = xlSolid
        .PatternColorIndex = xlAutomatic
        .ColorIndex = 2
    End With
    With Selection.Font
        .Name = "Calibri"
        .Size = 11
    End With
    Cells(1, 1).Select

End Sub

Private Sub addDataValidation(tempRng As Range)
    tempRng.Select
    With Selection.Validation
        .Delete
        .Add Type:=xlValidateWholeNumber, AlertStyle:=xlValidAlertStop, _
        Operator:=xlGreaterEqual, Formula1:="1"
        .IgnoreBlank = True
        .InCellDropdown = True
        .InputTitle = ""
        .ErrorTitle = "Incorrect Input"
        .InputMessage = ""
        .ErrorMessage = "Please input an integer"
        .ShowInput = True
        .ShowError = True
    End With
    Cells(1, 1).Select
End Sub

Attribute VB_Name = "Sheet19"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "ComboBoxCMDTYModelNum, 1, 0, MSForms, ComboBox"
Attribute VB_Control = "ResizeButton, 2, 1, MSForms, CommandButton"
Attribute VB_Control = "CreateButton, 3, 2, MSForms, CommandButton"
Option Explicit
Private hasBeenInitialised As Boolean


Private Sub CreateButton_Click()
    On Error GoTo errorHandler
    Application.EnableEvents = False
    Dim rngCMDTYModelList As Range: Set rngCMDTYModelList = Range("NX_" & ActiveSheet.Name & "_M_CMDTYModelList")
    Dim rngModelListAnchor As Range: Set rngModelListAnchor = rngCMDTYModelList.Cells(1, 1).Offset(-1, 0)
    Dim numCMDTYModels%: numCMDTYModels = rngCMDTYModelList.Rows.count
    Dim rngCMDTYModels As Range: Set rngCMDTYModels = Range("NX_" & ActiveSheet.Name & "_M_CMDTYModels")
    rngCMDTYModels.Formula = "=nxlibdata(" & Range(rngModelListAnchor, rngModelListAnchor.Offset(0, 1)).Address & "," & Range(rngModelListAnchor.Offset(1, 0), rngModelListAnchor.Offset(numCMDTYModels, 1)).Address & "," & """" & "CMDTYB_CMDTYModel.Data" & """" & ")"
    ActiveSheet.Calculate
CleanUp:
    Application.EnableEvents = True
    Exit Sub
errorHandler:
    Call VBA.MsgBox("Error in creating model table data", vbCritical + vbOKOnly, "Error")
    GoTo CleanUp
    End Sub

Private Sub ResizeButton_Click()
    On Error GoTo CleanUp
    Application.ScreenUpdating = False
    Dim temp As Variant: temp = Split(ComboBoxCMDTYModelNum.Text, " ")
    If Not IsNumeric(temp(0)) Then
        MsgBox "Fatal error when resizing ComboBox"
        GoTo CleanUp
    Else
        Resize CInt(temp(0))
    End If
    On Error GoTo 0
    
CleanUp:
    Application.ScreenUpdating = True
    ActiveSheet.Calculate
End Sub



Public Sub Resize(numCMDTYModel As Integer)
    On Error GoTo errorHandler
    Application.EnableEvents = False
    Application.ScreenUpdating = False
    
    Dim asn$: asn = ActiveSheet.Name
    Dim rngCMDTYModels As Range: Set rngCMDTYModels = Range("NX_" & asn & "_M_CMDTYModels")
    Dim rngCMDTYModelList As Range: Set rngCMDTYModelList = Range("NX_" & asn & "_M_CMDTYModelList")
    Dim rngIRModelFactorNum As Range: Set rngIRModelFactorNum = Range("NX_" & asn & "_M_IRModelFactorNum")
    Dim rngCorrAnchor As Range: Set rngCorrAnchor = Range("NX_" & asn & "_M_CorrAnchor")
    Dim rngCMDTYModelListAnchor As Range: Set rngCMDTYModelListAnchor = rngCMDTYModelList.Cells(1, 1).Offset(-1, 0)
        
    rngCMDTYModelList.Clear
    rngCorrAnchor.CurrentRegion.Clear
    rngCMDTYModels = "<LINK>"
    rngIRModelFactorNum.Value = 1
    
    'Resize the CR Model table
    Dim i%, j%
    For i = 1 To numCMDTYModel
        rngCMDTYModelListAnchor.Offset(i, 0) = "<LINK>"
        rngCMDTYModelListAnchor.Offset(i, 1) = "<LINK>"
        rngCMDTYModelListAnchor.Offset(i, 2) = 1
    Next i
    Range(rngCMDTYModelListAnchor.Offset(1, 0), rngCMDTYModelListAnchor.Offset(numCMDTYModel, 2)).Select
    ActiveWorkbook.Names.Add Name:="NX_" & asn & "_M_CMDTYModelList", RefersTo:=Selection
    Set rngCMDTYModelList = Range("NX_" & asn & "_M_CMDTYModelList")
    Call formatColorAndBorder(rngCMDTYModelList)
    Call addConditionalFormat(Range(rngCMDTYModelListAnchor.Offset(1, 0), rngCMDTYModelListAnchor.Offset(numCMDTYModel, 1)))
    Call addDataValidation(Range(rngCMDTYModelListAnchor.Offset(1, 2), rngCMDTYModelListAnchor.Offset(numCMDTYModel, 2)))
    
    rngCorrAnchor.Offset(0, 1) = "DomesticModelFactor1"
    rngCorrAnchor.Offset(1, 0) = "DomesticModelFactor1"

    For i = 1 To numCMDTYModel
        rngCorrAnchor.Offset(0, i + 1) = "=" & rngCMDTYModelList.Cells(i, 1).Address & "&" & """" & "Factor1" & """"
        rngCorrAnchor.Offset(i + 1, 0) = "=" & rngCMDTYModelList.Cells(i, 1).Address & "&" & """" & "Factor1" & """"
    Next i
    
    For i = 1 To numCMDTYModel + 1
        rngCorrAnchor.Offset(i, i) = 1
        For j = i + 1 To numCMDTYModel + 1
            rngCorrAnchor.Offset(i, j) = 0
        Next j
    Next i
    
    rngCorrAnchor.Formula = "=nxlibmatrix(" & Range(rngCorrAnchor.Offset(0, 1), rngCorrAnchor.Offset(0, numCMDTYModel + 1)).Address & "," _
                                            & Range(rngCorrAnchor.Offset(1, 0), rngCorrAnchor.Offset(numCMDTYModel + 1, 0)).Address & "," _
                                            & Range(rngCorrAnchor.Offset(1, 1), rngCorrAnchor.Offset(numCMDTYModel + 1, numCMDTYModel + 1)).Address & "," _
                                            & """" & "CMDTYB_Corr.Data" & """" & ")"
    Call formatColorAndBorder(rngCorrAnchor)
    Call formatColorAndBorder(Range(rngCorrAnchor.Offset(1, 1), rngCorrAnchor.Offset(numCMDTYModel + 1, numCMDTYModel + 1)))
    Call formatHeader(Range(rngCorrAnchor.Offset(0, 1), rngCorrAnchor.Offset(0, numCMDTYModel + 1)))
    Call formatHeader(Range(rngCorrAnchor.Offset(1, 0), rngCorrAnchor.Offset(numCMDTYModel + 1, 0)))

CleanUp:
    Application.EnableEvents = True
    Application.ScreenUpdating = True
    Exit Sub
errorHandler:
    Call VBA.MsgBox("Error in resizing the model", vbCritical + vbOKOnly, "Error")
    GoTo CleanUp
    End Sub


Private Sub Worksheet_Activate()
    On Error GoTo CleanUp
    ComboBoxCMDTYModelNum.Clear
    ComboBoxCMDTYModelNum.AddItem ("1 CMDTY Model")
    ComboBoxCMDTYModelNum.AddItem ("2 CMDTY Models")
    ComboBoxCMDTYModelNum.AddItem ("3 CMDTY Models")
    ComboBoxCMDTYModelNum.AddItem ("4 CMDTY Models")
    ComboBoxCMDTYModelNum.AddItem ("5 CMDTY Models")
    ComboBoxCMDTYModelNum.AddItem ("6 CMDTY Models")
    ComboBoxCMDTYModelNum.AddItem ("7 CMDTY Models")
    ComboBoxCMDTYModelNum.AddItem ("8 CMDTY Models")
    ComboBoxCMDTYModelNum.AddItem ("9 CMDTY Models")
    ComboBoxCMDTYModelNum.AddItem ("10 CMDTY Models")
    ComboBoxCMDTYModelNum.Text = "1 CMDTY Model"
    hasBeenInitialised = True

CleanUp:
    ActiveSheet.Calculate
End Sub

'Resizing the correlation matrix after changing the Factor number for any model
Private Sub Worksheet_Change(ByVal Target As Range)
    On Error GoTo CleanUp
    Application.EnableEvents = False
    Application.ScreenUpdating = False
    
    Dim asn$: asn = ActiveSheet.Name
    Dim rngCMDTYModelList As Range: Set rngCMDTYModelList = Range("NX_" & asn & "_M_CMDTYModelList")
    Dim numCMDTYModels%: numCMDTYModels = rngCMDTYModelList.Rows.count
    Dim rngCMDTYModelFactorNumList As Range: Set rngCMDTYModelFactorNumList = Range(rngCMDTYModelList.Cells(1, 3), rngCMDTYModelList.Cells(numCMDTYModels, 3))
    Dim rngIRModelFactorNum As Range: Set rngIRModelFactorNum = Range("NX_" & asn & "_M_IRMOdelFactorNum")
    
    If Intersect(Target, rngCMDTYModelFactorNumList) Is Nothing And Intersect(Target, rngIRModelFactorNum) Is Nothing Then
        GoTo CleanUp
    End If
            
    Dim rngCorrAnchor As Range: Set rngCorrAnchor = Range("NX_" & asn & "_M_CorrAnchor")
    rngCorrAnchor.CurrentRegion.Clear
    Dim IRModelFactorNum%: IRModelFactorNum = rngIRModelFactorNum.Value
    Dim CMDTYModelFactorNum%
    Dim i%, j%
    Dim count%: count = 0
    
    For i = 1 To IRModelFactorNum
        count = count + 1
        rngCorrAnchor.Offset(0, count) = "DomesticModelFactor" & CStr(i)
        rngCorrAnchor.Offset(count, 0) = "DomesticModelFactor" & CStr(i)
    Next i
    
    For i = 1 To numCMDTYModels
        CMDTYModelFactorNum = rngCMDTYModelList.Cells(i, 3).Value
        For j = 1 To CMDTYModelFactorNum
            count = count + 1
            rngCorrAnchor.Offset(0, count) = "=" & rngCMDTYModelList.Cells(i, 1).Address & "&" & """" & "Factor" & CStr(j) & """"
            rngCorrAnchor.Offset(count, 0) = "=" & rngCMDTYModelList.Cells(i, 1).Address & "&" & """" & "Factor" & CStr(j) & """"
        Next j
    Next i
    
    For i = 1 To count
        rngCorrAnchor.Offset(i, i) = 1
        For j = i + 1 To count
            rngCorrAnchor.Offset(i, j) = 0
        Next j
    Next i
    
    rngCorrAnchor.Formula = "=nxlibmatrix(" & Range(rngCorrAnchor.Offset(0, 1), rngCorrAnchor.Offset(0, count)).Address & "," _
                                            & Range(rngCorrAnchor.Offset(1, 0), rngCorrAnchor.Offset(count, 0)).Address & "," _
                                            & Range(rngCorrAnchor.Offset(1, 1), rngCorrAnchor.Offset(count, count)).Address & "," _
                                            & """" & "CMDTYB_Corr.Data" & """" & ")"
    
    
    Call formatColorAndBorder(rngCorrAnchor)
    Call formatColorAndBorder(Range(rngCorrAnchor.Offset(1, 1), rngCorrAnchor.Offset(count, count)))
    Call formatHeader(Range(rngCorrAnchor.Offset(0, 1), rngCorrAnchor.Offset(0, count)))
    Call formatHeader(Range(rngCorrAnchor.Offset(1, 0), rngCorrAnchor.Offset(count, 0)))
       
    Range(rngCorrAnchor.Offset(1, 1), rngCorrAnchor.Offset(count, count)).Select
    
CleanUp:
    Application.EnableEvents = True
    Application.ScreenUpdating = True
End Sub



''' Formatting Module

Private Sub addConditionalFormat(tempRng As Range)
    tempRng.Select
    Selection.FormatConditions.Delete
    Selection.FormatConditions.Add Type:=xlCellValue, Operator:=xlEqual, _
        Formula1:="=""<LINK>"""
    Selection.FormatConditions(1).Interior.ColorIndex = 3
    Cells(1, 1).Select
End Sub

Private Sub formatHeader(tempRng As Range)
    tempRng.Select
    With Selection.Interior
        .Pattern = xlSolid
        .PatternColorIndex = xlAutomatic
        .Color = 10040115
    End With
    With Selection.Font
        .ColorIndex = 2
        .Name = "Calibri"
        .Size = 11
    End With
    Cells(1, 1).Select
End Sub

Private Sub formatColorAndBorder(tempRng As Range)
    tempRng.Select
    Selection.HorizontalAlignment = xlCenter
    Selection.Borders(xlDiagonalDown).LineStyle = xlNone
    Selection.Borders(xlDiagonalUp).LineStyle = xlNone
    With Selection.Borders(xlEdgeLeft)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlEdgeTop)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlEdgeRight)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .Weight = xlThin
    End With
    Selection.Borders(xlInsideVertical).LineStyle = xlNone
    Selection.Borders(xlInsideHorizontal).LineStyle = xlNone
    With Selection.Interior
        .Pattern = xlSolid
        .PatternColorIndex = xlAutomatic
        .ColorIndex = 2
    End With
    With Selection.Font
        .Name = "Calibri"
        .Size = 11
    End With
    Cells(1, 1).Select
End Sub


Private Sub addDataValidation(tempRng As Range)
    tempRng.Select
    With Selection.Validation
        .Delete
        .Add Type:=xlValidateWholeNumber, AlertStyle:=xlValidAlertStop, _
        Operator:=xlGreaterEqual, Formula1:="1"
        .IgnoreBlank = True
        .InCellDropdown = True
        .InputTitle = ""
        .ErrorTitle = "Incorrect Input"
        .InputMessage = ""
        .ErrorMessage = "Please input an integer"
        .ShowInput = True
        .ShowError = True
    End With
    Cells(1, 1).Select
End Sub




Attribute VB_Name = "Sheet2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet20"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "ComboBoxInfModelNum, 1, 0, MSForms, ComboBox"
Attribute VB_Control = "ResizeButton, 2, 1, MSForms, CommandButton"
Attribute VB_Control = "CreateButton, 3, 2, MSForms, CommandButton"
Option Explicit
Private hasBeenInitialised As Boolean


Private Sub CreateButton_Click()
    On Error GoTo errorHandler
    Application.EnableEvents = False
    Dim rngINFModelList As Range: Set rngINFModelList = Range("NX_" & ActiveSheet.Name & "_M_INFModelList")
    Dim rngModelListAnchor As Range: Set rngModelListAnchor = rngINFModelList.Cells(1, 1).Offset(-1, 0)
    Dim numINFModels%: numINFModels = rngINFModelList.Rows.count
    Dim rngINFModels As Range: Set rngINFModels = Range("NX_" & ActiveSheet.Name & "_M_INFModels")
    rngINFModels.Formula = "=nxlibdata(" & Range(rngModelListAnchor, rngModelListAnchor.Offset(0, 1)).Address & "," & Range(rngModelListAnchor.Offset(1, 0), rngModelListAnchor.Offset(numINFModels, 1)).Address & "," & """" & "IR_INFB_INFModel.Data" & """" & ")"
    ActiveSheet.Calculate
CleanUp:
    Application.EnableEvents = True
    Exit Sub
errorHandler:
    Call VBA.MsgBox("Error in creating model table data", vbCritical + vbOKOnly, "Error")
    GoTo CleanUp
    End Sub

Private Sub ResizeButton_Click()
    On Error GoTo CleanUp
    Application.ScreenUpdating = False
    Dim temp As Variant: temp = Split(ComboBoxINFModelNum.Text, " ")
    If Not IsNumeric(temp(0)) Then
        MsgBox "Fatal error when resizing ComboBox"
        GoTo CleanUp
    Else
        Resize CInt(temp(0))
    End If
    On Error GoTo 0
    
CleanUp:
    Application.ScreenUpdating = True
    ActiveSheet.Calculate
End Sub



Public Sub Resize(numINFModel As Integer)
    On Error GoTo errorHandler
    Application.EnableEvents = False
    Application.ScreenUpdating = False
    
    Dim asn$: asn = ActiveSheet.Name
    Dim rngINFModels As Range: Set rngINFModels = Range("NX_" & asn & "_M_INFModels")
    Dim rngINFModelList As Range: Set rngINFModelList = Range("NX_" & asn & "_M_INFModelList")
    Dim rngIRModelFactorNum As Range: Set rngIRModelFactorNum = Range("NX_" & asn & "_M_IRModelFactorNum")
    Dim rngCorrAnchor As Range: Set rngCorrAnchor = Range("NX_" & asn & "_M_CorrAnchor")
    Dim rngINFModelListAnchor As Range: Set rngINFModelListAnchor = rngINFModelList.Cells(1, 1).Offset(-1, 0)
        
    rngINFModelList.Clear
    rngCorrAnchor.CurrentRegion.Clear
    rngINFModels = "<LINK>"
    rngIRModelFactorNum.Value = 1
    
    'Resize the INF Model table
    Dim i%, j%
    For i = 1 To numINFModel
        rngINFModelListAnchor.Offset(i, 0) = "<LINK>"
        rngINFModelListAnchor.Offset(i, 1) = "<LINK>"
    Next i
    Range(rngINFModelListAnchor.Offset(1, 0), rngINFModelListAnchor.Offset(numINFModel, 1)).Select
    ActiveWorkbook.Names.Add Name:="NX_" & asn & "_M_INFModelList", RefersTo:=Selection
    Set rngINFModelList = Range("NX_" & asn & "_M_INFModelList")
    Call formatColorAndBorder(rngINFModelList)
    Call addConditionalFormat(Range(rngINFModelListAnchor.Offset(1, 0), rngINFModelListAnchor.Offset(numINFModel, 1)))
    
    rngCorrAnchor.Offset(0, 1) = "DomesticModelFactor1"
    rngCorrAnchor.Offset(1, 0) = "DomesticModelFactor1"

    For i = 1 To numINFModel
        rngCorrAnchor.Offset(0, i + 1) = "RealRate" & CStr(i) & "Model"
        rngCorrAnchor.Offset(i + 1, 0) = "RealRate" & CStr(i) & "Model"
    Next i
    
    For i = 1 To numINFModel
        rngCorrAnchor.Offset(0, i + numINFModel + 1) = "CPI" & CStr(i) & "Model"
        rngCorrAnchor.Offset(i + numINFModel + 1, 0) = "CPI" & CStr(i) & "Model"
    Next i
    
    For i = 1 To 2 * numINFModel + 1
        rngCorrAnchor.Offset(i, i) = 1
        For j = i + 1 To 2 * numINFModel + 1
            rngCorrAnchor.Offset(i, j) = 0
        Next j
    Next i
    
    rngCorrAnchor.Formula = "=nxlibmatrix(" & Range(rngCorrAnchor.Offset(0, 1), rngCorrAnchor.Offset(0, 2 * numINFModel + 1)).Address & "," _
                                            & Range(rngCorrAnchor.Offset(1, 0), rngCorrAnchor.Offset(2 * numINFModel + 1, 0)).Address & "," _
                                            & Range(rngCorrAnchor.Offset(1, 1), rngCorrAnchor.Offset(2 * numINFModel + 1, 2 * numINFModel + 1)).Address & "," _
                                            & """" & "IR_INFB_Corr.Data" & """" & ")"
    Call formatColorAndBorder(rngCorrAnchor)
    Call formatColorAndBorder(Range(rngCorrAnchor.Offset(1, 1), rngCorrAnchor.Offset(2 * numINFModel + 1, 2 * numINFModel + 1)))
    Call formatHeader(Range(rngCorrAnchor.Offset(0, 1), rngCorrAnchor.Offset(0, 2 * numINFModel + 1)))
    Call formatHeader(Range(rngCorrAnchor.Offset(1, 0), rngCorrAnchor.Offset(2 * numINFModel + 1, 0)))

CleanUp:
    Application.EnableEvents = True
    Application.ScreenUpdating = True
    Exit Sub
errorHandler:
    Call VBA.MsgBox("Error in resizing the model", vbCritical + vbOKOnly, "Error")
    GoTo CleanUp
    End Sub


Private Sub Worksheet_Activate()
    On Error GoTo CleanUp
    ComboBoxINFModelNum.Clear
    ComboBoxINFModelNum.AddItem ("1 Inflation Model")
    ComboBoxINFModelNum.AddItem ("2 Inflation Models")
    ComboBoxINFModelNum.AddItem ("3 Inflation Models")
    ComboBoxINFModelNum.AddItem ("4 Inflation Models")
    ComboBoxINFModelNum.AddItem ("5 Inflation Models")
    ComboBoxINFModelNum.AddItem ("6 Inflation Models")
    ComboBoxINFModelNum.AddItem ("7 Inflation Models")
    ComboBoxINFModelNum.AddItem ("8 Inflation Models")
    ComboBoxINFModelNum.AddItem ("9 Inflation Models")
    ComboBoxINFModelNum.AddItem ("10 Inflation Models")
    ComboBoxINFModelNum.Text = "1 Inflation Model"
    hasBeenInitialised = True

CleanUp:
    ActiveSheet.Calculate
End Sub

'Resizing the correlation matrix after changing the Factor number for any model
Private Sub Worksheet_Change(ByVal Target As Range)
    On Error GoTo CleanUp
    Application.EnableEvents = False
    Application.ScreenUpdating = False
    
    Dim asn$: asn = ActiveSheet.Name
    Dim rngINFModelList As Range: Set rngINFModelList = Range("NX_" & asn & "_M_INFModelList")
    Dim numINFModels%: numINFModels = rngINFModelList.Rows.count
    Dim rngIRModelFactorNum As Range: Set rngIRModelFactorNum = Range("NX_" & asn & "_M_IRModelFactorNum")
    
    If Intersect(Target, rngIRModelFactorNum) Is Nothing Then
        GoTo CleanUp
    End If
            
    Dim rngCorrAnchor As Range: Set rngCorrAnchor = Range("NX_" & asn & "_M_CorrAnchor")
    rngCorrAnchor.CurrentRegion.Clear
    Dim IRModelFactorNum%: IRModelFactorNum = rngIRModelFactorNum.Value
    Dim i%, j%
    Dim count%: count = 0
    
    For i = 1 To IRModelFactorNum
        count = count + 1
        rngCorrAnchor.Offset(0, count) = "DomesticModelFactor" & CStr(i)
        rngCorrAnchor.Offset(count, 0) = "DomesticModelFactor" & CStr(i)
    Next i
    
    For i = 1 To numINFModels
        count = count + 1
        rngCorrAnchor.Offset(0, count) = "RealRate" & CStr(i) & "Model"
        rngCorrAnchor.Offset(count, 0) = "RealRate" & CStr(i) & "Model"
    Next i
    
    For i = 1 To numINFModels
        count = count + 1
        rngCorrAnchor.Offset(0, count) = "CPI" & CStr(i) & "Model"
        rngCorrAnchor.Offset(count, 0) = "CPI" & CStr(i) & "Model"
    Next i
    
    For i = 1 To count
        rngCorrAnchor.Offset(i, i) = 1
        For j = i + 1 To count
            rngCorrAnchor.Offset(i, j) = 0
        Next j
    Next i
    
    rngCorrAnchor.Formula = "=nxlibmatrix(" & Range(rngCorrAnchor.Offset(0, 1), rngCorrAnchor.Offset(0, count)).Address & "," _
                                            & Range(rngCorrAnchor.Offset(1, 0), rngCorrAnchor.Offset(count, 0)).Address & "," _
                                            & Range(rngCorrAnchor.Offset(1, 1), rngCorrAnchor.Offset(count, count)).Address & "," _
                                            & """" & "IR_INFB_Corr.Data" & """" & ")"
    
    
    Call formatColorAndBorder(rngCorrAnchor)
    Call formatColorAndBorder(Range(rngCorrAnchor.Offset(1, 1), rngCorrAnchor.Offset(count, count)))
    Call formatHeader(Range(rngCorrAnchor.Offset(0, 1), rngCorrAnchor.Offset(0, count)))
    Call formatHeader(Range(rngCorrAnchor.Offset(1, 0), rngCorrAnchor.Offset(count, 0)))
       
    Range(rngCorrAnchor.Offset(1, 1), rngCorrAnchor.Offset(count, count)).Select
    
CleanUp:
    Application.EnableEvents = True
    Application.ScreenUpdating = True
End Sub



''' Formatting Module

Private Sub addConditionalFormat(tempRng As Range)
    tempRng.Select
    Selection.FormatConditions.Delete
    Selection.FormatConditions.Add Type:=xlCellValue, Operator:=xlEqual, _
        Formula1:="=""<LINK>"""
    Selection.FormatConditions(1).Interior.ColorIndex = 3
    Cells(1, 1).Select
End Sub

Private Sub formatHeader(tempRng As Range)
    tempRng.Select
    With Selection.Interior
        .Pattern = xlSolid
        .PatternColorIndex = xlAutomatic
        .Color = 10040115
    End With
    With Selection.Font
        .ColorIndex = 2
        .Name = "Calibri"
        .Size = 11
    End With
    Cells(1, 1).Select
End Sub

Private Sub formatColorAndBorder(tempRng As Range)
    tempRng.Select
    Selection.HorizontalAlignment = xlCenter
    Selection.Borders(xlDiagonalDown).LineStyle = xlNone
    Selection.Borders(xlDiagonalUp).LineStyle = xlNone
    With Selection.Borders(xlEdgeLeft)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlEdgeTop)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlEdgeRight)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .Weight = xlThin
    End With
    Selection.Borders(xlInsideVertical).LineStyle = xlNone
    Selection.Borders(xlInsideHorizontal).LineStyle = xlNone
    With Selection.Interior
        .Pattern = xlSolid
        .PatternColorIndex = xlAutomatic
        .ColorIndex = 2
    End With
    With Selection.Font
        .Name = "Calibri"
        .Size = 11
    End With
    Cells(1, 1).Select
End Sub


Private Sub addDataValidation(tempRng As Range)
    tempRng.Select
    With Selection.Validation
        .Delete
        .Add Type:=xlValidateWholeNumber, AlertStyle:=xlValidAlertStop, _
        Operator:=xlGreaterEqual, Formula1:="1"
        .IgnoreBlank = True
        .InCellDropdown = True
        .InputTitle = ""
        .ErrorTitle = "Incorrect Input"
        .InputMessage = ""
        .ErrorMessage = "Please input an integer"
        .ShowInput = True
        .ShowError = True
    End With
    Cells(1, 1).Select
End Sub




Attribute VB_Name = "Sheet21"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "ComboBoxCRModelNum, 1, 0, MSForms, ComboBox"
Attribute VB_Control = "ResizeButton, 2, 1, MSForms, CommandButton"
Attribute VB_Control = "CreateButton, 3, 2, MSForms, CommandButton"
Attribute VB_Control = "ComboBoxINFModelNum, 4, 3, MSForms, ComboBox"
Option Explicit
Private hasBeenInitialised As Boolean


Private Sub CreateButton_Click()
    On Error GoTo errorHandler
    Application.EnableEvents = False
    Dim asn$: asn = ActiveSheet.Name
    Dim rngCRModelList As Range: Set rngCRModelList = Range("NX_" & asn & "_M_CRModelList")
    Dim numCRModels%: numCRModels = rngCRModelList.Rows.count
    Dim rngCRModelListAnchor As Range: Set rngCRModelListAnchor = rngCRModelList.Cells(1, 1).Offset(-1, 0)
    Dim rngCRModels As Range: Set rngCRModels = Range("NX_" & asn & "_M_CRModels")
    rngCRModels.Formula = "=nxlibdata(" & Range(rngCRModelListAnchor, rngCRModelListAnchor.Offset(0, 1)).Address & "," & Range(rngCRModelListAnchor.Offset(1, 0), rngCRModelListAnchor.Offset(numCRModels, 1)).Address & "," & """" & "IR_CRB_INFB_CRModel.Data" & """" & ")"
    
    Dim rngINFModelList As Range: Set rngINFModelList = Range("NX_" & asn & "_M_INFModelList")
    Dim numINFModels%: numINFModels = rngINFModelList.Rows.count
    Dim rngINFModelListAnchor As Range: Set rngINFModelListAnchor = rngINFModelList.Cells(1, 1).Offset(-1, 0)
    Dim rngINFModels As Range: Set rngINFModels = Range("NX_" & asn & "_M_INFModels")
    rngINFModels.Formula = "=nxlibdata(" & Range(rngINFModelListAnchor, rngINFModelListAnchor.Offset(0, 1)).Address & "," & Range(rngINFModelListAnchor.Offset(1, 0), rngINFModelListAnchor.Offset(numINFModels, 1)).Address & "," & """" & "IR_CRB_INFB_INFModel.Data" & """" & ")"
    ActiveSheet.Calculate
CleanUp:
    Application.EnableEvents = True
    Exit Sub
errorHandler:
    Call VBA.MsgBox("Error in creating model table data", vbCritical + vbOKOnly, "Error")
    GoTo CleanUp
    End Sub

Private Sub ResizeButton_Click()
    On Error GoTo CleanUp
    Application.ScreenUpdating = False
    Dim temp1 As Variant: temp1 = Split(ComboBoxCRModelNum.Text, " ")
    Dim temp2 As Variant: temp2 = Split(ComboBoxINFModelNum.Text, " ")
    If Not IsNumeric(temp1(0)) Or Not IsNumeric(temp2(0)) Then
        MsgBox "Fatal error when resizing ComboBox"
        GoTo CleanUp
    Else
        Resize CInt(temp1(0)), CInt(temp2(0))
    End If
    On Error GoTo 0
CleanUp:
    Application.ScreenUpdating = True
    ActiveSheet.Calculate
End Sub


Public Sub Resize(numCRModel As Integer, numINFModel As Integer)
    On Error GoTo errorHandler
    Application.EnableEvents = False
    Application.ScreenUpdating = False
    
    Dim asn$: asn = ActiveSheet.Name
    Dim rngCRModels As Range: Set rngCRModels = Range("NX_" & asn & "_M_CRModels")
    Dim rngCRModelList As Range: Set rngCRModelList = Range("NX_" & asn & "_M_CRModelList")
    Dim rngINFModels As Range: Set rngINFModels = Range("NX_" & asn & "_M_INFModels")
    Dim rngINFModelList As Range: Set rngINFModelList = Range("NX_" & asn & "_M_INFModelList")
    Dim rngIRModelFactorNum As Range: Set rngIRModelFactorNum = Range("NX_" & asn & "_M_IRModelFactorNum")
    Dim rngCorrAnchor As Range: Set rngCorrAnchor = Range("NX_" & asn & "_M_CorrAnchor")
    Dim rngCRModelListAnchor As Range: Set rngCRModelListAnchor = rngCRModelList.Cells(1, 1).Offset(-1, 0)
    Dim rngINFModelListAnchor As Range: Set rngINFModelListAnchor = rngINFModelList.Cells(1, 1).Offset(-1, 0)
    
    rngCRModelList.Clear
    rngINFModelList.Clear
    rngCorrAnchor.CurrentRegion.Clear
    rngCRModels = "<LINK>"
    rngINFModels = "<LINK>"
    rngIRModelFactorNum.Value = 1
    
    'Resize the CR Model table
    Dim i%, j%
    For i = 1 To numCRModel
        rngCRModelListAnchor.Offset(i, 0) = "<LINK>"
        rngCRModelListAnchor.Offset(i, 1) = ""
        rngCRModelListAnchor.Offset(i, 2) = 1
    Next i
    Range(rngCRModelListAnchor.Offset(1, 0), rngCRModelListAnchor.Offset(numCRModel, 2)).Select
    ActiveWorkbook.Names.Add Name:="NX_" & asn & "_M_CRModelList", RefersTo:=Selection
    Set rngCRModelList = Range("NX_" & asn & "_M_CRModelList")
    Call formatColorAndBorder(rngCRModelList)
    Call addConditionalFormat(Range(rngCRModelListAnchor.Offset(1, 0), rngCRModelListAnchor.Offset(numCRModel, 0)))
    Call addDataValidation(Range(rngCRModelListAnchor.Offset(1, 2), rngCRModelListAnchor.Offset(numCRModel, 2)))
        
    'Resize the Inflation Model Table
    For i = 1 To numINFModel
        rngINFModelListAnchor.Offset(i, 0) = "<LINK>"
        rngINFModelListAnchor.Offset(i, 1) = "<LINK>"
    Next i
    Range(rngINFModelListAnchor.Offset(1, 0), rngINFModelListAnchor.Offset(numINFModel, 1)).Select
    ActiveWorkbook.Names.Add Name:="NX_" & asn & "_M_INFModelList", RefersTo:=Selection
    Set rngINFModelList = Range("NX_" & asn & "_M_INFModelList")
    Call formatColorAndBorder(rngINFModelList)
    Call addConditionalFormat(Range(rngINFModelListAnchor.Offset(1, 0), rngINFModelListAnchor.Offset(numINFModel, 1)))
            
    rngCorrAnchor.Offset(0, 1) = "DomesticModelFactor1"
    rngCorrAnchor.Offset(1, 0) = "DomesticModelFactor1"
    
    For i = 1 To numINFModel
        rngCorrAnchor.Offset(0, i + 1) = "RealRate" & CStr(i) & "Model"
        rngCorrAnchor.Offset(i + 1, 0) = "RealRate" & CStr(i) & "Model"
    Next i
    
    For i = 1 To numINFModel
        rngCorrAnchor.Offset(0, i + numINFModel + 1) = "CPI" & CStr(i) & "Model"
        rngCorrAnchor.Offset(i + numINFModel + 1, 0) = "CPI" & CStr(i) & "Model"
    Next i
    
    For i = 1 To numCRModel
        rngCorrAnchor.Offset(0, i + 2 * numINFModel + 1) = "CR" & CStr(i) & "Factor1"
        rngCorrAnchor.Offset(i + 2 * numINFModel + 1, 0) = "CR" & CStr(i) & "Factor1"
    Next i
    
    For i = 1 To 2 * numINFModel + numCRModel + 1
        rngCorrAnchor.Offset(i, i) = 1
        For j = i + 1 To 2 * numINFModel + numCRModel + 1
            rngCorrAnchor.Offset(i, j) = 0
        Next j
    Next i
    
    rngCorrAnchor.Formula = "=nxlibmatrix(" & Range(rngCorrAnchor.Offset(0, 1), rngCorrAnchor.Offset(0, 2 * numINFModel + numCRModel + 1)).Address & "," _
                                            & Range(rngCorrAnchor.Offset(1, 0), rngCorrAnchor.Offset(2 * numINFModel + numCRModel + 1, 0)).Address & "," _
                                            & Range(rngCorrAnchor.Offset(1, 1), rngCorrAnchor.Offset(2 * numINFModel + numCRModel + 1, 2 * numINFModel + numCRModel + 1)).Address & "," _
                                            & """" & "IR_CRB_INFB_Corr.Data" & """" & ")"
                                            
    Call formatColorAndBorder(rngCorrAnchor)
    Call formatColorAndBorder(Range(rngCorrAnchor.Offset(1, 1), rngCorrAnchor.Offset(2 * numINFModel + numCRModel + 1, 2 * numINFModel + numCRModel + 1)))
    Call formatHeader(Range(rngCorrAnchor.Offset(0, 1), rngCorrAnchor.Offset(0, 2 * numINFModel + numCRModel + 1)))
    Call formatHeader(Range(rngCorrAnchor.Offset(1, 0), rngCorrAnchor.Offset(2 * numINFModel + numCRModel + 1, 0)))
    
CleanUp:
    Application.EnableEvents = True
    Application.ScreenUpdating = True
    Set rngCRModels = Nothing
    Set rngCRModelList = Nothing
    Set rngCRModelListAnchor = Nothing
    Set rngINFModels = Nothing
    Set rngINFModelList = Nothing
    Set rngINFModelListAnchor = Nothing
    Set rngCorrAnchor = Nothing
    Exit Sub
   
errorHandler:
    Call VBA.MsgBox("Error in resizing the model", vbCritical + vbOKOnly, "Error")
    GoTo CleanUp
    End Sub

Private Sub Worksheet_Activate()
    On Error GoTo CleanUp
    
    ComboBoxCRModelNum.Clear
    ComboBoxCRModelNum.AddItem ("1 CR Model")
    ComboBoxCRModelNum.AddItem ("2 CR Models")
    ComboBoxCRModelNum.AddItem ("3 CR Models")
    ComboBoxCRModelNum.AddItem ("4 CR Models")
    ComboBoxCRModelNum.AddItem ("5 CR Models")
    ComboBoxCRModelNum.AddItem ("6 CR Models")
    ComboBoxCRModelNum.AddItem ("7 CR Models")
    ComboBoxCRModelNum.AddItem ("8 CR Models")
    ComboBoxCRModelNum.AddItem ("9 CR Models")
    ComboBoxCRModelNum.AddItem ("10 CR Models")
    ComboBoxCRModelNum.Text = "1 CR Model"
    
    ComboBoxINFModelNum.Clear
    ComboBoxINFModelNum.AddItem ("1 Inflation Model")
    ComboBoxINFModelNum.AddItem ("2 Inflation Models")
    ComboBoxINFModelNum.AddItem ("3 Inflation Models")
    ComboBoxINFModelNum.AddItem ("4 Inflation Models")
    ComboBoxINFModelNum.AddItem ("5 Inflation Models")
    ComboBoxINFModelNum.AddItem ("6 Inflation Models")
    ComboBoxINFModelNum.AddItem ("7 Inflation Models")
    ComboBoxINFModelNum.AddItem ("8 Inflation Models")
    ComboBoxINFModelNum.AddItem ("9 Inflation Models")
    ComboBoxINFModelNum.AddItem ("10 Inflation Models")
    ComboBoxINFModelNum.Text = "1 Inflation Model"
    
    hasBeenInitialised = True

CleanUp:
    ActiveSheet.Calculate
End Sub


'Resizing the correlation matrix after changing the Factor number for any model
Private Sub Worksheet_Change(ByVal Target As Range)
    On Error GoTo CleanUp
    Application.EnableEvents = False
    Application.ScreenUpdating = False
    
    Dim asn$: asn = ActiveSheet.Name
    Dim rngCRModelList As Range: Set rngCRModelList = Range("NX_" & asn & "_M_CRModelList")
    Dim numCRModels%: numCRModels = rngCRModelList.Rows.count
    Dim rngCRModelFactorNumList As Range: Set rngCRModelFactorNumList = Range(rngCRModelList.Cells(1, 3), rngCRModelList.Cells(numCRModels, 3))
    Dim rngINFModelList As Range: Set rngINFModelList = Range("NX_" & asn & "_M_INFModelList")
    Dim numINFModels%: numINFModels = rngINFModelList.Rows.count
    Dim rngIRModelFactorNum As Range: Set rngIRModelFactorNum = Range("NX_" & asn & "_M_IRMOdelFactorNum")
    
    If Intersect(Target, rngCRModelFactorNumList) Is Nothing And Intersect(Target, rngIRModelFactorNum) Is Nothing Then
        GoTo CleanUp
    End If
    
    Dim rngCorrAnchor As Range: Set rngCorrAnchor = Range("NX_" & asn & "_M_CorrAnchor")
    rngCorrAnchor.CurrentRegion.Clear
    Dim IRModelFactorNum%: IRModelFactorNum = rngIRModelFactorNum.Value
    Dim CRModelFactorNum%
    Dim i%, j%
    Dim count%: count = 0
    For i = 1 To IRModelFactorNum
        count = count + 1
        rngCorrAnchor.Offset(0, count) = "DomesticModelFactor" & CStr(i)
        rngCorrAnchor.Offset(count, 0) = "DomesticModelFactor" & CStr(i)
    Next i
    
    For i = 1 To numINFModels
        count = count + 1
        rngCorrAnchor.Offset(0, count) = "RealRate" & CStr(i) & "Model"
        rngCorrAnchor.Offset(count, 0) = "RealRate" & CStr(i) & "Model"
    Next i
    
    For i = 1 To numINFModels
        count = count + 1
        rngCorrAnchor.Offset(0, count) = "CPI" & CStr(i) & "Model"
        rngCorrAnchor.Offset(count, 0) = "CPI" & CStr(i) & "Model"
    Next i
    
    For i = 1 To numCRModels
        CRModelFactorNum = rngCRModelList.Cells(i, 3).Value
        For j = 1 To CRModelFactorNum
            count = count + 1
            rngCorrAnchor.Offset(0, count) = "CR" & CStr(i) & "Factor" & CStr(j)
            rngCorrAnchor.Offset(count, 0) = "CR" & CStr(i) & "Factor" & CStr(j)
        Next j
    Next i
    
    For i = 1 To count
        rngCorrAnchor.Offset(i, i) = 1
        For j = i + 1 To count
            rngCorrAnchor.Offset(i, j) = 0
        Next j
    Next i
    
    rngCorrAnchor.Formula = "=nxlibmatrix(" & Range(rngCorrAnchor.Offset(0, 1), rngCorrAnchor.Offset(0, count)).Address & "," _
                                            & Range(rngCorrAnchor.Offset(1, 0), rngCorrAnchor.Offset(count, 0)).Address & "," _
                                            & Range(rngCorrAnchor.Offset(1, 1), rngCorrAnchor.Offset(count, count)).Address & "," _
                                            & """" & "IR_CRB_INFB_Corr.Data" & """" & ")"
    
    
    Call formatColorAndBorder(rngCorrAnchor)
    Call formatColorAndBorder(Range(rngCorrAnchor.Offset(1, 1), rngCorrAnchor.Offset(count, count)))
    Call formatHeader(Range(rngCorrAnchor.Offset(0, 1), rngCorrAnchor.Offset(0, count)))
    Call formatHeader(Range(rngCorrAnchor.Offset(1, 0), rngCorrAnchor.Offset(count, 0)))
       
    Range(rngCorrAnchor.Offset(1, 1), rngCorrAnchor.Offset(count, count)).Select
    
CleanUp:
    Application.EnableEvents = True
    Application.ScreenUpdating = True
End Sub


''' Formatting Module

Private Sub addConditionalFormat(tempRng As Range)
    tempRng.Select
    Selection.FormatConditions.Delete
    Selection.FormatConditions.Add Type:=xlCellValue, Operator:=xlEqual, _
        Formula1:="=""<LINK>"""
    Selection.FormatConditions(1).Interior.ColorIndex = 3
        
    Cells(1, 1).Select
End Sub

Private Sub formatHeader(tempRng As Range)
    tempRng.Select
    With Selection.Interior
        .Pattern = xlSolid
        .PatternColorIndex = xlAutomatic
        .Color = 10040115
    End With
    With Selection.Font
        .ColorIndex = 2
        .Name = "Calibri"
        .Size = 11
    End With
    Cells(1, 1).Select
End Sub

Private Sub formatColorAndBorder(tempRng As Range)
    tempRng.Select
    Selection.HorizontalAlignment = xlCenter
    Selection.Borders(xlDiagonalDown).LineStyle = xlNone
    Selection.Borders(xlDiagonalUp).LineStyle = xlNone
    With Selection.Borders(xlEdgeLeft)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlEdgeTop)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlEdgeRight)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .Weight = xlThin
    End With
    Selection.Borders(xlInsideVertical).LineStyle = xlNone
    Selection.Borders(xlInsideHorizontal).LineStyle = xlNone
    With Selection.Interior
        .Pattern = xlSolid
        .PatternColorIndex = xlAutomatic
        .ColorIndex = 2
    End With
    With Selection.Font
        .Name = "Calibri"
        .Size = 11
    End With
    Cells(1, 1).Select

End Sub

Private Sub addDataValidation(tempRng As Range)
    tempRng.Select
    With Selection.Validation
        .Delete
        .Add Type:=xlValidateWholeNumber, AlertStyle:=xlValidAlertStop, _
        Operator:=xlGreaterEqual, Formula1:="1"
        .IgnoreBlank = True
        .InCellDropdown = True
        .InputTitle = ""
        .ErrorTitle = "Incorrect Input"
        .InputMessage = ""
        .ErrorMessage = "Please input an integer"
        .ShowInput = True
        .ShowError = True
    End With
    Cells(1, 1).Select
End Sub

Attribute VB_Name = "Sheet22"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "ComboBoxEQModelNum, 1, 0, MSForms, ComboBox"
Attribute VB_Control = "ResizeButton, 2, 1, MSForms, CommandButton"
Attribute VB_Control = "CreateButton, 3, 2, MSForms, CommandButton"
Attribute VB_Control = "ComboBoxINFModelNum, 4, 3, MSForms, ComboBox"
Option Explicit
Private hasBeenInitialised As Boolean


Private Sub CreateButton_Click()
    On Error GoTo errorHandler
    Application.EnableEvents = False
    Dim asn$: asn = ActiveSheet.Name
    Dim rngEQModelList As Range: Set rngEQModelList = Range("NX_" & asn & "_M_EQModelList")
    Dim numEQModels%: numEQModels = rngEQModelList.Rows.count
    Dim rngEQModelListAnchor As Range: Set rngEQModelListAnchor = rngEQModelList.Cells(1, 1).Offset(-1, 0)
    Dim rngEQModels As Range: Set rngEQModels = Range("NX_" & asn & "_M_EQModels")
    rngEQModels.Formula = "=nxlibdata(" & Range(rngEQModelListAnchor, rngEQModelListAnchor.Offset(0, 1)).Address & "," & Range(rngEQModelListAnchor.Offset(1, 0), rngEQModelListAnchor.Offset(numEQModels, 1)).Address & "," & """" & "IR_INFB_EQB_EQModel.Data" & """" & ")"
    
    Dim rngINFModelList As Range: Set rngINFModelList = Range("NX_" & asn & "_M_INFModelList")
    Dim numINFModels%: numINFModels = rngINFModelList.Rows.count
    Dim rngINFModelListAnchor As Range: Set rngINFModelListAnchor = rngINFModelList.Cells(1, 1).Offset(-1, 0)
    Dim rngINFModels As Range: Set rngINFModels = Range("NX_" & asn & "_M_INFModels")
    rngINFModels.Formula = "=nxlibdata(" & Range(rngINFModelListAnchor, rngINFModelListAnchor.Offset(0, 1)).Address & "," & Range(rngINFModelListAnchor.Offset(1, 0), rngINFModelListAnchor.Offset(numINFModels, 1)).Address & "," & """" & "IR_INFB_EQB_INFModel.Data" & """" & ")"
    ActiveSheet.Calculate
    
CleanUp:
    Application.EnableEvents = True
    Exit Sub
errorHandler:
    Call VBA.MsgBox("Error in creating EQ model list", vbCritical + vbOKOnly, "Error")
    GoTo CleanUp
    End Sub

Private Sub ResizeButton_Click()
    On Error GoTo CleanUp
    Application.ScreenUpdating = False
    Dim temp1 As Variant: temp1 = Split(ComboBoxEQModelNum.Text, " ")
    Dim temp2 As Variant: temp2 = Split(ComboBoxINFModelNum.Text, " ")
    If Not IsNumeric(temp1(0)) Or Not IsNumeric(temp2(0)) Then
        MsgBox "Fatal error when resizing ComboBox"
        GoTo CleanUp
    Else
        Resize CInt(temp1(0)), CInt(temp2(0))
    End If
    On Error GoTo 0
    
CleanUp:
    Application.ScreenUpdating = True
    ActiveSheet.Calculate
End Sub


Public Sub Resize(numEQModel As Integer, numINFModel As Integer)
    On Error GoTo errorHandler
    Application.EnableEvents = False
    Application.ScreenUpdating = False
    
    Dim asn$: asn = ActiveSheet.Name
    Dim rngEQModels As Range: Set rngEQModels = Range("NX_" & asn & "_M_EQModels")
    Dim rngEQModelList As Range: Set rngEQModelList = Range("NX_" & asn & "_M_EQModelList")
    Dim rngINFModels As Range: Set rngINFModels = Range("NX_" & asn & "_M_INFModels")
    Dim rngINFModelList As Range: Set rngINFModelList = Range("NX_" & asn & "_M_INFModelList")
    Dim rngIRModelFactorNum As Range: Set rngIRModelFactorNum = Range("NX_" & asn & "_M_IRModelFactorNum")
    Dim rngCorrAnchor As Range: Set rngCorrAnchor = Range("NX_" & asn & "_M_CorrAnchor")
    Dim rngEQModelListAnchor As Range: Set rngEQModelListAnchor = rngEQModelList.Cells(1, 1).Offset(-1, 0)
    Dim rngINFModelListAnchor As Range: Set rngINFModelListAnchor = rngINFModelList.Cells(1, 1).Offset(-1, 0)
    
    rngEQModelList.Clear
    rngINFModelList.Clear
    rngCorrAnchor.CurrentRegion.Clear
    rngEQModels = "<LINK>"
    rngINFModels = "<LINK>"
    rngIRModelFactorNum.Value = 1
    
    'Resize the EQ model table
    Dim i%, j%
    For i = 1 To numEQModel
        rngEQModelListAnchor.Offset(i, 0) = "<LINK>"
        rngEQModelListAnchor.Offset(i, 1) = "<LINK>"
        rngEQModelListAnchor.Offset(i, 2) = 1
    Next i
    Range(rngEQModelListAnchor.Offset(1, 0), rngEQModelListAnchor.Offset(numEQModel, 2)).Select
    ActiveWorkbook.Names.Add Name:="NX_" & asn & "_M_EQModelList", RefersTo:=Selection
    Set rngEQModelList = Range("NX_" & asn & "_M_EQModelList")
    Call formatColorAndBorder(rngEQModelList)
    Call addConditionalFormat(Range(rngEQModelListAnchor.Offset(1, 0), rngEQModelListAnchor.Offset(numEQModel, 1)))
    Call addDataValidation(Range(rngEQModelListAnchor.Offset(1, 2), rngEQModelListAnchor.Offset(numEQModel, 2)))
        
    'Resize the Inflation Model Table
    For i = 1 To numINFModel
        rngINFModelListAnchor.Offset(i, 0) = "<LINK>"
        rngINFModelListAnchor.Offset(i, 1) = "<LINK>"
    Next i
    Range(rngINFModelListAnchor.Offset(1, 0), rngINFModelListAnchor.Offset(numINFModel, 1)).Select
    ActiveWorkbook.Names.Add Name:="NX_" & asn & "_M_INFModelList", RefersTo:=Selection
    Set rngINFModelList = Range("NX_" & asn & "_M_INFModelList")
    Call formatColorAndBorder(rngINFModelList)
    Call addConditionalFormat(Range(rngINFModelListAnchor.Offset(1, 0), rngINFModelListAnchor.Offset(numINFModel, 1)))
            
    rngCorrAnchor.Offset(0, 1) = "DomesticModelFactor1"
    rngCorrAnchor.Offset(1, 0) = "DomesticModelFactor1"
    
    For i = 1 To numINFModel
        rngCorrAnchor.Offset(0, i + 1) = "RealRate" & CStr(i) & "Model"
        rngCorrAnchor.Offset(i + 1, 0) = "RealRate" & CStr(i) & "Model"
    Next i
    
    For i = 1 To numINFModel
        rngCorrAnchor.Offset(0, i + numINFModel + 1) = "CPI" & CStr(i) & "Model"
        rngCorrAnchor.Offset(i + numINFModel + 1, 0) = "CPI" & CStr(i) & "Model"
    Next i
    
    For i = 1 To numEQModel
        rngCorrAnchor.Offset(0, i + 2 * numINFModel + 1) = "=" & rngEQModelListAnchor.Offset(i, 0).Address & "&" & """" & "Factor1" & """"
        rngCorrAnchor.Offset(i + 2 * numINFModel + 1, 0) = "=" & rngEQModelListAnchor.Offset(i, 0).Address & "&" & """" & "Factor1" & """"
    Next i
    
    For i = 1 To 2 * numINFModel + numEQModel + 1
        rngCorrAnchor.Offset(i, i) = 1
        For j = i + 1 To 2 * numINFModel + numEQModel + 1
            rngCorrAnchor.Offset(i, j) = 0
        Next j
    Next i
    
    rngCorrAnchor.Formula = "=nxlibmatrix(" & Range(rngCorrAnchor.Offset(0, 1), rngCorrAnchor.Offset(0, 2 * numINFModel + numEQModel + 1)).Address & "," _
                                            & Range(rngCorrAnchor.Offset(1, 0), rngCorrAnchor.Offset(2 * numINFModel + numEQModel + 1, 0)).Address & "," _
                                            & Range(rngCorrAnchor.Offset(1, 1), rngCorrAnchor.Offset(2 * numINFModel + numEQModel + 1, 2 * numINFModel + numEQModel + 1)).Address & "," _
                                            & """" & "IR_INFB_EQB_Corr.Data" & """" & ")"
                                            
    Call formatColorAndBorder(rngCorrAnchor)
    Call formatColorAndBorder(Range(rngCorrAnchor.Offset(1, 1), rngCorrAnchor.Offset(2 * numINFModel + numEQModel + 1, 2 * numINFModel + numEQModel + 1)))
    Call formatHeader(Range(rngCorrAnchor.Offset(0, 1), rngCorrAnchor.Offset(0, 2 * numINFModel + numEQModel + 1)))
    Call formatHeader(Range(rngCorrAnchor.Offset(1, 0), rngCorrAnchor.Offset(2 * numINFModel + numEQModel + 1, 0)))

CleanUp:
    Application.EnableEvents = True
    Application.ScreenUpdating = True
    Set rngEQModels = Nothing
    Set rngEQModelList = Nothing
    Set rngEQModelListAnchor = Nothing
    Set rngINFModels = Nothing
    Set rngINFModelList = Nothing
    Set rngINFModelListAnchor = Nothing
    Set rngCorrAnchor = Nothing
    Exit Sub
   
errorHandler:
    Call VBA.MsgBox("Error in resizing the model", vbCritical + vbOKOnly, "Error")
    GoTo CleanUp
    End Sub

Private Sub Worksheet_Activate()
    On Error GoTo CleanUp
    
    ComboBoxEQModelNum.Clear
    ComboBoxEQModelNum.AddItem ("1 EQ model")
    ComboBoxEQModelNum.AddItem ("2 EQ models")
    ComboBoxEQModelNum.AddItem ("3 EQ models")
    ComboBoxEQModelNum.AddItem ("4 EQ models")
    ComboBoxEQModelNum.AddItem ("5 EQ models")
    ComboBoxEQModelNum.AddItem ("6 EQ models")
    ComboBoxEQModelNum.AddItem ("7 EQ models")
    ComboBoxEQModelNum.AddItem ("8 EQ models")
    ComboBoxEQModelNum.AddItem ("9 EQ models")
    ComboBoxEQModelNum.AddItem ("10 EQ models")
    ComboBoxEQModelNum.Text = "1 EQ model"
    
    ComboBoxINFModelNum.Clear
    ComboBoxINFModelNum.AddItem ("1 Inflation Model")
    ComboBoxINFModelNum.AddItem ("2 Inflation Models")
    ComboBoxINFModelNum.AddItem ("3 Inflation Models")
    ComboBoxINFModelNum.AddItem ("4 Inflation Models")
    ComboBoxINFModelNum.AddItem ("5 Inflation Models")
    ComboBoxINFModelNum.AddItem ("6 Inflation Models")
    ComboBoxINFModelNum.AddItem ("7 Inflation Models")
    ComboBoxINFModelNum.AddItem ("8 Inflation Models")
    ComboBoxINFModelNum.AddItem ("9 Inflation Models")
    ComboBoxINFModelNum.AddItem ("10 Inflation Models")
    ComboBoxINFModelNum.Text = "1 Inflation Model"
    
    hasBeenInitialised = True

CleanUp:
    ActiveSheet.Calculate
End Sub


'Resizing the correlation matrix after changing the Factor number for any model
Private Sub Worksheet_Change(ByVal Target As Range)
    On Error GoTo CleanUp
    Application.EnableEvents = False
    Application.ScreenUpdating = False
    
    Dim asn$: asn = ActiveSheet.Name
    Dim rngEQModelList As Range: Set rngEQModelList = Range("NX_" & asn & "_M_EQModelList")
    Dim numEQModels%: numEQModels = rngEQModelList.Rows.count
    Dim rngEQModelFactorNumList As Range: Set rngEQModelFactorNumList = Range(rngEQModelList.Cells(1, 3), rngEQModelList.Cells(numEQModels, 3))
    Dim rngINFModelList As Range: Set rngINFModelList = Range("NX_" & asn & "_M_INFModelList")
    Dim numINFModels%: numINFModels = rngINFModelList.Rows.count
    Dim rngIRModelFactorNum As Range: Set rngIRModelFactorNum = Range("NX_" & asn & "_M_IRMOdelFactorNum")
    
    If Intersect(Target, rngEQModelFactorNumList) Is Nothing And Intersect(Target, rngIRModelFactorNum) Is Nothing Then
        GoTo CleanUp
    End If
    
    Dim rngCorrAnchor As Range: Set rngCorrAnchor = Range("NX_" & asn & "_M_CorrAnchor")
    rngCorrAnchor.CurrentRegion.Clear
    Dim IRModelFactorNum%: IRModelFactorNum = rngIRModelFactorNum.Value
    Dim EQModelFactorNum%
    Dim i%, j%
    Dim count%: count = 0
    For i = 1 To IRModelFactorNum
        count = count + 1
        rngCorrAnchor.Offset(0, count) = "DomesticModelFactor" & CStr(i)
        rngCorrAnchor.Offset(count, 0) = "DomesticModelFactor" & CStr(i)
    Next i
    
    For i = 1 To numINFModels
        count = count + 1
        rngCorrAnchor.Offset(0, count) = "RealRate" & CStr(i) & "Model"
        rngCorrAnchor.Offset(count, 0) = "RealRate" & CStr(i) & "Model"
    Next i
    
    For i = 1 To numINFModels
        count = count + 1
        rngCorrAnchor.Offset(0, count) = "CPI" & CStr(i) & "Model"
        rngCorrAnchor.Offset(count, 0) = "CPI" & CStr(i) & "Model"
    Next i
    
    For i = 1 To numEQModels
        EQModelFactorNum = rngEQModelList.Cells(i, 3).Value
        For j = 1 To EQModelFactorNum
            count = count + 1
            rngCorrAnchor.Offset(0, count) = "=" & rngEQModelList.Cells(i, 1).Address & "&" & """" & "Factor" & CStr(j) & """"
            rngCorrAnchor.Offset(count, 0) = "=" & rngEQModelList.Cells(i, 1).Address & "&" & """" & "Factor" & CStr(j) & """"
        Next j
    Next i
    
    For i = 1 To count
        rngCorrAnchor.Offset(i, i) = 1
        For j = i + 1 To count
            rngCorrAnchor.Offset(i, j) = 0
        Next j
    Next i
    
    rngCorrAnchor.Formula = "=nxlibmatrix(" & Range(rngCorrAnchor.Offset(0, 1), rngCorrAnchor.Offset(0, count)).Address & "," _
                                            & Range(rngCorrAnchor.Offset(1, 0), rngCorrAnchor.Offset(count, 0)).Address & "," _
                                            & Range(rngCorrAnchor.Offset(1, 1), rngCorrAnchor.Offset(count, count)).Address & "," _
                                            & """" & "IR_INFB_EQB_Corr.Data" & """" & ")"
    
    
    Call formatColorAndBorder(rngCorrAnchor)
    Call formatColorAndBorder(Range(rngCorrAnchor.Offset(1, 1), rngCorrAnchor.Offset(count, count)))
    Call formatHeader(Range(rngCorrAnchor.Offset(0, 1), rngCorrAnchor.Offset(0, count)))
    Call formatHeader(Range(rngCorrAnchor.Offset(1, 0), rngCorrAnchor.Offset(count, 0)))
       
    Range(rngCorrAnchor.Offset(1, 1), rngCorrAnchor.Offset(count, count)).Select
    
CleanUp:
    Application.EnableEvents = True
    Application.ScreenUpdating = True
End Sub





''' Formatting Module

Private Sub addConditionalFormat(tempRng As Range)
    tempRng.Select
    Selection.FormatConditions.Delete
    Selection.FormatConditions.Add Type:=xlCellValue, Operator:=xlEqual, _
        Formula1:="=""<LINK>"""
    Selection.FormatConditions(1).Interior.ColorIndex = 3
        
    Cells(1, 1).Select
End Sub

Private Sub formatHeader(tempRng As Range)
    tempRng.Select
    With Selection.Interior
        .Pattern = xlSolid
        .PatternColorIndex = xlAutomatic
        .Color = 10040115
    End With
    With Selection.Font
        .ColorIndex = 2
        .Name = "Calibri"
        .Size = 11
    End With
    Cells(1, 1).Select
End Sub

Private Sub formatColorAndBorder(tempRng As Range)
    tempRng.Select
    Selection.HorizontalAlignment = xlCenter
    Selection.Borders(xlDiagonalDown).LineStyle = xlNone
    Selection.Borders(xlDiagonalUp).LineStyle = xlNone
    With Selection.Borders(xlEdgeLeft)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlEdgeTop)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlEdgeRight)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .Weight = xlThin
    End With
    Selection.Borders(xlInsideVertical).LineStyle = xlNone
    Selection.Borders(xlInsideHorizontal).LineStyle = xlNone
    With Selection.Interior
        .Pattern = xlSolid
        .PatternColorIndex = xlAutomatic
        .ColorIndex = 2
    End With
    With Selection.Font
        .Name = "Calibri"
        .Size = 11
    End With
    Cells(1, 1).Select

End Sub

Private Sub addDataValidation(tempRng As Range)
    tempRng.Select
    With Selection.Validation
        .Delete
        .Add Type:=xlValidateWholeNumber, AlertStyle:=xlValidAlertStop, _
        Operator:=xlGreaterEqual, Formula1:="1"
        .IgnoreBlank = True
        .InCellDropdown = True
        .InputTitle = ""
        .ErrorTitle = "Incorrect Input"
        .InputMessage = ""
        .ErrorMessage = "Please input an integer"
        .ShowInput = True
        .ShowError = True
    End With
    Cells(1, 1).Select
End Sub

Attribute VB_Name = "Sheet23"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "ComboBoxCMDTYModelNum, 1, 0, MSForms, ComboBox"
Attribute VB_Control = "ResizeButton, 2, 1, MSForms, CommandButton"
Attribute VB_Control = "CreateButton, 3, 2, MSForms, CommandButton"
Attribute VB_Control = "ComboBoxINFModelNum, 4, 3, MSForms, ComboBox"
Option Explicit
Private hasBeenInitialised As Boolean


Private Sub CreateButton_Click()
    On Error GoTo errorHandler
    Application.EnableEvents = False
    Dim asn$: asn = ActiveSheet.Name
    Dim rngCMDTYModelList As Range: Set rngCMDTYModelList = Range("NX_" & asn & "_M_CMDTYModelList")
    Dim numCMDTYModels%: numCMDTYModels = rngCMDTYModelList.Rows.count
    Dim rngCMDTYModelListAnchor As Range: Set rngCMDTYModelListAnchor = rngCMDTYModelList.Cells(1, 1).Offset(-1, 0)
    Dim rngCMDTYModels As Range: Set rngCMDTYModels = Range("NX_" & asn & "_M_CMDTYModels")
    rngCMDTYModels.Formula = "=nxlibdata(" & Range(rngCMDTYModelListAnchor, rngCMDTYModelListAnchor.Offset(0, 1)).Address & "," & Range(rngCMDTYModelListAnchor.Offset(1, 0), rngCMDTYModelListAnchor.Offset(numCMDTYModels, 1)).Address & "," & """" & "IR_INFB_CMDTYB_CMDTYModel.Data" & """" & ")"
    
    Dim rngINFModelList As Range: Set rngINFModelList = Range("NX_" & asn & "_M_INFModelList")
    Dim numINFModels%: numINFModels = rngINFModelList.Rows.count
    Dim rngINFModelListAnchor As Range: Set rngINFModelListAnchor = rngINFModelList.Cells(1, 1).Offset(-1, 0)
    Dim rngINFModels As Range: Set rngINFModels = Range("NX_" & asn & "_M_INFModels")
    rngINFModels.Formula = "=nxlibdata(" & Range(rngINFModelListAnchor, rngINFModelListAnchor.Offset(0, 1)).Address & "," & Range(rngINFModelListAnchor.Offset(1, 0), rngINFModelListAnchor.Offset(numINFModels, 1)).Address & "," & """" & "IR_INFB_CMDTYB_INFModel.Data" & """" & ")"
    ActiveSheet.Calculate
    
CleanUp:
    Application.EnableEvents = True
    Exit Sub
errorHandler:
    Call VBA.MsgBox("Error in creating CMDTY Model list", vbCritical + vbOKOnly, "Error")
    GoTo CleanUp
    End Sub

Private Sub ResizeButton_Click()
    On Error GoTo CleanUp
    Application.ScreenUpdating = False
    Dim temp1 As Variant: temp1 = Split(ComboBoxCMDTYModelNum.Text, " ")
    Dim temp2 As Variant: temp2 = Split(ComboBoxINFModelNum.Text, " ")
    If Not IsNumeric(temp1(0)) Or Not IsNumeric(temp2(0)) Then
        MsgBox "Fatal error when resizing ComboBox"
        GoTo CleanUp
    Else
        Resize CInt(temp1(0)), CInt(temp2(0))
    End If
    On Error GoTo 0
    
CleanUp:
    Application.ScreenUpdating = True
    ActiveSheet.Calculate
End Sub


Public Sub Resize(numCMDTYModel As Integer, numINFModel As Integer)
    On Error GoTo errorHandler
    Application.EnableEvents = False
    Application.ScreenUpdating = False
    
    Dim asn$: asn = ActiveSheet.Name
    Dim rngCMDTYModels As Range: Set rngCMDTYModels = Range("NX_" & asn & "_M_CMDTYModels")
    Dim rngCMDTYModelList As Range: Set rngCMDTYModelList = Range("NX_" & asn & "_M_CMDTYModelList")
    Dim rngINFModels As Range: Set rngINFModels = Range("NX_" & asn & "_M_INFModels")
    Dim rngINFModelList As Range: Set rngINFModelList = Range("NX_" & asn & "_M_INFModelList")
    Dim rngIRModelFactorNum As Range: Set rngIRModelFactorNum = Range("NX_" & asn & "_M_IRModelFactorNum")
    Dim rngCorrAnchor As Range: Set rngCorrAnchor = Range("NX_" & asn & "_M_CorrAnchor")
    Dim rngCMDTYModelListAnchor As Range: Set rngCMDTYModelListAnchor = rngCMDTYModelList.Cells(1, 1).Offset(-1, 0)
    Dim rngINFModelListAnchor As Range: Set rngINFModelListAnchor = rngINFModelList.Cells(1, 1).Offset(-1, 0)
    
    rngCMDTYModelList.Clear
    rngINFModelList.Clear
    rngCorrAnchor.CurrentRegion.Clear
    rngCMDTYModels = "<LINK>"
    rngINFModels = "<LINK>"
    rngIRModelFactorNum.Value = 1
    
    'Resize the CMDTY Model table
    Dim i%, j%
    For i = 1 To numCMDTYModel
        rngCMDTYModelListAnchor.Offset(i, 0) = "<LINK>"
        rngCMDTYModelListAnchor.Offset(i, 1) = "<LINK>"
        rngCMDTYModelListAnchor.Offset(i, 2) = 1
    Next i
    Range(rngCMDTYModelListAnchor.Offset(1, 0), rngCMDTYModelListAnchor.Offset(numCMDTYModel, 2)).Select
    ActiveWorkbook.Names.Add Name:="NX_" & asn & "_M_CMDTYModelList", RefersTo:=Selection
    Set rngCMDTYModelList = Range("NX_" & asn & "_M_CMDTYModelList")
    Call formatColorAndBorder(rngCMDTYModelList)
    Call addConditionalFormat(Range(rngCMDTYModelListAnchor.Offset(1, 0), rngCMDTYModelListAnchor.Offset(numCMDTYModel, 1)))
    Call addDataValidation(Range(rngCMDTYModelListAnchor.Offset(1, 2), rngCMDTYModelListAnchor.Offset(numCMDTYModel, 2)))
        
    'Resize the Inflation Model Table
    For i = 1 To numINFModel
        rngINFModelListAnchor.Offset(i, 0) = "<LINK>"
        rngINFModelListAnchor.Offset(i, 1) = "<LINK>"
    Next i
    Range(rngINFModelListAnchor.Offset(1, 0), rngINFModelListAnchor.Offset(numINFModel, 1)).Select
    ActiveWorkbook.Names.Add Name:="NX_" & asn & "_M_INFModelList", RefersTo:=Selection
    Set rngINFModelList = Range("NX_" & asn & "_M_INFModelList")
    Call formatColorAndBorder(rngINFModelList)
    Call addConditionalFormat(Range(rngINFModelListAnchor.Offset(1, 0), rngINFModelListAnchor.Offset(numINFModel, 1)))
            
    rngCorrAnchor.Offset(0, 1) = "DomesticModelFactor1"
    rngCorrAnchor.Offset(1, 0) = "DomesticModelFactor1"
    
    For i = 1 To numINFModel
        rngCorrAnchor.Offset(0, i + 1) = "RealRate" & CStr(i) & "Model"
        rngCorrAnchor.Offset(i + 1, 0) = "RealRate" & CStr(i) & "Model"
    Next i
    
    For i = 1 To numINFModel
        rngCorrAnchor.Offset(0, i + numINFModel + 1) = "CPI" & CStr(i) & "Model"
        rngCorrAnchor.Offset(i + numINFModel + 1, 0) = "CPI" & CStr(i) & "Model"
    Next i
    
    For i = 1 To numCMDTYModel
        rngCorrAnchor.Offset(0, i + 2 * numINFModel + 1) = "=" & rngCMDTYModelListAnchor.Offset(i, 0).Address & "&" & """" & "Factor1" & """"
        rngCorrAnchor.Offset(i + 2 * numINFModel + 1, 0) = "=" & rngCMDTYModelListAnchor.Offset(i, 0).Address & "&" & """" & "Factor1" & """"
    Next i
    
    For i = 1 To 2 * numINFModel + numCMDTYModel + 1
        rngCorrAnchor.Offset(i, i) = 1
        For j = i + 1 To 2 * numINFModel + numCMDTYModel + 1
            rngCorrAnchor.Offset(i, j) = 0
        Next j
    Next i
    
    rngCorrAnchor.Formula = "=nxlibmatrix(" & Range(rngCorrAnchor.Offset(0, 1), rngCorrAnchor.Offset(0, 2 * numINFModel + numCMDTYModel + 1)).Address & "," _
                                            & Range(rngCorrAnchor.Offset(1, 0), rngCorrAnchor.Offset(2 * numINFModel + numCMDTYModel + 1, 0)).Address & "," _
                                            & Range(rngCorrAnchor.Offset(1, 1), rngCorrAnchor.Offset(2 * numINFModel + numCMDTYModel + 1, 2 * numINFModel + numCMDTYModel + 1)).Address & "," _
                                            & """" & "IR_INFB_CMDTYB_Corr.Data" & """" & ")"
                                            
    Call formatColorAndBorder(rngCorrAnchor)
    Call formatColorAndBorder(Range(rngCorrAnchor.Offset(1, 1), rngCorrAnchor.Offset(2 * numINFModel + numCMDTYModel + 1, 2 * numINFModel + numCMDTYModel + 1)))
    Call formatHeader(Range(rngCorrAnchor.Offset(0, 1), rngCorrAnchor.Offset(0, 2 * numINFModel + numCMDTYModel + 1)))
    Call formatHeader(Range(rngCorrAnchor.Offset(1, 0), rngCorrAnchor.Offset(2 * numINFModel + numCMDTYModel + 1, 0)))

CleanUp:
    Application.EnableEvents = True
    Application.ScreenUpdating = True
    Set rngCMDTYModels = Nothing
    Set rngCMDTYModelList = Nothing
    Set rngCMDTYModelListAnchor = Nothing
    Set rngINFModels = Nothing
    Set rngINFModelList = Nothing
    Set rngINFModelListAnchor = Nothing
    Set rngCorrAnchor = Nothing
    Exit Sub
errorHandler:
    Call VBA.MsgBox("Error in resizing the model", vbCritical + vbOKOnly, "Error")
    GoTo CleanUp
    End Sub

Private Sub Worksheet_Activate()
    On Error GoTo CleanUp
    
    ComboBoxCMDTYModelNum.Clear
    ComboBoxCMDTYModelNum.AddItem ("1 CMDTY Model")
    ComboBoxCMDTYModelNum.AddItem ("2 CMDTY Models")
    ComboBoxCMDTYModelNum.AddItem ("3 CMDTY Models")
    ComboBoxCMDTYModelNum.AddItem ("4 CMDTY Models")
    ComboBoxCMDTYModelNum.AddItem ("5 CMDTY Models")
    ComboBoxCMDTYModelNum.AddItem ("6 CMDTY Models")
    ComboBoxCMDTYModelNum.AddItem ("7 CMDTY Models")
    ComboBoxCMDTYModelNum.AddItem ("8 CMDTY Models")
    ComboBoxCMDTYModelNum.AddItem ("9 CMDTY Models")
    ComboBoxCMDTYModelNum.AddItem ("10 CMDTY Models")
    ComboBoxCMDTYModelNum.Text = "1 CMDTY Model"
    
    ComboBoxINFModelNum.Clear
    ComboBoxINFModelNum.AddItem ("1 Inflation Model")
    ComboBoxINFModelNum.AddItem ("2 Inflation Models")
    ComboBoxINFModelNum.AddItem ("3 Inflation Models")
    ComboBoxINFModelNum.AddItem ("4 Inflation Models")
    ComboBoxINFModelNum.AddItem ("5 Inflation Models")
    ComboBoxINFModelNum.AddItem ("6 Inflation Models")
    ComboBoxINFModelNum.AddItem ("7 Inflation Models")
    ComboBoxINFModelNum.AddItem ("8 Inflation Models")
    ComboBoxINFModelNum.AddItem ("9 Inflation Models")
    ComboBoxINFModelNum.AddItem ("10 Inflation Models")
    ComboBoxINFModelNum.Text = "1 Inflation Model"
    
    hasBeenInitialised = True

CleanUp:
    ActiveSheet.Calculate
End Sub


'Resizing the correlation matrix after changing the Factor number for any model
Private Sub Worksheet_Change(ByVal Target As Range)
    On Error GoTo CleanUp
    Application.EnableEvents = False
    Application.ScreenUpdating = False
    
    Dim asn$: asn = ActiveSheet.Name
    Dim rngCMDTYModelList As Range: Set rngCMDTYModelList = Range("NX_" & asn & "_M_CMDTYModelList")
    Dim numCMDTYModels%: numCMDTYModels = rngCMDTYModelList.Rows.count
    Dim rngCMDTYModelFactorNumList As Range: Set rngCMDTYModelFactorNumList = Range(rngCMDTYModelList.Cells(1, 3), rngCMDTYModelList.Cells(numCMDTYModels, 3))
    Dim rngINFModelList As Range: Set rngINFModelList = Range("NX_" & asn & "_M_INFModelList")
    Dim numINFModels%: numINFModels = rngINFModelList.Rows.count
    Dim rngIRModelFactorNum As Range: Set rngIRModelFactorNum = Range("NX_" & asn & "_M_IRMOdelFactorNum")
    
    If Intersect(Target, rngCMDTYModelFactorNumList) Is Nothing And Intersect(Target, rngIRModelFactorNum) Is Nothing Then
        GoTo CleanUp
    End If
    
    Dim rngCorrAnchor As Range: Set rngCorrAnchor = Range("NX_" & asn & "_M_CorrAnchor")
    rngCorrAnchor.CurrentRegion.Clear
    Dim IRModelFactorNum%: IRModelFactorNum = rngIRModelFactorNum.Value
    Dim CMDTYModelFactorNum%
    Dim i%, j%
    Dim count%: count = 0
    For i = 1 To IRModelFactorNum
        count = count + 1
        rngCorrAnchor.Offset(0, count) = "DomesticModelFactor" & CStr(i)
        rngCorrAnchor.Offset(count, 0) = "DomesticModelFactor" & CStr(i)
    Next i
    
    For i = 1 To numINFModels
        count = count + 1
        rngCorrAnchor.Offset(0, count) = "RealRate" & CStr(i) & "Model"
        rngCorrAnchor.Offset(count, 0) = "RealRate" & CStr(i) & "Model"
    Next i
    
    For i = 1 To numINFModels
        count = count + 1
        rngCorrAnchor.Offset(0, count) = "CPI" & CStr(i) & "Model"
        rngCorrAnchor.Offset(count, 0) = "CPI" & CStr(i) & "Model"
    Next i
    
    For i = 1 To numCMDTYModels
        CMDTYModelFactorNum = rngCMDTYModelList.Cells(i, 3).Value
        For j = 1 To CMDTYModelFactorNum
            count = count + 1
            rngCorrAnchor.Offset(0, count) = "=" & rngCMDTYModelList.Cells(i, 1).Address & "&" & """" & "Factor" & CStr(j) & """"
            rngCorrAnchor.Offset(count, 0) = "=" & rngCMDTYModelList.Cells(i, 1).Address & "&" & """" & "Factor" & CStr(j) & """"
        Next j
    Next i
    
    For i = 1 To count
        rngCorrAnchor.Offset(i, i) = 1
        For j = i + 1 To count
            rngCorrAnchor.Offset(i, j) = 0
        Next j
    Next i
    
    rngCorrAnchor.Formula = "=nxlibmatrix(" & Range(rngCorrAnchor.Offset(0, 1), rngCorrAnchor.Offset(0, count)).Address & "," _
                                            & Range(rngCorrAnchor.Offset(1, 0), rngCorrAnchor.Offset(count, 0)).Address & "," _
                                            & Range(rngCorrAnchor.Offset(1, 1), rngCorrAnchor.Offset(count, count)).Address & "," _
                                            & """" & "IR_INFB_CMDTYB_Corr.Data" & """" & ")"
    
    
    Call formatColorAndBorder(rngCorrAnchor)
    Call formatColorAndBorder(Range(rngCorrAnchor.Offset(1, 1), rngCorrAnchor.Offset(count, count)))
    Call formatHeader(Range(rngCorrAnchor.Offset(0, 1), rngCorrAnchor.Offset(0, count)))
    Call formatHeader(Range(rngCorrAnchor.Offset(1, 0), rngCorrAnchor.Offset(count, 0)))
       
    Range(rngCorrAnchor.Offset(1, 1), rngCorrAnchor.Offset(count, count)).Select
    
CleanUp:
    Application.EnableEvents = True
    Application.ScreenUpdating = True
End Sub





''' Formatting Module

Private Sub addConditionalFormat(tempRng As Range)
    tempRng.Select
    Selection.FormatConditions.Delete
    Selection.FormatConditions.Add Type:=xlCellValue, Operator:=xlEqual, _
        Formula1:="=""<LINK>"""
    Selection.FormatConditions(1).Interior.ColorIndex = 3
        
    Cells(1, 1).Select
End Sub

Private Sub formatHeader(tempRng As Range)
    tempRng.Select
    With Selection.Interior
        .Pattern = xlSolid
        .PatternColorIndex = xlAutomatic
        .Color = 10040115
    End With
    With Selection.Font
        .ColorIndex = 2
        .Name = "Calibri"
        .Size = 11
    End With
    Cells(1, 1).Select
End Sub

Private Sub formatColorAndBorder(tempRng As Range)
    tempRng.Select
    Selection.HorizontalAlignment = xlCenter
    Selection.Borders(xlDiagonalDown).LineStyle = xlNone
    Selection.Borders(xlDiagonalUp).LineStyle = xlNone
    With Selection.Borders(xlEdgeLeft)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlEdgeTop)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlEdgeRight)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .Weight = xlThin
    End With
    Selection.Borders(xlInsideVertical).LineStyle = xlNone
    Selection.Borders(xlInsideHorizontal).LineStyle = xlNone
    With Selection.Interior
        .Pattern = xlSolid
        .PatternColorIndex = xlAutomatic
        .ColorIndex = 2
    End With
    With Selection.Font
        .Name = "Calibri"
        .Size = 11
    End With
    Cells(1, 1).Select

End Sub

Private Sub addDataValidation(tempRng As Range)
    tempRng.Select
    With Selection.Validation
        .Delete
        .Add Type:=xlValidateWholeNumber, AlertStyle:=xlValidAlertStop, _
        Operator:=xlGreaterEqual, Formula1:="1"
        .IgnoreBlank = True
        .InCellDropdown = True
        .InputTitle = ""
        .ErrorTitle = "Incorrect Input"
        .InputMessage = ""
        .ErrorMessage = "Please input an integer"
        .ShowInput = True
        .ShowError = True
    End With
    Cells(1, 1).Select
End Sub

Attribute VB_Name = "Sheet24"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "ComboBoxCMDTYModelNum, 1, 0, MSForms, ComboBox"
Attribute VB_Control = "ResizeButton, 2, 1, MSForms, CommandButton"
Attribute VB_Control = "CreateButton, 3, 2, MSForms, CommandButton"
Attribute VB_Control = "ComboBoxINFModelNum, 4, 3, MSForms, ComboBox"
Attribute VB_Control = "ComboBoxCRModelNum, 5, 4, MSForms, ComboBox"
Option Explicit
Private hasBeenInitialised As Boolean


Private Sub CreateButton_Click()
    On Error GoTo errorHandler
    Application.EnableEvents = False
    Dim asn$: asn = ActiveSheet.Name
    Dim rngCMDTYModelList As Range: Set rngCMDTYModelList = Range("NX_" & asn & "_M_CMDTYModelList")
    Dim numCMDTYModels%: numCMDTYModels = rngCMDTYModelList.Rows.count
    Dim rngCMDTYModelListAnchor As Range: Set rngCMDTYModelListAnchor = rngCMDTYModelList.Cells(1, 1).Offset(-1, 0)
    Dim rngCMDTYModels As Range: Set rngCMDTYModels = Range("NX_" & asn & "_M_CMDTYModels")
    rngCMDTYModels.Formula = "=nxlibdata(" & Range(rngCMDTYModelListAnchor, rngCMDTYModelListAnchor.Offset(0, 1)).Address _
                                & "," & Range(rngCMDTYModelListAnchor.Offset(1, 0), rngCMDTYModelListAnchor.Offset(numCMDTYModels, 1)).Address _
                                & "," & """" & "IR_INFB_CRB_CMDTYB_CMDTYModel.Data" & """" & ")"

    Dim rngCRModelList As Range: Set rngCRModelList = Range("NX_" & asn & "_M_CRModelList")
    Dim numCRModels%: numCRModels = rngCRModelList.Rows.count
    Dim rngCRModelListAnchor As Range: Set rngCRModelListAnchor = rngCRModelList.Cells(1, 1).Offset(-1, 0)
    Dim rngCRModels As Range: Set rngCRModels = Range("NX_" & asn & "_M_CRModels")
    rngCRModels.Formula = "=nxlibdata(" & Range(rngCRModelListAnchor, rngCRModelListAnchor.Offset(0, 1)).Address _
                                & "," & Range(rngCRModelListAnchor.Offset(1, 0), rngCRModelListAnchor.Offset(numCRModels, 1)).Address _
                                & "," & """" & "IR_INFB_CRB_CMDTYB_CRModel.Data" & """" & ")"
    Dim rngINFModelList As Range: Set rngINFModelList = Range("NX_" & asn & "_M_INFModelList")
    Dim numINFModels%: numINFModels = rngINFModelList.Rows.count
    Dim rngINFModelListAnchor As Range: Set rngINFModelListAnchor = rngINFModelList.Cells(1, 1).Offset(-1, 0)
    Dim rngINFModels As Range: Set rngINFModels = Range("NX_" & asn & "_M_INFModels")
    rngINFModels.Formula = "=nxlibdata(" & Range(rngINFModelListAnchor, rngINFModelListAnchor.Offset(0, 1)).Address _
                                & "," & Range(rngINFModelListAnchor.Offset(1, 0), rngINFModelListAnchor.Offset(numINFModels, 1)).Address _
                                & "," & """" & "IR_INFB_CRB_CMDTYB_INFModel.Data" & """" & ")"
                    
CleanUp:
    Set rngCMDTYModelList = Nothing
    Set rngCMDTYModelListAnchor = Nothing
    Set rngCMDTYModels = Nothing
    Set rngCRModelList = Nothing
    Set rngCRModelListAnchor = Nothing
    Set rngCRModels = Nothing
    Set rngINFModelList = Nothing
    Set rngINFModelListAnchor = Nothing
    Set rngINFModels = Nothing
    ActiveSheet.Calculate
    Application.EnableEvents = True
    Exit Sub
errorHandler:
    Call VBA.MsgBox("Error in creating Model list", vbCritical + vbOKOnly, "Error")
    GoTo CleanUp
    End Sub

Private Sub ResizeButton_Click()
    On Error GoTo CleanUp
    Application.ScreenUpdating = False
    Dim temp1 As Variant: temp1 = Split(ComboBoxCMDTYModelNum.Text, " ")
    Dim temp2 As Variant: temp2 = Split(ComboBoxINFModelNum.Text, " ")
    Dim temp3 As Variant: temp3 = Split(ComboBoxCRModelNum.Text, " ")
    If Not IsNumeric(temp1(0)) Or Not IsNumeric(temp2(0)) Or Not IsNumeric(temp3(0)) Then
        MsgBox "Fatal error when resizing ComboBox"
        GoTo CleanUp
    Else
        Resize CInt(temp1(0)), CInt(temp2(0)), CInt(temp3(0))
    End If
    On Error GoTo 0
    
CleanUp:
    Application.ScreenUpdating = True
    ActiveSheet.Calculate
End Sub


Public Sub Resize(numCMDTYModel As Integer, numINFModel As Integer, numCRModel As Integer)
    On Error GoTo errorHandler
    Application.EnableEvents = False
    Application.ScreenUpdating = False
    
    Dim asn$: asn = ActiveSheet.Name
    Dim rngCMDTYModels As Range: Set rngCMDTYModels = Range("NX_" & asn & "_M_CMDTYModels")
    Dim rngCMDTYModelList As Range: Set rngCMDTYModelList = Range("NX_" & asn & "_M_CMDTYModelList")
    Dim rngCMDTYModelListAnchor As Range: Set rngCMDTYModelListAnchor = rngCMDTYModelList.Cells(1, 1).Offset(-1, 0)
    Dim rngCRModels As Range: Set rngCRModels = Range("NX_" & asn & "_M_CRModels")
    Dim rngCRModelList As Range: Set rngCRModelList = Range("NX_" & asn & "_M_CRModelList")
    Dim rngCRModelListAnchor As Range: Set rngCRModelListAnchor = rngCRModelList.Cells(1, 1).Offset(-1, 0)
    Dim rngINFModels As Range: Set rngINFModels = Range("NX_" & asn & "_M_INFModels")
    Dim rngINFModelList As Range: Set rngINFModelList = Range("NX_" & asn & "_M_INFModelList")
    Dim rngINFModelListAnchor As Range: Set rngINFModelListAnchor = rngINFModelList.Cells(1, 1).Offset(-1, 0)
    Dim rngIRModelFactorNum As Range: Set rngIRModelFactorNum = Range("NX_" & asn & "_M_IRModelFactorNum")
    Dim rngCorrAnchor As Range: Set rngCorrAnchor = Range("NX_" & asn & "_M_CorrAnchor")

    rngCMDTYModelList.Clear
    rngINFModelList.Clear
    rngCRModelList.Clear
    rngCorrAnchor.CurrentRegion.Clear
    rngCMDTYModels = "<LINK>"
    rngINFModels = "<LINK>"
    rngCRModels = "<LINK>"
    rngIRModelFactorNum.Value = 1
    
    'Resize the CMDTY Model table
    Dim i%, j%
    For i = 1 To numCMDTYModel
        rngCMDTYModelListAnchor.Offset(i, 0) = "<LINK>"
        rngCMDTYModelListAnchor.Offset(i, 1) = "<LINK>"
        rngCMDTYModelListAnchor.Offset(i, 2) = 1
    Next i
    Range(rngCMDTYModelListAnchor.Offset(1, 0), rngCMDTYModelListAnchor.Offset(numCMDTYModel, 2)).Select
    ActiveWorkbook.Names.Add Name:="NX_" & asn & "_M_CMDTYModelList", RefersTo:=Selection
    Set rngCMDTYModelList = Range("NX_" & asn & "_M_CMDTYModelList")
    Call formatColorAndBorder(rngCMDTYModelList)
    Call addConditionalFormat(Range(rngCMDTYModelListAnchor.Offset(1, 0), rngCMDTYModelListAnchor.Offset(numCMDTYModel, 1)))
    Call addDataValidation(Range(rngCMDTYModelListAnchor.Offset(1, 2), rngCMDTYModelListAnchor.Offset(numCMDTYModel, 2)))
    
    'Resize the CR Model table
    For i = 1 To numCRModel
        rngCRModelListAnchor.Offset(i, 0) = "<LINK>"
        rngCRModelListAnchor.Offset(i, 1) = ""
        rngCRModelListAnchor.Offset(i, 2) = 1
    Next i
    Range(rngCRModelListAnchor.Offset(1, 0), rngCRModelListAnchor.Offset(numCRModel, 2)).Select
    ActiveWorkbook.Names.Add Name:="NX_" & asn & "_M_CRModelList", RefersTo:=Selection
    Set rngCRModelList = Range("NX_" & asn & "_M_CRModelList")
    Call formatColorAndBorder(rngCRModelList)
    Call addConditionalFormat(Range(rngCRModelListAnchor.Offset(1, 0), rngCRModelListAnchor.Offset(numCRModel, 0)))
    Call addDataValidation(Range(rngCRModelListAnchor.Offset(1, 2), rngCRModelListAnchor.Offset(numCRModel, 2)))
        
    'Resize the Inflation Model Table
    For i = 1 To numINFModel
        rngINFModelListAnchor.Offset(i, 0) = "<LINK>"
        rngINFModelListAnchor.Offset(i, 1) = "<LINK>"
    Next i
    Range(rngINFModelListAnchor.Offset(1, 0), rngINFModelListAnchor.Offset(numINFModel, 1)).Select
    ActiveWorkbook.Names.Add Name:="NX_" & asn & "_M_INFModelList", RefersTo:=Selection
    Set rngINFModelList = Range("NX_" & asn & "_M_INFModelList")
    Call formatColorAndBorder(rngINFModelList)
    Call addConditionalFormat(Range(rngINFModelListAnchor.Offset(1, 0), rngINFModelListAnchor.Offset(numINFModel, 1)))
            
    rngCorrAnchor.Offset(0, 1) = "DomesticModelFactor1"
    rngCorrAnchor.Offset(1, 0) = "DomesticModelFactor1"
    
    For i = 1 To numINFModel
        rngCorrAnchor.Offset(0, i + 1) = "RealRate" & CStr(i) & "Model"
        rngCorrAnchor.Offset(i + 1, 0) = "RealRate" & CStr(i) & "Model"
    Next i
    
    For i = 1 To numINFModel
        rngCorrAnchor.Offset(0, i + numINFModel + 1) = "CPI" & CStr(i) & "Model"
        rngCorrAnchor.Offset(i + numINFModel + 1, 0) = "CPI" & CStr(i) & "Model"
    Next i
    
    For i = 1 To numCMDTYModel
        rngCorrAnchor.Offset(0, i + 2 * numINFModel + 1) = "=" & rngCMDTYModelListAnchor.Offset(i, 0).Address & "&" & """" & "Factor1" & """"
        rngCorrAnchor.Offset(i + 2 * numINFModel + 1, 0) = "=" & rngCMDTYModelListAnchor.Offset(i, 0).Address & "&" & """" & "Factor1" & """"
    Next i
    
    For i = 1 To numCRModel
        rngCorrAnchor.Offset(0, i + 2 * numINFModel + numCMDTYModel + 1) = "CR" & CStr(i) & "Factor1"
        rngCorrAnchor.Offset(i + 2 * numINFModel + numCMDTYModel + 1, 0) = "CR" & CStr(i) & "Factor1"
    Next i
    
    For i = 1 To 2 * numINFModel + numCMDTYModel + numCRModel + 1
        rngCorrAnchor.Offset(i, i) = 1
        For j = i + 1 To 2 * numINFModel + numCMDTYModel + numCRModel + 1
            rngCorrAnchor.Offset(i, j) = 0
        Next j
    Next i
    
    rngCorrAnchor.Formula = "=nxlibmatrix(" & Range(rngCorrAnchor.Offset(0, 1), rngCorrAnchor.Offset(0, 2 * numINFModel + numCMDTYModel + numCRModel + 1)).Address & "," _
                                            & Range(rngCorrAnchor.Offset(1, 0), rngCorrAnchor.Offset(2 * numINFModel + numCMDTYModel + numCRModel + 1, 0)).Address & "," _
                                            & Range(rngCorrAnchor.Offset(1, 1), rngCorrAnchor.Offset(2 * numINFModel + numCMDTYModel + numCRModel + 1, 2 * numINFModel + numCMDTYModel + numCRModel + 1)).Address & "," _
                                            & """" & "IR_INFB_CRB_CMDTYB_Corr.Data" & """" & ")"
                                            
    Call formatColorAndBorder(rngCorrAnchor)
    Call formatColorAndBorder(Range(rngCorrAnchor.Offset(1, 1), rngCorrAnchor.Offset(2 * numINFModel + numCMDTYModel + numCRModel + 1, 2 * numINFModel + numCMDTYModel + numCRModel + 1)))
    Call formatHeader(Range(rngCorrAnchor.Offset(0, 1), rngCorrAnchor.Offset(0, 2 * numINFModel + numCMDTYModel + numCRModel + 1)))
    Call formatHeader(Range(rngCorrAnchor.Offset(1, 0), rngCorrAnchor.Offset(2 * numINFModel + numCMDTYModel + numCRModel + 1, 0)))
    
CleanUp:
    Application.EnableEvents = True
    Application.ScreenUpdating = True
    Set rngCMDTYModels = Nothing
    Set rngCMDTYModelList = Nothing
    Set rngCMDTYModelListAnchor = Nothing
    Set rngINFModels = Nothing
    Set rngINFModelList = Nothing
    Set rngINFModelListAnchor = Nothing
    Set rngCorrAnchor = Nothing
    Exit Sub
   
errorHandler:
    Call VBA.MsgBox("Error in resizing the model", vbCritical + vbOKOnly, "Error")
    GoTo CleanUp
    End Sub

Private Sub Worksheet_Activate()
    On Error GoTo CleanUp
    
    ComboBoxCMDTYModelNum.Clear
    ComboBoxCMDTYModelNum.AddItem ("1 CMDTY Model")
    ComboBoxCMDTYModelNum.AddItem ("2 CMDTY Models")
    ComboBoxCMDTYModelNum.AddItem ("3 CMDTY Models")
    ComboBoxCMDTYModelNum.AddItem ("4 CMDTY Models")
    ComboBoxCMDTYModelNum.AddItem ("5 CMDTY Models")
    ComboBoxCMDTYModelNum.AddItem ("6 CMDTY Models")
    ComboBoxCMDTYModelNum.AddItem ("7 CMDTY Models")
    ComboBoxCMDTYModelNum.AddItem ("8 CMDTY Models")
    ComboBoxCMDTYModelNum.AddItem ("9 CMDTY Models")
    ComboBoxCMDTYModelNum.AddItem ("10 CMDTY Models")
    ComboBoxCMDTYModelNum.Text = "1 CMDTY Model"
    
    ComboBoxINFModelNum.Clear
    ComboBoxINFModelNum.AddItem ("1 Inflation Model")
    ComboBoxINFModelNum.AddItem ("2 Inflation Models")
    ComboBoxINFModelNum.AddItem ("3 Inflation Models")
    ComboBoxINFModelNum.AddItem ("4 Inflation Models")
    ComboBoxINFModelNum.AddItem ("5 Inflation Models")
    ComboBoxINFModelNum.AddItem ("6 Inflation Models")
    ComboBoxINFModelNum.AddItem ("7 Inflation Models")
    ComboBoxINFModelNum.AddItem ("8 Inflation Models")
    ComboBoxINFModelNum.AddItem ("9 Inflation Models")
    ComboBoxINFModelNum.AddItem ("10 Inflation Models")
    ComboBoxINFModelNum.Text = "1 Inflation Model"
    
    ComboBoxCRModelNum.Clear
    ComboBoxCRModelNum.AddItem ("1 CR Model")
    ComboBoxCRModelNum.AddItem ("2 CR Models")
    ComboBoxCRModelNum.AddItem ("3 CR Models")
    ComboBoxCRModelNum.AddItem ("4 CR Models")
    ComboBoxCRModelNum.AddItem ("5 CR Models")
    ComboBoxCRModelNum.AddItem ("6 CR Models")
    ComboBoxCRModelNum.AddItem ("7 CR Models")
    ComboBoxCRModelNum.AddItem ("8 CR Models")
    ComboBoxCRModelNum.AddItem ("9 CR Models")
    ComboBoxCRModelNum.AddItem ("10 CR Models")
    ComboBoxCRModelNum.Text = "1 CR Model"
    
    hasBeenInitialised = True

CleanUp:
    ActiveSheet.Calculate
End Sub


'Resizing the correlation matrix after changing the Factor number for any model
Private Sub Worksheet_Change(ByVal Target As Range)
    On Error GoTo CleanUp
    Application.EnableEvents = False
    Application.ScreenUpdating = False
    
    Dim asn$: asn = ActiveSheet.Name
    Dim rngCMDTYModelList As Range: Set rngCMDTYModelList = Range("NX_" & asn & "_M_CMDTYModelList")
    Dim numCMDTYModels%: numCMDTYModels = rngCMDTYModelList.Rows.count
    Dim rngCMDTYModelFactorNumList As Range: Set rngCMDTYModelFactorNumList = Range(rngCMDTYModelList.Cells(1, 3), rngCMDTYModelList.Cells(numCMDTYModels, 3))
    Dim rngCRModelList As Range: Set rngCRModelList = Range("NX_" & asn & "_M_CRModelList")
    Dim numCRModels%: numCRModels = rngCRModelList.Rows.count
    Dim rngCRModelFactorNumList As Range: Set rngCRModelFactorNumList = Range(rngCRModelList.Cells(1, 3), rngCRModelList.Cells(numCRModels, 3))
    Dim rngINFModelList As Range: Set rngINFModelList = Range("NX_" & asn & "_M_INFModelList")
    Dim numINFModels%: numINFModels = rngINFModelList.Rows.count
    Dim rngIRModelFactorNum As Range: Set rngIRModelFactorNum = Range("NX_" & asn & "_M_IRMOdelFactorNum")
    
    
    If Intersect(Target, rngCMDTYModelFactorNumList) Is Nothing And Intersect(Target, rngCRModelFactorNumList) Is Nothing _
        And Intersect(Target, rngIRModelFactorNum) Is Nothing Then
        GoTo CleanUp
    End If
    
    Dim rngCorrAnchor As Range: Set rngCorrAnchor = Range("NX_" & asn & "_M_CorrAnchor")
    rngCorrAnchor.CurrentRegion.Clear
    Dim iIRModelFactorNum%: iIRModelFactorNum = rngIRModelFactorNum.Value
    Dim iCMDTYModelFactorNum%, iCRModelFactorNum%
    Dim i%, j%
    Dim count%: count = 0
    For i = 1 To iIRModelFactorNum
        count = count + 1
        rngCorrAnchor.Offset(0, count) = "DomesticModelFactor" & CStr(i)
        rngCorrAnchor.Offset(count, 0) = "DomesticModelFactor" & CStr(i)
    Next i
    
    For i = 1 To numINFModels
        count = count + 1
        rngCorrAnchor.Offset(0, count) = "RealRate" & CStr(i) & "Model"
        rngCorrAnchor.Offset(count, 0) = "RealRate" & CStr(i) & "Model"
    Next i
    
    For i = 1 To numINFModels
        count = count + 1
        rngCorrAnchor.Offset(0, count) = "CPI" & CStr(i) & "Model"
        rngCorrAnchor.Offset(count, 0) = "CPI" & CStr(i) & "Model"
    Next i
    
    For i = 1 To numCMDTYModels
        iCMDTYModelFactorNum = rngCMDTYModelList.Cells(i, 3).Value
        For j = 1 To iCMDTYModelFactorNum
            count = count + 1
            rngCorrAnchor.Offset(0, count) = "=" & rngCMDTYModelList.Cells(i, 1).Address & "&" & """" & "Factor" & CStr(j) & """"
            rngCorrAnchor.Offset(count, 0) = "=" & rngCMDTYModelList.Cells(i, 1).Address & "&" & """" & "Factor" & CStr(j) & """"
        Next j
    Next i
    
    For i = 1 To numCRModels
        iCRModelFactorNum = rngCRModelList.Cells(i, 3).Value
        For j = 1 To iCRModelFactorNum
            count = count + 1
            rngCorrAnchor.Offset(0, count) = "CR" & CStr(i) & "Factor" & CStr(j)
            rngCorrAnchor.Offset(count, 0) = "CR" & CStr(i) & "Factor" & CStr(j)
        Next j
    Next i
    
    For i = 1 To count
        rngCorrAnchor.Offset(i, i) = 1
        For j = i + 1 To count
            rngCorrAnchor.Offset(i, j) = 0
        Next j
    Next i
    
    rngCorrAnchor.Formula = "=nxlibmatrix(" & Range(rngCorrAnchor.Offset(0, 1), rngCorrAnchor.Offset(0, count)).Address & "," _
                                            & Range(rngCorrAnchor.Offset(1, 0), rngCorrAnchor.Offset(count, 0)).Address & "," _
                                            & Range(rngCorrAnchor.Offset(1, 1), rngCorrAnchor.Offset(count, count)).Address & "," _
                                            & """" & "IR_INFB_CRB_CMDTYB_Corr.Data" & """" & ")"
    
    
    Call formatColorAndBorder(rngCorrAnchor)
    Call formatColorAndBorder(Range(rngCorrAnchor.Offset(1, 1), rngCorrAnchor.Offset(count, count)))
    Call formatHeader(Range(rngCorrAnchor.Offset(0, 1), rngCorrAnchor.Offset(0, count)))
    Call formatHeader(Range(rngCorrAnchor.Offset(1, 0), rngCorrAnchor.Offset(count, 0)))
       
    Range(rngCorrAnchor.Offset(1, 1), rngCorrAnchor.Offset(count, count)).Select
    
CleanUp:
    Application.EnableEvents = True
    Application.ScreenUpdating = True
End Sub





''' Formatting Module

Private Sub addConditionalFormat(tempRng As Range)
    tempRng.Select
    Selection.FormatConditions.Delete
    Selection.FormatConditions.Add Type:=xlCellValue, Operator:=xlEqual, _
        Formula1:="=""<LINK>"""
    Selection.FormatConditions(1).Interior.ColorIndex = 3
        
    Cells(1, 1).Select
End Sub

Private Sub formatHeader(tempRng As Range)
    tempRng.Select
    With Selection.Interior
        .Pattern = xlSolid
        .PatternColorIndex = xlAutomatic
        .Color = 10040115
    End With
    With Selection.Font
        .ColorIndex = 2
        .Name = "Calibri"
        .Size = 11
    End With
    Cells(1, 1).Select
End Sub

Private Sub formatColorAndBorder(tempRng As Range)
    tempRng.Select
    Selection.HorizontalAlignment = xlCenter
    Selection.Borders(xlDiagonalDown).LineStyle = xlNone
    Selection.Borders(xlDiagonalUp).LineStyle = xlNone
    With Selection.Borders(xlEdgeLeft)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlEdgeTop)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlEdgeRight)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .Weight = xlThin
    End With
    Selection.Borders(xlInsideVertical).LineStyle = xlNone
    Selection.Borders(xlInsideHorizontal).LineStyle = xlNone
    With Selection.Interior
        .Pattern = xlSolid
        .PatternColorIndex = xlAutomatic
        .ColorIndex = 2
    End With
    With Selection.Font
        .Name = "Calibri"
        .Size = 11
    End With
    Cells(1, 1).Select

End Sub

Private Sub addDataValidation(tempRng As Range)
    tempRng.Select
    With Selection.Validation
        .Delete
        .Add Type:=xlValidateWholeNumber, AlertStyle:=xlValidAlertStop, _
        Operator:=xlGreaterEqual, Formula1:="1"
        .IgnoreBlank = True
        .InCellDropdown = True
        .InputTitle = ""
        .ErrorTitle = "Incorrect Input"
        .InputMessage = ""
        .ErrorMessage = "Please input an integer"
        .ShowInput = True
        .ShowError = True
    End With
    Cells(1, 1).Select
End Sub

Attribute VB_Name = "Sheet25"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "ComboBoxEQModelNum, 1, 0, MSForms, ComboBox"
Attribute VB_Control = "ResizeButton, 2, 1, MSForms, CommandButton"
Attribute VB_Control = "CreateButton, 3, 2, MSForms, CommandButton"
Attribute VB_Control = "ComboBoxINFModelNum, 4, 3, MSForms, ComboBox"
Attribute VB_Control = "ComboBoxCRModelNum, 5, 4, MSForms, ComboBox"
Option Explicit
Private hasBeenInitialised As Boolean


Private Sub CreateButton_Click()
    On Error GoTo errorHandler
    Application.EnableEvents = False
    Dim asn$: asn = ActiveSheet.Name
    Dim rngEQModelList As Range: Set rngEQModelList = Range("NX_" & asn & "_M_EQModelList")
    Dim numEQModels%: numEQModels = rngEQModelList.Rows.count
    Dim rngEQModelListAnchor As Range: Set rngEQModelListAnchor = rngEQModelList.Cells(1, 1).Offset(-1, 0)
    Dim rngEQModels As Range: Set rngEQModels = Range("NX_" & asn & "_M_EQModels")
    rngEQModels.Formula = "=nxlibdata(" & Range(rngEQModelListAnchor, rngEQModelListAnchor.Offset(0, 1)).Address _
                                & "," & Range(rngEQModelListAnchor.Offset(1, 0), rngEQModelListAnchor.Offset(numEQModels, 1)).Address _
                                & "," & """" & "IR_INFB_CRB_EQB_EQModel.Data" & """" & ")"

    Dim rngCRModelList As Range: Set rngCRModelList = Range("NX_" & asn & "_M_CRModelList")
    Dim numCRModels%: numCRModels = rngCRModelList.Rows.count
    Dim rngCRModelListAnchor As Range: Set rngCRModelListAnchor = rngCRModelList.Cells(1, 1).Offset(-1, 0)
    Dim rngCRModels As Range: Set rngCRModels = Range("NX_" & asn & "_M_CRModels")
    rngCRModels.Formula = "=nxlibdata(" & Range(rngCRModelListAnchor, rngCRModelListAnchor.Offset(0, 1)).Address _
                                & "," & Range(rngCRModelListAnchor.Offset(1, 0), rngCRModelListAnchor.Offset(numCRModels, 1)).Address _
                                & "," & """" & "IR_INFB_CRB_EQB_CRModel.Data" & """" & ")"
                                
    Dim rngINFModelList As Range: Set rngINFModelList = Range("NX_" & asn & "_M_INFModelList")
    Dim numINFModels%: numINFModels = rngINFModelList.Rows.count
    Dim rngINFModelListAnchor As Range: Set rngINFModelListAnchor = rngINFModelList.Cells(1, 1).Offset(-1, 0)
    Dim rngINFModels As Range: Set rngINFModels = Range("NX_" & asn & "_M_INFModels")
    rngINFModels.Formula = "=nxlibdata(" & Range(rngINFModelListAnchor, rngINFModelListAnchor.Offset(0, 1)).Address _
                                & "," & Range(rngINFModelListAnchor.Offset(1, 0), rngINFModelListAnchor.Offset(numINFModels, 1)).Address _
                                & "," & """" & "IR_INFB_CRB_EQB_INFModel.Data" & """" & ")"
                    
CleanUp:
    Set rngEQModelList = Nothing
    Set rngEQModelListAnchor = Nothing
    Set rngEQModels = Nothing
    Set rngCRModelList = Nothing
    Set rngCRModelListAnchor = Nothing
    Set rngCRModels = Nothing
    Set rngINFModelList = Nothing
    Set rngINFModelListAnchor = Nothing
    Set rngINFModels = Nothing
    ActiveSheet.Calculate
    Application.EnableEvents = True
    Exit Sub
errorHandler:
    Call VBA.MsgBox("Error in creating Model list", vbCritical + vbOKOnly, "Error")
    GoTo CleanUp
    End Sub

Private Sub ResizeButton_Click()
    On Error GoTo CleanUp
    Application.ScreenUpdating = False
    Dim temp1 As Variant: temp1 = Split(ComboBoxEQModelNum.Text, " ")
    Dim temp2 As Variant: temp2 = Split(ComboBoxINFModelNum.Text, " ")
    Dim temp3 As Variant: temp3 = Split(ComboBoxCRModelNum.Text, " ")
    If Not IsNumeric(temp1(0)) Or Not IsNumeric(temp2(0)) Or Not IsNumeric(temp3(0)) Then
        MsgBox "Fatal error when resizing ComboBox"
        GoTo CleanUp
    Else
        Resize CInt(temp1(0)), CInt(temp2(0)), CInt(temp3(0))
    End If
    On Error GoTo 0
    
CleanUp:
    Application.ScreenUpdating = True
    ActiveSheet.Calculate
End Sub


Public Sub Resize(numEQModel As Integer, numINFModel As Integer, numCRModel As Integer)
    On Error GoTo errorHandler
    Application.EnableEvents = False
    Application.ScreenUpdating = False
    
    Dim asn$: asn = ActiveSheet.Name
    Dim rngEQModels As Range: Set rngEQModels = Range("NX_" & asn & "_M_EQModels")
    Dim rngEQModelList As Range: Set rngEQModelList = Range("NX_" & asn & "_M_EQModelList")
    Dim rngEQModelListAnchor As Range: Set rngEQModelListAnchor = rngEQModelList.Cells(1, 1).Offset(-1, 0)
    Dim rngCRModels As Range: Set rngCRModels = Range("NX_" & asn & "_M_CRModels")
    Dim rngCRModelList As Range: Set rngCRModelList = Range("NX_" & asn & "_M_CRModelList")
    Dim rngCRModelListAnchor As Range: Set rngCRModelListAnchor = rngCRModelList.Cells(1, 1).Offset(-1, 0)
    Dim rngINFModels As Range: Set rngINFModels = Range("NX_" & asn & "_M_INFModels")
    Dim rngINFModelList As Range: Set rngINFModelList = Range("NX_" & asn & "_M_INFModelList")
    Dim rngINFModelListAnchor As Range: Set rngINFModelListAnchor = rngINFModelList.Cells(1, 1).Offset(-1, 0)
    Dim rngIRModelFactorNum As Range: Set rngIRModelFactorNum = Range("NX_" & asn & "_M_IRModelFactorNum")
    Dim rngCorrAnchor As Range: Set rngCorrAnchor = Range("NX_" & asn & "_M_CorrAnchor")

    rngEQModelList.Clear
    rngINFModelList.Clear
    rngCRModelList.Clear
    rngCorrAnchor.CurrentRegion.Clear
    rngEQModels = "<LINK>"
    rngINFModels = "<LINK>"
    rngCRModels = "<LINK>"
    rngIRModelFactorNum.Value = 1
    
    'Resize the EQ Model table
    Dim i%, j%
    For i = 1 To numEQModel
        rngEQModelListAnchor.Offset(i, 0) = "<LINK>"
        rngEQModelListAnchor.Offset(i, 1) = "<LINK>"
        rngEQModelListAnchor.Offset(i, 2) = 1
    Next i
    Range(rngEQModelListAnchor.Offset(1, 0), rngEQModelListAnchor.Offset(numEQModel, 2)).Select
    ActiveWorkbook.Names.Add Name:="NX_" & asn & "_M_EQModelList", RefersTo:=Selection
    Set rngEQModelList = Range("NX_" & asn & "_M_EQModelList")
    Call formatColorAndBorder(rngEQModelList)
    Call addConditionalFormat(Range(rngEQModelListAnchor.Offset(1, 0), rngEQModelListAnchor.Offset(numEQModel, 1)))
    Call addDataValidation(Range(rngEQModelListAnchor.Offset(1, 2), rngEQModelListAnchor.Offset(numEQModel, 2)))
    
    'Resize the CR Model table
    For i = 1 To numCRModel
        rngCRModelListAnchor.Offset(i, 0) = "<LINK>"
        rngCRModelListAnchor.Offset(i, 1) = ""
        rngCRModelListAnchor.Offset(i, 2) = 1
    Next i
    Range(rngCRModelListAnchor.Offset(1, 0), rngCRModelListAnchor.Offset(numCRModel, 2)).Select
    ActiveWorkbook.Names.Add Name:="NX_" & asn & "_M_CRModelList", RefersTo:=Selection
    Set rngCRModelList = Range("NX_" & asn & "_M_CRModelList")
    Call formatColorAndBorder(rngCRModelList)
    Call addConditionalFormat(Range(rngCRModelListAnchor.Offset(1, 0), rngCRModelListAnchor.Offset(numCRModel, 0)))
    Call addDataValidation(Range(rngCRModelListAnchor.Offset(1, 2), rngCRModelListAnchor.Offset(numCRModel, 2)))
        
    'Resize the Inflation Model Table
    For i = 1 To numINFModel
        rngINFModelListAnchor.Offset(i, 0) = "<LINK>"
        rngINFModelListAnchor.Offset(i, 1) = "<LINK>"
    Next i
    Range(rngINFModelListAnchor.Offset(1, 0), rngINFModelListAnchor.Offset(numINFModel, 1)).Select
    ActiveWorkbook.Names.Add Name:="NX_" & asn & "_M_INFModelList", RefersTo:=Selection
    Set rngINFModelList = Range("NX_" & asn & "_M_INFModelList")
    Call formatColorAndBorder(rngINFModelList)
    Call addConditionalFormat(Range(rngINFModelListAnchor.Offset(1, 0), rngINFModelListAnchor.Offset(numINFModel, 1)))
            
    rngCorrAnchor.Offset(0, 1) = "DomesticModelFactor1"
    rngCorrAnchor.Offset(1, 0) = "DomesticModelFactor1"
    
    For i = 1 To numINFModel
        rngCorrAnchor.Offset(0, i + 1) = "RealRate" & CStr(i) & "Model"
        rngCorrAnchor.Offset(i + 1, 0) = "RealRate" & CStr(i) & "Model"
    Next i
    
    For i = 1 To numINFModel
        rngCorrAnchor.Offset(0, i + numINFModel + 1) = "CPI" & CStr(i) & "Model"
        rngCorrAnchor.Offset(i + numINFModel + 1, 0) = "CPI" & CStr(i) & "Model"
    Next i
    
    For i = 1 To numEQModel
        rngCorrAnchor.Offset(0, i + 2 * numINFModel + 1) = "=" & rngEQModelListAnchor.Offset(i, 0).Address & "&" & """" & "Factor1" & """"
        rngCorrAnchor.Offset(i + 2 * numINFModel + 1, 0) = "=" & rngEQModelListAnchor.Offset(i, 0).Address & "&" & """" & "Factor1" & """"
    Next i
    
    For i = 1 To numCRModel
        rngCorrAnchor.Offset(0, i + 2 * numINFModel + numEQModel + 1) = "CR" & CStr(i) & "Factor1"
        rngCorrAnchor.Offset(i + 2 * numINFModel + numEQModel + 1, 0) = "CR" & CStr(i) & "Factor1"
    Next i
    
    For i = 1 To 2 * numINFModel + numEQModel + numCRModel + 1
        rngCorrAnchor.Offset(i, i) = 1
        For j = i + 1 To 2 * numINFModel + numEQModel + numCRModel + 1
            rngCorrAnchor.Offset(i, j) = 0
        Next j
    Next i
    
    rngCorrAnchor.Formula = "=nxlibmatrix(" & Range(rngCorrAnchor.Offset(0, 1), rngCorrAnchor.Offset(0, 2 * numINFModel + numEQModel + numCRModel + 1)).Address & "," _
                                            & Range(rngCorrAnchor.Offset(1, 0), rngCorrAnchor.Offset(2 * numINFModel + numEQModel + numCRModel + 1, 0)).Address & "," _
                                            & Range(rngCorrAnchor.Offset(1, 1), rngCorrAnchor.Offset(2 * numINFModel + numEQModel + numCRModel + 1, 2 * numINFModel + numEQModel + numCRModel + 1)).Address & "," _
                                            & """" & "IR_INFB_CRB_EQB_Corr.Data" & """" & ")"
                                            
    Call formatColorAndBorder(rngCorrAnchor)
    Call formatColorAndBorder(Range(rngCorrAnchor.Offset(1, 1), rngCorrAnchor.Offset(2 * numINFModel + numEQModel + numCRModel + 1, 2 * numINFModel + numEQModel + numCRModel + 1)))
    Call formatHeader(Range(rngCorrAnchor.Offset(0, 1), rngCorrAnchor.Offset(0, 2 * numINFModel + numEQModel + numCRModel + 1)))
    Call formatHeader(Range(rngCorrAnchor.Offset(1, 0), rngCorrAnchor.Offset(2 * numINFModel + numEQModel + numCRModel + 1, 0)))
    
CleanUp:
    Application.EnableEvents = True
    Application.ScreenUpdating = True
    Set rngEQModels = Nothing
    Set rngEQModelList = Nothing
    Set rngEQModelListAnchor = Nothing
    Set rngINFModels = Nothing
    Set rngINFModelList = Nothing
    Set rngINFModelListAnchor = Nothing
    Set rngCorrAnchor = Nothing
    Exit Sub
   
errorHandler:
    Call VBA.MsgBox("Error in resizing the model", vbCritical + vbOKOnly, "Error")
    GoTo CleanUp
    End Sub

Private Sub Worksheet_Activate()
    On Error GoTo CleanUp
    
    ComboBoxEQModelNum.Clear
    ComboBoxEQModelNum.AddItem ("1 EQ Model")
    ComboBoxEQModelNum.AddItem ("2 EQ Models")
    ComboBoxEQModelNum.AddItem ("3 EQ Models")
    ComboBoxEQModelNum.AddItem ("4 EQ Models")
    ComboBoxEQModelNum.AddItem ("5 EQ Models")
    ComboBoxEQModelNum.AddItem ("6 EQ Models")
    ComboBoxEQModelNum.AddItem ("7 EQ Models")
    ComboBoxEQModelNum.AddItem ("8 EQ Models")
    ComboBoxEQModelNum.AddItem ("9 EQ Models")
    ComboBoxEQModelNum.AddItem ("10 EQ Models")
    ComboBoxEQModelNum.Text = "1 EQ Model"
    
    ComboBoxINFModelNum.Clear
    ComboBoxINFModelNum.AddItem ("1 Inflation Model")
    ComboBoxINFModelNum.AddItem ("2 Inflation Models")
    ComboBoxINFModelNum.AddItem ("3 Inflation Models")
    ComboBoxINFModelNum.AddItem ("4 Inflation Models")
    ComboBoxINFModelNum.AddItem ("5 Inflation Models")
    ComboBoxINFModelNum.AddItem ("6 Inflation Models")
    ComboBoxINFModelNum.AddItem ("7 Inflation Models")
    ComboBoxINFModelNum.AddItem ("8 Inflation Models")
    ComboBoxINFModelNum.AddItem ("9 Inflation Models")
    ComboBoxINFModelNum.AddItem ("10 Inflation Models")
    ComboBoxINFModelNum.Text = "1 Inflation Model"
    
    ComboBoxCRModelNum.Clear
    ComboBoxCRModelNum.AddItem ("1 CR Model")
    ComboBoxCRModelNum.AddItem ("2 CR Models")
    ComboBoxCRModelNum.AddItem ("3 CR Models")
    ComboBoxCRModelNum.AddItem ("4 CR Models")
    ComboBoxCRModelNum.AddItem ("5 CR Models")
    ComboBoxCRModelNum.AddItem ("6 CR Models")
    ComboBoxCRModelNum.AddItem ("7 CR Models")
    ComboBoxCRModelNum.AddItem ("8 CR Models")
    ComboBoxCRModelNum.AddItem ("9 CR Models")
    ComboBoxCRModelNum.AddItem ("10 CR Models")
    ComboBoxCRModelNum.Text = "1 CR Model"
    
    hasBeenInitialised = True

CleanUp:
    ActiveSheet.Calculate
End Sub


'Resizing the correlation matrix after changing the Factor number for any model
Private Sub Worksheet_Change(ByVal Target As Range)
    On Error GoTo CleanUp
    Application.EnableEvents = False
    Application.ScreenUpdating = False
    
    Dim asn$: asn = ActiveSheet.Name
    Dim rngEQModelList As Range: Set rngEQModelList = Range("NX_" & asn & "_M_EQModelList")
    Dim numEQModels%: numEQModels = rngEQModelList.Rows.count
    Dim rngEQModelFactorNumList As Range: Set rngEQModelFactorNumList = Range(rngEQModelList.Cells(1, 3), rngEQModelList.Cells(numEQModels, 3))
    Dim rngCRModelList As Range: Set rngCRModelList = Range("NX_" & asn & "_M_CRModelList")
    Dim numCRModels%: numCRModels = rngCRModelList.Rows.count
    Dim rngCRModelFactorNumList As Range: Set rngCRModelFactorNumList = Range(rngCRModelList.Cells(1, 3), rngCRModelList.Cells(numCRModels, 3))
    Dim rngINFModelList As Range: Set rngINFModelList = Range("NX_" & asn & "_M_INFModelList")
    Dim numINFModels%: numINFModels = rngINFModelList.Rows.count
    Dim rngIRModelFactorNum As Range: Set rngIRModelFactorNum = Range("NX_" & asn & "_M_IRMOdelFactorNum")
    
    
    If Intersect(Target, rngEQModelFactorNumList) Is Nothing And Intersect(Target, rngCRModelFactorNumList) Is Nothing _
        And Intersect(Target, rngIRModelFactorNum) Is Nothing Then
        GoTo CleanUp
    End If
    
    Dim rngCorrAnchor As Range: Set rngCorrAnchor = Range("NX_" & asn & "_M_CorrAnchor")
    rngCorrAnchor.CurrentRegion.Clear
    Dim iIRModelFactorNum%: iIRModelFactorNum = rngIRModelFactorNum.Value
    Dim iEQModelFactorNum%, iCRModelFactorNum%
    Dim i%, j%
    Dim count%: count = 0
    For i = 1 To iIRModelFactorNum
        count = count + 1
        rngCorrAnchor.Offset(0, count) = "DomesticModelFactor" & CStr(i)
        rngCorrAnchor.Offset(count, 0) = "DomesticModelFactor" & CStr(i)
    Next i
    
    For i = 1 To numINFModels
        count = count + 1
        rngCorrAnchor.Offset(0, count) = "RealRate" & CStr(i) & "Model"
        rngCorrAnchor.Offset(count, 0) = "RealRate" & CStr(i) & "Model"
    Next i
    
    For i = 1 To numINFModels
        count = count + 1
        rngCorrAnchor.Offset(0, count) = "CPI" & CStr(i) & "Model"
        rngCorrAnchor.Offset(count, 0) = "CPI" & CStr(i) & "Model"
    Next i
    
    For i = 1 To numEQModels
        iEQModelFactorNum = rngEQModelList.Cells(i, 3).Value
        For j = 1 To iEQModelFactorNum
            count = count + 1
            rngCorrAnchor.Offset(0, count) = "=" & rngEQModelList.Cells(i, 1).Address & "&" & """" & "Factor" & CStr(j) & """"
            rngCorrAnchor.Offset(count, 0) = "=" & rngEQModelList.Cells(i, 1).Address & "&" & """" & "Factor" & CStr(j) & """"
        Next j
    Next i
    
    For i = 1 To numCRModels
        iCRModelFactorNum = rngCRModelList.Cells(i, 3).Value
        For j = 1 To iCRModelFactorNum
            count = count + 1
            rngCorrAnchor.Offset(0, count) = "CR" & CStr(i) & "Factor" & CStr(j)
            rngCorrAnchor.Offset(count, 0) = "CR" & CStr(i) & "Factor" & CStr(j)
        Next j
    Next i
    
    For i = 1 To count
        rngCorrAnchor.Offset(i, i) = 1
        For j = i + 1 To count
            rngCorrAnchor.Offset(i, j) = 0
        Next j
    Next i
    
    rngCorrAnchor.Formula = "=nxlibmatrix(" & Range(rngCorrAnchor.Offset(0, 1), rngCorrAnchor.Offset(0, count)).Address & "," _
                                            & Range(rngCorrAnchor.Offset(1, 0), rngCorrAnchor.Offset(count, 0)).Address & "," _
                                            & Range(rngCorrAnchor.Offset(1, 1), rngCorrAnchor.Offset(count, count)).Address & "," _
                                            & """" & "IR_INFB_CRB_EQB_Corr.Data" & """" & ")"
    
    
    Call formatColorAndBorder(rngCorrAnchor)
    Call formatColorAndBorder(Range(rngCorrAnchor.Offset(1, 1), rngCorrAnchor.Offset(count, count)))
    Call formatHeader(Range(rngCorrAnchor.Offset(0, 1), rngCorrAnchor.Offset(0, count)))
    Call formatHeader(Range(rngCorrAnchor.Offset(1, 0), rngCorrAnchor.Offset(count, 0)))
       
    Range(rngCorrAnchor.Offset(1, 1), rngCorrAnchor.Offset(count, count)).Select
    
CleanUp:
    Application.EnableEvents = True
    Application.ScreenUpdating = True
End Sub





''' Formatting Module

Private Sub addConditionalFormat(tempRng As Range)
    tempRng.Select
    Selection.FormatConditions.Delete
    Selection.FormatConditions.Add Type:=xlCellValue, Operator:=xlEqual, _
        Formula1:="=""<LINK>"""
    Selection.FormatConditions(1).Interior.ColorIndex = 3
        
    Cells(1, 1).Select
End Sub

Private Sub formatHeader(tempRng As Range)
    tempRng.Select
    With Selection.Interior
        .Pattern = xlSolid
        .PatternColorIndex = xlAutomatic
        .Color = 10040115
    End With
    With Selection.Font
        .ColorIndex = 2
        .Name = "Calibri"
        .Size = 11
    End With
    Cells(1, 1).Select
End Sub

Private Sub formatColorAndBorder(tempRng As Range)
    tempRng.Select
    Selection.HorizontalAlignment = xlCenter
    Selection.Borders(xlDiagonalDown).LineStyle = xlNone
    Selection.Borders(xlDiagonalUp).LineStyle = xlNone
    With Selection.Borders(xlEdgeLeft)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlEdgeTop)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlEdgeRight)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .Weight = xlThin
    End With
    Selection.Borders(xlInsideVertical).LineStyle = xlNone
    Selection.Borders(xlInsideHorizontal).LineStyle = xlNone
    With Selection.Interior
        .Pattern = xlSolid
        .PatternColorIndex = xlAutomatic
        .ColorIndex = 2
    End With
    With Selection.Font
        .Name = "Calibri"
        .Size = 11
    End With
    Cells(1, 1).Select

End Sub

Private Sub addDataValidation(tempRng As Range)
    tempRng.Select
    With Selection.Validation
        .Delete
        .Add Type:=xlValidateWholeNumber, AlertStyle:=xlValidAlertStop, _
        Operator:=xlGreaterEqual, Formula1:="1"
        .IgnoreBlank = True
        .InCellDropdown = True
        .InputTitle = ""
        .ErrorTitle = "Incorrect Input"
        .InputMessage = ""
        .ErrorMessage = "Please input an integer"
        .ShowInput = True
        .ShowError = True
    End With
    Cells(1, 1).Select
End Sub

Attribute VB_Name = "Sheet26"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "ComboBoxEQModelNum, 1, 0, MSForms, ComboBox"
Attribute VB_Control = "ResizeButton, 2, 1, MSForms, CommandButton"
Attribute VB_Control = "CreateButton, 3, 2, MSForms, CommandButton"
Attribute VB_Control = "ComboBoxINFModelNum, 4, 3, MSForms, ComboBox"
Attribute VB_Control = "ComboBoxCMDTYModelNum, 5, 4, MSForms, ComboBox"
Option Explicit
Private hasBeenInitialised As Boolean


Private Sub CreateButton_Click()
    On Error GoTo errorHandler
    Application.EnableEvents = False
    Dim asn$: asn = ActiveSheet.Name
    Dim rngEQModelList As Range: Set rngEQModelList = Range("NX_" & asn & "_M_EQModelList")
    Dim numEQModels%: numEQModels = rngEQModelList.Rows.count
    Dim rngEQModelListAnchor As Range: Set rngEQModelListAnchor = rngEQModelList.Cells(1, 1).Offset(-1, 0)
    Dim rngEQModels As Range: Set rngEQModels = Range("NX_" & asn & "_M_EQModels")
    rngEQModels.Formula = "=nxlibdata(" & Range(rngEQModelListAnchor, rngEQModelListAnchor.Offset(0, 1)).Address _
                                & "," & Range(rngEQModelListAnchor.Offset(1, 0), rngEQModelListAnchor.Offset(numEQModels, 1)).Address _
                                & "," & """" & "IR_INFB_EQB_CMDTYB_EQModel.Data" & """" & ")"

    Dim rngCMDTYModelList As Range: Set rngCMDTYModelList = Range("NX_" & asn & "_M_CMDTYModelList")
    Dim numCMDTYModels%: numCMDTYModels = rngCMDTYModelList.Rows.count
    Dim rngCMDTYModelListAnchor As Range: Set rngCMDTYModelListAnchor = rngCMDTYModelList.Cells(1, 1).Offset(-1, 0)
    Dim rngCMDTYModels As Range: Set rngCMDTYModels = Range("NX_" & asn & "_M_CMDTYModels")
    rngCMDTYModels.Formula = "=nxlibdata(" & Range(rngCMDTYModelListAnchor, rngCMDTYModelListAnchor.Offset(0, 1)).Address _
                                & "," & Range(rngCMDTYModelListAnchor.Offset(1, 0), rngCMDTYModelListAnchor.Offset(numCMDTYModels, 1)).Address _
                                & "," & """" & "IR_INFB_EQB_CMDTYB_CMDTYModel.Data" & """" & ")"
                                
    Dim rngINFModelList As Range: Set rngINFModelList = Range("NX_" & asn & "_M_INFModelList")
    Dim numINFModels%: numINFModels = rngINFModelList.Rows.count
    Dim rngINFModelListAnchor As Range: Set rngINFModelListAnchor = rngINFModelList.Cells(1, 1).Offset(-1, 0)
    Dim rngINFModels As Range: Set rngINFModels = Range("NX_" & asn & "_M_INFModels")
    rngINFModels.Formula = "=nxlibdata(" & Range(rngINFModelListAnchor, rngINFModelListAnchor.Offset(0, 1)).Address _
                                & "," & Range(rngINFModelListAnchor.Offset(1, 0), rngINFModelListAnchor.Offset(numINFModels, 1)).Address _
                                & "," & """" & "IR_INFB_EQB_CMDTYB_INFModel.Data" & """" & ")"
                    
CleanUp:
    Set rngEQModelList = Nothing
    Set rngEQModelListAnchor = Nothing
    Set rngEQModels = Nothing
    Set rngCMDTYModelList = Nothing
    Set rngCMDTYModelListAnchor = Nothing
    Set rngCMDTYModels = Nothing
    Set rngINFModelList = Nothing
    Set rngINFModelListAnchor = Nothing
    Set rngINFModels = Nothing
    ActiveSheet.Calculate
    Application.EnableEvents = True
    Exit Sub
errorHandler:
    Call VBA.MsgBox("Error in creating Model list", vbCritical + vbOKOnly, "Error")
    GoTo CleanUp
    End Sub

Private Sub ResizeButton_Click()
    On Error GoTo CleanUp
    Application.ScreenUpdating = False
    Dim temp1 As Variant: temp1 = Split(ComboBoxEQModelNum.Text, " ")
    Dim temp2 As Variant: temp2 = Split(ComboBoxINFModelNum.Text, " ")
    Dim temp3 As Variant: temp3 = Split(ComboBoxCMDTYModelNum.Text, " ")
    If Not IsNumeric(temp1(0)) Or Not IsNumeric(temp2(0)) Or Not IsNumeric(temp3(0)) Then
        MsgBox "Fatal error when resizing ComboBox"
        GoTo CleanUp
    Else
        Resize CInt(temp1(0)), CInt(temp2(0)), CInt(temp3(0))
    End If
    On Error GoTo 0
    
CleanUp:
    Application.ScreenUpdating = True
    ActiveSheet.Calculate
End Sub


Public Sub Resize(numEQModel As Integer, numINFModel As Integer, numCMDTYModel As Integer)
    On Error GoTo errorHandler
    Application.EnableEvents = False
    Application.ScreenUpdating = False
    
    Dim asn$: asn = ActiveSheet.Name
    Dim rngEQModels As Range: Set rngEQModels = Range("NX_" & asn & "_M_EQModels")
    Dim rngEQModelList As Range: Set rngEQModelList = Range("NX_" & asn & "_M_EQModelList")
    Dim rngEQModelListAnchor As Range: Set rngEQModelListAnchor = rngEQModelList.Cells(1, 1).Offset(-1, 0)
    Dim rngCMDTYModels As Range: Set rngCMDTYModels = Range("NX_" & asn & "_M_CMDTYModels")
    Dim rngCMDTYModelList As Range: Set rngCMDTYModelList = Range("NX_" & asn & "_M_CMDTYModelList")
    Dim rngCMDTYModelListAnchor As Range: Set rngCMDTYModelListAnchor = rngCMDTYModelList.Cells(1, 1).Offset(-1, 0)
    Dim rngINFModels As Range: Set rngINFModels = Range("NX_" & asn & "_M_INFModels")
    Dim rngINFModelList As Range: Set rngINFModelList = Range("NX_" & asn & "_M_INFModelList")
    Dim rngINFModelListAnchor As Range: Set rngINFModelListAnchor = rngINFModelList.Cells(1, 1).Offset(-1, 0)
    Dim rngIRModelFactorNum As Range: Set rngIRModelFactorNum = Range("NX_" & asn & "_M_IRModelFactorNum")
    Dim rngCorrAnchor As Range: Set rngCorrAnchor = Range("NX_" & asn & "_M_CorrAnchor")

    rngEQModelList.Clear
    rngINFModelList.Clear
    rngCMDTYModelList.Clear
    rngCorrAnchor.CurrentRegion.Clear
    rngEQModels = "<LINK>"
    rngINFModels = "<LINK>"
    rngCMDTYModels = "<LINK>"
    rngIRModelFactorNum.Value = 1
    
    'Resize the EQ Model table
    Dim i%, j%
    For i = 1 To numEQModel
        rngEQModelListAnchor.Offset(i, 0) = "<LINK>"
        rngEQModelListAnchor.Offset(i, 1) = "<LINK>"
        rngEQModelListAnchor.Offset(i, 2) = 1
    Next i
    Range(rngEQModelListAnchor.Offset(1, 0), rngEQModelListAnchor.Offset(numEQModel, 2)).Select
    ActiveWorkbook.Names.Add Name:="NX_" & asn & "_M_EQModelList", RefersTo:=Selection
    Set rngEQModelList = Range("NX_" & asn & "_M_EQModelList")
    Call formatColorAndBorder(rngEQModelList)
    Call addConditionalFormat(Range(rngEQModelListAnchor.Offset(1, 0), rngEQModelListAnchor.Offset(numEQModel, 1)))
    Call addDataValidation(Range(rngEQModelListAnchor.Offset(1, 2), rngEQModelListAnchor.Offset(numEQModel, 2)))
    
    'Resize the CMDTY Model table
    For i = 1 To numCMDTYModel
        rngCMDTYModelListAnchor.Offset(i, 0) = "<LINK>"
        rngCMDTYModelListAnchor.Offset(i, 1) = "<LINK>"
        rngCMDTYModelListAnchor.Offset(i, 2) = 1
    Next i
    Range(rngCMDTYModelListAnchor.Offset(1, 0), rngCMDTYModelListAnchor.Offset(numCMDTYModel, 2)).Select
    ActiveWorkbook.Names.Add Name:="NX_" & asn & "_M_CMDTYModelList", RefersTo:=Selection
    Set rngCMDTYModelList = Range("NX_" & asn & "_M_CMDTYModelList")
    Call formatColorAndBorder(rngCMDTYModelList)
    Call addConditionalFormat(Range(rngCMDTYModelListAnchor.Offset(1, 0), rngCMDTYModelListAnchor.Offset(numCMDTYModel, 1)))
    Call addDataValidation(Range(rngCMDTYModelListAnchor.Offset(1, 2), rngCMDTYModelListAnchor.Offset(numCMDTYModel, 2)))
        
    'Resize the Inflation Model Table
    For i = 1 To numINFModel
        rngINFModelListAnchor.Offset(i, 0) = "<LINK>"
        rngINFModelListAnchor.Offset(i, 1) = "<LINK>"
    Next i
    Range(rngINFModelListAnchor.Offset(1, 0), rngINFModelListAnchor.Offset(numINFModel, 1)).Select
    ActiveWorkbook.Names.Add Name:="NX_" & asn & "_M_INFModelList", RefersTo:=Selection
    Set rngINFModelList = Range("NX_" & asn & "_M_INFModelList")
    Call formatColorAndBorder(rngINFModelList)
    Call addConditionalFormat(Range(rngINFModelListAnchor.Offset(1, 0), rngINFModelListAnchor.Offset(numINFModel, 1)))
            
    rngCorrAnchor.Offset(0, 1) = "DomesticModelFactor1"
    rngCorrAnchor.Offset(1, 0) = "DomesticModelFactor1"
    
    For i = 1 To numINFModel
        rngCorrAnchor.Offset(0, i + 1) = "RealRate" & CStr(i) & "Model"
        rngCorrAnchor.Offset(i + 1, 0) = "RealRate" & CStr(i) & "Model"
    Next i
    
    For i = 1 To numINFModel
        rngCorrAnchor.Offset(0, i + numINFModel + 1) = "CPI" & CStr(i) & "Model"
        rngCorrAnchor.Offset(i + numINFModel + 1, 0) = "CPI" & CStr(i) & "Model"
    Next i
    
    For i = 1 To numEQModel
        rngCorrAnchor.Offset(0, i + 2 * numINFModel + 1) = "=" & rngEQModelListAnchor.Offset(i, 0).Address & "&" & """" & "Factor1" & """"
        rngCorrAnchor.Offset(i + 2 * numINFModel + 1, 0) = "=" & rngEQModelListAnchor.Offset(i, 0).Address & "&" & """" & "Factor1" & """"
    Next i
    
    For i = 1 To numCMDTYModel
        rngCorrAnchor.Offset(0, i + 2 * numINFModel + numEQModel + 1) = "=" & rngCMDTYModelListAnchor.Offset(i, 0).Address & "&" & """" & "Factor1" & """"
        rngCorrAnchor.Offset(i + 2 * numINFModel + numEQModel + 1, 0) = "=" & rngCMDTYModelListAnchor.Offset(i, 0).Address & "&" & """" & "Factor1" & """"
    Next i
    
    For i = 1 To 2 * numINFModel + numEQModel + numCMDTYModel + 1
        rngCorrAnchor.Offset(i, i) = 1
        For j = i + 1 To 2 * numINFModel + numEQModel + numCMDTYModel + 1
            rngCorrAnchor.Offset(i, j) = 0
        Next j
    Next i
    
    rngCorrAnchor.Formula = "=nxlibmatrix(" & Range(rngCorrAnchor.Offset(0, 1), rngCorrAnchor.Offset(0, 2 * numINFModel + numEQModel + numCMDTYModel + 1)).Address & "," _
                                            & Range(rngCorrAnchor.Offset(1, 0), rngCorrAnchor.Offset(2 * numINFModel + numEQModel + numCMDTYModel + 1, 0)).Address & "," _
                                            & Range(rngCorrAnchor.Offset(1, 1), rngCorrAnchor.Offset(2 * numINFModel + numEQModel + numCMDTYModel + 1, 2 * numINFModel + numEQModel + numCMDTYModel + 1)).Address & "," _
                                            & """" & "IR_INFB_EQB_CMDTYB_Corr.Data" & """" & ")"
                                            
    Call formatColorAndBorder(rngCorrAnchor)
    Call formatColorAndBorder(Range(rngCorrAnchor.Offset(1, 1), rngCorrAnchor.Offset(2 * numINFModel + numEQModel + numCMDTYModel + 1, 2 * numINFModel + numEQModel + numCMDTYModel + 1)))
    Call formatHeader(Range(rngCorrAnchor.Offset(0, 1), rngCorrAnchor.Offset(0, 2 * numINFModel + numEQModel + numCMDTYModel + 1)))
    Call formatHeader(Range(rngCorrAnchor.Offset(1, 0), rngCorrAnchor.Offset(2 * numINFModel + numEQModel + numCMDTYModel + 1, 0)))
    
CleanUp:
    Application.EnableEvents = True
    Application.ScreenUpdating = True
    Set rngEQModels = Nothing
    Set rngEQModelList = Nothing
    Set rngEQModelListAnchor = Nothing
    Set rngINFModels = Nothing
    Set rngINFModelList = Nothing
    Set rngINFModelListAnchor = Nothing
    Set rngCorrAnchor = Nothing
    Exit Sub
   
errorHandler:
    Call VBA.MsgBox("Error in resizing the model", vbCritical + vbOKOnly, "Error")
    GoTo CleanUp
    End Sub

Private Sub Worksheet_Activate()
    On Error GoTo CleanUp
    
    ComboBoxEQModelNum.Clear
    ComboBoxEQModelNum.AddItem ("1 EQ Model")
    ComboBoxEQModelNum.AddItem ("2 EQ Models")
    ComboBoxEQModelNum.AddItem ("3 EQ Models")
    ComboBoxEQModelNum.AddItem ("4 EQ Models")
    ComboBoxEQModelNum.AddItem ("5 EQ Models")
    ComboBoxEQModelNum.AddItem ("6 EQ Models")
    ComboBoxEQModelNum.AddItem ("7 EQ Models")
    ComboBoxEQModelNum.AddItem ("8 EQ Models")
    ComboBoxEQModelNum.AddItem ("9 EQ Models")
    ComboBoxEQModelNum.AddItem ("10 EQ Models")
    ComboBoxEQModelNum.Text = "1 EQ Model"
    
    ComboBoxINFModelNum.Clear
    ComboBoxINFModelNum.AddItem ("1 Inflation Model")
    ComboBoxINFModelNum.AddItem ("2 Inflation Models")
    ComboBoxINFModelNum.AddItem ("3 Inflation Models")
    ComboBoxINFModelNum.AddItem ("4 Inflation Models")
    ComboBoxINFModelNum.AddItem ("5 Inflation Models")
    ComboBoxINFModelNum.AddItem ("6 Inflation Models")
    ComboBoxINFModelNum.AddItem ("7 Inflation Models")
    ComboBoxINFModelNum.AddItem ("8 Inflation Models")
    ComboBoxINFModelNum.AddItem ("9 Inflation Models")
    ComboBoxINFModelNum.AddItem ("10 Inflation Models")
    ComboBoxINFModelNum.Text = "1 Inflation Model"
    
    ComboBoxCMDTYModelNum.Clear
    ComboBoxCMDTYModelNum.AddItem ("1 CMDTY Model")
    ComboBoxCMDTYModelNum.AddItem ("2 CMDTY Models")
    ComboBoxCMDTYModelNum.AddItem ("3 CMDTY Models")
    ComboBoxCMDTYModelNum.AddItem ("4 CMDTY Models")
    ComboBoxCMDTYModelNum.AddItem ("5 CMDTY Models")
    ComboBoxCMDTYModelNum.AddItem ("6 CMDTY Models")
    ComboBoxCMDTYModelNum.AddItem ("7 CMDTY Models")
    ComboBoxCMDTYModelNum.AddItem ("8 CMDTY Models")
    ComboBoxCMDTYModelNum.AddItem ("9 CMDTY Models")
    ComboBoxCMDTYModelNum.AddItem ("10 CMDTY Models")
    ComboBoxCMDTYModelNum.Text = "1 CMDTY Model"
    
    hasBeenInitialised = True

CleanUp:
    ActiveSheet.Calculate
End Sub


'Resizing the correlation matrix after changing the Factor number for any model
Private Sub Worksheet_Change(ByVal Target As Range)
    On Error GoTo CleanUp
    Application.EnableEvents = False
    Application.ScreenUpdating = False
    
    Dim asn$: asn = ActiveSheet.Name
    Dim rngEQModelList As Range: Set rngEQModelList = Range("NX_" & asn & "_M_EQModelList")
    Dim numEQModels%: numEQModels = rngEQModelList.Rows.count
    Dim rngEQModelFactorNumList As Range: Set rngEQModelFactorNumList = Range(rngEQModelList.Cells(1, 3), rngEQModelList.Cells(numEQModels, 3))
    Dim rngCMDTYModelList As Range: Set rngCMDTYModelList = Range("NX_" & asn & "_M_CMDTYModelList")
    Dim numCMDTYModels%: numCMDTYModels = rngCMDTYModelList.Rows.count
    Dim rngCMDTYModelFactorNumList As Range: Set rngCMDTYModelFactorNumList = Range(rngCMDTYModelList.Cells(1, 3), rngCMDTYModelList.Cells(numCMDTYModels, 3))
    Dim rngINFModelList As Range: Set rngINFModelList = Range("NX_" & asn & "_M_INFModelList")
    Dim numINFModels%: numINFModels = rngINFModelList.Rows.count
    Dim rngIRModelFactorNum As Range: Set rngIRModelFactorNum = Range("NX_" & asn & "_M_IRMOdelFactorNum")
    
    
    If Intersect(Target, rngEQModelFactorNumList) Is Nothing And Intersect(Target, rngCMDTYModelFactorNumList) Is Nothing _
        And Intersect(Target, rngIRModelFactorNum) Is Nothing Then
        GoTo CleanUp
    End If
    
    Dim rngCorrAnchor As Range: Set rngCorrAnchor = Range("NX_" & asn & "_M_CorrAnchor")
    rngCorrAnchor.CurrentRegion.Clear
    Dim iIRModelFactorNum%: iIRModelFactorNum = rngIRModelFactorNum.Value
    Dim iEQModelFactorNum%, iCMDTYModelFactorNum%
    Dim i%, j%
    Dim count%: count = 0
    For i = 1 To iIRModelFactorNum
        count = count + 1
        rngCorrAnchor.Offset(0, count) = "DomesticModelFactor" & CStr(i)
        rngCorrAnchor.Offset(count, 0) = "DomesticModelFactor" & CStr(i)
    Next i
    
    For i = 1 To numINFModels
        count = count + 1
        rngCorrAnchor.Offset(0, count) = "RealRate" & CStr(i) & "Model"
        rngCorrAnchor.Offset(count, 0) = "RealRate" & CStr(i) & "Model"
    Next i
    
    For i = 1 To numINFModels
        count = count + 1
        rngCorrAnchor.Offset(0, count) = "CPI" & CStr(i) & "Model"
        rngCorrAnchor.Offset(count, 0) = "CPI" & CStr(i) & "Model"
    Next i
    
    For i = 1 To numEQModels
        iEQModelFactorNum = rngEQModelList.Cells(i, 3).Value
        For j = 1 To iEQModelFactorNum
            count = count + 1
            rngCorrAnchor.Offset(0, count) = "=" & rngEQModelList.Cells(i, 1).Address & "&" & """" & "Factor" & CStr(j) & """"
            rngCorrAnchor.Offset(count, 0) = "=" & rngEQModelList.Cells(i, 1).Address & "&" & """" & "Factor" & CStr(j) & """"
        Next j
    Next i
    
    For i = 1 To numCMDTYModels
        iCMDTYModelFactorNum = rngCMDTYModelList.Cells(i, 3).Value
        For j = 1 To iCMDTYModelFactorNum
            count = count + 1
            rngCorrAnchor.Offset(0, count) = "=" & rngCMDTYModelList.Cells(i, 1).Address & "&" & """" & "Factor" & CStr(j) & """"
            rngCorrAnchor.Offset(count, 0) = "=" & rngCMDTYModelList.Cells(i, 1).Address & "&" & """" & "Factor" & CStr(j) & """"
        Next j
    Next i
    
    For i = 1 To count
        rngCorrAnchor.Offset(i, i) = 1
        For j = i + 1 To count
            rngCorrAnchor.Offset(i, j) = 0
        Next j
    Next i
    
    rngCorrAnchor.Formula = "=nxlibmatrix(" & Range(rngCorrAnchor.Offset(0, 1), rngCorrAnchor.Offset(0, count)).Address & "," _
                                            & Range(rngCorrAnchor.Offset(1, 0), rngCorrAnchor.Offset(count, 0)).Address & "," _
                                            & Range(rngCorrAnchor.Offset(1, 1), rngCorrAnchor.Offset(count, count)).Address & "," _
                                            & """" & "IR_INFB_EQB_CMDTYB_Corr.Data" & """" & ")"
    
    
    Call formatColorAndBorder(rngCorrAnchor)
    Call formatColorAndBorder(Range(rngCorrAnchor.Offset(1, 1), rngCorrAnchor.Offset(count, count)))
    Call formatHeader(Range(rngCorrAnchor.Offset(0, 1), rngCorrAnchor.Offset(0, count)))
    Call formatHeader(Range(rngCorrAnchor.Offset(1, 0), rngCorrAnchor.Offset(count, 0)))
       
    Range(rngCorrAnchor.Offset(1, 1), rngCorrAnchor.Offset(count, count)).Select
    
CleanUp:
    Application.EnableEvents = True
    Application.ScreenUpdating = True
End Sub





''' Formatting Module

Private Sub addConditionalFormat(tempRng As Range)
    tempRng.Select
    Selection.FormatConditions.Delete
    Selection.FormatConditions.Add Type:=xlCellValue, Operator:=xlEqual, _
        Formula1:="=""<LINK>"""
    Selection.FormatConditions(1).Interior.ColorIndex = 3
        
    Cells(1, 1).Select
End Sub

Private Sub formatHeader(tempRng As Range)
    tempRng.Select
    With Selection.Interior
        .Pattern = xlSolid
        .PatternColorIndex = xlAutomatic
        .Color = 10040115
    End With
    With Selection.Font
        .ColorIndex = 2
        .Name = "Calibri"
        .Size = 11
    End With
    Cells(1, 1).Select
End Sub

Private Sub formatColorAndBorder(tempRng As Range)
    tempRng.Select
    Selection.HorizontalAlignment = xlCenter
    Selection.Borders(xlDiagonalDown).LineStyle = xlNone
    Selection.Borders(xlDiagonalUp).LineStyle = xlNone
    With Selection.Borders(xlEdgeLeft)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlEdgeTop)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlEdgeRight)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .Weight = xlThin
    End With
    Selection.Borders(xlInsideVertical).LineStyle = xlNone
    Selection.Borders(xlInsideHorizontal).LineStyle = xlNone
    With Selection.Interior
        .Pattern = xlSolid
        .PatternColorIndex = xlAutomatic
        .ColorIndex = 2
    End With
    With Selection.Font
        .Name = "Calibri"
        .Size = 11
    End With
    Cells(1, 1).Select

End Sub

Private Sub addDataValidation(tempRng As Range)
    tempRng.Select
    With Selection.Validation
        .Delete
        .Add Type:=xlValidateWholeNumber, AlertStyle:=xlValidAlertStop, _
        Operator:=xlGreaterEqual, Formula1:="1"
        .IgnoreBlank = True
        .InCellDropdown = True
        .InputTitle = ""
        .ErrorTitle = "Incorrect Input"
        .InputMessage = ""
        .ErrorMessage = "Please input an integer"
        .ShowInput = True
        .ShowError = True
    End With
    Cells(1, 1).Select
End Sub

Attribute VB_Name = "Sheet27"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "ComboBoxEQModelNum, 1, 0, MSForms, ComboBox"
Attribute VB_Control = "ResizeButton, 2, 1, MSForms, CommandButton"
Attribute VB_Control = "CreateButton, 3, 2, MSForms, CommandButton"
Attribute VB_Control = "ComboBoxINFModelNum, 4, 3, MSForms, ComboBox"
Attribute VB_Control = "ComboBoxCMDTYModelNum, 5, 4, MSForms, ComboBox"
Attribute VB_Control = "ComboBoxCRModelNum, 6, 5, MSForms, ComboBox"
Option Explicit
Private hasBeenInitialised As Boolean


Private Sub CreateButton_Click()
    On Error GoTo errorHandler
    Application.EnableEvents = False
    Dim asn$: asn = ActiveSheet.Name
    Dim rngEQModelList As Range: Set rngEQModelList = Range("NX_" & asn & "_M_EQModelList")
    Dim numEQModels%: numEQModels = rngEQModelList.Rows.count
    Dim rngEQModelListAnchor As Range: Set rngEQModelListAnchor = rngEQModelList.Cells(1, 1).Offset(-1, 0)
    Dim rngEQModels As Range: Set rngEQModels = Range("NX_" & asn & "_M_EQModels")
    rngEQModels.Formula = "=nxlibdata(" & Range(rngEQModelListAnchor, rngEQModelListAnchor.Offset(0, 1)).Address _
                                & "," & Range(rngEQModelListAnchor.Offset(1, 0), rngEQModelListAnchor.Offset(numEQModels, 1)).Address _
                                & "," & """" & "IR_INFB_CRB_EQB_CMDTYB_EQModel.Data" & """" & ")"

    Dim rngCMDTYModelList As Range: Set rngCMDTYModelList = Range("NX_" & asn & "_M_CMDTYModelList")
    Dim numCMDTYModels%: numCMDTYModels = rngCMDTYModelList.Rows.count
    Dim rngCMDTYModelListAnchor As Range: Set rngCMDTYModelListAnchor = rngCMDTYModelList.Cells(1, 1).Offset(-1, 0)
    Dim rngCMDTYModels As Range: Set rngCMDTYModels = Range("NX_" & asn & "_M_CMDTYModels")
    rngCMDTYModels.Formula = "=nxlibdata(" & Range(rngCMDTYModelListAnchor, rngCMDTYModelListAnchor.Offset(0, 1)).Address _
                                & "," & Range(rngCMDTYModelListAnchor.Offset(1, 0), rngCMDTYModelListAnchor.Offset(numCMDTYModels, 1)).Address _
                                & "," & """" & "IR_INFB_CRB_EQB_CMDTYB_CMDTYModel.Data" & """" & ")"
                                
    Dim rngCRModelList As Range: Set rngCRModelList = Range("NX_" & asn & "_M_CRModelList")
    Dim numCRModels%: numCRModels = rngCRModelList.Rows.count
    Dim rngCRModelListAnchor As Range: Set rngCRModelListAnchor = rngCRModelList.Cells(1, 1).Offset(-1, 0)
    Dim rngCRModels As Range: Set rngCRModels = Range("NX_" & asn & "_M_CRModels")
    rngCRModels.Formula = "=nxlibdata(" & Range(rngCRModelListAnchor, rngCRModelListAnchor.Offset(0, 1)).Address _
                                & "," & Range(rngCRModelListAnchor.Offset(1, 0), rngCRModelListAnchor.Offset(numCRModels, 1)).Address _
                                & "," & """" & "IR_INFB_CRB_EQB_CMDTYB_CRModel.Data" & """" & ")"
                                
    Dim rngINFModelList As Range: Set rngINFModelList = Range("NX_" & asn & "_M_INFModelList")
    Dim numINFModels%: numINFModels = rngINFModelList.Rows.count
    Dim rngINFModelListAnchor As Range: Set rngINFModelListAnchor = rngINFModelList.Cells(1, 1).Offset(-1, 0)
    Dim rngINFModels As Range: Set rngINFModels = Range("NX_" & asn & "_M_INFModels")
    rngINFModels.Formula = "=nxlibdata(" & Range(rngINFModelListAnchor, rngINFModelListAnchor.Offset(0, 1)).Address _
                                & "," & Range(rngINFModelListAnchor.Offset(1, 0), rngINFModelListAnchor.Offset(numINFModels, 1)).Address _
                                & "," & """" & "IR_INFB_CRB_EQB_CMDTYB_INFModel.Data" & """" & ")"
                    
CleanUp:
    Set rngEQModelList = Nothing
    Set rngEQModelListAnchor = Nothing
    Set rngEQModels = Nothing
    Set rngCMDTYModelList = Nothing
    Set rngCMDTYModelListAnchor = Nothing
    Set rngCMDTYModels = Nothing
    Set rngINFModelList = Nothing
    Set rngINFModelListAnchor = Nothing
    Set rngINFModels = Nothing
    ActiveSheet.Calculate
    Application.EnableEvents = True
    Exit Sub
errorHandler:
    Call VBA.MsgBox("Error in creating Model list", vbCritical + vbOKOnly, "Error")
    GoTo CleanUp
    End Sub

Private Sub ResizeButton_Click()
    On Error GoTo CleanUp
    Application.ScreenUpdating = False
    Dim temp1 As Variant: temp1 = Split(ComboBoxEQModelNum.Text, " ")
    Dim temp2 As Variant: temp2 = Split(ComboBoxINFModelNum.Text, " ")
    Dim temp3 As Variant: temp3 = Split(ComboBoxCMDTYModelNum.Text, " ")
    Dim temp4 As Variant: temp4 = Split(ComboBoxCRModelNum.Text, " ")
    If Not IsNumeric(temp1(0)) Or Not IsNumeric(temp2(0)) Or Not IsNumeric(temp3(0)) Or Not IsNumeric(temp4(0)) Then
        MsgBox "Fatal error when resizing ComboBox"
        GoTo CleanUp
    Else
        Resize CInt(temp1(0)), CInt(temp2(0)), CInt(temp3(0)), CInt(temp4(0))
    End If
    On Error GoTo 0
    
CleanUp:
    Application.ScreenUpdating = True
    ActiveSheet.Calculate
End Sub


Public Sub Resize(numEQModel As Integer, numINFModel As Integer, numCMDTYModel As Integer, numCRModel As Integer)
    On Error GoTo errorHandler
    Application.EnableEvents = False
    Application.ScreenUpdating = False
    
    Dim asn$: asn = ActiveSheet.Name
    Dim rngEQModels As Range: Set rngEQModels = Range("NX_" & asn & "_M_EQModels")
    Dim rngEQModelList As Range: Set rngEQModelList = Range("NX_" & asn & "_M_EQModelList")
    Dim rngEQModelListAnchor As Range: Set rngEQModelListAnchor = rngEQModelList.Cells(1, 1).Offset(-1, 0)
    Dim rngCMDTYModels As Range: Set rngCMDTYModels = Range("NX_" & asn & "_M_CMDTYModels")
    Dim rngCMDTYModelList As Range: Set rngCMDTYModelList = Range("NX_" & asn & "_M_CMDTYModelList")
    Dim rngCMDTYModelListAnchor As Range: Set rngCMDTYModelListAnchor = rngCMDTYModelList.Cells(1, 1).Offset(-1, 0)
    Dim rngCRModels As Range: Set rngCRModels = Range("NX_" & asn & "_M_CRModels")
    Dim rngCRModelList As Range: Set rngCRModelList = Range("NX_" & asn & "_M_CRModelList")
    Dim rngCRModelListAnchor As Range: Set rngCRModelListAnchor = rngCRModelList.Cells(1, 1).Offset(-1, 0)
    Dim rngINFModels As Range: Set rngINFModels = Range("NX_" & asn & "_M_INFModels")
    Dim rngINFModelList As Range: Set rngINFModelList = Range("NX_" & asn & "_M_INFModelList")
    Dim rngINFModelListAnchor As Range: Set rngINFModelListAnchor = rngINFModelList.Cells(1, 1).Offset(-1, 0)
    Dim rngIRModelFactorNum As Range: Set rngIRModelFactorNum = Range("NX_" & asn & "_M_IRModelFactorNum")
    Dim rngCorrAnchor As Range: Set rngCorrAnchor = Range("NX_" & asn & "_M_CorrAnchor")

    rngEQModelList.Clear
    rngINFModelList.Clear
    rngCMDTYModelList.Clear
    rngCRModelList.Clear
    rngCorrAnchor.CurrentRegion.Clear
    rngEQModels = "<LINK>"
    rngINFModels = "<LINK>"
    rngCMDTYModels = "<LINK>"
    rngCRModels = "<LINK>"
    rngIRModelFactorNum.Value = 1
    
    'Resize the EQ Model table
    Dim i%, j%
    For i = 1 To numEQModel
        rngEQModelListAnchor.Offset(i, 0) = "<LINK>"
        rngEQModelListAnchor.Offset(i, 1) = "<LINK>"
        rngEQModelListAnchor.Offset(i, 2) = 1
    Next i
    Range(rngEQModelListAnchor.Offset(1, 0), rngEQModelListAnchor.Offset(numEQModel, 2)).Select
    ActiveWorkbook.Names.Add Name:="NX_" & asn & "_M_EQModelList", RefersTo:=Selection
    Set rngEQModelList = Range("NX_" & asn & "_M_EQModelList")
    Call formatColorAndBorder(rngEQModelList)
    Call addConditionalFormat(Range(rngEQModelListAnchor.Offset(1, 0), rngEQModelListAnchor.Offset(numEQModel, 1)))
    Call addDataValidation(Range(rngEQModelListAnchor.Offset(1, 2), rngEQModelListAnchor.Offset(numEQModel, 2)))
    
    'Resize the CMDTY Model table
    For i = 1 To numCMDTYModel
        rngCMDTYModelListAnchor.Offset(i, 0) = "<LINK>"
        rngCMDTYModelListAnchor.Offset(i, 1) = "<LINK>"
        rngCMDTYModelListAnchor.Offset(i, 2) = 1
    Next i
    Range(rngCMDTYModelListAnchor.Offset(1, 0), rngCMDTYModelListAnchor.Offset(numCMDTYModel, 2)).Select
    ActiveWorkbook.Names.Add Name:="NX_" & asn & "_M_CMDTYModelList", RefersTo:=Selection
    Set rngCMDTYModelList = Range("NX_" & asn & "_M_CMDTYModelList")
    Call formatColorAndBorder(rngCMDTYModelList)
    Call addConditionalFormat(Range(rngCMDTYModelListAnchor.Offset(1, 0), rngCMDTYModelListAnchor.Offset(numCMDTYModel, 1)))
    Call addDataValidation(Range(rngCMDTYModelListAnchor.Offset(1, 2), rngCMDTYModelListAnchor.Offset(numCMDTYModel, 2)))
        
    'Resize the Inflation Model Table
    For i = 1 To numINFModel
        rngINFModelListAnchor.Offset(i, 0) = "<LINK>"
        rngINFModelListAnchor.Offset(i, 1) = "<LINK>"
    Next i
    Range(rngINFModelListAnchor.Offset(1, 0), rngINFModelListAnchor.Offset(numINFModel, 1)).Select
    ActiveWorkbook.Names.Add Name:="NX_" & asn & "_M_INFModelList", RefersTo:=Selection
    Set rngINFModelList = Range("NX_" & asn & "_M_INFModelList")
    Call formatColorAndBorder(rngINFModelList)
    Call addConditionalFormat(Range(rngINFModelListAnchor.Offset(1, 0), rngINFModelListAnchor.Offset(numINFModel, 1)))
    
    'Resize the CR Model Table
    For i = 1 To numCRModel
        rngCRModelListAnchor.Offset(i, 0) = "<LINK>"
        rngCRModelListAnchor.Offset(i, 1) = ""
        rngCRModelListAnchor.Offset(i, 2) = 1
    Next i
    Range(rngCRModelListAnchor.Offset(1, 0), rngCRModelListAnchor.Offset(numCRModel, 2)).Select
    ActiveWorkbook.Names.Add Name:="NX_" & asn & "_M_CRModelList", RefersTo:=Selection
    Set rngCRModelList = Range("NX_" & asn & "_M_CRModelList")
    Call formatColorAndBorder(rngCRModelList)
    Call addConditionalFormat(Range(rngCRModelListAnchor.Offset(1, 0), rngCRModelListAnchor.Offset(numCRModel, 0)))
    Call addDataValidation(Range(rngCRModelListAnchor.Offset(1, 2), rngCRModelListAnchor.Offset(numCRModel, 2)))
    
            
    rngCorrAnchor.Offset(0, 1) = "DomesticModelFactor1"
    rngCorrAnchor.Offset(1, 0) = "DomesticModelFactor1"
    
    For i = 1 To numINFModel
        rngCorrAnchor.Offset(0, i + 1) = "RealRate" & CStr(i) & "Model"
        rngCorrAnchor.Offset(i + 1, 0) = "RealRate" & CStr(i) & "Model"
    Next i
    
    For i = 1 To numINFModel
        rngCorrAnchor.Offset(0, i + numINFModel + 1) = "CPI" & CStr(i) & "Model"
        rngCorrAnchor.Offset(i + numINFModel + 1, 0) = "CPI" & CStr(i) & "Model"
    Next i
    
    For i = 1 To numEQModel
        rngCorrAnchor.Offset(0, i + 2 * numINFModel + 1) = "=" & rngEQModelListAnchor.Offset(i, 0).Address & "&" & """" & "Factor1" & """"
        rngCorrAnchor.Offset(i + 2 * numINFModel + 1, 0) = "=" & rngEQModelListAnchor.Offset(i, 0).Address & "&" & """" & "Factor1" & """"
    Next i
    
    For i = 1 To numCMDTYModel
        rngCorrAnchor.Offset(0, i + 2 * numINFModel + numEQModel + 1) = "=" & rngCMDTYModelListAnchor.Offset(i, 0).Address & "&" & """" & "Factor1" & """"
        rngCorrAnchor.Offset(i + 2 * numINFModel + numEQModel + 1, 0) = "=" & rngCMDTYModelListAnchor.Offset(i, 0).Address & "&" & """" & "Factor1" & """"
    Next i
    
    For i = 1 To numCRModel
        rngCorrAnchor.Offset(0, i + 2 * numINFModel + numEQModel + numCMDTYModel + 1) = "CR" & CStr(i) & "Factor1"
        rngCorrAnchor.Offset(i + 2 * numINFModel + numEQModel + numCMDTYModel + 1, 0) = "CR" & CStr(i) & "Factor1"
    Next i
    
    For i = 1 To 2 * numINFModel + numEQModel + numCMDTYModel + numCRModel + 1
        rngCorrAnchor.Offset(i, i) = 1
        For j = i + 1 To 2 * numINFModel + numEQModel + numCMDTYModel + numCRModel + 1
            rngCorrAnchor.Offset(i, j) = 0
        Next j
    Next i
    
    rngCorrAnchor.Formula = "=nxlibmatrix(" & Range(rngCorrAnchor.Offset(0, 1), rngCorrAnchor.Offset(0, 2 * numINFModel + numEQModel + numCMDTYModel + numCRModel + 1)).Address & "," _
                                            & Range(rngCorrAnchor.Offset(1, 0), rngCorrAnchor.Offset(2 * numINFModel + numEQModel + numCMDTYModel + numCRModel + 1, 0)).Address & "," _
                                            & Range(rngCorrAnchor.Offset(1, 1), rngCorrAnchor.Offset(2 * numINFModel + numEQModel + numCMDTYModel + numCRModel + 1, _
                                                                                                    2 * numINFModel + numEQModel + numCMDTYModel + numCRModel + 1)).Address & "," _
                                            & """" & "IR_INFB_CRB_EQB_CMDTYB_Corr.Data" & """" & ")"
                                            
    Call formatColorAndBorder(rngCorrAnchor)
    Call formatColorAndBorder(Range(rngCorrAnchor.Offset(1, 1), rngCorrAnchor.Offset(2 * numINFModel + numEQModel + numCMDTYModel + numCRModel + 1, _
                                        2 * numINFModel + numEQModel + numCMDTYModel + numCRModel + 1)))
    Call formatHeader(Range(rngCorrAnchor.Offset(0, 1), rngCorrAnchor.Offset(0, 2 * numINFModel + numEQModel + numCMDTYModel + numCRModel + 1)))
    Call formatHeader(Range(rngCorrAnchor.Offset(1, 0), rngCorrAnchor.Offset(2 * numINFModel + numEQModel + numCMDTYModel + numCRModel + 1, 0)))
    
CleanUp:
    Application.EnableEvents = True
    Application.ScreenUpdating = True
    Set rngEQModels = Nothing
    Set rngEQModelList = Nothing
    Set rngEQModelListAnchor = Nothing
    Set rngCMDTYModels = Nothing
    Set rngCMDTYModelList = Nothing
    Set rngCMDTYModelListAnchor = Nothing
    Set rngCRModels = Nothing
    Set rngCRModelList = Nothing
    Set rngCRModelListAnchor = Nothing
    Set rngINFModels = Nothing
    Set rngINFModelList = Nothing
    Set rngINFModelListAnchor = Nothing
    Set rngCorrAnchor = Nothing
    Exit Sub
   
errorHandler:
    Call VBA.MsgBox("Error in resizing the model", vbCritical + vbOKOnly, "Error")
    GoTo CleanUp
    End Sub

Private Sub Worksheet_Activate()
    On Error GoTo CleanUp
    
    ComboBoxEQModelNum.Clear
    ComboBoxEQModelNum.AddItem ("1 EQ Model")
    ComboBoxEQModelNum.AddItem ("2 EQ Models")
    ComboBoxEQModelNum.AddItem ("3 EQ Models")
    ComboBoxEQModelNum.AddItem ("4 EQ Models")
    ComboBoxEQModelNum.AddItem ("5 EQ Models")
    ComboBoxEQModelNum.AddItem ("6 EQ Models")
    ComboBoxEQModelNum.AddItem ("7 EQ Models")
    ComboBoxEQModelNum.AddItem ("8 EQ Models")
    ComboBoxEQModelNum.AddItem ("9 EQ Models")
    ComboBoxEQModelNum.AddItem ("10 EQ Models")
    ComboBoxEQModelNum.Text = "1 EQ Model"
    
    ComboBoxINFModelNum.Clear
    ComboBoxINFModelNum.AddItem ("1 Inflation Model")
    ComboBoxINFModelNum.AddItem ("2 Inflation Models")
    ComboBoxINFModelNum.AddItem ("3 Inflation Models")
    ComboBoxINFModelNum.AddItem ("4 Inflation Models")
    ComboBoxINFModelNum.AddItem ("5 Inflation Models")
    ComboBoxINFModelNum.AddItem ("6 Inflation Models")
    ComboBoxINFModelNum.AddItem ("7 Inflation Models")
    ComboBoxINFModelNum.AddItem ("8 Inflation Models")
    ComboBoxINFModelNum.AddItem ("9 Inflation Models")
    ComboBoxINFModelNum.AddItem ("10 Inflation Models")
    ComboBoxINFModelNum.Text = "1 Inflation Model"
    
    ComboBoxCMDTYModelNum.Clear
    ComboBoxCMDTYModelNum.AddItem ("1 CMDTY Model")
    ComboBoxCMDTYModelNum.AddItem ("2 CMDTY Models")
    ComboBoxCMDTYModelNum.AddItem ("3 CMDTY Models")
    ComboBoxCMDTYModelNum.AddItem ("4 CMDTY Models")
    ComboBoxCMDTYModelNum.AddItem ("5 CMDTY Models")
    ComboBoxCMDTYModelNum.AddItem ("6 CMDTY Models")
    ComboBoxCMDTYModelNum.AddItem ("7 CMDTY Models")
    ComboBoxCMDTYModelNum.AddItem ("8 CMDTY Models")
    ComboBoxCMDTYModelNum.AddItem ("9 CMDTY Models")
    ComboBoxCMDTYModelNum.AddItem ("10 CMDTY Models")
    ComboBoxCMDTYModelNum.Text = "1 CMDTY Model"
    
    ComboBoxCRModelNum.Clear
    ComboBoxCRModelNum.AddItem ("1 CR Model")
    ComboBoxCRModelNum.AddItem ("2 CR Models")
    ComboBoxCRModelNum.AddItem ("3 CR Models")
    ComboBoxCRModelNum.AddItem ("4 CR Models")
    ComboBoxCRModelNum.AddItem ("5 CR Models")
    ComboBoxCRModelNum.AddItem ("6 CR Models")
    ComboBoxCRModelNum.AddItem ("7 CR Models")
    ComboBoxCRModelNum.AddItem ("8 CR Models")
    ComboBoxCRModelNum.AddItem ("9 CR Models")
    ComboBoxCRModelNum.AddItem ("10 CR Models")
    ComboBoxCRModelNum.Text = "1 CR Model"
    
    hasBeenInitialised = True

CleanUp:
    ActiveSheet.Calculate
End Sub


'Resizing the correlation matrix after changing the Factor number for any model
Private Sub Worksheet_Change(ByVal Target As Range)
    On Error GoTo CleanUp
    Application.EnableEvents = False
    Application.ScreenUpdating = False
    
    Dim asn$: asn = ActiveSheet.Name
    Dim rngEQModelList As Range: Set rngEQModelList = Range("NX_" & asn & "_M_EQModelList")
    Dim numEQModels%: numEQModels = rngEQModelList.Rows.count
    Dim rngEQModelFactorNumList As Range: Set rngEQModelFactorNumList = Range(rngEQModelList.Cells(1, 3), rngEQModelList.Cells(numEQModels, 3))
    Dim rngCMDTYModelList As Range: Set rngCMDTYModelList = Range("NX_" & asn & "_M_CMDTYModelList")
    Dim numCMDTYModels%: numCMDTYModels = rngCMDTYModelList.Rows.count
    Dim rngCMDTYModelFactorNumList As Range: Set rngCMDTYModelFactorNumList = Range(rngCMDTYModelList.Cells(1, 3), rngCMDTYModelList.Cells(numCMDTYModels, 3))
    Dim rngCRModelList As Range: Set rngCRModelList = Range("NX_" & asn & "_M_CRModelList")
    Dim numCRModels%: numCRModels = rngCRModelList.Rows.count
    Dim rngCRModelFactorNumList As Range: Set rngCRModelFactorNumList = Range(rngCRModelList.Cells(1, 3), rngCRModelList.Cells(numCRModels, 3))
    Dim rngINFModelList As Range: Set rngINFModelList = Range("NX_" & asn & "_M_INFModelList")
    Dim numINFModels%: numINFModels = rngINFModelList.Rows.count
    Dim rngIRModelFactorNum As Range: Set rngIRModelFactorNum = Range("NX_" & asn & "_M_IRMOdelFactorNum")
    
    
    If Intersect(Target, rngEQModelFactorNumList) Is Nothing And Intersect(Target, rngCMDTYModelFactorNumList) Is Nothing _
        And Intersect(Target, rngCRModelFactorNumList) Is Nothing And Intersect(Target, rngIRModelFactorNum) Is Nothing Then
        GoTo CleanUp
    End If
    
    Dim rngCorrAnchor As Range: Set rngCorrAnchor = Range("NX_" & asn & "_M_CorrAnchor")
    rngCorrAnchor.CurrentRegion.Clear
    Dim iIRModelFactorNum%: iIRModelFactorNum = rngIRModelFactorNum.Value
    Dim iEQModelFactorNum%, iCMDTYModelFactorNum%, iCRModelFactorNum%
    Dim i%, j%
    Dim count%: count = 0
    For i = 1 To iIRModelFactorNum
        count = count + 1
        rngCorrAnchor.Offset(0, count) = "DomesticModelFactor" & CStr(i)
        rngCorrAnchor.Offset(count, 0) = "DomesticModelFactor" & CStr(i)
    Next i
    
    For i = 1 To numINFModels
        count = count + 1
        rngCorrAnchor.Offset(0, count) = "RealRate" & CStr(i) & "Model"
        rngCorrAnchor.Offset(count, 0) = "RealRate" & CStr(i) & "Model"
    Next i
    
    For i = 1 To numINFModels
        count = count + 1
        rngCorrAnchor.Offset(0, count) = "CPI" & CStr(i) & "Model"
        rngCorrAnchor.Offset(count, 0) = "CPI" & CStr(i) & "Model"
    Next i
    
    For i = 1 To numEQModels
        iEQModelFactorNum = rngEQModelList.Cells(i, 3).Value
        For j = 1 To iEQModelFactorNum
            count = count + 1
            rngCorrAnchor.Offset(0, count) = "=" & rngEQModelList.Cells(i, 1).Address & "&" & """" & "Factor" & CStr(j) & """"
            rngCorrAnchor.Offset(count, 0) = "=" & rngEQModelList.Cells(i, 1).Address & "&" & """" & "Factor" & CStr(j) & """"
        Next j
    Next i
    
    For i = 1 To numCMDTYModels
        iCMDTYModelFactorNum = rngCMDTYModelList.Cells(i, 3).Value
        For j = 1 To iCMDTYModelFactorNum
            count = count + 1
            rngCorrAnchor.Offset(0, count) = "=" & rngCMDTYModelList.Cells(i, 1).Address & "&" & """" & "Factor" & CStr(j) & """"
            rngCorrAnchor.Offset(count, 0) = "=" & rngCMDTYModelList.Cells(i, 1).Address & "&" & """" & "Factor" & CStr(j) & """"
        Next j
    Next i
    
    For i = 1 To numCRModels
        iCRModelFactorNum = rngCRModelList.Cells(i, 3).Value
        For j = 1 To iCRModelFactorNum
            count = count + 1
            rngCorrAnchor.Offset(0, count) = "CR" & CStr(i) & "Factor" & CStr(j)
            rngCorrAnchor.Offset(count, 0) = "CR" & CStr(i) & "Factor" & CStr(j)
        Next j
    Next i
    
    
    For i = 1 To count
        rngCorrAnchor.Offset(i, i) = 1
        For j = i + 1 To count
            rngCorrAnchor.Offset(i, j) = 0
        Next j
    Next i
    
    rngCorrAnchor.Formula = "=nxlibmatrix(" & Range(rngCorrAnchor.Offset(0, 1), rngCorrAnchor.Offset(0, count)).Address & "," _
                                            & Range(rngCorrAnchor.Offset(1, 0), rngCorrAnchor.Offset(count, 0)).Address & "," _
                                            & Range(rngCorrAnchor.Offset(1, 1), rngCorrAnchor.Offset(count, count)).Address & "," _
                                            & """" & "IR_INFB_CRB_EQB_CMDTYB_Corr.Data" & """" & ")"
    
    
    Call formatColorAndBorder(rngCorrAnchor)
    Call formatColorAndBorder(Range(rngCorrAnchor.Offset(1, 1), rngCorrAnchor.Offset(count, count)))
    Call formatHeader(Range(rngCorrAnchor.Offset(0, 1), rngCorrAnchor.Offset(0, count)))
    Call formatHeader(Range(rngCorrAnchor.Offset(1, 0), rngCorrAnchor.Offset(count, 0)))
       
    Range(rngCorrAnchor.Offset(1, 1), rngCorrAnchor.Offset(count, count)).Select
    
CleanUp:
    Application.EnableEvents = True
    Application.ScreenUpdating = True
End Sub





''' Formatting Module

Private Sub addConditionalFormat(tempRng As Range)
    tempRng.Select
    Selection.FormatConditions.Delete
    Selection.FormatConditions.Add Type:=xlCellValue, Operator:=xlEqual, _
        Formula1:="=""<LINK>"""
    Selection.FormatConditions(1).Interior.ColorIndex = 3
        
    Cells(1, 1).Select
End Sub

Private Sub formatHeader(tempRng As Range)
    tempRng.Select
    With Selection.Interior
        .Pattern = xlSolid
        .PatternColorIndex = xlAutomatic
        .Color = 10040115
    End With
    With Selection.Font
        .ColorIndex = 2
        .Name = "Calibri"
        .Size = 11
    End With
    Cells(1, 1).Select
End Sub

Private Sub formatColorAndBorder(tempRng As Range)
    tempRng.Select
    Selection.HorizontalAlignment = xlCenter
    Selection.Borders(xlDiagonalDown).LineStyle = xlNone
    Selection.Borders(xlDiagonalUp).LineStyle = xlNone
    With Selection.Borders(xlEdgeLeft)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlEdgeTop)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlEdgeRight)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .Weight = xlThin
    End With
    Selection.Borders(xlInsideVertical).LineStyle = xlNone
    Selection.Borders(xlInsideHorizontal).LineStyle = xlNone
    With Selection.Interior
        .Pattern = xlSolid
        .PatternColorIndex = xlAutomatic
        .ColorIndex = 2
    End With
    With Selection.Font
        .Name = "Calibri"
        .Size = 11
    End With
    Cells(1, 1).Select

End Sub

Private Sub addDataValidation(tempRng As Range)
    tempRng.Select
    With Selection.Validation
        .Delete
        .Add Type:=xlValidateWholeNumber, AlertStyle:=xlValidAlertStop, _
        Operator:=xlGreaterEqual, Formula1:="1"
        .IgnoreBlank = True
        .InCellDropdown = True
        .InputTitle = ""
        .ErrorTitle = "Incorrect Input"
        .InputMessage = ""
        .ErrorMessage = "Please input an integer"
        .ShowInput = True
        .ShowError = True
    End With
    Cells(1, 1).Select
End Sub

Attribute VB_Name = "Sheet28"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "ComboBoxForeignModelNum, 1, 0, MSForms, ComboBox"
Attribute VB_Control = "ResizeButton, 2, 1, MSForms, CommandButton"
Attribute VB_Control = "CreateButton, 3, 2, MSForms, CommandButton"
Attribute VB_Control = "ComboBoxINFModelNum, 4, 3, MSForms, ComboBox"
Option Explicit
Private hasBeenInitialised As Boolean


Private Sub CreateButton_Click()
    On Error GoTo errorHandler
    Application.EnableEvents = False
    Dim asn$: asn = ActiveSheet.Name
    Dim rngForeignModelList As Range: Set rngForeignModelList = Range("NX_" & asn & "_M_ForeignModelList")
    Dim numForeignModels%: numForeignModels = rngForeignModelList.Rows.count
    Dim rngForeignModelListAnchor As Range: Set rngForeignModelListAnchor = rngForeignModelList.Cells(1, 1).Offset(-1, 0)
    Dim rngForeignModels As Range: Set rngForeignModels = Range("NX_" & asn & "_M_ForeignModels")
    rngForeignModels.Formula = "=nxlibdata(" & rngForeignModelListAnchor.Address & "," _
                                & Range(rngForeignModelListAnchor.Offset(1, 0), rngForeignModelListAnchor.Offset(numForeignModels, 0)).Address _
                                & "," & """" & "CC_INFB_ForeignModel.Data" & """" & ")"
    Dim rngFXModelList As Range: Set rngFXModelList = Range("NX_" & asn & "_M_FXModelList")
    Dim numFXModels%: numFXModels = rngFXModelList.Rows.count
    Dim rngFXModelListAnchor As Range: Set rngFXModelListAnchor = rngFXModelList.Cells(1, 1).Offset(-1, 0)
    Dim rngFXModels As Range: Set rngFXModels = Range("NX_" & asn & "_M_FXModels")
    rngFXModels.Formula = "=nxlibdata(" & rngFXModelListAnchor.Address & "," _
                                    & Range(rngFXModelListAnchor.Offset(1, 0), rngFXModelListAnchor.Offset(numFXModels, 0)).Address _
                                    & "," & """" & "CC_INFB_FXModel.Data" & """" & ")"
    Dim rngINFModelList As Range: Set rngINFModelList = Range("NX_" & asn & "_M_INFModelList")
    Dim numINFModels%: numINFModels = rngINFModelList.Rows.count
    Dim rngINFModelListAnchor As Range: Set rngINFModelListAnchor = rngINFModelList.Cells(1, 1).Offset(-1, 0)
    Dim rngINFModels As Range: Set rngINFModels = Range("NX_" & asn & "_M_INFModels")
    rngINFModels.Formula = "=nxlibdata(" & Range(rngINFModelListAnchor, rngINFModelListAnchor.Offset(0, 1)).Address & "," _
                                        & Range(rngINFModelListAnchor.Offset(1, 0), rngINFModelListAnchor.Offset(numINFModels, 1)).Address _
                                        & "," & """" & "CC_INFB_INFModel.Data" & """" & ")"
    ActiveSheet.Calculate
    
CleanUp:
    Application.EnableEvents = True
    Set rngForeignModelList = Nothing
    Set rngForeignModelListAnchor = Nothing
    Set rngForeignModels = Nothing
    Set rngFXModelList = Nothing
    Set rngFXModelListAnchor = Nothing
    Set rngFXModels = Nothing
    Set rngINFModelList = Nothing
    Set rngINFModelListAnchor = Nothing
    Set rngINFModels = Nothing
    Exit Sub
errorHandler:
    Call VBA.MsgBox("Error in creating model table data", vbCritical + vbOKOnly, "Error")
    GoTo CleanUp
    End Sub

Private Sub ResizeButton_Click()
    On Error GoTo CleanUp
    Application.ScreenUpdating = False
    Dim temp1 As Variant: temp1 = Split(ComboBoxForeignModelNum.Text, " ")
    Dim temp2 As Variant: temp2 = Split(ComboBoxINFModelNum.Text, " ")
    If Not IsNumeric(temp1(0)) Or Not IsNumeric(temp2(0)) Then
        MsgBox "Fatal error when resizing ComboBox"
        GoTo CleanUp
    Else
        Resize CInt(temp1(0)), CInt(temp2(0))
    End If
    On Error GoTo 0
    
CleanUp:
    Application.ScreenUpdating = True
    ActiveSheet.Calculate
    
End Sub


Public Sub Resize(numForeignModel As Integer, numINFModel As Integer)
    On Error GoTo errorHandler
    Application.EnableEvents = False
    Application.ScreenUpdating = False
    
    Dim numFXModel%: numFXModel = numForeignModel
    Dim asn$: asn = ActiveSheet.Name
    Dim rngForeignModels As Range: Set rngForeignModels = Range("NX_" & asn & "_M_ForeignModels")
    Dim rngForeignModelList As Range: Set rngForeignModelList = Range("NX_" & asn & "_M_ForeignModelList")
    Dim rngForeignModelListAnchor As Range: Set rngForeignModelListAnchor = rngForeignModelList.Cells(1, 1).Offset(-1, 0)
    Dim rngFXModels As Range: Set rngFXModels = Range("NX_" & asn & "_M_FXModels")
    Dim rngFXModelList As Range: Set rngFXModelList = Range("NX_" & asn & "_M_FXModelList")
    Dim rngFXModelListAnchor As Range: Set rngFXModelListAnchor = rngFXModelList.Cells(1, 1).Offset(-1, 0)
    Dim rngINFModels As Range: Set rngINFModels = Range("NX_" & asn & "_M_INFModels")
    Dim rngINFModelList As Range: Set rngINFModelList = Range("NX_" & asn & "_M_INFModelList")
    Dim rngINFModelListAnchor As Range: Set rngINFModelListAnchor = rngINFModelList.Cells(1, 1).Offset(-1, 0)
    Dim rngIRModelFactorNum As Range: Set rngIRModelFactorNum = Range("NX_" & asn & "_M_IRModelFactorNum")
    Dim rngCorrAnchor As Range: Set rngCorrAnchor = Range("NX_" & asn & "_M_CorrAnchor")
        
    rngForeignModelList.Clear
    rngFXModelList.Clear
    rngINFModelList.Clear
    rngCorrAnchor.CurrentRegion.Clear
    rngForeignModels = "<LINK>"
    rngFXModels = "<LINK>"
    rngINFModels = "<LINK>"
    rngIRModelFactorNum.Value = 1
    
    'Resize the Foreign Model table
    Dim i%, j%
    For i = 1 To numForeignModel
        rngForeignModelListAnchor.Offset(i, 0) = "<LINK>"
        rngForeignModelListAnchor.Offset(i, 1) = 1
    Next i
    Range(rngForeignModelListAnchor.Offset(1, 0), rngForeignModelListAnchor.Offset(numForeignModel, 1)).Select
    ActiveWorkbook.Names.Add Name:="NX_" & asn & "_M_ForeignModelList", RefersTo:=Selection
    Set rngForeignModelList = Range("NX_" & asn & "_M_ForeignModelList")
    Call formatColorAndBorder(rngForeignModelList)
    Call addConditionalFormat(Range(rngForeignModelListAnchor.Offset(1, 0), rngForeignModelListAnchor.Offset(numForeignModel, 0)))
    Call addDataValidation(Range(rngForeignModelListAnchor.Offset(1, 1), rngForeignModelListAnchor.Offset(numForeignModel, 1)))
        
    'Resize the FX Model Table
    For i = 1 To numFXModel
        rngFXModelListAnchor.Offset(i, 0) = "<LINK>"
        rngFXModelListAnchor.Offset(i, 1) = 1
    Next i
    Range(rngFXModelListAnchor.Offset(1, 0), rngFXModelListAnchor.Offset(numFXModel, 1)).Select
    ActiveWorkbook.Names.Add Name:="NX_" & asn & "_M_FXModelList", RefersTo:=Selection
    Set rngFXModelList = Range("NX_" & asn & "_M_FXModelList")
    Call formatColorAndBorder(rngFXModelList)
    Call addConditionalFormat(Range(rngFXModelListAnchor.Offset(1, 0), rngFXModelListAnchor.Offset(numFXModel, 0)))
    Call addDataValidation(Range(rngFXModelListAnchor.Offset(1, 1), rngFXModelListAnchor.Offset(numFXModel, 1)))
          
    'Resize the Inflation Model Table
    For i = 1 To numINFModel
        rngINFModelListAnchor.Offset(i, 0) = "<LINK>"
        rngINFModelListAnchor.Offset(i, 1) = "<LINK>"
    Next i
    Range(rngINFModelListAnchor.Offset(1, 0), rngINFModelListAnchor.Offset(numINFModel, 1)).Select
    ActiveWorkbook.Names.Add Name:="NX_" & asn & "_M_INFModelList", RefersTo:=Selection
    Set rngINFModelList = Range("NX_" & asn & "_M_INFModelList")
    Call formatColorAndBorder(rngINFModelList)
    Call addConditionalFormat(Range(rngINFModelListAnchor.Offset(1, 0), rngINFModelListAnchor.Offset(numINFModel, 1)))
         
    rngCorrAnchor.Offset(0, 1) = "DomesticModelFactor1"
    rngCorrAnchor.Offset(1, 0) = "DomesticModelFactor1"
    
    For i = 1 To numFXModel
        rngCorrAnchor.Offset(0, i + 1) = "Foreign" & CStr(i) & "ModelFactor1"
        rngCorrAnchor.Offset(i + 1, 0) = "Foreign" & CStr(i) & "ModelFactor1"
    Next i
    
    For i = 1 To numForeignModel
        rngCorrAnchor.Offset(0, i + numFXModel + 1) = "FX" & CStr(i) & "ModelFactor1"
        rngCorrAnchor.Offset(i + numFXModel + 1, 0) = "FX" & CStr(i) & "ModelFactor1"
    Next i
    
    For i = 1 To numINFModel
        rngCorrAnchor.Offset(0, i + numFXModel + numForeignModel + 1) = "RealRate" & CStr(i) & "Model"
        rngCorrAnchor.Offset(i + numFXModel + numForeignModel + 1, 0) = "RealRate" & CStr(i) & "Model"
    Next i
    
    For i = 1 To numINFModel
        rngCorrAnchor.Offset(0, i + numFXModel + numForeignModel + numINFModel + 1) = "CPI" & CStr(i) & "Model"
        rngCorrAnchor.Offset(i + numFXModel + numForeignModel + numINFModel + 1, 0) = "CPI" & CStr(i) & "Model"
    Next i
    
    For i = 1 To numFXModel + numForeignModel + 2 * numINFModel + 1
        rngCorrAnchor.Offset(i, i) = 1
        For j = i + 1 To numFXModel + numForeignModel + 2 * numINFModel + 1
            rngCorrAnchor.Offset(i, j) = 0
        Next j
    Next i
    
    rngCorrAnchor.Formula = "=nxlibmatrix(" & Range(rngCorrAnchor.Offset(0, 1), rngCorrAnchor.Offset(0, numFXModel + numForeignModel + 2 * numINFModel + 1)).Address & "," _
                                            & Range(rngCorrAnchor.Offset(1, 0), rngCorrAnchor.Offset(numFXModel + numForeignModel + 2 * numINFModel + 1, 0)).Address & "," _
                                            & Range(rngCorrAnchor.Offset(1, 1), rngCorrAnchor.Offset(numFXModel + numForeignModel + 2 * numINFModel + 1, _
                                                                                                        numFXModel + numForeignModel + 2 * numINFModel + 1)).Address & "," _
                                            & """" & "CC_INFB_Corr.Data" & """" & ")"
                                            
    Call formatColorAndBorder(rngCorrAnchor)
    Call formatColorAndBorder(Range(rngCorrAnchor.Offset(1, 1), rngCorrAnchor.Offset(numFXModel + numForeignModel + 2 * numINFModel + 1, _
                                                                                        numFXModel + numForeignModel + 2 * numINFModel + 1)))
    Call formatHeader(Range(rngCorrAnchor.Offset(0, 1), rngCorrAnchor.Offset(0, numFXModel + numForeignModel + 2 * numINFModel + 1)))
    Call formatHeader(Range(rngCorrAnchor.Offset(1, 0), rngCorrAnchor.Offset(numFXModel + numForeignModel + 2 * numINFModel + 1, 0)))

CleanUp:
    Application.EnableEvents = True
    Application.ScreenUpdating = True
    Set rngForeignModels = Nothing
    Set rngForeignModelList = Nothing
    Set rngForeignModelListAnchor = Nothing
    Set rngFXModels = Nothing
    Set rngFXModelList = Nothing
    Set rngFXModelListAnchor = Nothing
    Set rngINFModels = Nothing
    Set rngINFModelList = Nothing
    Set rngINFModelListAnchor = Nothing
    Set rngCorrAnchor = Nothing
    Exit Sub
   
errorHandler:
    Call VBA.MsgBox("Error in resizing the model", vbCritical + vbOKOnly, "Error")
    GoTo CleanUp
    End Sub

Private Sub Worksheet_Activate()

    On Error GoTo CleanUp
    ComboBoxForeignModelNum.Clear
    ComboBoxForeignModelNum.AddItem ("1 Foreign Model")
    ComboBoxForeignModelNum.AddItem ("2 Foreign Models")
    ComboBoxForeignModelNum.AddItem ("4 Foreign Models")
    ComboBoxForeignModelNum.AddItem ("5 Foreign Models")
    ComboBoxForeignModelNum.AddItem ("6 Foreign Models")
    ComboBoxForeignModelNum.AddItem ("7 Foreign Models")
    ComboBoxForeignModelNum.AddItem ("8 Foreign Models")
    ComboBoxForeignModelNum.AddItem ("9 Foreign Models")
    ComboBoxForeignModelNum.AddItem ("10 Foreign Models")
    ComboBoxForeignModelNum.Text = "1 Foreign Model"
    
    ComboBoxINFModelNum.Clear
    ComboBoxINFModelNum.AddItem ("1 Inflation Model")
    ComboBoxINFModelNum.AddItem ("2 Inflation Models")
    ComboBoxINFModelNum.AddItem ("3 Inflation Models")
    ComboBoxINFModelNum.AddItem ("4 Inflation Models")
    ComboBoxINFModelNum.AddItem ("5 Inflation Models")
    ComboBoxINFModelNum.AddItem ("6 Inflation Models")
    ComboBoxINFModelNum.AddItem ("7 Inflation Models")
    ComboBoxINFModelNum.AddItem ("8 Inflation Models")
    ComboBoxINFModelNum.AddItem ("9 Inflation Models")
    ComboBoxINFModelNum.AddItem ("10 Inflation Models")
    ComboBoxINFModelNum.Text = "1 Inflation Model"
    
    hasBeenInitialised = True

CleanUp:
    ActiveSheet.Calculate
End Sub


'Resizing the correlation matrix after changing the Factor number for any model
Private Sub Worksheet_Change(ByVal Target As Range)
    On Error GoTo CleanUp
    Application.EnableEvents = False
    Application.ScreenUpdating = False
    
    Dim asn$: asn = ActiveSheet.Name
    Dim rngForeignModelList As Range: Set rngForeignModelList = Range("NX_" & asn & "_M_ForeignModelList")
    Dim numForeignModels%: numForeignModels = rngForeignModelList.Rows.count
    Dim rngForeignModelFactorNumList As Range: Set rngForeignModelFactorNumList = Range(rngForeignModelList.Cells(1, 2), rngForeignModelList.Cells(numForeignModels, 2))
    Dim rngFXModelList As Range: Set rngFXModelList = Range("NX_" & asn & "_M_FXModelList")
    Dim numFXModels%: numFXModels = rngFXModelList.Rows.count
    Dim rngFXModelFactorNumList As Range: Set rngFXModelFactorNumList = Range(rngFXModelList(1, 2), rngFXModelList(numFXModels, 2))
    Dim rngINFModelList As Range: Set rngINFModelList = Range("NX_" & asn & "_M_INFModelList")
    Dim numINFModels%: numINFModels = rngINFModelList.Rows.count
    Dim rngIRModelFactorNum As Range: Set rngIRModelFactorNum = Range("NX_" & asn & "_M_IRMOdelFactorNum")
    
    If Intersect(Target, rngForeignModelFactorNumList) Is Nothing And Intersect(Target, rngFXModelFactorNumList) Is Nothing And _
        Intersect(Target, rngIRModelFactorNum) Is Nothing Then
        GoTo CleanUp
    End If
    
    Dim rngCorrAnchor As Range: Set rngCorrAnchor = Range("NX_" & asn & "_M_CorrAnchor")
    rngCorrAnchor.CurrentRegion.Clear
    Dim iIRModelFactorNum%: iIRModelFactorNum = rngIRModelFactorNum.Value
    Dim iFXModelFactorNum%, iForeignModelFactorNum%
    Dim i%, j%
    Dim count%: count = 0
    For i = 1 To iIRModelFactorNum
        count = count + 1
        rngCorrAnchor.Offset(0, count) = "DomesticModelFactor" & CStr(i)
        rngCorrAnchor.Offset(count, 0) = "DomesticModelFactor" & CStr(i)
    Next i
    
    For i = 1 To numFXModels
        iFXModelFactorNum = rngFXModelList.Cells(i, 2).Value
        For j = 1 To iFXModelFactorNum
            count = count + 1
            rngCorrAnchor.Offset(0, count) = "FX" & CStr(i) & "ModelFactor" & CStr(j)
            rngCorrAnchor.Offset(count, 0) = "FX" & CStr(i) & "ModelFactor" & CStr(j)
        Next j
    Next i
    
    For i = 1 To numForeignModels
        iForeignModelFactorNum = rngForeignModelList.Cells(i, 2).Value
        For j = 1 To iForeignModelFactorNum
            count = count + 1
            rngCorrAnchor.Offset(0, count) = "Foreign" & CStr(i) & "ModelFactor" & CStr(j)
            rngCorrAnchor.Offset(count, 0) = "Foreign" & CStr(i) & "ModelFactor" & CStr(j)
        Next j
    Next i
    
    For i = 1 To numINFModels
        count = count + 1
        rngCorrAnchor.Offset(0, count) = "RealRate" & CStr(i) & "Model"
        rngCorrAnchor.Offset(count, 0) = "RealRate" & CStr(i) & "Model"
    Next i
    
    For i = 1 To numINFModels
        count = count + 1
        rngCorrAnchor.Offset(0, count) = "CPI" & CStr(i) & "Model"
        rngCorrAnchor.Offset(count, 0) = "CPI" & CStr(i) & "Model"
    Next i
    
    For i = 1 To count
        rngCorrAnchor.Offset(i, i) = 1
        For j = i + 1 To count
            rngCorrAnchor.Offset(i, j) = 0
        Next j
    Next i
    
    rngCorrAnchor.Formula = "=nxlibmatrix(" & Range(rngCorrAnchor.Offset(0, 1), rngCorrAnchor.Offset(0, count)).Address & "," _
                                            & Range(rngCorrAnchor.Offset(1, 0), rngCorrAnchor.Offset(count, 0)).Address & "," _
                                            & Range(rngCorrAnchor.Offset(1, 1), rngCorrAnchor.Offset(count, count)).Address & "," _
                                            & """" & "CC_INFB_Corr.Data" & """" & ")"
    
    
    Call formatColorAndBorder(rngCorrAnchor)
    Call formatColorAndBorder(Range(rngCorrAnchor.Offset(1, 1), rngCorrAnchor.Offset(count, count)))
    Call formatHeader(Range(rngCorrAnchor.Offset(0, 1), rngCorrAnchor.Offset(0, count)))
    Call formatHeader(Range(rngCorrAnchor.Offset(1, 0), rngCorrAnchor.Offset(count, 0)))
       
    Range(rngCorrAnchor.Offset(1, 1), rngCorrAnchor.Offset(count, count)).Select
    
CleanUp:
    Application.EnableEvents = True
    Application.ScreenUpdating = True
    Set rngForeignModelList = Nothing
    Set rngForeignModelFactorNumList = Nothing
    Set rngFXModelList = Nothing
    Set rngFXModelFactorNumList = Nothing
    Set rngINFModelList = Nothing
    Set rngIRModelFactorNum = Nothing
    Set rngCorrAnchor = Nothing
End Sub





''' Formatting Module

Private Sub addConditionalFormat(tempRng As Range)
    tempRng.Select
    Selection.FormatConditions.Delete
    Selection.FormatConditions.Add Type:=xlCellValue, Operator:=xlEqual, _
        Formula1:="=""<LINK>"""
    Selection.FormatConditions(1).Interior.ColorIndex = 3
        
    Cells(1, 1).Select
End Sub

Private Sub formatHeader(tempRng As Range)
    tempRng.Select
    With Selection.Interior
        .Pattern = xlSolid
        .PatternColorIndex = xlAutomatic
        .Color = 10040115
    End With
    With Selection.Font
        .ColorIndex = 2
        .Name = "Calibri"
        .Size = 11
    End With
    Cells(1, 1).Select
End Sub

Private Sub formatColorAndBorder(tempRng As Range)
    tempRng.Select
    Selection.HorizontalAlignment = xlCenter
    Selection.Borders(xlDiagonalDown).LineStyle = xlNone
    Selection.Borders(xlDiagonalUp).LineStyle = xlNone
    With Selection.Borders(xlEdgeLeft)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlEdgeTop)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlEdgeRight)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .Weight = xlThin
    End With
    Selection.Borders(xlInsideVertical).LineStyle = xlNone
    Selection.Borders(xlInsideHorizontal).LineStyle = xlNone
    With Selection.Interior
        .Pattern = xlSolid
        .PatternColorIndex = xlAutomatic
        .ColorIndex = 2
    End With
    With Selection.Font
        .Name = "Calibri"
        .Size = 11
    End With
    Cells(1, 1).Select

End Sub

Private Sub addDataValidation(tempRng As Range)
    tempRng.Select
    With Selection.Validation
        .Delete
        .Add Type:=xlValidateWholeNumber, AlertStyle:=xlValidAlertStop, _
        Operator:=xlGreaterEqual, Formula1:="1"
        .IgnoreBlank = True
        .InCellDropdown = True
        .InputTitle = ""
        .ErrorTitle = "Incorrect Input"
        .InputMessage = ""
        .ErrorMessage = "Please input an integer"
        .ShowInput = True
        .ShowError = True
    End With
    Cells(1, 1).Select
End Sub

Attribute VB_Name = "Sheet29"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "ComboBoxForeignModelNum, 1, 0, MSForms, ComboBox"
Attribute VB_Control = "ResizeButton, 2, 1, MSForms, CommandButton"
Attribute VB_Control = "CreateButton, 3, 2, MSForms, CommandButton"
Attribute VB_Control = "ComboBoxINFModelNum, 4, 3, MSForms, ComboBox"
Attribute VB_Control = "ComboBoxCMDTYModelNum, 5, 4, MSForms, ComboBox"
Option Explicit
Private hasBeenInitialised As Boolean


Private Sub CreateButton_Click()
    On Error GoTo errorHandler
    Application.EnableEvents = False
    Dim asn$: asn = ActiveSheet.Name
    Dim rngForeignModelList As Range: Set rngForeignModelList = Range("NX_" & asn & "_M_ForeignModelList")
    Dim numForeignModels%: numForeignModels = rngForeignModelList.Rows.count
    Dim rngForeignModelListAnchor As Range: Set rngForeignModelListAnchor = rngForeignModelList.Cells(1, 1).Offset(-1, 0)
    Dim rngForeignModels As Range: Set rngForeignModels = Range("NX_" & asn & "_M_ForeignModels")
    rngForeignModels.Formula = "=nxlibdata(" & rngForeignModelListAnchor.Address & "," _
                                & Range(rngForeignModelListAnchor.Offset(1, 0), rngForeignModelListAnchor.Offset(numForeignModels, 0)).Address _
                                & "," & """" & "CC_INFB_CMDTYB_ForeignModel.Data" & """" & ")"
    
    Dim rngFXModelList As Range: Set rngFXModelList = Range("NX_" & asn & "_M_FXModelList")
    Dim numFXModels%: numFXModels = rngFXModelList.Rows.count
    Dim rngFXModelListAnchor As Range: Set rngFXModelListAnchor = rngFXModelList.Cells(1, 1).Offset(-1, 0)
    Dim rngFXModels As Range: Set rngFXModels = Range("NX_" & asn & "_M_FXModels")
    rngFXModels.Formula = "=nxlibdata(" & rngFXModelListAnchor.Address & "," _
                                    & Range(rngFXModelListAnchor.Offset(1, 0), rngFXModelListAnchor.Offset(numFXModels, 0)).Address _
                                    & "," & """" & "CC_INFB_CMDTYB_FXModel.Data" & """" & ")"
    
    Dim rngINFModelList As Range: Set rngINFModelList = Range("NX_" & asn & "_M_INFModelList")
    Dim numINFModels%: numINFModels = rngINFModelList.Rows.count
    Dim rngINFModelListAnchor As Range: Set rngINFModelListAnchor = rngINFModelList.Cells(1, 1).Offset(-1, 0)
    Dim rngINFModels As Range: Set rngINFModels = Range("NX_" & asn & "_M_INFModels")
    rngINFModels.Formula = "=nxlibdata(" & Range(rngINFModelListAnchor, rngINFModelListAnchor.Offset(0, 1)).Address & "," _
                                        & Range(rngINFModelListAnchor.Offset(1, 0), rngINFModelListAnchor.Offset(numINFModels, 1)).Address _
                                        & "," & """" & "CC_INFB_CMDTYB_INFModel.Data" & """" & ")"
    
    Dim rngCMDTYModelList As Range: Set rngCMDTYModelList = Range("NX_" & asn & "_M_CMDTYModelList")
    Dim numCMDTYModels%: numCMDTYModels = rngCMDTYModelList.Rows.count
    Dim rngCMDTYModelListAnchor As Range: Set rngCMDTYModelListAnchor = rngCMDTYModelList.Cells(1, 1).Offset(-1, 0)
    Dim rngCMDTYModels As Range: Set rngCMDTYModels = Range("NX_" & asn & "_M_CMDTYModels")
    rngCMDTYModels.Formula = "=nxlibdata(" & Range(rngCMDTYModelListAnchor, rngCMDTYModelListAnchor.Offset(0, 1)).Address & "," _
                                        & Range(rngCMDTYModelListAnchor.Offset(1, 0), rngCMDTYModelListAnchor.Offset(numCMDTYModels, 1)).Address _
                                        & "," & """" & "CC_INFB_CMDTYB_CMDTYModel.Data" & """" & ")"
    
    ActiveSheet.Calculate
    
CleanUp:
    Application.EnableEvents = True
    Set rngForeignModelList = Nothing
    Set rngForeignModelListAnchor = Nothing
    Set rngForeignModels = Nothing
    Set rngFXModelList = Nothing
    Set rngFXModelListAnchor = Nothing
    Set rngFXModels = Nothing
    Set rngINFModelList = Nothing
    Set rngINFModelListAnchor = Nothing
    Set rngINFModels = Nothing
    Set rngCMDTYModelList = Nothing
    Set rngCMDTYModelListAnchor = Nothing
    Set rngCMDTYModels = Nothing
    Exit Sub
errorHandler:
    Call VBA.MsgBox("Error in creating model table data", vbCritical + vbOKOnly, "Error")
    GoTo CleanUp
    End Sub

Private Sub ResizeButton_Click()
    On Error GoTo CleanUp
    Application.ScreenUpdating = False
    Dim temp1 As Variant: temp1 = Split(ComboBoxForeignModelNum.Text, " ")
    Dim temp2 As Variant: temp2 = Split(ComboBoxINFModelNum.Text, " ")
    Dim temp3 As Variant: temp3 = Split(ComboBoxCMDTYModelNum.Text, " ")
    If Not IsNumeric(temp1(0)) Or Not IsNumeric(temp2(0)) Or Not IsNumeric(temp3(0)) Then
        MsgBox "Fatal error when resizing ComboBox"
        GoTo CleanUp
    Else
        Resize CInt(temp1(0)), CInt(temp2(0)), CInt(temp3(0))
    End If
    On Error GoTo 0
CleanUp:
    Application.ScreenUpdating = True
    ActiveSheet.Calculate
End Sub


Public Sub Resize(numForeignModel As Integer, numINFModel As Integer, numCMDTYModel As Integer)
    On Error GoTo errorHandler
    Application.EnableEvents = False
    Application.ScreenUpdating = False
    
    Dim numFXModel%: numFXModel = numForeignModel
    Dim asn$: asn = ActiveSheet.Name
    Dim rngForeignModels As Range: Set rngForeignModels = Range("NX_" & asn & "_M_ForeignModels")
    Dim rngForeignModelList As Range: Set rngForeignModelList = Range("NX_" & asn & "_M_ForeignModelList")
    Dim rngForeignModelListAnchor As Range: Set rngForeignModelListAnchor = rngForeignModelList.Cells(1, 1).Offset(-1, 0)
    Dim rngFXModels As Range: Set rngFXModels = Range("NX_" & asn & "_M_FXModels")
    Dim rngFXModelList As Range: Set rngFXModelList = Range("NX_" & asn & "_M_FXModelList")
    Dim rngFXModelListAnchor As Range: Set rngFXModelListAnchor = rngFXModelList.Cells(1, 1).Offset(-1, 0)
    Dim rngINFModels As Range: Set rngINFModels = Range("NX_" & asn & "_M_INFModels")
    Dim rngINFModelList As Range: Set rngINFModelList = Range("NX_" & asn & "_M_INFModelList")
    Dim rngINFModelListAnchor As Range: Set rngINFModelListAnchor = rngINFModelList.Cells(1, 1).Offset(-1, 0)
    Dim rngCMDTYModels As Range: Set rngCMDTYModels = Range("NX_" & asn & "_M_CMDTYModels")
    Dim rngCMDTYModelList As Range: Set rngCMDTYModelList = Range("NX_" & asn & "_M_CMDTYModelList")
    Dim rngCMDTYModelListAnchor As Range: Set rngCMDTYModelListAnchor = rngCMDTYModelList.Cells(1, 1).Offset(-1, 0)
    Dim rngIRModelFactorNum As Range: Set rngIRModelFactorNum = Range("NX_" & asn & "_M_IRModelFactorNum")
    Dim rngCorrAnchor As Range: Set rngCorrAnchor = Range("NX_" & asn & "_M_CorrAnchor")
    
    rngForeignModelList.Clear
    rngFXModelList.Clear
    rngINFModelList.Clear
    rngCMDTYModelList.Clear
    rngCorrAnchor.CurrentRegion.Clear
    rngForeignModels = "<LINK>"
    rngFXModels = "<LINK>"
    rngINFModels = "<LINK>"
    rngCMDTYModels = "<LINK>"
    rngIRModelFactorNum.Value = 1
    
    'Resize the Foreign Model table
    Dim i%, j%
    For i = 1 To numForeignModel
        rngForeignModelListAnchor.Offset(i, 0) = "<LINK>"
        rngForeignModelListAnchor.Offset(i, 1) = 1
    Next i
    Range(rngForeignModelListAnchor.Offset(1, 0), rngForeignModelListAnchor.Offset(numForeignModel, 1)).Select
    ActiveWorkbook.Names.Add Name:="NX_" & asn & "_M_ForeignModelList", RefersTo:=Selection
    Set rngForeignModelList = Range("NX_" & asn & "_M_ForeignModelList")
    Call formatColorAndBorder(rngForeignModelList)
    Call addConditionalFormat(Range(rngForeignModelListAnchor.Offset(1, 0), rngForeignModelListAnchor.Offset(numForeignModel, 0)))
    Call addDataValidation(Range(rngForeignModelListAnchor.Offset(1, 1), rngForeignModelListAnchor.Offset(numForeignModel, 1)))
        
    'Resize the FX Model Table
    For i = 1 To numFXModel
        rngFXModelListAnchor.Offset(i, 0) = "<LINK>"
        rngFXModelListAnchor.Offset(i, 1) = 1
    Next i
    Range(rngFXModelListAnchor.Offset(1, 0), rngFXModelListAnchor.Offset(numFXModel, 1)).Select
    ActiveWorkbook.Names.Add Name:="NX_" & asn & "_M_FXModelList", RefersTo:=Selection
    Set rngFXModelList = Range("NX_" & asn & "_M_FXModelList")
    Call formatColorAndBorder(rngFXModelList)
    Call addConditionalFormat(Range(rngFXModelListAnchor.Offset(1, 0), rngFXModelListAnchor.Offset(numFXModel, 0)))
    Call addDataValidation(Range(rngFXModelListAnchor.Offset(1, 1), rngFXModelListAnchor.Offset(numFXModel, 1)))
          
    'Resize the Inflation Model Table
    For i = 1 To numINFModel
        rngINFModelListAnchor.Offset(i, 0) = "<LINK>"
        rngINFModelListAnchor.Offset(i, 1) = "<LINK>"
    Next i
    Range(rngINFModelListAnchor.Offset(1, 0), rngINFModelListAnchor.Offset(numINFModel, 1)).Select
    ActiveWorkbook.Names.Add Name:="NX_" & asn & "_M_INFModelList", RefersTo:=Selection
    Set rngINFModelList = Range("NX_" & asn & "_M_INFModelList")
    Call formatColorAndBorder(rngINFModelList)
    Call addConditionalFormat(Range(rngINFModelListAnchor.Offset(1, 0), rngINFModelListAnchor.Offset(numINFModel, 1)))
    
    'Resize the CMDTY Model Table
    For i = 1 To numCMDTYModel
        rngCMDTYModelListAnchor.Offset(i, 0) = "<LINK>"
        rngCMDTYModelListAnchor.Offset(i, 1) = "<LINK>"
        rngCMDTYModelListAnchor.Offset(i, 2) = 1
    Next i
    Range(rngCMDTYModelListAnchor.Offset(1, 0), rngCMDTYModelListAnchor.Offset(numCMDTYModel, 2)).Select
    ActiveWorkbook.Names.Add Name:="NX_" & asn & "_M_CMDTYModelList", RefersTo:=Selection
    Set rngCMDTYModelList = Range("NX_" & asn & "_M_CMDTYModelList")
    Call formatColorAndBorder(rngCMDTYModelList)
    Call addConditionalFormat(Range(rngCMDTYModelListAnchor.Offset(1, 0), rngCMDTYModelListAnchor.Offset(numCMDTYModel, 1)))
    Call addDataValidation(Range(rngCMDTYModelListAnchor.Offset(1, 2), rngCMDTYModelListAnchor.Offset(numCMDTYModel, 2)))
    
    rngCorrAnchor.Offset(0, 1) = "DomesticModelFactor1"
    rngCorrAnchor.Offset(1, 0) = "DomesticModelFactor1"
    
    For i = 1 To numFXModel
        rngCorrAnchor.Offset(0, i + 1) = "Foreign" & CStr(i) & "ModelFactor1"
        rngCorrAnchor.Offset(i + 1, 0) = "Foreign" & CStr(i) & "ModelFactor1"
    Next i
    
    For i = 1 To numForeignModel
        rngCorrAnchor.Offset(0, i + numFXModel + 1) = "FX" & CStr(i) & "ModelFactor1"
        rngCorrAnchor.Offset(i + numFXModel + 1, 0) = "FX" & CStr(i) & "ModelFactor1"
    Next i
    
    For i = 1 To numINFModel
        rngCorrAnchor.Offset(0, i + numFXModel + numForeignModel + 1) = "RealRate" & CStr(i) & "Model"
        rngCorrAnchor.Offset(i + numFXModel + numForeignModel + 1, 0) = "RealRate" & CStr(i) & "Model"
    Next i
    
    For i = 1 To numINFModel
        rngCorrAnchor.Offset(0, i + numFXModel + numForeignModel + numINFModel + 1) = "CPI" & CStr(i) & "Model"
        rngCorrAnchor.Offset(i + numFXModel + numForeignModel + numINFModel + 1, 0) = "CPI" & CStr(i) & "Model"
    Next i
    
    For i = 1 To numCMDTYModel
        rngCorrAnchor.Offset(0, i + numFXModel + numForeignModel + 2 * numINFModel + 1) = "=" & rngCMDTYModelList.Cells(i, 1).Address & "&" & """" & "Factor1" & """"
        rngCorrAnchor.Offset(i + numFXModel + numForeignModel + 2 * numINFModel + 1, 0) = "=" & rngCMDTYModelList.Cells(i, 1).Address & "&" & """" & "Factor1" & """"
    Next i
    
    For i = 1 To numFXModel + numForeignModel + 2 * numINFModel + numCMDTYModel + 1
        rngCorrAnchor.Offset(i, i) = 1
        For j = i + 1 To numFXModel + numForeignModel + 2 * numINFModel + numCMDTYModel + 1
            rngCorrAnchor.Offset(i, j) = 0
        Next j
    Next i
    
    rngCorrAnchor.Formula = "=nxlibmatrix(" & Range(rngCorrAnchor.Offset(0, 1), rngCorrAnchor.Offset(0, numFXModel + numForeignModel + 2 * numINFModel + numCMDTYModel + 1)).Address & "," _
                                            & Range(rngCorrAnchor.Offset(1, 0), rngCorrAnchor.Offset(numFXModel + numForeignModel + 2 * numINFModel + numCMDTYModel + 1, 0)).Address & "," _
                                            & Range(rngCorrAnchor.Offset(1, 1), rngCorrAnchor.Offset(numFXModel + numForeignModel + 2 * numINFModel + numCMDTYModel + 1, _
                                                                                                        numFXModel + numForeignModel + 2 * numINFModel + numCMDTYModel + 1)).Address & "," _
                                            & """" & "CC_INFB_CMDTYB_Corr.Data" & """" & ")"
                                            
    Call formatColorAndBorder(rngCorrAnchor)
    Call formatColorAndBorder(Range(rngCorrAnchor.Offset(1, 1), rngCorrAnchor.Offset(numFXModel + numForeignModel + 2 * numINFModel + numCMDTYModel + 1, _
                                                                                        numFXModel + numForeignModel + 2 * numINFModel + numCMDTYModel + 1)))
    Call formatHeader(Range(rngCorrAnchor.Offset(0, 1), rngCorrAnchor.Offset(0, numFXModel + numForeignModel + 2 * numINFModel + numCMDTYModel + 1)))
    Call formatHeader(Range(rngCorrAnchor.Offset(1, 0), rngCorrAnchor.Offset(numFXModel + numForeignModel + 2 * numINFModel + numCMDTYModel + 1, 0)))

CleanUp:
    Application.EnableEvents = True
    Application.ScreenUpdating = True
    Set rngForeignModels = Nothing
    Set rngForeignModelList = Nothing
    Set rngForeignModelListAnchor = Nothing
    Set rngFXModels = Nothing
    Set rngFXModelList = Nothing
    Set rngFXModelListAnchor = Nothing
    Set rngINFModels = Nothing
    Set rngINFModelList = Nothing
    Set rngINFModelListAnchor = Nothing
    Set rngCMDTYModels = Nothing
    Set rngCMDTYModelList = Nothing
    Set rngCMDTYModelListAnchor = Nothing
    Set rngCorrAnchor = Nothing
    Exit Sub
   
errorHandler:
    Call VBA.MsgBox("Error in resizing the model", vbCritical + vbOKOnly, "Error")
    GoTo CleanUp
    End Sub

Private Sub Worksheet_Activate()

    On Error GoTo CleanUp
    ComboBoxForeignModelNum.Clear
    ComboBoxForeignModelNum.AddItem ("1 Foreign Model")
    ComboBoxForeignModelNum.AddItem ("2 Foreign Models")
    ComboBoxForeignModelNum.AddItem ("4 Foreign Models")
    ComboBoxForeignModelNum.AddItem ("5 Foreign Models")
    ComboBoxForeignModelNum.AddItem ("6 Foreign Models")
    ComboBoxForeignModelNum.AddItem ("7 Foreign Models")
    ComboBoxForeignModelNum.AddItem ("8 Foreign Models")
    ComboBoxForeignModelNum.AddItem ("9 Foreign Models")
    ComboBoxForeignModelNum.AddItem ("10 Foreign Models")
    ComboBoxForeignModelNum.Text = "1 Foreign Model"
    
    ComboBoxINFModelNum.Clear
    ComboBoxINFModelNum.AddItem ("1 Inflation Model")
    ComboBoxINFModelNum.AddItem ("2 Inflation Models")
    ComboBoxINFModelNum.AddItem ("3 Inflation Models")
    ComboBoxINFModelNum.AddItem ("4 Inflation Models")
    ComboBoxINFModelNum.AddItem ("5 Inflation Models")
    ComboBoxINFModelNum.AddItem ("6 Inflation Models")
    ComboBoxINFModelNum.AddItem ("7 Inflation Models")
    ComboBoxINFModelNum.AddItem ("8 Inflation Models")
    ComboBoxINFModelNum.AddItem ("9 Inflation Models")
    ComboBoxINFModelNum.AddItem ("10 Inflation Models")
    ComboBoxINFModelNum.Text = "1 Inflation Model"
    
    ComboBoxCMDTYModelNum.Clear
    ComboBoxCMDTYModelNum.AddItem ("1 CMDTY Model")
    ComboBoxCMDTYModelNum.AddItem ("2 CMDTY Models")
    ComboBoxCMDTYModelNum.AddItem ("3 CMDTY Models")
    ComboBoxCMDTYModelNum.AddItem ("4 CMDTY Models")
    ComboBoxCMDTYModelNum.AddItem ("5 CMDTY Models")
    ComboBoxCMDTYModelNum.AddItem ("6 CMDTY Models")
    ComboBoxCMDTYModelNum.AddItem ("7 CMDTY Models")
    ComboBoxCMDTYModelNum.AddItem ("8 CMDTY Models")
    ComboBoxCMDTYModelNum.AddItem ("9 CMDTY Models")
    ComboBoxCMDTYModelNum.AddItem ("10 CMDTY Models")
    ComboBoxCMDTYModelNum.Text = "1 CMDTY Model"
        
    hasBeenInitialised = True

CleanUp:
    ActiveSheet.Calculate
End Sub


'Resizing the correlation matrix after changing the Factor number for any model
Private Sub Worksheet_Change(ByVal Target As Range)
    On Error GoTo errorHandler
    Application.EnableEvents = False
    Application.ScreenUpdating = False
    
    Dim asn$: asn = ActiveSheet.Name
    Dim rngForeignModelList As Range: Set rngForeignModelList = Range("NX_" & asn & "_M_ForeignModelList")
    Dim numForeignModels%: numForeignModels = rngForeignModelList.Rows.count
    Dim rngForeignModelFactorNumList As Range: Set rngForeignModelFactorNumList = Range(rngForeignModelList.Cells(1, 2), rngForeignModelList.Cells(numForeignModels, 2))
    Dim rngFXModelList As Range: Set rngFXModelList = Range("NX_" & asn & "_M_FXModelList")
    Dim numFXModels%: numFXModels = rngFXModelList.Rows.count
    Dim rngFXModelFactorNumList As Range: Set rngFXModelFactorNumList = Range(rngFXModelList.Cells(1, 2), rngFXModelList.Cells(numFXModels, 2))
    Dim rngINFModelList As Range: Set rngINFModelList = Range("NX_" & asn & "_M_INFModelList")
    Dim numINFModels%: numINFModels = rngINFModelList.Rows.count
    Dim rngCMDTYModelList As Range: Set rngCMDTYModelList = Range("NX_" & asn & "_M_CMDTYModelList")
    Dim numCMDTYModels%: numCMDTYModels = rngCMDTYModelList.Rows.count
    Dim rngCMDTYModelFactorNumList As Range: Set rngCMDTYModelFactorNumList = Range(rngCMDTYModelList.Cells(1, 3), rngCMDTYModelList.Cells(numCMDTYModels, 3))
    Dim rngIRModelFactorNum As Range: Set rngIRModelFactorNum = Range("NX_" & asn & "_M_IRMOdelFactorNum")
    
    If Intersect(Target, rngForeignModelFactorNumList) Is Nothing And Intersect(Target, rngFXModelFactorNumList) Is Nothing And _
        Intersect(Target, rngCMDTYModelFactorNumList) Is Nothing And Intersect(Target, rngIRModelFactorNum) Is Nothing Then
        GoTo CleanUp
    End If
    
    Dim rngCorrAnchor As Range: Set rngCorrAnchor = Range("NX_" & asn & "_M_CorrAnchor")
    rngCorrAnchor.CurrentRegion.Clear
    Dim iIRModelFactorNum%: iIRModelFactorNum = rngIRModelFactorNum.Value
    Dim iFXModelFactorNum%, iForeignModelFactorNum%, iCMDTYModelFactorNum%
    Dim i%, j%
    Dim count%: count = 0
    For i = 1 To iIRModelFactorNum
        count = count + 1
        rngCorrAnchor.Offset(0, count) = "DomesticModelFactor" & CStr(i)
        rngCorrAnchor.Offset(count, 0) = "DomesticModelFactor" & CStr(i)
    Next i
    
    For i = 1 To numFXModels
        iFXModelFactorNum = rngFXModelList.Cells(i, 2).Value
        For j = 1 To iFXModelFactorNum
            count = count + 1
            rngCorrAnchor.Offset(0, count) = "FX" & CStr(i) & "ModelFactor" & CStr(j)
            rngCorrAnchor.Offset(count, 0) = "FX" & CStr(i) & "ModelFactor" & CStr(j)
        Next j
    Next i
    
    For i = 1 To numForeignModels
        iForeignModelFactorNum = rngForeignModelList.Cells(i, 2).Value
        For j = 1 To iForeignModelFactorNum
            count = count + 1
            rngCorrAnchor.Offset(0, count) = "Foreign" & CStr(i) & "ModelFactor" & CStr(j)
            rngCorrAnchor.Offset(count, 0) = "Foreign" & CStr(i) & "ModelFactor" & CStr(j)
        Next j
    Next i
    
    For i = 1 To numINFModels
        count = count + 1
        rngCorrAnchor.Offset(0, count) = "RealRate" & CStr(i) & "Model"
        rngCorrAnchor.Offset(count, 0) = "RealRate" & CStr(i) & "Model"
    Next i
    
    For i = 1 To numINFModels
        count = count + 1
        rngCorrAnchor.Offset(0, count) = "CPI" & CStr(i) & "Model"
        rngCorrAnchor.Offset(count, 0) = "CPI" & CStr(i) & "Model"
    Next i
    
    For i = 1 To numCMDTYModels
        iCMDTYModelFactorNum = rngCMDTYModelList.Cells(i, 3).Value
        For j = 1 To iCMDTYModelFactorNum
            count = count + 1
            rngCorrAnchor.Offset(0, count) = "=" & rngCMDTYModelList.Cells(i, 1).Address & "&" & """" & "Factor" & CStr(j) & """"
            rngCorrAnchor.Offset(count, 0) = "=" & rngCMDTYModelList.Cells(i, 1).Address & "&" & """" & "Factor" & CStr(j) & """"
        Next j
    Next i
    
    For i = 1 To count
        rngCorrAnchor.Offset(i, i) = 1
        For j = i + 1 To count
            rngCorrAnchor.Offset(i, j) = 0
        Next j
    Next i
    
    rngCorrAnchor.Formula = "=nxlibmatrix(" & Range(rngCorrAnchor.Offset(0, 1), rngCorrAnchor.Offset(0, count)).Address & "," _
                                            & Range(rngCorrAnchor.Offset(1, 0), rngCorrAnchor.Offset(count, 0)).Address & "," _
                                            & Range(rngCorrAnchor.Offset(1, 1), rngCorrAnchor.Offset(count, count)).Address & "," _
                                            & """" & "CC_INFB_CMDTYB_Corr.Data" & """" & ")"
    
    
    Call formatColorAndBorder(rngCorrAnchor)
    Call formatColorAndBorder(Range(rngCorrAnchor.Offset(1, 1), rngCorrAnchor.Offset(count, count)))
    Call formatHeader(Range(rngCorrAnchor.Offset(0, 1), rngCorrAnchor.Offset(0, count)))
    Call formatHeader(Range(rngCorrAnchor.Offset(1, 0), rngCorrAnchor.Offset(count, 0)))
       
    Range(rngCorrAnchor.Offset(1, 1), rngCorrAnchor.Offset(count, count)).Select
    
CleanUp:
    Application.EnableEvents = True
    Application.ScreenUpdating = True
    Set rngForeignModelList = Nothing
    Set rngForeignModelFactorNumList = Nothing
    Set rngFXModelList = Nothing
    Set rngFXModelFactorNumList = Nothing
    Set rngINFModelList = Nothing
    Set rngCMDTYModelList = Nothing
    Set rngCMDTYModelFactorNumList = Nothing
    Set rngIRModelFactorNum = Nothing
    Set rngCorrAnchor = Nothing
    Exit Sub

errorHandler:
    Call VBA.MsgBox("Error in resizing the corrlation matrix", vbCritical + vbOKOnly, "Error")
    GoTo CleanUp
End Sub





''' Formatting Module

Private Sub addConditionalFormat(tempRng As Range)
    tempRng.Select
    Selection.FormatConditions.Delete
    Selection.FormatConditions.Add Type:=xlCellValue, Operator:=xlEqual, _
        Formula1:="=""<LINK>"""
    Selection.FormatConditions(1).Interior.ColorIndex = 3
        
    Cells(1, 1).Select
End Sub

Private Sub formatHeader(tempRng As Range)
    tempRng.Select
    With Selection.Interior
        .Pattern = xlSolid
        .PatternColorIndex = xlAutomatic
        .Color = 10040115
    End With
    With Selection.Font
        .ColorIndex = 2
        .Name = "Calibri"
        .Size = 11
    End With
    Cells(1, 1).Select
End Sub

Private Sub formatColorAndBorder(tempRng As Range)
    tempRng.Select
    Selection.HorizontalAlignment = xlCenter
    Selection.Borders(xlDiagonalDown).LineStyle = xlNone
    Selection.Borders(xlDiagonalUp).LineStyle = xlNone
    With Selection.Borders(xlEdgeLeft)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlEdgeTop)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlEdgeRight)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .Weight = xlThin
    End With
    Selection.Borders(xlInsideVertical).LineStyle = xlNone
    Selection.Borders(xlInsideHorizontal).LineStyle = xlNone
    With Selection.Interior
        .Pattern = xlSolid
        .PatternColorIndex = xlAutomatic
        .ColorIndex = 2
    End With
    With Selection.Font
        .Name = "Calibri"
        .Size = 11
    End With
    Cells(1, 1).Select

End Sub

Private Sub addDataValidation(tempRng As Range)
    tempRng.Select
    With Selection.Validation
        .Delete
        .Add Type:=xlValidateWholeNumber, AlertStyle:=xlValidAlertStop, _
        Operator:=xlGreaterEqual, Formula1:="1"
        .IgnoreBlank = True
        .InCellDropdown = True
        .InputTitle = ""
        .ErrorTitle = "Incorrect Input"
        .InputMessage = ""
        .ErrorMessage = "Please input an integer"
        .ShowInput = True
        .ShowError = True
    End With
    Cells(1, 1).Select
End Sub

Attribute VB_Name = "Sheet3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet30"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "ComboBoxForeignModelNum, 1, 0, MSForms, ComboBox"
Attribute VB_Control = "ResizeButton, 2, 1, MSForms, CommandButton"
Attribute VB_Control = "CreateButton, 3, 2, MSForms, CommandButton"
Attribute VB_Control = "ComboBoxINFModelNum, 4, 3, MSForms, ComboBox"
Attribute VB_Control = "ComboBoxEQModelNum, 5, 4, MSForms, ComboBox"
Option Explicit
Private hasBeenInitialised As Boolean


Private Sub CreateButton_Click()
    On Error GoTo errorHandler
    Application.EnableEvents = False
    Dim asn$: asn = ActiveSheet.Name
    Dim rngForeignModelList As Range: Set rngForeignModelList = Range("NX_" & asn & "_M_ForeignModelList")
    Dim numForeignModels%: numForeignModels = rngForeignModelList.Rows.count
    Dim rngForeignModelListAnchor As Range: Set rngForeignModelListAnchor = rngForeignModelList.Cells(1, 1).Offset(-1, 0)
    Dim rngForeignModels As Range: Set rngForeignModels = Range("NX_" & asn & "_M_ForeignModels")
    rngForeignModels.Formula = "=nxlibdata(" & rngForeignModelListAnchor.Address & "," _
                                & Range(rngForeignModelListAnchor.Offset(1, 0), rngForeignModelListAnchor.Offset(numForeignModels, 0)).Address _
                                & "," & """" & "CC_INFB_EQB_ForeignModel.Data" & """" & ")"
    
    Dim rngFXModelList As Range: Set rngFXModelList = Range("NX_" & asn & "_M_FXModelList")
    Dim numFXModels%: numFXModels = rngFXModelList.Rows.count
    Dim rngFXModelListAnchor As Range: Set rngFXModelListAnchor = rngFXModelList.Cells(1, 1).Offset(-1, 0)
    Dim rngFXModels As Range: Set rngFXModels = Range("NX_" & asn & "_M_FXModels")
    rngFXModels.Formula = "=nxlibdata(" & rngFXModelListAnchor.Address & "," _
                                    & Range(rngFXModelListAnchor.Offset(1, 0), rngFXModelListAnchor.Offset(numFXModels, 0)).Address _
                                    & "," & """" & "CC_INFB_EQB_FXModel.Data" & """" & ")"
    
    Dim rngINFModelList As Range: Set rngINFModelList = Range("NX_" & asn & "_M_INFModelList")
    Dim numINFModels%: numINFModels = rngINFModelList.Rows.count
    Dim rngINFModelListAnchor As Range: Set rngINFModelListAnchor = rngINFModelList.Cells(1, 1).Offset(-1, 0)
    Dim rngINFModels As Range: Set rngINFModels = Range("NX_" & asn & "_M_INFModels")
    rngINFModels.Formula = "=nxlibdata(" & Range(rngINFModelListAnchor, rngINFModelListAnchor.Offset(0, 1)).Address & "," _
                                        & Range(rngINFModelListAnchor.Offset(1, 0), rngINFModelListAnchor.Offset(numINFModels, 1)).Address _
                                        & "," & """" & "CC_INFB_EQB_INFModel.Data" & """" & ")"
    
    Dim rngEQModelList As Range: Set rngEQModelList = Range("NX_" & asn & "_M_EQModelList")
    Dim numEQModels%: numEQModels = rngEQModelList.Rows.count
    Dim rngEQModelListAnchor As Range: Set rngEQModelListAnchor = rngEQModelList.Cells(1, 1).Offset(-1, 0)
    Dim rngEQModels As Range: Set rngEQModels = Range("NX_" & asn & "_M_EQModels")
    rngEQModels.Formula = "=nxlibdata(" & Range(rngEQModelListAnchor, rngEQModelListAnchor.Offset(0, 1)).Address & "," _
                                        & Range(rngEQModelListAnchor.Offset(1, 0), rngEQModelListAnchor.Offset(numEQModels, 1)).Address _
                                        & "," & """" & "CC_INFB_EQB_EQModel.Data" & """" & ")"
    
    ActiveSheet.Calculate
    
CleanUp:
    Application.EnableEvents = True
    Set rngForeignModelList = Nothing
    Set rngForeignModelListAnchor = Nothing
    Set rngForeignModels = Nothing
    Set rngFXModelList = Nothing
    Set rngFXModelListAnchor = Nothing
    Set rngFXModels = Nothing
    Set rngINFModelList = Nothing
    Set rngINFModelListAnchor = Nothing
    Set rngINFModels = Nothing
    Set rngEQModelList = Nothing
    Set rngEQModelListAnchor = Nothing
    Set rngEQModels = Nothing
    Exit Sub
errorHandler:
    Call VBA.MsgBox("Error in creating model table data", vbCritical + vbOKOnly, "Error")
    GoTo CleanUp
    End Sub

Private Sub ResizeButton_Click()
    On Error GoTo CleanUp
    Application.ScreenUpdating = False
    Dim temp1 As Variant: temp1 = Split(ComboBoxForeignModelNum.Text, " ")
    Dim temp2 As Variant: temp2 = Split(ComboBoxINFModelNum.Text, " ")
    Dim temp3 As Variant: temp3 = Split(ComboBoxEQModelNum.Text, " ")
    If Not IsNumeric(temp1(0)) Or Not IsNumeric(temp2(0)) Or Not IsNumeric(temp3(0)) Then
        MsgBox "Fatal error when resizing ComboBox"
        GoTo CleanUp
    Else
        Resize CInt(temp1(0)), CInt(temp2(0)), CInt(temp3(0))
    End If
    On Error GoTo 0
CleanUp:
    Application.ScreenUpdating = True
    ActiveSheet.Calculate
End Sub


Public Sub Resize(numForeignModel As Integer, numINFModel As Integer, numEQModel As Integer)
    On Error GoTo errorHandler
    Application.EnableEvents = False
    Application.ScreenUpdating = False
    
    Dim numFXModel%: numFXModel = numForeignModel
    Dim asn$: asn = ActiveSheet.Name
    Dim rngForeignModels As Range: Set rngForeignModels = Range("NX_" & asn & "_M_ForeignModels")
    Dim rngForeignModelList As Range: Set rngForeignModelList = Range("NX_" & asn & "_M_ForeignModelList")
    Dim rngForeignModelListAnchor As Range: Set rngForeignModelListAnchor = rngForeignModelList.Cells(1, 1).Offset(-1, 0)
    Dim rngFXModels As Range: Set rngFXModels = Range("NX_" & asn & "_M_FXModels")
    Dim rngFXModelList As Range: Set rngFXModelList = Range("NX_" & asn & "_M_FXModelList")
    Dim rngFXModelListAnchor As Range: Set rngFXModelListAnchor = rngFXModelList.Cells(1, 1).Offset(-1, 0)
    Dim rngINFModels As Range: Set rngINFModels = Range("NX_" & asn & "_M_INFModels")
    Dim rngINFModelList As Range: Set rngINFModelList = Range("NX_" & asn & "_M_INFModelList")
    Dim rngINFModelListAnchor As Range: Set rngINFModelListAnchor = rngINFModelList.Cells(1, 1).Offset(-1, 0)
    Dim rngEQModels As Range: Set rngEQModels = Range("NX_" & asn & "_M_EQModels")
    Dim rngEQModelList As Range: Set rngEQModelList = Range("NX_" & asn & "_M_EQModelList")
    Dim rngEQModelListAnchor As Range: Set rngEQModelListAnchor = rngEQModelList.Cells(1, 1).Offset(-1, 0)
    Dim rngIRModelFactorNum As Range: Set rngIRModelFactorNum = Range("NX_" & asn & "_M_IRModelFactorNum")
    Dim rngCorrAnchor As Range: Set rngCorrAnchor = Range("NX_" & asn & "_M_CorrAnchor")
    
    rngForeignModelList.Clear
    rngFXModelList.Clear
    rngINFModelList.Clear
    rngEQModelList.Clear
    rngCorrAnchor.CurrentRegion.Clear
    rngForeignModels = "<LINK>"
    rngFXModels = "<LINK>"
    rngINFModels = "<LINK>"
    rngEQModels = "<LINK>"
    rngIRModelFactorNum.Value = 1
    
    'Resize the Foreign Model table
    Dim i%, j%
    For i = 1 To numForeignModel
        rngForeignModelListAnchor.Offset(i, 0) = "<LINK>"
        rngForeignModelListAnchor.Offset(i, 1) = 1
    Next i
    Range(rngForeignModelListAnchor.Offset(1, 0), rngForeignModelListAnchor.Offset(numForeignModel, 1)).Select
    ActiveWorkbook.Names.Add Name:="NX_" & asn & "_M_ForeignModelList", RefersTo:=Selection
    Set rngForeignModelList = Range("NX_" & asn & "_M_ForeignModelList")
    Call formatColorAndBorder(rngForeignModelList)
    Call addConditionalFormat(Range(rngForeignModelListAnchor.Offset(1, 0), rngForeignModelListAnchor.Offset(numForeignModel, 0)))
    Call addDataValidation(Range(rngForeignModelListAnchor.Offset(1, 1), rngForeignModelListAnchor.Offset(numForeignModel, 1)))
        
    'Resize the FX Model Table
    For i = 1 To numFXModel
        rngFXModelListAnchor.Offset(i, 0) = "<LINK>"
        rngFXModelListAnchor.Offset(i, 1) = 1
    Next i
    Range(rngFXModelListAnchor.Offset(1, 0), rngFXModelListAnchor.Offset(numFXModel, 1)).Select
    ActiveWorkbook.Names.Add Name:="NX_" & asn & "_M_FXModelList", RefersTo:=Selection
    Set rngFXModelList = Range("NX_" & asn & "_M_FXModelList")
    Call formatColorAndBorder(rngFXModelList)
    Call addConditionalFormat(Range(rngFXModelListAnchor.Offset(1, 0), rngFXModelListAnchor.Offset(numFXModel, 0)))
    Call addDataValidation(Range(rngFXModelListAnchor.Offset(1, 1), rngFXModelListAnchor.Offset(numFXModel, 1)))
          
    'Resize the Inflation Model Table
    For i = 1 To numINFModel
        rngINFModelListAnchor.Offset(i, 0) = "<LINK>"
        rngINFModelListAnchor.Offset(i, 1) = "<LINK>"
    Next i
    Range(rngINFModelListAnchor.Offset(1, 0), rngINFModelListAnchor.Offset(numINFModel, 1)).Select
    ActiveWorkbook.Names.Add Name:="NX_" & asn & "_M_INFModelList", RefersTo:=Selection
    Set rngINFModelList = Range("NX_" & asn & "_M_INFModelList")
    Call formatColorAndBorder(rngINFModelList)
    Call addConditionalFormat(Range(rngINFModelListAnchor.Offset(1, 0), rngINFModelListAnchor.Offset(numINFModel, 1)))
    
    'Resize the EQ Model Table
    For i = 1 To numEQModel
        rngEQModelListAnchor.Offset(i, 0) = "<LINK>"
        rngEQModelListAnchor.Offset(i, 1) = "<LINK>"
        rngEQModelListAnchor.Offset(i, 2) = 1
    Next i
    Range(rngEQModelListAnchor.Offset(1, 0), rngEQModelListAnchor.Offset(numEQModel, 2)).Select
    ActiveWorkbook.Names.Add Name:="NX_" & asn & "_M_EQModelList", RefersTo:=Selection
    Set rngEQModelList = Range("NX_" & asn & "_M_EQModelList")
    Call formatColorAndBorder(rngEQModelList)
    Call addConditionalFormat(Range(rngEQModelListAnchor.Offset(1, 0), rngEQModelListAnchor.Offset(numEQModel, 1)))
    Call addDataValidation(Range(rngEQModelListAnchor.Offset(1, 2), rngEQModelListAnchor.Offset(numEQModel, 2)))
    
    rngCorrAnchor.Offset(0, 1) = "DomesticModelFactor1"
    rngCorrAnchor.Offset(1, 0) = "DomesticModelFactor1"
    
    For i = 1 To numFXModel
        rngCorrAnchor.Offset(0, i + 1) = "Foreign" & CStr(i) & "ModelFactor1"
        rngCorrAnchor.Offset(i + 1, 0) = "Foreign" & CStr(i) & "ModelFactor1"
    Next i
    
    For i = 1 To numForeignModel
        rngCorrAnchor.Offset(0, i + numFXModel + 1) = "FX" & CStr(i) & "ModelFactor1"
        rngCorrAnchor.Offset(i + numFXModel + 1, 0) = "FX" & CStr(i) & "ModelFactor1"
    Next i
    
    For i = 1 To numINFModel
        rngCorrAnchor.Offset(0, i + numFXModel + numForeignModel + 1) = "RealRate" & CStr(i) & "Model"
        rngCorrAnchor.Offset(i + numFXModel + numForeignModel + 1, 0) = "RealRate" & CStr(i) & "Model"
    Next i
    
    For i = 1 To numINFModel
        rngCorrAnchor.Offset(0, i + numFXModel + numForeignModel + numINFModel + 1) = "CPI" & CStr(i) & "Model"
        rngCorrAnchor.Offset(i + numFXModel + numForeignModel + numINFModel + 1, 0) = "CPI" & CStr(i) & "Model"
    Next i
    
    For i = 1 To numEQModel
        rngCorrAnchor.Offset(0, i + numFXModel + numForeignModel + 2 * numINFModel + 1) = "=" & rngEQModelList.Cells(i, 1).Address & "&" & """" & "Factor1" & """"
        rngCorrAnchor.Offset(i + numFXModel + numForeignModel + 2 * numINFModel + 1, 0) = "=" & rngEQModelList.Cells(i, 1).Address & "&" & """" & "Factor1" & """"
    Next i
    
    For i = 1 To numFXModel + numForeignModel + 2 * numINFModel + numEQModel + 1
        rngCorrAnchor.Offset(i, i) = 1
        For j = i + 1 To numFXModel + numForeignModel + 2 * numINFModel + numEQModel + 1
            rngCorrAnchor.Offset(i, j) = 0
        Next j
    Next i
    
    rngCorrAnchor.Formula = "=nxlibmatrix(" & Range(rngCorrAnchor.Offset(0, 1), rngCorrAnchor.Offset(0, numFXModel + numForeignModel + 2 * numINFModel + numEQModel + 1)).Address & "," _
                                            & Range(rngCorrAnchor.Offset(1, 0), rngCorrAnchor.Offset(numFXModel + numForeignModel + 2 * numINFModel + numEQModel + 1, 0)).Address & "," _
                                            & Range(rngCorrAnchor.Offset(1, 1), rngCorrAnchor.Offset(numFXModel + numForeignModel + 2 * numINFModel + numEQModel + 1, _
                                                                                                        numFXModel + numForeignModel + 2 * numINFModel + numEQModel + 1)).Address & "," _
                                            & """" & "CC_INFB_EQB_Corr.Data" & """" & ")"
                                            
    Call formatColorAndBorder(rngCorrAnchor)
    Call formatColorAndBorder(Range(rngCorrAnchor.Offset(1, 1), rngCorrAnchor.Offset(numFXModel + numForeignModel + 2 * numINFModel + numEQModel + 1, _
                                                                                        numFXModel + numForeignModel + 2 * numINFModel + numEQModel + 1)))
    Call formatHeader(Range(rngCorrAnchor.Offset(0, 1), rngCorrAnchor.Offset(0, numFXModel + numForeignModel + 2 * numINFModel + numEQModel + 1)))
    Call formatHeader(Range(rngCorrAnchor.Offset(1, 0), rngCorrAnchor.Offset(numFXModel + numForeignModel + 2 * numINFModel + numEQModel + 1, 0)))

CleanUp:
    Application.EnableEvents = True
    Application.ScreenUpdating = True
    Set rngForeignModels = Nothing
    Set rngForeignModelList = Nothing
    Set rngForeignModelListAnchor = Nothing
    Set rngFXModels = Nothing
    Set rngFXModelList = Nothing
    Set rngFXModelListAnchor = Nothing
    Set rngINFModels = Nothing
    Set rngINFModelList = Nothing
    Set rngINFModelListAnchor = Nothing
    Set rngEQModels = Nothing
    Set rngEQModelList = Nothing
    Set rngEQModelListAnchor = Nothing
    Set rngCorrAnchor = Nothing
    Exit Sub
   
errorHandler:
    Call VBA.MsgBox("Error in resizing the model", vbCritical + vbOKOnly, "Error")
    GoTo CleanUp
    End Sub

Private Sub Worksheet_Activate()

    On Error GoTo CleanUp
    ComboBoxForeignModelNum.Clear
    ComboBoxForeignModelNum.AddItem ("1 Foreign Model")
    ComboBoxForeignModelNum.AddItem ("2 Foreign Models")
    ComboBoxForeignModelNum.AddItem ("4 Foreign Models")
    ComboBoxForeignModelNum.AddItem ("5 Foreign Models")
    ComboBoxForeignModelNum.AddItem ("6 Foreign Models")
    ComboBoxForeignModelNum.AddItem ("7 Foreign Models")
    ComboBoxForeignModelNum.AddItem ("8 Foreign Models")
    ComboBoxForeignModelNum.AddItem ("9 Foreign Models")
    ComboBoxForeignModelNum.AddItem ("10 Foreign Models")
    ComboBoxForeignModelNum.Text = "1 Foreign Model"
    
    ComboBoxINFModelNum.Clear
    ComboBoxINFModelNum.AddItem ("1 Inflation Model")
    ComboBoxINFModelNum.AddItem ("2 Inflation Models")
    ComboBoxINFModelNum.AddItem ("3 Inflation Models")
    ComboBoxINFModelNum.AddItem ("4 Inflation Models")
    ComboBoxINFModelNum.AddItem ("5 Inflation Models")
    ComboBoxINFModelNum.AddItem ("6 Inflation Models")
    ComboBoxINFModelNum.AddItem ("7 Inflation Models")
    ComboBoxINFModelNum.AddItem ("8 Inflation Models")
    ComboBoxINFModelNum.AddItem ("9 Inflation Models")
    ComboBoxINFModelNum.AddItem ("10 Inflation Models")
    ComboBoxINFModelNum.Text = "1 Inflation Model"
    
    ComboBoxEQModelNum.Clear
    ComboBoxEQModelNum.AddItem ("1 EQ Model")
    ComboBoxEQModelNum.AddItem ("2 EQ Models")
    ComboBoxEQModelNum.AddItem ("3 EQ Models")
    ComboBoxEQModelNum.AddItem ("4 EQ Models")
    ComboBoxEQModelNum.AddItem ("5 EQ Models")
    ComboBoxEQModelNum.AddItem ("6 EQ Models")
    ComboBoxEQModelNum.AddItem ("7 EQ Models")
    ComboBoxEQModelNum.AddItem ("8 EQ Models")
    ComboBoxEQModelNum.AddItem ("9 EQ Models")
    ComboBoxEQModelNum.AddItem ("10 EQ Models")
    ComboBoxEQModelNum.Text = "1 EQ Model"
        
    hasBeenInitialised = True

CleanUp:
    ActiveSheet.Calculate
End Sub


'Resizing the correlation matrix after changing the Factor number for any model
Private Sub Worksheet_Change(ByVal Target As Range)
    On Error GoTo errorHandler
    Application.EnableEvents = False
    Application.ScreenUpdating = False
    
    Dim asn$: asn = ActiveSheet.Name
    Dim rngForeignModelList As Range: Set rngForeignModelList = Range("NX_" & asn & "_M_ForeignModelList")
    Dim numForeignModels%: numForeignModels = rngForeignModelList.Rows.count
    Dim rngForeignModelFactorNumList As Range: Set rngForeignModelFactorNumList = Range(rngForeignModelList.Cells(1, 2), rngForeignModelList.Cells(numForeignModels, 2))
    Dim rngFXModelList As Range: Set rngFXModelList = Range("NX_" & asn & "_M_FXModelList")
    Dim numFXModels%: numFXModels = rngFXModelList.Rows.count
    Dim rngFXModelFactorNumList As Range: Set rngFXModelFactorNumList = Range(rngFXModelList.Cells(1, 2), rngFXModelList.Cells(numFXModels, 2))
    Dim rngINFModelList As Range: Set rngINFModelList = Range("NX_" & asn & "_M_INFModelList")
    Dim numINFModels%: numINFModels = rngINFModelList.Rows.count
    Dim rngEQModelList As Range: Set rngEQModelList = Range("NX_" & asn & "_M_EQModelList")
    Dim numEQModels%: numEQModels = rngEQModelList.Rows.count
    Dim rngEQModelFactorNumList As Range: Set rngEQModelFactorNumList = Range(rngEQModelList.Cells(1, 3), rngEQModelList.Cells(numEQModels, 3))
    Dim rngIRModelFactorNum As Range: Set rngIRModelFactorNum = Range("NX_" & asn & "_M_IRMOdelFactorNum")
    
    If Intersect(Target, rngForeignModelFactorNumList) Is Nothing And Intersect(Target, rngFXModelFactorNumList) Is Nothing And _
        Intersect(Target, rngEQModelFactorNumList) Is Nothing And Intersect(Target, rngIRModelFactorNum) Is Nothing Then
        GoTo CleanUp
    End If
    
    Dim rngCorrAnchor As Range: Set rngCorrAnchor = Range("NX_" & asn & "_M_CorrAnchor")
    rngCorrAnchor.CurrentRegion.Clear
    Dim iIRModelFactorNum%: iIRModelFactorNum = rngIRModelFactorNum.Value
    Dim iFXModelFactorNum%, iForeignModelFactorNum%, iEQModelFactorNum%
    Dim i%, j%
    Dim count%: count = 0
    For i = 1 To iIRModelFactorNum
        count = count + 1
        rngCorrAnchor.Offset(0, count) = "DomesticModelFactor" & CStr(i)
        rngCorrAnchor.Offset(count, 0) = "DomesticModelFactor" & CStr(i)
    Next i
    
    For i = 1 To numFXModels
        iFXModelFactorNum = rngFXModelList.Cells(i, 2).Value
        For j = 1 To iFXModelFactorNum
            count = count + 1
            rngCorrAnchor.Offset(0, count) = "FX" & CStr(i) & "ModelFactor" & CStr(j)
            rngCorrAnchor.Offset(count, 0) = "FX" & CStr(i) & "ModelFactor" & CStr(j)
        Next j
    Next i
    
    For i = 1 To numForeignModels
        iForeignModelFactorNum = rngForeignModelList.Cells(i, 2).Value
        For j = 1 To iForeignModelFactorNum
            count = count + 1
            rngCorrAnchor.Offset(0, count) = "Foreign" & CStr(i) & "ModelFactor" & CStr(j)
            rngCorrAnchor.Offset(count, 0) = "Foreign" & CStr(i) & "ModelFactor" & CStr(j)
        Next j
    Next i
    
    For i = 1 To numINFModels
        count = count + 1
        rngCorrAnchor.Offset(0, count) = "RealRate" & CStr(i) & "Model"
        rngCorrAnchor.Offset(count, 0) = "RealRate" & CStr(i) & "Model"
    Next i
    
    For i = 1 To numINFModels
        count = count + 1
        rngCorrAnchor.Offset(0, count) = "CPI" & CStr(i) & "Model"
        rngCorrAnchor.Offset(count, 0) = "CPI" & CStr(i) & "Model"
    Next i
    
    For i = 1 To numEQModels
        iEQModelFactorNum = rngEQModelList.Cells(i, 3).Value
        For j = 1 To iEQModelFactorNum
            count = count + 1
            rngCorrAnchor.Offset(0, count) = "=" & rngEQModelList.Cells(i, 1).Address & "&" & """" & "Factor" & CStr(j) & """"
            rngCorrAnchor.Offset(count, 0) = "=" & rngEQModelList.Cells(i, 1).Address & "&" & """" & "Factor" & CStr(j) & """"
        Next j
    Next i
    
    For i = 1 To count
        rngCorrAnchor.Offset(i, i) = 1
        For j = i + 1 To count
            rngCorrAnchor.Offset(i, j) = 0
        Next j
    Next i
    
    rngCorrAnchor.Formula = "=nxlibmatrix(" & Range(rngCorrAnchor.Offset(0, 1), rngCorrAnchor.Offset(0, count)).Address & "," _
                                            & Range(rngCorrAnchor.Offset(1, 0), rngCorrAnchor.Offset(count, 0)).Address & "," _
                                            & Range(rngCorrAnchor.Offset(1, 1), rngCorrAnchor.Offset(count, count)).Address & "," _
                                            & """" & "CC_INFB_EQB_Corr.Data" & """" & ")"
    
    
    Call formatColorAndBorder(rngCorrAnchor)
    Call formatColorAndBorder(Range(rngCorrAnchor.Offset(1, 1), rngCorrAnchor.Offset(count, count)))
    Call formatHeader(Range(rngCorrAnchor.Offset(0, 1), rngCorrAnchor.Offset(0, count)))
    Call formatHeader(Range(rngCorrAnchor.Offset(1, 0), rngCorrAnchor.Offset(count, 0)))
       
    Range(rngCorrAnchor.Offset(1, 1), rngCorrAnchor.Offset(count, count)).Select
    
CleanUp:
    Application.EnableEvents = True
    Application.ScreenUpdating = True
    Set rngForeignModelList = Nothing
    Set rngForeignModelFactorNumList = Nothing
    Set rngFXModelList = Nothing
    Set rngFXModelFactorNumList = Nothing
    Set rngINFModelList = Nothing
    Set rngEQModelList = Nothing
    Set rngEQModelFactorNumList = Nothing
    Set rngIRModelFactorNum = Nothing
    Set rngCorrAnchor = Nothing
    Exit Sub

errorHandler:
    Call VBA.MsgBox("Error in resizing the corrlation matrix", vbCritical + vbOKOnly, "Error")
    GoTo CleanUp
End Sub





''' Formatting Module

Private Sub addConditionalFormat(tempRng As Range)
    tempRng.Select
    Selection.FormatConditions.Delete
    Selection.FormatConditions.Add Type:=xlCellValue, Operator:=xlEqual, _
        Formula1:="=""<LINK>"""
    Selection.FormatConditions(1).Interior.ColorIndex = 3
        
    Cells(1, 1).Select
End Sub

Private Sub formatHeader(tempRng As Range)
    tempRng.Select
    With Selection.Interior
        .Pattern = xlSolid
        .PatternColorIndex = xlAutomatic
        .Color = 10040115
    End With
    With Selection.Font
        .ColorIndex = 2
        .Name = "Calibri"
        .Size = 11
    End With
    Cells(1, 1).Select
End Sub

Private Sub formatColorAndBorder(tempRng As Range)
    tempRng.Select
    Selection.HorizontalAlignment = xlCenter
    Selection.Borders(xlDiagonalDown).LineStyle = xlNone
    Selection.Borders(xlDiagonalUp).LineStyle = xlNone
    With Selection.Borders(xlEdgeLeft)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlEdgeTop)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlEdgeRight)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .Weight = xlThin
    End With
    Selection.Borders(xlInsideVertical).LineStyle = xlNone
    Selection.Borders(xlInsideHorizontal).LineStyle = xlNone
    With Selection.Interior
        .Pattern = xlSolid
        .PatternColorIndex = xlAutomatic
        .ColorIndex = 2
    End With
    With Selection.Font
        .Name = "Calibri"
        .Size = 11
    End With
    Cells(1, 1).Select

End Sub

Private Sub addDataValidation(tempRng As Range)
    tempRng.Select
    With Selection.Validation
        .Delete
        .Add Type:=xlValidateWholeNumber, AlertStyle:=xlValidAlertStop, _
        Operator:=xlGreaterEqual, Formula1:="1"
        .IgnoreBlank = True
        .InCellDropdown = True
        .InputTitle = ""
        .ErrorTitle = "Incorrect Input"
        .InputMessage = ""
        .ErrorMessage = "Please input an integer"
        .ShowInput = True
        .ShowError = True
    End With
    Cells(1, 1).Select
End Sub

Attribute VB_Name = "Sheet31"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "ComboBoxForeignModelNum, 1, 0, MSForms, ComboBox"
Attribute VB_Control = "ResizeButton, 2, 1, MSForms, CommandButton"
Attribute VB_Control = "CreateButton, 3, 2, MSForms, CommandButton"
Attribute VB_Control = "ComboBoxINFModelNum, 4, 3, MSForms, ComboBox"
Attribute VB_Control = "ComboBoxCRModelNum, 5, 4, MSForms, ComboBox"
Option Explicit
Private hasBeenInitialised As Boolean


Private Sub CreateButton_Click()
    On Error GoTo errorHandler
    Application.EnableEvents = False
    Dim asn$: asn = ActiveSheet.Name
    Dim rngForeignModelList As Range: Set rngForeignModelList = Range("NX_" & asn & "_M_ForeignModelList")
    Dim numForeignModels%: numForeignModels = rngForeignModelList.Rows.count
    Dim rngForeignModelListAnchor As Range: Set rngForeignModelListAnchor = rngForeignModelList.Cells(1, 1).Offset(-1, 0)
    Dim rngForeignModels As Range: Set rngForeignModels = Range("NX_" & asn & "_M_ForeignModels")
    rngForeignModels.Formula = "=nxlibdata(" & rngForeignModelListAnchor.Address & "," _
                                & Range(rngForeignModelListAnchor.Offset(1, 0), rngForeignModelListAnchor.Offset(numForeignModels, 0)).Address _
                                & "," & """" & "CC_INFB_CRB_ForeignModel.Data" & """" & ")"
    
    Dim rngFXModelList As Range: Set rngFXModelList = Range("NX_" & asn & "_M_FXModelList")
    Dim numFXModels%: numFXModels = rngFXModelList.Rows.count
    Dim rngFXModelListAnchor As Range: Set rngFXModelListAnchor = rngFXModelList.Cells(1, 1).Offset(-1, 0)
    Dim rngFXModels As Range: Set rngFXModels = Range("NX_" & asn & "_M_FXModels")
    rngFXModels.Formula = "=nxlibdata(" & rngFXModelListAnchor.Address & "," _
                                    & Range(rngFXModelListAnchor.Offset(1, 0), rngFXModelListAnchor.Offset(numFXModels, 0)).Address _
                                    & "," & """" & "CC_INFB_CRB_FXModel.Data" & """" & ")"
    
    Dim rngINFModelList As Range: Set rngINFModelList = Range("NX_" & asn & "_M_INFModelList")
    Dim numINFModels%: numINFModels = rngINFModelList.Rows.count
    Dim rngINFModelListAnchor As Range: Set rngINFModelListAnchor = rngINFModelList.Cells(1, 1).Offset(-1, 0)
    Dim rngINFModels As Range: Set rngINFModels = Range("NX_" & asn & "_M_INFModels")
    rngINFModels.Formula = "=nxlibdata(" & Range(rngINFModelListAnchor, rngINFModelListAnchor.Offset(0, 1)).Address & "," _
                                        & Range(rngINFModelListAnchor.Offset(1, 0), rngINFModelListAnchor.Offset(numINFModels, 1)).Address _
                                        & "," & """" & "CC_INFB_CRB_INFModel.Data" & """" & ")"
    
    Dim rngCRModelList As Range: Set rngCRModelList = Range("NX_" & asn & "_M_CRModelList")
    Dim numCRModels%: numCRModels = rngCRModelList.Rows.count
    Dim rngCRModelListAnchor As Range: Set rngCRModelListAnchor = rngCRModelList.Cells(1, 1).Offset(-1, 0)
    Dim rngCRModels As Range: Set rngCRModels = Range("NX_" & asn & "_M_CRModels")
    rngCRModels.Formula = "=nxlibdata(" & Range(rngCRModelListAnchor, rngCRModelListAnchor.Offset(0, 1)).Address & "," _
                                        & Range(rngCRModelListAnchor.Offset(1, 0), rngCRModelListAnchor.Offset(numCRModels, 1)).Address _
                                        & "," & """" & "CC_INFB_CRB_CRModel.Data" & """" & ")"
    
    ActiveSheet.Calculate
    
CleanUp:
    Application.EnableEvents = True
    Set rngForeignModelList = Nothing
    Set rngForeignModelListAnchor = Nothing
    Set rngForeignModels = Nothing
    Set rngFXModelList = Nothing
    Set rngFXModelListAnchor = Nothing
    Set rngFXModels = Nothing
    Set rngINFModelList = Nothing
    Set rngINFModelListAnchor = Nothing
    Set rngINFModels = Nothing
    Set rngCRModelList = Nothing
    Set rngCRModelListAnchor = Nothing
    Set rngCRModels = Nothing
    Exit Sub
errorHandler:
    Call VBA.MsgBox("Error in creating model table data", vbCritical + vbOKOnly, "Error")
    GoTo CleanUp
    End Sub

Private Sub ResizeButton_Click()
    On Error GoTo CleanUp
    Application.ScreenUpdating = False
    Dim temp1 As Variant: temp1 = Split(ComboBoxForeignModelNum.Text, " ")
    Dim temp2 As Variant: temp2 = Split(ComboBoxINFModelNum.Text, " ")
    Dim temp3 As Variant: temp3 = Split(ComboBoxCRModelNum.Text, " ")
    If Not IsNumeric(temp1(0)) Or Not IsNumeric(temp2(0)) Or Not IsNumeric(temp3(0)) Then
        MsgBox "Fatal error when resizing ComboBox"
        GoTo CleanUp
    Else
        Resize CInt(temp1(0)), CInt(temp2(0)), CInt(temp3(0))
    End If
    On Error GoTo 0
CleanUp:
    Application.ScreenUpdating = True
    ActiveSheet.Calculate
End Sub


Public Sub Resize(numForeignModel As Integer, numINFModel As Integer, numCRModel As Integer)
    On Error GoTo errorHandler
    Application.EnableEvents = False
    Application.ScreenUpdating = False
    
    Dim numFXModel%: numFXModel = numForeignModel
    Dim asn$: asn = ActiveSheet.Name
    Dim rngForeignModels As Range: Set rngForeignModels = Range("NX_" & asn & "_M_ForeignModels")
    Dim rngForeignModelList As Range: Set rngForeignModelList = Range("NX_" & asn & "_M_ForeignModelList")
    Dim rngForeignModelListAnchor As Range: Set rngForeignModelListAnchor = rngForeignModelList.Cells(1, 1).Offset(-1, 0)
    Dim rngFXModels As Range: Set rngFXModels = Range("NX_" & asn & "_M_FXModels")
    Dim rngFXModelList As Range: Set rngFXModelList = Range("NX_" & asn & "_M_FXModelList")
    Dim rngFXModelListAnchor As Range: Set rngFXModelListAnchor = rngFXModelList.Cells(1, 1).Offset(-1, 0)
    Dim rngINFModels As Range: Set rngINFModels = Range("NX_" & asn & "_M_INFModels")
    Dim rngINFModelList As Range: Set rngINFModelList = Range("NX_" & asn & "_M_INFModelList")
    Dim rngINFModelListAnchor As Range: Set rngINFModelListAnchor = rngINFModelList.Cells(1, 1).Offset(-1, 0)
    Dim rngCRModels As Range: Set rngCRModels = Range("NX_" & asn & "_M_CRModels")
    Dim rngCRModelList As Range: Set rngCRModelList = Range("NX_" & asn & "_M_CRModelList")
    Dim rngCRModelListAnchor As Range: Set rngCRModelListAnchor = rngCRModelList.Cells(1, 1).Offset(-1, 0)
    Dim rngIRModelFactorNum As Range: Set rngIRModelFactorNum = Range("NX_" & asn & "_M_IRModelFactorNum")
    Dim rngCorrAnchor As Range: Set rngCorrAnchor = Range("NX_" & asn & "_M_CorrAnchor")
    
    rngForeignModelList.Clear
    rngFXModelList.Clear
    rngINFModelList.Clear
    rngCRModelList.Clear
    rngCorrAnchor.CurrentRegion.Clear
    rngForeignModels = "<LINK>"
    rngFXModels = "<LINK>"
    rngINFModels = "<LINK>"
    rngCRModels = "<LINK>"
    rngIRModelFactorNum.Value = 1
    
    'Resize the Foreign Model table
    Dim i%, j%
    For i = 1 To numForeignModel
        rngForeignModelListAnchor.Offset(i, 0) = "<LINK>"
        rngForeignModelListAnchor.Offset(i, 1) = 1
    Next i
    Range(rngForeignModelListAnchor.Offset(1, 0), rngForeignModelListAnchor.Offset(numForeignModel, 1)).Select
    ActiveWorkbook.Names.Add Name:="NX_" & asn & "_M_ForeignModelList", RefersTo:=Selection
    Set rngForeignModelList = Range("NX_" & asn & "_M_ForeignModelList")
    Call formatColorAndBorder(rngForeignModelList)
    Call addConditionalFormat(Range(rngForeignModelListAnchor.Offset(1, 0), rngForeignModelListAnchor.Offset(numForeignModel, 0)))
    Call addDataValidation(Range(rngForeignModelListAnchor.Offset(1, 1), rngForeignModelListAnchor.Offset(numForeignModel, 1)))
        
    'Resize the FX Model Table
    For i = 1 To numFXModel
        rngFXModelListAnchor.Offset(i, 0) = "<LINK>"
        rngFXModelListAnchor.Offset(i, 1) = 1
    Next i
    Range(rngFXModelListAnchor.Offset(1, 0), rngFXModelListAnchor.Offset(numFXModel, 1)).Select
    ActiveWorkbook.Names.Add Name:="NX_" & asn & "_M_FXModelList", RefersTo:=Selection
    Set rngFXModelList = Range("NX_" & asn & "_M_FXModelList")
    Call formatColorAndBorder(rngFXModelList)
    Call addConditionalFormat(Range(rngFXModelListAnchor.Offset(1, 0), rngFXModelListAnchor.Offset(numFXModel, 0)))
    Call addDataValidation(Range(rngFXModelListAnchor.Offset(1, 1), rngFXModelListAnchor.Offset(numFXModel, 1)))
          
    'Resize the Inflation Model Table
    For i = 1 To numINFModel
        rngINFModelListAnchor.Offset(i, 0) = "<LINK>"
        rngINFModelListAnchor.Offset(i, 1) = "<LINK>"
    Next i
    Range(rngINFModelListAnchor.Offset(1, 0), rngINFModelListAnchor.Offset(numINFModel, 1)).Select
    ActiveWorkbook.Names.Add Name:="NX_" & asn & "_M_INFModelList", RefersTo:=Selection
    Set rngINFModelList = Range("NX_" & asn & "_M_INFModelList")
    Call formatColorAndBorder(rngINFModelList)
    Call addConditionalFormat(Range(rngINFModelListAnchor.Offset(1, 0), rngINFModelListAnchor.Offset(numINFModel, 1)))
    
    'Resize the CR Model Table
    For i = 1 To numCRModel
        rngCRModelListAnchor.Offset(i, 0) = "<LINK>"
        rngCRModelListAnchor.Offset(i, 1) = ""
        rngCRModelListAnchor.Offset(i, 2) = 1
    Next i
    Range(rngCRModelListAnchor.Offset(1, 0), rngCRModelListAnchor.Offset(numCRModel, 2)).Select
    ActiveWorkbook.Names.Add Name:="NX_" & asn & "_M_CRModelList", RefersTo:=Selection
    Set rngCRModelList = Range("NX_" & asn & "_M_CRModelList")
    Call formatColorAndBorder(rngCRModelList)
    Call addConditionalFormat(Range(rngCRModelListAnchor.Offset(1, 0), rngCRModelListAnchor.Offset(numCRModel, 0)))
    Call addDataValidation(Range(rngCRModelListAnchor.Offset(1, 2), rngCRModelListAnchor.Offset(numCRModel, 2)))
    
    rngCorrAnchor.Offset(0, 1) = "DomesticModelFactor1"
    rngCorrAnchor.Offset(1, 0) = "DomesticModelFactor1"
    
    For i = 1 To numFXModel
        rngCorrAnchor.Offset(0, i + 1) = "Foreign" & CStr(i) & "ModelFactor1"
        rngCorrAnchor.Offset(i + 1, 0) = "Foreign" & CStr(i) & "ModelFactor1"
    Next i
    
    For i = 1 To numForeignModel
        rngCorrAnchor.Offset(0, i + numFXModel + 1) = "FX" & CStr(i) & "ModelFactor1"
        rngCorrAnchor.Offset(i + numFXModel + 1, 0) = "FX" & CStr(i) & "ModelFactor1"
    Next i
    
    For i = 1 To numINFModel
        rngCorrAnchor.Offset(0, i + numFXModel + numForeignModel + 1) = "RealRate" & CStr(i) & "Model"
        rngCorrAnchor.Offset(i + numFXModel + numForeignModel + 1, 0) = "RealRate" & CStr(i) & "Model"
    Next i
    
    For i = 1 To numINFModel
        rngCorrAnchor.Offset(0, i + numFXModel + numForeignModel + numINFModel + 1) = "CPI" & CStr(i) & "Model"
        rngCorrAnchor.Offset(i + numFXModel + numForeignModel + numINFModel + 1, 0) = "CPI" & CStr(i) & "Model"
    Next i
    
    For i = 1 To numCRModel
        rngCorrAnchor.Offset(0, i + numFXModel + numForeignModel + 2 * numINFModel + 1) = "CR" & CStr(i) & "Factor1"
        rngCorrAnchor.Offset(i + numFXModel + numForeignModel + 2 * numINFModel + 1, 0) = "CR" & CStr(i) & "Factor1"
    Next i
    
    For i = 1 To numFXModel + numForeignModel + 2 * numINFModel + numCRModel + 1
        rngCorrAnchor.Offset(i, i) = 1
        For j = i + 1 To numFXModel + numForeignModel + 2 * numINFModel + numCRModel + 1
            rngCorrAnchor.Offset(i, j) = 0
        Next j
    Next i
    
    rngCorrAnchor.Formula = "=nxlibmatrix(" & Range(rngCorrAnchor.Offset(0, 1), rngCorrAnchor.Offset(0, numFXModel + numForeignModel + 2 * numINFModel + numCRModel + 1)).Address & "," _
                                            & Range(rngCorrAnchor.Offset(1, 0), rngCorrAnchor.Offset(numFXModel + numForeignModel + 2 * numINFModel + numCRModel + 1, 0)).Address & "," _
                                            & Range(rngCorrAnchor.Offset(1, 1), rngCorrAnchor.Offset(numFXModel + numForeignModel + 2 * numINFModel + numCRModel + 1, _
                                                                                                        numFXModel + numForeignModel + 2 * numINFModel + numCRModel + 1)).Address & "," _
                                            & """" & "CC_INFB_CRB_Corr.Data" & """" & ")"
                                            
    Call formatColorAndBorder(rngCorrAnchor)
    Call formatColorAndBorder(Range(rngCorrAnchor.Offset(1, 1), rngCorrAnchor.Offset(numFXModel + numForeignModel + 2 * numINFModel + numCRModel + 1, _
                                                                                        numFXModel + numForeignModel + 2 * numINFModel + numCRModel + 1)))
    Call formatHeader(Range(rngCorrAnchor.Offset(0, 1), rngCorrAnchor.Offset(0, numFXModel + numForeignModel + 2 * numINFModel + numCRModel + 1)))
    Call formatHeader(Range(rngCorrAnchor.Offset(1, 0), rngCorrAnchor.Offset(numFXModel + numForeignModel + 2 * numINFModel + numCRModel + 1, 0)))

CleanUp:
    Application.EnableEvents = True
    Application.ScreenUpdating = True
    Set rngForeignModels = Nothing
    Set rngForeignModelList = Nothing
    Set rngForeignModelListAnchor = Nothing
    Set rngFXModels = Nothing
    Set rngFXModelList = Nothing
    Set rngFXModelListAnchor = Nothing
    Set rngINFModels = Nothing
    Set rngINFModelList = Nothing
    Set rngINFModelListAnchor = Nothing
    Set rngCRModels = Nothing
    Set rngCRModelList = Nothing
    Set rngCRModelListAnchor = Nothing
    Set rngCorrAnchor = Nothing
    Exit Sub
   
errorHandler:
    Call VBA.MsgBox("Error in resizing the model", vbCritical + vbOKOnly, "Error")
    GoTo CleanUp
    End Sub

Private Sub Worksheet_Activate()

    On Error GoTo CleanUp
    ComboBoxForeignModelNum.Clear
    ComboBoxForeignModelNum.AddItem ("1 Foreign Model")
    ComboBoxForeignModelNum.AddItem ("2 Foreign Models")
    ComboBoxForeignModelNum.AddItem ("4 Foreign Models")
    ComboBoxForeignModelNum.AddItem ("5 Foreign Models")
    ComboBoxForeignModelNum.AddItem ("6 Foreign Models")
    ComboBoxForeignModelNum.AddItem ("7 Foreign Models")
    ComboBoxForeignModelNum.AddItem ("8 Foreign Models")
    ComboBoxForeignModelNum.AddItem ("9 Foreign Models")
    ComboBoxForeignModelNum.AddItem ("10 Foreign Models")
    ComboBoxForeignModelNum.Text = "1 Foreign Model"
    
    ComboBoxINFModelNum.Clear
    ComboBoxINFModelNum.AddItem ("1 Inflation Model")
    ComboBoxINFModelNum.AddItem ("2 Inflation Models")
    ComboBoxINFModelNum.AddItem ("3 Inflation Models")
    ComboBoxINFModelNum.AddItem ("4 Inflation Models")
    ComboBoxINFModelNum.AddItem ("5 Inflation Models")
    ComboBoxINFModelNum.AddItem ("6 Inflation Models")
    ComboBoxINFModelNum.AddItem ("7 Inflation Models")
    ComboBoxINFModelNum.AddItem ("8 Inflation Models")
    ComboBoxINFModelNum.AddItem ("9 Inflation Models")
    ComboBoxINFModelNum.AddItem ("10 Inflation Models")
    ComboBoxINFModelNum.Text = "1 Inflation Model"
    
    ComboBoxCRModelNum.Clear
    ComboBoxCRModelNum.AddItem ("1 CR Model")
    ComboBoxCRModelNum.AddItem ("2 CR Models")
    ComboBoxCRModelNum.AddItem ("3 CR Models")
    ComboBoxCRModelNum.AddItem ("4 CR Models")
    ComboBoxCRModelNum.AddItem ("5 CR Models")
    ComboBoxCRModelNum.AddItem ("6 CR Models")
    ComboBoxCRModelNum.AddItem ("7 CR Models")
    ComboBoxCRModelNum.AddItem ("8 CR Models")
    ComboBoxCRModelNum.AddItem ("9 CR Models")
    ComboBoxCRModelNum.AddItem ("10 CR Models")
    ComboBoxCRModelNum.Text = "1 CR Model"
        
    hasBeenInitialised = True

CleanUp:
    ActiveSheet.Calculate
End Sub


'Resizing the correlation matrix after changing the Factor number for any model
Private Sub Worksheet_Change(ByVal Target As Range)
    On Error GoTo errorHandler
    Application.EnableEvents = False
    Application.ScreenUpdating = False
    
    Dim asn$: asn = ActiveSheet.Name
    Dim rngForeignModelList As Range: Set rngForeignModelList = Range("NX_" & asn & "_M_ForeignModelList")
    Dim numForeignModels%: numForeignModels = rngForeignModelList.Rows.count
    Dim rngForeignModelFactorNumList As Range: Set rngForeignModelFactorNumList = Range(rngForeignModelList.Cells(1, 2), rngForeignModelList.Cells(numForeignModels, 2))
    Dim rngFXModelList As Range: Set rngFXModelList = Range("NX_" & asn & "_M_FXModelList")
    Dim numFXModels%: numFXModels = rngFXModelList.Rows.count
    Dim rngFXModelFactorNumList As Range: Set rngFXModelFactorNumList = Range(rngFXModelList.Cells(1, 2), rngFXModelList.Cells(numFXModels, 2))
    Dim rngINFModelList As Range: Set rngINFModelList = Range("NX_" & asn & "_M_INFModelList")
    Dim numINFModels%: numINFModels = rngINFModelList.Rows.count
    Dim rngCRModelList As Range: Set rngCRModelList = Range("NX_" & asn & "_M_CRModelList")
    Dim numCRModels%: numCRModels = rngCRModelList.Rows.count
    Dim rngCRModelFactorNumList As Range: Set rngCRModelFactorNumList = Range(rngCRModelList.Cells(1, 3), rngCRModelList.Cells(numCRModels, 3))
    Dim rngIRModelFactorNum As Range: Set rngIRModelFactorNum = Range("NX_" & asn & "_M_IRMOdelFactorNum")
    
    If Intersect(Target, rngForeignModelFactorNumList) Is Nothing And Intersect(Target, rngFXModelFactorNumList) Is Nothing And _
        Intersect(Target, rngCRModelFactorNumList) Is Nothing And Intersect(Target, rngIRModelFactorNum) Is Nothing Then
        GoTo CleanUp
    End If
    
    Dim rngCorrAnchor As Range: Set rngCorrAnchor = Range("NX_" & asn & "_M_CorrAnchor")
    rngCorrAnchor.CurrentRegion.Clear
    Dim iIRModelFactorNum%: iIRModelFactorNum = rngIRModelFactorNum.Value
    Dim iFXModelFactorNum%, iForeignModelFactorNum%, iCRModelFactorNum%
    Dim i%, j%
    Dim count%: count = 0
    For i = 1 To iIRModelFactorNum
        count = count + 1
        rngCorrAnchor.Offset(0, count) = "DomesticModelFactor" & CStr(i)
        rngCorrAnchor.Offset(count, 0) = "DomesticModelFactor" & CStr(i)
    Next i
    
    For i = 1 To numFXModels
        iFXModelFactorNum = rngFXModelList.Cells(i, 2).Value
        For j = 1 To iFXModelFactorNum
            count = count + 1
            rngCorrAnchor.Offset(0, count) = "FX" & CStr(i) & "ModelFactor" & CStr(j)
            rngCorrAnchor.Offset(count, 0) = "FX" & CStr(i) & "ModelFactor" & CStr(j)
        Next j
    Next i
    
    For i = 1 To numForeignModels
        iForeignModelFactorNum = rngForeignModelList.Cells(i, 2).Value
        For j = 1 To iForeignModelFactorNum
            count = count + 1
            rngCorrAnchor.Offset(0, count) = "Foreign" & CStr(i) & "ModelFactor" & CStr(j)
            rngCorrAnchor.Offset(count, 0) = "Foreign" & CStr(i) & "ModelFactor" & CStr(j)
        Next j
    Next i
    
    For i = 1 To numINFModels
        count = count + 1
        rngCorrAnchor.Offset(0, count) = "RealRate" & CStr(i) & "Model"
        rngCorrAnchor.Offset(count, 0) = "RealRate" & CStr(i) & "Model"
    Next i
    
    For i = 1 To numINFModels
        count = count + 1
        rngCorrAnchor.Offset(0, count) = "CPI" & CStr(i) & "Model"
        rngCorrAnchor.Offset(count, 0) = "CPI" & CStr(i) & "Model"
    Next i
    
    For i = 1 To numCRModels
        iCRModelFactorNum = rngCRModelList.Cells(i, 3).Value
        For j = 1 To iCRModelFactorNum
            count = count + 1
            rngCorrAnchor.Offset(0, count) = "CR" & CStr(i) & "Factor" & CStr(j)
            rngCorrAnchor.Offset(count, 0) = "CR" & CStr(i) & "Factor" & CStr(j)
        Next j
    Next i
    
    For i = 1 To count
        rngCorrAnchor.Offset(i, i) = 1
        For j = i + 1 To count
            rngCorrAnchor.Offset(i, j) = 0
        Next j
    Next i
    
    rngCorrAnchor.Formula = "=nxlibmatrix(" & Range(rngCorrAnchor.Offset(0, 1), rngCorrAnchor.Offset(0, count)).Address & "," _
                                            & Range(rngCorrAnchor.Offset(1, 0), rngCorrAnchor.Offset(count, 0)).Address & "," _
                                            & Range(rngCorrAnchor.Offset(1, 1), rngCorrAnchor.Offset(count, count)).Address & "," _
                                            & """" & "CC_INFB_CRB_Corr.Data" & """" & ")"
    
    
    Call formatColorAndBorder(rngCorrAnchor)
    Call formatColorAndBorder(Range(rngCorrAnchor.Offset(1, 1), rngCorrAnchor.Offset(count, count)))
    Call formatHeader(Range(rngCorrAnchor.Offset(0, 1), rngCorrAnchor.Offset(0, count)))
    Call formatHeader(Range(rngCorrAnchor.Offset(1, 0), rngCorrAnchor.Offset(count, 0)))
       
    Range(rngCorrAnchor.Offset(1, 1), rngCorrAnchor.Offset(count, count)).Select
    
CleanUp:
    Application.EnableEvents = True
    Application.ScreenUpdating = True
    Set rngForeignModelList = Nothing
    Set rngForeignModelFactorNumList = Nothing
    Set rngFXModelList = Nothing
    Set rngFXModelFactorNumList = Nothing
    Set rngINFModelList = Nothing
    Set rngCRModelList = Nothing
    Set rngCRModelFactorNumList = Nothing
    Set rngIRModelFactorNum = Nothing
    Set rngCorrAnchor = Nothing
    Exit Sub

errorHandler:
    Call VBA.MsgBox("Error in resizing the corrlation matrix", vbCritical + vbOKOnly, "Error")
    GoTo CleanUp
End Sub





''' Formatting Module

Private Sub addConditionalFormat(tempRng As Range)
    tempRng.Select
    Selection.FormatConditions.Delete
    Selection.FormatConditions.Add Type:=xlCellValue, Operator:=xlEqual, _
        Formula1:="=""<LINK>"""
    Selection.FormatConditions(1).Interior.ColorIndex = 3
        
    Cells(1, 1).Select
End Sub

Private Sub formatHeader(tempRng As Range)
    tempRng.Select
    With Selection.Interior
        .Pattern = xlSolid
        .PatternColorIndex = xlAutomatic
        .Color = 10040115
    End With
    With Selection.Font
        .ColorIndex = 2
        .Name = "Calibri"
        .Size = 11
    End With
    Cells(1, 1).Select
End Sub

Private Sub formatColorAndBorder(tempRng As Range)
    tempRng.Select
    Selection.HorizontalAlignment = xlCenter
    Selection.Borders(xlDiagonalDown).LineStyle = xlNone
    Selection.Borders(xlDiagonalUp).LineStyle = xlNone
    With Selection.Borders(xlEdgeLeft)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlEdgeTop)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlEdgeRight)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .Weight = xlThin
    End With
    Selection.Borders(xlInsideVertical).LineStyle = xlNone
    Selection.Borders(xlInsideHorizontal).LineStyle = xlNone
    With Selection.Interior
        .Pattern = xlSolid
        .PatternColorIndex = xlAutomatic
        .ColorIndex = 2
    End With
    With Selection.Font
        .Name = "Calibri"
        .Size = 11
    End With
    Cells(1, 1).Select

End Sub

Private Sub addDataValidation(tempRng As Range)
    tempRng.Select
    With Selection.Validation
        .Delete
        .Add Type:=xlValidateWholeNumber, AlertStyle:=xlValidAlertStop, _
        Operator:=xlGreaterEqual, Formula1:="1"
        .IgnoreBlank = True
        .InCellDropdown = True
        .InputTitle = ""
        .ErrorTitle = "Incorrect Input"
        .InputMessage = ""
        .ErrorMessage = "Please input an integer"
        .ShowInput = True
        .ShowError = True
    End With
    Cells(1, 1).Select
End Sub

Attribute VB_Name = "Sheet32"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "ComboBoxForeignModelNum, 1, 0, MSForms, ComboBox"
Attribute VB_Control = "ResizeButton, 2, 1, MSForms, CommandButton"
Attribute VB_Control = "CreateButton, 3, 2, MSForms, CommandButton"
Attribute VB_Control = "ComboBoxINFModelNum, 4, 3, MSForms, ComboBox"
Attribute VB_Control = "ComboBoxCRModelNum, 5, 4, MSForms, ComboBox"
Attribute VB_Control = "ComboBoxEQModelNum, 6, 5, MSForms, ComboBox"
Option Explicit
Private hasBeenInitialised As Boolean


Private Sub CreateButton_Click()
    On Error GoTo errorHandler
    Application.EnableEvents = False
    Dim asn$: asn = ActiveSheet.Name
    Dim rngForeignModelList As Range: Set rngForeignModelList = Range("NX_" & asn & "_M_ForeignModelList")
    Dim numForeignModels%: numForeignModels = rngForeignModelList.Rows.count
    Dim rngForeignModelListAnchor As Range: Set rngForeignModelListAnchor = rngForeignModelList.Cells(1, 1).Offset(-1, 0)
    Dim rngForeignModels As Range: Set rngForeignModels = Range("NX_" & asn & "_M_ForeignModels")
    rngForeignModels.Formula = "=nxlibdata(" & rngForeignModelListAnchor.Address & "," _
                                & Range(rngForeignModelListAnchor.Offset(1, 0), rngForeignModelListAnchor.Offset(numForeignModels, 0)).Address _
                                & "," & """" & "CC_INFB_CRB_EQB_ForeignModel.Data" & """" & ")"
    
    Dim rngFXModelList As Range: Set rngFXModelList = Range("NX_" & asn & "_M_FXModelList")
    Dim numFXModels%: numFXModels = rngFXModelList.Rows.count
    Dim rngFXModelListAnchor As Range: Set rngFXModelListAnchor = rngFXModelList.Cells(1, 1).Offset(-1, 0)
    Dim rngFXModels As Range: Set rngFXModels = Range("NX_" & asn & "_M_FXModels")
    rngFXModels.Formula = "=nxlibdata(" & rngFXModelListAnchor.Address & "," _
                                    & Range(rngFXModelListAnchor.Offset(1, 0), rngFXModelListAnchor.Offset(numFXModels, 0)).Address _
                                    & "," & """" & "CC_INFB_CRB_EQB_FXModel.Data" & """" & ")"
    
    Dim rngINFModelList As Range: Set rngINFModelList = Range("NX_" & asn & "_M_INFModelList")
    Dim numINFModels%: numINFModels = rngINFModelList.Rows.count
    Dim rngINFModelListAnchor As Range: Set rngINFModelListAnchor = rngINFModelList.Cells(1, 1).Offset(-1, 0)
    Dim rngINFModels As Range: Set rngINFModels = Range("NX_" & asn & "_M_INFModels")
    rngINFModels.Formula = "=nxlibdata(" & Range(rngINFModelListAnchor, rngINFModelListAnchor.Offset(0, 1)).Address & "," _
                                        & Range(rngINFModelListAnchor.Offset(1, 0), rngINFModelListAnchor.Offset(numINFModels, 1)).Address _
                                        & "," & """" & "CC_INFB_CRB_EQB_INFModel.Data" & """" & ")"
    
    Dim rngCRModelList As Range: Set rngCRModelList = Range("NX_" & asn & "_M_CRModelList")
    Dim numCRModels%: numCRModels = rngCRModelList.Rows.count
    Dim rngCRModelListAnchor As Range: Set rngCRModelListAnchor = rngCRModelList.Cells(1, 1).Offset(-1, 0)
    Dim rngCRModels As Range: Set rngCRModels = Range("NX_" & asn & "_M_CRModels")
    rngCRModels.Formula = "=nxlibdata(" & Range(rngCRModelListAnchor, rngCRModelListAnchor.Offset(0, 1)).Address & "," _
                                        & Range(rngCRModelListAnchor.Offset(1, 0), rngCRModelListAnchor.Offset(numCRModels, 1)).Address _
                                        & "," & """" & "CC_INFB_CRB_EQB_CRModel.Data" & """" & ")"

    Dim rngEQModelList As Range: Set rngEQModelList = Range("NX_" & asn & "_M_EQModelList")
    Dim numEQModels%: numEQModels = rngEQModelList.Rows.count
    Dim rngEQModelListAnchor As Range: Set rngEQModelListAnchor = rngEQModelList.Cells(1, 1).Offset(-1, 0)
    Dim rngEQModels As Range: Set rngEQModels = Range("NX_" & asn & "_M_EQModels")
    rngEQModels.Formula = "=nxlibdata(" & Range(rngEQModelListAnchor, rngEQModelListAnchor.Offset(0, 1)).Address & "," _
                                        & Range(rngEQModelListAnchor.Offset(1, 0), rngEQModelListAnchor.Offset(numEQModels, 1)).Address _
                                        & "," & """" & "CC_INFB_CRB_EQB_EQModel.Data" & """" & ")"
    
    ActiveSheet.Calculate
    
CleanUp:
    Application.EnableEvents = True
    Set rngForeignModelList = Nothing
    Set rngForeignModelListAnchor = Nothing
    Set rngForeignModels = Nothing
    Set rngFXModelList = Nothing
    Set rngFXModelListAnchor = Nothing
    Set rngFXModels = Nothing
    Set rngINFModelList = Nothing
    Set rngINFModelListAnchor = Nothing
    Set rngINFModels = Nothing
    Set rngCRModelList = Nothing
    Set rngCRModelListAnchor = Nothing
    Set rngCRModels = Nothing
    Set rngEQModelList = Nothing
    Set rngEQModelListAnchor = Nothing
    Set rngEQModels = Nothing
    Exit Sub
errorHandler:
    Call VBA.MsgBox("Error in creating model table data", vbCritical + vbOKOnly, "Error")
    GoTo CleanUp
    End Sub

Private Sub ResizeButton_Click()
    On Error GoTo CleanUp
    Application.ScreenUpdating = False
    Dim temp1 As Variant: temp1 = Split(ComboBoxForeignModelNum.Text, " ")
    Dim temp2 As Variant: temp2 = Split(ComboBoxINFModelNum.Text, " ")
    Dim temp3 As Variant: temp3 = Split(ComboBoxCRModelNum.Text, " ")
    Dim temp4 As Variant: temp4 = Split(ComboBoxEQModelNum.Text, " ")
    If Not IsNumeric(temp1(0)) Or Not IsNumeric(temp2(0)) Or Not IsNumeric(temp3(0)) Or Not IsNumeric(temp4(0)) Then
        MsgBox "Fatal error when resizing ComboBox"
        GoTo CleanUp
    Else
        Resize CInt(temp1(0)), CInt(temp2(0)), CInt(temp3(0)), CInt(temp4(0))
    End If
    On Error GoTo 0
CleanUp:
    Application.ScreenUpdating = True
    ActiveSheet.Calculate
End Sub


Public Sub Resize(numForeignModel As Integer, numINFModel As Integer, numCRModel As Integer, numEQModel As Integer)
    On Error GoTo errorHandler
    Application.EnableEvents = False
    Application.ScreenUpdating = False
    
    Dim numFXModel%: numFXModel = numForeignModel
    Dim asn$: asn = ActiveSheet.Name
    Dim rngForeignModels As Range: Set rngForeignModels = Range("NX_" & asn & "_M_ForeignModels")
    Dim rngForeignModelList As Range: Set rngForeignModelList = Range("NX_" & asn & "_M_ForeignModelList")
    Dim rngForeignModelListAnchor As Range: Set rngForeignModelListAnchor = rngForeignModelList.Cells(1, 1).Offset(-1, 0)
    Dim rngFXModels As Range: Set rngFXModels = Range("NX_" & asn & "_M_FXModels")
    Dim rngFXModelList As Range: Set rngFXModelList = Range("NX_" & asn & "_M_FXModelList")
    Dim rngFXModelListAnchor As Range: Set rngFXModelListAnchor = rngFXModelList.Cells(1, 1).Offset(-1, 0)
    Dim rngINFModels As Range: Set rngINFModels = Range("NX_" & asn & "_M_INFModels")
    Dim rngINFModelList As Range: Set rngINFModelList = Range("NX_" & asn & "_M_INFModelList")
    Dim rngINFModelListAnchor As Range: Set rngINFModelListAnchor = rngINFModelList.Cells(1, 1).Offset(-1, 0)
    Dim rngCRModels As Range: Set rngCRModels = Range("NX_" & asn & "_M_CRModels")
    Dim rngCRModelList As Range: Set rngCRModelList = Range("NX_" & asn & "_M_CRModelList")
    Dim rngCRModelListAnchor As Range: Set rngCRModelListAnchor = rngCRModelList.Cells(1, 1).Offset(-1, 0)
    Dim rngEQModels As Range: Set rngEQModels = Range("NX_" & asn & "_M_EQModels")
    Dim rngEQModelList As Range: Set rngEQModelList = Range("NX_" & asn & "_M_EQModelList")
    Dim rngEQModelListAnchor As Range: Set rngEQModelListAnchor = rngEQModelList.Cells(1, 1).Offset(-1, 0)
    Dim rngIRModelFactorNum As Range: Set rngIRModelFactorNum = Range("NX_" & asn & "_M_IRModelFactorNum")
    Dim rngCorrAnchor As Range: Set rngCorrAnchor = Range("NX_" & asn & "_M_CorrAnchor")
    
    rngForeignModelList.Clear
    rngFXModelList.Clear
    rngINFModelList.Clear
    rngCRModelList.Clear
    rngEQModelList.Clear
    rngCorrAnchor.CurrentRegion.Clear
    rngForeignModels = "<LINK>"
    rngFXModels = "<LINK>"
    rngINFModels = "<LINK>"
    rngCRModels = "<LINK>"
    rngEQModels = "<LINK>"
    rngIRModelFactorNum.Value = 1
    
    'Resize the Foreign Model table
    Dim i%, j%
    For i = 1 To numForeignModel
        rngForeignModelListAnchor.Offset(i, 0) = "<LINK>"
        rngForeignModelListAnchor.Offset(i, 1) = 1
    Next i
    Range(rngForeignModelListAnchor.Offset(1, 0), rngForeignModelListAnchor.Offset(numForeignModel, 1)).Select
    ActiveWorkbook.Names.Add Name:="NX_" & asn & "_M_ForeignModelList", RefersTo:=Selection
    Set rngForeignModelList = Range("NX_" & asn & "_M_ForeignModelList")
    Call formatColorAndBorder(rngForeignModelList)
    Call addConditionalFormat(Range(rngForeignModelListAnchor.Offset(1, 0), rngForeignModelListAnchor.Offset(numForeignModel, 0)))
    Call addDataValidation(Range(rngForeignModelListAnchor.Offset(1, 1), rngForeignModelListAnchor.Offset(numForeignModel, 1)))
        
    'Resize the FX Model Table
    For i = 1 To numFXModel
        rngFXModelListAnchor.Offset(i, 0) = "<LINK>"
        rngFXModelListAnchor.Offset(i, 1) = 1
    Next i
    Range(rngFXModelListAnchor.Offset(1, 0), rngFXModelListAnchor.Offset(numFXModel, 1)).Select
    ActiveWorkbook.Names.Add Name:="NX_" & asn & "_M_FXModelList", RefersTo:=Selection
    Set rngFXModelList = Range("NX_" & asn & "_M_FXModelList")
    Call formatColorAndBorder(rngFXModelList)
    Call addConditionalFormat(Range(rngFXModelListAnchor.Offset(1, 0), rngFXModelListAnchor.Offset(numFXModel, 0)))
    Call addDataValidation(Range(rngFXModelListAnchor.Offset(1, 1), rngFXModelListAnchor.Offset(numFXModel, 1)))
          
    'Resize the Inflation Model Table
    For i = 1 To numINFModel
        rngINFModelListAnchor.Offset(i, 0) = "<LINK>"
        rngINFModelListAnchor.Offset(i, 1) = "<LINK>"
    Next i
    Range(rngINFModelListAnchor.Offset(1, 0), rngINFModelListAnchor.Offset(numINFModel, 1)).Select
    ActiveWorkbook.Names.Add Name:="NX_" & asn & "_M_INFModelList", RefersTo:=Selection
    Set rngINFModelList = Range("NX_" & asn & "_M_INFModelList")
    Call formatColorAndBorder(rngINFModelList)
    Call addConditionalFormat(Range(rngINFModelListAnchor.Offset(1, 0), rngINFModelListAnchor.Offset(numINFModel, 1)))
    
    'Resize the CR Model Table
    For i = 1 To numCRModel
        rngCRModelListAnchor.Offset(i, 0) = "<LINK>"
        rngCRModelListAnchor.Offset(i, 1) = ""
        rngCRModelListAnchor.Offset(i, 2) = 1
    Next i
    Range(rngCRModelListAnchor.Offset(1, 0), rngCRModelListAnchor.Offset(numCRModel, 2)).Select
    ActiveWorkbook.Names.Add Name:="NX_" & asn & "_M_CRModelList", RefersTo:=Selection
    Set rngCRModelList = Range("NX_" & asn & "_M_CRModelList")
    Call formatColorAndBorder(rngCRModelList)
    Call addConditionalFormat(Range(rngCRModelListAnchor.Offset(1, 0), rngCRModelListAnchor.Offset(numCRModel, 0)))
    Call addDataValidation(Range(rngCRModelListAnchor.Offset(1, 2), rngCRModelListAnchor.Offset(numCRModel, 2)))
    
    'Resize the EQ Model Table
    For i = 1 To numEQModel
        rngEQModelListAnchor.Offset(i, 0) = "<LINK>"
        rngEQModelListAnchor.Offset(i, 1) = "<LINK>"
        rngEQModelListAnchor.Offset(i, 2) = 1
    Next i
    Range(rngEQModelListAnchor.Offset(1, 0), rngEQModelListAnchor.Offset(numEQModel, 2)).Select
    ActiveWorkbook.Names.Add Name:="NX_" & asn & "_M_EQModelList", RefersTo:=Selection
    Set rngEQModelList = Range("NX_" & asn & "_M_EQModelList")
    Call formatColorAndBorder(rngEQModelList)
    Call addConditionalFormat(Range(rngEQModelListAnchor.Offset(1, 0), rngEQModelListAnchor.Offset(numEQModel, 1)))
    Call addDataValidation(Range(rngEQModelListAnchor.Offset(1, 2), rngEQModelListAnchor.Offset(numEQModel, 2)))
    
    rngCorrAnchor.Offset(0, 1) = "DomesticModelFactor1"
    rngCorrAnchor.Offset(1, 0) = "DomesticModelFactor1"
    
    For i = 1 To numFXModel
        rngCorrAnchor.Offset(0, i + 1) = "Foreign" & CStr(i) & "ModelFactor1"
        rngCorrAnchor.Offset(i + 1, 0) = "Foreign" & CStr(i) & "ModelFactor1"
    Next i
    
    For i = 1 To numForeignModel
        rngCorrAnchor.Offset(0, i + numFXModel + 1) = "FX" & CStr(i) & "ModelFactor1"
        rngCorrAnchor.Offset(i + numFXModel + 1, 0) = "FX" & CStr(i) & "ModelFactor1"
    Next i
    
    For i = 1 To numINFModel
        rngCorrAnchor.Offset(0, i + numFXModel + numForeignModel + 1) = "RealRate" & CStr(i) & "Model"
        rngCorrAnchor.Offset(i + numFXModel + numForeignModel + 1, 0) = "RealRate" & CStr(i) & "Model"
    Next i
    
    For i = 1 To numINFModel
        rngCorrAnchor.Offset(0, i + numFXModel + numForeignModel + numINFModel + 1) = "CPI" & CStr(i) & "Model"
        rngCorrAnchor.Offset(i + numFXModel + numForeignModel + numINFModel + 1, 0) = "CPI" & CStr(i) & "Model"
    Next i
    
    For i = 1 To numCRModel
        rngCorrAnchor.Offset(0, i + numFXModel + numForeignModel + 2 * numINFModel + 1) = "CR" & CStr(i) & "Factor1"
        rngCorrAnchor.Offset(i + numFXModel + numForeignModel + 2 * numINFModel + 1, 0) = "CR" & CStr(i) & "Factor1"
    Next i
    
    For i = 1 To numEQModel
        rngCorrAnchor.Offset(0, i + numFXModel + numForeignModel + 2 * numINFModel + numCRModel + 1) = _
                                        "=" & rngEQModelList.Cells(i, 1).Address & "&" & """" & "Factor1" & """"
        rngCorrAnchor.Offset(i + numFXModel + numForeignModel + 2 * numINFModel + numCRModel + 1, 0) = _
                                        "=" & rngEQModelList.Cells(i, 1).Address & "&" & """" & "Factor1" & """"
    Next i
    
    For i = 1 To numFXModel + numForeignModel + 2 * numINFModel + numCRModel + numEQModel + 1
        rngCorrAnchor.Offset(i, i) = 1
        For j = i + 1 To numFXModel + numForeignModel + 2 * numINFModel + numCRModel + numEQModel + 1
            rngCorrAnchor.Offset(i, j) = 0
        Next j
    Next i
    
    rngCorrAnchor.Formula = "=nxlibmatrix(" & Range(rngCorrAnchor.Offset(0, 1), rngCorrAnchor.Offset(0, numFXModel + numForeignModel + 2 * numINFModel + numCRModel + numEQModel + 1)).Address & "," _
                                            & Range(rngCorrAnchor.Offset(1, 0), rngCorrAnchor.Offset(numFXModel + numForeignModel + 2 * numINFModel + numCRModel + numEQModel + 1, 0)).Address & "," _
                                            & Range(rngCorrAnchor.Offset(1, 1), rngCorrAnchor.Offset(numFXModel + numForeignModel + 2 * numINFModel + numCRModel + numEQModel + 1, _
                                                                                                        numFXModel + numForeignModel + 2 * numINFModel + numCRModel + numEQModel + 1)).Address & "," _
                                            & """" & "CC_INFB_CRB_EQB_Corr.Data" & """" & ")"
                                            
    Call formatColorAndBorder(rngCorrAnchor)
    Call formatColorAndBorder(Range(rngCorrAnchor.Offset(1, 1), rngCorrAnchor.Offset(numFXModel + numForeignModel + 2 * numINFModel + numCRModel + numEQModel + 1, _
                                                                                        numFXModel + numForeignModel + 2 * numINFModel + numCRModel + numEQModel + 1)))
    Call formatHeader(Range(rngCorrAnchor.Offset(0, 1), rngCorrAnchor.Offset(0, numFXModel + numForeignModel + 2 * numINFModel + numCRModel + numEQModel + 1)))
    Call formatHeader(Range(rngCorrAnchor.Offset(1, 0), rngCorrAnchor.Offset(numFXModel + numForeignModel + 2 * numINFModel + numCRModel + numEQModel + 1, 0)))

CleanUp:
    Application.EnableEvents = True
    Application.ScreenUpdating = True
    Set rngForeignModels = Nothing
    Set rngForeignModelList = Nothing
    Set rngForeignModelListAnchor = Nothing
    Set rngFXModels = Nothing
    Set rngFXModelList = Nothing
    Set rngFXModelListAnchor = Nothing
    Set rngINFModels = Nothing
    Set rngINFModelList = Nothing
    Set rngINFModelListAnchor = Nothing
    Set rngCRModels = Nothing
    Set rngCRModelList = Nothing
    Set rngCRModelListAnchor = Nothing
    Set rngEQModels = Nothing
    Set rngEQModelList = Nothing
    Set rngEQModelListAnchor = Nothing
    Set rngCorrAnchor = Nothing
    Exit Sub
   
errorHandler:
    Call VBA.MsgBox("Error in resizing the model", vbCritical + vbOKOnly, "Error")
    GoTo CleanUp
    End Sub

Private Sub Worksheet_Activate()

    On Error GoTo CleanUp
    ComboBoxForeignModelNum.Clear
    ComboBoxForeignModelNum.AddItem ("1 Foreign Model")
    ComboBoxForeignModelNum.AddItem ("2 Foreign Models")
    ComboBoxForeignModelNum.AddItem ("4 Foreign Models")
    ComboBoxForeignModelNum.AddItem ("5 Foreign Models")
    ComboBoxForeignModelNum.AddItem ("6 Foreign Models")
    ComboBoxForeignModelNum.AddItem ("7 Foreign Models")
    ComboBoxForeignModelNum.AddItem ("8 Foreign Models")
    ComboBoxForeignModelNum.AddItem ("9 Foreign Models")
    ComboBoxForeignModelNum.AddItem ("10 Foreign Models")
    ComboBoxForeignModelNum.Text = "1 Foreign Model"
    
    ComboBoxINFModelNum.Clear
    ComboBoxINFModelNum.AddItem ("1 Inflation Model")
    ComboBoxINFModelNum.AddItem ("2 Inflation Models")
    ComboBoxINFModelNum.AddItem ("3 Inflation Models")
    ComboBoxINFModelNum.AddItem ("4 Inflation Models")
    ComboBoxINFModelNum.AddItem ("5 Inflation Models")
    ComboBoxINFModelNum.AddItem ("6 Inflation Models")
    ComboBoxINFModelNum.AddItem ("7 Inflation Models")
    ComboBoxINFModelNum.AddItem ("8 Inflation Models")
    ComboBoxINFModelNum.AddItem ("9 Inflation Models")
    ComboBoxINFModelNum.AddItem ("10 Inflation Models")
    ComboBoxINFModelNum.Text = "1 Inflation Model"
    
    ComboBoxCRModelNum.Clear
    ComboBoxCRModelNum.AddItem ("1 CR Model")
    ComboBoxCRModelNum.AddItem ("2 CR Models")
    ComboBoxCRModelNum.AddItem ("3 CR Models")
    ComboBoxCRModelNum.AddItem ("4 CR Models")
    ComboBoxCRModelNum.AddItem ("5 CR Models")
    ComboBoxCRModelNum.AddItem ("6 CR Models")
    ComboBoxCRModelNum.AddItem ("7 CR Models")
    ComboBoxCRModelNum.AddItem ("8 CR Models")
    ComboBoxCRModelNum.AddItem ("9 CR Models")
    ComboBoxCRModelNum.AddItem ("10 CR Models")
    ComboBoxCRModelNum.Text = "1 CR Model"
    
    ComboBoxEQModelNum.Clear
    ComboBoxEQModelNum.AddItem ("1 EQ Model")
    ComboBoxEQModelNum.AddItem ("2 EQ Models")
    ComboBoxEQModelNum.AddItem ("3 EQ Models")
    ComboBoxEQModelNum.AddItem ("4 EQ Models")
    ComboBoxEQModelNum.AddItem ("5 EQ Models")
    ComboBoxEQModelNum.AddItem ("6 EQ Models")
    ComboBoxEQModelNum.AddItem ("7 EQ Models")
    ComboBoxEQModelNum.AddItem ("8 EQ Models")
    ComboBoxEQModelNum.AddItem ("9 EQ Models")
    ComboBoxEQModelNum.AddItem ("10 EQ Models")
    ComboBoxEQModelNum.Text = "1 EQ Model"
    hasBeenInitialised = True

CleanUp:
    ActiveSheet.Calculate
End Sub


'Resizing the correlation matrix after changing the Factor number for any model
Private Sub Worksheet_Change(ByVal Target As Range)
    On Error GoTo errorHandler
    Application.EnableEvents = False
    Application.ScreenUpdating = False
    
    Dim asn$: asn = ActiveSheet.Name
    Dim rngForeignModelList As Range: Set rngForeignModelList = Range("NX_" & asn & "_M_ForeignModelList")
    Dim numForeignModels%: numForeignModels = rngForeignModelList.Rows.count
    Dim rngForeignModelFactorNumList As Range: Set rngForeignModelFactorNumList = Range(rngForeignModelList.Cells(1, 2), rngForeignModelList.Cells(numForeignModels, 2))
    Dim rngFXModelList As Range: Set rngFXModelList = Range("NX_" & asn & "_M_FXModelList")
    Dim numFXModels%: numFXModels = rngFXModelList.Rows.count
    Dim rngFXModelFactorNumList As Range: Set rngFXModelFactorNumList = Range(rngFXModelList.Cells(1, 2), rngFXModelList.Cells(numFXModels, 2))
    Dim rngINFModelList As Range: Set rngINFModelList = Range("NX_" & asn & "_M_INFModelList")
    Dim numINFModels%: numINFModels = rngINFModelList.Rows.count
    Dim rngCRModelList As Range: Set rngCRModelList = Range("NX_" & asn & "_M_CRModelList")
    Dim numCRModels%: numCRModels = rngCRModelList.Rows.count
    Dim rngCRModelFactorNumList As Range: Set rngCRModelFactorNumList = Range(rngCRModelList.Cells(1, 3), rngCRModelList.Cells(numCRModels, 3))
    Dim rngEQModelList As Range: Set rngEQModelList = Range("NX_" & asn & "_M_EQModelList")
    Dim numEQModels%: numEQModels = rngEQModelList.Rows.count
    Dim rngEQModelFactorNumList As Range: Set rngEQModelFactorNumList = Range(rngEQModelList.Cells(1, 3), rngEQModelList.Cells(numEQModels, 3))
    Dim rngIRModelFactorNum As Range: Set rngIRModelFactorNum = Range("NX_" & asn & "_M_IRMOdelFactorNum")
    
    If Intersect(Target, rngForeignModelFactorNumList) Is Nothing And Intersect(Target, rngFXModelFactorNumList) Is Nothing And _
        Intersect(Target, rngCRModelFactorNumList) Is Nothing And Intersect(Target, rngEQModelFactorNumList) Is Nothing And _
        Intersect(Target, rngIRModelFactorNum) Is Nothing Then
        GoTo CleanUp
    End If
    
    Dim rngCorrAnchor As Range: Set rngCorrAnchor = Range("NX_" & asn & "_M_CorrAnchor")
    rngCorrAnchor.CurrentRegion.Clear
    Dim iIRModelFactorNum%: iIRModelFactorNum = rngIRModelFactorNum.Value
    Dim iFXModelFactorNum%, iForeignModelFactorNum%, iCRModelFactorNum%, iEQModelFactorNum%
    Dim i%, j%
    Dim count%: count = 0
    For i = 1 To iIRModelFactorNum
        count = count + 1
        rngCorrAnchor.Offset(0, count) = "DomesticModelFactor" & CStr(i)
        rngCorrAnchor.Offset(count, 0) = "DomesticModelFactor" & CStr(i)
    Next i
    
    For i = 1 To numFXModels
        iFXModelFactorNum = rngFXModelList.Cells(i, 2).Value
        For j = 1 To iFXModelFactorNum
            count = count + 1
            rngCorrAnchor.Offset(0, count) = "FX" & CStr(i) & "ModelFactor" & CStr(j)
            rngCorrAnchor.Offset(count, 0) = "FX" & CStr(i) & "ModelFactor" & CStr(j)
        Next j
    Next i
    
    For i = 1 To numForeignModels
        iForeignModelFactorNum = rngForeignModelList.Cells(i, 2).Value
        For j = 1 To iForeignModelFactorNum
            count = count + 1
            rngCorrAnchor.Offset(0, count) = "Foreign" & CStr(i) & "ModelFactor" & CStr(j)
            rngCorrAnchor.Offset(count, 0) = "Foreign" & CStr(i) & "ModelFactor" & CStr(j)
        Next j
    Next i
    
    For i = 1 To numINFModels
        count = count + 1
        rngCorrAnchor.Offset(0, count) = "RealRate" & CStr(i) & "Model"
        rngCorrAnchor.Offset(count, 0) = "RealRate" & CStr(i) & "Model"
    Next i
    
    For i = 1 To numINFModels
        count = count + 1
        rngCorrAnchor.Offset(0, count) = "CPI" & CStr(i) & "Model"
        rngCorrAnchor.Offset(count, 0) = "CPI" & CStr(i) & "Model"
    Next i
    
    For i = 1 To numCRModels
        iCRModelFactorNum = rngCRModelList.Cells(i, 3).Value
        For j = 1 To iCRModelFactorNum
            count = count + 1
            rngCorrAnchor.Offset(0, count) = "CR" & CStr(i) & "Factor" & CStr(j)
            rngCorrAnchor.Offset(count, 0) = "CR" & CStr(i) & "Factor" & CStr(j)
        Next j
    Next i

    For i = 1 To numEQModels
        iEQModelFactorNum = rngEQModelList.Cells(i, 3).Value
        For j = 1 To iEQModelFactorNum
            count = count + 1
            rngCorrAnchor.Offset(0, count) = "=" & rngEQModelList.Cells(i, 1).Address & "&" & """" & "Factor" & CStr(j) & """"
            rngCorrAnchor.Offset(count, 0) = "=" & rngEQModelList.Cells(i, 1).Address & "&" & """" & "Factor" & CStr(j) & """"
        Next j
    Next i
    For i = 1 To count
        rngCorrAnchor.Offset(i, i) = 1
        For j = i + 1 To count
            rngCorrAnchor.Offset(i, j) = 0
        Next j
    Next i
    
    rngCorrAnchor.Formula = "=nxlibmatrix(" & Range(rngCorrAnchor.Offset(0, 1), rngCorrAnchor.Offset(0, count)).Address & "," _
                                            & Range(rngCorrAnchor.Offset(1, 0), rngCorrAnchor.Offset(count, 0)).Address & "," _
                                            & Range(rngCorrAnchor.Offset(1, 1), rngCorrAnchor.Offset(count, count)).Address & "," _
                                            & """" & "CC_INFB_CRB_EQB_Corr.Data" & """" & ")"
    
    
    Call formatColorAndBorder(rngCorrAnchor)
    Call formatColorAndBorder(Range(rngCorrAnchor.Offset(1, 1), rngCorrAnchor.Offset(count, count)))
    Call formatHeader(Range(rngCorrAnchor.Offset(0, 1), rngCorrAnchor.Offset(0, count)))
    Call formatHeader(Range(rngCorrAnchor.Offset(1, 0), rngCorrAnchor.Offset(count, 0)))
       
    Range(rngCorrAnchor.Offset(1, 1), rngCorrAnchor.Offset(count, count)).Select
    
CleanUp:
    Application.EnableEvents = True
    Application.ScreenUpdating = True
    Set rngForeignModelList = Nothing
    Set rngForeignModelFactorNumList = Nothing
    Set rngFXModelList = Nothing
    Set rngFXModelFactorNumList = Nothing
    Set rngINFModelList = Nothing
    Set rngCRModelList = Nothing
    Set rngCRModelFactorNumList = Nothing
    Set rngEQModelList = Nothing
    Set rngEQModelFactorNumList = Nothing
    Set rngIRModelFactorNum = Nothing
    Set rngCorrAnchor = Nothing
    Exit Sub

errorHandler:
    Call VBA.MsgBox("Error in resizing the corrlation matrix", vbCritical + vbOKOnly, "Error")
    GoTo CleanUp
End Sub





''' Formatting Module

Private Sub addConditionalFormat(tempRng As Range)
    tempRng.Select
    Selection.FormatConditions.Delete
    Selection.FormatConditions.Add Type:=xlCellValue, Operator:=xlEqual, _
        Formula1:="=""<LINK>"""
    Selection.FormatConditions(1).Interior.ColorIndex = 3
        
    Cells(1, 1).Select
End Sub

Private Sub formatHeader(tempRng As Range)
    tempRng.Select
    With Selection.Interior
        .Pattern = xlSolid
        .PatternColorIndex = xlAutomatic
        .Color = 10040115
    End With
    With Selection.Font
        .ColorIndex = 2
        .Name = "Calibri"
        .Size = 11
    End With
    Cells(1, 1).Select
End Sub

Private Sub formatColorAndBorder(tempRng As Range)
    tempRng.Select
    Selection.HorizontalAlignment = xlCenter
    Selection.Borders(xlDiagonalDown).LineStyle = xlNone
    Selection.Borders(xlDiagonalUp).LineStyle = xlNone
    With Selection.Borders(xlEdgeLeft)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlEdgeTop)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlEdgeRight)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .Weight = xlThin
    End With
    Selection.Borders(xlInsideVertical).LineStyle = xlNone
    Selection.Borders(xlInsideHorizontal).LineStyle = xlNone
    With Selection.Interior
        .Pattern = xlSolid
        .PatternColorIndex = xlAutomatic
        .ColorIndex = 2
    End With
    With Selection.Font
        .Name = "Calibri"
        .Size = 11
    End With
    Cells(1, 1).Select

End Sub

Private Sub addDataValidation(tempRng As Range)
    tempRng.Select
    With Selection.Validation
        .Delete
        .Add Type:=xlValidateWholeNumber, AlertStyle:=xlValidAlertStop, _
        Operator:=xlGreaterEqual, Formula1:="1"
        .IgnoreBlank = True
        .InCellDropdown = True
        .InputTitle = ""
        .ErrorTitle = "Incorrect Input"
        .InputMessage = ""
        .ErrorMessage = "Please input an integer"
        .ShowInput = True
        .ShowError = True
    End With
    Cells(1, 1).Select
End Sub

Attribute VB_Name = "Sheet33"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "ComboBoxForeignModelNum, 1, 0, MSForms, ComboBox"
Attribute VB_Control = "ResizeButton, 2, 1, MSForms, CommandButton"
Attribute VB_Control = "CreateButton, 3, 2, MSForms, CommandButton"
Attribute VB_Control = "ComboBoxINFModelNum, 4, 3, MSForms, ComboBox"
Attribute VB_Control = "ComboBoxCRModelNum, 5, 4, MSForms, ComboBox"
Attribute VB_Control = "ComboBoxCMDTYModelNum, 6, 5, MSForms, ComboBox"
Option Explicit
Private hasBeenInitialised As Boolean


Private Sub CreateButton_Click()
    On Error GoTo errorHandler
    Application.EnableEvents = False
    Dim asn$: asn = ActiveSheet.Name
    Dim rngForeignModelList As Range: Set rngForeignModelList = Range("NX_" & asn & "_M_ForeignModelList")
    Dim numForeignModels%: numForeignModels = rngForeignModelList.Rows.count
    Dim rngForeignModelListAnchor As Range: Set rngForeignModelListAnchor = rngForeignModelList.Cells(1, 1).Offset(-1, 0)
    Dim rngForeignModels As Range: Set rngForeignModels = Range("NX_" & asn & "_M_ForeignModels")
    rngForeignModels.Formula = "=nxlibdata(" & rngForeignModelListAnchor.Address & "," _
                                & Range(rngForeignModelListAnchor.Offset(1, 0), rngForeignModelListAnchor.Offset(numForeignModels, 0)).Address _
                                & "," & """" & "CC_INFB_CRB_CMDTYB_ForeignModel.Data" & """" & ")"
    
    Dim rngFXModelList As Range: Set rngFXModelList = Range("NX_" & asn & "_M_FXModelList")
    Dim numFXModels%: numFXModels = rngFXModelList.Rows.count
    Dim rngFXModelListAnchor As Range: Set rngFXModelListAnchor = rngFXModelList.Cells(1, 1).Offset(-1, 0)
    Dim rngFXModels As Range: Set rngFXModels = Range("NX_" & asn & "_M_FXModels")
    rngFXModels.Formula = "=nxlibdata(" & rngFXModelListAnchor.Address & "," _
                                    & Range(rngFXModelListAnchor.Offset(1, 0), rngFXModelListAnchor.Offset(numFXModels, 0)).Address _
                                    & "," & """" & "CC_INFB_CRB_CMDTYB_FXModel.Data" & """" & ")"
    
    Dim rngINFModelList As Range: Set rngINFModelList = Range("NX_" & asn & "_M_INFModelList")
    Dim numINFModels%: numINFModels = rngINFModelList.Rows.count
    Dim rngINFModelListAnchor As Range: Set rngINFModelListAnchor = rngINFModelList.Cells(1, 1).Offset(-1, 0)
    Dim rngINFModels As Range: Set rngINFModels = Range("NX_" & asn & "_M_INFModels")
    rngINFModels.Formula = "=nxlibdata(" & Range(rngINFModelListAnchor, rngINFModelListAnchor.Offset(0, 1)).Address & "," _
                                        & Range(rngINFModelListAnchor.Offset(1, 0), rngINFModelListAnchor.Offset(numINFModels, 1)).Address _
                                        & "," & """" & "CC_INFB_CRB_CMDTYB_INFModel.Data" & """" & ")"
    
    Dim rngCRModelList As Range: Set rngCRModelList = Range("NX_" & asn & "_M_CRModelList")
    Dim numCRModels%: numCRModels = rngCRModelList.Rows.count
    Dim rngCRModelListAnchor As Range: Set rngCRModelListAnchor = rngCRModelList.Cells(1, 1).Offset(-1, 0)
    Dim rngCRModels As Range: Set rngCRModels = Range("NX_" & asn & "_M_CRModels")
    rngCRModels.Formula = "=nxlibdata(" & Range(rngCRModelListAnchor, rngCRModelListAnchor.Offset(0, 1)).Address & "," _
                                        & Range(rngCRModelListAnchor.Offset(1, 0), rngCRModelListAnchor.Offset(numCRModels, 1)).Address _
                                        & "," & """" & "CC_INFB_CRB_CMDTYB_CRModel.Data" & """" & ")"

    Dim rngCMDTYModelList As Range: Set rngCMDTYModelList = Range("NX_" & asn & "_M_CMDTYModelList")
    Dim numCMDTYModels%: numCMDTYModels = rngCMDTYModelList.Rows.count
    Dim rngCMDTYModelListAnchor As Range: Set rngCMDTYModelListAnchor = rngCMDTYModelList.Cells(1, 1).Offset(-1, 0)
    Dim rngCMDTYModels As Range: Set rngCMDTYModels = Range("NX_" & asn & "_M_CMDTYModels")
    rngCMDTYModels.Formula = "=nxlibdata(" & Range(rngCMDTYModelListAnchor, rngCMDTYModelListAnchor.Offset(0, 1)).Address & "," _
                                        & Range(rngCMDTYModelListAnchor.Offset(1, 0), rngCMDTYModelListAnchor.Offset(numCMDTYModels, 1)).Address _
                                        & "," & """" & "CC_INFB_CRB_CMDTYB_CMDTYModel.Data" & """" & ")"
    
    ActiveSheet.Calculate
    
CleanUp:
    Application.EnableEvents = True
    Set rngForeignModelList = Nothing
    Set rngForeignModelListAnchor = Nothing
    Set rngForeignModels = Nothing
    Set rngFXModelList = Nothing
    Set rngFXModelListAnchor = Nothing
    Set rngFXModels = Nothing
    Set rngINFModelList = Nothing
    Set rngINFModelListAnchor = Nothing
    Set rngINFModels = Nothing
    Set rngCRModelList = Nothing
    Set rngCRModelListAnchor = Nothing
    Set rngCRModels = Nothing
    Set rngCMDTYModelList = Nothing
    Set rngCMDTYModelListAnchor = Nothing
    Set rngCMDTYModels = Nothing
    Exit Sub
errorHandler:
    Call VBA.MsgBox("Error in creating model table data", vbCritical + vbOKOnly, "Error")
    GoTo CleanUp
    End Sub

Private Sub ResizeButton_Click()
    On Error GoTo CleanUp
    Application.ScreenUpdating = False
    Dim temp1 As Variant: temp1 = Split(ComboBoxForeignModelNum.Text, " ")
    Dim temp2 As Variant: temp2 = Split(ComboBoxINFModelNum.Text, " ")
    Dim temp3 As Variant: temp3 = Split(ComboBoxCRModelNum.Text, " ")
    Dim temp4 As Variant: temp4 = Split(ComboBoxCMDTYModelNum.Text, " ")
    If Not IsNumeric(temp1(0)) Or Not IsNumeric(temp2(0)) Or Not IsNumeric(temp3(0)) Or Not IsNumeric(temp4(0)) Then
        MsgBox "Fatal error when resizing ComboBox"
        GoTo CleanUp
    Else
        Resize CInt(temp1(0)), CInt(temp2(0)), CInt(temp3(0)), CInt(temp4(0))
    End If
    On Error GoTo 0
CleanUp:
    Application.ScreenUpdating = True
    ActiveSheet.Calculate
End Sub


Public Sub Resize(numForeignModel As Integer, numINFModel As Integer, numCRModel As Integer, numCMDTYModel As Integer)
    On Error GoTo errorHandler
    Application.EnableEvents = False
    Application.ScreenUpdating = False
    
    Dim numFXModel%: numFXModel = numForeignModel
    Dim asn$: asn = ActiveSheet.Name
    Dim rngForeignModels As Range: Set rngForeignModels = Range("NX_" & asn & "_M_ForeignModels")
    Dim rngForeignModelList As Range: Set rngForeignModelList = Range("NX_" & asn & "_M_ForeignModelList")
    Dim rngForeignModelListAnchor As Range: Set rngForeignModelListAnchor = rngForeignModelList.Cells(1, 1).Offset(-1, 0)
    Dim rngFXModels As Range: Set rngFXModels = Range("NX_" & asn & "_M_FXModels")
    Dim rngFXModelList As Range: Set rngFXModelList = Range("NX_" & asn & "_M_FXModelList")
    Dim rngFXModelListAnchor As Range: Set rngFXModelListAnchor = rngFXModelList.Cells(1, 1).Offset(-1, 0)
    Dim rngINFModels As Range: Set rngINFModels = Range("NX_" & asn & "_M_INFModels")
    Dim rngINFModelList As Range: Set rngINFModelList = Range("NX_" & asn & "_M_INFModelList")
    Dim rngINFModelListAnchor As Range: Set rngINFModelListAnchor = rngINFModelList.Cells(1, 1).Offset(-1, 0)
    Dim rngCRModels As Range: Set rngCRModels = Range("NX_" & asn & "_M_CRModels")
    Dim rngCRModelList As Range: Set rngCRModelList = Range("NX_" & asn & "_M_CRModelList")
    Dim rngCRModelListAnchor As Range: Set rngCRModelListAnchor = rngCRModelList.Cells(1, 1).Offset(-1, 0)
    Dim rngCMDTYModels As Range: Set rngCMDTYModels = Range("NX_" & asn & "_M_CMDTYModels")
    Dim rngCMDTYModelList As Range: Set rngCMDTYModelList = Range("NX_" & asn & "_M_CMDTYModelList")
    Dim rngCMDTYModelListAnchor As Range: Set rngCMDTYModelListAnchor = rngCMDTYModelList.Cells(1, 1).Offset(-1, 0)
    Dim rngIRModelFactorNum As Range: Set rngIRModelFactorNum = Range("NX_" & asn & "_M_IRModelFactorNum")
    Dim rngCorrAnchor As Range: Set rngCorrAnchor = Range("NX_" & asn & "_M_CorrAnchor")
    
    rngForeignModelList.Clear
    rngFXModelList.Clear
    rngINFModelList.Clear
    rngCRModelList.Clear
    rngCMDTYModelList.Clear
    rngCorrAnchor.CurrentRegion.Clear
    rngForeignModels = "<LINK>"
    rngFXModels = "<LINK>"
    rngINFModels = "<LINK>"
    rngCRModels = "<LINK>"
    rngCMDTYModels = "<LINK>"
    rngIRModelFactorNum.Value = 1
    
    'Resize the Foreign Model table
    Dim i%, j%
    For i = 1 To numForeignModel
        rngForeignModelListAnchor.Offset(i, 0) = "<LINK>"
        rngForeignModelListAnchor.Offset(i, 1) = 1
    Next i
    Range(rngForeignModelListAnchor.Offset(1, 0), rngForeignModelListAnchor.Offset(numForeignModel, 1)).Select
    ActiveWorkbook.Names.Add Name:="NX_" & asn & "_M_ForeignModelList", RefersTo:=Selection
    Set rngForeignModelList = Range("NX_" & asn & "_M_ForeignModelList")
    Call formatColorAndBorder(rngForeignModelList)
    Call addConditionalFormat(Range(rngForeignModelListAnchor.Offset(1, 0), rngForeignModelListAnchor.Offset(numForeignModel, 0)))
    Call addDataValidation(Range(rngForeignModelListAnchor.Offset(1, 1), rngForeignModelListAnchor.Offset(numForeignModel, 1)))
        
    'Resize the FX Model Table
    For i = 1 To numFXModel
        rngFXModelListAnchor.Offset(i, 0) = "<LINK>"
        rngFXModelListAnchor.Offset(i, 1) = 1
    Next i
    Range(rngFXModelListAnchor.Offset(1, 0), rngFXModelListAnchor.Offset(numFXModel, 1)).Select
    ActiveWorkbook.Names.Add Name:="NX_" & asn & "_M_FXModelList", RefersTo:=Selection
    Set rngFXModelList = Range("NX_" & asn & "_M_FXModelList")
    Call formatColorAndBorder(rngFXModelList)
    Call addConditionalFormat(Range(rngFXModelListAnchor.Offset(1, 0), rngFXModelListAnchor.Offset(numFXModel, 0)))
    Call addDataValidation(Range(rngFXModelListAnchor.Offset(1, 1), rngFXModelListAnchor.Offset(numFXModel, 1)))
          
    'Resize the Inflation Model Table
    For i = 1 To numINFModel
        rngINFModelListAnchor.Offset(i, 0) = "<LINK>"
        rngINFModelListAnchor.Offset(i, 1) = "<LINK>"
    Next i
    Range(rngINFModelListAnchor.Offset(1, 0), rngINFModelListAnchor.Offset(numINFModel, 1)).Select
    ActiveWorkbook.Names.Add Name:="NX_" & asn & "_M_INFModelList", RefersTo:=Selection
    Set rngINFModelList = Range("NX_" & asn & "_M_INFModelList")
    Call formatColorAndBorder(rngINFModelList)
    Call addConditionalFormat(Range(rngINFModelListAnchor.Offset(1, 0), rngINFModelListAnchor.Offset(numINFModel, 1)))
    
    'Resize the CR Model Table
    For i = 1 To numCRModel
        rngCRModelListAnchor.Offset(i, 0) = "<LINK>"
        rngCRModelListAnchor.Offset(i, 1) = ""
        rngCRModelListAnchor.Offset(i, 2) = 1
    Next i
    Range(rngCRModelListAnchor.Offset(1, 0), rngCRModelListAnchor.Offset(numCRModel, 2)).Select
    ActiveWorkbook.Names.Add Name:="NX_" & asn & "_M_CRModelList", RefersTo:=Selection
    Set rngCRModelList = Range("NX_" & asn & "_M_CRModelList")
    Call formatColorAndBorder(rngCRModelList)
    Call addConditionalFormat(Range(rngCRModelListAnchor.Offset(1, 0), rngCRModelListAnchor.Offset(numCRModel, 0)))
    Call addDataValidation(Range(rngCRModelListAnchor.Offset(1, 2), rngCRModelListAnchor.Offset(numCRModel, 2)))
    
    'Resize the CMDTY Model Table
    For i = 1 To numCMDTYModel
        rngCMDTYModelListAnchor.Offset(i, 0) = "<LINK>"
        rngCMDTYModelListAnchor.Offset(i, 1) = "<LINK>"
        rngCMDTYModelListAnchor.Offset(i, 2) = 1
    Next i
    Range(rngCMDTYModelListAnchor.Offset(1, 0), rngCMDTYModelListAnchor.Offset(numCMDTYModel, 2)).Select
    ActiveWorkbook.Names.Add Name:="NX_" & asn & "_M_CMDTYModelList", RefersTo:=Selection
    Set rngCMDTYModelList = Range("NX_" & asn & "_M_CMDTYModelList")
    Call formatColorAndBorder(rngCMDTYModelList)
    Call addConditionalFormat(Range(rngCMDTYModelListAnchor.Offset(1, 0), rngCMDTYModelListAnchor.Offset(numCMDTYModel, 1)))
    Call addDataValidation(Range(rngCMDTYModelListAnchor.Offset(1, 2), rngCMDTYModelListAnchor.Offset(numCMDTYModel, 2)))
    
    rngCorrAnchor.Offset(0, 1) = "DomesticModelFactor1"
    rngCorrAnchor.Offset(1, 0) = "DomesticModelFactor1"
    
    For i = 1 To numFXModel
        rngCorrAnchor.Offset(0, i + 1) = "Foreign" & CStr(i) & "ModelFactor1"
        rngCorrAnchor.Offset(i + 1, 0) = "Foreign" & CStr(i) & "ModelFactor1"
    Next i
    
    For i = 1 To numForeignModel
        rngCorrAnchor.Offset(0, i + numFXModel + 1) = "FX" & CStr(i) & "ModelFactor1"
        rngCorrAnchor.Offset(i + numFXModel + 1, 0) = "FX" & CStr(i) & "ModelFactor1"
    Next i
    
    For i = 1 To numINFModel
        rngCorrAnchor.Offset(0, i + numFXModel + numForeignModel + 1) = "RealRate" & CStr(i) & "Model"
        rngCorrAnchor.Offset(i + numFXModel + numForeignModel + 1, 0) = "RealRate" & CStr(i) & "Model"
    Next i
    
    For i = 1 To numINFModel
        rngCorrAnchor.Offset(0, i + numFXModel + numForeignModel + numINFModel + 1) = "CPI" & CStr(i) & "Model"
        rngCorrAnchor.Offset(i + numFXModel + numForeignModel + numINFModel + 1, 0) = "CPI" & CStr(i) & "Model"
    Next i
    
    For i = 1 To numCRModel
        rngCorrAnchor.Offset(0, i + numFXModel + numForeignModel + 2 * numINFModel + 1) = "CR" & CStr(i) & "Factor1"
        rngCorrAnchor.Offset(i + numFXModel + numForeignModel + 2 * numINFModel + 1, 0) = "CR" & CStr(i) & "Factor1"
    Next i
    
    For i = 1 To numCMDTYModel
        rngCorrAnchor.Offset(0, i + numFXModel + numForeignModel + 2 * numINFModel + numCRModel + 1) = _
                                        "=" & rngCMDTYModelList.Cells(i, 1).Address & "&" & """" & "Factor1" & """"
        rngCorrAnchor.Offset(i + numFXModel + numForeignModel + 2 * numINFModel + numCRModel + 1, 0) = _
                                        "=" & rngCMDTYModelList.Cells(i, 1).Address & "&" & """" & "Factor1" & """"
    Next i
    
    For i = 1 To numFXModel + numForeignModel + 2 * numINFModel + numCRModel + numCMDTYModel + 1
        rngCorrAnchor.Offset(i, i) = 1
        For j = i + 1 To numFXModel + numForeignModel + 2 * numINFModel + numCRModel + numCMDTYModel + 1
            rngCorrAnchor.Offset(i, j) = 0
        Next j
    Next i
    
    rngCorrAnchor.Formula = "=nxlibmatrix(" & Range(rngCorrAnchor.Offset(0, 1), rngCorrAnchor.Offset(0, numFXModel + numForeignModel + 2 * numINFModel + numCRModel + numCMDTYModel + 1)).Address & "," _
                                            & Range(rngCorrAnchor.Offset(1, 0), rngCorrAnchor.Offset(numFXModel + numForeignModel + 2 * numINFModel + numCRModel + numCMDTYModel + 1, 0)).Address & "," _
                                            & Range(rngCorrAnchor.Offset(1, 1), rngCorrAnchor.Offset(numFXModel + numForeignModel + 2 * numINFModel + numCRModel + numCMDTYModel + 1, _
                                                                                                        numFXModel + numForeignModel + 2 * numINFModel + numCRModel + numCMDTYModel + 1)).Address & "," _
                                            & """" & "CC_INFB_CRB_CMDTYB_Corr.Data" & """" & ")"
                                            
    Call formatColorAndBorder(rngCorrAnchor)
    Call formatColorAndBorder(Range(rngCorrAnchor.Offset(1, 1), rngCorrAnchor.Offset(numFXModel + numForeignModel + 2 * numINFModel + numCRModel + numCMDTYModel + 1, _
                                                                                        numFXModel + numForeignModel + 2 * numINFModel + numCRModel + numCMDTYModel + 1)))
    Call formatHeader(Range(rngCorrAnchor.Offset(0, 1), rngCorrAnchor.Offset(0, numFXModel + numForeignModel + 2 * numINFModel + numCRModel + numCMDTYModel + 1)))
    Call formatHeader(Range(rngCorrAnchor.Offset(1, 0), rngCorrAnchor.Offset(numFXModel + numForeignModel + 2 * numINFModel + numCRModel + numCMDTYModel + 1, 0)))

CleanUp:
    Application.EnableEvents = True
    Application.ScreenUpdating = True
    Set rngForeignModels = Nothing
    Set rngForeignModelList = Nothing
    Set rngForeignModelListAnchor = Nothing
    Set rngFXModels = Nothing
    Set rngFXModelList = Nothing
    Set rngFXModelListAnchor = Nothing
    Set rngINFModels = Nothing
    Set rngINFModelList = Nothing
    Set rngINFModelListAnchor = Nothing
    Set rngCRModels = Nothing
    Set rngCRModelList = Nothing
    Set rngCRModelListAnchor = Nothing
    Set rngCMDTYModels = Nothing
    Set rngCMDTYModelList = Nothing
    Set rngCMDTYModelListAnchor = Nothing
    Set rngCorrAnchor = Nothing
    Exit Sub
   
errorHandler:
    Call VBA.MsgBox("Error in resizing the model", vbCritical + vbOKOnly, "Error")
    GoTo CleanUp
    End Sub

Private Sub Worksheet_Activate()

    On Error GoTo CleanUp
    ComboBoxForeignModelNum.Clear
    ComboBoxForeignModelNum.AddItem ("1 Foreign Model")
    ComboBoxForeignModelNum.AddItem ("2 Foreign Models")
    ComboBoxForeignModelNum.AddItem ("4 Foreign Models")
    ComboBoxForeignModelNum.AddItem ("5 Foreign Models")
    ComboBoxForeignModelNum.AddItem ("6 Foreign Models")
    ComboBoxForeignModelNum.AddItem ("7 Foreign Models")
    ComboBoxForeignModelNum.AddItem ("8 Foreign Models")
    ComboBoxForeignModelNum.AddItem ("9 Foreign Models")
    ComboBoxForeignModelNum.AddItem ("10 Foreign Models")
    ComboBoxForeignModelNum.Text = "1 Foreign Model"
    
    ComboBoxINFModelNum.Clear
    ComboBoxINFModelNum.AddItem ("1 Inflation Model")
    ComboBoxINFModelNum.AddItem ("2 Inflation Models")
    ComboBoxINFModelNum.AddItem ("3 Inflation Models")
    ComboBoxINFModelNum.AddItem ("4 Inflation Models")
    ComboBoxINFModelNum.AddItem ("5 Inflation Models")
    ComboBoxINFModelNum.AddItem ("6 Inflation Models")
    ComboBoxINFModelNum.AddItem ("7 Inflation Models")
    ComboBoxINFModelNum.AddItem ("8 Inflation Models")
    ComboBoxINFModelNum.AddItem ("9 Inflation Models")
    ComboBoxINFModelNum.AddItem ("10 Inflation Models")
    ComboBoxINFModelNum.Text = "1 Inflation Model"
    
    ComboBoxCRModelNum.Clear
    ComboBoxCRModelNum.AddItem ("1 CR Model")
    ComboBoxCRModelNum.AddItem ("2 CR Models")
    ComboBoxCRModelNum.AddItem ("3 CR Models")
    ComboBoxCRModelNum.AddItem ("4 CR Models")
    ComboBoxCRModelNum.AddItem ("5 CR Models")
    ComboBoxCRModelNum.AddItem ("6 CR Models")
    ComboBoxCRModelNum.AddItem ("7 CR Models")
    ComboBoxCRModelNum.AddItem ("8 CR Models")
    ComboBoxCRModelNum.AddItem ("9 CR Models")
    ComboBoxCRModelNum.AddItem ("10 CR Models")
    ComboBoxCRModelNum.Text = "1 CR Model"
    
    ComboBoxCMDTYModelNum.Clear
    ComboBoxCMDTYModelNum.AddItem ("1 CMDTY Model")
    ComboBoxCMDTYModelNum.AddItem ("2 CMDTY Models")
    ComboBoxCMDTYModelNum.AddItem ("3 CMDTY Models")
    ComboBoxCMDTYModelNum.AddItem ("4 CMDTY Models")
    ComboBoxCMDTYModelNum.AddItem ("5 CMDTY Models")
    ComboBoxCMDTYModelNum.AddItem ("6 CMDTY Models")
    ComboBoxCMDTYModelNum.AddItem ("7 CMDTY Models")
    ComboBoxCMDTYModelNum.AddItem ("8 CMDTY Models")
    ComboBoxCMDTYModelNum.AddItem ("9 CMDTY Models")
    ComboBoxCMDTYModelNum.AddItem ("10 CMDTY Models")
    ComboBoxCMDTYModelNum.Text = "1 CMDTY Model"
    hasBeenInitialised = True

CleanUp:
    ActiveSheet.Calculate
End Sub


'Resizing the correlation matrix after changing the Factor number for any model
Private Sub Worksheet_Change(ByVal Target As Range)
    On Error GoTo errorHandler
    Application.EnableEvents = False
    Application.ScreenUpdating = False
    
    Dim asn$: asn = ActiveSheet.Name
    Dim rngForeignModelList As Range: Set rngForeignModelList = Range("NX_" & asn & "_M_ForeignModelList")
    Dim numForeignModels%: numForeignModels = rngForeignModelList.Rows.count
    Dim rngForeignModelFactorNumList As Range: Set rngForeignModelFactorNumList = Range(rngForeignModelList.Cells(1, 2), rngForeignModelList.Cells(numForeignModels, 2))
    Dim rngFXModelList As Range: Set rngFXModelList = Range("NX_" & asn & "_M_FXModelList")
    Dim numFXModels%: numFXModels = rngFXModelList.Rows.count
    Dim rngFXModelFactorNumList As Range: Set rngFXModelFactorNumList = Range(rngFXModelList.Cells(1, 2), rngFXModelList.Cells(numFXModels, 2))
    Dim rngINFModelList As Range: Set rngINFModelList = Range("NX_" & asn & "_M_INFModelList")
    Dim numINFModels%: numINFModels = rngINFModelList.Rows.count
    Dim rngCRModelList As Range: Set rngCRModelList = Range("NX_" & asn & "_M_CRModelList")
    Dim numCRModels%: numCRModels = rngCRModelList.Rows.count
    Dim rngCRModelFactorNumList As Range: Set rngCRModelFactorNumList = Range(rngCRModelList.Cells(1, 3), rngCRModelList.Cells(numCRModels, 3))
    Dim rngCMDTYModelList As Range: Set rngCMDTYModelList = Range("NX_" & asn & "_M_CMDTYModelList")
    Dim numCMDTYModels%: numCMDTYModels = rngCMDTYModelList.Rows.count
    Dim rngCMDTYModelFactorNumList As Range: Set rngCMDTYModelFactorNumList = Range(rngCMDTYModelList.Cells(1, 3), rngCMDTYModelList.Cells(numCMDTYModels, 3))
    Dim rngIRModelFactorNum As Range: Set rngIRModelFactorNum = Range("NX_" & asn & "_M_IRMOdelFactorNum")
    
    If Intersect(Target, rngForeignModelFactorNumList) Is Nothing And Intersect(Target, rngFXModelFactorNumList) Is Nothing And _
        Intersect(Target, rngCRModelFactorNumList) Is Nothing And Intersect(Target, rngCMDTYModelFactorNumList) Is Nothing And _
        Intersect(Target, rngIRModelFactorNum) Is Nothing Then
        GoTo CleanUp
    End If
    
    Dim rngCorrAnchor As Range: Set rngCorrAnchor = Range("NX_" & asn & "_M_CorrAnchor")
    rngCorrAnchor.CurrentRegion.Clear
    Dim iIRModelFactorNum%: iIRModelFactorNum = rngIRModelFactorNum.Value
    Dim iFXModelFactorNum%, iForeignModelFactorNum%, iCRModelFactorNum%, iCMDTYModelFactorNum%
    Dim i%, j%
    Dim count%: count = 0
    For i = 1 To iIRModelFactorNum
        count = count + 1
        rngCorrAnchor.Offset(0, count) = "DomesticModelFactor" & CStr(i)
        rngCorrAnchor.Offset(count, 0) = "DomesticModelFactor" & CStr(i)
    Next i
    
    For i = 1 To numFXModels
        iFXModelFactorNum = rngFXModelList.Cells(i, 2).Value
        For j = 1 To iFXModelFactorNum
            count = count + 1
            rngCorrAnchor.Offset(0, count) = "FX" & CStr(i) & "ModelFactor" & CStr(j)
            rngCorrAnchor.Offset(count, 0) = "FX" & CStr(i) & "ModelFactor" & CStr(j)
        Next j
    Next i
    
    For i = 1 To numForeignModels
        iForeignModelFactorNum = rngForeignModelList.Cells(i, 2).Value
        For j = 1 To iForeignModelFactorNum
            count = count + 1
            rngCorrAnchor.Offset(0, count) = "Foreign" & CStr(i) & "ModelFactor" & CStr(j)
            rngCorrAnchor.Offset(count, 0) = "Foreign" & CStr(i) & "ModelFactor" & CStr(j)
        Next j
    Next i
    
    For i = 1 To numINFModels
        count = count + 1
        rngCorrAnchor.Offset(0, count) = "RealRate" & CStr(i) & "Model"
        rngCorrAnchor.Offset(count, 0) = "RealRate" & CStr(i) & "Model"
    Next i
    
    For i = 1 To numINFModels
        count = count + 1
        rngCorrAnchor.Offset(0, count) = "CPI" & CStr(i) & "Model"
        rngCorrAnchor.Offset(count, 0) = "CPI" & CStr(i) & "Model"
    Next i
    
    For i = 1 To numCRModels
        iCRModelFactorNum = rngCRModelList.Cells(i, 3).Value
        For j = 1 To iCRModelFactorNum
            count = count + 1
            rngCorrAnchor.Offset(0, count) = "CR" & CStr(i) & "Factor" & CStr(j)
            rngCorrAnchor.Offset(count, 0) = "CR" & CStr(i) & "Factor" & CStr(j)
        Next j
    Next i

    For i = 1 To numCMDTYModels
        iCMDTYModelFactorNum = rngCMDTYModelList.Cells(i, 3).Value
        For j = 1 To iCMDTYModelFactorNum
            count = count + 1
            rngCorrAnchor.Offset(0, count) = "=" & rngCMDTYModelList.Cells(i, 1).Address & "&" & """" & "Factor" & CStr(j) & """"
            rngCorrAnchor.Offset(count, 0) = "=" & rngCMDTYModelList.Cells(i, 1).Address & "&" & """" & "Factor" & CStr(j) & """"
        Next j
    Next i
    For i = 1 To count
        rngCorrAnchor.Offset(i, i) = 1
        For j = i + 1 To count
            rngCorrAnchor.Offset(i, j) = 0
        Next j
    Next i
    
    rngCorrAnchor.Formula = "=nxlibmatrix(" & Range(rngCorrAnchor.Offset(0, 1), rngCorrAnchor.Offset(0, count)).Address & "," _
                                            & Range(rngCorrAnchor.Offset(1, 0), rngCorrAnchor.Offset(count, 0)).Address & "," _
                                            & Range(rngCorrAnchor.Offset(1, 1), rngCorrAnchor.Offset(count, count)).Address & "," _
                                            & """" & "CC_INFB_CRB_CMDTYB_Corr.Data" & """" & ")"
    
    
    Call formatColorAndBorder(rngCorrAnchor)
    Call formatColorAndBorder(Range(rngCorrAnchor.Offset(1, 1), rngCorrAnchor.Offset(count, count)))
    Call formatHeader(Range(rngCorrAnchor.Offset(0, 1), rngCorrAnchor.Offset(0, count)))
    Call formatHeader(Range(rngCorrAnchor.Offset(1, 0), rngCorrAnchor.Offset(count, 0)))
       
    Range(rngCorrAnchor.Offset(1, 1), rngCorrAnchor.Offset(count, count)).Select
    
CleanUp:
    Application.EnableEvents = True
    Application.ScreenUpdating = True
    Set rngForeignModelList = Nothing
    Set rngForeignModelFactorNumList = Nothing
    Set rngFXModelList = Nothing
    Set rngFXModelFactorNumList = Nothing
    Set rngINFModelList = Nothing
    Set rngCRModelList = Nothing
    Set rngCRModelFactorNumList = Nothing
    Set rngCMDTYModelList = Nothing
    Set rngCMDTYModelFactorNumList = Nothing
    Set rngIRModelFactorNum = Nothing
    Set rngCorrAnchor = Nothing
    Exit Sub

errorHandler:
    Call VBA.MsgBox("Error in resizing the corrlation matrix", vbCritical + vbOKOnly, "Error")
    GoTo CleanUp
End Sub





''' Formatting Module

Private Sub addConditionalFormat(tempRng As Range)
    tempRng.Select
    Selection.FormatConditions.Delete
    Selection.FormatConditions.Add Type:=xlCellValue, Operator:=xlEqual, _
        Formula1:="=""<LINK>"""
    Selection.FormatConditions(1).Interior.ColorIndex = 3
        
    Cells(1, 1).Select
End Sub

Private Sub formatHeader(tempRng As Range)
    tempRng.Select
    With Selection.Interior
        .Pattern = xlSolid
        .PatternColorIndex = xlAutomatic
        .Color = 10040115
    End With
    With Selection.Font
        .ColorIndex = 2
        .Name = "Calibri"
        .Size = 11
    End With
    Cells(1, 1).Select
End Sub

Private Sub formatColorAndBorder(tempRng As Range)
    tempRng.Select
    Selection.HorizontalAlignment = xlCenter
    Selection.Borders(xlDiagonalDown).LineStyle = xlNone
    Selection.Borders(xlDiagonalUp).LineStyle = xlNone
    With Selection.Borders(xlEdgeLeft)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlEdgeTop)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlEdgeRight)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .Weight = xlThin
    End With
    Selection.Borders(xlInsideVertical).LineStyle = xlNone
    Selection.Borders(xlInsideHorizontal).LineStyle = xlNone
    With Selection.Interior
        .Pattern = xlSolid
        .PatternColorIndex = xlAutomatic
        .ColorIndex = 2
    End With
    With Selection.Font
        .Name = "Calibri"
        .Size = 11
    End With
    Cells(1, 1).Select

End Sub

Private Sub addDataValidation(tempRng As Range)
    tempRng.Select
    With Selection.Validation
        .Delete
        .Add Type:=xlValidateWholeNumber, AlertStyle:=xlValidAlertStop, _
        Operator:=xlGreaterEqual, Formula1:="1"
        .IgnoreBlank = True
        .InCellDropdown = True
        .InputTitle = ""
        .ErrorTitle = "Incorrect Input"
        .InputMessage = ""
        .ErrorMessage = "Please input an integer"
        .ShowInput = True
        .ShowError = True
    End With
    Cells(1, 1).Select
End Sub

Attribute VB_Name = "Sheet34"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "ComboBoxForeignModelNum, 1, 0, MSForms, ComboBox"
Attribute VB_Control = "ResizeButton, 2, 1, MSForms, CommandButton"
Attribute VB_Control = "CreateButton, 3, 2, MSForms, CommandButton"
Attribute VB_Control = "ComboBoxINFModelNum, 4, 3, MSForms, ComboBox"
Attribute VB_Control = "ComboBoxEQModelNum, 5, 4, MSForms, ComboBox"
Attribute VB_Control = "ComboBoxCMDTYModelNum, 6, 5, MSForms, ComboBox"
Option Explicit
Private hasBeenInitialised As Boolean


Private Sub CreateButton_Click()
    On Error GoTo errorHandler
    Application.EnableEvents = False
    Dim asn$: asn = ActiveSheet.Name
    Dim rngForeignModelList As Range: Set rngForeignModelList = Range("NX_" & asn & "_M_ForeignModelList")
    Dim numForeignModels%: numForeignModels = rngForeignModelList.Rows.count
    Dim rngForeignModelListAnchor As Range: Set rngForeignModelListAnchor = rngForeignModelList.Cells(1, 1).Offset(-1, 0)
    Dim rngForeignModels As Range: Set rngForeignModels = Range("NX_" & asn & "_M_ForeignModels")
    rngForeignModels.Formula = "=nxlibdata(" & rngForeignModelListAnchor.Address & "," _
                                & Range(rngForeignModelListAnchor.Offset(1, 0), rngForeignModelListAnchor.Offset(numForeignModels, 0)).Address _
                                & "," & """" & "CC_INFB_EQB_CMDTYB_ForeignModel.Data" & """" & ")"
    
    Dim rngFXModelList As Range: Set rngFXModelList = Range("NX_" & asn & "_M_FXModelList")
    Dim numFXModels%: numFXModels = rngFXModelList.Rows.count
    Dim rngFXModelListAnchor As Range: Set rngFXModelListAnchor = rngFXModelList.Cells(1, 1).Offset(-1, 0)
    Dim rngFXModels As Range: Set rngFXModels = Range("NX_" & asn & "_M_FXModels")
    rngFXModels.Formula = "=nxlibdata(" & rngFXModelListAnchor.Address & "," _
                                    & Range(rngFXModelListAnchor.Offset(1, 0), rngFXModelListAnchor.Offset(numFXModels, 0)).Address _
                                    & "," & """" & "CC_INFB_EQB_CMDTYB_FXModel.Data" & """" & ")"
    
    Dim rngINFModelList As Range: Set rngINFModelList = Range("NX_" & asn & "_M_INFModelList")
    Dim numINFModels%: numINFModels = rngINFModelList.Rows.count
    Dim rngINFModelListAnchor As Range: Set rngINFModelListAnchor = rngINFModelList.Cells(1, 1).Offset(-1, 0)
    Dim rngINFModels As Range: Set rngINFModels = Range("NX_" & asn & "_M_INFModels")
    rngINFModels.Formula = "=nxlibdata(" & Range(rngINFModelListAnchor, rngINFModelListAnchor.Offset(0, 1)).Address & "," _
                                        & Range(rngINFModelListAnchor.Offset(1, 0), rngINFModelListAnchor.Offset(numINFModels, 1)).Address _
                                        & "," & """" & "CC_INFB_EQB_CMDTYB_INFModel.Data" & """" & ")"
    
    Dim rngEQModelList As Range: Set rngEQModelList = Range("NX_" & asn & "_M_EQModelList")
    Dim numEQModels%: numEQModels = rngEQModelList.Rows.count
    Dim rngEQModelListAnchor As Range: Set rngEQModelListAnchor = rngEQModelList.Cells(1, 1).Offset(-1, 0)
    Dim rngEQModels As Range: Set rngEQModels = Range("NX_" & asn & "_M_EQModels")
    rngEQModels.Formula = "=nxlibdata(" & Range(rngEQModelListAnchor, rngEQModelListAnchor.Offset(0, 1)).Address & "," _
                                        & Range(rngEQModelListAnchor.Offset(1, 0), rngEQModelListAnchor.Offset(numEQModels, 1)).Address _
                                        & "," & """" & "CC_INFB_EQB_CMDTYB_EQModel.Data" & """" & ")"

    Dim rngCMDTYModelList As Range: Set rngCMDTYModelList = Range("NX_" & asn & "_M_CMDTYModelList")
    Dim numCMDTYModels%: numCMDTYModels = rngCMDTYModelList.Rows.count
    Dim rngCMDTYModelListAnchor As Range: Set rngCMDTYModelListAnchor = rngCMDTYModelList.Cells(1, 1).Offset(-1, 0)
    Dim rngCMDTYModels As Range: Set rngCMDTYModels = Range("NX_" & asn & "_M_CMDTYModels")
    rngCMDTYModels.Formula = "=nxlibdata(" & Range(rngCMDTYModelListAnchor, rngCMDTYModelListAnchor.Offset(0, 1)).Address & "," _
                                        & Range(rngCMDTYModelListAnchor.Offset(1, 0), rngCMDTYModelListAnchor.Offset(numCMDTYModels, 1)).Address _
                                        & "," & """" & "CC_INFB_EQB_CMDTYB_CMDTYModel.Data" & """" & ")"
    
    ActiveSheet.Calculate
    
CleanUp:
    Application.EnableEvents = True
    Set rngForeignModelList = Nothing
    Set rngForeignModelListAnchor = Nothing
    Set rngForeignModels = Nothing
    Set rngFXModelList = Nothing
    Set rngFXModelListAnchor = Nothing
    Set rngFXModels = Nothing
    Set rngINFModelList = Nothing
    Set rngINFModelListAnchor = Nothing
    Set rngINFModels = Nothing
    Set rngEQModelList = Nothing
    Set rngEQModelListAnchor = Nothing
    Set rngEQModels = Nothing
    Set rngCMDTYModelList = Nothing
    Set rngCMDTYModelListAnchor = Nothing
    Set rngCMDTYModels = Nothing
    Exit Sub
errorHandler:
    Call VBA.MsgBox("Error in creating model table data", vbCritical + vbOKOnly, "Error")
    GoTo CleanUp
    End Sub

Private Sub ResizeButton_Click()
    On Error GoTo CleanUp
    Application.ScreenUpdating = False
    Dim temp1 As Variant: temp1 = Split(ComboBoxForeignModelNum.Text, " ")
    Dim temp2 As Variant: temp2 = Split(ComboBoxINFModelNum.Text, " ")
    Dim temp3 As Variant: temp3 = Split(ComboBoxEQModelNum.Text, " ")
    Dim temp4 As Variant: temp4 = Split(ComboBoxCMDTYModelNum.Text, " ")
    If Not IsNumeric(temp1(0)) Or Not IsNumeric(temp2(0)) Or Not IsNumeric(temp3(0)) Or Not IsNumeric(temp4(0)) Then
        MsgBox "Fatal error when resizing ComboBox"
        GoTo CleanUp
    Else
        Resize CInt(temp1(0)), CInt(temp2(0)), CInt(temp3(0)), CInt(temp4(0))
    End If
    On Error GoTo 0
CleanUp:
    Application.ScreenUpdating = True
    ActiveSheet.Calculate
End Sub


Public Sub Resize(numForeignModel As Integer, numINFModel As Integer, numEQModel As Integer, numCMDTYModel As Integer)
    On Error GoTo errorHandler
    Application.EnableEvents = False
    Application.ScreenUpdating = False
    
    Dim numFXModel%: numFXModel = numForeignModel
    Dim asn$: asn = ActiveSheet.Name
    Dim rngForeignModels As Range: Set rngForeignModels = Range("NX_" & asn & "_M_ForeignModels")
    Dim rngForeignModelList As Range: Set rngForeignModelList = Range("NX_" & asn & "_M_ForeignModelList")
    Dim rngForeignModelListAnchor As Range: Set rngForeignModelListAnchor = rngForeignModelList.Cells(1, 1).Offset(-1, 0)
    Dim rngFXModels As Range: Set rngFXModels = Range("NX_" & asn & "_M_FXModels")
    Dim rngFXModelList As Range: Set rngFXModelList = Range("NX_" & asn & "_M_FXModelList")
    Dim rngFXModelListAnchor As Range: Set rngFXModelListAnchor = rngFXModelList.Cells(1, 1).Offset(-1, 0)
    Dim rngINFModels As Range: Set rngINFModels = Range("NX_" & asn & "_M_INFModels")
    Dim rngINFModelList As Range: Set rngINFModelList = Range("NX_" & asn & "_M_INFModelList")
    Dim rngINFModelListAnchor As Range: Set rngINFModelListAnchor = rngINFModelList.Cells(1, 1).Offset(-1, 0)
    Dim rngEQModels As Range: Set rngEQModels = Range("NX_" & asn & "_M_EQModels")
    Dim rngEQModelList As Range: Set rngEQModelList = Range("NX_" & asn & "_M_EQModelList")
    Dim rngEQModelListAnchor As Range: Set rngEQModelListAnchor = rngEQModelList.Cells(1, 1).Offset(-1, 0)
    Dim rngCMDTYModels As Range: Set rngCMDTYModels = Range("NX_" & asn & "_M_CMDTYModels")
    Dim rngCMDTYModelList As Range: Set rngCMDTYModelList = Range("NX_" & asn & "_M_CMDTYModelList")
    Dim rngCMDTYModelListAnchor As Range: Set rngCMDTYModelListAnchor = rngCMDTYModelList.Cells(1, 1).Offset(-1, 0)
    Dim rngIRModelFactorNum As Range: Set rngIRModelFactorNum = Range("NX_" & asn & "_M_IRModelFactorNum")
    Dim rngCorrAnchor As Range: Set rngCorrAnchor = Range("NX_" & asn & "_M_CorrAnchor")
    
    rngForeignModelList.Clear
    rngFXModelList.Clear
    rngINFModelList.Clear
    rngEQModelList.Clear
    rngCMDTYModelList.Clear
    rngCorrAnchor.CurrentRegion.Clear
    rngForeignModels = "<LINK>"
    rngFXModels = "<LINK>"
    rngINFModels = "<LINK>"
    rngEQModels = "<LINK>"
    rngCMDTYModels = "<LINK>"
    rngIRModelFactorNum.Value = 1
    
    'Resize the Foreign Model table
    Dim i%, j%
    For i = 1 To numForeignModel
        rngForeignModelListAnchor.Offset(i, 0) = "<LINK>"
        rngForeignModelListAnchor.Offset(i, 1) = 1
    Next i
    Range(rngForeignModelListAnchor.Offset(1, 0), rngForeignModelListAnchor.Offset(numForeignModel, 1)).Select
    ActiveWorkbook.Names.Add Name:="NX_" & asn & "_M_ForeignModelList", RefersTo:=Selection
    Set rngForeignModelList = Range("NX_" & asn & "_M_ForeignModelList")
    Call formatColorAndBorder(rngForeignModelList)
    Call addConditionalFormat(Range(rngForeignModelListAnchor.Offset(1, 0), rngForeignModelListAnchor.Offset(numForeignModel, 0)))
    Call addDataValidation(Range(rngForeignModelListAnchor.Offset(1, 1), rngForeignModelListAnchor.Offset(numForeignModel, 1)))
        
    'Resize the FX Model Table
    For i = 1 To numFXModel
        rngFXModelListAnchor.Offset(i, 0) = "<LINK>"
        rngFXModelListAnchor.Offset(i, 1) = 1
    Next i
    Range(rngFXModelListAnchor.Offset(1, 0), rngFXModelListAnchor.Offset(numFXModel, 1)).Select
    ActiveWorkbook.Names.Add Name:="NX_" & asn & "_M_FXModelList", RefersTo:=Selection
    Set rngFXModelList = Range("NX_" & asn & "_M_FXModelList")
    Call formatColorAndBorder(rngFXModelList)
    Call addConditionalFormat(Range(rngFXModelListAnchor.Offset(1, 0), rngFXModelListAnchor.Offset(numFXModel, 0)))
    Call addDataValidation(Range(rngFXModelListAnchor.Offset(1, 1), rngFXModelListAnchor.Offset(numFXModel, 1)))
          
    'Resize the Inflation Model Table
    For i = 1 To numINFModel
        rngINFModelListAnchor.Offset(i, 0) = "<LINK>"
        rngINFModelListAnchor.Offset(i, 1) = "<LINK>"
    Next i
    Range(rngINFModelListAnchor.Offset(1, 0), rngINFModelListAnchor.Offset(numINFModel, 1)).Select
    ActiveWorkbook.Names.Add Name:="NX_" & asn & "_M_INFModelList", RefersTo:=Selection
    Set rngINFModelList = Range("NX_" & asn & "_M_INFModelList")
    Call formatColorAndBorder(rngINFModelList)
    Call addConditionalFormat(Range(rngINFModelListAnchor.Offset(1, 0), rngINFModelListAnchor.Offset(numINFModel, 1)))
    
    'Resize the EQ Model Table
    For i = 1 To numEQModel
        rngEQModelListAnchor.Offset(i, 0) = "<LINK>"
        rngEQModelListAnchor.Offset(i, 1) = "<LINK>"
        rngEQModelListAnchor.Offset(i, 2) = 1
    Next i
    Range(rngEQModelListAnchor.Offset(1, 0), rngEQModelListAnchor.Offset(numEQModel, 2)).Select
    ActiveWorkbook.Names.Add Name:="NX_" & asn & "_M_EQModelList", RefersTo:=Selection
    Set rngEQModelList = Range("NX_" & asn & "_M_EQModelList")
    Call formatColorAndBorder(rngEQModelList)
    Call addConditionalFormat(Range(rngEQModelListAnchor.Offset(1, 0), rngEQModelListAnchor.Offset(numEQModel, 1)))
    Call addDataValidation(Range(rngEQModelListAnchor.Offset(1, 2), rngEQModelListAnchor.Offset(numEQModel, 2)))
    
    'Resize the CMDTY Model Table
    For i = 1 To numCMDTYModel
        rngCMDTYModelListAnchor.Offset(i, 0) = "<LINK>"
        rngCMDTYModelListAnchor.Offset(i, 1) = "<LINK>"
        rngCMDTYModelListAnchor.Offset(i, 2) = 1
    Next i
    Range(rngCMDTYModelListAnchor.Offset(1, 0), rngCMDTYModelListAnchor.Offset(numCMDTYModel, 2)).Select
    ActiveWorkbook.Names.Add Name:="NX_" & asn & "_M_CMDTYModelList", RefersTo:=Selection
    Set rngCMDTYModelList = Range("NX_" & asn & "_M_CMDTYModelList")
    Call formatColorAndBorder(rngCMDTYModelList)
    Call addConditionalFormat(Range(rngCMDTYModelListAnchor.Offset(1, 0), rngCMDTYModelListAnchor.Offset(numCMDTYModel, 1)))
    Call addDataValidation(Range(rngCMDTYModelListAnchor.Offset(1, 2), rngCMDTYModelListAnchor.Offset(numCMDTYModel, 2)))
    
    rngCorrAnchor.Offset(0, 1) = "DomesticModelFactor1"
    rngCorrAnchor.Offset(1, 0) = "DomesticModelFactor1"
    
    For i = 1 To numFXModel
        rngCorrAnchor.Offset(0, i + 1) = "Foreign" & CStr(i) & "ModelFactor1"
        rngCorrAnchor.Offset(i + 1, 0) = "Foreign" & CStr(i) & "ModelFactor1"
    Next i
    
    For i = 1 To numForeignModel
        rngCorrAnchor.Offset(0, i + numFXModel + 1) = "FX" & CStr(i) & "ModelFactor1"
        rngCorrAnchor.Offset(i + numFXModel + 1, 0) = "FX" & CStr(i) & "ModelFactor1"
    Next i
    
    For i = 1 To numINFModel
        rngCorrAnchor.Offset(0, i + numFXModel + numForeignModel + 1) = "RealRate" & CStr(i) & "Model"
        rngCorrAnchor.Offset(i + numFXModel + numForeignModel + 1, 0) = "RealRate" & CStr(i) & "Model"
    Next i
    
    For i = 1 To numINFModel
        rngCorrAnchor.Offset(0, i + numFXModel + numForeignModel + numINFModel + 1) = "CPI" & CStr(i) & "Model"
        rngCorrAnchor.Offset(i + numFXModel + numForeignModel + numINFModel + 1, 0) = "CPI" & CStr(i) & "Model"
    Next i
    
    For i = 1 To numEQModel
        rngCorrAnchor.Offset(0, i + numFXModel + numForeignModel + 2 * numINFModel + 1) = _
                                        "=" & rngEQModelList.Cells(i, 1).Address & "&" & """" & "Factor1" & """"
        rngCorrAnchor.Offset(i + numFXModel + numForeignModel + 2 * numINFModel + 1, 0) = _
                                        "=" & rngEQModelList.Cells(i, 1).Address & "&" & """" & "Factor1" & """"
    Next i
    
    For i = 1 To numCMDTYModel
        rngCorrAnchor.Offset(0, i + numFXModel + numForeignModel + 2 * numINFModel + numEQModel + 1) = _
                                        "=" & rngCMDTYModelList.Cells(i, 1).Address & "&" & """" & "Factor1" & """"
        rngCorrAnchor.Offset(i + numFXModel + numForeignModel + 2 * numINFModel + numEQModel + 1, 0) = _
                                        "=" & rngCMDTYModelList.Cells(i, 1).Address & "&" & """" & "Factor1" & """"
    Next i
    
    For i = 1 To numFXModel + numForeignModel + 2 * numINFModel + numEQModel + numCMDTYModel + 1
        rngCorrAnchor.Offset(i, i) = 1
        For j = i + 1 To numFXModel + numForeignModel + 2 * numINFModel + numEQModel + numCMDTYModel + 1
            rngCorrAnchor.Offset(i, j) = 0
        Next j
    Next i
    
    rngCorrAnchor.Formula = "=nxlibmatrix(" & Range(rngCorrAnchor.Offset(0, 1), rngCorrAnchor.Offset(0, numFXModel + numForeignModel + 2 * numINFModel + numEQModel + numCMDTYModel + 1)).Address & "," _
                                            & Range(rngCorrAnchor.Offset(1, 0), rngCorrAnchor.Offset(numFXModel + numForeignModel + 2 * numINFModel + numEQModel + numCMDTYModel + 1, 0)).Address & "," _
                                            & Range(rngCorrAnchor.Offset(1, 1), rngCorrAnchor.Offset(numFXModel + numForeignModel + 2 * numINFModel + numEQModel + numCMDTYModel + 1, _
                                                                                                        numFXModel + numForeignModel + 2 * numINFModel + numEQModel + numCMDTYModel + 1)).Address & "," _
                                            & """" & "CC_INFB_EQB_CMDTYB_Corr.Data" & """" & ")"
                                            
    Call formatColorAndBorder(rngCorrAnchor)
    Call formatColorAndBorder(Range(rngCorrAnchor.Offset(1, 1), rngCorrAnchor.Offset(numFXModel + numForeignModel + 2 * numINFModel + numEQModel + numCMDTYModel + 1, _
                                                                                        numFXModel + numForeignModel + 2 * numINFModel + numEQModel + numCMDTYModel + 1)))
    Call formatHeader(Range(rngCorrAnchor.Offset(0, 1), rngCorrAnchor.Offset(0, numFXModel + numForeignModel + 2 * numINFModel + numEQModel + numCMDTYModel + 1)))
    Call formatHeader(Range(rngCorrAnchor.Offset(1, 0), rngCorrAnchor.Offset(numFXModel + numForeignModel + 2 * numINFModel + numEQModel + numCMDTYModel + 1, 0)))

CleanUp:
    Application.EnableEvents = True
    Application.ScreenUpdating = True
    Set rngForeignModels = Nothing
    Set rngForeignModelList = Nothing
    Set rngForeignModelListAnchor = Nothing
    Set rngFXModels = Nothing
    Set rngFXModelList = Nothing
    Set rngFXModelListAnchor = Nothing
    Set rngINFModels = Nothing
    Set rngINFModelList = Nothing
    Set rngINFModelListAnchor = Nothing
    Set rngEQModels = Nothing
    Set rngEQModelList = Nothing
    Set rngEQModelListAnchor = Nothing
    Set rngCMDTYModels = Nothing
    Set rngCMDTYModelList = Nothing
    Set rngCMDTYModelListAnchor = Nothing
    Set rngCorrAnchor = Nothing
    Exit Sub
   
errorHandler:
    Call VBA.MsgBox("Error in resizing the model", vbCritical + vbOKOnly, "Error")
    GoTo CleanUp
    End Sub

Private Sub Worksheet_Activate()

    On Error GoTo CleanUp
    ComboBoxForeignModelNum.Clear
    ComboBoxForeignModelNum.AddItem ("1 Foreign Model")
    ComboBoxForeignModelNum.AddItem ("2 Foreign Models")
    ComboBoxForeignModelNum.AddItem ("4 Foreign Models")
    ComboBoxForeignModelNum.AddItem ("5 Foreign Models")
    ComboBoxForeignModelNum.AddItem ("6 Foreign Models")
    ComboBoxForeignModelNum.AddItem ("7 Foreign Models")
    ComboBoxForeignModelNum.AddItem ("8 Foreign Models")
    ComboBoxForeignModelNum.AddItem ("9 Foreign Models")
    ComboBoxForeignModelNum.AddItem ("10 Foreign Models")
    ComboBoxForeignModelNum.Text = "1 Foreign Model"
    
    ComboBoxINFModelNum.Clear
    ComboBoxINFModelNum.AddItem ("1 Inflation Model")
    ComboBoxINFModelNum.AddItem ("2 Inflation Models")
    ComboBoxINFModelNum.AddItem ("3 Inflation Models")
    ComboBoxINFModelNum.AddItem ("4 Inflation Models")
    ComboBoxINFModelNum.AddItem ("5 Inflation Models")
    ComboBoxINFModelNum.AddItem ("6 Inflation Models")
    ComboBoxINFModelNum.AddItem ("7 Inflation Models")
    ComboBoxINFModelNum.AddItem ("8 Inflation Models")
    ComboBoxINFModelNum.AddItem ("9 Inflation Models")
    ComboBoxINFModelNum.AddItem ("10 Inflation Models")
    ComboBoxINFModelNum.Text = "1 Inflation Model"
    
    ComboBoxEQModelNum.Clear
    ComboBoxEQModelNum.AddItem ("1 EQ Model")
    ComboBoxEQModelNum.AddItem ("2 EQ Models")
    ComboBoxEQModelNum.AddItem ("3 EQ Models")
    ComboBoxEQModelNum.AddItem ("4 EQ Models")
    ComboBoxEQModelNum.AddItem ("5 EQ Models")
    ComboBoxEQModelNum.AddItem ("6 EQ Models")
    ComboBoxEQModelNum.AddItem ("7 EQ Models")
    ComboBoxEQModelNum.AddItem ("8 EQ Models")
    ComboBoxEQModelNum.AddItem ("9 EQ Models")
    ComboBoxEQModelNum.AddItem ("10 EQ Models")
    ComboBoxEQModelNum.Text = "1 EQ Model"
    
    ComboBoxCMDTYModelNum.Clear
    ComboBoxCMDTYModelNum.AddItem ("1 CMDTY Model")
    ComboBoxCMDTYModelNum.AddItem ("2 CMDTY Models")
    ComboBoxCMDTYModelNum.AddItem ("3 CMDTY Models")
    ComboBoxCMDTYModelNum.AddItem ("4 CMDTY Models")
    ComboBoxCMDTYModelNum.AddItem ("5 CMDTY Models")
    ComboBoxCMDTYModelNum.AddItem ("6 CMDTY Models")
    ComboBoxCMDTYModelNum.AddItem ("7 CMDTY Models")
    ComboBoxCMDTYModelNum.AddItem ("8 CMDTY Models")
    ComboBoxCMDTYModelNum.AddItem ("9 CMDTY Models")
    ComboBoxCMDTYModelNum.AddItem ("10 CMDTY Models")
    ComboBoxCMDTYModelNum.Text = "1 CMDTY Model"
    hasBeenInitialised = True

CleanUp:
    ActiveSheet.Calculate
End Sub


'Resizing the correlation matrix after changing the Factor number for any model
Private Sub Worksheet_Change(ByVal Target As Range)
    On Error GoTo errorHandler
    Application.EnableEvents = False
    Application.ScreenUpdating = False
    
    Dim asn$: asn = ActiveSheet.Name
    Dim rngForeignModelList As Range: Set rngForeignModelList = Range("NX_" & asn & "_M_ForeignModelList")
    Dim numForeignModels%: numForeignModels = rngForeignModelList.Rows.count
    Dim rngForeignModelFactorNumList As Range: Set rngForeignModelFactorNumList = Range(rngForeignModelList.Cells(1, 2), rngForeignModelList.Cells(numForeignModels, 2))
    Dim rngFXModelList As Range: Set rngFXModelList = Range("NX_" & asn & "_M_FXModelList")
    Dim numFXModels%: numFXModels = rngFXModelList.Rows.count
    Dim rngFXModelFactorNumList As Range: Set rngFXModelFactorNumList = Range(rngFXModelList.Cells(1, 2), rngFXModelList.Cells(numFXModels, 2))
    Dim rngINFModelList As Range: Set rngINFModelList = Range("NX_" & asn & "_M_INFModelList")
    Dim numINFModels%: numINFModels = rngINFModelList.Rows.count
    Dim rngEQModelList As Range: Set rngEQModelList = Range("NX_" & asn & "_M_EQModelList")
    Dim numEQModels%: numEQModels = rngEQModelList.Rows.count
    Dim rngEQModelFactorNumList As Range: Set rngEQModelFactorNumList = Range(rngEQModelList.Cells(1, 3), rngEQModelList.Cells(numEQModels, 3))
    Dim rngCMDTYModelList As Range: Set rngCMDTYModelList = Range("NX_" & asn & "_M_CMDTYModelList")
    Dim numCMDTYModels%: numCMDTYModels = rngCMDTYModelList.Rows.count
    Dim rngCMDTYModelFactorNumList As Range: Set rngCMDTYModelFactorNumList = Range(rngCMDTYModelList.Cells(1, 3), rngCMDTYModelList.Cells(numCMDTYModels, 3))
    Dim rngIRModelFactorNum As Range: Set rngIRModelFactorNum = Range("NX_" & asn & "_M_IRMOdelFactorNum")
    
    If Intersect(Target, rngForeignModelFactorNumList) Is Nothing And Intersect(Target, rngFXModelFactorNumList) Is Nothing And _
        Intersect(Target, rngEQModelFactorNumList) Is Nothing And Intersect(Target, rngCMDTYModelFactorNumList) Is Nothing And _
        Intersect(Target, rngIRModelFactorNum) Is Nothing Then
        GoTo CleanUp
    End If
    
    Dim rngCorrAnchor As Range: Set rngCorrAnchor = Range("NX_" & asn & "_M_CorrAnchor")
    rngCorrAnchor.CurrentRegion.Clear
    Dim iIRModelFactorNum%: iIRModelFactorNum = rngIRModelFactorNum.Value
    Dim iFXModelFactorNum%, iForeignModelFactorNum%, iEQModelFactorNum%, iCMDTYModelFactorNum%
    Dim i%, j%
    Dim count%: count = 0
    For i = 1 To iIRModelFactorNum
        count = count + 1
        rngCorrAnchor.Offset(0, count) = "DomesticModelFactor" & CStr(i)
        rngCorrAnchor.Offset(count, 0) = "DomesticModelFactor" & CStr(i)
    Next i
    
    For i = 1 To numFXModels
        iFXModelFactorNum = rngFXModelList.Cells(i, 2).Value
        For j = 1 To iFXModelFactorNum
            count = count + 1
            rngCorrAnchor.Offset(0, count) = "FX" & CStr(i) & "ModelFactor" & CStr(j)
            rngCorrAnchor.Offset(count, 0) = "FX" & CStr(i) & "ModelFactor" & CStr(j)
        Next j
    Next i
    
    For i = 1 To numForeignModels
        iForeignModelFactorNum = rngForeignModelList.Cells(i, 2).Value
        For j = 1 To iForeignModelFactorNum
            count = count + 1
            rngCorrAnchor.Offset(0, count) = "Foreign" & CStr(i) & "ModelFactor" & CStr(j)
            rngCorrAnchor.Offset(count, 0) = "Foreign" & CStr(i) & "ModelFactor" & CStr(j)
        Next j
    Next i
    
    For i = 1 To numINFModels
        count = count + 1
        rngCorrAnchor.Offset(0, count) = "RealRate" & CStr(i) & "Model"
        rngCorrAnchor.Offset(count, 0) = "RealRate" & CStr(i) & "Model"
    Next i
    
    For i = 1 To numINFModels
        count = count + 1
        rngCorrAnchor.Offset(0, count) = "CPI" & CStr(i) & "Model"
        rngCorrAnchor.Offset(count, 0) = "CPI" & CStr(i) & "Model"
    Next i
    
    For i = 1 To numEQModels
        iEQModelFactorNum = rngEQModelList.Cells(i, 3).Value
        For j = 1 To iEQModelFactorNum
            count = count + 1
            rngCorrAnchor.Offset(0, count) = "=" & rngEQModelList.Cells(i, 1).Address & "&" & """" & "Factor" & CStr(j) & """"
            rngCorrAnchor.Offset(count, 0) = "=" & rngEQModelList.Cells(i, 1).Address & "&" & """" & "Factor" & CStr(j) & """"
        Next j
    Next i

    For i = 1 To numCMDTYModels
        iCMDTYModelFactorNum = rngCMDTYModelList.Cells(i, 3).Value
        For j = 1 To iCMDTYModelFactorNum
            count = count + 1
            rngCorrAnchor.Offset(0, count) = "=" & rngCMDTYModelList.Cells(i, 1).Address & "&" & """" & "Factor" & CStr(j) & """"
            rngCorrAnchor.Offset(count, 0) = "=" & rngCMDTYModelList.Cells(i, 1).Address & "&" & """" & "Factor" & CStr(j) & """"
        Next j
    Next i
    For i = 1 To count
        rngCorrAnchor.Offset(i, i) = 1
        For j = i + 1 To count
            rngCorrAnchor.Offset(i, j) = 0
        Next j
    Next i
    
    rngCorrAnchor.Formula = "=nxlibmatrix(" & Range(rngCorrAnchor.Offset(0, 1), rngCorrAnchor.Offset(0, count)).Address & "," _
                                            & Range(rngCorrAnchor.Offset(1, 0), rngCorrAnchor.Offset(count, 0)).Address & "," _
                                            & Range(rngCorrAnchor.Offset(1, 1), rngCorrAnchor.Offset(count, count)).Address & "," _
                                            & """" & "CC_INFB_EQB_CMDTYB_Corr.Data" & """" & ")"
    
    
    Call formatColorAndBorder(rngCorrAnchor)
    Call formatColorAndBorder(Range(rngCorrAnchor.Offset(1, 1), rngCorrAnchor.Offset(count, count)))
    Call formatHeader(Range(rngCorrAnchor.Offset(0, 1), rngCorrAnchor.Offset(0, count)))
    Call formatHeader(Range(rngCorrAnchor.Offset(1, 0), rngCorrAnchor.Offset(count, 0)))
       
    Range(rngCorrAnchor.Offset(1, 1), rngCorrAnchor.Offset(count, count)).Select
    
CleanUp:
    Application.EnableEvents = True
    Application.ScreenUpdating = True
    Set rngForeignModelList = Nothing
    Set rngForeignModelFactorNumList = Nothing
    Set rngFXModelList = Nothing
    Set rngFXModelFactorNumList = Nothing
    Set rngINFModelList = Nothing
    Set rngEQModelList = Nothing
    Set rngEQModelFactorNumList = Nothing
    Set rngCMDTYModelList = Nothing
    Set rngCMDTYModelFactorNumList = Nothing
    Set rngIRModelFactorNum = Nothing
    Set rngCorrAnchor = Nothing
    Exit Sub

errorHandler:
    Call VBA.MsgBox("Error in resizing the corrlation matrix", vbCritical + vbOKOnly, "Error")
    GoTo CleanUp
End Sub





''' Formatting Module

Private Sub addConditionalFormat(tempRng As Range)
    tempRng.Select
    Selection.FormatConditions.Delete
    Selection.FormatConditions.Add Type:=xlCellValue, Operator:=xlEqual, _
        Formula1:="=""<LINK>"""
    Selection.FormatConditions(1).Interior.ColorIndex = 3
        
    Cells(1, 1).Select
End Sub

Private Sub formatHeader(tempRng As Range)
    tempRng.Select
    With Selection.Interior
        .Pattern = xlSolid
        .PatternColorIndex = xlAutomatic
        .Color = 10040115
    End With
    With Selection.Font
        .ColorIndex = 2
        .Name = "Calibri"
        .Size = 11
    End With
    Cells(1, 1).Select
End Sub

Private Sub formatColorAndBorder(tempRng As Range)
    tempRng.Select
    Selection.HorizontalAlignment = xlCenter
    Selection.Borders(xlDiagonalDown).LineStyle = xlNone
    Selection.Borders(xlDiagonalUp).LineStyle = xlNone
    With Selection.Borders(xlEdgeLeft)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlEdgeTop)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlEdgeRight)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .Weight = xlThin
    End With
    Selection.Borders(xlInsideVertical).LineStyle = xlNone
    Selection.Borders(xlInsideHorizontal).LineStyle = xlNone
    With Selection.Interior
        .Pattern = xlSolid
        .PatternColorIndex = xlAutomatic
        .ColorIndex = 2
    End With
    With Selection.Font
        .Name = "Calibri"
        .Size = 11
    End With
    Cells(1, 1).Select

End Sub

Private Sub addDataValidation(tempRng As Range)
    tempRng.Select
    With Selection.Validation
        .Delete
        .Add Type:=xlValidateWholeNumber, AlertStyle:=xlValidAlertStop, _
        Operator:=xlGreaterEqual, Formula1:="1"
        .IgnoreBlank = True
        .InCellDropdown = True
        .InputTitle = ""
        .ErrorTitle = "Incorrect Input"
        .InputMessage = ""
        .ErrorMessage = "Please input an integer"
        .ShowInput = True
        .ShowError = True
    End With
    Cells(1, 1).Select
End Sub

Attribute VB_Name = "Sheet35"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "ComboBoxForeignModelNum, 1, 0, MSForms, ComboBox"
Attribute VB_Control = "ResizeButton, 2, 1, MSForms, CommandButton"
Attribute VB_Control = "CreateButton, 3, 2, MSForms, CommandButton"
Attribute VB_Control = "ComboBoxINFModelNum, 4, 3, MSForms, ComboBox"
Attribute VB_Control = "ComboBoxCRModelNum, 5, 4, MSForms, ComboBox"
Attribute VB_Control = "ComboBoxEQModelNum, 6, 5, MSForms, ComboBox"
Attribute VB_Control = "ComboBoxCMDTYModelNum, 7, 6, MSForms, ComboBox"
Option Explicit
Private hasBeenInitialised As Boolean


Private Sub CreateButton_Click()
    On Error GoTo errorHandler
    Application.EnableEvents = False
    Dim asn$: asn = ActiveSheet.Name
    Dim rngForeignModelList As Range: Set rngForeignModelList = Range("NX_" & asn & "_M_ForeignModelList")
    Dim numForeignModels%: numForeignModels = rngForeignModelList.Rows.count
    Dim rngForeignModelListAnchor As Range: Set rngForeignModelListAnchor = rngForeignModelList.Cells(1, 1).Offset(-1, 0)
    Dim rngForeignModels As Range: Set rngForeignModels = Range("NX_" & asn & "_M_ForeignModels")
    rngForeignModels.Formula = "=nxlibdata(" & rngForeignModelListAnchor.Address & "," _
                                & Range(rngForeignModelListAnchor.Offset(1, 0), rngForeignModelListAnchor.Offset(numForeignModels, 0)).Address _
                                & "," & """" & "CC_INFB_CRB_EQB_CMDTYB_ForeignModel.Data" & """" & ")"
    
    Dim rngFXModelList As Range: Set rngFXModelList = Range("NX_" & asn & "_M_FXModelList")
    Dim numFXModels%: numFXModels = rngFXModelList.Rows.count
    Dim rngFXModelListAnchor As Range: Set rngFXModelListAnchor = rngFXModelList.Cells(1, 1).Offset(-1, 0)
    Dim rngFXModels As Range: Set rngFXModels = Range("NX_" & asn & "_M_FXModels")
    rngFXModels.Formula = "=nxlibdata(" & rngFXModelListAnchor.Address & "," _
                                    & Range(rngFXModelListAnchor.Offset(1, 0), rngFXModelListAnchor.Offset(numFXModels, 0)).Address _
                                    & "," & """" & "CC_INFB_CRB_EQB_CMDTYB_FXModel.Data" & """" & ")"
    
    Dim rngINFModelList As Range: Set rngINFModelList = Range("NX_" & asn & "_M_INFModelList")
    Dim numINFModels%: numINFModels = rngINFModelList.Rows.count
    Dim rngINFModelListAnchor As Range: Set rngINFModelListAnchor = rngINFModelList.Cells(1, 1).Offset(-1, 0)
    Dim rngINFModels As Range: Set rngINFModels = Range("NX_" & asn & "_M_INFModels")
    rngINFModels.Formula = "=nxlibdata(" & Range(rngINFModelListAnchor, rngINFModelListAnchor.Offset(0, 1)).Address & "," _
                                        & Range(rngINFModelListAnchor.Offset(1, 0), rngINFModelListAnchor.Offset(numINFModels, 1)).Address _
                                        & "," & """" & "CC_INFB_CRB_EQB_CMDTYB_INFModel.Data" & """" & ")"
    
    Dim rngCRModelList As Range: Set rngCRModelList = Range("NX_" & asn & "_M_CRModelList")
    Dim numCRModels%: numCRModels = rngCRModelList.Rows.count
    Dim rngCRModelListAnchor As Range: Set rngCRModelListAnchor = rngCRModelList.Cells(1, 1).Offset(-1, 0)
    Dim rngCRModels As Range: Set rngCRModels = Range("NX_" & asn & "_M_CRModels")
    rngCRModels.Formula = "=nxlibdata(" & Range(rngCRModelListAnchor, rngCRModelListAnchor.Offset(0, 1)).Address & "," _
                                        & Range(rngCRModelListAnchor.Offset(1, 0), rngCRModelListAnchor.Offset(numCRModels, 1)).Address _
                                        & "," & """" & "CC_INFB_CRB_EQB_CMDTYB_CRModel.Data" & """" & ")"

    Dim rngEQModelList As Range: Set rngEQModelList = Range("NX_" & asn & "_M_EQModelList")
    Dim numEQModels%: numEQModels = rngEQModelList.Rows.count
    Dim rngEQModelListAnchor As Range: Set rngEQModelListAnchor = rngEQModelList.Cells(1, 1).Offset(-1, 0)
    Dim rngEQModels As Range: Set rngEQModels = Range("NX_" & asn & "_M_EQModels")
    rngEQModels.Formula = "=nxlibdata(" & Range(rngEQModelListAnchor, rngEQModelListAnchor.Offset(0, 1)).Address & "," _
                                        & Range(rngEQModelListAnchor.Offset(1, 0), rngEQModelListAnchor.Offset(numEQModels, 1)).Address _
                                        & "," & """" & "CC_INFB_CRB_EQB_CMDTYB_EQModel.Data" & """" & ")"
    
    Dim rngCMDTYModelList As Range: Set rngCMDTYModelList = Range("NX_" & asn & "_M_CMDTYModelList")
    Dim numCMDTYModels%: numCMDTYModels = rngCMDTYModelList.Rows.count
    Dim rngCMDTYModelListAnchor As Range: Set rngCMDTYModelListAnchor = rngCMDTYModelList.Cells(1, 1).Offset(-1, 0)
    Dim rngCMDTYModels As Range: Set rngCMDTYModels = Range("NX_" & asn & "_M_CMDTYModels")
    rngCMDTYModels.Formula = "=nxlibdata(" & Range(rngCMDTYModelListAnchor, rngCMDTYModelListAnchor.Offset(0, 1)).Address & "," _
                                        & Range(rngCMDTYModelListAnchor.Offset(1, 0), rngCMDTYModelListAnchor.Offset(numCMDTYModels, 1)).Address _
                                        & "," & """" & "CC_INFB_CRB_EQB_CMDTYB_CMDTYModel.Data" & """" & ")"
    
    
    ActiveSheet.Calculate
    
CleanUp:
    Application.EnableEvents = True
    Set rngForeignModelList = Nothing
    Set rngForeignModelListAnchor = Nothing
    Set rngForeignModels = Nothing
    Set rngFXModelList = Nothing
    Set rngFXModelListAnchor = Nothing
    Set rngFXModels = Nothing
    Set rngINFModelList = Nothing
    Set rngINFModelListAnchor = Nothing
    Set rngINFModels = Nothing
    Set rngCRModelList = Nothing
    Set rngCRModelListAnchor = Nothing
    Set rngCRModels = Nothing
    Set rngEQModelList = Nothing
    Set rngEQModelListAnchor = Nothing
    Set rngEQModels = Nothing
    Set rngCMDTYModelList = Nothing
    Set rngCMDTYModelListAnchor = Nothing
    Set rngCMDTYModels = Nothing
    Exit Sub
errorHandler:
    Call VBA.MsgBox("Error in creating model table data", vbCritical + vbOKOnly, "Error")
    GoTo CleanUp
    End Sub

Private Sub ResizeButton_Click()
    On Error GoTo CleanUp
    Application.ScreenUpdating = False
    Dim temp1 As Variant: temp1 = Split(ComboBoxForeignModelNum.Text, " ")
    Dim temp2 As Variant: temp2 = Split(ComboBoxINFModelNum.Text, " ")
    Dim temp3 As Variant: temp3 = Split(ComboBoxCRModelNum.Text, " ")
    Dim temp4 As Variant: temp4 = Split(ComboBoxEQModelNum.Text, " ")
    Dim temp5 As Variant: temp5 = Split(ComboBoxCMDTYModelNum.Text, " ")
    If Not IsNumeric(temp1(0)) Or Not IsNumeric(temp2(0)) Or Not IsNumeric(temp3(0)) _
                            Or Not IsNumeric(temp4(0)) Or Not IsNumeric(temp5(0)) Then
        MsgBox "Fatal error when resizing ComboBox"
        GoTo CleanUp
    Else
        Resize CInt(temp1(0)), CInt(temp2(0)), CInt(temp3(0)), CInt(temp4(0)), CInt(temp5(0))
    End If
    On Error GoTo 0
CleanUp:
    Application.ScreenUpdating = True
    ActiveSheet.Calculate
End Sub


Public Sub Resize(numForeignModel As Integer, numINFModel As Integer, numCRModel As Integer, numEQModel As Integer, numCMDTYModel As Integer)
    On Error GoTo errorHandler
    Application.EnableEvents = False
    Application.ScreenUpdating = False
    
    Dim numFXModel%: numFXModel = numForeignModel
    Dim asn$: asn = ActiveSheet.Name
    Dim rngForeignModels As Range: Set rngForeignModels = Range("NX_" & asn & "_M_ForeignModels")
    Dim rngForeignModelList As Range: Set rngForeignModelList = Range("NX_" & asn & "_M_ForeignModelList")
    Dim rngForeignModelListAnchor As Range: Set rngForeignModelListAnchor = rngForeignModelList.Cells(1, 1).Offset(-1, 0)
    Dim rngFXModels As Range: Set rngFXModels = Range("NX_" & asn & "_M_FXModels")
    Dim rngFXModelList As Range: Set rngFXModelList = Range("NX_" & asn & "_M_FXModelList")
    Dim rngFXModelListAnchor As Range: Set rngFXModelListAnchor = rngFXModelList.Cells(1, 1).Offset(-1, 0)
    Dim rngINFModels As Range: Set rngINFModels = Range("NX_" & asn & "_M_INFModels")
    Dim rngINFModelList As Range: Set rngINFModelList = Range("NX_" & asn & "_M_INFModelList")
    Dim rngINFModelListAnchor As Range: Set rngINFModelListAnchor = rngINFModelList.Cells(1, 1).Offset(-1, 0)
    Dim rngCRModels As Range: Set rngCRModels = Range("NX_" & asn & "_M_CRModels")
    Dim rngCRModelList As Range: Set rngCRModelList = Range("NX_" & asn & "_M_CRModelList")
    Dim rngCRModelListAnchor As Range: Set rngCRModelListAnchor = rngCRModelList.Cells(1, 1).Offset(-1, 0)
    Dim rngEQModels As Range: Set rngEQModels = Range("NX_" & asn & "_M_EQModels")
    Dim rngEQModelList As Range: Set rngEQModelList = Range("NX_" & asn & "_M_EQModelList")
    Dim rngEQModelListAnchor As Range: Set rngEQModelListAnchor = rngEQModelList.Cells(1, 1).Offset(-1, 0)
    Dim rngCMDTYModels As Range: Set rngCMDTYModels = Range("NX_" & asn & "_M_CMDTYModels")
    Dim rngCMDTYModelList As Range: Set rngCMDTYModelList = Range("NX_" & asn & "_M_CMDTYModelList")
    Dim rngCMDTYModelListAnchor As Range: Set rngCMDTYModelListAnchor = rngCMDTYModelList.Cells(1, 1).Offset(-1, 0)
    Dim rngIRModelFactorNum As Range: Set rngIRModelFactorNum = Range("NX_" & asn & "_M_IRModelFactorNum")
    Dim rngCorrAnchor As Range: Set rngCorrAnchor = Range("NX_" & asn & "_M_CorrAnchor")
    
    rngForeignModelList.Clear
    rngFXModelList.Clear
    rngINFModelList.Clear
    rngCRModelList.Clear
    rngEQModelList.Clear
    rngCMDTYModelList.Clear
    rngCorrAnchor.CurrentRegion.Clear
    rngForeignModels = "<LINK>"
    rngFXModels = "<LINK>"
    rngINFModels = "<LINK>"
    rngCRModels = "<LINK>"
    rngEQModels = "<LINK>"
    rngCMDTYModels = "<LINK>"
    rngIRModelFactorNum.Value = 1
    
    'Resize the Foreign Model table
    Dim i%, j%
    For i = 1 To numForeignModel
        rngForeignModelListAnchor.Offset(i, 0) = "<LINK>"
        rngForeignModelListAnchor.Offset(i, 1) = 1
    Next i
    Range(rngForeignModelListAnchor.Offset(1, 0), rngForeignModelListAnchor.Offset(numForeignModel, 1)).Select
    ActiveWorkbook.Names.Add Name:="NX_" & asn & "_M_ForeignModelList", RefersTo:=Selection
    Set rngForeignModelList = Range("NX_" & asn & "_M_ForeignModelList")
    Call formatColorAndBorder(rngForeignModelList)
    Call addConditionalFormat(Range(rngForeignModelListAnchor.Offset(1, 0), rngForeignModelListAnchor.Offset(numForeignModel, 0)))
    Call addDataValidation(Range(rngForeignModelListAnchor.Offset(1, 1), rngForeignModelListAnchor.Offset(numForeignModel, 1)))
        
    'Resize the FX Model Table
    For i = 1 To numFXModel
        rngFXModelListAnchor.Offset(i, 0) = "<LINK>"
        rngFXModelListAnchor.Offset(i, 1) = 1
    Next i
    Range(rngFXModelListAnchor.Offset(1, 0), rngFXModelListAnchor.Offset(numFXModel, 1)).Select
    ActiveWorkbook.Names.Add Name:="NX_" & asn & "_M_FXModelList", RefersTo:=Selection
    Set rngFXModelList = Range("NX_" & asn & "_M_FXModelList")
    Call formatColorAndBorder(rngFXModelList)
    Call addConditionalFormat(Range(rngFXModelListAnchor.Offset(1, 0), rngFXModelListAnchor.Offset(numFXModel, 0)))
    Call addDataValidation(Range(rngFXModelListAnchor.Offset(1, 1), rngFXModelListAnchor.Offset(numFXModel, 1)))
          
    'Resize the Inflation Model Table
    For i = 1 To numINFModel
        rngINFModelListAnchor.Offset(i, 0) = "<LINK>"
        rngINFModelListAnchor.Offset(i, 1) = "<LINK>"
    Next i
    Range(rngINFModelListAnchor.Offset(1, 0), rngINFModelListAnchor.Offset(numINFModel, 1)).Select
    ActiveWorkbook.Names.Add Name:="NX_" & asn & "_M_INFModelList", RefersTo:=Selection
    Set rngINFModelList = Range("NX_" & asn & "_M_INFModelList")
    Call formatColorAndBorder(rngINFModelList)
    Call addConditionalFormat(Range(rngINFModelListAnchor.Offset(1, 0), rngINFModelListAnchor.Offset(numINFModel, 1)))
    
    'Resize the CR Model Table
    For i = 1 To numCRModel
        rngCRModelListAnchor.Offset(i, 0) = "<LINK>"
        rngCRModelListAnchor.Offset(i, 1) = ""
        rngCRModelListAnchor.Offset(i, 2) = 1
    Next i
    Range(rngCRModelListAnchor.Offset(1, 0), rngCRModelListAnchor.Offset(numCRModel, 2)).Select
    ActiveWorkbook.Names.Add Name:="NX_" & asn & "_M_CRModelList", RefersTo:=Selection
    Set rngCRModelList = Range("NX_" & asn & "_M_CRModelList")
    Call formatColorAndBorder(rngCRModelList)
    Call addConditionalFormat(Range(rngCRModelListAnchor.Offset(1, 0), rngCRModelListAnchor.Offset(numCRModel, 0)))
    Call addDataValidation(Range(rngCRModelListAnchor.Offset(1, 2), rngCRModelListAnchor.Offset(numCRModel, 2)))
    
    'Resize the EQ Model Table
    For i = 1 To numEQModel
        rngEQModelListAnchor.Offset(i, 0) = "<LINK>"
        rngEQModelListAnchor.Offset(i, 1) = "<LINK>"
        rngEQModelListAnchor.Offset(i, 2) = 1
    Next i
    Range(rngEQModelListAnchor.Offset(1, 0), rngEQModelListAnchor.Offset(numEQModel, 2)).Select
    ActiveWorkbook.Names.Add Name:="NX_" & asn & "_M_EQModelList", RefersTo:=Selection
    Set rngEQModelList = Range("NX_" & asn & "_M_EQModelList")
    Call formatColorAndBorder(rngEQModelList)
    Call addConditionalFormat(Range(rngEQModelListAnchor.Offset(1, 0), rngEQModelListAnchor.Offset(numEQModel, 1)))
    Call addDataValidation(Range(rngEQModelListAnchor.Offset(1, 2), rngEQModelListAnchor.Offset(numEQModel, 2)))
    
    'Resize the CMDTY Model Table
    For i = 1 To numCMDTYModel
        rngCMDTYModelListAnchor.Offset(i, 0) = "<LINK>"
        rngCMDTYModelListAnchor.Offset(i, 1) = "<LINK>"
        rngCMDTYModelListAnchor.Offset(i, 2) = 1
    Next i
    Range(rngCMDTYModelListAnchor.Offset(1, 0), rngCMDTYModelListAnchor.Offset(numCMDTYModel, 2)).Select
    ActiveWorkbook.Names.Add Name:="NX_" & asn & "_M_CMDTYModelList", RefersTo:=Selection
    Set rngCMDTYModelList = Range("NX_" & asn & "_M_CMDTYModelList")
    Call formatColorAndBorder(rngCMDTYModelList)
    Call addConditionalFormat(Range(rngCMDTYModelListAnchor.Offset(1, 0), rngCMDTYModelListAnchor.Offset(numCMDTYModel, 1)))
    Call addDataValidation(Range(rngCMDTYModelListAnchor.Offset(1, 2), rngCMDTYModelListAnchor.Offset(numCMDTYModel, 2)))
    
    'Create Correlation Matrix
    
    rngCorrAnchor.Offset(0, 1) = "DomesticModelFactor1"
    rngCorrAnchor.Offset(1, 0) = "DomesticModelFactor1"
    
    For i = 1 To numFXModel
        rngCorrAnchor.Offset(0, i + 1) = "Foreign" & CStr(i) & "ModelFactor1"
        rngCorrAnchor.Offset(i + 1, 0) = "Foreign" & CStr(i) & "ModelFactor1"
    Next i
    
    For i = 1 To numForeignModel
        rngCorrAnchor.Offset(0, i + numFXModel + 1) = "FX" & CStr(i) & "ModelFactor1"
        rngCorrAnchor.Offset(i + numFXModel + 1, 0) = "FX" & CStr(i) & "ModelFactor1"
    Next i
    
    For i = 1 To numINFModel
        rngCorrAnchor.Offset(0, i + numFXModel + numForeignModel + 1) = "RealRate" & CStr(i) & "Model"
        rngCorrAnchor.Offset(i + numFXModel + numForeignModel + 1, 0) = "RealRate" & CStr(i) & "Model"
    Next i
    
    For i = 1 To numINFModel
        rngCorrAnchor.Offset(0, i + numFXModel + numForeignModel + numINFModel + 1) = "CPI" & CStr(i) & "Model"
        rngCorrAnchor.Offset(i + numFXModel + numForeignModel + numINFModel + 1, 0) = "CPI" & CStr(i) & "Model"
    Next i
    
    For i = 1 To numCRModel
        rngCorrAnchor.Offset(0, i + numFXModel + numForeignModel + 2 * numINFModel + 1) = "CR" & CStr(i) & "Factor1"
        rngCorrAnchor.Offset(i + numFXModel + numForeignModel + 2 * numINFModel + 1, 0) = "CR" & CStr(i) & "Factor1"
    Next i
    
    For i = 1 To numEQModel
        rngCorrAnchor.Offset(0, i + numFXModel + numForeignModel + 2 * numINFModel + numCRModel + 1) = _
                                        "=" & rngEQModelList.Cells(i, 1).Address & "&" & """" & "Factor1" & """"
        rngCorrAnchor.Offset(i + numFXModel + numForeignModel + 2 * numINFModel + numCRModel + 1, 0) = _
                                        "=" & rngEQModelList.Cells(i, 1).Address & "&" & """" & "Factor1" & """"
    Next i
    
    For i = 1 To numCMDTYModel
        rngCorrAnchor.Offset(0, i + numFXModel + numForeignModel + 2 * numINFModel + numCRModel + numEQModel + 1) = _
                                        "=" & rngCMDTYModelList.Cells(i, 1).Address & "&" & """" & "Factor1" & """"
        rngCorrAnchor.Offset(i + numFXModel + numForeignModel + 2 * numINFModel + numCRModel + numEQModel + 1, 0) = _
                                        "=" & rngCMDTYModelList.Cells(i, 1).Address & "&" & """" & "Factor1" & """"
    Next i
    
    For i = 1 To numFXModel + numForeignModel + 2 * numINFModel + numCRModel + numEQModel + numCMDTYModel + 1
        rngCorrAnchor.Offset(i, i) = 1
        For j = i + 1 To numFXModel + numForeignModel + 2 * numINFModel + numCRModel + numEQModel + numCMDTYModel + 1
            rngCorrAnchor.Offset(i, j) = 0
        Next j
    Next i
    
    rngCorrAnchor.Formula = "=nxlibmatrix(" & Range(rngCorrAnchor.Offset(0, 1), rngCorrAnchor.Offset(0, numFXModel + numForeignModel + 2 * numINFModel + numCRModel + numEQModel + numCMDTYModel + 1)).Address & "," _
                                            & Range(rngCorrAnchor.Offset(1, 0), rngCorrAnchor.Offset(numFXModel + numForeignModel + 2 * numINFModel + numCRModel + numEQModel + numCMDTYModel + 1, 0)).Address & "," _
                                            & Range(rngCorrAnchor.Offset(1, 1), rngCorrAnchor.Offset(numFXModel + numForeignModel + 2 * numINFModel + numCRModel + numEQModel + numCMDTYModel + 1, _
                                                                                                        numFXModel + numForeignModel + 2 * numINFModel + numCRModel + numEQModel + numCMDTYModel + 1)).Address & "," _
                                            & """" & "CC_INFB_CRB_EQB_CMDTYB_Corr.Data" & """" & ")"
                                            
    Call formatColorAndBorder(rngCorrAnchor)
    Call formatColorAndBorder(Range(rngCorrAnchor.Offset(1, 1), rngCorrAnchor.Offset(numFXModel + numForeignModel + 2 * numINFModel + numCRModel + numEQModel + numCMDTYModel + 1, _
                                                                                        numFXModel + numForeignModel + 2 * numINFModel + numCRModel + numEQModel + numCMDTYModel + 1)))
    Call formatHeader(Range(rngCorrAnchor.Offset(0, 1), rngCorrAnchor.Offset(0, numFXModel + numForeignModel + 2 * numINFModel + numCRModel + numEQModel + numCMDTYModel + 1)))
    Call formatHeader(Range(rngCorrAnchor.Offset(1, 0), rngCorrAnchor.Offset(numFXModel + numForeignModel + 2 * numINFModel + numCRModel + numEQModel + numCMDTYModel + 1, 0)))

CleanUp:
    Application.EnableEvents = True
    Application.ScreenUpdating = True
    Set rngForeignModels = Nothing
    Set rngForeignModelList = Nothing
    Set rngForeignModelListAnchor = Nothing
    Set rngFXModels = Nothing
    Set rngFXModelList = Nothing
    Set rngFXModelListAnchor = Nothing
    Set rngINFModels = Nothing
    Set rngINFModelList = Nothing
    Set rngINFModelListAnchor = Nothing
    Set rngCRModels = Nothing
    Set rngCRModelList = Nothing
    Set rngCRModelListAnchor = Nothing
    Set rngEQModels = Nothing
    Set rngEQModelList = Nothing
    Set rngEQModelListAnchor = Nothing
    Set rngCMDTYModels = Nothing
    Set rngCMDTYModelList = Nothing
    Set rngCMDTYModelListAnchor = Nothing
    Set rngCorrAnchor = Nothing
    Exit Sub
   
errorHandler:
    Call VBA.MsgBox("Error in resizing the model", vbCritical + vbOKOnly, "Error")
    GoTo CleanUp
    End Sub

Private Sub Worksheet_Activate()

    On Error GoTo CleanUp
    ComboBoxForeignModelNum.Clear
    ComboBoxForeignModelNum.AddItem ("1 Foreign Model")
    ComboBoxForeignModelNum.AddItem ("2 Foreign Models")
    ComboBoxForeignModelNum.AddItem ("4 Foreign Models")
    ComboBoxForeignModelNum.AddItem ("5 Foreign Models")
    ComboBoxForeignModelNum.AddItem ("6 Foreign Models")
    ComboBoxForeignModelNum.AddItem ("7 Foreign Models")
    ComboBoxForeignModelNum.AddItem ("8 Foreign Models")
    ComboBoxForeignModelNum.AddItem ("9 Foreign Models")
    ComboBoxForeignModelNum.AddItem ("10 Foreign Models")
    ComboBoxForeignModelNum.Text = "1 Foreign Model"
    
    ComboBoxINFModelNum.Clear
    ComboBoxINFModelNum.AddItem ("1 Inflation Model")
    ComboBoxINFModelNum.AddItem ("2 Inflation Models")
    ComboBoxINFModelNum.AddItem ("3 Inflation Models")
    ComboBoxINFModelNum.AddItem ("4 Inflation Models")
    ComboBoxINFModelNum.AddItem ("5 Inflation Models")
    ComboBoxINFModelNum.AddItem ("6 Inflation Models")
    ComboBoxINFModelNum.AddItem ("7 Inflation Models")
    ComboBoxINFModelNum.AddItem ("8 Inflation Models")
    ComboBoxINFModelNum.AddItem ("9 Inflation Models")
    ComboBoxINFModelNum.AddItem ("10 Inflation Models")
    ComboBoxINFModelNum.Text = "1 Inflation Model"
    
    ComboBoxCRModelNum.Clear
    ComboBoxCRModelNum.AddItem ("1 CR Model")
    ComboBoxCRModelNum.AddItem ("2 CR Models")
    ComboBoxCRModelNum.AddItem ("3 CR Models")
    ComboBoxCRModelNum.AddItem ("4 CR Models")
    ComboBoxCRModelNum.AddItem ("5 CR Models")
    ComboBoxCRModelNum.AddItem ("6 CR Models")
    ComboBoxCRModelNum.AddItem ("7 CR Models")
    ComboBoxCRModelNum.AddItem ("8 CR Models")
    ComboBoxCRModelNum.AddItem ("9 CR Models")
    ComboBoxCRModelNum.AddItem ("10 CR Models")
    ComboBoxCRModelNum.Text = "1 CR Model"
    
    ComboBoxEQModelNum.Clear
    ComboBoxEQModelNum.AddItem ("1 EQ Model")
    ComboBoxEQModelNum.AddItem ("2 EQ Models")
    ComboBoxEQModelNum.AddItem ("3 EQ Models")
    ComboBoxEQModelNum.AddItem ("4 EQ Models")
    ComboBoxEQModelNum.AddItem ("5 EQ Models")
    ComboBoxEQModelNum.AddItem ("6 EQ Models")
    ComboBoxEQModelNum.AddItem ("7 EQ Models")
    ComboBoxEQModelNum.AddItem ("8 EQ Models")
    ComboBoxEQModelNum.AddItem ("9 EQ Models")
    ComboBoxEQModelNum.AddItem ("10 EQ Models")
    ComboBoxEQModelNum.Text = "1 EQ Model"
    
    ComboBoxCMDTYModelNum.Clear
    ComboBoxCMDTYModelNum.AddItem ("1 CMDTY Model")
    ComboBoxCMDTYModelNum.AddItem ("2 CMDTY Models")
    ComboBoxCMDTYModelNum.AddItem ("3 CMDTY Models")
    ComboBoxCMDTYModelNum.AddItem ("4 CMDTY Models")
    ComboBoxCMDTYModelNum.AddItem ("5 CMDTY Models")
    ComboBoxCMDTYModelNum.AddItem ("6 CMDTY Models")
    ComboBoxCMDTYModelNum.AddItem ("7 CMDTY Models")
    ComboBoxCMDTYModelNum.AddItem ("8 CMDTY Models")
    ComboBoxCMDTYModelNum.AddItem ("9 CMDTY Models")
    ComboBoxCMDTYModelNum.AddItem ("10 CMDTY Models")
    ComboBoxCMDTYModelNum.Text = "1 CMDTY Model"
    
    hasBeenInitialised = True

CleanUp:
    ActiveSheet.Calculate
End Sub


'Resizing the correlation matrix after changing the Factor number for any model
Private Sub Worksheet_Change(ByVal Target As Range)
    On Error GoTo errorHandler
    Application.EnableEvents = False
    Application.ScreenUpdating = False
    
    Dim asn$: asn = ActiveSheet.Name
    Dim rngForeignModelList As Range: Set rngForeignModelList = Range("NX_" & asn & "_M_ForeignModelList")
    Dim numForeignModels%: numForeignModels = rngForeignModelList.Rows.count
    Dim rngForeignModelFactorNumList As Range: Set rngForeignModelFactorNumList = Range(rngForeignModelList.Cells(1, 2), rngForeignModelList.Cells(numForeignModels, 2))
    Dim rngFXModelList As Range: Set rngFXModelList = Range("NX_" & asn & "_M_FXModelList")
    Dim numFXModels%: numFXModels = rngFXModelList.Rows.count
    Dim rngFXModelFactorNumList As Range: Set rngFXModelFactorNumList = Range(rngFXModelList.Cells(1, 2), rngFXModelList.Cells(numFXModels, 2))
    Dim rngINFModelList As Range: Set rngINFModelList = Range("NX_" & asn & "_M_INFModelList")
    Dim numINFModels%: numINFModels = rngINFModelList.Rows.count
    Dim rngCRModelList As Range: Set rngCRModelList = Range("NX_" & asn & "_M_CRModelList")
    Dim numCRModels%: numCRModels = rngCRModelList.Rows.count
    Dim rngCRModelFactorNumList As Range: Set rngCRModelFactorNumList = Range(rngCRModelList.Cells(1, 3), rngCRModelList.Cells(numCRModels, 3))
    Dim rngEQModelList As Range: Set rngEQModelList = Range("NX_" & asn & "_M_EQModelList")
    Dim numEQModels%: numEQModels = rngEQModelList.Rows.count
    Dim rngEQModelFactorNumList As Range: Set rngEQModelFactorNumList = Range(rngEQModelList.Cells(1, 3), rngEQModelList.Cells(numEQModels, 3))
    Dim rngCMDTYModelList As Range: Set rngCMDTYModelList = Range("NX_" & asn & "_M_CMDTYModelList")
    Dim numCMDTYModels%: numCMDTYModels = rngCMDTYModelList.Rows.count
    Dim rngCMDTYModelFactorNumList As Range: Set rngCMDTYModelFactorNumList = Range(rngCMDTYModelList.Cells(1, 3), rngCMDTYModelList.Cells(numCMDTYModels, 3))
    Dim rngIRModelFactorNum As Range: Set rngIRModelFactorNum = Range("NX_" & asn & "_M_IRMOdelFactorNum")
    
    If Intersect(Target, rngForeignModelFactorNumList) Is Nothing And Intersect(Target, rngFXModelFactorNumList) Is Nothing And _
        Intersect(Target, rngCRModelFactorNumList) Is Nothing And Intersect(Target, rngEQModelFactorNumList) Is Nothing And _
        Intersect(Target, rngCMDTYModelFactorNumList) Is Nothing And Intersect(Target, rngIRModelFactorNum) Is Nothing Then
        GoTo CleanUp
    End If
    
    Dim rngCorrAnchor As Range: Set rngCorrAnchor = Range("NX_" & asn & "_M_CorrAnchor")
    rngCorrAnchor.CurrentRegion.Clear
    Dim iIRModelFactorNum%: iIRModelFactorNum = rngIRModelFactorNum.Value
    Dim iFXModelFactorNum%, iForeignModelFactorNum%, iCRModelFactorNum%, iEQModelFactorNum%, iCMDTYModelFactorNum%
    Dim i%, j%
    Dim count%: count = 0
    For i = 1 To iIRModelFactorNum
        count = count + 1
        rngCorrAnchor.Offset(0, count) = "DomesticModelFactor" & CStr(i)
        rngCorrAnchor.Offset(count, 0) = "DomesticModelFactor" & CStr(i)
    Next i
    
    For i = 1 To numFXModels
        iFXModelFactorNum = rngFXModelList.Cells(i, 2).Value
        For j = 1 To iFXModelFactorNum
            count = count + 1
            rngCorrAnchor.Offset(0, count) = "FX" & CStr(i) & "ModelFactor" & CStr(j)
            rngCorrAnchor.Offset(count, 0) = "FX" & CStr(i) & "ModelFactor" & CStr(j)
        Next j
    Next i
    
    For i = 1 To numForeignModels
        iForeignModelFactorNum = rngForeignModelList.Cells(i, 2).Value
        For j = 1 To iForeignModelFactorNum
            count = count + 1
            rngCorrAnchor.Offset(0, count) = "Foreign" & CStr(i) & "ModelFactor" & CStr(j)
            rngCorrAnchor.Offset(count, 0) = "Foreign" & CStr(i) & "ModelFactor" & CStr(j)
        Next j
    Next i
    
    For i = 1 To numINFModels
        count = count + 1
        rngCorrAnchor.Offset(0, count) = "RealRate" & CStr(i) & "Model"
        rngCorrAnchor.Offset(count, 0) = "RealRate" & CStr(i) & "Model"
    Next i
    
    For i = 1 To numINFModels
        count = count + 1
        rngCorrAnchor.Offset(0, count) = "CPI" & CStr(i) & "Model"
        rngCorrAnchor.Offset(count, 0) = "CPI" & CStr(i) & "Model"
    Next i
    
    For i = 1 To numCRModels
        iCRModelFactorNum = rngCRModelList.Cells(i, 3).Value
        For j = 1 To iCRModelFactorNum
            count = count + 1
            rngCorrAnchor.Offset(0, count) = "CR" & CStr(i) & "Factor" & CStr(j)
            rngCorrAnchor.Offset(count, 0) = "CR" & CStr(i) & "Factor" & CStr(j)
        Next j
    Next i

    For i = 1 To numEQModels
        iEQModelFactorNum = rngEQModelList.Cells(i, 3).Value
        For j = 1 To iEQModelFactorNum
            count = count + 1
            rngCorrAnchor.Offset(0, count) = "=" & rngEQModelList.Cells(i, 1).Address & "&" & """" & "Factor" & CStr(j) & """"
            rngCorrAnchor.Offset(count, 0) = "=" & rngEQModelList.Cells(i, 1).Address & "&" & """" & "Factor" & CStr(j) & """"
        Next j
    Next i
    
    For i = 1 To numCMDTYModels
        iCMDTYModelFactorNum = rngCMDTYModelList.Cells(i, 3).Value
        For j = 1 To iCMDTYModelFactorNum
            count = count + 1
            rngCorrAnchor.Offset(0, count) = "=" & rngCMDTYModelList.Cells(i, 1).Address & "&" & """" & "Factor" & CStr(j) & """"
            rngCorrAnchor.Offset(count, 0) = "=" & rngCMDTYModelList.Cells(i, 1).Address & "&" & """" & "Factor" & CStr(j) & """"
        Next j
    Next i
    
    For i = 1 To count
        rngCorrAnchor.Offset(i, i) = 1
        For j = i + 1 To count
            rngCorrAnchor.Offset(i, j) = 0
        Next j
    Next i
    
    rngCorrAnchor.Formula = "=nxlibmatrix(" & Range(rngCorrAnchor.Offset(0, 1), rngCorrAnchor.Offset(0, count)).Address & "," _
                                            & Range(rngCorrAnchor.Offset(1, 0), rngCorrAnchor.Offset(count, 0)).Address & "," _
                                            & Range(rngCorrAnchor.Offset(1, 1), rngCorrAnchor.Offset(count, count)).Address & "," _
                                            & """" & "CC_INFB_CRB_EQB_CMDTYB_Corr.Data" & """" & ")"
    
    
    Call formatColorAndBorder(rngCorrAnchor)
    Call formatColorAndBorder(Range(rngCorrAnchor.Offset(1, 1), rngCorrAnchor.Offset(count, count)))
    Call formatHeader(Range(rngCorrAnchor.Offset(0, 1), rngCorrAnchor.Offset(0, count)))
    Call formatHeader(Range(rngCorrAnchor.Offset(1, 0), rngCorrAnchor.Offset(count, 0)))
       
    Range(rngCorrAnchor.Offset(1, 1), rngCorrAnchor.Offset(count, count)).Select
    
CleanUp:
    Application.EnableEvents = True
    Application.ScreenUpdating = True
    Set rngForeignModelList = Nothing
    Set rngForeignModelFactorNumList = Nothing
    Set rngFXModelList = Nothing
    Set rngFXModelFactorNumList = Nothing
    Set rngINFModelList = Nothing
    Set rngCRModelList = Nothing
    Set rngCRModelFactorNumList = Nothing
    Set rngEQModelList = Nothing
    Set rngEQModelFactorNumList = Nothing
    Set rngCMDTYModelList = Nothing
    Set rngCMDTYModelFactorNumList = Nothing
    Set rngIRModelFactorNum = Nothing
    Set rngCorrAnchor = Nothing
    Exit Sub

errorHandler:
    Call VBA.MsgBox("Error in resizing the corrlation matrix", vbCritical + vbOKOnly, "Error")
    GoTo CleanUp
End Sub





''' Formatting Module

Private Sub addConditionalFormat(tempRng As Range)
    tempRng.Select
    Selection.FormatConditions.Delete
    Selection.FormatConditions.Add Type:=xlCellValue, Operator:=xlEqual, _
        Formula1:="=""<LINK>"""
    Selection.FormatConditions(1).Interior.ColorIndex = 3
        
    Cells(1, 1).Select
End Sub

Private Sub formatHeader(tempRng As Range)
    tempRng.Select
    With Selection.Interior
        .Pattern = xlSolid
        .PatternColorIndex = xlAutomatic
        .Color = 10040115
    End With
    With Selection.Font
        .ColorIndex = 2
        .Name = "Calibri"
        .Size = 11
    End With
    Cells(1, 1).Select
End Sub

Private Sub formatColorAndBorder(tempRng As Range)
    tempRng.Select
    Selection.HorizontalAlignment = xlCenter
    Selection.Borders(xlDiagonalDown).LineStyle = xlNone
    Selection.Borders(xlDiagonalUp).LineStyle = xlNone
    With Selection.Borders(xlEdgeLeft)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlEdgeTop)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlEdgeRight)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .Weight = xlThin
    End With
    Selection.Borders(xlInsideVertical).LineStyle = xlNone
    Selection.Borders(xlInsideHorizontal).LineStyle = xlNone
    With Selection.Interior
        .Pattern = xlSolid
        .PatternColorIndex = xlAutomatic
        .ColorIndex = 2
    End With
    With Selection.Font
        .Name = "Calibri"
        .Size = 11
    End With
    Cells(1, 1).Select

End Sub

Private Sub addDataValidation(tempRng As Range)
    tempRng.Select
    With Selection.Validation
        .Delete
        .Add Type:=xlValidateWholeNumber, AlertStyle:=xlValidAlertStop, _
        Operator:=xlGreaterEqual, Formula1:="1"
        .IgnoreBlank = True
        .InCellDropdown = True
        .InputTitle = ""
        .ErrorTitle = "Incorrect Input"
        .InputMessage = ""
        .ErrorMessage = "Please input an integer"
        .ShowInput = True
        .ShowError = True
    End With
    Cells(1, 1).Select
End Sub

Attribute VB_Name = "Sheet36"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "ComboBoxForeignModelNum, 1, 0, MSForms, ComboBox"
Attribute VB_Control = "ResizeButton, 2, 1, MSForms, CommandButton"
Attribute VB_Control = "CreateButton, 3, 2, MSForms, CommandButton"
Attribute VB_Control = "ComboBoxINFModelNum, 4, 3, MSForms, ComboBox"
Attribute VB_Control = "ComboBoxCRModelNum, 5, 4, MSForms, ComboBox"
Attribute VB_Control = "ComboBoxEQModelNum, 6, 5, MSForms, ComboBox"
Attribute VB_Control = "ComboBoxCMDTYModelNum, 7, 6, MSForms, ComboBox"
Option Explicit
Private hasBeenInitialised As Boolean


Private Sub CreateButton_Click()
    On Error GoTo errorHandler
    Application.EnableEvents = False
    Dim asn$: asn = ActiveSheet.Name
    Dim rngForeignModelList As Range: Set rngForeignModelList = Range("NX_" & asn & "_M_ForeignModelList")
    Dim numForeignModels%: numForeignModels = rngForeignModelList.Rows.count
    Dim rngForeignModelListAnchor As Range: Set rngForeignModelListAnchor = rngForeignModelList.Cells(1, 1).Offset(-1, 0)
    Dim rngForeignModels As Range: Set rngForeignModels = Range("NX_" & asn & "_M_ForeignModels")
    rngForeignModels.Formula = "=nxlibdata(" & rngForeignModelListAnchor.Address & "," _
                                & Range(rngForeignModelListAnchor.Offset(1, 0), rngForeignModelListAnchor.Offset(numForeignModels, 0)).Address _
                                & "," & """" & "HY_UNIVERSAL_ForeignModel.Data" & """" & ")"
    
    Dim rngFXModelList As Range: Set rngFXModelList = Range("NX_" & asn & "_M_FXModelList")
    Dim numFXModels%: numFXModels = rngFXModelList.Rows.count
    Dim rngFXModelListAnchor As Range: Set rngFXModelListAnchor = rngFXModelList.Cells(1, 1).Offset(-1, 0)
    Dim rngFXModels As Range: Set rngFXModels = Range("NX_" & asn & "_M_FXModels")
    rngFXModels.Formula = "=nxlibdata(" & rngFXModelListAnchor.Address & "," _
                                    & Range(rngFXModelListAnchor.Offset(1, 0), rngFXModelListAnchor.Offset(numFXModels, 0)).Address _
                                    & "," & """" & "HY_UNIVERSAL_FXModel.Data" & """" & ")"
    
    Dim rngINFModelList As Range: Set rngINFModelList = Range("NX_" & asn & "_M_INFModelList")
    Dim numINFModels%: numINFModels = rngINFModelList.Rows.count
    Dim rngINFModelListAnchor As Range: Set rngINFModelListAnchor = rngINFModelList.Cells(1, 1).Offset(-1, 0)
    Dim rngINFModels As Range: Set rngINFModels = Range("NX_" & asn & "_M_INFModels")
    rngINFModels.Formula = "=nxlibdata(" & Range(rngINFModelListAnchor, rngINFModelListAnchor.Offset(0, 1)).Address & "," _
                                        & Range(rngINFModelListAnchor.Offset(1, 0), rngINFModelListAnchor.Offset(numINFModels, 1)).Address _
                                        & "," & """" & "HY_UNIVERSAL_INFModel.Data" & """" & ")"
    
    Dim rngCRModelList As Range: Set rngCRModelList = Range("NX_" & asn & "_M_CRModelList")
    Dim numCRModels%: numCRModels = rngCRModelList.Rows.count
    Dim rngCRModelListAnchor As Range: Set rngCRModelListAnchor = rngCRModelList.Cells(1, 1).Offset(-1, 0)
    Dim rngCRModels As Range: Set rngCRModels = Range("NX_" & asn & "_M_CRModels")
    rngCRModels.Formula = "=nxlibdata(" & Range(rngCRModelListAnchor, rngCRModelListAnchor.Offset(0, 1)).Address & "," _
                                        & Range(rngCRModelListAnchor.Offset(1, 0), rngCRModelListAnchor.Offset(numCRModels, 1)).Address _
                                        & "," & """" & "HY_UNIVERSAL_CRModel.Data" & """" & ")"

    Dim rngEQModelList As Range: Set rngEQModelList = Range("NX_" & asn & "_M_EQModelList")
    Dim numEQModels%: numEQModels = rngEQModelList.Rows.count
    Dim rngEQModelListAnchor As Range: Set rngEQModelListAnchor = rngEQModelList.Cells(1, 1).Offset(-1, 0)
    Dim rngEQModels As Range: Set rngEQModels = Range("NX_" & asn & "_M_EQModels")
    rngEQModels.Formula = "=nxlibdata(" & Range(rngEQModelListAnchor, rngEQModelListAnchor.Offset(0, 1)).Address & "," _
                                        & Range(rngEQModelListAnchor.Offset(1, 0), rngEQModelListAnchor.Offset(numEQModels, 1)).Address _
                                        & "," & """" & "HY_UNIVERSAL_EQModel.Data" & """" & ")"
    
    Dim rngCMDTYModelList As Range: Set rngCMDTYModelList = Range("NX_" & asn & "_M_CMDTYModelList")
    Dim numCMDTYModels%: numCMDTYModels = rngCMDTYModelList.Rows.count
    Dim rngCMDTYModelListAnchor As Range: Set rngCMDTYModelListAnchor = rngCMDTYModelList.Cells(1, 1).Offset(-1, 0)
    Dim rngCMDTYModels As Range: Set rngCMDTYModels = Range("NX_" & asn & "_M_CMDTYModels")
    rngCMDTYModels.Formula = "=nxlibdata(" & Range(rngCMDTYModelListAnchor, rngCMDTYModelListAnchor.Offset(0, 1)).Address & "," _
                                        & Range(rngCMDTYModelListAnchor.Offset(1, 0), rngCMDTYModelListAnchor.Offset(numCMDTYModels, 1)).Address _
                                        & "," & """" & "HY_UNIVERSAL_CMDTYModel.Data" & """" & ")"
    
    
    ActiveSheet.Calculate
    
CleanUp:
    Application.EnableEvents = True
    Set rngForeignModelList = Nothing
    Set rngForeignModelListAnchor = Nothing
    Set rngForeignModels = Nothing
    Set rngFXModelList = Nothing
    Set rngFXModelListAnchor = Nothing
    Set rngFXModels = Nothing
    Set rngINFModelList = Nothing
    Set rngINFModelListAnchor = Nothing
    Set rngINFModels = Nothing
    Set rngCRModelList = Nothing
    Set rngCRModelListAnchor = Nothing
    Set rngCRModels = Nothing
    Set rngEQModelList = Nothing
    Set rngEQModelListAnchor = Nothing
    Set rngEQModels = Nothing
    Set rngCMDTYModelList = Nothing
    Set rngCMDTYModelListAnchor = Nothing
    Set rngCMDTYModels = Nothing
    Exit Sub
errorHandler:
    Call VBA.MsgBox("Error in creating model table data", vbCritical + vbOKOnly, "Error")
    GoTo CleanUp
    End Sub

Private Sub ResizeButton_Click()
    On Error GoTo CleanUp
    Application.ScreenUpdating = False
    Dim temp1 As Variant: temp1 = Split(ComboBoxForeignModelNum.Text, " ")
    Dim temp2 As Variant: temp2 = Split(ComboBoxINFModelNum.Text, " ")
    Dim temp3 As Variant: temp3 = Split(ComboBoxCRModelNum.Text, " ")
    Dim temp4 As Variant: temp4 = Split(ComboBoxEQModelNum.Text, " ")
    Dim temp5 As Variant: temp5 = Split(ComboBoxCMDTYModelNum.Text, " ")
    If Not IsNumeric(temp1(0)) Or Not IsNumeric(temp2(0)) Or Not IsNumeric(temp3(0)) _
                            Or Not IsNumeric(temp4(0)) Or Not IsNumeric(temp5(0)) Then
        MsgBox "Fatal error when resizing ComboBox"
        GoTo CleanUp
    Else
        Resize CInt(temp1(0)), CInt(temp2(0)), CInt(temp3(0)), CInt(temp4(0)), CInt(temp5(0))
    End If
    On Error GoTo 0
CleanUp:
    Application.ScreenUpdating = True
    ActiveSheet.Calculate
End Sub


Public Sub Resize(numForeignModel As Integer, numINFModel As Integer, numCRModel As Integer, numEQModel As Integer, numCMDTYModel As Integer)
    On Error GoTo errorHandler
    Application.EnableEvents = False
    Application.ScreenUpdating = False
    
    Dim numFXModel%: numFXModel = numForeignModel
    Dim asn$: asn = ActiveSheet.Name
    Dim rngForeignModels As Range: Set rngForeignModels = Range("NX_" & asn & "_M_ForeignModels")
    Dim rngForeignModelList As Range: Set rngForeignModelList = Range("NX_" & asn & "_M_ForeignModelList")
    Dim rngForeignModelListAnchor As Range: Set rngForeignModelListAnchor = rngForeignModelList.Cells(1, 1).Offset(-1, 0)
    Dim rngFXModels As Range: Set rngFXModels = Range("NX_" & asn & "_M_FXModels")
    Dim rngFXModelList As Range: Set rngFXModelList = Range("NX_" & asn & "_M_FXModelList")
    Dim rngFXModelListAnchor As Range: Set rngFXModelListAnchor = rngFXModelList.Cells(1, 1).Offset(-1, 0)
    Dim rngINFModels As Range: Set rngINFModels = Range("NX_" & asn & "_M_INFModels")
    Dim rngINFModelList As Range: Set rngINFModelList = Range("NX_" & asn & "_M_INFModelList")
    Dim rngINFModelListAnchor As Range: Set rngINFModelListAnchor = rngINFModelList.Cells(1, 1).Offset(-1, 0)
    Dim rngCRModels As Range: Set rngCRModels = Range("NX_" & asn & "_M_CRModels")
    Dim rngCRModelList As Range: Set rngCRModelList = Range("NX_" & asn & "_M_CRModelList")
    Dim rngCRModelListAnchor As Range: Set rngCRModelListAnchor = rngCRModelList.Cells(1, 1).Offset(-1, 0)
    Dim rngEQModels As Range: Set rngEQModels = Range("NX_" & asn & "_M_EQModels")
    Dim rngEQModelList As Range: Set rngEQModelList = Range("NX_" & asn & "_M_EQModelList")
    Dim rngEQModelListAnchor As Range: Set rngEQModelListAnchor = rngEQModelList.Cells(1, 1).Offset(-1, 0)
    Dim rngCMDTYModels As Range: Set rngCMDTYModels = Range("NX_" & asn & "_M_CMDTYModels")
    Dim rngCMDTYModelList As Range: Set rngCMDTYModelList = Range("NX_" & asn & "_M_CMDTYModelList")
    Dim rngCMDTYModelListAnchor As Range: Set rngCMDTYModelListAnchor = rngCMDTYModelList.Cells(1, 1).Offset(-1, 0)
    Dim rngIRModelFactorNum As Range: Set rngIRModelFactorNum = Range("NX_" & asn & "_M_IRModelFactorNum")
    Dim rngCorrAnchor As Range: Set rngCorrAnchor = Range("NX_" & asn & "_M_CorrAnchor")
    
    rngForeignModelList.Clear
    rngFXModelList.Clear
    rngINFModelList.Clear
    rngCRModelList.Clear
    rngEQModelList.Clear
    rngCMDTYModelList.Clear
    rngCorrAnchor.CurrentRegion.Clear
    rngForeignModels = "<LINK>"
    rngFXModels = "<LINK>"
    rngINFModels = "<LINK>"
    rngCRModels = "<LINK>"
    rngEQModels = "<LINK>"
    rngCMDTYModels = "<LINK>"
    rngIRModelFactorNum.Value = 1
    
    'Resize the Foreign Model table
    Dim i%, j%
    For i = 1 To numForeignModel
        rngForeignModelListAnchor.Offset(i, 0) = "<LINK>"
        rngForeignModelListAnchor.Offset(i, 1) = 1
    Next i
    Range(rngForeignModelListAnchor.Offset(1, 0), rngForeignModelListAnchor.Offset(numForeignModel, 1)).Select
    ActiveWorkbook.Names.Add Name:="NX_" & asn & "_M_ForeignModelList", RefersTo:=Selection
    Set rngForeignModelList = Range("NX_" & asn & "_M_ForeignModelList")
    Call formatColorAndBorder(rngForeignModelList)
    Call addConditionalFormat(Range(rngForeignModelListAnchor.Offset(1, 0), rngForeignModelListAnchor.Offset(numForeignModel, 0)))
    Call addDataValidation(Range(rngForeignModelListAnchor.Offset(1, 1), rngForeignModelListAnchor.Offset(numForeignModel, 1)))
        
    'Resize the FX Model Table
    For i = 1 To numFXModel
        rngFXModelListAnchor.Offset(i, 0) = "<LINK>"
        rngFXModelListAnchor.Offset(i, 1) = 1
    Next i
    Range(rngFXModelListAnchor.Offset(1, 0), rngFXModelListAnchor.Offset(numFXModel, 1)).Select
    ActiveWorkbook.Names.Add Name:="NX_" & asn & "_M_FXModelList", RefersTo:=Selection
    Set rngFXModelList = Range("NX_" & asn & "_M_FXModelList")
    Call formatColorAndBorder(rngFXModelList)
    Call addConditionalFormat(Range(rngFXModelListAnchor.Offset(1, 0), rngFXModelListAnchor.Offset(numFXModel, 0)))
    Call addDataValidation(Range(rngFXModelListAnchor.Offset(1, 1), rngFXModelListAnchor.Offset(numFXModel, 1)))
          
    'Resize the Inflation Model Table
    For i = 1 To numINFModel
        rngINFModelListAnchor.Offset(i, 0) = "<LINK>"
        rngINFModelListAnchor.Offset(i, 1) = "<LINK>"
    Next i
    Range(rngINFModelListAnchor.Offset(1, 0), rngINFModelListAnchor.Offset(numINFModel, 1)).Select
    ActiveWorkbook.Names.Add Name:="NX_" & asn & "_M_INFModelList", RefersTo:=Selection
    Set rngINFModelList = Range("NX_" & asn & "_M_INFModelList")
    Call formatColorAndBorder(rngINFModelList)
    Call addConditionalFormat(Range(rngINFModelListAnchor.Offset(1, 0), rngINFModelListAnchor.Offset(numINFModel, 1)))
    
    'Resize the CR Model Table
    For i = 1 To numCRModel
        rngCRModelListAnchor.Offset(i, 0) = "<LINK>"
        rngCRModelListAnchor.Offset(i, 1) = ""
        rngCRModelListAnchor.Offset(i, 2) = 1
    Next i
    Range(rngCRModelListAnchor.Offset(1, 0), rngCRModelListAnchor.Offset(numCRModel, 2)).Select
    ActiveWorkbook.Names.Add Name:="NX_" & asn & "_M_CRModelList", RefersTo:=Selection
    Set rngCRModelList = Range("NX_" & asn & "_M_CRModelList")
    Call formatColorAndBorder(rngCRModelList)
    Call addConditionalFormat(Range(rngCRModelListAnchor.Offset(1, 0), rngCRModelListAnchor.Offset(numCRModel, 0)))
    Call addDataValidation(Range(rngCRModelListAnchor.Offset(1, 2), rngCRModelListAnchor.Offset(numCRModel, 2)))
    
    'Resize the EQ Model Table
    For i = 1 To numEQModel
        rngEQModelListAnchor.Offset(i, 0) = "<LINK>"
        rngEQModelListAnchor.Offset(i, 1) = "<LINK>"
        rngEQModelListAnchor.Offset(i, 2) = 1
    Next i
    Range(rngEQModelListAnchor.Offset(1, 0), rngEQModelListAnchor.Offset(numEQModel, 2)).Select
    ActiveWorkbook.Names.Add Name:="NX_" & asn & "_M_EQModelList", RefersTo:=Selection
    Set rngEQModelList = Range("NX_" & asn & "_M_EQModelList")
    Call formatColorAndBorder(rngEQModelList)
    Call addConditionalFormat(Range(rngEQModelListAnchor.Offset(1, 0), rngEQModelListAnchor.Offset(numEQModel, 1)))
    Call addDataValidation(Range(rngEQModelListAnchor.Offset(1, 2), rngEQModelListAnchor.Offset(numEQModel, 2)))
    
    'Resize the CMDTY Model Table
    For i = 1 To numCMDTYModel
        rngCMDTYModelListAnchor.Offset(i, 0) = "<LINK>"
        rngCMDTYModelListAnchor.Offset(i, 1) = "<LINK>"
        rngCMDTYModelListAnchor.Offset(i, 2) = 1
    Next i
    Range(rngCMDTYModelListAnchor.Offset(1, 0), rngCMDTYModelListAnchor.Offset(numCMDTYModel, 2)).Select
    ActiveWorkbook.Names.Add Name:="NX_" & asn & "_M_CMDTYModelList", RefersTo:=Selection
    Set rngCMDTYModelList = Range("NX_" & asn & "_M_CMDTYModelList")
    Call formatColorAndBorder(rngCMDTYModelList)
    Call addConditionalFormat(Range(rngCMDTYModelListAnchor.Offset(1, 0), rngCMDTYModelListAnchor.Offset(numCMDTYModel, 1)))
    Call addDataValidation(Range(rngCMDTYModelListAnchor.Offset(1, 2), rngCMDTYModelListAnchor.Offset(numCMDTYModel, 2)))
    
    'Create Correlation Matrix
    
    rngCorrAnchor.Offset(0, 1) = "DomesticModelFactor1"
    rngCorrAnchor.Offset(1, 0) = "DomesticModelFactor1"
    
    For i = 1 To numFXModel
        rngCorrAnchor.Offset(0, i + 1) = "Foreign" & CStr(i) & "ModelFactor1"
        rngCorrAnchor.Offset(i + 1, 0) = "Foreign" & CStr(i) & "ModelFactor1"
    Next i
    
    For i = 1 To numForeignModel
        rngCorrAnchor.Offset(0, i + numFXModel + 1) = "FX" & CStr(i) & "ModelFactor1"
        rngCorrAnchor.Offset(i + numFXModel + 1, 0) = "FX" & CStr(i) & "ModelFactor1"
    Next i
    
    For i = 1 To numINFModel
        rngCorrAnchor.Offset(0, i + numFXModel + numForeignModel + 1) = "RealRate" & CStr(i) & "Model"
        rngCorrAnchor.Offset(i + numFXModel + numForeignModel + 1, 0) = "RealRate" & CStr(i) & "Model"
    Next i
    
    For i = 1 To numINFModel
        rngCorrAnchor.Offset(0, i + numFXModel + numForeignModel + numINFModel + 1) = "CPI" & CStr(i) & "Model"
        rngCorrAnchor.Offset(i + numFXModel + numForeignModel + numINFModel + 1, 0) = "CPI" & CStr(i) & "Model"
    Next i
    
    For i = 1 To numCRModel
        rngCorrAnchor.Offset(0, i + numFXModel + numForeignModel + 2 * numINFModel + 1) = "CR" & CStr(i) & "Factor1"
        rngCorrAnchor.Offset(i + numFXModel + numForeignModel + 2 * numINFModel + 1, 0) = "CR" & CStr(i) & "Factor1"
    Next i
    
    For i = 1 To numEQModel
        rngCorrAnchor.Offset(0, i + numFXModel + numForeignModel + 2 * numINFModel + numCRModel + 1) = _
                                        "=" & rngEQModelList.Cells(i, 1).Address & "&" & """" & "Factor1" & """"
        rngCorrAnchor.Offset(i + numFXModel + numForeignModel + 2 * numINFModel + numCRModel + 1, 0) = _
                                        "=" & rngEQModelList.Cells(i, 1).Address & "&" & """" & "Factor1" & """"
    Next i
    
    For i = 1 To numCMDTYModel
        rngCorrAnchor.Offset(0, i + numFXModel + numForeignModel + 2 * numINFModel + numCRModel + numEQModel + 1) = _
                                        "=" & rngCMDTYModelList.Cells(i, 1).Address & "&" & """" & "Factor1" & """"
        rngCorrAnchor.Offset(i + numFXModel + numForeignModel + 2 * numINFModel + numCRModel + numEQModel + 1, 0) = _
                                        "=" & rngCMDTYModelList.Cells(i, 1).Address & "&" & """" & "Factor1" & """"
    Next i
    
    For i = 1 To numFXModel + numForeignModel + 2 * numINFModel + numCRModel + numEQModel + numCMDTYModel + 1
        rngCorrAnchor.Offset(i, i) = 1
        For j = i + 1 To numFXModel + numForeignModel + 2 * numINFModel + numCRModel + numEQModel + numCMDTYModel + 1
            rngCorrAnchor.Offset(i, j) = 0
        Next j
    Next i
    
    rngCorrAnchor.Formula = "=nxlibmatrix(" & Range(rngCorrAnchor.Offset(0, 1), rngCorrAnchor.Offset(0, numFXModel + numForeignModel + 2 * numINFModel + numCRModel + numEQModel + numCMDTYModel + 1)).Address & "," _
                                            & Range(rngCorrAnchor.Offset(1, 0), rngCorrAnchor.Offset(numFXModel + numForeignModel + 2 * numINFModel + numCRModel + numEQModel + numCMDTYModel + 1, 0)).Address & "," _
                                            & Range(rngCorrAnchor.Offset(1, 1), rngCorrAnchor.Offset(numFXModel + numForeignModel + 2 * numINFModel + numCRModel + numEQModel + numCMDTYModel + 1, _
                                                                                                        numFXModel + numForeignModel + 2 * numINFModel + numCRModel + numEQModel + numCMDTYModel + 1)).Address & "," _
                                            & """" & "HY_UNIVERSAL_Corr.Data" & """" & ")"
                                            
    Call formatColorAndBorder(rngCorrAnchor)
    Call formatColorAndBorder(Range(rngCorrAnchor.Offset(1, 1), rngCorrAnchor.Offset(numFXModel + numForeignModel + 2 * numINFModel + numCRModel + numEQModel + numCMDTYModel + 1, _
                                                                                        numFXModel + numForeignModel + 2 * numINFModel + numCRModel + numEQModel + numCMDTYModel + 1)))
    Call formatHeader(Range(rngCorrAnchor.Offset(0, 1), rngCorrAnchor.Offset(0, numFXModel + numForeignModel + 2 * numINFModel + numCRModel + numEQModel + numCMDTYModel + 1)))
    Call formatHeader(Range(rngCorrAnchor.Offset(1, 0), rngCorrAnchor.Offset(numFXModel + numForeignModel + 2 * numINFModel + numCRModel + numEQModel + numCMDTYModel + 1, 0)))

CleanUp:
    Application.EnableEvents = True
    Application.ScreenUpdating = True
    Set rngForeignModels = Nothing
    Set rngForeignModelList = Nothing
    Set rngForeignModelListAnchor = Nothing
    Set rngFXModels = Nothing
    Set rngFXModelList = Nothing
    Set rngFXModelListAnchor = Nothing
    Set rngINFModels = Nothing
    Set rngINFModelList = Nothing
    Set rngINFModelListAnchor = Nothing
    Set rngCRModels = Nothing
    Set rngCRModelList = Nothing
    Set rngCRModelListAnchor = Nothing
    Set rngEQModels = Nothing
    Set rngEQModelList = Nothing
    Set rngEQModelListAnchor = Nothing
    Set rngCMDTYModels = Nothing
    Set rngCMDTYModelList = Nothing
    Set rngCMDTYModelListAnchor = Nothing
    Set rngCorrAnchor = Nothing
    Exit Sub
   
errorHandler:
    Call VBA.MsgBox("Error in resizing the model", vbCritical + vbOKOnly, "Error")
    GoTo CleanUp
    End Sub

Private Sub Worksheet_Activate()

    On Error GoTo CleanUp
    ComboBoxForeignModelNum.Clear
    ComboBoxForeignModelNum.AddItem ("1 Foreign Model")
    ComboBoxForeignModelNum.AddItem ("2 Foreign Models")
    ComboBoxForeignModelNum.AddItem ("4 Foreign Models")
    ComboBoxForeignModelNum.AddItem ("5 Foreign Models")
    ComboBoxForeignModelNum.AddItem ("6 Foreign Models")
    ComboBoxForeignModelNum.AddItem ("7 Foreign Models")
    ComboBoxForeignModelNum.AddItem ("8 Foreign Models")
    ComboBoxForeignModelNum.AddItem ("9 Foreign Models")
    ComboBoxForeignModelNum.AddItem ("10 Foreign Models")
    ComboBoxForeignModelNum.Text = "1 Foreign Model"
    
    ComboBoxINFModelNum.Clear
    ComboBoxINFModelNum.AddItem ("1 Inflation Model")
    ComboBoxINFModelNum.AddItem ("2 Inflation Models")
    ComboBoxINFModelNum.AddItem ("3 Inflation Models")
    ComboBoxINFModelNum.AddItem ("4 Inflation Models")
    ComboBoxINFModelNum.AddItem ("5 Inflation Models")
    ComboBoxINFModelNum.AddItem ("6 Inflation Models")
    ComboBoxINFModelNum.AddItem ("7 Inflation Models")
    ComboBoxINFModelNum.AddItem ("8 Inflation Models")
    ComboBoxINFModelNum.AddItem ("9 Inflation Models")
    ComboBoxINFModelNum.AddItem ("10 Inflation Models")
    ComboBoxINFModelNum.Text = "1 Inflation Model"
    
    ComboBoxCRModelNum.Clear
    ComboBoxCRModelNum.AddItem ("1 CR Model")
    ComboBoxCRModelNum.AddItem ("2 CR Models")
    ComboBoxCRModelNum.AddItem ("3 CR Models")
    ComboBoxCRModelNum.AddItem ("4 CR Models")
    ComboBoxCRModelNum.AddItem ("5 CR Models")
    ComboBoxCRModelNum.AddItem ("6 CR Models")
    ComboBoxCRModelNum.AddItem ("7 CR Models")
    ComboBoxCRModelNum.AddItem ("8 CR Models")
    ComboBoxCRModelNum.AddItem ("9 CR Models")
    ComboBoxCRModelNum.AddItem ("10 CR Models")
    ComboBoxCRModelNum.Text = "1 CR Model"
    
    ComboBoxEQModelNum.Clear
    ComboBoxEQModelNum.AddItem ("1 EQ Model")
    ComboBoxEQModelNum.AddItem ("2 EQ Models")
    ComboBoxEQModelNum.AddItem ("3 EQ Models")
    ComboBoxEQModelNum.AddItem ("4 EQ Models")
    ComboBoxEQModelNum.AddItem ("5 EQ Models")
    ComboBoxEQModelNum.AddItem ("6 EQ Models")
    ComboBoxEQModelNum.AddItem ("7 EQ Models")
    ComboBoxEQModelNum.AddItem ("8 EQ Models")
    ComboBoxEQModelNum.AddItem ("9 EQ Models")
    ComboBoxEQModelNum.AddItem ("10 EQ Models")
    ComboBoxEQModelNum.Text = "1 EQ Model"
    
    ComboBoxCMDTYModelNum.Clear
    ComboBoxCMDTYModelNum.AddItem ("1 CMDTY Model")
    ComboBoxCMDTYModelNum.AddItem ("2 CMDTY Models")
    ComboBoxCMDTYModelNum.AddItem ("3 CMDTY Models")
    ComboBoxCMDTYModelNum.AddItem ("4 CMDTY Models")
    ComboBoxCMDTYModelNum.AddItem ("5 CMDTY Models")
    ComboBoxCMDTYModelNum.AddItem ("6 CMDTY Models")
    ComboBoxCMDTYModelNum.AddItem ("7 CMDTY Models")
    ComboBoxCMDTYModelNum.AddItem ("8 CMDTY Models")
    ComboBoxCMDTYModelNum.AddItem ("9 CMDTY Models")
    ComboBoxCMDTYModelNum.AddItem ("10 CMDTY Models")
    ComboBoxCMDTYModelNum.Text = "1 CMDTY Model"
    
    hasBeenInitialised = True

CleanUp:
    ActiveSheet.Calculate
End Sub


'Resizing the correlation matrix after changing the Factor number for any model
Private Sub Worksheet_Change(ByVal Target As Range)
    On Error GoTo errorHandler
    Application.EnableEvents = False
    Application.ScreenUpdating = False
    
    Dim asn$: asn = ActiveSheet.Name
    Dim rngForeignModelList As Range: Set rngForeignModelList = Range("NX_" & asn & "_M_ForeignModelList")
    Dim numForeignModels%: numForeignModels = rngForeignModelList.Rows.count
    Dim rngForeignModelFactorNumList As Range: Set rngForeignModelFactorNumList = Range(rngForeignModelList.Cells(1, 2), rngForeignModelList.Cells(numForeignModels, 2))
    Dim rngFXModelList As Range: Set rngFXModelList = Range("NX_" & asn & "_M_FXModelList")
    Dim numFXModels%: numFXModels = rngFXModelList.Rows.count
    Dim rngFXModelFactorNumList As Range: Set rngFXModelFactorNumList = Range(rngFXModelList.Cells(1, 2), rngFXModelList.Cells(numFXModels, 2))
    Dim rngINFModelList As Range: Set rngINFModelList = Range("NX_" & asn & "_M_INFModelList")
    Dim numINFModels%: numINFModels = rngINFModelList.Rows.count
    Dim rngCRModelList As Range: Set rngCRModelList = Range("NX_" & asn & "_M_CRModelList")
    Dim numCRModels%: numCRModels = rngCRModelList.Rows.count
    Dim rngCRModelFactorNumList As Range: Set rngCRModelFactorNumList = Range(rngCRModelList.Cells(1, 3), rngCRModelList.Cells(numCRModels, 3))
    Dim rngEQModelList As Range: Set rngEQModelList = Range("NX_" & asn & "_M_EQModelList")
    Dim numEQModels%: numEQModels = rngEQModelList.Rows.count
    Dim rngEQModelFactorNumList As Range: Set rngEQModelFactorNumList = Range(rngEQModelList.Cells(1, 3), rngEQModelList.Cells(numEQModels, 3))
    Dim rngCMDTYModelList As Range: Set rngCMDTYModelList = Range("NX_" & asn & "_M_CMDTYModelList")
    Dim numCMDTYModels%: numCMDTYModels = rngCMDTYModelList.Rows.count
    Dim rngCMDTYModelFactorNumList As Range: Set rngCMDTYModelFactorNumList = Range(rngCMDTYModelList.Cells(1, 3), rngCMDTYModelList.Cells(numCMDTYModels, 3))
    Dim rngIRModelFactorNum As Range: Set rngIRModelFactorNum = Range("NX_" & asn & "_M_IRMOdelFactorNum")
    
    If Intersect(Target, rngForeignModelFactorNumList) Is Nothing And Intersect(Target, rngFXModelFactorNumList) Is Nothing And _
        Intersect(Target, rngCRModelFactorNumList) Is Nothing And Intersect(Target, rngEQModelFactorNumList) Is Nothing And _
        Intersect(Target, rngCMDTYModelFactorNumList) Is Nothing And Intersect(Target, rngIRModelFactorNum) Is Nothing Then
        GoTo CleanUp
    End If
    
    Dim rngCorrAnchor As Range: Set rngCorrAnchor = Range("NX_" & asn & "_M_CorrAnchor")
    rngCorrAnchor.CurrentRegion.Clear
    Dim iIRModelFactorNum%: iIRModelFactorNum = rngIRModelFactorNum.Value
    Dim iFXModelFactorNum%, iForeignModelFactorNum%, iCRModelFactorNum%, iEQModelFactorNum%, iCMDTYModelFactorNum%
    Dim i%, j%
    Dim count%: count = 0
    For i = 1 To iIRModelFactorNum
        count = count + 1
        rngCorrAnchor.Offset(0, count) = "DomesticModelFactor" & CStr(i)
        rngCorrAnchor.Offset(count, 0) = "DomesticModelFactor" & CStr(i)
    Next i
    
    For i = 1 To numFXModels
        iFXModelFactorNum = rngFXModelList.Cells(i, 2).Value
        For j = 1 To iFXModelFactorNum
            count = count + 1
            rngCorrAnchor.Offset(0, count) = "FX" & CStr(i) & "ModelFactor" & CStr(j)
            rngCorrAnchor.Offset(count, 0) = "FX" & CStr(i) & "ModelFactor" & CStr(j)
        Next j
    Next i
    
    For i = 1 To numForeignModels
        iForeignModelFactorNum = rngForeignModelList.Cells(i, 2).Value
        For j = 1 To iForeignModelFactorNum
            count = count + 1
            rngCorrAnchor.Offset(0, count) = "Foreign" & CStr(i) & "ModelFactor" & CStr(j)
            rngCorrAnchor.Offset(count, 0) = "Foreign" & CStr(i) & "ModelFactor" & CStr(j)
        Next j
    Next i
    
    For i = 1 To numINFModels
        count = count + 1
        rngCorrAnchor.Offset(0, count) = "RealRate" & CStr(i) & "Model"
        rngCorrAnchor.Offset(count, 0) = "RealRate" & CStr(i) & "Model"
    Next i
    
    For i = 1 To numINFModels
        count = count + 1
        rngCorrAnchor.Offset(0, count) = "CPI" & CStr(i) & "Model"
        rngCorrAnchor.Offset(count, 0) = "CPI" & CStr(i) & "Model"
    Next i
    
    For i = 1 To numCRModels
        iCRModelFactorNum = rngCRModelList.Cells(i, 3).Value
        For j = 1 To iCRModelFactorNum
            count = count + 1
            rngCorrAnchor.Offset(0, count) = "CR" & CStr(i) & "Factor" & CStr(j)
            rngCorrAnchor.Offset(count, 0) = "CR" & CStr(i) & "Factor" & CStr(j)
        Next j
    Next i

    For i = 1 To numEQModels
        iEQModelFactorNum = rngEQModelList.Cells(i, 3).Value
        For j = 1 To iEQModelFactorNum
            count = count + 1
            rngCorrAnchor.Offset(0, count) = "=" & rngEQModelList.Cells(i, 1).Address & "&" & """" & "Factor" & CStr(j) & """"
            rngCorrAnchor.Offset(count, 0) = "=" & rngEQModelList.Cells(i, 1).Address & "&" & """" & "Factor" & CStr(j) & """"
        Next j
    Next i
    
    For i = 1 To numCMDTYModels
        iCMDTYModelFactorNum = rngCMDTYModelList.Cells(i, 3).Value
        For j = 1 To iCMDTYModelFactorNum
            count = count + 1
            rngCorrAnchor.Offset(0, count) = "=" & rngCMDTYModelList.Cells(i, 1).Address & "&" & """" & "Factor" & CStr(j) & """"
            rngCorrAnchor.Offset(count, 0) = "=" & rngCMDTYModelList.Cells(i, 1).Address & "&" & """" & "Factor" & CStr(j) & """"
        Next j
    Next i
    
    For i = 1 To count
        rngCorrAnchor.Offset(i, i) = 1
        For j = i + 1 To count
            rngCorrAnchor.Offset(i, j) = 0
        Next j
    Next i
    
    rngCorrAnchor.Formula = "=nxlibmatrix(" & Range(rngCorrAnchor.Offset(0, 1), rngCorrAnchor.Offset(0, count)).Address & "," _
                                            & Range(rngCorrAnchor.Offset(1, 0), rngCorrAnchor.Offset(count, 0)).Address & "," _
                                            & Range(rngCorrAnchor.Offset(1, 1), rngCorrAnchor.Offset(count, count)).Address & "," _
                                            & """" & "HY_UNIVERSAL_Corr.Data" & """" & ")"
    
    
    Call formatColorAndBorder(rngCorrAnchor)
    Call formatColorAndBorder(Range(rngCorrAnchor.Offset(1, 1), rngCorrAnchor.Offset(count, count)))
    Call formatHeader(Range(rngCorrAnchor.Offset(0, 1), rngCorrAnchor.Offset(0, count)))
    Call formatHeader(Range(rngCorrAnchor.Offset(1, 0), rngCorrAnchor.Offset(count, 0)))
       
    Range(rngCorrAnchor.Offset(1, 1), rngCorrAnchor.Offset(count, count)).Select
    
CleanUp:
    Application.EnableEvents = True
    Application.ScreenUpdating = True
    Set rngForeignModelList = Nothing
    Set rngForeignModelFactorNumList = Nothing
    Set rngFXModelList = Nothing
    Set rngFXModelFactorNumList = Nothing
    Set rngINFModelList = Nothing
    Set rngCRModelList = Nothing
    Set rngCRModelFactorNumList = Nothing
    Set rngEQModelList = Nothing
    Set rngEQModelFactorNumList = Nothing
    Set rngCMDTYModelList = Nothing
    Set rngCMDTYModelFactorNumList = Nothing
    Set rngIRModelFactorNum = Nothing
    Set rngCorrAnchor = Nothing
    Exit Sub

errorHandler:
    Call VBA.MsgBox("Error in resizing the corrlation matrix", vbCritical + vbOKOnly, "Error")
    GoTo CleanUp
End Sub





''' Formatting Module

Private Sub addConditionalFormat(tempRng As Range)
    tempRng.Select
    Selection.FormatConditions.Delete
    Selection.FormatConditions.Add Type:=xlCellValue, Operator:=xlEqual, _
        Formula1:="=""<LINK>"""
    Selection.FormatConditions(1).Interior.ColorIndex = 3
        
    Cells(1, 1).Select
End Sub

Private Sub formatHeader(tempRng As Range)
    tempRng.Select
    With Selection.Interior
        .Pattern = xlSolid
        .PatternColorIndex = xlAutomatic
        .Color = 10040115
    End With
    With Selection.Font
        .ColorIndex = 2
        .Name = "Calibri"
        .Size = 11
    End With
    Cells(1, 1).Select
End Sub

Private Sub formatColorAndBorder(tempRng As Range)
    tempRng.Select
    Selection.HorizontalAlignment = xlCenter
    Selection.Borders(xlDiagonalDown).LineStyle = xlNone
    Selection.Borders(xlDiagonalUp).LineStyle = xlNone
    With Selection.Borders(xlEdgeLeft)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlEdgeTop)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlEdgeRight)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .Weight = xlThin
    End With
    Selection.Borders(xlInsideVertical).LineStyle = xlNone
    Selection.Borders(xlInsideHorizontal).LineStyle = xlNone
    With Selection.Interior
        .Pattern = xlSolid
        .PatternColorIndex = xlAutomatic
        .ColorIndex = 2
    End With
    With Selection.Font
        .Name = "Calibri"
        .Size = 11
    End With
    Cells(1, 1).Select

End Sub

Private Sub addDataValidation(tempRng As Range)
    tempRng.Select
    With Selection.Validation
        .Delete
        .Add Type:=xlValidateWholeNumber, AlertStyle:=xlValidAlertStop, _
        Operator:=xlGreaterEqual, Formula1:="1"
        .IgnoreBlank = True
        .InCellDropdown = True
        .InputTitle = ""
        .ErrorTitle = "Incorrect Input"
        .InputMessage = ""
        .ErrorMessage = "Please input an integer"
        .ShowInput = True
        .ShowError = True
    End With
    Cells(1, 1).Select
End Sub

Attribute VB_Name = "Sheet4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet5"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "ComboBoxCRModelNum, 1, 0, MSForms, ComboBox"
Attribute VB_Control = "ResizeButton, 2, 1, MSForms, CommandButton"
Attribute VB_Control = "CreateButton, 3, 2, MSForms, CommandButton"
Option Explicit
Private hasBeenInitialised As Boolean


Private Sub CreateButton_Click()
    On Error GoTo errorHandler
    Application.EnableEvents = False
    Dim rngCRModelList As Range: Set rngCRModelList = Range("NX_" & ActiveSheet.Name & "_M_CRModelList")
    Dim rngModelListAnchor As Range: Set rngModelListAnchor = rngCRModelList.Cells(1, 1).Offset(-1, 0)
    Dim numCRModels%: numCRModels = rngCRModelList.Rows.count
    Dim rngCRModels As Range: Set rngCRModels = Range("NX_" & ActiveSheet.Name & "_M_CRModels")
    rngCRModels.Formula = "=nxlibdata(" & rngModelListAnchor.Address & "," & Range(rngModelListAnchor.Offset(1, 0), rngModelListAnchor.Offset(numCRModels, 0)).Address & "," & """" & "IR_CRB_EQ_CRModel.Data" & """" & ")"
    ActiveSheet.Calculate
CleanUp:
    Application.EnableEvents = True
    Exit Sub
errorHandler:
    Call VBA.MsgBox("Error in creating model table data", vbCritical + vbOKOnly, "Error")
    GoTo CleanUp
    End Sub

Private Sub ResizeButton_Click()
    On Error GoTo CleanUp
    Application.ScreenUpdating = False
    Dim temp As Variant: temp = Split(ComboBoxCRModelNum.Text, " ")
    If Not IsNumeric(temp(0)) Then
        MsgBox "Fatal error when resizing ComboBox"
        GoTo CleanUp
    Else
        Resize CInt(temp(0))
    End If
    On Error GoTo 0
    
CleanUp:
    Application.ScreenUpdating = True
    ActiveSheet.Calculate
End Sub



Public Sub Resize(numCRModel As Integer)
    On Error GoTo errorHandler
    Application.EnableEvents = False
    Application.ScreenUpdating = False
    
    Dim asn$: asn = ActiveSheet.Name
    Dim rngCRModels As Range: Set rngCRModels = Range("NX_" & asn & "_M_CRModels")
    Dim rngCRModelList As Range: Set rngCRModelList = Range("NX_" & asn & "_M_CRModelList")
    Dim rngIRModelFactorNum As Range: Set rngIRModelFactorNum = Range("NX_" & asn & "_M_IRModelFactorNum")
    Dim rngCorrAnchor As Range: Set rngCorrAnchor = Range("NX_" & asn & "_M_CorrAnchor")
    Dim rngCRModelListAnchor As Range: Set rngCRModelListAnchor = rngCRModelList.Cells(1, 1).Offset(-1, 0)
        
    rngCRModelList.Clear
    rngCorrAnchor.CurrentRegion.Clear
    rngCRModels = "<LINK>"
    rngIRModelFactorNum.Value = 1
    
    'Resize the CR Model table
    Dim i%, j%
    For i = 1 To numCRModel
        rngCRModelListAnchor.Offset(i, 0) = "<LINK>"
        rngCRModelListAnchor.Offset(i, 1) = 1
    Next i
    Range(rngCRModelListAnchor.Offset(1, 0), rngCRModelListAnchor.Offset(numCRModel, 1)).Select
    ActiveWorkbook.Names.Add Name:="NX_" & asn & "_M_CRModelList", RefersTo:=Selection
    Set rngCRModelList = Range("NX_" & asn & "_M_CRModelList")
    Call formatColorAndBorder(rngCRModelList)
    Call addConditionalFormat(Range(rngCRModelListAnchor.Offset(1, 0), rngCRModelListAnchor.Offset(numCRModel, 0)))
    Call addDataValidation(Range(rngCRModelListAnchor.Offset(1, 1), rngCRModelListAnchor.Offset(numCRModel, 1)))
    
    rngCorrAnchor.Offset(0, 1) = "DomesticModelFactor1"
    rngCorrAnchor.Offset(1, 0) = "DomesticModelFactor1"
    rngCorrAnchor.Offset(0, 2) = "EQ"
    rngCorrAnchor.Offset(2, 0) = "EQ"
    
    For i = 1 To numCRModel
        rngCorrAnchor.Offset(0, i + 2) = "CR" & CStr(i) & "Factor1"
        rngCorrAnchor.Offset(i + 2, 0) = "CR" & CStr(i) & "Factor1"
    Next i
    
    For i = 1 To numCRModel + 2
        rngCorrAnchor.Offset(i, i) = 1
        For j = i + 1 To numCRModel + 2
            rngCorrAnchor.Offset(i, j) = 0
        Next j
    Next i
    
    rngCorrAnchor.Formula = "=nxlibmatrix(" & Range(rngCorrAnchor.Offset(0, 1), rngCorrAnchor.Offset(0, numCRModel + 2)).Address & "," _
                                            & Range(rngCorrAnchor.Offset(1, 0), rngCorrAnchor.Offset(numCRModel + 2, 0)).Address & "," _
                                            & Range(rngCorrAnchor.Offset(1, 1), rngCorrAnchor.Offset(numCRModel + 2, numCRModel + 2)).Address & "," _
                                            & """" & "IR_CRB_EQ_Corr.Data" & """" & ")"
    Call formatColorAndBorder(rngCorrAnchor)
    Call formatColorAndBorder(Range(rngCorrAnchor.Offset(1, 1), rngCorrAnchor.Offset(numCRModel + 2, numCRModel + 2)))
    Call formatHeader(Range(rngCorrAnchor.Offset(0, 1), rngCorrAnchor.Offset(0, numCRModel + 2)))
    Call formatHeader(Range(rngCorrAnchor.Offset(1, 0), rngCorrAnchor.Offset(numCRModel + 2, 0)))

CleanUp:
    Application.EnableEvents = True
    Application.ScreenUpdating = True
    Exit Sub
errorHandler:
    Call VBA.MsgBox("Error in resizing the model", vbCritical + vbOKOnly, "Error")
    GoTo CleanUp
    End Sub


Private Sub Worksheet_Activate()
    On Error GoTo CleanUp
    ComboBoxCRModelNum.Clear
    ComboBoxCRModelNum.AddItem ("1 CR Model")
    ComboBoxCRModelNum.AddItem ("2 CR Models")
    ComboBoxCRModelNum.AddItem ("3 CR Models")
    ComboBoxCRModelNum.AddItem ("4 CR Models")
    ComboBoxCRModelNum.AddItem ("5 CR Models")
    ComboBoxCRModelNum.AddItem ("6 CR Models")
    ComboBoxCRModelNum.AddItem ("7 CR Models")
    ComboBoxCRModelNum.AddItem ("8 CR Models")
    ComboBoxCRModelNum.AddItem ("9 CR Models")
    ComboBoxCRModelNum.AddItem ("10 CR Models")
    ComboBoxCRModelNum.Text = "1 CR Model"
    hasBeenInitialised = True

CleanUp:
    ActiveSheet.Calculate
End Sub

'Resizing the correlation matrix after changing the Factor number for any model
Private Sub Worksheet_Change(ByVal Target As Range)
    On Error GoTo CleanUp
    Application.EnableEvents = False
    Application.ScreenUpdating = False
    
    Dim asn$: asn = ActiveSheet.Name
    Dim rngCRModelList As Range: Set rngCRModelList = Range("NX_" & asn & "_M_CRModelList")
    Dim numCRModels%: numCRModels = rngCRModelList.Rows.count
    Dim rngCRModelFactorNumList As Range: Set rngCRModelFactorNumList = Range(rngCRModelList.Cells(1, 2), rngCRModelList.Cells(numCRModels, 2))
    Dim rngIRModelFactorNum As Range: Set rngIRModelFactorNum = Range("NX_" & asn & "_M_IRMOdelFactorNum")
    
    If Intersect(Target, rngCRModelFactorNumList) Is Nothing And Intersect(Target, rngIRModelFactorNum) Is Nothing Then
        GoTo CleanUp
    End If
            
    Dim rngCorrAnchor As Range: Set rngCorrAnchor = Range("NX_" & asn & "_M_CorrAnchor")
    rngCorrAnchor.CurrentRegion.Clear
    Dim IRModelFactorNum%: IRModelFactorNum = rngIRModelFactorNum.Value
    Dim CRModelFactorNum%
    Dim i%, j%
    Dim count%: count = 0
    
    For i = 1 To IRModelFactorNum
        count = count + 1
        rngCorrAnchor.Offset(0, count) = "DomesticModelFactor" & CStr(i)
        rngCorrAnchor.Offset(count, 0) = "DomesticModelFactor" & CStr(i)
    Next i
    
    count = count + 1
    rngCorrAnchor.Offset(0, count) = "EQ"
    rngCorrAnchor.Offset(count, 0) = "EQ"
    
    For i = 1 To numCRModels
        CRModelFactorNum = rngCRModelList.Cells(i, 2).Value
        For j = 1 To CRModelFactorNum
            count = count + 1
            rngCorrAnchor.Offset(0, count) = "CR" & CStr(i) & "Factor" & CStr(j)
            rngCorrAnchor.Offset(count, 0) = "CR" & CStr(i) & "Factor" & CStr(j)
        Next j
    Next i
    
    For i = 1 To count
        rngCorrAnchor.Offset(i, i) = 1
        For j = i + 1 To count
            rngCorrAnchor.Offset(i, j) = 0
        Next j
    Next i
    
    rngCorrAnchor.Formula = "=nxlibmatrix(" & Range(rngCorrAnchor.Offset(0, 1), rngCorrAnchor.Offset(0, count)).Address & "," _
                                            & Range(rngCorrAnchor.Offset(1, 0), rngCorrAnchor.Offset(count, 0)).Address & "," _
                                            & Range(rngCorrAnchor.Offset(1, 1), rngCorrAnchor.Offset(count, count)).Address & "," _
                                            & """" & "IR_CRB_EQ_Corr.Data" & """" & ")"
    
    
    Call formatColorAndBorder(rngCorrAnchor)
    Call formatColorAndBorder(Range(rngCorrAnchor.Offset(1, 1), rngCorrAnchor.Offset(count, count)))
    Call formatHeader(Range(rngCorrAnchor.Offset(0, 1), rngCorrAnchor.Offset(0, count)))
    Call formatHeader(Range(rngCorrAnchor.Offset(1, 0), rngCorrAnchor.Offset(count, 0)))
       
    Range(rngCorrAnchor.Offset(1, 1), rngCorrAnchor.Offset(count, count)).Select
    
CleanUp:
    Application.EnableEvents = True
    Application.ScreenUpdating = True
End Sub



''' Formatting Module

Private Sub addConditionalFormat(tempRng As Range)
    tempRng.Select
    Selection.FormatConditions.Delete
    Selection.FormatConditions.Add Type:=xlCellValue, Operator:=xlEqual, _
        Formula1:="=""<LINK>"""
    Selection.FormatConditions(1).Interior.ColorIndex = 3
    Cells(1, 1).Select
End Sub

Private Sub formatHeader(tempRng As Range)
    tempRng.Select
    With Selection.Interior
        .Pattern = xlSolid
        .PatternColorIndex = xlAutomatic
        .Color = 10040115
    End With
    With Selection.Font
        .ColorIndex = 2
        .Name = "Calibri"
        .Size = 11
    End With
    Cells(1, 1).Select
End Sub

Private Sub formatColorAndBorder(tempRng As Range)
    tempRng.Select
    Selection.HorizontalAlignment = xlCenter
    Selection.Borders(xlDiagonalDown).LineStyle = xlNone
    Selection.Borders(xlDiagonalUp).LineStyle = xlNone
    With Selection.Borders(xlEdgeLeft)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlEdgeTop)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlEdgeRight)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .Weight = xlThin
    End With
    Selection.Borders(xlInsideVertical).LineStyle = xlNone
    Selection.Borders(xlInsideHorizontal).LineStyle = xlNone
    With Selection.Interior
        .Pattern = xlSolid
        .PatternColorIndex = xlAutomatic
        .ColorIndex = 2
    End With
    With Selection.Font
        .Name = "Calibri"
        .Size = 11
    End With
    Cells(1, 1).Select
End Sub


Private Sub addDataValidation(tempRng As Range)
    tempRng.Select
    With Selection.Validation
        .Delete
        .Add Type:=xlValidateWholeNumber, AlertStyle:=xlValidAlertStop, _
        Operator:=xlGreaterEqual, Formula1:="1"
        .IgnoreBlank = True
        .InCellDropdown = True
        .InputTitle = ""
        .ErrorTitle = "Incorrect Input"
        .InputMessage = ""
        .ErrorMessage = "Please input an integer"
        .ShowInput = True
        .ShowError = True
    End With
    Cells(1, 1).Select
End Sub




Attribute VB_Name = "Sheet7"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "ComboBoxCRModelNum, 1, 0, MSForms, ComboBox"
Attribute VB_Control = "ResizeButton, 2, 1, MSForms, CommandButton"
Attribute VB_Control = "CreateButton, 3, 2, MSForms, CommandButton"
Attribute VB_Control = "ComboBoxEQModelNum, 31, 3, MSForms, ComboBox"
Option Explicit
Private hasBeenInitialised As Boolean


Private Sub CreateButton_Click()
    On Error GoTo errorHandler
    Application.EnableEvents = False
    Dim asn$: asn = ActiveSheet.Name
    Dim rngCRModelList As Range: Set rngCRModelList = Range("NX_" & asn & "_M_CRModelList")
    Dim numCRModels%: numCRModels = rngCRModelList.Rows.count
    Dim rngCRModelListAnchor As Range: Set rngCRModelListAnchor = rngCRModelList.Cells(1, 1).Offset(-1, 0)
    Dim rngCRModels As Range: Set rngCRModels = Range("NX_" & asn & "_M_CRModels")
    rngCRModels.Formula = "=nxlibdata(" & rngCRModelListAnchor.Address & "," & Range(rngCRModelListAnchor.Offset(1, 0), rngCRModelListAnchor.Offset(numCRModels, 0)).Address & "," & """" & "IR_CRB_EQB_CRModel.Data" & """" & ")"
    
    Dim rngEQModelList As Range: Set rngEQModelList = Range("NX_" & asn & "_M_EQModelList")
    Dim numEQModels%: numEQModels = rngEQModelList.Rows.count
    Dim rngEQModelListAnchor As Range: Set rngEQModelListAnchor = rngEQModelList.Cells(1, 1).Offset(-1, 0)
    Dim rngEQModels As Range: Set rngEQModels = Range("NX_" & asn & "_M_EQModels")
    rngEQModels.Formula = "=nxlibdata(" & Range(rngEQModelListAnchor, rngEQModelListAnchor.Offset(0, 1)).Address & "," & Range(rngEQModelListAnchor.Offset(1, 0), rngEQModelListAnchor.Offset(numEQModels, 1)).Address & "," & """" & "IR_CRB_EQB_EQModel.Data" & """" & ")"
    ActiveSheet.Calculate
    
CleanUp:
    Application.EnableEvents = True
    Exit Sub
errorHandler:
    Call VBA.MsgBox("Error in creating model table data", vbCritical + vbOKOnly, "Error")
    GoTo CleanUp
    End Sub

Private Sub ResizeButton_Click()
    On Error GoTo CleanUp
    Application.ScreenUpdating = False
    Dim temp1 As Variant: temp1 = Split(ComboBoxCRModelNum.Text, " ")
    Dim temp2 As Variant: temp2 = Split(ComboBoxEQModelNum.Text, " ")
    If Not IsNumeric(temp1(0)) Or Not IsNumeric(temp2(0)) Then
        MsgBox "Fatal error when resizing ComboBox"
        GoTo CleanUp
    Else
        Resize CInt(temp1(0)), CInt(temp2(0))
    End If
    On Error GoTo 0
    
CleanUp:
    Application.ScreenUpdating = True
    ActiveSheet.Calculate
    
End Sub


Public Sub Resize(numCRModel As Integer, numEQModel As Integer)
    On Error GoTo errorHandler
    Application.EnableEvents = False
    Application.ScreenUpdating = False
    
    Dim asn$: asn = ActiveSheet.Name
    Dim rngCRModels As Range: Set rngCRModels = Range("NX_" & asn & "_M_CRModels")
    Dim rngCRModelList As Range: Set rngCRModelList = Range("NX_" & asn & "_M_CRModelList")
    Dim rngEQModels As Range: Set rngEQModels = Range("NX_" & asn & "_M_EQModels")
    Dim rngEQModelList As Range: Set rngEQModelList = Range("NX_" & asn & "_M_EQModelList")
    Dim rngIRModelFactorNum As Range: Set rngIRModelFactorNum = Range("NX_" & asn & "_M_IRModelFactorNum")
    Dim rngCorrAnchor As Range: Set rngCorrAnchor = Range("NX_" & asn & "_M_CorrAnchor")
    Dim rngCRModelListAnchor As Range: Set rngCRModelListAnchor = rngCRModelList.Cells(1, 1).Offset(-1, 0)
    Dim rngEQModelListAnchor As Range: Set rngEQModelListAnchor = rngEQModelList.Cells(1, 1).Offset(-1, 0)
    
    rngCRModelList.Clear
    rngEQModelList.Clear
    rngCorrAnchor.CurrentRegion.Clear
    rngCRModels = "<LINK>"
    rngEQModels = "<LINK>"
    rngIRModelFactorNum.Value = 1
    
    'Resize the CR Model table
    Dim i%, j%
    For i = 1 To numCRModel
        rngCRModelListAnchor.Offset(i, 0) = "<LINK>"
        rngCRModelListAnchor.Offset(i, 1) = 1
    Next i
    Range(rngCRModelListAnchor.Offset(1, 0), rngCRModelListAnchor.Offset(numCRModel, 1)).Select
    ActiveWorkbook.Names.Add Name:="NX_" & asn & "_M_CRModelList", RefersTo:=Selection
    Set rngCRModelList = Range("NX_" & asn & "_M_CRModelList")
    Call formatColorAndBorder(rngCRModelList)
    Call addConditionalFormat(Range(rngCRModelListAnchor.Offset(1, 0), rngCRModelListAnchor.Offset(numCRModel, 0)))
    Call addDataValidation(Range(rngCRModelListAnchor.Offset(1, 1), rngCRModelListAnchor.Offset(numCRModel, 1)))
        
    'Resize the EQ Model Table
    For i = 1 To numEQModel
        rngEQModelListAnchor.Offset(i, 0) = "<LINK>"
        rngEQModelListAnchor.Offset(i, 1) = "<LINK>"
        rngEQModelListAnchor.Offset(i, 2) = 1
    Next i
    Range(rngEQModelListAnchor.Offset(1, 0), rngEQModelListAnchor.Offset(numEQModel, 2)).Select
    ActiveWorkbook.Names.Add Name:="NX_" & asn & "_M_EQModelList", RefersTo:=Selection
    Set rngEQModelList = Range("NX_" & asn & "_M_EQModelList")
    Call formatColorAndBorder(rngEQModelList)
    Call addConditionalFormat(Range(rngEQModelListAnchor.Offset(1, 0), rngEQModelListAnchor.Offset(numEQModel, 1)))
    Call addDataValidation(Range(rngEQModelListAnchor.Offset(1, 2), rngEQModelListAnchor.Offset(numEQModel, 2)))
          
    rngCorrAnchor.Offset(0, 1) = "DomesticModelFactor1"
    rngCorrAnchor.Offset(1, 0) = "DomesticModelFactor1"
    
    For i = 1 To numEQModel
        rngCorrAnchor.Offset(0, i + 1) = "=" & rngEQModelList.Cells(i, 1).Address & "&" & """" & "Factor1" & """"
        rngCorrAnchor.Offset(i + 1, 0) = "=" & rngEQModelList.Cells(i, 1).Address & "&" & """" & "Factor1" & """"
    Next i
    
    For i = 1 To numCRModel
        rngCorrAnchor.Offset(0, i + numEQModel + 1) = "CR" & CStr(i) & "Factor1"
        rngCorrAnchor.Offset(i + numEQModel + 1, 0) = "CR" & CStr(i) & "Factor1"
    Next i
    
    For i = 1 To numEQModel + numCRModel + 1
        rngCorrAnchor.Offset(i, i) = 1
        For j = i + 1 To numEQModel + numCRModel + 1
            rngCorrAnchor.Offset(i, j) = 0
        Next j
    Next i
    
    rngCorrAnchor.Formula = "=nxlibmatrix(" & Range(rngCorrAnchor.Offset(0, 1), rngCorrAnchor.Offset(0, numEQModel + numCRModel + 1)).Address & "," _
                                            & Range(rngCorrAnchor.Offset(1, 0), rngCorrAnchor.Offset(numEQModel + numCRModel + 1, 0)).Address & "," _
                                            & Range(rngCorrAnchor.Offset(1, 1), rngCorrAnchor.Offset(numEQModel + numCRModel + 1, numEQModel + numCRModel + 1)).Address & "," _
                                            & """" & "IR_CRB_EQB_Corr.Data" & """" & ")"
                                            
    Call formatColorAndBorder(rngCorrAnchor)
    Call formatColorAndBorder(Range(rngCorrAnchor.Offset(1, 1), rngCorrAnchor.Offset(numEQModel + numCRModel + 1, numEQModel + numCRModel + 1)))
    Call formatHeader(Range(rngCorrAnchor.Offset(0, 1), rngCorrAnchor.Offset(0, numEQModel + numCRModel + 1)))
    Call formatHeader(Range(rngCorrAnchor.Offset(1, 0), rngCorrAnchor.Offset(numEQModel + numCRModel + 1, 0)))

CleanUp:
    Application.EnableEvents = True
    Application.ScreenUpdating = True
    Set rngCRModels = Nothing
    Set rngCRModelList = Nothing
    Set rngCRModelListAnchor = Nothing
    Set rngEQModels = Nothing
    Set rngEQModelList = Nothing
    Set rngEQModelListAnchor = Nothing
    Set rngCorrAnchor = Nothing
    Exit Sub
   
errorHandler:
    Call VBA.MsgBox("Error in resizing the model", vbCritical + vbOKOnly, "Error")
    GoTo CleanUp
    End Sub

Private Sub Worksheet_Activate()
    On Error GoTo CleanUp
    
    ComboBoxCRModelNum.Clear
    ComboBoxCRModelNum.AddItem ("1 CR Model")
    ComboBoxCRModelNum.AddItem ("2 CR Models")
    ComboBoxCRModelNum.AddItem ("3 CR Models")
    ComboBoxCRModelNum.AddItem ("4 CR Models")
    ComboBoxCRModelNum.AddItem ("5 CR Models")
    ComboBoxCRModelNum.AddItem ("6 CR Models")
    ComboBoxCRModelNum.AddItem ("7 CR Models")
    ComboBoxCRModelNum.AddItem ("8 CR Models")
    ComboBoxCRModelNum.AddItem ("9 CR Models")
    ComboBoxCRModelNum.AddItem ("10 CR Models")
    ComboBoxCRModelNum.Text = "1 CR Model"
    
    ComboBoxEQModelNum.Clear
    ComboBoxEQModelNum.AddItem ("1 EQ Model")
    ComboBoxEQModelNum.AddItem ("2 EQ Models")
    ComboBoxEQModelNum.AddItem ("3 EQ Models")
    ComboBoxEQModelNum.AddItem ("4 EQ Models")
    ComboBoxEQModelNum.AddItem ("5 EQ Models")
    ComboBoxEQModelNum.AddItem ("6 EQ Models")
    ComboBoxEQModelNum.AddItem ("7 EQ Models")
    ComboBoxEQModelNum.AddItem ("8 EQ Models")
    ComboBoxEQModelNum.AddItem ("9 EQ Models")
    ComboBoxEQModelNum.AddItem ("10 EQ Models")
    ComboBoxEQModelNum.Text = "1 EQ Model"
    
    hasBeenInitialised = True

CleanUp:
    ActiveSheet.Calculate
End Sub


'Resizing the correlation matrix after changing the Factor number for any model
Private Sub Worksheet_Change(ByVal Target As Range)
    On Error GoTo CleanUp
    Application.EnableEvents = False
    Application.ScreenUpdating = False
    
    Dim asn$: asn = ActiveSheet.Name
    Dim rngCRModelList As Range: Set rngCRModelList = Range("NX_" & asn & "_M_CRModelList")
    Dim numCRModels%: numCRModels = rngCRModelList.Rows.count
    Dim rngCRModelFactorNumList As Range: Set rngCRModelFactorNumList = Range(rngCRModelList.Cells(1, 2), rngCRModelList.Cells(numCRModels, 2))
    Dim rngEQModelList As Range: Set rngEQModelList = Range("NX_" & asn & "_M_EQModelList")
    Dim numEQModels%: numEQModels = rngEQModelList.Rows.count
    Dim rngEQModelFactorNumList As Range: Set rngEQModelFactorNumList = Range(rngEQModelList(1, 3), rngEQModelList(numEQModels, 3))
    Dim rngIRModelFactorNum As Range: Set rngIRModelFactorNum = Range("NX_" & asn & "_M_IRMOdelFactorNum")
    
    If Intersect(Target, rngCRModelFactorNumList) Is Nothing And Intersect(Target, rngEQModelFactorNumList) Is Nothing And _
        Intersect(Target, rngIRModelFactorNum) Is Nothing Then
        GoTo CleanUp
    End If
        
    
    Dim rngCorrAnchor As Range: Set rngCorrAnchor = Range("NX_" & asn & "_M_CorrAnchor")
    rngCorrAnchor.CurrentRegion.Clear
    Dim IRModelFactorNum%: IRModelFactorNum = rngIRModelFactorNum.Value
    Dim EQModelFactorNum%, CRModelFactorNum%
    Dim i%, j%
    Dim count%: count = 0
    For i = 1 To IRModelFactorNum
        count = count + 1
        rngCorrAnchor.Offset(0, count) = "DomesticModelFactor" & CStr(i)
        rngCorrAnchor.Offset(count, 0) = "DomesticModelFactor" & CStr(i)
    Next i
    
    For i = 1 To numEQModels
        EQModelFactorNum = rngEQModelList.Cells(i, 3).Value
        For j = 1 To EQModelFactorNum
            count = count + 1
            rngCorrAnchor.Offset(0, count) = "=" & rngEQModelList.Cells(i, 1).Address & "&" & """" & "Factor" & CStr(j) & """"
            rngCorrAnchor.Offset(count, 0) = "=" & rngEQModelList.Cells(i, 1).Address & "&" & """" & "Factor" & CStr(j) & """"
        Next j
    Next i
    
    For i = 1 To numCRModels
        CRModelFactorNum = rngCRModelList.Cells(i, 2).Value
        For j = 1 To CRModelFactorNum
            count = count + 1
            rngCorrAnchor.Offset(0, count) = "CR" & CStr(i) & "Factor" & CStr(j)
            rngCorrAnchor.Offset(count, 0) = "CR" & CStr(i) & "Factor" & CStr(j)
        Next j
    Next i
    
    For i = 1 To count
        rngCorrAnchor.Offset(i, i) = 1
        For j = i + 1 To count
            rngCorrAnchor.Offset(i, j) = 0
        Next j
    Next i
    
    rngCorrAnchor.Formula = "=nxlibmatrix(" & Range(rngCorrAnchor.Offset(0, 1), rngCorrAnchor.Offset(0, count)).Address & "," _
                                            & Range(rngCorrAnchor.Offset(1, 0), rngCorrAnchor.Offset(count, 0)).Address & "," _
                                            & Range(rngCorrAnchor.Offset(1, 1), rngCorrAnchor.Offset(count, count)).Address & "," _
                                            & """" & "IR_CRB_EQB_Corr.Data" & """" & ")"
    
    
    Call formatColorAndBorder(rngCorrAnchor)
    Call formatColorAndBorder(Range(rngCorrAnchor.Offset(1, 1), rngCorrAnchor.Offset(count, count)))
    Call formatHeader(Range(rngCorrAnchor.Offset(0, 1), rngCorrAnchor.Offset(0, count)))
    Call formatHeader(Range(rngCorrAnchor.Offset(1, 0), rngCorrAnchor.Offset(count, 0)))
       
    Range(rngCorrAnchor.Offset(1, 1), rngCorrAnchor.Offset(count, count)).Select
    
CleanUp:
    Application.EnableEvents = True
    Application.ScreenUpdating = True
End Sub





''' Formatting Module

Private Sub addConditionalFormat(tempRng As Range)
    tempRng.Select
    Selection.FormatConditions.Delete
    Selection.FormatConditions.Add Type:=xlCellValue, Operator:=xlEqual, _
        Formula1:="=""<LINK>"""
    Selection.FormatConditions(1).Interior.ColorIndex = 3
        
    Cells(1, 1).Select
End Sub

Private Sub formatHeader(tempRng As Range)
    tempRng.Select
    With Selection.Interior
        .Pattern = xlSolid
        .PatternColorIndex = xlAutomatic
        .Color = 10040115
    End With
    With Selection.Font
        .ColorIndex = 2
        .Name = "Calibri"
        .Size = 11
    End With
    Cells(1, 1).Select
End Sub

Private Sub formatColorAndBorder(tempRng As Range)
    tempRng.Select
    Selection.HorizontalAlignment = xlCenter
    Selection.Borders(xlDiagonalDown).LineStyle = xlNone
    Selection.Borders(xlDiagonalUp).LineStyle = xlNone
    With Selection.Borders(xlEdgeLeft)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlEdgeTop)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlEdgeRight)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .Weight = xlThin
    End With
    Selection.Borders(xlInsideVertical).LineStyle = xlNone
    Selection.Borders(xlInsideHorizontal).LineStyle = xlNone
    With Selection.Interior
        .Pattern = xlSolid
        .PatternColorIndex = xlAutomatic
        .ColorIndex = 2
    End With
    With Selection.Font
        .Name = "Calibri"
        .Size = 11
    End With
    Cells(1, 1).Select

End Sub

Private Sub addDataValidation(tempRng As Range)
    tempRng.Select
    With Selection.Validation
        .Delete
        .Add Type:=xlValidateWholeNumber, AlertStyle:=xlValidAlertStop, _
        Operator:=xlGreaterEqual, Formula1:="1"
        .IgnoreBlank = True
        .InCellDropdown = True
        .InputTitle = ""
        .ErrorTitle = "Incorrect Input"
        .InputMessage = ""
        .ErrorMessage = "Please input an integer"
        .ShowInput = True
        .ShowError = True
    End With
    Cells(1, 1).Select
End Sub

Attribute VB_Name = "Sheet8"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "ComboBoxCRModelNum, 1, 0, MSForms, ComboBox"
Attribute VB_Control = "ResizeButton, 2, 1, MSForms, CommandButton"
Attribute VB_Control = "CreateButton, 3, 2, MSForms, CommandButton"
Attribute VB_Control = "ComboBoxCMDTYModelNum, 4, 3, MSForms, ComboBox"
Option Explicit
Private hasBeenInitialised As Boolean


Private Sub CreateButton_Click()
    On Error GoTo errorHandler
    Application.EnableEvents = False
    Dim asn$: asn = ActiveSheet.Name
    Dim rngCRModelList As Range: Set rngCRModelList = Range("NX_" & asn & "_M_CRModelList")
    Dim numCRModels%: numCRModels = rngCRModelList.Rows.count
    Dim rngCRModelListAnchor As Range: Set rngCRModelListAnchor = rngCRModelList.Cells(1, 1).Offset(-1, 0)
    Dim rngCRModels As Range: Set rngCRModels = Range("NX_" & asn & "_M_CRModels")
    rngCRModels.Formula = "=nxlibdata(" & rngCRModelListAnchor.Address & "," & Range(rngCRModelListAnchor.Offset(1, 0), rngCRModelListAnchor.Offset(numCRModels, 0)).Address & "," & """" & "IR_CRB_CMDTYB_CRModel.Data" & """" & ")"
    
    Dim rngCMDTYModelList As Range: Set rngCMDTYModelList = Range("NX_" & asn & "_M_CMDTYModelList")
    Dim numCMDTYModels%: numCMDTYModels = rngCMDTYModelList.Rows.count
    Dim rngCMDTYModelListAnchor As Range: Set rngCMDTYModelListAnchor = rngCMDTYModelList.Cells(1, 1).Offset(-1, 0)
    Dim rngCMDTYModels As Range: Set rngCMDTYModels = Range("NX_" & asn & "_M_CMDTYModels")
    rngCMDTYModels.Formula = "=nxlibdata(" & Range(rngCMDTYModelListAnchor, rngCMDTYModelListAnchor.Offset(0, 1)).Address & "," & Range(rngCMDTYModelListAnchor.Offset(1, 0), rngCMDTYModelListAnchor.Offset(numCMDTYModels, 1)).Address & "," & """" & "IR_CRB_CMDTYB_CMDTYModel.Data" & """" & ")"
    ActiveSheet.Calculate
    
CleanUp:
    Application.EnableEvents = True
    Exit Sub
errorHandler:
    Call VBA.MsgBox("Error in creating model table data", vbCritical + vbOKOnly, "Error")
    GoTo CleanUp
    End Sub

Private Sub ResizeButton_Click()
    On Error GoTo CleanUp
    Application.ScreenUpdating = False
    Dim temp1 As Variant: temp1 = Split(ComboBoxCRModelNum.Text, " ")
    Dim temp2 As Variant: temp2 = Split(ComboBoxCMDTYModelNum.Text, " ")
    If Not IsNumeric(temp1(0)) Or Not IsNumeric(temp2(0)) Then
        MsgBox "Fatal error when resizing ComboBox"
        GoTo CleanUp
    Else
        Resize CInt(temp1(0)), CInt(temp2(0))
    End If
    On Error GoTo 0
    
CleanUp:
    Application.ScreenUpdating = True
    ActiveSheet.Calculate
End Sub


Public Sub Resize(numCRModel As Integer, numCMDTYModel As Integer)
    On Error GoTo errorHandler
    Application.EnableEvents = False
    Application.ScreenUpdating = False
    
    Dim asn$: asn = ActiveSheet.Name
    Dim rngCRModels As Range: Set rngCRModels = Range("NX_" & asn & "_M_CRModels")
    Dim rngCRModelList As Range: Set rngCRModelList = Range("NX_" & asn & "_M_CRModelList")
    Dim rngCMDTYModels As Range: Set rngCMDTYModels = Range("NX_" & asn & "_M_CMDTYModels")
    Dim rngCMDTYModelList As Range: Set rngCMDTYModelList = Range("NX_" & asn & "_M_CMDTYModelList")
    Dim rngIRModelFactorNum As Range: Set rngIRModelFactorNum = Range("NX_" & asn & "_M_IRModelFactorNum")
    Dim rngCorrAnchor As Range: Set rngCorrAnchor = Range("NX_" & asn & "_M_CorrAnchor")
    Dim rngCRModelListAnchor As Range: Set rngCRModelListAnchor = rngCRModelList.Cells(1, 1).Offset(-1, 0)
    Dim rngCMDTYModelListAnchor As Range: Set rngCMDTYModelListAnchor = rngCMDTYModelList.Cells(1, 1).Offset(-1, 0)
    
    rngCRModelList.Clear
    rngCMDTYModelList.Clear
    rngCorrAnchor.CurrentRegion.Clear
    rngCRModels = "<LINK>"
    rngCMDTYModels = "<LINK>"
    rngIRModelFactorNum.Value = 1
    
    'Resize the CR Model table
    Dim i%, j%
    For i = 1 To numCRModel
        rngCRModelListAnchor.Offset(i, 0) = "<LINK>"
        rngCRModelListAnchor.Offset(i, 1) = 1
    Next i
    Range(rngCRModelListAnchor.Offset(1, 0), rngCRModelListAnchor.Offset(numCRModel, 1)).Select
    ActiveWorkbook.Names.Add Name:="NX_" & asn & "_M_CRModelList", RefersTo:=Selection
    Set rngCRModelList = Range("NX_" & asn & "_M_CRModelList")
    Call formatColorAndBorder(rngCRModelList)
    Call addConditionalFormat(Range(rngCRModelListAnchor.Offset(1, 0), rngCRModelListAnchor.Offset(numCRModel, 0)))
    Call addDataValidation(Range(rngCRModelListAnchor.Offset(1, 1), rngCRModelListAnchor.Offset(numCRModel, 1)))
        
    'Resize the CMDTY Model Table
    For i = 1 To numCMDTYModel
        rngCMDTYModelListAnchor.Offset(i, 0) = "<LINK>"
        rngCMDTYModelListAnchor.Offset(i, 1) = "<LINK>"
        rngCMDTYModelListAnchor.Offset(i, 2) = 1
    Next i
    Range(rngCMDTYModelListAnchor.Offset(1, 0), rngCMDTYModelListAnchor.Offset(numCMDTYModel, 2)).Select
    ActiveWorkbook.Names.Add Name:="NX_" & asn & "_M_CMDTYModelList", RefersTo:=Selection
    Set rngCMDTYModelList = Range("NX_" & asn & "_M_CMDTYModelList")
    Call formatColorAndBorder(rngCMDTYModelList)
    Call addConditionalFormat(Range(rngCMDTYModelListAnchor.Offset(1, 0), rngCMDTYModelListAnchor.Offset(numCMDTYModel, 1)))
    Call addDataValidation(Range(rngCMDTYModelListAnchor.Offset(1, 2), rngCMDTYModelListAnchor.Offset(numCMDTYModel, 2)))
          
    rngCorrAnchor.Offset(0, 1) = "DomesticModelFactor1"
    rngCorrAnchor.Offset(1, 0) = "DomesticModelFactor1"
    
    For i = 1 To numCMDTYModel
        rngCorrAnchor.Offset(0, i + 1) = "=" & rngCMDTYModelList.Cells(i, 1).Address & "&" & """" & "Factor1" & """"
        rngCorrAnchor.Offset(i + 1, 0) = "=" & rngCMDTYModelList.Cells(i, 1).Address & "&" & """" & "Factor1" & """"
    Next i
    
    For i = 1 To numCRModel
        rngCorrAnchor.Offset(0, i + numCMDTYModel + 1) = "CR" & CStr(i) & "Factor1"
        rngCorrAnchor.Offset(i + numCMDTYModel + 1, 0) = "CR" & CStr(i) & "Factor1"
    Next i
    
    For i = 1 To numCMDTYModel + numCRModel + 1
        rngCorrAnchor.Offset(i, i) = 1
        For j = i + 1 To numCMDTYModel + numCRModel + 1
            rngCorrAnchor.Offset(i, j) = 0
        Next j
    Next i
    
    rngCorrAnchor.Formula = "=nxlibmatrix(" & Range(rngCorrAnchor.Offset(0, 1), rngCorrAnchor.Offset(0, numCMDTYModel + numCRModel + 1)).Address & "," _
                                            & Range(rngCorrAnchor.Offset(1, 0), rngCorrAnchor.Offset(numCMDTYModel + numCRModel + 1, 0)).Address & "," _
                                            & Range(rngCorrAnchor.Offset(1, 1), rngCorrAnchor.Offset(numCMDTYModel + numCRModel + 1, numCMDTYModel + numCRModel + 1)).Address & "," _
                                            & """" & "IR_CRB_CMDTYB_Corr.Data" & """" & ")"
                                            
    Call formatColorAndBorder(rngCorrAnchor)
    Call formatColorAndBorder(Range(rngCorrAnchor.Offset(1, 1), rngCorrAnchor.Offset(numCMDTYModel + numCRModel + 1, numCMDTYModel + numCRModel + 1)))
    Call formatHeader(Range(rngCorrAnchor.Offset(0, 1), rngCorrAnchor.Offset(0, numCMDTYModel + numCRModel + 1)))
    Call formatHeader(Range(rngCorrAnchor.Offset(1, 0), rngCorrAnchor.Offset(numCMDTYModel + numCRModel + 1, 0)))
    
CleanUp:
    Application.EnableEvents = True
    Application.ScreenUpdating = True
    Set rngCRModels = Nothing
    Set rngCRModelList = Nothing
    Set rngCRModelListAnchor = Nothing
    Set rngCMDTYModels = Nothing
    Set rngCMDTYModelList = Nothing
    Set rngCMDTYModelListAnchor = Nothing
    Set rngCorrAnchor = Nothing
    Exit Sub
   
errorHandler:
    Call VBA.MsgBox("Error in resizing the model", vbCritical + vbOKOnly, "Error")
    GoTo CleanUp
    End Sub

Private Sub Worksheet_Activate()
    On Error GoTo CleanUp
    
    ComboBoxCRModelNum.Clear
    ComboBoxCRModelNum.AddItem ("1 CR Model")
    ComboBoxCRModelNum.AddItem ("2 CR Models")
    ComboBoxCRModelNum.AddItem ("3 CR Models")
    ComboBoxCRModelNum.AddItem ("4 CR Models")
    ComboBoxCRModelNum.AddItem ("5 CR Models")
    ComboBoxCRModelNum.AddItem ("6 CR Models")
    ComboBoxCRModelNum.AddItem ("7 CR Models")
    ComboBoxCRModelNum.AddItem ("8 CR Models")
    ComboBoxCRModelNum.AddItem ("9 CR Models")
    ComboBoxCRModelNum.AddItem ("10 CR Models")
    ComboBoxCRModelNum.Text = "1 CR Model"
    
    ComboBoxCMDTYModelNum.Clear
    ComboBoxCMDTYModelNum.AddItem ("1 CMDTY Model")
    ComboBoxCMDTYModelNum.AddItem ("2 CMDTY Models")
    ComboBoxCMDTYModelNum.AddItem ("3 CMDTY Models")
    ComboBoxCMDTYModelNum.AddItem ("4 CMDTY Models")
    ComboBoxCMDTYModelNum.AddItem ("5 CMDTY Models")
    ComboBoxCMDTYModelNum.AddItem ("6 CMDTY Models")
    ComboBoxCMDTYModelNum.AddItem ("7 CMDTY Models")
    ComboBoxCMDTYModelNum.AddItem ("8 CMDTY Models")
    ComboBoxCMDTYModelNum.AddItem ("9 CMDTY Models")
    ComboBoxCMDTYModelNum.AddItem ("10 CMDTY Models")
    ComboBoxCMDTYModelNum.Text = "1 CMDTY Model"
    
    hasBeenInitialised = True

CleanUp:
    ActiveSheet.Calculate
End Sub


'Resizing the correlation matrix after changing the Factor number for any model
Private Sub Worksheet_Change(ByVal Target As Range)
    On Error GoTo CleanUp
    Application.EnableEvents = False
    Application.ScreenUpdating = False
    
    Dim asn$: asn = ActiveSheet.Name
    Dim rngCRModelList As Range: Set rngCRModelList = Range("NX_" & asn & "_M_CRModelList")
    Dim numCRModels%: numCRModels = rngCRModelList.Rows.count
    Dim rngCRModelFactorNumList As Range: Set rngCRModelFactorNumList = Range(rngCRModelList.Cells(1, 2), rngCRModelList.Cells(numCRModels, 2))
    Dim rngCMDTYModelList As Range: Set rngCMDTYModelList = Range("NX_" & asn & "_M_CMDTYModelList")
    Dim numCMDTYModels%: numCMDTYModels = rngCMDTYModelList.Rows.count
    Dim rngCMDTYModelFactorNumList As Range: Set rngCMDTYModelFactorNumList = Range(rngCMDTYModelList(1, 3), rngCMDTYModelList(numCMDTYModels, 3))
    Dim rngIRModelFactorNum As Range: Set rngIRModelFactorNum = Range("NX_" & asn & "_M_IRMOdelFactorNum")
    
    If Intersect(Target, rngCRModelFactorNumList) Is Nothing And Intersect(Target, rngCMDTYModelFactorNumList) Is Nothing And _
        Intersect(Target, rngIRModelFactorNum) Is Nothing Then
        GoTo CleanUp
    End If
        
    
    Dim rngCorrAnchor As Range: Set rngCorrAnchor = Range("NX_" & asn & "_M_CorrAnchor")
    rngCorrAnchor.CurrentRegion.Clear
    Dim IRModelFactorNum%: IRModelFactorNum = rngIRModelFactorNum.Value
    Dim CMDTYModelFactorNum%, CRModelFactorNum%
    Dim i%, j%
    Dim count%: count = 0
    For i = 1 To IRModelFactorNum
        count = count + 1
        rngCorrAnchor.Offset(0, count) = "DomesticModelFactor" & CStr(i)
        rngCorrAnchor.Offset(count, 0) = "DomesticModelFactor" & CStr(i)
    Next i
    
    For i = 1 To numCMDTYModels
        CMDTYModelFactorNum = rngCMDTYModelList.Cells(i, 3).Value
        For j = 1 To CMDTYModelFactorNum
            count = count + 1
            rngCorrAnchor.Offset(0, count) = "=" & rngCMDTYModelList.Cells(i, 1).Address & "&" & """" & "Factor" & CStr(j) & """"
            rngCorrAnchor.Offset(count, 0) = "=" & rngCMDTYModelList.Cells(i, 1).Address & "&" & """" & "Factor" & CStr(j) & """"
        Next j
    Next i
    
    For i = 1 To numCRModels
        CRModelFactorNum = rngCRModelList.Cells(i, 2).Value
        For j = 1 To CRModelFactorNum
            count = count + 1
            rngCorrAnchor.Offset(0, count) = "CR" & CStr(i) & "Factor" & CStr(j)
            rngCorrAnchor.Offset(count, 0) = "CR" & CStr(i) & "Factor" & CStr(j)
        Next j
    Next i
    
    For i = 1 To count
        rngCorrAnchor.Offset(i, i) = 1
        For j = i + 1 To count
            rngCorrAnchor.Offset(i, j) = 0
        Next j
    Next i
    
    rngCorrAnchor.Formula = "=nxlibmatrix(" & Range(rngCorrAnchor.Offset(0, 1), rngCorrAnchor.Offset(0, count)).Address & "," _
                                            & Range(rngCorrAnchor.Offset(1, 0), rngCorrAnchor.Offset(count, 0)).Address & "," _
                                            & Range(rngCorrAnchor.Offset(1, 1), rngCorrAnchor.Offset(count, count)).Address & "," _
                                            & """" & "IR_CRB_CMDTYB_Corr.Data" & """" & ")"
    
    
    Call formatColorAndBorder(rngCorrAnchor)
    Call formatColorAndBorder(Range(rngCorrAnchor.Offset(1, 1), rngCorrAnchor.Offset(count, count)))
    Call formatHeader(Range(rngCorrAnchor.Offset(0, 1), rngCorrAnchor.Offset(0, count)))
    Call formatHeader(Range(rngCorrAnchor.Offset(1, 0), rngCorrAnchor.Offset(count, 0)))
       
    Range(rngCorrAnchor.Offset(1, 1), rngCorrAnchor.Offset(count, count)).Select
    
CleanUp:
    Application.EnableEvents = True
    Application.ScreenUpdating = True
End Sub





''' Formatting Module

Private Sub addConditionalFormat(tempRng As Range)
    tempRng.Select
    Selection.FormatConditions.Delete
    Selection.FormatConditions.Add Type:=xlCellValue, Operator:=xlEqual, _
        Formula1:="=""<LINK>"""
    Selection.FormatConditions(1).Interior.ColorIndex = 3
        
    Cells(1, 1).Select
End Sub

Private Sub formatHeader(tempRng As Range)
    tempRng.Select
    With Selection.Interior
        .Pattern = xlSolid
        .PatternColorIndex = xlAutomatic
        .Color = 10040115
    End With
    With Selection.Font
        .ColorIndex = 2
        .Name = "Calibri"
        .Size = 11
    End With
    Cells(1, 1).Select
End Sub

Private Sub formatColorAndBorder(tempRng As Range)
    tempRng.Select
    Selection.HorizontalAlignment = xlCenter
    Selection.Borders(xlDiagonalDown).LineStyle = xlNone
    Selection.Borders(xlDiagonalUp).LineStyle = xlNone
    With Selection.Borders(xlEdgeLeft)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlEdgeTop)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlEdgeRight)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .Weight = xlThin
    End With
    Selection.Borders(xlInsideVertical).LineStyle = xlNone
    Selection.Borders(xlInsideHorizontal).LineStyle = xlNone
    With Selection.Interior
        .Pattern = xlSolid
        .PatternColorIndex = xlAutomatic
        .ColorIndex = 2
    End With
    With Selection.Font
        .Name = "Calibri"
        .Size = 11
    End With
    Cells(1, 1).Select

End Sub

Private Sub addDataValidation(tempRng As Range)
    tempRng.Select
    With Selection.Validation
        .Delete
        .Add Type:=xlValidateWholeNumber, AlertStyle:=xlValidAlertStop, _
        Operator:=xlGreaterEqual, Formula1:="1"
        .IgnoreBlank = True
        .InCellDropdown = True
        .InputTitle = ""
        .ErrorTitle = "Incorrect Input"
        .InputMessage = ""
        .ErrorMessage = "Please input an integer"
        .ShowInput = True
        .ShowError = True
    End With
    Cells(1, 1).Select
End Sub

Attribute VB_Name = "Sheet9"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "ComboBoxEQModelNum, 1, 0, MSForms, ComboBox"
Attribute VB_Control = "ResizeButton, 2, 1, MSForms, CommandButton"
Attribute VB_Control = "CreateButton, 3, 2, MSForms, CommandButton"
Option Explicit
Private hasBeenInitialised As Boolean


Private Sub CreateButton_Click()
    On Error GoTo errorHandler
    Application.EnableEvents = False
    Dim rngEQModelList As Range: Set rngEQModelList = Range("NX_" & ActiveSheet.Name & "_M_EQModelList")
    Dim rngModelListAnchor As Range: Set rngModelListAnchor = rngEQModelList.Cells(1, 1).Offset(-1, 0)
    Dim numEQModels%: numEQModels = rngEQModelList.Rows.count
    Dim rngEQModels As Range: Set rngEQModels = Range("NX_" & ActiveSheet.Name & "_M_EQModels")
    rngEQModels.Formula = "=nxlibdata(" & Range(rngModelListAnchor, rngModelListAnchor.Offset(0, 1)).Address & "," & Range(rngModelListAnchor.Offset(1, 0), rngModelListAnchor.Offset(numEQModels, 1)).Address & "," & """" & "IR_EQB_EQModel.Data" & """" & ")"
    ActiveSheet.Calculate
CleanUp:
    Application.EnableEvents = True
    Exit Sub
errorHandler:
    Call VBA.MsgBox("Error in creating model table data", vbCritical + vbOKOnly, "Error")
    GoTo CleanUp
    End Sub

Private Sub ResizeButton_Click()
    On Error GoTo CleanUp
    Application.ScreenUpdating = False
    Dim temp As Variant: temp = Split(ComboBoxEQModelNum.Text, " ")
    If Not IsNumeric(temp(0)) Then
        MsgBox "Fatal error when resizing ComboBox"
        GoTo CleanUp
    Else
        Resize CInt(temp(0))
    End If
    On Error GoTo 0
    
CleanUp:
    Application.ScreenUpdating = True
    ActiveSheet.Calculate
End Sub



Public Sub Resize(numEQModel As Integer)
    On Error GoTo errorHandler
    Application.EnableEvents = False
    Application.ScreenUpdating = False
    
    Dim asn$: asn = ActiveSheet.Name
    Dim rngEQModels As Range: Set rngEQModels = Range("NX_" & asn & "_M_EQModels")
    Dim rngEQModelList As Range: Set rngEQModelList = Range("NX_" & asn & "_M_EQModelList")
    Dim rngIRModelFactorNum As Range: Set rngIRModelFactorNum = Range("NX_" & asn & "_M_IRModelFactorNum")
    Dim rngCorrAnchor As Range: Set rngCorrAnchor = Range("NX_" & asn & "_M_CorrAnchor")
    Dim rngEQModelListAnchor As Range: Set rngEQModelListAnchor = rngEQModelList.Cells(1, 1).Offset(-1, 0)
        
    rngEQModelList.Clear
    rngCorrAnchor.CurrentRegion.Clear
    rngEQModels = "<LINK>"
    rngIRModelFactorNum.Value = 1
    
    'Resize the CR Model table
    Dim i%, j%
    For i = 1 To numEQModel
        rngEQModelListAnchor.Offset(i, 0) = "<LINK>"
        rngEQModelListAnchor.Offset(i, 1) = "<LINK>"
        rngEQModelListAnchor.Offset(i, 2) = 1
    Next i
    Range(rngEQModelListAnchor.Offset(1, 0), rngEQModelListAnchor.Offset(numEQModel, 2)).Select
    ActiveWorkbook.Names.Add Name:="NX_" & asn & "_M_EQModelList", RefersTo:=Selection
    Set rngEQModelList = Range("NX_" & asn & "_M_EQModelList")
    Call formatColorAndBorder(rngEQModelList)
    Call addConditionalFormat(Range(rngEQModelListAnchor.Offset(1, 0), rngEQModelListAnchor.Offset(numEQModel, 1)))
    Call addDataValidation(Range(rngEQModelListAnchor.Offset(1, 2), rngEQModelListAnchor.Offset(numEQModel, 2)))
    
    rngCorrAnchor.Offset(0, 1) = "DomesticModelFactor1"
    rngCorrAnchor.Offset(1, 0) = "DomesticModelFactor1"

    For i = 1 To numEQModel
        rngCorrAnchor.Offset(0, i + 1) = "=" & rngEQModelList.Cells(i, 1).Address & "&" & """" & "Factor1" & """"
        rngCorrAnchor.Offset(i + 1, 0) = "=" & rngEQModelList.Cells(i, 1).Address & "&" & """" & "Factor1" & """"
    Next i
    
    For i = 1 To numEQModel + 1
        rngCorrAnchor.Offset(i, i) = 1
        For j = i + 1 To numEQModel + 1
            rngCorrAnchor.Offset(i, j) = 0
        Next j
    Next i
    
    rngCorrAnchor.Formula = "=nxlibmatrix(" & Range(rngCorrAnchor.Offset(0, 1), rngCorrAnchor.Offset(0, numEQModel + 1)).Address & "," _
                                            & Range(rngCorrAnchor.Offset(1, 0), rngCorrAnchor.Offset(numEQModel + 1, 0)).Address & "," _
                                            & Range(rngCorrAnchor.Offset(1, 1), rngCorrAnchor.Offset(numEQModel + 1, numEQModel + 1)).Address & "," _
                                            & """" & "IR_EQB_Corr.Data" & """" & ")"
    Call formatColorAndBorder(rngCorrAnchor)
    Call formatColorAndBorder(Range(rngCorrAnchor.Offset(1, 1), rngCorrAnchor.Offset(numEQModel + 1, numEQModel + 1)))
    Call formatHeader(Range(rngCorrAnchor.Offset(0, 1), rngCorrAnchor.Offset(0, numEQModel + 1)))
    Call formatHeader(Range(rngCorrAnchor.Offset(1, 0), rngCorrAnchor.Offset(numEQModel + 1, 0)))
      
CleanUp:
    Application.EnableEvents = True
    Application.ScreenUpdating = True
    Exit Sub
   
errorHandler:
    Call VBA.MsgBox("Error in resizing the model", vbCritical + vbOKOnly, "Error")
    GoTo CleanUp
    End Sub


Private Sub Worksheet_Activate()
    On Error GoTo CleanUp
    ComboBoxEQModelNum.Clear
    ComboBoxEQModelNum.AddItem ("1 EQ Model")
    ComboBoxEQModelNum.AddItem ("2 EQ Models")
    ComboBoxEQModelNum.AddItem ("3 EQ Models")
    ComboBoxEQModelNum.AddItem ("4 EQ Models")
    ComboBoxEQModelNum.AddItem ("5 EQ Models")
    ComboBoxEQModelNum.AddItem ("6 EQ Models")
    ComboBoxEQModelNum.AddItem ("7 EQ Models")
    ComboBoxEQModelNum.AddItem ("8 EQ Models")
    ComboBoxEQModelNum.AddItem ("9 EQ Models")
    ComboBoxEQModelNum.AddItem ("10 EQ Models")
    ComboBoxEQModelNum.Text = "1 EQ Model"
    hasBeenInitialised = True

CleanUp:
    ActiveSheet.Calculate
End Sub

'Resizing the correlation matrix after changing the Factor number for any model
Private Sub Worksheet_Change(ByVal Target As Range)
    On Error GoTo CleanUp
    Application.EnableEvents = False
    Application.ScreenUpdating = False
    
    Dim asn$: asn = ActiveSheet.Name
    Dim rngEQModelList As Range: Set rngEQModelList = Range("NX_" & asn & "_M_EQModelList")
    Dim numEQModels%: numEQModels = rngEQModelList.Rows.count
    Dim rngEQModelFactorNumList As Range: Set rngEQModelFactorNumList = Range(rngEQModelList.Cells(1, 3), rngEQModelList.Cells(numEQModels, 3))
    Dim rngIRModelFactorNum As Range: Set rngIRModelFactorNum = Range("NX_" & asn & "_M_IRMOdelFactorNum")
    
    If Intersect(Target, rngEQModelFactorNumList) Is Nothing And Intersect(Target, rngIRModelFactorNum) Is Nothing Then
        GoTo CleanUp
    End If
            
    Dim rngCorrAnchor As Range: Set rngCorrAnchor = Range("NX_" & asn & "_M_CorrAnchor")
    rngCorrAnchor.CurrentRegion.Clear
    Dim IRModelFactorNum%: IRModelFactorNum = rngIRModelFactorNum.Value
    Dim EQModelFactorNum%
    Dim i%, j%
    Dim count%: count = 0
    
    For i = 1 To IRModelFactorNum
        count = count + 1
        rngCorrAnchor.Offset(0, count) = "DomesticModelFactor" & CStr(i)
        rngCorrAnchor.Offset(count, 0) = "DomesticModelFactor" & CStr(i)
    Next i
    
    For i = 1 To numEQModels
        EQModelFactorNum = rngEQModelList.Cells(i, 3).Value
        For j = 1 To EQModelFactorNum
            count = count + 1
            rngCorrAnchor.Offset(0, count) = "=" & rngEQModelList.Cells(i, 1).Address & "&" & """" & "Factor" & CStr(j) & """"
            rngCorrAnchor.Offset(count, 0) = "=" & rngEQModelList.Cells(i, 1).Address & "&" & """" & "Factor" & CStr(j) & """"
        Next j
    Next i
    
    For i = 1 To count
        rngCorrAnchor.Offset(i, i) = 1
        For j = i + 1 To count
            rngCorrAnchor.Offset(i, j) = 0
        Next j
    Next i
    
    rngCorrAnchor.Formula = "=nxlibmatrix(" & Range(rngCorrAnchor.Offset(0, 1), rngCorrAnchor.Offset(0, count)).Address & "," _
                                            & Range(rngCorrAnchor.Offset(1, 0), rngCorrAnchor.Offset(count, 0)).Address & "," _
                                            & Range(rngCorrAnchor.Offset(1, 1), rngCorrAnchor.Offset(count, count)).Address & "," _
                                            & """" & "IR_EQB_Corr.Data" & """" & ")"
    
    
    Call formatColorAndBorder(rngCorrAnchor)
    Call formatColorAndBorder(Range(rngCorrAnchor.Offset(1, 1), rngCorrAnchor.Offset(count, count)))
    Call formatHeader(Range(rngCorrAnchor.Offset(0, 1), rngCorrAnchor.Offset(0, count)))
    Call formatHeader(Range(rngCorrAnchor.Offset(1, 0), rngCorrAnchor.Offset(count, 0)))
       
    Range(rngCorrAnchor.Offset(1, 1), rngCorrAnchor.Offset(count, count)).Select
    
CleanUp:
    Application.EnableEvents = True
    Application.ScreenUpdating = True
End Sub



''' Formatting Module

Private Sub addConditionalFormat(tempRng As Range)
    tempRng.Select
    Selection.FormatConditions.Delete
    Selection.FormatConditions.Add Type:=xlCellValue, Operator:=xlEqual, _
        Formula1:="=""<LINK>"""
    Selection.FormatConditions(1).Interior.ColorIndex = 3
    Cells(1, 1).Select
End Sub

Private Sub formatHeader(tempRng As Range)
    tempRng.Select
    With Selection.Interior
        .Pattern = xlSolid
        .PatternColorIndex = xlAutomatic
        .Color = 10040115
    End With
    With Selection.Font
        .ColorIndex = 2
        .Name = "Calibri"
        .Size = 11
    End With
    Cells(1, 1).Select
End Sub

Private Sub formatColorAndBorder(tempRng As Range)
    tempRng.Select
    Selection.HorizontalAlignment = xlCenter
    Selection.Borders(xlDiagonalDown).LineStyle = xlNone
    Selection.Borders(xlDiagonalUp).LineStyle = xlNone
    With Selection.Borders(xlEdgeLeft)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlEdgeTop)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlEdgeRight)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .Weight = xlThin
    End With
    Selection.Borders(xlInsideVertical).LineStyle = xlNone
    Selection.Borders(xlInsideHorizontal).LineStyle = xlNone
    With Selection.Interior
        .Pattern = xlSolid
        .PatternColorIndex = xlAutomatic
        .ColorIndex = 2
    End With
    With Selection.Font
        .Name = "Calibri"
        .Size = 11
    End With
    Cells(1, 1).Select
End Sub


Private Sub addDataValidation(tempRng As Range)
    tempRng.Select
    With Selection.Validation
        .Delete
        .Add Type:=xlValidateWholeNumber, AlertStyle:=xlValidAlertStop, _
        Operator:=xlGreaterEqual, Formula1:="1"
        .IgnoreBlank = True
        .InCellDropdown = True
        .InputTitle = ""
        .ErrorTitle = "Incorrect Input"
        .InputMessage = ""
        .ErrorMessage = "Please input an integer"
        .ShowInput = True
        .ShowError = True
    End With
    Cells(1, 1).Select
End Sub




Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

' InQuest injected base64 decoded content
' zQZr
' zQZr
' zQZr
' Z+z('2

INQUEST-PP=macro
