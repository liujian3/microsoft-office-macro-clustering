Attribute VB_Name = "Lib_EditorControl"
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
' This is a part of the MentorGraphics-ExpeditionPCB OLE Automation server samples.
' Copyright (C) 2003 Mentor Graphics Software, Inc.
' All rights reserved.
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Option Explicit




Public Function licenseDoc(docObj As MGCPCB.Document) As Integer
' =======================================================================
' Retrieve a licence for the document
' =======================================================================
On Error GoTo exit_with_error
Dim retState As Integer

Dim licenseServer As Object
Dim key As Long
Dim licenseToken As Long
Dim outErrMess As String

If (docObj Is Nothing) Then GoTo end_of_function

' Ask the document for a key
key = docObj.Validate(0)

' Get license server
On Error GoTo err_create_serverobj
Set licenseServer = CreateObject("MGCPCBAutomationLicensing.Application")
If (licenseServer Is Nothing) Then GoTo err_create_serverobj
On Error GoTo exit_with_error


' Ask the license server for the license token
licenseToken = licenseServer.GetToken(key)


' Validate the document with the license token
On Error GoTo err_validate
Dim lRetval As Long
lRetval = docObj.Validate(licenseToken)

On Error GoTo exit_with_error

retState = 1

end_of_function:
    ' release licence server
    Set licenseServer = Nothing
    licenseDoc = retState

Exit Function

show_error:
   Dim ioptions As Long
   ioptions = vbDefaultButton1 + vbApplicationModal + vbCritical + vbOKOnly
   MsgBox outErrMess, ioptions, "Retrieving license for document"
   GoTo end_of_function

exit_with_error:
    outErrMess = "** Error ** " + Error$
    retState = -1
    GoTo show_error

err_create_serverobj:
   outErrMess = "** Error ** Could not create license server object"
   retState = -2
   GoTo show_error

err_validate:
   outErrMess = "** Error ** Failed to validate document object"
   outErrMess = outErrMess + vbCrLf + "    License token : " + Trim(str(licenseToken))
   outErrMess = outErrMess + vbCrLf + "    Document key  : " + Trim(str(key))
   retState = -3
   GoTo show_error

End Function



Public Sub PrintTitleRow()
    On Error Resume Next
    
    With Range("A1:C1")
        .Merge
        .FormulaR1C1 = "Selection"
        .Font.Bold = True
        .Font.Italic = True
        .HorizontalAlignment = xlHAlignCenter
    End With
    With Range("D1")
        .FormulaR1C1 = "Description"
        .Font.Bold = True
        .Font.Italic = True
        .HorizontalAlignment = xlHAlignCenter
    End With
    
    Range("A1:D1").Interior.Color = RGB(100, 100, 100)
End Sub

Public Sub PrintRadioItem(rowidx As Integer, level As Integer, Description As String, value As Integer, expectedvalue As Integer)
    On Error Resume Next
    
    If value = expectedvalue Then
        PrintRow rowidx, level, Description, "X"
    Else
        PrintRow rowidx, level, Description, ""
    End If
    
End Sub

Public Sub PrintCheckBoxItem(rowidx As Integer, level As Integer, Description As String, value As Boolean)
    On Error Resume Next
    
    If value = True Then
        PrintRow rowidx, level, Description, "Y"
    Else
        PrintRow rowidx, level, Description, "N"
    End If
    
End Sub

Public Function ReadCheckBoxItem(rowidx As Integer, level As Integer) As Boolean
    On Error Resume Next
    Dim value
    
    
    If level = 0 Then
        value = Range("A" & rowidx).FormulaR1C1
    ElseIf level = 1 Then
        value = Range("A" & rowidx).FormulaR1C1
    ElseIf level = 2 Then
        value = Range("B" & rowidx).FormulaR1C1
    ElseIf level = 3 Then
        value = Range("C" & rowidx).FormulaR1C1
    End If
    
    If value = "Y" Or value = "y" Then
        ReadCheckBoxItem = True
    Else
        ReadCheckBoxItem = False
    End If
    
End Function

Public Function ReadRadioItem(rowidx As Integer, level As Integer) As Boolean
    On Error Resume Next
    
    Dim value
    
    If level = 0 Then
        value = Range("A" & rowidx).FormulaR1C1
    ElseIf level = 1 Then
        value = Range("A" & rowidx).FormulaR1C1
    ElseIf level = 2 Then
        value = Range("B" & rowidx).FormulaR1C1
    ElseIf level = 3 Then
        value = Range("C" & rowidx).FormulaR1C1
    End If
    
    If value = "X" Or value = "x" Then
        ReadRadioItem = True
    Else
        ReadRadioItem = False
    End If
    
End Function

Public Function ReadRow(rowidx As Integer, level As Integer) As String
    On Error Resume Next
    
    Dim value
    
    If level = 0 Then
        value = Range("A" & rowidx).FormulaR1C1
    ElseIf level = 1 Then
        value = Range("A" & rowidx).FormulaR1C1
    ElseIf level = 2 Then
        value = Range("B" & rowidx).FormulaR1C1
    ElseIf level = 3 Then
        value = Range("C" & rowidx).FormulaR1C1
    End If
    
    ReadRow = value
    
End Function

Public Sub PrintRow(rowidx As Integer, level As Integer, Description As String, value As String)
    On Error Resume Next
    
    If level = 0 Then
        Range("A" & rowidx, "D" & rowidx).Interior.Color = RGB(100, 100, 100)
        Range("A" & rowidx).FormulaR1C1 = value
    ElseIf level = 1 Then
        Range("A" & rowidx, "D" & rowidx).Interior.Color = RGB(170, 170, 170)
        Range("A" & rowidx).FormulaR1C1 = value
    ElseIf level = 2 Then
        Range("B" & rowidx).FormulaR1C1 = value
        Description = "  " & Description
    ElseIf level = 3 Then
        Range("C" & rowidx).FormulaR1C1 = value
        Description = "    " & Description
    Else
        Range("A" & rowidx, "D" & rowidx).Interior.Color = RGB(100, 100, 100)
    End If
    
    Range("D" & rowidx).value = Description
    
End Sub

Attribute VB_Name = "Sheet01"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
' This is a part of the MentorGraphics-ExpeditionPCB OLE Automation server samples.
' Copyright (C) 2003 Mentor Graphics Software, Inc.
' All rights reserved.
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Option Explicit

Dim bReportIsBeingUpdated As Boolean
Dim bSelectionsAreBeingUpdated As Boolean

' refreshes the EditorControl values in the Spreadsheet
Public Sub EditorControlValue()
    If ThisWorkbook.GetActiveDoc Is Nothing Then Exit Sub ' If we are not connected, exit procedure
   
    ' empty existing sheet contents
    Range("A1:S1000").Clear
    Range("A1:D1000").Borders.LineStyle = XlLineStyle.xlContinuous
    Range("A1:D1").Borders.Color = RGB(75, 75, 75)
    Range("A2:D1000").Borders.Color = RGB(100, 100, 100)

    Range("A1:D1000").Interior.Color = RGB(200, 200, 200)
    Range("D1:D1000").Interior.Color = RGB(210, 210, 210)
    
    Dim currentRow As Integer
    currentRow = 0
    
    currentRow = currentRow + 1
    On Error Resume Next
    
    ' Lock server (to speed up OLE access)
    If ThisWorkbook.GetActiveApp().LockServer = True Then
        bReportIsBeingUpdated = True
                    
        ' get editor control
        'Dim outline
        Dim editor As MGCPCB.EditorControl
        Set editor = ThisWorkbook.GetActiveDoc().EditorControl
        
        ' Output header
        PrintTitleRow
        currentRow = currentRow + 1
        
        PrintRow currentRow, 0, "Common Settings", ""
        currentRow = currentRow + 1
        
        PrintCheckBoxItem currentRow, 1, "Interative Place/Route DRC", editor.InteractiveDRC
        currentRow = currentRow + 1
        
        PrintCheckBoxItem currentRow, 1, "Move fixed objects with warning", editor.MoveFixedObject
        currentRow = currentRow + 1
        
        PrintRow currentRow, 1, "AutoSave intervals to temp work area:", ""
        currentRow = currentRow + 1
        
        PrintRow currentRow, 2, "Interactive", editor.AutoSave(epcbECInteractive)
        currentRow = currentRow + 1
        
        PrintRow currentRow, 2, "Auto Route", editor.AutoSave(epcbECAuto)
        currentRow = currentRow + 1
        
        
        bReportIsBeingUpdated = False
        
        ' Unlock server
        ThisWorkbook.GetActiveApp.UnlockServer
    End If
Exit Sub

OnErrorServerAccess:
    ThisWorkbook.GetActiveApp().UnlockServer
    MsgBox "Error accessing ExpeditionPCB Server.", , "Automation Demonstration"
End Sub

' refreshes values displayed in Sheet1
Public Sub RefreshValues()
    If ThisWorkbook.GetActiveDoc() Is Nothing Then Exit Sub ' If we are not connected, exit procedure
    EditorControlValue
End Sub

' Main routine
Sub Main()
    bReportIsBeingUpdated = True
    bSelectionsAreBeingUpdated = False
    Sheets("Common Settings").Select ' Make Sheet1 visible
    
    Call ThisWorkbook.Connect   ' Connect to ExpeditionPCB (we use the global ExpeditionPCBApp Object variable)
    
    RefreshValues ' Refresh sheet values
    bReportIsBeingUpdated = False
End Sub



Private Sub Worksheet_Activate()
    Main
End Sub

Private Sub Worksheet_Change(ByVal Target As Excel.Range)
    ' the worksheet has changed - did the user edit one of the editor control coordinate columns?
    ' Target is a reference to the changed cell.
    If ThisWorkbook.GetActiveDoc() Is Nothing Then Exit Sub ' If we are not connected, exit procedure
    
    ' exit if we are updating the worksheet ourselves
    If bReportIsBeingUpdated = True Then Exit Sub
    If bSelectionsAreBeingUpdated = True Then Exit Sub
    
    On Error Resume Next
    If Target.FormulaR1C1 = "" Then
        Exit Sub
    End If
    
    bSelectionsAreBeingUpdated = True
    
    Dim currentRow As Integer
    currentRow = 1
    
    Dim editor As MGCPCB.EditorControl
    Set editor = ThisWorkbook.GetActiveDoc().EditorControl
    
    ' handle errors
    On Error Resume Next
    
        'PrintTitleRow
        currentRow = currentRow + 1
        
        'PrintRow currentRow, 0, "Common Settings", ""
        currentRow = currentRow + 1
        
        If Target.Row = currentRow Then
            editor.InteractiveDRC = ReadCheckBoxItem(currentRow, 1)
        End If
        currentRow = currentRow + 1
        
        If Target.Row = currentRow Then
            editor.MoveFixedObject = ReadCheckBoxItem(currentRow, 1)
        End If
        currentRow = currentRow + 1
        
        'PrintRow currentRow, 1, "AutoSave intervals to temp work area:", ""
        currentRow = currentRow + 1
        
        If Target.Row = currentRow Then
            editor.AutoSave(epcbECInteractive) = ReadRow(currentRow, 2)
        End If
        currentRow = currentRow + 1
        
        If Target.Row = currentRow Then
            editor.AutoSave(epcbECAuto) = ReadRow(currentRow, 2)
        End If
        currentRow = currentRow + 1
        
    bSelectionsAreBeingUpdated = False
    RefreshValues
End Sub

Attribute VB_Name = "Sheet02"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
' This is a part of the MentorGraphics-ExpeditionPCB OLE Automation server samples.
' Copyright (C) 2003 Mentor Graphics Software, Inc.
' All rights reserved.
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Option Explicit

Dim bReportIsBeingUpdated As Boolean
Dim bSelectionsAreBeingUpdated As Boolean

' refreshes the EditorControl values in the Spreadsheet
Public Sub EditorControlValue()
    If ThisWorkbook.GetActiveDoc Is Nothing Then Exit Sub ' If we are not connected, exit procedure
   
    ' empty existing sheet contents
    Range("A1:S1000").Clear
    Range("A1:D1000").Borders.LineStyle = XlLineStyle.xlContinuous
    Range("A1:D1").Borders.Color = RGB(75, 75, 75)
    Range("A2:D1000").Borders.Color = RGB(100, 100, 100)

    Range("A1:D1000").Interior.Color = RGB(200, 200, 200)
    Range("D1:D1000").Interior.Color = RGB(210, 210, 210)
    
    Dim currentRow As Integer
    currentRow = 0
    
    currentRow = currentRow + 1
    On Error Resume Next
    
    ' Lock server (to speed up OLE access)
    If ThisWorkbook.GetActiveApp().LockServer = True Then
        bReportIsBeingUpdated = True
                    
        ' get editor control
        'Dim outline
        Dim editor As MGCPCB.EditorControl
        Set editor = ThisWorkbook.GetActiveDoc.EditorControl
        
        ' Output header
        PrintTitleRow
        currentRow = currentRow + 1
        
        PrintRow currentRow, 0, "General Options", ""
        currentRow = currentRow + 1
        
        PrintRow currentRow, 1, "Online 2d Placement DRC", ""
        currentRow = currentRow + 1
        
        PrintRadioItem currentRow, 2, "Warning", editor.PartsOnlineDRC, 1
        currentRow = currentRow + 1
        
        PrintRadioItem currentRow, 2, "Preventative w/ Shove Parts", editor.PartsOnlineDRC, 2
        currentRow = currentRow + 1
        
        PrintRadioItem currentRow, 2, "Preventative w/o Shove Parts", editor.PartsOnlineDRC, 3
        currentRow = currentRow + 1
        
        
        PrintRow currentRow, 1, "Online 3d Placement DRC", ""
        currentRow = currentRow + 1
        
        PrintRadioItem currentRow, 2, "Off", editor.Parts3DDRC, 0
        currentRow = currentRow + 1
        
        PrintRadioItem currentRow, 2, "Warning", editor.Parts3DDRC, 1
        currentRow = currentRow + 1
        
        PrintRadioItem currentRow, 2, "Preventative", editor.Parts3DDRC, 2
        currentRow = currentRow + 1
        
        
        PrintRow currentRow, 1, "MST Netline Optimization", ""
        currentRow = currentRow + 1
        
        PrintRow currentRow, 2, "Place", ""
        currentRow = currentRow + 1
        
        PrintRadioItem currentRow, 3, "Minimum", editor.NetlineOptimizationModeForPlace, 1
        currentRow = currentRow + 1
        
        PrintRadioItem currentRow, 3, "Local", editor.NetlineOptimizationModeForPlace, 2
        currentRow = currentRow + 1
        
        PrintRadioItem currentRow, 3, "Full", editor.NetlineOptimizationModeForPlace, 3
        currentRow = currentRow + 1
        
        PrintRow currentRow, 2, "Move", ""
        currentRow = currentRow + 1
        
        PrintRadioItem currentRow, 3, "None", editor.NetlineOptimizationModeForMove, 0
        currentRow = currentRow + 1
        
        PrintRadioItem currentRow, 3, "Minimum", editor.NetlineOptimizationModeForMove, 1
        currentRow = currentRow + 1
        
        PrintRadioItem currentRow, 3, "Local", editor.NetlineOptimizationModeForMove, 2
        currentRow = currentRow + 1
        
        PrintRadioItem currentRow, 3, "Full", editor.NetlineOptimizationModeForMove, 3
        currentRow = currentRow + 1
        
        
        PrintRow currentRow, 1, "Netline display while moving parts", ""
        currentRow = currentRow + 1
        
        PrintCheckBoxItem currentRow, 2, "Display local netlines only", editor.PartsWhileMoving(epcbECDsplyLocalNetlines)
        currentRow = currentRow + 1
        
        PrintCheckBoxItem currentRow, 2, "Dynamic netline ordering", editor.PartsWhileMoving(epcbECDynNetlineOrdering)
        currentRow = currentRow + 1
        
        PrintRow currentRow, 2, "Maximum Number of pins to Display Netlines", editor.MaxPinsOnCmpForNetlineDisplay
        currentRow = currentRow + 1
        
        
        PrintRow currentRow, 1, "Part alignment", ""
        currentRow = currentRow + 1
        
        PrintRadioItem currentRow, 2, "Cell origin", editor.PartsAlignment, epcbECPartAlignOrigin
        currentRow = currentRow + 1
        
        PrintRadioItem currentRow, 2, "Centroid of pins", editor.PartsAlignment, epcbECPartAlignCentroid
        currentRow = currentRow + 1
        
        PrintRadioItem currentRow, 2, "Pin centers", editor.PartsAlignment, epcbECPartAlignPinCenter
        currentRow = currentRow + 1
        
        
        PrintCheckBoxItem currentRow, 1, "Allow Cell Text Edits", editor.AllowCellTextEdits
        currentRow = currentRow + 1
        
        PrintCheckBoxItem currentRow, 1, "Allow Cell Graphics Edits", editor.AllowCellGraphicsEdits
        currentRow = currentRow + 1
        
        PrintRow currentRow, 0, "Jumpers", ""
        currentRow = currentRow + 1
        
        PrintCheckBoxItem currentRow, 1, "Press spacebar to add jumper", editor.JumperPressSpaceBarToAdd
        currentRow = currentRow + 1
        
        PrintRow currentRow, 1, "Jumper placement angle:", ""
        currentRow = currentRow + 1
        
        PrintRadioItem currentRow, 2, "Orthogonal", editor.JumperAngle, True
        currentRow = currentRow + 1
        
        PrintRadioItem currentRow, 2, "Any angle", editor.JumperAngle, False
        currentRow = currentRow + 1
        
        PrintCheckBoxItem currentRow, 1, "Enable Silver Jumpers", editor.SilverJumpersEnabled
        currentRow = currentRow + 1
        
        
        bReportIsBeingUpdated = False
        
        ' Unlock server
        ThisWorkbook.GetActiveApp().UnlockServer
    End If
Exit Sub

OnErrorServerAccess:
    ThisWorkbook.GetActiveApp().UnlockServer
    MsgBox "Error accessing ExpeditionPCB Server.", , "Automation Demonstration"
End Sub

' refreshes values displayed in Sheet1
Public Sub RefreshValues()
    If ThisWorkbook.GetActiveDoc Is Nothing Then Exit Sub ' If we are not connected, exit procedure
    EditorControlValue
End Sub

' Main routine
Sub Main()
    bReportIsBeingUpdated = True
    bSelectionsAreBeingUpdated = False
    Sheets("Place").Select ' Make Sheet1 visible
    
    Call ThisWorkbook.Connect   ' Connect to ExpeditionPCB (we use the global ThisWorkbook.GetActiveApp Object variable)
    
    RefreshValues ' Refresh sheet values
    bReportIsBeingUpdated = False
End Sub

Private Sub Worksheet_Activate()
    Main
End Sub

Private Sub Worksheet_Change(ByVal Target As Excel.Range)
    ' the worksheet has changed - did the user edit one of the editor control coordinate columns?
    ' Target is a reference to the changed cell.
    If ThisWorkbook.GetActiveDoc Is Nothing Then Exit Sub ' If we are not connected, exit procedure
    
    ' exit if we are updating the worksheet ourselves
    If bReportIsBeingUpdated = True Then Exit Sub
    If bSelectionsAreBeingUpdated = True Then Exit Sub
    
    On Error Resume Next
    If Target.FormulaR1C1 = "" Then
        Exit Sub
    End If
    
    bSelectionsAreBeingUpdated = True
    
    ' get editor control
    Dim editor As MGCPCB.EditorControl
    Set editor = ThisWorkbook.GetActiveDoc.EditorControl
    
    If Target.FormulaR1C1 = "" Then
        bSelectionsAreBeingUpdated = False
        Exit Sub
    End If
    
    
    Dim currentRow As Integer
    currentRow = 1
    
        ' Output header
        
        currentRow = currentRow + 1
        
        'PrintRow currentRow, 0, "General Options", ""
        currentRow = currentRow + 1
        
        'PrintRow currentRow, 1, "Online 2d Placement DRC", ""
        currentRow = currentRow + 1
        
        If Target.Row = currentRow And ReadRadioItem(currentRow, 2) Then
            editor.PartsOnlineDRC = 1
        End If
        currentRow = currentRow + 1
        
        If Target.Row = currentRow And ReadRadioItem(currentRow, 2) Then
            editor.PartsOnlineDRC = 2
        End If
        currentRow = currentRow + 1
        
        If Target.Row = currentRow And ReadRadioItem(currentRow, 2) Then
            editor.PartsOnlineDRC = 3
        End If
        currentRow = currentRow + 1
        
        
        
        'PrintRow currentRow, 1, "Online 3d Placement DRC", ""
        currentRow = currentRow + 1
        
        If Target.Row = currentRow And ReadRadioItem(currentRow, 2) Then
            editor.Parts3DDRC = 0
        End If
        currentRow = currentRow + 1
        
        If Target.Row = currentRow And ReadRadioItem(currentRow, 2) Then
            editor.Parts3DDRC = 1
        End If
        currentRow = currentRow + 1
        
        If Target.Row = currentRow And ReadRadioItem(currentRow, 2) Then
            editor.Parts3DDRC = 2
        End If
        currentRow = currentRow + 1
        
        
        
        'PrintRow currentRow, 1, "MST Netline Optimization", ""
        currentRow = currentRow + 1
        
        'PrintRow currentRow, 2, "Place", ""
        currentRow = currentRow + 1
        
        If Target.Row = currentRow And ReadRadioItem(currentRow, 3) Then
            editor.NetlineOptimizationModeForPlace = 1
        End If
        currentRow = currentRow + 1
        
        If Target.Row = currentRow And ReadRadioItem(currentRow, 3) Then
            editor.NetlineOptimizationModeForPlace = 2
        End If
        currentRow = currentRow + 1
        
        If Target.Row = currentRow And ReadRadioItem(currentRow, 3) Then
            editor.NetlineOptimizationModeForPlace = 3
        End If
        currentRow = currentRow + 1
        
        
        'PrintRow currentRow, 2, "Move", ""
        currentRow = currentRow + 1
        
        If Target.Row = currentRow And ReadRadioItem(currentRow, 3) Then
            editor.NetlineOptimizationModeForMove = 0
        End If
        currentRow = currentRow + 1
        
        If Target.Row = currentRow And ReadRadioItem(currentRow, 3) Then
            editor.NetlineOptimizationModeForMove = 1
        End If
        currentRow = currentRow + 1
        
        If Target.Row = currentRow And ReadRadioItem(currentRow, 3) Then
            editor.NetlineOptimizationModeForMove = 2
        End If
        currentRow = currentRow + 1
        
        If Target.Row = currentRow And ReadRadioItem(currentRow, 3) Then
            editor.NetlineOptimizationModeForMove = 3
        End If
        currentRow = currentRow + 1
        
        
        'PrintRow currentRow, 1, "Netline display while moving parts", ""
        currentRow = currentRow + 1
        
        If Target.Row = currentRow Then
            editor.PartsWhileMoving(epcbECDsplyLocalNetlines) = ReadCheckBoxItem(currentRow, 2)
        End If
        currentRow = currentRow + 1
        
        If Target.Row = currentRow Then
            editor.PartsWhileMoving(epcbECDynNetlineOrdering) = ReadCheckBoxItem(currentRow, 2)
        End If
        currentRow = currentRow + 1
        
        If Target.Row = currentRow Then
            editor.MaxPinsOnCmpForNetlineDisplay = ReadRow(currentRow, 2)
        End If
        currentRow = currentRow + 1
        
        
        'PrintRow currentRow, 1, "Part alignment", ""
        currentRow = currentRow + 1
        
        If Target.Row = currentRow And ReadRadioItem(currentRow, 2) Then
            editor.PartsAlignment = epcbECPartAlignOrigin
        End If
        currentRow = currentRow + 1
        
        If Target.Row = currentRow And ReadRadioItem(currentRow, 2) Then
            editor.PartsAlignment = epcbECPartAlignCentroid
        End If
        currentRow = currentRow + 1
        
        If Target.Row = currentRow And ReadRadioItem(currentRow, 2) Then
            editor.PartsAlignment = epcbECPartAlignPinCenter
        End If
        currentRow = currentRow + 1
        
        
        If Target.Row = currentRow Then
            editor.AllowCellTextEdits = ReadCheckBoxItem(currentRow, 1)
        End If
        currentRow = currentRow + 1
        
        If Target.Row = currentRow Then
            editor.AllowCellGraphicsEdits = ReadCheckBoxItem(currentRow, 1)
        End If
        currentRow = currentRow + 1
        
        
        'PrintRow currentRow, 0, "Jumpers", ""
        currentRow = currentRow + 1
        
        If Target.Row = currentRow Then
            editor.JumperPressSpaceBarToAdd = ReadCheckBoxItem(currentRow, 1)
        End If
        currentRow = currentRow + 1
        
        
        'PrintRow currentRow, 1, "Jumper placement angle:", ""
        currentRow = currentRow + 1
        
        If Target.Row = currentRow And ReadRadioItem(currentRow, 2) Then
            editor.JumperAngle = True
        End If
        currentRow = currentRow + 1
        
        If Target.Row = currentRow And ReadRadioItem(currentRow, 2) Then
            editor.JumperAngle = False
        End If
        currentRow = currentRow + 1
        
        If Target.Row = currentRow Then
            editor.SilverJumpersEnabled = ReadCheckBoxItem(currentRow, 1)
        End If
        currentRow = currentRow + 1
        
        
        
    bSelectionsAreBeingUpdated = False
    RefreshValues
End Sub

Attribute VB_Name = "Sheet03"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
' This is a part of the MentorGraphics-ExpeditionPCB OLE Automation server samples.
' Copyright (C) 2003 Mentor Graphics Software, Inc.
' All rights reserved.
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Option Explicit


Dim bReportIsBeingUpdated As Boolean
Dim bSelectionsAreBeingUpdated As Boolean


' refreshes the EditorControl values in the Spreadsheet
Public Sub EditorControlValue()
    If ThisWorkbook.GetActiveDoc Is Nothing Then Exit Sub ' If we are not connected, exit procedure
   
    ' empty existing sheet contents
    Range("A1:S1000").Clear
    Range("A1:D1000").Borders.LineStyle = XlLineStyle.xlContinuous
    Range("A1:D1").Borders.Color = RGB(75, 75, 75)
    Range("A2:D1000").Borders.Color = RGB(100, 100, 100)

    Range("A1:D1000").Interior.Color = RGB(200, 200, 200)
    Range("D1:D1000").Interior.Color = RGB(210, 210, 210)
    
    Dim currentRow As Integer
    currentRow = 0
    
    currentRow = currentRow + 1
    On Error Resume Next
    
    ' Lock server (to speed up OLE access)
    If ThisWorkbook.GetActiveApp.LockServer = True Then
        bReportIsBeingUpdated = True
                    
        ' get editor control
        'Dim outline
        Dim editor As MGCPCB.EditorControl
        Set editor = ThisWorkbook.GetActiveDoc.EditorControl
        
        ' Output header
        PrintTitleRow
        currentRow = currentRow + 1
        
        PrintRow currentRow, 0, "Text Rotations", ""
        currentRow = currentRow + 1
        
        PrintRow currentRow, 1, "Ref des and part number rotations", ""
        currentRow = currentRow + 1
        
        PrintRadioItem currentRow, 2, "Keep Same Rotation", editor.PartsNumRotation, epcbECKeepSameRotation
        currentRow = currentRow + 1
        
        PrintRadioItem currentRow, 2, "Rotate With Part", editor.PartsNumRotation, epcbECRotateWithPart
        currentRow = currentRow + 1
        
        PrintCheckBoxItem currentRow, 1, "Orientation Rules", editor.UseRefdesPartNumberOrientationRules
        currentRow = currentRow + 1
        
        PrintRow currentRow, 1, "Top Settings", ""
        currentRow = currentRow + 1
        
        PrintRow currentRow, 2, "Horizontal Rule", ""
        currentRow = currentRow + 1
        
        PrintRadioItem currentRow, 3, "Invert", editor.PartsRefdesHorzOrientation(True), epcbECPartRefHInvert
        currentRow = currentRow + 1
        
        PrintRadioItem currentRow, 3, "Normal", editor.PartsRefdesHorzOrientation(True), epcbECPartRefHNormal
        currentRow = currentRow + 1
        
        PrintRow currentRow, 2, "Vertical Rule", ""
        currentRow = currentRow + 1
        
        PrintRadioItem currentRow, 3, "Left Up", editor.PartsRefdesVertOrientation(True), epcbECPartRefVLeftUp
        currentRow = currentRow + 1
        
        PrintRadioItem currentRow, 3, "Right Up", editor.PartsRefdesVertOrientation(True), epcbECPartRefVRightUp
        currentRow = currentRow + 1
        
        PrintRow currentRow, 1, "Bottom Settings", ""
        currentRow = currentRow + 1
        
        PrintRow currentRow, 2, "Horizontal Rule", ""
        currentRow = currentRow + 1
        
        PrintRadioItem currentRow, 3, "Invert", editor.PartsRefdesHorzOrientation(False), epcbECPartRefHInvert
        currentRow = currentRow + 1
        
        PrintRadioItem currentRow, 3, "Normal", editor.PartsRefdesHorzOrientation(False), epcbECPartRefHNormal
        currentRow = currentRow + 1
        
        PrintRow currentRow, 2, "Vertical Rule", ""
        currentRow = currentRow + 1
        
        PrintRadioItem currentRow, 3, "Left Up", editor.PartsRefdesVertOrientation(False), epcbECPartRefVLeftUp
        currentRow = currentRow + 1
        
        PrintRadioItem currentRow, 3, "Right Up", editor.PartsRefdesVertOrientation(False), epcbECPartRefVRightUp
        currentRow = currentRow + 1
        
        
        bReportIsBeingUpdated = False
        
        ' Unlock server
        ThisWorkbook.GetActiveApp.UnlockServer
    End If
Exit Sub

OnErrorServerAccess:
    ThisWorkbook.GetActiveApp.UnlockServer
    MsgBox "Error accessing ExpeditionPCB Server.", , "Automation Demonstration"
End Sub

' refreshes values displayed in Sheet1
Public Sub RefreshValues()
    If ThisWorkbook.GetActiveDoc Is Nothing Then Exit Sub ' If we are not connected, exit procedure
    EditorControlValue
End Sub

' Main routine
Sub Main()
    bReportIsBeingUpdated = True
    bSelectionsAreBeingUpdated = False
    Sheets("Place - Text Rotations").Select ' Make Sheet1 visible
    
    Call ThisWorkbook.Connect   ' Connect to ExpeditionPCB (we use the global ThisWorkbook.GetActiveApp Object variable)
    
    RefreshValues ' Refresh sheet values
    bReportIsBeingUpdated = False
End Sub

Private Sub Worksheet_Activate()
    Main
End Sub

Private Sub Worksheet_Change(ByVal Target As Excel.Range)
    ' the worksheet has changed - did the user edit one of the editor control coordinate columns?
    ' Target is a reference to the changed cell.
    If ThisWorkbook.GetActiveDoc Is Nothing Then Exit Sub ' If we are not connected, exit procedure
    
    ' exit if we are updating the worksheet ourselves
    If bReportIsBeingUpdated = True Then Exit Sub
    If bSelectionsAreBeingUpdated = True Then Exit Sub
    
    On Error Resume Next
    If Target.FormulaR1C1 = "" Then
        Exit Sub
    End If
    
    bSelectionsAreBeingUpdated = True
    
    ' handle errors
    On Error Resume Next
    
    Dim currentRow As Integer
    currentRow = 1
    
    
        ' get editor control
        'Dim outline
        Dim editor As MGCPCB.EditorControl
        Set editor = ThisWorkbook.GetActiveDoc.EditorControl
        
        ' Output header
        'PrintTitleRow
        currentRow = currentRow + 1
        
        'PrintRow currentRow, 0, "Text Rotations", ""
        currentRow = currentRow + 1
        
        'PrintRow currentRow, 1, "Ref des and part number rotations", ""
        currentRow = currentRow + 1
        
        If Target.Row = currentRow And ReadRadioItem(currentRow, 2) Then
            editor.PartsNumRotation = epcbECKeepSameRotation
        End If
        currentRow = currentRow + 1
        
        If Target.Row = currentRow And ReadRadioItem(currentRow, 2) Then
            editor.PartsNumRotation = epcbECRotateWithPart
        End If
        currentRow = currentRow + 1
        
        If Target.Row = currentRow Then
            editor.UseRefdesPartNumberOrientationRules = ReadCheckBoxItem(currentRow, 1)
        End If
        currentRow = currentRow + 1
        
        'PrintRow currentRow, 1, "Top Settings", ""
        currentRow = currentRow + 1
        
        'PrintRow currentRow, 2, "Horizontal Rule", ""
        currentRow = currentRow + 1
        
        If Target.Row = currentRow And ReadRadioItem(currentRow, 3) Then
            editor.PartsRefdesHorzOrientation(True) = epcbECPartRefHInvert
        End If
        currentRow = currentRow + 1
        
        If Target.Row = currentRow And ReadRadioItem(currentRow, 3) Then
            editor.PartsRefdesHorzOrientation(True) = epcbECPartRefHNormal
        End If
        currentRow = currentRow + 1
        
        'PrintRow currentRow, 2, "Vertical Rule", ""
        currentRow = currentRow + 1
        
        If Target.Row = currentRow And ReadRadioItem(currentRow, 3) Then
            editor.PartsRefdesVertOrientation(True) = epcbECPartRefVLeftUp
        End If
        currentRow = currentRow + 1
        
        If Target.Row = currentRow And ReadRadioItem(currentRow, 3) Then
            editor.PartsRefdesVertOrientation(True) = epcbECPartRefVRightUp
        End If
        currentRow = currentRow + 1
        
        'PrintRow currentRow, 1, "Bottom Settings", ""
        currentRow = currentRow + 1
        
        'PrintRow currentRow, 2, "Horizontal Rule", ""
        currentRow = currentRow + 1
        
        
        If Target.Row = currentRow And ReadRadioItem(currentRow, 3) Then
            editor.PartsRefdesHorzOrientation(False) = epcbECPartRefHInvert
        End If
        currentRow = currentRow + 1
        
        If Target.Row = currentRow And ReadRadioItem(currentRow, 3) Then
            editor.PartsRefdesHorzOrientation(False) = epcbECPartRefHNormal
        End If
        currentRow = currentRow + 1
        
        'PrintRow currentRow, 2, "Vertical Rule", ""
        currentRow = currentRow + 1
        
        If Target.Row = currentRow And ReadRadioItem(currentRow, 3) Then
            editor.PartsRefdesVertOrientation(False) = epcbECPartRefVLeftUp
        End If
        currentRow = currentRow + 1
        
        If Target.Row = currentRow And ReadRadioItem(currentRow, 3) Then
            editor.PartsRefdesVertOrientation(False) = epcbECPartRefVRightUp
        End If
        currentRow = currentRow + 1
        
        
    bSelectionsAreBeingUpdated = False
    RefreshValues
End Sub

Attribute VB_Name = "Sheet04"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
' This is a part of the MentorGraphics-ExpeditionPCB OLE Automation server samples.
' Copyright (C) 2003 Mentor Graphics Software, Inc.
' All rights reserved.
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Option Explicit


Dim bReportIsBeingUpdated As Boolean
Dim bSelectionsAreBeingUpdated As Boolean


' refreshes the EditorControl values in the Spreadsheet
Public Sub EditorControlValue()
    If ThisWorkbook.GetActiveDoc Is Nothing Then Exit Sub ' If we are not connected, exit procedure
   
    ' empty existing sheet contents
    Range("A1:S1000").Clear
    Range("A1:D1000").Borders.LineStyle = XlLineStyle.xlContinuous
    Range("A1:D1").Borders.Color = RGB(75, 75, 75)
    Range("A2:D1000").Borders.Color = RGB(100, 100, 100)

    Range("A1:D1000").Interior.Color = RGB(200, 200, 200)
    Range("D1:D1000").Interior.Color = RGB(210, 210, 210)
    
    Dim currentRow As Integer
    currentRow = 0
    
    currentRow = currentRow + 1
    On Error Resume Next
    
    ' Lock server (to speed up OLE access)
    If ThisWorkbook.GetActiveApp.LockServer = True Then
        bReportIsBeingUpdated = True
                    
        ' get editor control
        'Dim outline
        Dim editor As MGCPCB.EditorControl
        Set editor = ThisWorkbook.GetActiveDoc.EditorControl
        
        ' Output header
        PrintTitleRow
        currentRow = currentRow + 1
        
        PrintRow currentRow, 0, "Cell Rotations", ""
        currentRow = currentRow + 1
        
        PrintCheckBoxItem currentRow, 1, "Use Cell Library Settings", editor.UseCellLibrarySettings
        currentRow = currentRow + 1
        
        Dim cells As MGCPCB.cells
        Dim cell As MGCPCB.cell
        Set cells = ThisWorkbook.GetActiveDoc.cells()
        Call cells.Sort
        For Each cell In cells
            PrintRow currentRow, 1, cell.Name, ""
            currentRow = currentRow + 1
            
            PrintRadioItem currentRow, 2, "Any angle", editor.PartCellRotation(cell, epcbECCellRotAnyAngle), True
            currentRow = currentRow + 1
            
            PrintRadioItem currentRow, 3, "Top", editor.PartCellRotation(cell, epcbECCellRotAnyAngTopSide), True
            currentRow = currentRow + 1
            
            PrintRadioItem currentRow, 3, "Bottom", editor.PartCellRotation(cell, epcbECCellRotAnyAngBottomSide), True
            currentRow = currentRow + 1
            
            PrintRadioItem currentRow, 3, "Both", editor.PartCellRotation(cell, epcbECCellRotAnyAngBothSide), True
            currentRow = currentRow + 1
            
            PrintRadioItem currentRow, 2, "Orthogonal", editor.PartCellRotation(cell, epcbECCellRotOrthogonal), True
            currentRow = currentRow + 1
            
            PrintCheckBoxItem currentRow, 3, "0 deg - Top", editor.PartCellRotation(cell, epcbECCellRotOrtho0TopSide)
            currentRow = currentRow + 1
            
            PrintCheckBoxItem currentRow, 3, "0 deg - Bottom", editor.PartCellRotation(cell, epcbECCellRotOrtho0BottomSide)
            currentRow = currentRow + 1
            
            PrintCheckBoxItem currentRow, 3, "90 deg - Top", editor.PartCellRotation(cell, epcbECCellRotOrtho90TopSide)
            currentRow = currentRow + 1
            
            PrintCheckBoxItem currentRow, 3, "90 deg - Bottom", editor.PartCellRotation(cell, epcbECCellRotOrtho90BottomSide)
            currentRow = currentRow + 1
            
            PrintCheckBoxItem currentRow, 3, "180 deg - Top", editor.PartCellRotation(cell, epcbECCellRotOrtho180TopSide)
            currentRow = currentRow + 1
            
            PrintCheckBoxItem currentRow, 3, "180 deg - Bottom", editor.PartCellRotation(cell, epcbECCellRotOrtho180BottomSide)
            currentRow = currentRow + 1
            
            PrintCheckBoxItem currentRow, 3, "270 deg - Top", editor.PartCellRotation(cell, epcbECCellRotOrtho270TopSide)
            currentRow = currentRow + 1
            
            PrintCheckBoxItem currentRow, 3, "270 deg - Bottom", editor.PartCellRotation(cell, epcbECCellRotOrtho270BottomSide)
            currentRow = currentRow + 1
            
        Next
        
        
        
        bReportIsBeingUpdated = False
        
        ' Unlock server
        ThisWorkbook.GetActiveApp.UnlockServer
    End If
Exit Sub

OnErrorServerAccess:
    ThisWorkbook.GetActiveApp.UnlockServer
    MsgBox "Error accessing ExpeditionPCB Server.", , "Automation Demonstration"
End Sub

' refreshes values displayed in Sheet1
Public Sub RefreshValues()
    If ThisWorkbook.GetActiveDoc Is Nothing Then Exit Sub ' If we are not connected, exit procedure
    EditorControlValue
End Sub

' Main routine
Sub Main()
    bReportIsBeingUpdated = True
    bSelectionsAreBeingUpdated = False
    Sheets("Place - Cell Rotations").Select ' Make Sheet1 visible
    
    Call ThisWorkbook.Connect   ' Connect to ExpeditionPCB (we use the global ThisWorkbook.GetActiveApp Object variable)
    
    RefreshValues ' Refresh sheet values
    bReportIsBeingUpdated = False
End Sub


Private Sub Worksheet_Activate()
    Main
End Sub

Private Sub Worksheet_Change(ByVal Target As Excel.Range)
    ' the worksheet has changed - did the user edit one of the editor control coordinate columns?
    ' Target is a reference to the changed cell.
    If ThisWorkbook.GetActiveDoc Is Nothing Then Exit Sub ' If we are not connected, exit procedure
    
    ' exit if we are updating the worksheet ourselves
    If bReportIsBeingUpdated = True Then Exit Sub
    If bSelectionsAreBeingUpdated = True Then Exit Sub
    
    On Error Resume Next
    If Target.FormulaR1C1 = "" Then
        Exit Sub
    End If
    
    bSelectionsAreBeingUpdated = True
    
    
    Dim currentRow As Integer
    currentRow = 1
    
    
    
        ' get editor control
        'Dim outline
        Dim editor As MGCPCB.EditorControl
        Set editor = ThisWorkbook.GetActiveDoc.EditorControl
        
        ' Output header
        'PrintTitleRow
        currentRow = currentRow + 1
        
        'PrintRow currentRow, 0, "Cell Rotations", ""
        currentRow = currentRow + 1
        
        If Target.Row = currentRow Then
            editor.UseCellLibrarySettings = ReadCheckBoxItem(currentRow, 1)
        End If
        currentRow = currentRow + 1
        
        Dim cells As MGCPCB.cells
        Dim cell As MGCPCB.cell
        Set cells = ThisWorkbook.GetActiveDoc.cells()
        Call cells.Sort
        For Each cell In cells
            'PrintRow currentRow, 1, cell.Name, ""
            currentRow = currentRow + 1
            
            If Target.Row = currentRow And ReadRadioItem(currentRow, 2) Then
                editor.PartCellRotation(cell, epcbECCellRotAnyAngle) = True
            End If
            currentRow = currentRow + 1
            
            If Target.Row = currentRow And ReadRadioItem(currentRow, 3) Then
                editor.PartCellRotation(cell, epcbECCellRotAnyAngTopSide) = True
            End If
            currentRow = currentRow + 1
            
            If Target.Row = currentRow And ReadRadioItem(currentRow, 3) Then
                editor.PartCellRotation(cell, epcbECCellRotAnyAngBottomSide) = True
            End If
            currentRow = currentRow + 1
            
            If Target.Row = currentRow And ReadRadioItem(currentRow, 3) Then
                editor.PartCellRotation(cell, epcbECCellRotAnyAngBothSide) = True
            End If
            currentRow = currentRow + 1
            
            If Target.Row = currentRow And ReadRadioItem(currentRow, 2) Then
                editor.PartCellRotation(cell, epcbECCellRotOrthogonal) = True
            End If
            currentRow = currentRow + 1
            
            
            If Target.Row = currentRow Then
                editor.PartCellRotation(cell, epcbECCellRotOrtho0TopSide) = ReadCheckBoxItem(currentRow, 3)
            End If
            currentRow = currentRow + 1
            
            If Target.Row = currentRow Then
                editor.PartCellRotation(cell, epcbECCellRotOrtho0BottomSide) = ReadCheckBoxItem(currentRow, 3)
            End If
            currentRow = currentRow + 1
            
            If Target.Row = currentRow Then
                editor.PartCellRotation(cell, epcbECCellRotOrtho90TopSide) = ReadCheckBoxItem(currentRow, 3)
            End If
            currentRow = currentRow + 1
            
            If Target.Row = currentRow Then
                editor.PartCellRotation(cell, epcbECCellRotOrtho90BottomSide) = ReadCheckBoxItem(currentRow, 3)
            End If
            currentRow = currentRow + 1
            
            If Target.Row = currentRow Then
                editor.PartCellRotation(cell, epcbECCellRotOrtho180TopSide) = ReadCheckBoxItem(currentRow, 3)
            End If
            currentRow = currentRow + 1
            
            If Target.Row = currentRow Then
                editor.PartCellRotation(cell, epcbECCellRotOrtho180BottomSide) = ReadCheckBoxItem(currentRow, 3)
            End If
            currentRow = currentRow + 1
            
            If Target.Row = currentRow Then
                editor.PartCellRotation(cell, epcbECCellRotOrtho270TopSide) = ReadCheckBoxItem(currentRow, 3)
            End If
            currentRow = currentRow + 1
            
            If Target.Row = currentRow Then
                editor.PartCellRotation(cell, epcbECCellRotOrtho270BottomSide) = ReadCheckBoxItem(currentRow, 3)
            End If
            currentRow = currentRow + 1
            
        Next
        
    bSelectionsAreBeingUpdated = False
    RefreshValues
End Sub

Attribute VB_Name = "Sheet05"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
' This is a part of the MentorGraphics-ExpeditionPCB OLE Automation server samples.
' Copyright (C) 2003 Mentor Graphics Software, Inc.
' All rights reserved.
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Option Explicit

Dim bReportIsBeingUpdated As Boolean
Dim bSelectionsAreBeingUpdated As Boolean


' refreshes the EditorControl values in the Spreadsheet
Public Sub EditorControlValue()
    If ThisWorkbook.GetActiveDoc Is Nothing Then Exit Sub ' If we are not connected, exit procedure
   
    ' empty existing sheet contents
    Range("A1:S1000").Clear
    Range("A1:D1000").Borders.LineStyle = XlLineStyle.xlContinuous
    Range("A1:D1").Borders.Color = RGB(75, 75, 75)
    Range("A2:D1000").Borders.Color = RGB(100, 100, 100)

    Range("A1:D1000").Interior.Color = RGB(200, 200, 200)
    Range("D1:D1000").Interior.Color = RGB(210, 210, 210)
    
    Dim currentRow As Integer
    currentRow = 0
    
    currentRow = currentRow + 1
    On Error Resume Next
    
    ' Lock server (to speed up OLE access)
    If ThisWorkbook.GetActiveApp.LockServer = True Then
        bReportIsBeingUpdated = True
                    
        ' get editor control
        'Dim outline
        Dim editor As MGCPCB.EditorControl
        Set editor = ThisWorkbook.GetActiveDoc.EditorControl
        
        ' Output header
        PrintTitleRow
        currentRow = currentRow + 1
        
        PrintRow currentRow, 0, "Jumper Table", ""
        currentRow = currentRow + 1
        
        PrintRow currentRow, 1, "Creation Options", ""
        currentRow = currentRow + 1
        
        PrintRadioItem currentRow, 2, "Create jumpers dynamically", editor.JumperCreation, 1
        currentRow = currentRow + 1
        
        PrintRadioItem currentRow, 2, "Use static jumper cell data", editor.JumperCreation, 2
        currentRow = currentRow + 1
        
        
        
        PrintRow currentRow, 1, "Graphics options", ""
        currentRow = currentRow + 1
        
        PrintRow currentRow, 2, "Assembly and Silkscreen line width", editor.JumperGraphicOption(epcbECJumperLineWidth)
        currentRow = currentRow + 1
        
        PrintRow currentRow, 2, "Line pullback distance", editor.JumperGraphicOption(epcbECJumperPullBack)
        currentRow = currentRow + 1
        
        Dim jumpertableitems As MGCPCB.JumperTableEntries
        Dim jtableitem As MGCPCB.JumperTableEntry
        Set jumpertableitems = editor.JumperTable
        
        For Each jtableitem In jumpertableitems
            PrintCheckBoxItem currentRow, 1, jtableitem.Angle & " " & jtableitem.PartNum & " " & jtableitem.CellName & " " & jtableitem.Length, jtableitem.Enable
            currentRow = currentRow + 1
        Next
        
        
        bReportIsBeingUpdated = False
        
        ' Unlock server
        ThisWorkbook.GetActiveApp.UnlockServer
    End If
Exit Sub

OnErrorServerAccess:
    ThisWorkbook.GetActiveApp.UnlockServer
    MsgBox "Error accessing ExpeditionPCB Server.", , "Automation Demonstration"
End Sub

' refreshes values displayed in Sheet1
Public Sub RefreshValues()
    If ThisWorkbook.GetActiveDoc Is Nothing Then Exit Sub ' If we are not connected, exit procedure
    EditorControlValue
End Sub

' Main routine
Sub Main()
    bReportIsBeingUpdated = True
    bSelectionsAreBeingUpdated = False
    Sheets("Place - Jumper Table").Select ' Make Sheet1 visible
    
    Call ThisWorkbook.Connect   ' Connect to ExpeditionPCB (we use the global ThisWorkbook.GetActiveApp Object variable)
    
    RefreshValues ' Refresh sheet values
    bReportIsBeingUpdated = False
End Sub


Private Sub Worksheet_Activate()
    Main
End Sub

Private Sub Worksheet_Change(ByVal Target As Excel.Range)
    ' the worksheet has changed - did the user edit one of the editor control coordinate columns?
    ' Target is a reference to the changed cell.
    If ThisWorkbook.GetActiveDoc Is Nothing Then Exit Sub ' If we are not connected, exit procedure
    
    ' exit if we are updating the worksheet ourselves
    If bReportIsBeingUpdated = True Then Exit Sub
    If bSelectionsAreBeingUpdated = True Then Exit Sub
    
    
    On Error Resume Next
    If Target.FormulaR1C1 = "" Then
        Exit Sub
    End If
    bSelectionsAreBeingUpdated = True
    
    Dim currentRow As Integer
    currentRow = 1
    
        
        ' get editor control
        'Dim outline
        Dim editor As MGCPCB.EditorControl
        Set editor = ThisWorkbook.GetActiveDoc.EditorControl
        
        ' Output header
        'PrintTitleRow
        currentRow = currentRow + 1
        
        'PrintRow currentRow, 0, "Jumper Table", ""
        currentRow = currentRow + 1
        
        'PrintRow currentRow, 1, "Creation Options", ""
        currentRow = currentRow + 1
        
        If Target.Row = currentRow And ReadRadioItem(currentRow, 2) Then
            editor.JumperCreation = 1
        End If
        currentRow = currentRow + 1
        
        If Target.Row = currentRow And ReadRadioItem(currentRow, 2) Then
            editor.JumperCreation = 2
        End If
        currentRow = currentRow + 1
        
        'PrintRow currentRow, 1, "Graphics options", ""
        currentRow = currentRow + 1
        
        If Target.Row = currentRow Then
            editor.JumperGraphicOption(epcbECJumperLineWidth) = ReadRow(currentRow, 2)
        End If
        currentRow = currentRow + 1
        
        If Target.Row = currentRow Then
            editor.JumperGraphicOption(epcbECJumperPullBack) = ReadRow(currentRow, 2)
        End If
        currentRow = currentRow + 1
        
        Dim jumpertableitems As MGCPCB.JumperTableEntries
        Dim jtableitem As MGCPCB.JumperTableEntry
        Set jumpertableitems = editor.JumperTable
        
        For Each jtableitem In jumpertableitems
            If Target.Row = currentRow Then
                jtableitem.Enable = ReadCheckBoxItem(currentRow, 1)
            End If
            currentRow = currentRow + 1
        Next
        
    bSelectionsAreBeingUpdated = False
    RefreshValues
End Sub

Attribute VB_Name = "Sheet06"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
' This is a part of the MentorGraphics-ExpeditionPCB OLE Automation server samples.
' Copyright (C) 2003 Mentor Graphics Software, Inc.
' All rights reserved.
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Option Explicit

Dim bReportIsBeingUpdated As Boolean
Dim bSelectionsAreBeingUpdated As Boolean


' refreshes the EditorControl values in the Spreadsheet
Public Sub EditorControlValue()
    If ThisWorkbook.GetActiveDoc Is Nothing Then Exit Sub ' If we are not connected, exit procedure
   
    ' empty existing sheet contents
    Range("A1:S1000").Clear
    Range("A1:D1000").Borders.LineStyle = XlLineStyle.xlContinuous
    Range("A1:D1").Borders.Color = RGB(75, 75, 75)
    Range("A2:D1000").Borders.Color = RGB(100, 100, 100)

    Range("A1:D1000").Interior.Color = RGB(200, 200, 200)
    Range("D1:D1000").Interior.Color = RGB(210, 210, 210)
    
    Dim currentRow As Integer
    currentRow = 0
    
    currentRow = currentRow + 1
    On Error Resume Next
    
    ' Lock server (to speed up OLE access)
    If ThisWorkbook.GetActiveApp.LockServer = True Then
        bReportIsBeingUpdated = True
                    
        ' get editor control
        'Dim outline
        Dim editor As MGCPCB.EditorControl
        Set editor = ThisWorkbook.GetActiveDoc.EditorControl
        
        ' Output header
        PrintTitleRow
        currentRow = currentRow + 1
        
        PrintRow currentRow, 0, "Plow", ""
        currentRow = currentRow + 1
        
        PrintRow currentRow, 1, "Mouse up style: Plow/Push", ""
        currentRow = currentRow + 1
        
        PrintRadioItem currentRow, 2, "Real Trace / Delayed", editor.PlowMouseUpStyle, 1
        currentRow = currentRow + 1
        
        PrintRadioItem currentRow, 2, "Real Trace / Dynamic", editor.PlowMouseUpStyle, 2
        currentRow = currentRow + 1
        
        PrintRadioItem currentRow, 2, "Hockey Stick / On Click", editor.PlowMouseUpStyle, 3
        currentRow = currentRow + 1
        
        PrintRadioItem currentRow, 2, "Segment / On Click", editor.PlowMouseUpStyle, 4
        currentRow = currentRow + 1
        
        PrintRow currentRow, 1, "Mouse drag style: Plow/Push", ""
        currentRow = currentRow + 1
        
        PrintRadioItem currentRow, 2, "Real Trace / Delayed", editor.PlowDragStyle, 1
        currentRow = currentRow + 1
        
        PrintRadioItem currentRow, 2, "Real Trace / Dynamic", editor.PlowDragStyle, 2
        currentRow = currentRow + 1
        
        PrintCheckBoxItem currentRow, 1, "Prohibit violations", editor.PlowDRC
        currentRow = currentRow + 1
        
        PrintCheckBoxItem currentRow, 1, "Double click to add via", editor.RouteDoubleClickToAddVia
        currentRow = currentRow + 1
        
        PrintCheckBoxItem currentRow, 1, "Prevent loops", editor.PlowPreventLoops
        currentRow = currentRow + 1
        
        PrintRow currentRow, 1, "Angles for Segment Plow style:", ""
        currentRow = currentRow + 1
        
        PrintRadioItem currentRow, 2, "90", editor.PlowAngle, 1
        currentRow = currentRow + 1
        
        PrintRadioItem currentRow, 2, "45", editor.PlowAngle, 2
        currentRow = currentRow + 1
        
        PrintRadioItem currentRow, 2, "Any", editor.PlowAngle, 3
        currentRow = currentRow + 1
        
        PrintRadioItem currentRow, 2, "Angle Shift", editor.PlowAngle, 4
        currentRow = currentRow + 1
        
        PrintRow currentRow, 3, "Angle Shift Value", editor.PlowAngleShift
        currentRow = currentRow + 1
        
        PrintRow currentRow, 1, "Optimize netlines:", ""
        currentRow = currentRow + 1
        
        PrintRadioItem currentRow, 2, "No", editor.NetlineOptimizationModeForPlow, 0
        currentRow = currentRow + 1
        
        PrintRadioItem currentRow, 2, "Local", editor.NetlineOptimizationModeForPlow, 2
        currentRow = currentRow + 1
        
        
        PrintRow currentRow, 0, "Edit & Route Controls", ""
        currentRow = currentRow + 1
        
        PrintRow currentRow, 1, "Gloss mode:", ""
        currentRow = currentRow + 1
        
        PrintRadioItem currentRow, 2, "On", editor.GlossMode, 2
        currentRow = currentRow + 1
        
        PrintRadioItem currentRow, 2, "Local", editor.GlossMode, 1
        currentRow = currentRow + 1
        
        PrintRadioItem currentRow, 2, "Off", editor.GlossMode, 0
        currentRow = currentRow + 1
        
        PrintCheckBoxItem currentRow, 1, "Via move", editor.AdvancedGlossOption(epcbECGlossMoveViaForTraceSegs)
        currentRow = currentRow + 1
        
        PrintCheckBoxItem currentRow, 1, "Pad jump", editor.AdvancedGlossOption(epcbECGlossJumpTraceOverPads)
        currentRow = currentRow + 1
        
        PrintCheckBoxItem currentRow, 1, "Remove excess meanders", editor.AdvancedGlossOption(epcbECGlossRemoveXSMeander)
        currentRow = currentRow + 1
        
        PrintCheckBoxItem currentRow, 1, "Gloss around deleted routes", editor.AdvancedGlossOption(epcbECGlossAroundDelTrcAndVia)
        currentRow = currentRow + 1
        
        PrintRow currentRow, 1, "Push & Shove:", ""
        currentRow = currentRow + 1
        
        PrintCheckBoxItem currentRow, 2, "Via shove", editor.RoutePushAndShove(epcbECViaShoving)
        currentRow = currentRow + 1
        
        PrintCheckBoxItem currentRow, 2, "Trace shove", editor.RoutePushAndShove(epcbECTraceShoving)
        currentRow = currentRow + 1
        
        PrintCheckBoxItem currentRow, 2, "Via jump", editor.RoutePushAndShove(epcbECViaJumping)
        currentRow = currentRow + 1
        
        PrintCheckBoxItem currentRow, 2, "Pad jump", editor.RoutePushAndShove(epcbECPadJumping)
        currentRow = currentRow + 1
        
        
        PrintRow currentRow, 1, "Interactive router method:", ""
        currentRow = currentRow + 1
        
        PrintRadioItem currentRow, 2, "Sketch Router", editor.InteractiveRouteMode, 0
        currentRow = currentRow + 1
        
        PrintRadioItem currentRow, 2, "Hug Router", editor.InteractiveRouteMode, 1
        currentRow = currentRow + 1
        
        PrintRadioItem currentRow, 2, "General Router", editor.InteractiveRouteMode, 2
        currentRow = currentRow + 1
        
        
        PrintRow currentRow, 0, "Angles, Corners", ""
        currentRow = currentRow + 1
        
        PrintCheckBoxItem currentRow, 1, "Any angle trace if needed", editor.RoutePushAndShove(epcbECAllowOddAngleEscape)
        currentRow = currentRow + 1
        
        PrintCheckBoxItem currentRow, 1, "Allow 45 degree corners", editor.Allow45DegreeCorners
        currentRow = currentRow + 1
        
        PrintRow currentRow, 1, "Curve radius", editor.CurveTraceRadius
        currentRow = currentRow + 1
        
        PrintRow currentRow, 1, "Min radius", editor.CurveTraceMinRadius
        currentRow = currentRow + 1
        
        PrintRow currentRow, 0, "Vias & Fanouts", ""
        currentRow = currentRow + 1
        
        PrintCheckBoxItem currentRow, 1, "Auto Trim Through Vias", editor.RouteViasRules(epcbECAutoTrimThroughVias)
        currentRow = currentRow + 1
        
        PrintCheckBoxItem currentRow, 1, "Allow one more via per SMD pin", editor.RouteViasRules(epcbECAllowAdditionalVia)
        currentRow = currentRow + 1
        
        PrintCheckBoxItem currentRow, 1, "Use place outlines as via obstructs", editor.RouteViasRules(epcbECUsePartOutlineAsViaObstructs)
        currentRow = currentRow + 1
        
        PrintCheckBoxItem currentRow, 1, "Enable fanout of single pin nets", editor.RouteViasRules(epcbECSinglePinNetFanout)
        currentRow = currentRow + 1
        
        PrintRow currentRow, 1, "Max pins/plane fanout via", editor.RouteViasMaxPinsPerPlane
        currentRow = currentRow + 1
        
        PrintRow currentRow, 1, "Max trace length on restricted layers:", ""
        currentRow = currentRow + 1
        
        PrintRow currentRow, 2, "External", editor.RouteViasMaxFanoutOnRstrdLayers(False)
        currentRow = currentRow + 1
        
        PrintRow currentRow, 2, "Internal", editor.RouteViasMaxFanoutOnRstrdLayers(True)
        currentRow = currentRow + 1
        
        PrintRow currentRow, 0, "Net Rule Overrides", ""
        currentRow = currentRow + 1
        
        PrintCheckBoxItem currentRow, 1, "Stub lengths", editor.RouteNetRules(epcbECNetRulesStubLengths)
        currentRow = currentRow + 1
        
        PrintCheckBoxItem currentRow, 1, "Layer restrictions", editor.RouteNetRules(epcbECNetRulesLayerRestrictions)
        currentRow = currentRow + 1
        
        PrintCheckBoxItem currentRow, 1, "Via restrictions", editor.RouteNetRules(epcbECNetRulesViaRestrictions)
        currentRow = currentRow + 1
        
        PrintCheckBoxItem currentRow, 1, "Max delays and lengths", editor.RouteNetRules(epcbECMaxDelaysAndLengths)
        currentRow = currentRow + 1
        
        
        
        bReportIsBeingUpdated = False
        
        ' Unlock server
        ThisWorkbook.GetActiveApp.UnlockServer
    End If
Exit Sub

OnErrorServerAccess:
    ThisWorkbook.GetActiveApp.UnlockServer
    MsgBox "Error accessing ExpeditionPCB Server.", , "Automation Demonstration"
End Sub

' refreshes values displayed in Sheet1
Public Sub RefreshValues()
    If ThisWorkbook.GetActiveDoc Is Nothing Then Exit Sub ' If we are not connected, exit procedure
    EditorControlValue
End Sub

' Main routine
Sub Main()
    bReportIsBeingUpdated = True
    bSelectionsAreBeingUpdated = False
    Sheets("Route").Select ' Make Sheet1 visible
    
    Call ThisWorkbook.Connect   ' Connect to ExpeditionPCB (we use the global ThisWorkbook.GetActiveApp Object variable)
    
    RefreshValues ' Refresh sheet values
    bReportIsBeingUpdated = False
End Sub


Private Sub Worksheet_Activate()
    Main
End Sub

Private Sub Worksheet_Change(ByVal Target As Excel.Range)
    ' the worksheet has changed - did the user edit one of the editor control coordinate columns?
    ' Target is a reference to the changed cell.
    If ThisWorkbook.GetActiveDoc Is Nothing Then Exit Sub ' If we are not connected, exit procedure
    
    ' exit if we are updating the worksheet ourselves
    If bReportIsBeingUpdated = True Then Exit Sub
    If bSelectionsAreBeingUpdated = True Then Exit Sub
    
    
    On Error Resume Next
    If Target.FormulaR1C1 = "" Then
        Exit Sub
    End If
    
    bSelectionsAreBeingUpdated = True
    Dim currentRow As Integer
    currentRow = 1
    
       
        ' get editor control
        'Dim outline
        Dim editor As MGCPCB.EditorControl
        Set editor = ThisWorkbook.GetActiveDoc.EditorControl
        
        ' Output header
        'PrintTitleRow
        currentRow = currentRow + 1
        
        'PrintRow currentRow, 0, "Plow", ""
        currentRow = currentRow + 1
        
        'PrintRow currentRow, 1, "Mouse up style: Plow/Push", ""
        currentRow = currentRow + 1
        
        If Target.Row = currentRow And ReadRadioItem(currentRow, 2) Then
            editor.PlowMouseUpStyle = 1
        End If
        currentRow = currentRow + 1
        
        If Target.Row = currentRow And ReadRadioItem(currentRow, 2) Then
            editor.PlowMouseUpStyle = 2
        End If
        currentRow = currentRow + 1
        
        If Target.Row = currentRow And ReadRadioItem(currentRow, 2) Then
            editor.PlowMouseUpStyle = 3
        End If
        currentRow = currentRow + 1
        
        If Target.Row = currentRow And ReadRadioItem(currentRow, 2) Then
            editor.PlowMouseUpStyle = 4
        End If
        currentRow = currentRow + 1
        
        'PrintRow currentRow, 1, "Mouse drag style: Plow/Push", ""
        currentRow = currentRow + 1
        
        If Target.Row = currentRow And ReadRadioItem(currentRow, 2) Then
            editor.PlowDragStyle = 1
        End If
        currentRow = currentRow + 1
        
        If Target.Row = currentRow And ReadRadioItem(currentRow, 2) Then
            editor.PlowDragStyle = 2
        End If
        currentRow = currentRow + 1
        
        If Target.Row = currentRow Then
            editor.PlowDRC = ReadCheckBoxItem(currentRow, 1)
        End If
        currentRow = currentRow + 1
        
        If Target.Row = currentRow Then
            editor.RouteDoubleClickToAddVia = ReadCheckBoxItem(currentRow, 1)
        End If
        currentRow = currentRow + 1
        
        If Target.Row = currentRow Then
            editor.PlowPreventLoops = ReadCheckBoxItem(currentRow, 1)
        End If
        currentRow = currentRow + 1
        
        
        
        'PrintRow currentRow, 1, "Angles for Segment Plow style:", ""
        currentRow = currentRow + 1
        
        If Target.Row = currentRow And ReadRadioItem(currentRow, 2) Then
            editor.PlowAngle = 1
        End If
        currentRow = currentRow + 1
        
        If Target.Row = currentRow And ReadRadioItem(currentRow, 2) Then
            editor.PlowAngle = 2
        End If
        currentRow = currentRow + 1
        
        If Target.Row = currentRow And ReadRadioItem(currentRow, 2) Then
            editor.PlowAngle = 3
        End If
        currentRow = currentRow + 1
        
        If Target.Row = currentRow And ReadRadioItem(currentRow, 2) Then
            editor.PlowAngle = 4
        End If
        currentRow = currentRow + 1
        
        If Target.Row = currentRow Then
            editor.PlowAngleShift = ReadRow(currentRow, 3)
        End If
        currentRow = currentRow + 1
                
        
        'PrintRow currentRow, 1, "Optimize netlines:", ""
        currentRow = currentRow + 1
        
        If Target.Row = currentRow And ReadRadioItem(currentRow, 2) Then
            editor.NetlineOptimizationModeForPlow = 0
        End If
        currentRow = currentRow + 1
        
        If Target.Row = currentRow And ReadRadioItem(currentRow, 2) Then
            editor.NetlineOptimizationModeForPlow = 2
        End If
        currentRow = currentRow + 1
        
        
        'PrintRow currentRow, 0, "Edit & Route Controls", ""
        currentRow = currentRow + 1
        
        'PrintRow currentRow, 1, "Gloss mode:", ""
        currentRow = currentRow + 1
        
        If Target.Row = currentRow And ReadRadioItem(currentRow, 2) Then
            editor.GlossMode = 2
        End If
        currentRow = currentRow + 1
        
        If Target.Row = currentRow And ReadRadioItem(currentRow, 2) Then
            editor.GlossMode = 1
        End If
        currentRow = currentRow + 1
        
        If Target.Row = currentRow And ReadRadioItem(currentRow, 2) Then
            editor.GlossMode = 0
        End If
        currentRow = currentRow + 1
        
        If Target.Row = currentRow Then
            editor.AdvancedGlossOption(epcbECGlossMoveViaForTraceSegs) = ReadCheckBoxItem(currentRow, 1)
        End If
        currentRow = currentRow + 1
        
        If Target.Row = currentRow Then
            editor.AdvancedGlossOption(epcbECGlossJumpTraceOverPads) = ReadCheckBoxItem(currentRow, 1)
        End If
        currentRow = currentRow + 1
        
        If Target.Row = currentRow Then
            editor.AdvancedGlossOption(epcbECGlossRemoveXSMeander) = ReadCheckBoxItem(currentRow, 1)
        End If
        currentRow = currentRow + 1
        
        If Target.Row = currentRow Then
            editor.AdvancedGlossOption(epcbECGlossAroundDelTrcAndVia) = ReadCheckBoxItem(currentRow, 1)
        End If
        currentRow = currentRow + 1
        
        'PrintRow currentRow, 1, "Push & Shove:", ""
        currentRow = currentRow + 1
        
        If Target.Row = currentRow Then
            editor.RoutePushAndShove(epcbECViaShoving) = ReadCheckBoxItem(currentRow, 2)
        End If
        currentRow = currentRow + 1
        
        If Target.Row = currentRow Then
            editor.RoutePushAndShove(epcbECTraceShoving) = ReadCheckBoxItem(currentRow, 2)
        End If
        currentRow = currentRow + 1
        
        If Target.Row = currentRow Then
            editor.RoutePushAndShove(epcbECViaJumping) = ReadCheckBoxItem(currentRow, 2)
        End If
        currentRow = currentRow + 1
        
        If Target.Row = currentRow Then
            editor.RoutePushAndShove(epcbECPadJumping) = ReadCheckBoxItem(currentRow, 2)
        End If
        currentRow = currentRow + 1
        
        
        'PrintRow currentRow, 1, "Interactive router method:", ""
        currentRow = currentRow + 1
        
        If Target.Row = currentRow And ReadRadioItem(currentRow, 2) Then
            editor.InteractiveRouteMode = 0
        End If
        currentRow = currentRow + 1
        
        If Target.Row = currentRow And ReadRadioItem(currentRow, 2) Then
            editor.InteractiveRouteMode = 1
        End If
        currentRow = currentRow + 1
        
        If Target.Row = currentRow And ReadRadioItem(currentRow, 2) Then
            editor.InteractiveRouteMode = 2
        End If
        currentRow = currentRow + 1
        
        'PrintRow currentRow, 0, "Angles, Corners", ""
        currentRow = currentRow + 1
        
        If Target.Row = currentRow Then
            editor.RoutePushAndShove(epcbECAllowOddAngleEscape) = ReadCheckBoxItem(currentRow, 1)
        End If
        currentRow = currentRow + 1
        
        If Target.Row = currentRow Then
            editor.Allow45DegreeCorners = ReadCheckBoxItem(currentRow, 1)
        End If
        currentRow = currentRow + 1
        
        If Target.Row = currentRow Then
            editor.CurveTraceRadius = ReadRow(currentRow, 1)
        End If
        currentRow = currentRow + 1
        
        If Target.Row = currentRow Then
            editor.CurveTraceMinRadius = ReadRow(currentRow, 1)
        End If
        currentRow = currentRow + 1
        
        
        'PrintRow currentRow, 0, "Vias & Fanouts", ""
        currentRow = currentRow + 1
        
        If Target.Row = currentRow Then
            editor.RouteViasRules(epcbECAutoTrimThroughVias) = ReadCheckBoxItem(currentRow, 1)
        End If
        currentRow = currentRow + 1
        
        If Target.Row = currentRow Then
            editor.RouteViasRules(epcbECAllowAdditionalVia) = ReadCheckBoxItem(currentRow, 1)
        End If
        currentRow = currentRow + 1
        
        If Target.Row = currentRow Then
            editor.RouteViasRules(epcbECUsePartOutlineAsViaObstructs) = ReadCheckBoxItem(currentRow, 1)
        End If
        currentRow = currentRow + 1
        
        If Target.Row = currentRow Then
            editor.RouteViasRules(epcbECSinglePinNetFanout) = ReadCheckBoxItem(currentRow, 1)
        End If
        currentRow = currentRow + 1
        
        If Target.Row = currentRow Then
            editor.RouteViasMaxPinsPerPlane = ReadRow(currentRow, 1)
        End If
        currentRow = currentRow + 1
        
        'PrintRow currentRow, 1, "Max trace length on restricted layers:", ""
        currentRow = currentRow + 1
        
        If Target.Row = currentRow Then
            editor.RouteViasMaxFanoutOnRstrdLayers(False) = ReadRow(currentRow, 2)
        End If
        currentRow = currentRow + 1
        
        If Target.Row = currentRow Then
            editor.RouteViasMaxFanoutOnRstrdLayers(True) = ReadRow(currentRow, 2)
        End If
        currentRow = currentRow + 1
        
        'PrintRow currentRow, 0, "Net Rule Overrides", ""
        currentRow = currentRow + 1
        
        If Target.Row = currentRow Then
            editor.RouteNetRules(epcbECNetRulesStubLengths) = ReadCheckBoxItem(currentRow, 1)
        End If
        currentRow = currentRow + 1
        
        If Target.Row = currentRow Then
            editor.RouteNetRules(epcbECNetRulesLayerRestrictions) = ReadCheckBoxItem(currentRow, 1)
        End If
        currentRow = currentRow + 1
        
        If Target.Row = currentRow Then
            editor.RouteNetRules(epcbECNetRulesViaRestrictions) = ReadCheckBoxItem(currentRow, 1)
        End If
        currentRow = currentRow + 1
        
        If Target.Row = currentRow Then
            editor.RouteNetRules(epcbECMaxDelaysAndLengths) = ReadCheckBoxItem(currentRow, 1)
        End If
        currentRow = currentRow + 1
        
    bSelectionsAreBeingUpdated = False
    RefreshValues
End Sub

Attribute VB_Name = "Sheet07"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
' This is a part of the MentorGraphics-ExpeditionPCB OLE Automation server samples.
' Copyright (C) 2003 Mentor Graphics Software, Inc.
' All rights reserved.
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Option Explicit

Dim bReportIsBeingUpdated As Boolean
Dim bSelectionsAreBeingUpdated As Boolean


' refreshes the EditorControl values in the Spreadsheet
Public Sub EditorControlValue()
    If ThisWorkbook.GetActiveDoc Is Nothing Then Exit Sub ' If we are not connected, exit procedure
   
    ' empty existing sheet contents
    Range("A1:S1000").Clear
    Range("A1:D1000").Borders.LineStyle = XlLineStyle.xlContinuous
    Range("A1:D1").Borders.Color = RGB(75, 75, 75)
    Range("A2:D1000").Borders.Color = RGB(100, 100, 100)

    Range("A1:D1000").Interior.Color = RGB(200, 200, 200)
    Range("D1:D1000").Interior.Color = RGB(210, 210, 210)
    
    Dim currentRow As Integer
    currentRow = 0
    
    currentRow = currentRow + 1
    On Error Resume Next
    
    ' Lock server (to speed up OLE access)
    If ThisWorkbook.GetActiveApp.LockServer = True Then
        bReportIsBeingUpdated = True
                    
        ' get editor control
        'Dim outline
        Dim editor As MGCPCB.EditorControl
        Set editor = ThisWorkbook.GetActiveDoc.EditorControl
        
        ' Output header
        PrintTitleRow
        currentRow = currentRow + 1
        
        PrintCheckBoxItem currentRow, 0, "Net Filter", editor.EnableFilter
        currentRow = currentRow + 1
        
        PrintRow currentRow, 1, "Display class type:", ""
        currentRow = currentRow + 1
        
        PrintRadioItem currentRow, 2, "Net", editor.FilterDisplayClassType, 0
        currentRow = currentRow + 1
        
        PrintRadioItem currentRow, 2, "Constraint", editor.FilterDisplayClassType, 1
        currentRow = currentRow + 1
        
        PrintCheckBoxItem currentRow, 1, "Apply filter to Netlines", editor.FilterNetlineDisplay
        currentRow = currentRow + 1
        
        PrintRow currentRow, 1, "Excluded Nets (Net Name, Net Class):", ""
        currentRow = currentRow + 1
        
        Dim nets
        Dim net As MGCPCB.net
        Set nets = editor.ExcludedFilterNets
        For Each net In nets
            PrintRow currentRow, 2, net.Name & ", " & net.NetClass, ""
            currentRow = currentRow + 1
        Next
        
        PrintRow currentRow, 1, "Included Nets (Net Name, Net Class):", ""
        currentRow = currentRow + 1
        
        Set nets = editor.IncludedFilterNets
        For Each net In nets
            PrintRow currentRow, 2, net.Name & ", " & net.NetClass, ""
            currentRow = currentRow + 1
        Next
        
        bReportIsBeingUpdated = False
        
        ' Unlock server
        ThisWorkbook.GetActiveApp.UnlockServer
    End If
Exit Sub

OnErrorServerAccess:
    ThisWorkbook.GetActiveApp.UnlockServer
    MsgBox "Error accessing ExpeditionPCB Server.", , "Automation Demonstration"
End Sub

' refreshes values displayed in Sheet1
Public Sub RefreshValues()
    If ThisWorkbook.GetActiveDoc Is Nothing Then Exit Sub ' If we are not connected, exit procedure
    EditorControlValue
End Sub

' Main routine
Sub Main()
    bReportIsBeingUpdated = True
    bSelectionsAreBeingUpdated = False
    Sheets("Route - Net Filter").Select ' Make Sheet1 visible
    
    Call ThisWorkbook.Connect   ' Connect to ExpeditionPCB (we use the global ThisWorkbook.GetActiveApp Object variable)
    
    RefreshValues ' Refresh sheet values
    bReportIsBeingUpdated = False
End Sub


Private Sub Worksheet_Activate()
    Main
End Sub

Private Sub Worksheet_Change(ByVal Target As Excel.Range)
    ' the worksheet has changed - did the user edit one of the editor control coordinate columns?
    ' Target is a reference to the changed cell.
    If ThisWorkbook.GetActiveDoc Is Nothing Then Exit Sub ' If we are not connected, exit procedure
    
    ' exit if we are updating the worksheet ourselves
    If bReportIsBeingUpdated = True Then Exit Sub
    If bSelectionsAreBeingUpdated = True Then Exit Sub
    
    On Error Resume Next
    If Target.FormulaR1C1 = "" Then
        Exit Sub
    End If
    
    bSelectionsAreBeingUpdated = True
    Dim currentRow As Integer
    currentRow = 1
    
       
        ' get editor control
        'Dim outline
        Dim editor As MGCPCB.EditorControl
        Set editor = ThisWorkbook.GetActiveDoc.EditorControl
        
        'PrintTitleRow
        currentRow = currentRow + 1
        
        If Target.Row = currentRow Then
            editor.EnableFilter = ReadCheckBoxItem(currentRow, 0)
        End If
        currentRow = currentRow + 1
        
        'PrintRow currentRow, 1, "Display class type:", ""
        currentRow = currentRow + 1
        
        If Target.Row = currentRow And ReadRadioItem(currentRow, 2) Then
            editor.FilterDisplayClassType = 0
        End If
        currentRow = currentRow + 1
        
        If Target.Row = currentRow And ReadRadioItem(currentRow, 2) Then
            editor.FilterDisplayClassType = 1
        End If
        currentRow = currentRow + 1
        
        If Target.Row = currentRow Then
            editor.FilterNetlineDisplay = ReadCheckBoxItem(currentRow, 1)
        End If
        currentRow = currentRow + 1
        
        
    bSelectionsAreBeingUpdated = False
    RefreshValues
End Sub

Attribute VB_Name = "Sheet08"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
' This is a part of the MentorGraphics-ExpeditionPCB OLE Automation server samples.
' Copyright (C) 2003 Mentor Graphics Software, Inc.
' All rights reserved.
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Option Explicit

Dim bReportIsBeingUpdated As Boolean
Dim bSelectionsAreBeingUpdated As Boolean


' refreshes the EditorControl values in the Spreadsheet
Public Sub EditorControlValue()
    If ThisWorkbook.GetActiveDoc Is Nothing Then Exit Sub ' If we are not connected, exit procedure
   
    ' empty existing sheet contents
    Range("A1:S1000").Clear
    Range("A1:D1000").Borders.LineStyle = XlLineStyle.xlContinuous
    Range("A1:D1").Borders.Color = RGB(75, 75, 75)
    Range("A2:D1000").Borders.Color = RGB(100, 100, 100)

    Range("A1:D1000").Interior.Color = RGB(200, 200, 200)
    Range("D1:D1000").Interior.Color = RGB(210, 210, 210)
    
    Dim currentRow As Integer
    currentRow = 0
    
    currentRow = currentRow + 1
    On Error Resume Next
    
    ' Lock server (to speed up OLE access)
    If ThisWorkbook.GetActiveApp.LockServer = True Then
        bReportIsBeingUpdated = True
                    
        ' get editor control
        'Dim outline
        Dim editor As MGCPCB.EditorControl
        Set editor = ThisWorkbook.GetActiveDoc.EditorControl
        
        ' Output header
        PrintTitleRow
        currentRow = currentRow + 1
        
        PrintRow currentRow, 0, "Layer Settings", ""
        currentRow = currentRow + 1
        
        Dim i As Long
        For i = 1 To ThisWorkbook.GetActiveDoc.LayerCount
            PrintCheckBoxItem currentRow, 1, "Layer - " & i, editor.RouteLayerEnable(i)
            currentRow = currentRow + 1
            
            PrintRow currentRow, 2, "Bias:", ""
            currentRow = currentRow + 1
            
            PrintRadioItem currentRow, 3, "Vertical", editor.RouteDirBias(i), 1
            currentRow = currentRow + 1
            
            PrintRadioItem currentRow, 3, "Horizontal", editor.RouteDirBias(i), 0
            currentRow = currentRow + 1
            
            PrintRow currentRow, 2, "Layer Pair", editor.RouteLayerPair(i)
            currentRow = currentRow + 1
        Next
        
        
        bReportIsBeingUpdated = False
        
        ' Unlock server
        ThisWorkbook.GetActiveApp.UnlockServer
    End If
Exit Sub

OnErrorServerAccess:
    ThisWorkbook.GetActiveApp.UnlockServer
    MsgBox "Error accessing ExpeditionPCB Server.", , "Automation Demonstration"
End Sub

' refreshes values displayed in Sheet1
Public Sub RefreshValues()
    If ThisWorkbook.GetActiveDoc Is Nothing Then Exit Sub ' If we are not connected, exit procedure
    EditorControlValue
End Sub

' Main routine
Sub Main()
    bReportIsBeingUpdated = True
    bSelectionsAreBeingUpdated = False
    Sheets("Route - Layer Settings").Select ' Make Sheet1 visible
    
    Call ThisWorkbook.Connect     ' Connect to ExpeditionPCB (we use the global ThisWorkbook.GetActiveApp Object variable)
    
    RefreshValues ' Refresh sheet values
    bReportIsBeingUpdated = False
End Sub

Private Sub Worksheet_Activate()
    Main
End Sub

Private Sub Worksheet_Change(ByVal Target As Excel.Range)
    ' the worksheet has changed - did the user edit one of the editor control coordinate columns?
    ' Target is a reference to the changed cell.
    If ThisWorkbook.GetActiveDoc Is Nothing Then Exit Sub ' If we are not connected, exit procedure
    
    ' exit if we are updating the worksheet ourselves
    If bReportIsBeingUpdated = True Then Exit Sub
    If bSelectionsAreBeingUpdated = True Then Exit Sub
    
    On Error Resume Next
    If Target.FormulaR1C1 = "" Then
        Exit Sub
    End If
    
    bSelectionsAreBeingUpdated = True
    Dim currentRow As Integer
    currentRow = 1
    
        ' get editor control
        'Dim outline
        Dim editor As MGCPCB.EditorControl
        Set editor = ThisWorkbook.GetActiveDoc.EditorControl
        
        'PrintTitleRow
        currentRow = currentRow + 1
        
        'PrintRow currentRow, 0, "Layer Settings", ""
        currentRow = currentRow + 1
        
        Dim i As Long
        For i = 1 To ThisWorkbook.GetActiveDoc.LayerCount
            
            If Target.Row = currentRow Then
                editor.RouteLayerEnable(i) = ReadCheckBoxItem(currentRow, 1)
            End If
            currentRow = currentRow + 1
            
            'PrintRow currentRow, 2, "Bias:", ""
            currentRow = currentRow + 1
            
            If Target.Row = currentRow And ReadRadioItem(currentRow, 3) Then
                editor.RouteDirBias(i) = 1
            End If
            currentRow = currentRow + 1
            
            If Target.Row = currentRow And ReadRadioItem(currentRow, 3) Then
                editor.RouteDirBias(i) = 0
            End If
            currentRow = currentRow + 1
            
            If Target.Row = currentRow Then
                editor.RouteLayerPair(i) = ReadRow(currentRow, 2)
            End If
            currentRow = currentRow + 1
        Next
        
    bSelectionsAreBeingUpdated = False
    RefreshValues
End Sub

Attribute VB_Name = "Sheet09"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
' This is a part of the MentorGraphics-ExpeditionPCB OLE Automation server samples.
' Copyright (C) 2003 Mentor Graphics Software, Inc.
' All rights reserved.
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Option Explicit

Dim bReportIsBeingUpdated As Boolean
Dim bSelectionsAreBeingUpdated As Boolean


' refreshes the EditorControl values in the Spreadsheet
Public Sub EditorControlValue()
    If ThisWorkbook.GetActiveDoc Is Nothing Then Exit Sub ' If we are not connected, exit procedure
   
    ' empty existing sheet contents
    Range("A1:S1000").Clear
    Range("A1:D1000").Borders.LineStyle = XlLineStyle.xlContinuous
    Range("A1:D1").Borders.Color = RGB(75, 75, 75)
    Range("A2:D1000").Borders.Color = RGB(100, 100, 100)

    Range("A1:D1000").Interior.Color = RGB(200, 200, 200)
    Range("D1:D1000").Interior.Color = RGB(210, 210, 210)
    
    Dim currentRow As Integer
    currentRow = 0
    
    currentRow = currentRow + 1
    On Error Resume Next
    
    ' Lock server (to speed up OLE access)
    If ThisWorkbook.GetActiveApp.LockServer = True Then
        bReportIsBeingUpdated = True
                    
        ' get editor control
        'Dim outline
        Dim editor As MGCPCB.EditorControl
        Set editor = ThisWorkbook.GetActiveDoc.EditorControl
        
        ' Output header
        PrintTitleRow
        currentRow = currentRow + 1
        
        PrintRow currentRow, 0, "Tuning pattern rules", ""
        currentRow = currentRow + 1
        
        PrintRow currentRow, 1, "Minimum spacing", editor.TuningPatternDist(epcbECTuningMinSpacing)
        currentRow = currentRow + 1
        
        PrintRow currentRow, 1, "Preferred minimum height", editor.TuningPatternDist(epcbECTuningMinHeight)
        currentRow = currentRow + 1
        
        PrintRow currentRow, 1, "Maximum height", editor.TuningPatternDist(epcbECTuningMaxHeight)
        currentRow = currentRow + 1
        
        PrintRow currentRow, 1, "Miter ratio", editor.TuningMiterRatio
        currentRow = currentRow + 1
        
        PrintRow currentRow, 1, "Serpentine:", ""
        currentRow = currentRow + 1
        
        
        If editor.TuningPatterns(epcbECTuningIrregular) = 0 Then
            PrintRow currentRow, 2, "Regular height", ""
        Else
            PrintRadioItem currentRow, 2, "Regular height", editor.TuningPatterns(epcbECTuningRegular), 0
        End If
        currentRow = currentRow + 1
        
        PrintRadioItem currentRow, 2, "Irregular height", editor.TuningPatterns(epcbECTuningIrregular), 0
        currentRow = currentRow + 1
        
        PrintRadioItem currentRow, 2, "Prevent", editor.TuningPatterns(epcbECTuningRegular), 1
        currentRow = currentRow + 1
        
        PrintRow currentRow, 1, "Trombone:", ""
        currentRow = currentRow + 1
        
        PrintRadioItem currentRow, 2, "Allow", editor.TuningPatterns(epcbECTuningTrombone), 0
        currentRow = currentRow + 1
        
        PrintRadioItem currentRow, 2, "Prevent", editor.TuningPatterns(epcbECTuningTrombone), 1
        currentRow = currentRow + 1
        
        PrintRow currentRow, 1, "Non-Serpentine:", ""
        currentRow = currentRow + 1
        
        PrintRadioItem currentRow, 2, "Allow", editor.TuningPatterns(epcbECTuningNonSerpentine), 0
        currentRow = currentRow + 1
        
        PrintRadioItem currentRow, 2, "Prevent", editor.TuningPatterns(epcbECTuningNonSerpentine), 1
        currentRow = currentRow + 1
        
        PrintRadioItem currentRow, 2, "Prefer", editor.TuningPatterns(epcbECTuningNonSerpentine), 2
        currentRow = currentRow + 1
        
        PrintCheckBoxItem currentRow, 1, "Use arcs", editor.TuningUseArcs
        currentRow = currentRow + 1
        
        PrintCheckBoxItem currentRow, 1, "Allow vias in any pattern", editor.TuningAllowVias
        currentRow = currentRow + 1
        
        PrintCheckBoxItem currentRow, 1, "Prevent stairsteps", editor.TuningPreventStairSteps
        currentRow = currentRow + 1
        
        PrintRow currentRow, 0, "Diff pair balancing", ""
        currentRow = currentRow + 1
        
        PrintCheckBoxItem currentRow, 1, "Sawtooth tuning", editor.SawtoothTuning
        currentRow = currentRow + 1
        
        PrintCheckBoxItem currentRow, 1, "Uncoupled tuning", editor.UncoupledTuning
        currentRow = currentRow + 1
        
        PrintRow currentRow, 1, "Sawtooth length", -editor.TuningPatternDist(epcbECTuningSawtoothSpacing, epcbUnitDatabase) / 100
        currentRow = currentRow + 1
        
        PrintRow currentRow, 1, "Maximum sawtooth height", -editor.TuningPatternDist(epcbECTuningSawtoothHeight, epcbUnitDatabase) / 100
        currentRow = currentRow + 1
        
        PrintRow currentRow, 0, "Tuning iterations", ""
        currentRow = currentRow + 1
        
        PrintRow currentRow, 1, "Reduce length:", ""
        currentRow = currentRow + 1
        
        PrintRadioItem currentRow, 2, "Off", editor.AutoTuneReduceLength, 0
        currentRow = currentRow + 1
        
        PrintRadioItem currentRow, 2, "Low", editor.AutoTuneReduceLength, 1
        currentRow = currentRow + 1
        
        PrintRadioItem currentRow, 2, "Medium", editor.AutoTuneReduceLength, 2
        currentRow = currentRow + 1
        
        PrintRadioItem currentRow, 2, "High", editor.AutoTuneReduceLength, 3
        currentRow = currentRow + 1
        
        PrintRow currentRow, 1, "Add length:", ""
        currentRow = currentRow + 1
        
        PrintRadioItem currentRow, 2, "Off", editor.AutoTuneAddLength, 0
        currentRow = currentRow + 1
        
        PrintRadioItem currentRow, 2, "Low", editor.AutoTuneAddLength, 1
        currentRow = currentRow + 1
        
        PrintRadioItem currentRow, 2, "Medium", editor.AutoTuneAddLength, 2
        currentRow = currentRow + 1
        
        PrintRadioItem currentRow, 2, "High", editor.AutoTuneAddLength, 3
        currentRow = currentRow + 1
        
        PrintRadioItem currentRow, 2, "Exhaustive", editor.AutoTuneAddLength, 4
        currentRow = currentRow + 1
        
        PrintRow currentRow, 0, "AutoTune options", ""
        currentRow = currentRow + 1
        
        PrintRow currentRow, 1, "Effort:", ""
        currentRow = currentRow + 1
        
        PrintRadioItem currentRow, 2, "ReTune Only", editor.AutoTuneEffort, 0
        currentRow = currentRow + 1
        
        PrintRadioItem currentRow, 2, "Tune & ReTune", editor.AutoTuneEffort, 1
        currentRow = currentRow + 1
        
        PrintRow currentRow, 1, "Automatic urgency:", ""
        currentRow = currentRow + 1
        
        PrintRadioItem currentRow, 2, "Off", editor.AutoRouteAutoTuneLevel, 0
        currentRow = currentRow + 1
        
        PrintRadioItem currentRow, 2, "+ At End of Pass", editor.AutoRouteAutoTuneLevel, 1
        currentRow = currentRow + 1
        
        PrintRadioItem currentRow, 2, "+ At End of Effort", editor.AutoRouteAutoTuneLevel, 2
        currentRow = currentRow + 1
        
        PrintRadioItem currentRow, 2, "+ On Netline Routed", editor.AutoRouteAutoTuneLevel, 3
        currentRow = currentRow + 1
        
        PrintRow currentRow, 1, "Interactive urgency:", ""
        currentRow = currentRow + 1
        
        PrintRadioItem currentRow, 2, "Off", editor.InteractiveAutoTuneLevel, 0
        currentRow = currentRow + 1
        
        PrintRadioItem currentRow, 2, "+ On Idle", editor.InteractiveAutoTuneLevel, 1
        currentRow = currentRow + 1
        
        PrintRadioItem currentRow, 2, "+ On Netline Routed", editor.InteractiveAutoTuneLevel, 2
        currentRow = currentRow + 1
        
        PrintRadioItem currentRow, 2, "+ While Clicking", editor.InteractiveAutoTuneLevel, 3
        currentRow = currentRow + 1
        
        PrintRadioItem currentRow, 2, "+ On Drag", editor.InteractiveAutoTuneLevel, 4
        currentRow = currentRow + 1
        
        bReportIsBeingUpdated = False
        
        ' Unlock server
        ThisWorkbook.GetActiveApp.UnlockServer
    End If
Exit Sub

OnErrorServerAccess:
    ThisWorkbook.GetActiveApp.UnlockServer
    MsgBox "Error accessing ExpeditionPCB Server.", , "Automation Demonstration"
End Sub

' refreshes values displayed in Sheet1
Public Sub RefreshValues()
    If ThisWorkbook.GetActiveDoc Is Nothing Then Exit Sub ' If we are not connected, exit procedure
    EditorControlValue
End Sub

' Main routine
Sub Main()
    bReportIsBeingUpdated = True
    bSelectionsAreBeingUpdated = False
    Sheets("Route - Tuning").Select ' Make Sheet1 visible
    
    Call ThisWorkbook.Connect     ' Connect to ExpeditionPCB (we use the global ThisWorkbook.GetActiveApp Object variable)
    
    RefreshValues ' Refresh sheet values
    bReportIsBeingUpdated = False
End Sub


Private Sub Worksheet_Activate()
    Main
End Sub

Private Sub Worksheet_Change(ByVal Target As Excel.Range)
    ' the worksheet has changed - did the user edit one of the editor control coordinate columns?
    ' Target is a reference to the changed cell.
    If ThisWorkbook.GetActiveDoc Is Nothing Then Exit Sub ' If we are not connected, exit procedure
    
    ' exit if we are updating the worksheet ourselves
    If bReportIsBeingUpdated = True Then Exit Sub
    If bSelectionsAreBeingUpdated = True Then Exit Sub
    
    On Error Resume Next
    If Target.FormulaR1C1 = "" Then
        Exit Sub
    End If
    
    bSelectionsAreBeingUpdated = True
    Dim currentRow As Integer
    currentRow = 1
    
        ' get editor control
        'Dim outline
        Dim editor As MGCPCB.EditorControl
        Set editor = ThisWorkbook.GetActiveDoc.EditorControl
        
        ' Output header
        'PrintTitleRow
        currentRow = currentRow + 1
        
        'PrintRow currentRow, 0, "Tuning pattern rules", ""
        currentRow = currentRow + 1
        
        If Target.Row = currentRow Then
            editor.TuningPatternDist(epcbECTuningMinSpacing) = ReadRow(currentRow, 1)
        End If
        currentRow = currentRow + 1
        
        If Target.Row = currentRow Then
            editor.TuningPatternDist(epcbECTuningMinHeight) = ReadRow(currentRow, 1)
        End If
        currentRow = currentRow + 1
        
        If Target.Row = currentRow Then
            editor.TuningPatternDist(epcbECTuningMaxHeight) = ReadRow(currentRow, 1)
        End If
        currentRow = currentRow + 1
        
        If Target.Row = currentRow Then
            editor.TuningMiterRatio = ReadRow(currentRow, 1)
        End If
        currentRow = currentRow + 1
        
        'PrintRow currentRow, 1, "Serpentine:", ""
        currentRow = currentRow + 1
        
        If Target.Row = currentRow And ReadRadioItem(currentRow, 2) Then
            editor.TuningPatterns(epcbECTuningRegular) = 0
            editor.TuningPatterns(epcbECTuningIrregular) = 1
        End If
        currentRow = currentRow + 1
        
        If Target.Row = currentRow And ReadRadioItem(currentRow, 2) Then
            editor.TuningPatterns(epcbECTuningRegular) = 0
            editor.TuningPatterns(epcbECTuningIrregular) = 0
        End If
        currentRow = currentRow + 1
        
        If Target.Row = currentRow And ReadRadioItem(currentRow, 2) Then
            editor.TuningPatterns(epcbECTuningRegular) = 1
            editor.TuningPatterns(epcbECTuningIrregular) = 1
        End If
        currentRow = currentRow + 1
        
        'PrintRow currentRow, 1, "Trombone:", ""
        currentRow = currentRow + 1
        
        If Target.Row = currentRow And ReadRadioItem(currentRow, 2) Then
            editor.TuningPatterns(epcbECTuningTrombone) = 0
        End If
        currentRow = currentRow + 1
        
        If Target.Row = currentRow And ReadRadioItem(currentRow, 2) Then
            editor.TuningPatterns(epcbECTuningTrombone) = 1
        End If
        currentRow = currentRow + 1
        
        
        'PrintRow currentRow, 1, "Non-Serpentine:", ""
        currentRow = currentRow + 1
        
        If Target.Row = currentRow And ReadRadioItem(currentRow, 2) Then
            editor.TuningPatterns(epcbECTuningNonSerpentine) = 0
        End If
        currentRow = currentRow + 1
        
        If Target.Row = currentRow And ReadRadioItem(currentRow, 2) Then
            editor.TuningPatterns(epcbECTuningNonSerpentine) = 1
        End If
        currentRow = currentRow + 1
        
        If Target.Row = currentRow And ReadRadioItem(currentRow, 2) Then
            editor.TuningPatterns(epcbECTuningNonSerpentine) = 2
        End If
        currentRow = currentRow + 1
        
        If Target.Row = currentRow Then
            editor.TuningUseArcs = ReadCheckBoxItem(currentRow, 1)
        End If
        currentRow = currentRow + 1
        
        If Target.Row = currentRow Then
            editor.TuningAllowVias = ReadCheckBoxItem(currentRow, 1)
        End If
        currentRow = currentRow + 1
        
        If Target.Row = currentRow Then
            editor.TuningPreventStairSteps = ReadCheckBoxItem(currentRow, 1)
        End If
        currentRow = currentRow + 1
        
        'PrintRow currentRow, 0, "Diff pair balancing", ""
        currentRow = currentRow + 1
        
        If Target.Row = currentRow Then
            editor.SawtoothTuning = ReadCheckBoxItem(currentRow, 1)
        End If
        currentRow = currentRow + 1
        
        If Target.Row = currentRow Then
            editor.UncoupledTuning = ReadCheckBoxItem(currentRow, 1)
        End If
        currentRow = currentRow + 1
        
        If Target.Row = currentRow Then
            editor.TuningPatternDist(epcbECTuningSawtoothSpacing, epcbUnitDatabase) = -100 * ReadRow(currentRow, 1)
        End If
        currentRow = currentRow + 1
        
        If Target.Row = currentRow Then
            editor.TuningPatternDist(epcbECTuningSawtoothHeight, epcbUnitDatabase) = -100 * ReadRow(currentRow, 1)
        End If
        currentRow = currentRow + 1
        
        'PrintRow currentRow, 0, "Tuning iterations", ""
        currentRow = currentRow + 1
        
        'PrintRow currentRow, 1, "Reduce length:", ""
        currentRow = currentRow + 1
        
        If Target.Row = currentRow And ReadRadioItem(currentRow, 2) Then
            editor.AutoTuneReduceLength = 0
        End If
        currentRow = currentRow + 1
        
        If Target.Row = currentRow And ReadRadioItem(currentRow, 2) Then
            editor.AutoTuneReduceLength = 1
        End If
        currentRow = currentRow + 1
        
        If Target.Row = currentRow And ReadRadioItem(currentRow, 2) Then
            editor.AutoTuneReduceLength = 2
        End If
        currentRow = currentRow + 1
        
        If Target.Row = currentRow And ReadRadioItem(currentRow, 2) Then
            editor.AutoTuneReduceLength = 3
        End If
        currentRow = currentRow + 1
        
        'PrintRow currentRow, 1, "Add length:", ""
        currentRow = currentRow + 1
        
        If Target.Row = currentRow And ReadRadioItem(currentRow, 2) Then
            editor.AutoTuneAddLength = 0
        End If
        currentRow = currentRow + 1
        
        If Target.Row = currentRow And ReadRadioItem(currentRow, 2) Then
            editor.AutoTuneAddLength = 1
        End If
        currentRow = currentRow + 1
        
        If Target.Row = currentRow And ReadRadioItem(currentRow, 2) Then
            editor.AutoTuneAddLength = 2
        End If
        currentRow = currentRow + 1
        
        If Target.Row = currentRow And ReadRadioItem(currentRow, 2) Then
            editor.AutoTuneAddLength = 3
        End If
        currentRow = currentRow + 1
        
        If Target.Row = currentRow And ReadRadioItem(currentRow, 2) Then
            editor.AutoTuneAddLength = 4
        End If
        currentRow = currentRow + 1
        
        'PrintRow currentRow, 0, "AutoTune options", ""
        currentRow = currentRow + 1
        
        'PrintRow currentRow, 1, "Effort:", ""
        currentRow = currentRow + 1
        
        If Target.Row = currentRow And ReadRadioItem(currentRow, 2) Then
            editor.AutoTuneEffort = 0
        End If
        currentRow = currentRow + 1
        
        If Target.Row = currentRow And ReadRadioItem(currentRow, 2) Then
            editor.AutoTuneEffort = 1
        End If
        currentRow = currentRow + 1
        
        'PrintRow currentRow, 1, "Automatic urgency:", ""
        currentRow = currentRow + 1
        
        If Target.Row = currentRow And ReadRadioItem(currentRow, 2) Then
            editor.AutoRouteAutoTuneLevel = 0
        End If
        currentRow = currentRow + 1
        
        If Target.Row = currentRow And ReadRadioItem(currentRow, 2) Then
            editor.AutoRouteAutoTuneLevel = 1
        End If
        currentRow = currentRow + 1
        
        If Target.Row = currentRow And ReadRadioItem(currentRow, 2) Then
            editor.AutoRouteAutoTuneLevel = 2
        End If
        currentRow = currentRow + 1
        
        If Target.Row = currentRow And ReadRadioItem(currentRow, 2) Then
            editor.AutoRouteAutoTuneLevel = 3
        End If
        currentRow = currentRow + 1
        
        'PrintRow currentRow, 1, "Interactive urgency:", ""
        currentRow = currentRow + 1
        
        If Target.Row = currentRow And ReadRadioItem(currentRow, 2) Then
            editor.InteractiveAutoTuneLevel = 0
        End If
        currentRow = currentRow + 1
        
        If Target.Row = currentRow And ReadRadioItem(currentRow, 2) Then
            editor.InteractiveAutoTuneLevel = 1
        End If
        currentRow = currentRow + 1
        
        If Target.Row = currentRow And ReadRadioItem(currentRow, 2) Then
            editor.InteractiveAutoTuneLevel = 2
        End If
        currentRow = currentRow + 1
        
        If Target.Row = currentRow And ReadRadioItem(currentRow, 2) Then
            editor.InteractiveAutoTuneLevel = 3
        End If
        currentRow = currentRow + 1
        
        If Target.Row = currentRow And ReadRadioItem(currentRow, 2) Then
            editor.InteractiveAutoTuneLevel = 4
        End If
        currentRow = currentRow + 1
        
    bSelectionsAreBeingUpdated = False
    RefreshValues
End Sub

Attribute VB_Name = "Sheet10"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
' This is a part of the MentorGraphics-ExpeditionPCB OLE Automation server samples.
' Copyright (C) 2003 Mentor Graphics Software, Inc.
' All rights reserved.
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Option Explicit

Dim bReportIsBeingUpdated As Boolean
Dim bSelectionsAreBeingUpdated As Boolean


' refreshes the EditorControl values in the Spreadsheet
Public Sub EditorControlValue()
    If ThisWorkbook.GetActiveDoc Is Nothing Then Exit Sub ' If we are not connected, exit procedure
   
    ' empty existing sheet contents
    Range("A1:S1000").Clear
    Range("A1:D1000").Borders.LineStyle = XlLineStyle.xlContinuous
    Range("A1:D1").Borders.Color = RGB(75, 75, 75)
    Range("A2:D1000").Borders.Color = RGB(100, 100, 100)

    Range("A1:D1000").Interior.Color = RGB(200, 200, 200)
    Range("D1:D1000").Interior.Color = RGB(210, 210, 210)
    
    Dim currentRow As Integer
    currentRow = 0
    
    currentRow = currentRow + 1
    On Error Resume Next
    
    ' Lock server (to speed up OLE access)
    If ThisWorkbook.GetActiveApp.LockServer = True Then
        bReportIsBeingUpdated = True
                    
        ' get editor control
        'Dim outline
        Dim editor As MGCPCB.EditorControl
        Set editor = ThisWorkbook.GetActiveDoc.EditorControl
        
        ' Output header
        PrintTitleRow
        currentRow = currentRow + 1
        
        PrintRow currentRow, 0, "Diff Pairs", ""
        currentRow = currentRow + 1
        
        PrintRow currentRow, 1, "Adjacent and same layer pairs:", ""
        currentRow = currentRow + 1
        
        Dim i As Long
        For i = 1 To ThisWorkbook.GetActiveDoc.LayerCount
            PrintRow currentRow, 2, "Layer " & i, editor.RouteLayerDiffPair(i)
            currentRow = currentRow + 1
        Next
        
        PrintRow currentRow, 1, "Min length to maintain pairing", editor.RouteDiffPairParmVal(epcbECMinDiffPairLength)
        currentRow = currentRow + 1
        
        PrintRow currentRow, 1, "Max distance to convergence", editor.RouteDiffPairParmVal(epcbECMaxDiffPairConvergence)
        currentRow = currentRow + 1
        
        PrintRow currentRow, 1, "Convergence distance tolerance", editor.RouteDiffPairParmVal(epcbECMaxDiffPairConvergenceTol)
        currentRow = currentRow + 1
        
        PrintRow currentRow, 1, "Max separation distance", editor.RouteDiffPairParmVal(epcbECMaxDiffPairSeparationDist)
        currentRow = currentRow + 1
        
        PrintRow currentRow, 1, "During Push & Shove:", ""
        currentRow = currentRow + 1
        
        PrintRadioItem currentRow, 2, "Ignore Pair Relationships", editor.RouteDiffPairBehavior, 0
        currentRow = currentRow + 1
        
        PrintRadioItem currentRow, 2, "Allow Pairs to Split If Necessary", editor.RouteDiffPairBehavior, 1
        currentRow = currentRow + 1
        
        PrintRadioItem currentRow, 2, "Prohibit Splitting of Diff Pairs", editor.RouteDiffPairBehavior, 2
        currentRow = currentRow + 1
        
        PrintRadioItem currentRow, 2, "Avoid Splitting of Existing Pairs", editor.RouteDiffPairBehavior, 3
        currentRow = currentRow + 1
        
        PrintCheckBoxItem currentRow, 1, "Minimize splitting", editor.RouteMinimizeSplitting
        currentRow = currentRow + 1
        
        
        bReportIsBeingUpdated = False
        
        ' Unlock server
        ThisWorkbook.GetActiveApp.UnlockServer
    End If
Exit Sub

OnErrorServerAccess:
    ThisWorkbook.GetActiveApp.UnlockServer
    MsgBox "Error accessing ExpeditionPCB Server.", , "Automation Demonstration"
End Sub

' refreshes values displayed in Sheet1
Public Sub RefreshValues()
    If ThisWorkbook.GetActiveDoc Is Nothing Then Exit Sub ' If we are not connected, exit procedure
    EditorControlValue
End Sub

' Main routine
Sub Main()
    bReportIsBeingUpdated = True
    bSelectionsAreBeingUpdated = False
    Sheets("Route - Diff Pairs").Select ' Make Sheet1 visible
    
    Call ThisWorkbook.Connect   ' Connect to ExpeditionPCB (we use the global ThisWorkbook.GetActiveApp Object variable)
    
    RefreshValues ' Refresh sheet values
    bReportIsBeingUpdated = False
End Sub

Private Sub Worksheet_Activate()
    Main
End Sub

Private Sub Worksheet_Change(ByVal Target As Excel.Range)
    ' the worksheet has changed - did the user edit one of the editor control coordinate columns?
    ' Target is a reference to the changed cell.
    If ThisWorkbook.GetActiveDoc Is Nothing Then Exit Sub ' If we are not connected, exit procedure
    
    ' exit if we are updating the worksheet ourselves
    If bReportIsBeingUpdated = True Then Exit Sub
    If bSelectionsAreBeingUpdated = True Then Exit Sub
    
    On Error Resume Next
    If Target.FormulaR1C1 = "" Then
        Exit Sub
    End If
    
    bSelectionsAreBeingUpdated = True
    Dim currentRow As Integer
    currentRow = 1
    
        ' get editor control
        'Dim outline
        Dim editor As MGCPCB.EditorControl
        Set editor = ThisWorkbook.GetActiveDoc.EditorControl
        
        ' Output header
        'PrintTitleRow
        currentRow = currentRow + 1
        
        'PrintRow currentRow, 0, "Diff Pairs", ""
        currentRow = currentRow + 1
        
        'PrintRow currentRow, 1, "Adjacent and same layer pairs:", ""
        currentRow = currentRow + 1
        
        Dim i As Long
        For i = 1 To ThisWorkbook.GetActiveDoc.LayerCount
            If Target.Row = currentRow Then
                editor.RouteLayerDiffPair(i) = ReadRow(currentRow, 2)
            End If
            currentRow = currentRow + 1
        Next
        
        If Target.Row = currentRow Then
            editor.RouteDiffPairParmVal(epcbECMinDiffPairLength) = ReadRow(currentRow, 1)
        End If
        currentRow = currentRow + 1
        
        If Target.Row = currentRow Then
            editor.RouteDiffPairParmVal(epcbECMaxDiffPairConvergence) = ReadRow(currentRow, 1)
        End If
        currentRow = currentRow + 1
        
        If Target.Row = currentRow Then
            editor.RouteDiffPairParmVal(epcbECMaxDiffPairConvergenceTol) = ReadRow(currentRow, 1)
        End If
        currentRow = currentRow + 1
        
        If Target.Row = currentRow Then
            editor.RouteDiffPairParmVal(epcbECMaxDiffPairSeparationDist) = ReadRow(currentRow, 1)
        End If
        currentRow = currentRow + 1
        
        'PrintRow currentRow, 1, "During Push & Shove:", ""
        currentRow = currentRow + 1
        
        If Target.Row = currentRow And ReadRadioItem(currentRow, 2) Then
            editor.RouteDiffPairBehavior = 0
        End If
        currentRow = currentRow + 1
        
        If Target.Row = currentRow And ReadRadioItem(currentRow, 2) Then
            editor.RouteDiffPairBehavior = 1
        End If
        currentRow = currentRow + 1
        
        If Target.Row = currentRow And ReadRadioItem(currentRow, 2) Then
            editor.RouteDiffPairBehavior = 2
        End If
        currentRow = currentRow + 1
        
        If Target.Row = currentRow And ReadRadioItem(currentRow, 2) Then
            editor.RouteDiffPairBehavior = 3
        End If
        currentRow = currentRow + 1
        
        If Target.Row = currentRow Then
            editor.RouteMinimizeSplitting = ReadCheckBoxItem(currentRow, 1)
        End If
        currentRow = currentRow + 1
        
    bSelectionsAreBeingUpdated = False
    RefreshValues
End Sub

Attribute VB_Name = "Sheet11"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
' This is a part of the MentorGraphics-ExpeditionPCB OLE Automation server samples.
' Copyright (C) 2003 Mentor Graphics Software, Inc.
' All rights reserved.
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Option Explicit

Dim bReportIsBeingUpdated As Boolean
Dim bSelectionsAreBeingUpdated As Boolean

' refreshes the EditorControl values in the Spreadsheet
Public Sub EditorControlValue()
    If ThisWorkbook.GetActiveDoc Is Nothing Then Exit Sub ' If we are not connected, exit procedure
   
    ' empty existing sheet contents
    Range("A1:S1000").Clear
    Range("A1:D1000").Borders.LineStyle = XlLineStyle.xlContinuous
    Range("A1:D1").Borders.Color = RGB(75, 75, 75)
    Range("A2:D1000").Borders.Color = RGB(100, 100, 100)

    Range("A1:D1000").Interior.Color = RGB(200, 200, 200)
    Range("D1:D1000").Interior.Color = RGB(210, 210, 210)
    
    Dim currentRow As Integer
    currentRow = 0
    
    currentRow = currentRow + 1
    On Error Resume Next
    
    ' Lock server (to speed up OLE access)
    If ThisWorkbook.GetActiveApp.LockServer = True Then
        bReportIsBeingUpdated = True
                    
        ' get editor control
        'Dim outline
        Dim editor As MGCPCB.EditorControl
        Set editor = ThisWorkbook.GetActiveDoc.EditorControl
        
        ' Output header
        PrintTitleRow
        currentRow = currentRow + 1
        
        PrintRow currentRow, 0, "Pad Entry", ""
        currentRow = currentRow + 1
        
        PrintCheckBoxItem currentRow, 1, "Gridless pad entry for all pads", editor.GridlessPadEntry And editor.Grid(epcbGridRoute) <> 0
        currentRow = currentRow + 1
        
        PrintCheckBoxItem currentRow, 1, "Fit View / Highlight pad", editor.FitView
        currentRow = currentRow + 1
        
        PrintRow currentRow, 1, "Exposed metal clearance on outer layers:", ""
        currentRow = currentRow + 1
        
        If editor.ExposedMetalClearances(epcbSideTop) < 0 Then
            PrintRow currentRow, 2, "Top", 0
        Else
            PrintRow currentRow, 2, "Top", editor.ExposedMetalClearances(epcbSideTop)
        End If
        currentRow = currentRow + 1
        
        If editor.ExposedMetalClearances(epcbSideBottom) < 0 Then
            PrintRow currentRow, 2, "Bottom", 0
        Else
            PrintRow currentRow, 2, "Bottom", editor.ExposedMetalClearances(epcbSideBottom)
        End If
        currentRow = currentRow + 1
        
        Dim mypads As MGCPCB.Pads
        Dim mypad As MGCPCB.pad
        
        PrintRow currentRow, 0, "Rectangular Pads", ""
        currentRow = currentRow + 1
        
        PrintRow currentRow, 1, "Rules for all rectangular pads", ""
        currentRow = currentRow + 1
            
        PrintCheckBoxItem currentRow, 2, "Prefer Adjacent pads", editor.PadEntryGlobalRules(epcbRectPad, epcbECPadAdjacentLong)
        currentRow = currentRow + 1
            
        PrintCheckBoxItem currentRow, 2, "Prefer Corner pads", editor.PadEntryGlobalRules(epcbRectPad, epcbECPadAdjacentCorner)
        currentRow = currentRow + 1
        
        Dim aranges As MGCPCB.LayerRanges
        Dim pranges As MGCPCB.LayerRanges
        Dim arange As MGCPCB.LayerRange
        Dim prange As MGCPCB.LayerRange
        Dim found As Boolean
        Set mypads = editor.Pads(epcbRectPad)
        For Each mypad In mypads
            PrintRow currentRow, 1, "Rules for: " & mypad.Name, ""
            currentRow = currentRow + 1
            
            PrintCheckBoxItem currentRow, 2, "Extended Pad Entry", editor.SelPadsTracePosRules(mypad, epcbRectPad, epcbECExtendedPadEntry)
            currentRow = currentRow + 1
            
            PrintCheckBoxItem currentRow, 3, "Allow Odd Angle", editor.SelPadsTracePosRules(mypad, epcbRectPad, epcbECAllowOddAngle)
            currentRow = currentRow + 1
            
            PrintCheckBoxItem currentRow, 2, "Short Center", editor.SelPadsTracePosRules(mypad, epcbRectPad, epcbECPadTraceShortCtr)
            currentRow = currentRow + 1
            
            PrintCheckBoxItem currentRow, 2, "Short Edge", editor.SelPadsTracePosRules(mypad, epcbRectPad, epcbECPadTraceShortEdge)
            currentRow = currentRow + 1
            
            PrintCheckBoxItem currentRow, 2, "Long Center", editor.SelPadsTracePosRules(mypad, epcbRectPad, epcbECPadTraceLongCtr)
            currentRow = currentRow + 1
            
            PrintCheckBoxItem currentRow, 2, "Long Edge", editor.SelPadsTracePosRules(mypad, epcbRectPad, epcbECPadTraceLongEdge)
            currentRow = currentRow + 1
            
            PrintCheckBoxItem currentRow, 2, "Corner", editor.SelPadsTracePosRules(mypad, epcbRectPad, epcbECPadTraceCorner)
            currentRow = currentRow + 1
            
            PrintCheckBoxItem currentRow, 2, "Allow via under pad", editor.SelPadsViaPosRules(mypad, epcbRectPad, epcbECAllowViasUnderPad)
            currentRow = currentRow + 1
            
            PrintCheckBoxItem currentRow, 3, "Allow off pad origin", editor.SelPadsViaPosRules(mypad, epcbRectPad, epcbECAllowOffPadOrigin)
            currentRow = currentRow + 1
            
            PrintCheckBoxItem currentRow, 3, "  Align on long axis", editor.SelPadsViaPosRules(mypad, epcbRectPad, epcbECAlignViaOnLongAxis)
            currentRow = currentRow + 1
            
            PrintCheckBoxItem currentRow, 3, "  Locate at pad edge", editor.SelPadsViaPosRules(mypad, epcbRectPad, epcbECLocateViaAtPadEdge)
            currentRow = currentRow + 1
            
            PrintCheckBoxItem currentRow, 3, "  Keep via center inside pad", editor.SelPadsViaPosRules(mypad, epcbRectPad, epcbECKeepViaCenterInsidePad)
            currentRow = currentRow + 1
            
            PrintCheckBoxItem currentRow, 3, "    Keep via pad inside pad", editor.SelPadsViaPosRules(mypad, epcbRectPad, epcbECKeepViaPadInsidePad)
            currentRow = currentRow + 1
            
            
            Set aranges = editor.PadEntryAllowedPadsViaSpan(mypad, epcbRectPad)
            Set pranges = editor.PadEntryViaSpansForPad(mypad)
            found = False
            For Each prange In pranges
                If Not aranges Is Nothing Then
                    For Each arange In aranges
                        If arange.Name = prange.Name Then
                            found = True
                            Exit For
                        End If
                    Next
                    PrintCheckBoxItem currentRow, 3, prange.Name, found
                End If
                currentRow = currentRow + 1
                found = False
            Next
            Set aranges = Nothing
        Next
        
        PrintRow currentRow, 0, "Oblong/Octagon Pads", ""
        currentRow = currentRow + 1
        
        PrintRow currentRow, 1, "Rules for all Oblong/Octagon pads", ""
        currentRow = currentRow + 1
            
        PrintCheckBoxItem currentRow, 2, "Prefer Adjacent pads", editor.PadEntryGlobalRules(epcbOblongPad, epcbECPadAdjacentLong)
        currentRow = currentRow + 1
            
        PrintCheckBoxItem currentRow, 2, "Prefer Corner pads", editor.PadEntryGlobalRules(epcbOblongPad, epcbECPadAdjacentCorner)
        currentRow = currentRow + 1
        
        
        Set mypads = editor.Pads(epcbOblongPad)
        For Each mypad In mypads
            PrintRow currentRow, 1, "Rules for: " & mypad.Name, ""
            currentRow = currentRow + 1
            
            PrintCheckBoxItem currentRow, 2, "Extended Pad Entry", editor.SelPadsTracePosRules(mypad, epcbRectPad, epcbECExtendedPadEntry)
            currentRow = currentRow + 1
            
            PrintCheckBoxItem currentRow, 3, "Allow Odd Angle", editor.SelPadsTracePosRules(mypad, epcbRectPad, epcbECAllowOddAngle)
            currentRow = currentRow + 1
            
            PrintCheckBoxItem currentRow, 2, "Short Center", editor.SelPadsTracePosRules(mypad, epcbRectPad, epcbECPadTraceShortCtr)
            currentRow = currentRow + 1
            
            PrintCheckBoxItem currentRow, 2, "Long Center", editor.SelPadsTracePosRules(mypad, epcbRectPad, epcbECPadTraceLongCtr)
            currentRow = currentRow + 1
            
            PrintCheckBoxItem currentRow, 2, "Corner", editor.SelPadsTracePosRules(mypad, epcbRectPad, epcbECPadTraceCorner)
            currentRow = currentRow + 1
            
            PrintCheckBoxItem currentRow, 2, "Allow via under pad", editor.SelPadsViaPosRules(mypad, epcbRectPad, epcbECAllowViasUnderPad)
            currentRow = currentRow + 1
            
            PrintCheckBoxItem currentRow, 3, "Allow off pad origin", editor.SelPadsViaPosRules(mypad, epcbRectPad, epcbECAllowOffPadOrigin)
            currentRow = currentRow + 1
            
            PrintCheckBoxItem currentRow, 3, "  Align on long axis", editor.SelPadsViaPosRules(mypad, epcbRectPad, epcbECAlignViaOnLongAxis)
            currentRow = currentRow + 1
            
            PrintCheckBoxItem currentRow, 3, "  Locate at pad edge", editor.SelPadsViaPosRules(mypad, epcbRectPad, epcbECLocateViaAtPadEdge)
            currentRow = currentRow + 1
            
            PrintCheckBoxItem currentRow, 3, "  Keep via center inside pad", editor.SelPadsViaPosRules(mypad, epcbRectPad, epcbECKeepViaCenterInsidePad)
            currentRow = currentRow + 1
            
            PrintCheckBoxItem currentRow, 3, "    Keep via pad inside pad", editor.SelPadsViaPosRules(mypad, epcbRectPad, epcbECKeepViaPadInsidePad)
            currentRow = currentRow + 1
            
            
            Set aranges = editor.PadEntryAllowedPadsViaSpan(mypad, epcbOblongPad)
            Set pranges = editor.PadEntryViaSpansForPad(mypad)
            found = False
            For Each prange In pranges
                If Not aranges Is Nothing Then
                    For Each arange In aranges
                        If arange.Name = prange.Name Then
                            found = True
                            Exit For
                        End If
                    Next
                    PrintCheckBoxItem currentRow, 3, prange.Name, found
                End If
                
                currentRow = currentRow + 1
                found = False
            Next
            Set aranges = Nothing
        Next
        
        PrintRow currentRow, 0, "Round/Octagon Pads", ""
        currentRow = currentRow + 1
        
        
        Set mypads = editor.Pads(epcbRoundPad)
        For Each mypad In mypads
            PrintRow currentRow, 1, "Rules for: " & mypad.Name, ""
            currentRow = currentRow + 1
            
            PrintCheckBoxItem currentRow, 2, "Extended Pad Entry", editor.SelPadsTracePosRules(mypad, epcbRectPad, epcbECExtendedPadEntry)
            currentRow = currentRow + 1
            
            PrintCheckBoxItem currentRow, 3, "Allow Odd Angle", editor.SelPadsTracePosRules(mypad, epcbRectPad, epcbECAllowOddAngle)
            currentRow = currentRow + 1
            
            PrintCheckBoxItem currentRow, 2, "Allow via under pad", editor.SelPadsViaPosRules(mypad, epcbRectPad, epcbECAllowViasUnderPad)
            currentRow = currentRow + 1
            
            PrintCheckBoxItem currentRow, 3, "Allow off pad origin", editor.SelPadsViaPosRules(mypad, epcbRectPad, epcbECAllowOffPadOrigin)
            currentRow = currentRow + 1
            
            PrintCheckBoxItem currentRow, 3, "  Locate at pad edge", editor.SelPadsViaPosRules(mypad, epcbRectPad, epcbECLocateViaAtPadEdge)
            currentRow = currentRow + 1
            
            PrintCheckBoxItem currentRow, 3, "  Keep via center inside pad", editor.SelPadsViaPosRules(mypad, epcbRectPad, epcbECKeepViaCenterInsidePad)
            currentRow = currentRow + 1
            
            PrintCheckBoxItem currentRow, 3, "    Keep via pad inside pad", editor.SelPadsViaPosRules(mypad, epcbRectPad, epcbECKeepViaPadInsidePad)
            currentRow = currentRow + 1
            
            
            Set aranges = editor.PadEntryAllowedPadsViaSpan(mypad, epcbOblongPad)
            Set pranges = editor.PadEntryViaSpansForPad(mypad)
            found = False
            For Each prange In pranges
                If Not aranges Is Nothing Then
                    For Each arange In aranges
                        If arange.Name = prange.Name Then
                            found = True
                            Exit For
                        End If
                    Next
                    PrintCheckBoxItem currentRow, 3, prange.Name, found
                End If
                
                currentRow = currentRow + 1
                found = False
            Next
            Set aranges = Nothing
        Next
        
        PrintRow currentRow, 0, "Square Pads", ""
        currentRow = currentRow + 1
        
        
        Set mypads = editor.Pads(epcbSquarePad)
        For Each mypad In mypads
            PrintRow currentRow, 1, "Rules for: " & mypad.Name, ""
            currentRow = currentRow + 1
            
            PrintCheckBoxItem currentRow, 2, "Extended Pad Entry", editor.SelPadsTracePosRules(mypad, epcbRectPad, epcbECExtendedPadEntry)
            currentRow = currentRow + 1
            
            PrintCheckBoxItem currentRow, 3, "Allow Odd Angle", editor.SelPadsTracePosRules(mypad, epcbRectPad, epcbECAllowOddAngle)
            currentRow = currentRow + 1
            
            PrintCheckBoxItem currentRow, 2, "Center", editor.SelPadsTracePosRules(mypad, epcbRectPad, epcbECPadTraceShortCtr)
            currentRow = currentRow + 1
            
            PrintCheckBoxItem currentRow, 2, "Edge", editor.SelPadsTracePosRules(mypad, epcbRectPad, epcbECPadTraceShortEdge)
            currentRow = currentRow + 1
            
            PrintCheckBoxItem currentRow, 2, "Corner", editor.SelPadsTracePosRules(mypad, epcbRectPad, epcbECPadTraceCorner)
            currentRow = currentRow + 1
            
            PrintCheckBoxItem currentRow, 2, "Allow via under pad", editor.SelPadsViaPosRules(mypad, epcbRectPad, epcbECAllowViasUnderPad)
            currentRow = currentRow + 1
            
            PrintCheckBoxItem currentRow, 3, "Allow off pad origin", editor.SelPadsViaPosRules(mypad, epcbRectPad, epcbECAllowOffPadOrigin)
            currentRow = currentRow + 1
            
            PrintCheckBoxItem currentRow, 3, "  Locate at pad edge", editor.SelPadsViaPosRules(mypad, epcbRectPad, epcbECLocateViaAtPadEdge)
            currentRow = currentRow + 1
            
            PrintCheckBoxItem currentRow, 3, "  Keep via center inside pad", editor.SelPadsViaPosRules(mypad, epcbRectPad, epcbECKeepViaCenterInsidePad)
            currentRow = currentRow + 1
            
            PrintCheckBoxItem currentRow, 3, "    Keep via pad inside pad", editor.SelPadsViaPosRules(mypad, epcbRectPad, epcbECKeepViaPadInsidePad)
            currentRow = currentRow + 1
            
            
            Set aranges = editor.PadEntryAllowedPadsViaSpan(mypad, epcbOblongPad)
            Set pranges = editor.PadEntryViaSpansForPad(mypad)
            found = False
            For Each prange In pranges
                If Not aranges Is Nothing Then
                    For Each arange In aranges
                        If arange.Name = prange.Name Then
                            found = True
                            Exit For
                        End If
                    Next
                    PrintCheckBoxItem currentRow, 3, prange.Name, found
                End If
                
                currentRow = currentRow + 1
                found = False
            Next
            Set aranges = Nothing
        Next
        
        PrintRow currentRow, 0, "Custom Pads", ""
        currentRow = currentRow + 1
        
        
        Set mypads = editor.Pads(epcbCustomPad)
        For Each mypad In mypads
            PrintRow currentRow, 1, "Rules for: " & mypad.Name, ""
            currentRow = currentRow + 1
            
            PrintCheckBoxItem currentRow, 2, "Extended Pad Entry", editor.SelPadsTracePosRules(mypad, epcbRectPad, epcbECExtendedPadEntry)
            currentRow = currentRow + 1
            
            PrintCheckBoxItem currentRow, 3, "Allow Odd Angle", editor.SelPadsTracePosRules(mypad, epcbRectPad, epcbECAllowOddAngle)
            currentRow = currentRow + 1
            
            PrintCheckBoxItem currentRow, 2, "Allow via under pad", editor.SelPadsViaPosRules(mypad, epcbRectPad, epcbECAllowViasUnderPad)
            currentRow = currentRow + 1
            
            PrintCheckBoxItem currentRow, 3, "Allow off pad origin", editor.SelPadsViaPosRules(mypad, epcbRectPad, epcbECAllowOffPadOrigin)
            currentRow = currentRow + 1
            
            Set aranges = editor.PadEntryAllowedPadsViaSpan(mypad, epcbOblongPad)
            Set pranges = editor.PadEntryViaSpansForPad(mypad)
            found = False
            For Each prange In pranges
                If Not aranges Is Nothing Then
                    For Each arange In aranges
                        If arange.Name = prange.Name Then
                            found = True
                            Exit For
                        End If
                    Next
                    PrintCheckBoxItem currentRow, 3, prange.Name, found
                End If
                
                currentRow = currentRow + 1
                found = False
            Next
            Set aranges = Nothing
        Next
        
        bReportIsBeingUpdated = False
        
        ' Unlock server
        ThisWorkbook.GetActiveApp.UnlockServer
    End If
Exit Sub

OnErrorServerAccess:
    ThisWorkbook.GetActiveApp.UnlockServer
    MsgBox "Error accessing ExpeditionPCB Server.", , "Automation Demonstration"
End Sub

' refreshes values displayed in Sheet1
Public Sub RefreshValues()
    If ThisWorkbook.GetActiveDoc Is Nothing Then Exit Sub ' If we are not connected, exit procedure
    EditorControlValue
End Sub

' Main routine
Sub Main()
    bReportIsBeingUpdated = True
    bSelectionsAreBeingUpdated = False
    Sheets("Route - Pad Entry").Select ' Make Sheet1 visible
    
    Call ThisWorkbook.Connect   ' Connect to ExpeditionPCB (we use the global ThisWorkbook.GetActiveApp Object variable)
    
    RefreshValues ' Refresh sheet values
    bReportIsBeingUpdated = False
End Sub

Private Sub Worksheet_Activate()
    Main
End Sub

Private Sub ChangeLayerRanges(ByRef editor As MGCPCB.EditorControl, ByRef mypad As MGCPCB.pad, ByRef affectedlayerrange As MGCPCB.LayerRange, ByVal setto As Boolean)
    On Error Resume Next
    Dim aranges As MGCPCB.LayerRanges
    Dim arange As MGCPCB.LayerRange
    Dim found As Boolean
    
    Dim shrinkingcoll As MGCPCB.LayerRanges
    Set aranges = editor.PadEntryAllowedPadsViaSpan(mypad, epcbRectPad)
    
    found = False
    
        If setto Then
            For Each arange In aranges
                If arange.Name = affectedlayerrange.Name Then
                    found = True
                    Exit For
                End If
            Next
            If found = False Then
                Set shrinkingcoll = editor.PadEntryViaSpansForPad(mypad)
                Dim templr
                For Each templr In shrinkingcoll
                    For Each arange In aranges
                        If arange.Name = templr.Name Then
                            found = True
                            Exit For
                        End If
                    Next
                    If found = False And templr.Name <> affectedlayerrange.Name Then
                        shrinkingcoll.Remove (templr)
                    End If
                    found = False
                Next
                editor.PadEntryAllowedPadsViaSpan(mypad, epcbRectPad) = shrinkingcoll
                If Err.Number <> 0 Then
                    MsgBox "Error Adding LayerRange to pad: " & Err.Description
                    Err.Clear
                End If
            End If
        Else
            For Each arange In aranges
                If arange.Name = affectedlayerrange.Name Then
                    found = True
                    Exit For
                End If
            Next
            If found = True Then
                If aranges.Count <= 1 Then
                    MsgBox "Notice: pad must have at least one layer range defined."
                Else
                    aranges.Remove (arange)
                    editor.PadEntryAllowedPadsViaSpan(mypad, epcbRectPad) = aranges
                    If Err.Number <> 0 Then
                        MsgBox "Error Removing LayerRange from pad: " & Err.Description
                        Err.Clear
                    End If
                End If
            End If
        End If
    
End Sub

Private Sub Worksheet_Change(ByVal Target As Excel.Range)
    ' the worksheet has changed - did the user edit one of the editor control coordinate columns?
    ' Target is a reference to the changed cell.
    If ThisWorkbook.GetActiveDoc Is Nothing Then Exit Sub ' If we are not connected, exit procedure
    
    ' exit if we are updating the worksheet ourselves
    If bReportIsBeingUpdated = True Then Exit Sub
    If bSelectionsAreBeingUpdated = True Then Exit Sub
    
    On Error Resume Next
    If Target.FormulaR1C1 = "" Then
        Exit Sub
    End If
    
    bSelectionsAreBeingUpdated = True
    Dim currentRow As Integer
    currentRow = 1
    
        ' get editor control
        'Dim outline
        Dim editor As MGCPCB.EditorControl
        Set editor = ThisWorkbook.GetActiveDoc.EditorControl
        
        ' Output header
        'PrintTitleRow
        currentRow = currentRow + 1
        
        'PrintRow currentRow, 0, "Pad Entry", ""
        currentRow = currentRow + 1
        
        If Target.Row = currentRow Then
            editor.GridlessPadEntry = ReadCheckBoxItem(currentRow, 1)
        End If
        currentRow = currentRow + 1
        
        If Target.Row = currentRow Then
            editor.FitView = ReadCheckBoxItem(currentRow, 1)
        End If
        currentRow = currentRow + 1
        
        'PrintRow currentRow, 1, "Exposed metal clearance on outer layers:", ""
        currentRow = currentRow + 1
        
        If Target.Row = currentRow Then
            editor.ExposedMetalClearances(epcbSideTop) = ReadRow(currentRow, 2)
        End If
        currentRow = currentRow + 1
        
        If Target.Row = currentRow Then
            editor.ExposedMetalClearances(epcbSideBottom) = ReadRow(currentRow, 2)
        End If
        currentRow = currentRow + 1
        
        Dim mypads As MGCPCB.Pads
        Dim mypad As MGCPCB.pad
        
        'PrintRow currentRow, 0, "Rectangular Pads", ""
        currentRow = currentRow + 1
        
        'PrintRow currentRow, 1, "Rules for all rectangular pads", ""
        currentRow = currentRow + 1
        
        If Target.Row = currentRow Then
            editor.PadEntryGlobalRules(epcbRectPad, epcbECPadAdjacentLong) = ReadCheckBoxItem(currentRow, 2)
        End If
        currentRow = currentRow + 1
            
        If Target.Row = currentRow Then
            editor.PadEntryGlobalRules(epcbRectPad, epcbECPadAdjacentCorner) = ReadCheckBoxItem(currentRow, 2)
        End If
        currentRow = currentRow + 1
        
        Dim pranges As MGCPCB.LayerRanges
        Dim prange As MGCPCB.LayerRange
        
        Set mypads = editor.Pads(epcbRectPad)
        For Each mypad In mypads
            'PrintRow currentRow, 1, "Rules for: " & mypad.Name, ""
            currentRow = currentRow + 1
            
            If Target.Row = currentRow Then
                editor.SelPadsTracePosRules(mypad, epcbRectPad, epcbECExtendedPadEntry) = ReadCheckBoxItem(currentRow, 2)
            End If
            currentRow = currentRow + 1
            
            If Target.Row = currentRow Then
                editor.SelPadsTracePosRules(mypad, epcbRectPad, epcbECAllowOddAngle) = ReadCheckBoxItem(currentRow, 3)
            End If
            currentRow = currentRow + 1
            
            If Target.Row = currentRow Then
                editor.SelPadsTracePosRules(mypad, epcbRectPad, epcbECPadTraceShortCtr) = ReadCheckBoxItem(currentRow, 2)
            End If
            currentRow = currentRow + 1
            
            If Target.Row = currentRow Then
                editor.SelPadsTracePosRules(mypad, epcbRectPad, epcbECPadTraceShortEdge) = ReadCheckBoxItem(currentRow, 2)
            End If
            currentRow = currentRow + 1
            
            If Target.Row = currentRow Then
                editor.SelPadsTracePosRules(mypad, epcbRectPad, epcbECPadTraceLongCtr) = ReadCheckBoxItem(currentRow, 2)
            End If
            currentRow = currentRow + 1
            
            If Target.Row = currentRow Then
                editor.SelPadsTracePosRules(mypad, epcbRectPad, epcbECPadTraceLongEdge) = ReadCheckBoxItem(currentRow, 2)
            End If
            currentRow = currentRow + 1
            
            If Target.Row = currentRow Then
                editor.SelPadsTracePosRules(mypad, epcbRectPad, epcbECPadTraceCorner) = ReadCheckBoxItem(currentRow, 2)
            End If
            currentRow = currentRow + 1
            
            If Target.Row = currentRow Then
                editor.SelPadsViaPosRules(mypad, epcbRectPad, epcbECAllowViasUnderPad) = ReadCheckBoxItem(currentRow, 2)
            End If
            currentRow = currentRow + 1
            
            If Target.Row = currentRow Then
                editor.SelPadsViaPosRules(mypad, epcbRectPad, epcbECAllowOffPadOrigin) = ReadCheckBoxItem(currentRow, 3)
            End If
            currentRow = currentRow + 1
            
            If Target.Row = currentRow Then
                editor.SelPadsViaPosRules(mypad, epcbRectPad, epcbECAlignViaOnLongAxis) = ReadCheckBoxItem(currentRow, 3)
            End If
            currentRow = currentRow + 1
            
            If Target.Row = currentRow Then
                editor.SelPadsViaPosRules(mypad, epcbRectPad, epcbECLocateViaAtPadEdge) = ReadCheckBoxItem(currentRow, 3)
            End If
            currentRow = currentRow + 1
            
            If Target.Row = currentRow Then
                editor.SelPadsViaPosRules(mypad, epcbRectPad, epcbECKeepViaCenterInsidePad) = ReadCheckBoxItem(currentRow, 3)
            End If
            currentRow = currentRow + 1
            
            If Target.Row = currentRow Then
                editor.SelPadsViaPosRules(mypad, epcbRectPad, epcbECKeepViaPadInsidePad) = ReadCheckBoxItem(currentRow, 3)
            End If
            currentRow = currentRow + 1
            
            
            Set pranges = editor.PadEntryViaSpansForPad(mypad)
            For Each prange In pranges
                If Target.Row = currentRow Then
                    ChangeLayerRanges editor, mypad, prange, ReadCheckBoxItem(currentRow, 3)
                End If
                currentRow = currentRow + 1
            Next
        Next
        
        'PrintRow currentRow, 0, "Oblong/Octagon Pads", ""
        currentRow = currentRow + 1
        
        'PrintRow currentRow, 1, "Rules for all Oblong/Octagon pads", ""
        currentRow = currentRow + 1
        
        If Target.Row = currentRow Then
            editor.PadEntryGlobalRules(epcbOblongPad, epcbECPadAdjacentLong) = ReadCheckBoxItem(currentRow, 2)
        End If
        currentRow = currentRow + 1
            
        If Target.Row = currentRow Then
            editor.PadEntryGlobalRules(epcbOblongPad, epcbECPadAdjacentCorner) = ReadCheckBoxItem(currentRow, 2)
        End If
        currentRow = currentRow + 1
        
        Set mypads = editor.Pads(epcbOblongPad)
        For Each mypad In mypads
            'PrintRow currentRow, 1, "Rules for: " & mypad.Name, ""
            currentRow = currentRow + 1
            
            If Target.Row = currentRow Then
                editor.SelPadsTracePosRules(mypad, epcbRectPad, epcbECExtendedPadEntry) = ReadCheckBoxItem(currentRow, 2)
            End If
            currentRow = currentRow + 1
            
            If Target.Row = currentRow Then
                editor.SelPadsTracePosRules(mypad, epcbRectPad, epcbECAllowOddAngle) = ReadCheckBoxItem(currentRow, 3)
            End If
            currentRow = currentRow + 1
            
            If Target.Row = currentRow Then
                editor.SelPadsTracePosRules(mypad, epcbRectPad, epcbECPadTraceShortCtr) = ReadCheckBoxItem(currentRow, 2)
            End If
            currentRow = currentRow + 1
            
            If Target.Row = currentRow Then
                editor.SelPadsTracePosRules(mypad, epcbRectPad, epcbECPadTraceLongCtr) = ReadCheckBoxItem(currentRow, 2)
            End If
            currentRow = currentRow + 1
            
            If Target.Row = currentRow Then
                editor.SelPadsTracePosRules(mypad, epcbRectPad, epcbECPadTraceCorner) = ReadCheckBoxItem(currentRow, 2)
            End If
            currentRow = currentRow + 1
            
            If Target.Row = currentRow Then
                editor.SelPadsViaPosRules(mypad, epcbRectPad, epcbECAllowViasUnderPad) = ReadCheckBoxItem(currentRow, 2)
            End If
            currentRow = currentRow + 1
            
            If Target.Row = currentRow Then
                editor.SelPadsViaPosRules(mypad, epcbRectPad, epcbECAllowOffPadOrigin) = ReadCheckBoxItem(currentRow, 3)
            End If
            currentRow = currentRow + 1
            
            If Target.Row = currentRow Then
                editor.SelPadsViaPosRules(mypad, epcbRectPad, epcbECAlignViaOnLongAxis) = ReadCheckBoxItem(currentRow, 3)
            End If
            currentRow = currentRow + 1
            
            If Target.Row = currentRow Then
                editor.SelPadsViaPosRules(mypad, epcbRectPad, epcbECLocateViaAtPadEdge) = ReadCheckBoxItem(currentRow, 3)
            End If
            currentRow = currentRow + 1
            
            If Target.Row = currentRow Then
                editor.SelPadsViaPosRules(mypad, epcbRectPad, epcbECKeepViaCenterInsidePad) = ReadCheckBoxItem(currentRow, 3)
            End If
            currentRow = currentRow + 1
            
            If Target.Row = currentRow Then
                editor.SelPadsViaPosRules(mypad, epcbRectPad, epcbECKeepViaPadInsidePad) = ReadCheckBoxItem(currentRow, 3)
            End If
            currentRow = currentRow + 1
            
            
            Set pranges = editor.PadEntryViaSpansForPad(mypad)
            For Each prange In pranges
                If Target.Row = currentRow Then
                    ChangeLayerRanges editor, mypad, prange, ReadCheckBoxItem(currentRow, 3)
                End If
                currentRow = currentRow + 1
            Next
        Next
        
        'PrintRow currentRow, 0, "Round/Octagon Pads", ""
        currentRow = currentRow + 1
        
        
        Set mypads = editor.Pads(epcbRoundPad)
        For Each mypad In mypads
            'PrintRow currentRow, 1, "Rules for: " & mypad.Name, ""
            currentRow = currentRow + 1
            
            If Target.Row = currentRow Then
                editor.SelPadsTracePosRules(mypad, epcbRectPad, epcbECExtendedPadEntry) = ReadCheckBoxItem(currentRow, 2)
            End If
            currentRow = currentRow + 1
            
            If Target.Row = currentRow Then
                editor.SelPadsTracePosRules(mypad, epcbRectPad, epcbECAllowOddAngle) = ReadCheckBoxItem(currentRow, 3)
            End If
            currentRow = currentRow + 1
            
            If Target.Row = currentRow Then
                editor.SelPadsViaPosRules(mypad, epcbRectPad, epcbECAllowViasUnderPad) = ReadCheckBoxItem(currentRow, 2)
            End If
            currentRow = currentRow + 1
            
            If Target.Row = currentRow Then
                editor.SelPadsViaPosRules(mypad, epcbRectPad, epcbECAllowOffPadOrigin) = ReadCheckBoxItem(currentRow, 3)
            End If
            currentRow = currentRow + 1
            
            If Target.Row = currentRow Then
                editor.SelPadsViaPosRules(mypad, epcbRectPad, epcbECLocateViaAtPadEdge) = ReadCheckBoxItem(currentRow, 3)
            End If
            currentRow = currentRow + 1
            
            If Target.Row = currentRow Then
                editor.SelPadsViaPosRules(mypad, epcbRectPad, epcbECKeepViaCenterInsidePad) = ReadCheckBoxItem(currentRow, 3)
            End If
            currentRow = currentRow + 1
            
            If Target.Row = currentRow Then
                editor.SelPadsViaPosRules(mypad, epcbRectPad, epcbECKeepViaPadInsidePad) = ReadCheckBoxItem(currentRow, 3)
            End If
            currentRow = currentRow + 1
            
            Set pranges = editor.PadEntryViaSpansForPad(mypad)
            For Each prange In pranges
                If Target.Row = currentRow Then
                    ChangeLayerRanges editor, mypad, prange, ReadCheckBoxItem(currentRow, 3)
                End If
                currentRow = currentRow + 1
            Next
        Next
        
        'PrintRow currentRow, 0, "Square Pads", ""
        currentRow = currentRow + 1
        
        Set mypads = editor.Pads(epcbSquarePad)
        For Each mypad In mypads
            'PrintRow currentRow, 1, "Rules for: " & mypad.Name, ""
            currentRow = currentRow + 1
            
            If Target.Row = currentRow Then
                editor.SelPadsTracePosRules(mypad, epcbRectPad, epcbECExtendedPadEntry) = ReadCheckBoxItem(currentRow, 2)
            End If
            currentRow = currentRow + 1
            
            If Target.Row = currentRow Then
                editor.SelPadsTracePosRules(mypad, epcbRectPad, epcbECAllowOddAngle) = ReadCheckBoxItem(currentRow, 3)
            End If
            currentRow = currentRow + 1
            
            If Target.Row = currentRow Then
                editor.SelPadsTracePosRules(mypad, epcbRectPad, epcbECPadTraceShortCtr) = ReadCheckBoxItem(currentRow, 2)
            End If
            currentRow = currentRow + 1
            
            If Target.Row = currentRow Then
                editor.SelPadsTracePosRules(mypad, epcbRectPad, epcbECPadTraceShortEdge) = ReadCheckBoxItem(currentRow, 2)
            End If
            currentRow = currentRow + 1
            
            If Target.Row = currentRow Then
                editor.SelPadsTracePosRules(mypad, epcbRectPad, epcbECPadTraceCorner) = ReadCheckBoxItem(currentRow, 2)
            End If
            currentRow = currentRow + 1
            
            If Target.Row = currentRow Then
                editor.SelPadsViaPosRules(mypad, epcbRectPad, epcbECAllowViasUnderPad) = ReadCheckBoxItem(currentRow, 2)
            End If
            currentRow = currentRow + 1
            
            If Target.Row = currentRow Then
                editor.SelPadsViaPosRules(mypad, epcbRectPad, epcbECAllowOffPadOrigin) = ReadCheckBoxItem(currentRow, 3)
            End If
            currentRow = currentRow + 1
            
            If Target.Row = currentRow Then
                editor.SelPadsViaPosRules(mypad, epcbRectPad, epcbECLocateViaAtPadEdge) = ReadCheckBoxItem(currentRow, 3)
            End If
            currentRow = currentRow + 1
            
            If Target.Row = currentRow Then
                editor.SelPadsViaPosRules(mypad, epcbRectPad, epcbECKeepViaCenterInsidePad) = ReadCheckBoxItem(currentRow, 3)
            End If
            currentRow = currentRow + 1
            
            If Target.Row = currentRow Then
                editor.SelPadsViaPosRules(mypad, epcbRectPad, epcbECKeepViaPadInsidePad) = ReadCheckBoxItem(currentRow, 3)
            End If
            currentRow = currentRow + 1
            
            Set pranges = editor.PadEntryViaSpansForPad(mypad)
            For Each prange In pranges
                If Target.Row = currentRow Then
                    ChangeLayerRanges editor, mypad, prange, ReadCheckBoxItem(currentRow, 3)
                End If
                currentRow = currentRow + 1
            Next
        Next
        
        'PrintRow currentRow, 0, "Custom Pads", ""
        currentRow = currentRow + 1
        
        Set mypads = editor.Pads(epcbCustomPad)
        For Each mypad In mypads
            'PrintRow currentRow, 1, "Rules for: " & mypad.Name, ""
            currentRow = currentRow + 1
            
            If Target.Row = currentRow Then
                editor.SelPadsTracePosRules(mypad, epcbRectPad, epcbECExtendedPadEntry) = ReadCheckBoxItem(currentRow, 2)
            End If
            currentRow = currentRow + 1
            
            If Target.Row = currentRow Then
                editor.SelPadsTracePosRules(mypad, epcbRectPad, epcbECAllowOddAngle) = ReadCheckBoxItem(currentRow, 3)
            End If
            currentRow = currentRow + 1
            
            If Target.Row = currentRow Then
                editor.SelPadsViaPosRules(mypad, epcbRectPad, epcbECAllowViasUnderPad) = ReadCheckBoxItem(currentRow, 2)
            End If
            currentRow = currentRow + 1
            
            If Target.Row = currentRow Then
                editor.SelPadsViaPosRules(mypad, epcbRectPad, epcbECAllowOffPadOrigin) = ReadCheckBoxItem(currentRow, 3)
            End If
            currentRow = currentRow + 1
            
            Set pranges = editor.PadEntryViaSpansForPad(mypad)
            For Each prange In pranges
                If Target.Row = currentRow Then
                    ChangeLayerRanges editor, mypad, prange, ReadCheckBoxItem(currentRow, 3)
                End If
                currentRow = currentRow + 1
            Next
        Next
        
    bSelectionsAreBeingUpdated = False
    RefreshValues
End Sub

Attribute VB_Name = "Sheet12"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
' This is a part of the MentorGraphics-ExpeditionPCB OLE Automation server samples.
' Copyright (C) 2003 Mentor Graphics Software, Inc.
' All rights reserved.
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Option Explicit

Dim bReportIsBeingUpdated As Boolean
Dim bSelectionsAreBeingUpdated As Boolean

' refreshes the EditorControl values in the Spreadsheet
Public Sub EditorControlValue()
    If ThisWorkbook.GetActiveDoc Is Nothing Then Exit Sub ' If we are not connected, exit procedure
   
    ' empty existing sheet contents
    Range("A1:S1000").Clear
    Range("A1:D1000").Borders.LineStyle = XlLineStyle.xlContinuous
    Range("A1:D1").Borders.Color = RGB(75, 75, 75)
    Range("A2:D1000").Borders.Color = RGB(100, 100, 100)

    Range("A1:D1000").Interior.Color = RGB(200, 200, 200)
    Range("D1:D1000").Interior.Color = RGB(210, 210, 210)
    
    Dim currentRow As Integer
    currentRow = 0
    
    currentRow = currentRow + 1
    On Error Resume Next
    
    ' Lock server (to speed up OLE access)
    If ThisWorkbook.GetActiveApp.LockServer = True Then
        bReportIsBeingUpdated = True
                    
        ' get editor control
        'Dim outline
        Dim editor As MGCPCB.EditorControl
        Set editor = ThisWorkbook.GetActiveDoc.EditorControl
        
        ' Output header
        PrintTitleRow
        currentRow = currentRow + 1
        
        PrintRow currentRow, 0, "Expand Traces", ""
        currentRow = currentRow + 1
        
        PrintRow currentRow, 1, "Trace Expansion", ""
        currentRow = currentRow + 1
        
        PrintRow currentRow, 2, "Min Distance at Pad Entry Width", editor.RoutePadEntry(epcbECMinDstAtPadEntryWidth)
        currentRow = currentRow + 1
        
        PrintRow currentRow, 2, "Min Distance at Same Width", editor.RoutePadEntry(epcbECMinDstAtSameWidth)
        currentRow = currentRow + 1
        
        PrintCheckBoxItem currentRow, 2, "Expand traces", editor.RouteExpandTraces
        currentRow = currentRow + 1
        
        
        bReportIsBeingUpdated = False
        
        ' Unlock server
        ThisWorkbook.GetActiveApp.UnlockServer
    End If
Exit Sub

OnErrorServerAccess:
    ThisWorkbook.GetActiveApp.UnlockServer
    MsgBox "Error accessing ExpeditionPCB Server.", , "Automation Demonstration"
End Sub

' refreshes values displayed in Sheet1
Public Sub RefreshValues()
    If ThisWorkbook.GetActiveDoc Is Nothing Then Exit Sub ' If we are not connected, exit procedure
    EditorControlValue
End Sub

' Main routine
Sub Main()
    bReportIsBeingUpdated = True
    bSelectionsAreBeingUpdated = False
    Sheets("Route - Expand Traces").Select ' Make Sheet1 visible
    
    Call ThisWorkbook.Connect   ' Connect to ExpeditionPCB (we use the global ThisWorkbook.GetActiveApp Object variable)
    
    RefreshValues ' Refresh sheet values
    bReportIsBeingUpdated = False
End Sub

Private Sub Worksheet_Activate()
    Main
End Sub

Private Sub Worksheet_Change(ByVal Target As Excel.Range)
    ' the worksheet has changed - did the user edit one of the editor control coordinate columns?
    ' Target is a reference to the changed cell.
    If ThisWorkbook.GetActiveDoc Is Nothing Then Exit Sub ' If we are not connected, exit procedure
    
    ' exit if we are updating the worksheet ourselves
    If bReportIsBeingUpdated = True Then Exit Sub
    If bSelectionsAreBeingUpdated = True Then Exit Sub
    
    On Error Resume Next
    If Target.FormulaR1C1 = "" Then
        Exit Sub
    End If
    
    bSelectionsAreBeingUpdated = True
    Dim currentRow As Integer
    currentRow = 1
    
        ' get editor control
        'Dim outline
        Dim editor As MGCPCB.EditorControl
        Set editor = ThisWorkbook.GetActiveDoc.EditorControl
        
        ' Output header
        'PrintTitleRow
        currentRow = currentRow + 1
        
        'PrintRow currentRow, 0, "Expand Traces", ""
        currentRow = currentRow + 1
        
        'PrintRow currentRow, 1, "Trace Expansion", ""
        currentRow = currentRow + 1
        
        If Target.Row = currentRow Then
            editor.RoutePadEntry(epcbECMinDstAtPadEntryWidth) = ReadRow(currentRow, 2)
        End If
        currentRow = currentRow + 1
        
        If Target.Row = currentRow Then
            editor.RoutePadEntry(epcbECMinDstAtSameWidth) = ReadRow(currentRow, 2)
        End If
        currentRow = currentRow + 1
        
        If Target.Row = currentRow Then
            editor.RouteExpandTraces = ReadCheckBoxItem(currentRow, 2)
        End If
        currentRow = currentRow + 1
        
    bSelectionsAreBeingUpdated = False
    RefreshValues
End Sub

Attribute VB_Name = "Sheet13"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
' This is a part of the MentorGraphics-ExpeditionPCB OLE Automation server samples.
' Copyright (C) 2003 Mentor Graphics Software, Inc.
' All rights reserved.
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Option Explicit

Dim bReportIsBeingUpdated As Boolean
Dim bSelectionsAreBeingUpdated As Boolean

' refreshes the EditorControl values in the Spreadsheet
Public Sub EditorControlValue()
    If ThisWorkbook.GetActiveDoc Is Nothing Then Exit Sub ' If we are not connected, exit procedure
   
    ' empty existing sheet contents
    Range("A1:S1000").Clear
    Range("A1:D1000").Borders.LineStyle = XlLineStyle.xlContinuous
    Range("A1:D1").Borders.Color = RGB(75, 75, 75)
    Range("A2:D1000").Borders.Color = RGB(100, 100, 100)

    Range("A1:D1000").Interior.Color = RGB(200, 200, 200)
    Range("D1:D1000").Interior.Color = RGB(210, 210, 210)
    
    Dim currentRow As Integer
    currentRow = 0
    
    currentRow = currentRow + 1
    On Error Resume Next
    
    ' Lock server (to speed up OLE access)
    If ThisWorkbook.GetActiveApp.LockServer = True Then
        bReportIsBeingUpdated = True
                    
        ' get editor control
        'Dim outline
        Dim editor As MGCPCB.EditorControl
        Set editor = ThisWorkbook.GetActiveDoc.EditorControl
        
        ' Output header
        PrintTitleRow
        currentRow = currentRow + 1
        
        PrintRow currentRow, 0, "Part Grids", ""
        currentRow = currentRow + 1
        
        PrintRow currentRow, 1, "Primary", editor.Grid(epcbGridComponentPrimary)
        currentRow = currentRow + 1
        
        PrintRow currentRow, 1, "Secondary", editor.Grid(epcbGridComponentSecondary)
        currentRow = currentRow + 1
        
        PrintRow currentRow, 1, "X Offset", editor.Grid(epcbGridPlacementOffsetX)
        currentRow = currentRow + 1
        
        PrintRow currentRow, 1, "Y Offset", editor.Grid(epcbGridPlacementOffsetY)
        currentRow = currentRow + 1
        
        PrintRow currentRow, 1, "Criteria for parts using Primary Grid", ""
        currentRow = currentRow + 1
        
        PrintRow currentRow, 2, "Minimum # of pins", editor.GridMinNumberOfPins
        currentRow = currentRow + 1
        
        PrintRow currentRow, 2, "Mount style:", ""
        currentRow = currentRow + 1
        
        PrintRadioItem currentRow, 3, "Through hole", editor.GridMountStyle, 1
        currentRow = currentRow + 1
        
        PrintRadioItem currentRow, 3, "Surface", editor.GridMountStyle, 0
        currentRow = currentRow + 1
        
        PrintRadioItem currentRow, 3, "Both", editor.GridMountStyle, 3
        currentRow = currentRow + 1
        
        PrintRow currentRow, 1, "Part grid snap:", ""
        currentRow = currentRow + 1
        
        PrintRadioItem currentRow, 2, "Cell origin", editor.PartsGridSnap, 0
        currentRow = currentRow + 1
        
        PrintRadioItem currentRow, 2, "Centroid of pins", editor.PartsGridSnap, 1
        currentRow = currentRow + 1
        
        PrintRow currentRow, 0, "Route Grids", ""
        currentRow = currentRow + 1
        
        PrintRow currentRow, 1, "Route", editor.Grid(epcbGridRoute)
        currentRow = currentRow + 1
        
        PrintRow currentRow, 1, "Via", editor.Grid(epcbGridVia)
        currentRow = currentRow + 1
        
        PrintRow currentRow, 1, "X Offset", editor.Grid(epcbGridRouteOffsetX)
        currentRow = currentRow + 1
        
        PrintRow currentRow, 1, "Y Offset", editor.Grid(epcbGridRouteOffsetY)
        currentRow = currentRow + 1
        
        PrintRow currentRow, 0, "Other Grids", ""
        currentRow = currentRow + 1
        
        PrintRow currentRow, 1, "Drawing", editor.Grid(epcbGridDrawing)
        currentRow = currentRow + 1
        
        PrintRow currentRow, 1, "Jumper", editor.Grid(epcbGridJumper)
        currentRow = currentRow + 1
        
        PrintRow currentRow, 1, "Test point", editor.Grid(epcbGridTestPoint)
        currentRow = currentRow + 1
        
        
        bReportIsBeingUpdated = False
        
        ' Unlock server
        ThisWorkbook.GetActiveApp.UnlockServer
    End If
Exit Sub

OnErrorServerAccess:
    ThisWorkbook.GetActiveApp.UnlockServer
    MsgBox "Error accessing ExpeditionPCB Server.", , "Automation Demonstration"
End Sub

' refreshes values displayed in Sheet1
Public Sub RefreshValues()
    If ThisWorkbook.GetActiveDoc Is Nothing Then Exit Sub ' If we are not connected, exit procedure
    EditorControlValue
End Sub

' Main routine
Sub Main()
    bReportIsBeingUpdated = True
    bSelectionsAreBeingUpdated = False
    Sheets("Grids").Select ' Make Sheet1 visible
    
    Call ThisWorkbook.Connect   ' Connect to ExpeditionPCB (we use the global ThisWorkbook.GetActiveApp Object variable)
    
    RefreshValues ' Refresh sheet values
    bReportIsBeingUpdated = False
End Sub

Private Sub Worksheet_Activate()
    Main
End Sub

Private Sub Worksheet_Change(ByVal Target As Excel.Range)
    ' the worksheet has changed - did the user edit one of the editor control coordinate columns?
    ' Target is a reference to the changed cell.
    If ThisWorkbook.GetActiveDoc Is Nothing Then Exit Sub ' If we are not connected, exit procedure
    
    ' exit if we are updating the worksheet ourselves
    If bReportIsBeingUpdated = True Then Exit Sub
    If bSelectionsAreBeingUpdated = True Then Exit Sub
    
    On Error Resume Next
    If Target.FormulaR1C1 = "" Then
        Exit Sub
    End If
    
    bSelectionsAreBeingUpdated = True
    Dim currentRow As Integer
    currentRow = 1
    
        ' get editor control
        'Dim outline
        Dim editor As MGCPCB.EditorControl
        Set editor = ThisWorkbook.GetActiveDoc.EditorControl
        
        ' Output header
        'PrintTitleRow
        currentRow = currentRow + 1
        
        'PrintRow currentRow, 0, "Part Grids", ""
        currentRow = currentRow + 1
        
        If Target.Row = currentRow Then
            editor.Grid(epcbGridComponentPrimary) = ReadRow(currentRow, 1)
        End If
        currentRow = currentRow + 1
        
        If Target.Row = currentRow Then
            editor.Grid(epcbGridComponentSecondary) = ReadRow(currentRow, 1)
        End If
        currentRow = currentRow + 1
        
        If Target.Row = currentRow Then
            editor.Grid(epcbGridPlacementOffsetX) = ReadRow(currentRow, 1)
        End If
        currentRow = currentRow + 1
        
        If Target.Row = currentRow Then
            editor.Grid(epcbGridPlacementOffsetY) = ReadRow(currentRow, 1)
        End If
        currentRow = currentRow + 1
        
        'PrintRow currentRow, 1, "Criteria for parts using Primary Grid", ""
        currentRow = currentRow + 1
        
        If Target.Row = currentRow Then
            editor.GridMinNumberOfPins = ReadRow(currentRow, 2)
        End If
        currentRow = currentRow + 1
        
        'PrintRow currentRow, 2, "Mount style:", ""
        currentRow = currentRow + 1
        
        If Target.Row = currentRow And ReadRadioItem(currentRow, 3) Then
            editor.GridMountStyle = 1
        End If
        currentRow = currentRow + 1
        
        If Target.Row = currentRow And ReadRadioItem(currentRow, 3) Then
            editor.GridMountStyle = 0
        End If
        currentRow = currentRow + 1
        
        If Target.Row = currentRow And ReadRadioItem(currentRow, 3) Then
            editor.GridMountStyle = 3
        End If
        currentRow = currentRow + 1
        
        'PrintRow currentRow, 1, "Part grid snap:", ""
        currentRow = currentRow + 1
        
        If Target.Row = currentRow And ReadRadioItem(currentRow, 2) Then
            editor.PartsGridSnap = 0
        End If
        currentRow = currentRow + 1
        
        If Target.Row = currentRow And ReadRadioItem(currentRow, 2) Then
            editor.PartsGridSnap = 1
        End If
        currentRow = currentRow + 1
        
        'PrintRow currentRow, 0, "Route Grids", ""
        currentRow = currentRow + 1
        
        If Target.Row = currentRow Then
            editor.Grid(epcbGridRoute) = ReadRow(currentRow, 1)
        End If
        currentRow = currentRow + 1
        
        If Target.Row = currentRow Then
            editor.Grid(epcbGridVia) = ReadRow(currentRow, 1)
        End If
        currentRow = currentRow + 1
        
        If Target.Row = currentRow Then
            editor.Grid(epcbGridRouteOffsetX) = ReadRow(currentRow, 1)
        End If
        currentRow = currentRow + 1
        
        If Target.Row = currentRow Then
            editor.Grid(epcbGridRouteOffsetY) = ReadRow(currentRow, 1)
        End If
        currentRow = currentRow + 1
        
        'PrintRow currentRow, 0, "Other Grids", ""
        currentRow = currentRow + 1
        
        If Target.Row = currentRow Then
            editor.Grid(epcbGridDrawing) = ReadRow(currentRow, 1)
        End If
        currentRow = currentRow + 1
        
        If Target.Row = currentRow Then
            editor.Grid(epcbGridJumper) = ReadRow(currentRow, 1)
        End If
        currentRow = currentRow + 1
        
        If Target.Row = currentRow Then
            editor.Grid(epcbGridTestPoint) = ReadRow(currentRow, 1)
        End If
        currentRow = currentRow + 1
        
    bSelectionsAreBeingUpdated = False
    RefreshValues
End Sub

Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
' global declarations
Dim WithEvents ExpeditionPCBApp As MGCPCB.ExpeditionPCBApplication
Attribute ExpeditionPCBApp.VB_VarHelpID = -1
Dim WithEvents ExpeditionPCBDoc As MGCPCB.Document
Attribute ExpeditionPCBDoc.VB_VarHelpID = -1

Public Function GetActiveDoc() As MGCPCB.Document
    Set GetActiveDoc = ExpeditionPCBDoc
End Function

Public Function GetActiveApp() As MGCPCB.Application
    Set GetActiveApp = ExpeditionPCBApp
End Function

Private Sub ExpeditionPCBDoc_OnNotify(ByVal eType As MGCPCB.EPcbOnNotifyType)
    If eType = epcbOnNotifyEditorControlChanged Then
        Excel.ActiveSheet.Main
    End If
End Sub

' connects to MGCPCB
Public Sub Connect()
    Dim retVal As Integer

    On Error GoTo OnErrorGetObject
    Set ExpeditionPCBApp = GetObject(, "MGCPCB.Application")
    Set ExpeditionPCBDoc = ExpeditionPCBApp.ActiveDocument
    
    ' make sure the doc is licensed
    retVal = licenseDoc(ExpeditionPCBDoc)
    
    If (retVal <> 1) Then Set ExpeditionPCBDoc = Nothing
    
Exit Sub

OnErrorGetObject:
    MsgBox "MGCPCB needs to be running!", , "Automation Demonstration"
End Sub

' disconnects from ExpeditionPCB.
Public Sub Disconnect()
    Set ExpeditionPCBDoc = Nothing
    Set ExpeditionPCBApp = Nothing ' Disconnect from ExpeditionPCB server
End Sub

' called when a document is opened in ExpeditionPCB
Private Sub ExpeditionPCBApp_OpenDocument()
    ' new document opened
    Set ExpeditionPCBDoc = ExpeditionPCBApp.ActiveDocument
    bReportIsBeingUpdated = True
    Excel.ActiveSheet.RefreshValues
    bReportIsBeingUpdated = False
End Sub

' called when user quits ExpeditionPCB
Private Sub ExpeditionPCBApp_Quit()
    Disconnect
End Sub


' called just before the document closes - gives us a chance to cleanup
Private Sub ExpeditionPCBDoc_PreClose()
    Set ExpeditionPCBDoc = Nothing                  ' close document
    bReportIsBeingUpdated = True
    Excel.ActiveSheet.Range("A1:S1000").Clear
    Excel.ActiveSheet.Range("A1:D1000").Borders.LineStyle = XlLineStyle.xlContinuous
    Excel.ActiveSheet.Range("A1:D1").Borders.Color = RGB(75, 75, 75)
    Excel.ActiveSheet.Range("A2:D1000").Borders.Color = RGB(100, 100, 100)

    Excel.ActiveSheet.Range("A1:D1000").Interior.Color = RGB(200, 200, 200)
    Excel.ActiveSheet.Range("D1:D1000").Interior.Color = RGB(210, 210, 210)
    bReportIsBeingUpdated = False
End Sub


' InQuest injected base64 decoded content
' :)J'^
' :)J'^
' x:.nW
' zj/yt
' 	^>)
' ^v+b

INQUEST-PP=macro
