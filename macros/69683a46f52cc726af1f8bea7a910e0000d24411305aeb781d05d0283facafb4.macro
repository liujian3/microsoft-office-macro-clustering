Attribute VB_Name = "AccountHistory"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "AccountHistory_Amended"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "AccountHolding"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "AccountInfo"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "CGTPlanner"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "CalculatorRefresh"
Sub Refresh()

Application.ScreenUpdating = False

'Unprotect Workbook
ActiveWorkbook.Unprotect Password:="ZurichCG2016"

'Unhide all worksheets
Sheets("FundConversions").Visible = True
Sheets("FundMergers").Visible = True
Sheets("AccountHistory_Amended").Visible = True
Sheets("AccountInfo").Visible = True
Sheets("AccountHistory").Visible = True
Sheets("FundHistory").Visible = True
Sheets("TaxYears").Visible = True
Sheets("AccountHolding").Visible = True

'Clear out the amended account transaction history from previous use
Sheets("AccountHistory_Amended").Select
Range("A2:U30000").Select
Selection.ClearContents

'Clear out account information from previous use
Sheets("AccountInfo").Select
Range("A2:G2").Select
Selection.ClearContents

'Clear out account transaction history from previous use
Sheets("AccountHistory").Select
Range("A2:P30000").Select
Selection.ClearContents

'Clear out fund history from previous use
Sheets("FundHistory").Select
Range("A2:F1000").Select
Selection.ClearContents

'Clear out tax year references from previous use
Sheets("TaxYears").Select
Range("A2:B50").Select

'Clear out account holding data from previous use
Sheets("AccountHolding").Select
Range("A2:K1000").Select
Selection.ClearContents

'Clear out the the gains & losses calculations data from previous use
Sheets("Gain & Loss Calculations").Select
Range("A2:R50000").Select
Application.CutCopyMode = False
Selection.ClearContents
With Selection.Interior
    .Pattern = xlNone
    .TintAndShade = 0
    .PatternTintAndShade = 0
End With
Selection.Borders(xlEdgeBottom).LineStyle = xlNone
Selection.Borders(xlInsideHorizontal).LineStyle = xlNone

'Remove previous summary data and formatting
Sheets("Gain & Loss Summary").Select
Cells.Select
Range("B11:Z1000").Select
Selection.ClearContents
Selection.Font.Bold = False
Selection.Font.Size = 11
With Selection.Font
    .ThemeColor = xlThemeColorLight1
    .TintAndShade = 0
End With
With Selection.Interior
    .Pattern = xlNone
    .TintAndShade = 0
    .PatternTintAndShade = 0
End With
Selection.Borders.LineStyle = xlNone

Range("D10:Z10").Select
Selection.ClearContents
Selection.Font.Bold = False
Selection.Font.Size = 11
With Selection.Font
    .ThemeColor = xlThemeColorLight1
    .TintAndShade = 0
End With
With Selection.Interior
    .Pattern = xlNone
    .TintAndShade = 0
    .PatternTintAndShade = 0
End With
Selection.Borders.LineStyle = xlNone

Range("ZurichPortfolio").Value = ""
Range("ClientName").Value = ""
Range("AdviserName").Value = ""
Range("FirmName").Value = ""
Range("ReportDate").Value = ""

'Remove previous summary data and formatting from Planner worksheet
Sheets("Capital Gains Tax Planner").Select
Cells.Select
Range("B11:N1000").Select
Selection.ClearContents
Selection.Font.Bold = False
Selection.Font.Size = 11
With Selection.Font
    .ThemeColor = xlThemeColorLight1
    .TintAndShade = 0
End With
With Selection.Interior
    .Pattern = xlNone
    .TintAndShade = 0
    .PatternTintAndShade = 0
End With
Selection.Borders.LineStyle = xlNone

Sheets("Capital Gains Tax Planner").Select
Cells.Select
Range("L10:M10").Select
Selection.ClearContents
Selection.Font.Bold = False
Selection.Font.Size = 11
With Selection.Font
    .ThemeColor = xlThemeColorLight1
    .TintAndShade = 0
End With
With Selection.Interior
    .Pattern = xlNone
    .TintAndShade = 0
    .PatternTintAndShade = 0
End With
Selection.Borders.LineStyle = xlNone

Range("ZurichPortfolio2").Value = ""
Range("ClientName2").Value = ""
Range("AdviserName2").Value = ""
Range("FirmName2").Value = ""
Range("ReportDate2").Value = ""

'Hide input worksheets to only show output
Sheets("FundConversions").Visible = False
Sheets("FundMergers").Visible = False
Sheets("AccountHistory_Amended").Visible = False
Sheets("AccountInfo").Visible = False
Sheets("AccountHistory").Visible = False
Sheets("FundHistory").Visible = False
Sheets("TaxYears").Visible = False
Sheets("AccountHolding").Visible = False

'Protect Workbook
ActiveWorkbook.Protect Password:="ZurichCG2016"

Sheets("Terms of Use").Select

Application.ScreenUpdating = True

End Sub
Attribute VB_Name = "FundConversions"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "FundConversions1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "FundHistory"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "GainLossCalcs"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "GainLossCalculations"
Sub GainLossCalc()

Dim i As Integer
Dim j As Integer
Dim n As Integer
Dim iFundReference As Integer
Dim iIDflag As Integer
Dim iFund As Integer
Dim iNumFunds As Integer
Dim iNumRows As Integer
Dim iFormatLastRow As Integer

Dim dteTransactionDate As Date
Dim strTaxYear As String
Dim strTransactionType As String
Dim strFundName As String
Dim strISINCode As String
Dim strFundMergerRef As String
Dim strFundConversionRef As String
Dim strConversionFactor As String
Dim dblTransactionPrice As Double
Dim dblTransactedUnits As Double
Dim dblTransactionAmount As Double
Dim dblMatchedPurchaseCost As Double
Dim dblRatioRemain As Double
Dim lngFundConversion As Long
Dim lngFundMerger As Long

Dim dblPooledUnitBalance(200) As Double  'Running total of the pooled unit balance
Dim dblPooledTotalCost(200) As Double  'Running total of the cost of the unit balance
Dim dblAverageCost(200) As Double  'Running average cost per unit held in the unit balance

Application.ScreenUpdating = False

'Clear out the the gains & losses calculations data from previous use
Sheets("Gain & Loss Calculations").Select
Range("A2:R50000").Select
Application.CutCopyMode = False
Selection.ClearContents
With Selection.Interior
    .Pattern = xlNone
    .TintAndShade = 0
    .PatternTintAndShade = 0
End With
Selection.Borders(xlEdgeBottom).LineStyle = xlNone
Selection.Borders(xlInsideHorizontal).LineStyle = xlNone

Sheets("FundHistory").Select
iNumFunds = Cells(300, 3).End(xlUp).Row - 1 'returns the row number of the last entry in column C

Sheets("AccountHistory_Amended").Select
iNumRows = Cells(10000, 1).End(xlUp).Row + 1 'returns the row number of the last entry in column C

j = 2
i = 2

'Do While Sheets("AccountHistory_Amended").Cells(i, 1) <> "" 'scroll down the entries in the 'AccountHistory_Amended' worksheet
Do While i <= iNumRows

SellProc:
    
    dteTransactionDate = Sheets("AccountHistory_Amended").Cells(i, 1).Value
    strTaxYear = Sheets("AccountHistory_Amended").Cells(i, 2).Value
    strTransactionType = Sheets("AccountHistory_Amended").Cells(i, 3).Value
    strISINCode = Sheets("AccountHistory_Amended").Cells(i, 7).Value
    strFundName = Sheets("AccountHistory_Amended").Cells(i, 8).Value

    
     For iFund = 1 To iNumFunds
        If Sheets("FundHistory").Cells(iFund + 1, 2).Value = strISINCode Then
            
            iFundReference = Sheets("FundHistory").Cells(iFund + 1, 1).Value
            Exit For 'Once the fund reference has been found then step out of loop
        
        End If
        

        
    Next iFund
    
    dblTransactionPrice = Sheets("AccountHistory_Amended").Cells(i, 10).Value
    dblTransactedUnits = Sheets("AccountHistory_Amended").Cells(i, 11).Value
    dblTransactionAmount = Sheets("AccountHistory_Amended").Cells(i, 14).Value
    strFundMergerRef = Sheets("AccountHistory_Amended").Cells(i, 16).Value
    strFundConversionRef = Sheets("AccountHistory_Amended").Cells(i, 17).Value
    strConversionFactor = Sheets("AccountHistory_Amended").Cells(i, 20).Value
    
    Sheets("Gain & Loss Calculations").Select
    Sheets("Gain & Loss Calculations").Cells(j, 1).Value = dteTransactionDate
    Sheets("Gain & Loss Calculations").Cells(j, 2).Value = strTaxYear
    Sheets("Gain & Loss Calculations").Cells(j, 3).Value = strTransactionType
    Sheets("Gain & Loss Calculations").Cells(j, 4).Value = iFundReference
    Sheets("Gain & Loss Calculations").Cells(j, 5).Value = strFundName
    Sheets("Gain & Loss Calculations").Cells(j, 6).Value = strISINCode
    Sheets("Gain & Loss Calculations").Cells(j, 7).Value = dblTransactionPrice
    Sheets("Gain & Loss Calculations").Cells(j, 8).Value = dblTransactedUnits
    Sheets("Gain & Loss Calculations").Cells(j, 9).Value = 0
    Sheets("Gain & Loss Calculations").Cells(j, 10).Value = dblTransactionAmount
    Sheets("Gain & Loss Calculations").Cells(j, 16).Value = strFundMergerRef
    Sheets("Gain & Loss Calculations").Cells(j, 17).Value = strFundConversionRef
    Sheets("Gain & Loss Calculations").Cells(j, 18).Value = strConversionFactor
   
 
    Select Case strTransactionType
    
        Case "AssetPurchase", "AssetPurchaseRegular", "AssetTransferIn_Portfolio"
            
            dblPooledTotalCost(iFundReference) = dblPooledTotalCost(iFundReference) + dblTransactionAmount
            dblPooledUnitBalance(iFundReference) = Round(dblPooledUnitBalance(iFundReference) + dblTransactedUnits, 8)
            dblAverageCost(iFundReference) = Round(dblPooledTotalCost(iFundReference) / dblPooledUnitBalance(iFundReference), 8)
              
            Sheets("Gain & Loss Calculations").Cells(j, 11).Value = dblPooledUnitBalance(iFundReference)
            Sheets("Gain & Loss Calculations").Cells(j, 12).Value = dblPooledTotalCost(iFundReference)
            Sheets("Gain & Loss Calculations").Cells(j, 13).Value = dblAverageCost(iFundReference)
            Sheets("Gain & Loss Calculations").Cells(j, 14).Value = 0
            Sheets("Gain & Loss Calculations").Cells(j, 15).Value = "Pooled"
    
        Case "AssetTransferOut_Portfolio"
            dblPooledTotalCost(iFundReference) = dblPooledTotalCost(iFundReference) + Round(dblTransactedUnits * dblAverageCost(iFundReference), 8) 'remove units at average unit cost rather than total cost for the Transfer Out
            dblPooledUnitBalance(iFundReference) = Round(dblPooledUnitBalance(iFundReference) + dblTransactedUnits, 8)
                      
            Sheets("Gain & Loss Calculations").Cells(j, 11).Value = dblPooledUnitBalance(iFundReference)
            Sheets("Gain & Loss Calculations").Cells(j, 12).Value = dblPooledTotalCost(iFundReference)
            Sheets("Gain & Loss Calculations").Cells(j, 13).Value = dblAverageCost(iFundReference)
            Sheets("Gain & Loss Calculations").Cells(j, 14).Value = 0
            Sheets("Gain & Loss Calculations").Cells(j, 15).Value = "Pooled"
            
            If Sheets("Gain & Loss Calculations").Cells(j, 11).Value = 0 Then
            
                Sheets("Gain & Loss Calculations").Cells(j, 12).Value = 0
            
            End If
        
        Case "AssetAdjustment"
        
            dblPooledUnitBalance(iFundReference) = Round(dblPooledUnitBalance(iFundReference) + dblTransactedUnits, 8)
            dblAverageCost(iFundReference) = Round(dblPooledTotalCost(iFundReference) / dblPooledUnitBalance(iFundReference), 8)
                      
            Sheets("Gain & Loss Calculations").Cells(j, 11).Value = dblPooledUnitBalance(iFundReference)
            Sheets("Gain & Loss Calculations").Cells(j, 12).Value = dblPooledTotalCost(iFundReference)
            Sheets("Gain & Loss Calculations").Cells(j, 13).Value = dblAverageCost(iFundReference)
            Sheets("Gain & Loss Calculations").Cells(j, 14).Value = 0
            Sheets("Gain & Loss Calculations").Cells(j, 15).Value = "Pooled"
            
        Case "UnitPriceAdjustment"
        
            dblPooledUnitBalance(iFundReference) = Round(dblPooledUnitBalance(iFundReference) + dblTransactedUnits, 8)
            dblAverageCost(iFundReference) = Round(dblPooledTotalCost(iFundReference) / dblPooledUnitBalance(iFundReference), 8)
                      
            Sheets("Gain & Loss Calculations").Cells(j, 11).Value = dblPooledUnitBalance(iFundReference)
            Sheets("Gain & Loss Calculations").Cells(j, 12).Value = dblPooledTotalCost(iFundReference)
            Sheets("Gain & Loss Calculations").Cells(j, 13).Value = dblAverageCost(iFundReference)
            Sheets("Gain & Loss Calculations").Cells(j, 14).Value = 0
            Sheets("Gain & Loss Calculations").Cells(j, 15).Value = "Pooled"
        
        Case "DIVIDEND"

            dblPooledTotalCost(iFundReference) = dblPooledTotalCost(iFundReference) + dblTransactionAmount
        
            If dblPooledUnitBalance(iFundReference) = 0 Then 'i.e. all units have been sold at this point in time
            
            Else
                           
                dblAverageCost(iFundReference) = Round(dblPooledTotalCost(iFundReference) / dblPooledUnitBalance(iFundReference), 8)
            
            End If
            
            Sheets("Gain & Loss Calculations").Cells(j, 11).Value = dblPooledUnitBalance(iFundReference)
            Sheets("Gain & Loss Calculations").Cells(j, 12).Value = dblPooledTotalCost(iFundReference)
            Sheets("Gain & Loss Calculations").Cells(j, 13).Value = dblAverageCost(iFundReference)
            Sheets("Gain & Loss Calculations").Cells(j, 14).Value = 0
            Sheets("Gain & Loss Calculations").Cells(j, 15).Value = "Pooled"
        
        'This part of the code allows for sub fund switches exempt from capital gains calculations
        Case "SubfundSwitchIn"
            
            For lngFundConversion = 1 To (j - 1) 'Search back through all prior rows for 'Subfund switch out' reference
                
                    If Sheets("Gain & Loss Calculations").Cells(j - lngFundConversion, 3).Value = "SubfundSwitchOut" Then
                        
                        If Left(Sheets("Gain & Loss Calculations").Cells(j - lngFundConversion, 17).Value, Len(Sheets("Gain & Loss Calculations").Cells(j - lngFundConversion, 17).Value) - 4) & "To" = strFundConversionRef Then
                        
                            dblPooledTotalCost(iFundReference) = dblPooledTotalCost(iFundReference) + _
                                                             Round(dblAverageCost(Sheets("Gain & Loss Calculations").Cells(j - lngFundConversion, 4).Value) * dblPooledUnitBalance(Sheets("Gain & Loss Calculations").Cells(j - lngFundConversion, 4).Value), 2) + _
                                                             Round(dblTransactionAmount + Sheets("Gain & Loss Calculations").Cells(j - lngFundConversion, 10).Value, 2) 'assuming cost of sell exactly offsets cost of buy
                                                  
                            Sheets("Gain & Loss Calculations").Cells(j, 12).Value = dblPooledTotalCost(iFundReference)
                            dblPooledUnitBalance(iFundReference) = Round(dblPooledUnitBalance(iFundReference) + dblTransactedUnits, 4)
                            Sheets("Gain & Loss Calculations").Cells(j, 11).Value = dblPooledUnitBalance(iFundReference)
                            dblAverageCost(iFundReference) = Round(dblPooledTotalCost(iFundReference) / dblPooledUnitBalance(iFundReference), 8)
                            Sheets("Gain & Loss Calculations").Cells(j, 13).Value = dblAverageCost(iFundReference)
                            Sheets("Gain & Loss Calculations").Cells(j, 14).Value = 0
                            Sheets("Gain & Loss Calculations").Cells(j, 15).Value = "Pooled"
                            
                            'Now amend the Subfund Switch Out row to remove units (assuming not all were converting in single transaction
                            dblPooledUnitBalance(Sheets("Gain & Loss Calculations").Cells(j - lngFundConversion, 4).Value) = Round(dblPooledUnitBalance(Sheets("Gain & Loss Calculations").Cells(j - lngFundConversion, 4).Value) + _
                                                                                                   Sheets("Gain & Loss Calculations").Cells(j - lngFundConversion, 8).Value, 8)
                                                                                                  ' adjust units in 'from' fund
                            
                            Sheets("Gain & Loss Calculations").Cells(j - lngFundConversion, 13).Value = dblAverageCost(Sheets("Gain & Loss Calculations").Cells(j - lngFundConversion, 4).Value)
                            Sheets("Gain & Loss Calculations").Cells(j - lngFundConversion, 11).Value = dblPooledUnitBalance(Sheets("Gain & Loss Calculations").Cells(j - lngFundConversion, 4).Value) 'output unit balance of 'from' fund
                            Sheets("Gain & Loss Calculations").Cells(j - lngFundConversion, 12).Value = Round(dblAverageCost(Sheets("Gain & Loss Calculations").Cells(j - lngFundConversion, 4).Value) * dblPooledUnitBalance(Sheets("Gain & Loss Calculations").Cells(j - lngFundConversion, 4).Value), 2)
                            Sheets("Gain & Loss Calculations").Cells(j - lngFundConversion, 14).Value = 0
                            Sheets("Gain & Loss Calculations").Cells(j - lngFundConversion, 15).Value = "Pooled"
                            
                            Exit For
                        
                        End If
                        
                    End If
                    
            Next lngFundConversion
            
            k = Sheets("Gain & Loss Calculations").Cells(j - lngFundConversion, 4).Value
 
            Sheets("FundHistory").Cells(k + 1, 4).Value = dblPooledUnitBalance(Sheets("Gain & Loss Calculations").Cells(j - lngFundConversion, 4).Value)
            Sheets("FundHistory").Cells(k + 1, 5).Value = Round(dblAverageCost(Sheets("Gain & Loss Calculations").Cells(j - lngFundConversion, 4).Value) * dblPooledUnitBalance(Sheets("Gain & Loss Calculations").Cells(j - lngFundConversion, 4).Value), 2)
            Sheets("FundHistory").Cells(k + 1, 6).Value = dblAverageCost(Sheets("Gain & Loss Calculations").Cells(j - lngFundConversion, 4).Value)
            Sheets("FundHistory").Cells(iFundReference + 1, 4).Value = dblPooledUnitBalance(iFundReference)
            Sheets("FundHistory").Cells(iFundReference + 1, 5).Value = dblPooledTotalCost(iFundReference)
            Sheets("FundHistory").Cells(iFundReference + 1, 6).Value = dblAverageCost(iFundReference)
 
        'This part of the code allows for fund mergers
        Case "FundMergerIn"
        
            For lngFundMerger = 1 To (j - 1) 'Search back through all prior rows for 'Fund Merger out' reference
            
                If Sheets("Gain & Loss Calculations").Cells(j - lngFundMerger, 3).Value = "FundMergerOut" Then
           
                    If Left(Sheets("Gain & Loss Calculations").Cells(j - lngFundMerger, 16).Value, Len(Sheets("Gain & Loss Calculations").Cells(j - lngFundMerger, 16).Value) - 4) & "To" = strFundMergerRef Then
                            
                            'Update the Fund Merger In row
                            dblPooledTotalCost(iFundReference) = dblPooledTotalCost(iFundReference) + _
                                                            Round(dblAverageCost(Sheets("Gain & Loss Calculations").Cells(j - lngFundMerger, 4).Value) * -(Sheets("Gain & Loss Calculations").Cells(j - lngFundMerger, 8).Value), 2) + _
                                                            Round(dblTransactionAmount + Sheets("Gain & Loss Calculations").Cells(j - lngFundMerger, 10).Value, 2) 'assuming cost of sell exactly offsets cost of buy
                                                  
                            Sheets("Gain & Loss Calculations").Cells(j, 12).Value = dblPooledTotalCost(iFundReference)
                            
                            dblPooledUnitBalance(iFundReference) = Round(dblPooledUnitBalance(iFundReference) + dblTransactedUnits, 4)
                            Sheets("Gain & Loss Calculations").Cells(j, 11).Value = dblPooledUnitBalance(iFundReference)
                            
                            dblAverageCost(iFundReference) = Round(dblPooledTotalCost(iFundReference) / dblPooledUnitBalance(iFundReference), 8)
                            Sheets("Gain & Loss Calculations").Cells(j, 13).Value = dblAverageCost(iFundReference)
                            Sheets("Gain & Loss Calculations").Cells(j, 14).Value = 0
                            Sheets("Gain & Loss Calculations").Cells(j, 15).Value = "Pooled"
                            
                            'Amend the Fund Merger Out row to remove units (assuming not all were converting in single transaction)
                            dblPooledUnitBalance(Sheets("Gain & Loss Calculations").Cells(j - lngFundMerger, 4).Value) = Round(dblPooledUnitBalance(Sheets("Gain & Loss Calculations").Cells(j - lngFundMerger, 4).Value) + _
                                                                                                   Sheets("Gain & Loss Calculations").Cells(j - lngFundMerger, 8).Value, 8)
                                                                                                  ' adjust units in 'from' fund
                            
                            Sheets("Gain & Loss Calculations").Cells(j - lngFundMerger, 13).Value = dblAverageCost(Sheets("Gain & Loss Calculations").Cells(j - lngFundMerger, 4).Value)
                            Sheets("Gain & Loss Calculations").Cells(j - lngFundMerger, 11).Value = dblPooledUnitBalance(Sheets("Gain & Loss Calculations").Cells(j - lngFundMerger, 4).Value) 'output unit balance of 'from' fund
                            Sheets("Gain & Loss Calculations").Cells(j - lngFundMerger, 12).Value = Round(dblAverageCost(Sheets("Gain & Loss Calculations").Cells(j - lngFundMerger, 4).Value) * dblPooledUnitBalance(Sheets("Gain & Loss Calculations").Cells(j - lngFundMerger, 4).Value), 2)
                            Sheets("Gain & Loss Calculations").Cells(j - lngFundMerger, 14).Value = 0
                            Sheets("Gain & Loss Calculations").Cells(j - lngFundMerger, 15).Value = "Pooled"
                        
                            Exit For
                        
                    End If
                        
                 End If
                    
            Next lngFundMerger
        
            k = Sheets("Gain & Loss Calculations").Cells(j - lngFundMerger, 4).Value
 
            Sheets("FundHistory").Cells(k + 1, 4).Value = dblPooledUnitBalance(Sheets("Gain & Loss Calculations").Cells(j - lngFundMerger, 4).Value)
            Sheets("FundHistory").Cells(k + 1, 5).Value = Round(dblAverageCost(Sheets("Gain & Loss Calculations").Cells(j - lngFundMerger, 4).Value) * dblPooledUnitBalance(Sheets("Gain & Loss Calculations").Cells(j - lngFundMerger, 4).Value), 2)
            Sheets("FundHistory").Cells(k + 1, 6).Value = dblAverageCost(Sheets("Gain & Loss Calculations").Cells(j - lngFundMerger, 4).Value)
            Sheets("FundHistory").Cells(iFundReference + 1, 4).Value = dblPooledUnitBalance(iFundReference)
            Sheets("FundHistory").Cells(iFundReference + 1, 5).Value = dblPooledTotalCost(iFundReference)
            Sheets("FundHistory").Cells(iFundReference + 1, 6).Value = dblAverageCost(iFundReference)
 
        'This part of the code searches if there is a mutual fund purchase in the same fund within the next 30 days
        Case "AssetSale", "AssetSaleRegular", "AssetCorporateSale"
        
            n = 1
            iIDflag = 0
            Do While Sheets("AccountHistory_Amended").Cells(i + n, 1).Value <= (dteTransactionDate + 30) And Sheets("AccountHistory_Amended").Cells(i + n, 1).Value > 0
            
                If Sheets("AccountHistory_Amended").Cells(i + n, 3).Value = "AssetPurchase" Or Sheets("AccountHistory_Amended").Cells(i + n, 3).Value = "AssetPurchaseRegular" Then
                    If Sheets("AccountHistory_Amended").Cells(i + n, 7).Value = strISINCode Then 'if found a buy for the same fund as sell
                        iIDflag = 1 'set this flag so that macro knows 30 day rule comes into play
                        dblRatioRemain = 0 're-set
                        
                        If Round(Sheets("AccountHistory_Amended").Cells(i + n, 11).Value, 4) >= Round((-dblTransactedUnits), 4) Then 'if number of units in buy is greater than or equal to sell then
                            
                            dblRatioRemain = (Sheets("AccountHistory_Amended").Cells(i + n, 11).Value + dblTransactedUnits) / Sheets("AccountHistory_Amended").Cells(i + n, 11).Value 'pro-rata factor
                            
                            dblMatchedPurchaseCost = Round(Sheets("AccountHistory_Amended").Cells(i + n, 14).Value / Sheets("AccountHistory_Amended").Cells(i + n, 11).Value, 8)
                            
                            Sheets("Gain & Loss Calculations").Cells(j, 9).Value = -Sheets("Gain & Loss Calculations").Cells(j, 10).Value 'Update the sales proceeds column
                            
                            Sheets("Gain & Loss Calculations").Cells(j, 14).Value = (-dblTransactionAmount) - Round(-dblTransactedUnits * dblMatchedPurchaseCost, 2) 'amount of any gain or loss (using cost per unit of matched purchase within 30 days)
                            
                            Sheets("Gain & Loss Calculations").Cells(j, 11).Value = dblPooledUnitBalance(iFundReference) 'unit quantity not updated because sell is matched against later buy
                            
                            'Pooled total cost unchanged at this point because sell is matched against later buy
                            Sheets("Gain & Loss Calculations").Cells(j, 12).Value = dblPooledTotalCost(iFundReference) 'update total cost for all units
                           
                            'Average cost unchanged at this point because sell is matched against later buy
                            Sheets("Gain & Loss Calculations").Cells(j, 13).Value = dblAverageCost(iFundReference)
                            
                            'Add in a new "AssetPurchase" row to split the purchase between a matched and pooled calculation
                            Sheets("Gain & Loss Calculations").Range(Cells(j, 1), Cells(j, 18)).Select
                            Selection.Copy
                            Selection.Insert Shift:=xlDown
                            Sheets("Gain & Loss Calculations").Cells(j + 1, 1).Value = Sheets("AccountHistory_Amended").Cells(i + n, 1).Value
                            Sheets("Gain & Loss Calculations").Cells(j + 1, 2).Value = Sheets("AccountHistory_Amended").Cells(i + n, 2).Value
                            Sheets("Gain & Loss Calculations").Cells(j + 1, 3).Value = Sheets("AccountHistory_Amended").Cells(i + n, 3).Value
                            Sheets("Gain & Loss Calculations").Cells(j + 1, 8).Value = -dblTransactedUnits 'update units matched
                            Sheets("Gain & Loss Calculations").Cells(j + 1, 7).Value = Sheets("AccountHistory_Amended").Cells(i + n, 10).Value 'pull through unit price for matched buy
                            Sheets("Gain & Loss Calculations").Cells(j + 1, 9).Value = 0
                            Sheets("Gain & Loss Calculations").Cells(j + 1, 10).Value = Round(dblMatchedPurchaseCost * -dblTransactedUnits, 4) 'pull through matched buy cost
                            Sheets("Gain & Loss Calculations").Cells(j + 1, 14).Value = 0
                            Sheets("Gain & Loss Calculations").Cells(j, 15).Value = "Matched (30 day)"
                            Sheets("Gain & Loss Calculations").Cells(j + 1, 15).Value = "Matched (30 day)"
                            
                            j = j + 1 'add one to j to allow for additional row
                                                                           
                            'if units in buy & sell are equal then delete buy row from amended account history worksheet so that it doesn't influence subsequent transactions
                            'otherwise amend buy row within amended account history worksheet to remove those units matched with sell
                            If Round(Sheets("AccountHistory_Amended").Cells(i + n, 11).Value + dblTransactedUnits, 8) = 0 Then 'i.e. if units in sell match units in buy
                                
                                Sheets("AccountHistory_Amended").Select
                                Range(Cells(i + n, 1), Cells(i + n, 22)).Select 'delete row from amended account history worksheet now that it's been matched
                                Selection.EntireRow.Delete
                                                                           
                            ElseIf Sheets("AccountHistory_Amended").Cells(i + n, 11).Value > (-dblTransactedUnits) Then
                                                                                
                                Sheets("AccountHistory_Amended").Cells(i + n, 11).Value = Sheets("AccountHistory_Amended").Cells(i + n, 11).Value + dblTransactedUnits 'reduce the number of units by the amount used to match the sell
                                Sheets("AccountHistory_Amended").Cells(i + n, 12).Value = Round(dblRatioRemain * Sheets("AccountHistory_Amended").Cells(i + n, 12).Value, 8)
                                Sheets("AccountHistory_Amended").Cells(i + n, 13).Value = 0
                                Sheets("AccountHistory_Amended").Cells(i + n, 14).Value = Round(dblRatioRemain * Sheets("AccountHistory_Amended").Cells(i + n, 14).Value, 8)
                                                            
                            End If
                            
                            Exit Do 'step out of loop once sell transaction has been properly matched
                            
                        ElseIf Sheets("AccountHistory_Amended").Cells(i + n, 11).Value < (-dblTransactedUnits) Then 'if number of units in buy is less than sell then can only partially match
                                        
                                dblRatioRemain = (dblTransactedUnits + Sheets("AccountHistory_Amended").Cells(i + n, 11).Value) / dblTransactedUnits 'pro-rata factor
                                        
                                Sheets("AccountHistory_Amended").Select
                                Range(Cells(i, 1), Cells(i, 22)).Select
                                Selection.Copy
                                Selection.Insert Shift:=xlDown
                                
                                Sheets("AccountHistory_Amended").Cells(i + 1, 11).Value = Round(dblRatioRemain * dblTransactedUnits, 8) 'create new row with remainder of sell units
                                Sheets("AccountHistory_Amended").Cells(i, 11).Value = Round((1 - dblRatioRemain) * dblTransactedUnits, 8) 'reduce number of units to sell in this row to match the buy quantity found
                                
                                Sheets("AccountHistory_Amended").Cells(i + 1, 12).Value = Round(dblRatioRemain * Sheets("AccountHistory_Amended").Cells(i, 12).Value, 8)  'split the 'Transaction Amount' between matched & non-matched
                                Sheets("AccountHistory_Amended").Cells(i, 12).Value = Round((1 - dblRatioRemain) * Sheets("AccountHistory_Amended").Cells(i, 12).Value, 8) 'split the 'Transaction Amount' between matched & non-matched
            
                                Sheets("AccountHistory_Amended").Cells(i + 1, 13).Value = 0
                                Sheets("AccountHistory_Amended").Cells(i, 13).Value = 0
            
                                Sheets("AccountHistory_Amended").Cells(i + 1, 14).Value = Round(dblRatioRemain * Sheets("AccountHistory_Amended").Cells(i, 14).Value, 8)  'split the 'Transaction Amount' between matched & non-matched
                                Sheets("AccountHistory_Amended").Cells(i, 14).Value = Round((1 - dblRatioRemain) * Sheets("AccountHistory_Amended").Cells(i, 14).Value, 8) 'split the 'Transaction Amount' between matched & non-matched
                                
                                Sheets("Gain & Loss Calculations").Cells(j, 9).Value = -Sheets("Gain & Loss Calculations").Cells(j, 10).Value 'Update the sales proceeds column
                                
                                GoTo SellProc 'return back to sell logic to perform earlier steps
                                                                                                
                            End If
                    
                        End If
                    
                    End If
        
                n = n + 1
            
            Loop
            
            If iIDflag = 0 Then
            'need to sell some units using average cost approach & assumption is that sufficient units exist to cover this
                
                If Round(dblPooledUnitBalance(iFundReference), 4) < Round(-dblTransactedUnits, 4) Then
                    
                    If Round(Abs(dblPooledUnitBalance(iFundReference) + dblTransactedUnits), 4) >= 0.01 Then
                    'only show user the message box if discrepancy is material
                    
                        MsgBox "ERROR: insufficient shares or units exist to cover sale of " & -dblTransactedUnits & " of " & strFundName & " (" & strISINCode & ") on " & dteTransactionDate & ". Consequently quantity restricted to available balance of " & dblPooledUnitBalance(iFundReference)
                    
                    End If
                    
                    dblTransactedUnits = -Round(dblPooledUnitBalance(iFundReference), 8) 'restrict UnitsQty to balance remaining
                    dblTransactionAmount = Round(dblTransactedUnits * dblTransactionPrice, 2) 'restrict amount of sale
                    
                    'highlight units & proceeds where units have had to be restricted
                    Sheets("Gain & Loss Calculations").Select
                    Range(Sheets("Gain & Loss Calculations").Cells(j, 7), Sheets("Gain & Loss Calculations").Cells(j, 10)).Select
                    With Selection.Interior
                        .Pattern = xlSolid
                        .PatternColorIndex = xlAutomatic
                        .Color = 255
                        .TintAndShade = 0
                        .PatternTintAndShade = 0
                    End With
                    With Selection.Font
                        .ThemeColor = xlThemeColorDark1
                        .TintAndShade = 0
                    End With
                
                End If
                    
                dblPooledUnitBalance(iFundReference) = Round(dblPooledUnitBalance(iFundReference) + dblTransactedUnits, 8)
                                                            
                Sheets("Gain & Loss Calculations").Cells(j, 9).Value = -Sheets("Gain & Loss Calculations").Cells(j, 10).Value 'Update the sale proceeds column
                
                Sheets("Gain & Loss Calculations").Cells(j, 14).Value = (-dblTransactionAmount) - Round(-dblTransactedUnits * dblAverageCost(iFundReference), 2) 'amount of any gain or loss
                
                Sheets("Gain & Loss Calculations").Cells(j, 11).Value = dblPooledUnitBalance(iFundReference) 'update running total of units
                
                dblPooledTotalCost(iFundReference) = dblPooledTotalCost(iFundReference) + Round(dblTransactedUnits * dblAverageCost(iFundReference), 8) 'total cost reduces in proportion to units sold rather than allowing for sale price + costs
                Sheets("Gain & Loss Calculations").Cells(j, 12).Value = dblPooledTotalCost(iFundReference) 'update total cost for all units
                
                If dblPooledUnitBalance(iFundReference) = 0 Then 'avoid dividing by zero
                    
                Else
                    dblAverageCost(iFundReference) = Round(dblPooledTotalCost(iFundReference) / dblPooledUnitBalance(iFundReference), 8) 'calculate new average cost per unit
                End If
                
                Sheets("Gain & Loss Calculations").Cells(j, 13).Value = dblAverageCost(iFundReference) 'update new average cost per unit following unit sale
                
                Sheets("Gain & Loss Calculations").Cells(j, 15).Value = "Pooled" 'update status for this type of calculation
                
                'Removes rounding error if unit balance is 0 by setting total cost to 0
                If Sheets("Gain & Loss Calculations").Cells(j, 11).Value = 0 Then
            
                    Sheets("Gain & Loss Calculations").Cells(j, 12).Value = 0
            
                End If
                                        
            End If
     
        Case Else
        
    End Select

    If iFundReference > 0 Then
            
        Sheets("FundHistory").Cells(iFundReference + 1, 4).Value = dblPooledUnitBalance(iFundReference)
        
        If dblPooledUnitBalance(iFundReference) = 0 Then
        
            Sheets("FundHistory").Cells(iFundReference + 1, 5).Value = 0
            
            Else
         
            Sheets("FundHistory").Cells(iFundReference + 1, 5).Value = dblPooledTotalCost(iFundReference)
        
        End If
        
        Sheets("FundHistory").Cells(iFundReference + 1, 6).Value = dblAverageCost(iFundReference)
        
    End If

    j = j + 1

i = i + 1

Loop

Sheets("Gain & Loss Calculations").Select
iFormatLastRow = Sheets("Gain & Loss Calculations").Cells(Rows.Count, 1).End(xlUp).Row

Range("A" & iFormatLastRow, "R" & iFormatLastRow).Select
Selection.ClearContents

iFormatLastRow = iFormatLastRow - 1

'Sort data by fund
Range("A2").Select
Range(Selection, Selection.End(xlDown)).Select
Range(Selection, Selection.End(xlToRight)).Select
ActiveWorkbook.Worksheets("Gain & Loss Calculations").Sort.SortFields.Clear
ActiveWorkbook.Worksheets("Gain & Loss Calculations").Sort.SortFields.Add Key:=Range("E7:E" & iFormatLastRow), SortOn:=xlSortOnValues, Order:=xlAscending, DataOption:=xlSortNormal
With ActiveWorkbook.Worksheets("Gain & Loss Calculations").Sort
    .SetRange Range("A1:R" & iFormatLastRow)
    .Header = xlYes
    .MatchCase = False
    .Orientation = xlTopToBottom
    .SortMethod = xlPinYin
    .Apply
End With

For iFormatRow = 2 To iFormatLastRow

    Sheets("Gain & Loss Calculations").Select
    Range(Sheets("Gain & Loss Calculations").Cells(iFormatRow, 1), Sheets("Gain & Loss Calculations").Cells(iFormatRow, 17)).Select
    
    If Sheets("Gain & Loss Calculations").Cells(iFormatRow, 4).Value / 2 = CInt(Sheets("Gain & Loss Calculations").Cells(iFormatRow, 4).Value / 2) Then 'alternate funds shading

        With Selection.Interior
            .Pattern = xlSolid
            .PatternColorIndex = xlAutomatic
            .ThemeColor = xlThemeColorLight2
            .TintAndShade = 0.799981688894314
            .PatternTintAndShade = 0
        End With
    
    End If
    
    If Sheets("Gain & Loss Calculations").Cells(iFormatRow, 7).Font.ThemeColor = xlThemeColorLight2 Then
    
        Range(Sheets("Gain & Loss Calculations").Cells(iFormatRow, 7), Sheets("Gain & Loss Calculations").Cells(iFormatRow, 10)).Select
        With Selection.Interior
            .Pattern = xlSolid
            .PatternColorIndex = xlAutomatic
            .Color = 255
            .TintAndShade = 0
            .PatternTintAndShade = 0
        End With
        With Selection.Font
            .ThemeColor = xlThemeColorLight2
            .TintAndShade = 0
        End With
        
    End If
        
Next iFormatRow

Application.ScreenUpdating = True

End Sub
Attribute VB_Name = "GainLossSummary"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Maincode"
Public gdblTransferInValue As Double
Public gdblCGTTarget As Double
Public gdblSalesProceedsTarget As Double
Public gdblMaxCGTTarget As Double
Public giPlannerOption As Integer
Public giPlannerCancel As Integer
Public giRow As Integer
Public giTaxYear As Integer
Public gblCheckBoxToAdd(31), gblAddComboBox(1000), gblAddCheckBox(1000)
Public gblfrmTermosOfUse As frmTermsOfUse
Public gblfrmTransferIn As frmTransferIn
Public gblfrmFundConversions As frmFundConversions
Public gblfrmFundMergers As frmFundMerger
Public gblfrmCGTPlanner As frmCGTPlanner

Sub DataImport()

'Developed by Zurich - v1.0

'Tool version v3.0 - Updated for new tax year 2018/19
'Tool version v4.0 - Updated to deal with Omnis Corporate actions in September 2018
'Tool version v5.0 - Updated for new tax year 2019/20. Additional code also added to check input file and ensure there are no internal errors such as data from another Portfolio.
'Tool version v6.0 - Updated to deal with Omnis Corporate actions in August 2019

Dim iRow As Integer
Dim i As Long
Dim j As Long

Dim strReportName As String
Dim strMainFileName As String
Dim iLastRow As Integer
Dim strFileToOpen As String

Application.ScreenUpdating = False

'****************************************************************

'Check to ensure that the model is being used prior to the Spike Date (i.e. before any tax year end changes to rates etc)
'Current model is only valid for the current tax year (2019/20)

If Now() >= Sheets("ModelInputs").Cells(6, 3).Value Then
    
    MsgBox "This Zurich Capital Gains Tool is only valid prior to 6 April 2020. Please download the latest version from the Zurich Intermediary website."
    Exit Sub

End If

'****************************************************************

'Error trapping designed to prevent users from pressing the ESC key and entering hidden worksheets.
Application.EnableCancelKey = xlDisabled
    
'****************************************************************

Set gblfrmTermosOfUse = New frmTermsOfUse
gblfrmTermosOfUse.Show

'Unprotect Workbook
ActiveWorkbook.Unprotect Password:="ZurichCG2016"

'Unhide all worksheets
Sheets("FundConversions").Visible = True
Sheets("FundMergers").Visible = True
Sheets("AccountHistory_Amended").Visible = True
Sheets("AccountInfo").Visible = True
Sheets("AccountHistory").Visible = True
Sheets("FundHistory").Visible = True
Sheets("TaxYears").Visible = True
Sheets("AccountHolding").Visible = True

On Error Resume Next

strMainFileName = ActiveWorkbook.Name
Sheets("Gain & Loss Calculations").Select
Range(Cells(2, 1), Cells(50000, 18)).Select 'remove any red cells previously highlighted
With Selection.Interior
    .Pattern = xlNone
    .TintAndShade = 0
    .PatternTintAndShade = 0
End With
With Selection.Font
    .ThemeColor = xlThemeColorLight1
    .TintAndShade = 0
End With

'Clear out the amended account transaction history from previous use
Sheets("AccountHistory_Amended").Select
Range("A2:U30000").Select
Selection.ClearContents

'Clear out account information from previous use
Sheets("AccountInfo").Select
Range("A2:G2").Select
Selection.ClearContents

'Clear out account transaction history from previous use
Sheets("AccountHistory").Select
Range("A2:P30000").Select
Selection.ClearContents

'Clear out fund history from previous use
Sheets("FundHistory").Select
Range("A2:F1000").Select
Selection.ClearContents

'Clear out tax year references from previous use
Sheets("TaxYears").Select
Range("A2:B50").Select

'Clear out account holding data from previous use
Sheets("AccountHolding").Select
Range("A2:K1000").Select
Selection.ClearContents

'Open Capital Gains Tool Input File
strFileToOpen = Application.GetOpenFilename(strFileToOpen, , "Browse to locate the data file for the client you wish to import into the Zurich Capital Gains Tool.")
Workbooks.Open Filename:=strFileToOpen, Password:="ZurichCG2016"

strReportName = ActiveWorkbook.Name

'Copy Account Information from Zurich Capital Gains Tool input file
Sheets("AccountInfo").Select
Range("A2:G2").Select
Selection.Copy
Windows(strMainFileName).Activate
Sheets("AccountInfo").Select
Range("A2").Select
Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks:=False, Transpose:=False
Application.CutCopyMode = False
Cells.Select
Cells.EntireColumn.AutoFit
Range("A1").Select
    
'Copy Account History from Zurich Capital Gains Tool input file
Windows(strReportName).Activate
Sheets("AccountHistory").Select
Range("A2:P30000").Select
Selection.Copy
Windows(strMainFileName).Activate
Sheets("AccountHistory").Select
Range("A2").Select
Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks:=False, Transpose:=False
Application.CutCopyMode = False
Cells.Select
Cells.EntireColumn.AutoFit
Range("A1").Select

'Copy Fund History from Zurich Capital Gains Tool input file
Windows(strReportName).Activate
Sheets("FundHistory").Select
Range("A2:C1000").Select
Selection.Copy
Windows(strMainFileName).Activate
Sheets("FundHistory").Select
Range("A2").Select
Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks:=False, Transpose:=False
Application.CutCopyMode = False
Cells.Select
Cells.EntireColumn.AutoFit
Range("A1").Select

'Copy Tax Year from Zurich Capital Gains Tool input file
Windows(strReportName).Activate
Sheets("TaxYears").Select
Range("A2:B50").Select
Selection.Copy
Windows(strMainFileName).Activate
Sheets("TaxYears").Select
Range("A2").Select
Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks:=False, Transpose:=False
Application.CutCopyMode = False
Cells.Select
Cells.EntireColumn.AutoFit
Range("A1").Select

'Copy Account Holding information from Zurich Capital Gains Tool input file
Windows(strReportName).Activate
Sheets("AccountHolding").Select
Range("A2:K1000").Select
Selection.Copy
Windows(strMainFileName).Activate
Sheets("AccountHolding").Select
Range("A2").Select
Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks:=False, Transpose:=False
Application.CutCopyMode = False
Cells.Select
Cells.EntireColumn.AutoFit
Range("A1").Select

'Close Zurich Capital Gains Tool input file
Windows(strReportName).Activate
ActiveWorkbook.Close
Windows(strMainFileName).Activate

'Check that the correct version of the input file is being used for this calculator

If Sheets("AccountInfo").Cells(2, 7).Value <> "v6.0" Then
    
    MsgBox "ERROR: Unable to process Portfolio through the Capital Gains Tool due to incorrect version of the input file being used. Please request an updated input file."
        
    Call Refresh
        
    Exit Sub
    
End If

'Check there are no internal errors in the input file (i.e. data from a previous case)

If Sheets("ModelInputs").Cells(4, 8).Value <> Sheets("ModelInputs").Cells(4, 10).Value Then
    
    MsgBox "ERROR: Unable to process Portfolio through the Capital Gains Tool due to internal error in generated input file. Please request an updated input file."
        
    Call Refresh
        
    Exit Sub
    
End If

If Sheets("ModelInputs").Cells(6, 8).Value <> Sheets("ModelInputs").Cells(6, 10).Value Then
    
    MsgBox "ERROR: Unable to process Portfolio through the Capital Gains Tool due to internal error in generated input file. Please request an updated input file."
        
    Call Refresh
        
    Exit Sub
    
End If

'Copy data from Account History sheet to new Calculations sheet and look for In-specie transactions and capital gains exempt switches
Sheets("AccountHistory").Select
Range("A2:I30000").Select
Selection.Copy
Sheets("AccountHistory_Amended").Select
Range("A2").Select
Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks:=False, Transpose:=False
Application.CutCopyMode = False
Cells.Select
Cells.EntireColumn.AutoFit

Sheets("AccountHistory").Select
Range("K2:P30000").Select
Selection.Copy
Sheets("AccountHistory_Amended").Select
Range("J2").Select
Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks:=False, Transpose:=False
Application.CutCopyMode = False
Cells.Select
Cells.EntireColumn.AutoFit

Sheets("AccountHistory").Select
Range("J2:J30000").Select
Selection.Copy
Sheets("AccountHistory_Amended").Select
Range("U2").Select
Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks:=False, Transpose:=False
Application.CutCopyMode = False
Cells.Select
Cells.EntireColumn.AutoFit

Range("A1").Select

'Loop through the Amended Account History worksheet to delete rows with no values
Sheets("AccountHistory_Amended").Select
giRow = 2

Do While Sheets("AccountHistory_Amended").Cells(giRow, 1).Value <> ""

    If (Sheets("AccountHistory_Amended").Cells(giRow, 11).Value + Sheets("AccountHistory_Amended").Cells(giRow, 12).Value + _
        Sheets("AccountHistory_Amended").Cells(giRow, 13).Value + Sheets("AccountHistory_Amended").Cells(giRow, 14).Value) = 0 Then
    
        Range(Cells(giRow, 1), Cells(giRow, 20)).Select 'Delete row from amended account history worksheet if units and transaction amounts = 0
        Selection.EntireRow.Delete
        
        giRow = giRow - 1
    
    End If

giRow = giRow + 1

Loop

'Loop through Amended Account History worksheet to find Inter account transfers (AssetTransferIn_Account or AssetTransferOut_Account) that implies there has been manual processing errors or death processing
giRow = 2

Do While Sheets("AccountHistory_Amended").Cells(giRow, 1).Value <> ""

    If Sheets("AccountHistory_Amended").Cells(giRow, 3).Value = "AssetTransferIn_Account" _
        Or Sheets("AccountHistory_Amended").Cells(giRow, 3).Value = "AssetTransferOut_Account" Then
    
        MsgBox "ERROR: Unable to process Portfolio through the Capital Gains Tool due to internal movement of assets between accounts."
        
        Call Refresh
        
        Exit Sub
    
    End If

giRow = giRow + 1

Loop

'Loop through Amended Account History worksheet to find Asset Adjustments that are actually unit price adjustments due to pricing errors
giRow = 2

Do While Sheets("AccountHistory_Amended").Cells(giRow, 1).Value <> ""

    If Sheets("AccountHistory_Amended").Cells(giRow, 3).Value = "AssetAdjustment" _
        And Sheets("AccountHistory_Amended").Cells(giRow, 10).Value = 0 _
        And Sheets("AccountHistory_Amended").Cells(giRow, 12).Value = 0 Then
        
        Sheets("AccountHistory_Amended").Cells(giRow, 3).Value = "UnitPriceAdjustment"
        Sheets("AccountHistory_Amended").Cells(giRow, 15).Value = 1.5
           
    End If

giRow = giRow + 1

Loop

'-- NEW CODE (October 2018 Update for V4.0 to account for special fund splits on some Omnis funds)
'Loop through Amended Account History worksheet to find Asset Adjustments that relate to Omnis Corporate Action changes on 29/09/2018
' Further updated for V6.0 to account for further Omnis Corporate Action changes in August 2019

giRow = 2

Do While Sheets("AccountHistory_Amended").Cells(giRow, 1).Value <> ""

    'Identify Corporate Action for outgoing Omnis Asia Pacific Equity fund (September 2018)
    If Sheets("AccountHistory_Amended").Cells(giRow, 3).Value = "AssetAdjustment" _
        And (Sheets("AccountHistory_Amended").Cells(giRow, 21).Value = 41666 Or Sheets("AccountHistory_Amended").Cells(giRow, 21).Value = 5313) _
        And Sheets("AccountHistory_Amended").Cells(giRow, 7).Value = "GB00BD2MLY59" _
        And Sheets("AccountHistory_Amended").Cells(giRow, 11).Value < 0 Then
        
        'Add in a new "AssetAdjustment" row to split the Omnis corporate action row to align to new funds
        Sheets("AccountHistory_Amended").Range(Cells(giRow, 1), Cells(giRow, 21)).Select
        Selection.Copy
        Selection.Insert Shift:=xlDown
        Sheets("AccountHistory_Amended").Cells(giRow + 1, 10).Value = 1.5261506
        Sheets("AccountHistory_Amended").Cells(giRow + 1, 11).Value = Round(Sheets("AccountHistory_Amended").Cells(giRow, 11).Value * 0.3, 4)
        Sheets("AccountHistory_Amended").Cells(giRow + 1, 12).Value = Round(Sheets("AccountHistory_Amended").Cells(giRow + 1, 10).Value * Sheets("AccountHistory_Amended").Cells(giRow + 1, 11).Value, 2)
        Sheets("AccountHistory_Amended").Cells(giRow + 1, 14).Value = Sheets("AccountHistory_Amended").Cells(giRow + 1, 12).Value

        Sheets("AccountHistory_Amended").Cells(giRow, 10).Value = 1.5261506
        Sheets("AccountHistory_Amended").Cells(giRow, 11).Value = Sheets("AccountHistory_Amended").Cells(giRow, 11).Value - Sheets("AccountHistory_Amended").Cells(giRow + 1, 11).Value
        Sheets("AccountHistory_Amended").Cells(giRow, 12).Value = Round(Sheets("AccountHistory_Amended").Cells(giRow, 10).Value * Sheets("AccountHistory_Amended").Cells(giRow, 11).Value, 2)
        Sheets("AccountHistory_Amended").Cells(giRow, 14).Value = Sheets("AccountHistory_Amended").Cells(giRow, 12).Value
                            
        giRow = giRow + 1 'add one to giRow to allow for additional row
           
    End If

    ' Adjust unit price and transaction values on Omnis Asia Pacific (ex-Japan) Equity and Omnis Japanese Equity funds
    If Sheets("AccountHistory_Amended").Cells(giRow, 3).Value = "AssetAdjustment" _
        And (Sheets("AccountHistory_Amended").Cells(giRow, 21).Value = 41666 Or Sheets("AccountHistory_Amended").Cells(giRow, 21).Value = 5313) _
        And Sheets("AccountHistory_Amended").Cells(giRow, 11).Value > 0 Then
        
        Sheets("AccountHistory_Amended").Cells(giRow, 10).Value = 1
        Sheets("AccountHistory_Amended").Cells(giRow, 12).Value = Round(Sheets("AccountHistory_Amended").Cells(giRow, 10).Value * Sheets("AccountHistory_Amended").Cells(giRow, 11).Value, 2)
        Sheets("AccountHistory_Amended").Cells(giRow, 14).Value = Sheets("AccountHistory_Amended").Cells(giRow, 12).Value
        
    End If

    'Identify Corporate Action for outgoing Omnis Developed Markets (ex-UK, ex-US) Equity fund (September 2018)
    If Sheets("AccountHistory_Amended").Cells(giRow, 3).Value = "AssetAdjustment" _
        And Sheets("AccountHistory_Amended").Cells(giRow, 21).Value = 41667 _
        And Sheets("AccountHistory_Amended").Cells(giRow, 7).Value = "GB00BDZR8796" _
        And Sheets("AccountHistory_Amended").Cells(giRow, 11).Value < 0 Then
        
        'Add in a new "AssetAdjustment" row to split the Omnis corporate action row to align to new funds
        Sheets("AccountHistory_Amended").Range(Cells(giRow, 1), Cells(giRow, 21)).Select
        Selection.Copy
        Selection.Insert Shift:=xlDown
        
        Sheets("AccountHistory_Amended").Range(Cells(giRow, 1), Cells(giRow, 21)).Select
        Selection.Copy
        Selection.Insert Shift:=xlDown
        
        Sheets("AccountHistory_Amended").Cells(giRow + 1, 10).Value = 1.3101566
        Sheets("AccountHistory_Amended").Cells(giRow + 1, 11).Value = Round(Sheets("AccountHistory_Amended").Cells(giRow, 11).Value * 0.55, 4)
        Sheets("AccountHistory_Amended").Cells(giRow + 1, 12).Value = Round(Sheets("AccountHistory_Amended").Cells(giRow + 1, 10).Value * Sheets("AccountHistory_Amended").Cells(giRow + 1, 11).Value, 2)
        Sheets("AccountHistory_Amended").Cells(giRow + 1, 14).Value = Sheets("AccountHistory_Amended").Cells(giRow + 1, 12).Value

        Sheets("AccountHistory_Amended").Cells(giRow + 2, 10).Value = 1.3101566
        Sheets("AccountHistory_Amended").Cells(giRow + 2, 11).Value = Round(Sheets("AccountHistory_Amended").Cells(giRow, 11).Value * 0.3, 4)
        Sheets("AccountHistory_Amended").Cells(giRow + 2, 12).Value = Round(Sheets("AccountHistory_Amended").Cells(giRow + 2, 10).Value * Sheets("AccountHistory_Amended").Cells(giRow + 2, 11).Value, 2)
        Sheets("AccountHistory_Amended").Cells(giRow + 2, 14).Value = Sheets("AccountHistory_Amended").Cells(giRow + 2, 12).Value

        Sheets("AccountHistory_Amended").Cells(giRow, 10).Value = 1.3101566
        Sheets("AccountHistory_Amended").Cells(giRow, 11).Value = Sheets("AccountHistory_Amended").Cells(giRow, 11).Value - Sheets("AccountHistory_Amended").Cells(giRow + 1, 11).Value - Sheets("AccountHistory_Amended").Cells(giRow + 2, 11).Value
        Sheets("AccountHistory_Amended").Cells(giRow, 12).Value = Round(Sheets("AccountHistory_Amended").Cells(giRow, 10).Value * Sheets("AccountHistory_Amended").Cells(giRow, 11).Value, 2)
        Sheets("AccountHistory_Amended").Cells(giRow, 14).Value = Sheets("AccountHistory_Amended").Cells(giRow, 12).Value
                            
        giRow = giRow + 2 'add one to giRow to allow for additional rows
           
    End If
    
    ' Adjust unit price and transaction values on Omnis Asia Pacific (ex-Japan) Equity and Omnis Japanese Equity funds
    If Sheets("AccountHistory_Amended").Cells(giRow, 3).Value = "AssetAdjustment" _
        And Sheets("AccountHistory_Amended").Cells(giRow, 21).Value = 41667 _
        And Sheets("AccountHistory_Amended").Cells(giRow, 11).Value > 0 Then
        
        Sheets("AccountHistory_Amended").Cells(giRow, 10).Value = 1
        Sheets("AccountHistory_Amended").Cells(giRow, 12).Value = Round(Sheets("AccountHistory_Amended").Cells(giRow, 10).Value * Sheets("AccountHistory_Amended").Cells(giRow, 11).Value, 2)
        Sheets("AccountHistory_Amended").Cells(giRow, 14).Value = Sheets("AccountHistory_Amended").Cells(giRow, 12).Value
        
    End If

    ' Adjust unit price and transaction values on Omnis European Equity fund
    If Sheets("AccountHistory_Amended").Cells(giRow, 3).Value = "AssetAdjustment" _
        And Sheets("AccountHistory_Amended").Cells(giRow, 21).Value = 41667 _
        And Sheets("AccountHistory_Amended").Cells(giRow, 7).Value = "GB00BD2MLZ66" _
        And Sheets("AccountHistory_Amended").Cells(giRow, 11).Value > 0 Then
        
        Sheets("AccountHistory_Amended").Cells(giRow, 10).Value = 1.2495
        Sheets("AccountHistory_Amended").Cells(giRow, 12).Value = Round(Sheets("AccountHistory_Amended").Cells(giRow, 10).Value * Sheets("AccountHistory_Amended").Cells(giRow, 11).Value, 2)
        Sheets("AccountHistory_Amended").Cells(giRow, 14).Value = Sheets("AccountHistory_Amended").Cells(giRow, 12).Value
        
    End If

    'Identify Corporate Action for outgoing Omnis UK Bond fund (September 2018)
    If Sheets("AccountHistory_Amended").Cells(giRow, 3).Value = "AssetAdjustment" _
        And (Sheets("AccountHistory_Amended").Cells(giRow, 21).Value = 41668 Or Sheets("AccountHistory_Amended").Cells(giRow, 21).Value = 5315) _
        And Sheets("AccountHistory_Amended").Cells(giRow, 7).Value = "GB00BDZR8B35" _
        And Sheets("AccountHistory_Amended").Cells(giRow, 11).Value < 0 Then
        
        'Add in a new "AssetAdjustment" row to split the Omnis corporate action row to align to new funds
        Sheets("AccountHistory_Amended").Range(Cells(giRow, 1), Cells(giRow, 21)).Select
        Selection.Copy
        Selection.Insert Shift:=xlDown
        Sheets("AccountHistory_Amended").Cells(giRow + 1, 10).Value = 1.14213214
        Sheets("AccountHistory_Amended").Cells(giRow + 1, 11).Value = Round(Sheets("AccountHistory_Amended").Cells(giRow, 11).Value * 0.3, 4)
        Sheets("AccountHistory_Amended").Cells(giRow + 1, 12).Value = Round(Sheets("AccountHistory_Amended").Cells(giRow + 1, 10).Value * Sheets("AccountHistory_Amended").Cells(giRow + 1, 11).Value, 2)
        Sheets("AccountHistory_Amended").Cells(giRow + 1, 14).Value = Sheets("AccountHistory_Amended").Cells(giRow + 1, 12).Value

        Sheets("AccountHistory_Amended").Cells(giRow, 10).Value = 1.14213214
        Sheets("AccountHistory_Amended").Cells(giRow, 11).Value = Sheets("AccountHistory_Amended").Cells(giRow, 11).Value - Sheets("AccountHistory_Amended").Cells(giRow + 1, 11).Value
        Sheets("AccountHistory_Amended").Cells(giRow, 12).Value = Round(Sheets("AccountHistory_Amended").Cells(giRow, 10).Value * Sheets("AccountHistory_Amended").Cells(giRow, 11).Value, 2)
        Sheets("AccountHistory_Amended").Cells(giRow, 14).Value = Sheets("AccountHistory_Amended").Cells(giRow, 12).Value
                            
        giRow = giRow + 1 'add one to giRow to allow for additional row
           
    End If

    ' Adjust unit price and transaction values on Omnis UK Gilt and Omnis Sterling Corporate Bond funds
    If Sheets("AccountHistory_Amended").Cells(giRow, 3).Value = "AssetAdjustment" _
        And (Sheets("AccountHistory_Amended").Cells(giRow, 21).Value = 41668 Or Sheets("AccountHistory_Amended").Cells(giRow, 21).Value = 5315) _
        And Sheets("AccountHistory_Amended").Cells(giRow, 11).Value > 0 Then
        
        Sheets("AccountHistory_Amended").Cells(giRow, 10).Value = 1
        Sheets("AccountHistory_Amended").Cells(giRow, 12).Value = Round(Sheets("AccountHistory_Amended").Cells(giRow, 10).Value * Sheets("AccountHistory_Amended").Cells(giRow, 11).Value, 2)
        Sheets("AccountHistory_Amended").Cells(giRow, 14).Value = Sheets("AccountHistory_Amended").Cells(giRow, 12).Value
        
    End If
    
    'Identify Corporate Action for outgoing Omnis UK Equity fund (September 2018)
    If Sheets("AccountHistory_Amended").Cells(giRow, 3).Value = "AssetAdjustment" _
        And (Sheets("AccountHistory_Amended").Cells(giRow, 21).Value = 41669 Or Sheets("AccountHistory_Amended").Cells(giRow, 21).Value = 5316) _
        And Sheets("AccountHistory_Amended").Cells(giRow, 7).Value = "GB00BDZR8465" _
        And Sheets("AccountHistory_Amended").Cells(giRow, 11).Value < 0 Then
        
        'Add in a new "AssetAdjustment" row to split the Omnis corporate action row to align to new funds
        Sheets("AccountHistory_Amended").Range(Cells(giRow, 1), Cells(giRow, 21)).Select
        Selection.Copy
        Selection.Insert Shift:=xlDown
        Sheets("AccountHistory_Amended").Cells(giRow + 1, 10).Value = 1.08606668
        Sheets("AccountHistory_Amended").Cells(giRow + 1, 11).Value = Round(Sheets("AccountHistory_Amended").Cells(giRow, 11).Value * 0.9, 4)
        Sheets("AccountHistory_Amended").Cells(giRow + 1, 12).Value = Round(Sheets("AccountHistory_Amended").Cells(giRow + 1, 10).Value * Sheets("AccountHistory_Amended").Cells(giRow + 1, 11).Value, 2)
        Sheets("AccountHistory_Amended").Cells(giRow + 1, 14).Value = Sheets("AccountHistory_Amended").Cells(giRow + 1, 12).Value

        Sheets("AccountHistory_Amended").Cells(giRow, 10).Value = 1.08606668
        Sheets("AccountHistory_Amended").Cells(giRow, 11).Value = Sheets("AccountHistory_Amended").Cells(giRow, 11).Value - Sheets("AccountHistory_Amended").Cells(giRow + 1, 11).Value
        Sheets("AccountHistory_Amended").Cells(giRow, 12).Value = Round(Sheets("AccountHistory_Amended").Cells(giRow, 10).Value * Sheets("AccountHistory_Amended").Cells(giRow, 11).Value, 2)
        Sheets("AccountHistory_Amended").Cells(giRow, 14).Value = Sheets("AccountHistory_Amended").Cells(giRow, 12).Value
                            
        giRow = giRow + 1 'add one to giRow to allow for additional row
           
    End If

    ' Adjust unit price and transaction values on Omnis UK All Companies and Omnis UK Smaller Companies funds
    If Sheets("AccountHistory_Amended").Cells(giRow, 3).Value = "AssetAdjustment" _
        And (Sheets("AccountHistory_Amended").Cells(giRow, 21).Value = 41669 Or Sheets("AccountHistory_Amended").Cells(giRow, 21).Value = 5316) _
        And Sheets("AccountHistory_Amended").Cells(giRow, 11).Value > 0 Then
        
        Sheets("AccountHistory_Amended").Cells(giRow, 10).Value = 1
        Sheets("AccountHistory_Amended").Cells(giRow, 12).Value = Round(Sheets("AccountHistory_Amended").Cells(giRow, 10).Value * Sheets("AccountHistory_Amended").Cells(giRow, 11).Value, 2)
        Sheets("AccountHistory_Amended").Cells(giRow, 14).Value = Sheets("AccountHistory_Amended").Cells(giRow, 12).Value
        
    End If
  
    'Identify Corporate Action for outgoing Omnis Emerging Markets Equity fund (August 2019)
    If Sheets("AccountHistory_Amended").Cells(giRow, 3).Value = "AssetAdjustment" _
        And (Sheets("AccountHistory_Amended").Cells(giRow, 21).Value = 49874 Or Sheets("AccountHistory_Amended").Cells(giRow, 21).Value = 6971) _
        And Sheets("AccountHistory_Amended").Cells(giRow, 7).Value = "GB00BDZR8804" _
        And Sheets("AccountHistory_Amended").Cells(giRow, 11).Value < 0 Then
        
        'Add in a new "AssetAdjustment" row to split the Omnis corporate action row to align to new funds
        Sheets("AccountHistory_Amended").Range(Cells(giRow, 1), Cells(giRow, 21)).Select
        Selection.Copy
        Selection.Insert Shift:=xlDown
        Sheets("AccountHistory_Amended").Cells(giRow + 1, 10).Value = 1.35550734
        Sheets("AccountHistory_Amended").Cells(giRow + 1, 11).Value = Round(Sheets("AccountHistory_Amended").Cells(giRow, 11).Value * 0.5, 4)
        Sheets("AccountHistory_Amended").Cells(giRow + 1, 12).Value = Round(Sheets("AccountHistory_Amended").Cells(giRow + 1, 10).Value * Sheets("AccountHistory_Amended").Cells(giRow + 1, 11).Value, 2)
        Sheets("AccountHistory_Amended").Cells(giRow + 1, 14).Value = Sheets("AccountHistory_Amended").Cells(giRow + 1, 12).Value
        Sheets("AccountHistory_Amended").Cells(giRow + 1, 21).Value = (Sheets("AccountHistory_Amended").Cells(giRow, 21).Value + 1000000)

        Sheets("AccountHistory_Amended").Cells(giRow, 10).Value = 1.35550734
        Sheets("AccountHistory_Amended").Cells(giRow, 11).Value = Sheets("AccountHistory_Amended").Cells(giRow, 11).Value - Sheets("AccountHistory_Amended").Cells(giRow + 1, 11).Value
        Sheets("AccountHistory_Amended").Cells(giRow, 12).Value = Round(Sheets("AccountHistory_Amended").Cells(giRow, 10).Value * Sheets("AccountHistory_Amended").Cells(giRow, 11).Value, 2)
        Sheets("AccountHistory_Amended").Cells(giRow, 14).Value = Sheets("AccountHistory_Amended").Cells(giRow, 12).Value
        Sheets("AccountHistory_Amended").Cells(giRow, 21).Value = (Sheets("AccountHistory_Amended").Cells(giRow, 21).Value + 2000000)
                            
        giRow = giRow + 1 'add one to giRow to allow for additional row
           
    End If

    ' Adjust unit price, transaction value and corporate action ID on Omnis Global Emerging Markets Equity Leaders fund
    If Sheets("AccountHistory_Amended").Cells(giRow, 3).Value = "AssetAdjustment" _
        And (Sheets("AccountHistory_Amended").Cells(giRow, 21).Value = 49874 Or Sheets("AccountHistory_Amended").Cells(giRow, 21).Value = 6971) _
        And Sheets("AccountHistory_Amended").Cells(giRow, 7).Value = "GB00BJRD8D37" _
        And Sheets("AccountHistory_Amended").Cells(giRow, 11).Value > 0 Then
        
        Sheets("AccountHistory_Amended").Cells(giRow, 10).Value = 1
        Sheets("AccountHistory_Amended").Cells(giRow, 12).Value = Round(Sheets("AccountHistory_Amended").Cells(giRow, 10).Value * Sheets("AccountHistory_Amended").Cells(giRow, 11).Value, 2)
        Sheets("AccountHistory_Amended").Cells(giRow, 14).Value = Sheets("AccountHistory_Amended").Cells(giRow, 12).Value
        Sheets("AccountHistory_Amended").Cells(giRow, 21).Value = (Sheets("AccountHistory_Amended").Cells(giRow, 21).Value + 1000000)
        
    End If

    ' Adjust unit price, transaction value and corporate action ID on Omnis Global Emerging Markets Equity Opportunities fund
    If Sheets("AccountHistory_Amended").Cells(giRow, 3).Value = "AssetAdjustment" _
        And (Sheets("AccountHistory_Amended").Cells(giRow, 21).Value = 49874 Or Sheets("AccountHistory_Amended").Cells(giRow, 21).Value = 6971) _
        And Sheets("AccountHistory_Amended").Cells(giRow, 7).Value = "GB00BJRD8H74" _
        And Sheets("AccountHistory_Amended").Cells(giRow, 11).Value > 0 Then
        
        Sheets("AccountHistory_Amended").Cells(giRow, 10).Value = 1
        Sheets("AccountHistory_Amended").Cells(giRow, 12).Value = Round(Sheets("AccountHistory_Amended").Cells(giRow, 10).Value * Sheets("AccountHistory_Amended").Cells(giRow, 11).Value, 2)
        Sheets("AccountHistory_Amended").Cells(giRow, 14).Value = Sheets("AccountHistory_Amended").Cells(giRow, 12).Value
        Sheets("AccountHistory_Amended").Cells(giRow, 21).Value = (Sheets("AccountHistory_Amended").Cells(giRow, 21).Value + 2000000)
        
    End If
    
    'Identify Corporate Action for outgoing Omnis European Equity fund (August 2019)
    If Sheets("AccountHistory_Amended").Cells(giRow, 3).Value = "AssetAdjustment" _
        And (Sheets("AccountHistory_Amended").Cells(giRow, 21).Value = 49870 Or Sheets("AccountHistory_Amended").Cells(giRow, 21).Value = 6967) _
        And Sheets("AccountHistory_Amended").Cells(giRow, 7).Value = "GB00BD2MLZ66" _
        And Sheets("AccountHistory_Amended").Cells(giRow, 11).Value < 0 Then
        
        'Add in a new "AssetAdjustment" row to split the Omnis corporate action row to align to new funds
        Sheets("AccountHistory_Amended").Range(Cells(giRow, 1), Cells(giRow, 21)).Select
        Selection.Copy
        Selection.Insert Shift:=xlDown
        Sheets("AccountHistory_Amended").Cells(giRow + 1, 10).Value = 1.27080995
        Sheets("AccountHistory_Amended").Cells(giRow + 1, 11).Value = Round(Sheets("AccountHistory_Amended").Cells(giRow, 11).Value * 0.5, 4)
        Sheets("AccountHistory_Amended").Cells(giRow + 1, 12).Value = Round(Sheets("AccountHistory_Amended").Cells(giRow + 1, 10).Value * Sheets("AccountHistory_Amended").Cells(giRow + 1, 11).Value, 2)
        Sheets("AccountHistory_Amended").Cells(giRow + 1, 14).Value = Sheets("AccountHistory_Amended").Cells(giRow + 1, 12).Value
        Sheets("AccountHistory_Amended").Cells(giRow + 1, 21).Value = (Sheets("AccountHistory_Amended").Cells(giRow, 21).Value + 1000000)

        Sheets("AccountHistory_Amended").Cells(giRow, 10).Value = 1.27080995
        Sheets("AccountHistory_Amended").Cells(giRow, 11).Value = Sheets("AccountHistory_Amended").Cells(giRow, 11).Value - Sheets("AccountHistory_Amended").Cells(giRow + 1, 11).Value
        Sheets("AccountHistory_Amended").Cells(giRow, 12).Value = Round(Sheets("AccountHistory_Amended").Cells(giRow, 10).Value * Sheets("AccountHistory_Amended").Cells(giRow, 11).Value, 2)
        Sheets("AccountHistory_Amended").Cells(giRow, 14).Value = Sheets("AccountHistory_Amended").Cells(giRow, 12).Value
        Sheets("AccountHistory_Amended").Cells(giRow, 21).Value = (Sheets("AccountHistory_Amended").Cells(giRow, 21).Value + 2000000)
                            
        giRow = giRow + 1 'add one to giRow to allow for additional row
           
    End If

    ' Adjust unit price, transaction value and corporate action ID on Omnis European Equity Leaders fund
    If Sheets("AccountHistory_Amended").Cells(giRow, 3).Value = "AssetAdjustment" _
        And (Sheets("AccountHistory_Amended").Cells(giRow, 21).Value = 49870 Or Sheets("AccountHistory_Amended").Cells(giRow, 21).Value = 6967) _
        And Sheets("AccountHistory_Amended").Cells(giRow, 7).Value = "GB00BJRD8887" _
        And Sheets("AccountHistory_Amended").Cells(giRow, 11).Value > 0 Then
        
        Sheets("AccountHistory_Amended").Cells(giRow, 10).Value = 1
        Sheets("AccountHistory_Amended").Cells(giRow, 12).Value = Round(Sheets("AccountHistory_Amended").Cells(giRow, 10).Value * Sheets("AccountHistory_Amended").Cells(giRow, 11).Value, 2)
        Sheets("AccountHistory_Amended").Cells(giRow, 14).Value = Sheets("AccountHistory_Amended").Cells(giRow, 12).Value
        Sheets("AccountHistory_Amended").Cells(giRow, 21).Value = (Sheets("AccountHistory_Amended").Cells(giRow, 21).Value + 1000000)
        
    End If
  
    ' Adjust unit price, transaction value and corporate action ID on Omnis European Equity Opportunities fund
    If Sheets("AccountHistory_Amended").Cells(giRow, 3).Value = "AssetAdjustment" _
        And (Sheets("AccountHistory_Amended").Cells(giRow, 21).Value = 49870 Or Sheets("AccountHistory_Amended").Cells(giRow, 21).Value = 6967) _
        And Sheets("AccountHistory_Amended").Cells(giRow, 7).Value = "GB00BJRD8994" _
        And Sheets("AccountHistory_Amended").Cells(giRow, 11).Value > 0 Then
        
        Sheets("AccountHistory_Amended").Cells(giRow, 10).Value = 1
        Sheets("AccountHistory_Amended").Cells(giRow, 12).Value = Round(Sheets("AccountHistory_Amended").Cells(giRow, 10).Value * Sheets("AccountHistory_Amended").Cells(giRow, 11).Value, 2)
        Sheets("AccountHistory_Amended").Cells(giRow, 14).Value = Sheets("AccountHistory_Amended").Cells(giRow, 12).Value
        Sheets("AccountHistory_Amended").Cells(giRow, 21).Value = (Sheets("AccountHistory_Amended").Cells(giRow, 21).Value + 2000000)
        
    End If
  
    'Identify Corporate Action for outgoing Omnis US Equity fund (August 2019)
    If Sheets("AccountHistory_Amended").Cells(giRow, 3).Value = "AssetAdjustment" _
        And (Sheets("AccountHistory_Amended").Cells(giRow, 21).Value = 49875 Or Sheets("AccountHistory_Amended").Cells(giRow, 21).Value = 6972) _
        And Sheets("AccountHistory_Amended").Cells(giRow, 7).Value = "GB00BDZR8689" _
        And Sheets("AccountHistory_Amended").Cells(giRow, 11).Value < 0 Then
        
        'Add in a new "AssetAdjustment" row to split the Omnis corporate action row to align to new funds
        Sheets("AccountHistory_Amended").Range(Cells(giRow, 1), Cells(giRow, 21)).Select
        Selection.Copy
        Selection.Insert Shift:=xlDown
        Sheets("AccountHistory_Amended").Cells(giRow + 1, 10).Value = 2.03343442
        Sheets("AccountHistory_Amended").Cells(giRow + 1, 11).Value = Round(Sheets("AccountHistory_Amended").Cells(giRow, 11).Value * 0.9, 4)
        Sheets("AccountHistory_Amended").Cells(giRow + 1, 12).Value = Round(Sheets("AccountHistory_Amended").Cells(giRow + 1, 10).Value * Sheets("AccountHistory_Amended").Cells(giRow + 1, 11).Value, 2)
        Sheets("AccountHistory_Amended").Cells(giRow + 1, 14).Value = Sheets("AccountHistory_Amended").Cells(giRow + 1, 12).Value

        Sheets("AccountHistory_Amended").Cells(giRow, 10).Value = 2.03343442
        Sheets("AccountHistory_Amended").Cells(giRow, 11).Value = Sheets("AccountHistory_Amended").Cells(giRow, 11).Value - Sheets("AccountHistory_Amended").Cells(giRow + 1, 11).Value
        Sheets("AccountHistory_Amended").Cells(giRow, 12).Value = Round(Sheets("AccountHistory_Amended").Cells(giRow, 10).Value * Sheets("AccountHistory_Amended").Cells(giRow, 11).Value, 2)
        Sheets("AccountHistory_Amended").Cells(giRow, 14).Value = Sheets("AccountHistory_Amended").Cells(giRow, 12).Value
                            
        giRow = giRow + 1 'add one to giRow to allow for additional row
           
    End If

    ' Adjust unit price and transaction values on Omnis US Equity Leaders and Omnis US Smaller Companies funds
    If Sheets("AccountHistory_Amended").Cells(giRow, 3).Value = "AssetAdjustment" _
        And (Sheets("AccountHistory_Amended").Cells(giRow, 21).Value = 49875 Or Sheets("AccountHistory_Amended").Cells(giRow, 21).Value = 6972) _
        And Sheets("AccountHistory_Amended").Cells(giRow, 11).Value > 0 Then
        
        Sheets("AccountHistory_Amended").Cells(giRow, 10).Value = 1
        Sheets("AccountHistory_Amended").Cells(giRow, 12).Value = Round(Sheets("AccountHistory_Amended").Cells(giRow, 10).Value * Sheets("AccountHistory_Amended").Cells(giRow, 11).Value, 2)
        Sheets("AccountHistory_Amended").Cells(giRow, 14).Value = Sheets("AccountHistory_Amended").Cells(giRow, 12).Value
        
    End If
  
    'Identify Corporate Action for outgoing Omnis Alternative Strategies fund (August 2019)
    If Sheets("AccountHistory_Amended").Cells(giRow, 3).Value = "AssetAdjustment" _
        And (Sheets("AccountHistory_Amended").Cells(giRow, 21).Value = 49871 Or Sheets("AccountHistory_Amended").Cells(giRow, 21).Value = 6968) _
        And Sheets("AccountHistory_Amended").Cells(giRow, 7).Value = "GB00BDZR8911" _
        And Sheets("AccountHistory_Amended").Cells(giRow, 11).Value < 0 Then
        
        'Add in a new "AssetAdjustment" row to split the Omnis corporate action row to align to new funds

        Sheets("AccountHistory_Amended").Range(Cells(giRow, 1), Cells(giRow, 21)).Select
        Selection.Copy
        Selection.Insert Shift:=xlDown
        
        Sheets("AccountHistory_Amended").Range(Cells(giRow, 1), Cells(giRow, 21)).Select
        Selection.Copy
        Selection.Insert Shift:=xlDown
        
        Sheets("AccountHistory_Amended").Cells(giRow + 1, 10).Value = 1.03110201
        Sheets("AccountHistory_Amended").Cells(giRow + 1, 11).Value = Round(Sheets("AccountHistory_Amended").Cells(giRow, 11).Value * 0.25, 4)
        Sheets("AccountHistory_Amended").Cells(giRow + 1, 12).Value = Round(Sheets("AccountHistory_Amended").Cells(giRow + 1, 10).Value * Sheets("AccountHistory_Amended").Cells(giRow + 1, 11).Value, 2)
        Sheets("AccountHistory_Amended").Cells(giRow + 1, 14).Value = Sheets("AccountHistory_Amended").Cells(giRow + 1, 12).Value
        Sheets("AccountHistory_Amended").Cells(giRow + 1, 21).Value = (Sheets("AccountHistory_Amended").Cells(giRow, 21).Value + 1000000)

        Sheets("AccountHistory_Amended").Cells(giRow + 2, 10).Value = 1.03110201
        Sheets("AccountHistory_Amended").Cells(giRow + 2, 11).Value = Round(Sheets("AccountHistory_Amended").Cells(giRow, 11).Value * 0.5, 4)
        Sheets("AccountHistory_Amended").Cells(giRow + 2, 12).Value = Round(Sheets("AccountHistory_Amended").Cells(giRow + 2, 10).Value * Sheets("AccountHistory_Amended").Cells(giRow + 2, 11).Value, 2)
        Sheets("AccountHistory_Amended").Cells(giRow + 2, 14).Value = Sheets("AccountHistory_Amended").Cells(giRow + 2, 12).Value
        Sheets("AccountHistory_Amended").Cells(giRow + 2, 21).Value = (Sheets("AccountHistory_Amended").Cells(giRow, 21).Value + 2000000)

        Sheets("AccountHistory_Amended").Cells(giRow, 10).Value = 1.03110201
        Sheets("AccountHistory_Amended").Cells(giRow, 11).Value = Sheets("AccountHistory_Amended").Cells(giRow, 11).Value - Sheets("AccountHistory_Amended").Cells(giRow + 1, 11).Value - Sheets("AccountHistory_Amended").Cells(giRow + 2, 11).Value
        Sheets("AccountHistory_Amended").Cells(giRow, 12).Value = Round(Sheets("AccountHistory_Amended").Cells(giRow, 10).Value * Sheets("AccountHistory_Amended").Cells(giRow, 11).Value, 2)
        Sheets("AccountHistory_Amended").Cells(giRow, 14).Value = Sheets("AccountHistory_Amended").Cells(giRow, 12).Value
        Sheets("AccountHistory_Amended").Cells(giRow, 21).Value = (Sheets("AccountHistory_Amended").Cells(giRow, 21).Value + 3000000)
                            
        giRow = giRow + 2 'add one to giRow to allow for additional rows

    End If

    ' Adjust unit price, transaction value and corporate action ID on Omnis Absolute Return Bond fund
    If Sheets("AccountHistory_Amended").Cells(giRow, 3).Value = "AssetAdjustment" _
        And (Sheets("AccountHistory_Amended").Cells(giRow, 21).Value = 49871 Or Sheets("AccountHistory_Amended").Cells(giRow, 21).Value = 6968) _
        And Sheets("AccountHistory_Amended").Cells(giRow, 7).Value = "GB00BJ5FRQ72" _
        And Sheets("AccountHistory_Amended").Cells(giRow, 11).Value > 0 Then
        
        Sheets("AccountHistory_Amended").Cells(giRow, 10).Value = 1
        Sheets("AccountHistory_Amended").Cells(giRow, 12).Value = Round(Sheets("AccountHistory_Amended").Cells(giRow, 10).Value * Sheets("AccountHistory_Amended").Cells(giRow, 11).Value, 2)
        Sheets("AccountHistory_Amended").Cells(giRow, 14).Value = Sheets("AccountHistory_Amended").Cells(giRow, 12).Value
        Sheets("AccountHistory_Amended").Cells(giRow, 21).Value = (Sheets("AccountHistory_Amended").Cells(giRow, 21).Value + 1000000)
        
    End If

    ' Adjust unit price, transaction value and corporate action ID on Omnis Diversified Alternatives fund
    If Sheets("AccountHistory_Amended").Cells(giRow, 3).Value = "AssetAdjustment" _
        And (Sheets("AccountHistory_Amended").Cells(giRow, 21).Value = 49871 Or Sheets("AccountHistory_Amended").Cells(giRow, 21).Value = 6968) _
        And Sheets("AccountHistory_Amended").Cells(giRow, 7).Value = "GB00BJ5FRR89" _
        And Sheets("AccountHistory_Amended").Cells(giRow, 11).Value > 0 Then
        
        Sheets("AccountHistory_Amended").Cells(giRow, 10).Value = 1
        Sheets("AccountHistory_Amended").Cells(giRow, 12).Value = Round(Sheets("AccountHistory_Amended").Cells(giRow, 10).Value * Sheets("AccountHistory_Amended").Cells(giRow, 11).Value, 2)
        Sheets("AccountHistory_Amended").Cells(giRow, 14).Value = Sheets("AccountHistory_Amended").Cells(giRow, 12).Value
        Sheets("AccountHistory_Amended").Cells(giRow, 21).Value = (Sheets("AccountHistory_Amended").Cells(giRow, 21).Value + 2000000)
        
    End If

    ' Adjust unit price, transaction value and corporate action ID on Omnis Short-Dated Bond fund
    If Sheets("AccountHistory_Amended").Cells(giRow, 3).Value = "AssetAdjustment" _
        And (Sheets("AccountHistory_Amended").Cells(giRow, 21).Value = 49871 Or Sheets("AccountHistory_Amended").Cells(giRow, 21).Value = 6968) _
        And Sheets("AccountHistory_Amended").Cells(giRow, 7).Value = "GB00BJ5FRS96" _
        And Sheets("AccountHistory_Amended").Cells(giRow, 11).Value > 0 Then
        
        Sheets("AccountHistory_Amended").Cells(giRow, 10).Value = 1
        Sheets("AccountHistory_Amended").Cells(giRow, 12).Value = Round(Sheets("AccountHistory_Amended").Cells(giRow, 10).Value * Sheets("AccountHistory_Amended").Cells(giRow, 11).Value, 2)
        Sheets("AccountHistory_Amended").Cells(giRow, 14).Value = Sheets("AccountHistory_Amended").Cells(giRow, 12).Value
        Sheets("AccountHistory_Amended").Cells(giRow, 21).Value = (Sheets("AccountHistory_Amended").Cells(giRow, 21).Value + 3000000)
        
    End If

giRow = giRow + 1

Loop

'-- END OF NEW CODE

'Loop through Amended Account History worksheet to find Asset transfer ins and replace values in the amount and transaction amount column
giRow = 2

Do While Sheets("AccountHistory_Amended").Cells(giRow, 1).Value <> ""

    If Sheets("AccountHistory_Amended").Cells(giRow, 3).Value = "AssetTransferIn_Portfolio" Then
        
        'Displays the "Transfer In user form" for user to enter total cost of the transfer in
        Set gblfrmTransferIn = New frmTransferIn
        gblfrmTransferIn.Show
              
        Sheets("AccountHistory_Amended").Cells(giRow, 12).Value = Round(gdblTransferInValue, 2)
        Sheets("AccountHistory_Amended").Cells(giRow, 14).Value = Round(gdblTransferInValue, 2)
   
    End If

giRow = giRow + 1

Loop

Application.ScreenUpdating = True
Application.ScreenUpdating = False

'Sort Amended Account History worksheet by date
Sheets("AccountHistory_Amended").Select
Range("A1").Select
iLastRow = Cells(Rows.Count, 1).End(xlUp).Row
Range(Selection, Selection.End(xlDown)).Select
Range(Selection, Selection.End(xlToRight)).Select
ActiveWorkbook.Worksheets("AccountHistory_Amended").Sort.SortFields.Clear
ActiveWorkbook.Worksheets("AccountHistory_Amended").Sort.SortFields.Add Key:=Range("A2:A" & iLastRow), SortOn:=xlSortOnValues, Order:=xlAscending, DataOption:=xlSortNormal
With ActiveWorkbook.Worksheets("AccountHistory_Amended").Sort
    .SetRange Range("A1:U" & iLastRow)
    .Header = xlYes
    .MatchCase = False
    .Orientation = xlTopToBottom
    .SortMethod = xlPinYin
    .Apply
End With
Range("A1").Select

'Clear out any existing data from the FundConversion worksheet
Sheets("FundConversions").Select
Range("A2:N10000").Select
Selection.ClearContents

j = 2
iRow = 2

'Search for sub-fund switches that should not be classified as disposal for capital gains
'Search for purchases within 5 days (to allow for weekends) of a sell where the value is less than |fffd|0.01 different
'Code picks up any different fund and then gives user the choice to ensure the fund is correct
Do While Sheets("AccountHistory_Amended").Cells(iRow, 1).Value > 0 'i.e. stop once reach bottom of data

        If Sheets("AccountHistory_Amended").Cells(iRow, 3).Value = "AssetSale" Then
        
        i = 1 'Initialise to look in row immediately beneath
        
        Do While Round(Sheets("AccountHistory_Amended").Cells(iRow + i, 1).Value - Sheets("AccountHistory_Amended").Cells(iRow, 1).Value, 0) <= 5 _
                   And Sheets("AccountHistory_Amended").Cells(iRow + i, 1).Value > 0
                        
            If Sheets("AccountHistory_Amended").Cells(iRow + i, 3).Value = "AssetPurchase" And _
               Sheets("AccountHistory_Amended").Cells(iRow + i, 7).Value <> Sheets("AccountHistory_Amended").Cells(iRow, 7).Value And _
               Abs(Round(Sheets("AccountHistory_Amended").Cells(iRow + i, 12).Value + Sheets("AccountHistory_Amended").Cells(iRow, 12).Value, 2)) <= 0.01 Then
                               
                Sheets("FundConversions").Cells(j, 1).Value = iRow 'Row reference to enable duplicates top be spotted
                Sheets("FundConversions").Cells(j, 12).Value = 1 'Flag to prompt userform to include entry
                Sheets("FundConversions").Cells(j, 13).Value = iRow + i 'Row reference for buy in Data worksheet
                
                If Sheets("FundConversions").Cells(j, 1).Value = Sheets("FundConversions").Cells(j - 1, 1).Value Then
                   'count of potential conversions
                    
                    Sheets("FundConversions").Cells(j, 2).Value = Sheets("FundConversions").Cells(j - 1, 2).Value
                    Sheets("FundConversions").Cells(j, 14).Value = 1 'flag to prompt userform to include in ComboBox
                    Sheets("FundConversions").Cells(j - 1, 14).Value = 1 'flag to prompt userform to include in ComboBox
                
                Else
                
                    If j = 1 Then
                    
                        Sheets("FundConversions").Cells(j, 2).Value = 1
                    
                    Else
                        
                        Sheets("FundConversions").Cells(j, 2).Value = Sheets("FundConversions").Cells(j - 1, 2).Value + 1
                                        
                    End If
                
                    Sheets("FundConversions").Cells(j, 14).Value = 0 'flag to prompt userform to include in ComboBox
                
                End If
                
                Sheets("FundConversions").Cells(j, 3).Value = Sheets("AccountHistory_Amended").Cells(iRow, 1).Value 'Date of fund sold
                Sheets("FundConversions").Cells(j, 4).Value = Sheets("AccountHistory_Amended").Cells(iRow, 8).Value 'Fund name sold
                Sheets("FundConversions").Cells(j, 5).Value = Sheets("AccountHistory_Amended").Cells(iRow, 7).Value 'ISIN code of fund sold
                Sheets("FundConversions").Cells(j, 6).Value = -Sheets("AccountHistory_Amended").Cells(iRow, 11).Value 'No. of units from fund sold
                Sheets("FundConversions").Cells(j, 7).Value = -Sheets("AccountHistory_Amended").Cells(iRow, 12).Value 'Value of units sold
                Sheets("FundConversions").Cells(j, 8).Value = Sheets("AccountHistory_Amended").Cells(iRow + i, 8).Value 'Fund name bought
                Sheets("FundConversions").Cells(j, 9).Value = Sheets("AccountHistory_Amended").Cells(iRow + i, 7).Value 'ISIN code of fund bought
                Sheets("FundConversions").Cells(j, 10).Value = Sheets("AccountHistory_Amended").Cells(iRow + i, 11).Value 'No. of units from fund bought
                Sheets("FundConversions").Cells(j, 11).Value = Sheets("AccountHistory_Amended").Cells(iRow + i, 12).Value 'Value of units bought
                
                j = j + 1
                
            End If
            
            i = i + 1
            
        Loop

    End If

iRow = iRow + 1

Loop

Sheets("FundConversions").Select
Range("A1").Select

'Bring up fund conversion form to enable user to identify correct fund switches / conversions if any duplicates
If Sheets("FundConversions").Cells(2, 3).Value > 0 Then
    
    Set gblfrmFundConversions = New frmFundConversions
    
    gblfrmFundConversions.Show
   
End If

iRow = 2

'Update data in Amended Account History worksheet now that the user has identified the correct fund switches / conversions
Do While Sheets("AccountHistory_Amended").Cells(iRow, 1).Value > 0

    If Sheets("AccountHistory_Amended").Cells(iRow, 3).Value = "AssetSale" Then
        
        i = 1
        
        Do While Round(Sheets("AccountHistory_Amended").Cells(iRow + i, 1).Value - Sheets("AccountHistory_Amended").Cells(iRow, 1).Value, 0) <= 5 _
                   And Sheets("AccountHistory_Amended").Cells(iRow + i, 1).Value > 0
            
            If Sheets("AccountHistory_Amended").Cells(iRow + i, 3).Value = "AssetPurchase" And _
               Sheets("AccountHistory_Amended").Cells(iRow + i, 7).Value <> Sheets("AccountHistory_Amended").Cells(iRow, 7).Value And _
               Abs(Round(Sheets("AccountHistory_Amended").Cells(iRow + i, 12).Value + Sheets("AccountHistory_Amended").Cells(iRow, 12).Value, 2)) <= 0.01 Then
                               
                j = 2
                
                Do While Sheets("FundConversions").Cells(j, 1).Value > 0
                    
                    If Sheets("FundConversions").Cells(j, 1).Value = iRow And _
                       Sheets("FundConversions").Cells(j, 13).Value = (iRow + i) And _
                       Sheets("FundConversions").Cells(j, 12).Value = 1 Then
                                                      
                        Sheets("AccountHistory_Amended").Cells(iRow, 3).Value = "SubfundSwitchOut"
                        Sheets("AccountHistory_Amended").Cells(iRow, 17).Value = Sheets("AccountHistory_Amended").Cells(iRow + i, 7).Value & " SubFund Switch " & iRow & " From"
                        Sheets("AccountHistory_Amended").Cells(iRow + i, 3).Value = "SubfundSwitchIn"
                        Sheets("AccountHistory_Amended").Cells(iRow + i, 17).Value = Sheets("AccountHistory_Amended").Cells(iRow + i, 7).Value & " SubFund Switch " & iRow & " To"
                    
                        Exit Do

                    End If
                
                j = j + 1
                
                Loop
                
            End If
        
        i = i + 1
        
        Loop
        
    End If

iRow = iRow + 1

Loop

Sheets("AccountHistory_Amended").Select
Range("A1").Select
iLastRow = Cells(Rows.Count, 1).End(xlUp).Row
Range(Selection, Selection.End(xlDown)).Select
Range(Selection, Selection.End(xlToRight)).Select
ActiveWorkbook.Worksheets("AccountHistory_Amended").Sort.SortFields.Clear
ActiveWorkbook.Worksheets("AccountHistory_Amended").Sort.SortFields.Add Key:=Range("A2:A" & iLastRow), SortOn:=xlSortOnValues, Order:=xlAscending, DataOption:=xlSortNormal
ActiveWorkbook.Worksheets("AccountHistory_Amended").Sort.SortFields.Add Key:=Range("O2:O" & iLastRow), SortOn:=xlSortOnValues, Order:=xlAscending, DataOption:=xlSortNormal
ActiveWorkbook.Worksheets("AccountHistory_Amended").Sort.SortFields.Add Key:=Range("Q2:Q" & iLastRow), SortOn:=xlSortOnValues, Order:=xlAscending, DataOption:=xlSortNormal
ActiveWorkbook.Worksheets("AccountHistory_Amended").Sort.SortFields.Add Key:=Range("P2:P" & iLastRow), SortOn:=xlSortOnValues, Order:=xlAscending, DataOption:=xlSortNormal
With ActiveWorkbook.Worksheets("AccountHistory_Amended").Sort
    .SetRange Range("A1:U" & iLastRow)
    .Header = xlYes
    .MatchCase = False
    .Orientation = xlTopToBottom
    .SortMethod = xlPinYin
    .Apply
End With
Range("A1").Select

'Clear out any existing data from the FundMerger worksheet
Sheets("FundMergers").Select
Range("A2:K10000").Select
Selection.ClearContents

j = 2
iRow = 2

'Search for corporate actions that are fund mergers
'Search for asset adjustments that occur on the same day for the same value
'Code picks up any different fund
Do While Sheets("AccountHistory_Amended").Cells(iRow, 1).Value > 0 'i.e. stop once reach bottom of data

        If Sheets("AccountHistory_Amended").Cells(iRow, 3).Value = "AssetAdjustment" Then
        
        i = 1 'Initialise to look in row immediately beneath
        
        Do While Round(Sheets("AccountHistory_Amended").Cells(iRow + i, 1).Value - Sheets("AccountHistory_Amended").Cells(iRow, 1).Value, 0) = 0 _
                   And Sheets("AccountHistory_Amended").Cells(iRow + i, 1).Value > 0
                        
            If Sheets("AccountHistory_Amended").Cells(iRow + i, 3).Value = "AssetAdjustment" And _
               Sheets("AccountHistory_Amended").Cells(iRow + i, 7).Value <> Sheets("AccountHistory_Amended").Cells(iRow, 7).Value And _
               Sheets("AccountHistory_Amended").Cells(iRow + i, 21).Value = Sheets("AccountHistory_Amended").Cells(iRow, 21).Value And _
               Abs(Round(Sheets("AccountHistory_Amended").Cells(iRow + i, 12).Value + Sheets("AccountHistory_Amended").Cells(iRow, 12).Value, 2)) <= 1 Then
                               
                Sheets("FundMergers").Cells(j, 1).Value = iRow 'Row reference
                Sheets("FundMergers").Cells(j, 11).Value = iRow + i 'Row reference for buy in Data worksheet
                                                
                Sheets("FundMergers").Cells(j, 2).Value = Sheets("AccountHistory_Amended").Cells(iRow, 1).Value 'Date of fund sold
                Sheets("FundMergers").Cells(j, 3).Value = Sheets("AccountHistory_Amended").Cells(iRow, 8).Value 'Fund name sold
                Sheets("FundMergers").Cells(j, 4).Value = Sheets("AccountHistory_Amended").Cells(iRow, 7).Value 'ISIN code of fund sold
                Sheets("FundMergers").Cells(j, 5).Value = Sheets("AccountHistory_Amended").Cells(iRow, 11).Value 'No. of units from fund sold
                Sheets("FundMergers").Cells(j, 6).Value = Sheets("AccountHistory_Amended").Cells(iRow, 12).Value 'Value of units sold
                Sheets("FundMergers").Cells(j, 7).Value = Sheets("AccountHistory_Amended").Cells(iRow + i, 8).Value 'Fund name bought
                Sheets("FundMergers").Cells(j, 8).Value = Sheets("AccountHistory_Amended").Cells(iRow + i, 7).Value 'ISIN code of fund bought
                Sheets("FundMergers").Cells(j, 9).Value = Sheets("AccountHistory_Amended").Cells(iRow + i, 11).Value 'No. of units from fund bought
                Sheets("FundMergers").Cells(j, 10).Value = Sheets("AccountHistory_Amended").Cells(iRow + i, 12).Value 'Value of units bought
                
                j = j + 1
                
            End If
            
            i = i + 1
            
        Loop

    End If

iRow = iRow + 1

Loop

Sheets("FundMergers").Select
Range("A1").Select

'Bring up fund merger form to show user the fund mergers that have occurred on the portfolio
If Sheets("FundMergers").Cells(2, 3).Value > 0 Then
    
    Set gblfrmFundMergers = New frmFundMerger
    
    gblfrmFundMergers.Show
   
End If

iRow = 2

'Update data in Amended Account History worksheet to amend asset adjustments as fund mergers
Do While Sheets("AccountHistory_Amended").Cells(iRow, 1).Value > 0 'i.e. stop once reach bottom of data

        If Sheets("AccountHistory_Amended").Cells(iRow, 3).Value = "AssetAdjustment" Then
        
        i = 1
        
        Do While Round(Sheets("AccountHistory_Amended").Cells(iRow + i, 1).Value - Sheets("AccountHistory_Amended").Cells(iRow, 1).Value, 0) = 0 _
                   And Sheets("AccountHistory_Amended").Cells(iRow + i, 1).Value > 0
                        
            If Sheets("AccountHistory_Amended").Cells(iRow + i, 3).Value = "AssetAdjustment" And _
               Sheets("AccountHistory_Amended").Cells(iRow + i, 7).Value <> Sheets("AccountHistory_Amended").Cells(iRow, 7).Value And _
               Sheets("AccountHistory_Amended").Cells(iRow + i, 21).Value = Sheets("AccountHistory_Amended").Cells(iRow, 21).Value And _
               Abs(Round(Sheets("AccountHistory_Amended").Cells(iRow + i, 12).Value + Sheets("AccountHistory_Amended").Cells(iRow, 12).Value, 2)) <= 1 Then
                                    
                j = 2
                
                Do While Sheets("FundMergers").Cells(j, 1).Value > 0
                    
                    If Sheets("FundMergers").Cells(j, 1).Value = iRow And Sheets("FundMergers").Cells(j, 11).Value = (iRow + i) Then
                                                                             
                        Sheets("AccountHistory_Amended").Cells(iRow, 3).Value = "FundMergerOut"
                        Sheets("AccountHistory_Amended").Cells(iRow, 16).Value = Sheets("AccountHistory_Amended").Cells(iRow + i, 7).Value & " Fund Merger " & iRow & " From"
                        Sheets("AccountHistory_Amended").Cells(iRow + i, 3).Value = "FundMergerIn"
                        Sheets("AccountHistory_Amended").Cells(iRow + i, 16).Value = Sheets("AccountHistory_Amended").Cells(iRow + i, 7).Value & " Fund Merger " & iRow & " To"
                    
                        Exit Do

                    End If
                
                j = j + 1
                
                Loop
                
            End If
        
        i = i + 1
        
        Loop
        
    End If

iRow = iRow + 1

Loop

'Sort data by date, Order ID, share class conversion (if From & To occur on same day) & then Corporate Action
Sheets("AccountHistory_Amended").Select
Range("A1").Select
iLastRow = Cells(Rows.Count, 1).End(xlUp).Row
Range(Selection, Selection.End(xlDown)).Select
Range(Selection, Selection.End(xlToRight)).Select
ActiveWorkbook.Worksheets("AccountHistory_Amended").Sort.SortFields.Clear
ActiveWorkbook.Worksheets("AccountHistory_Amended").Sort.SortFields.Add Key:=Range("A2:A" & iLastRow), SortOn:=xlSortOnValues, Order:=xlAscending, DataOption:=xlSortNormal
ActiveWorkbook.Worksheets("AccountHistory_Amended").Sort.SortFields.Add Key:=Range("O2:O" & iLastRow), SortOn:=xlSortOnValues, Order:=xlAscending, DataOption:=xlSortNormal
ActiveWorkbook.Worksheets("AccountHistory_Amended").Sort.SortFields.Add Key:=Range("Q2:Q" & iLastRow), SortOn:=xlSortOnValues, Order:=xlAscending, DataOption:=xlSortNormal
ActiveWorkbook.Worksheets("AccountHistory_Amended").Sort.SortFields.Add Key:=Range("P2:P" & iLastRow), SortOn:=xlSortOnValues, Order:=xlAscending, DataOption:=xlSortNormal
With ActiveWorkbook.Worksheets("AccountHistory_Amended").Sort
    .SetRange Range("A1:U" & iLastRow)
    .Header = xlYes
    .MatchCase = False
    .Orientation = xlTopToBottom
    .SortMethod = xlPinYin
    .Apply
End With
Range("A1").Select

'Loop through Amended Account History worksheet to find any remaining Asset adjustments that implies there has been manual processing errors
giRow = 2

Do While Sheets("AccountHistory_Amended").Cells(giRow, 1).Value <> ""

    If Sheets("AccountHistory_Amended").Cells(giRow, 3).Value = "AssetAdjustment" Then
    
        MsgBox "ERROR: Unable to process Portfolio through the Capital Gains Tool due to manual corrections on the Investment Account."
        
        Call Refresh
        
        Exit Sub
    
    End If

giRow = giRow + 1

Loop

Call GainLossCalc
Call CreateSummary

'Hide input worksheets to only show output
Sheets("FundConversions").Visible = False
Sheets("FundMergers").Visible = False
Sheets("AccountHistory_Amended").Visible = False
Sheets("AccountInfo").Visible = False
Sheets("AccountHistory").Visible = False
Sheets("FundHistory").Visible = False
Sheets("TaxYears").Visible = False
Sheets("AccountHolding").Visible = False

'Protect Workbook
ActiveWorkbook.Protect Password:="ZurichCG2016"

Sheets("Gain & Loss Summary").Select

Application.ScreenUpdating = True

End Sub
Attribute VB_Name = "Planner"
Sub CGTPlanner()

    Set gblfrmCGTPlanner = New frmCGTPlanner
    gblfrmCGTPlanner.Show

    'Add in formatting and column headings
    Sheets("Capital Gains Tax Planner").Select
    Sheets("Capital Gains Tax Planner").Cells(10, 12).Value = "Sale Proceeds Target"
    Sheets("Capital Gains Tax Planner").Cells(10, 13).Value = "Capital Gains Target"
    Range(Cells(10, 12), Cells(10, 13)).Select
    With Selection.Interior
        .Pattern = xlSolid
        .PatternColorIndex = xlAutomatic
        .ThemeColor = xlThemeColorLight2
        .TintAndShade = 0.799981688894314
        .PatternTintAndShade = 0
    End With
    With Selection.Font
        .ThemeColor = xlThemeColorLight2
        .TintAndShade = 0
    End With
    Selection.Font.Bold = True
    Selection.Borders.LineStyle = xlContinuous

'Unprotect Workbook
ActiveWorkbook.Unprotect Password:="ZurichCG2016"

Sheets("AccountHolding").Visible = True

'Calculate required sales proceeds if a target capital gain has been selected to maximise this years' CGT Allowance
If giPlannerOption = 1 Then
             
    Sheets("AccountHolding").Select
    iNumFunds = Cells(300, 1).End(xlUp).Row - 1
    Sheets("Capital Gains Tax Planner").Select
    iRow = 11
    
        Do While Sheets("Capital Gains Tax Planner").Cells(iRow, 2) <> ""
            
            For iFundReference = 1 To iNumFunds
                    
                Sheets("Capital Gains Tax Planner").Cells(iRow, 13).Value = Round(gdblMaxCGTTarget * (Sheets("Capital Gains Tax Planner").Cells(iRow, 10).Value / Sheets("Capital Gains Tax Planner").Cells(iNumFunds + 12, 10).Value), 2)
                Sheets("Capital Gains Tax Planner").Cells(iRow, 12).Value = Round(Sheets("Capital Gains Tax Planner").Cells(iRow, 7).Value * (Sheets("Capital Gains Tax Planner").Cells(iRow, 13).Value / Sheets("Capital Gains Tax Planner").Cells(iRow, 10).Value), 2)
                                        
            Next iFundReference
    
        iRow = iRow + 1
        iFundReference = 1
    
        Loop
        
    'Calculate required sales proceeds if a target capital gain has been selected
    ElseIf giPlannerOption = 2 Then
            
        Sheets("AccountHolding").Select
        iNumFunds = Cells(300, 1).End(xlUp).Row - 1
        Sheets("Capital Gains Tax Planner").Select
        iRow = 11
    
        Do While Sheets("Capital Gains Tax Planner").Cells(iRow, 2) <> ""
            
            For iFundReference = 1 To iNumFunds
                    
                Sheets("Capital Gains Tax Planner").Cells(iRow, 13).Value = Round(gdblCGTTarget * (Sheets("Capital Gains Tax Planner").Cells(iRow, 10).Value / Sheets("Capital Gains Tax Planner").Cells(iNumFunds + 12, 10).Value), 2)
                Sheets("Capital Gains Tax Planner").Cells(iRow, 12).Value = Round(Sheets("Capital Gains Tax Planner").Cells(iRow, 7).Value * (Sheets("Capital Gains Tax Planner").Cells(iRow, 13).Value / Sheets("Capital Gains Tax Planner").Cells(iRow, 10).Value), 2)
                                        
            Next iFundReference
    
        iRow = iRow + 1
        iFundReference = 1
    
        Loop
        
    'Calculate required sales proceeds if a target sales proceeds amount has been selected
    ElseIf giPlannerOption = 3 Then
        
        Sheets("AccountHolding").Select
        iNumFunds = Cells(300, 1).End(xlUp).Row - 1
        Sheets("Capital Gains Tax Planner").Select
        iRow = 11
    
        Do While Sheets("Capital Gains Tax Planner").Cells(iRow, 2) <> ""
            
            For iFundReference = 1 To iNumFunds
                    
                Sheets("Capital Gains Tax Planner").Cells(iRow, 12).Value = Round(gdblSalesProceedsTarget * (Sheets("Capital Gains Tax Planner").Cells(iRow, 7).Value / Sheets("Capital Gains Tax Planner").Cells(iNumFunds + 12, 7).Value), 2)
                Sheets("Capital Gains Tax Planner").Cells(iRow, 13).Value = Round(Sheets("Capital Gains Tax Planner").Cells(iRow, 10).Value * (Sheets("Capital Gains Tax Planner").Cells(iRow, 12).Value / Sheets("Capital Gains Tax Planner").Cells(iRow, 7).Value), 2)
                
            Next iFundReference
    
        iRow = iRow + 1
        iFundReference = 1
    
        Loop
           
End If

'Sum totals for CGT Target and Sales Proceeds Target columns
Sheets("Capital Gains Tax Planner").Cells(iNumFunds + 11, 12).Select
ActiveCell.Offset(1).Value = WorksheetFunction.Sum(Range(Cells(11, ActiveCell.Column), ActiveCell))
Sheets("Capital Gains Tax Planner").Cells(iNumFunds + 11, 13).Select
ActiveCell.Offset(1).Value = WorksheetFunction.Sum(Range(Cells(11, ActiveCell.Column), ActiveCell))

'Add in formatting
Range(Cells(iNumFunds + 12, 12), Cells(iNumFunds + 12, 13)).Select
    With Selection.Interior
        .Pattern = xlSolid
        .PatternColorIndex = xlAutomatic
        .ThemeColor = xlThemeColorLight2
        .TintAndShade = 0.799981688894314
        .PatternTintAndShade = 0
    End With
    With Selection.Font
        .ThemeColor = xlThemeColorLight2
        .TintAndShade = 0
        .Bold = True
        .Size = 14
    End With
    Selection.Borders(xlEdgeTop).LineStyle = xlContinuous
    Selection.Borders(xlEdgeTop).Weight = xlHairline
    Selection.Borders(xlEdgeBottom).LineStyle = xlContinuous
    Selection.Borders(xlEdgeBottom).Weight = xlHairline

If giPlannerCancel = 1 Then

    Call CGTPlannerRemove

End If

Sheets("AccountHolding").Visible = False

'Protect Workbook
ActiveWorkbook.Protect Password:="ZurichCG2016"

End Sub


Attribute VB_Name = "PlannerRemove"
Sub CGTPlannerRemove()

Application.ScreenUpdating = False

'Remove previous summary data and formatting
Sheets("Capital Gains Tax Planner").Select
Cells.Select
Range("L11:M1000").Select
Selection.ClearContents
Selection.Font.Bold = False
Selection.Font.Size = 11
With Selection.Font
    .ThemeColor = xlThemeColorLight1
    .TintAndShade = 0
End With
With Selection.Interior
    .Pattern = xlNone
    .TintAndShade = 0
    .PatternTintAndShade = 0
End With
Selection.Borders.LineStyle = xlNone

Sheets("Capital Gains Tax Planner").Select
Cells.Select
Range("L10:M10").Select
Selection.ClearContents
Selection.Font.Bold = False
Selection.Font.Size = 11
With Selection.Font
    .ThemeColor = xlThemeColorLight1
    .TintAndShade = 0
End With
With Selection.Interior
    .Pattern = xlNone
    .TintAndShade = 0
    .PatternTintAndShade = 0
End With
Selection.Borders.LineStyle = xlNone

Application.ScreenUpdating = True

End Sub
Attribute VB_Name = "PrintSummary"
Sub PrintSummary()
Attribute PrintSummary.VB_ProcData.VB_Invoke_Func = " \n14"

    'Hides the button before printing
    Sheets("Gain & Loss Summary").Shapes.Range(Array("Rounded Rectangle 1")).Select
    With Selection.ShapeRange.Fill
        .Visible = msoTrue
        .ForeColor.ObjectThemeColor = msoThemeColorBackground1
        .ForeColor.TintAndShade = 0
        .ForeColor.Brightness = 0
        .Transparency = 0
        .Solid
    End With
    With Selection.ShapeRange.Line
        .Visible = msoTrue
        .ForeColor.ObjectThemeColor = msoThemeColorBackground1
        .ForeColor.TintAndShade = 0
        .ForeColor.Brightness = 0
        .Transparency = 0
    End With
    
    Sheets("Gain & Loss Summary").Select
    Range("A1").Select
    
    'Print the worksheet
    ActiveWindow.SelectedSheets.PrintOut Copies:=1, Collate:=True, _
        IgnorePrintAreas:=False
    
    'Brings the button back after printing
    Sheets("Gain & Loss Summary").Shapes.Range(Array("Rounded Rectangle 1")).Select
    With Selection.ShapeRange.Fill
        .Visible = msoTrue
        .ForeColor.ObjectThemeColor = msoThemeColorAccent1
        .ForeColor.TintAndShade = 0
        .ForeColor.Brightness = 0
        .Transparency = 0
        .Solid
    End With
    With Selection.ShapeRange.Line
        .Visible = msoTrue
        .ForeColor.ObjectThemeColor = msoThemeColorAccent1
        .ForeColor.TintAndShade = 0
        .ForeColor.Brightness = 0
        .Transparency = 0
    End With
    
    Sheets("Gain & Loss Summary").Select
    Range("A1").Select
    
End Sub
Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Summary"
Sub CreateSummary()

Dim iRow As Integer
Dim iFund As Integer
Dim iNumFunds As Integer
Dim iFundReference As Integer
Dim iTaxYear As Integer
Dim iNumTaxYears As Integer
Dim dblSaleProceeds As Double
Dim dblGainLoss As Double
Dim strTaxYearReference As String

Dim dblTotalSaleProceeds(200, 200) As Double 'Running total of the sale proceeds per fund
Dim dblTotalGainLoss(200, 200) As Double 'Running total of the gain or loss per fund

Application.ScreenUpdating = False

'Remove previous summary data and formatting
Sheets("Gain & Loss Summary").Select
Cells.Select
Range("B11:Z1000").Select
Selection.ClearContents
Selection.Font.Bold = False
Selection.Font.Size = 11
With Selection.Font
    .ThemeColor = xlThemeColorLight1
    .TintAndShade = 0
End With
With Selection.Interior
    .Pattern = xlNone
    .TintAndShade = 0
    .PatternTintAndShade = 0
End With
Selection.Borders.LineStyle = xlNone

Range("D10:Z10").Select
Selection.ClearContents
Selection.Font.Bold = False
Selection.Font.Size = 11
With Selection.Font
    .ThemeColor = xlThemeColorLight1
    .TintAndShade = 0
End With
With Selection.Interior
    .Pattern = xlNone
    .TintAndShade = 0
    .PatternTintAndShade = 0
End With
Selection.Borders.LineStyle = xlNone

Range("ZurichPortfolio").Value = ""
Range("ClientName").Value = ""
Range("AdviserName").Value = ""
Range("FirmName").Value = ""
Range("ReportDate").Value = ""

Range("ZurichPortfolio").Value = Sheets("AccountInfo").Range("A2").Value
Range("ClientName").Value = Sheets("AccountInfo").Range("B2").Value
Range("AdviserName").Value = Sheets("AccountInfo").Range("D2").Value
Range("FirmName").Value = Sheets("AccountInfo").Range("C2").Value
Range("ReportDate").Value = Sheets("AccountInfo").Range("E2").Value

'Create template to complete for Gains & Losses Summary worksheet
Sheets("FundHistory").Select
Range("B2:C1000").Select
Selection.Copy
Sheets("Gain & Loss Summary").Select
Range("B11").Select
Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks:=False, Transpose:=False
Application.CutCopyMode = False
Range("B10:C1000").Columns.AutoFit
Range("A1").Select

Sheets("TaxYears").Select
iNumTaxYears = Cells(300, 1).End(xlUp).Row - 1 'returns the row number of the last entry in column A

    For iTaxYear = 1 To iNumTaxYears
        
        Sheets("Gain & Loss Summary").Cells(10, (2 * iTaxYear) + 2).Value = "Sale proceeds for " & Sheets("TaxYears").Cells(iTaxYear + 1, 2).Value & " Tax Year"
        Sheets("Gain & Loss Summary").Cells(10, (2 * iTaxYear) + 3).Value = "Gain/Loss for " & Sheets("TaxYears").Cells(iTaxYear + 1, 2).Value & " Tax Year"
        Sheets("Gain & Loss Summary").Select
        Cells(10, (2 * iTaxYear) + 2).Select
        With Selection.Interior
            .Pattern = xlSolid
            .PatternColorIndex = xlAutomatic
            .ThemeColor = xlThemeColorLight2
            .TintAndShade = 0.799981688894314
            .PatternTintAndShade = 0
        End With
        With Selection.Font
            .ThemeColor = xlThemeColorLight2
            .TintAndShade = 0
        End With
        Selection.Font.Bold = True
        Selection.Borders.LineStyle = xlContinuous
        Cells(10, (2 * iTaxYear) + 3).Select
        With Selection.Interior
            .Pattern = xlSolid
            .PatternColorIndex = xlAutomatic
            .ThemeColor = xlThemeColorLight2
            .TintAndShade = 0.799981688894314
            .PatternTintAndShade = 0
        End With
        With Selection.Font
            .ThemeColor = xlThemeColorLight2
            .TintAndShade = 0
        End With
        Selection.Font.Bold = True
        Selection.Borders.LineStyle = xlContinuous
        
    Next iTaxYear

Sheets("FundHistory").Select
iNumFunds = Cells(300, 1).End(xlUp).Row - 1 'returns the row number of the last entry in column A

Sheets("Gain & Loss Summary").Select
Sheets("Gain & Loss Summary").Cells(iNumFunds + 12, 2) = "Total Values in the Tax Year"
Range(Cells(11, 4), Cells(iNumFunds + 10, (2 * iNumTaxYears) + 3)).Value = 0

iRow = 2
  
Do While Sheets("Gain & Loss Calculations").Cells(iRow, 1) <> ""
        
        For iFundReference = 1 To iNumFunds
        
            For iTaxYear = 1 To iNumTaxYears
            
                strTaxYearReference = Sheets("TaxYears").Cells(iTaxYear + 1, 2).Value
                
                If Sheets("Gain & Loss Calculations").Cells(iRow, 4).Value = iFundReference And _
                    Sheets("Gain & Loss Calculations").Cells(iRow, 2).Value = strTaxYearReference Then

                    dblGainLoss = Sheets("Gain & Loss Calculations").Cells(iRow, 14).Value
                    dblTotalGainLoss(iFundReference, iTaxYear) = dblTotalGainLoss(iFundReference, iTaxYear) + dblGainLoss
                    Sheets("Gain & Loss Summary").Cells(iFundReference + 10, (2 * iTaxYear) + 3).Value = dblTotalGainLoss(iFundReference, iTaxYear)
                    Sheets("Gain & Loss Summary").Cells(iNumFunds + 11, (2 * iTaxYear) + 3).Select
                    ActiveCell.Offset(1).Value = WorksheetFunction.Sum(Range(Cells(11, ActiveCell.Column), ActiveCell))
                    
                    dblSaleProceeds = Sheets("Gain & Loss Calculations").Cells(iRow, 9).Value
                    dblTotalSaleProceeds(iFundReference, iTaxYear) = dblTotalSaleProceeds(iFundReference, iTaxYear) + dblSaleProceeds
                    Sheets("Gain & Loss Summary").Cells(iFundReference + 10, (2 * iTaxYear) + 2).Value = dblTotalSaleProceeds(iFundReference, iTaxYear)
                    Sheets("Gain & Loss Summary").Cells(iNumFunds + 11, (2 * iTaxYear) + 2).Select
                    ActiveCell.Offset(1).Value = WorksheetFunction.Sum(Range(Cells(11, ActiveCell.Column), ActiveCell))
                                    
                    Exit For
                    
                End If
                                            
            Next iTaxYear
            
        Next iFundReference

iRow = iRow + 1

Loop

'Add in Formatting
Sheets("Gain & Loss Summary").Select
Range(Cells(iNumFunds + 12, 2), Cells(iNumFunds + 12, (2 * iNumTaxYears) + 3)).Select
    With Selection.Interior
        .Pattern = xlSolid
        .PatternColorIndex = xlAutomatic
        .ThemeColor = xlThemeColorLight2
        .TintAndShade = 0.799981688894314
        .PatternTintAndShade = 0
    End With
    With Selection.Font
        .ThemeColor = xlThemeColorLight2
        .TintAndShade = 0
        .Bold = True
        .Size = 14
    End With
    Selection.Borders(xlEdgeTop).LineStyle = xlContinuous
    Selection.Borders(xlEdgeTop).Weight = xlHairline
    Selection.Borders(xlEdgeBottom).LineStyle = xlContinuous
    Selection.Borders(xlEdgeBottom).Weight = xlHairline

Sheets("Gain & Loss Summary").Select
Range(Cells(10, 4), Cells(iNumFunds + 12, (2 * iNumTaxYears) + 3)).Columns.ColumnWidth = 20
Range("A1").Select

'Remove previous summary data and formatting
Sheets("Capital Gains Tax Planner").Select
Cells.Select
Range("B11:N1000").Select
Selection.ClearContents
Selection.Font.Bold = False
Selection.Font.Size = 11
With Selection.Font
    .ThemeColor = xlThemeColorLight1
    .TintAndShade = 0
End With
With Selection.Interior
    .Pattern = xlNone
    .TintAndShade = 0
    .PatternTintAndShade = 0
End With
Selection.Borders.LineStyle = xlNone

Sheets("Capital Gains Tax Planner").Select
Cells.Select
Range("L10:M10").Select
Selection.ClearContents
Selection.Font.Bold = False
Selection.Font.Size = 11
With Selection.Font
    .ThemeColor = xlThemeColorLight1
    .TintAndShade = 0
End With
With Selection.Interior
    .Pattern = xlNone
    .TintAndShade = 0
    .PatternTintAndShade = 0
End With
Selection.Borders.LineStyle = xlNone

Range("ZurichPortfolio2").Value = ""
Range("ClientName2").Value = ""
Range("AdviserName2").Value = ""
Range("FirmName2").Value = ""
Range("ReportDate2").Value = ""

'Add in client details to Capital Gains Tax Planner worksheet
Range("ZurichPortfolio2").Value = Sheets("AccountInfo").Range("A2").Value
Range("ClientName2").Value = Sheets("AccountInfo").Range("B2").Value
Range("AdviserName2").Value = Sheets("AccountInfo").Range("D2").Value
Range("FirmName2").Value = Sheets("AccountInfo").Range("C2").Value
Range("ReportDate2").Value = Sheets("AccountHolding").Range("A2").Value

'Copy data from Account Holding to Capital Gains Tax Planner worksheet
Sheets("AccountHolding").Select
Range("F2:K1000").Select
Selection.Copy
Sheets("Capital Gains Tax Planner").Select
Range("B11").Select
Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks:=False, Transpose:=False
Application.CutCopyMode = False
Range("A1").Select

Sheets("Capital Gains Tax Planner").Cells(6, 8).Value = 0
Sheets("Capital Gains Tax Planner").Cells(7, 8).Value = 0

Sheets("FundHistory").Select
iNumFunds = Cells(300, 1).End(xlUp).Row - 1 'returns the row number of the last entry in column A

iRow = 11
  
Do While Sheets("Capital Gains Tax Planner").Cells(iRow, 2) <> ""
        
        For iFundReference = 1 To iNumFunds
                
            If Sheets("Capital Gains Tax Planner").Cells(iRow, 2).Value = Sheets("FundHistory").Cells(iFundReference + 1, 2) Then
            
                Sheets("Capital Gains Tax Planner").Cells(iRow, 9).Value = Sheets("FundHistory").Cells(iFundReference + 1, 6)
                Sheets("Capital Gains Tax Planner").Cells(iRow, 8).Value = Round(Sheets("Capital Gains Tax Planner").Cells(iRow, 6).Value2 * Sheets("Capital Gains Tax Planner").Cells(iRow, 9).Value2, 2)
                Sheets("Capital Gains Tax Planner").Cells(iRow, 10).Value = (Sheets("Capital Gains Tax Planner").Cells(iRow, 7).Value - Sheets("Capital Gains Tax Planner").Cells(iRow, 8).Value)
                Sheets("Capital Gains Tax Planner").Cells(iRow, 11).Value = (Sheets("Capital Gains Tax Planner").Cells(iRow, 10).Value / Sheets("Capital Gains Tax Planner").Cells(iRow, 8).Value)
                                                     
                Exit For
                    
            End If
            
        Next iFundReference

iRow = iRow + 1
iFundReference = 1

Loop

Sheets("AccountHolding").Select
iNumFunds = Cells(300, 1).End(xlUp).Row - 1 'returns the row number of the last entry in column A

Sheets("Capital Gains Tax Planner").Select
Sheets("Capital Gains Tax Planner").Cells(iNumFunds + 12, 2) = "Total Values"

Sheets("Capital Gains Tax Planner").Cells(iNumFunds + 11, 7).Select
ActiveCell.Offset(1).Value = WorksheetFunction.Sum(Range(Cells(11, ActiveCell.Column), ActiveCell))
Sheets("Capital Gains Tax Planner").Cells(iNumFunds + 11, 8).Select
ActiveCell.Offset(1).Value = WorksheetFunction.Sum(Range(Cells(11, ActiveCell.Column), ActiveCell))
Sheets("Capital Gains Tax Planner").Cells(iNumFunds + 11, 10).Select
ActiveCell.Offset(1).Value = WorksheetFunction.Sum(Range(Cells(11, ActiveCell.Column), ActiveCell))

'Add in Formatting
Sheets("Capital Gains Tax Planner").Select
Range(Cells(iNumFunds + 12, 2), Cells(iNumFunds + 12, 11)).Select
    With Selection.Interior
        .Pattern = xlSolid
        .PatternColorIndex = xlAutomatic
        .ThemeColor = xlThemeColorLight2
        .TintAndShade = 0.799981688894314
        .PatternTintAndShade = 0
    End With
    With Selection.Font
        .ThemeColor = xlThemeColorLight2
        .TintAndShade = 0
        .Bold = True
        .Size = 14
    End With
    Selection.Borders(xlEdgeTop).LineStyle = xlContinuous
    Selection.Borders(xlEdgeTop).Weight = xlHairline
    Selection.Borders(xlEdgeBottom).LineStyle = xlContinuous
    Selection.Borders(xlEdgeBottom).Weight = xlHairline

Sheets("Capital Gains Tax Planner").Select
Range("A1").Select

Sheets("Gain & Loss Summary").Select

End Sub
Attribute VB_Name = "TaxYears"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "TermsOfUse"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

Attribute VB_Name = "TermsOfUse1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Workbook_Open()

Sheets("Terms of Use").Activate

If Application.CommandBars("Ribbon").Height >= 100 Then
    
    SendKeys "^{F1}"

End If

ActiveWindow.Zoom = 85

End Sub

Private Sub Workbook_BeforeClose(Cancel As Boolean)

If Application.CommandBars("Ribbon").Height <= 100 Then
    
    SendKeys "^{F1}"

End If

End Sub
Attribute VB_Name = "frmCGTPlanner"
Attribute VB_Base = "0{FBE52675-73B3-4862-951F-A7B3C0A2EEA3}{2E9D8D3D-34D6-4251-B519-718E23B391E0}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub UserForm_Activate()

    OptButMaxCGT.Value = True

    CGTTargetTextBox.Visible = False
    CGTTargetTextBox.Enabled = False

    SalesProceedsTargetTextBox.Visible = False
    SalesProceedsTargetTextBox.Enabled = False

End Sub

Private Sub OptButMaxCGT_Click()

'Re-disable & hide the two text boxes
If OptButMaxCGT.Value = True Then
    
    CGTTargetTextBox.Visible = False
    CGTTargetTextBox.Enabled = False
    SalesProceedsTargetTextBox.Visible = False
    SalesProceedsTargetTextBox.Enabled = False

End If

End Sub

Private Sub OptButCGTTarget_Click()

'Enable user to enter a value in the Capital Gains Target text box if select second option
If OptButCGTTarget.Value = True Then
    
    CGTTargetTextBox.Visible = True
    CGTTargetTextBox.Enabled = True
    SalesProceedsTargetTextBox.Visible = False
    SalesProceedsTargetTextBox.Enabled = False
    
End If

End Sub

Private Sub OptButSalesProceedsTarget_Click()

'Enable user to enter a value in the Sales Proceeds Target text box if select third option
If OptButSalesProceedsTarget.Value = True Then
    
    CGTTargetTextBox.Visible = False
    CGTTargetTextBox.Enabled = False
    SalesProceedsTargetTextBox.Visible = True
    SalesProceedsTargetTextBox.Enabled = True

End If

End Sub

Private Sub cmdContinue_Click()

If OptButMaxCGT.Value = True Then

    gdblMaxCGTTarget = Sheets("Capital Gains Tax Planner").Cells(8, 8).Value
    giPlannerOption = 1
    giPlannerCancel = 0
    gblfrmCGTPlanner.Hide
    Application.ScreenUpdating = True
    Application.ScreenUpdating = False
    Set gblfrmCGTPlanner = Nothing

ElseIf OptButCGTTarget.Value = True Then

    'Capture Value entered in Capital Gains Target text box and convert Text to Double
    If Trim(CGTTargetTextBox.Text) = "" Then
        CGTTargetTextBox.SetFocus
    Else
        gdblCGTTarget = Val(CGTTargetTextBox.Text)
        giPlannerOption = 2
        giPlannerCancel = 0
        gblfrmCGTPlanner.Hide
        Application.ScreenUpdating = True
        Application.ScreenUpdating = False
        Set gblfrmCGTPlanner = Nothing
    End If

ElseIf OptButSalesProceedsTarget.Value = True Then
    
    'Capture Value entered in Sales Proceeds Target text box and convert Text to Double
    If Trim(SalesProceedsTargetTextBox.Text) = "" Then
        SalesProceedsTargetTextBox.SetFocus
    Else
        gdblSalesProceedsTarget = Val(SalesProceedsTargetTextBox.Text)
        giPlannerOption = 3
        giPlannerCancel = 0
        gblfrmCGTPlanner.Hide
        Application.ScreenUpdating = True
        Application.ScreenUpdating = False
        Set gblfrmCGTPlanner = Nothing
    End If

End If

End Sub


Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)

    gblfrmCGTPlanner.Hide
    
    Set gblfrmCGTPlanner = Nothing
    
    giPlannerCancel = 1
    
    'Application.DisplayAlerts = False
    'Application.Quit
    'ActiveWorkbook.Close
    'Application.DisplayAlerts = True

End Sub
Attribute VB_Name = "frmFundConversions"
Attribute VB_Base = "0{47F423CF-2290-4076-965F-2276AF989873}{67598E78-6B77-4FC8-9671-604FB9680B20}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub UserForm_Activate()

Dim iLastRow As Integer
Dim iFundConvCnt As Integer
Dim iRowCnt As Integer
Dim iDup As Integer

    iRowCnt = 1
    Sheets("FundConversions").Select
    Range("A1").Select
    iLastRow = Cells(Rows.Count, 3).End(xlUp).Row 'returns the row number of the last entry in column C
    
    Set AddAllowLabel = Me.Controls.Add("Forms.Label.1", "AllowLabel", True)
    AddAllowLabel.Caption = "Treat switch as exempt?"
    AddAllowLabel.Left = 590
    AddAllowLabel.Width = 60
    AddAllowLabel.Top = 10
    AddAllowLabel.Height = 20
    AddAllowLabel.FontSize = 9
    AddAllowLabel.FontBold = True
        
    Set AddLineLabel = Me.Controls.Add("Forms.Label.1", "AllowLine", True)
    AddLineLabel.Caption = "-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------"
    AddLineLabel.Left = 6
    AddLineLabel.Width = 650
    AddLineLabel.Top = 30
    AddLineLabel.FontSize = 9
    AddLineLabel.FontBold = True
    
    For iFundConvCnt = 1 To iLastRow
        
        Set AddDateLabel = Me.Controls.Add("Forms.Label.1", "DateLabel" & (iRowCnt), True)
        AddDateLabel.Caption = Sheets("FundConversions").Cells(iFundConvCnt, 3).Value
        AddDateLabel.Left = 6
        AddDateLabel.Width = 54
        AddDateLabel.Top = 10 + 35 * (iRowCnt - 1)
        AddDateLabel.FontSize = 9
        AddDateLabel.FontBold = True
                    
        Set AddAmtLabel = Me.Controls.Add("Forms.Label.1", "AmtLabel" & (iRowCnt), True)
        AddAmtLabel.Caption = Format(Sheets("FundConversions").Cells(iFundConvCnt, 7).Value, "Currency")
        AddAmtLabel.Left = 70
        AddAmtLabel.Width = 70
        AddAmtLabel.Top = 10 + 35 * (iRowCnt - 1)
        AddAmtLabel.FontSize = 9
        AddAmtLabel.FontBold = True
            
        Set AddFromFundLabel = Me.Controls.Add("Forms.Label.1", "FromFundLabel" & (iRowCnt), True)
        AddFromFundLabel.Caption = Sheets("FundConversions").Cells(iFundConvCnt, 4).Value & " (" & Sheets("FundConversions").Cells(iFundConvCnt, 5).Value & ")"
        AddFromFundLabel.Left = 140
        AddFromFundLabel.AutoSize = True
        AddFromFundLabel.Width = 230
        AddFromFundLabel.Top = 10 + 35 * (iRowCnt - 1)
        AddFromFundLabel.FontSize = 9
        AddFromFundLabel.FontBold = True
        
        If iFundConvCnt > 1 Then
            
            Set gblAddCheckBox(iRowCnt) = Me.Controls.Add("Forms.CheckBox.1", "CheckBox" & iRowCnt)
            gblAddCheckBox(iRowCnt).Left = 610
            gblAddCheckBox(iRowCnt).Top = 10 + 35 * (iRowCnt - 1)
            gblAddCheckBox(iRowCnt).Width = 50
            gblAddCheckBox(iRowCnt).FontSize = 9
            gblAddCheckBox(iRowCnt).Enabled = True
                    
            If Sheets("FundConversions").Cells(iFundConvCnt, 12) = 1 Then 'Always have the boxes as unticked when form pops up
                
                gblAddCheckBox(iRowCnt).Value = False
            
            Else
                
                gblAddCheckBox(iRowCnt).Value = True
            
            End If
        
        End If
        
        If Sheets("FundConversions").Cells(iFundConvCnt, 14) = 1 Then  'i.e. single sell matches more than one buy
            
            Set gblAddComboBox(iRowCnt) = Me.Controls.Add("Forms.ComboBox.1", "ComboBox" & iRowCnt)
            gblAddComboBox(iRowCnt).Left = 370
            gblAddComboBox(iRowCnt).Top = 10 + 35 * (iRowCnt - 1)
            gblAddComboBox(iRowCnt).Width = 230
            gblAddComboBox(iRowCnt).FontSize = 9
            
            iDup = 0
            Do While Sheets("FundConversions").Cells(iFundConvCnt, 1) = Sheets("FundConversions").Cells(iFundConvCnt + iDup, 1)
            
                gblAddComboBox(iRowCnt).AddItem Sheets("FundConversions").Cells(iFundConvCnt + iDup, 8) & " (" & Sheets("FundConversions").Cells(iFundConvCnt + iDup, 9).Value & ")"
            
            iDup = iDup + 1
            Loop
            
            gblAddComboBox(iRowCnt).Enabled = True
            gblAddComboBox(iRowCnt).Value = Sheets("FundConversions").Cells(iFundConvCnt, 8) & " (" & Sheets("FundConversions").Cells(iFundConvCnt, 9).Value & ")"
            
            iFundConvCnt = iFundConvCnt + iDup - 1
        
        ElseIf Sheets("FundConversions").Cells(iFundConvCnt, 14) = 0 Or iFundConvCnt = 1 Then
        
            Set AddToFundLabel = Me.Controls.Add("Forms.Label.1", "ToFundLabel" & iRowCnt, True)
            AddToFundLabel.Caption = Sheets("FundConversions").Cells(iFundConvCnt, 8).Value & " (" & Sheets("FundConversions").Cells(iFundConvCnt, 9).Value & ")"
            AddToFundLabel.Left = 370
            AddToFundLabel.AutoSize = True
            AddToFundLabel.Width = 230
            AddToFundLabel.Top = 10 + 35 * (iRowCnt - 1)
            AddToFundLabel.FontSize = 9
            AddToFundLabel.FontBold = True
        
        End If
        
        iRowCnt = iRowCnt + 1
        
    Next iFundConvCnt
    
    'Define the size of the userform
    Me.ScrollHeight = iRowCnt * 35 + 60
    Me.Height = WorksheetFunction.Min(iRowCnt * 35 + 80, 300)
    
    'Move command button to the bottom of the worksheet
    cmdContinue.Left = 250
    cmdContinue.Top = iRowCnt * 35
    cmdContinue.Width = 200
    cmdContinue.Height = 30
    cmdContinue.FontSize = 12
    cmdContinue.Caption = "Continue"
    cmdContinue.Visible = True

End Sub
Private Sub cmdContinue_Click()

Dim iLastRow As Integer
Dim iCBoxCnt As Integer
Dim iDup As Integer
Dim iDupCnt As Integer
Dim iAction As Integer

    iLastRow = Sheets("FundConversions").Cells(Rows.Count, 3).End(xlUp).Row 'returns the row number of the last entry in column B
    
    iDupCnt = 0
    
    'first possible CheckBox/ComboBox is 2 (i.e. there is no CheckBox1 or ComboBox1)
    For iCBoxCnt = 2 To iLastRow
            
        If Sheets("FundConversions").Cells(iCBoxCnt, 14).Value = 0 Then 'i.e. single sell matches single buy entry
        
            If gblAddCheckBox(iCBoxCnt - iDupCnt).Value = True Then 'check box ticked
                
                Sheets("FundConversions").Cells(iCBoxCnt, 12).Value = 1
            
            ElseIf gblAddCheckBox(iCBoxCnt - iDupCnt).Value = False Then 'check box unticked
                
                Sheets("FundConversions").Cells(iCBoxCnt, 12).Value = 0
            
            End If
        
        ElseIf Sheets("FundConversions").Cells(iCBoxCnt, 14).Value = 1 Then 'i.e. single sell matches more than one buy entry
            
            iDup = 0
            
            Do While Sheets("FundConversions").Cells(iCBoxCnt + iDup, 1).Value = Sheets("FundConversions").Cells(iCBoxCnt, 1).Value
            
                If Sheets("FundConversions").Cells(iCBoxCnt + iDup, 8).Value & " (" & Sheets("FundConversions").Cells(iCBoxCnt + iDup, 9).Value & ")" = gblAddComboBox(iCBoxCnt - iDupCnt).Value Then
                    
                    If gblAddCheckBox(iCBoxCnt - iDupCnt).Value = True Then
                    
                        Sheets("FundConversions").Cells(iCBoxCnt + iDup, 12).Value = 1
                                            
                    ElseIf gblAddCheckBox(iCBoxCnt - iDupCnt).Value = False Then
                        
                        Sheets("FundConversions").Cells(iCBoxCnt + iDup, 12).Value = 0
                    
                    End If
                    
                Else
                    
                    Sheets("FundConversions").Cells(iCBoxCnt + iDup, 12).Value = 0
                
                End If
            
            iDup = iDup + 1
            
            Loop
        
        iDupCnt = iDupCnt + (iDup - 1)
        
        End If
            
    iCBoxCnt = iCBoxCnt + WorksheetFunction.Max(0, (iDup - 1))
    
    iDup = 0
    
    Next iCBoxCnt
    
    gblfrmFundConversions.Hide
    
    Application.ScreenUpdating = True
    
    Application.ScreenUpdating = False
    
    Set gblfrmFundConversions = Nothing
        
    iAction = MsgBox("Disposals for any switches that have been ticked will be treated as exempt for capital gains tax calculations. Disposals for any switches that have not been ticked will be calculated as a capital gain or loss.", vbOKCancel)
      
    If iAction <> 1 Then
     
        Application.DisplayAlerts = False
        Application.Quit
        ActiveWorkbook.Close
        Application.DisplayAlerts = True
        
    End If

End Sub

Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)

    gblfrmFundConversions.Hide
    
    Set gblfrmFundConversions = Nothing
    
    Application.DisplayAlerts = False
    Application.Quit
    ActiveWorkbook.Close
    Application.DisplayAlerts = True

End Sub
Attribute VB_Name = "frmFundMerger"
Attribute VB_Base = "0{D0CDE9AF-7A92-4353-B2E0-63CB31073E05}{B88B0833-FF79-4AED-A123-63C2E3F9F61C}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Private Sub UserForm_Activate()

Dim iLastRow As Integer
Dim iFundConvCnt As Integer
Dim iRowCnt As Integer
Dim iDup As Integer

    iRowCnt = 1
    Sheets("FundMergers").Select
    Range("A1").Select
    iLastRow = Cells(Rows.Count, 3).End(xlUp).Row 'returns the row number of the last entry in column C
        
    Set AddLineLabel = Me.Controls.Add("Forms.Label.1", "AllowLine", True)
    AddLineLabel.Caption = "-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------"
    AddLineLabel.Left = 6
    AddLineLabel.Width = 650
    AddLineLabel.Top = 30
    AddLineLabel.FontSize = 9
    AddLineLabel.FontBold = True
    
    For iFundConvCnt = 1 To iLastRow
        
        Set AddDateLabel = Me.Controls.Add("Forms.Label.1", "DateLabel" & (iRowCnt), True)
        AddDateLabel.Caption = Sheets("FundMergers").Cells(iFundConvCnt, 2).Value
        AddDateLabel.Left = 6
        AddDateLabel.Width = 54
        AddDateLabel.Top = 10 + 35 * (iRowCnt - 1)
        AddDateLabel.FontSize = 9
        AddDateLabel.FontBold = True
                    
        Set AddAmtLabel = Me.Controls.Add("Forms.Label.1", "AmtLabel" & (iRowCnt), True)
        AddAmtLabel.Caption = Format(Sheets("FundMergers").Cells(iFundConvCnt, 10).Value, "Currency")
        AddAmtLabel.Left = 70
        AddAmtLabel.Width = 70
        AddAmtLabel.Top = 10 + 35 * (iRowCnt - 1)
        AddAmtLabel.FontSize = 9
        AddAmtLabel.FontBold = True
            
        Set AddFromFundLabel = Me.Controls.Add("Forms.Label.1", "FromFundLabel" & (iRowCnt), True)
        AddFromFundLabel.Caption = Sheets("FundMergers").Cells(iFundConvCnt, 3).Value & " (" & Sheets("FundMergers").Cells(iFundConvCnt, 4).Value & ")"
        AddFromFundLabel.Left = 140
        AddFromFundLabel.AutoSize = True
        AddFromFundLabel.Width = 270
        AddFromFundLabel.Top = 10 + 35 * (iRowCnt - 1)
        AddFromFundLabel.FontSize = 9
        AddFromFundLabel.FontBold = True
        
        Set AddToFundLabel = Me.Controls.Add("Forms.Label.1", "ToFundLabel" & iRowCnt, True)
        AddToFundLabel.Caption = Sheets("FundMergers").Cells(iFundConvCnt, 7).Value & " (" & Sheets("FundMergers").Cells(iFundConvCnt, 8).Value & ")"
        AddToFundLabel.Left = 410
        AddToFundLabel.AutoSize = True
        AddToFundLabel.Width = 270
        AddToFundLabel.Top = 10 + 35 * (iRowCnt - 1)
        AddToFundLabel.FontSize = 9
        AddToFundLabel.FontBold = True
            
        iRowCnt = iRowCnt + 1
        
    Next iFundConvCnt
    
    'Define the size of the userform
    Me.ScrollHeight = iRowCnt * 35 + 60
    Me.Height = WorksheetFunction.Min(iRowCnt * 35 + 80, 300)
    
    'Move command button to the bottom of the worksheet
    cmdContinue.Left = 250
    cmdContinue.Top = iRowCnt * 35
    cmdContinue.Width = 200
    cmdContinue.Height = 30
    cmdContinue.FontSize = 12
    cmdContinue.Caption = "Continue"
    cmdContinue.Visible = True

End Sub

Private Sub cmdContinue_Click()

    gblfrmFundMergers.Hide
    
    Application.ScreenUpdating = True
    
    Application.ScreenUpdating = False
    
    Set gblfrmFundMergers = Nothing

End Sub

Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)

    gblfrmFundMergers.Hide
    
    Set gblfrmFundMergers = Nothing
    
    Application.DisplayAlerts = False
    Application.Quit
    ActiveWorkbook.Close
    Application.DisplayAlerts = True

End Sub
Attribute VB_Name = "frmTermsOfUse"
Attribute VB_Base = "0{32F83FE6-7BB3-451A-8AFD-9958760044A1}{877546D1-FB03-48A1-9496-A0573FF59E90}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub cmdAccept_Click()

    gblfrmTermosOfUse.Hide
    
    Application.ScreenUpdating = True
    
    Application.ScreenUpdating = False
    
    Set gblfrmTermosOfUse = Nothing
    
End Sub

Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)

    gblfrmTermosOfUse.Hide
    
    Set gblfrmTermosOfUse = Nothing
    
    Application.DisplayAlerts = False
    Application.Quit
    ActiveWorkbook.Close
    Application.DisplayAlerts = True
    
End Sub
Attribute VB_Name = "frmTransferIn"
Attribute VB_Base = "0{7B28BA11-8F76-4045-A082-8C569071ED5C}{32A18C45-0D3B-44FC-9EF7-FFF87772482C}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub UserForm_Activate()

    'Initilaise Form using 'AccountHistory_Amended' worksheet values
    
    lblFundName = "  " & Sheets("AccountHistory_Amended").Cells(giRow, 8).Value
    
    lblISINCode = "  " & Sheets("AccountHistory_Amended").Cells(giRow, 7).Value
    
    lblUnitQty = "  " & Sheets("AccountHistory_Amended").Cells(giRow, 11).Value
    
    lblTransferInValue = "  |fffd|" & Sheets("AccountHistory_Amended").Cells(giRow, 12).Value
    
    lblDate = "  " & Sheets("AccountHistory_Amended").Cells(giRow, 1).Value
    
    TotalCostTextBox.SetFocus
    
End Sub
Private Sub cmdContinue_Click()

    'Capture Value entered and convert Text to Double
    If Trim(TotalCostTextBox.Text) = "" Then
        TotalCostTextBox.SetFocus
    Else
        gdblTransferInValue = Val(TotalCostTextBox.Text)
        gblfrmTransferIn.Hide
        Set gblfrmTransferIn = Nothing
    End If
    
End Sub

Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)

    gblfrmTransferIn.Hide
    
    Set gblfrmTransferIn = Nothing
    
    Application.DisplayAlerts = False
    Application.Quit
    ActiveWorkbook.Close
    Application.DisplayAlerts = True

End Sub


INQUEST-PP=macro
