Attribute VB_Name = "ALTA_EVENTO"
Attribute VB_Base = "0{1A79C3EE-2953-401D-8B8A-4C8C56007EDB}{F4C917A2-111A-43DD-A8BE-1377732519F3}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Private Sub BT_AYUDA_Click()

    FORM_AYUDA.Show
    
End Sub

Public Sub inicializarFormulario(ByVal nroSolicitud As Integer)

    If nroSolicitud = 0 Then
    
        ' Cargo la UG del USUARIO
        Dim queryConsulta As String
        Dim ugUsuario As String
        Dim idPermiso As Integer
            
        ugUsuario = Sheets(H_GENERALES).Range("H9").Value
        idPermiso = "" & Int(Left(Sheets(H_GENERALES).Range("C6").Value, 2)) & ""
    
        queryConsulta = "SELECT OW_CODIGO, DESCRIPCION FROM UGESTION WHERE OW_CODIGO ='" & ugUsuario & "' AND BAJA = 0 ORDER BY DESCRIPCION ASC"
        Call agregarAlComboBox(Me.CB_UGESTION, queryConsulta)
    
        Me.CB_UGESTION.ListIndex = 0
        Me.CB_UGESTION.Enabled = False
    
        ' Cargo los POZOS segun UG de USUARIO
        queryConsulta = "SELECT OW_COD_POZO, DESCRIPCION FROM POZOS WHERE OW_CODIGO_UG ='" & ugUsuario & "' AND BAJA = 0 ORDER BY DESCRIPCION ASC"
        Call agregarAlComboBox(Me.CB_POZO, queryConsulta)
        Me.CB_POZO.ListIndex = -1
        Me.CB_POZO.Enabled = True
        
        ' Si es usuario de CO/WO cambio ALTURA DE MESA por KELLY BUSHING
        If idPermiso = C_FUNCION_INGENIERO_WO Then
            Me.LA_ALTURA_MESA.Caption = "KELLY BUSHING"
        End If
            
            
        ' Pongo el formulario en su estado inicial
        Call resetearDatos
   
    Else
        
        ' Activo frame con numero de solicitud
        Me.FR_NRO_SOLICITUD.Visible = True
        Me.TB_NUMERO_SOLICITUD.Visible = True
        Me.TB_NUMERO_SOLICITUD.Value = nroSolicitud
        
        ' Desactivo los botones
        Me.BT_CANCELAR.Enabled = False
        Me.BT_DAR_ALTA.Enabled = False
        Me.BT_SOLICITAR.Enabled = False
        
        sqlstring = "SELECT  UG.OW_CODIGO, UG.DESCRIPCION " & _
                    "FROM " & _
                    "SOLICITUD S " & _
                    "JOIN EVENTO E ON E.ID_EVENTO = S.ID_EVENTO " & _
                    "JOIN UGESTION UG ON UG.OW_CODIGO = E.OW_COD_UNIDAD_GESTION " & _
                    "WHERE ID_SOLICITUD = " & nroSolicitud
                    
        Call agregarAlComboBox(Me.CB_UGESTION, sqlstring)
        Me.CB_UGESTION.ListIndex = 0
        Me.CB_UGESTION.Enabled = False
        
        sqlstring = "SELECT SP.OW_COD_POZO, SP.DESCRIPCION " & _
                    "FROM " & _
                    "SOLICITUD S " & _
                    "JOIN EVENTO E ON E.ID_EVENTO = S.ID_EVENTO " & _
                    "JOIN SOLICITUD_POZO SP ON SP.ID_POZO = E.ID_POZO " & _
                    "WHERE ID_SOLICITUD = " & nroSolicitud
                    
        Call agregarAlComboBox(Me.CB_POZO, sqlstring)
        Me.CB_POZO.ListIndex = 0
        Me.CB_POZO.Enabled = False
        
        sqlstring = "SELECT RTRIM(CONVERT(CHAR, FECHA_INICIO_EVENTO, 103)), ADJUSTED_BUDGET_V20, AUTHORIZED_TMD_V20, AUTHORIZED_TMD_V30, AUTHORIZED_TVD, " & _
                    "BASELINE, RIG_MOVE_DISTANCE, EWI, SO.OBSERVACIONES " & _
                    "FROM " & _
                    "SOLICITUD S " & _
                    "JOIN EVENTO E ON E.ID_EVENTO = S.ID_EVENTO " & _
                    "JOIN SOLICITUDES SO ON SO.ID_SOLICITUD = S.ID_SOLICITUD " & _
                    "WHERE S.ID_SOLICITUD = " & nroSolicitud
                    
        Set rs = ConsultarTablasBD(sqlstring)
        
        Me.TB_FECHA_INICIO.Value = rs.Fields(0)
        Me.TB_FECHA_INICIO.Enabled = False
        Me.TB_ADJUSTED_BUDGET.Value = rs.Fields(1)
        Me.TB_ADJUSTED_BUDGET.Enabled = False
        Me.TB_AUTHORIZED_TMD_V20.Value = rs.Fields(2)
        Me.TB_AUTHORIZED_TMD_V20.Enabled = False
        Me.TB_AUTHORIZED_TMD_V30.Value = rs.Fields(3)
        Me.TB_AUTHORIZED_TMD_V30.Enabled = False
        Me.TB_AUTHORIZED_TVD.Value = rs.Fields(4)
        Me.TB_AUTHORIZED_TVD.Enabled = False
        Me.TB_BASELINE.Value = rs.Fields(5)
        Me.TB_BASELINE.Enabled = False
        Me.TB_RIG_MOVE_DISTANCE.Value = rs.Fields(6)
        Me.TB_RIG_MOVE_DISTANCE.Enabled = False
        Me.TB_EWI.Value = rs.Fields(7)
        Me.TB_EWI.Enabled = False
        If IsNull(rs.Fields(8)) Then
            Me.tb_observaciones.Value = ""
        Else
            Me.tb_observaciones.Value = rs.Fields(8)
        End If
        Me.tb_observaciones.Enabled = False
        
        sqlstring = "SELECT E.OW_ID_TIPO_EVENTO, TE.COD_EVENTO, CONCAT(TE.COD_EVENTO, ' - ', TE.DESCRIPCION) " & _
                    "FROM " & _
                    "SOLICITUD S " & _
                    "JOIN EVENTO E ON E.ID_EVENTO = S.ID_EVENTO " & _
                    "JOIN TIPO_EVENTO TE ON TE.OW_ID_TIPO_EVENTO = E.OW_ID_TIPO_EVENTO " & _
                    "WHERE ID_SOLICITUD = " & nroSolicitud

        Call agregarAlComboBox(Me.CB_TIPO_EVENTO, sqlstring)
        Me.CB_TIPO_EVENTO.ListIndex = 0
        Me.CB_TIPO_EVENTO.Enabled = False
        
        idTipoEvento = Me.CB_TIPO_EVENTO.list(Me.CB_TIPO_EVENTO.ListIndex, 0)
        
        If idTipoEvento = C_CON_ID Or idTipoEvento = C_WO_ID Or idTipoEvento = C_ABN_ID Or idTipoEvento = C_REP_ID Then
            Me.LA_ALTURA_MESA.Caption = "KELLY BUSHING"
        End If
        
        sqlstring = "SELECT E.OW_ID_OBJETIVO_EVENTO, CONCAT(OE.DESCRIPCION, ' - ' ,OE.OW_DESC_SPANISH) " & _
                    "FROM SOLICITUD S " & _
                    "JOIN EVENTO E ON E.ID_EVENTO = S.ID_EVENTO " & _
                    "JOIN OBJETIVO_EVENTO OE ON OE.OW_ID_OBJETIVO_EVENTO = E.OW_ID_OBJETIVO_EVENTO " & _
                    "WHERE ID_SOLICITUD = " & nroSolicitud
        
        Call agregarAlComboBox(Me.CB_OBJETIVO, sqlstring)
        Me.CB_OBJETIVO.ListIndex = 0
        Me.CB_OBJETIVO.Enabled = False
        
        sqlstring = "SELECT E.OW_ID_METODO_CONSTRUCTIVO, ISNULL(MC.OW_DESC_SPANISH,''), ISNULL(MC.DESCRIPCION,'') " & _
                    "FROM SOLICITUD S " & _
                    "JOIN EVENTO E ON E.ID_EVENTO = S.ID_EVENTO " & _
                    "LEFT JOIN METODO_CONSTRUCTIVO MC ON MC.OW_ID_METODO_CONSTRUCTIVO = E.OW_ID_METODO_CONSTRUCTIVO " & _
                    "WHERE ID_SOLICITUD = " & nroSolicitud
        
        Call agregarAlComboBox(Me.CB_METODO_CONSTRUCTIVO, sqlstring)
        Me.CB_METODO_CONSTRUCTIVO.ListIndex = 0
        Me.LA_DESC_METODO_CONS.Caption = Me.CB_METODO_CONSTRUCTIVO.list(Me.CB_METODO_CONSTRUCTIVO.ListIndex, 1)
        Me.CB_METODO_CONSTRUCTIVO.Enabled = False
        
        Call agregarAlComboBox(Me.CB_PURPOSE, "SELECT SP.OW_ID_PURPOSE_POZO, CONCAT(PP.OW_DESC_SPANISH,' - ', PP.DESCRIPCION) FROM SOLICITUD_POZO SP " & _
                                              "JOIN PURPOSE_POZO PP ON PP.OW_ID_PURPOSE_POZO = SP.OW_ID_PURPOSE_POZO " & _
                                              "WHERE SP.OW_COD_POZO = '" & Me.CB_POZO.list(Me.CB_POZO.ListIndex, 0) & "'")
        If Me.CB_PURPOSE.ListCount > 0 Then
            Me.CB_PURPOSE.ListIndex = 0
        End If
        Me.CB_PURPOSE.Enabled = False
                                                        
        Call agregarAlComboBox(Me.CB_OBJECTIVE, "SELECT SP.OW_ID_OBJECTIVE_POZO, CONCAT(OP.OW_ID_OBJECTIVE_POZO, ' - ', OP.DESCRIPCION) FROM SOLICITUD_POZO SP " & _
                                                "JOIN OBJECTIVE_POZO OP ON OP.OW_ID_OBJECTIVE_POZO = SP.OW_ID_OBJECTIVE_POZO " & _
                                                "WHERE SP.OW_COD_POZO = '" & Me.CB_POZO.list(Me.CB_POZO.ListIndex, 0) & "'")
        If Me.CB_OBJECTIVE.ListCount > 0 Then
            Me.CB_OBJECTIVE.ListIndex = 0
        End If
        Me.CB_OBJECTIVE.Enabled = False
                                                        
        Call agregarAlComboBox(Me.CB_PATH, "SELECT SP.OW_ID_PATH_POZO, CONCAT(PAP.OW_ID_PATH_POZO, ' - ', PAP.DESCRIPCION) FROM SOLICITUD_POZO SP " & _
                                           "JOIN PATH_POZO PAP ON PAP.OW_ID_PATH_POZO = SP.OW_ID_PATH_POZO " & _
                                           "WHERE SP.OW_COD_POZO = '" & Me.CB_POZO.list(Me.CB_POZO.ListIndex, 0) & "'")
        If Me.CB_PATH.ListCount > 0 Then
            Me.CB_PATH.ListIndex = 0
        End If
        Me.CB_PATH.Enabled = False
                
        Call agregarAlComboBox(Me.CB_DEPTH, "SELECT SP.OW_ID_DEPTH_POZO, CONCAT(DP.OW_ID_DEPTH_POZO, ' - ', DP.DESCRIPCION) FROM SOLICITUD_POZO SP " & _
                                            "JOIN DEPTH_POZO DP ON DP.OW_ID_DEPTH_POZO = SP.OW_ID_DEPTH_POZO " & _
                                            "WHERE SP.OW_COD_POZO = '" & Me.CB_POZO.list(Me.CB_POZO.ListIndex, 0) & "'")
        If Me.CB_DEPTH.ListCount > 0 Then
            Me.CB_DEPTH.ListIndex = 0
        End If
        Me.CB_DEPTH.Enabled = False
        
        sqlstring = "SELECT E.OW_ID_EQUIPO, EQ.DESCRIPCION, ''" & _
                    "FROM SOLICITUD S " & _
                    "JOIN EVENTO E ON E.ID_EVENTO = S.ID_EVENTO " & _
                    "JOIN EQUIPOS EQ ON E.OW_ID_EQUIPO = EQ.OW_ID_EQUIPO " & _
                    "WHERE ID_SOLICITUD = " & nroSolicitud
        
        Call agregarAlComboBox(Me.CB_EQUIPO, sqlstring)
        Me.CB_EQUIPO.ListIndex = 0
        Me.CB_EQUIPO.Enabled = False
        Me.TB_ALTURA_NUEVA.Enabled = False
        
        sqlstring = "SELECT E.ID_AREA, A.OW_NAME " & _
                    "FROM SOLICITUD S " & _
                    "JOIN EVENTO E ON S.ID_EVENTO = E.ID_EVENTO " & _
                    "JOIN AREAS_OW A ON A.OW_KEY_ID = E.ID_AREA " & _
                    "WHERE S.ID_SOLICITUD = " & nroSolicitud
        
        Call agregarAlComboBox(Me.CB_AREA, sqlstring)
        Me.CB_AREA.ListIndex = 0
        Me.CB_AREA.Enabled = False
        
    End If
    
    Call aplicarTemplate(Me)

End Sub

' ---------------- RUTINAS DE CLICK EN BOTONES ----------------

Private Sub BT_SOLICITAR_Click()

    Dim sqlstring As String
    Dim opcion As Integer
    Dim pIdUG As String
    Dim pIdPozo As String
    Dim pIdTipoEvento As String
    Dim pFechaInicio As String
    Dim pIdEquipo As String
    Dim pIdArea As String
    Dim pIdObjetivoEvento As String
        
    pIdUG = Me.CB_UGESTION.list(Me.CB_UGESTION.ListIndex, 0)
    pIdPozo = Me.CB_POZO.list(Me.CB_POZO.ListIndex, 0)
    pFechaInicio = Format(Me.TB_FECHA_INICIO.Text, "mm/dd/yyyy")
    pIdEquipo = Me.CB_EQUIPO.list(Me.CB_EQUIPO.ListIndex, 0)
    pIdArea = Me.CB_AREA.list(Me.CB_AREA.ListIndex, 0)
    pIdObjetivoEvento = Me.CB_OBJETIVO.list(Me.CB_OBJETIVO.ListIndex, 0)
    If Me.CB_METODO_CONSTRUCTIVO.ListIndex > -1 Then
        pIdMetodoConstructivo = Me.CB_METODO_CONSTRUCTIVO.list(Me.CB_METODO_CONSTRUCTIVO.ListIndex, 0)
    Else
        pIdMetodoConstructivo = ""
    End If
    pAdjustedBudget = Me.TB_ADJUSTED_BUDGET.Value
    pAuthTMDv20 = Me.TB_AUTHORIZED_TMD_V20.Value
    pAuthTMDv30 = Me.TB_AUTHORIZED_TMD_V30.Value
    pAuthTVD = Me.TB_AUTHORIZED_TVD.Value
    pBaseLine = Me.TB_BASELINE.Value
    pRigMoveDistance = Me.TB_RIG_MOVE_DISTANCE.Value
    pEwi = Me.TB_EWI.Value
    pAlturaMesa = Me.TB_ALTURA_NUEVA.Value
 
    ' Valido la carga de datos
    If Me.CB_TIPO_EVENTO.ListIndex < 0 Then
        MsgBox "Se debe elegir un TIPO DE EVENTO.", vbCritical, "AVISO"
        Exit Sub
    End If
    
    pIdTipoEvento = Me.CB_TIPO_EVENTO.list(Me.CB_TIPO_EVENTO.ListIndex, 0)
    
    If Me.CB_OBJETIVO.ListIndex < 0 Then
        MsgBox "Se debe elegir un OBJETIVO.", vbCritical, "AVISO"
        Exit Sub
    End If
    
    Select Case pIdTipoEvento
            Case C_MOB_ID, C_DON_ID, C_DOF_ID, C_RON_ID
                
                ' Para DON y RON es obligatorio cargar el METODO CONSTRUCTIVO
                If (pIdTipoEvento = C_DON_ID Or pIdTipoEvento = C_RON_ID) Then
                    If (Me.CB_METODO_CONSTRUCTIVO.ListIndex = -1) Then
                        MsgBox "Se debe completar el METODO CONSTRUCTIVO para enviar la Solicitud", vbCritical, "SOLICITAR"
                        Exit Sub
                    End If
                End If
                
                ' Para eventos MOB las PROPIEDADES DE POZO son obligatorios
                If pIdTipoEvento = C_MOB_ID Then
                    If (Me.CB_PURPOSE.ListIndex = -1) Then
                        MsgBox "Se debe completar PURPOSE POZO para enviar la Solicitud", vbCritical, "SOLICITAR"
                        Exit Sub
                    End If
                    
                    If (Me.CB_OBJECTIVE.ListIndex = -1) Then
                        MsgBox "Se debe completar OBJECTIVE POZO para enviar la Solicitud", vbCritical, "SOLICITAR"
                        Exit Sub
                    End If
                    
                    If (Me.CB_PATH.ListIndex = -1) Then
                        MsgBox "Se debe completar PATH POZO para enviar la Solicitud", vbCritical, "SOLICITAR"
                        Exit Sub
                    End If
                    
                    If (Me.CB_DEPTH.ListIndex = -1) Then
                        MsgBox "Se debe completar DEPTH POZO para enviar la Solicitud", vbCritical, "SOLICITAR"
                        Exit Sub
                    End If
                End If
            
    End Select
    
    cantAlturaMesa = Trim(Me.TB_ALTURA_NUEVA.Text)
    
    If (cantAlturaMesa = "") Then
        
        Select Case pIdTipoEvento
            Case C_DON_ID, C_RON_ID, C_MOB_ID, C_DOF_ID
                MsgBox "Se debe completar la ALTURA DE MESA para enviar la Solicitud", vbCritical, "SOLICITAR"
                Exit Sub
        End Select
    
    Else
        
        If Not IsNumeric(cantAlturaMesa) Or InStr(cantAlturaMesa, ".") > 0 Then
            MsgBox "Se debe ingresar un valor decimal con coma en ALTURA DE MESA para enviar la Solicitud", vbCritical, "SOLICITAR"
            Exit Sub
        End If
        
        If IsNumeric(cantAlturaMesa) And CDbl(cantAlturaMesa) <= 0 Then
            MsgBox "Se debe ingresar un valor mayor a 0 en el campo ALTURA DE MESA para enviar la Solicitud", vbCritical, "SOLICITAR"
            Exit Sub
        End If
        
        If cantAlturaMesa <> "" And InStr(cantAlturaMesa, C_SEP_DECIMALES) > 0 Then
            If Len(Right(cantAlturaMesa, Len(cantAlturaMesa) - InStr(cantAlturaMesa, C_SEP_DECIMALES))) > 2 Then
                MsgBox "Se debe ingresar un valor con 2 decimales en el campo ALTURA DE MESA para enviar la Solicitud", vbCritical, "SOLICITAR"
                Exit Sub
            End If
        End If
    
    End If
    
    ' Eventos STB no exigen el resto de los valores
    If pIdTipoEvento <> C_STB_ID Then
        
        If Me.CB_AREA.ListIndex < 0 Then
            MsgBox "Se debe ingresar un AREA para enviar la Solicitud", vbCritical, "SOLICITAR"
            Exit Sub
        End If
        
        '*** ADJUSTED BUDGET (V20) *************************************************
        cantADJUSTED_BUDGET = Trim(Me.TB_ADJUSTED_BUDGET.Text)
        
        If (cantADJUSTED_BUDGET = "") Then
            MsgBox "Se debe completar el campo ADJUSTED BUDGET (v20) para enviar la Solicitud", vbCritical, "SOLICITAR"
            Exit Sub
        End If
        
        If (Not IsNumeric(cantADJUSTED_BUDGET) Or InStr(cantADJUSTED_BUDGET, ".") > 0) Then
            MsgBox "Debe ingresar un valor decimal con coma en el campo ADJUSTED BUDGET (v20) para enviar la Solicitud", vbCritical, "SOLICITAR"
            Exit Sub
        End If
        
        If (IsNumeric(cantADJUSTED_BUDGET) And CDbl(cantADJUSTED_BUDGET) <= 0) Then
            MsgBox "Debe ingresar un valor mayor a 0 en el campo ADJUSTED BUDGET (v20) para enviar la Solicitud", vbCritical, "SOLICITAR"
            Exit Sub
        End If
        
        If (cantADJUSTED_BUDGET <> "" And InStr(cantADJUSTED_BUDGET, C_SEP_DECIMALES) > 0) Then
            If (Len(Right(cantADJUSTED_BUDGET, Len(cantADJUSTED_BUDGET) - InStr(cantADJUSTED_BUDGET, C_SEP_DECIMALES))) > 2) Then
                MsgBox "Debe ingresar un valor con 2 decimales en el campo ADJUSTED BUDGET (v20) para enviar la Solicitud", vbCritical, "SOLICITAR"
                Exit Sub
            End If
        End If
        '*****************************************************************
        
        '*** AUTHORIZED TMD (V20) *************************************************
        cantAUTHORIZED_TMD_V20 = Trim(Me.TB_AUTHORIZED_TMD_V20.Text)
        
        If (cantAUTHORIZED_TMD_V20 = "") Then
            MsgBox "Se debe completar el campo AUTHORIZED TMD (v20) para enviar la Solicitud", vbCritical, "SOLICITAR"
            Me.TB_AUTHORIZED_TMD_V20.SetFocus
            Exit Sub
        End If
        
        If (Not IsNumeric(cantAUTHORIZED_TMD_V20) Or InStr(cantAUTHORIZED_TMD_V20, ".") > 0) Then
            MsgBox "Debe ingresar un valor decimal con coma en el campo AUTHORIZED TMD (v20) para enviar la Solicitud", vbCritical, "SOLICITAR"
            Exit Sub
        End If
    
        If (IsNumeric(cantAUTHORIZED_TMD_V20) And CDbl(cantAUTHORIZED_TMD_V20) <= 0) Then
            MsgBox "Debe ingresar un valor mayor a 0 en el campo AUTHORIZED TMD (v20) para enviar la Solicitud", vbCritical, "SOLICITAR"
            Exit Sub
        End If
        
        If (cantAUTHORIZED_TMD_V20 <> "" And InStr(cantAUTHORIZED_TMD_V20, C_SEP_DECIMALES) > 0) Then
            If (Len(Right(cantAUTHORIZED_TMD_V20, Len(cantAUTHORIZED_TMD_V20) - InStr(cantAUTHORIZED_TMD_V20, C_SEP_DECIMALES))) > 2) Then
                MsgBox "Debe ingresar un valor con 2 decimales en el campo AUTHORIZED TMD (v20) para enviar la Solicitud", vbCritical, "SOLICITAR"
                Exit Sub
            End If
        End If
        '*****************************************************************
        
        '*** AUTHORIZED TMD (V30) *************************************************
        cantAUTHORIZED_TMD_V30 = Trim(Me.TB_AUTHORIZED_TMD_V30.Text)
        
        If (cantAUTHORIZED_TMD_V30 = "") Then
            MsgBox "Se debe completar el campo AUTHORIZED TMD (v30) para enviar la Solicitud", vbCritical, "SOLICITAR"
            Exit Sub
        End If
        
        If (Not IsNumeric(cantAUTHORIZED_TMD_V30) Or InStr(cantAUTHORIZED_TMD_V30, ".") > 0) Then
            MsgBox "Debe ingresar un valor decimal con coma en el campo AUTHORIZED TMD (v30) para enviar la Solicitud", vbCritical, "SOLICITAR"
            Exit Sub
        End If
    
        If (IsNumeric(cantAUTHORIZED_TMD_V30) And CDbl(cantAUTHORIZED_TMD_V30) <= 0) Then
            MsgBox "Debe ingresar un valor mayor a 0 en el campo AUTHORIZED TMD (v30) para enviar la Solicitud", vbCritical, "SOLICITAR"
            Exit Sub
        End If
        
        If (cantAUTHORIZED_TMD_V30 <> "" And InStr(cantAUTHORIZED_TMD_V30, C_SEP_DECIMALES) > 0) Then
            If (Len(Right(cantAUTHORIZED_TMD_V30, Len(cantAUTHORIZED_TMD_V30) - InStr(cantAUTHORIZED_TMD_V30, C_SEP_DECIMALES))) > 2) Then
                MsgBox "Debe ingresar un valor con 2 decimales en el campo AUTHORIZED TMD (v30) para enviar la Solicitud", vbCritical, "SOLICITAR"
                Exit Sub
            End If
        End If
        '*****************************************************************
        
        '*** AUTHORIZED TVD *************************************************
        cantAUTHORIZED_TVD = Trim(Me.TB_AUTHORIZED_TVD.Text)
        
        If (cantAUTHORIZED_TVD = "") Then
            MsgBox "Se debe completar el campo AUTHORIZED TVD para enviar la Solicitud", vbCritical, "SOLICITAR"
            Exit Sub
        End If
        
        If (Not IsNumeric(cantAUTHORIZED_TVD) Or InStr(cantAUTHORIZED_TVD, ".") > 0) Then
            MsgBox "Debe ingresar un valor decimal con coma en el campo AUTHORIZED TVD para enviar la Solicitud", vbCritical, "SOLICITAR"
            Exit Sub
        End If
    
        If (IsNumeric(cantAUTHORIZED_TVD) And CDbl(cantAUTHORIZED_TVD) <= 0) Then
            MsgBox "Debe ingresar un valor mayor a 0 en el campo AUTHORIZED TVD para enviar la Solicitud", vbCritical, "SOLICITAR"
            Exit Sub
        End If
        
        If (cantAUTHORIZED_TVD <> "" And InStr(cantAUTHORIZED_TVD, C_SEP_DECIMALES) > 0) Then
            If (Len(Right(cantAUTHORIZED_TVD, Len(cantAUTHORIZED_TVD) - InStr(cantAUTHORIZED_TVD, C_SEP_DECIMALES))) > 2) Then
                MsgBox "Debe ingresar un valor con 2 decimales en el campo AUTHORIZED TVD para enviar la Solicitud", vbCritical, "SOLICITAR"
                Exit Sub
            End If
        End If
        '*****************************************************************
        
        '*** BASELINE (V20) *************************************************
        cantBASELINE = Trim(Me.TB_BASELINE.Text)
        
        If (cantBASELINE = "") Then
            MsgBox "Se debe completar el campo BASELINE (v20) para enviar la Solicitud", vbCritical, "SOLICITAR"
            Exit Sub
        End If
    
        If (Not IsNumeric(cantBASELINE) Or InStr(cantBASELINE, ".") > 0) Then
            MsgBox "Debe ingresar un valor decimal con coma en el campo BASELINE (v20) para enviar la Solicitud", vbCritical, "SOLICITAR"
            Exit Sub
        End If
    
        If (IsNumeric(cantBASELINE) And CDbl(cantBASELINE) <= 0) Then
            MsgBox "Debe ingresar un valor mayor a 0 en el campo BASELINE (v20) para enviar la Solicitud", vbCritical, "SOLICITAR"
            Exit Sub
        End If
        
        If (cantBASELINE <> "" And InStr(cantBASELINE, C_SEP_DECIMALES) > 0) Then
            If (Len(Right(cantBASELINE, Len(cantBASELINE) - InStr(cantBASELINE, C_SEP_DECIMALES))) > 2) Then
                MsgBox "Debe ingresar un valor con 2 decimales en el campo BASELINE (v20) para enviar la Solicitud", vbCritical, "SOLICITAR"
                Exit Sub
            End If
        End If
        '*****************************************************************
               
        '*** RIG MOVE DISTANCE *************************************************
        cantRIG_MOVE_DISTANCE = Trim(Me.TB_RIG_MOVE_DISTANCE.Text)
        
        If (cantRIG_MOVE_DISTANCE = "") Then
            MsgBox "Se debe completar el campo RIG MOVE DISTANCE para enviar la Solicitud", vbCritical, "SOLICITAR"
            Exit Sub
        End If
        
        If (Not IsNumeric(cantRIG_MOVE_DISTANCE) Or InStr(cantRIG_MOVE_DISTANCE, ".") > 0) Then
            MsgBox "Debe ingresar un valor decimal con coma en el campo RIG MOVE DISTANCE para enviar la Solicitud", vbCritical, "SOLICITAR"
            Exit Sub
        End If
    
        If (IsNumeric(cantRIG_MOVE_DISTANCE) And CDbl(cantRIG_MOVE_DISTANCE) <= 0) Then
            MsgBox "Debe ingresar un valor mayor a 0 en el campo RIG MOVE DISTANCE para enviar la Solicitud", vbCritical, "SOLICITAR"
            Me.TB_RIG_MOVE_DISTANCE.SetFocus
            Exit Sub
        End If
        
        If (cantRIG_MOVE_DISTANCE <> "" And InStr(cantRIG_MOVE_DISTANCE, C_SEP_DECIMALES) > 0) Then
            If (Len(Right(cantRIG_MOVE_DISTANCE, Len(cantRIG_MOVE_DISTANCE) - InStr(cantRIG_MOVE_DISTANCE, C_SEP_DECIMALES))) > 2) Then
                MsgBox "Debe ingresar un valor con 2 decimales en el campo RIG MOVE DISTANCE para enviar la Solicitud", vbCritical, "SOLICITAR"
                Exit Sub
            End If
        End If
        '*****************************************************************
        
        '*** EWI *********************************************************
        cantEWI = Trim(Me.TB_EWI.Text)
        
        If (cantEWI = "") Then
            MsgBox "Se debe completar el campo EWI para enviar la Solicitud", vbCritical, "SOLICITAR"
            Exit Sub
        End If
        
        If (Not IsNumeric(cantEWI) Or InStr(cantEWI, ".") > 0) Then
            MsgBox "Debe ingresar un valor decimal con COMA (,) en el campo EWI para enviar la Solicitud", vbCritical, "SOLICITAR"
            Exit Sub
        End If
    
        If (IsNumeric(cantEWI) And CDbl(cantEWI) <= 0) Then
            MsgBox "Debe ingresar un valor mayor a 0 en el campo EWI para enviar la Solicitud", vbCritical, "SOLICITAR"
            Me.TB_EWI.SetFocus
            Exit Sub
        End If
        
        If (cantEWI <> "" And InStr(cantEWI, C_SEP_DECIMALES) > 0) Then
            If (Len(Right(cantEWI, Len(cantEWI) - InStr(cantEWI, C_SEP_DECIMALES))) > 2) Then
                MsgBox "Debe ingresar un valor con 2 decimales en el campo EWI para enviar la Solicitud", vbCritical, "SOLICITAR"
                Me.TB_EWI.SetFocus
                Exit Sub
            End If
        End If
        '*****************************************************************

    End If
    
    ' Se consulta si ya existe el evento en OW y no esta dado de BAJA (se elimino de OW o ya paso mas de un a|fffd|o de la fecha de hoy)
    sqlstring = "SELECT OW_ID_EVENTO FROM EVENTO_OW " & _
                "WHERE OW_ID_UNIDAD_GESTION = '" & pIdUG & "' " & _
                "AND OW_ID_POZO = '" & pIdPozo & "' " & _
                "AND OW_ID_TIPO_EVENTO = '" & pIdTipoEvento & "' " & _
                "AND OW_FECHA_INICIO_EVENTO = '" & pFechaInicio & "' " & _
                "AND OW_ID_EQUIPO = '" & pIdEquipo & "' " & _
                "AND BAJA = 0"
                
    Set rs = ConsultarTablasBD(sqlstring)
    If (rs.RecordCount > 0) Then
        MsgBox "Ya existe el EVENTO que est|fffd| solicitando dar de alta. Por favor, contactar al Administrador de OpenWells", vbCritical, "SOLICITAR"
        Exit Sub
    End If
    
    opcion = MsgBox("Se proceder|fffd| a generar la Solicitud de Alta de Evento en Openwells. |fffd|Desea Continuar?", vbOKCancel, "SOLICITAR")
    If opcion = vbCancel Then
        Exit Sub
    End If
    
    pTipoEquipo = Me.CB_EQUIPO.list(Me.CB_EQUIPO.ListIndex, 2)
  
    tb_observaciones.Text = Trim(Replace(tb_observaciones.Text, "'", "|fffd|"))
    
    If pIdTipoEvento = C_DON_ID Or pIdTipoEvento = C_RON_ID Or pIdTipoEvento = C_MOB_ID Or pIdTipoEvento = C_DOF_ID Then
        If ExisteMobParaPozo(pIdUG, pIdPozo) Then ' Si el POZO ya tiene evento MOB debe tener sus propiedades cargadas.
            
            Set rs = ConsultarTablasBD("SELECT ID_POZO FROM SOLICITUD_POZO WHERE OW_COD_POZO = '" & Me.CB_POZO.list(Me.CB_POZO.ListIndex, 0) & "'")
            
            If rs.RecordCount() = 0 Then ' Nunca se efectuo una solicitud sobre este pozo
                Set rs = ConsultarTablasBD("SELECT OW_COD_POZO, DESCRIPCION, OW_ID_PURPOSE_POZO, OW_ID_OBJECTIVE_POZO, OW_ID_PATH_POZO, OW_ID_DEPTH_POZO FROM POZOS WHERE OW_COD_POZO = '" & Me.CB_POZO.list(Me.CB_POZO.ListIndex, 0) & "'")
                ID_POZO = GuardarPozoSolicitudBD(rs.Fields(0), rs.Fields(1), IIf(IsNull(rs.Fields(2)), "NULL", rs.Fields(2)), IIf(IsNull(rs.Fields(3)), "NULL", rs.Fields(3)), IIf(IsNull(rs.Fields(4)), "NULL", rs.Fields(4)), IIf(IsNull(rs.Fields(5)), "NULL", rs.Fields(5)))
                If ID_POZO = 0 Then
                    MsgBox "ERROR: Ha ocurrido un Error al guardar el POZO. Comunicarse con el Administrador del sistema", vbCritical, "SOLICITAR"
                    Exit Sub
                End If
            Else
                ID_POZO = rs.Fields(0)
            End If
            
                    
        Else ' Si es el primer MOB del POZO exigi las propiedades de POZO. Por lo tanto tengo que guardar el pozo.
            nombrePozo = Me.CB_POZO.list(Me.CB_POZO.ListIndex, 1)
            pIdPurposePozo = Me.CB_PURPOSE.list(Me.CB_PURPOSE.ListIndex, 0)
            pIdObjectivePozo = Me.CB_OBJECTIVE.list(Me.CB_OBJECTIVE.ListIndex, 0)
            pIdPathPozo = Me.CB_PATH.list(Me.CB_PATH.ListIndex, 0)
            pIdDepthPozo = Me.CB_DEPTH.list(Me.CB_DEPTH.ListIndex, 0)
            
            ID_POZO = GuardarPozoSolicitudBD(pIdPozo, nombrePozo, pIdPurposePozo, pIdObjectivePozo, pIdPathPozo, pIdDepthPozo)
            If ID_POZO = 0 Then
                MsgBox "ERROR: Ha ocurrido un Error al guardar el POZO. Comunicarse con el Administrador del sistema", vbCritical, "SOLICITAR"
                Exit Sub
            End If
        End If
    
    Else
    
        Set rs = ConsultarTablasBD("SELECT ID_POZO FROM SOLICITUD_POZO WHERE OW_COD_POZO = '" & Me.CB_POZO.list(Me.CB_POZO.ListIndex, 0) & "'")
            
        If rs.RecordCount() = 0 Then ' Nunca se efectuo una solicitud sobre este pozo
           Set rs = ConsultarTablasBD("SELECT OW_COD_POZO, DESCRIPCION, OW_ID_PURPOSE_POZO, OW_ID_OBJECTIVE_POZO, OW_ID_PATH_POZO, OW_ID_DEPTH_POZO FROM POZOS WHERE OW_COD_POZO = '" & Me.CB_POZO.list(Me.CB_POZO.ListIndex, 0) & "'")
           ID_POZO = GuardarPozoSolicitudBD(rs.Fields(0), rs.Fields(1), IIf(IsNull(rs.Fields(2)), "NULL", rs.Fields(2)), IIf(IsNull(rs.Fields(3)), "NULL", rs.Fields(3)), IIf(IsNull(rs.Fields(4)), "NULL", rs.Fields(4)), IIf(IsNull(rs.Fields(5)), "NULL", rs.Fields(5)))
           If ID_POZO = 0 Then
              MsgBox "ERROR: Ha ocurrido un Error al guardar el POZO. Comunicarse con el Administrador del sistema", vbCritical, "SOLICITAR"
              Exit Sub
           End If
        Else
           ID_POZO = rs.Fields(0)
        End If
    
    End If
    
    ID_EVENTO = GuardarEventoBD(ID_POZO, pIdArea, pIdTipoEvento, pIdUG, pIdEquipo, pFechaInicio, pIdObjetivoEvento, pIdMetodoConstructivo, pAdjustedBudget, pAuthTMDv20, pAuthTMDv30, pAuthTVD, pBaseLine, pRigMoveDistance, pEwi, IIf(Trim(pAlturaMesa) & vbNullString = vbNullString, 0, pAlturaMesa), "")
    If (ID_EVENTO = 0) Then
       MsgBox "ERROR: Ha ocurrido un Error al guardar el EVENTO. Comunicarse con el Administrador del sistema", vbCritical, "SOLICITAR"
       Exit Sub
    End If
   
    destinatarios = C_MAIL_ECONAT
   
    Call GuardarSolicitud(tb_observaciones.Text, destinatarios, C_ID_TIPO_ALTA_EVENTO, "Alta de Evento", "ALTA DE EVENTO", ID_EVENTO, 0)

    Call resetearDatos
    
    Set rs = Nothing
    

End Sub

Private Sub BT_DAR_ALTA_Click()
    
    ' Valido los DATOS BASICOS cargados
    
    ' Valido seleccion de POZO
    If Me.CB_POZO.ListIndex < 0 Then
        MsgBox "Se debe seleccionar un POZO", vbCritical, "AVISO"
        Exit Sub
    End If
    
    ' Valido la FECHA DE INICIO
    If (Len(Me.TB_FECHA_INICIO.Text) = 10) Then
        If (Not IsDate(Me.TB_FECHA_INICIO.Text)) Then
            MsgBox "Formato inv|fffd|lido de FECHA DE INICIO: dd/mm/yyyy", vbCritical, "AVISO"
            Exit Sub
        Else
            ' La fecha no puede ser posterior ni anterior a UN MES.
            If CDate(Me.TB_FECHA_INICIO.Text) > DateAdd("m", 1, Date) Then
                MsgBox "La FECHA DE INICIO no puede ser POSTERIOR a un MES.", vbCritical, "AVISO"
                Exit Sub
            ElseIf CDate(Me.TB_FECHA_INICIO.Text) < DateAdd("m", -1, Date) Then
                MsgBox "La FECHA DE INICIO no puede ser ANTERIOR a un MES.", vbCritical, "AVISO"
                Exit Sub
            End If
        End If
    Else
        MsgBox "Formato v|fffd|lido de FECHA DE INICIO: dd/mm/yyyy", vbCritical, "AVISO"
        Exit Sub
    End If
    
    ' Paso todas las validaciones. Bloqueo los DATOS BASICOS y desbloqueo el formulario para la carga del evento.
    Me.CB_POZO.Enabled = False
    Me.TB_FECHA_INICIO.Enabled = False
    Me.BT_DAR_ALTA.Enabled = False
    
    ' Cargo el COMBO de TIPO EVENTO
    Call agregarAlComboBox(Me.CB_TIPO_EVENTO, obtenerTipoEventos())
    Me.CB_TIPO_EVENTO.Enabled = True
    
    ' Activo el boton SOLICITAR
    Me.BT_SOLICITAR.Enabled = True

End Sub


Private Sub bt_salir_Click()

    Dim opcion As Integer
    
    opcion = MsgBox("|fffd|Esta seguro de SALIR?", vbOKCancel, "AVISO")
    
    If opcion = vbCancel Then
        Exit Sub
    End If

    Unload Me

End Sub

Private Sub bt_cancelar_Click()

    Dim opcion As Integer
    
    opcion = MsgBox("|fffd|Esta seguro de CANCELAR la solicitud en curso? Se perdera la informaci|fffd|n cargada.", vbOKCancel, "AVISO")
    
    If opcion = vbCancel Then
        Exit Sub
    End If

    Call resetearDatos

End Sub


' ---------------- RUTINAS DE CHANGES EN COMBO BOX ----------------

Private Sub CB_TIPO_EVENTO_Change()
    
    If (Me.CB_TIPO_EVENTO.ListIndex <> -1 And Me.TB_NUMERO_SOLICITUD.Visible = False) Then
        
        Call ResetearDatosChangeTipoEvento
        
        UG_Usuario = Sheets(H_GENERALES).Range("H9").Value
        tipoEvento = Me.CB_TIPO_EVENTO.list(Me.CB_TIPO_EVENTO.ListIndex, 0)
    
        queryConsulta = "SELECT OW_ID_OBJETIVO_EVENTO, DESCRIPCION + ' - ' + OW_DESC_SPANISH FROM OBJETIVO_EVENTO WHERE BAJA = 0 AND OW_ID_TIPO_EVENTO ='" & tipoEvento & "' ORDER BY DESCRIPCION ASC"
        Call agregarAlComboBox(Me.CB_OBJETIVO, queryConsulta)
        Me.CB_OBJETIVO.ListIndex = -1
        Me.CB_OBJETIVO.Enabled = True
        
        queryConsulta = "SELECT OW_ID_METODO_CONSTRUCTIVO, OW_DESC_SPANISH, DESCRIPCION FROM METODO_CONSTRUCTIVO WHERE BAJA = 0 AND OW_ID_TIPO_EVENTO ='" & tipoEvento & "' ORDER BY DESCRIPCION ASC"
        Call agregarAlComboBox(Me.CB_METODO_CONSTRUCTIVO, queryConsulta)
        Me.CB_METODO_CONSTRUCTIVO.ListIndex = -1
        Me.CB_METODO_CONSTRUCTIVO.Enabled = True
        
        If (Me.CB_TIPO_EVENTO.list(Me.CB_TIPO_EVENTO.ListIndex, 0) = C_MOB_ID And Not ExisteMobParaPozo(Me.CB_UGESTION.list(Me.CB_UGESTION.ListIndex, 0), Me.CB_POZO.list(Me.CB_POZO.ListIndex, 0))) Then
            Me.CB_OBJECTIVE.Enabled = True
            Me.CB_PATH.Enabled = True
            Me.CB_DEPTH.Enabled = True
            Me.CB_PURPOSE.Enabled = True
        End If
        
        'EQUIPO
        'Se muestran los equipos de acuerdo a ID_TIPO_EVENTO que est|fffd| relacionado con el ID_TIPO_EQUIPO para mostrar los equipos asociados a este tipo de evento
        queryConsulta = "SELECT OW_ID_EQUIPO, E.DESCRIPCION, TE.DESCRIPCION " & _
                    "FROM EQUIPOS E " & _
                    "INNER JOIN TIPO_EQUIPO TE ON TE.OW_ID_TIPO_EQUIPO = E.OW_ID_TIPO_EQUIPO " & _
                    "INNER JOIN TIPO_EQUIPO_TIPO_EVENTO TETE ON TETE.OW_ID_TIPO_EQUIPO = TE.OW_ID_TIPO_EQUIPO " & _
                    "WHERE E.BAJA = 0 " & _
                    "AND TETE.OW_ID_TIPO_EVENTO = '" & tipoEvento & "' " & _
                    "ORDER BY E.DESCRIPCION ASC"
        Call agregarAlComboBox(Me.CB_EQUIPO, queryConsulta)
        Me.CB_EQUIPO.ListIndex = -1
        Me.CB_EQUIPO.Enabled = True
        Me.TB_ALTURA_NUEVA.Text = ""
        
        'AREA
        queryConsulta = "SELECT OW_KEY_ID, OW_NAME FROM AREAS_OW " & _
                        "WHERE BAJA = 0 AND OW_CODIGO_UG = '" & UG_Usuario & "' AND OW_ID_TIPO_EVENTO = '" & tipoEvento & "' ORDER BY OW_NAME ASC"
        Call agregarAlComboBox(Me.CB_AREA, queryConsulta)
        Me.CB_AREA.ListIndex = -1
        Me.CB_AREA.Enabled = True
        
        Select Case UCase(tipoEvento)
            Case C_CON_ID, C_WO_ID, C_ABN_ID, C_STB_ID
                Me.TB_ALTURA_NUEVA.Enabled = False
                Me.TB_ALTURA_NUEVA.BackColor = &H80000003
        End Select
        
        'Se habilitan TODOS los campos restantes
        Me.TB_ADJUSTED_BUDGET.Enabled = True
        Me.TB_AUTHORIZED_TMD_V20.Enabled = True
        Me.TB_AUTHORIZED_TMD_V30.Enabled = True
        Me.TB_AUTHORIZED_TVD.Enabled = True
        Me.TB_BASELINE.Enabled = True
        Me.TB_RIG_MOVE_DISTANCE.Enabled = True
        Me.TB_EWI.Enabled = True
        Me.tb_observaciones.Enabled = True
        
    End If

End Sub

Private Sub CB_EQUIPO_Change()

    Dim sqlstring As String
    Dim idEquipo As String
    Dim rs As ADODB.Recordset
    
    'Se carga el combo dependiente del Equipo
    If (Me.CB_EQUIPO.ListIndex <> -1) Then
        Me.TB_ALTURA_NUEVA.Text = ""
    
        idEquipo = Me.CB_EQUIPO.list(Me.CB_EQUIPO.ListIndex, 0)
    
        sqlstring = "SELECT ALTURA_MESA FROM EQUIPOS WHERE OW_ID_EQUIPO ='" & idEquipo & "'"
        
        Set rs = ConsultarTablasBD(sqlstring)
    
        If (rs.RecordCount > 0) Then
            rs.MoveFirst
            
            If (Not IsNull(rs!ALTURA_MESA)) Then
                Me.TB_ALTURA_NUEVA.Text = Replace(rs!ALTURA_MESA, ".", ",")
            End If
        End If
        
        Dim idTEvento As String
        idTEvento = Me.CB_TIPO_EVENTO.list(Me.CB_TIPO_EVENTO.ListIndex, 0)
        Select Case UCase(idTEvento)
            Case C_CON_ID, C_WO_ID, C_ABN_ID, C_STB_ID
                Me.TB_ALTURA_NUEVA.Enabled = False
                Me.TB_ALTURA_NUEVA.BackColor = &H80000003
            Case Else
                Me.TB_ALTURA_NUEVA.Enabled = True
                Me.TB_ALTURA_NUEVA.BackColor = &H80000005
        End Select
    End If

    Set rs = Nothing

End Sub

Private Sub CB_METODO_CONSTRUCTIVO_Change()

    If Me.CB_METODO_CONSTRUCTIVO.ListIndex < 0 Then
        Exit Sub
    End If
    
    Me.LA_DESC_METODO_CONS.Caption = Me.CB_METODO_CONSTRUCTIVO.list(Me.CB_METODO_CONSTRUCTIVO.ListIndex, 1)

End Sub

' ---------------- RUTINAS DE BUSQUEDA EN LA BASE DE DATOS ----------------

'>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
' Obtengo a partir de la funcion del usuario los EVENTOS para los cuales puede solicitar un alta
'
Private Function obtenerTipoEventos() As String
    
    Dim listadoCodEventos As String
    Dim pIdUG As String
    Dim pIdPozo As String
    Dim pIdFechaInicio As String
    Dim qryMobExiste As String
    
    'TIPO DE EVENTO
    pIdUG = Me.CB_UGESTION.list(Me.CB_UGESTION.ListIndex, 0)
    pIdPozo = Me.CB_POZO.list(Me.CB_POZO.ListIndex, 0)
    pIdFechaInicio = Format(Me.TB_FECHA_INICIO.Text, "mm/dd/yyyy")
        
    idFuncion = "" & CInt(Left(Sheets(H_GENERALES).Range("C6").Value, 2)) & ""
    
    Select Case idFuncion
        Case C_FUNCION_ADMIN
        
        'WO / COMPLETION
        Case C_FUNCION_CM_WO, C_FUNCION_INGENIERO_WO
            listadoCodEventos = " '" & C_CON_COD & "', '" & C_WO_COD & "', '" & C_IWO_COD & "', '" & C_REP_COD & "', '" & C_ABN_COD & "', '" & C_STB_COD & "' "
                    
        'PERFORACION
        Case C_FUNCION_CM, C_FUNCION_INGENIERO
            
            If (ExisteMobParaPozo(pIdUG, pIdPozo)) Then ' Si el pozo ya tuvo EVENTO MOB permito dar de alta cualquier EVENTO de DRILLING.
                listadoCodEventos = " '" & C_DOF_COD & "', '" & C_DON_COD & "', '" & C_MOB_COD & "', '" & C_RON_COD & "', '" & C_STB_COD & "' "
                
                ' Busco las propiedades del pozo asumiendo que debieron haber sido cargadas en el primer evento MOB
                Call agregarAlComboBox(Me.CB_PURPOSE, "SELECT SP.OW_ID_PURPOSE_POZO, CONCAT(PP.OW_DESC_SPANISH,' - ', PP.DESCRIPCION) FROM POZOS SP " & _
                                                        "JOIN PURPOSE_POZO PP ON PP.OW_ID_PURPOSE_POZO = SP.OW_ID_PURPOSE_POZO " & _
                                                         "WHERE SP.OW_COD_POZO = '" & pIdPozo & "'")
                If Me.CB_PURPOSE.ListCount > 0 Then
                    Me.CB_PURPOSE.ListIndex = 0
                    Me.CB_PURPOSE.Enabled = False
                End If
                                                        
                Call agregarAlComboBox(Me.CB_OBJECTIVE, "SELECT SP.OW_ID_OBJECTIVE_POZO, CONCAT(OP.OW_ID_OBJECTIVE_POZO, ' - ', OP.DESCRIPCION) FROM POZOS SP " & _
                                                        "JOIN OBJECTIVE_POZO OP ON OP.OW_ID_OBJECTIVE_POZO = SP.OW_ID_OBJECTIVE_POZO " & _
                                                        "WHERE SP.OW_COD_POZO = '" & pIdPozo & "'")
                If Me.CB_OBJECTIVE.ListCount > 0 Then
                    Me.CB_OBJECTIVE.ListIndex = 0
                    Me.CB_OBJECTIVE.Enabled = False
                End If
                                                        
                Call agregarAlComboBox(Me.CB_PATH, "SELECT SP.OW_ID_PATH_POZO, CONCAT(PAP.OW_ID_PATH_POZO, ' - ', PAP.DESCRIPCION) FROM POZOS SP " & _
                                                   "JOIN PATH_POZO PAP ON PAP.OW_ID_PATH_POZO = SP.OW_ID_PATH_POZO " & _
                                                   "WHERE SP.OW_COD_POZO = '" & pIdPozo & "'")
                If Me.CB_PATH.ListCount > 0 Then
                    Me.CB_PATH.ListIndex = 0
                    Me.CB_PATH.Enabled = False
                End If
                
                Call agregarAlComboBox(Me.CB_DEPTH, "SELECT SP.OW_ID_DEPTH_POZO, CONCAT(DP.OW_ID_DEPTH_POZO, ' - ', DP.DESCRIPCION) FROM POZOS SP " & _
                                                    "JOIN DEPTH_POZO DP ON DP.OW_ID_DEPTH_POZO = SP.OW_ID_DEPTH_POZO " & _
                                                    "WHERE SP.OW_COD_POZO = '" & pIdPozo & "'")
                If Me.CB_DEPTH.ListCount > 0 Then
                    Me.CB_DEPTH.ListIndex = 0
                    Me.CB_DEPTH.Enabled = False
                End If
               
            Else ' Si el pozo no tuvo evento MOB solo permito dar de alta este EVENTO. Ademas exijo los campos de PROPIEDADES DE POZO
            
                listadoCodEventos = " '" & C_MOB_COD & "' "
                
                ' Si no tiene MOB anterior cargo los PICKLIST ya que los voy a requerir.
                Call agregarAlComboBox(Me.CB_PURPOSE, QueryPurposePozo)
                Me.CB_PURPOSE.Enabled = False

                Call agregarAlComboBox(Me.CB_OBJECTIVE, QueryObjectivePozo)
                Me.CB_OBJECTIVE.Enabled = False
    
                Call agregarAlComboBox(Me.CB_PATH, QueryPathPozo)
                Me.CB_PATH.Enabled = False
    
                Call agregarAlComboBox(Me.CB_DEPTH, QueryDepthPozo)
                Me.CB_DEPTH.Enabled = False
                
            End If
    End Select
        
    If (listadoCodEventos <> "") Then
        queryCodEvento = " AND COD_EVENTO IN(" & listadoCodEventos & ") "
    End If
        
    'LA QUERY INCLUYE LAS SOLICITUDES Y LOS EVENTOS YA DADOS DE ALTA EN OW
    queryConsulta = "SELECT OW_ID_TIPO_EVENTO, COD_EVENTO, COD_EVENTO + ' - ' + DESCRIPCION AS DESCRIPCION " & _
                    "FROM TIPO_EVENTO TE " & _
                    "WHERE ACTIVO = 1 AND TE.BAJA = 0 " & _
                    queryCodEvento & _
                    "AND OW_ID_TIPO_EVENTO NOT IN ( "
    queryConsulta = queryConsulta & _
                    "SELECT E.OW_ID_TIPO_EVENTO " & _
                    "FROM SOLICITUDES S " & _
                    "INNER JOIN SOLICITUD SOL ON SOL.ID_SOLICITUD = S.ID_SOLICITUD " & _
                    "INNER JOIN EVENTO E ON E.ID_EVENTO = SOL.ID_EVENTO " & _
                    "INNER JOIN TIPO_EVENTO TE ON TE.OW_ID_TIPO_EVENTO = E.OW_ID_TIPO_EVENTO " & _
                    "INNER JOIN SOLICITUD_POZO SP ON SP.ID_POZO = E.ID_POZO " & _
                    "INNER JOIN ESTADO_SOLICITUD ES ON ES.ID_ESTADO_SOLICITUD = S.ID_ESTADO_SOLICITUD " & _
                    "INNER JOIN POZOS P ON P.OW_COD_POZO = SP.OW_COD_POZO " & _
                    "WHERE (SOL.ID_TIPO_SOLICITUD = 1 Or SOL.ID_TIPO_SOLICITUD = 2) " & _
                    "AND S.FECHA_EJECUCION IN (SELECT MAX(FECHA_EJECUCION) FROM SOLICITUDES WHERE ID_SOLICITUD=S.ID_SOLICITUD) " & _
                    "AND ES.ESTADO_FINAL = 0 " & _
                    "AND E.OW_COD_UNIDAD_GESTION = '" & pIdUG & "' " & _
                    "AND SP.OW_COD_POZO = '" & pIdPozo & "' " & _
                    "AND E.FECHA_INICIO_EVENTO = '" & pIdFechaInicio & "' "
    queryConsulta = queryConsulta & "Union " & _
                    "SELECT EO.OW_ID_TIPO_EVENTO " & _
                    "FROM EVENTO_OW EO " & _
                    "INNER JOIN TIPO_EVENTO TE ON TE.OW_ID_TIPO_EVENTO = EO.OW_ID_TIPO_EVENTO " & _
                    "WHERE OW_ID_UNIDAD_GESTION = '" & pIdUG & "' " & _
                    "AND OW_ID_POZO = '" & pIdPozo & "' " & _
                    "AND OW_FECHA_INICIO_EVENTO = '" & pIdFechaInicio & "' " & _
                    ")"
        
    obtenerTipoEventos = queryConsulta

End Function
'
'>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

Private Function ExisteMobParaPozo(ByVal pIdUG As String, ByVal pIdPozo As String) As Boolean

    Dim sqlstring As String
    
    sqlstring = "SELECT E.OW_ID_TIPO_EVENTO " & _
                    "FROM SOLICITUDES S " & _
                    "INNER JOIN SOLICITUD SOL ON SOL.ID_SOLICITUD = S.ID_SOLICITUD " & _
                    "INNER JOIN EVENTO E ON E.ID_EVENTO = SOL.ID_EVENTO " & _
                    "INNER JOIN SOLICITUD_POZO SP ON SP.ID_POZO = E.ID_POZO " & _
                    "INNER JOIN ESTADO_SOLICITUD ES ON ES.ID_ESTADO_SOLICITUD = S.ID_ESTADO_SOLICITUD " & _
                    "WHERE (SOL.ID_TIPO_SOLICITUD = 1 OR SOL.ID_TIPO_SOLICITUD = 2) " & _
                    "AND S.FECHA_EJECUCION IN (SELECT MAX(FECHA_EJECUCION) FROM SOLICITUDES WHERE ID_SOLICITUD=S.ID_SOLICITUD) " & _
                    "AND ES.ESTADO_FINAL = 0 " & _
                    "AND E.OW_COD_UNIDAD_GESTION = '" & pIdUG & "' " & _
                    "AND SP.OW_COD_POZO = '" & pIdPozo & "' " & _
                    "AND E.OW_ID_TIPO_EVENTO = 'EV101' " & _
                    "UNION " & _
                    "SELECT EO.OW_ID_TIPO_EVENTO " & _
                    "FROM EVENTO_OW EO " & _
                    "INNER JOIN TIPO_EVENTO TE ON TE.OW_ID_TIPO_EVENTO = EO.OW_ID_TIPO_EVENTO " & _
                    "WHERE OW_ID_UNIDAD_GESTION = '" & pIdUG & "' " & _
                    "AND OW_ID_POZO = '" & pIdPozo & "' " & _
                    "AND EO.OW_ID_TIPO_EVENTO = 'EV101' "
                    
    ExisteMobParaPozo = ConsultarTablasBD(sqlstring).RecordCount > 0
    
End Function

Private Function GuardarBD(ByVal destinatarios As String) As Integer

    Dim OW_COD_POZO As String
    Dim OW_ID_TIPO_EVENTO As String
    Dim OW_COD_UNIDAD_GESTION As String
    Dim ID_EVENTO As Integer
    Dim ID_POZO As Integer
    Dim ID_AREA As Integer
    Dim FECHA_INICIO_EVENTO As String
    Dim OW_ID_OBJETIVO_EVENTO As String
    Dim OW_ID_EQUIPO As String
    
    OW_ID_EQUIPO = Me.CB_EQUIPO.list(Me.CB_EQUIPO.ListIndex, 0)
    FECHA_INICIO_EVENTO = Format(Me.TB_FECHA_INICIO.Text, "mm/dd/yyyy")
    OW_ID_OBJETIVO_EVENTO = Me.CB_OBJETIVO.list(Me.CB_OBJETIVO.ListIndex, 0)
    OW_COD_POZO = Me.CB_POZO.list(Me.CB_POZO.ListIndex, 0)
    OW_ID_TIPO_EVENTO = Me.CB_TIPO_EVENTO.list(Me.CB_TIPO_EVENTO.ListIndex, 0)
    OW_COD_UNIDAD_GESTION = Me.CB_UGESTION.list(Me.CB_UGESTION.ListIndex, 0)

    '1|fffd| SE ACTUALIZA EL POZO
    'ID_POZO = GuardarPozoSolicitudBD(OW_COD_POZO)
    'If (ID_POZO = 0) Then
    '    MsgBox "ERROR: Ha ocurrido un Error al guardar el POZO!!! Comunicarse con el Administrador del sistema", vbCritical, "SOLICITAR"
    '    Exit Function
    'End If
    
    'SECCION AREA
    'If (Me.TB_AREA_NUEVA.Visible) = True Then
     '   ID_AREA = GuardarAreaSolicitudBD("'" & UCase(Trim(Me.TB_AREA_NUEVA.Text)) & "'", "", "'" & OW_COD_UNIDAD_GESTION & "'", "'" & OW_ID_TIPO_EVENTO & "'")
    'Else
    '    If (Me.CB_AREA.ListIndex <> -1) Then
    '        ID_AREA = GuardarAreaSolicitudBD("'" & Me.CB_AREA.list(Me.CB_AREA.ListIndex, 1) & "'", "'" & Me.CB_AREA.list(Me.CB_AREA.ListIndex, 0) & "'", "", "'" & OW_ID_TIPO_EVENTO & "'")
    '    End If
    'End If
    
    '2|fffd| SE GUARDA EL EVENTO CON SU POZO
    ID_EVENTO = GuardarEventoBD(ID_POZO, ID_AREA, OW_ID_TIPO_EVENTO, OW_COD_UNIDAD_GESTION, OW_ID_EQUIPO, FECHA_INICIO_EVENTO, OW_ID_OBJETIVO_EVENTO)
   ' If (ID_EVENTO = 0) Then
   '     MsgBox "ERROR: Ha ocurrido un Error al guardar el EVENTO!!! Comunicarse con el Administrador del sistema", vbCritical, "SOLICITAR"
   '     Exit Function
   ' End If
    
    '3|fffd| SE GUARDA LA SOLICITUD CON SU EVENTO
    Call GuardarSolicitud(tb_observaciones.Text, destinatarios, C_ID_TIPO_ALTA_EVENTO, "Alta de Evento", "ALTA DE EVENTO", ID_EVENTO, 0)

End Function

Public Sub GuardarSolicitud(ByVal observaciones As String, ByVal destinatario As String, ByVal idTipoSolicitud As String, ByVal mensajeTipo As String, ByVal pAsunto As String, ByVal pEvento As Integer, ByVal pReporte As Integer)

    Dim cn As ADODB.Connection
    Dim rs As ADODB.Recordset
    Dim txtObs As String
    Dim intSolicitud As Integer
    Dim solicitante As String
    Dim sqlstring As String
    
    solicitante = Right("00000" & Trim(Replace(Worksheets("DATOS_GENERALES").Range("C6").Value, ".", "")), 5)
    If (observaciones = "") Then
        txtObs = "NULL"
    Else
        txtObs = "'" & observaciones & "'"
    End If
    
    '1|fffd| SE INSERTA EN TABLA SOLICITUD LA SOLICITUD Y SU EVENTO/REPORTE ASOCIADO
    If (pEvento <> 0) Then
        sqlstring = "INSERT INTO SOLICITUD VALUES('" & solicitante & "', GETDATE(), " & idTipoSolicitud & ", " & pEvento & ", NULL)"
    Else
        sqlstring = "INSERT INTO SOLICITUD VALUES('" & solicitante & "', GETDATE(), " & idTipoSolicitud & ", NULL," & pReporte & ")"
    End If
    
    If (GrabarTablasBD(sqlstring) <= 0) Then
        Call MsgBox("ERROR: Ha ocurrido un Error al guardar la tabla SOLICITUD!!!", vbCritical, "GUARDAR BD")
    End If
   
    'Se busca el |fffd|ltimo ID insertado para enviar este por mail y explicar que la solicitud insertada por este usuario es este
    SQLstring_Aux = "SELECT MAX(ID_SOLICITUD) AS ID_SOLICITUD FROM SOLICITUD WHERE SOLICITANTE = '" & Right("00000" & Trim(Replace(Worksheets("DATOS_GENERALES").Range("C6").Value, ".", "")), 5) & "'"
    Set rs = ConsultarTablasBD(SQLstring_Aux)
    If (rs.RecordCount > 0) Then
        rs.MoveFirst

        intSolicitud = rs!ID_SOLICITUD
    Else
        Call MsgBox("ERROR: Ha ocurrido un error al grabar SOLICITUD", vbCritical, "GUARDAR BD")
    End If
    
    '2|fffd| SE INSERTA EN TABLA SOLICITUDES EL ESTADO DE LA SOLICITUD, CON EL ID GENERADO EN TABLA SOLICITUD
    sqlstring = "INSERT INTO SOLICITUDES VALUES(" & intSolicitud & "," & C_ESTADO_SOLICITADA & ",'" & solicitante & "', GETDATE(), " & txtObs & ")"
    If (GrabarTablasBD(sqlstring) > 0) Then
        Call EnviarMailAccionEvento(intSolicitud, observaciones, destinatario, mensajeTipo, pAsunto)
        
        Call MsgBox("La solicitud de " & mensajeTipo & " en OpenWells se ha enviado con |fffd|xito.", vbInformation, "SOLICITAR")
    Else
        Call MsgBox("ERROR: Ha ocurrido un error al grabar SOLICITUDES!!!", vbCritical, "GUARDAR BD")
    End If
    
End Sub

' ---------------- RUTINAS DE LIMPIEZA DE FORMULARIO ----------------

Private Sub resetearDatos()

    ' SECCION DATOS BASICOS
    Me.CB_POZO.ListIndex = -1
    Me.CB_POZO.Enabled = True
    Me.TB_FECHA_INICIO.Text = ""
    Me.TB_FECHA_INICIO.Enabled = True
   
    ' SECCION PROPIEDADES EVENTO
    Me.CB_TIPO_EVENTO.ListIndex = -1
    Me.CB_TIPO_EVENTO.Enabled = False
    Me.CB_OBJETIVO.ListIndex = -1
    Me.CB_OBJETIVO.Enabled = False
    Me.CB_METODO_CONSTRUCTIVO.ListIndex = -1
    Me.CB_METODO_CONSTRUCTIVO.Enabled = False
    Me.LA_DESC_METODO_CONS.Caption = ""
    Me.TB_ADJUSTED_BUDGET.Text = ""
    Me.TB_ADJUSTED_BUDGET.Enabled = False
    Me.TB_AUTHORIZED_TMD_V20.Text = ""
    Me.TB_AUTHORIZED_TMD_V20.Enabled = False
    Me.TB_AUTHORIZED_TMD_V30.Text = ""
    Me.TB_AUTHORIZED_TMD_V30.Enabled = False
    Me.TB_AUTHORIZED_TVD.Text = ""
    Me.TB_AUTHORIZED_TVD.Enabled = False
    Me.TB_BASELINE.Text = ""
    Me.TB_BASELINE.Enabled = False
    Me.TB_RIG_MOVE_DISTANCE.Text = ""
    Me.TB_RIG_MOVE_DISTANCE.Enabled = False
    Me.TB_EWI.Text = ""
    Me.TB_EWI.Enabled = False
    
    ' SECCION PROPIEDADES POZO
    Me.CB_PURPOSE.ListIndex = -1
    Me.CB_PURPOSE.Enabled = False
    Me.CB_OBJECTIVE.ListIndex = -1
    Me.CB_OBJECTIVE.Enabled = False
    Me.CB_PATH.ListIndex = -1
    Me.CB_PATH.Enabled = False
    Me.CB_DEPTH.ListIndex = -1
    Me.CB_DEPTH.Enabled = False
    
    'SECCION EQUIPO
    Me.CB_EQUIPO.ListIndex = -1
    Me.CB_EQUIPO.Enabled = False
    Me.TB_ALTURA_NUEVA.Text = ""
    Me.TB_ALTURA_NUEVA.Enabled = False
    Me.TB_ALTURA_NUEVA.BackColor = &H80000005
    
    'SECCION AREA
    Me.CB_AREA.ListIndex = -1
    Me.CB_AREA.Enabled = False
    
    ' SECCION OBSERVACIONES
    Me.tb_observaciones.Text = ""
    Me.tb_observaciones.Enabled = False
    
    ' BOTONES
    Me.BT_DAR_ALTA.Enabled = True
    Me.BT_SOLICITAR.Enabled = False
    
End Sub

Private Sub ResetearDatosChangeTipoEvento()

    ' SECCION PROPIEDADES DE EVENTO
    Me.CB_OBJETIVO.ListIndex = -1
    Me.CB_OBJETIVO.Enabled = False
    Me.CB_METODO_CONSTRUCTIVO.ListIndex = -1
    Me.CB_METODO_CONSTRUCTIVO.Enabled = False
    Me.LA_DESC_METODO_CONS.Caption = ""
    Me.TB_ADJUSTED_BUDGET.Text = ""
    Me.TB_ADJUSTED_BUDGET.Enabled = False
    Me.TB_AUTHORIZED_TMD_V20.Text = ""
    Me.TB_AUTHORIZED_TMD_V20.Enabled = False
    Me.TB_AUTHORIZED_TMD_V30.Text = ""
    Me.TB_AUTHORIZED_TMD_V30.Enabled = False
    Me.TB_AUTHORIZED_TVD.Text = ""
    Me.TB_AUTHORIZED_TVD.Enabled = False
    Me.TB_BASELINE.Text = ""
    Me.TB_BASELINE.Enabled = False
    Me.TB_RIG_MOVE_DISTANCE.Text = ""
    Me.TB_RIG_MOVE_DISTANCE.Enabled = False
    Me.TB_EWI.Text = ""
    Me.TB_EWI.Enabled = False

    ' SECCION PROPIEDADES DE POZO
    Me.CB_PURPOSE.Enabled = False
    Me.CB_OBJECTIVE.Enabled = False
    Me.CB_PATH.Enabled = False
    Me.CB_DEPTH.Enabled = False
    
    'SECCION EQUIPO
    Me.CB_EQUIPO.ListIndex = -1
    Me.CB_EQUIPO.Enabled = False
    Me.TB_ALTURA_NUEVA.Text = ""
    Me.TB_ALTURA_NUEVA.Enabled = False
    Me.TB_ALTURA_NUEVA.BackColor = &H80000005
       
    'SECCION AREA
    Me.CB_AREA.ListIndex = -1
    Me.CB_AREA.Enabled = False
    
    ' SECCION OBSERVACIONES
    Me.tb_observaciones.Text = ""
    
    
End Sub

Private Sub UserForm_Click()

End Sub
Attribute VB_Name = "ALTA_EVENTO_V2"
Attribute VB_Base = "0{C04DE4CC-E85F-4E10-A01A-5893A04A3AC7}{4A256861-C3D2-455C-A3E7-DD3562617BF9}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Public cambiosEnPozo As Boolean
Public numeroSolicitud As Integer

' Metodo de inicializacion de formulario
Public Sub inicializarFormulario(ByVal nroSolicitud As Integer)
    
    numeroSolicitud = nroSolicitud

    If numeroSolicitud = 0 Then     ' Se esta ingresando una solicitud de ALTA DE EVENTO
        
        'Dimensiono variables locales
        Dim queryString As String
        Dim unidadGestionUsuario As String
        Dim codigoFuncion As String
        
        ' Obtengo valores de los DATOS GENERALES
        unidadGestionUsuario = Sheets(H_GENERALES).Range("H9").Value
        codigoFuncion = "" & Int(Left(Sheets(H_GENERALES).Range("C6").Value, 2)) & ""
    
        ' Cargo ComboBox UNIDAD DE GESTION
        queryString = "SELECT OW_CODIGO, DESCRIPCION FROM UGESTION WHERE OW_CODIGO ='" & unidadGestionUsuario & "' AND BAJA = 0 ORDER BY DESCRIPCION ASC"
        Call agregarAlComboBox(Me.cb_unidadGestion, queryString)
        Me.cb_unidadGestion.ListIndex = 0
        Me.cb_unidadGestion.Enabled = False
    
        ' Cargo ComboBox POZO segun la UNIDAD DE GESTION del usuario
        queryString = "SELECT OW_COD_POZO, DESCRIPCION FROM POZOS WHERE OW_CODIGO_UG ='" & unidadGestionUsuario & "' AND BAJA = 0 ORDER BY DESCRIPCION ASC"
        Call agregarAlComboBox(Me.CB_POZO, queryString)
        Me.CB_POZO.ListIndex = -1
        Me.CB_POZO.Enabled = True
        
        ' Si es usuario de CO/WO cambio label ALTURA DE MESA por KELLY BUSHING
        If codigoFuncion = C_FUNCION_INGENIERO_WO Then
            Me.la_alturaMesa.Caption = "KELLY BUSHING"
        End If
        
        ' Limpio todos los campos
        Call limpiarCampos
        
        ' Dejo el cursor en el ComboBox POZO
        Me.CB_POZO.SetFocus
        Me.ORGANIZADOR.Value = 0
    Else
    
        ' Visualizacion de solicitud
        Me.FR_NRO_SOLICITUD.Visible = True
        Me.tb_numeroSolicitud.Visible = True
        Me.tb_numeroSolicitud.Value = numeroSolicitud
        
        ' Desactivo los botones
        Me.BT_CANCELAR.Enabled = False
        Me.bt_ingresarEvento.Enabled = False
        Me.BT_SOLICITAR.Enabled = False
        
       queryString = "SELECT  UG.OW_CODIGO, UG.DESCRIPCION " & _
                     "FROM " & _
                     "SOLICITUD S " & _
                     "JOIN EVENTO E ON E.ID_EVENTO = S.ID_EVENTO " & _
                     "JOIN UGESTION UG ON UG.OW_CODIGO = E.OW_COD_UNIDAD_GESTION " & _
                     "WHERE ID_SOLICITUD = " & nroSolicitud
                    
        Call agregarAlComboBox(Me.cb_unidadGestion, queryString)
        Me.cb_unidadGestion.ListIndex = 0
        Me.cb_unidadGestion.Enabled = False
        
        queryString = "SELECT SP.OW_COD_POZO, SP.DESCRIPCION " & _
                      "FROM " & _
                      "SOLICITUD S " & _
                      "JOIN EVENTO E ON E.ID_EVENTO = S.ID_EVENTO " & _
                      "JOIN SOLICITUD_POZO SP ON SP.ID_POZO = E.ID_POZO " & _
                      "WHERE ID_SOLICITUD = " & nroSolicitud
                    
        Call agregarAlComboBox(Me.CB_POZO, queryString)
        Me.CB_POZO.ListIndex = 0
        Me.CB_POZO.Enabled = False
        
        queryString = "SELECT E.OW_ID_TIPO_EVENTO, TE.COD_EVENTO, TE.DESCRIPCION " & _
                      "FROM " & _
                      "SOLICITUD S " & _
                      "JOIN EVENTO E ON E.ID_EVENTO = S.ID_EVENTO " & _
                      "JOIN TIPO_EVENTO TE ON TE.OW_ID_TIPO_EVENTO = E.OW_ID_TIPO_EVENTO " & _
                      "WHERE ID_SOLICITUD = " & nroSolicitud
                      
        Call agregarAlComboBox(Me.cb_tipoEvento, queryString)
        Me.cb_tipoEvento.ListIndex = 0
        Me.la_descripcionTipoEvento.Caption = Me.cb_tipoEvento.list(Me.cb_tipoEvento.ListIndex, 2)
        Me.cb_tipoEvento.Enabled = False
        
        queryString = "SELECT E.OW_ID_OBJETIVO_EVENTO, OE.DESCRIPCION, OE.OW_DESC_SPANISH " & _
                      "FROM SOLICITUD S " & _
                      "JOIN EVENTO E ON E.ID_EVENTO = S.ID_EVENTO " & _
                      "JOIN OBJETIVO_EVENTO OE ON OE.OW_ID_OBJETIVO_EVENTO = E.OW_ID_OBJETIVO_EVENTO " & _
                      "WHERE ID_SOLICITUD = " & nroSolicitud
        
        Call agregarAlComboBox(Me.cb_objetivoEvento, queryString)
        Me.cb_objetivoEvento.ListIndex = 0
        Me.la_descripcionObjetivoEvento.Caption = Me.cb_objetivoEvento.list(Me.cb_objetivoEvento.ListIndex, 2)
        Me.cb_objetivoEvento.Enabled = False
        
        queryString = "SELECT E.ID_MAIN_CAUSE, MC.DESCRIPTION, ISNULL(MC.DESC_SPANISH, '') " & _
                      "FROM SOLICITUD S " & _
                      "JOIN EVENTO E ON E.ID_EVENTO = S.ID_EVENTO " & _
                      "LEFT JOIN MAIN_CAUSE MC ON E.ID_MAIN_CAUSE = MC.KEY_ID " & _
                      "WHERE ID_SOLICITUD = " & nroSolicitud
                      
        Call agregarAlComboBox(Me.cb_mainCause, queryString)
        Me.cb_mainCause.ListIndex = 0
        Me.la_descripcionMainCause.Caption = Me.cb_mainCause.list(Me.cb_mainCause.ListIndex, 2)
        Me.cb_mainCause.Enabled = False
        
        queryString = "SELECT E.OW_ID_METODO_CONSTRUCTIVO, ISNULL(MC.DESCRIPCION,''), ISNULL(MC.OW_DESC_SPANISH,'') " & _
                      "FROM SOLICITUD S " & _
                      "JOIN EVENTO E ON E.ID_EVENTO = S.ID_EVENTO " & _
                      "LEFT JOIN METODO_CONSTRUCTIVO MC ON MC.OW_ID_METODO_CONSTRUCTIVO = E.OW_ID_METODO_CONSTRUCTIVO " & _
                      "WHERE ID_SOLICITUD = " & nroSolicitud
        
        Call agregarAlComboBox(Me.cb_metodoConstructivo, queryString)
        Me.cb_metodoConstructivo.ListIndex = 0
        Me.la_descripcionMetodoConstructivo.Caption = Me.cb_metodoConstructivo.list(Me.cb_metodoConstructivo.ListIndex, 2)
        Me.cb_metodoConstructivo.Enabled = False
        
        queryString = "SELECT SP.OW_ID_PURPOSE_POZO, PP.DESCRIPCION, ISNULL(PP.OW_DESC_SPANISH, '') " & _
                      "FROM SOLICITUD_POZO SP " & _
                      "LEFT JOIN PURPOSE_POZO PP ON PP.OW_ID_PURPOSE_POZO = SP.OW_ID_PURPOSE_POZO " & _
                      "JOIN EVENTO E ON E.ID_POZO = SP.ID_POZO " & _
                      "JOIN SOLICITUD S ON S.ID_EVENTO= E.ID_EVENTO " & _
                      "WHERE S.ID_SOLICITUD = '" & nroSolicitud & "'"
        
        Call agregarAlComboBox(Me.cb_purposePozo, queryString)
        Me.cb_purposePozo.ListIndex = 0
        Me.la_descripcionPurposePozo.Caption = Me.cb_purposePozo.list(Me.cb_purposePozo.ListIndex, 2)
        Me.cb_purposePozo.Enabled = False
        
        queryString = "SELECT SP.OW_ID_OBJECTIVE_POZO, OP.OW_ID_OBJECTIVE_POZO, ISNULL(OP.DESCRIPCION, '') " & _
                      "FROM SOLICITUD_POZO SP " & _
                      "LEFT JOIN OBJECTIVE_POZO OP ON OP.OW_ID_OBJECTIVE_POZO = SP.OW_ID_OBJECTIVE_POZO " & _
                      "JOIN EVENTO E ON E.ID_POZO = SP.ID_POZO " & _
                      "JOIN SOLICITUD S ON S.ID_EVENTO = E.ID_EVENTO " & _
                      "WHERE S.ID_SOLICITUD = '" & nroSolicitud & "'"
                                                        
        Call agregarAlComboBox(Me.cb_objectivePozo, queryString)
        Me.cb_objectivePozo.ListIndex = 0
        Me.la_descripcionObjectivePozo.Caption = Me.cb_objectivePozo.list(Me.cb_objectivePozo.ListIndex, 2)
        Me.cb_objectivePozo.Enabled = False
        
        queryString = "SELECT SP.OW_ID_PATH_POZO, PAP.OW_ID_PATH_POZO, ISNULL(PAP.DESCRIPCION, '') " & _
                      "FROM SOLICITUD_POZO SP " & _
                      "LEFT JOIN PATH_POZO PAP ON PAP.OW_ID_PATH_POZO = SP.OW_ID_PATH_POZO " & _
                      "JOIN EVENTO E ON E.ID_POZO = SP.ID_POZO " & _
                      "JOIN SOLICITUD S ON S.ID_EVENTO = E.ID_EVENTO " & _
                      "WHERE S.ID_SOLICITUD = '" & nroSolicitud & "'"

        Call agregarAlComboBox(Me.cb_pathPozo, queryString)
        Me.cb_pathPozo.ListIndex = 0
        Me.la_descripcionPathPozo.Caption = Me.cb_pathPozo.list(Me.cb_pathPozo.ListIndex, 2)
        Me.cb_pathPozo.Enabled = False

        queryString = "SELECT SP.OW_ID_DEPTH_POZO, DP.OW_ID_DEPTH_POZO, ISNULL(DP.DESCRIPCION, '') " & _
                      "FROM SOLICITUD_POZO SP " & _
                      "LEFT JOIN DEPTH_POZO DP ON DP.OW_ID_DEPTH_POZO = SP.OW_ID_DEPTH_POZO " & _
                      "JOIN EVENTO E ON E.ID_POZO = SP.ID_POZO " & _
                      "JOIN SOLICITUD S ON S.ID_EVENTO = E.ID_EVENTO " & _
                      "WHERE S.ID_SOLICITUD = '" & nroSolicitud & "'"
        
        Call agregarAlComboBox(Me.cb_depthPozo, queryString)
        Me.cb_depthPozo.ListIndex = 0
        Me.la_descripcionDepthPozo.Caption = Me.cb_depthPozo.list(Me.cb_depthPozo.ListIndex, 2)
        Me.cb_depthPozo.Enabled = False
        
        queryString = "SELECT SP.ID_WELL_LATERAL, WL.TYPE, ISNULL(WL.RANGE, '') " & _
                      "FROM SOLICITUD_POZO SP " & _
                      "LEFT JOIN WELL_LATERAL WL ON WL.KEY_ID = SP.ID_WELL_LATERAL " & _
                      "JOIN EVENTO E ON E.ID_POZO = SP.ID_POZO " & _
                      "JOIN SOLICITUD S ON S.ID_EVENTO = E.ID_EVENTO " & _
                      "WHERE S.ID_SOLICITUD = '" & nroSolicitud & "'"
        
        Call agregarAlComboBox(Me.cb_lateralLength, queryString)
        Me.cb_lateralLength.ListIndex = 0
        Me.la_descripcionLateralLength.Caption = Me.cb_lateralLength.list(Me.cb_lateralLength.ListIndex, 2)
        Me.cb_lateralLength.Enabled = False
        
        queryString = "SELECT E.OW_ID_EQUIPO, EQ.DESCRIPCION, ''" & _
                      "FROM SOLICITUD S " & _
                      "JOIN EVENTO E ON E.ID_EVENTO = S.ID_EVENTO " & _
                      "JOIN EQUIPOS EQ ON E.OW_ID_EQUIPO = EQ.OW_ID_EQUIPO " & _
                      "WHERE ID_SOLICITUD = " & nroSolicitud
        
        Call agregarAlComboBox(Me.CB_EQUIPO, queryString)
        Me.CB_EQUIPO.ListIndex = 0
        Me.CB_EQUIPO.Enabled = False
                
        queryString = "SELECT E.ID_AREA, A.OW_NAME " & _
                      "FROM SOLICITUD S " & _
                      "JOIN EVENTO E ON S.ID_EVENTO = E.ID_EVENTO " & _
                      "JOIN AREAS_OW A ON A.OW_KEY_ID = E.ID_AREA " & _
                      "WHERE S.ID_SOLICITUD = " & nroSolicitud
        
        Call agregarAlComboBox(Me.CB_AREA, queryString)
        Me.CB_AREA.ListIndex = 0
        Me.CB_AREA.Enabled = False
        
        queryString = "SELECT RTRIM(CONVERT(CHAR, FECHA_INICIO_EVENTO, 103)), ISNULL(RTRIM(CONVERT(CHAR, FECHA_FIN_EVENTO, 103)), ''),  ISNULL(ADJUSTED_BUDGET_V20,''), ISNULL(AUTHORIZED_TMD_V20, ''), ISNULL(AUTHORIZED_TMD_V30, ''), ISNULL(AUTHORIZED_TVD, ''), " & _
                      "ISNULL(BASELINE, ''), ISNULL(RIG_MOVE_DISTANCE, ''), EWI, ISNULL(COST_TYPE, ''), EQUIPO_ALTURA_MESA, ISNULL(SO.OBSERVACIONES, '') " & _
                      "FROM " & _
                      "SOLICITUD S " & _
                      "JOIN EVENTO E ON E.ID_EVENTO = S.ID_EVENTO " & _
                      "JOIN SOLICITUDES SO ON SO.ID_SOLICITUD = S.ID_SOLICITUD " & _
                      "WHERE S.ID_SOLICITUD = " & nroSolicitud
                      
        Set rs = ConsultarTablasBD(queryString)
        
        Me.tb_fechaInicio.Value = rs.Fields(0)
        Me.tb_fechaInicio.Enabled = False
        Me.tb_fechaFin.Value = rs.Fields(1)
        Me.tb_fechaFin.Enabled = False
        Me.tb_adjustedBudget.Value = rs.Fields(2)
        Me.tb_adjustedBudget.Enabled = False
        Me.tb_authorizedTMDv20.Value = rs.Fields(3)
        Me.tb_authorizedTMDv20.Enabled = False
        Me.tb_authorizedTMDv30.Value = rs.Fields(4)
        Me.tb_authorizedTMDv30.Enabled = False
        Me.tb_authorizedTVD.Value = rs.Fields(5)
        Me.tb_authorizedTVD.Enabled = False
        Me.TB_BASELINE.Value = rs.Fields(6)
        Me.TB_BASELINE.Enabled = False
        Me.tb_rigMoveDistance.Value = rs.Fields(7)
        Me.tb_rigMoveDistance.Enabled = False
        Me.TB_EWI.Value = rs.Fields(8)
        Me.TB_EWI.Enabled = False
        
            If rs.Fields(9) = "CAPITAL" Then
                Me.op_capex.Value = True
            Else
                Me.op_opex.Value = True
            End If

        Me.op_capex.Enabled = False
        Me.op_opex.Enabled = False
        
        Me.tb_alturaMesa.Value = IIf(IsNull(rs.Fields(10)), "", rs.Fields(10))
        Me.tb_alturaMesa.Enabled = False
        Me.tb_observaciones.Value = rs.Fields(11)
        Me.tb_observaciones.Enabled = False
    
    End If

    Call aplicarTemplate(Me)
    Me.fr_costos.BackColor = RGB(252, 236, 240)
    Me.la_adjustedBudget.BackColor = RGB(252, 236, 240)
    Me.la_usdAdjustedBudget.BackColor = RGB(252, 236, 240)
    Me.op_capex.BackColor = RGB(252, 236, 240)
    Me.op_opex.BackColor = RGB(252, 236, 240)
      
    
End Sub

' Rutina para limpiar todos los campso y dejar listo el formulario para cargar
Private Sub limpiarCampos()

    ' Seccion DATOS BASICOS
    Me.CB_POZO.ListIndex = -1
    Me.CB_POZO.Enabled = True
    Me.tb_fechaInicio.Text = ""
    Me.tb_fechaInicio.Enabled = True
    Me.bt_ingresarEvento.Enabled = True
    
    ' Seccion EVENTO
    Me.cb_tipoEvento.ListIndex = -1
    Me.cb_tipoEvento.Enabled = False
    Me.la_descripcionTipoEvento.Caption = ""
    Me.tb_fechaFin.Value = ""
    Me.tb_fechaFin.Enabled = False
    Me.cb_objetivoEvento.ListIndex = -1
    Me.cb_objetivoEvento.Enabled = False
    Me.la_descripcionObjetivoEvento.Caption = ""
    Me.cb_mainCause.ListIndex = -1
    Me.cb_mainCause.Enabled = False
    Me.la_descripcionMainCause.Caption = ""
    Me.cb_metodoConstructivo.ListIndex = -1
    Me.cb_metodoConstructivo.Enabled = False
    Me.la_descripcionMetodoConstructivo.Caption = ""
    Me.tb_adjustedBudget.Value = ""
    Me.tb_adjustedBudget.Enabled = False
    Me.tb_authorizedTMDv20.Value = ""
    Me.tb_authorizedTMDv20.Enabled = False
    Me.tb_authorizedTMDv30.Value = ""
    Me.tb_authorizedTMDv30.Enabled = False
    Me.tb_authorizedTVD.Value = ""
    Me.tb_authorizedTVD.Enabled = False
    Me.TB_BASELINE.Value = ""
    Me.TB_BASELINE.Enabled = False
    Me.tb_rigMoveDistance.Value = ""
    Me.tb_rigMoveDistance.Enabled = False
    Me.TB_EWI.Value = ""
    Me.TB_EWI.Enabled = False
    Me.op_capex.Value = False
    Me.op_capex.Enabled = False
    Me.op_opex.Value = False
    Me.op_opex.Enabled = False
    
    ' Seccion POZO
    Me.cb_purposePozo.ListIndex = -1
    Me.cb_purposePozo.Enabled = False
    Me.la_descripcionPurposePozo.Caption = ""
    Me.cb_objectivePozo.ListIndex = -1
    Me.cb_objectivePozo.Enabled = False
    Me.la_descripcionObjectivePozo.Caption = ""
    Me.cb_pathPozo.ListIndex = -1
    Me.cb_pathPozo.Enabled = False
    Me.la_descripcionPathPozo.Caption = ""
    Me.cb_depthPozo.ListIndex = -1
    Me.cb_depthPozo.Enabled = False
    Me.la_descripcionDepthPozo.Caption = ""
    Me.cb_lateralLength.ListIndex = -1
    Me.cb_lateralLength.Enabled = False
    Me.la_descripcionLateralLength.Caption = ""
    
    ' Seccion EQUIPO
    Me.CB_EQUIPO.ListIndex = -1
    Me.CB_EQUIPO.Enabled = False
    Me.tb_alturaMesa.Value = ""
    Me.tb_alturaMesa.Enabled = False
        
    ' Seccion AREA
    Me.CB_AREA.ListIndex = -1
    Me.CB_AREA.Enabled = False
    
    ' Seccion OBSERVACIONES
    Me.tb_observaciones.Value = ""
    Me.tb_observaciones.Enabled = False
    
    ' Desactivo boton SOLICITAR
    Me.BT_SOLICITAR.Enabled = False
    
End Sub

Private Sub bt_cancelar_Click()

    Dim opcion As Integer
    
    opcion = MsgBox("|fffd|Esta seguro de CANCELAR la solicitud en curso? Se perdera la informaci|fffd|n cargada.", vbOKCancel, "AVISO")
    
    If opcion = vbCancel Then
        Exit Sub
    End If

    Call limpiarCampos

End Sub

' Boton para activar el ingreso de propiedades del EVENTO
Private Sub bt_ingresarEvento_Click()
        
    ' Dimensiono variables locales
    Dim codigoFuncion As String
    
    ' Tomo la funcion del USUARIO
    codigoFuncion = "" & Int(Left(Sheets(H_GENERALES).Range("C6").Value, 2)) & ""

    ' Valido seleccion de POZO
    If Me.CB_POZO.ListIndex < 0 Then
        MsgBox "Se debe seleccionar un POZO", vbCritical, "AVISO"
        Exit Sub
    End If
    
    ' Valido la FECHA DE INICIO
    If (Len(Me.tb_fechaInicio.Text) = 10) Then
        If (Not IsDate(Me.tb_fechaInicio.Text)) Then
            MsgBox "Formato inv|fffd|lido de FECHA DE INICIO: dd/mm/yyyy", vbCritical, "AVISO"
            Exit Sub
        Else
            ' La fecha no puede ser posterior ni anterior a UN MES.
            If CDate(Me.tb_fechaInicio.Text) > DateAdd("m", 1, Date) Then
                MsgBox "La FECHA DE INICIO no puede ser POSTERIOR a un MES.", vbCritical, "AVISO"
                Exit Sub
            ElseIf CDate(Me.tb_fechaInicio.Text) < DateAdd("m", -1, Date) Then
                MsgBox "La FECHA DE INICIO no puede ser ANTERIOR a un MES.", vbCritical, "AVISO"
                Exit Sub
            End If
        End If
    Else
       If Len(Trim(Me.tb_fechaInicio.Text)) = 0 Then
            MsgBox "Debe ingresar una FECHA DE INICIO. Formato: dd/mm/yyyy", vbCritical, "AVISO"
            Exit Sub
        Else
            MsgBox "Formato v|fffd|lido de FECHA DE INICIO: dd/mm/yyyy", vbCritical, "AVISO"
            Exit Sub
        End If
    End If
    
    ' Paso todas las validaciones. Bloqueo los DATOS BASICOS y desbloqueo el formulario para la carga del evento.
    Me.CB_POZO.Enabled = False
    Me.tb_fechaInicio.Enabled = False
    Me.bt_ingresarEvento.Enabled = False
    
    ' Activo el boton SOLICITAR
    Me.BT_SOLICITAR.Enabled = True
    
    ' Cargo ComboBox TIPO DE EVENTO
    Me.cb_tipoEvento.ListIndex = -1
    Me.cb_tipoEvento.Enabled = True
    Call cargarComboBoxTipoEvento(cb_tipoEvento, codigoFuncion)
    
    ' Cargo las propiedades del POZO o habilito los picklist para que sean cargadas
    Call cargarPropiedadesPozo(Me.CB_POZO.list(Me.CB_POZO.ListIndex, 0))
    
    ' Habilito campos que no dependan de otros
    Call habilitarCamposSinDependencia
    
    
End Sub

Private Sub habilitarCamposSinDependencia()

    ' Seccion EVENTO
    Me.tb_fechaFin.Enabled = True
    Me.tb_authorizedTMDv20.Enabled = True
    Me.tb_authorizedTMDv30.Enabled = True
    Me.tb_authorizedTVD.Enabled = True
    Me.TB_BASELINE.Enabled = True
    Me.tb_rigMoveDistance.Enabled = True
    Me.TB_EWI.Enabled = True
    
    ' Seccion EVENTO - Frame COSTOS
    Me.tb_adjustedBudget.Enabled = True
    Me.op_capex.Enabled = True
    Me.op_opex.Enabled = True
    
    ' Seccion OBSERVACIONES
    Me.tb_observaciones.Enabled = True

End Sub

Private Sub cargarPropiedadesPozo(ByVal codigoPozo As String)

    Dim queryString As String
    Dim rsPozo As ADODB.Recordset
    cambiosEnPozo = False
    
    ' Busco el pozo en la tabla POZOS para ver si ya tiene sus propiedades cargadas.
    queryString = "SELECT ISNULL(PP2.OW_ID_PURPOSE_POZO, PP.OW_ID_PURPOSE_POZO) PP_ID, ISNULL(PP2.DESCRIPCION, PP.DESCRIPCION) PP_DESC, " & _
                  "ISNULL(PP2.OW_DESC_SPANISH, PP.OW_DESC_SPANISH) PP_DESC_ESP, ISNULL(OP2.OW_ID_OBJECTIVE_POZO, OP.OW_ID_OBJECTIVE_POZO) OP_ID, " & _
                  "ISNULL(OP2.DESCRIPCION, OP.DESCRIPCION) OP_DESC, ISNULL(PAP2.OW_ID_PATH_POZO, PAP.OW_ID_PATH_POZO) PAP_ID, " & _
                  "ISNULL(PAP2.DESCRIPCION, PAP.DESCRIPCION) PAP_DESC, ISNULL(DP2.OW_ID_DEPTH_POZO, DP.OW_ID_DEPTH_POZO) DP_ID, " & _
                  "ISNULL(DP2.DESCRIPCION, DP.DESCRIPCION) DP_DESC, ISNULL(WL2.KEY_ID, WL.KEY_ID), ISNULL(WL2.TYPE, WL.TYPE) WL_TYPE, " & _
                  "ISNULL(WL2.RANGE, WL.RANGE) WL_RANGE "
    queryString = queryString & "FROM POZOS P LEFT JOIN PURPOSE_POZO PP ON PP.OW_ID_PURPOSE_POZO = P.OW_ID_PURPOSE_POZO " & _
                  "LEFT JOIN OBJECTIVE_POZO OP ON OP.OW_ID_OBJECTIVE_POZO = P.OW_ID_OBJECTIVE_POZO " & _
                  "LEFT JOIN PATH_POZO PAP ON PAP.OW_ID_PATH_POZO = P.OW_ID_PATH_POZO " & _
                  "LEFT JOIN DEPTH_POZO DP ON DP.OW_ID_DEPTH_POZO = P.OW_ID_DEPTH_POZO " & _
                  "LEFT JOIN WELL_LATERAL WL ON WL.KEY_ID = P.ID_WELL_LATERAL " & _
                  "LEFT JOIN SOLICITUD_POZO SP ON SP.DESCRIPCION = P.DESCRIPCION " & _
                  "LEFT JOIN PURPOSE_POZO PP2 ON PP2.OW_ID_PURPOSE_POZO = SP.OW_ID_PURPOSE_POZO " & _
                  "LEFT JOIN OBJECTIVE_POZO OP2 ON OP2.OW_ID_OBJECTIVE_POZO = SP.OW_ID_OBJECTIVE_POZO " & _
                  "LEFT JOIN PATH_POZO PAP2 ON PAP2.OW_ID_PATH_POZO = SP.OW_ID_PATH_POZO " & _
                  "LEFT JOIN DEPTH_POZO DP2 ON DP2.OW_ID_DEPTH_POZO = SP.OW_ID_DEPTH_POZO " & _
                  "LEFT JOIN WELL_LATERAL WL2 ON WL2.KEY_ID = SP.ID_WELL_LATERAL " & _
                  "WHERE P.OW_COD_POZO = '" & codigoPozo & "'"
    
    Set rsPozo = ConsultarTablasBD(queryString)
    
    ' Analizo campo a campo cual tengo que requerir
    If rsPozo.RecordCount > 0 Then
        
        ' Purpose Pozo
        If Not IsNull(rsPozo.Fields(0)) Then
            With Me.cb_purposePozo
                .AddItem
                .list(0, 0) = rsPozo.Fields(0)
                .list(0, 1) = rsPozo.Fields(1)
                .list(0, 2) = rsPozo.Fields(2)
                .ListIndex = 0
                .Enabled = False
            End With
        Else
            Call agregarAlComboBox(Me.cb_purposePozo, "SELECT OW_ID_PURPOSE_POZO, DESCRIPCION, OW_DESC_SPANISH FROM PURPOSE_POZO " & _
                                                        "WHERE BAJA = 0 ORDER BY DESCRIPCION")
            Me.cb_purposePozo.Enabled = True
            cambiosEnPozo = True
        End If
        
        ' Objective Pozo
        If Not IsNull(rsPozo.Fields(3)) Then
            With Me.cb_objectivePozo
                .AddItem
                .list(0, 0) = rsPozo.Fields(3)
                .list(0, 1) = rsPozo.Fields(3)
                .ListIndex = 0
                .Enabled = False
            End With
            Me.la_descripcionObjectivePozo.Caption = rsPozo.Fields(4)
        Else
            Call agregarAlComboBox(Me.cb_objectivePozo, "SELECT OW_ID_OBJECTIVE_POZO, DESCRIPCION FROM OBJECTIVE_POZO " & _
                                                          "WHERE BAJA = 0 ORDER BY DESCRIPCION")
            Me.cb_objectivePozo.Enabled = True
            cambiosEnPozo = True
        End If
        
        ' Path Pozo
        If Not IsNull(rsPozo.Fields(5)) Then
            With Me.cb_pathPozo
                .AddItem
                .list(0, 0) = rsPozo.Fields(5)
                .list(0, 1) = rsPozo.Fields(5)
                .ListIndex = 0
                .Enabled = False
            End With
            Me.la_descripcionPathPozo.Caption = rsPozo.Fields(6)
        Else
            Call agregarAlComboBox(Me.cb_pathPozo, "SELECT OW_ID_PATH_POZO, DESCRIPCION FROM PATH_POZO WHERE BAJA = 0 ORDER BY DESCRIPCION")
            Me.cb_pathPozo.Enabled = True
            cambiosEnPozo = True
        End If
    
        'Depth Pozo
        If Not IsNull(rsPozo.Fields(7)) Then
            With Me.cb_depthPozo
                .AddItem
                .list(0, 0) = rsPozo.Fields(7)
                .list(0, 1) = rsPozo.Fields(7)
                .ListIndex = 0
                .Enabled = False
            End With
            Me.la_descripcionDepthPozo.Caption = rsPozo.Fields(8)
        Else
            Call agregarAlComboBox(Me.cb_depthPozo, "SELECT OW_ID_DEPTH_POZO, DESCRIPCION FROM DEPTH_POZO WHERE BAJA = 0 ORDER BY DESCRIPCION")
            Me.cb_depthPozo.Enabled = True
            cambiosEnPozo = True
        End If
        
        ' Main Cause
        If Not IsNull(rsPozo.Fields(9)) Then
            With Me.cb_lateralLength
                .AddItem
                .list(0, 0) = rsPozo.Fields(9)
                .list(0, 1) = rsPozo.Fields(10)
                .list(0, 2) = rsPozo.Fields(11)
                .ListIndex = 0
                .Enabled = False
            End With
            Me.la_descripcionLateralLength.Caption = rsPozo.Fields(11)
        Else
            Call agregarAlComboBox(Me.cb_lateralLength, "SELECT KEY_ID, TYPE, RANGE FROM WELL_LATERAL WHERE BAJA = 0 ORDER BY TYPE")
            Me.cb_lateralLength.Enabled = True
            cambiosEnPozo = True
        End If
        
    End If

End Sub


Private Sub BT_SOLICITAR_Click()
    
    ' VALIDACION DE DATOS CARGADOS
    Dim idUnidadGestion, idPozo, fechaInicio As String
    Dim fechaFin, idTipoEvento, idObjetivoEvento, idMainCause, idMetodoConstructivo As String
    Dim authorizedTMDv20, authorizedTMDv30, authorizedTVD, baseline, rigMoveDistance As String
    Dim ewi, adjustedBudgetV20, costType As String
    Dim idObjectivePozo, idPurposePozo, idPathPozo, idDepthPozo, idLateralLength As String
    Dim idEquipo, alturaMesa, idArea As String
    Dim queryString As String
    Dim idSolicitudPozo, descripcionPozo, observaciones As String
    
    ' Obtengo la UNIDAD DE GESTION
    idUnidadGestion = Me.cb_unidadGestion.list(Me.cb_unidadGestion.ListIndex, 0)
    
    ' Obtengo el POZO
    idPozo = Me.CB_POZO.list(Me.CB_POZO.ListIndex, 0)
    
    ' Obtengo la FECHA INICIO
    fechaInicio = Me.tb_fechaInicio.Value
    
    ' Seccion EVENTO
    idMainCause = ""
    
    ' Fecha Fin
    If Trim(Me.tb_fechaFin.Value) & vbNullString <> vbNullString Then
        If (Len(Me.tb_fechaFin.Value) = 10) Then
            If (Not IsDate(Me.tb_fechaFin.Value)) Then
                MsgBox "Formato inv|fffd|lido de FECHA DE FIN: dd/mm/yyyy", vbExclamation, "VALIDACION CARGA DATOS"
                Exit Sub
            Else
                fechaFin = Me.tb_fechaFin.Value
            End If
        Else
            MsgBox "Formato v|fffd|lido de FECHA DE FIN: dd/mm/yyyy", vbCritical, "AVISO"
            Exit Sub
        End If
    Else
        fechaFin = ""
    End If
    
    ' Tipo de Evento
    If Me.cb_tipoEvento.ListIndex < 0 Then
        MsgBox "Se debe elegir un TIPO DE EVENTO", vbExclamation, "VALIDACION DATOS CARGADOS"
        Exit Sub
    Else
        idTipoEvento = Me.cb_tipoEvento.list(Me.cb_tipoEvento.ListIndex, 0)
    End If
    
    ' Objetivo Evento
    If Me.cb_objetivoEvento.ListIndex < 0 Then
        MsgBox "Se debe elegir el OBJETIVO EVENTO", vbExclamation, "VALIDACION DATOS CARGADOS"
        Exit Sub
    Else
        idObjetivoEvento = Me.cb_objetivoEvento.list(Me.cb_objetivoEvento.ListIndex, 0)
    End If
    

    ' Metodo Constructivo
    If (idTipoEvento = C_DON_ID Or idTipoEvento = C_RON_ID) Then
        If (Me.cb_metodoConstructivo.ListIndex = -1) Then
            MsgBox "Se debe elegir el METODO CONSTRUCTIVO", vbExclamation, "VALIDACION DATOS CARGADOS"
            Exit Sub
        Else
            idMetodoConstructivo = Me.cb_metodoConstructivo.list(Me.cb_metodoConstructivo.ListIndex, 0)
        End If
    Else
        idMetodoConstructivo = ""
    End If

    ' Los suguientes campos no son obligatorios para eventos STB
    If idTipoEvento <> C_STB_ID Then
    
        ' Main Cause
        If Me.cb_mainCause.ListIndex < 0 Then
            MsgBox "Se debe elegir MAIN CAUSE", vbExclamation, "VALIDACION DATOS CARGADOS"
            Exit Sub
        Else
            idMainCause = Me.cb_mainCause.list(Me.cb_mainCause.ListIndex, 0)
        End If
    
        ' Authorized TMD (v20)
        If Trim(Me.tb_authorizedTMDv20.Value) & vbNullString = vbNullString Then
            MsgBox "Debe ingresar un valor de AUTHORIZED TMD (v20)", vbExclamation, "VALIDACION DATOS CARGADOS"
            Exit Sub
        Else
            If Not IsNumeric(Me.tb_authorizedTMDv20.Value) Or InStr(Trim(Me.tb_authorizedTMDv20.Value), ".") > 0 Then
                MsgBox "Debe ingresar un valor de AUTHORIZED TMD (v20) numerico utilizando la COMA (,) como separador decimal", vbExclamation, "VALIDACION DATOS CARGADOS"
                Exit Sub
            ElseIf IsNumeric(Me.tb_authorizedTMDv20.Value) And CDbl(Me.tb_authorizedTMDv20.Value) <= 0 Then
                MsgBox "Debe ingresar un valor numerico de AUTHORIZED TMD (v20) MAYOR a 0", vbExclamation, "VALIDACION CARGA DATOS"
                Exit Sub
            Else
                authorizedTMDv20 = Me.tb_authorizedTMDv20.Value
            End If
        End If
        
        ' Authorized TMD (v30)
        If Trim(Me.tb_authorizedTMDv30.Value) & vbNullString = vbNullString Then
            MsgBox "Debe ingresar un valor de AUTHORIZED TMD (v30)", vbExclamation, "VALIDACION DATOS CARGADOS"
            Exit Sub
        Else
            If Not IsNumeric(Me.tb_authorizedTMDv30.Value) Or InStr(Trim(Me.tb_authorizedTMDv30.Value), ".") > 0 Then
                MsgBox "Debe ingresar un valor de AUTHORIZED TMD (v30) numerico utilizando la COMA (,) como separador decimal", vbExclamation, "VALIDACION DATOS CARGADOS"
                Exit Sub
            ElseIf IsNumeric(Me.tb_authorizedTMDv30.Value) And CDbl(Me.tb_authorizedTMDv30.Value) <= 0 Then
                MsgBox "Debe ingresar un valor numerico de AUTHORIZED TMD (v30) MAYOR a 0", vbExclamation, "VALIDACION CARGA DATOS"
                Exit Sub
            Else
                authorizedTMDv30 = Me.tb_authorizedTMDv30.Value
            End If
        End If
        
        ' Authorized TVD
        If Trim(Me.tb_authorizedTVD.Value) & vbNullString = vbNullString Then
            MsgBox "Debe ingresar un valor de AUTHORIZED TVD", vbExclamation, "VALIDACION DATOS CARGADOS"
            Exit Sub
        Else
            If Not IsNumeric(Me.tb_authorizedTVD.Value) Or InStr(Trim(Me.tb_authorizedTVD.Value), ".") > 0 Then
                MsgBox "Debe ingresar un valor de AUTHORIZED TVD numerico utilizando la COMA (,) como separador decimal", vbExclamation, "VALIDACION DATOS CARGADOS"
                Exit Sub
            ElseIf IsNumeric(Me.tb_authorizedTVD.Value) And CDbl(Me.tb_authorizedTVD.Value) <= 0 Then
                MsgBox "Debe ingresar un valor numerico de AUTHORIZED TVD MAYOR a 0", vbExclamation, "VALIDACION CARGA DATOS"
                Exit Sub
            Else
                authorizedTVD = Me.tb_authorizedTVD.Value
            End If
        End If
        
        ' Baseline (v20)
        If Trim(Me.TB_BASELINE.Value) & vbNullString = vbNullString Then
            MsgBox "Debe ingresar un valor de BASELINE (v20)", vbExclamation, "VALIDACION DATOS CARGADOS"
            Exit Sub
        Else
            If Not IsNumeric(Me.TB_BASELINE.Value) Or InStr(Trim(Me.TB_BASELINE.Value), ".") > 0 Then
                MsgBox "Debe ingresar un valor de BASELINE (v20) numerico utilizando la COMA (,) como separador decimal", vbExclamation, "VALIDACION DATOS CARGADOS"
                Exit Sub
            ElseIf IsNumeric(Me.TB_BASELINE.Value) And CDbl(Me.TB_BASELINE.Value) <= 0 Then
                MsgBox "Debe ingresar un valor numerico de BASELINE (v20) MAYOR a 0", vbExclamation, "VALIDACION CARGA DATOS"
                Exit Sub
            Else
                baseline = Me.TB_BASELINE.Value
            End If
        End If
        
        ' Rig Move Distance
        If Trim(Me.tb_rigMoveDistance.Value) & vbNullString = vbNullString Then
            MsgBox "Debe ingresar un valor de RIG MOVE DISTANCE", vbExclamation, "VALIDACION DATOS CARGADOS"
            Exit Sub
        Else
            If Not IsNumeric(Me.tb_rigMoveDistance.Value) Or InStr(Trim(Me.tb_rigMoveDistance.Value), ".") > 0 Then
                MsgBox "Debe ingresar un valor de RIG MOVE DISTANCE numerico utilizando la COMA (,) como separador decimal", vbExclamation, "VALIDACION DATOS CARGADOS"
                Exit Sub
            ElseIf IsNumeric(Me.tb_rigMoveDistance.Value) And CDbl(Me.tb_rigMoveDistance.Value) <= 0 Then
                MsgBox "Debe ingresar un valor numerico de RIG MOVE DISTANCE MAYOR a 0", vbExclamation, "VALIDACION CARGA DATOS"
                Exit Sub
            Else
                rigMoveDistance = Me.tb_rigMoveDistance.Value
            End If
        End If
        
        ' EWI
        If Trim(Me.TB_EWI.Value) & vbNullString = vbNullString Then
            MsgBox "Debe ingresar un valor de EWI", vbExclamation, "VALIDACION DATOS CARGADOS"
            Exit Sub
        Else
            If Not IsNumeric(Me.TB_EWI.Value) Or InStr(Trim(Me.TB_EWI.Value), ".") > 0 Then
                MsgBox "Debe ingresar un valor de EWI numerico utilizando la COMA (,) como separador decimal", vbExclamation, "VALIDACION DATOS CARGADOS"
                Exit Sub
            ElseIf IsNumeric(Me.TB_EWI.Value) And CDbl(Me.TB_EWI.Value) <= 0 Then
                MsgBox "Debe ingresar un valor numerico de EWI MAYOR a 0", vbExclamation, "VALIDACION CARGA DATOS"
                Exit Sub
            Else
                ewi = Me.TB_EWI.Value
            End If
        End If
        
        ' Adjusted Budget (v20)
        If Trim(Me.tb_adjustedBudget.Value) & vbNullString = vbNullString Then
            MsgBox "Debe ingresar un valor de ADJUSTED BUDGET (v20)", vbExclamation, "VALIDACION DATOS CARGADOS"
            Exit Sub
        Else
            If Not IsNumeric(Me.tb_adjustedBudget.Value) Or InStr(Trim(Me.tb_adjustedBudget.Value), ".") > 0 Then
                MsgBox "Debe ingresar un valor de ADJUSTED BUDGET (v20) numerico utilizando la COMA (,) como separador decimal", vbExclamation, "VALIDACION DATOS CARGADOS"
                Exit Sub
            ElseIf IsNumeric(Me.tb_adjustedBudget.Value) And CDbl(Me.tb_adjustedBudget.Value) <= 0 Then
                MsgBox "Debe ingresar un valor numerico de ADJUSTED BUDGET (v20) MAYOR a 0", vbExclamation, "VALIDACION CARGA DATOS"
                Exit Sub
            Else
                adjustedBudgetV20 = Me.tb_adjustedBudget.Value
            End If
        End If
        
        ' OPEX/CAPEX
        If Not Me.op_capex.Value And Not Me.op_opex.Value Then
            MsgBox "Debe ingresar si la operacion es CAPEX/OPEX", vbExclamation, "VALIDACION DATOS CARGADOS"
            Exit Sub
        Else
            If Me.op_capex.Value Then
                costType = "CAPITAL"
            Else
                costType = "EXPENSE"
            End If
        End If
                
    End If
    
    ' Seccion POZO
    ' Purpose Pozo
    If Me.cb_purposePozo.ListIndex < 0 Then
        MsgBox "Debe elegir un PURPOSE POZO", vbExclamation, "VALIDACION DATOS CARGADOS"
        Exit Sub
    Else
        idPurposePozo = Me.cb_purposePozo.list(Me.cb_purposePozo.ListIndex, 0)
    End If
    
    ' Objective Pozo
    If Me.cb_objectivePozo.ListIndex < 0 Then
        MsgBox "Debe elegir un OBJECTIVE POZO", vbExclamation, "VALIDACION DATOS CARGADOS"
        Exit Sub
    Else
        idObjectivePozo = Me.cb_objectivePozo.list(Me.cb_objectivePozo.ListIndex, 0)
    End If
    
    ' Depth Pozo
    If Me.cb_depthPozo.ListIndex < 0 Then
        MsgBox "Debe elegir un DEPTH POZO", vbExclamation, "VALIDACION DATOS CARGADOS"
        Exit Sub
    Else
        idDepthPozo = Me.cb_depthPozo.list(Me.cb_depthPozo.ListIndex, 0)
    End If
    
    ' Path Pozo
    If Me.cb_pathPozo.ListIndex < 0 Then
        MsgBox "Debe elegir un PATH POZO", vbExclamation, "VALIDACION DATOS CARGADOS"
        Exit Sub
    Else
        idPathPozo = Me.cb_pathPozo.list(Me.cb_pathPozo.ListIndex, 0)
    End If
    
    ' Lateral Length
    If Me.cb_lateralLength.ListIndex < 0 Then
        idLateralLength = ""
    Else
        idLateralLength = Me.cb_lateralLength.list(Me.cb_lateralLength.ListIndex, 0)
    End If
    
    ' Seccion EQUIPO
    ' Equipo
    If Me.CB_EQUIPO.ListIndex < 0 Then
        MsgBox "Debe elegir un EQUIPO", vbExclamation, "VALIDACION DATOS CARGADOS"
        Exit Sub
    Else
        idEquipo = Me.CB_EQUIPO.list(Me.CB_EQUIPO.ListIndex, 0)
    End If
    
    ' Altura de Mesa
    If Trim(Me.tb_alturaMesa.Value) & vbNullString = vbNullString Then
        Select Case idTipoEvento
            Case C_DON_ID, C_RON_ID, C_MOB_ID, C_DOF_ID
                MsgBox "Debe ingresar un valor de ALTURA DE MESA", vbExclamation, "VALIDACION DATOS CARGADOS"
                Exit Sub
            
            Case Else
                alturaMesa = "NULL"
        End Select
    Else
        If Not IsNumeric(Me.tb_alturaMesa.Value) Or InStr(Trim(Me.tb_alturaMesa.Value), ".") > 0 Then
            MsgBox "Debe ingresar un valor de ALTURA DE MESA numerico utilizando la COMA (,) como separador decimal", vbExclamation, "VALIDACION DATOS CARGADOS"
            Exit Sub
        ElseIf IsNumeric(Me.tb_alturaMesa.Value) And CDbl(Me.tb_alturaMesa.Value) <= 0 Then
            MsgBox "Debe ingresar un valor numerico de ALTURA DE MESA MAYOR a 0", vbExclamation, "VALIDACION CARGA DATOS"
            Exit Sub
        Else
            alturaMesa = Me.tb_alturaMesa.Value
        End If
    End If
    
    ' Seccion AREA
    If Me.CB_AREA.ListIndex < 0 Then
        MsgBox "Debe elegir un AREA", vbExclamation, "VALIDACION DATOS CARGADOS"
        Exit Sub
    Else
        idArea = "'" & Me.CB_AREA.list(Me.CB_AREA.ListIndex, 0) & "'"
    End If
    
    ' Seccion OBSERVACIONES
    If Trim(Me.tb_observaciones.Value) & vbNullString = vbNullString Then
        MsgBox "Debe completar el campo OBSERVACIONES", vbExclamation, "VALIDACION DATOS CARGADOS"
        Exit Sub
    End If
    
    ' VALIDACION DE SOLICITUD
    ' Se consulta si ya existe el evento en OW y no esta dado de BAJA (se elimino de OW o ya paso mas de un a|fffd|o de la fecha de hoy)
    queryString = "SELECT OW_ID_EVENTO FROM EVENTO_OW " & _
                  "WHERE OW_ID_UNIDAD_GESTION = '" & idUnidadGestion & "' " & _
                  "AND OW_ID_POZO = '" & idPozo & "' " & _
                  "AND OW_ID_TIPO_EVENTO = '" & idTipoEvento & "' " & _
                  "AND OW_FECHA_INICIO_EVENTO = CONVERT(DATETIME, '" & fechaInicio & "', 103) " & _
                  "AND OW_ID_EQUIPO = '" & idEquipo & "' " & _
                  "AND BAJA = 0"
                
    Set rs = ConsultarTablasBD(queryString)
    If (rs.RecordCount > 0) Then
        MsgBox "Ya existe el EVENTO que est|fffd| solicitando dar de alta. Por favor, contactar al Administrador de OpenWells", vbCritical, "SOLICITAR"
        Exit Sub
    End If
    
     If cambiosEnPozo Then
        ' Si hubo cambios guardo un registro en SOLICITUD POZO con los valores nuevos
        idPozo = "'" & idPozo & "'"
        descripcionPozo = "'" & Me.CB_POZO.list(Me.CB_POZO.ListIndex, 1) & "'"
        idPurposePozo = "'" & idPurposePozo & "'"
        idObjectivePozo = "'" & idObjectivePozo & "'"
        idPathPozo = "'" & idPathPozo & "'"
        idDepthPozo = "'" & idDepthPozo & "'"
        idLateralLength = IIf(Trim(idLateralLength) & vbNullString = vbNullString, "NULL", "'" & idLateralLength & "'")
            
        idSolicitudPozo = GuardarPozoSolicitudBD(idPozo, descripcionPozo, idPurposePozo, idObjectivePozo, idPathPozo, idDepthPozo, idLateralLength)
   
    Else
        ' Si no hubo cambios en las propiedades del pozo obtengo el ID de la ultima solicitud que se realizo sobre el mismo
        queryString = "SELECT TOP 1 ID_POZO  FROM SOLICITUD_POZO WHERE OW_COD_POZO = '" & idPozo & "' ORDER BY ID_POZO DESC"
        Set rs = ConsultarTablasBD(queryString)
        
        If rs.RecordCount() = 0 Then ' Nunca se efectuo una solicitud sobre este pozo. Guardo un registro en SOLICITUD_POZO.
            idPozo = "'" & idPozo & "'"
            descripcionPozo = "'" & Me.CB_POZO.list(Me.CB_POZO.ListIndex, 1) & "'"
            idPurposePozo = "'" & idPurposePozo & "'"
            idObjectivePozo = "'" & idObjectivePozo & "'"
            idPathPozo = "'" & idPathPozo & "'"
            idDepthPozo = "'" & idDepthPozo & "'"
            idLateralLength = IIf(Trim(idLateralLength) & vbNullString = vbNullString, "NULL", "'" & idLateralLength & "'")
            
            idSolicitudPozo = GuardarPozoSolicitudBD(idPozo, descripcionPozo, idPurposePozo, idObjectivePozo, idPathPozo, idDepthPozo, idLateralLength)
            If (idSolicitudPozo = 0) Then
                MsgBox "Ha ocurrido un error insertando el POZO. Comuniquese con el administrador del sistema.", vbCritical, "ERROR INSERTANDO EN BASE DE DATOS"
                Exit Sub
            End If
        Else
            idSolicitudPozo = rs.Fields(0)
        End If
        
    End If
    
    ' Guardo el EVENTO
    idTipoEvento = "'" & idTipoEvento & "'"
    idUnidadGestion = "'" & idUnidadGestion & "'"
    idEquipo = "'" & idEquipo & "'"
    fechaInicio = "'" & fechaInicio & "'"
    fechaFin = IIf(Trim(fechaFin) & vbNullString = vbNullString, "NULL", "'" & fechaFin & "'")
    idObjetivoEvento = "'" & idObjetivoEvento & "'"
    idMetodoConstructivo = IIf(Trim(idMetodoConstructivo) & vbNullString = vbNullString, "NULL", "'" & idMetodoConstructivo & "'")
    ewi = "'" & ewi & "'"
    idMainCause = IIf(Trim(idMainCause) & vbNullString = vbNullString, "NULL", "'" & idMainCause & "'")
    adjustedBudgetV20 = IIf(Trim(adjustedBudgetV20) & vbNullString = vbNullString, "NULL", adjustedBudgetV20)
    authorizedTMDv20 = IIf(Trim(authorizedTMDv20) & vbNullString = vbNullString, "NULL", authorizedTMDv20)
    authorizedTMDv30 = IIf(Trim(authorizedTMDv30) & vbNullString = vbNullString, "NULL", authorizedTMDv30)
    authorizedTVD = IIf(Trim(authorizedTVD) & vbNullString = vbNullString, "NULL", authorizedTVD)
    baseline = IIf(Trim(baseline) & vbNullString = vbNullString, "NULL", baseline)
    rigMoveDistance = IIf(Trim(rigMoveDistance) & vbNullString = vbNullString, "NULL", rigMoveDistance)
    costType = "'" & costType & "'"
    
    idEventoNuevo = GuardarEventoBD(idSolicitudPozo, idArea, idTipoEvento, idUnidadGestion, idEquipo, fechaInicio, fechaFin, idObjetivoEvento, idMetodoConstructivo, adjustedBudgetV20, authorizedTMDv20, authorizedTMDv30, authorizedTVD, baseline, rigMoveDistance, ewi, alturaMesa, idMainCause, costType, "NULL")
    If (idEventoNuevo = 0) Then
       MsgBox "Ha ocurrido un error insertando el EVENTO. Comuniquese con el administrador del sistema", vbCritical, "ERROR INSERTANDO EN BASE DE DATOS"
       Exit Sub
    End If
    
    ' Genero la solicitud
    observaciones = Me.tb_observaciones.Value
   
    Call GuardarSolicitud(observaciones, C_MAIL_ECONAT, C_ID_TIPO_ALTA_EVENTO, "Alta de Evento", "ALTA DE EVENTO", idEventoNuevo, 0)
    
    ' Reinicio el formulario
    Call inicializarFormulario(0)
    
    Set rs = Nothing
    
End Sub

Private Sub cb_depthPozo_Change()

    If Me.cb_depthPozo.ListIndex = -1 Or numeroSolicitud <> 0 Then
        Exit Sub
    End If
    
    Me.la_descripcionDepthPozo.Caption = Me.cb_depthPozo.list(Me.cb_depthPozo.ListIndex, 1)

End Sub

Private Sub CB_EQUIPO_Change()

    If Me.CB_EQUIPO.ListIndex = -1 Or numeroSolicitud <> 0 Then
        Exit Sub
    End If
    
    If IsNull(Me.CB_EQUIPO.list(Me.CB_EQUIPO.ListIndex, 2)) Then
        Me.tb_alturaMesa.Value = ""
    Else
        Me.tb_alturaMesa.Value = Replace(Me.CB_EQUIPO.list(Me.CB_EQUIPO.ListIndex, 2), ".", ",")
    End If

End Sub

Private Sub cb_lateralLength_Change()

    If Me.cb_lateralLength.ListIndex = -1 Or numeroSolicitud <> 0 Then
        Exit Sub
    End If
    
    Me.la_descripcionLateralLength.Caption = Me.cb_lateralLength.list(Me.cb_lateralLength.ListIndex, 2)

End Sub

Private Sub cb_mainCause_Change()

    If Me.cb_mainCause.ListIndex = -1 Or numeroSolicitud <> 0 Then
        Exit Sub
    End If
    
    Me.la_descripcionMainCause.Caption = Me.cb_mainCause.list(Me.cb_mainCause.ListIndex, 2)

End Sub

Private Sub cb_metodoConstructivo_Change()

    If Me.cb_metodoConstructivo.ListIndex = -1 Or numeroSolicitud <> 0 Then
        Exit Sub
    End If

    Me.la_descripcionMetodoConstructivo.Caption = Me.cb_metodoConstructivo.list(Me.cb_metodoConstructivo.ListIndex, 2)
    
End Sub

Private Sub cb_objectivePozo_Change()

    If Me.cb_objectivePozo.ListIndex = -1 Or numeroSolicitud <> 0 Then
        Exit Sub
    End If
    
    Me.la_descripcionObjectivePozo.Caption = Me.cb_objectivePozo.list(Me.cb_objectivePozo.ListIndex, 1)

End Sub

Private Sub cb_objetivoEvento_Change()
    
    If Me.cb_objetivoEvento.ListIndex = -1 Or numeroSolicitud <> 0 Then
        Exit Sub
    End If
    
    Me.la_descripcionObjetivoEvento.Caption = Me.cb_objetivoEvento.list(Me.cb_objetivoEvento.ListIndex, 2)

End Sub

Private Sub cb_pathPozo_Change()

    If Me.cb_pathPozo.ListIndex = -1 Or numeroSolicitud <> 0 Then
        Exit Sub
    End If
    
    Me.la_descripcionPathPozo.Caption = Me.cb_pathPozo.list(Me.cb_pathPozo.ListIndex, 1)

End Sub

Private Sub cb_purposePozo_Change()

    If Me.cb_purposePozo.ListIndex = -1 Or numeroSolicitud <> 0 Then
        Exit Sub
    End If
    
    Me.la_descripcionPurposePozo.Caption = Me.cb_purposePozo.list(Me.cb_purposePozo.ListIndex, 2)

End Sub

Private Sub cb_tipoEvento_Change()

    If Me.cb_tipoEvento.ListIndex = -1 Or numeroSolicitud <> 0 Then
        Exit Sub
    End If
    
    ' Cargo la descripcion del TIPO DE EVENTO
    Me.la_descripcionTipoEvento.Caption = Me.cb_tipoEvento.list(Me.cb_tipoEvento.ListIndex, 2)
    
    ' Cargo el picklist OBJETIVO EVENTO y limpio la DESCRIPCION
    Call cargarObjetivoEvento(Me.cb_tipoEvento.list(Me.cb_tipoEvento.ListIndex, 0))
    Me.la_descripcionObjetivoEvento.Caption = ""
    
    ' Cargo el picklist MAIN_CAUSE y limpio la DESCRIPCION
    Call cargarMainCause(Me.cb_tipoEvento.list(Me.cb_tipoEvento.ListIndex, 0))
    Me.la_descripcionMainCause.Caption = ""
        
    ' Cargo el picklist METODO CONSTRUCTIVO y limpio la DESCRIPCION
    Call cargarMetodoConstructivo(Me.cb_tipoEvento.list(Me.cb_tipoEvento.ListIndex, 0))
    Me.la_descripcionMetodoConstructivo.Caption = ""
    
    ' Cargo el picklist EQUIPO y la ALTURA DE MESA/KELLY BUSHING segun corresponda
    Call cargarSeccionEquipo(Me.cb_tipoEvento.list(Me.cb_tipoEvento.ListIndex, 0))
    
    ' Cargo el picklist AREA segun corresponda
    Call cargarSeccionArea(Me.cb_tipoEvento.list(Me.cb_tipoEvento.ListIndex, 0), Me.cb_unidadGestion.list(Me.cb_unidadGestion.ListIndex, 0))
        
End Sub

Private Sub cargarSeccionArea(ByVal idTipoEvento As String, ByVal idUnidadGestion As String)

    Dim queryString As String
    
    queryString = "SELECT OW_KEY_ID, OW_NAME FROM AREAS_OW WHERE OW_CODIGO_UG = '" & idUnidadGestion & "' AND OW_ID_TIPO_EVENTO = '" & idTipoEvento & "' ORDER BY OW_NAME"
    
    Call agregarAlComboBox(Me.CB_AREA, queryString)
    Me.CB_AREA.Enabled = True


End Sub

Private Sub cargarSeccionEquipo(ByVal idTipoEvento As String)

    Dim queryString As String
    
    queryString = "SELECT EQ.OW_ID_EQUIPO , EQ.DESCRIPCION, EQ.ALTURA_MESA " & _
                  "FROM EQUIPOS EQ " & _
                  "LEFT JOIN TIPO_EQUIPO_TIPO_EVENTO TEE ON TEE.OW_ID_TIPO_EQUIPO = EQ.OW_ID_TIPO_EQUIPO " & _
                  "WHERE TEE.OW_ID_TIPO_EVENTO = '" & idTipoEvento & "' ORDER BY EQ.DESCRIPCION"
    
    Call agregarAlComboBox(Me.CB_EQUIPO, queryString)
    Me.CB_EQUIPO.Enabled = True
    
    Select Case idTipoEvento
        Case C_MOB_ID, C_DON_ID, C_RON_ID, C_DOF_ID
            Me.tb_alturaMesa.Enabled = True
    End Select
    
End Sub

Private Sub cargarObjetivoEvento(ByVal idTipoEvento As String)

    Dim queryString As String
        
    queryString = "SELECT OW_ID_OBJETIVO_EVENTO, DESCRIPCION, OW_DESC_SPANISH FROM OBJETIVO_EVENTO WHERE OW_ID_TIPO_EVENTO = '" & idTipoEvento & "' AND BAJA = 0 ORDER BY DESCRIPCION"

    Call agregarAlComboBox(Me.cb_objetivoEvento, queryString)
    Me.cb_objetivoEvento.Enabled = True

End Sub

Private Sub cargarMainCause(ByVal idTipoEvento As String)

    Dim queryString As String
    
    queryString = "SELECT KEY_ID, DESCRIPTION, DESC_SPANISH FROM MAIN_CAUSE WHERE EVENT_TYPE_ID = '" & idTipoEvento & "' AND BAJA = 0 ORDER BY DESCRIPTION"
    
    Call agregarAlComboBox(Me.cb_mainCause, queryString)
    Me.cb_mainCause.Enabled = True

End Sub

Private Sub cargarMetodoConstructivo(ByVal idTipoEvento As String)

    Dim queryString As String
    
    queryString = "SELECT OW_ID_METODO_CONSTRUCTIVO, DESCRIPCION, OW_DESC_SPANISH FROM METODO_CONSTRUCTIVO WHERE OW_ID_TIPO_EVENTO = '" & idTipoEvento & "' ORDER BY DESCRIPCION"
    
    Call agregarAlComboBox(Me.cb_metodoConstructivo, queryString)
    Me.cb_metodoConstructivo.Enabled = True
    
End Sub

Private Sub bt_salir_Click()

    Unload Me

End Sub

Attribute VB_Name = "BANDEJA_SOLICITUDES"
Attribute VB_Base = "0{A9DD3D44-F8EA-4EFF-86B7-25768F5DE244}{CEC8B57A-ECEE-421A-8E39-E9268BBEC463}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

' Boton BORRAR FILTROS
Private Sub BT_BORRAR_FILTROS_Click()

    Me.TB_NUMERO_SOLICITUD.Value = ""
    Me.TB_FECHA_SOLICITUD.Value = ""
    Me.CB_SOLICITANTE.ListIndex = -1
    Me.CB_EQUIPO.ListIndex = -1
    Me.CB_ESTADO_SOLICITUD.ListIndex = -1
    Me.CB_POZO.ListIndex = -1
    Me.CB_TIPO_EVENTO.ListIndex = -1
    Me.CB_TIPO_SOLICITUD.ListIndex = -1

    Call UserForm_Initialize

End Sub

Private Sub BT_EXPORTAR_XLS_Click()

    
    
    Exit Sub

ERROR_DESCARGA:
    Application.ScreenUpdating = True
    
    nuevoLibro.Close False
    MsgBox "ERROR: Ha ocurrido un Error en la Descarga del archivo", vbCritical, "DESCARGAR ARCHIVO"
    Exit Sub

End Sub

Private Sub BT_APLICAR_FILTRO_Click()
    
    Dim idFuncion As String
    idFuncion = Int(Left(Sheets(H_GENERALES).Range("C6").Value, 2))
    
    Select Case idFuncion
    
        Case C_FUNCION_RESPONSABLE_UG, C_FUNCION_RESPONSABLE_UG_WO ' RESPONSABLES DE UG
            Call ejecutarConsultaResponsableUG(idFuncion, unidadGestion)
             
        Case C_FUNCION_ASISTENTE_TECNICO_GENERICO
            Call ejecutarConsultaMesaAyuda
            
        Case C_FUNCION_ADMIN_OW
            Call ejecutarConsultaAdminOW
        
        Case Else
            Call ejecutarConsultaUsuarios(keyUsuario)
    
    End Select

End Sub

' Boton SALIR
Private Sub bt_salir_Click()

    Unload Me
    
End Sub

' Doble click en un registro de la BANDEJA DE SOLICITUDES
Private Sub LT_BANDEJA_DblClick(ByVal Cancel As MSForms.ReturnBoolean)

    If (Me.LT_BANDEJA.ListIndex <> -1) Then
        FORM_SOLICITUD.Show
        Call UserForm_Initialize
    End If

End Sub

' Inicializacion de la BANDEJA DE SOLICITUDES
Private Sub UserForm_Initialize()
    
    Dim queryConsulta As String
    Dim ugUsuario As String
    Dim idPermiso As String
    Dim listadoEventos As String
    Dim tipoSolicitud As String
    
    ugUsuario = Sheets(H_GENERALES).Range("H9").Value
    idPermiso = Int(Left(Sheets(H_GENERALES).Range("C6").Value, 2))
    keyUsuario = Replace(Sheets(H_GENERALES).Range("C6").Value, ".", "")
   
    ' Cargo filtros y solicitudes
    Call cargarBandeja(keyUsuario, idPermiso, ugUsuario)
        
    ' Aplico el dise|fffd|o
    Call aplicarTemplate(Me)
        
End Sub

Private Sub cargarBandeja(ByVal keyUsuario As String, ByVal idFuncion As String, ByVal unidadGestion As String)

    'Call cargarFiltros(idFuncion, unidadGestion)
    
    ' Segun funcion llamo a la consulta correspondiente
    Select Case idFuncion
    
        Case C_FUNCION_RESPONSABLE_UG, C_FUNCION_RESPONSABLE_UG_WO ' RESPONSABLES DE UG
            Call ejecutarConsultaResponsableUG(idFuncion, unidadGestion)
             
        Case C_FUNCION_ASISTENTE_TECNICO_GENERICO
            Call ejecutarConsultaMesaAyuda
            
        Case C_FUNCION_ADMIN_OW
            Call ejecutarConsultaAdminOW
        
        Case Else
            Call ejecutarConsultaUsuarios(keyUsuario)
    
    End Select

End Sub

' Carga de filtros dependiendo funcion
Private Sub cargarFiltros(ByVal idFuncion As String, ByVal unidadGestion As String)

    Dim queryString As String
    
    ' Cargo solicitantes
    queryString = "SELECT DISTINCT CONCAT(U.APELLIDO, ', ', U.NOMBRE) SOLICITANTE, U.KEY_USUARIO " & _
                  "FROM USUARIOS U JOIN SOLICITUD S ON S.SOLICITANTE = U.KEY_USUARIO ORDER BY SOLICITANTE"
    
    Call agregarAlComboBox(Me.CB_SOLICITANTE, queryString)
    
    ' Cargo TIPO DE SOLICITUD
    Select Case idFuncion
    
        Case C_FUNCION_RESPONSABLE_UG, C_FUNCION_RESPONSABLE_UG_WO
            queryString = "SELECT DESCRIPCION, ID_TIPO_SOLICITUD FROM TIPO_SOLICITUD WHERE ID_TIPO_SOLICITUD IN (3, 4) ORDER BY DESCRIPCION"
            
        Case C_FUNCION_ADMIN_OW
            queryString = "SELECT DESCRIPCION, ID_TIPO_SOLICITUD FROM TIPO_SOLICITUD WHERE ID_TIPO_SOLICITUD IN (2) ORDER BY DESCRIPCION"
    
        Case C_FUNCION_ASISTENTE_TECNICO_GENERICO
            queryString = "SELECT DESCRIPCION, ID_TIPO_SOLICITUD FROM TIPO_SOLICITUD ORDER BY DESCRIPCION"
        
    End Select
    
    Call agregarAlComboBox(Me.CB_TIPO_SOLICITUD, queryString)
    
    ' Cargo TIPO DE EVENTO
    Select Case idFuncion
    
        Case C_FUNCION_RESPONSABLE_UG
            queryString = "SELECT CONCAT(COD_EVENTO, ' - ', DESCRIPCION), OW_ID_TIPO_EVENTO FROM TIPO_EVENTO WHERE ACTIVO = 1 " & _
                          "AND OW_ID_TIPO_EVENTO IN ('" & C_DOF_ID & "', '" & C_DON_ID & "', '" & C_MOB_ID & "', '" & C_RON_ID & "', '" & C_STB_ID & "')"
            
        Case C_FUNCION_RESPONSABLE_UG_WO
            queryString = "SELECT CONCAT(COD_EVENTO, ' - ', DESCRIPCION), OW_ID_TIPO_EVENTO FROM TIPO_EVENTO WHERE ACTIVO = 1 " & _
                          "AND OW_ID_TIPO_EVENTO IN ('" & C_CON_ID & "', '" & C_WO_ID & "', '" & C_IWO_ID & "', '" & C_REP_ID & "', '" & C_ABN_ID & "', '" & C_STB_ID & "')"

        Case C_FUNCION_ADMIN_OW, C_FUNCION_ASISTENTE_TECNICO_GENERICO
            queryString = "SELECT CONCAT(COD_EVENTO, ' - ', DESCRIPCION), OW_ID_TIPO_EVENTO FROM TIPO_EVENTO WHERE ACTIVO = 1 AND BAJA = 0"
        
    End Select
    
    Call agregarAlComboBox(Me.CB_TIPO_EVENTO, queryString)
    
    ' Cargo POZOS
    Select Case idFuncion
    
        Case C_FUNCION_RESPONSABLE_UG, C_FUNCION_RESPONSABLE_UG_WO
            queryString = "SELECT DESCRIPCION, OW_COD_POZO FROM POZOS WHERE OW_CODIGO_UG = '" & unidadGestion & "' ORDER BY DESCRIPCION"
    
        Case C_FUNCION_ADMIN_OW, C_FUNCION_ASISTENTE_TECNICO_GENERICO
            queryString = "SELECT DESCRIPCION, OW_COD_POZO FROM POZOS ORDER BY DESCRIPCION"
    
    End Select
    
    Call agregarAlComboBox(Me.CB_POZO, queryString)
    
    ' Cargo EQUIPOS
    Select Case idFuncion
    
        Case C_FUNCION_RESPONSABLE_UG
            queryString = "SELECT DESCRIPCION, OW_ID_EQUIPO FROM EQUIPOS WHERE OW_ID_TIPO_EQUIPO IN (SELECT OW_ID_TIPO_EQUIPO FROM TIPO_EQUIPO_TIPO_EVENTO WHERE OW_ID_TIPO_EVENTO IN ('EV110','EV104','EV103','EV102','EV101')) ORDER BY DESCRIPCION"
        
        Case C_FUNCION_RESPONSABLE_UG_WO
            queryString = "SELECT DESCRIPCION, OW_ID_EQUIPO FROM EQUIPOS WHERE OW_ID_TIPO_EQUIPO IN (SELECT OW_ID_TIPO_EQUIPO FROM TIPO_EQUIPO_TIPO_EVENTO WHERE OW_ID_TIPO_EVENTO IN ('EV105','EV106','EV110','Jb000')) ORDER BY DESCRIPCION"
        
        Case C_FUNCION_ADMIN_WO, C_FUNCION_ASISTENTE_TECNICO_GENERICO
            queryString = "SELECT DESCRIPCION, OW_ID_EQUIPO FROM EQUIPOS ORDER BY DESCRIPCION DESC"
        
    End Select
    
    Call agregarAlComboBox(Me.CB_EQUIPO, queryString)
    
    ' Cargo ESTADO
    queryString = "SELECT DESCRIPCION, ID_ESTADO_SOLICITUD FROM ESTADO_SOLICITUD ORDER BY DESCRIPCION"
    
    Call agregarAlComboBox(Me.CB_ESTADO_SOLICITUD, queryString)

End Sub

' Consulta para MESA DE AYUDA
Private Sub ejecutarConsultaMesaAyuda()

    Dim queryString As String
    Dim filtroEstadoSolicitud As String
    Dim filtroEstadoSolicitudAutorizadas As String
    
    If Me.CB_ESTADO_SOLICITUD.ListIndex = -1 Then
        filtroEstadoSolicitud = "AND SO.ID_ESTADO_SOLICITUD = 1 "
        filtroEstadoSolicitudModificacionEvento = "AND SO.ID_ESTADO_SOLICITUD = 5 "
        filtroEstadoSolicitudAutorizadas = "AND SO.ID_ESTADO_SOLICITUD = 6 "
    Else
        If Me.CB_ESTADO_SOLICITUD.list(Me.CB_ESTADO_SOLICITUD.ListIndex, 1) = 3 Or Me.CB_ESTADO_SOLICITUD.list(Me.CB_ESTADO_SOLICITUD.ListIndex, 1) = 4 Then
            filtroEstadoSolicitud = "AND SO.ID_ESTADO_SOLICITUD = " & Me.CB_ESTADO_SOLICITUD.list(Me.CB_ESTADO_SOLICITUD.ListIndex, 1)
            filtroEstadoSolicitudModificacionEvento = "AND SO.ID_ESTADO_SOLICITUD = " & Me.CB_ESTADO_SOLICITUD.list(Me.CB_ESTADO_SOLICITUD.ListIndex, 1)
            filtroEstadoSolicitudAutorizadas = "AND SO.ID_ESTADO_SOLICITUD = " & Me.CB_ESTADO_SOLICITUD.list(Me.CB_ESTADO_SOLICITUD.ListIndex, 1)
        End If
    End If
   
    
    
    
    ' Alta de Eventos pendientes
    queryString = "SELECT S.ID_SOLICITUD, CONCAT(U1.APELLIDO, ', ', U1.NOMBRE) SOLICITANTE, S.FECHA_SOLICITUD, TS.DESCRIPCION, TE.DESCRIPCION, " & _
                  "P.DESCRIPCION , EQ.DESCRIPCION, E.FECHA_INICIO_EVENTO, ES.DESCRIPCION, SO.FECHA_EJECUCION, SO.OBSERVACIONES " & _
                  "FROM SOLICITUD S JOIN SOLICITUDES SO ON SO.ID_SOLICITUD = S.ID_SOLICITUD JOIN USUARIOS U1 ON U1.KEY_USUARIO = S.SOLICITANTE " & _
                  "JOIN TIPO_SOLICITUD TS ON TS.ID_TIPO_SOLICITUD = S.ID_TIPO_SOLICITUD " & _
                  "JOIN EVENTO E ON E.ID_EVENTO = S.ID_EVENTO " & _
                  "JOIN TIPO_EVENTO TE ON TE.OW_ID_TIPO_EVENTO = E.OW_ID_TIPO_EVENTO " & _
                  "JOIN SOLICITUD_POZO P ON P.ID_POZO = E.ID_POZO " & _
                  "JOIN EQUIPOS EQ ON EQ.OW_ID_EQUIPO = E.OW_ID_EQUIPO " & _
                  "JOIN ESTADO_SOLICITUD ES ON ES.ID_ESTADO_SOLICITUD = SO.ID_ESTADO_SOLICITUD " & _
                  "WHERE SO.FECHA_EJECUCION IN (SELECT MAX(FECHA_EJECUCION) FROM SOLICITUDES WHERE ID_SOLICITUD = S.ID_SOLICITUD) " & _
                  "AND S.ID_TIPO_SOLICITUD = 1 " & filtroEstadoSolicitud
    ' Modificaciones de Eventos pendientes
    queryString = queryString & " UNION ALL " & _
                  "SELECT S.ID_SOLICITUD, CONCAT(U1.APELLIDO, ', ', U1.NOMBRE) SOLICITANTE, S.FECHA_SOLICITUD, TS.DESCRIPCION, TE.DESCRIPCION, " & _
                  "P.DESCRIPCION , EQ.DESCRIPCION, EO.OW_FECHA_INICIO_EVENTO, ES.DESCRIPCION, SO.FECHA_EJECUCION, SO.observaciones " & _
                  "FROM SOLICITUD S JOIN SOLICITUDES SO ON SO.ID_SOLICITUD = S.ID_SOLICITUD JOIN USUARIOS U1 ON U1.KEY_USUARIO = S.SOLICITANTE " & _
                  "JOIN TIPO_SOLICITUD TS ON TS.ID_TIPO_SOLICITUD = S.ID_TIPO_SOLICITUD " & _
                  "JOIN EVENTO E ON E.ID_EVENTO = S.ID_EVENTO JOIN EVENTO_OW EO ON E.OW_ID_EVENTO = EO.OW_ID_EVENTO " & _
                  "JOIN TIPO_EVENTO TE ON TE.OW_ID_TIPO_EVENTO = EO.OW_ID_TIPO_EVENTO " & _
                  "JOIN POZOS P ON P.OW_COD_POZO = EO.OW_ID_POZO JOIN EQUIPOS EQ ON EQ.OW_ID_EQUIPO = EO.OW_ID_EQUIPO " & _
                  "JOIN ESTADO_SOLICITUD ES ON ES.ID_ESTADO_SOLICITUD = SO.ID_ESTADO_SOLICITUD " & _
                  "WHERE SO.FECHA_EJECUCION IN (SELECT MAX(FECHA_EJECUCION) FROM SOLICITUDES WHERE ID_SOLICITUD = S.ID_SOLICITUD) " & _
                  "AND S.ID_TIPO_SOLICITUD = 2 " & filtroEstadoSolicitudModificacionEvento
    ' Desbloqueo de reportes sin autorizacion
    queryString = queryString & " UNION ALL " & _
                  "SELECT S.ID_SOLICITUD, CONCAT(U.APELLIDO, ', ', U.NOMBRE) SOLICITANTE, S.FECHA_SOLICITUD, " & _
                  "TS.DESCRIPCION, TE.DESCRIPCION, P.DESCRIPCION, EQ.DESCRIPCION, E.OW_FECHA_INICIO_EVENTO, ES.DESCRIPCION, " & _
                  "SO.FECHA_EJECUCION , SO.OBSERVACIONES " & _
                  "FROM SOLICITUD S JOIN USUARIOS U ON U.KEY_USUARIO = S.SOLICITANTE JOIN TIPO_SOLICITUD TS ON TS.ID_TIPO_SOLICITUD = S.ID_TIPO_SOLICITUD " & _
                  "JOIN REPORTE R ON R.ID_REPORTE = S.ID_REPORTE JOIN EVENTO_OW E ON E.OW_ID_EVENTO = R.OW_ID_EVENTO " & _
                  "JOIN POZOS P ON P.OW_COD_POZO = E.OW_ID_POZO JOIN TIPO_EVENTO TE ON TE.OW_ID_TIPO_EVENTO = E.OW_ID_TIPO_EVENTO " & _
                  "JOIN EQUIPOS EQ ON EQ.OW_ID_EQUIPO = E.OW_ID_EQUIPO JOIN SOLICITUDES SO ON SO.ID_SOLICITUD = S.ID_SOLICITUD " & _
                  "JOIN ESTADO_SOLICITUD ES ON ES.ID_ESTADO_SOLICITUD = SO.ID_ESTADO_SOLICITUD " & _
                  "WHERE SO.FECHA_EJECUCION IN (SELECT MAX(FECHA_EJECUCION) FROM SOLICITUDES WHERE ID_SOLICITUD = S.ID_SOLICITUD) " & _
                  "AND S.ID_TIPO_SOLICITUD = 4 AND (S.FECHA_SOLICITUD <= DATEADD(DAY, " & C_DIAS_APROBACION & ", E.OW_FECHA_FIN_EVENTO) OR E.OW_FECHA_FIN_EVENTO IS NULL) " & filtroEstadoSolicitud
    'Desbloqueo de reportes con autorizacion previa
    queryString = queryString & " UNION ALL " & _
                  "SELECT S.ID_SOLICITUD, CONCAT(U.APELLIDO, ', ', U.NOMBRE) SOLICITANTE, S.FECHA_SOLICITUD, " & _
                  "TS.DESCRIPCION, TE.DESCRIPCION, P.DESCRIPCION, EQ.DESCRIPCION, E.OW_FECHA_INICIO_EVENTO, ES.DESCRIPCION, " & _
                  "SO.FECHA_EJECUCION , SO.OBSERVACIONES FROM SOLICITUD S JOIN USUARIOS U ON U.KEY_USUARIO = S.SOLICITANTE " & _
                  "JOIN TIPO_SOLICITUD TS ON TS.ID_TIPO_SOLICITUD = S.ID_TIPO_SOLICITUD JOIN REPORTE R ON R.ID_REPORTE = S.ID_REPORTE " & _
                  "JOIN EVENTO_OW E ON E.OW_ID_EVENTO = R.OW_ID_EVENTO JOIN POZOS P ON P.OW_COD_POZO = E.OW_ID_POZO " & _
                  "JOIN TIPO_EVENTO TE ON TE.OW_ID_TIPO_EVENTO = E.OW_ID_TIPO_EVENTO JOIN EQUIPOS EQ ON EQ.OW_ID_EQUIPO = E.OW_ID_EQUIPO " & _
                  "JOIN SOLICITUDES SO ON SO.ID_SOLICITUD = S.ID_SOLICITUD JOIN ESTADO_SOLICITUD ES ON ES.ID_ESTADO_SOLICITUD = SO.ID_ESTADO_SOLICITUD " & _
                  "WHERE SO.FECHA_EJECUCION IN (SELECT MAX(FECHA_EJECUCION) FROM SOLICITUDES WHERE ID_SOLICITUD = S.ID_SOLICITUD) " & _
                  "AND S.ID_TIPO_SOLICITUD = 4 AND S.FECHA_SOLICITUD > DATEADD(DAY, " & C_DIAS_APROBACION & ", E.OW_FECHA_FIN_EVENTO) " & filtroEstadoSolicitudAutorizadas
    ' Desbloqueo de eventos sin autorizacion previa
    queryString = queryString & " UNION ALL " & _
                  "SELECT S.ID_SOLICITUD, CONCAT(U.APELLIDO, ', ', U.NOMBRE) SOLICITANTE, S.FECHA_SOLICITUD, " & _
                  "TS.DESCRIPCION, TE.DESCRIPCION, P.DESCRIPCION, EQ.DESCRIPCION, EO.OW_FECHA_INICIO_EVENTO, ES.DESCRIPCION, " & _
                  "SO.FECHA_EJECUCION , SO.OBSERVACIONES FROM SOLICITUD S JOIN USUARIOS U ON U.KEY_USUARIO = S.SOLICITANTE " & _
                  "JOIN TIPO_SOLICITUD TS ON TS.ID_TIPO_SOLICITUD = S.ID_TIPO_SOLICITUD JOIN EVENTO E ON E.ID_EVENTO = S.ID_EVENTO " & _
                  "JOIN EVENTO_OW EO ON EO.OW_ID_EVENTO = E.OW_ID_EVENTO JOIN POZOS P ON P.OW_COD_POZO = EO.OW_ID_POZO " & _
                  "JOIN TIPO_EVENTO TE ON TE.OW_ID_TIPO_EVENTO = E.OW_ID_TIPO_EVENTO JOIN EQUIPOS EQ ON EQ.OW_ID_EQUIPO = E.OW_ID_EQUIPO " & _
                  "JOIN SOLICITUDES SO ON SO.ID_SOLICITUD = S.ID_SOLICITUD JOIN ESTADO_SOLICITUD ES ON ES.ID_ESTADO_SOLICITUD = SO.ID_ESTADO_SOLICITUD " & _
                  "WHERE SO.FECHA_EJECUCION IN (SELECT MAX(FECHA_EJECUCION) FROM SOLICITUDES WHERE ID_SOLICITUD = S.ID_SOLICITUD) " & _
                  "AND S.ID_TIPO_SOLICITUD = 3 AND (S.FECHA_SOLICITUD <= DATEADD(DAY, " & C_DIAS_APROBACION & ", EO.OW_FECHA_FIN_EVENTO) OR EO.OW_FECHA_FIN_EVENTO IS NULL) " & _
                  filtroEstadoSolicitud
    'Desbloqueo de eventos con autorizacion previa
    queryString = queryString & " UNION ALL " & _
                  "SELECT S.ID_SOLICITUD, CONCAT(U.APELLIDO, ', ', U.NOMBRE) SOLICITANTE, S.FECHA_SOLICITUD, " & _
                  "TS.DESCRIPCION, TE.DESCRIPCION, P.DESCRIPCION, EQ.DESCRIPCION, EO.OW_FECHA_INICIO_EVENTO, ES.DESCRIPCION, " & _
                  "SO.FECHA_EJECUCION , SO.OBSERVACIONES FROM SOLICITUD S JOIN USUARIOS U ON U.KEY_USUARIO = S.SOLICITANTE " & _
                  "JOIN TIPO_SOLICITUD TS ON TS.ID_TIPO_SOLICITUD = S.ID_TIPO_SOLICITUD JOIN EVENTO E ON E.ID_EVENTO = S.ID_EVENTO " & _
                  "JOIN EVENTO_OW EO ON EO.OW_ID_EVENTO = E.OW_ID_EVENTO JOIN POZOS P ON P.OW_COD_POZO = EO.OW_ID_POZO " & _
                  "JOIN TIPO_EVENTO TE ON TE.OW_ID_TIPO_EVENTO = E.OW_ID_TIPO_EVENTO JOIN EQUIPOS EQ ON EQ.OW_ID_EQUIPO = E.OW_ID_EQUIPO " & _
                  "JOIN SOLICITUDES SO ON SO.ID_SOLICITUD = S.ID_SOLICITUD JOIN ESTADO_SOLICITUD ES ON ES.ID_ESTADO_SOLICITUD = SO.ID_ESTADO_SOLICITUD " & _
                  "WHERE SO.FECHA_EJECUCION IN (SELECT MAX(FECHA_EJECUCION) FROM SOLICITUDES WHERE ID_SOLICITUD = S.ID_SOLICITUD) " & _
                  "AND S.ID_TIPO_SOLICITUD = 3 AND S.FECHA_SOLICITUD > DATEADD(DAY, " & C_DIAS_APROBACION & ", EO.OW_FECHA_FIN_EVENTO) " & filtroEstadoSolicitudAutorizadas & _
                  " ORDER BY S.ID_SOLICITUD DESC"

                  
    Call agregarAlListBoxRS(queryString, Me.LT_BANDEJA)

End Sub

'Consulta para ADMINISTRADOR OW
Private Sub ejecutarConsultaAdminOW()

    Dim queryString As String
    
    queryString = "SELECT S.ID_SOLICITUD, CONCAT(U1.APELLIDO, ', ', U1.NOMBRE) SOLICITANTE, S.FECHA_SOLICITUD, TS.DESCRIPCION, TE.DESCRIPCION, " & _
                  "P.DESCRIPCION , EQ.DESCRIPCION, EO.OW_FECHA_INICIO_EVENTO, ES.DESCRIPCION, SO.FECHA_EJECUCION, SO.OBSERVACIONES " & _
                  "FROM SOLICITUD S JOIN SOLICITUDES SO ON SO.ID_SOLICITUD = S.ID_SOLICITUD JOIN USUARIOS U1 ON U1.KEY_USUARIO = S.SOLICITANTE " & _
                  "JOIN TIPO_SOLICITUD TS ON TS.ID_TIPO_SOLICITUD = S.ID_TIPO_SOLICITUD " & _
                  "JOIN EVENTO E ON E.ID_EVENTO = S.ID_EVENTO " & _
                  "JOIN EVENTO_OW EO ON E.OW_ID_EVENTO = EO.OW_ID_EVENTO " & _
                  "JOIN TIPO_EVENTO TE ON TE.OW_ID_TIPO_EVENTO = EO.OW_ID_TIPO_EVENTO " & _
                  "JOIN POZOS P ON P.OW_COD_POZO = EO.OW_ID_POZO " & _
                  "JOIN EQUIPOS EQ ON EQ.OW_ID_EQUIPO = EO.OW_ID_EQUIPO " & _
                  "JOIN ESTADO_SOLICITUD ES ON ES.ID_ESTADO_SOLICITUD = SO.ID_ESTADO_SOLICITUD " & _
                  "WHERE SO.FECHA_EJECUCION IN (SELECT MAX(FECHA_EJECUCION) FROM SOLICITUDES WHERE ID_SOLICITUD = S.ID_SOLICITUD) " & _
                  "AND S.ID_TIPO_SOLICITUD = 2 " & _
                  "AND SO.ID_ESTADO_SOLICITUD = 1 " & _
                  "ORDER BY S.ID_SOLICITUD DESC "

    Call agregarAlListBoxRS(queryString, Me.LT_BANDEJA)

End Sub

' Consulta para RESPONSABLES DE UG
Private Sub ejecutarConsultaResponsableUG(ByVal idFuncion As String, ByVal unidadGestion As String)

    Dim listadoEventos As String
    Dim queryString As String

    Select Case idFuncion
    
        Case C_FUNCION_RESPONSABLE_UG    ' EVENTOS DE DRILLING
            listadoEventos = "AND E.OW_ID_TIPO_EVENTO IN ('" & C_DOF_ID & "', '" & C_DON_ID & "', '" & C_MOB_ID & "', '" & C_RON_ID & "', '" & C_STB_ID & "') "
            
            
        Case C_FUNCION_RESPONSABLE_UG_WO ' EVENTOS DE CO/WO
            listadoEventos = "AND E.OW_ID_TIPO_EVENTO IN ('" & C_CON_ID & "', '" & C_WO_ID & "', '" & C_IWO_ID & "', '" & C_REP_ID & "', '" & C_ABN_ID & "', '" & C_STB_ID & "') "
            
    End Select
    
    If unidadGestion = UCase(C_UG_GSJ) Then
        unidadGestion = "AND E.OW_COD_UNIDAD_GESTION = '" & C_UG_GSJ & "' "
        unidadGestionReporte = "AND E.OW_ID_UNIDAD_GESTION = '" & C_UG_GSJ & "' "
    Else
        unidadGestion = "AND E.OW_COD_UNIDAD_GESTION = '" & C_UG_NQN & "' "
        unidadGestionReporte = "AND E.OW_ID_UNIDAD_GESTION = '" & C_UG_NQN & "' "
    End If
    
    queryString = "SELECT S.ID_SOLICITUD, CONCAT(U.APELLIDO, ', ', U.NOMBRE) SOLICITANTE, S.FECHA_SOLICITUD, " & _
                  "TS.DESCRIPCION, TE.DESCRIPCION, P.DESCRIPCION, EQ.DESCRIPCION, EO.OW_FECHA_INICIO_EVENTO, ES.DESCRIPCION, " & _
                  "SO.FECHA_EJECUCION , SO.OBSERVACIONES FROM SOLICITUD S JOIN USUARIOS U ON U.KEY_USUARIO = S.SOLICITANTE " & _
                  "JOIN TIPO_SOLICITUD TS ON TS.ID_TIPO_SOLICITUD = S.ID_TIPO_SOLICITUD JOIN EVENTO E ON E.ID_EVENTO = S.ID_EVENTO " & _
                  "JOIN EVENTO_OW EO ON EO.OW_ID_EVENTO = E.OW_ID_EVENTO JOIN POZOS P ON P.OW_COD_POZO = EO.OW_ID_POZO " & _
                  "JOIN TIPO_EVENTO TE ON TE.OW_ID_TIPO_EVENTO = E.OW_ID_TIPO_EVENTO JOIN EQUIPOS EQ ON EQ.OW_ID_EQUIPO = E.OW_ID_EQUIPO " & _
                  "JOIN SOLICITUDES SO ON SO.ID_SOLICITUD = S.ID_SOLICITUD JOIN ESTADO_SOLICITUD ES ON ES.ID_ESTADO_SOLICITUD = SO.ID_ESTADO_SOLICITUD " & _
                  "WHERE SO.FECHA_EJECUCION IN (SELECT MAX(FECHA_EJECUCION) FROM SOLICITUDES WHERE ID_SOLICITUD = S.ID_SOLICITUD) " & _
                  "AND S.ID_TIPO_SOLICITUD = 3 AND S.FECHA_SOLICITUD > DATEADD(DAY, 3, EO.OW_FECHA_FIN_EVENTO) AND SO.ID_ESTADO_SOLICITUD = 1 " & _
                  listadoEventos & _
                  unidadGestion & _
                  "Union ALL "
    queryString = queryString & "SELECT S.ID_SOLICITUD, CONCAT(U.APELLIDO, ', ', U.NOMBRE) SOLICITANTE, S.FECHA_SOLICITUD, " & _
                  "TS.DESCRIPCION, TE.DESCRIPCION, P.DESCRIPCION, EQ.DESCRIPCION, E.OW_FECHA_INICIO_EVENTO, ES.DESCRIPCION, " & _
                  "SO.FECHA_EJECUCION, SO.OBSERVACIONES " & _
                  "FROM SOLICITUD S JOIN USUARIOS U ON U.KEY_USUARIO = S.SOLICITANTE " & _
                  "JOIN TIPO_SOLICITUD TS ON TS.ID_TIPO_SOLICITUD = S.ID_TIPO_SOLICITUD " & _
                  "JOIN REPORTE R ON R.ID_REPORTE = S.ID_REPORTE " & _
                  "JOIN EVENTO_OW E ON E.OW_ID_EVENTO = R.OW_ID_EVENTO " & _
                  "JOIN POZOS P ON P.OW_COD_POZO = E.OW_ID_POZO " & _
                  "JOIN TIPO_EVENTO TE ON TE.OW_ID_TIPO_EVENTO = E.OW_ID_TIPO_EVENTO " & _
                  "JOIN EQUIPOS EQ ON EQ.OW_ID_EQUIPO = E.OW_ID_EQUIPO " & _
                  "JOIN SOLICITUDES SO ON SO.ID_SOLICITUD = S.ID_SOLICITUD " & _
                  "JOIN ESTADO_SOLICITUD ES ON ES.ID_ESTADO_SOLICITUD = SO.ID_ESTADO_SOLICITUD " & _
                  "WHERE SO.FECHA_EJECUCION IN (SELECT MAX(FECHA_EJECUCION) FROM SOLICITUDES WHERE ID_SOLICITUD = S.ID_SOLICITUD) " & _
                  "AND S.ID_TIPO_SOLICITUD = 4 " & _
                  "AND S.FECHA_SOLICITUD > DATEADD(DAY, 3, E.OW_FECHA_FIN_EVENTO) " & _
                  "AND SO.ID_ESTADO_SOLICITUD = 1 " & _
                  listadoEventos & _
                  unidadGestionReporte & _
                  "ORDER BY S.ID_SOLICITUD DESC"
                  
    Call agregarAlListBoxRS(queryString, Me.LT_BANDEJA)

End Sub

' Consulta para USUARIOS solicitantes
Private Sub ejecutarConsultaUsuarios(ByVal keyUsuario As String)

    Dim queryString As String
    
    queryString = "SELECT S.ID_SOLICITUD, CONCAT(U.APELLIDO, ', ', U.NOMBRE) SOLICITANTE, S.FECHA_SOLICITUD, TS.DESCRIPCION, ISNULL(TE.DESCRIPCION,TE2.DESCRIPCION) DESCRIPCION_EVENTO, " & _
                         "SP.DESCRIPCION, ISNULL(EQ.DESCRIPCION, EQ2.DESCRIPCION) DESCRIPCION_EQUIPO, ISNULL(E.FECHA_INICIO_EVENTO, EO.OW_FECHA_INICIO_EVENTO) FECHA_INICIO_EVENTO, ES.DESCRIPCION , SO.FECHA_EJECUCION, SO.OBSERVACIONES " & _
                         "FROM SOLICITUD S " & _
                         "INNER JOIN USUARIOS U ON U.KEY_USUARIO = S.SOLICITANTE " & _
                         "INNER JOIN TIPO_SOLICITUD TS  ON TS.ID_TIPO_SOLICITUD = S.ID_TIPO_SOLICITUD " & _
                         "LEFT JOIN EVENTO E ON E.ID_EVENTO = S.ID_EVENTO " & _
                         "LEFT JOIN EVENTO_OW EO ON E.OW_ID_EVENTO = EO.OW_ID_EVENTO " & _
                         "LEFT JOIN TIPO_EVENTO TE ON TE.OW_ID_TIPO_EVENTO = E.OW_ID_TIPO_EVENTO " & _
                         "LEFT JOIN TIPO_EVENTO TE2 ON TE2.OW_ID_TIPO_EVENTO = EO.OW_ID_TIPO_EVENTO " & _
                         "LEFT JOIN SOLICITUD_POZO SP ON SP.ID_POZO = E.ID_POZO " & _
                         "LEFT JOIN EQUIPOS EQ ON EQ.OW_ID_EQUIPO = E.OW_ID_EQUIPO " & _
                         "LEFT JOIN EQUIPOS EQ2 ON EQ2.OW_ID_EQUIPO = EO.OW_ID_EQUIPO " & _
                         "INNER JOIN SOLICITUDES SO ON SO.ID_SOLICITUD = S.ID_SOLICITUD " & _
                         "INNER JOIN ESTADO_SOLICITUD ES ON ES.ID_ESTADO_SOLICITUD = SO.ID_ESTADO_SOLICITUD " & _
                         "WHERE SO.FECHA_EJECUCION IN (SELECT MAX(FECHA_EJECUCION) FROM SOLICITUDES WHERE ID_SOLICITUD = S.ID_SOLICITUD) " & _
                         "AND S.SOLICITANTE = '" & keyUsuario & "' "

        queryString = queryString & "UNION ALL " & _
                         "SELECT  S.ID_SOLICITUD, CONCAT(U.APELLIDO, ', ', U.NOMBRE) SOLICITANTE, S.FECHA_SOLICITUD, TS.DESCRIPCION, TE.DESCRIPCION, " & _
                         "P.DESCRIPCION , EQ.DESCRIPCION, EO.OW_FECHA_INICIO_EVENTO, ES.DESCRIPCION, SO.FECHA_EJECUCION, SO.observaciones " & _
                         "FROM SOLICITUD S INNER JOIN USUARIOS U ON U.KEY_USUARIO = S.SOLICITANTE " & _
                         "INNER JOIN TIPO_SOLICITUD TS  ON TS.ID_TIPO_SOLICITUD = S.ID_TIPO_SOLICITUD " & _
                         "INNER JOIN REPORTE R ON R.ID_REPORTE = S.ID_REPORTE " & _
                         "LEFT JOIN EVENTO_OW EO ON EO.OW_ID_EVENTO = R.OW_ID_EVENTO " & _
                         "LEFT JOIN TIPO_EVENTO TE ON TE.OW_ID_TIPO_EVENTO = EO.OW_ID_TIPO_EVENTO " & _
                         "LEFT JOIN POZOS P ON P.OW_COD_POZO = EO.OW_ID_POZO " & _
                         "LEFT JOIN EQUIPOS EQ ON EQ.OW_ID_EQUIPO = EO.OW_ID_EQUIPO " & _
                         "INNER JOIN SOLICITUDES SO ON SO.ID_SOLICITUD = S.ID_SOLICITUD " & _
                         "INNER JOIN ESTADO_SOLICITUD ES ON ES.ID_ESTADO_SOLICITUD = SO.ID_ESTADO_SOLICITUD " & _
                         "WHERE SO.FECHA_EJECUCION IN (SELECT MAX(FECHA_EJECUCION) FROM SOLICITUDES WHERE ID_SOLICITUD = S.ID_SOLICITUD) " & _
                         "AND S.SOLICITANTE = '" & keyUsuario & "' " & _
                         " ORDER BY ID_SOLICITUD DESC"
    
    Call agregarAlListBoxRS(queryString, Me.LT_BANDEJA)

End Sub

Private Sub ejecutarConsulta(ByVal keyUsuario As String, ByVal rolUsuario As Integer)

    Dim stringConsulta As String

    ' Si el perfil es MESA DE AYUDA traigo todas las solicitudes donde deben ejecutar alguna accion
    If rolUsuario = C_FUNCION_ASISTENTE_TECNICO_GENERICO Then
        stringConsulta = "SELECT S.ID_SOLICITUD, CONCAT(U.APELLIDO, ', ', U.NOMBRE) SOLICITANTE, S.FECHA_SOLICITUD, TS.DESCRIPCION, ISNULL(TE.DESCRIPCION,TE2.DESCRIPCION) DESCRIPCION_EVENTO, " & _
                         "SP.DESCRIPCION, ISNULL(EQ.DESCRIPCION, EQ2.DESCRIPCION) DESCRIPCION_EQUIPO, ISNULL(E.FECHA_INICIO_EVENTO, EO.OW_FECHA_INICIO_EVENTO) FECHA_INICIO_EVENTO, ES.DESCRIPCION , SO.FECHA_EJECUCION, SO.OBSERVACIONES " & _
                         "FROM SOLICITUD S " & _
                         "INNER JOIN USUARIOS U ON U.KEY_USUARIO = S.SOLICITANTE " & _
                         "INNER JOIN TIPO_SOLICITUD TS  ON TS.ID_TIPO_SOLICITUD = S.ID_TIPO_SOLICITUD AND TS.ID_TIPO_SOLICITUD <> 4 " & _
                         "LEFT JOIN EVENTO E ON E.ID_EVENTO = S.ID_EVENTO " & _
                         "LEFT JOIN EVENTO_OW EO ON E.OW_ID_EVENTO = EO.OW_ID_EVENTO " & _
                         "LEFT JOIN TIPO_EVENTO TE ON TE.OW_ID_TIPO_EVENTO = E.OW_ID_TIPO_EVENTO " & _
                         "LEFT JOIN TIPO_EVENTO TE2 ON TE2.OW_ID_TIPO_EVENTO = EO.OW_ID_TIPO_EVENTO " & _
                         "LEFT JOIN SOLICITUD_POZO SP ON SP.ID_POZO = E.ID_POZO " & _
                         "LEFT JOIN EQUIPOS EQ ON EQ.OW_ID_EQUIPO = E.OW_ID_EQUIPO " & _
                         "LEFT JOIN EQUIPOS EQ2 ON EQ2.OW_ID_EQUIPO = EO.OW_ID_EQUIPO " & _
                         "INNER JOIN SOLICITUDES SO ON SO.ID_SOLICITUD = S.ID_SOLICITUD " & _
                         "INNER JOIN ESTADO_SOLICITUD ES ON ES.ID_ESTADO_SOLICITUD = SO.ID_ESTADO_SOLICITUD " & _
                         "WHERE SO.FECHA_EJECUCION IN (SELECT MAX(FECHA_EJECUCION) FROM SOLICITUDES WHERE ID_SOLICITUD = S.ID_SOLICITUD) "

        stringConsulta = stringConsulta & "UNION ALL " & _
                         "SELECT  S.ID_SOLICITUD, CONCAT(U.APELLIDO, ', ', U.NOMBRE) SOLICITANTE, S.FECHA_SOLICITUD, TS.DESCRIPCION, TE.DESCRIPCION, " & _
                         "P.DESCRIPCION , EQ.DESCRIPCION, EO.OW_FECHA_INICIO_EVENTO, ES.DESCRIPCION, SO.FECHA_EJECUCION, SO.observaciones " & _
                         "FROM SOLICITUD S INNER JOIN USUARIOS U ON U.KEY_USUARIO = S.SOLICITANTE " & _
                         "INNER JOIN TIPO_SOLICITUD TS  ON TS.ID_TIPO_SOLICITUD = S.ID_TIPO_SOLICITUD " & _
                         "INNER JOIN REPORTE R ON R.ID_REPORTE = S.ID_REPORTE " & _
                         "LEFT JOIN EVENTO_OW EO ON EO.OW_ID_EVENTO = R.OW_ID_EVENTO " & _
                         "LEFT JOIN TIPO_EVENTO TE ON TE.OW_ID_TIPO_EVENTO = EO.OW_ID_TIPO_EVENTO " & _
                         "LEFT JOIN POZOS P ON P.OW_COD_POZO = EO.OW_ID_POZO " & _
                         "LEFT JOIN EQUIPOS EQ ON EQ.OW_ID_EQUIPO = EO.OW_ID_EQUIPO " & _
                         "INNER JOIN SOLICITUDES SO ON SO.ID_SOLICITUD = S.ID_SOLICITUD " & _
                         "INNER JOIN ESTADO_SOLICITUD ES ON ES.ID_ESTADO_SOLICITUD = SO.ID_ESTADO_SOLICITUD " & _
                         "WHERE SO.FECHA_EJECUCION IN (SELECT MAX(FECHA_EJECUCION) FROM SOLICITUDES WHERE ID_SOLICITUD = S.ID_SOLICITUD) " & _
                         " ORDER BY ID_SOLICITUD DESC"
        
    End If
    
    
    ' Si el perfil es RESPONSABLE UG tanto DR como CO/WO traigo las solicitudes de DESBLOQUEOS DE EVENTO/REPORTES y de la UG correspondiente
    If rolUsuario = C_FUNCION_RESPONSABLE_UG Or rolUsuario = C_FUNCION_RESPONSABLE_UG_WO Then
        
        ' Obtengo UG del usuario
        ugUsuario = Sheets(H_GENERALES).Range("H9").Value
        
        ' Armo la lista de TIPOS DE EVENTO segun DR/WO
        Select Case rolUsuario
            Case C_FUNCION_RESPONSABLE_UG
                listadoCodEventos = " '" & C_DOF_ID & "', '" & C_DON_ID & "', '" & C_MOB_ID & "', '" & C_RON_ID & "', '" & C_STB_ID & "' "
            Case C_FUNCION_RESPONSABLE_UG_WO
                listadoCodEventos = " '" & C_CON_ID & "', '" & C_WO_ID & "', '" & C_IWO_ID & "', '" & C_REP_ID & "', '" & C_ABN_ID & "', '" & C_STB_ID & "' "
        End Select
        
        stringConsulta = "SELECT S.ID_SOLICITUD, CONCAT(U.APELLIDO, ', ', U.NOMBRE) SOLICITANTE, S.FECHA_SOLICITUD, TS.DESCRIPCION, ISNULL(TE.DESCRIPCION,TE2.DESCRIPCION) DESCRIPCION_EVENTO, " & _
                         "SP.DESCRIPCION, ISNULL(EQ.DESCRIPCION, EQ2.DESCRIPCION) DESCRIPCION_EQUIPO, ISNULL(E.FECHA_INICIO_EVENTO, EO.OW_FECHA_INICIO_EVENTO) FECHA_INICIO_EVENTO, ES.DESCRIPCION , SO.FECHA_EJECUCION, SO.OBSERVACIONES " & _
                         "FROM SOLICITUD S " & _
                         "INNER JOIN USUARIOS U ON U.KEY_USUARIO = S.SOLICITANTE " & _
                         "INNER JOIN TIPO_SOLICITUD TS  ON TS.ID_TIPO_SOLICITUD = S.ID_TIPO_SOLICITUD AND TS.ID_TIPO_SOLICITUD = 3 " & _
                         "LEFT JOIN EVENTO E ON E.ID_EVENTO = S.ID_EVENTO " & _
                         "LEFT JOIN EVENTO_OW EO ON E.OW_ID_EVENTO = EO.OW_ID_EVENTO " & _
                         "LEFT JOIN TIPO_EVENTO TE ON TE.OW_ID_TIPO_EVENTO = E.OW_ID_TIPO_EVENTO " & _
                         "LEFT JOIN TIPO_EVENTO TE2 ON TE2.OW_ID_TIPO_EVENTO = EO.OW_ID_TIPO_EVENTO " & _
                         "LEFT JOIN SOLICITUD_POZO SP ON SP.ID_POZO = E.ID_POZO " & _
                         "LEFT JOIN EQUIPOS EQ ON EQ.OW_ID_EQUIPO = E.OW_ID_EQUIPO " & _
                         "LEFT JOIN EQUIPOS EQ2 ON EQ2.OW_ID_EQUIPO = EO.OW_ID_EQUIPO " & _
                         "INNER JOIN SOLICITUDES SO ON SO.ID_SOLICITUD = S.ID_SOLICITUD " & _
                         "INNER JOIN ESTADO_SOLICITUD ES ON ES.ID_ESTADO_SOLICITUD = SO.ID_ESTADO_SOLICITUD " & _
                         "WHERE SO.FECHA_EJECUCION IN (SELECT MAX(FECHA_EJECUCION) FROM SOLICITUDES WHERE ID_SOLICITUD = S.ID_SOLICITUD) " & _
                         "AND EO.OW_ID_UNIDAD_GESTION = '" & ugUsuario & "' " & _
                         "AND EO.OW_ID_TIPO_EVENTO IN (" & listadoCodEventos & ")"
        
        stringConsulta = stringConsulta & "UNION ALL " & _
                    "SELECT  S.ID_SOLICITUD, CONCAT(U.APELLIDO, ', ', U.NOMBRE) SOLICITANTE, S.FECHA_SOLICITUD, TS.DESCRIPCION, TE.DESCRIPCION, " & _
                    "P.DESCRIPCION , EQ.DESCRIPCION, EO.OW_FECHA_INICIO_EVENTO, ES.DESCRIPCION, SO.FECHA_EJECUCION, SO.observaciones " & _
                    "FROM SOLICITUD S INNER JOIN USUARIOS U ON U.KEY_USUARIO = S.SOLICITANTE " & _
                    "INNER JOIN TIPO_SOLICITUD TS  ON TS.ID_TIPO_SOLICITUD = S.ID_TIPO_SOLICITUD AND TS.ID_TIPO_SOLICITUD = 4 " & _
                    "INNER JOIN REPORTE R ON R.ID_REPORTE = S.ID_REPORTE " & _
                    "LEFT JOIN EVENTO_OW EO ON EO.OW_ID_EVENTO = R.OW_ID_EVENTO " & _
                    "LEFT JOIN TIPO_EVENTO TE ON TE.OW_ID_TIPO_EVENTO = EO.OW_ID_TIPO_EVENTO " & _
                    "LEFT JOIN POZOS P ON P.OW_COD_POZO = EO.OW_ID_POZO " & _
                    "LEFT JOIN EQUIPOS EQ ON EQ.OW_ID_EQUIPO = EO.OW_ID_EQUIPO " & _
                    "INNER JOIN SOLICITUDES SO ON SO.ID_SOLICITUD = S.ID_SOLICITUD " & _
                    "INNER JOIN ESTADO_SOLICITUD ES ON ES.ID_ESTADO_SOLICITUD = SO.ID_ESTADO_SOLICITUD " & _
                    "WHERE SO.FECHA_EJECUCION IN (SELECT MAX(FECHA_EJECUCION) FROM SOLICITUDES WHERE ID_SOLICITUD = S.ID_SOLICITUD) " & _
                    " AND EO.OW_ID_UNIDAD_GESTION = '" & ugUsuario & "' " & _
                    "AND EO.OW_ID_TIPO_EVENTO IN (" & listadoCodEventos & ") " & _
                    " ORDER BY ID_SOLICITUD DESC"
    
    End If
    
    
    ' Si el perfil es ADMINISTRADOR OW solo traigo las MODIFICACIONES DE EVENTOS
    If rolUsuario = C_FUNCION_ADMIN_OW Then
        stringConsulta = "SELECT S.ID_SOLICITUD, CONCAT(U.APELLIDO, ', ', U.NOMBRE) SOLICITANTE, S.FECHA_SOLICITUD, TS.DESCRIPCION, ISNULL(TE.DESCRIPCION,TE2.DESCRIPCION) DESCRIPCION_EVENTO, " & _
                         "SP.DESCRIPCION, ISNULL(EQ.DESCRIPCION, EQ2.DESCRIPCION) DESCRIPCION_EQUIPO, ISNULL(E.FECHA_INICIO_EVENTO, EO.OW_FECHA_INICIO_EVENTO) FECHA_INICIO_EVENTO, ES.DESCRIPCION , SO.FECHA_EJECUCION, SO.OBSERVACIONES " & _
                         "FROM SOLICITUD S " & _
                         "INNER JOIN USUARIOS U ON U.KEY_USUARIO = S.SOLICITANTE " & _
                         "INNER JOIN TIPO_SOLICITUD TS  ON TS.ID_TIPO_SOLICITUD = S.ID_TIPO_SOLICITUD AND TS.ID_TIPO_SOLICITUD = 2 " & _
                         "LEFT JOIN EVENTO E ON E.ID_EVENTO = S.ID_EVENTO " & _
                         "LEFT JOIN EVENTO_OW EO ON E.OW_ID_EVENTO = EO.OW_ID_EVENTO " & _
                         "LEFT JOIN TIPO_EVENTO TE ON TE.OW_ID_TIPO_EVENTO = E.OW_ID_TIPO_EVENTO " & _
                         "LEFT JOIN TIPO_EVENTO TE2 ON TE2.OW_ID_TIPO_EVENTO = EO.OW_ID_TIPO_EVENTO " & _
                         "LEFT JOIN SOLICITUD_POZO SP ON SP.ID_POZO = E.ID_POZO " & _
                         "LEFT JOIN EQUIPOS EQ ON EQ.OW_ID_EQUIPO = E.OW_ID_EQUIPO " & _
                         "LEFT JOIN EQUIPOS EQ2 ON EQ2.OW_ID_EQUIPO = EO.OW_ID_EQUIPO " & _
                         "INNER JOIN SOLICITUDES SO ON SO.ID_SOLICITUD = S.ID_SOLICITUD " & _
                         "INNER JOIN ESTADO_SOLICITUD ES ON ES.ID_ESTADO_SOLICITUD = SO.ID_ESTADO_SOLICITUD " & _
                         "WHERE SO.FECHA_EJECUCION IN (SELECT MAX(FECHA_EJECUCION) FROM SOLICITUDES WHERE ID_SOLICITUD = S.ID_SOLICITUD) " & _
                         "ORDER BY ID_SOLICITUD DESC"
    End If
    
    If rolUsuario = C_FUNCION_INGENIERO Or rolUsuario = C_FUNCION_INGENIERO_WO Or rolUsuario = C_FUNCION_CM Or rolUsuario = C_FUNCION_CM_WO Or rolUsuario = C_FUNCION_ANALISTA_ESPECIALISTA Then
                stringConsulta = "SELECT S.ID_SOLICITUD, CONCAT(U.APELLIDO, ', ', U.NOMBRE) SOLICITANTE, S.FECHA_SOLICITUD, TS.DESCRIPCION, ISNULL(TE.DESCRIPCION,TE2.DESCRIPCION) DESCRIPCION_EVENTO, " & _
                         "SP.DESCRIPCION, ISNULL(EQ.DESCRIPCION, EQ2.DESCRIPCION) DESCRIPCION_EQUIPO, ISNULL(E.FECHA_INICIO_EVENTO, EO.OW_FECHA_INICIO_EVENTO) FECHA_INICIO_EVENTO, ES.DESCRIPCION , SO.FECHA_EJECUCION, SO.OBSERVACIONES " & _
                         "FROM SOLICITUD S " & _
                         "INNER JOIN USUARIOS U ON U.KEY_USUARIO = S.SOLICITANTE " & _
                         "INNER JOIN TIPO_SOLICITUD TS  ON TS.ID_TIPO_SOLICITUD = S.ID_TIPO_SOLICITUD " & _
                         "LEFT JOIN EVENTO E ON E.ID_EVENTO = S.ID_EVENTO " & _
                         "LEFT JOIN EVENTO_OW EO ON E.OW_ID_EVENTO = EO.OW_ID_EVENTO " & _
                         "LEFT JOIN TIPO_EVENTO TE ON TE.OW_ID_TIPO_EVENTO = E.OW_ID_TIPO_EVENTO " & _
                         "LEFT JOIN TIPO_EVENTO TE2 ON TE2.OW_ID_TIPO_EVENTO = EO.OW_ID_TIPO_EVENTO " & _
                         "LEFT JOIN SOLICITUD_POZO SP ON SP.ID_POZO = E.ID_POZO " & _
                         "LEFT JOIN EQUIPOS EQ ON EQ.OW_ID_EQUIPO = E.OW_ID_EQUIPO " & _
                         "LEFT JOIN EQUIPOS EQ2 ON EQ2.OW_ID_EQUIPO = EO.OW_ID_EQUIPO " & _
                         "INNER JOIN SOLICITUDES SO ON SO.ID_SOLICITUD = S.ID_SOLICITUD " & _
                         "INNER JOIN ESTADO_SOLICITUD ES ON ES.ID_ESTADO_SOLICITUD = SO.ID_ESTADO_SOLICITUD " & _
                         "WHERE SO.FECHA_EJECUCION IN (SELECT MAX(FECHA_EJECUCION) FROM SOLICITUDES WHERE ID_SOLICITUD = S.ID_SOLICITUD) " & _
                         "AND S.SOLICITANTE = '" & keyUsuario & "' "

        stringConsulta = stringConsulta & "UNION ALL " & _
                         "SELECT  S.ID_SOLICITUD, CONCAT(U.APELLIDO, ', ', U.NOMBRE) SOLICITANTE, S.FECHA_SOLICITUD, TS.DESCRIPCION, TE.DESCRIPCION, " & _
                         "P.DESCRIPCION , EQ.DESCRIPCION, EO.OW_FECHA_INICIO_EVENTO, ES.DESCRIPCION, SO.FECHA_EJECUCION, SO.observaciones " & _
                         "FROM SOLICITUD S INNER JOIN USUARIOS U ON U.KEY_USUARIO = S.SOLICITANTE " & _
                         "INNER JOIN TIPO_SOLICITUD TS  ON TS.ID_TIPO_SOLICITUD = S.ID_TIPO_SOLICITUD " & _
                         "INNER JOIN REPORTE R ON R.ID_REPORTE = S.ID_REPORTE " & _
                         "LEFT JOIN EVENTO_OW EO ON EO.OW_ID_EVENTO = R.OW_ID_EVENTO " & _
                         "LEFT JOIN TIPO_EVENTO TE ON TE.OW_ID_TIPO_EVENTO = EO.OW_ID_TIPO_EVENTO " & _
                         "LEFT JOIN POZOS P ON P.OW_COD_POZO = EO.OW_ID_POZO " & _
                         "LEFT JOIN EQUIPOS EQ ON EQ.OW_ID_EQUIPO = EO.OW_ID_EQUIPO " & _
                         "INNER JOIN SOLICITUDES SO ON SO.ID_SOLICITUD = S.ID_SOLICITUD " & _
                         "INNER JOIN ESTADO_SOLICITUD ES ON ES.ID_ESTADO_SOLICITUD = SO.ID_ESTADO_SOLICITUD " & _
                         "WHERE SO.FECHA_EJECUCION IN (SELECT MAX(FECHA_EJECUCION) FROM SOLICITUDES WHERE ID_SOLICITUD = S.ID_SOLICITUD) " & _
                         "AND S.SOLICITANTE = '" & keyUsuario & "' " & _
                         " ORDER BY ID_SOLICITUD DESC"
    
    End If
    
    
    Call agregarAlListBoxRS(stringConsulta, Me.LT_BANDEJA)
    
End Sub



Attribute VB_Name = "BANDEJA_SOLICITUDES_V2"
Attribute VB_Base = "0{49BEEABE-D208-44E3-AE96-FFF5E2AD25F9}{7E5E9395-F518-45DC-A97D-E6FF6E22765C}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub bt_actualizar_Click()

    ' Limpio la bandeja
    Me.lt_bandejaSolicitudes.Clear
    
    ' Inicializacion de la BANDEJA DE SOLICITUDES
    Dim ugUsuario As String
    Dim idPermiso As String
    Dim keyUsuario As String
    
    unidadGestion = Sheets(H_GENERALES).Range("H9").Value
    idFuncion = Int(Left(Sheets(H_GENERALES).Range("C6").Value, 2))
    keyUsuario = Replace(Sheets(H_GENERALES).Range("C6").Value, ".", "")
   
    ' Cargo filtros y solicitudes
    Call cargarBandeja(keyUsuario, idFuncion, unidadGestion)

End Sub

Private Sub bt_salir_Click()

    Unload Me

End Sub

' Doble click sobre un registro en la BANDEJA DE SOLICITUDES
Private Sub lt_bandejaSolicitudes_DblClick(ByVal Cancel As MSForms.ReturnBoolean)

    If (Me.lt_bandejaSolicitudes.ListIndex <> -1) Then
        FORM_SOLICITUD.Show
    End If
    
    Call bt_actualizar_Click

End Sub

Private Sub UserForm_Initialize()

    Me.la_cabecera.BackColor = RGB(252, 236, 240)

    ' Inicializacion de la BANDEJA DE SOLICITUDES
    Dim ugUsuario As String
    Dim idPermiso As String
    Dim keyUsuario As String
    
    unidadGestion = Sheets(H_GENERALES).Range("H9").Value
    idFuncion = Int(Left(Sheets(H_GENERALES).Range("C6").Value, 2))
    keyUsuario = Replace(Sheets(H_GENERALES).Range("C6").Value, ".", "")
   
    ' Cargo filtros y solicitudes
    Call cargarBandeja(keyUsuario, idFuncion, unidadGestion)

End Sub

Private Sub cargarBandeja(ByVal keyUsuario As String, ByVal idFuncion As String, ByVal unidadGestion As String)

    ' Segun funcion llamo a la consulta correspondiente
    Select Case idFuncion
    
        Case C_FUNCION_RESPONSABLE_UG, C_FUNCION_RESPONSABLE_UG_WO
            Call ejecutarConsultaResponsableUG(idFuncion, unidadGestion)
            
        Case C_FUNCION_RESPONSABLE_UG_PCG
            Call ejecutarConsultaResponsableUgPCG(unidadGestion)
             
        Case C_FUNCION_ASISTENTE_TECNICO_GENERICO
            Call ejecutarConsultaMesaAyuda
            
        Case C_FUNCION_ADMIN_OW
            Call ejecutarConsultaAdminOW
            
    End Select

End Sub

' Consulta para RESPONSABLES DRILLING - CO/WO
Private Sub ejecutarConsultaResponsableUG(ByVal idFuncion As String, ByVal unidadGestion As String)
    
    Dim listadoEventos As String
    Dim queryString As String

    Select Case idFuncion
    
        Case C_FUNCION_RESPONSABLE_UG    ' EVENTOS DE DRILLING
            listadoEventos = "AND (EO1.OW_ID_TIPO_EVENTO IN ('" & C_DOF_ID & "', '" & C_DON_ID & "', '" & C_MOB_ID & "', '" & C_RON_ID & "', '" & C_STB_ID & "') "
            listadoEventosReporte = "OR EO2.OW_ID_TIPO_EVENTO IN ('" & C_DOF_ID & "', '" & C_DON_ID & "', '" & C_MOB_ID & "', '" & C_RON_ID & "', '" & C_STB_ID & "')) "
            
            
        Case C_FUNCION_RESPONSABLE_UG_WO ' EVENTOS DE CO/WO
            listadoEventos = "AND (EO1.OW_ID_TIPO_EVENTO IN ('" & C_CON_ID & "', '" & C_WO_ID & "', '" & C_IWO_ID & "', '" & C_REP_ID & "', '" & C_ABN_ID & "', '" & C_STB_ID & "') "
            listadoEventosReporte = "OR EO2.OW_ID_TIPO_EVENTO IN ('" & C_CON_ID & "', '" & C_WO_ID & "', '" & C_IWO_ID & "', '" & C_REP_ID & "', '" & C_ABN_ID & "', '" & C_STB_ID & "')) "
            
    End Select
    
    If unidadGestion = UCase(C_UG_GSJ) Then
        unidadGestion = "AND U1.OW_CODIGO_UG = '" & C_UG_GSJ & "' "
    Else
        unidadGestion = "AND U1.OW_CODIGO_UG = '" & C_UG_NQN & "' "
    End If
    
    queryString = "SELECT S.ID_SOLICITUD, CONCAT(U1.APELLIDO, ', ', U1.NOMBRE) SOLICITANTE, TS.DESCRIPCION TIPO_SOLICITUD, S.FECHA_SOLICITUD, " & _
                  "ISNULL(EQ1.DESCRIPCION, EQ2.DESCRIPCION) EQUIPO, ISNULL(P1.DESCRIPCION, P2.DESCRIPCION) POZO, " & _
                  "ISNULL(TE1.DESCRIPCION, TE2.DESCRIPCION) TIPO_EVENTO, " & _
                  "ISNULL(EO1.OW_FECHA_INICIO_EVENTO, EO2.OW_FECHA_INICIO_EVENTO) FECHA_INICIO_EVENTO, " & _
                  "ISNULL(EO1.OW_FECHA_FIN_EVENTO, EO2.OW_FECHA_FIN_EVENTO) FECHA_FIN_EVENTO, " & _
                  "R.OW_ID_TIPO_REPORTE, R.NUMERO_REPORTE, R.FECHA_REPORTE, SO.OBSERVACIONES "
    queryString = queryString & "FROM SOLICITUD S JOIN USUARIOS U1 ON U1.KEY_USUARIO = S.SOLICITANTE " & _
                  "JOIN TIPO_SOLICITUD TS ON TS.ID_TIPO_SOLICITUD = S.ID_TIPO_SOLICITUD LEFT JOIN EVENTO E ON E.ID_EVENTO = S.ID_EVENTO " & _
                  "LEFT JOIN EVENTO_OW EO1 ON E.OW_ID_EVENTO = EO1.OW_ID_EVENTO LEFT JOIN EQUIPOS EQ1 ON EQ1.OW_ID_EQUIPO = EO1.OW_ID_EQUIPO " & _
                  "LEFT JOIN TIPO_EVENTO TE1 ON TE1.OW_ID_TIPO_EVENTO = EO1.OW_ID_TIPO_EVENTO " & _
                  "LEFT JOIN POZOS P1 ON P1.OW_COD_POZO = EO1.OW_ID_POZO " & _
                  "LEFT JOIN REPORTE R ON R.ID_REPORTE = S.ID_REPORTE " & _
                  "LEFT JOIN EVENTO_OW EO2 ON EO2.OW_ID_EVENTO = R.OW_ID_EVENTO " & _
                  "LEFT JOIN EQUIPOS EQ2 ON EQ2.OW_ID_EQUIPO = EO2.OW_ID_EQUIPO " & _
                  "LEFT JOIN POZOS P2 ON P2.OW_COD_POZO = EO2.OW_ID_POZO " & _
                  "LEFT JOIN TIPO_EVENTO TE2 ON TE2.OW_ID_TIPO_EVENTO = EO2.OW_ID_TIPO_EVENTO " & _
                  "LEFT JOIN SOLICITUDES SO ON SO.ID_SOLICITUD = S.ID_SOLICITUD " & _
                  "WHERE (S.ID_TIPO_SOLICITUD IN (3, 5) AND SO.ID_ESTADO_SOLICITUD = 1 AND NOT EXISTS(SELECT ID_SOLICITUD FROM SOLICITUDES WHERE SOLICITUDES.ID_SOLICITUD = S.ID_SOLICITUD AND SOLICITUDES.ID_ESTADO_SOLICITUD IN (3, 4, 5, 6)) AND U1.COD_FUNCION <> 12 " & _
                  "OR S.ID_TIPO_SOLICITUD IN (4, 6) AND SO.ID_ESTADO_SOLICITUD = 1 AND NOT EXISTS(SELECT ID_SOLICITUD FROM SOLICITUDES WHERE SOLICITUDES.ID_SOLICITUD = S.ID_SOLICITUD AND SOLICITUDES.ID_ESTADO_SOLICITUD IN (3, 4, 5, 6))) " & _
                  "AND S.FECHA_SOLICITUD > DATEADD(DAY, 8,  ISNULL(EO1.OW_FECHA_FIN_EVENTO, EO2.OW_FECHA_FIN_EVENTO)) " & _
                  listadoEventos & _
                  listadoEventosReporte & _
                  unidadGestion & _
                  "ORDER BY S.ID_SOLICITUD DESC"
                  
    Call agregarAlListBoxRS(queryString, Me.lt_bandejaSolicitudes)
    
End Sub

' Consulta para RESPONSABLE de P&CG
Private Sub ejecutarConsultaResponsableUgPCG(ByVal unidadGestion As String)

    Dim queryString As String
    
    If unidadGestion = UCase(C_UG_GSJ) Then
        unidadGestion = "AND U1.OW_CODIGO_UG = '" & C_UG_GSJ & "' "
    Else
        unidadGestion = "AND U1.OW_CODIGO_UG = '" & C_UG_NQN & "' "
    End If
    
    queryString = "SELECT S.ID_SOLICITUD, CONCAT(U1.APELLIDO, ', ', U1.NOMBRE) SOLICITANTE, TS.DESCRIPCION TIPO_SOLICITUD, S.FECHA_SOLICITUD, " & _
                  "EQ1.DESCRIPCION EQUIPO, P1.DESCRIPCION POZO, TE1.DESCRIPCION TIPO_EVENTO, EO1.OW_FECHA_INICIO_EVENTO FECHA_INICIO_EVENTO, " & _
                  "EO1.OW_FECHA_FIN_EVENTO FECHA_FIN_EVENTO, NULL, NULL, NULL, SO.OBSERVACIONES "
    queryString = queryString & "FROM SOLICITUD S JOIN USUARIOS U1 ON U1.KEY_USUARIO = S.SOLICITANTE " & _
                  "JOIN TIPO_SOLICITUD TS ON TS.ID_TIPO_SOLICITUD = S.ID_TIPO_SOLICITUD LEFT JOIN EVENTO E ON E.ID_EVENTO = S.ID_EVENTO " & _
                  "LEFT JOIN EVENTO_OW EO1 ON E.OW_ID_EVENTO = EO1.OW_ID_EVENTO LEFT JOIN EQUIPOS EQ1 ON EQ1.OW_ID_EQUIPO = EO1.OW_ID_EQUIPO " & _
                  "LEFT JOIN TIPO_EVENTO TE1 ON TE1.OW_ID_TIPO_EVENTO = EO1.OW_ID_TIPO_EVENTO " & _
                  "LEFT JOIN POZOS P1 ON P1.OW_COD_POZO = EO1.OW_ID_POZO " & _
                  "LEFT JOIN SOLICITUDES SO ON SO.ID_SOLICITUD = S.ID_SOLICITUD " & _
                  "WHERE (S.ID_TIPO_SOLICITUD IN (3, 5) AND SO.ID_ESTADO_SOLICITUD = 1 AND NOT EXISTS(SELECT ID_SOLICITUD FROM SOLICITUDES WHERE SOLICITUDES.ID_SOLICITUD = S.ID_SOLICITUD AND SOLICITUDES.ID_ESTADO_SOLICITUD IN (3, 4, 5, 6)) AND U1.COD_FUNCION = 12) " & _
                  "AND S.FECHA_SOLICITUD > DATEADD(DAY, 8,  EO1.OW_FECHA_FIN_EVENTO) " & _
                  unidadGestion & _
                  "ORDER BY S.ID_SOLICITUD DESC"
                
    Call agregarAlListBoxRS(queryString, Me.lt_bandejaSolicitudes)

End Sub

' Consulta para MESA DE AYUDA
Private Sub ejecutarConsultaMesaAyuda()

    Dim queryString As String
    
    queryString = "SELECT S.ID_SOLICITUD, CONCAT(U1.APELLIDO, ', ', U1.NOMBRE) SOLICITANTE, TS.DESCRIPCION TIPO_SOLICITUD, S.FECHA_SOLICITUD, " & _
                  "ISNULL(EQ1.DESCRIPCION, ISNULL(EQ2.DESCRIPCION, EQ3.DESCRIPCION)) EQUIPO, ISNULL(SP.DESCRIPCION, P.DESCRIPCION) POZO, " & _
                  "ISNULL(TE1.DESCRIPCION, ISNULL(TE2.DESCRIPCION, TE3.DESCRIPCION)) TIPO_EVENTO, " & _
                  "ISNULL(E.FECHA_INICIO_EVENTO, ISNULL(EO1.OW_FECHA_INICIO_EVENTO, EO2.OW_FECHA_INICIO_EVENTO)) FECHA_INICIO_EVENTO, " & _
                  "ISNULL(E.FECHA_FIN_EVENTO, ISNULL(EO1.OW_FECHA_FIN_EVENTO, EO2.OW_FECHA_FIN_EVENTO)) FECHA_FIN_EVENTO, " & _
                  "R.OW_ID_TIPO_REPORTE, R.NUMERO_REPORTE, R.FECHA_REPORTE, SOL4.OBSERVACIONES "
    queryString = queryString & " FROM SOLICITUD S JOIN USUARIOS U1 ON U1.KEY_USUARIO = S.SOLICITANTE " & _
                  "JOIN TIPO_SOLICITUD TS ON TS.ID_TIPO_SOLICITUD = S.ID_TIPO_SOLICITUD LEFT JOIN EVENTO E ON E.ID_EVENTO = S.ID_EVENTO " & _
                  "LEFT JOIN EVENTO_OW EO1 ON E.OW_ID_EVENTO = EO1.OW_ID_EVENTO LEFT JOIN EQUIPOS EQ1 ON EQ1.OW_ID_EQUIPO = E.OW_ID_EQUIPO " & _
                  "LEFT JOIN TIPO_EVENTO TE1 ON TE1.OW_ID_TIPO_EVENTO = E.OW_ID_TIPO_EVENTO " & _
                  "LEFT JOIN EQUIPOS EQ2 ON EQ2.OW_ID_EQUIPO = EO1.OW_ID_EQUIPO " & _
                  "LEFT JOIN TIPO_EVENTO TE2 ON TE2.OW_ID_TIPO_EVENTO = EO1.OW_ID_TIPO_EVENTO " & _
                  "LEFT JOIN SOLICITUD_POZO SP ON SP.ID_POZO = E.ID_POZO " & _
                  "LEFT JOIN REPORTE R ON R.ID_REPORTE = S.ID_REPORTE " & _
                  "LEFT JOIN EVENTO_OW EO2 ON EO2.OW_ID_EVENTO = R.OW_ID_EVENTO " & _
                  "LEFT JOIN TIPO_EVENTO TE3 ON TE3.OW_ID_TIPO_EVENTO = EO2.OW_ID_TIPO_EVENTO " & _
                  "LEFT JOIN EQUIPOS EQ3 ON EQ3.OW_ID_EQUIPO = EO2.OW_ID_EQUIPO " & _
                  "LEFT JOIN POZOS P ON P.OW_COD_POZO = EO2.OW_ID_POZO " & _
                  "LEFT JOIN (SELECT SO1.ID_SOLICITUD, U.APELLIDO, U.NOMBRE, ES.DESCRIPCION, SO1.FECHA_EJECUCION FROM SOLICITUDES SO1 JOIN USUARIOS U ON U.KEY_USUARIO = SO1.EJECUTANTE JOIN ESTADO_SOLICITUD ES ON ES.ID_ESTADO_SOLICITUD = SO1.ID_ESTADO_SOLICITUD WHERE SO1.ID_ESTADO_SOLICITUD = 6) SOL1 ON SOL1.ID_SOLICITUD = S.ID_SOLICITUD " & _
                  "LEFT JOIN (SELECT SO2.ID_SOLICITUD, U.APELLIDO, U.NOMBRE, ES.DESCRIPCION, SO2.FECHA_EJECUCION FROM SOLICITUDES SO2 JOIN USUARIOS U ON U.KEY_USUARIO = SO2.EJECUTANTE JOIN ESTADO_SOLICITUD ES ON ES.ID_ESTADO_SOLICITUD = SO2.ID_ESTADO_SOLICITUD WHERE SO2.ID_ESTADO_SOLICITUD = 5) SOL2 ON SOL2.ID_SOLICITUD = S.ID_SOLICITUD " & _
                  "LEFT JOIN (SELECT SO3.ID_SOLICITUD, U.APELLIDO, U.NOMBRE, ES.DESCRIPCION, SO3.FECHA_EJECUCION FROM SOLICITUDES SO3 JOIN USUARIOS U ON U.KEY_USUARIO = SO3.EJECUTANTE JOIN ESTADO_SOLICITUD ES ON ES.ID_ESTADO_SOLICITUD = SO3.ID_ESTADO_SOLICITUD WHERE SO3.ID_ESTADO_SOLICITUD IN (3,4)) SOL3 ON SOL3.ID_SOLICITUD = S.ID_SOLICITUD " & _
                  "LEFT JOIN (SELECT SO4.ID_SOLICITUD, U.APELLIDO, U.NOMBRE, ES.DESCRIPCION, SO4.FECHA_EJECUCION, SO4.OBSERVACIONES FROM SOLICITUDES SO4 JOIN USUARIOS U ON U.KEY_USUARIO = SO4.EJECUTANTE JOIN ESTADO_SOLICITUD ES ON ES.ID_ESTADO_SOLICITUD = SO4.ID_ESTADO_SOLICITUD WHERE SO4.ID_ESTADO_SOLICITUD = 1) SOL4 ON SOL4.ID_SOLICITUD = S.ID_SOLICITUD "
    queryString = queryString + "WHERE (S.ID_TIPO_SOLICITUD = 1 AND SOL4.ID_SOLICITUD = S.ID_SOLICITUD AND NOT EXISTS(SELECT ID_SOLICITUD FROM SOLICITUDES WHERE SOLICITUDES.ID_SOLICITUD = SOL4.ID_SOLICITUD AND SOLICITUDES.ID_ESTADO_SOLICITUD IN (3, 4))) " & _
                  "OR (S.ID_TIPO_SOLICITUD = 2 AND SOL2.ID_SOLICITUD = S.ID_SOLICITUD AND EXISTS(SELECT ID_SOLICITUD FROM SOLICITUDES WHERE SOLICITUDES.ID_SOLICITUD = SOL2.ID_SOLICITUD AND SOLICITUDES.ID_ESTADO_SOLICITUD = 5) AND NOT EXISTS(SELECT ID_SOLICITUD FROM SOLICITUDES WHERE SOLICITUDES.ID_SOLICITUD = SOL2.ID_SOLICITUD AND SOLICITUDES.ID_ESTADO_SOLICITUD IN (3, 4))) " & _
                  "OR (S.ID_TIPO_SOLICITUD IN (3, 4, 5, 6) AND SOL1.ID_SOLICITUD = S.ID_SOLICITUD AND NOT EXISTS(SELECT ID_SOLICITUD FROM SOLICITUDES WHERE SOLICITUDES.ID_SOLICITUD = SOL1.ID_SOLICITUD AND SOLICITUDES.ID_ESTADO_SOLICITUD IN (3, 4))) " & _
                  "OR (S.ID_TIPO_SOLICITUD IN (3, 4, 5, 6) AND SOL4.ID_SOLICITUD = S.ID_SOLICITUD AND S.FECHA_SOLICITUD < DATEADD(DAY, 8,  ISNULL(EO1.OW_FECHA_FIN_EVENTO, ISNULL(EO2.OW_FECHA_FIN_EVENTO, GETDATE())))   AND NOT EXISTS(SELECT ID_SOLICITUD FROM SOLICITUDES WHERE SOLICITUDES.ID_SOLICITUD = SOL4.ID_SOLICITUD AND SOLICITUDES.ID_ESTADO_SOLICITUD IN (3, 4))) " & _
                  "ORDER BY S.ID_SOLICITUD DESC"
    
    
    Call agregarAlListBoxRS(queryString, Me.lt_bandejaSolicitudes)

End Sub

' Consulta para Administradores de OpenWells
Private Sub ejecutarConsultaAdminOW()

    Dim queryString As String
    
    queryString = "SELECT S.ID_SOLICITUD, CONCAT(U1.APELLIDO, ', ', U1.NOMBRE) SOLICITANTE, TS.DESCRIPCION TIPO_SOLICITUD, S.FECHA_SOLICITUD, " & _
                  "EQ.DESCRIPCION, P.DESCRIPCION, TE.DESCRIPCION, EO.OW_FECHA_INICIO_EVENTO, EO.OW_FECHA_FIN_EVENTO, NULL, NULL, NULL, SO.OBSERVACIONES " & _
                  "FROM SOLICITUD S JOIN USUARIOS U1 ON U1.KEY_USUARIO = S.SOLICITANTE JOIN TIPO_SOLICITUD TS ON TS.ID_TIPO_SOLICITUD = S.ID_TIPO_SOLICITUD " & _
                  "LEFT JOIN EVENTO E ON E.ID_EVENTO = S.ID_EVENTO LEFT JOIN EVENTO_OW EO ON E.OW_ID_EVENTO = EO.OW_ID_EVENTO " & _
                  "LEFT JOIN EQUIPOS EQ ON EQ.OW_ID_EQUIPO = EO.OW_ID_EQUIPO LEFT JOIN TIPO_EVENTO TE ON TE.OW_ID_TIPO_EVENTO = EO.OW_ID_TIPO_EVENTO " & _
                  "LEFT JOIN POZOS P ON P.OW_COD_POZO = EO.OW_ID_POZO LEFT JOIN SOLICITUDES SO ON SO.ID_SOLICITUD = S.ID_SOLICITUD " & _
                  "WHERE S.ID_TIPO_SOLICITUD = 2 AND SO.ID_ESTADO_SOLICITUD = 1 AND NOT EXISTS(SELECT ID_SOLICITUD FROM SOLICITUDES WHERE SOLICITUDES.ID_SOLICITUD = S.ID_SOLICITUD AND SOLICITUDES.ID_ESTADO_SOLICITUD IN (3, 4, 5))" & _
                  "ORDER BY S.ID_SOLICITUD DESC"

    Call agregarAlListBoxRS(queryString, Me.lt_bandejaSolicitudes)

End Sub
Attribute VB_Name = "DESBLOQUEO_EVENTO"
Attribute VB_Base = "0{589E604A-090B-49A0-BA77-E1CB40475880}{34AD6270-FFF2-45FD-9EA4-EBC470C04A5E}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Dim solicitud As Integer
Dim modo As String

Public Sub inicializarFormulario(ByVal nroSolicitud As Integer, ByVal DesbloqueoBaja As String)

    solicitud = nroSolicitud
    modo = DesbloqueoBaja
    
    If modo = "BAJA DE EVENTO" Then
        Me.Caption = "Solicitud de BAJA DE EVENTOS - Gestion del cambio en OpenWells"
    End If
    
    If nroSolicitud = 0 Then
    
         Dim UG_Usuario As String
         Dim queryConsulta As String
         Dim idFuncion As String
         Dim listadoCodEventos As String
        
         UG_Usuario = Sheets(H_GENERALES).Range("H9").Value
         
         idFuncion = "" & CInt(Left(Sheets(H_GENERALES).Range("C6").Value, 2)) & ""
         
         If (idFuncion = C_FUNCION_ADMIN) Then
             UG_Usuario = "%"
             Me.CB_UGESTION.Enabled = True
         Else
             Select Case idFuncion
                 'PERFORACION
                 Case C_FUNCION_CM, C_FUNCION_INGENIERO
                     listadoCodEventos = " '" & C_DOF_ID & "', '" & C_DON_ID & "', '" & C_MOB_ID & "', '" & C_RON_ID & "', '" & C_STB_ID & "' "
                     
                 'WO / COMPLETION
                 Case C_FUNCION_CM_WO, C_FUNCION_INGENIERO_WO
                     listadoCodEventos = " '" & C_CON_ID & "', '" & C_WO_ID & "', '" & C_IWO_ID & "', '" & C_REP_ID & "', '" & C_ABN_ID & "', '" & C_STB_ID & "' "
                 
                 ' ANALISTAS
                 Case C_FUNCION_ANALISTA_ESPECIALISTA
                      listadoCodEventos = " '" & C_DOF_ID & "', '" & C_DON_ID & "', '" & C_MOB_ID & "', '" & C_RON_ID & "', '" & C_STB_ID & "', " & _
                                          " '" & C_CON_ID & "', '" & C_WO_ID & "', '" & C_IWO_ID & "', '" & C_REP_ID & "', '" & C_ABN_ID & "', '" & C_STB_ID & "' "
                    
             End Select
             
             If (listadoCodEventos <> "") Then
                 queryTipoEventos = "AND EO.OW_ID_TIPO_EVENTO IN (" & UCase(listadoCodEventos) & ") "
             End If
         End If
         
         'SE CARGAN LOS COMBOS
         
         'UNIDAD DE GESTION
         queryConsulta = "SELECT OW_CODIGO, DESCRIPCION FROM UGESTION WHERE OW_CODIGO LIKE '" & UG_Usuario & "' AND BAJA = 0 ORDER BY DESCRIPCION ASC"
         Call agregarAlComboBox(Me.CB_UGESTION, queryConsulta)
         Me.CB_UGESTION.ListIndex = 0
         Me.CB_UGESTION.Enabled = False
         
         'SE CARGAN LOS POZOS DE ACUERDO A LA UG A LA QUE PERTENECEN
         queryConsulta = "SELECT DISTINCT EO.OW_ID_POZO, P.DESCRIPCION " & _
                         "FROM EVENTO_OW EO " & _
                         "INNER JOIN TIPO_EVENTO TE ON TE.OW_ID_TIPO_EVENTO = EO.OW_ID_TIPO_EVENTO " & _
                         "INNER JOIN POZOS P ON P.OW_COD_POZO = EO.OW_ID_POZO " & _
                         "INNER JOIN EQUIPOS E ON E.OW_ID_EQUIPO = EO.OW_ID_EQUIPO " & _
                         "INNER JOIN TIPO_EQUIPO_TIPO_EVENTO TT ON TT.OW_ID_TIPO_EVENTO = EO.OW_ID_TIPO_EVENTO AND TT.OW_ID_TIPO_EQUIPO = E.OW_ID_TIPO_EQUIPO " & _
                         "WHERE EO.BAJA = 0 AND TE.ACTIVO = 1 " & _
                         IIf(modo = "BAJA DE EVENTO", "", "AND EO.LOCKED = 1 ") & _
                         "AND P.OW_CODIGO_UG ='" & UG_Usuario & "'" & _
                         queryTipoEventos & _
                         "ORDER BY P.DESCRIPCION ASC"
                        
         Call agregarAlComboBox(Me.CB_POZO, queryConsulta)
         Me.CB_POZO.ListIndex = -1
    
    Else
    
        Dim sqlstring As String
        sqlstring = "SELECT  UG.DESCRIPCION, SP.DESCRIPCION, CONCAT(TE.COD_EVENTO, ' - ', TE.DESCRIPCION), CONVERT(VARCHAR, E.FECHA_INICIO_EVENTO,103), " & _
                    "CONCAT(OE.DESCRIPCION, ' - ', OE.OW_DESC_SPANISH) , SE.observaciones " & _
                    "FROM SOLICITUD S " & _
                    "JOIN EVENTO E ON S.ID_EVENTO = E.ID_EVENTO " & _
                    "JOIN UGESTION UG ON E.OW_COD_UNIDAD_GESTION = UG.OW_CODIGO " & _
                    "JOIN SOLICITUD_POZO SP ON SP.ID_POZO = E.ID_POZO " & _
                    "JOIN TIPO_EVENTO TE ON TE.OW_ID_TIPO_EVENTO = E.OW_ID_TIPO_EVENTO " & _
                    "LEFT JOIN OBJETIVO_EVENTO OE ON OE.OW_ID_OBJETIVO_EVENTO = E.OW_ID_OBJETIVO_EVENTO " & _
                    "JOIN SOLICITUDES SE ON SE.ID_SOLICITUD = S.ID_SOLICITUD " & _
                    "WHERE " & _
                    "S.ID_SOLICITUD = " & nroSolicitud
  
        Set rs = ConsultarTablasBD(sqlstring)
        
        With Me.CB_UGESTION
            .AddItem
            .Column(1, 0) = rs.Fields(0)
            .ListIndex = 0
            .Enabled = False
        End With
        
        With Me.CB_POZO
            .AddItem
            .Column(1, 0) = rs.Fields(1)
            .ListIndex = 0
            .Enabled = False
        End With
        
        With Me.CB_TIPO_EVENTO
            .AddItem
            .Column(1, 0) = rs.Fields(2)
            .ListIndex = 0
            .Enabled = False
        End With
        
        With Me.CB_FECHA_INICIO
            .AddItem
            .Column(0, 0) = rs.Fields(3)
            .ListIndex = 0
            .Enabled = False
        End With
    
        Me.TB_OBJETIVO_EVENTO.Caption = rs.Fields(4)
        
        Me.tb_observaciones.Value = rs.Fields(5)
        Me.tb_observaciones.Enabled = False
        
        Me.BT_SOLICITAR.Enabled = False
        Me.BT_CANCELAR.Enabled = False
        
    End If
    
    Call aplicarTemplate(Me)

End Sub

Private Sub bt_cancelar_Click()

    Dim opcion As Integer
    
    opcion = MsgBox("|fffd|Esta seguro de CANCELAR? Se perdera la solicitud en curso", vbOKCancel, "AVISO")
    
    If opcion = vbCancel Then
        Exit Sub
    End If
    
    Call resetearDatos

End Sub

Private Sub BT_SOLICITAR_Click()

    Dim strCampo As String
    Dim destinatarios As String
    Dim observaciones As String
    Dim tipoEvento As String
    Dim ejecutorCambioOW As String
    Dim pUG As String
     
    strCampo = ""
    
    'Se controla que est|fffd| todo completo
    If (Me.CB_UGESTION.ListIndex = -1) Then
        MsgBox "Se debe completar la UNIDAD DE GESTION para enviar la Solicitud", vbCritical, "SOLICITAR"
        Exit Sub
    End If
    
    If (Me.CB_POZO.ListIndex = -1) Then
        MsgBox "Se debe completar el POZO para enviar la Solicitud", vbCritical, "SOLICITAR"
        Exit Sub
    End If
    
    If (Me.CB_TIPO_EVENTO.ListIndex = -1) Then
        MsgBox "Se debe completar el TIPO DE EVENTO para enviar la Solicitud", vbCritical, "SOLICITAR"
        Exit Sub
    End If
    
    '*** FECHA INICIO *************************************************
    If (Me.CB_FECHA_INICIO.ListIndex = -1) Then
        MsgBox "Se debe completar la FECHA DE INICIO para enviar la Solicitud", vbCritical, "SOLICITAR"
        Exit Sub
    End If
    '******************************************************************
    
    'Se guarda la solicitud y si fue exitoso se env|fffd|a el mail
    tb_observaciones.Text = Trim(Replace(tb_observaciones.Text, "'", "|fffd|"))
    observaciones = tb_observaciones.Text
    
    'Los comentarios son obligatorios para justificar el cambio pedido
    If (observaciones = "") Then
        MsgBox "Se deben completar las OBSERVACIONES justificando " & IIf(modo = "BAJA DE EVENTO", "la BAJA ", "el DESBLOQUEO ") & " del EVENTO para enviar la Solicitud", vbExclamation, "SOLICITAR"
        Exit Sub
    End If
    
    resultado = MsgBox("Se proceder|fffd| a generar la Solicitud de " & IIf(modo = "BAJA DE EVENTO", "Baja", "Desbloqueo") & " de Evento en Openwells. |fffd|Desea Continuar?", vbYesNo, "SOLICITAR")
    If resultado <> 6 Then
        Exit Sub
    End If
    
    tipoEvento = Me.CB_TIPO_EVENTO.list(Me.CB_TIPO_EVENTO.ListIndex, 0)
    pUG = Me.CB_UGESTION.list(Me.CB_UGESTION.ListIndex, 0)
    
    'Se consulta si ya existe una solicitud pendiente de desbloqueo del Evento_OW
    sqlstring = "SELECT S.ID_SOLICITUD, ID " & _
                "FROM SOLICITUDES S " & _
                "INNER JOIN SOLICITUD SOL ON SOL.ID_SOLICITUD = S.ID_SOLICITUD " & _
                "INNER JOIN EVENTO E ON E.ID_EVENTO = SOL.ID_EVENTO " & _
                "INNER JOIN ESTADO_SOLICITUD ES ON ES.ID_ESTADO_SOLICITUD = S.ID_ESTADO_SOLICITUD " & _
                "INNER JOIN TIPO_SOLICITUD TS ON TS.ID_TIPO_SOLICITUD = SOL.ID_TIPO_SOLICITUD " & _
                "INNER JOIN EVENTO_OW EO ON EO.OW_ID_EVENTO = E.OW_ID_EVENTO " & _
                "WHERE S.FECHA_EJECUCION IN (SELECT MAX(FECHA_EJECUCION) FROM SOLICITUDES WHERE ID_SOLICITUD=S.ID_SOLICITUD) AND (EO.OW_ID_UNIDAD_GESTION = E.OW_COD_UNIDAD_GESTION) " & _
                "AND SOL.ID_TIPO_SOLICITUD = " & IIf(modo = "BAJA DE EVENTO", "5 ", "3 ") & _
                "AND ES.ESTADO_FINAL = 0 " & _
                "AND EO.OW_ID_UNIDAD_GESTION =  '" & pUG & "' " & _
                "AND EO.OW_ID_POZO = '" & Me.CB_POZO.list(Me.CB_POZO.ListIndex, 0) & "' " & _
                "AND EO.OW_ID_TIPO_EVENTO = '" & tipoEvento & "' " & _
                "AND EO.OW_FECHA_INICIO_EVENTO = '" & Format(Me.CB_FECHA_INICIO.list(Me.CB_FECHA_INICIO.ListIndex, 0), "MM/dd/yyyy") & "' "
    If (ConsultarTablasBD(sqlstring).RecordCount > 0) Then
        MsgBox "ATENCION: Ya se ha solicitado el desbloqueo del Evento y a|fffd|n no se hay completado la solicitd en OpenWells", vbExclamation, "SOLICITAR"
        Exit Sub
    End If
            
    destinatarios = GetAprobadoresDesbloqueos(Me.LB_OW_TIPO_EQUIPO.Caption, Me.LB_OW_FECHA_FIN_EVENTO.Caption)
    
    If (destinatarios = "") Then
        MsgBox "ERROR: Ha ocurrido un Error al obtener el Administrador Local/Responsable UG", vbInformation, "SOLICITAR"
        Exit Sub
    End If
    
    Call GuardarBDDesbloqueoEvento(destinatarios)
    
    Call resetearDatos

End Sub

Private Sub CB_FECHA_INICIO_Change()

    Call limpiarCampos
    
    If (Me.CB_FECHA_INICIO.ListIndex <> -1) And solicitud = 0 Then
        'Al cargar los combos de consulta de acuerdo a lo que se va filtrando, con lo que est|fffd| en la tabla EVENTO_OW nunca va a devolver vac|fffd|a la consulta.
        'Se obtienen todos los valores que est|fffd|n en EVENTO_OW
        sqlstring = "SELECT OW_ID_EVENTO, OE.OW_ID_OBJETIVO_EVENTO, OE.DESCRIPCION + ' - ' + OE.OW_DESC_SPANISH AS OBJETIVO_EVENTO, ISNULL(FORMAT(CONVERT(DATE, EO.OW_FECHA_FIN_EVENTO, 103),'dd/MM/yyyy'),0) AS OW_FECHA_FIN_EVENTO, TEQ.DESCRIPCION, E.OW_ID_EQUIPO " & _
                    "FROM EVENTO_OW EO " & _
                    "INNER JOIN TIPO_EVENTO TE ON TE.OW_ID_TIPO_EVENTO = EO.OW_ID_TIPO_EVENTO " & _
                    "INNER JOIN POZOS P ON P.OW_COD_POZO = EO.OW_ID_POZO " & _
                    "INNER JOIN EQUIPOS E ON E.OW_ID_EQUIPO = EO.OW_ID_EQUIPO " & _
                    "INNER JOIN TIPO_EQUIPO_TIPO_EVENTO TT ON TT.OW_ID_TIPO_EVENTO = EO.OW_ID_TIPO_EVENTO AND TT.OW_ID_TIPO_EQUIPO = E.OW_ID_TIPO_EQUIPO " & _
                    "INNER JOIN TIPO_EQUIPO TEQ ON TEQ.OW_ID_TIPO_EQUIPO = E.OW_ID_TIPO_EQUIPO " & _
                    "LEFT JOIN OBJETIVO_EVENTO OE ON OE.OW_ID_OBJETIVO_EVENTO = EO.OW_ID_OBJETIVO_EVENTO " & _
                    "WHERE EO.BAJA = 0 AND TE.ACTIVO = 1 " & _
                    IIf(modo = "BAJA DE EVENTO", "", "AND EO.LOCKED = 1 ") & _
                    "AND EO.OW_ID_UNIDAD_GESTION = '" & Me.CB_UGESTION.list(Me.CB_UGESTION.ListIndex, 0) & "' " & _
                    "AND EO.OW_ID_POZO = '" & Me.CB_POZO.list(Me.CB_POZO.ListIndex, 0) & "' " & _
                    "AND EO.OW_ID_TIPO_EVENTO = '" & Me.CB_TIPO_EVENTO.list(Me.CB_TIPO_EVENTO.ListIndex, 0) & "' " & _
                    "AND OW_FECHA_INICIO_EVENTO = '" & Format(Me.CB_FECHA_INICIO.list(Me.CB_FECHA_INICIO.ListIndex, 0), "MM/dd/yyyy") & "'"
        Set rs = ConsultarTablasBD(sqlstring)
        
        If (rs.RecordCount > 0) Then
            'Puede ser que el objetivo de evento no est|fffd| cargado para los Eventos viejos
            If (rs!OBJETIVO_EVENTO <> vbNullString) Then
                Me.TB_OBJETIVO_EVENTO.Caption = rs!OBJETIVO_EVENTO
            End If
            
            Me.LB_OW_ID_EVENTO.Caption = rs!OW_ID_EVENTO
            Me.LB_OW_FECHA_FIN_EVENTO.Caption = rs!OW_FECHA_FIN_EVENTO
            Me.LB_OW_TIPO_EQUIPO.Caption = rs!DESCRIPCION
            Me.LA_ID_OBJETIVO_EVENTO.Caption = IIf(IsNull(rs!OW_ID_OBJETIVO_EVENTO), "", rs!OW_ID_OBJETIVO_EVENTO)
            Me.LA_EQUIPO.Caption = rs!OW_ID_EQUIPO
        End If
    End If
    
    Me.tb_observaciones.Enabled = True

End Sub

Private Sub CB_POZO_Change()

    Dim queryConsulta As String
    Dim queryTipoEvento As String
    
    Me.CB_FECHA_INICIO.ListIndex = -1
    Me.CB_FECHA_INICIO.Enabled = False

    If (Me.CB_POZO.ListIndex <> -1) And solicitud = 0 Then
        idFuncion = "" & CInt(Left(Sheets(H_GENERALES).Range("C6").Value, 2)) & ""
        
        If (idFuncion <> C_FUNCION_ADMIN) Then
            Select Case idFuncion
                'PERFORACION
                Case C_FUNCION_CM, C_FUNCION_INGENIERO
                    listadoCodEventos = " '" & C_DOF_ID & "', '" & C_DON_ID & "', '" & C_MOB_ID & "', '" & C_RON_ID & "', '" & C_STB_ID & "' "
                    
                'WO / COMPLETION
                Case C_FUNCION_CM_WO, C_FUNCION_INGENIERO_WO
                    listadoCodEventos = " '" & C_CON_ID & "', '" & C_WO_ID & "', '" & C_IWO_ID & "', '" & C_REP_ID & "', '" & C_ABN_ID & "', '" & C_STB_ID & "' "
                    
                Case C_FUNCION_ANALISTA_ESPECIALISTA
                    listadoCodEventos = " '" & C_DOF_ID & "', '" & C_DON_ID & "', '" & C_MOB_ID & "', '" & C_RON_ID & "', '" & C_STB_ID & "', '" & C_CON_ID & "', '" & C_WO_ID & "', '" & C_IWO_ID & "', '" & C_REP_ID & "', '" & C_ABN_ID & "', '" & C_STB_ID & "' "
            End Select
            
            queryTipoEvento = "AND EO.OW_ID_TIPO_EVENTO IN(" & UCase(listadoCodEventos) & ")"
        End If
        
        'TIPO_EVENTO de acuerdo a la UG del usuario
        queryConsulta = "SELECT DISTINCT EO.OW_ID_TIPO_EVENTO, TE.COD_EVENTO, TE.COD_EVENTO + ' - ' + TE.DESCRIPCION AS DESCRIPCION " & _
                        "FROM EVENTO_OW EO " & _
                        "INNER JOIN TIPO_EVENTO TE ON TE.OW_ID_TIPO_EVENTO = EO.OW_ID_TIPO_EVENTO " & _
                        "INNER JOIN POZOS P ON P.OW_COD_POZO = EO.OW_ID_POZO " & _
                        "INNER JOIN EQUIPOS E ON E.OW_ID_EQUIPO = EO.OW_ID_EQUIPO " & _
                        "INNER JOIN TIPO_EQUIPO_TIPO_EVENTO TT ON TT.OW_ID_TIPO_EVENTO = EO.OW_ID_TIPO_EVENTO AND TT.OW_ID_TIPO_EQUIPO = E.OW_ID_TIPO_EQUIPO " & _
                        "WHERE EO.BAJA = 0 AND TE.ACTIVO = 1 " & _
                        IIf(modo = "BAJA DE EVENTO", "", "AND EO.LOCKED = 1 ") & _
                        "AND EO.OW_ID_UNIDAD_GESTION = '" & Me.CB_UGESTION.list(Me.CB_UGESTION.ListIndex, 0) & "' " & _
                        "AND EO.OW_ID_POZO = '" & Me.CB_POZO.list(Me.CB_POZO.ListIndex, 0) & "' " & _
                        queryTipoEvento & _
                        "ORDER BY COD_EVENTO ASC"
        Call agregarAlComboBox(Me.CB_TIPO_EVENTO, queryConsulta)
        
        Me.CB_TIPO_EVENTO.ListIndex = -1
        Me.CB_TIPO_EVENTO.Enabled = True
    End If

End Sub

Private Sub CB_TIPO_EVENTO_Change()

    Dim queryConsulta As String
    Dim queryTipoEvento As String
    Dim listadoCodEventos As String
    
'    Call LimpiarCampos
    
    'Combo FECHA_INICIO en la b|fffd|squeda de acuerdo a UG/POZO/TIPO_EVENTO en EVENTO_OW
    If (Me.CB_TIPO_EVENTO.ListIndex <> -1) And solicitud = 0 Then
        idFuncion = "" & CInt(Left(Sheets(H_GENERALES).Range("C6").Value, 2)) & ""
        
        If (idFuncion <> C_FUNCION_ADMIN) Then
            Select Case idFuncion
                'PERFORACION
                Case C_FUNCION_CM, C_FUNCION_INGENIERO
                    listadoCodEventos = " '" & C_DOF_ID & "', '" & C_DON_ID & "', '" & C_MOB_ID & "', '" & C_RON_ID & "', '" & C_STB_ID & "' "
                    
                'WO / COMPLETION
                Case C_FUNCION_CM_WO, C_FUNCION_INGENIERO_WO
                    listadoCodEventos = " '" & C_CON_ID & "', '" & C_WO_ID & "', '" & C_IWO_ID & "', '" & C_REP_ID & "', '" & C_ABN_ID & "', '" & C_STB_ID & "' "
            End Select
            
            If (listadoCodEventos <> "") Then
                queryTipoEvento = "AND EO.OW_ID_TIPO_EVENTO IN(" & UCase(listadoCodEventos) & ")"
            End If
        End If
        
        queryConsulta = "SELECT DISTINCT FORMAT(CONVERT(DATE, EO.OW_FECHA_INICIO_EVENTO, 103),'dd/MM/yyyy') " & _
                        "FROM EVENTO_OW EO " & _
                        "INNER JOIN TIPO_EVENTO TE ON TE.OW_ID_TIPO_EVENTO = EO.OW_ID_TIPO_EVENTO " & _
                        "INNER JOIN POZOS P ON P.OW_COD_POZO = EO.OW_ID_POZO " & _
                        "INNER JOIN EQUIPOS E ON E.OW_ID_EQUIPO = EO.OW_ID_EQUIPO " & _
                        "INNER JOIN TIPO_EQUIPO_TIPO_EVENTO TT ON TT.OW_ID_TIPO_EVENTO = EO.OW_ID_TIPO_EVENTO AND TT.OW_ID_TIPO_EQUIPO = E.OW_ID_TIPO_EQUIPO " & _
                        "WHERE EO.BAJA = 0 AND TE.ACTIVO = 1 " & _
                        IIf(modo = "BAJA DE EVENTO", "", "AND EO.LOCKED = 1 ") & _
                        "AND EO.OW_ID_UNIDAD_GESTION = '" & Me.CB_UGESTION.list(Me.CB_UGESTION.ListIndex, 0) & "' " & _
                        "AND EO.OW_ID_POZO = '" & Me.CB_POZO.list(Me.CB_POZO.ListIndex, 0) & "' " & _
                        "AND EO.OW_ID_TIPO_EVENTO = '" & Me.CB_TIPO_EVENTO.list(Me.CB_TIPO_EVENTO.ListIndex, 0) & "' " & _
                        queryTipoEvento
                        
        Call agregarAlComboBox(Me.CB_FECHA_INICIO, queryConsulta)
        
        Me.CB_FECHA_INICIO.ListIndex = -1
        Me.CB_FECHA_INICIO.Enabled = True
    End If

End Sub

Private Sub FR_DATOS_EVENTO_Click()

End Sub

Private Sub UserForm_Initialize()

End Sub

Private Sub bt_salir_Click()
   
    Unload Me

End Sub


Private Sub resetearDatos()

    'Se reinician los combos
    Me.CB_UGESTION.Enabled = False
    'Me.CB_UGESTION.ListIndex = -1
    Me.CB_POZO.ListIndex = -1
    Me.CB_TIPO_EVENTO.ListIndex = -1
    Me.CB_TIPO_EVENTO.Enabled = False
    Me.CB_FECHA_INICIO.ListIndex = -1
    Me.CB_FECHA_INICIO.Enabled = False
    
    'Se reinician los campos de texto
    Call limpiarCampos
    
End Sub


Private Sub limpiarCampos()

    Me.tb_observaciones.Text = ""
    Me.TB_OBJETIVO_EVENTO.Caption = ""
    Me.LB_OW_ID_EVENTO.Caption = ""
    
End Sub

Private Function GuardarBDDesbloqueoEvento(ByVal destinatarios As String) As Integer

    Dim ID_EVENTO As Integer
    Dim ID_POZO As Integer
    Dim OW_COD_POZO As String
    Dim OW_POZO_DESCRIPCION As String
    Dim OW_ID_TIPO_EVENTO As String
    Dim OW_COD_UNIDAD_GESTION As String
    Dim FECHA_INICIO_EVENTO As String
    Dim OW_ID_EVENTO As String
    
    'OW_COD_UNIDAD_GESTION, OW_COD_POZO, OW_ID_TIPO_EVENTO y FECHA_INICIO_EVENTO se guarda lo que modificaron o lo que existe en OW.
    OW_COD_UNIDAD_GESTION = "'" & Me.CB_UGESTION.list(Me.CB_UGESTION.ListIndex, 0) & "'"
    OW_COD_POZO = "'" & Me.CB_POZO.list(Me.CB_POZO.ListIndex, 0) & "'"
    OW_POZO_DESCRIPCION = "'" & Me.CB_POZO.list(Me.CB_POZO.ListIndex, 1) & "'"
    OW_ID_TIPO_EVENTO = "'" & Me.CB_TIPO_EVENTO.list(Me.CB_TIPO_EVENTO.ListIndex, 0) & "'"
    FECHA_INICIO_EVENTO = "'" & Me.CB_FECHA_INICIO.list(Me.CB_FECHA_INICIO.ListIndex, 0) & "'"
    OW_ID_EVENTO = "'" & Me.LB_OW_ID_EVENTO.Caption & "'"
    idEquipo = "'" & Me.LA_EQUIPO.Caption & "'"
    idObjetivoEvento = "'" & Me.LA_ID_OBJETIVO_EVENTO.Caption & "'"
    
    '1|fffd| SE ACTUALIZA EL POZO
    ID_POZO = GuardarPozoSolicitudBD(OW_COD_POZO, OW_POZO_DESCRIPCION, "NULL", "NULL", "NULL", "NULL", "NULL")
    If (ID_POZO = 0) Then
        MsgBox "ERROR: Ha ocurrido un Error al guardar el POZO!!! Comunicarse con el Administrador del sistema", vbCritical, "SOLICITAR"
        Exit Function
    End If
    
    '2|fffd| SE GUARDA EL EVENTO CON SU POZO
    ID_EVENTO = GuardarEventoBD(ID_POZO, "NULL", OW_ID_TIPO_EVENTO, OW_COD_UNIDAD_GESTION, idEquipo, FECHA_INICIO_EVENTO, "NULL", idObjetivoEvento, _
                "NULL", "NULL", "NULL", "NULL", "NULL", "NULL", "NULL", "NULL", "NULL", "NULL", "NULL", OW_ID_EVENTO)
    If (ID_EVENTO = 0) Then
        MsgBox "ERROR: Ha ocurrido un Error al guardar el EVENTO!!! Comunicarse con el Administrador del sistema", vbCritical, "SOLICITAR MODIFICACION"
        Exit Function
    End If
    
    '3|fffd| SE GUARDA LA SOLICITUD CON SU EVENTO
    Call GuardarSolicitud(tb_observaciones.Text, destinatarios, IIf(modo = "BAJA DE EVENTO", C_ID_TIPO_BAJA_EVENTO, C_ID_TIPO_DESBLOQUEO_EVENTO), IIf(modo = "BAJA DE EVENTO", "Baja de Evento", "Desbloqueo de Evento"), IIf(modo = "BAJA DE EVENTO", "BAJA DE EVENTO", "DESBLOQUEO DE EVENTO"), ID_EVENTO, 0)

End Function


Attribute VB_Name = "DESBLOQUEO_REPORTE"
Attribute VB_Base = "0{9C04E0DB-F638-43BE-8870-D6B1DEEDBCD5}{92155F66-55D8-450F-9B41-723B8465063E}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Dim solicitud As Integer
Dim modo As String

Public Sub inicializarFormulario(ByVal nroSolicitud As Integer, ByVal DesbloqueoBaja As String)

    solicitud = nroSolicitud
    modo = DesbloqueoBaja
    
    If modo = "BAJA DE REPORTE" Then
        Me.Caption = "Solicitud de BAJA DE REPORTE - Gestion del cambio en OpenWells"
    End If
    
    If nroSolicitud = 0 Then
    
            Dim UG_Usuario As String
            Dim queryConsulta As String
            Dim queryTipoEvento As String
            Dim listadoCodEventos As String
            
            Call resetearDatos
            
            idFuncion = "" & CInt(Left(Sheets(H_GENERALES).Range("C6").Value, 2)) & ""
            
            If (idFuncion = C_FUNCION_ADMIN) Then
                UG_Usuario = "%"
            Else
                UG_Usuario = Sheets(H_GENERALES).Range("H9").Value
            
                Select Case idFuncion
                    'PERFORACION
                    Case C_FUNCION_CM, C_FUNCION_INGENIERO
                        listadoCodEventos = " '" & C_DOF_ID & "', '" & C_DON_ID & "', '" & C_MOB_ID & "', '" & C_RON_ID & "', '" & C_STB_ID & "' "
                        
                    'WO / COMPLETION
                    Case C_FUNCION_CM_WO, C_FUNCION_INGENIERO_WO
                        listadoCodEventos = " '" & C_CON_ID & "', '" & C_WO_ID & "', '" & C_IWO_ID & "', '" & C_REP_ID & "', '" & C_ABN_ID & "', '" & C_STB_ID & "' "
                        
                ' ANALISTAS
                 Case C_FUNCION_ANALISTA_ESPECIALISTA
                      listadoCodEventos = " '" & C_DOF_ID & "', '" & C_DON_ID & "', '" & C_MOB_ID & "', '" & C_RON_ID & "', '" & C_STB_ID & "', " & _
                                          " '" & C_CON_ID & "', '" & C_WO_ID & "', '" & C_IWO_ID & "', '" & C_REP_ID & "', '" & C_ABN_ID & "', '" & C_STB_ID & "' "

                End Select
                
                If (listadoCodEventos <> "") Then
                    queryTipoEvento = "AND EO.OW_ID_TIPO_EVENTO IN (" & UCase(listadoCodEventos) & ") "
                End If
            End If
            
            'SE CARGAN LOS COMBOS
            
            'UNIDAD DE GESTION
            queryConsulta = "SELECT OW_CODIGO, DESCRIPCION FROM UGESTION WHERE OW_CODIGO LIKE '" & UG_Usuario & "' AND BAJA = 0 ORDER BY DESCRIPCION ASC"
            Call agregarAlComboBox(Me.CB_UGESTION, queryConsulta)
            Me.CB_UGESTION.ListIndex = 0
            Me.CB_UGESTION.Enabled = False
            
            'SE CARGAN LOS POZOS DE ACUERDO A LA UG A LA QUE PERTENECEN
            queryConsulta = "SELECT DISTINCT EO.OW_ID_POZO, P.DESCRIPCION " & _
                            "FROM REPORTE_OW R " & _
                            "INNER JOIN EVENTO_OW EO ON EO.OW_ID_EVENTO = R.OW_ID_EVENTO " & _
                            "INNER JOIN POZOS P ON P.OW_COD_POZO = EO.OW_ID_POZO " & _
                            "INNER JOIN TIPO_EVENTO TE ON TE.OW_ID_TIPO_EVENTO = EO.OW_ID_TIPO_EVENTO " & _
                            "WHERE R.BAJA = 0 AND EO.BAJA = 0 AND TE.ACTIVO = 1 " & _
                            "AND EO.OW_ID_UNIDAD_GESTION LIKE '" & UG_Usuario & "' " & _
                            queryTipoEvento & _
                            IIf(modo = "BAJA DE REPORTE", "", "AND R.LOCKED = 1 ") & _
                            "ORDER BY P.DESCRIPCION ASC"
            Call agregarAlComboBox(Me.CB_POZO, queryConsulta)
            Me.CB_POZO.ListIndex = -1
    
    Else
        
        Dim sqlstring As String
        
        sqlstring = "SELECT UG.DESCRIPCION, P.DESCRIPCION, CONCAT(TE.COD_EVENTO, ' - ', TE.DESCRIPCION), CONVERT(VARCHAR, EO.OW_FECHA_INICIO_EVENTO,103), " & _
                    "CONCAT(OE.DESCRIPCION, ' - ', OE.OW_DESC_SPANISH), R.OW_ID_TIPO_REPORTE, R.NUMERO_REPORTE, CONVERT(VARCHAR, R.FECHA_REPORTE, 103), " & _
                    "SE.observaciones " & _
                    "FROM SOLICITUD S " & _
                    "JOIN REPORTE R ON S.ID_REPORTE = R.ID_REPORTE " & _
                    "JOIN EVENTO_OW EO ON EO.OW_ID_EVENTO = R.OW_ID_EVENTO " & _
                    "JOIN UGESTION UG ON EO.OW_ID_UNIDAD_GESTION = UG.OW_CODIGO " & _
                    "JOIN POZOS P ON P.OW_COD_POZO = EO.OW_ID_POZO " & _
                    "JOIN TIPO_EVENTO TE ON TE.OW_ID_TIPO_EVENTO = EO.OW_ID_TIPO_EVENTO " & _
                    "LEFT JOIN OBJETIVO_EVENTO OE ON OE.OW_ID_OBJETIVO_EVENTO = EO.OW_ID_OBJETIVO_EVENTO " & _
                    "JOIN SOLICITUDES SE ON SE.ID_SOLICITUD = S.ID_SOLICITUD " & _
                    "WHERE S.ID_SOLICITUD = " & nroSolicitud
    
        Set rs = ConsultarTablasBD(sqlstring)
        
        With Me.CB_UGESTION
            .AddItem
            .Column(1, 0) = rs.Fields(0)
            .ListIndex = 0
            .Enabled = False
        End With
        
        With Me.CB_POZO
            .AddItem
            .Column(1, 0) = rs.Fields(1)
            .ListIndex = 0
            .Enabled = False
        End With
        
        With Me.CB_TIPO_EVENTO
            .AddItem
            .Column(1, 0) = rs.Fields(2)
            .ListIndex = 0
            .Enabled = False
        End With
        
        With Me.CB_FECHA_INICIO
            .AddItem
            .Column(0, 0) = rs.Fields(3)
            .ListIndex = 0
            .Enabled = False
        End With
        
        Me.LB_OBJETIVO_EVENTO.Caption = rs.Fields(4)
        
        With Me.CB_TIPO_REPORTE
            .AddItem
            .Column(1, 0) = rs.Fields(5)
            .ListIndex = 0
            .Enabled = False
        End With
        
        With Me.CB_NRO_REPORTE
            .AddItem
            .Column(5, 0) = rs.Fields(6)
            .ListIndex = 0
            .Enabled = False
        End With
        
        Me.LB_FECHA_REPORTE.Caption = rs.Fields(7)
        Me.tb_observaciones.Value = rs.Fields(8)
        Me.tb_observaciones.Enabled = False
        
        Me.BT_CANCELAR.Enabled = False
        Me.BT_SOLICITAR.Enabled = False
        
        
    End If
    
    Call aplicarTemplate(Me)

End Sub

Private Sub bt_cancelar_Click()

    Dim opcion As Integer
    
    opcion = MsgBox("|fffd|Esta seguro de CANCELAR? Se perder la solicitud en curso.", vbOKCancel, "AVISO")
    
    If opcion = vbCancel Then
        Exit Sub
    End If

    Call resetearDatos
    
End Sub


Private Sub BT_SOLICITAR_Click()

    Dim strCampo As String
    Dim destinatarios As String
    Dim observaciones As String
     
    strCampo = ""
    
    'Se controla que est|fffd| todo completo
    If (Me.CB_UGESTION.ListIndex = -1) Then
        MsgBox "Se debe completar la UNIDAD DE GESTION para enviar la Solicitud", vbCritical, "SOLICITAR"
        Exit Sub
    End If
    
    If (Me.CB_POZO.ListIndex = -1) Then
        MsgBox "Se debe completar el POZO para enviar la Solicitud", vbCritical, "SOLICITAR"
        Exit Sub
    End If
    
    '*** FECHA INICIO *************************************************
    If (Me.CB_FECHA_INICIO.ListIndex = -1) Then
        MsgBox "Se debe completar la FECHA DE INICIO para enviar la Solicitud", vbCritical, "SOLICITAR"
        Exit Sub
    End If
    '******************************************************************
    
    If (Me.CB_TIPO_EVENTO.ListIndex = -1) Then
        MsgBox "Se debe completar el TIPO DE EVENTO para enviar la Solicitud", vbCritical, "SOLICITAR"
        Exit Sub
    End If
    
    If (Me.CB_TIPO_REPORTE.ListIndex = -1) Then
        MsgBox "Se debe completar el TIPO DE REPORTE para enviar la Solicitud", vbCritical, "SOLICITAR"
        Exit Sub
    End If
    
    '*** NUMERO REPORTE *************************************************
    If (Me.CB_NRO_REPORTE.ListIndex = -1) Then
        MsgBox "Se debe completar el NUMERO DE REPORTE para enviar la Solicitud", vbCritical, "SOLICITAR"
        Exit Sub
    End If
    '******************************************************************
    
    'Se guarda la solicitud y si fue exitoso se env|fffd|a el mail
    tb_observaciones.Text = Trim(Replace(tb_observaciones.Text, "'", "|fffd|"))
    observaciones = tb_observaciones.Text
    
    'Los comentarios son obligatorios para justificar el cambio pedido
    If (observaciones = "") Then
        MsgBox "Se deben completar las OBSERVACIONES justificando " & IIf(modo = "BAJA DE REPORTE", "la BAJA", "el DESBLOQUEO") & " del Reporte para enviar la Solicitud", vbExclamation, "SOLICITAR"
        Exit Sub
    End If
     
    resultado = MsgBox("Se proceder|fffd| a generar la Solicitud de " & IIf(modo = "BAJA DE REPORTE", "BAJA", "DESBLOQUEO") & " de Reporte en Openwells. |fffd|Desea Continuar?", vbYesNo, "SOLICITAR")
    If resultado <> 6 Then
        Exit Sub
    End If
    
    tipoEvento = Me.CB_TIPO_EVENTO.list(Me.CB_TIPO_EVENTO.ListIndex, 0)
    
    'Se consulta si ya existe una solicitud pendiente de desbloqueo del REPORTE_OW
    sqlstring = "SELECT S.ID_SOLICITUD, ID " & _
                "FROM SOLICITUDES S " & _
                "INNER JOIN SOLICITUD SOL ON SOL.ID_SOLICITUD = S.ID_SOLICITUD " & _
                "INNER JOIN USUARIOS U ON U.KEY_USUARIO = SOL.SOLICITANTE " & _
                "INNER JOIN REPORTE R ON R.ID_REPORTE = SOL.ID_REPORTE " & _
                "INNER JOIN ESTADO_SOLICITUD ES ON ES.ID_ESTADO_SOLICITUD = S.ID_ESTADO_SOLICITUD " & _
                "INNER JOIN TIPO_SOLICITUD TS ON TS.ID_TIPO_SOLICITUD = SOL.ID_TIPO_SOLICITUD " & _
                "INNER JOIN REPORTE_OW RO ON RO.OW_ID_REPORTE = R.OW_ID_REPORTE " & _
                "INNER JOIN EVENTO_OW EO ON EO.OW_ID_EVENTO = RO.OW_ID_EVENTO " & _
                "WHERE S.FECHA_EJECUCION IN (SELECT MAX(FECHA_EJECUCION) FROM SOLICITUDES WHERE ID_SOLICITUD=S.ID_SOLICITUD) " & _
                "AND (U.OW_CODIGO_UG = (SELECT  OW_ID_UNIDAD_GESTION FROM EVENTO_OW WHERE OW_ID_EVENTO = R.OW_ID_EVENTO)) " & _
                "AND SOL.ID_TIPO_SOLICITUD = " & IIf(modo = "BAJA", "6 ", "4 ") & _
                "AND ES.ESTADO_FINAL = 0 " & _
                "AND R.OW_ID_REPORTE = '" & Me.LB_ID_REPORTE.Caption & "'"
    If (ConsultarTablasBD(sqlstring).RecordCount > 0) Then
        MsgBox "ATENCION: Ya se ha solicitado el desbloqueo del Reporte y a|fffd|n no se hay completado la Solicitud en OpenWells", vbExclamation, "SOLICITAR"
        Exit Sub
    End If
     
    'destinatarios = GetMailEjecutorCambioOW(ejecutorCambioOW, Sheets(H_GENERALES).Range("H9").Value)
    'destinatarios = C_MAIL_ECONAT
    destinatarios = GetAprobadoresDesbloqueos(Me.LB_OW_TIPO_EQUIPO.Caption, Me.LB_OW_FECHA_FIN_EVENTO.Caption)
    If (destinatarios = "") Then
        MsgBox "ERROR: Ha ocurrido un Error al obtener el Administrador Local/Reponsable UG", vbInformation, "SOLICITAR"
        Exit Sub
    End If
    
    Call GuardarBDDesbloqueoReporte(destinatarios)
    
    Call resetearDatos
    
End Sub

Private Sub CB_FECHA_INICIO_Change()

    If solicitud <> 0 Then
        Exit Sub
    End If
    
    Dim queryConsulta As String
    
    Call limpiarCampos
    Me.CB_NRO_REPORTE.ListIndex = -1
    Me.CB_NRO_REPORTE.Enabled = False
    Me.LB_OBJETIVO_EVENTO.Caption = ""
    
    If (Me.CB_FECHA_INICIO.ListIndex <> -1) Then
        'Al cargar los combos de consulta de acuerdo a lo que se va filtrando, con lo que est|fffd| en la tabla EVENTO_OW nunca va a devolver vac|fffd|a la consulta.
        'Se obtienen todos los valores que est|fffd|n en EVENTO_OW
        queryConsulta = "SELECT DISTINCT R.OW_ID_TIPO_REPORTE, R.OW_ID_TIPO_REPORTE  + ' - ' + TR.DESCRIPCION AS DESCRIPCION, OE.DESCRIPCION + ' - ' + OE.OW_DESC_SPANISH AS OBJETIVO_EVENTO " & _
                        "FROM REPORTE_OW R " & _
                        "INNER JOIN EVENTO_OW EO ON EO.OW_ID_EVENTO = R.OW_ID_EVENTO " & _
                        "INNER JOIN POZOS P ON P.OW_COD_POZO = EO.OW_ID_POZO " & _
                        "INNER JOIN TIPO_EVENTO TE ON TE.OW_ID_TIPO_EVENTO = EO.OW_ID_TIPO_EVENTO " & _
                        "INNER JOIN TIPO_REPORTE TR ON TR.OW_ID_TIPO_REPORTE = R.OW_ID_TIPO_REPORTE " & _
                        "LEFT JOIN OBJETIVO_EVENTO OE ON OE.OW_ID_OBJETIVO_EVENTO = EO.OW_ID_OBJETIVO_EVENTO " & _
                        "WHERE R.BAJA = 0 AND EO.BAJA = 0 AND TE.ACTIVO = 1 " & _
                        "AND EO.OW_ID_UNIDAD_GESTION ='" & Me.CB_UGESTION.list(Me.CB_UGESTION.ListIndex, 0) & "' " & _
                        "AND EO.OW_ID_POZO = '" & Me.CB_POZO.list(Me.CB_POZO.ListIndex, 0) & "' " & _
                        "AND EO.OW_ID_TIPO_EVENTO = '" & Me.CB_TIPO_EVENTO.list(Me.CB_TIPO_EVENTO.ListIndex, 0) & "' " & _
                        "AND EO.OW_FECHA_INICIO_EVENTO = '" & Format(Me.CB_FECHA_INICIO.list(Me.CB_FECHA_INICIO.ListIndex, 0), "MM/dd/yyyy") & "' " & _
                        IIf(modo = "BAJA DE REPORTE", "", "AND R.LOCKED = 1 ") & _
                        "ORDER BY R.OW_ID_TIPO_REPORTE ASC "
        Set rs = ConsultarTablasBD(queryConsulta)
        
        Call agregarAlComboBox(Me.CB_TIPO_REPORTE, queryConsulta)
        
        Me.CB_TIPO_REPORTE.ListIndex = -1
        Me.CB_TIPO_REPORTE.Enabled = True
        
        If (rs.RecordCount > 0) Then
            rs.MoveFirst
            If (rs!OBJETIVO_EVENTO <> vbNullString) Then
                Me.LB_OBJETIVO_EVENTO.Caption = rs!OBJETIVO_EVENTO
            End If
        End If
    End If

End Sub

Private Sub CB_NRO_REPORTE_Change()

    If solicitud <> 0 Then
        Exit Sub
    End If
    
    Call limpiarCampos
    
    If (Me.CB_NRO_REPORTE.ListIndex <> -1) Then
        Me.LB_ID_REPORTE.Caption = Me.CB_NRO_REPORTE.list(Me.CB_NRO_REPORTE.ListIndex, 0)
        Me.LB_FECHA_REPORTE.Caption = Me.CB_NRO_REPORTE.list(Me.CB_NRO_REPORTE.ListIndex, 1)
        Me.LB_OW_ID_EVENTO.Caption = Me.CB_NRO_REPORTE.list(Me.CB_NRO_REPORTE.ListIndex, 2)
        Me.LB_OW_FECHA_FIN_EVENTO.Caption = Me.CB_NRO_REPORTE.list(Me.CB_NRO_REPORTE.ListIndex, 3)
        Me.LB_OW_TIPO_EQUIPO.Caption = Me.CB_NRO_REPORTE.list(Me.CB_NRO_REPORTE.ListIndex, 4)
    End If

End Sub

Private Sub CB_POZO_Change()

    If solicitud <> 0 Then
        Exit Sub
    End If

    Dim queryConsulta As String
    Dim queryTipoEvento As String
    Dim listadoCodEventos As String
        
    Call limpiarCampos
    Me.CB_FECHA_INICIO.ListIndex = -1
    Me.CB_FECHA_INICIO.Enabled = False
    Me.LB_OBJETIVO_EVENTO.Caption = ""

    If (Me.CB_POZO.ListIndex <> -1) Then
        'TIPO_EVENTO de acuerdo a la UG del usuario
        idFuncion = "" & CInt(Left(Sheets(H_GENERALES).Range("C6").Value, 2)) & ""
        
        If (idFuncion <> C_FUNCION_ADMIN) Then
            Select Case idFuncion
                'PERFORACION
                Case C_FUNCION_CM, C_FUNCION_INGENIERO
                    listadoCodEventos = " '" & C_DOF_ID & "', '" & C_DON_ID & "', '" & C_MOB_ID & "', '" & C_RON_ID & "', '" & C_STB_ID & "' "
                    
                'WO / COMPLETION
                Case C_FUNCION_CM_WO, C_FUNCION_INGENIERO_WO
                    listadoCodEventos = " '" & C_CON_ID & "', '" & C_WO_ID & "', '" & C_IWO_ID & "', '" & C_REP_ID & "', '" & C_ABN_ID & "', '" & C_STB_ID & "' "
            End Select
            
            If (listadoCodEventos <> "") Then
                queryTipoEvento = "AND EO.OW_ID_TIPO_EVENTO IN(" & UCase(listadoCodEventos) & ") "
            End If
        End If
        
        queryConsulta = "SELECT DISTINCT EO.OW_ID_TIPO_EVENTO, TE.COD_EVENTO, TE.COD_EVENTO + ' - ' + TE.DESCRIPCION AS DESCRIPCION " & _
                        "FROM REPORTE_OW R " & _
                        "INNER JOIN EVENTO_OW EO ON EO.OW_ID_EVENTO = R.OW_ID_EVENTO " & _
                        "INNER JOIN POZOS P ON P.OW_COD_POZO = EO.OW_ID_POZO " & _
                        "INNER JOIN TIPO_EVENTO TE ON TE.OW_ID_TIPO_EVENTO = EO.OW_ID_TIPO_EVENTO " & _
                        "WHERE R.BAJA = 0 AND EO.BAJA = 0 And TE.ACTIVO = 1 " & _
                        "AND EO.OW_ID_UNIDAD_GESTION ='" & Me.CB_UGESTION.list(Me.CB_UGESTION.ListIndex, 0) & "' " & _
                        "AND EO.OW_ID_POZO = '" & Me.CB_POZO.list(Me.CB_POZO.ListIndex, 0) & "' " & _
                        IIf(modo = "BAJA DE REPORTE", "", "AND R.LOCKED = 1 ") & _
                        queryTipoEvento & _
                        "ORDER BY COD_EVENTO ASC"
                        
        Call agregarAlComboBox(Me.CB_TIPO_EVENTO, queryConsulta)
        
        Me.CB_TIPO_EVENTO.ListIndex = -1
        Me.CB_TIPO_EVENTO.Enabled = True
    End If

End Sub

Private Sub CB_TIPO_EVENTO_Change()


    If solicitud <> 0 Then
        Exit Sub
    End If

    Dim queryConsulta As String
    Dim queryTipoEvento As String
    
    Call limpiarCampos
    Me.CB_TIPO_REPORTE.ListIndex = -1
    Me.CB_TIPO_REPORTE.Enabled = False
    Me.CB_NRO_REPORTE.ListIndex = -1
    Me.CB_NRO_REPORTE.Enabled = False
    Me.LB_OBJETIVO_EVENTO.Caption = ""
    
    'Combo FECHA_INICIO en la b|fffd|squeda de acuerdo a UG/POZO/TIPO_EVENTO en EVENTO_OW
    If (Me.CB_TIPO_EVENTO.ListIndex <> -1) Then
        idFuncion = "" & CInt(Left(Sheets(H_GENERALES).Range("C6").Value, 2)) & ""
        
        If (idFuncion <> C_FUNCION_ADMIN) Then
            Select Case idFuncion
                'PERFORACION
                Case C_FUNCION_CM, C_FUNCION_INGENIERO
                    listadoCodEventos = " '" & C_DOF_ID & "', '" & C_DON_ID & "', '" & C_MOB_ID & "', '" & C_RON_ID & "', '" & C_STB_ID & "' "
                    
                'WO / COMPLETION
                Case C_FUNCION_CM_WO, C_FUNCION_INGENIERO_WO
                    listadoCodEventos = " '" & C_CON_ID & "', '" & C_WO_ID & "', '" & C_IWO_ID & "', '" & C_REP_ID & "', '" & C_ABN_ID & "', '" & C_STB_ID & "' "
            End Select
        
            If (listadoCodEventos <> "") Then
                queryTipoEvento = "AND EO.OW_ID_TIPO_EVENTO IN(" & UCase(listadoCodEventos) & ") "
            End If
        End If
    
        queryConsulta = "SELECT DISTINCT FORMAT(CONVERT(DATE, EO.OW_FECHA_INICIO_EVENTO, 103),'dd/MM/yyyy') AS OW_FECHA_INICIO_EVENTO " & _
                        "FROM REPORTE_OW R " & _
                        "INNER JOIN EVENTO_OW EO ON EO.OW_ID_EVENTO = R.OW_ID_EVENTO " & _
                        "INNER JOIN POZOS P ON P.OW_COD_POZO = EO.OW_ID_POZO " & _
                        "INNER JOIN TIPO_EVENTO TE ON TE.OW_ID_TIPO_EVENTO = EO.OW_ID_TIPO_EVENTO " & _
                        "WHERE R.BAJA = 0 AND EO.BAJA = 0 AND TE.ACTIVO = 1 " & _
                        "AND EO.OW_ID_UNIDAD_GESTION ='" & Me.CB_UGESTION.list(Me.CB_UGESTION.ListIndex, 0) & "' " & _
                        "AND EO.OW_ID_POZO = '" & Me.CB_POZO.list(Me.CB_POZO.ListIndex, 0) & "' " & _
                        "AND EO.OW_ID_TIPO_EVENTO = '" & Me.CB_TIPO_EVENTO.list(Me.CB_TIPO_EVENTO.ListIndex, 0) & "' " & _
                        queryTipoEvento & _
                        IIf(modo = "BAJA DE REPORTE", "", "AND R.LOCKED = 1 ") & _
                        "ORDER BY OW_FECHA_INICIO_EVENTO ASC"
        Call agregarAlComboBox(Me.CB_FECHA_INICIO, queryConsulta)
        
        Me.CB_FECHA_INICIO.ListIndex = -1
        Me.CB_FECHA_INICIO.Enabled = True
    End If

End Sub

Private Sub CB_TIPO_REPORTE_Change()

    If solicitud <> 0 Then
        Exit Sub
    End If
    
    Dim queryConsulta As String
    
    Call limpiarCampos
    Me.CB_NRO_REPORTE.ListIndex = -1
    Me.CB_NRO_REPORTE.Enabled = False
    
    'Combo FECHA_INICIO en la b|fffd|squeda de acuerdo a UG/POZO/TIPO_EVENTO en EVENTO_OW
    If (Me.CB_TIPO_REPORTE.ListIndex <> -1) Then
        queryConsulta = "SELECT R.OW_ID_REPORTE, FORMAT(CONVERT(DATE, R.OW_FECHA_REPORTE, 103),'dd/MM/yyyy') AS OW_FECHA_REPORTE, R.OW_ID_EVENTO, ISNULL(FORMAT(CONVERT(DATE, EO.OW_FECHA_FIN_EVENTO, 103),'dd/MM/yyyy'),0) AS OW_FECHA_FIN_EVENTO, TEQ.DESCRIPCION,  LTRIM(R.OW_NUMERO_REPORTE) " & _
                        "FROM REPORTE_OW R " & _
                        "INNER JOIN EVENTO_OW EO ON EO.OW_ID_EVENTO = R.OW_ID_EVENTO " & _
                        "INNER JOIN POZOS P ON P.OW_COD_POZO = EO.OW_ID_POZO " & _
                        "INNER JOIN TIPO_EVENTO TE ON TE.OW_ID_TIPO_EVENTO = EO.OW_ID_TIPO_EVENTO " & _
                        "INNER JOIN TIPO_REPORTE TR ON TR.OW_ID_TIPO_REPORTE = R.OW_ID_TIPO_REPORTE " & _
                        "INNER JOIN EQUIPOS E ON E.OW_ID_EQUIPO = EO.OW_ID_EQUIPO " & _
                        "INNER JOIN TIPO_EQUIPO TEQ ON TEQ.OW_ID_TIPO_EQUIPO = E.OW_ID_TIPO_EQUIPO " & _
                        "LEFT JOIN OBJETIVO_EVENTO OE ON OE.OW_ID_OBJETIVO_EVENTO = EO.OW_ID_OBJETIVO_EVENTO AND EO.OW_ID_TIPO_EVENTO = OE.OW_ID_TIPO_EVENTO " & _
                        "WHERE R.BAJA = 0 And EO.BAJA = 0 And TE.ACTIVO = 1 " & _
                        "AND EO.OW_ID_UNIDAD_GESTION ='" & Me.CB_UGESTION.list(Me.CB_UGESTION.ListIndex, 0) & "' " & _
                        "AND EO.OW_ID_POZO = '" & Me.CB_POZO.list(Me.CB_POZO.ListIndex, 0) & "' " & _
                        "AND EO.OW_ID_TIPO_EVENTO = '" & Me.CB_TIPO_EVENTO.list(Me.CB_TIPO_EVENTO.ListIndex, 0) & "' " & _
                        "AND EO.OW_FECHA_INICIO_EVENTO = '" & Format(Me.CB_FECHA_INICIO.list(Me.CB_FECHA_INICIO.ListIndex, 0), "MM/dd/yyyy") & "' " & _
                        "AND R.OW_ID_TIPO_REPORTE = '" & Me.CB_TIPO_REPORTE.list(Me.CB_TIPO_REPORTE.ListIndex, 0) & "' " & _
                        IIf(modo = "BAJA DE REPORTE", "", "AND R.LOCKED = 1 ") & _
                        "ORDER BY R.OW_FECHA_REPORTE ASC"

        Call agregarAlComboBox(Me.CB_NRO_REPORTE, queryConsulta)
        
        Me.CB_NRO_REPORTE.ListIndex = -1
        Me.CB_NRO_REPORTE.Enabled = True
    End If
    
End Sub

Private Sub Image_AYUDA_Click()

    FORM_AYUDA.Show

End Sub


Private Sub resetearDatos()

    'Se reinician los combos
    Me.CB_POZO.ListIndex = -1
    Me.CB_TIPO_EVENTO.ListIndex = -1
    Me.CB_TIPO_EVENTO.Enabled = False
    Me.CB_FECHA_INICIO.ListIndex = -1
    Me.CB_FECHA_INICIO.Enabled = False
    Me.CB_TIPO_REPORTE.ListIndex = -1
    Me.CB_TIPO_REPORTE.Enabled = False
    Me.CB_TIPO_REPORTE.ListIndex = -1
    Me.CB_TIPO_REPORTE.Enabled = False
    Me.CB_NRO_REPORTE.ListIndex = -1
    Me.CB_NRO_REPORTE.Enabled = False
    Me.LB_OW_ID_EVENTO.Caption = ""
    
    'Se reinician los campos de texto
    Call limpiarCampos
    
End Sub

Private Sub limpiarCampos()

    Me.tb_observaciones.Text = ""
    Me.LB_FECHA_REPORTE.Caption = ""
    Me.LB_ID_REPORTE.Caption = ""
    
End Sub

Private Function GuardarBDDesbloqueoReporte(ByVal destinatarios As String) As Integer

    Dim OW_ID_EVENTO As String
    Dim OW_ID_TIPO_REPORTE As String
    Dim OW_NUMERO_REPORTE As String
    Dim OW_ID_REPORTE As String
    Dim OW_FECHA_REPORTE As String
    Dim ID_REPORTE As Integer
    
    OW_ID_EVENTO = "'" & Me.LB_OW_ID_EVENTO.Caption & "'"
    OW_ID_TIPO_REPORTE = "'" & Me.CB_TIPO_REPORTE.list(Me.CB_TIPO_REPORTE.ListIndex, 0) & "'"
    OW_NUMERO_REPORTE = "'" & Me.CB_NRO_REPORTE.list(Me.CB_NRO_REPORTE.ListIndex, 5) & "'"
    OW_ID_REPORTE = "'" & Me.LB_ID_REPORTE.Caption & "'"
    OW_FECHA_REPORTE = "'" & Format(Me.LB_FECHA_REPORTE.Caption, "MM/dd/yyyy") & "'"
    
    '1|fffd| SE GUARDA EL REPORTE
    ID_REPORTE = GuardarReporteBD(OW_ID_TIPO_REPORTE, OW_NUMERO_REPORTE, OW_ID_EVENTO, OW_FECHA_REPORTE, OW_ID_REPORTE)
    If (ID_REPORTE = 0) Then
        MsgBox "ERROR: Ha ocurrido un Error al guardar el EVENTO!!! Comunicarse con el Administrador del sistema", vbCritical, "SOLICITAR MODIFICACION"
        Exit Function
    End If
        
    '2|fffd| SE GUARDA LA SOLICITUD CON SU REPORTE
    Call GuardarSolicitud(tb_observaciones.Text, destinatarios, IIf(modo = "BAJA DE REPORTE", C_ID_TIPO_BAJA_REPORTE, C_ID_TIPO_DESBLOQUEO_REPORTE), IIf(modo = "BAJA DE REPORTE", "Baja de Reporte", "Desbloqueo de Reporte"), IIf(modo = "BAJA DE REPORTE", "BAJA DE REPORTE", "DESBLOQUEO DE REPORTE"), 0, ID_REPORTE)
    
End Function

Private Sub bt_salir_Click()
    
    Unload Me

End Sub


Private Sub FR_DATOS_EVENTO_Click()

End Sub

Private Sub UserForm_Click()

End Sub
Attribute VB_Name = "FORM_AYUDA"
Attribute VB_Base = "0{01BA4263-8376-41EE-93A3-EF54968DE6B0}{FEF2C8C0-8692-479E-8CA7-B1BF9371A50C}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub bt_salir_Click()
    
    Unload Me

End Sub

Private Sub UserForm_Initialize()

    Call aplicarTemplate(Me)
    
End Sub
Attribute VB_Name = "FORM_SOLICITUD"
Attribute VB_Base = "0{D3F6253B-AD86-4270-A171-FE3A0D66EF44}{99AF0E59-C2D2-49C8-8E32-FBFF6022B9D7}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Private Sub bt_aprobarSolicitud_Click()

    Dim opcion As Integer
    
    opcion = MsgBox("|fffd|Esta seguro que desea APROBAR la SOLICITUD?", vbOKCancel, "AVISO")
    
    If opcion = vbCancel Then
        Exit Sub
    End If
    
    Dim observaciones As String
    Dim idSolicitud As String
    Dim iRegistros As Integer
    Dim destinatario As String
    Dim tipoSolicitud As String
    
    tipoSolicitud = Me.tb_tipoSolicitud.Value
    
    destinatario = C_MAIL_ECONAT
    If (destinatario = "") Then
        MsgBox "ERROR: Ha ocurrido un Error al obtener el destinatario", vbCritical, "DELEGAR SOLICITUD"
        Exit Sub
    End If
    
    idSolicitud = Me.tb_nroSolicitud.Text
    observaciones = Trim(Replace(Me.tb_observaciones.Text, "'", "|fffd|"))
    If (Trim(observaciones) & vbNullString = vbNullString) Then
        txtObs = "NULL"
    Else
        txtObs = "'" & observaciones & "'"
    End If
    
    iRegistros = ActualizarSolicitudes(idSolicitud, C_ESTADO_APROBADA, txtObs)
    If (iRegistros > 0) Then
        'Call EnviarMailAccion(idSolicitud, observaciones, destinatario, C_APROBAR, tipoSolicitud)
        
        'MsgBox "La Solicitud N|fffd| " & idSolicitud & " ha sido APROBADA Exitosamente", vbInformation, "APROBAR SOLICITUD"
    Else
        MsgBox "ERROR: Ha ocurrido un Error al Delegar la Solicitud!!!", vbCritical, "DELEGAR SOLICITUD"
    End If
    
    Unload Me

End Sub

Private Sub bt_delegarSolicitud_Click()

    Dim opcion As Integer
    
    opcion = MsgBox("|fffd|Esta seguro que desea DELEGAR la SOLICITUD?", vbOKCancel, "AVISO")

    If opcion = vbCancel Then
        Exit Sub
    End If
    
    Dim observaciones As String
    Dim idSolicitud As String
    Dim iRegistros As Integer
    Dim destinatario As String
    Dim tipoSolicitud As String
    
    destinatario = C_MAIL_ECONAT
    If (destinatario = "") Then
        MsgBox "ERROR: Ha ocurrido un Error al obtener el destinatario", vbCritical, "DELEGAR SOLICITUD"
        Exit Sub
    End If
    
    idSolicitud = Me.tb_nroSolicitud.Text
    observaciones = Trim(Replace(tb_observaciones.Text, "'", "|fffd|"))
    If (Trim(observaciones) & vbNullString = vbNullString) Then
        txtObs = "NULL"
    Else
        txtObs = "'" & observaciones & "'"
    End If
    
    iRegistros = ActualizarSolicitudes(idSolicitud, C_ESTADO_DELEGADA, txtObs)
    If (iRegistros > 0) Then
        Call EnviarMailAccion(idSolicitud, observaciones, destinatario, C_DELEGAR, C_MODIFICACION_EVENTO)
        
        MsgBox "La Solicitud N|fffd| " & idSolicitud & " ha sido Delegada Exitosamente", vbInformation, "DELEGAR SOLICITUD"
    Else
        MsgBox "ERROR: Ha ocurrido un Error al Delegar la Solicitud!!!", vbCritical, "DELEGAR SOLICITUD"
    End If
    
    Unload Me

End Sub

Private Sub bt_finalizarSolicitud_Click()

    Dim opcion As Integer
    Dim keyDestinatario As String
    Dim idSolicitud As String
    Dim tipoSolicitud As String
    Dim observaciones As String
    Dim solicitudActualizada As Integer
    idSolicitud = Me.tb_nroSolicitud.Text
            
    opcion = MsgBox("|fffd|Esta seguro que desea FINALIZAR la SOLICITUD? Se debe haber ejecutado previamente la solicitud en OpenWells.", vbOKCancel, "AVISO")

    If opcion = vbCancel Then
        Exit Sub
    End If
    
    keyDestinatario = GetMailByKeyUsuario(idSolicitud)
    If (keyDestinatario = "") Then
        MsgBox "ERROR: Ha ocurrido un Error al obtener el destinatario", vbCritical, "FINALIZAR SOLICITUD"
        Exit Sub
    End If
    

    tipoSolicitud = Me.tb_tipoSolicitud
    
    observaciones = Trim(Replace(Me.tb_comentarios.Text, "'", "|fffd|"))
    If (Trim(observaciones) & vbNullString = vbNullString) Then
        txtObs = "NULL"
    Else
        txtObs = "'" & observaciones & "'"
    End If
    
    solicitudActualizada = ActualizarSolicitudes(idSolicitud, C_ESTADO_FINALIZADA, txtObs)
    If (solicitudActualizada > 0) Then
        'Call EnviarMailAccion(idSolicitud, observaciones, keyDestinatario, C_FINALIZAR, tipoSolicitud)
        
        MsgBox "La Solicitud N|fffd| " & idSolicitud & " ha sido Finalizada Exitosamente", vbInformation, "FINALIZAR SOLICITUD"
    Else
        MsgBox "ERROR: Ha ocurrido un Error al Finalizar la Solicitud!!!", vbCritical, "FINALIZAR SOLICITUD"
    End If

    Unload Me


End Sub

Private Sub bt_rechazarSolicitud_Click()

    Dim opcion As Integer
    Dim idSolicitud As String
    Dim observaciones As String
    Dim solicitudActualizada As Integer
    Dim tipoSolicitud As String
    Dim destinatario As String
    
    opcion = MsgBox("|fffd|Esta seguro que desea RECHAZAR la SOLICITUD? Se debe haber ejecutado previamente la solicitud en OpenWells.", vbOKCancel, "AVISO")
    
    If opcion = vbCancel Then
        Exit Sub
    End If
    
    
    idSolicitud = Me.tb_nroSolicitud.Text
    destinatario = GetMailByKeyUsuario(idSolicitud)
    If (destinatario = "") Then
        MsgBox "ERROR: Ha ocurrido un Error al obtener el destinatario", vbCritical, "RECHAZAR SOLICITUD"
        Exit Sub
    End If
    
    tipoSolicitud = Me.tb_tipoSolicitud.Text
    
    observaciones = Trim(Replace(Me.tb_comentarios.Text, "'", "|fffd|"))
    If (observaciones = "") Then
        MsgBox "Se deben completar COMENTARIOS para rechazar la Solicitud", vbExclamation, "RECHAZAR SOLICITUD"
        Exit Sub
    End If
    
    solicitudActualizada = ActualizarSolicitudes(idSolicitud, C_ESTADO_RECHAZADA, "'" & observaciones & "'")
    If (solicitudActualizada > 0) Then
        'Call EnviarMailAccion(idSolicitud, observaciones, destinatario, C_RECHAZAR, tipoSolicitud)
        
        MsgBox "La Solicitud N|fffd| " & idSolicitud & " ha sido Rechazada Exitosamente", vbInformation, "RECHAZAR SOLICITUD"
    Else
        MsgBox "ERROR: Ha ocurrido un Error al Rechazar la Solicitud!!!", vbCritical, "RECHAZAR SOLICITUD"
    End If
    
    Unload Me

End Sub

Private Sub bt_salir_Click()

    Dim opcion As Integer
   
    Unload Me

End Sub

Private Sub bt_visualizarSolicitud_Click()

    Dim FORMULARIO As Object
    
    Select Case Me.tb_tipoSolicitud.Value
        Case C_ALTA_EVENTO
            Set FORMULARIO = New ALTA_EVENTO_V2
            FORMULARIO.inicializarFormulario (Me.tb_nroSolicitud.Value)
            FORMULARIO.Show
        
        Case C_MODIFICACION_EVENTO
            Set FORMULARIO = New MODIFICACION_EVENTO
            FORMULARIO.inicializarFormulario (Me.tb_nroSolicitud.Value)
            FORMULARIO.Show
            
        Case C_DESBLOQUEO_EVENTO
            Set FORMULARIO = New DESBLOQUEO_EVENTO
            FORMULARIO.inicializarFormulario Me.tb_nroSolicitud.Value, "DESBLOQUEO DE EVENTO"
            FORMULARIO.Show
        
        Case C_DESBLOQUEO_REPORTE
            Set FORMULARIO = New DESBLOQUEO_REPORTE
            FORMULARIO.inicializarFormulario Me.tb_nroSolicitud.Value, "DESBLOQUEO DE REPORTE"
            FORMULARIO.Show
            
        Case C_BAJA_EVENTO
            Set FORMULARIO = New DESBLOQUEO_EVENTO
            FORMULARIO.inicializarFormulario Me.tb_nroSolicitud.Value, "BAJA DE EVENTO"
            FORMULARIO.Show
            
        Case C_BAJA_REPORTE
            Set FORMULARIO = New DESBLOQUEO_REPORTE
            FORMULARIO.inicializarFormulario Me.tb_nroSolicitud.Value, "BAJA DE REPORTE"
            FORMULARIO.Show
        
    End Select

End Sub

Private Sub UserForm_Initialize()

    Me.tb_nroSolicitud.Value = BANDEJA_SOLICITUDES_V2.lt_bandejaSolicitudes.list(BANDEJA_SOLICITUDES_V2.lt_bandejaSolicitudes.ListIndex, 0)
    Me.tb_solicitante.Value = BANDEJA_SOLICITUDES_V2.lt_bandejaSolicitudes.list(BANDEJA_SOLICITUDES_V2.lt_bandejaSolicitudes.ListIndex, 1)
    Me.tb_tipoSolicitud.Value = BANDEJA_SOLICITUDES_V2.lt_bandejaSolicitudes.list(BANDEJA_SOLICITUDES_V2.lt_bandejaSolicitudes.ListIndex, 2)
    Me.tb_fechaSolicitud.Value = BANDEJA_SOLICITUDES_V2.lt_bandejaSolicitudes.list(BANDEJA_SOLICITUDES_V2.lt_bandejaSolicitudes.ListIndex, 3)
    Me.tb_tipoEvento.Value = BANDEJA_SOLICITUDES_V2.lt_bandejaSolicitudes.list(BANDEJA_SOLICITUDES_V2.lt_bandejaSolicitudes.ListIndex, 6)
    Me.tb_fechaInicio.Value = BANDEJA_SOLICITUDES_V2.lt_bandejaSolicitudes.list(BANDEJA_SOLICITUDES_V2.lt_bandejaSolicitudes.ListIndex, 7)
    Me.tb_tipoReporte.Value = BANDEJA_SOLICITUDES_V2.lt_bandejaSolicitudes.list(BANDEJA_SOLICITUDES_V2.lt_bandejaSolicitudes.ListIndex, 9)
    Me.tb_fechaReporte.Value = BANDEJA_SOLICITUDES_V2.lt_bandejaSolicitudes.list(BANDEJA_SOLICITUDES_V2.lt_bandejaSolicitudes.ListIndex, 11)
    Me.tb_observaciones.Value = BANDEJA_SOLICITUDES_V2.lt_bandejaSolicitudes.list(BANDEJA_SOLICITUDES_V2.lt_bandejaSolicitudes.ListIndex, 12)

'    Se visualizan los botones dependiendo del flujo de proceso y los permisos
     idFuncion = "" & CInt(Left(Sheets(H_GENERALES).Range("C6").Value, 2)) & ""

'    'SE MUESTRAN LOS BOTONES DE ACUERDO AL PERFIL DE USUARIO
      Select Case Me.tb_tipoSolicitud.Value

          Case C_ALTA_EVENTO
                Me.bt_finalizarSolicitud.Visible = True
                Me.bt_rechazarSolicitud.Visible = True
                Me.tb_comentarios.Enabled = True

          Case C_MODIFICACION_EVENTO
            If (idFuncion = C_FUNCION_ADMIN_OW Or idFuncion = C_FUNCION_ADMIN) Then
                bt_finalizarSolicitud.Visible = True
                bt_delegarSolicitud.Visible = True
                bt_delegarSolicitud.Enabled = True
                bt_rechazarSolicitud.Visible = True
                tb_comentarios.Enabled = True
            End If
            If (idFuncion = C_FUNCION_ASISTENTE_TECNICO_GENERICO Or idFuncion = C_FUNCION_ADMIN) Then
                bt_finalizarSolicitud.Visible = True
                bt_rechazarSolicitud.Visible = True
                tb_comentarios.Enabled = True
            End If

        Case C_DESBLOQUEO_EVENTO, C_BAJA_EVENTO
            If (idFuncion = C_FUNCION_RESPONSABLE_UG Or idFuncion = C_FUNCION_RESPONSABLE_UG_WO Or idFuncion = C_FUNCION_RESPONSABLE_UG_PCG) Then
                bt_aprobarSolicitud.Visible = True
                bt_rechazarSolicitud.Visible = True
                tb_comentarios.Enabled = True
            End If
            If (idFuncion = C_FUNCION_ASISTENTE_TECNICO_GENERICO Or idFuncion = C_FUNCION_ADMIN) Then
                bt_finalizarSolicitud.Visible = True
                bt_rechazarSolicitud.Visible = True
                tb_comentarios.Enabled = True
            End If

        Case C_DESBLOQUEO_REPORTE, C_BAJA_REPORTE
            If (idFuncion = C_FUNCION_RESPONSABLE_UG Or idFuncion = C_FUNCION_RESPONSABLE_UG_WO Or idFuncion = C_FUNCION_ADMIN) Then
                bt_aprobarSolicitud.Visible = True
                bt_rechazarSolicitud.Visible = True
                tb_comentarios.Enabled = True
            End If
            If (idFuncion = C_FUNCION_ASISTENTE_TECNICO_GENERICO Or idFuncion = C_FUNCION_ADMIN) Then
                Me.bt_finalizarSolicitud.Visible = True
                bt_rechazarSolicitud.Visible = True
                tb_comentarios.Enabled = True
            End If

    End Select

    Call aplicarTemplate(Me)
    
End Sub


Private Function obtenerEjecutante(ByVal nroSolicitud As Integer, ByVal estadoSolicitud As String) As String

    sqlstring = "SELECT CONCAT(U.APELLIDO, ', ', U.NOMBRE), * FROM SOLICITUDES S JOIN USUARIOS U ON S.EJECUTANTE = U.KEY_USUARIO JOIN ESTADO_SOLICITUD ES ON S.ID_ESTADO_SOLICITUD = ES.ID_ESTADO_SOLICITUD WHERE S.ID_SOLICITUD = " & nroSolicitud & " AND ES.DESCRIPCION = '" & estadoSolicitud & "'"
    
    Set rs = ConsultarTablasBD(sqlstring)
    
    obtenerEjecutante = rs.Fields(0)

End Function

Private Function apruebaResponsableUgEvento(ByVal nroSolicitud As Integer) As Boolean

    sqlstring = "SELECT EO.OW_FECHA_FIN_EVENTO, S.FECHA_SOLICITUD FROM SOLICITUD S JOIN EVENTO E ON S.ID_EVENTO = E.ID_EVENTO JOIN EVENTO_OW EO ON E.OW_ID_EVENTO = EO.OW_ID_EVENTO WHERE S.ID_SOLICITUD = " & nroSolicitud
    
    Set rs = ConsultarTablasBD(sqlstring)
    
    apruebaResponsableUgEvento = IIf(CDate(rs.Fields(1)) > DateAdd("d", 8, rs.Fields(0)), True, False)

End Function

Private Function apruebaResponsableUgReporte(ByVal nroSolicitud As Integer) As Boolean

    sqlstring = "SELECT EO.OW_FECHA_FIN_EVENTO, S.FECHA_SOLICITUD FROM SOLICITUD S JOIN REPORTE R ON S.ID_REPORTE = R.ID_REPORTE JOIN EVENTO_OW EO ON R.OW_ID_EVENTO = EO.OW_ID_EVENTO WHERE S.ID_SOLICITUD = " & nroSolicitud
    
    Set rs = ConsultarTablasBD(sqlstring)
    
    apruebaResponsableUgReporte = IIf(CDate(rs.Fields(1)) > DateAdd("d", 8, rs.Fields(0)), True, False)

End Function

Attribute VB_Name = "FUNCIONES"
'>>> FUNCI|fffd|N API PARA SACAR EL USUARIO DE WINDOWS
Declare PtrSafe Function GetUserName Lib "advapi32.dll" Alias "GetUserNameA" (ByVal lpBuffer As String, nSize As Long) As Long

Const C_MODULO As String = "Funciones"

'>>> STRING DE CONEXI|fffd|N CON LA BASE DE DATOS
Public Function CN_STRING() As String

    'SM 20161123: Se asigna directamente la CNX string debido a que ya est|fffd|n fijos en el Excel y se evita que pierda tiempo haciendo la consulta al Excel
    Select Case Sheets("LINKS").Range("C7").Value
        Case "PROD"
            CN_STRING = "Provider=SQLOLEDB.1;Password=s6=huBuG;Persist Security Info=True;User ID=gespep_all;Initial Catalog=GESPEP;Data Source=SQLLST02"
        Case "DEV"
            CN_STRING = "Provider=SQLOLEDB.1;Password=kabRud5a;Persist Security Info=True;User ID=GESPEP;Initial Catalog=GESPEP;Data Source=ARBA-81M\DEV"
        Case "TEST"
            CN_STRING = "Provider=SQLOLEDB.1;Password=2EfaspuS;Persist Security Info=True;User ID=gespep_all;Initial Catalog=GESPEP;Data Source=CLUSTERSQL-LSTN"
        Case Default
            CN_STRING = "Provider=SQLOLEDB.1;Password=s6=huBuG;Persist Security Info=True;User ID=gespep_all;Initial Catalog=GESPEP;Data Source=SQLLST02"
    End Select

End Function

Public Function ConsultarTablasBD(ByVal queryString As String) As ADODB.Recordset

    'Se dimensiona la conexi|fffd|n
    Dim cn_aux As ADODB.Connection
    'Se dimensiona el recordset
    Dim rs_aux As ADODB.Recordset
    
    'Se captura el error
    On Error GoTo RutinaError
    
    'Se crea el objeto recordset
    Set rs_aux = New ADODB.Recordset
    
    'Se establece una nueva conexi|fffd|n
    Set cn_aux = New ADODB.Connection
    
    With cn_aux
        ConnectStr = CN_STRING
        .Open (ConnectStr)
    End With
    
    With rs_aux
        .CursorLocation = adUseClient
        .Open Source:=queryString, _
        ActiveConnection:=cn_aux, _
        Options:=adCmdText
    End With
    
    Set rs_aux.ActiveConnection = Nothing
    cn_aux.Close
    
    Set ConsultarTablasBD = rs_aux
    
    Set rs_aux = Nothing
    
    Exit Function
    
RutinaError:
    Call GrabarLogError(C_MODULO, "ConsultarTablasBD", Err.Number, Err.Description)
    
End Function

'Ejecuta la query sobre la tabla y devuelve las filas afectadas
Public Function GrabarTablasBD(ByVal queryString As String) As Integer

    Dim cn As ADODB.Connection
    
    Set cn = New ADODB.Connection
    
    cn.Open CN_STRING
    
    cn.Execute queryString, RecordsAffected
    
    GrabarTablasBD = RecordsAffected
    
    cn.Close
    Set cn = Nothing
    
End Function

'>>> RUTINA PARA SACAR EL PERFIL DEL USUARIO EN EL SISTEMA
Public Function PERFIL_USUARIO() As Boolean

    ' Valor por default
    PERFIL_USUARIO = True
    
    ' Capturo el error
    On Error GoTo RutinaError
    
    ' Saco el usuario del sistema
    Dim lpBuff As String * 25
    Dim ret As Long, UserName As String
    ret = GetUserName(lpBuff, 25)
    UsuarioSistema = Left(lpBuff, InStr(lpBuff, Chr(0)) - 1)
    UsuarioActual = UCase(UsuarioSistema)

    ' Dimensiono las variables
    Dim cn As ADODB.Connection ' Dimensiono la conexi|fffd|n
    Dim rs As ADODB.Recordset ' Dimesiono el recordset
    Dim sqlstring As String
    
    'Abro la base de datos
    Set cn = New ADODB.Connection ' Establezco una nueva conexi|fffd|n
    cn.Open CN_STRING() ' Abro la base de datos
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient
    
    'UsuarioActual = "XMXB03" ' INGENIERO DRILLING NQN
    'UsuarioActual = "XGBT01" ' INGENIERO DRILLING GSJ
    'UsuarioActual = "XWTD01"  ' INGENIERO DRILLING NQN | DEV
    'UsuarioActual = "XWTD01"
    'UsuarioActual = "XARL01" ' COMPANYMAN DRILLING GSJ
    'UsuarioActual = "XEDL01" ' COMPANYMAN DRILLING GSJ | DEV
    'UsuarioActual = "XGAS05" ' COMPANYMAN DRILLING NQN
    'UsuarioActual = "XMAJ02" ' INGENIERO WORKOVER NQN
    'UsuarioActual = "XTRR02" ' INGENIERO WORK  OVER GSJ
    'UsuarioActual = "XDXM03" ' INGENIERO WORKOVER GSJ DEV
    'UsuarioActual = "XJXB12" ' ADMIN OW
    'UsuarioActual = "XTGC01" ' RESPONSABLE UG DRILLING GSJ
    'UsuarioActual = "XLRP02" ' RESPONSABLE UG WORKOVER GSJ
    'UsuarioActual = "XJRL02" ' RESPONSABLE UG DRILLING NQN
    'UsuarioActual = "XDXP10" ' RESPONSABLE UG WORKOVER NQN
    'UsuarioActual = "XEGP01" ' Mesa de Ayuda
    'UsuarioActual = "XEVC02" ' Analista | Especialista
    'UsuarioActual = "XJAT01" ' Analista | Especialista
    'UsuarioActual = "XLJM03"
    'UsuarioActual = "XJDR04"
    'UsuarioActual = "XWTD01"
    'UsuarioActual = "XRXP14"
    'UsuarioActual = "XGAG05"
    
    sqlstring = "SELECT U.USUARIO_RED, U.APELLIDO, U.NOMBRE, U.COD_FUNCION, F.DESCRIPCION, STUFF(U.KEY_USUARIO, 3, 0, '.') AS KEY_USUARIO, U.OW_CODIGO_UG, UG.DESCRIPCION AS UGDESC " & _
                "FROM USUARIOS AS U, FUNCIONES AS F, UGESTION AS UG " & _
                "WHERE U.USUARIO_RED ='" & UsuarioActual & "' " & _
                "AND U.BAJA = 0 " & _
                "AND F.CODIGO = U.COD_FUNCION " & _
                "AND U.COD_FUNCION IN (" & C_FUNCION_ADMIN & "," & C_FUNCION_ADMIN_OW & "," & C_FUNCION_CM & "," & C_FUNCION_CM_WO & "," & C_FUNCION_INGENIERO & "," & C_FUNCION_INGENIERO_WO & "," & _
                C_FUNCION_ASISTENTE_TECNICO & "," & C_FUNCION_ASISTENTE_TECNICO_WO & "," & C_FUNCION_RESPONSABLE_UG & "," & C_FUNCION_RESPONSABLE_UG_WO & "," & _
                C_FUNCION_ASISTENTE_TECNICO_GENERICO & "," & C_FUNCION_ANALISTA_ESPECIALISTA & ", " & C_FUNCION_RESPONSABLE_UG_PCG & ") " & _
                "AND UG.OW_CODIGO = U.OW_CODIGO_UG"
                
    rs.Open sqlstring, cn, , , adCmdText
    
    ' Valido si el usuario tiene acceso
    If rs.RecordCount <= 0 Then
        PERFIL_USUARIO = False
        Mensaje = MsgBox("EL USUARIO NO ESTA HABILITADO PARA ACCEDER A LA APLICACI|fffd|N", vbCritical, "ERROR DE PERMISOS")
        rs.Close
        Set rs = Nothing
        cn.Close
        Set cn = Nothing
        Exit Function
    End If
    
    ' Muevo los valores a la hoja
    Sheets(H_GENERALES).Unprotect Password:="SOLearme3-8"
    Sheets(H_GENERALES).Range("c6").Value = rs!key_usuario
    NombreUsuario = UCase(rs!NOMBRE) & " " & UCase(rs!APELLIDO)
    Sheets(H_GENERALES).Range("c7").Value = NombreUsuario
    Sheets(H_GENERALES).Range("c8").Value = UCase(rs!DESCRIPCION)
    Sheets(H_GENERALES).Range("c9").Value = UCase(rs!UGDESC)
    Sheets(H_GENERALES).Range("H9").Value = UCase(rs!OW_CODIGO_UG) 'ESTO SE UTILIZA PARA LOS FILTROS EN LAS SOLICITUDES
    Sheets(H_GENERALES).Protect Password:="SOLearme3-8", DrawingObjects:=True, Contents:=True, Scenarios:=True
    
    ' Cierro el recordset y la conexi|fffd|n
    rs.Close
    Set rs = Nothing
    cn.Close
    Set cn = Nothing
        
    Exit Function

RutinaError:

    PERFIL_USUARIO = False
    
    ' Controlo la conexi|fffd|n y la cierro
    If cn.State = adStateOpen Then
        cn.Close
        Set cn = Nothing
    End If
    ' Controlo el recordset y lo cierro
    If rs.State = adStateOpen Then
        rs.Close
        Set rs = Nothing
    End If

End Function

'>>> RUTINA QUE HACE EL TRANSPOSE TENGA 1 REGISTRO O MAS
Public Function miTranspose(ByVal rs As ADODB.Recordset, ByVal cantColum As Integer) As Variant
    
    ' Dimensiono las variables y colocos los valores constantes
    REGISTROS = rs.RecordCount - 1
    ReDim VECTOR(REGISTROS, 1 To cantColum) As Variant
    ii = 0
    
    ' Recorro el recordset y armo el vector
    Do While Not rs.EOF
        For i = 1 To cantColum
            VECTOR(ii, i) = rs.Fields(i - 1).Value
        Next i
        ii = ii + 1
        rs.MoveNext
    Loop
    
    ' Paso el vector con el resultado
    miTranspose = VECTOR()

End Function

Public Sub GrabarLogError(ByVal modErr As String, ByVal metodoErr As String, ByVal errorNum As String, ByVal descripcionErr As String, Optional ByVal tituloMje As String)

    Dim rutaGuardar As String
    Dim Mensaje As String
    
    If (tituloMje = "") Then
        tituloMje = "ERROR DEL SISTEMA"
    End If
    
    'rutaGuardar = "C:\SISTEMA ENDURANCE\"
    'Call VALIDAR_FOLDER(rutaGuardar)
    rutaGuardar = existeDirectorioApp
    
    'Se abre el archivo. De no existir se crea.
    Open rutaGuardar & "\ErrorLog.txt" For Append As #1
    'Se guarda la l|fffd|nea con la descripci|fffd|n del error
    Print #1, Format(Now, "dd/mm/yyyy h:m:s") & " | MOD/FORM: " & modErr & " | METHOD: " & metodoErr & " | ERROR: " & errorNum & " | DESCRIPTION: " & descripcionErr & vbCrLf
    'Se cierra el archivo
    Close #1
    
    'Se muestra un mensaje de error al Usuario
    Mensaje = "Ha ocurrido un error en el Sistema: " & Error & Chr(13) & Chr(13) & " " & descripcionErr & Chr(13) & Chr(13) & _
                "Por favor, comun|fffd|quese con el Administrador del Sistema!!! "
                
    Info = MsgBox(Mensaje, vbCritical, tituloMje)
    
    'Si hubo un error se CIERRA LA APLICACION
    'SM 20161012: Se quita la variable global y se le asigna lo que est|fffd| en LINKS
    If (Sheets("LINKS").Range("C7").Value = "PROD") Then
        'DESCOMENTAR PARA PRODUCCION
        ThisWorkbook.Close False
    End If

    End

End Sub

'>>> RUTINA PARA VALIDAR LA EXISTENCIA DE LA CARPETA Y SINO LA CREA
Public Function existeDirectorioApp() As String

    Dim directorioApp As String
    Dim existente As String
    
    ' Capturo el error
    On Error GoTo RutinaError
    
'    ' Valido la existencia de la ruta principal
'    RUTA_PPAL = "C:\SISTEMA ENDURANCE"
'    If Not Dir(RUTA_PPAL, vbDirectory) = vbNullString Then
'    Else
'        MkDir RUTA_PPAL
'    End If
'
'    ' Valido la existencia de acuerdo al path pasado
'    If Not Dir(ruta, vbDirectory) = vbNullString Then
'        VALIDAR_FOLDER = True
'    Else
'        ' Creo la carpeta
'        MkDir ruta
'        VALIDAR_FOLDER = False
'    End If
    
    ' Obtengo el usuario del sistema
    Dim lpBuff As String * 25
    Dim ret As Long, UserName As String
    ret = GetUserName(lpBuff, 25)
    UsuarioSistema = Left(lpBuff, InStr(lpBuff, Chr(0)) - 1)
    UsuarioActual = UCase(UsuarioSistema)
    
    ' Construyo ruta de WIN 7
'    directorioApp = "C:\Users\MAU"
'    existente = Dir(directorioApp, vbDirectory) ' Chequeo la existencia del directorio MAU
'    If Trim(existente & vbNullString) = vbNullString Then ' Si MAU no existe, estoy en WIN 10
'        ' Construyo la ruta que se va a usar en WIN 10
'        directorioApp = "C:\Users\" & UsuarioActual & "\Documents\SISTEMA ENDURANCE"
'        ' Chequeo la existencia del directorio
'        existente = Dir(directorioApp, vbDirectory)
'    Else ' Si MAU existe chequeo la existencia de SISTEMA ENDURACE\APLICACION. En caso de no existir lo creo.
'        directorioApp = "C:\Users\MAU\Documents\SISTEMA ENDURANCE"
'        ' Chequeo la existencia del directorio
'        existente = Dir(directorioApp, vbDirectory)
'    End If
    directorioApp = "C:\Users\" & UsuarioActual
    existente = Dir(directorioApp, vbDirectory) ' Chequea la existencia del directorio del USUARIO_RED
    If (Trim(existente & vbNullString) <> vbNullString) Then
        'WINDOWS 10
        'Construyo la ruta que se va a usar en PC NO PROPIA
        directorioApp = directorioApp & "\Documents\SISTEMA ENDURANCE"
        'Chequeo la existencia del directorio
        existente = Dir(directorioApp, vbDirectory)
    Else
        directorioApp = "C:\Users\MAU"
        existente = Dir(directorioApp, vbDirectory) ' Chequeo la existencia del directorio MAU
        
        If Trim(existente & vbNullString) = vbNullString Then ' Si MAU no existe, estoy en WIN 10
            ' Construyo la ruta que se va a usar en WIN 10
            directorioApp = "C:\Users\" & UsuarioActual & "\Documents\SISTEMA ENDURANCE"
            ' Chequeo la existencia del directorio
            existente = Dir(directorioApp, vbDirectory)
        Else ' Si MAU existe chequeo la existencia de SISTEMA ENDURACE\APLICACION. En caso de no existir lo creo.
            directorioApp = "C:\Users\MAU\Documents\SISTEMA ENDURANCE"
            ' Chequeo la existencia del directorio
            existente = Dir(directorioApp, vbDirectory)
        End If
    End If
    
    If Trim(existente & vbNullString) = vbNullString Then ' Si no existe la variable existente esta vac|fffd|a. Debo crear el directorio.
        MkDir (directorioApp) ' Creo el directorio SISTEMA ENDURANCE
        directorioApp = directorioApp & "\APLICACION"
        MkDir (directorioApp) ' Dentro del anterior creo APLICACION
    End If

    existeDirectorioApp = directorioApp
    
    Exit Function
    
RutinaError:
    
    ' Deshabilito la captura de error
    On Error GoTo 0
    
    Call GrabarLogError(C_MODULO, "existeDirectorioApp", Err.Number, Err.Description)

End Function

'>>> FUNCI|fffd|N QUE DEVUELVE LA RUTA Y EL NOMBRE DEL ARCHIVO
Public Function ELEGIR_ARCHIVO() As String

    ' Ruta de inicio para abrir
    RutaInicio = ThisWorkbook.PATH & "\"

    'Rutina para la apertura del cuadro de di|fffd|logo para abrir archivo
    Dim fd As FileDialog
    Set fd = Application.FileDialog(msoFileDialogFilePicker)
    Dim vrtSelectedItem As Variant
    With fd
        .InitialFileName = RutaInicio
        If .Show = -1 Then
            For Each vrtSelectedItem In .SelectedItems
                ruta = vrtSelectedItem
                For i = 1 To Len(ruta)
                     If Mid(vrtSelectedItem, Len(ruta) - i, 1) = "\" Then
                         GoTo continuar
                     Else
                         NombreArchivo = Right(ruta, i + 1)
                     End If
                 Next
continuar:
            Next vrtSelectedItem
                 ruta = Left(ruta, Len(ruta) - Len(NombreArchivo))
                 ' Paso el valor a la funci|fffd|n
                 ELEGIR_ARCHIVO = ruta & NombreArchivo
        Else
             ELEGIR_ARCHIVO = ""
        End If
    End With

    Set fd = Nothing

End Function

'>>> FUNCI|fffd|N PARA VALIDAR Y CAMBIAR LOS CARACTERES NO V|fffd|LIDOS
Public Function ADECUAR_NOMBRE(ByVal CADENA As String) As String

    ' Dimsensiono las variables
    Dim CARAC_NO_VALIDOS As String
    Dim NUEVA_CADENA As String
    CARAC_NO_VALIDOS = "~#%&{}\:;,|fffd|()='<>?/+|*."
    
    'Recorro la cadena de caractteres no v|fffd|lidos
    NUEVA_CADENA = CADENA
    For a = 1 To Len(CARAC_NO_VALIDOS)
        NUEVA_CADENA = Replace(NUEVA_CADENA, Mid(CARAC_NO_VALIDOS, a, 1), "_")
    Next a

    ADECUAR_NOMBRE = NUEVA_CADENA

End Function

'>>> RUTINA PARA VERIFICAR LA VERSI|fffd|N DE UN M|fffd|DULO
Public Function VERIFICAR_VERSION(ByVal NOM_MODULO As String) As Boolean
    ' <<< VALORES QUE EVAL|fffd|A LA FUNCI|fffd|N >>>
    ' HBLT = cuando la versi|fffd|n se encuentra habilitada para uso     DEVUELVE TRUE
    ' CDUC = cuando la versi|fffd|n ha caducado                          DEVUELVE FALSE
    ' NOEX = cuando el m|fffd|dulo no existe dentro del sistema          DEVUELVE FALSE
    ' ERCN = se produjo un error de conexi|fffd|n                        DEVUELVE FALSE

    ' Dimensiono las variables
    Dim cn As ADODB.Connection
    Dim rs As ADODB.Recordset
    Dim CN_STRING_BD As String
    Dim STATUS As String
    Dim Mensaje As String

    On Error GoTo RutinaError

    'Abro la base de datos
    Set cn = New ADODB.Connection  ' Establezco una nueva conexi|fffd|n
    CN_STRING_BD = CN_STRING()
    cn.Open CN_STRING_BD
    
    'Creo el objeto recordset
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient
        
    sqlstring = "SELECT MAX(V.VER) AS VERSION " & _
                "FROM VERSIONES AS V " & _
                "WHERE V.TIPO = '" & NOM_MODULO & "'"
    
    rs.Open sqlstring, cn, , , adCmdText
    
    ' Valido que se haya encontrado el m|fffd|dulo dentro de la versiones
    If IsNull(rs!Version) Then
        STATUS = "NOEX"
    Else
        If rs!Version = Sheets(H_LINKS).Range("C4").Value Then
            STATUS = "HBLT"
        Else
            STATUS = "CDUC"
        End If
    End If
    
    Select Case STATUS
        Case "CDUC"
            Mensaje = MsgBox("LA VERSI|fffd|N DE LA APLICACI|fffd|N NO SE ENCUENTRA HABILITADA", vbExclamation, "ERROR DE VERSION")
            VERIFICAR_VERSION = False
        Case "NOEX"
            Mensaje = MsgBox("LA APLICACI|fffd|N NO SE ENCUENTRA DADA DE ALTA EN EL SISTEMA", vbCritical, "ERROR DE VERSION")
            VERIFICAR_VERSION = False
        Case "HBLT"
            VERIFICAR_VERSION = True
    End Select
    
    ' Desvinculo el recordset de la conecci|fffd|n y al cierro
    rs.Close
    Set rs = Nothing
    cn.Close
    Set cn = Nothing
    
Exit Function

RutinaError:

    Set rs = Nothing
    Set cn = Nothing
    
    Mensaje = MsgBox("NO SE HA PODIDO CONECTAR CON LA BD. COMPRUEBE LA CONEXI|fffd|N DE RED", vbCritical, "ERROR DE CONEXI|fffd|N")
    VERIFICAR_VERSION = False
    
    Call GrabarLogError(C_MODULO, "VERIFICAR_VERSION", Err.Number, Err.Description)

End Function

Public Sub GuardarSolicitud(ByVal observaciones As String, ByVal destinatario As String, ByVal idTipoSolicitud As String, ByVal mensajeTipo As String, ByVal pAsunto As String, ByVal idEvento As Integer, ByVal idReporte As Integer)

    Dim cn As ADODB.Connection
    Dim rs As ADODB.Recordset
    Dim txtObs As String
    Dim intSolicitud As Integer
    Dim solicitante As String
    Dim queryString As String
    
    solicitante = Right("00000" & Trim(Replace(Worksheets("DATOS_GENERALES").Range("C6").Value, ".", "")), 5)
    If (observaciones = "") Then
        observaciones = "NULL"
    Else
        observacionMail = observaciones           ' Variable para cuerpo de MAIL
        observaciones = "'" & observaciones & "'" ' Variable para insertar en BD
    End If
    
    '1|fffd| SE INSERTA EN TABLA SOLICITUD LA SOLICITUD Y SU EVENTO/REPORTE ASOCIADO
    If (idEvento <> 0) Then
        queryString = "INSERT INTO SOLICITUD VALUES('" & solicitante & "', GETDATE(), " & idTipoSolicitud & ", " & idEvento & ", NULL)"
    Else
        queryString = "INSERT INTO SOLICITUD VALUES('" & solicitante & "', GETDATE(), " & idTipoSolicitud & ", NULL," & idReporte & ")"
    End If
    
    If (GrabarTablasBD(queryString) <= 0) Then
        Call MsgBox("Ha ocurrido un error insertando en la tabla SOLICITUD. Comuniquese con el administrador del sistema.", vbCritical, "ERROR INSERTANDO EN BASE DE DATOS")
    End If
   
    'Se busca el |fffd|ltimo ID insertado
    queryString = "SELECT MAX(ID_SOLICITUD) AS ID_SOLICITUD FROM SOLICITUD WHERE SOLICITANTE = '" & Right("00000" & Trim(Replace(Worksheets("DATOS_GENERALES").Range("C6").Value, ".", "")), 5) & "'"
    Set rs = ConsultarTablasBD(queryString)
    If (rs.RecordCount > 0) Then
        rs.MoveFirst

        intSolicitud = rs!ID_SOLICITUD
    Else
        Call MsgBox("Ha ocurrido un error insertando en la tabla SOLICITUD. Comuniquese con el administrador del sistema.", vbCritical, "ERROR INSERTANDO EN BASE DE DATOS")
    End If
    
    ' Inserto en la tabla SOLICITUDES
    queryString = "INSERT INTO SOLICITUDES VALUES(" & intSolicitud & "," & C_ESTADO_SOLICITADA & ",'" & solicitante & "', GETDATE(), " & observaciones & ")"
    If (GrabarTablasBD(queryString) > 0) Then
        Call EnviarMailAccionEvento(intSolicitud, observacionMail, destinatario, mensajeTipo, pAsunto)
        
        Call MsgBox("La solicitud de " & mensajeTipo & " en OpenWells se ha enviado con |fffd|xito.", vbInformation, "SOLICITUD CREADA EXITOSAMENTE")
    Else
        Call MsgBox("Ha ocurrido un error insertando en la tabla SOLICITUDES. Comuniquese con el administrador del sistema.", vbCritical, "ERROR INSERTANDO EN BASE DE DATOS")
    End If
    
End Sub

Public Sub EnviarMailAccionEvento(ByVal intSolicitud As Integer, ByVal observaciones As String, ByVal destinatario As String, ByVal mensajeTipo As String, ByVal pAsunto As String)

    Dim solicitante As String
    Dim ASUNTO As String
    Dim CUERPO As String
    
    solicitante = Worksheets("DATOS_GENERALES").Range("C7").Value
    ASUNTO = "SOLICITUD DE " & pAsunto & " EN OPENWELLS"
    CUERPO = "Estimado/a, " & Chr(13) & Chr(13) & "El usuario " & solicitante & " ha generado la SOLICITUD N|fffd| " & intSolicitud & " mediante la cual solicita se realice la acci|fffd|n de " & mensajeTipo & " en OpenWells."

    If (observaciones <> "") Then
        CUERPO = CUERPO & Chr(13) & Chr(13) & "Seg|fffd|n las siguentes OBSERVACIONES: " & observaciones
    End If
    
    CUERPO = CUERPO & Chr(13) & Chr(13) & "Por favor, ver la solicitud en la Bandeja de Solicitudes."
    
    CUERPO = CUERPO & Chr(13) & Chr(13) & "Saludos cordiales. " & Chr(13) & Chr(13) & "PLANNING & MANAGMENT CONTROL - DRILLING & COMPLETION"
    CUERPO = CUERPO & Chr(13) & "---- PAN AMERICAN ENERGY LLC. Mensaje autom|fffd|tico enviado por el Sistema Endurance - M|fffd|dulo SOCOW" & Chr(153) & " " & Year(Date) & " ----"
    
    'DESTINATARIO = DESTINATARIO & "; smarcato@pan-energy.com"
    Call enviarMail(destinatario, ASUNTO, CUERPO)

End Sub

Function GetFolder() As String
    Dim fldr As FileDialog
    Dim sItem As String
    
    Set fldr = Application.FileDialog(msoFileDialogFolderPicker)
    
    With fldr
        .Title = "Seleccionar Carpeta Destino"
        .AllowMultiSelect = False
        If .Show <> -1 Then GoTo NextCode
        sItem = .SelectedItems(1)
    End With
    
NextCode:
    GetFolder = sItem
    Set fldr = Nothing
End Function

Public Function TienePermiso(ByVal sqlstring As String) As Integer

    Dim cn As ADODB.Connection
    Dim rs As ADODB.Recordset
    
    Set cn = New ADODB.Connection
    Set rs = New ADODB.Recordset
    
    rs.CursorLocation = adUseClient
    cn.Open CN_STRING

    rs.Open sqlstring, cn, , , adCmdText
    
    TienePermiso = rs.RecordCount
   
    rs.Close
    Set rs = Nothing
    cn.Close
    Set cn = Nothing

End Function

Public Function TienePermisoFuncion(ByVal sqlstring As String) As Integer

    Dim cn As ADODB.Connection
    Dim rs As ADODB.Recordset
    
    Set cn = New ADODB.Connection
    Set rs = New ADODB.Recordset
    
    rs.CursorLocation = adUseClient
    cn.Open CN_STRING

    rs.Open sqlstring, cn, , , adCmdText
    
    If (rs.RecordCount > 0) Then
        TienePermisoFuncion = rs!COD_FUNCION
    Else
        TienePermisoFuncion = 0
    End If
   
    rs.Close
    Set rs = Nothing
    cn.Close
    Set cn = Nothing

End Function

Public Function GetMailEjecutorCambioOW(ByVal codFuncion As String, ByVal ugUsuario) As String

    Dim cn As ADODB.Connection
    Dim rs As ADODB.Recordset
    Dim sqlstring As String
    
    Set cn = New ADODB.Connection
    Set rs = New ADODB.Recordset
    
    rs.CursorLocation = adUseClient
    cn.Open CN_STRING
    
    If (codFuncion <> C_FUNCION_ADMIN_OW) Then
        sqlstring = "SELECT EMAIL FROM USUARIOS WHERE COD_FUNCION IN (" & codFuncion & ") AND OW_CODIGO_UG = '" & ugUsuario & "' AND BAJA=0"
    Else
        sqlstring = "SELECT EMAIL FROM USUARIOS WHERE COD_FUNCION IN (" & codFuncion & ") AND BAJA=0"
    End If

    rs.Open sqlstring, cn, , , adCmdText
    
    If (rs.RecordCount > 0) Then
        For i = 0 To rs.RecordCount - 1
            GetMailEjecutorCambioOW = "; " & rs!Email & GetMailEjecutorCambioOW
            
            rs.MoveNext
        Next
    Else
        GetMailEjecutorCambioOW = ""
    End If
   
    rs.Close
    Set rs = Nothing
    cn.Close
    Set cn = Nothing

End Function

Public Function GetMailByKeyUsuario(ByVal ID_SOLICITUD As String) As String

    Dim cn As ADODB.Connection
    Dim rs As ADODB.Recordset
    Dim sqlstring As String
    
    Set cn = New ADODB.Connection
    Set rs = New ADODB.Recordset
    
    rs.CursorLocation = adUseClient
    cn.Open CN_STRING
    
    sqlstring = "SELECT TOP(1) EMAIL FROM USUARIOS JOIN SOLICITUD ON SOLICITANTE = KEY_USUARIO WHERE ID_SOLICITUD = '" & ID_SOLICITUD & "'"

    rs.Open sqlstring, cn, , , adCmdText
    
    GetMailByKeyUsuario = rs!Email
   
    rs.Close
    Set rs = Nothing
    cn.Close
    Set cn = Nothing

End Function

Public Function ActualizarSolicitudes(ByVal idSolicitud As String, ByVal estado_solicitud As String, ByVal observaciones As String) As Integer

    Dim ejecutante As String
    Dim sqlstring As String
    
    ejecutante = Right("00000" & Trim(Replace(Worksheets("DATOS_GENERALES").Range("C6").Value, ".", "")), 5)
    
    sqlstring = "INSERT INTO SOLICITUDES VALUES(" & idSolicitud & "," & estado_solicitud & ",'" & ejecutante & "', GETDATE(), " & observaciones & ")"
    
    ActualizarSolicitudes = GrabarTablasBD(sqlstring)
        
End Function

Public Sub EnviarMailAccion(ByVal idSolicitud As String, ByVal observaciones As String, ByVal destinatario As String, ByVal tipoAccion As String, ByVal tipoSolicitud As String)

    Dim ASUNTO As String
    Dim asuntoAccion As String
    Dim asuntoTipoSolicitud As String
    Dim CUERPO As String
    Dim cuerpoAccion As String
    Dim ejecutor As String
    
    ejecutor = Worksheets("DATOS_GENERALES").Range("C7").Value
    
    Select Case tipoAccion
        Case C_APROBAR
            asuntoAccion = "APROBADA"
            cuerpoAccion = "Aprobado"
            
        Case C_RECHAZAR
            asuntoAccion = "RECHAZADA"
            cuerpoAccion = "Rechazado"
        
        Case C_DELEGAR
            asuntoAccion = "DELEGADA"
            cuerpoAccion = "Delegado"
        
        Case C_FINALIZAR
            asuntoAccion = "FINALIZADA"
            cuerpoAccion = "Finalizado"
    End Select
    
    Select Case tipoSolicitud
        Case C_ALTA_EVENTO
            asuntoTipoSolicitud = "ALTA DE EVENTO"
            
        Case C_MODIFICACION_EVENTO
            asuntoTipoSolicitud = "MODIFICACION DE EVENTO"
            
        Case C_DESBLOQUEO_EVENTO
            asuntoTipoSolicitud = "DESBLOQUEO DE EVENTO"
            
        Case C_BAJA_EVENTO
            asuntoTipoSolicitud = "BAJA DE EVENTO"
        
        Case C_DESBLOQUEO_REPORTE
            asuntoTipoSolicitud = "DESBLOQUEO DE REPORTE"
            
        Case C_BAJA_REPORTE
            asuntoTipoSolicitud = "BAJA DE REPORTE"
        
    End Select
    
    ASUNTO = "SOLICITUD DE " & asuntoTipoSolicitud & " N|fffd| " & idSolicitud & " " & asuntoAccion
    
    CUERPO = "Estimado/a, " & Chr(13) & Chr(13) & "El usuario " & ejecutor & " ha " & cuerpoAccion & " la SOLICITUD N|fffd| " & idSolicitud & ". "
    If (observaciones <> "") Then
        CUERPO = CUERPO & Chr(13) & Chr(13) & "Seg|fffd|n las siguentes OBSERVACIONES: " & observaciones
    End If
    
    CUERPO = CUERPO & Chr(13) & Chr(13) & "Por favor, ver la solicitud en la Bandeja de Solicitudes."
    
    CUERPO = CUERPO & Chr(13) & Chr(13) & "Saludos cordiales. " & Chr(13) & Chr(13) & "PLANNING & MANAGMENT CONTROL - DRILLING & COMPLETION "
    CUERPO = CUERPO & Chr(13) & "---- PAN AMERICAN ENERGY LLC. Mensaje autom|fffd|tico enviado por el Sistema Endurance - M|fffd|dulo SOCOW" & Chr(153) & " " & Year(Date) & " ----"
    
    'DESTINATARIO = DESTINATARIO & "; smarcato@pan-energy.com"
    Call enviarMail(destinatario, ASUNTO, CUERPO)
    
End Sub

Public Function GuardarPozoSolicitudBD(ByVal idPozo As String, ByVal descripcionPozo As String, ByVal idPurposePozo As String, ByVal idObjectivePozo As String, ByVal idPathPozo As String, ByVal idDepthPozo As String, ByVal idLateralLength) As Integer

    Dim queryString As String
    Dim cantRegOk As Integer
    
    queryString = "INSERT SOLICITUD_POZO(OW_COD_POZO, DESCRIPCION, OW_ID_PURPOSE_POZO, OW_ID_OBJECTIVE_POZO, OW_ID_PATH_POZO, " & _
                  "OW_ID_DEPTH_POZO, ID_WELL_LATERAL) " & _
                  "VALUES (" & idPozo & ", " & descripcionPozo & ", " & idPurposePozo & ", " & idObjectivePozo & "," & _
                  idPathPozo & ", " & idDepthPozo & ", " & idLateralLength & ")"
                
    cantRegOk = GrabarTablasBD(queryString)
    
    If (cantRegOk < 1) Then
        GuardarPozoSolicitudBD = 0
        Exit Function
    End If
    
    'Se busca el |fffd|ltimo ID insertado para insertar en el EVENTO
    queryString = "SELECT MAX(ID_POZO) AS ID_POZO FROM SOLICITUD_POZO"
    Set rs = ConsultarTablasBD(queryString)
    If (rs.RecordCount > 0) Then
        rs.MoveFirst
        GuardarPozoSolicitudBD = rs!ID_POZO
    End If
    
    Set rs = Nothing

End Function

Public Function GuardarEventoBD(ByVal idSolicitudPozo As Integer, ByVal idArea As String, ByVal idTipoEvento As String, ByVal idUnidadGestion As String, ByVal idEquipo As String, ByVal fechaInicio As String, ByVal fechaFin As String, ByVal idObjetivoEvento As String, ByVal idMetodoConstructivo As String, ByVal adjustedBudgetV20 As String, ByVal authorizedTMDv20 As String, ByVal authorizedTMDv30 As String, ByVal authorizedTVD As String, ByVal baseline As String, ByVal rigMoveDistance As String, ByVal ewi As String, ByVal alturaMesa As String, ByVal idMainCause As String, ByVal costType As String, ByVal idEventoOW As String) As Integer

    Dim cantRegOk As Integer
    Dim queryString As String
    
    queryString = "INSERT INTO EVENTO(OW_ID_TIPO_EVENTO, OW_COD_UNIDAD_GESTION, OW_ID_EQUIPO, FECHA_INICIO_EVENTO, FECHA_FIN_EVENTO, OW_ID_OBJETIVO_EVENTO, " & _
                  "OW_ID_METODO_CONSTRUCTIVO, ADJUSTED_BUDGET_V20, AUTHORIZED_TMD_V20, AUTHORIZED_TMD_V30, AUTHORIZED_TVD, BASELINE, RIG_MOVE_DISTANCE, EWI, " & _
                  "ID_AREA, OW_ID_EVENTO, ID_POZO, EQUIPO_ALTURA_MESA, ID_MAIN_CAUSE, COST_TYPE) " & _
                  "VALUES(" & idTipoEvento & "," & idUnidadGestion & "," & idEquipo & ", " & _
                  IIf(fechaInicio = "NULL", "NULL", "CONVERT(DATETIME, " & fechaInicio & ", 103)") & ", " & _
                  IIf(fechaFin = "NULL", "NULL", "CONVERT(DATETIME, " & fechaFin & ",103)") & ", " & idObjetivoEvento & ", " & _
                  idMetodoConstructivo & ", " & _
                  IIf(adjustedBudgetV20 = "NULL", "NULL", Replace(adjustedBudgetV20, ",", ".")) & ", " & _
                  IIf(authorizedTMDv20 = "NULL", "NULL", Replace(authorizedTMDv20, ",", ".")) & ", " & _
                  IIf(authorizedTMDv30 = "NULL", "NULL", Replace(authorizedTMDv30, ",", ".")) & ", " & _
                  IIf(authorizedTVD = "NULL", "NULL", Replace(authorizedTVD, ",", ".")) & ", " & _
                  IIf(baseline = "NULL", "NULL", Replace(baseline, ",", ".")) & ", " & _
                  IIf(rigMoveDistance = "NULL", "NULL", Replace(rigMoveDistance, ",", ".")) & ", " & _
                  IIf(ewi = "NULL", "NULL", Replace(ewi, ",", ".")) & ", " & idArea & ", " & idEventoOW & ", " & idSolicitudPozo & ", " & _
                  IIf(alturaMesa = "NULL", "NULL", Replace(alturaMesa, ",", ".")) & "," & idMainCause & ", " & costType & ")"
                  
    cantRegOk = GrabarTablasBD(queryString)
    
    If (cantRegOk < 1) Then
        GuardarEventoBD = 0
        Exit Function
    End If
    
    'Se busca el |fffd|ltimo ID insertado para enviar este por mail y explicar que la solicitud insertada por este usuario es este
    sqlstring = "SELECT MAX(ID_EVENTO) AS ID_EVENTO FROM EVENTO"
    Set rs = ConsultarTablasBD(sqlstring)
    If (rs.RecordCount > 0) Then
        rs.MoveFirst

        GuardarEventoBD = rs!ID_EVENTO
    End If
    
    Set rs = Nothing
    
End Function

Public Function GuardarReporteBD(ByVal OW_ID_TIPO_REPORTE As String, ByVal NUMERO_REPORTE As String, ByVal OW_ID_EVENTO As String, ByVal FECHA_REPORTE As String, ByVal OW_ID_REPORTE As String) As Integer

    Dim cantRegOk As Integer
    Dim sqlstring As String
    
    sqlstring = "INSERT INTO REPORTE VALUES(" & OW_ID_TIPO_REPORTE & "," & NUMERO_REPORTE & "," & OW_ID_EVENTO & ", " & FECHA_REPORTE & ", " & OW_ID_REPORTE & ")"
    cantRegOk = GrabarTablasBD(sqlstring)
    
    If (cantRegOk < 1) Then
        GuardarReporteBD = 0
        Exit Function
    End If
    
    'Se busca el |fffd|ltimo ID insertado para enviar este por mail y explicar que la solicitud insertada por este usuario es este
    sqlstring = "SELECT MAX(ID_REPORTE) AS ID_REPORTE FROM REPORTE"
    Set rs = ConsultarTablasBD(sqlstring)
    If (rs.RecordCount > 0) Then
        rs.MoveFirst

        GuardarReporteBD = rs!ID_REPORTE
    End If
    
    Set rs = Nothing
    
End Function

Public Function GetResponsablesUG(ByVal pTipoEquipo As String, ByVal ugUsuario As String) As String

    Dim funcionAprobador As String
    Dim funcionSolicitante As String
    
    funcionSolicitante = Int(Left(Sheets(H_GENERALES).Range("C6").Value, 2))
    
    If funcionSolicitante = C_FUNCION_ANALISTA_ESPECIALISTA Then
    
        funcionAprobador = C_FUNCION_RESPONSABLE_UG_PCG
        
    Else
    
        Select Case pTipoEquipo
            'DRILLING
            Case C_LAND_RIG, C_JACK_UP
                funcionAprobador = C_FUNCION_RESPONSABLE_UG
                
            'COMPLETION
            Case C_WORKOVER, C_WIRELINE_UNIT, C_SLICKLINE_UNIT, C_UAR, C_PULLING_UNIT, C_COILED_TUBING_UNIT
                funcionAprobador = C_FUNCION_RESPONSABLE_UG_WO
        End Select
        
    End If
    
    GetResponsablesUG = GetMailEjecutorCambioOW(funcionAprobador, ugUsuario)

End Function


Public Function GetAprobadoresDesbloqueos(ByVal pTipoEquipo As String, ByVal pFechaFinEvento As String) As String

    Dim ugUsuario As String
    
    ugUsuario = Sheets(H_GENERALES).Range("H9").Value

    If (Not IsNull(pFechaFin)) And (pFechaFin <> 0) Then
        'Si la FECHA_FIN_EVENTO es mayor a 8 d|fffd|as, entonces debe aprobar el REPONSABLE_UG
        If (Date > DateAdd("d", C_DIAS_APROBACION, CDate(pFechaFinEvento))) Then
            GetAprobadoresDesbloqueos = GetResponsablesUG(pTipoEquipo, ugUsuario)
        Else
            GetAprobadoresDesbloqueos = C_MAIL_ECONAT
        End If
    Else
        GetAprobadoresDesbloqueos = C_MAIL_ECONAT
    End If

End Function

'>>> Funcion de validacion de campos numericos
'    > Valida que el campo no se haya dejado vacio.
'    > Valida que el separador de decimales sea el caracter ","
'    > Valida la cantidad de decimales. Si el parametro se pasa en 0 no valida nada.
'    > Valida valor minimo y maximo.

Public Function validarCampoNumerico(ByVal nombreCampo As String, ByVal valorNumerico As String, ByVal cantidadDecimales As Integer, ByVal valorMinimo As Double, ByVal valorMaximo As Double) As Boolean

    If Trim(valorNumerico & vbNullString) = vbNullString Or Not IsNumeric(valorNumerico) Then
        MsgBox "Debe llenar el campo " & nombreCampo & " con un valor numerico valido.", vbCritical, "ERROR"
        validarCampoNumerico = False
        Exit Function
    End If
    
    If InStr(valorNumerico, ".") > 0 Then
        MsgBox "Debe utilizar el caracter COMA (,) como separador decimal.", vbCritical, "SOLICITAR"
        validarCampoNumerico = False
        Exit Function
    End If
        
    If IsNumeric(valorNumerico) And CDbl(cantAlturaMesa) <= 0 Then
        MsgBox "Se debe ingresar un valor mayor a 0 en el campo ALTURA DE MESA para enviar la Solicitud", vbCritical, "SOLICITAR"
        Exit Function
    End If
        
    If cantAlturaMesa <> "" And InStr(cantAlturaMesa, C_SEP_DECIMALES) > 0 Then
        If Len(Right(cantAlturaMesa, Len(cantAlturaMesa) - InStr(cantAlturaMesa, C_SEP_DECIMALES))) > 2 Then
            MsgBox "Se debe ingresar un valor con 2 decimales en el campo ALTURA DE MESA para enviar la Solicitud", vbCritical, "SOLICITAR"
            Exit Function
        End If
    End If

End Function

Public Function obtenerIDTipoEvento(ByVal descripcionEvento As String) As String

    Dim queryString As String
    Dim rs As ADODB.Recordset
    
    queryString = "SELECT OW_ID_TIPO_EVENTO FROM TIPO_EVENTO WHERE BAJA = 0 AND COD_EVENTO = '" & descripcionEvento & "'"
    
    Set rs = ConsultarTablasBD(queryString)
    
    obtenerIDTipoEvento = rs.Fields(0)
    
End Function

Attribute VB_Name = "GLOBALES"
' NOMBRES GLOBALES DE LAS HOJAS
Public Const H_GENERALES As String = "DATOS_GENERALES"
Public Const H_LINKS As String = "LINKS"
Public Const H_SEGUIMIENTO_SOLICITUDES = "SEGUIMIENTO_SOLICITUDES"

' VARIABLES GLOBALES
Public ENABLE_EVENTS As Boolean
Public DisableEvents As Boolean
Public UsuarioActual As String

' DIAS PARA ENVIAR A APROBACION
Public Const C_DIAS_APROBACION As String = 8

'VARIABLES ESTATICAS AMBIENTES Y SEPARADOR DECIMAL
Public Const C_AMBIENTE_PROD As String = "PROD"
Public Const C_AMBIENTE_TEST As String = "TEST"
Public Const C_AMBIENTE_DEV As String = "DEV"
Public Const C_SEP_DECIMALES As String = ","

'TIPO DE EVENTO
Public Const C_MOB_COD As String = "MOB"
Public C_MOB_ID As String
Public Const C_DON_COD As String = "DON"
Public C_DON_ID As String
Public Const C_RON_COD As String = "RON"
Public C_RON_ID As String
Public Const C_DOF_COD As String = "DOF"
Public C_DOF_ID As String
Public Const C_CON_COD As String = "CON"
Public C_CON_ID As String
Public Const C_WO_COD As String = "WO"
Public C_WO_ID As String
Public Const C_IWO_COD As String = "IWO"
Public C_IWO_ID As String
Public Const C_REP_COD As String = "REP"
Public C_REP_ID As String
Public Const C_STB_COD As String = "STB"
Public C_STB_ID As String
Public Const C_ABN_COD As String = "ABN"
Public C_ABN_ID As String


'FUNCIONES
Public Const C_FUNCION_ADMIN As String = "1"
Public Const C_F_ADMIN As String = "ADMINISTRADOR"
Public Const C_FUNCION_CM As String = "3"
Public Const C_FUNCION_CM_WO As String = "4"
Public Const C_FUNCION_INGENIERO As String = "2"
Public Const C_FUNCION_ASISTENTE_TECNICO As String = "5"
Public Const C_FUNCION_ADMIN_OW As String = "6"
Public Const C_F_ADMIN_OW As String = "ADMINISTRADOR OW"
Public Const C_FUNCION_ASISTENTE_TECNICO_WO As String = "7"
Public Const C_FUNCION_INGENIERO_WO As String = "8"
Public Const C_FUNCION_RESPONSABLE_UG As String = "9"
Public Const C_FUNCION_RESPONSABLE_UG_WO As String = "10"
Public Const C_FUNCION_ASISTENTE_TECNICO_GENERICO As String = "11"
Public Const C_FUNCION_ANALISTA_ESPECIALISTA As String = "12"
Public Const C_FUNCION_RESPONSABLE_UG_PCG As String = "13"



'ESTADO_SOLICITUD
Public Const C_ESTADO_SOLICITADA As String = "1"
Public Const C_SOLICITADA As String = "SOLICITADA"
Public Const C_ESTADO_PENDIENTE As String = "2"
Public Const C_PENDIENTE As String = "PENDIENTE"
Public Const C_ESTADO_FINALIZADA As String = "3"
Public Const C_FINALIZADA As String = "FINALIZADA"
Public Const C_ESTADO_RECHAZADA As String = "4"
Public Const C_RECHAZADA As String = "RECHAZADA"
Public Const C_ESTADO_DELEGADA As String = "5"
Public Const C_DELEGADA As String = "DELEGADA"
Public Const C_ESTADO_APROBADA = "6"
Public Const C_APROBADA = "APROBADA"

'TIPO_SOLICITUD
Public Const C_ID_TIPO_ALTA_EVENTO As String = "1"
Public Const C_ALTA_EVENTO As String = "ALTA EVENTO"
Public Const C_ID_TIPO_MODIFICACION_EVENTO As String = "2"
Public Const C_MODIFICACION_EVENTO As String = "MODIFICACION EVENTO"
Public Const C_ID_TIPO_DESBLOQUEO_EVENTO As String = "3"
Public Const C_DESBLOQUEO_EVENTO As String = "DESBLOQUEO EVENTO"
Public Const C_ID_TIPO_DESBLOQUEO_REPORTE As String = "4"
Public Const C_DESBLOQUEO_REPORTE As String = "DESBLOQUEO REPORTE"
Public Const C_ID_TIPO_BAJA_EVENTO As String = "5"
Public Const C_BAJA_EVENTO As String = "BAJA EVENTO"
Public Const C_ID_TIPO_BAJA_REPORTE As String = "6"
Public Const C_BAJA_REPORTE = "BAJA REPORTE"

'ACCION DE BOTONES
Public Const C_APROBAR As String = "APROBAR"
Public Const C_RECHAZAR As String = "RECHAZAR"
Public Const C_DELEGAR As String = "DELEGAR"
Public Const C_FINALIZAR As String = "FINALIZAR"
   
       
'UG
Public Const C_UG_GSJ As String = "GH1Lg"
Public Const C_UG_NQN As String = "R8OsT"


' MAIL DE ASISTENTES TECNICOS
Public Const C_MAIL_ECONAT As String = "Openwells_MesaAyuda@pan-energy.com"
'Public Const C_MAIL_ECONAT As String = "ascarzello@pan-energy.com"


'TIPO DE EQUIPO PARA EL ENVIO DE MAILS A LOS RESPONSABLES DE ACUERDO A LOS TIPOS DE EQUIPOS
Public Const C_LAND_RIG As String = "LAND RIG"
Public Const C_JACK_UP As String = "JACK - UP"
Public Const C_WORKOVER As String = "WORKOVER"
Public Const C_PULLING_UNIT As String = "PULLING UNIT"
Public Const C_WIRELINE_UNIT As String = "WIRELINE UNIT"
Public Const C_SLICKLINE_UNIT As String = "SLICKLINE UNIT"
Public Const C_COILED_TUBING_UNIT = "COILED TUBING UNIT"
Attribute VB_Name = "Hoja12"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

Attribute VB_Name = "Hoja13"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True





Attribute VB_Name = "Hoja14"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub ejecutarSeguimientoSolicitudes_Click()

    Dim queryString As String
    Dim cn As ADODB.Connection
    Dim rs As ADODB.Recordset
    banderaEventos = True
    
    Set cn = New ADODB.Connection
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient
        
    queryString = "SELECT S.ID_SOLICITUD, UG.DESCRIPCION, CONCAT(U1.APELLIDO, ', ', U1.NOMBRE) SOLICITANTE, TS.DESCRIPCION, S.FECHA_SOLICITUD, " & _
                  "ISNULL(SOL3.DESCRIPCION, ISNULL(SOL2.DESCRIPCION, ISNULL(SOL1.DESCRIPCION, SOL4.DESCRIPCION))) ESTADO_SOLICITUD, " & _
                  "ISNULL(EQ1.DESCRIPCION, ISNULL(EQ2.DESCRIPCION, EQ3.DESCRIPCION)) EQUIPO, ISNULL(SP.DESCRIPCION, P.DESCRIPCION) POZO, " & _
                  "ISNULL(TE1.DESCRIPCION, ISNULL(TE2.DESCRIPCION, TE3.DESCRIPCION)) TIPO_EVENTO, ISNULL(E.FECHA_INICIO_EVENTO, " & _
                  "ISNULL(EO1.OW_FECHA_INICIO_EVENTO, EO2.OW_FECHA_INICIO_EVENTO)) FECHA_INICIO_EVENTO, " & _
                  "ISNULL(E.FECHA_FIN_EVENTO, ISNULL(EO1.OW_FECHA_FIN_EVENTO, EO2.OW_FECHA_FIN_EVENTO)) FECHA_FIN_EVENTO, R.OW_ID_TIPO_REPORTE, " & _
                  "R.FECHA_REPORTE, CASE WHEN SOL1.APELLIDO IS NULL THEN '' ELSE CONCAT(SOL1.APELLIDO, ', ', SOL1.NOMBRE) END APROBADOR, " & _
                  "SOL1.FECHA_EJECUCION FECHA_APROBACION, CASE WHEN SOL2.APELLIDO IS NULL THEN '' ELSE CONCAT(SOL2.APELLIDO, ', ', SOL2.NOMBRE) END ADMIN_OW, " & _
                  "SOL2.FECHA_EJECUCION FECHA_DELEGACION, CASE WHEN SOL3.APELLIDO IS NULL THEN '' ELSE CONCAT(SOL3.APELLIDO, ', ', SOL3.NOMBRE) END EJECUTANTE, " & _
                  "SOL3.FECHA_EJECUCION FECHA_FINALIZACION FROM SOLICITUD S JOIN USUARIOS U1 ON U1.KEY_USUARIO = S.SOLICITANTE JOIN UGESTION UG ON UG.OW_CODIGO = U1.OW_CODIGO_UG " & _
                  "JOIN TIPO_SOLICITUD TS ON TS.ID_TIPO_SOLICITUD = S.ID_TIPO_SOLICITUD LEFT JOIN EVENTO E ON E.ID_EVENTO = S.ID_EVENTO "
   queryString = queryString & "LEFT JOIN EVENTO_OW EO1 ON E.OW_ID_EVENTO = EO1.OW_ID_EVENTO LEFT JOIN EQUIPOS EQ1 ON EQ1.OW_ID_EQUIPO = E.OW_ID_EQUIPO " & _
                 "LEFT JOIN TIPO_EVENTO TE1 ON TE1.OW_ID_TIPO_EVENTO = E.OW_ID_TIPO_EVENTO LEFT JOIN EQUIPOS EQ2 ON EQ2.OW_ID_EQUIPO = EO1.OW_ID_EQUIPO " & _
                 "LEFT JOIN TIPO_EVENTO TE2 ON TE2.OW_ID_TIPO_EVENTO = EO1.OW_ID_TIPO_EVENTO LEFT JOIN SOLICITUD_POZO SP ON SP.ID_POZO = E.ID_POZO " & _
                 "LEFT JOIN REPORTE R ON R.ID_REPORTE = S.ID_REPORTE LEFT JOIN EVENTO_OW EO2 ON EO2.OW_ID_EVENTO = R.OW_ID_EVENTO LEFT JOIN TIPO_EVENTO TE3 ON TE3.OW_ID_TIPO_EVENTO = EO2.OW_ID_TIPO_EVENTO " & _
                 "LEFT JOIN EQUIPOS EQ3 ON EQ3.OW_ID_EQUIPO = EO2.OW_ID_EQUIPO LEFT JOIN POZOS P ON P.OW_COD_POZO = EO2.OW_ID_POZO " & _
                 "LEFT JOIN (SELECT SO1.ID_SOLICITUD, U.APELLIDO, U.NOMBRE, ES.DESCRIPCION, SO1.FECHA_EJECUCION FROM SOLICITUDES SO1 JOIN USUARIOS U ON U.KEY_USUARIO = SO1.EJECUTANTE JOIN ESTADO_SOLICITUD ES ON ES.ID_ESTADO_SOLICITUD = SO1.ID_ESTADO_SOLICITUD WHERE SO1.ID_ESTADO_SOLICITUD = 6) SOL1 ON SOL1.ID_SOLICITUD = S.ID_SOLICITUD " & _
                 "LEFT JOIN (SELECT SO2.ID_SOLICITUD, U.APELLIDO, U.NOMBRE, ES.DESCRIPCION, SO2.FECHA_EJECUCION FROM SOLICITUDES SO2 JOIN USUARIOS U ON U.KEY_USUARIO = SO2.EJECUTANTE JOIN ESTADO_SOLICITUD ES ON ES.ID_ESTADO_SOLICITUD = SO2.ID_ESTADO_SOLICITUD WHERE SO2.ID_ESTADO_SOLICITUD = 5) SOL2 ON SOL2.ID_SOLICITUD = S.ID_SOLICITUD " & _
                 "LEFT JOIN (SELECT SO3.ID_SOLICITUD, U.APELLIDO, U.NOMBRE, ES.DESCRIPCION, SO3.FECHA_EJECUCION FROM SOLICITUDES SO3 JOIN USUARIOS U ON U.KEY_USUARIO = SO3.EJECUTANTE JOIN ESTADO_SOLICITUD ES ON ES.ID_ESTADO_SOLICITUD = SO3.ID_ESTADO_SOLICITUD WHERE SO3.ID_ESTADO_SOLICITUD IN (3,4)) SOL3 ON SOL3.ID_SOLICITUD = S.ID_SOLICITUD " & _
                 "LEFT JOIN (SELECT SO4.ID_SOLICITUD, U.APELLIDO, U.NOMBRE, ES.DESCRIPCION, SO4.FECHA_EJECUCION FROM SOLICITUDES SO4 JOIN USUARIOS U ON U.KEY_USUARIO = SO4.EJECUTANTE JOIN ESTADO_SOLICITUD ES ON ES.ID_ESTADO_SOLICITUD = SO4.ID_ESTADO_SOLICITUD WHERE SO4.ID_ESTADO_SOLICITUD = 1) SOL4 ON SOL4.ID_SOLICITUD = S.ID_SOLICITUD " & _
                 "ORDER BY S.ID_SOLICITUD DESC"
    
    cn.Open CN_STRING()
    rs.Open queryString, cn, , , adCmdText

    If rs.RecordCount > 0 Then
       rs.MoveFirst
       Worksheets("SEGUIMIENTO_SOLICITUDES").Unprotect Password:="SOLearme3-8"
       Worksheets("SEGUIMIENTO_SOLICITUDES").Range("B9:T" & rs.RecordCount + 8).Value = miTranspose(rs, rs.Fields.Count)
    Else
        Call MsgBox("No se han encontrado resultados para la b|fffd|squeda realizada", vbExclamation, "Advertencia")
    End If
    
    Worksheets("SEGUIMIENTO_SOLICITUDES").Range("B8:T" & rs.RecordCount + 8).Select
    If Worksheets("SEGUIMIENTO_SOLICITUDES").AutoFilterMode Then
        Selection.AutoFilter
    End If
    Selection.AutoFilter
    Worksheets("SEGUIMIENTO_SOLICITUDES").Range("B9").Select
    Worksheets("SEGUIMIENTO_SOLICITUDES").Protect Password:="SOLearme3-8", DrawingObjects:=True, Scenarios:=True, AllowFiltering:=True
    
    banderaEventos = False
        
    rs.Close
    Set rs = Nothing
    cn.Close
    Set cn = Nothing


End Sub

Private Sub exportarExcel_Click()

    Application.ScreenUpdating = False
    banderaEventos = True
    Dim nuevoLibro As Workbook
    Set nuevoLibro = Workbooks.Add
    nuevoLibro.Worksheets(1).Name = "SOLICITUDES"
   
    ThisWorkbook.Sheets("SEGUIMIENTO_SOLICITUDES").Range("B8:T8").Copy
    nuevoLibro.Worksheets(1).Range("A1").PasteSpecial
    
    Dim i As Integer
    
    i = 0
    j = 2
    Do While ThisWorkbook.Sheets("SEGUIMIENTO_SOLICITUDES").Range("B" & 9 + i).Value <> ""
        If Not ThisWorkbook.Sheets("SEGUIMIENTO_SOLICITUDES").Range("B" & 9 + i).EntireRow.Hidden Then
            ThisWorkbook.Sheets("SEGUIMIENTO_SOLICITUDES").Range("B" & 9 + i & ":T" & 9 + i).Copy
            nuevoLibro.Worksheets(1).Range("A" & j).PasteSpecial
            j = j + 1
        End If
        i = i + 1
    Loop

    Application.ScreenUpdating = True
    banderaEventos = False

End Sub

Private Sub limpiarBusqueda_Click()
    
    banderaEventos = True
    Worksheets("SEGUIMIENTO_SOLICITUDES").Unprotect Password:="SOLearme3-8"
    Worksheets("SEGUIMIENTO_SOLICITUDES").Range("B9:T20000").ClearContents
    Worksheets("SEGUIMIENTO_SOLICITUDES").Range("B9").Select
    Worksheets("SEGUIMIENTO_SOLICITUDES").Protect Password:="SOLearme3-8", DrawingObjects:=True, Scenarios:=True, AllowFiltering:=True
    banderaEventos = False

End Sub


Private Sub Worksheet_SelectionChange(ByVal Target As Range)
    
    Dim queryString As String
    Dim cn As ADODB.Connection
    Dim rs As ADODB.Recordset
    Dim idSolicitud As Integer

    If banderaEventos Then
        Exit Sub
    End If
    
    If Target.Column <> 2 Then
        Exit Sub
    End If
    
    If Trim(Target.Value) & vbNullString = vbNullString Then
        Exit Sub
    End If
    
    idSolicitud = Trim(Target.Value)
    
    Set cn = New ADODB.Connection
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient
    
    queryString = "SELECT ID_TIPO_SOLICITUD, ISNULL(ID_EVENTO, ID_REPORTE) FROM SOLICITUD WHERE ID_SOLICITUD = " & idSolicitud
    
    cn.Open CN_STRING()
    rs.Open queryString, cn, , , adCmdText

    If rs.RecordCount > 0 Then
       rs.MoveFirst
       
       Select Case rs.Fields(0)
            Case C_ID_TIPO_ALTA_EVENTO
                Set FORMULARIO = New ALTA_EVENTO_V2
                FORMULARIO.inicializarFormulario (idSolicitud)
                FORMULARIO.Show

            Case C_ID_TIPO_MODIFICACION_EVENTO
                Set FORMULARIO = New MODIFICACION_EVENTO
                FORMULARIO.inicializarFormulario (idSolicitud)
                FORMULARIO.Show
            
            Case C_ID_TIPO_DESBLOQUEO_EVENTO
                Set FORMULARIO = New DESBLOQUEO_EVENTO
                FORMULARIO.inicializarFormulario idSolicitud, "DESBLOQUEO DE EVENTO"
                FORMULARIO.Show

            Case C_ID_TIPO_DESBLOQUEO_REPORTE
                Set FORMULARIO = New DESBLOQUEO_REPORTE
                FORMULARIO.inicializarFormulario idSolicitud, "DESBLOQUEO DE REPORTE"
                FORMULARIO.Show

            Case C_ID_TIPO_BAJA_EVENTO
                Set FORMULARIO = New DESBLOQUEO_EVENTO
                FORMULARIO.inicializarFormulario idSolicitud, "BAJA DE EVENTO"
                FORMULARIO.Show

            Case C_ID_TIPO_BAJA_REPORTE
                Set FORMULARIO = New DESBLOQUEO_REPORTE
                FORMULARIO.inicializarFormulario idSolicitud, "BAJA DE REPORTE"
                FORMULARIO.Show
        
        End Select
       
    Else
        Call MsgBox("Error durante la busqueda. Vuelva a intentar.", vbExclamation, "Error")
    End If
    
    rs.Close
    Set rs = Nothing
    cn.Close
    Set cn = Nothing


End Sub
Attribute VB_Name = "MODIFICACION_EVENTO"
Attribute VB_Base = "0{D3801840-2BC5-4CCE-BF55-4C39D20784BB}{51077EA4-9012-4009-AC7B-BD160D391D3F}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Dim hayCambios As Boolean
Dim solicitud As Integer

Private Sub BT_AYUDA_Click()

    FORM_AYUDA.Show
    
End Sub

Private Sub BT_BUSCAR_EVENTO_Click()

    Dim idEventoOW As String
    hayCambios = False
    
        
    If Me.CB_FECHA_INICIO.ListIndex < 0 Then
        MsgBox "Debe ingresar una FECHA DE INICIO DE EVENTO.", vbOKOnly, "Ingreso de DATOS"
        Exit Sub
    End If
    
    idEventoOW = Me.CB_FECHA_INICIO.list(Me.CB_FECHA_INICIO.ListIndex, 0)

    
    Me.LB_OW_ID_EVENTO = idEventoOW

    sqlstring = "SELECT RTRIM(CONVERT(CHAR, OW_FECHA_INICIO_EVENTO, 103)) FECHA_INICIO, EO.OW_ID_TIPO_EVENTO, CONCAT(TE.COD_EVENTO, ' - ', TE.DESCRIPCION) TIPO_EVENTO, " & _
                "EO.OW_ID_OBJETIVO_EVENTO, CONCAT(OE.DESCRIPCION, ' - ', OE.OW_DESC_SPANISH) OBJETIVO_EVENTO, EO.OW_ID_METODO_CONSTRUCTIVO, MC.DESCRIPCION, " & _
                "EO.OW_ADJUSTED_BUDGET_V20, EO.OW_AUTHORIZED_TMD_V20, EO.OW_AUTHORIZED_TMD_V30, EO.OW_AUTHORIZED_TVD, EO.OW_BASELINE, EO.OW_RIG_MOVE_DISTANCE, EO.OW_EWI, " & _
                "PO.OW_ID_PURPOSE_POZO, CONCAT(PP.DESCRIPCION, ' - ', PP.OW_DESC_SPANISH), PO.OW_ID_OBJECTIVE_POZO, CONCAT(OP.OW_ID_OBJECTIVE_POZO, ' - ',OP.DESCRIPCION), PO.OW_ID_PATH_POZO, CONCAT(PAP.OW_ID_PATH_POZO, ' - ',PAP.DESCRIPCION), PO.OW_ID_DEPTH_POZO, CONCAT(DP.OW_ID_DEPTH_POZO, ' - ', DP.DESCRIPCION), " & _
                "EO.OW_ID_EQUIPO , EQ.DESCRIPCION, EQ.ALTURA_MESA, EO.OW_ID_AREA, AO.OW_NAME, EO.COST_TYPE, MAC.KEY_ID, CONCAT(MAC.DESCRIPTION , ' - ', MAC.DESC_SPANISH), WL.KEY_ID, CONCAT(WL.TYPE, ' - ', WL.RANGE), " & _
                " ISNULL(RTRIM(CONVERT(CHAR, OW_FECHA_FIN_EVENTO, 103)), '') FECHA_FIN FROM EVENTO_OW EO " & _
                "LEFT JOIN TIPO_EVENTO TE ON TE.OW_ID_TIPO_EVENTO = EO.OW_ID_TIPO_EVENTO " & _
                "LEFT JOIN OBJETIVO_EVENTO OE ON OE.OW_ID_OBJETIVO_EVENTO = EO.OW_ID_OBJETIVO_EVENTO " & _
                "LEFT JOIN METODO_CONSTRUCTIVO MC ON MC.OW_ID_METODO_CONSTRUCTIVO = EO.OW_ID_METODO_CONSTRUCTIVO AND MC.OW_ID_TIPO_EVENTO = EO.OW_ID_TIPO_EVENTO " & _
                "LEFT JOIN POZOS PO ON PO.UWI = EO.OW_ID_POZO " & _
                "LEFT JOIN PURPOSE_POZO PP ON PP.OW_ID_PURPOSE_POZO = PO.OW_ID_PURPOSE_POZO " & _
                "LEFT JOIN OBJECTIVE_POZO OP ON OP.OW_ID_OBJECTIVE_POZO = PO.OW_ID_OBJECTIVE_POZO " & _
                "LEFT JOIN PATH_POZO PAP ON PAP.OW_ID_PATH_POZO = PO.OW_ID_PATH_POZO " & _
                "LEFT JOIN DEPTH_POZO DP ON DP.OW_ID_DEPTH_POZO = PO.OW_ID_DEPTH_POZO " & _
                "LEFT JOIN EQUIPOS EQ ON EQ.OW_ID_EQUIPO = EO.OW_ID_EQUIPO " & _
                "LEFT JOIN AREAS_OW AO ON AO.OW_KEY_ID = EO.OW_ID_AREA " & _
                "LEFT JOIN MAIN_CAUSE MAC ON MAC.KEY_ID = EO.ID_MAIN_CAUSE " & _
                "LEFT JOIN WELL_LATERAL WL ON WL.KEY_ID = PO.ID_WELL_LATERAL " & _
                "WHERE EO.OW_ID_EVENTO = '" & Trim(idEventoOW) & "'"
                
    Set rs = New ADODB.Recordset
    
    Set rs = ConsultarTablasBD(sqlstring)
    
    Me.CB_POZO.Enabled = False
    Me.CB_TIPO_EVENTO.Enabled = False
    Me.CB_FECHA_INICIO.Enabled = False
    Me.BT_BUSCAR_EVENTO.Enabled = False
    Me.BT_SOLICITAR.Enabled = True
    
    Me.TB_FECHA_INICIO.Value = rs.Fields(0)
    Me.tb_fechaFin.Value = rs.Fields(32)
    
    With Me.CB_TIPO_DE_EVENTO
        .AddItem
        .Column(0, 0) = rs.Fields(1)
        .Column(1, 0) = rs.Fields(2)
        .ListIndex = 0
    End With
    
    With Me.CB_OBJETIVO
        .AddItem
        .Column(0, 0) = IIf(IsNull(rs.Fields(3)), "", rs.Fields(3))
        .Column(1, 0) = IIf(IsNull(rs.Fields(4)), "", rs.Fields(4))
        .ListIndex = 0
    End With
    
    With Me.cb_mainCause
        .AddItem
        .Column(0, 0) = IIf(IsNull(rs.Fields(28)), "", rs.Fields(28))
        .Column(1, 0) = IIf(IsNull(rs.Fields(29)), "", rs.Fields(29))
        .ListIndex = 0
    End With
        
    
    With Me.CB_METODO_CONSTRUCTIVO
        .AddItem
        .Column(0, 0) = IIf(IsNull(rs.Fields(5)), "", rs.Fields(5))
        .Column(1, 0) = IIf(IsNull(rs.Fields(6)), "", rs.Fields(6))
        .ListIndex = 0
    End With
    
    Me.TB_ADJUSTED_BUDGET.Value = IIf(IsNull(rs.Fields(7)), "", rs.Fields(7))
    If rs.Fields(27) = "CAPITAL" Then
        Me.op_capex.Value = True
    Else
        Me.op_opex.Value = True
    End If
    Me.TB_AUTHORIZED_TMD_V20.Value = IIf(IsNull(rs.Fields(8)), "", rs.Fields(8))
    Me.TB_AUTHORIZED_TMD_V30.Value = IIf(IsNull(rs.Fields(9)), "", rs.Fields(9))
    Me.TB_AUTHORIZED_TVD.Value = IIf(IsNull(rs.Fields(10)), "", rs.Fields(10))
    Me.TB_BASELINE.Value = IIf(IsNull(rs.Fields(11)), "", rs.Fields(11))
    Me.TB_RIG_MOVE_DISTANCE.Value = IIf(IsNull(rs.Fields(12)), "", rs.Fields(12))
    Me.TB_EWI.Value = IIf(IsNull(rs.Fields(13)), "", rs.Fields(13))
    
    With Me.CB_PURPOSE_POZO
        .AddItem
        .Column(0, 0) = IIf(IsNull(rs.Fields(14)), "", rs.Fields(14))
        .Column(1, 0) = IIf(IsNull(rs.Fields(15)), "", rs.Fields(15))
        .ListIndex = 0
    End With
        
    With Me.CB_OBJECTIVE_POZO
        .AddItem
        .Column(0, 0) = IIf(IsNull(rs.Fields(16)), "", rs.Fields(16))
        .Column(1, 0) = IIf(IsNull(rs.Fields(17)), "", rs.Fields(17))
        .ListIndex = 0
    End With
    
    With Me.CB_PATH_POZO
        .AddItem
        .Column(0, 0) = IIf(IsNull(rs.Fields(18)), "", rs.Fields(18))
        .Column(1, 0) = IIf(IsNull(rs.Fields(19)), "", rs.Fields(19))
        .ListIndex = 0
    End With
    
    With Me.CB_DEPTH_POZO
        .AddItem
        .Column(0, 0) = IIf(IsNull(rs.Fields(20)), "", rs.Fields(20))
        .Column(1, 0) = IIf(IsNull(rs.Fields(21)), "", rs.Fields(21))
        .ListIndex = 0
    End With
    
    With Me.cb_lateralLength
        .AddItem
        .Column(0, 0) = IIf(IsNull(rs.Fields(30)), "", rs.Fields(30))
        .Column(1, 0) = IIf(IsNull(rs.Fields(31)), "", rs.Fields(31))
        .ListIndex = 0
    End With
    
    With Me.CB_EQUIPO
        .AddItem
        .Column(0, 0) = IIf(IsNull(rs.Fields(22)), "", rs.Fields(22))
        .Column(1, 0) = IIf(IsNull(rs.Fields(23)), "", rs.Fields(23))
        .ListIndex = 0
    End With
    
    Me.TB_ALTURA_NUEVA.Value = IIf(IsNull(rs.Fields(24)), 0, rs.Fields(24))
        
    With Me.CB_AREA
        .AddItem
        .Column(0, 0) = IIf(IsNull(rs.Fields(25)), "", rs.Fields(25))
        .Column(1, 0) = IIf(IsNull(rs.Fields(26)), "", rs.Fields(26))
        .ListIndex = 0
    End With
    
    Me.tb_observaciones.Enabled = True
    
    ' Habilito botones de modificacion
    Me.bt_modificarLateralLength.Enabled = True
    Me.bt_modificarMainCause.Enabled = True
    Me.bt_modificarFechaFin.Enabled = True
    Me.bt_modificarCostType.Enabled = True
    Me.BT_MODIFICAR_ADJ_BUDGET.Enabled = True
    Me.BT_MODIFICAR_ALTURA_MESA.Enabled = True
    Me.BT_MODIFICAR_AREA.Enabled = True
    Me.BT_MODIFICAR_AUTH_TMD_V20.Enabled = True
    Me.BT_MODIFICAR_AUTH_TMD_V30.Enabled = True
    Me.BT_MODIFICAR_AUTH_TVD.Enabled = True
    Me.BT_MODIFICAR_BASELINE.Enabled = True
    Me.BT_MODIFICAR_DEPTH_POZO.Enabled = True
    Me.BT_MODIFICAR_EQUIPO.Enabled = True
    Me.BT_MODIFICAR_EWI.Enabled = True
    Me.BT_MODIFICAR_FECHA.Enabled = True
    Me.BT_MODIFICAR_METODO_CONSTRUCTIVO.Enabled = True
    Me.BT_MODIFICAR_OBJECTIVE_POZO.Enabled = True
    Me.BT_MODIFICAR_OBJETIVO.Enabled = True
    Me.BT_MODIFICAR_PATH_POZO.Enabled = True
    Me.BT_MODIFICAR_PURPOSE_POZO.Enabled = True
    Me.BT_MODIFICAR_RMD.Enabled = True
    Me.BT_MODIFICAR_TIPO_EVENTO.Enabled = True
    
End Sub

Private Sub bt_cancelar_Click()

    Dim opcion As Integer
    
    opcion = MsgBox("|fffd|Esta seguro que desea CANCELAR la busqueda actual?", vbOKCancel, "AVISO")
    
    If opcion = vbCancel Then
        Exit Sub
    End If
           
    Call limpiarCampos
    
    Call inicializarFormulario(0)

End Sub

Private Sub BT_MODIFICAR_ADJ_BUDGET_Click()

    hayCambios = True
    Me.LA_ADJ_BUDGET_ANT.Caption = Me.TB_ADJUSTED_BUDGET.Value
    Me.TB_ADJUSTED_BUDGET.Value = ""
    Me.TB_ADJUSTED_BUDGET.Enabled = True
    Me.BT_MODIFICAR_ADJ_BUDGET.Enabled = False

End Sub

Private Sub BT_MODIFICAR_ALTURA_MESA_Click()

    hayCambios = True
    Me.LA_ALTURA_MESA_ANT.Caption = Me.TB_ALTURA_NUEVA.Value
    Me.TB_ALTURA_NUEVA.Value = ""
    Me.TB_ALTURA_NUEVA.Enabled = True
    Me.BT_MODIFICAR_ALTURA_MESA.Enabled = False

End Sub

Private Sub BT_MODIFICAR_AREA_Click()

    hayCambios = True
    Dim sqlstring As String
    Dim tipoEvento
    
    If Me.CB_TIPO_DE_EVENTO.ListIndex < 0 Then
        tipoEvento = "%%"
    Else
        tipoEvento = Me.CB_TIPO_DE_EVENTO.list(Me.CB_TIPO_DE_EVENTO.ListIndex, 0)
    End If
    
    usuUG = Me.CB_UGESTION.list(Me.CB_UGESTION.ListIndex, 0)

    sqlstring = "SELECT OW_KEY_ID, OW_NAME FROM AREAS_OW " & _
                    "WHERE BAJA = 0 AND OW_CODIGO_UG = '" & usuUG & "' " & _
                    "AND OW_KEY_ID <> '" & Me.CB_AREA.list(0, 0) & "' " & _
                    "AND OW_ID_TIPO_EVENTO LIKE '" & tipoEvento & "' " & _
                    "ORDER BY OW_NAME ASC"
    
    Me.LA_AREA_ANT.Caption = Me.CB_AREA.list(0, 1)
    
    Me.CB_AREA.Enabled = True
    Me.CB_AREA.Clear
    
    Call agregarAlComboBox(Me.CB_AREA, sqlstring)
    
    Me.BT_MODIFICAR_AREA.Enabled = False

End Sub

Private Sub BT_MODIFICAR_AUTH_TMD_V20_Click()

    hayCambios = True
    Me.LA_AUTH_TMD_V20_ANT.Caption = Me.TB_AUTHORIZED_TMD_V20.Value
    Me.TB_AUTHORIZED_TMD_V20.Value = ""
    Me.TB_AUTHORIZED_TMD_V20.Enabled = True
    Me.BT_MODIFICAR_AUTH_TMD_V20.Enabled = False

End Sub

Private Sub BT_MODIFICAR_AUTH_TMD_V30_Click()

    hayCambios = True
    Me.LA_AUTH_TMD_V30_ANT.Caption = Me.TB_AUTHORIZED_TMD_V30.Value
    Me.TB_AUTHORIZED_TMD_V30.Value = ""
    Me.TB_AUTHORIZED_TMD_V30.Enabled = True
    Me.BT_MODIFICAR_AUTH_TMD_V30.Enabled = False

End Sub

Private Sub BT_MODIFICAR_AUTH_TVD_Click()

    hayCambios = True
    Me.LA_AUTH_TVD_ANT.Caption = Me.TB_AUTHORIZED_TVD.Value
    Me.TB_AUTHORIZED_TVD.Value = ""
    Me.TB_AUTHORIZED_TVD.Enabled = True
    Me.BT_MODIFICAR_AUTH_TVD.Enabled = False

End Sub

Private Sub BT_MODIFICAR_BASELINE_Click()
    
    hayCambios = True
    Me.LA_BASELINE_ANT.Caption = Me.TB_BASELINE.Value
    Me.TB_BASELINE.Value = ""
    Me.TB_BASELINE.Enabled = True
    Me.BT_MODIFICAR_BASELINE.Enabled = False

End Sub

Private Sub BT_MODIFICAR_DEPTH_POZO_Click()

    hayCambios = True
    Dim sqlstring As String
    
    sqlstring = "SELECT OW_ID_DEPTH_POZO, CONCAT(OW_ID_DEPTH_POZO, ' - ', DESCRIPCION) FROM DEPTH_POZO WHERE OW_ID_DEPTH_POZO <> '" & Me.CB_DEPTH_POZO.list(0, 0) & "'"
    
    Me.LA_DEPTH_POZO_ANT.Caption = Me.CB_DEPTH_POZO.list(0, 1)
    
    Me.CB_DEPTH_POZO.Enabled = True
    Me.CB_DEPTH_POZO.Clear
    
    Call agregarAlComboBox(Me.CB_DEPTH_POZO, sqlstring)
    
    Me.BT_MODIFICAR_DEPTH_POZO.Enabled = False

End Sub

Private Sub BT_MODIFICAR_EQUIPO_Click()

    hayCambios = True
    Dim sqlstring
    Dim tipoEvento
    
    If Me.CB_TIPO_DE_EVENTO.ListIndex < 0 Then
        tipoEvento = "%%"
    Else
        tipoEvento = Me.CB_TIPO_DE_EVENTO.list(Me.CB_TIPO_DE_EVENTO.ListIndex, 0)
    End If
    
    sqlstring = "SELECT OW_ID_EQUIPO, E.DESCRIPCION, TE.DESCRIPCION " & _
                "FROM EQUIPOS E " & _
                "INNER JOIN TIPO_EQUIPO TE ON TE.OW_ID_TIPO_EQUIPO = E.OW_ID_TIPO_EQUIPO " & _
                "INNER JOIN TIPO_EQUIPO_TIPO_EVENTO TETE ON TETE.OW_ID_TIPO_EQUIPO = TE.OW_ID_TIPO_EQUIPO " & _
                "WHERE E.BAJA = 0 " & _
                "AND OW_ID_EQUIPO <> '" & Me.CB_EQUIPO.list(0, 0) & "' " & _
                "AND TETE.OW_ID_TIPO_EVENTO LIKE '" & tipoEvento & "' " & _
                "ORDER BY E.DESCRIPCION ASC"
                
    Me.LA_EQUIPO_ANT.Caption = Me.CB_EQUIPO.list(0, 1)
    
    Me.CB_EQUIPO.Enabled = True
    Me.CB_EQUIPO.Clear
    
    Call agregarAlComboBox(Me.CB_EQUIPO, sqlstring)
    
    Me.BT_MODIFICAR_EQUIPO.Enabled = False

End Sub

Private Sub BT_MODIFICAR_EWI_Click()

    hayCambios = True
    Me.LA_EWI_ANT.Caption = Me.TB_EWI.Value
    Me.TB_EWI.Value = ""
    Me.TB_EWI.Enabled = True
    Me.BT_MODIFICAR_EWI.Enabled = False

End Sub

Private Sub BT_MODIFICAR_FECHA_Click()

    hayCambios = True
    Me.LA_FECHA_INICIO_ANT.Caption = Me.TB_FECHA_INICIO.Value
    Me.TB_FECHA_INICIO.Value = ""
    Me.TB_FECHA_INICIO.Enabled = True
    Me.BT_MODIFICAR_FECHA.Enabled = False

End Sub

Private Sub BT_MODIFICAR_METODO_CONSTRUCTIVO_Click()
    
    hayCambios = True
    Dim sqlstring As String
        Dim tipoEvento
    
    If Me.CB_TIPO_DE_EVENTO.ListIndex < 0 Then
        tipoEvento = "%%"
    Else
        tipoEvento = Me.CB_TIPO_DE_EVENTO.list(Me.CB_TIPO_DE_EVENTO.ListIndex, 0)
    End If
    
    sqlstring = "SELECT OW_ID_METODO_CONSTRUCTIVO, DESCRIPCION FROM METODO_CONSTRUCTIVO " & _
                "WHERE BAJA = 0 " & _
                "AND OW_ID_METODO_CONSTRUCTIVO <> '" & Me.CB_METODO_CONSTRUCTIVO.list(0, 0) & "' " & _
                "AND OW_ID_TIPO_EVENTO LIKE '" & tipoEvento & "' ORDER BY DESCRIPCION ASC"
        
    Me.LA_METODO_CONSTRUCTIVO_ANT.Caption = Me.CB_METODO_CONSTRUCTIVO.list(0, 1)
    Me.CB_METODO_CONSTRUCTIVO.Enabled = True
    Me.CB_METODO_CONSTRUCTIVO.Clear
    
    Call agregarAlComboBox(Me.CB_METODO_CONSTRUCTIVO, sqlstring)
    
    Me.BT_MODIFICAR_METODO_CONSTRUCTIVO.Enabled = False

End Sub

Private Sub BT_MODIFICAR_OBJECTIVE_POZO_Click()
    
    hayCambios = True
    Dim sqlstring As String
    
    sqlstring = "SELECT OW_ID_OBJECTIVE_POZO, CONCAT(OW_ID_OBJECTIVE_POZO, ' - ', DESCRIPCION) FROM OBJECTIVE_POZO WHERE OW_ID_OBJECTIVE_POZO <> '" & Me.CB_OBJECTIVE_POZO.list(0, 0) & "'"
    
    Me.LA_OBJECTIVE_POZO_ANT.Caption = Me.CB_OBJECTIVE_POZO.list(0, 1)
    
    Me.CB_OBJECTIVE_POZO.Enabled = True
    Me.CB_OBJECTIVE_POZO.Clear
    
    Call agregarAlComboBox(Me.CB_OBJECTIVE_POZO, sqlstring)
    
    Me.BT_MODIFICAR_OBJECTIVE_POZO.Enabled = False


End Sub

Private Sub BT_MODIFICAR_OBJETIVO_Click()

    hayCambios = True
    Dim sqlstring
    Dim tipoEvento
    
    If Me.CB_TIPO_DE_EVENTO.ListIndex < 0 Then
        tipoEvento = "%%"
    Else
        tipoEvento = Me.CB_TIPO_DE_EVENTO.list(Me.CB_TIPO_DE_EVENTO.ListIndex, 0)
    End If
    
    sqlstring = "SELECT OW_ID_OBJETIVO_EVENTO, DESCRIPCION + ' - ' + OW_DESC_SPANISH FROM OBJETIVO_EVENTO " & _
                "WHERE BAJA = 0 " & _
                "AND OW_ID_OBJETIVO_EVENTO <> '" & Me.CB_OBJETIVO.list(0, 0) & "' " & _
                "AND OW_ID_TIPO_EVENTO LIKE '" & tipoEvento & "' ORDER BY DESCRIPCION ASC"
    
    Me.LA_OBJETIVO_ANT.Caption = Me.CB_OBJETIVO.list(0, 1)
    Me.CB_OBJETIVO.Enabled = True
    Me.CB_OBJETIVO.Clear
    
    Call agregarAlComboBox(Me.CB_OBJETIVO, sqlstring)
    
    Me.BT_MODIFICAR_OBJETIVO.Enabled = False
    
End Sub

Private Sub BT_MODIFICAR_PATH_POZO_Click()

    hayCambios = True
    Dim sqlstring As String
    
    sqlstring = "SELECT OW_ID_PATH_POZO, CONCAT(OW_ID_PATH_POZO, ' - ', DESCRIPCION) FROM PATH_POZO WHERE OW_ID_PATH_POZO <> '" & Me.CB_PATH_POZO.list(0, 0) & "'"
    
    Me.LA_PATH_POZO_ANT.Caption = Me.CB_PATH_POZO.list(0, 1)
    
    Me.CB_PATH_POZO.Enabled = True
    Me.CB_PATH_POZO.Clear
    
    Call agregarAlComboBox(Me.CB_PATH_POZO, sqlstring)
    
    Me.BT_MODIFICAR_PATH_POZO.Enabled = False

End Sub

Private Sub BT_MODIFICAR_PURPOSE_POZO_Click()
    
    hayCambios = True
    Dim sqlstring As String
    
    sqlstring = "SELECT OW_ID_PURPOSE_POZO, CONCAT(DESCRIPCION, ' - ', OW_DESC_SPANISH) FROM PURPOSE_POZO WHERE OW_ID_PURPOSE_POZO <> '" & Me.CB_PURPOSE_POZO.list(0, 0) & "'"
    
    Me.LA_PURPOSE_POZO_ANT.Caption = Me.CB_PURPOSE_POZO.list(0, 1)
    
    Me.CB_PURPOSE_POZO.Enabled = True
    Me.CB_PURPOSE_POZO.Clear
    
    Call agregarAlComboBox(Me.CB_PURPOSE_POZO, sqlstring)
    
    Me.BT_MODIFICAR_PURPOSE_POZO.Enabled = False
    

End Sub

Private Sub BT_MODIFICAR_RMD_Click()

    hayCambios = True
    Me.LA_RMD_ANT.Caption = Me.TB_RIG_MOVE_DISTANCE.Value
    Me.TB_RIG_MOVE_DISTANCE.Value = ""
    Me.TB_RIG_MOVE_DISTANCE.Enabled = True
    Me.BT_MODIFICAR_RMD.Enabled = False

End Sub

Private Sub BT_MODIFICAR_TIPO_EVENTO_Click()

   hayCambios = True
   ' Dim RS As ADODB.Recordset
    Dim sqlstring As String
    
    idFuncion = "" & CInt(Left(Sheets(H_GENERALES).Range("C6").Value, 2)) & ""
    
    Select Case idFuncion
        'WO / COMPLETION
        Case C_FUNCION_CM_WO, C_FUNCION_INGENIERO_WO
            listadoCodEventos = " '" & C_CON_ID & "', '" & C_WO_ID & "', '" & C_IWO_ID & "', '" & C_REP_ID & "', '" & C_ABN_ID & "', '" & C_STB_ID & "' "
                    
        'PERFORACION
        Case C_FUNCION_CM, C_FUNCION_INGENIERO
            listadoCodEventos = " '" & C_DOF_ID & "', '" & C_DON_ID & "', '" & C_MOB_ID & "', '" & C_RON_ID & "', '" & C_STB_ID & "' "
    End Select
    
    sqlstring = "SELECT OW_ID_TIPO_EVENTO, CONCAT(COD_EVENTO, ' - ', DESCRIPCION) FROM TIPO_EVENTO WHERE ACTIVO = 1 AND BAJA = 0 AND OW_ID_TIPO_EVENTO <> '" & Me.CB_TIPO_DE_EVENTO.list(0, 0) & "' AND OW_ID_TIPO_EVENTO IN (" & listadoCodEventos & ")"
       
    Me.LA_TIPO_EVENTO_ANT.Caption = Me.CB_TIPO_DE_EVENTO.list(0, 1)
    
    Me.CB_TIPO_DE_EVENTO.Enabled = True
    Me.CB_TIPO_DE_EVENTO.Clear
    
    Call agregarAlComboBox(Me.CB_TIPO_DE_EVENTO, sqlstring)

    Me.BT_MODIFICAR_TIPO_EVENTO.Enabled = False

End Sub

Private Sub bt_modificarCostType_Click()

    hayCambios = True
    If Me.op_capex Then
        Me.la_costType_ant.Caption = "CAPITAL"
    Else
        Me.la_costType_ant.Caption = "EXPENSE"
    End If
    Me.op_capex.Value = False
    Me.op_capex.Enabled = True
    Me.op_opex.Value = False
    Me.op_opex.Enabled = True
    Me.bt_modificarCostType.Enabled = False
    
End Sub

Private Sub bt_modificarFechaFin_Click()

    hayCambios = True
    Me.la_fechaFin_ant.Caption = Me.tb_fechaFin.Value
    Me.tb_fechaFin.Value = ""
    Me.tb_fechaFin.Enabled = True
    Me.bt_modificarFechaFin.Enabled = False

End Sub

Private Sub bt_modificarLateralLength_Click()

    hayCambios = True
    Dim sqlstring As String
    
    sqlstring = "SELECT KEY_ID, CONCAT(TYPE, ' - ', RANGE) FROM WELL_LATERAL WHERE KEY_ID <> '" & Me.cb_lateralLength.list(0, 0) & "'"
    
    Me.la_lateralLenght_ant.Caption = Me.cb_lateralLength.list(0, 1)
    
    Me.cb_lateralLength.Enabled = True
    Me.cb_lateralLength.Clear
    
    Call agregarAlComboBox(Me.cb_lateralLength, sqlstring)
    
    Me.bt_modificarLateralLength.Enabled = False

End Sub

Private Sub bt_modificarMainCause_Click()

    hayCambios = True
    Dim sqlstring
    Dim tipoEvento
    
    If Me.CB_TIPO_DE_EVENTO.ListIndex < 0 Then
        tipoEvento = "%%"
    Else
        tipoEvento = Me.CB_TIPO_DE_EVENTO.list(Me.CB_TIPO_DE_EVENTO.ListIndex, 0)
    End If
    
    sqlstring = "SELECT KEY_ID, DESCRIPTION + ' - ' + DESC_SPANISH FROM MAIN_CAUSE " & _
                "WHERE BAJA = 0 " & _
                "AND KEY_ID <> '" & Me.cb_mainCause.list(0, 0) & "' " & _
                "AND EVENT_TYPE_ID LIKE '" & tipoEvento & "' ORDER BY DESCRIPTION ASC"
    
    Me.la_mainCause_ant.Caption = Me.cb_mainCause.list(0, 1)
    Me.cb_mainCause.Enabled = True
    Me.cb_mainCause.Clear
    
    Call agregarAlComboBox(Me.cb_mainCause, sqlstring)
    
    Me.bt_modificarMainCause.Enabled = False


End Sub

Private Sub bt_salir_Click()

    Unload Me

End Sub

Public Sub inicializarFormulario(ByVal nroSolicitud As Integer)

    solicitud = nroSolicitud

    If nroSolicitud = 0 Then
        
        Dim UG_Usuario As String
        Dim queryConsulta As String
        Dim idFuncion As String
        Dim listadoCodEventos As String
        Dim queryTipoEvento As String
        Dim usuUG As String
    
       ' Call reseteardatos
        UG_Usuario = Sheets(H_GENERALES).Range("H9").Value
        idPermiso = "" & Int(Left(Sheets(H_GENERALES).Range("C6").Value, 2)) & ""
    
        'UNIDAD DE GESTION - NO SE PUEDE MODIFICAR
        queryConsulta = "SELECT OW_CODIGO, DESCRIPCION FROM UGESTION WHERE OW_CODIGO ='" & UG_Usuario & "' AND BAJA = 0 ORDER BY DESCRIPCION ASC"
        Call agregarAlComboBox(Me.CB_UGESTION, queryConsulta)
        Me.CB_UGESTION.ListIndex = 0
    
        usuUG = Me.CB_UGESTION.list(Me.CB_UGESTION.ListIndex, 0)
        idFuncion = "" & CInt(Left(Sheets(H_GENERALES).Range("C6").Value, 2)) & ""
        
        ' Si es usuario de CO/WO cambio ALTURA DE MESA por KELLY BUSHING
        If idPermiso = C_FUNCION_INGENIERO_WO Then
            Me.LA_ALTURA_MESA.Caption = "KELLY BUSHING"
        End If

        Select Case idFuncion
            Case C_FUNCION_ADMIN
                IdUG = "%"
        
            Case C_FUNCION_ASISTENTE_TECNICO_GENERICO
                IdUG = usuUG
        
            Case Else
                Select Case idFuncion
                
                'PERFORACION
                Case C_FUNCION_CM, C_FUNCION_INGENIERO, C_FUNCION_ASISTENTE_TECNICO
                    listadoCodEventos = " '" & C_DOF_ID & "', '" & C_DON_ID & "', '" & C_MOB_ID & "', '" & C_RON_ID & "', '" & C_STB_ID & "' "
                    
                'WO / COMPLETION
                Case C_FUNCION_CM_WO, C_FUNCION_INGENIERO_WO, C_FUNCION_ASISTENTE_TECNICO_WO
                    listadoCodEventos = " '" & C_CON_ID & "', '" & C_WO_ID & "', '" & C_IWO_ID & "', '" & C_REP_ID & "', '" & C_ABN_ID & "', '" & C_STB_ID & "' "
                
                End Select
            
                queryTipoEvento = "AND EO.OW_ID_TIPO_EVENTO IN(" & UCase(listadoCodEventos) & ")"
                IdUG = usuUG
        End Select
    
        'SE CARGAN LOS POZOS DE ACUERDO A LA UG A LA QUE PERTENECEN
        sqlstring = "SELECT DISTINCT OW_COD_POZO, DESCRIPCION " & _
                    "FROM POZOS P JOIN EVENTO_OW EO ON EO.OW_ID_POZO = P.OW_COD_POZO " & _
                    "WHERE EO.OW_ID_UNIDAD_GESTION = '" & usuUG & "' " & _
                    "ORDER BY DESCRIPCION ASC "
        Call agregarAlComboBox(Me.CB_POZO, sqlstring)
        Me.CB_POZO.ListIndex = -1
        Me.CB_POZO.Enabled = True
    
        'TIPO DE EVENTO
        queryConsulta = "SELECT OW_ID_TIPO_EVENTO, COD_EVENTO, COD_EVENTO + ' - ' + DESCRIPCION AS DESCRIPCION FROM TIPO_EVENTO EO " & _
                        "WHERE ACTIVO = 1 AND BAJA = 0 " & _
                        queryTipoEvento & _
                        "ORDER BY COD_EVENTO ASC"
        Call agregarAlComboBox(Me.CB_TIPO_EVENTO, queryConsulta)
        
        ' LIMPIO EL COMBO FECHA
        Me.CB_FECHA_INICIO.Clear
                
        '*********** POZOS ************
        'Call agregarAlComboBox(Me.CB_PURPOSE_POZO, QueryPurposePozo)
        'Call agregarAlComboBox(Me.CB_OBJECTIVE_POZO, QueryObjectivePozo)
        'Call agregarAlComboBox(Me.CB_PATH_POZO, QueryPathPozo)
        'Call agregarAlComboBox(Me.CB_DEPTH_POZO, QueryDepthPozo)
        
    Else
    
        ' Activo frame con numero de solicitud
        Me.FR_NRO_SOLICITUD.Visible = True
        Me.TB_NUMERO_SOLICITUD.Visible = True
        Me.TB_NUMERO_SOLICITUD.Value = nroSolicitud
        
        ' Desactivo los botones
        Me.BT_CANCELAR.Enabled = False
        Me.BT_BUSCAR_EVENTO.Enabled = False
        
        sqlstring = "SELECT E.FECHA_INICIO_EVENTO, CONCAT(TE.COD_EVENTO,'  - ',TE.DESCRIPCION),CONCAT(OE.DESCRIPCION, ' - ', OE.OW_DESC_SPANISH), " & _
                    "MC.OW_DESC_SPANISH, E.ADJUSTED_BUDGET_V20, E.AUTHORIZED_TMD_V20, E.AUTHORIZED_TMD_V30, E.AUTHORIZED_TVD, E.BASELINE, E.RIG_MOVE_DISTANCE, E.EWI, " & _
                    "CONCAT(PP.DESCRIPCION, ' - ', PP.OW_DESC_SPANISH), CONCAT(OP.OW_ID_OBJECTIVE_POZO, ' - ', OP.DESCRIPCION), CONCAT(PAP.OW_ID_PATH_POZO, ' - ', PAP.DESCRIPCION), " & _
                    "CONCAT(DP.OW_ID_DEPTH_POZO, ' - ', DP.DESCRIPCION), EQ.DESCRIPCION, E.EQUIPO_ALTURA_MESA, AO.OW_NAME, SO.OBSERVACIONES, E.OW_ID_EVENTO, " & _
                    "CONCAT(MAC.DESCRIPTION, ' - ', MAC.DESC_SPANISH), E.COST_TYPE, E.FECHA_FIN_EVENTO, CONCAT(WL.TYPE, ' - ', WL.RANGE) " & _
                    "FROM SOLICITUD S " & _
                    "JOIN EVENTO E ON S.ID_EVENTO = E.ID_EVENTO " & _
                    "LEFT JOIN TIPO_EVENTO TE ON TE.OW_ID_TIPO_EVENTO = E.OW_ID_TIPO_EVENTO " & _
                    "LEFT JOIN SOLICITUD_POZO SP ON SP.ID_POZO = E.ID_POZO " & _
                    "LEFT JOIN EQUIPOS EQ ON EQ.OW_ID_EQUIPO = E.OW_ID_EQUIPO " & _
                    "LEFT JOIN OBJETIVO_EVENTO OE ON OE.OW_ID_OBJETIVO_EVENTO = E.OW_ID_OBJETIVO_EVENTO " & _
                    "LEFT JOIN MAIN_CAUSE MAC ON MAC.KEY_ID = E.ID_MAIN_CAUSE " & _
                    "LEFT JOIN METODO_CONSTRUCTIVO MC ON MC.OW_ID_METODO_CONSTRUCTIVO = E.OW_ID_METODO_CONSTRUCTIVO " & _
                    "LEFT JOIN PURPOSE_POZO PP ON SP.OW_ID_PURPOSE_POZO = PP.OW_ID_PURPOSE_POZO " & _
                    "LEFT JOIN OBJECTIVE_POZO OP ON OP.OW_ID_OBJECTIVE_POZO = SP.OW_ID_OBJECTIVE_POZO " & _
                    "LEFT JOIN PATH_POZO PAP ON PAP.OW_ID_PATH_POZO = SP.OW_ID_PATH_POZO " & _
                    "LEFT JOIN DEPTH_POZO DP ON DP.OW_ID_DEPTH_POZO = SP.OW_ID_DEPTH_POZO " & _
                    "LEFT JOIN AREAS_OW AO ON AO.OW_KEY_ID = E.ID_AREA " & _
                    "LEFT JOIN WELL_LATERAL WL ON SP.ID_WELL_LATERAL = WL.KEY_ID " & _
                    "JOIN SOLICITUDES SO ON S.ID_SOLICITUD = SO.ID_SOLICITUD " & _
                    "WHERE S.ID_SOLICITUD = " & nroSolicitud
                    
        Set rs = ConsultarTablasBD(sqlstring)
        
        sqlstring = "SELECT CONVERT(VARCHAR, EO.OW_FECHA_INICIO_EVENTO,103), CONCAT(TE.COD_EVENTO,'  - ',TE.DESCRIPCION),CONCAT(OE.DESCRIPCION, ' - ', OE.OW_DESC_SPANISH), " & _
                    "MC.OW_DESC_SPANISH, EO.OW_ADJUSTED_BUDGET_V20, EO.OW_AUTHORIZED_TMD_V20, EO.OW_AUTHORIZED_TMD_V30, EO.OW_AUTHORIZED_TVD, EO.OW_BASELINE, EO.OW_RIG_MOVE_DISTANCE, EO.OW_EWI, " & _
                    "CONCAT(PP.DESCRIPCION, ' - ', PP.OW_DESC_SPANISH), CONCAT(OP.OW_ID_OBJECTIVE_POZO, ' - ', OP.DESCRIPCION), CONCAT(PAP.OW_ID_PATH_POZO, ' - ', PAP.DESCRIPCION), " & _
                    "CONCAT(DP.OW_ID_DEPTH_POZO, ' - ', DP.DESCRIPCION), EQ.DESCRIPCION, EQ.ALTURA_MESA, AO.OW_NAME, UG.DESCRIPCION, P.DESCRIPCION, OE.OW_ID_TIPO_EVENTO, " & _
                    "CONCAT(MAC.DESCRIPTION, ' - ', MAC.DESC_SPANISH), EO.COST_TYPE, EO.OW_FECHA_FIN_EVENTO, CONCAT(WL.TYPE, ' - ', WL.RANGE) " & _
                    "FROM EVENTO_OW EO " & _
                    "JOIN UGESTION UG ON UG.OW_CODIGO = EO.OW_ID_UNIDAD_GESTION " & _
                    "LEFT JOIN TIPO_EVENTO TE ON TE.OW_ID_TIPO_EVENTO = EO.OW_ID_TIPO_EVENTO " & _
                    "LEFT JOIN POZOS P ON P.OW_COD_POZO = EO.OW_ID_POZO " & _
                    "LEFT JOIN EQUIPOS EQ ON EQ.OW_ID_EQUIPO = EO.OW_ID_EQUIPO " & _
                    "LEFT JOIN OBJETIVO_EVENTO OE ON OE.OW_ID_OBJETIVO_EVENTO = EO.OW_ID_OBJETIVO_EVENTO " & _
                    "LEFT JOIN MAIN_CAUSE MAC ON MAC.KEY_ID = EO.ID_MAIN_CAUSE " & _
                    "LEFT JOIN METODO_CONSTRUCTIVO MC ON MC.OW_ID_METODO_CONSTRUCTIVO = EO.OW_ID_METODO_CONSTRUCTIVO " & _
                    "LEFT JOIN PURPOSE_POZO PP ON P.OW_ID_PURPOSE_POZO = PP.OW_ID_PURPOSE_POZO " & _
                    "LEFT JOIN OBJECTIVE_POZO OP ON OP.OW_ID_OBJECTIVE_POZO = P.OW_ID_OBJECTIVE_POZO " & _
                    "LEFT JOIN PATH_POZO PAP ON PAP.OW_ID_PATH_POZO = P.OW_ID_PATH_POZO " & _
                    "LEFT JOIN DEPTH_POZO DP ON DP.OW_ID_DEPTH_POZO = P.OW_ID_DEPTH_POZO " & _
                    "LEFT JOIN AREAS_OW AO ON AO.OW_KEY_ID = EO.OW_ID_AREA " & _
                    "LEFT JOIN WELL_LATERAL WL ON P.ID_WELL_LATERAL = WL.KEY_ID " & _
                    "WHERE EO.OW_ID_EVENTO = '" & rs.Fields(19) & "'"
                    
        Set rs2 = ConsultarTablasBD(sqlstring)
        
        With Me.CB_UGESTION
            .AddItem
            .Column(1, 0) = rs2.Fields(18)
            .ListIndex = 0
        End With
        
        With Me.CB_POZO
            .AddItem
            .Column(1, 0) = rs2.Fields(19)
            .ListIndex = 0
            .Enabled = False
        End With
        
        With Me.CB_TIPO_EVENTO
            .AddItem
            .Column(2, 0) = rs2.Fields(1)
            .ListIndex = 0
            .Enabled = False
        End With
        
        idTipoEvento = rs2.Fields(20)
        If idTipoEvento = C_CON_ID Or idTipoEvento = C_WO_ID Or idTipoEvento = C_ABN_ID Or idTipoEvento = C_REP_ID Then
            Me.LA_ALTURA_MESA.Caption = "KELLY BUSHING"
        End If
        
        With Me.CB_FECHA_INICIO
            .AddItem
            .Column(1, 0) = rs2.Fields(0)
            .ListIndex = 0
            .Enabled = False
        End With
        
        If (IsNull(rs.Fields(0)) Or rs.Fields(0) = "NULL") Then
            Me.TB_FECHA_INICIO.Value = rs2.Fields(0)
        Else
            Me.TB_FECHA_INICIO.Value = rs.Fields(0)
            Me.LA_FECHA_INICIO_ANT.Caption = rs2.Fields(0)
        End If
        
        If (IsNull(rs.Fields(22)) Or rs.Fields(22) = "NULL") Then
            Me.tb_fechaFin.Value = IIf(IsNull(rs2.Fields(23)), "", rs2.Fields(23))
        Else
            Me.tb_fechaFin.Value = rs.Fields(22)
            Me.la_fechaFin_ant.Caption = rs2.Fields(23)
        End If

        
        If Trim(rs.Fields(1)) = "-" Or IsNull(rs.Fields(1)) Then
            With Me.CB_TIPO_DE_EVENTO
                .AddItem
                .Column(1, 0) = rs2.Fields(1)
                .ListIndex = 0
            End With
        Else
            With Me.CB_TIPO_DE_EVENTO
                .AddItem
                .Column(1, 0) = rs.Fields(1)
                .ListIndex = 0
            End With
            Me.LA_TIPO_EVENTO_ANT.Caption = rs2.Fields(1)
        End If
        
        If Trim(rs.Fields(2)) = "-" Or IsNull(rs.Fields(2)) Then
            With Me.CB_OBJETIVO
                .AddItem
                .Column(1, 0) = rs2.Fields(2)
                .ListIndex = 0
            End With
        Else
            With Me.CB_OBJETIVO
                .AddItem
                .Column(1, 0) = rs.Fields(2)
                .ListIndex = 0
            End With
            Me.LA_OBJETIVO_ANT.Caption = rs2.Fields(2)
        End If
        
        If Trim(rs.Fields(20)) = "-" Or IsNull(rs.Fields(20)) Then
            With Me.cb_mainCause
                .AddItem
                .Column(1, 0) = rs2.Fields(21)
                .ListIndex = 0
            End With
        Else
            With Me.cb_mainCause
                .AddItem
                .Column(1, 0) = rs.Fields(20)
                .ListIndex = 0
            End With
            Me.la_mainCause_ant.Caption = rs2.Fields(21)
        End If
        
        If Trim(rs.Fields(3)) = "-" Or IsNull(rs.Fields(3)) Then
            With Me.CB_METODO_CONSTRUCTIVO
                .AddItem
                .Column(1, 0) = IIf(IsNull(rs2.Fields(3)), "", rs2.Fields(3))
                .ListIndex = 0
            End With
        Else
            With Me.CB_METODO_CONSTRUCTIVO
                .AddItem
                .Column(1, 0) = rs.Fields(3)
                .ListIndex = 0
            End With
            Me.LA_METODO_CONSTRUCTIVO_ANT.Caption = IIf(IsNull(rs2.Fields(3)), "SIN DATO ANTERIOR", rs2.Fields(3))
        End If
        
        If IsNull(rs.Fields(4)) Then
            Me.TB_ADJUSTED_BUDGET.Value = IIf(IsNull(rs2.Fields(4)), "", rs2.Fields(4))
        Else
            Me.TB_ADJUSTED_BUDGET.Value = rs.Fields(4)
            Me.LA_ADJ_BUDGET_ANT.Caption = IIf(IsNull(rs2.Fields(4)), "", rs2.Fields(4))
        End If
        
        If IsNull(rs.Fields(21)) Then
            If rs2.Fields(22) = "CAPITAL" Then
                Me.op_capex.Value = True
            Else
                Me.op_opex.Value = True
            End If
        Else
            If rs.Fields(21) = "CAPITAL" Then
                Me.op_capex.Value = True
            Else
                Me.op_opex.Value = True
            End If
            Me.la_costType_ant.Caption = IIf(IsNull(rs2.Fields(22)), "", rs2.Fields(22))
        End If
            
        
        If IsNull(rs.Fields(5)) Then
            Me.TB_AUTHORIZED_TMD_V20.Value = IIf(IsNull(rs2.Fields(5)), "", rs2.Fields(5))
        Else
            Me.TB_AUTHORIZED_TMD_V20.Value = rs.Fields(5)
            Me.LA_AUTH_TMD_V20_ANT.Caption = IIf(IsNull(rs2.Fields(5)), "", rs2.Fields(5))
        End If
        
        If IsNull(rs.Fields(6)) Then
            Me.TB_AUTHORIZED_TMD_V30.Value = IIf(IsNull(rs2.Fields(6)), "", rs2.Fields(6))
        Else
            Me.TB_AUTHORIZED_TMD_V30.Value = rs.Fields(6)
            Me.LA_AUTH_TMD_V30_ANT.Caption = IIf(IsNull(rs2.Fields(6)), "", rs2.Fields(6))
        End If
        
        If IsNull(rs.Fields(7)) Then
            Me.TB_AUTHORIZED_TVD.Value = IIf(IsNull(rs2.Fields(7)), "", rs2.Fields(7))
        Else
            Me.TB_AUTHORIZED_TVD.Value = rs.Fields(7)
            Me.LA_AUTH_TVD_ANT.Caption = IIf(IsNull(rs2.Fields(7)), "", rs2.Fields(7))
        End If
        
        If IsNull(rs.Fields(8)) Then
            Me.TB_BASELINE.Value = IIf(IsNull(rs2.Fields(8)), "", rs2.Fields(8))
        Else
            Me.TB_BASELINE.Value = rs.Fields(8)
        End If
    
        If IsNull(rs.Fields(9)) Then
            Me.TB_RIG_MOVE_DISTANCE.Value = IIf(IsNull(rs2.Fields(9)), "", rs2.Fields(9))
        Else
            Me.TB_RIG_MOVE_DISTANCE.Value = rs.Fields(9)
            Me.LA_RMD_ANT.Caption = IIf(IsNull(rs2.Fields(9)), "", rs2.Fields(9))
        End If
        
        If IsNull(rs.Fields(10)) Then
            Me.TB_EWI.Value = IIf(IsNull(rs2.Fields(10)), "", rs2.Fields(10))
        Else
            Me.TB_EWI.Value = rs.Fields(10)
            Me.LA_EWI_ANT.Caption = IIf(IsNull(rs2.Fields(10)), "", rs2.Fields(10))
        End If
        
        If IsNull(rs.Fields(11)) Or Trim(rs.Fields(11)) = "-" Then
            With Me.CB_PURPOSE_POZO
                .AddItem
                .Column(1, 0) = IIf(IsNull(rs2.Fields(11)), "", rs2.Fields(11))
                .ListIndex = 0
            End With
        Else
            With Me.CB_PURPOSE_POZO
                .AddItem
                .Column(1, 0) = rs.Fields(11)
                .ListIndex = 0
            End With
            Me.LA_PURPOSE_POZO_ANT.Caption = rs2.Fields(11)
        End If
        
        If IsNull(rs.Fields(12)) Or Trim(rs.Fields(12)) = "-" Then
            With Me.CB_OBJECTIVE_POZO
                .AddItem
                .Column(1, 0) = IIf(IsNull(rs2.Fields(12)), "", rs2.Fields(12))
                .ListIndex = 0
            End With
        
        Else
            With Me.CB_OBJECTIVE_POZO
                .AddItem
                .Column(1, 0) = rs.Fields(12)
                .ListIndex = 0
            End With
            Me.LA_OBJECTIVE_POZO_ANT.Caption = rs2.Fields(12)
        End If
        
        If IsNull(rs.Fields(13)) Or Trim(rs.Fields(13)) = "-" Then
            With Me.CB_PATH_POZO
                .AddItem
                .Column(1, 0) = IIf(IsNull(rs2.Fields(13)), "", rs2.Fields(13))
                .ListIndex = 0
            End With
        
        Else
            With Me.CB_PATH_POZO
                .AddItem
                .Column(1, 0) = rs.Fields(13)
                .ListIndex = 0
            End With
            Me.LA_PATH_POZO_ANT.Caption = rs2.Fields(13)
        End If
        
        If IsNull(rs.Fields(14)) Or Trim(rs.Fields(14)) = "-" Then
            With Me.CB_DEPTH_POZO
                .AddItem
                .Column(1, 0) = IIf(IsNull(rs2.Fields(14)), "", rs2.Fields(14))
                .ListIndex = 0
            End With
        
        Else
            With Me.CB_DEPTH_POZO
                .AddItem
                .Column(1, 0) = rs.Fields(14)
                .ListIndex = 0
            End With
            Me.LA_DEPTH_POZO_ANT.Caption = rs2.Fields(14)
        End If
        
        If IsNull(rs.Fields(23)) Or Trim(rs.Fields(23)) = "-" Then
            With Me.cb_lateralLength
                .AddItem
                .Column(1, 0) = IIf(IsNull(rs2.Fields(24)), "", rs2.Fields(24))
                .ListIndex = 0
            End With
        
        Else
            With Me.cb_lateralLength
                .AddItem
                .Column(1, 0) = rs.Fields(23)
                .ListIndex = 0
            End With
            Me.la_lateralLenght_ant.Caption = rs2.Fields(24)
        End If
        
        If IsNull(rs.Fields(15)) Then
            With Me.CB_EQUIPO
                .AddItem
                .Column(1, 0) = IIf(IsNull(rs2.Fields(15)), "", rs2.Fields(15))
                .ListIndex = 0
            End With
            
        Else
            With Me.CB_EQUIPO
                .AddItem
                .Column(1, 0) = rs.Fields(15)
                .ListIndex = 0
            End With
            Me.LA_EQUIPO_ANT.Caption = rs2.Fields(15)
        End If
        
        If IsNull(rs.Fields(16)) Then
            Me.TB_ALTURA_NUEVA.Value = IIf(IsNull(rs2.Fields(16)), "", rs2.Fields(16))
        Else
            Me.TB_ALTURA_NUEVA.Value = rs.Fields(16)
            Me.LA_ALTURA_MESA_ANT.Caption = IIf(IsNull(rs2.Fields(16)), "SIN DATO ANTERIOR", rs2.Fields(16))
        End If
        
        If IsNull(rs.Fields(17)) Then
            With Me.CB_AREA
                .AddItem
                .Column(1, 0) = IIf(IsNull(rs2.Fields(17)), "", rs2.Fields(17))
                .ListIndex = 0
            End With
        Else
            With Me.CB_AREA
                .AddItem
                .Column(1, 0) = rs.Fields(17)
                .ListIndex = 0
            End With
            Me.LA_AREA_ANT.Caption = rs.Fields(17)
        End If
        
        Me.tb_observaciones.Value = rs.Fields(18)
    
    End If

End Sub

Private Sub BT_SOLICITAR_Click()
  
    If Trim(Me.tb_observaciones.Value & vbNullString) = vbNullString Then
        MsgBox "Se debe completar una observacion para enviar la SOLICITUD!", vbOKOnly, "AVISO"
        Exit Sub
    End If
    
    destinatarios = GetMailEjecutorCambioOW(C_FUNCION_ADMIN_OW, Sheets(H_GENERALES).Range("H9").Value)
    If (destinatarios = "") Then
        MsgBox "ERROR: Ha ocurrido un Error al obtener el Administrador de OpenWells. Comunicarse con el Administrador del sistema!", vbCritical, "SOLICITAR"
        Exit Sub
    End If
    
    Call GuardarBDModificacion(destinatarios)
    
    Call limpiarCampos
    
    Call inicializarFormulario(0)
    

End Sub


Private Sub CB_POZO_Change()

    If Me.CB_POZO.ListIndex > -1 Then
        Me.CB_TIPO_EVENTO.ListIndex = -1
        Me.CB_TIPO_EVENTO.Enabled = True
    End If

End Sub

Private Sub CB_TIPO_DE_EVENTO_Change()

   ' If Me.CB_TIPO_DE_EVENTO.ListIndex < 0 Then
   '     Exit Sub
   ' End If
    
   ' Call BT_MODIFICAR_OBJETIVO_Click

End Sub

Private Sub CB_TIPO_EVENTO_Change()
    
    Dim codigoUg As String
    Dim codPozo As String
    Dim codEvento As String
    
    If Me.CB_TIPO_EVENTO.ListIndex > -1 And solicitud = 0 Then
    
        codUg = Me.CB_UGESTION.list(Me.CB_UGESTION.ListIndex, 0)
        codPozo = Me.CB_POZO.list(Me.CB_POZO.ListIndex, 0)
        codEvento = Me.CB_TIPO_EVENTO.list(Me.CB_TIPO_EVENTO.ListIndex, 0)
    
        sqlstring = "SELECT OW_ID_EVENTO, RTRIM(CONVERT(CHAR, OW_FECHA_INICIO_EVENTO, 103)) FROM EVENTO_OW WHERE OW_ID_TIPO_EVENTO = '" & codEvento & "' " & _
                    "AND OW_ID_UNIDAD_GESTION = '" & codUg & "' AND OW_ID_POZO = '" & codPozo & "'"
    
        Call agregarAlComboBox(Me.CB_FECHA_INICIO, sqlstring)
        Me.CB_FECHA_INICIO.ListIndex = -1
        Me.CB_FECHA_INICIO.Enabled = True
        
    End If

End Sub

Private Sub UserForm_Initialize()
    
'    Call inicializarFormulario(0)

    Call aplicarTemplate(Me)

End Sub

Private Sub GuardarBDModificacion(ByVal destinatarios As String)

    Dim ID_EVENTO As Integer
    Dim ID_POZO As Integer
    Dim OW_COD_POZO As String
    Dim OW_POZO_DESCRIPCION As String
    Dim OW_ID_PURPOSE_POZO As String
    Dim OW_ID_OBJETCTIVE_POZO As String
    Dim OW_ID_PATH_POZO As String
    Dim OW_ID_DEPTH_POZO As String
    Dim OW_ID_WELL_LATERAL As String
    Dim ID_AREA As String
    Dim OW_ID_TIPO_EVENTO As String
    Dim OW_COD_UNIDAD_GESTION As String
    Dim FECHA_INICIO_EVENTO As String
    Dim OW_ID_OBJETIVO_EVENTO As String
    Dim OW_ID_METODO_CONSTRUCTIVO As String
    Dim ADJUSTED_BUDGET_V20 As String
    Dim PROGRAM_COST_V30 As String
    Dim AUTHORIZED_TMD_V20 As String
    Dim AUTHORIZED_TMD_V30 As String
    Dim AUTHORIZED_TVD As String
    Dim baseline As String
    Dim PROGRAM_DAYS_V30 As String
    Dim RIG_MOVE_DISTANCE As String
    Dim ewi As String
    Dim ALTURA_MESA As String
    Dim OW_ID_EQUIPO As String
    Dim pTipoEventoArea As String
    
    'OW_COD_UNIDAD_GESTION, OW_COD_POZO, OW_ID_TIPO_EVENTO y FECHA_INICIO_EVENTO se guarda lo que modificaron o lo que existe en OW.
    OW_COD_UNIDAD_GESTION = "'" & Me.CB_UGESTION.list(Me.CB_UGESTION.ListIndex, 0) & "'"
    OW_COD_POZO = "'" & Me.CB_POZO.list(Me.CB_POZO.ListIndex, 0) & "'"
    OW_POZO_DESCRIPCION = "'" & Me.CB_POZO.list(Me.CB_POZO.ListIndex, 1) & "'"
   
    If (Me.CB_TIPO_DE_EVENTO.ListIndex = 0 And Me.BT_MODIFICAR_TIPO_EVENTO.Enabled) Then
        OW_ID_TIPO_EVENTO = "NULL"
        'pTipoEventoArea = "'" & Me.CB_BUSCAR_TIPO_EVENTO.list(Me.CB_BUSCAR_TIPO_EVENTO.ListIndex, 0) & "'"
    Else
        If (Me.CB_TIPO_DE_EVENTO.ListIndex <> -1 And Not Me.BT_MODIFICAR_TIPO_EVENTO.Enabled) Then
            OW_ID_TIPO_EVENTO = Me.CB_TIPO_EVENTO.list(Me.CB_TIPO_EVENTO.ListIndex, 0)
            pTipoEventoArea = "'" & OW_ID_TIPO_EVENTO & "'"
        Else
            OW_ID_TIPO_EVENTO = "NULL"
        End If
    End If
    
    If (Me.TB_FECHA_INICIO.Text = "" And Not Me.BT_MODIFICAR_FECHA.Enabled) Then
        'FECHA_INICIO_EVENTO = "'" & Format(Me.CB_BUSCAR_FECHA_INICIO.list(Me.CB_BUSCAR_FECHA_INICIO.ListIndex, 0), "MM/dd/yyyy") & "'"
        FECHA_INICIO_EVENTO = "NULL"
    Else
        If (Me.TB_FECHA_INICIO.Text <> "" And Not Me.BT_MODIFICAR_FECHA.Enabled) Then
            FECHA_INICIO_EVENTO = "'" & Format(Me.TB_FECHA_INICIO.Text, "dd/mm/yyyy") & "'"
        Else
            FECHA_INICIO_EVENTO = "NULL"
        End If
    End If
    
    If (Me.tb_fechaFin.Text = "" And Not Me.bt_modificarFechaFin.Enabled) Then
        'FECHA_INICIO_EVENTO = "'" & Format(Me.CB_BUSCAR_FECHA_INICIO.list(Me.CB_BUSCAR_FECHA_INICIO.ListIndex, 0), "MM/dd/yyyy") & "'"
        fechaFinEvento = "NULL"
    Else
        If (Me.tb_fechaFin.Text <> "" And Not Me.bt_modificarFechaFin.Enabled) Then
            fechaFinEvento = "'" & Format(Me.tb_fechaFin.Text, "dd/mm/yyyy") & "'"
        Else
            fechaFinEvento = "NULL"
        End If
    End If
    
    
    If (Me.CB_PURPOSE_POZO.ListIndex = 0 And Me.BT_MODIFICAR_PURPOSE_POZO.Enabled) Then
        OW_ID_PURPOSE_POZO = "NULL"
    Else
        If (Me.CB_PURPOSE_POZO.ListIndex <> -1 And Not Me.BT_MODIFICAR_PURPOSE_POZO.Enabled) Then
            OW_ID_PURPOSE_POZO = "'" & Me.CB_PURPOSE_POZO.list(Me.CB_PURPOSE_POZO.ListIndex, 0) & "'"
        Else
            OW_ID_PURPOSE_POZO = "NULL"
        End If
    End If
    
    If (Me.CB_OBJECTIVE_POZO.ListIndex = 0 And Me.BT_MODIFICAR_OBJECTIVE_POZO.Enabled) Then
        OW_ID_OBJECTIVE_POZO = "NULL"
    Else
        If (Me.CB_OBJECTIVE_POZO.ListIndex <> -1 And Not Me.BT_MODIFICAR_OBJECTIVE_POZO.Enabled) Then
            OW_ID_OBJECTIVE_POZO = "'" & Me.CB_OBJECTIVE_POZO.list(Me.CB_OBJECTIVE_POZO.ListIndex, 0) & "'"
        Else
            OW_ID_OBJECTIVE_POZO = "NULL"
        End If
    End If
    
    If (Me.CB_PATH_POZO.ListIndex = 0 And Me.BT_MODIFICAR_PATH_POZO.Enabled) Then
        OW_ID_PATH_POZO = "NULL"
    Else
        If (Me.CB_PATH_POZO.ListIndex <> -1 And Not Me.BT_MODIFICAR_PATH_POZO.Enabled) Then
            OW_ID_PATH_POZO = "'" & Me.CB_PATH_POZO.list(Me.CB_PATH_POZO.ListIndex, 0) & "'"
        Else
            OW_ID_PATH_POZO = "NULL"
        End If
    End If
    
    If (Me.CB_DEPTH_POZO.ListIndex = 0 And Me.BT_MODIFICAR_DEPTH_POZO.Enabled) Then
        OW_ID_DEPTH_POZO = "NULL"
    Else
        If (Me.CB_DEPTH_POZO.ListIndex <> -1 And Not Me.BT_MODIFICAR_DEPTH_POZO.Enabled) Then
            OW_ID_DEPTH_POZO = "'" & Me.CB_DEPTH_POZO.list(Me.CB_DEPTH_POZO.ListIndex, 0) & "'"
        Else
            OW_ID_DEPTH_POZO = "NULL"
        End If
    End If
    
    If (Me.cb_lateralLength.ListIndex = 0 And Me.bt_modificarLateralLength.Enabled) Then
        OW_ID_WELL_LATERAL = "NULL"
    Else
        If (Me.cb_lateralLength.ListIndex <> -1 And Not Me.bt_modificarLateralLength.Enabled) Then
            OW_ID_WELL_LATERAL = "'" & Me.cb_lateralLength.list(Me.cb_lateralLength.ListIndex, 0) & "'"
        Else
            OW_ID_WELL_LATERAL = "NULL"
        End If
    End If
    
    '1|fffd| SE ACTUALIZA EL POZO
    ID_POZO = GuardarPozoSolicitudBD(OW_COD_POZO, OW_POZO_DESCRIPCION, OW_ID_PURPOSE_POZO, OW_ID_OBJECTIVE_POZO, OW_ID_PATH_POZO, OW_ID_DEPTH_POZO, OW_ID_WELL_LATERAL)
    If (ID_POZO = 0) Then
        MsgBox "ERROR: Ha ocurrido un Error al guardar el POZO!!! Comunicarse con el Administrador del sistema", vbCritical, "SOLICITAR MODIFICACION"
        Exit Sub
    End If
    
    'SECCION AREA
    If (Me.CB_AREA.ListIndex = 0 And Me.BT_MODIFICAR_AREA.Enabled) Then
            ID_AREA = "NULL"
        Else
            If (Me.CB_AREA.ListIndex <> -1 And Not Me.BT_MODIFICAR_AREA.Enabled) Then
                ID_AREA = "'" & Me.CB_AREA.list(Me.CB_AREA.ListIndex, 0) & "'"
            Else
                ID_AREA = "NULL"
            End If
     End If
    
    If (Me.CB_EQUIPO.ListIndex = 0 And Me.BT_MODIFICAR_EQUIPO.Enabled) Then
        OW_ID_EQUIPO = "NULL"
    Else
        If (Me.CB_EQUIPO.ListIndex <> -1 And Not Me.BT_MODIFICAR_EQUIPO.Enabled) Then
            OW_ID_EQUIPO = "'" & Me.CB_EQUIPO.list(Me.CB_EQUIPO.ListIndex, 0) & "'"
        Else
            OW_ID_EQUIPO = "NULL"
        End If
    End If
    
    If (Me.CB_OBJETIVO.ListIndex = 0 And Me.BT_MODIFICAR_OBJETIVO.Enabled) Then
        OW_ID_OBJETIVO_EVENTO = "NULL"
    Else
        If (Me.CB_OBJETIVO.ListIndex <> -1 And Not Me.BT_MODIFICAR_OBJETIVO.Enabled) Then
            OW_ID_OBJETIVO_EVENTO = "'" & Me.CB_OBJETIVO.list(Me.CB_OBJETIVO.ListIndex, 0) & "'"
        Else
            OW_ID_OBJETIVO_EVENTO = "NULL"
        End If
    End If
    
    If (Me.cb_mainCause.ListIndex = 0 And Me.bt_modificarMainCause.Enabled) Then
        idMainCause = "NULL"
    Else
        If (Me.cb_mainCause.ListIndex <> -1 And Not Me.bt_modificarMainCause.Enabled) Then
            idMainCause = "'" & Me.cb_mainCause.list(Me.cb_mainCause.ListIndex, 0) & "'"
        Else
            idMainCause = "NULL"
        End If
    End If
    
    
    If (Me.CB_METODO_CONSTRUCTIVO.ListIndex = 0 And Me.BT_MODIFICAR_METODO_CONSTRUCTIVO.Enabled) Then
        OW_ID_METODO_CONSTRUCTIVO = "NULL"
    Else
        If (Me.CB_METODO_CONSTRUCTIVO.ListIndex <> -1 And Not Me.BT_MODIFICAR_METODO_CONSTRUCTIVO.Enabled) Then
            OW_ID_METODO_CONSTRUCTIVO = "'" & Me.CB_METODO_CONSTRUCTIVO.list(Me.CB_METODO_CONSTRUCTIVO.ListIndex, 0) & "'"
        Else
            OW_ID_METODO_CONSTRUCTIVO = "NULL"
        End If
    End If
    
    If (Me.TB_ADJUSTED_BUDGET.Text = "" And Not Me.BT_MODIFICAR_ADJ_BUDGET.Enabled) Then
        ADJUSTED_BUDGET_V20 = "NULL"
    Else
        If (Me.TB_ADJUSTED_BUDGET.Text <> "" And Not Me.BT_MODIFICAR_ADJ_BUDGET.Enabled) Then
            ADJUSTED_BUDGET_V20 = Trim(Replace(TB_ADJUSTED_BUDGET.Text, ",", "."))
        Else
            ADJUSTED_BUDGET_V20 = "NULL"
        End If
    End If
    
    If (Me.bt_modificarCostType.Enabled = False) Then
        If Me.op_capex Then
            costType = "'CAPITAL'"
        ElseIf Me.op_opex Then
            costType = "'EXPENSE'"
        Else
            MsgBox "Debe elegir CAPEX/OPEX", vbExclamation, "VALIDACION DATOS CARGADOS"
            Exit Sub
        End If
    Else
        If Me.op_capex Then
            costType = "'CAPITAL'"
        Else
            costType = "'EXPENSE'"
        End If
    End If
   
    
    If (Me.TB_AUTHORIZED_TMD_V20.Text = "" And Not Me.BT_MODIFICAR_AUTH_TMD_V20.Enabled) Then
        AUTHORIZED_TMD_V20 = "NULL"
    Else
        If (Me.TB_AUTHORIZED_TMD_V20.Text <> "" And Not Me.BT_MODIFICAR_AUTH_TMD_V20.Enabled) Then
            AUTHORIZED_TMD_V20 = Trim(Replace(TB_AUTHORIZED_TMD_V20.Text, ",", "."))
        Else
            AUTHORIZED_TMD_V20 = "NULL"
        End If
    End If
    
    If (Me.TB_AUTHORIZED_TMD_V30.Text = "" And Not Me.BT_MODIFICAR_AUTH_TMD_V30.Enabled) Then
        AUTHORIZED_TMD_V30 = "NULL"
    Else
        If (Me.TB_AUTHORIZED_TMD_V30.Text <> "" And Not Me.BT_MODIFICAR_AUTH_TMD_V30.Enabled) Then
            AUTHORIZED_TMD_V30 = Trim(Replace(TB_AUTHORIZED_TMD_V30.Text, ",", "."))
        Else
            AUTHORIZED_TMD_V30 = "NULL"
        End If
    End If
    
    If (Me.TB_AUTHORIZED_TVD.Text = "" And Not Me.BT_MODIFICAR_AUTH_TVD.Enabled) Then
        AUTHORIZED_TVD = "NULL"
    Else
        If (Me.TB_AUTHORIZED_TVD.Text <> "" And Not Me.BT_MODIFICAR_AUTH_TVD.Enabled) Then
            AUTHORIZED_TVD = Trim(Replace(TB_AUTHORIZED_TVD.Text, ",", "."))
        Else
            AUTHORIZED_TVD = "NULL"
        End If
    End If
    
    If (Me.TB_BASELINE.Text = "" And Not Me.BT_MODIFICAR_BASELINE.Enabled) Then
        baseline = "NULL"
    Else
        If (Me.TB_BASELINE.Text <> "" And Not Me.BT_MODIFICAR_BASELINE.Enabled) Then
            baseline = Trim(Replace(TB_BASELINE.Text, ",", "."))
        Else
            baseline = "NULL"
        End If
    End If
    
    If (Me.TB_RIG_MOVE_DISTANCE.Text = "" And Not Me.BT_MODIFICAR_RMD.Enabled) Then
        RIG_MOVE_DISTANCE = "NULL"
    Else
        If (Me.TB_RIG_MOVE_DISTANCE.Text <> "" And Not Me.BT_MODIFICAR_RMD.Enabled) Then
            RIG_MOVE_DISTANCE = Trim(Replace(TB_RIG_MOVE_DISTANCE.Text, ",", "."))
        Else
            RIG_MOVE_DISTANCE = "NULL"
        End If
    End If
    
    If (Me.TB_EWI.Text = "" And Not Me.BT_MODIFICAR_EWI.Enabled) Then
        ewi = "NULL"
    Else
        If (Me.TB_EWI.Text <> "" And Not Me.BT_MODIFICAR_EWI.Enabled) Then
            ewi = "'" & Trim(TB_EWI.Text) & "'"
        Else
            ewi = "NULL"
        End If
    End If
    
    If (Me.TB_ALTURA_NUEVA.Text = "" And Not Me.BT_MODIFICAR_ALTURA_MESA.Enabled) Then
        ALTURA_MESA = "NULL"
    Else
        If (Me.TB_ALTURA_NUEVA <> "" And Not Me.BT_MODIFICAR_ALTURA_MESA.Enabled) Then
            ALTURA_MESA = Trim(Replace(Me.TB_ALTURA_NUEVA.Text, ",", "."))
        Else
            ALTURA_MESA = "NULL"
        End If
    End If
    
    '2|fffd| SE GUARDA EL EVENTO CON SU POZO
    ID_EVENTO = GuardarEventoBD(ID_POZO, ID_AREA, OW_ID_TIPO_EVENTO, OW_COD_UNIDAD_GESTION, OW_ID_EQUIPO, FECHA_INICIO_EVENTO, fechaFinEvento, OW_ID_OBJETIVO_EVENTO, _
                OW_ID_METODO_CONSTRUCTIVO, ADJUSTED_BUDGET_V20, AUTHORIZED_TMD_V20, AUTHORIZED_TMD_V30, AUTHORIZED_TVD, baseline, _
                RIG_MOVE_DISTANCE, ewi, ALTURA_MESA, idMainCause, costType, "'" & LB_OW_ID_EVENTO.Caption & "'")
    If (ID_EVENTO = 0) Then
        MsgBox "ERROR: Ha ocurrido un Error al guardar el EVENTO!!! Comunicarse con el Administrador del sistema", vbCritical, "SOLICITAR MODIFICACION"
        Exit Sub
    End If
    
    '3|fffd| SE GUARDA LA SOLICITUD CON SU EVENTO
    Call GuardarSolicitud(tb_observaciones.Text, destinatarios, C_ID_TIPO_MODIFICACION_EVENTO, "Modificaci|fffd|n de Propiedades de Evento", "MODIFICACION DE EVENTO", ID_EVENTO, 0)

End Sub

Private Sub limpiarCampos()

    Me.TB_FECHA_INICIO.Value = ""
    Me.TB_FECHA_INICIO.Enabled = False
    Me.BT_MODIFICAR_FECHA.Enabled = False
    Me.LA_FECHA_INICIO_ANT.Caption = ""
    
    Me.tb_fechaFin.Value = ""
    Me.tb_fechaFin.Enabled = False
    Me.bt_modificarFechaFin.Enabled = False
    Me.la_fechaFin_ant.Caption = ""
    
    Me.CB_TIPO_DE_EVENTO.Clear
    Me.CB_TIPO_DE_EVENTO.Enabled = False
    Me.BT_MODIFICAR_TIPO_EVENTO.Enabled = False
    Me.LA_TIPO_EVENTO_ANT.Caption = ""
    
    Me.CB_OBJETIVO.Clear
    Me.CB_OBJETIVO.Enabled = False
    Me.BT_MODIFICAR_OBJETIVO.Enabled = False
    Me.LA_OBJETIVO_ANT.Caption = ""
    
    Me.cb_mainCause.Clear
    Me.cb_mainCause.Enabled = False
    Me.bt_modificarMainCause.Enabled = False
    Me.la_mainCause_ant.Caption = ""
        
    Me.CB_METODO_CONSTRUCTIVO.Clear
    Me.CB_METODO_CONSTRUCTIVO.Enabled = False
    Me.BT_MODIFICAR_METODO_CONSTRUCTIVO.Enabled = False
    Me.LA_METODO_CONSTRUCTIVO_ANT.Caption = ""
    
    Me.CB_PURPOSE_POZO.Clear
    Me.CB_PURPOSE_POZO.Enabled = False
    Me.BT_MODIFICAR_PURPOSE_POZO.Enabled = False
    Me.LA_PURPOSE_POZO_ANT.Caption = ""
    
    Me.CB_OBJECTIVE_POZO.Clear
    Me.CB_OBJECTIVE_POZO.Enabled = False
    Me.BT_MODIFICAR_OBJECTIVE_POZO.Enabled = False
    Me.LA_OBJECTIVE_POZO_ANT.Caption = ""
    
    Me.CB_PATH_POZO.Clear
    Me.CB_PATH_POZO.Enabled = False
    Me.BT_MODIFICAR_PATH_POZO.Enabled = False
    Me.LA_PATH_POZO_ANT.Caption = ""
    
    Me.CB_DEPTH_POZO.Clear
    Me.CB_DEPTH_POZO.Enabled = False
    Me.BT_MODIFICAR_DEPTH_POZO.Enabled = False
    Me.LA_DEPTH_POZO_ANT.Caption = ""
    
    Me.cb_lateralLength.Clear
    Me.cb_lateralLength.Enabled = False
    Me.bt_modificarLateralLength.Enabled = False
    Me.la_lateralLenght_ant.Caption = ""
    
    Me.TB_ADJUSTED_BUDGET.Value = ""
    Me.TB_ADJUSTED_BUDGET.Enabled = False
    Me.BT_MODIFICAR_ADJ_BUDGET.Enabled = False
    Me.LA_ADJ_BUDGET_ANT.Caption = ""
    
    Me.op_capex.Enabled = False
    Me.op_capex.Value = False
    Me.op_opex.Enabled = False
    Me.op_opex.Value = False
    Me.bt_modificarCostType.Enabled = False
    Me.la_costType_ant.Caption = ""
    
    Me.TB_AUTHORIZED_TMD_V20.Value = ""
    Me.TB_AUTHORIZED_TMD_V20.Enabled = False
    Me.BT_MODIFICAR_AUTH_TMD_V20.Enabled = False
    Me.LA_AUTH_TMD_V20_ANT.Caption = ""
    
    Me.TB_AUTHORIZED_TMD_V30.Value = ""
    Me.TB_AUTHORIZED_TMD_V30.Enabled = False
    Me.BT_MODIFICAR_AUTH_TMD_V30.Enabled = False
    Me.LA_AUTH_TMD_V30_ANT.Caption = ""
    
    Me.TB_AUTHORIZED_TVD.Value = ""
    Me.TB_AUTHORIZED_TVD.Enabled = False
    Me.BT_MODIFICAR_AUTH_TVD.Enabled = False
    Me.LA_AUTH_TVD_ANT.Caption = ""
    
    Me.TB_BASELINE.Value = ""
    Me.TB_BASELINE.Enabled = False
    Me.BT_MODIFICAR_BASELINE.Enabled = False
    Me.LA_BASELINE_ANT.Caption = ""
    
    Me.TB_RIG_MOVE_DISTANCE.Value = ""
    Me.TB_RIG_MOVE_DISTANCE.Enabled = False
    Me.BT_MODIFICAR_RMD.Enabled = False
    Me.LA_RMD_ANT.Caption = ""
    
    Me.TB_EWI.Value = ""
    Me.TB_EWI.Enabled = False
    Me.BT_MODIFICAR_EWI.Enabled = False
    Me.LA_EWI_ANT.Caption = ""
    
    Me.CB_EQUIPO.Clear
    Me.CB_EQUIPO.Enabled = False
    Me.BT_MODIFICAR_EQUIPO.Enabled = False
    Me.LA_EQUIPO_ANT.Caption = ""
    
    Me.TB_ALTURA_NUEVA.Value = ""
    Me.TB_ALTURA_NUEVA.Enabled = False
    Me.BT_MODIFICAR_ALTURA_MESA.Enabled = False
    Me.LA_ALTURA_MESA_ANT.Caption = ""
    
    Me.CB_AREA.Clear
    Me.CB_AREA.Enabled = False
    Me.BT_MODIFICAR_AREA.Enabled = False
    Me.LA_AREA_ANT.Caption = ""
    
    Me.tb_observaciones.Value = ""
    Me.tb_observaciones.Enabled = False
    
    Me.BT_BUSCAR_EVENTO.Enabled = True
    Me.BT_SOLICITAR.Enabled = False
    
    Me.MultiPage1.Value = 0

End Sub
Attribute VB_Name = "RIBBONS"
'---------- Dimenesiono la variable Ribbon
Dim myRibbon As IRibbonUI

Sub GoInicio(control As IRibbonControl)
    
    ThisWorkbook.Sheets("DATOS_GENERALES").Activate
    
End Sub

'>>> SUBRUTINA PARA SALIR
Sub GoSalir(control As IRibbonControl)

    ' Cierro el libro grabando los cambios
    ThisWorkbook.Close False

End Sub

Sub GoAltaEvento(control As IRibbonControl)
    
    Dim QueryPermisoAltaEvento As String
    Dim FORMULARIO As Object
    
    QueryPermisoAltaEvento = "SELECT 1 FROM USUARIOS WHERE USUARIO_RED='" & UsuarioActual & "' AND COD_FUNCION IN (" & C_FUNCION_ADMIN & "," & _
                                 C_FUNCION_INGENIERO & "," & C_FUNCION_INGENIERO_WO & ") AND BAJA=0"

    If (TienePermiso(QueryPermisoAltaEvento) > 0) Then
        Set FORMULARIO = New ALTA_EVENTO_V2
        FORMULARIO.inicializarFormulario (0)
        FORMULARIO.Show
    Else
        MsgBox "No posee Permisos para acceder a la aplicaci|fffd|n", vbCritical, "ALTA DE EVENTOS"
    End If
        
End Sub

Sub GoModificacionEvento(control As IRibbonControl)
    
    Dim QueryPermisoEvento As String
    
    QueryPermisoEvento = "SELECT 1 FROM USUARIOS WHERE USUARIO_RED='" & UsuarioActual & "' AND COD_FUNCION IN (" & _
                         C_FUNCION_ADMIN & "," & C_FUNCION_CM & "," & C_FUNCION_CM_WO & "," & C_FUNCION_INGENIERO & "," & C_FUNCION_INGENIERO_WO & ") " & _
                         "AND BAJA=0"

    If (TienePermiso(QueryPermisoEvento) > 0) Then
        Set FORMULARIO = New MODIFICACION_EVENTO
        FORMULARIO.inicializarFormulario (0)
        FORMULARIO.Show
    Else
        MsgBox "No posee Permisos para acceder a la aplicaci|fffd|n", vbCritical, "MODIFICACION DE EVENTOS"
    End If
    
End Sub

Sub GoDesbloqueoEvento(control As IRibbonControl)
    
    Dim QueryPermisoEvento As String
    Dim FORMULARIO As Object
    
    QueryPermisoEvento = "SELECT 1 FROM USUARIOS WHERE USUARIO_RED='" & UsuarioActual & "' AND COD_FUNCION IN (" & C_FUNCION_ADMIN & "," & _
                                        C_FUNCION_CM & "," & C_FUNCION_CM_WO & "," & C_FUNCION_INGENIERO & "," & _
                                        C_FUNCION_INGENIERO_WO & ", " & C_FUNCION_ANALISTA_ESPECIALISTA & ") AND BAJA=0"

    If (TienePermiso(QueryPermisoEvento) > 0) Then
        Set FORMULARIO = New DESBLOQUEO_EVENTO
        FORMULARIO.inicializarFormulario 0, "DESBLOQUEO DE EVENTO"
        FORMULARIO.Show
    Else
        MsgBox "No posee Permisos para acceder a la aplicaci|fffd|n", vbCritical, "DESBLOQUEO DE EVENTOS"
    End If
    
End Sub

Sub GoDesbloqueoReporte(control As IRibbonControl)
    
    Dim QueryPermisoEvento As String
    Dim FORMULARIO As Object
    
    QueryPermisoEvento = "SELECT 1 FROM USUARIOS WHERE USUARIO_RED='" & UsuarioActual & "' AND COD_FUNCION IN (" & C_FUNCION_ADMIN & "," & _
                                        C_FUNCION_CM & "," & C_FUNCION_CM_WO & "," & C_FUNCION_INGENIERO & "," & _
                                        C_FUNCION_INGENIERO_WO & ", " & C_FUNCION_ANALISTA_ESPECIALISTA & ") AND BAJA=0"

    If (TienePermiso(QueryPermisoEvento) > 0) Then
        Set FORMULARIO = New DESBLOQUEO_REPORTE
        FORMULARIO.inicializarFormulario 0, "DESBLOQUEO DE REPORTE"
        FORMULARIO.Show
    Else
        MsgBox "No posee Permisos para acceder a la aplicaci|fffd|n", vbCritical, "DESBLOQUEO DE REPORTES"
    End If
    
End Sub

Sub GoBajaEvento(control As IRibbonControl)

    Dim QueryPermisoEvento As String
    Dim FORMULARIO As Object
    
    QueryPermisoEvento = "SELECT 1 FROM USUARIOS WHERE USUARIO_RED='" & UsuarioActual & "' AND COD_FUNCION IN (" & C_FUNCION_ADMIN & "," & _
                                        C_FUNCION_CM & "," & C_FUNCION_CM_WO & "," & C_FUNCION_INGENIERO & "," & _
                                        C_FUNCION_INGENIERO_WO & ", " & C_FUNCION_ANALISTA_ESPECIALISTA & ") AND BAJA=0"

    If (TienePermiso(QueryPermisoEvento) > 0) Then
        Set FORMULARIO = New DESBLOQUEO_EVENTO
        FORMULARIO.inicializarFormulario 0, "BAJA DE EVENTO"
        FORMULARIO.Show
    Else
        MsgBox "No posee Permisos para acceder a la aplicaci|fffd|n", vbCritical, "DESBLOQUEO DE EVENTOS"
    End If

End Sub

Sub GoBajaReporte(control As IRibbonControl)

    Dim QueryPermisoEvento As String
    Dim FORMULARIO As Object
    
    QueryPermisoEvento = "SELECT 1 FROM USUARIOS WHERE USUARIO_RED='" & UsuarioActual & "' AND COD_FUNCION IN (" & C_FUNCION_ADMIN & "," & _
                                        C_FUNCION_CM & "," & C_FUNCION_CM_WO & "," & C_FUNCION_INGENIERO & "," & _
                                        C_FUNCION_INGENIERO_WO & ", " & C_FUNCION_ANALISTA_ESPECIALISTA & ") AND BAJA=0"

    If (TienePermiso(QueryPermisoEvento) > 0) Then
        Set FORMULARIO = New DESBLOQUEO_REPORTE
        FORMULARIO.inicializarFormulario 0, "BAJA DE REPORTE"
        FORMULARIO.Show
    Else
        MsgBox "No posee Permisos para acceder a la aplicaci|fffd|n", vbCritical, "DESBLOQUEO DE REPORTES"
    End If


End Sub

'INGRESO A LA BANDEJA DE SOLICITUDES
Sub GoBandejaSolicitudes(control As IRibbonControl)

    Dim QueryPermisoEvento As String
    
    QueryPermisoEvento = "SELECT 1 FROM USUARIOS WHERE USUARIO_RED = '" & UsuarioActual & "' AND COD_FUNCION IN (" & C_FUNCION_ADMIN & "," & _
                         C_FUNCION_RESPONSABLE_UG & "," & C_FUNCION_RESPONSABLE_UG_WO & "," & C_FUNCION_RESPONSABLE_UG_PCG & ", " & C_FUNCION_ADMIN_OW & _
                         ", " & C_FUNCION_ASISTENTE_TECNICO_GENERICO & ") " & _
                         " AND BAJA = 0"

    If (TienePermiso(QueryPermisoEvento) > 0) Then
        BANDEJA_SOLICITUDES_V2.Show
    Else
         MsgBox "No posee Permisos para acceder a la aplicaci|fffd|n", vbCritical, "MODIFICACION DE EVENTOS"
    End If
        
End Sub

Sub GoSeguimientoSolicitudes(control As IRibbonControl)
    
    ThisWorkbook.Sheets(H_SEGUIMIENTO_SOLICITUDES).Activate

End Sub

Attribute VB_Name = "RUTINAS"
'>>> RUTINA PARA DESPROTEGER UNA HOJA
Public Sub PR_HOJA(ByVal hoja As String, Optional ByVal tipo As Integer)

    If tipo = 1 Then
        Sheets(hoja).Protect Password:="SOLearme3-8", DrawingObjects:=True, Contents:=True, Scenarios:=True _
            , AllowSorting:=True, AllowFiltering:=True, AllowUsingPivotTables:=True
    Else
        Sheets(hoja).Protect Password:="SOLearme3-8", DrawingObjects:=True, Contents:=True, Scenarios:=True
    End If

End Sub

'>>> RUTINA PARA PROTEGER UNA HOJA
Public Sub DPR_HOJA(ByVal hoja As String)
    
    Sheets(hoja).Unprotect Password:="SOLearme3-8"

End Sub


'>>> RUTINA PARA PEGAR LOS VALORES Y NO EL FORMATO
Public Sub PegarValor()

    On Error Resume Next
    Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks:=False, Transpose:=False
    
End Sub

'>>> RUTINA PARA GUARDAR EL ARCHIVO CON EL NOMBRE DEL POZO
Public Sub GUARDAR_ARCHIVO(ByVal NUEVO_NOMBRE As String)

    ' Dimensiono las variables
    Dim NOMBRE_ACTUAL As String
    Dim Mensaje As String
    
    ' Saco el nombre actual
    NOMBRE_ACTUAL = UCase(ThisWorkbook.Name)
    
    ' Valido que nombre del archivo sea el correcto
    If Left(NOMBRE_ACTUAL, 11) = "MODULO DBUG" Then
    
        NOMBRE_NUEVO_ARCHIVO = ThisWorkbook.PATH & "\" & ADECUAR_NOMBRE(NUEVO_NOMBRE) & ".xlsb"
        
        Application.DisplayAlerts = False
        ThisWorkbook.SaveAs Filename:=NOMBRE_NUEVO_ARCHIVO
        Application.DisplayAlerts = True
        
        ' Actualizo el link del libro
        Call DPR_HOJA(H_LINKS)
        Sheets(H_LINKS).Range("E11").Value = ThisWorkbook.FullName
        Call PR_HOJA(H_LINKS)
        
        Exit Sub
    
    End If

End Sub

'>>> FUNCION PARA AGREGADO DE VALORES A UN LIST CON TRANSPOSE
Public Sub agregarAlListBox(ByVal cantColumnas As Integer, ByVal rs As ADODB.Recordset, ByVal list As MSForms.ListBox)

    ' Dimensiono las variables
    Dim aux() As Variant
    Dim i As Integer
    
    If rs.RecordCount = 1 Then
        ReDim aux(0, cantColumnas) As Variant
        For i = 0 To cantColumnas - 1
            aux(0, i) = rs.Fields(i)
        Next i
        list.list = aux
    ElseIf rs.RecordCount = 0 Then
        list.Clear
        Exit Sub
    Else
        ReDim aux(rs.RecordCount - 1, cantColumnas) As Variant
        Dim H As Integer
        H = 0
        Do While Not rs.EOF
            For i = 0 To cantColumnas - 1
                aux(H, i) = rs.Fields(i)
            Next i
            H = H + 1
            rs.MoveNext
        Loop
        list.list = aux
    End If

End Sub

'Se carga el LISTBOX seg|fffd|n la query especificada en los par|fffd|metros
Public Sub agregarAlListBoxRS(ByVal sqlstring As String, ByRef list As MSForms.ListBox)

    Dim aux() As Variant
    Dim i As Integer
    Dim cantColumnas As Integer
    Dim cn As ADODB.Connection
    Dim rs As ADODB.Recordset
    
    Set cn = New ADODB.Connection
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient
    
    cn.Open CN_STRING()
    rs.Open sqlstring, cn, , , adCmdText
    
    If (rs.RecordCount = 0) Then
        list.Clear
        
        Set rs = Nothing
        cn.Close
        Set cn = Nothing
        Exit Sub
    End If
    
    cantColumnas = rs.Fields.Count
    
    If rs.RecordCount = 1 Then
        ReDim aux(0, cantColumnas) As Variant
        
        For i = 0 To cantColumnas - 1
            aux(0, i) = rs.Fields(i)
        Next i
        
        list.list = aux
    Else
        ReDim aux(rs.RecordCount - 1, cantColumnas) As Variant
        Dim H As Integer
        H = 0
        
        Do While Not rs.EOF
            For i = 0 To cantColumnas - 1
                aux(H, i) = rs.Fields(i)
            Next i
            H = H + 1
            rs.MoveNext
        Loop
        
        list.list = aux
    End If
    
    Set rs = Nothing
    cn.Close
    Set cn = Nothing

End Sub

'>>> RUTINA PARA AGREGADO DE VALORES A UN COMBOBOX DESDE UN RECORDSET
Public Sub agregarAlComboBox(ByRef Combo As ComboBox, ByVal sqlstring As String)
    
    'Dimensiono las variables
    Dim aux() As Variant
    Dim i As Integer
    Dim cantColumnas As Integer
    Dim cn As ADODB.Connection
    Dim rs As ADODB.Recordset
    
    Set cn = New ADODB.Connection
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient
    
    cn.Open CN_STRING()
    
    rs.Open sqlstring, cn, , , adCmdText
    
    Combo.Clear
    
    If (rs.RecordCount = 0) Then
        Set rs = Nothing
        cn.Close
        Set cn = Nothing
        Exit Sub
    End If
    
    cantColumnas = rs.Fields.Count

    If (rs.RecordCount = 1) Then
        ReDim aux(0, cantColumnas) As Variant
        For i = 0 To cantColumnas - 1
            aux(0, i) = rs.Fields(i)
        Next i
        
        Combo.list = aux
    Else
        ReDim aux(rs.RecordCount - 1, cantColumnas) As Variant
        Dim H As Integer
        H = 0
        
        Do While Not rs.EOF
            For i = 0 To cantColumnas - 1
                aux(H, i) = rs.Fields(i)
            Next i
            
            H = H + 1
            rs.MoveNext
        Loop
        
        Combo.list = aux
    End If
    
    Set rs = Nothing
    cn.Close
    Set cn = Nothing

End Sub

'>>> RUTINA PARA GENERAR EL PDF
Public Sub GENERAR_PDF(ByVal hoja As String, ByVal ADJUNTO As String)

    ' Deshabilito las alertas
    Application.DisplayAlerts = False
    
    ' Exporto a PDF
    ThisWorkbook.Sheets(Array(hoja)).Select
    
    ActiveSheet.ExportAsFixedFormat _
        Type:=xlTypePDF, _
        Filename:=ADJUNTO, _
        Quality:=xlQualityStandard, _
        IncludeDocProperties:=True, _
        IgnorePrintAreas:=False, _
        OpenAfterPublish:=False
    
    ' Habilito las alertas
    Application.DisplayAlerts = True
    
End Sub

'>>> RUTINA PARA ENV|fffd|O DE MAILS EN FORMA AUTOM|fffd|TICA
Public Sub enviarMail(ByVal destinatario As String, ByVal ASUNTO As String, ByVal CUERPO As String, Optional ByVal ADJUNTO As String, Optional ByVal COPIA As String)
    
    Application.DisplayAlerts = False
    
    'Dimensiono las variables
    Dim OutApp As Object
    Dim OutMail As Object
    Dim objNsp As Object
    Dim colSyc As Object
    Dim objSyc As Object

    ' Creo los objeto del outlook
    Set OutApp = CreateObject("Outlook.Application")
    Set OutMail = OutApp.CreateItem(0)
    Set objNsp = OutApp.Application.GetNamespace("MAPI")
    Set colSyc = objNsp.SyncObjects
        
    ' Env|fffd|o el mail a los destinatarios
    With OutMail
        .To = destinatario
        'If COPIA <> vbNullString Then
            .CC = "ascarzello@pan-energy.com"
        'Else
         '   .CC = ""
        'End If
        .BCC = ""
        .Subject = ASUNTO
        .Body = CUERPO
        If Trim(ADJUNTO) <> vbNullString Then
            .Attachments.Add ADJUNTO
        End If
        Set .SendUsingAccount = OutApp.Session.accounts.Item(1)
        .Send
    End With
    For i = 1 To colSyc.Count
        Set objSyc = colSyc.Item(i)
        objSyc.Start
    Next
        
    ' Destruyo todos los objetos
    Set OutMail = Nothing
    Set OutApp = Nothing
    Set objNsp = Nothing
    Set colSyc = Nothing
    Set objSyc = Nothing
    
    Application.DisplayAlerts = True
    
End Sub

Public Sub aplicarTemplate(ByRef FORMULARIO As Object)
    Dim CCONT As control
    FORMULARIO.BackColor = RGB(252, 250, 254)

    For Each CCONT In FORMULARIO.Controls
        Select Case TypeName(CCONT)
            Case "Label"
                CCONT.BackColor = RGB(244, 236, 244)
'                CCONT.SpecialEffect = fmSpecialEffectEtched
'                CCONT.ForeColor = RGB(255, 255, 255)
'                CCONT.Font.Bold = True
'                CCONT.Font.Name = "Arial"
            Case "Frame"
                CCONT.BackColor = RGB(244, 236, 244)
                CCONT.BorderColor = RGB(244, 236, 244)
            Case "MultiPage"
                CCONT.BackColor = RGB(244, 236, 244)
            Case "TextBox"
                CCONT.SpecialEffect = fmSpecialEffectEtched
            Case "ComboBox"
                CCONT.SpecialEffect = fmSpecialEffectEtched
            Case "ListBox"
                CCONT.SpecialEffect = fmSpecialEffectEtched
            Case "OptionButton"
                CCONT.BackColor = RGB(244, 236, 244)
        End Select
    Next CCONT
    
End Sub

Public Sub cargarComboBoxTipoEvento(ByRef ComboBoxTipoEvento As ComboBox, ByVal codigoFuncion As String)

    ' Dimensiono variables locales
    Dim queryString As String
    
    ' Tipos de evento segun CO/WO o DRILLING
    Select Case codigoFuncion
    
        Case C_FUNCION_CM, C_FUNCION_INGENIERO
            queryString = "SELECT OW_ID_TIPO_EVENTO, COD_EVENTO, CONCAT(COD_EVENTO , ' - ' , DESCRIPCION) FROM TIPO_EVENTO WHERE ACTIVO = 1 AND BAJA = 0 AND " & _
                          "OW_ID_TIPO_EVENTO IN ('" & C_DOF_ID & "', '" & C_DON_ID & "', '" & C_MOB_ID & "', '" & C_RON_ID & "', '" & C_STB_ID & "') " & _
                          "ORDER BY COD_EVENTO"
        
        Case C_FUNCION_CM_WO, C_FUNCION_INGENIERO_WO
            queryString = "SELECT OW_ID_TIPO_EVENTO, COD_EVENTO, CONCAT(COD_EVENTO , ' - ' , DESCRIPCION) FROM TIPO_EVENTO WHERE ACTIVO = 1 AND BAJA = 0 AND " & _
                          "OW_ID_TIPO_EVENTO IN ('" & C_CON_ID & "', '" & C_WO_ID & "', '" & C_IWO_ID & "', '" & C_REP_ID & "', '" & C_ABN_ID & "', '" & C_STB_ID & "') " & _
                          "ORDER BY COD_EVENTO"
        
        Case Else
            queryString = "SELECT OW_ID_TIPO_EVENTO, COD_EVENTO, CONCAT(COD_EVENTO , ' - ' , DESCRIPCION) FROM TIPO_EVENTO WHERE ACTIVO = 1 AND BAJA = 0 ORDER BY COD_EVENTO"
        
    End Select
    
    Call agregarAlComboBox(ComboBoxTipoEvento, queryString)

End Sub

Public Sub cargarIDTipoEvento()

    ' Cargo los IDs
    C_MOB_ID = obtenerIDTipoEvento(C_MOB_COD)
    C_DON_ID = obtenerIDTipoEvento(C_DON_COD)
    C_RON_ID = obtenerIDTipoEvento(C_RON_COD)
    C_DOF_ID = obtenerIDTipoEvento(C_DOF_COD)
    C_CON_ID = obtenerIDTipoEvento(C_CON_COD)
    C_WO_ID = obtenerIDTipoEvento(C_WO_COD)
    C_REP_ID = obtenerIDTipoEvento(C_REP_COD)
    C_STB_ID = obtenerIDTipoEvento(C_STB_COD)
    C_ABN_ID = obtenerIDTipoEvento(C_ABN_COD)
    
End Sub


Attribute VB_Name = "RUTINAS_SEGUIMIENTO"
Public banderaEventos As Boolean

Public Sub ejecutarSeguimientoSolicitudes()

    Dim queryString As String
    Dim cn As ADODB.Connection
    Dim rs As ADODB.Recordset
       
    Call limpiarSeguimientoSolicitudes
    
    banderaEventos = True
    
    Set cn = New ADODB.Connection
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient
        
    queryString = "SELECT S.ID_SOLICITUD, UG.DESCRIPCION, CONCAT(U1.APELLIDO, ', ', U1.NOMBRE) SOLICITANTE, TS.DESCRIPCION, S.FECHA_SOLICITUD, " & _
                  "ISNULL(SOL3.DESCRIPCION, ISNULL(SOL2.DESCRIPCION, ISNULL(SOL1.DESCRIPCION, SOL4.DESCRIPCION))) ESTADO_SOLICITUD, " & _
                  "ISNULL(EQ1.DESCRIPCION, ISNULL(EQ2.DESCRIPCION, EQ3.DESCRIPCION)) EQUIPO, ISNULL(SP.DESCRIPCION, P.DESCRIPCION) POZO, " & _
                  "ISNULL(TE1.DESCRIPCION, ISNULL(TE2.DESCRIPCION, TE3.DESCRIPCION)) TIPO_EVENTO, ISNULL(E.FECHA_INICIO_EVENTO, " & _
                  "ISNULL(EO1.OW_FECHA_INICIO_EVENTO, EO2.OW_FECHA_INICIO_EVENTO)) FECHA_INICIO_EVENTO, " & _
                  "ISNULL(E.FECHA_FIN_EVENTO, ISNULL(EO1.OW_FECHA_FIN_EVENTO, EO2.OW_FECHA_FIN_EVENTO)) FECHA_FIN_EVENTO, R.OW_ID_TIPO_REPORTE, " & _
                  "R.FECHA_REPORTE, CASE WHEN SOL1.APELLIDO IS NULL THEN '' ELSE CONCAT(SOL1.APELLIDO, ', ', SOL1.NOMBRE) END APROBADOR, " & _
                  "SOL1.FECHA_EJECUCION FECHA_APROBACION, CASE WHEN SOL2.APELLIDO IS NULL THEN '' ELSE CONCAT(SOL2.APELLIDO, ', ', SOL2.NOMBRE) END ADMIN_OW, " & _
                  "SOL2.FECHA_EJECUCION FECHA_DELEGACION, CASE WHEN SOL3.APELLIDO IS NULL THEN '' ELSE CONCAT(SOL3.APELLIDO, ', ', SOL3.NOMBRE) END EJECUTANTE, " & _
                  "SOL3.FECHA_EJECUCION FECHA_FINALIZACION FROM SOLICITUD S JOIN USUARIOS U1 ON U1.KEY_USUARIO = S.SOLICITANTE JOIN UGESTION UG ON UG.OW_CODIGO = U1.OW_CODIGO_UG " & _
                  "JOIN TIPO_SOLICITUD TS ON TS.ID_TIPO_SOLICITUD = S.ID_TIPO_SOLICITUD LEFT JOIN EVENTO E ON E.ID_EVENTO = S.ID_EVENTO "
   queryString = queryString & "LEFT JOIN EVENTO_OW EO1 ON E.OW_ID_EVENTO = EO1.OW_ID_EVENTO LEFT JOIN EQUIPOS EQ1 ON EQ1.OW_ID_EQUIPO = E.OW_ID_EQUIPO " & _
                 "LEFT JOIN TIPO_EVENTO TE1 ON TE1.OW_ID_TIPO_EVENTO = E.OW_ID_TIPO_EVENTO LEFT JOIN EQUIPOS EQ2 ON EQ2.OW_ID_EQUIPO = EO1.OW_ID_EQUIPO " & _
                 "LEFT JOIN TIPO_EVENTO TE2 ON TE2.OW_ID_TIPO_EVENTO = EO1.OW_ID_TIPO_EVENTO LEFT JOIN SOLICITUD_POZO SP ON SP.ID_POZO = E.ID_POZO " & _
                 "LEFT JOIN REPORTE R ON R.ID_REPORTE = S.ID_REPORTE LEFT JOIN EVENTO_OW EO2 ON EO2.OW_ID_EVENTO = R.OW_ID_EVENTO LEFT JOIN TIPO_EVENTO TE3 ON TE3.OW_ID_TIPO_EVENTO = EO2.OW_ID_TIPO_EVENTO " & _
                 "LEFT JOIN EQUIPOS EQ3 ON EQ3.OW_ID_EQUIPO = EO2.OW_ID_EQUIPO LEFT JOIN POZOS P ON P.OW_COD_POZO = EO2.OW_ID_POZO " & _
                 "LEFT JOIN (SELECT SO1.ID_SOLICITUD, U.APELLIDO, U.NOMBRE, ES.DESCRIPCION, SO1.FECHA_EJECUCION FROM SOLICITUDES SO1 JOIN USUARIOS U ON U.KEY_USUARIO = SO1.EJECUTANTE JOIN ESTADO_SOLICITUD ES ON ES.ID_ESTADO_SOLICITUD = SO1.ID_ESTADO_SOLICITUD WHERE SO1.ID_ESTADO_SOLICITUD = 6) SOL1 ON SOL1.ID_SOLICITUD = S.ID_SOLICITUD " & _
                 "LEFT JOIN (SELECT SO2.ID_SOLICITUD, U.APELLIDO, U.NOMBRE, ES.DESCRIPCION, SO2.FECHA_EJECUCION FROM SOLICITUDES SO2 JOIN USUARIOS U ON U.KEY_USUARIO = SO2.EJECUTANTE JOIN ESTADO_SOLICITUD ES ON ES.ID_ESTADO_SOLICITUD = SO2.ID_ESTADO_SOLICITUD WHERE SO2.ID_ESTADO_SOLICITUD = 5) SOL2 ON SOL2.ID_SOLICITUD = S.ID_SOLICITUD " & _
                 "LEFT JOIN (SELECT SO3.ID_SOLICITUD, U.APELLIDO, U.NOMBRE, ES.DESCRIPCION, SO3.FECHA_EJECUCION FROM SOLICITUDES SO3 JOIN USUARIOS U ON U.KEY_USUARIO = SO3.EJECUTANTE JOIN ESTADO_SOLICITUD ES ON ES.ID_ESTADO_SOLICITUD = SO3.ID_ESTADO_SOLICITUD WHERE SO3.ID_ESTADO_SOLICITUD IN (3,4)) SOL3 ON SOL3.ID_SOLICITUD = S.ID_SOLICITUD " & _
                 "LEFT JOIN (SELECT SO4.ID_SOLICITUD, U.APELLIDO, U.NOMBRE, ES.DESCRIPCION, SO4.FECHA_EJECUCION FROM SOLICITUDES SO4 JOIN USUARIOS U ON U.KEY_USUARIO = SO4.EJECUTANTE JOIN ESTADO_SOLICITUD ES ON ES.ID_ESTADO_SOLICITUD = SO4.ID_ESTADO_SOLICITUD WHERE SO4.ID_ESTADO_SOLICITUD = 1) SOL4 ON SOL4.ID_SOLICITUD = S.ID_SOLICITUD " & _
                 "ORDER BY S.ID_SOLICITUD DESC"
    
    cn.Open CN_STRING()
    rs.Open queryString, cn, , , adCmdText
    
    

    If rs.RecordCount > 0 Then
       rs.MoveFirst
       Worksheets("SEGUIMIENTO_SOLICITUDES").Unprotect Password:="SOLearme3-8"
       Worksheets("SEGUIMIENTO_SOLICITUDES").Range("B9:T" & rs.RecordCount + 8).Value = miTranspose(rs, rs.Fields.Count)
    Else
        Call MsgBox("No se han encontrado resultados para la b|fffd|squeda realizada", vbExclamation, "Advertencia")
    End If
    
    Worksheets("SEGUIMIENTO_SOLICITUDES").Range("B8:T" & rs.RecordCount + 8).Select
    If Worksheets("SEGUIMIENTO_SOLICITUDES").AutoFilterMode Then
        Selection.AutoFilter
    End If
    Selection.AutoFilter
    Worksheets("SEGUIMIENTO_SOLICITUDES").Range("B9").Select
    Worksheets("SEGUIMIENTO_SOLICITUDES").Protect Password:="SOLearme3-8", DrawingObjects:=True, Scenarios:=True, AllowFiltering:=True
    
    banderaEventos = False
    
    rs.Close
    Set rs = Nothing
    cn.Close
    Set cn = Nothing
    
    
End Sub

Public Sub limpiarSeguimientoSolicitudes()

    banderaEventos = True
    Worksheets("SEGUIMIENTO_SOLICITUDES").Unprotect Password:="SOLearme3-8"
    For i = 1 To 19
        Worksheets("SEGUIMIENTO_SOLICITUDES").Range("$B$8:$T$20000").AutoFilter Field:=i
    Next i
    Worksheets("SEGUIMIENTO_SOLICITUDES").Range("B9:T20000").ClearContents
    Worksheets("SEGUIMIENTO_SOLICITUDES").Range("B9").Select
    Worksheets("SEGUIMIENTO_SOLICITUDES").Protect Password:="SOLearme3-8", DrawingObjects:=True, Scenarios:=True, AllowFiltering:=True
    banderaEventos = False

End Sub


Public Sub exportarExcel()

    Application.ScreenUpdating = False
    Dim nuevoLibro As Workbook
    Set nuevoLibro = Workbooks.Add
    nuevoLibro.Worksheets(1).Name = "SOLICITUDES"
    
    banderaEventos = True
   
    ThisWorkbook.Sheets("SEGUIMIENTO_SOLICITUDES").Range("B8:T8").Copy
    nuevoLibro.Worksheets(1).Range("A1").PasteSpecial
    
    Dim i As Integer
    
    i = 0
    j = 2
    Do While ThisWorkbook.Sheets("SEGUIMIENTO_SOLICITUDES").Range("B" & 9 + i).Value <> ""
        If Not ThisWorkbook.Sheets("SEGUIMIENTO_SOLICITUDES").Range("B" & 9 + i).EntireRow.Hidden Then
            ThisWorkbook.Sheets("SEGUIMIENTO_SOLICITUDES").Range("B" & 9 + i & ":T" & 9 + i).Copy
            nuevoLibro.Worksheets(1).Range("A" & j).PasteSpecial
            j = j + 1
        End If
        i = i + 1
    Loop

    Application.ScreenUpdating = True
    banderaEventos = False
    
End Sub
Attribute VB_Name = "STATUS_INICIO"
Attribute VB_Base = "0{286DB36D-95EE-4333-8EEB-1928204A21A4}{4AF41F07-167E-4564-A865-341C43EB1225}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'>>> EJECUCI|fffd|N DE PROCESOS DE INICIALIZACI|fffd|N DE LA APLICACI|fffd|N
Private Sub UserForm_Activate()

    ' Dimensiono las variables

    'Oculto los tildes
    Me.Image_USUA_OK.Visible = False
    Me.Image_BD_OK.Visible = False
    VALIDACION = True

    'SM 20161014: Se quita el ruteo
    If VERIFICAR_VERSION("SOCOW") = False Then
        Me.Image_BD_NO.Visible = True
        Me.Image_BD_OK.Visible = False
        Me.Repaint

        If (Sheets("LINKS").Range("C7").Value = C_AMBIENTE_PROD) Then
            Unload Me
            ThisWorkbook.Close False
        End If
        
        Exit Sub
    Else
        Me.Image_BD_NO.Visible = False
        Me.Image_BD_OK.Visible = True
        Me.Repaint
    End If

    ' Deshabilito todos los refrezcos de pantalla
    Application.ScreenUpdating = False
    Application.Calculation = xlCalculationManual

    If PERFIL_USUARIO = False Then
        'Si hubo un error se CIERRA LA APLICACION
        If (Sheets("LINKS").Range("C7").Value = C_AMBIENTE_PROD) Then
            ThisWorkbook.Close False
        End If
        
        Unload STATUS_INICIO
    Else
        If (Sheets("LINKS").Range("C7").Value <> C_AMBIENTE_PROD) Then
            Application.StatusBar = Sheets("LINKS").Range("C7").Value
        End If
    End If
    
    ' Cargo los IDs de los EVENTOS
    Call cargarIDTipoEvento
    
    'SM 20161123: si ya se revis|fffd| el perfil del usuario, se muestra la im|fffd|gen de OK
    Me.Image_USUA_NO.Visible = False
    Me.Image_USUA_OK.Visible = True
    
    'Habilito pantalla + calculo
    Application.ScreenUpdating = True
    Application.Calculation = xlCalculationAutomatic

    Unload Me

End Sub
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Workbook_Open()

    'SM 20161014: SE AGREGAN LA CONEXION A LA BD PARA LOS 3 AMBIENTES EN LA HOJA DE LINKS, PERO NO SE ACTUALIZA MAS
    Dim AMBIENTE_GLBLH As String
    
    'AMBIENTE_GLBLH = C_AMBIENTE_DEV
    AMBIENTE_GLBLH = C_AMBIENTE_PROD
    'AMBIENTE_GLBLH = C_AMBIENTE_TEST
    
    Call CargarEnrutador(AMBIENTE_GLBLH)
    
    ' Captura de teclas a no utilizar por el usuario
    Application.OnKey "^{PGDN}", ""
    Application.OnKey "^{PGUP}", ""
    Application.OnKey "^+{PGDN}", ""
    Application.OnKey "^+{PGUP}", ""
    Application.OnKey "^{F11}", ""
    Application.OnKey "+{F11}", ""
    Application.OnKey "^{V}", "PegarValor"
    Application.OnKey "^{v}", "PegarValor"
    Application.OnKey "^{X}", ""
    Application.OnKey "^{x}", ""
    Application.OnKey "^{W}", ""
    Application.OnKey "^{w}", ""
    Application.OnKey "^{H}", ""
    Application.OnKey "^{h}", ""
    Application.OnKey "^{F}", ""
    Application.OnKey "^{f}", ""
    Application.OnKey "^{D}", ""
    Application.OnKey "^{d}", ""
    Application.OnKey "^{B}", ""
    Application.OnKey "^{b}", ""
    Application.OnKey "^{A}", ""
    Application.OnKey "^{a}", ""
    Application.OnKey "^{9}", ""
    Application.OnKey "{F11}", ""
    Application.OnKey "{F12}", ""
    Application.OnKey "%+{F1}", ""
    Application.OnKey "+{F2}", ""
    Application.OnKey "^{F2}", ""
    Application.OnKey "+{F3}", ""
    Application.OnKey "^{F4}", ""
    Application.OnKey "+{F8}", ""
    Application.OnKey "%{F8}", ""
    Application.CutCopyMode = False
    Application.CellDragAndDrop = False
    Application.Calculation = xlCalculationAutomatic
    Application.DisplayFormulaBar = False

    ' Ejecuto el formulario de inicio
    STATUS_INICIO.Show
    
    ' Me paro en la hoja de datos Generales
    Sheets("DATOS_GENERALES").Activate
    Sheets("DATOS_GENERALES").Range("A1").Select

End Sub

Private Sub Workbook_Activate()

    ' Captura de teclas a no utilizar por el usuario
    Application.OnKey "^{PGDN}", ""
    Application.OnKey "^{PGUP}", ""
    Application.OnKey "^+{PGDN}", ""
    Application.OnKey "^+{PGUP}", ""
    Application.OnKey "^{F11}", ""
    Application.OnKey "+{F11}", ""
    Application.OnKey "^{V}", "PegarValor"
    Application.OnKey "^{v}", "PegarValor"
    Application.OnKey "^{X}", ""
    Application.OnKey "^{x}", ""
    Application.OnKey "^{W}", ""
    Application.OnKey "^{w}", ""
    Application.OnKey "^{H}", ""
    Application.OnKey "^{h}", ""
    Application.OnKey "^{F}", ""
    Application.OnKey "^{f}", ""
    Application.OnKey "^{D}", ""
    Application.OnKey "^{d}", ""
    Application.OnKey "^{B}", ""
    Application.OnKey "^{b}", ""
    Application.OnKey "^{A}", ""
    Application.OnKey "^{a}", ""
    Application.OnKey "^{9}", ""
    Application.OnKey "{F11}", ""
    Application.OnKey "{F12}", ""
    Application.OnKey "%+{F1}", ""
    Application.OnKey "+{F2}", ""
    Application.OnKey "^{F2}", ""
    Application.OnKey "+{F3}", ""
    Application.OnKey "^{F4}", ""
    Application.OnKey "+{F8}", ""
    Application.OnKey "%{F8}", ""
    Application.CutCopyMode = False
    Application.CellDragAndDrop = False
    Application.Calculation = xlCalculationAutomatic
    Application.DisplayFormulaBar = False


End Sub

Private Sub Workbook_BeforeClose(Cancel As Boolean)
    
    ' Captura de teclas a no utilizar por el usuario
    Application.OnKey "^{PGDN}"
    Application.OnKey "^{PGUP}"
    Application.OnKey "^+{PGDN}"
    Application.OnKey "^+{PGUP}"
    Application.OnKey "^{F11}"
    Application.OnKey "+{F11}"
    Application.OnKey "^{V}"
    Application.OnKey "^{v}"
    Application.OnKey "^{X}"
    Application.OnKey "^{x}"
    Application.OnKey "^{W}"
    Application.OnKey "^{w}"
    Application.OnKey "^{H}"
    Application.OnKey "^{h}"
    Application.OnKey "^{F}"
    Application.OnKey "^{f}"
    Application.OnKey "^{D}"
    Application.OnKey "^{d}"
    Application.OnKey "^{B}"
    Application.OnKey "^{b}"
    Application.OnKey "^{A}"
    Application.OnKey "^{a}"
    Application.OnKey "^{9}"
    Application.OnKey "{F11}"
    Application.OnKey "{F12}"
    Application.OnKey "%+{F1}"
    Application.OnKey "+{F2}"
    Application.OnKey "^{F2}"
    Application.OnKey "+{F3}"
    Application.OnKey "^{F4}"
    Application.OnKey "+{F8}"
    Application.OnKey "%{F8}"
    Application.CutCopyMode = True
    Application.CellDragAndDrop = True
    Application.DisplayFormulaBar = True
    
    ' Cierro el libro grabando los cambios
    Application.DisplayAlerts = False
    ThisWorkbook.Close False
    Application.DisplayAlerts = True
    
End Sub

Private Sub Workbook_Deactivate()
    
    ' Captura de teclas a no utilizar por el usuario
    Application.OnKey "^{PGDN}"
    Application.OnKey "^{PGUP}"
    Application.OnKey "^+{PGDN}"
    Application.OnKey "^+{PGUP}"
    Application.OnKey "^{F11}"
    Application.OnKey "+{F11}"
    Application.OnKey "^{V}"
    Application.OnKey "^{v}"
    Application.OnKey "^{X}"
    Application.OnKey "^{x}"
    Application.OnKey "^{W}"
    Application.OnKey "^{w}"
    Application.OnKey "^{H}"
    Application.OnKey "^{h}"
    Application.OnKey "^{F}"
    Application.OnKey "^{f}"
    Application.OnKey "^{D}"
    Application.OnKey "^{d}"
    Application.OnKey "^{B}"
    Application.OnKey "^{b}"
    Application.OnKey "^{A}"
    Application.OnKey "^{a}"
    Application.OnKey "^{9}"
    Application.OnKey "{F11}"
    Application.OnKey "{F12}"
    Application.OnKey "%+{F1}"
    Application.OnKey "+{F2}"
    Application.OnKey "^{F2}"
    Application.OnKey "+{F3}"
    Application.OnKey "^{F4}"
    Application.OnKey "+{F8}"
    Application.OnKey "%{F8}"
    Application.CutCopyMode = True
    Application.CellDragAndDrop = True
    Application.Calculation = xlCalculationAutomatic
    Application.DisplayFormulaBar = True

End Sub

Private Sub Workbook_WindowDeactivate(ByVal Wn As Window)

    ' Captura de teclas a no utilizar por el usuario
    Application.OnKey "^{PGDN}"
    Application.OnKey "^{PGUP}"
    Application.OnKey "^+{PGDN}"
    Application.OnKey "^+{PGUP}"
    Application.OnKey "^{F11}"
    Application.OnKey "+{F11}"
    Application.OnKey "^{V}"
    Application.OnKey "^{v}"
    Application.OnKey "^{X}"
    Application.OnKey "^{x}"
    Application.OnKey "^{W}"
    Application.OnKey "^{w}"
    Application.OnKey "^{H}"
    Application.OnKey "^{h}"
    Application.OnKey "^{F}"
    Application.OnKey "^{f}"
    Application.OnKey "^{D}"
    Application.OnKey "^{d}"
    Application.OnKey "^{B}"
    Application.OnKey "^{b}"
    Application.OnKey "^{A}"
    Application.OnKey "^{a}"
    Application.OnKey "^{9}"
    Application.OnKey "{F11}"
    Application.OnKey "{F12}"
    Application.OnKey "%+{F1}"
    Application.OnKey "+{F2}"
    Application.OnKey "^{F2}"
    Application.OnKey "+{F3}"
    Application.OnKey "^{F4}"
    Application.OnKey "+{F8}"
    Application.OnKey "%{F8}"
    Application.CutCopyMode = True
    Application.CellDragAndDrop = True
    Application.Calculation = xlCalculationAutomatic
    Application.DisplayFormulaBar = True

End Sub

Private Sub CargarEnrutador(ByVal ambiente As String)

    Dim rutaAmbiente As String
    
    'SM 20161014: Se quitan los ENTURADORES PARA SIEMPRE!!!
    Select Case ambiente
        Case C_AMBIENTE_DEV 'DESARROLLO
            rutaAmbiente = C_AMBIENTE_DEV
        Case C_AMBIENTE_PROD 'PRODUCCION
            rutaAmbiente = C_AMBIENTE_PROD
        Case C_AMBIENTE_TEST 'TESTING
            rutaAmbiente = C_AMBIENTE_TEST
        Case Default 'PRODUCCION
            rutaAmbiente = C_AMBIENTE_PROD
    End Select
    
    'Se modifica la ruta de acuerdo al ambiente
    Sheets("LINKS").Unprotect Password:="SOLearme3-8"
    Sheets("LINKS").Range("C7").Value = rutaAmbiente
    Sheets("LINKS").Range("E11").Value = ThisWorkbook.FullName
    Sheets("LINKS").Protect Password:="SOLearme3-8", DrawingObjects:=True, Contents:=True, Scenarios:=True
    
    EnableEvents = True
    Application.ScreenUpdating = False

End Sub


' InQuest injected base64 decoded content
' /z{h
' br+nt
' br+nt
' Lj)D

INQUEST-PP=macro
