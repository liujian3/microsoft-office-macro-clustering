Attribute VB_Name = "Module1"
Public Const xlcol_pricing_itm_id = "A"
Public Const xlcol_pricing_vnd_itm_id = "B"
Public Const xlcol_pricing_vnd_pdt_no = "C"
'--- Delete Request
Public Const xlcol_pricing_del_rqst_tx = "D"
'--- Net Pricing Flag
Public Const xlcol_pricing_net_prc_fl = "E"
'--- RBP Price Group ID
Public Const xlcol_pricing_rbp_prc_grp_id = "F"
'--- Consumer UPC (PRIMARY Field)
Public Const xlcol_pricing_con_upc_no = "G"
'--- Consumer Description (PRIMARY Field)
Public Const xlcol_pricing_con_dsc_tx = "H"
'--- Consumer Size
Public Const xlcol_pricing_con_siz_tx = "I"
'--- Store Receiving Unit/Pack
Public Const xlcol_pricing_cur_sto_rcv_unt_qy = "K"


'--- Case Pack
Public Const xlcol_pricing_cur_cas_pak_qy = "L"

'--- Case Cost
Public Const xlcol_pricing_cur_cas_cst_am = "M"

'--- Bottle Charge
Public Const xlcol_pricing_cur_btl_chr_am = "N"

'--- New SRU
Public Const xlcol_pricing_new_sto_rcv_unt_qy = "O"

'--- New Case Pack
Public Const xlcol_pricing_new_cas_pak_qy = "P"

'--- New Case Cost
Public Const xlcol_pricing_new_cas_cst_am = "Q"

'---New Bottle Charge
Public Const xlcol_pricing_new_btl_chr_am = "R"

'--- New Cost/Pack Effective Date
Public Const xlcol_pricing_sto_rcv_unt_eff_day_dt = "S"


'--- NEW Projected Kroger White Tag Retail
Public Const xlcol_pricing_prj_reg_rtl_am = "T"
'--- NEW Projected Kroger White Tag MU%
Public Const xlcol_pricing_prj_reg_rtl_mu_pt = "U"
'--- Supplier Suggested White Tag Retail
Public Const xlcol_pricing_sug_reg_rtl_am = "V"
'--- Supplier Suggested White Tag MU%
Public Const xlcol_pricing_sup_reg_rtl_mu_pt = "W"

'--- Existing Off Invoice
Public Const xlcol_pricing_exi_ofi_unt_am = "AB"
'--- Off Invoice
Public Const xlcol_pricing_ofi_unt_am = "AC"
Public Const xlcol_pricing_oi_stt_dt = "AD"
Public Const xlcol_pricing_oi_end_dt = "AE"
'--- Scan Down Allowance (SDA)
Public Const xlcol_pricing_sda_unt_am = "AF"
Public Const xlcol_pricing_sda_stt_dt = "AG"
Public Const xlcol_pricing_sda_end_dt = "AH"
'--- Net Cost Amount
Public Const xlcol_pricing_net_cst_am = "AI"
'--- Current Kroger White Tag Retail
Public Const xlcol_pricing_cur_reg_rtl_am = "AJ"
'--- Current Kroger White Tag MU%
Public Const xlcol_pricing_cur_reg_rtl_mu_pt = "AK"
'--- Kroger Projected Retail Price (Based on Rules)
Public Const xlcol_pricing_prj_rtl_am = "AL"
'--- Kroger Markup Percent
Public Const xlcol_pricing_kro_mu_pt = "AM"
'--- Supplier Suggested Retail Price
Public Const xlcol_pricing_sug_rtl_am = "AN"
'--- Supplier Markup Percent
Public Const xlcol_pricing_sup_mu_pt = "AO"
'--- Vendor Comments
Public Const xlcol_pricing_cmt_tx = "AQ"

Public Const xlcol_pricing_com_cd = "AR"
Public Const xlcol_pricing_sub_com_cd = "AS"


'--- ------------------------------------------------------------------------------------------------
'--- Contract Worksheet
'--- ------------------------------------------------------------------------------------------------
Public Const xlcol_contract_oi_stt_dt = "F"
Public Const xlcol_contract_oi_end_dt = "G"
Public Const xlcol_contract_ofi_unt_am = "E"




'--- ------------------------------------------------------------------------------------------------
'--- Header Variables
'--- ------------------------------------------------------------------------------------------------
Public Const xlcell_pricing_sls_pln_stt_dt = "D7"
Public Const xlcell_pricing_sls_pln_end_dt = "D8"
Public Const xlcell_pricing_sls_pln_div_no = "D1"
Public Const xlcell_pricing_sls_pln_dpt_no = "D2"
Public Const xlcell_pricing_rep_fst_nam_tx = "A11"
Public Const xlcell_pricing_rep_lst_nam_tx = "A12"
Public Const xlcell_pricing_rep_eml_adr_tx = "A13"
Public Const xlcell_pricing_outbound_email = "H9"

'--- Define Global Dictionary For Pricing Tab
Public dict_pricing_col As Dictionary

'--- Define Global Variables for Pricing Tab Sorting Functionality
Public level_1_sort_vlu As String
Public level_2_sort_vlu As String
Public level_3_sort_vlu As String

'--- Global Variable For Data Rows
Public Const xlrow_pricing_bgn = 20

'Public Declare Sub Sleep Lib "kernel32" (ByVal dwMilliseconds As Long)

Public outbound_email_address As String
Public cost_retail_redirect As String


Function ExtractElement(str, n, sepChar)

'   Returns the nth element from a string,
'   using a specified separator character
    Dim x As Variant
    x = Split(str, sepChar)
    If n > 0 And n - 1 <= UBound(x) Then
       ExtractElement = x(n - 1)
    Else
        ExtractElement = ""
    End If
End Function

Function GetDefaultEmailClient() As String

  Dim i As Long
  Dim n As Long
  Dim WSS As Object
  
   'access Windows scripting
    Set WSS = CreateObject("WScript.Shell")
  
   'read key from registry
    MailClient = WSS.RegRead("HKEY_CLASSES_ROOT\mailto\shell\open\command\")
    
   'Remove the command line
    MailClient = Left(MailClient, InStr(1, MailClient, " ") - 1)
    
     'Get the executable program name
      i = InStrRev(MailClient, "\")
      GetDefaultEmailClient = Mid(MailClient, i + 1, Len(MailClient) - i - 1)
    
    Set WSS = Nothing

End Function
Sub LookupEmail()
Dim objXLWS As Excel.Worksheet
Set objXLWS = ActiveWorkbook.Worksheets("PRICING")
outbound_email_address = Trim(objXLWS.Range(xlcell_pricing_outbound_email).Value)

End Sub
Sub CreateEmail()

'write the default Outlook contact name list to the active worksheet

Dim OlApp As Object
Dim OlMail As Object
Dim ToRecipient As Variant
Dim CcRecipient As Variant
Dim strArray() As String

Dim objXLWS As Excel.Worksheet
Set objXLWS = ActiveWorkbook.Worksheets("PRICING")

Set OlApp = CreateObject("Outlook.Application")
Set OlMail = OlApp.createitem(olmailitem)
outbound_email_address = Trim(objXLWS.Range(xlcell_pricing_outbound_email).Value)
strArray = Split(outbound_email_address, ";")
'For Each ToRecipient In Array("ken.douglas@kroger.com", "jeff.colyer@kroger.com", "s0060pumaexchanget@kroger.com")
For Each ToRecipient In strArray
  OlMail.Recipients.Add ToRecipient
Next ToRecipient

'For Each CcRecipient In Array("josh.marsh@kroger.com")
'With OlMail.Recipients
'.Add CcRecipient
'.Type = olCC
'End With
'Next CcRecipient

'fill in Subject field
OlMail.Subject = "DSD PROMO"

'Add the active workbook as an attachment
OlMail.Attachments.Add frm_savefile.TextBox1.Value

'OlMail.Attachments.Add InputBox("Enter name of file to attach", "Email attachment")

'Display the message
OlMail.Display 'change this to OlMail.Send if you just want to send it without previewing it

End Sub

Function IsEmailValid(strEmail)
    Dim strArray As Variant
    Dim strItem As Variant
    Dim i As Long, c As String, blnIsItValid As Boolean
    blnIsItValid = True
     
    i = Len(strEmail) - Len(Application.Substitute(strEmail, "@", ""))
    If i <> 1 Then IsEmailValid = False: Exit Function
    ReDim strArray(1 To 2)
    strArray(1) = Left(strEmail, InStr(1, strEmail, "@", 1) - 1)
    strArray(2) = Application.Substitute(Right(strEmail, Len(strEmail) - Len(strArray(1))), "@", "")
    For Each strItem In strArray
        If Len(strItem) <= 0 Then
            blnIsItValid = False
            IsEmailValid = blnIsItValid
            Exit Function
        End If
        For i = 1 To Len(strItem)
            c = LCase(Mid(strItem, i, 1))
            If InStr("abcdefghijklmnopqrstuvwxyz_-.", c) <= 0 And Not IsNumeric(c) Then
                blnIsItValid = False
                IsEmailValid = blnIsItValid
                Exit Function
            End If
        Next i
        If Left(strItem, 1) = "." Or Right(strItem, 1) = "." Then
            blnIsItValid = False
            IsEmailValid = blnIsItValid
            Exit Function
        End If
    Next strItem
    If InStr(strArray(2), ".") <= 0 Then
        blnIsItValid = False
        IsEmailValid = blnIsItValid
        Exit Function
    End If
    i = Len(strArray(2)) - InStrRev(strArray(2), ".")
    If i <> 2 And i <> 3 Then
        blnIsItValid = False
        IsEmailValid = blnIsItValid
        Exit Function
    End If
    If InStr(strEmail, "..") > 0 Then
        blnIsItValid = False
        IsEmailValid = blnIsItValid
        Exit Function
    End If
    IsEmailValid = blnIsItValid
End Function

Public Sub lock_worksheet(my_worksheet)
    Sheets(my_worksheet).Protect Password:="Teri!", DrawingObjects:=True, Contents:=True, Scenarios:=True
    Sheets(my_worksheet).EnableSelection = xlUnlockedCells
    Sheets(my_worksheet).EnableSelection = xlLockedCells

    Application.ScreenUpdating = True
End Sub
Public Sub unlock_worksheet(my_worksheet)
        Application.ScreenUpdating = False
        Sheets(my_worksheet).Unprotect Password:="Teri!"
End Sub
Function validate_field(fld_vlu, fld_typ)
    Dim regEx As New VBScript_RegExp_55.RegExp
    Dim matches, s
    is_err = False
    '--- Check for cell type = NUMERIC
    If fld_typ = "numeric" Then
        '--- Confirm value provided by user was numeric
        If Len(fld_vlu) > 0 Then
            If IsNumeric(fld_vlu) = False Then
                is_err = True
            End If
        End If
    ElseIf fld_typ = "retail" Then
        'fld_vlu = "2/5.00"
        If Len(fld_vlu) > 0 Then
            regEx.Pattern = "\d+\/\d+\.*\d*"
            regEx.IgnoreCase = True 'True to ignore case
            regEx.Global = True 'True matches all occurances, False matches the first occurance
            If regEx.Test(fld_vlu) Then
                '--- Retail With Multiples Found, Split
                my_retail = Split(fld_vlu, "/", 2)
                my_rtl_qy = my_retail(0)
                my_rtl_am = my_retail(1)
                If IsNumeric(my_rtl_qy) = False Or IsNumeric(my_rtl_am) = False Then
                    is_err = True
                ElseIf my_rtl_qy <= 0 Or my_rtl_am <= 0 Then
                    is_err = True
                End If
            ElseIf IsNumeric(fld_vlu) = False Then
                is_err = True
            End If
        End If
    ElseIf fld_typ = "integer" Then
        If Len(fld_vlu) > 0 Then
            If IsNumeric(fld_vlu) Then
                If Int(Val(fld_vlu)) <> Val(fld_vlu) Then
                    is_err = True
                End If
            Else
                is_err = True
            End If
        End If
    End If
    
    'MsgBox (fld_typ)
    
    validate_field = is_err
End Function
Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "CommandButton3, 39, 2, MSForms, CommandButton"
Attribute VB_Control = "CommandButton2, 38, 3, MSForms, CommandButton"
Attribute VB_Control = "CommandButton1, 37, 4, MSForms, CommandButton"
    Dim iCount_1 As Integer
    Dim iCount_2 As Integer
    Dim iCount_3 As Integer
    Dim iCount_4 As Integer
    Dim iCount_5 As Integer
Dim iCount_A As Integer
Dim iCount_B As Integer
Dim iCount_C As Integer
Dim iCount_D As Integer
Dim iCount_E As Integer
Dim iCount_F As Integer
Dim iCount_G As Integer
Dim iCount_H As Integer
Dim iCount_I As Integer
Dim iCount_J As Integer
Dim iCount_K As Integer
Dim iCount_L As Integer
Dim iCount_M As Integer
Dim iCount_N As Integer
Dim iCount_O As Integer
Dim iCount_P As Integer
Dim iCount_Q As Integer
Dim iCount_R As Integer
Dim iCount_S As Integer
Dim iCount_T As Integer
Dim iCount_U As Integer
Dim iCount_V As Integer
Dim iCount_W As Integer
Dim iCount_X As Integer
Dim iCount_Y As Integer
Dim iCount_Z As Integer
Dim iCount_AA As Integer
Dim iCount_AB As Integer
Dim iCount_AC As Integer
Dim iCount_AD As Integer
Dim lst_cst_show_hide_fl As Integer
Dim promo_show_hide_fl As Integer


Private Sub UnlockMySheet()
        Application.ScreenUpdating = False
        ActiveSheet.Unprotect Password:="Teri!"
End Sub
Private Sub LockMySheet()
    ActiveSheet.Protect Password:="Teri!", DrawingObjects:=True, Contents:=True, Scenarios:=True
    ActiveSheet.EnableSelection = xlUnlockedCells
    'Range("G2").Select
    Application.ScreenUpdating = True
End Sub

Private Sub CommandButton1_Click()
   'ActiveWorkbook.Worksheets("PRICING").Range("A:A").EntireColumn.Hidden = False
   frm_sort.Show
   
End Sub

Private Sub CommandButton10_Click()
    UnlockMySheet
    If iCount_L <> 1 Then
        Range("L2").Select
        Selection.CurrentRegion.Select
        Selection.Sort Key1:=Range("L2"), Order1:=xlAscending, Header:=xlGuess ', _
            OrderCustom:=1, MatchCase:=False, Orientation:=xlTopToBottom, _
            DataOption1:=xlSortNormal
        Range("L2").Select
        iCount_L = 1

    Else
        Range("L2").Select
        Selection.CurrentRegion.Select
        Selection.Sort Key1:=Range("L2"), Order1:=xlDescending, Header:=xlGuess ', _
            OrderCustom:=1, MatchCase:=False, Orientation:=xlTopToBottom, _
            DataOption1:=xlSortNormal
        iCount_L = 0
        Range("L2").Select
    End If
    LockMySheet
End Sub

Private Sub CommandButton11_Click()
    UnlockMySheet
    If iCount_N <> 1 Then
        Range("N2").Select
        Selection.CurrentRegion.Select
        Selection.Sort Key1:=Range("N2"), Order1:=xlAscending, Header:=xlGuess ', _
            OrderCustom:=1, MatchCase:=False, Orientation:=xlTopToBottom, _
            DataOption1:=xlSortNormal
        Range("N2").Select
        iCount_N = 1

    Else
        Range("N2").Select
        Selection.CurrentRegion.Select
        Selection.Sort Key1:=Range("N2"), Order1:=xlDescending, Header:=xlGuess ', _
            OrderCustom:=1, MatchCase:=False, Orientation:=xlTopToBottom, _
            DataOption1:=xlSortNormal
        iCount_N = 0
        Range("N2").Select
    End If
    LockMySheet
End Sub

Private Sub CommandButton12_Click()
    UnlockMySheet
    If iCount_O <> 1 Then
        Range("O2").Select
        Selection.CurrentRegion.Select
        Selection.Sort Key1:=Range("O2"), Order1:=xlAscending, Header:=xlGuess ', _
            OrderCustom:=1, MatchCase:=False, Orientation:=xlTopToBottom, _
            DataOption1:=xlSortNormal
        Range("O2").Select
        iCount_O = 1

    Else
        Range("O2").Select
        Selection.CurrentRegion.Select
        Selection.Sort Key1:=Range("O2"), Order1:=xlDescending, Header:=xlGuess ', _
            OrderCustom:=1, MatchCase:=False, Orientation:=xlTopToBottom, _
            DataOption1:=xlSortNormal
        iCount_O = 0
        Range("O2").Select
    End If
    LockMySheet
End Sub


Private Sub CommandButton13_Click()
    UnlockMySheet
    If iCount_P <> 1 Then
        Range("P2").Select
        Selection.CurrentRegion.Select
        Selection.Sort Key1:=Range("P2"), Order1:=xlAscending, Header:=xlGuess ', _
            OrderCustom:=1, MatchCase:=False, Orientation:=xlTopToBottom, _
            DataOption1:=xlSortNormal
        Range("P2").Select
        iCount_P = 1

    Else
        Range("P2").Select
        Selection.CurrentRegion.Select
        Selection.Sort Key1:=Range("P2"), Order1:=xlDescending, Header:=xlGuess ', _
            OrderCustom:=1, MatchCase:=False, Orientation:=xlTopToBottom, _
            DataOption1:=xlSortNormal
        iCount_P = 0
        Range("P2").Select
    End If
    LockMySheet

End Sub


Private Sub CommandButton14_Click()
    UnlockMySheet
    If iCount_Q <> 1 Then
        Range("Q2").Select
        Selection.CurrentRegion.Select
        Selection.Sort Key1:=Range("Q2"), Order1:=xlAscending, Header:=xlGuess ', _
            OrderCustom:=1, MatchCase:=False, Orientation:=xlTopToBottom, _
            DataOption1:=xlSortNormal
        Range("Q2").Select
        iCount_Q = 1

    Else
        Range("Q2").Select
        Selection.CurrentRegion.Select
        Selection.Sort Key1:=Range("Q2"), Order1:=xlDescending, Header:=xlGuess ', _
            OrderCustom:=1, MatchCase:=False, Orientation:=xlTopToBottom, _
            DataOption1:=xlSortNormal
        iCount_Q = 0
        Range("Q2").Select
    End If
    LockMySheet

End Sub


Private Sub CommandButton15_Click()
    UnlockMySheet
    If iCount_R <> 1 Then
        Range("R2").Select
        Selection.CurrentRegion.Select
        Selection.Sort Key1:=Range("R2"), Order1:=xlAscending, Header:=xlGuess ', _
            OrderCustom:=1, MatchCase:=False, Orientation:=xlTopToBottom, _
            DataOption1:=xlSortNormal
        Range("R2").Select
        iCount_R = 1

    Else
        Range("R2").Select
        Selection.CurrentRegion.Select
        Selection.Sort Key1:=Range("R2"), Order1:=xlDescending, Header:=xlGuess ', _
            OrderCustom:=1, MatchCase:=False, Orientation:=xlTopToBottom, _
            DataOption1:=xlSortNormal
        iCount_R = 0
        Range("R2").Select
    End If
    LockMySheet

End Sub


Private Sub CommandButton16_Click()
    UnlockMySheet
    If iCount_S <> 1 Then
        Range("S2").Select
        Selection.CurrentRegion.Select
        Selection.Sort Key1:=Range("S2"), Order1:=xlAscending, Header:=xlGuess ', _
            OrderCustom:=1, MatchCase:=False, Orientation:=xlTopToBottom, _
            DataOption1:=xlSortNormal
        Range("S2").Select
        iCount_S = 1

    Else
        Range("S2").Select
        Selection.CurrentRegion.Select
        Selection.Sort Key1:=Range("S2"), Order1:=xlDescending, Header:=xlGuess ', _
            OrderCustom:=1, MatchCase:=False, Orientation:=xlTopToBottom, _
            DataOption1:=xlSortNormal
        iCount_S = 0
        Range("S2").Select
    End If
    LockMySheet

End Sub


Private Sub CommandButton17_Click()
    UnlockMySheet
    If iCount_T <> 1 Then
        Range("T2").Select
        Selection.CurrentRegion.Select
        Selection.Sort Key1:=Range("T2"), Order1:=xlAscending, Header:=xlGuess ', _
            OrderCustom:=1, MatchCase:=False, Orientation:=xlTopToBottom, _
            DataOption1:=xlSortNormal
        Range("T2").Select
        iCount_T = 1

    Else
        Range("T2").Select
        Selection.CurrentRegion.Select
        Selection.Sort Key1:=Range("T2"), Order1:=xlDescending, Header:=xlGuess ', _
            OrderCustom:=1, MatchCase:=False, Orientation:=xlTopToBottom, _
            DataOption1:=xlSortNormal
        iCount_T = 0
        Range("T2").Select
    End If
    LockMySheet

End Sub


Private Sub CommandButton18_Click()
    UnlockMySheet
    If iCount_U <> 1 Then
        Range("U2").Select
        Selection.CurrentRegion.Select
        Selection.Sort Key1:=Range("U2"), Order1:=xlAscending, Header:=xlGuess ', _
            OrderCustom:=1, MatchCase:=False, Orientation:=xlTopToBottom, _
            DataOption1:=xlSortNormal
        Range("U2").Select
        iCount_U = 1

    Else
        Range("U2").Select
        Selection.CurrentRegion.Select
        Selection.Sort Key1:=Range("U2"), Order1:=xlDescending, Header:=xlGuess ', _
            OrderCustom:=1, MatchCase:=False, Orientation:=xlTopToBottom, _
            DataOption1:=xlSortNormal
        iCount_U = 0
        Range("U2").Select
    End If
    LockMySheet

End Sub


Private Sub CommandButton19_Click()
    UnlockMySheet
    If iCount_V <> 1 Then
        Range("V2").Select
        Selection.CurrentRegion.Select
        Selection.Sort Key1:=Range("V2"), Order1:=xlAscending, Header:=xlGuess ', _
            OrderCustom:=1, MatchCase:=False, Orientation:=xlTopToBottom, _
            DataOption1:=xlSortNormal
        Range("V2").Select
        iCount_V = 1

    Else
        Range("V2").Select
        Selection.CurrentRegion.Select
        Selection.Sort Key1:=Range("V2"), Order1:=xlDescending, Header:=xlGuess ', _
            OrderCustom:=1, MatchCase:=False, Orientation:=xlTopToBottom, _
            DataOption1:=xlSortNormal
        iCount_V = 0
        Range("V2").Select
    End If
    LockMySheet

End Sub


Private Sub CommandButton2_Click()
    UnlockMySheet
    If lst_cst_show_hide_fl = 0 Then
        '--- 1 = show
        Range("J:Z").EntireColumn.Hidden = True
        CommandButton2.Caption = "Show List Cost"
        lst_cst_show_hide_fl = 1
    Else
        Range("J:Z").EntireColumn.Hidden = False
        Range("T:U").EntireColumn.Hidden = True
        CommandButton2.Caption = "Hide List Cost"
        lst_cst_show_hide_fl = 0
    End If
    
    LockMySheet
End Sub

Private Sub CommandButton20_Click()
    UnlockMySheet
    If iCount_W <> 1 Then
        Range("W2").Select
        Selection.CurrentRegion.Select
        Selection.Sort Key1:=Range("W2"), Order1:=xlAscending, Header:=xlGuess ', _
            OrderCustom:=1, MatchCase:=False, Orientation:=xlTopToBottom, _
            DataOption1:=xlSortNormal
        Range("W2").Select
        iCount_W = 1

    Else
        Range("W2").Select
        Selection.CurrentRegion.Select
        Selection.Sort Key1:=Range("W2"), Order1:=xlDescending, Header:=xlGuess ', _
            OrderCustom:=1, MatchCase:=False, Orientation:=xlTopToBottom, _
            DataOption1:=xlSortNormal
        iCount_W = 0
        Range("W2").Select
    End If
    LockMySheet

End Sub

Private Sub CommandButton21_Click()
    UnlockMySheet
    If iCount_X <> 1 Then
        Range("X2").Select
        Selection.CurrentRegion.Select
        Selection.Sort Key1:=Range("X2"), Order1:=xlAscending, Header:=xlGuess ', _
            OrderCustom:=1, MatchCase:=False, Orientation:=xlTopToBottom, _
            DataOption1:=xlSortNormal
        Range("X2").Select
        iCount_X = 1

    Else
        Range("X2").Select
        Selection.CurrentRegion.Select
        Selection.Sort Key1:=Range("X2"), Order1:=xlDescending, Header:=xlGuess ', _
            OrderCustom:=1, MatchCase:=False, Orientation:=xlTopToBottom, _
            DataOption1:=xlSortNormal
        iCount_X = 0
        Range("X2").Select
    End If
    LockMySheet

End Sub


Private Sub CommandButton22_Click()
    UnlockMySheet
    If iCount_Y <> 1 Then
        Range("Y2").Select
        Selection.CurrentRegion.Select
        Selection.Sort Key1:=Range("O2"), Order1:=xlAscending, Header:=xlGuess ', _
            OrderCustom:=1, MatchCase:=False, Orientation:=xlTopToBottom, _
            DataOption1:=xlSortNormal
        Range("Y2").Select
        iCount_Y = 1

    Else
        Range("Y2").Select
        Selection.CurrentRegion.Select
        Selection.Sort Key1:=Range("O2"), Order1:=xlDescending, Header:=xlGuess ', _
            OrderCustom:=1, MatchCase:=False, Orientation:=xlTopToBottom, _
            DataOption1:=xlSortNormal
        iCount_Y = 0
        Range("Y2").Select
    End If
    LockMySheet

End Sub


Private Sub CommandButton23_Click()
    UnlockMySheet
    If iCount_Z <> 1 Then
        Range("Z2").Select
        Selection.CurrentRegion.Select
        Selection.Sort Key1:=Range("Z2"), Order1:=xlAscending, Header:=xlGuess ', _
            OrderCustom:=1, MatchCase:=False, Orientation:=xlTopToBottom, _
            DataOption1:=xlSortNormal
        Range("Z2").Select
        iCount_Z = 1

    Else
        Range("Z2").Select
        Selection.CurrentRegion.Select
        Selection.Sort Key1:=Range("Z2"), Order1:=xlDescending, Header:=xlGuess ', _
            OrderCustom:=1, MatchCase:=False, Orientation:=xlTopToBottom, _
            DataOption1:=xlSortNormal
        iCount_Z = 0
        Range("Z2").Select
    End If
    LockMySheet

End Sub


Private Sub CommandButton24_Click()
    UnlockMySheet
    If iCount_AA <> 1 Then
        Range("AA2").Select
        Selection.CurrentRegion.Select
        Selection.Sort Key1:=Range("AA2"), Order1:=xlAscending, Header:=xlGuess ', _
            OrderCustom:=1, MatchCase:=False, Orientation:=xlTopToBottom, _
            DataOption1:=xlSortNormal
        Range("AA2").Select
        iCount_AA = 1

    Else
        Range("AA2").Select
        Selection.CurrentRegion.Select
        Selection.Sort Key1:=Range("AA2"), Order1:=xlDescending, Header:=xlGuess ', _
            OrderCustom:=1, MatchCase:=False, Orientation:=xlTopToBottom, _
            DataOption1:=xlSortNormal
        iCount_AA = 0
        Range("AA2").Select
    End If
    LockMySheet
End Sub


Private Sub CommandButton25_Click()
    UnlockMySheet
    If iCount_AB <> 1 Then
        Range("AB2").Select
        Selection.CurrentRegion.Select
        Selection.Sort Key1:=Range("AB2"), Order1:=xlAscending, Header:=xlGuess ', _
            OrderCustom:=1, MatchCase:=False, Orientation:=xlTopToBottom, _
            DataOption1:=xlSortNormal
        Range("AB2").Select
        iCount_AB = 1

    Else
        Range("AB2").Select
        Selection.CurrentRegion.Select
        Selection.Sort Key1:=Range("AB2"), Order1:=xlDescending, Header:=xlGuess ', _
            OrderCustom:=1, MatchCase:=False, Orientation:=xlTopToBottom, _
            DataOption1:=xlSortNormal
        iCount_AB = 0
        Range("AB2").Select
    End If
    LockMySheet

End Sub


Private Sub CommandButton26_Click()
    UnlockMySheet
    If iCount_AC <> 1 Then
        Range("AC2").Select
        Selection.CurrentRegion.Select
        Selection.Sort Key1:=Range("AC2"), Order1:=xlAscending, Header:=xlGuess ', _
            OrderCustom:=1, MatchCase:=False, Orientation:=xlTopToBottom, _
            DataOption1:=xlSortNormal
        Range("AC2").Select
        iCount_AC = 1

    Else
        Range("AC2").Select
        Selection.CurrentRegion.Select
        Selection.Sort Key1:=Range("AC2"), Order1:=xlDescending, Header:=xlGuess ', _
            OrderCustom:=1, MatchCase:=False, Orientation:=xlTopToBottom, _
            DataOption1:=xlSortNormal
        iCount_AC = 0
        Range("AC2").Select
    End If
    LockMySheet

End Sub


Private Sub CommandButton27_Click()
    UnlockMySheet
    If iCount_AD <> 1 Then
        Range("AD2").Select
        Selection.CurrentRegion.Select
        Selection.Sort Key1:=Range("AD2"), Order1:=xlAscending, Header:=xlGuess ', _
            OrderCustom:=1, MatchCase:=False, Orientation:=xlTopToBottom, _
            DataOption1:=xlSortNormal
        Range("AD2").Select
        iCount_AD = 1

    Else
        Range("AD2").Select
        Selection.CurrentRegion.Select
        Selection.Sort Key1:=Range("AD2"), Order1:=xlDescending, Header:=xlGuess ', _
            OrderCustom:=1, MatchCase:=False, Orientation:=xlTopToBottom, _
            DataOption1:=xlSortNormal
        iCount_AD = 0
        Range("AD2").Select
    End If
    LockMySheet

End Sub


Private Sub CommandButton3_Click()
    UnlockMySheet
    If promo_show_hide_fl = 0 Then
        '--- 1 = show
        Range("Y:AO").EntireColumn.Hidden = True
        CommandButton3.Caption = "Show Promotions"
        promo_show_hide_fl = 1
    Else
        Range("Y:AO").EntireColumn.Hidden = False
        Range("AF:AH").EntireColumn.Hidden = True
        Range("AJ:AM").EntireColumn.Hidden = True
        CommandButton3.Caption = "Hide Promotions"
        promo_show_hide_fl = 0
    End If
    
    LockMySheet
End Sub

Private Sub CommandButton4_Click()
    UnlockMySheet
    If iCount_D <> 1 Then
        Range("D2").Select
        Selection.CurrentRegion.Select
        Selection.Sort Key1:=Range("D2"), Order1:=xlAscending, Header:=xlGuess ', _
            OrderCustom:=1, MatchCase:=False, Orientation:=xlTopToBottom, _
            DataOption1:=xlSortNormal
        Range("D2").Select
        iCount_D = 1

    Else
        Range("D2").Select
        Selection.CurrentRegion.Select
        Selection.Sort Key1:=Range("D2"), Order1:=xlDescending, Header:=xlGuess ', _
            OrderCustom:=1, MatchCase:=False, Orientation:=xlTopToBottom, _
            DataOption1:=xlSortNormal
        iCount_D = 0
        Range("D2").Select
    End If
    LockMySheet
End Sub

Private Sub CommandButton5_Click()
    UnlockMySheet
    If iCount_H <> 1 Then
        Range("H2").Select
        Selection.CurrentRegion.Select
        Selection.Sort Key1:=Range("H2"), Order1:=xlAscending, Header:=xlGuess ', _
            OrderCustom:=1, MatchCase:=False, Orientation:=xlTopToBottom, _
            DataOption1:=xlSortNormal
        Range("H2").Select
        iCount_H = 1

    Else
        Range("H2").Select
        Selection.CurrentRegion.Select
        Selection.Sort Key1:=Range("H2"), Order1:=xlDescending, Header:=xlGuess ', _
            OrderCustom:=1, MatchCase:=False, Orientation:=xlTopToBottom, _
            DataOption1:=xlSortNormal
        iCount_H = 0
        Range("H2").Select
    End If
    LockMySheet
End Sub






Private Sub CommandButton6_Click()
    UnlockMySheet
    If iCount_I <> 1 Then
        Range("I2").Select
        Selection.CurrentRegion.Select
        Selection.Sort Key1:=Range("I2"), Order1:=xlAscending, Header:=xlGuess ', _
            OrderCustom:=1, MatchCase:=False, Orientation:=xlTopToBottom, _
            DataOption1:=xlSortNormal
        Range("I2").Select
        iCount_I = 1

    Else
        Range("I2").Select
        Selection.CurrentRegion.Select
        Selection.Sort Key1:=Range("I2"), Order1:=xlDescending, Header:=xlGuess ', _
            OrderCustom:=1, MatchCase:=False, Orientation:=xlTopToBottom, _
            DataOption1:=xlSortNormal
        iCount_I = 0
        Range("I2").Select
    End If
    LockMySheet
End Sub


Private Sub CommandButton7_Click()
    UnlockMySheet
    If iCount_J <> 1 Then
        Range("J2").Select
        Selection.CurrentRegion.Select
        Selection.Sort Key1:=Range("J2"), Order1:=xlAscending, Header:=xlGuess ', _
            OrderCustom:=1, MatchCase:=False, Orientation:=xlTopToBottom, _
            DataOption1:=xlSortNormal
        Range("J2").Select
        iCount_J = 1

    Else
        Range("J2").Select
        Selection.CurrentRegion.Select
        Selection.Sort Key1:=Range("J2"), Order1:=xlDescending, Header:=xlGuess ', _
            OrderCustom:=1, MatchCase:=False, Orientation:=xlTopToBottom, _
            DataOption1:=xlSortNormal
        iCount_J = 0
        Range("J2").Select
    End If
    LockMySheet
End Sub


Private Sub CommandButton8_Click()
    UnlockMySheet
    If iCount_M <> 1 Then
        Range("M2").Select
        Selection.CurrentRegion.Select
        Selection.Sort Key1:=Range("M2"), Order1:=xlAscending, Header:=xlGuess ', _
            OrderCustom:=1, MatchCase:=False, Orientation:=xlTopToBottom, _
            DataOption1:=xlSortNormal
        Range("M2").Select
        iCount_M = 1

    Else
        Range("M2").Select
        Selection.CurrentRegion.Select
        Selection.Sort Key1:=Range("M2"), Order1:=xlDescending, Header:=xlGuess ', _
            OrderCustom:=1, MatchCase:=False, Orientation:=xlTopToBottom, _
            DataOption1:=xlSortNormal
        iCount_M = 0
        Range("M2").Select
    End If
    LockMySheet
End Sub

Private Sub CommandButton9_Click()
    UnlockMySheet
    If iCount_K <> 1 Then
        Range("K2").Select
        Selection.CurrentRegion.Select
        Selection.Sort Key1:=Range("K2"), Order1:=xlAscending, Header:=xlGuess ', _
            OrderCustom:=1, MatchCase:=False, Orientation:=xlTopToBottom, _
            DataOption1:=xlSortNormal
        Range("K2").Select
        iCount_K = 1

    Else
        Range("K2").Select
        Selection.CurrentRegion.Select
        Selection.Sort Key1:=Range("K2"), Order1:=xlDescending, Header:=xlGuess ', _
            OrderCustom:=1, MatchCase:=False, Orientation:=xlTopToBottom, _
            DataOption1:=xlSortNormal
        iCount_K = 0
        Range("K2").Select
    End If
    LockMySheet
End Sub


Private Sub ComboBox1_Change()

End Sub

Private Sub CommandButton28_Click()


Set dict_pricing_col = New Dictionary

dict_pricing_col.Add "VENDOR PRODUCT #", xlcol_pricing_con_upc_no
dict_pricing_col.Add "UPC", xlcol_pricing_con_upc_no
dict_pricing_col.Add "DESCRIPTION", xlcol_pricing_con_dsc_tx
dict_pricing_col.Add "SIZE", xlcol_pricing_con_siz_tx
dict_pricing_col.Add "PACK", xlcol_pricing_sto_rcv_unt_qy
dict_pricing_col.Add "PRICE GROUP ID", xlcol_pricing_rbp_prc_grp_id
dict_pricing_col.Add "START DATE", xlcol_pricing_stt_dt
dict_pricing_col.Add "END DATE", xlcol_pricing_end_dt
dict_pricing_col.Add "CUR BRACKET 1 QTY", xlcol_pricing_unt_001_qy
dict_pricing_col.Add "CUR BRACKET 1 COST", xlcol_pricing_unt_001_cst_am
dict_pricing_col.Add "NEW BRACKET 1 QTY", xlcol_pricing_new_unt_001_qy
dict_pricing_col.Add "NEW BRACKET 1 COST", xlcol_pricing_new_unt_001_cst_am
dict_pricing_col.Add "CUR BRACKET 2 QTY", xlcol_pricing_unt_002_qy
dict_pricing_col.Add "CUR BRACKET 2 COST", xlcol_pricing_unt_002_cst_am
dict_pricing_col.Add "NEW BRACKET 2 QTY", xlcol_pricing_new_unt_002_qy
dict_pricing_col.Add "NEW BRACKET 2 COST", xlcol_pricing_new_unt_002_cst_am
dict_pricing_col.Add "CUR BRACKET 3 QTY", xlcol_pricing_unt_003_qy
dict_pricing_col.Add "CUR BRACKET 3 COST", xlcol_pricing_unt_003_cst_am
dict_pricing_col.Add "NEW BRACKET 3 QTY", xlcol_pricing_new_unt_003_qy
dict_pricing_col.Add "NEW BRACKET 3 COST", xlcol_pricing_new_unt_003_cst_am
dict_pricing_col.Add "OFF INVOICE", xlcol_pricing_ofi_unt_am
dict_pricing_col.Add "SDA", xlcol_pricing_bbk_unt_am
dict_pricing_col.Add "NEW PACK", xlcol_pricing_new_sto_rcv_unt_qy
dict_pricing_col.Add "NEW PACK EFFECTIVE DATE", xlcol_pricing_sto_rcv_unt_eff_day_dt
dict_pricing_col.Add "DELETE", xlcol_pricing_del_rqst_tx
dict_pricing_col.Add "COMMENTS", xlcol_pricing_cmt_tx

'MsgBox (dict_pricing_col(ComboBox1.Value))
'MsgBox ComboBox1.Value
'my_selection =
my_sort_cell = dict_pricing_col(ComboBox1.Value) & xlrow_pricing_bgn
'MsgBox ()
Call unlock_worksheet("PRICING")
If iCount_D <> 1 Then
    Range(my_sort_cell).Select
    Selection.CurrentRegion.Select
    Selection.Sort Key1:=Range(my_sort_cell), Order1:=xlAscending, Header:=xlGuess ', _
        OrderCustom:=1, MatchCase:=False, Orientation:=xlTopToBottom, _
        DataOption1:=xlSortNormal
    Range(my_sort_cell).Select
    iCount_D = 1
    CommandButton28.Caption = "Z-A"
    
Else
    Range(my_sort_cell).Select
    Selection.CurrentRegion.Select
    Selection.Sort Key1:=Range(my_sort_cell), Order1:=xlDescending, Header:=xlGuess ', _
        OrderCustom:=1, MatchCase:=False, Orientation:=xlTopToBottom, _
        DataOption1:=xlSortNormal
    iCount_D = 0
    Range(my_sort_cell).Select
    CommandButton28.Caption = "A-Z"
End If
Call lock_worksheet("PRICING")
End Sub

Private Sub Worksheet_Activate()

End Sub

Private Sub Worksheet_SelectionChange(ByVal Target As Range)

End Sub


Attribute VB_Name = "Sheet2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "CommandButton3, 4, 0, MSForms, CommandButton"
Attribute VB_Control = "ListBox1, 3, 1, MSForms, ListBox"
Attribute VB_Control = "CommandButton1, 2, 2, MSForms, CommandButton"
Attribute VB_Control = "CommandButton2, 1, 3, MSForms, CommandButton"
Attribute VB_Control = "CommandButton4, 5, 4, MSForms, CommandButton"
Private Sub CommandButton1_Click()
'---
'--- Export XML File button
'---
    frm_savefile.Show
End Sub


Private Sub CommandButton2_Click()
    '--- --------------------------------------------------------------------------------------------------
    '--- Verify Data Button
    '--- Validation
    '---
    '--- --------------------------------------------------------------------------------------------------
    Dim err_fl As String
    Dim err_msg_tx As String
    Dim row_qy As Integer
    Dim objXLWS As Excel.Worksheet
    Dim my_upc_no As Variant
    Dim rbp_grp As Dictionary
    Dim rbp_upc As Dictionary
    Dim v_rbp_grp As Variant
    Dim v_rbp_upc As Variant
    Dim v_prm_alw As Variant
    Dim v_temp As Variant
    Dim v_upc As Variant
    Dim vnd_dat_fnd_fl As String
    Dim sls_pln_stt_dt_vlu As Date
    Dim sls_pln_end_dt_vlu As Date
    
    Dim regEx As New VBScript_RegExp_55.RegExp
    Dim matches, s
    
    '--- --------------------------------------------------------------------------------------------------
    '--- Call Refresh Cost & Retail Buttons
    '--- --------------------------------------------------------------------------------------------------
    cost_retail_redirect = "REVIEW & SUBMIT"
    Call CommandButton4_Click
    
    '--- --------------------------------------------------------------------------------------------------
    '--- Create Dictionary Objects
    '--- --------------------------------------------------------------------------------------------------
    Set d_rbp_grp = New Dictionary
    Set d_rbp_upc = New Dictionary
    Set d_rbp_grp_prm = New Dictionary
    Set d_upc_inf = New Dictionary
    
    '--- --------------------------------------------------------------------------------------------------
    '--- Let the user know we are working...
    '--- --------------------------------------------------------------------------------------------------
    CommandButton2.Caption = "Verifying Data.  Please wait..."
    CommandButton2.Enabled = False
    
    '--- --------------------------------------------------------------------------------------------------
    '--- Set Default for flag that will be used to determine if user entered at least one data element
    '--- --------------------------------------------------------------------------------------------------
    vnd_dat_fnd_fl = "N"
    
    '--- --------------------------------------------------------------------------------------------------
    '--- Create and Populate Dictionary to track which columns should be validated for errors
    '--- --------------------------------------------------------------------------------------------------
    Set dict = CreateObject("Scripting.Dictionary")
    '--- Vendor Product Number
    dict.Add xlcol_pricing_vnd_pdt_no, "alphanumeric"
    '--- Delete Item
    dict.Add xlcol_pricing_del_rqst_tx, "delete"
    '--- Net Pricing Flag
    dict.Add xlcol_pricing_net_prc_fl, "yes_no"
    '--- New SRU
    dict.Add xlcol_pricing_new_sto_rcv_unt_qy, "integer"
    '--- New Case Pack
    dict.Add xlcol_pricing_new_cas_pak_qy, "integer"
    '--- New Case Cost
    dict.Add xlcol_pricing_new_cas_cst_am, "numeric"
    '---New Bottle Charge
    dict.Add xlcol_pricing_new_btl_chr_am, "numeric"
    '--- New Cost/Pack Effective Date
    dict.Add xlcol_pricing_sto_rcv_unt_eff_day_dt, "date"
    '--- Supplier Suggested White Tag Retail
    dict.Add xlcol_pricing_sug_reg_rtl_am, "retail"
    '--- Off Invoice Amount
    dict.Add xlcol_pricing_ofi_unt_am, "numeric"
    '--- OI Start Date
    dict.Add xlcol_pricing_oi_stt_dt, "date"
    '--- OI End Date
    dict.Add xlcol_pricing_oi_end_dt, "date"
    '--- Bill Back Amount
    dict.Add xlcol_pricing_sda_unt_am, "numeric"
    '--- SDA Start Date
    dict.Add xlcol_pricing_sda_stt_dt, "date"
    '--- SDA End Date
    dict.Add xlcol_pricing_sda_end_dt, "date"
    '--- Net Unit Cost
    dict.Add xlcol_pricing_net_cst_am, "numeric"
    '--- Supplier Suggested Retail
    dict.Add xlcol_pricing_sug_rtl_am, "retail"
    '--- Comment
    dict.Add xlcol_pricing_cmt_tx, "alphanumeric"
    
    '--- --------------------------------------------------------------------------------------------------
    '--- Define Pricing Worksheet Object
    '--- --------------------------------------------------------------------------------------------------
    Set objXLWS = ActiveWorkbook.Worksheets("PRICING")
    
    '--- --------------------------------------------------------------------------------------------------
    '--- Get Last Row Containing Data
    '--- --------------------------------------------------------------------------------------------------
    row_qy = objXLWS.UsedRange.Rows.Count
    
    '--- --------------------------------------------------------------------------------------------------
    '--- initialize error handling flag - assume no errors
    '--- --------------------------------------------------------------------------------------------------
    err_fl = "N"
    
    '--- --------------------------------------------------------------------------------------------------
    '--- ensure the submit button is locked
    '--- --------------------------------------------------------------------------------------------------
    CommandButton1.Enabled = False
    
    '--- --------------------------------------------------------------------------------------------------
    '--- Clear Listbox of any previous errors
    '--- --------------------------------------------------------------------------------------------------
    ListBox1.Clear
    
    '--- --------------------------------------------------------------------------------------------------
    '--- Unprotect Worksheet
    '--- --------------------------------------------------------------------------------------------------
    Call unlock_worksheet("PRICING")
    Sheets("REVIEW & SUBMIT").Activate
    
    '--- --------------------------------------------------------------------------------------------------
    '--- Loop over each column requiring validation
    '--- --------------------------------------------------------------------------------------------------
    sls_pln_stt_dt_vlu = Trim(objXLWS.Range(xlcell_pricing_sls_pln_stt_dt).Value)
    sls_pln_end_dt_vlu = Trim(objXLWS.Range(xlcell_pricing_sls_pln_end_dt).Value)
    sls_pln_div_no = Left(Trim(objXLWS.Range(xlcell_pricing_sls_pln_div_no).Value), 3)
    sls_pln_dpt_no = Left(Trim(objXLWS.Range(xlcell_pricing_sls_pln_dpt_no).Value), 2)
    
    For Each my_col In dict.Keys()
        '--- Loop Over Each Row And Validate Data
        '--- OI End date and SDA End date are verified during the OI Start & SDA Start date loop
        If my_col = xlcol_pricing_oi_end_dt Then
            GoTo NextIteration
        ElseIf my_col = xlcol_pricing_sda_end_dt Then
            GoTo NextIteration
        End If
        
        For x = xlrow_pricing_bgn To row_qy
            row_err_fl = "N"
            row_err_msg_tx = ""
            row_wrn_fl = "N"
            row_wrn_msg_tx = ""
            '--- Selects cell down 1 row from active cell.
            'ActiveCell.Offset(1, 0).Select
            
            '--- Calculate True Row Number
            my_row = x
            
            '--- Capture UPC Number and Row Number
            v_upc = objXLWS.Range(xlcol_pricing_con_upc_no & my_row).Value
            If d_upc_inf.Exists(v_upc) = False Then
                d_upc_inf.Add v_upc, my_row
            End If
            
            '--- Get Value of Cell to be checked
            my_cell_vlu = objXLWS.Range(my_col & my_row).Value
            If IsError(my_cell_vlu) = True Then
                row_err_fl = "Y"
                row_err_msg_tx = " bad data."
            Else
                '--- Get Value of Cell to be checked
                my_cell_vlu = Trim(objXLWS.Range(my_col & my_row).Value)
                'my_cell_vlu = objXLWS.Range(my_col & my_row).Value
                
                '--- --------------------------------------------------------------------------------------
                '--- Check for cell type = NUMERIC
                '--- --------------------------------------------------------------------------------------
                If dict(my_col) = "numeric" Then
                    '--- Confirm value provided by user was numeric
                    If validate_field(my_cell_vlu, dict(my_col)) = True Then
                        row_err_fl = "Y"
                        row_err_msg_tx = " must be numeric."
                    ElseIf my_col = xlcol_pricing_ofi_unt_am Then
                    ElseIf my_cell_vlu <= 0 Then
                        row_err_fl = "Y"
                        row_err_msg_tx = " must be greater than zero."
                    End If
                '--- --------------------------------------------------------------------------------------
                '--- Check For cell type = RETAIL
                '--- --------------------------------------------------------------------------------------
                ElseIf dict(my_col) = "retail" Then
                    If Len(my_cell_vlu) > 0 Then
                        If validate_field(my_cell_vlu, dict(my_col)) = True Then
                            row_err_fl = "Y"
                            row_err_msg_tx = " must be valid retail (i.e. 2/5.00, 4.99)."
                        End If
                    End If
                '--- --------------------------------------------------------------------------------------
                '--- Check for cell type INTEGER
                '--- --------------------------------------------------------------------------------------
                ElseIf dict(my_col) = "integer" Then
                    If Len(my_cell_vlu) > 0 Then
                        If IsNumeric(my_cell_vlu) Then
                            If Int(Val(my_cell_vlu)) <> Val(my_cell_vlu) Then
                                row_err_fl = "Y"
                                row_err_msg_tx = " must be a whole number (no decimals)."
                            ElseIf my_cell_vlu <= 0 Then
                                row_err_fl = "Y"
                                row_err_msg_tx = " must be greater than zero."
                            End If
                        Else
                            row_err_fl = "Y"
                            row_err_msg_tx = " must be a valid number."
                        End If
                    End If
                '--- --------------------------------------------------------------------------------------
                '--- Check for cell type = DATE
                '--- --------------------------------------------------------------------------------------
                ElseIf dict(my_col) = "date" Then
                    'If IsError(my_cell_vlu) = True Then
                    'If Len(my_cell_vlu) > 0 And IsDate(my_cell_vlu) = False Then
                    '    row_err_fl = "Y"
                    '    row_err_msg_tx = " must be a valid date."
                    
                    '--- OI Date Validation
                    If my_col = xlcol_pricing_oi_stt_dt Then
                        '--- Only validate for 2 reasons
                        '--- 1) an OI Amount Exists
                        '--- 2) Net Priced Item with Suggested Promo Retail
                        If Len(Trim(objXLWS.Range(xlcol_pricing_ofi_unt_am & my_row).Value)) > 0 Or (UCase(Trim(objXLWS.Range(xlcol_pricing_net_prc_fl & my_row).Value)) = "Y" And Len(Trim(objXLWS.Range(xlcol_pricing_sug_rtl_am & my_row).Value)) > 0) Then
                            '--- Get OI End Date Value
                            my_cell2_vlu = Trim(objXLWS.Range(xlcol_pricing_oi_end_dt & my_row).Value)
                            If IsError(my_cell2_vlu) = True Then
                                row_err_fl = "Y"
                                row_err_msg_tx = " bad OI End date."
                            '--- Date exists
                            ElseIf Len(my_cell_vlu) = 0 Or Len(my_cell2_vlu) = 0 Then
                                row_err_fl = "Y"
                                row_err_msg_tx = " OI dates must be a valid date."
                            '--- Date is valid
                            ElseIf IsDate(my_cell_vlu) = False Or IsDate(my_cell2_vlu) = False Then
                                row_err_fl = "Y"
                                row_err_msg_tx = " OI dates must be a valid date."
                            '--- Verify Start Date is in the future
                            ElseIf DateDiff("d", Date, CDate(my_cell_vlu), Date) < 0 Then
                                row_err_fl = "Y"
                                row_err_msg_tx = " OI Start date must be a valid FUTURE date."
                            '--- Verify Start Date is within 15 days of Mnth Start Date
                            ElseIf DateDiff("d", sls_pln_stt_dt_vlu, CDate(my_cell_vlu)) <= -15 And sls_pln_div_no = "034" And sls_pln_dpt_no = "14" Then
                                row_err_fl = "Y"
                                row_err_msg_tx = " OI Start date must within 15 days of Month Start Date."
                            '--- Verify Start Date is before End Date
                            ElseIf DateDiff("d", CDate(my_cell_vlu), CDate(my_cell2_vlu)) < 0 Then
                                row_err_fl = "Y"
                                row_err_msg_tx = " OI End Date must be after Start Date."
                            '--- Verify Start Date is within 15 days of Mnth Start Date
                            ElseIf DateDiff("d", sls_pln_end_dt_vlu, CDate(my_cell2_vlu)) >= 15 And sls_pln_div_no = "034" And sls_pln_dpt_no = "14" Then
                                row_err_fl = "Y"
                                row_err_msg_tx = " OI End date must within 15 days of Month End Date."
                                
                            '--- Verify OI dates are within Sales Plan Header dates
                            '--- logic - OI End Date is before Sales Plan Start Date    or  OI Start Date is after Sales Plan End Date
                            ElseIf DateDiff("d", CDate(my_cell2_vlu), CDate(sls_pln_stt_dt_vlu)) > 0 Or DateDiff("d", CDate(my_cell_vlu), CDate(sls_pln_end_dt_vlu)) < 0 Then
                                row_err_fl = "Y"
                                row_err_msg_tx = " OI Dates are outside of Sales Plan Date Range."
                            End If
                        End If
                        
                    '--- SDA Date Validation
                    ElseIf my_col = xlcol_pricing_sda_stt_dt Then
                        '--- SDA Amount Exists
                        If Len(Trim(objXLWS.Range(xlcol_pricing_sda_unt_am & my_row).Value)) > 0 Then
                            '--- Get SDA End Date Value
                            my_cell2_vlu = Trim(objXLWS.Range(xlcol_pricing_sda_end_dt & my_row).Value)
                            If IsError(my_cell2_vlu) = True Then
                                row_err_fl = "Y"
                                row_err_msg_tx = " bad SDA End date."
                            '--- Date exists
                            ElseIf Len(my_cell_vlu) = 0 Or Len(my_cell2_vlu) = 0 Then
                                row_err_fl = "Y"
                                row_err_msg_tx = " SDA dates must be a valid date."
                            '--- Date is valid
                            ElseIf IsDate(my_cell_vlu) = False Or IsDate(my_cell2_vlu) = False Then
                                row_err_fl = "Y"
                                row_err_msg_tx = " SDA dates must be a valid date."
                            '--- Verify Start Date is in the future
                            ElseIf DateDiff("d", Date, CDate(my_cell_vlu), Date) < 0 Then
                                row_err_fl = "Y"
                                row_err_msg_tx = " SDA Start date must be a valid FUTURE date."
                            '--- Verify Start Date is less than End Date
                            ElseIf DateDiff("d", CDate(my_cell_vlu), CDate(my_cell2_vlu)) < 0 Then
                                row_err_fl = "Y"
                                row_err_msg_tx = " SDA End Date must be after Start Date."
                            '--- Verify SDA dates are within Sales Plan Header dates
                            '--- error msg -    SDA End Date is before Sales Plan Start Date or SDA Start Date is after Sales Plan End Date
                            ElseIf DateDiff("d", CDate(my_cell2_vlu), CDate(sls_pln_stt_dt_vlu)) > 0 Or DateDiff("d", CDate(my_cell_vlu), CDate(sls_pln_end_dt_vlu)) < 0 Then
                                row_err_fl = "Y"
                                row_err_msg_tx = " SDA Dates are outside of Sales Plan Date Range."
                            End If
                        End If
                    
                    '--- New SRU/Pack/Cost/Bottle Charge effective Date
                    ElseIf my_col = xlcol_pricing_sto_rcv_unt_eff_day_dt Then
                        If (Len(Trim(objXLWS.Range(xlcol_pricing_new_sto_rcv_unt_qy & my_row).Value)) > 0 _
                            Or Len(Trim(objXLWS.Range(xlcol_pricing_new_cas_cst_am & my_row).Value)) > 0 _
                            Or Len(Trim(objXLWS.Range(xlcol_pricing_new_cas_pak_qy & my_row).Value)) > 0 _
                            Or Len(Trim(objXLWS.Range(xlcol_pricing_new_btl_chr_am & my_row).Value)) > 0) Then
                            If Len(my_cell_vlu) = 0 Then
                                '--- Make sure Date is valid
                                If IsDate(my_cell_vlu) = False Then
                                    row_err_fl = "Y"
                                    row_err_msg_tx = " (EFFECTIVE DATE) must be provided for all SRU, Cost, Pack, and Bottle Charge changes."
                                ElseIf DateDiff("d", CDate(my_cell_vlu), Date) >= 0 Then
                                    row_err_fl = "Y"
                                    row_err_msg_tx = " (EFFECTIVE DATE) must be a valid FUTURE date."
                                End If
                            End If
                        End If
                    
                    '--- Verify other Date Columns
                    Else
                        If Len(my_cell_vlu) > 0 Then
                            '--- Make sure Date is valid
                            If IsDate(my_cell_vlu) = False Then
                                row_err_fl = "Y"
                                row_err_msg_tx = " must be a valid date."
                            ElseIf DateDiff("d", CDate(my_cell_vlu), Date) >= 0 Then
                                row_err_fl = "Y"
                                row_err_msg_tx = " must be a valid FUTURE date."
                            End If
                        End If
                    End If
                    
                    'Check For Blank Start & End Date
                    
                    'If my_col = xlcol_pricing_oi_end_dt Or my_col = xlcol_pricing_oi_stt_dt Or my_col = xlcol_pricing_sda_end_dt Or my_col = xlcol_pricing_sda_stt_dt Then
                    '    If Len(my_cell_vlu) = 0 Then
                    '        row_err_fl = "Y"
                    '        row_err_msg_tx = " must be a valid date."
                    '    End If
                    'End If
                    'If Len(my_cell_vlu) > 0 Then
                    '    If IsDate(my_cell_vlu) = False Then
                    '        row_err_fl = "Y"
                    '        row_err_msg_tx = " must be a valid date."
                    '
                   '
                   '     '--- Confirm Date is in the Future
                   '
                   '     ElseIf DateDiff("d", CDate(my_cell_vlu), Date) >= 0 Then
                   '         row_err_fl = "Y"
                   '         row_err_msg_tx = " must be a valid FUTURE date."
                   '     End If
                   ' '--- Make sure end date is not less than or equal to the end date
                   ' ElseIf my_col = xlcol_pricing_oi_end_dt Or my_col = xlcol_pricing_sda_end_dt Then
                   '     If Len(my_cell_vlu) = 0 Then
                   '         row_err_fl = "Y"
                   '         row_err_msg_tx = " must be a valid date."
                   '     ElseIf IsDate(objXLWS.Range(xlcol_pricing_stt_dt & my_row).Value) = True Then
                   '         If DateDiff("d", objXLWS.Range(xlcol_pricing_stt_dt & my_row).Value, CDate(my_cell_vlu)) <= 0 Then
                   '             row_err_fl = "Y"
                   '             row_err_msg_tx = " (END DATE) must be GREATER than the START DATE."
                   '         End If
                   '     End If
                   ' ElseIf my_col = xlcol_pricing_stt_dt Then
                   '     If Len(my_cell_vlu) = 0 Then
                   '         row_err_fl = "Y"
                   '         row_err_msg_tx = " must be a valid date."
                   '     End If
                   ' End If
                '--- --------------------------------------------------------------------------------------
                '--- Check for cell type = DELETE
                '--- --------------------------------------------------------------------------------------
                ElseIf dict(my_col) = "delete" Then
                    If Len(my_cell_vlu) > 0 And UCase(my_cell_vlu) <> "REMOVE" Then
                        row_err_fl = "Y"
                        row_err_msg_tx = " can only be blank or the word REMOVE."
                    End If
                ElseIf dict(my_col) = "alphanumeric" Then
                    regEx.Pattern = "[^a-zA-Z0-9\.\-\s]"
                    regEx.IgnoreCase = True 'True to ignore case
                    regEx.Global = True 'True matches all occurances, False matches the first occurance
                    's = ""
                    If regEx.Test(my_cell_vlu) Then
                        'Set matches = regEx.Execute(my_cell_vlu)
                        'For Each Match In matches
                        '    s = s & " Position: " & Match.FirstIndex
                        '    s = s & " Word: " & Match.Value & " "
                        '    s = s & Chr(10)
                        'Next
                        row_err_fl = "Y"
                        row_err_msg_tx = " can only be letters and numbers (no special characters, please)."
                    End If
                    If my_col = xlcol_pricing_vnd_pdt_no And row_err_fl = "N" Then
                        If Len(my_cell_vlu) > 20 Then
                            row_err_fl = "Y"
                            row_err_msg_tx = " cannot exceed 20 characters."
                        End If
                    End If
                    If my_col = xlcol_pricing_cmt_tx And row_err_fl = "N" Then
                        If Len(my_cell_vlu) > 100 Then
                            row_err_fl = "Y"
                            row_err_msg_tx = " cannot exceed 100 characters."
                        End If
                    End If
                ElseIf dict(my_col) = "yes_no" Then
                    If Len(my_cell_vlu) > 0 Then
                        If UCase(my_cell_vlu) = "YES" Then
                            my_cell_vlu = "Y"
                            objXLWS.Range(my_col & my_row).Value = my_cell_vlu
                        ElseIf UCase(my_cell_vlu) = "NO" Then
                            my_cell_vlu = "N"
                            objXLWS.Range(my_col & my_row).Value = my_cell_vlu
                        End If
                        If UCase(my_cell_vlu) <> "Y" And UCase(my_cell_vlu) <> "N" Then
                            '--- Field only allows Y or N
                            row_err_fl = "Y"
                            row_err_msg_tx = " field only allows Y or N."
                        End If
                    End If
                End If
                
                '--- Determine If User Entered A Store Receiving Unit (SRU) Change
                'If my_col = xlcol_pricing_new_sto_rcv_unt_qy Then
                '    If Len(Trim(objXLWS.Range(xlcol_pricing_new_sto_rcv_unt_qy & my_row).Value)) > 0 Then
                '        '--- User Entered SRU Change, Make Sure It Is 1 or Equal to Case Pack
                '        If objXLWS.Range(xlcol_pricing_new_sto_rcv_unt_qy & my_row).Value <> 1 Then
                '            my_cas_pak_qy = objXLWS.Range(xlcol_pricing_cur_cas_pak_qy & my_row).Value
                '            If Len(Trim(objXLWS.Range(xlcol_pricing_new_cas_pak_qy & my_row).Value)) > 0 Then
                '                my_cas_pak_qy = objXLWS.Range(xlcol_pricing_new_cas_pak_qy & my_row).Value
                '            End If
                '            If my_cas_pak_qy <> objXLWS.Range(xlcol_pricing_new_sto_rcv_unt_qy & my_row).Value Then
                '                row_err_fl = "Y"
                '                row_err_msg_tx = " (SRU) must be equal to 1 OR equal to case pack."
                '            End If
                '        End If
                '    End If
                'End If
                
                '--- Determine If User Entered A New SRU
                If my_col = xlcol_pricing_new_sto_rcv_unt_qy Then
                    If Len(Trim(objXLWS.Range(xlcol_pricing_new_sto_rcv_unt_qy & my_row).Value)) > 0 Then
                        '--- User Entered SRU Change, Make Sure It Is 1 or Equal to Case Pack or Sleeve (spirits 50ml)
                        If objXLWS.Range(xlcol_pricing_new_sto_rcv_unt_qy & my_row).Value <> 1 Then
                            my_cas_pak_qy = objXLWS.Range(xlcol_pricing_cur_cas_pak_qy & my_row).Value
                            If Len(Trim(objXLWS.Range(xlcol_pricing_new_cas_pak_qy & my_row).Value)) > 0 Then
                                my_cas_pak_qy = Trim(objXLWS.Range(xlcol_pricing_new_cas_pak_qy & my_row).Value)
                            End If
                            '--- SRU = Pack
                            If my_cas_pak_qy <> Trim(objXLWS.Range(xlcol_pricing_new_sto_rcv_unt_qy & my_row).Value) Then
                                '--- SRU divides into Pack evenly (Sleeve)
                                If my_cas_pak_qy Mod Trim(objXLWS.Range(xlcol_pricing_new_sto_rcv_unt_qy & my_row).Value) <> 0 Then
                                    row_err_fl = "Y"
                                    row_err_msg_tx = " (SRU) must be 1, equal to the case pack, OR an even divider of case pack (sleeve)."
                                End If
                            End If
                        End If
                    End If
                End If
                
                
                '--- Determine If User Entered A Case Pack or Cost Change
                If (my_col = xlcol_pricing_new_cas_cst_am Or my_col = xlcol_pricing_new_cas_pak_qy) Then
                    '--- If User Entered A New Case Pack or New Case Cost, make sure we have both a new case cost and case pack
                    If Len(Trim(objXLWS.Range(xlcol_pricing_new_cas_cst_am & my_row).Value)) > 0 _
                    Or Len(Trim(objXLWS.Range(xlcol_pricing_new_cas_pak_qy & my_row).Value)) > 0 Then
                        '--- Check For Case Cost If User Provided Case Pack
                        If Len(Trim(objXLWS.Range(xlcol_pricing_new_cas_pak_qy & my_row).Value)) = 0 Then
                            row_err_fl = "Y"
                            row_err_msg_tx = " New Case Cost requires a New Case Pack."
                        ElseIf Len(Trim(objXLWS.Range(xlcol_pricing_new_cas_cst_am & my_row).Value)) = 0 Then
                            row_err_fl = "Y"
                            row_err_msg_tx = " New Case Pack requires a New Case Cost."
                        '--- Determine If User Entered A Case Pack or Cost Change (Verify 50% change)
                        Else
                            '--- Check to see if Pack or Cost Change would result in a cost difference of 50% or greater
                            cur_unt_cst_am = 0
                            new_unt_cst_am = 0
                            '--- Determine Which Case Pack To Use (Current or New)
                            v_cas_pak_qy = Trim(objXLWS.Range(xlcol_pricing_cur_cas_pak_qy & my_row).Value)
                            v_cas_pak_chg_fl = "N"
                            v_cas_pak_qy = Trim(objXLWS.Range(xlcol_pricing_new_cas_pak_qy & my_row).Value)
                            '--- Determine If Case Pack Changed
                            If Trim(objXLWS.Range(xlcol_pricing_cur_cas_pak_qy & my_row).Value) <> Trim(objXLWS.Range(xlcol_pricing_new_cas_pak_qy & my_row).Value) Then
                                v_cas_pak_chg_fl = "Y"
                            End If
                            '--- Determine Which Case Cost to Use (Current or New)
                            v_cas_cst_am = Trim(objXLWS.Range(xlcol_pricing_cur_cas_cst_am & my_row).Value)
                            If Len(Trim(objXLWS.Range(xlcol_pricing_new_cas_cst_am & my_row).Value)) > 0 Then
                                v_cas_cst_am = Trim(objXLWS.Range(xlcol_pricing_new_cas_cst_am & my_row).Value)
                            End If
                        
                            cur_unt_cst_am = Trim(objXLWS.Range(xlcol_pricing_cur_cas_cst_am & my_row).Value) / Trim(objXLWS.Range(xlcol_pricing_cur_cas_pak_qy & my_row).Value)
                            new_unt_cst_am = Trim(objXLWS.Range(xlcol_pricing_new_cas_cst_am & my_row).Value)
                            If objXLWS.Range(xlcol_pricing_new_cas_pak_qy & my_row).Value > 0 Then
                                new_unt_cst_am = Trim(objXLWS.Range(xlcol_pricing_new_cas_cst_am & my_row).Value) / Trim(objXLWS.Range(xlcol_pricing_new_cas_pak_qy & my_row).Value)
                            End If
                        
                            If new_unt_cst_am / cur_unt_cst_am >= 1.5 Or new_unt_cst_am / cur_unt_cst_am <= 0.5 Then
                                row_wrn_fl = "Y"
                                row_wrn_msg_tx = " Cost change results in a difference of 50% or greater than current cost."
                            End If
                        
                            If Len(Trim(objXLWS.Range(xlcol_pricing_new_sto_rcv_unt_qy & my_row).Value)) > 0 Then
                                v_new_sru_fl = "Y"
                            Else
                                v_new_sru_fl = "N"
                            End If
                            If Len(Trim(objXLWS.Range(xlcol_pricing_new_btl_chr_am & my_row).Value)) > 0 Then
                                v_new_btl_chr_fl = "Y"
                            Else
                                v_new_btl_chr_fl = "N"
                            End If
                            '--- Check To See If New Unit Cost = Current Unit Cost
                            '--- Comment out for Full Deal
                            'If cur_unt_cst_am = new_unt_cst_am And v_cas_pak_chg_fl = "N" And v_new_sru_fl = "N" And v_new_btl_chr_fl = "N" Then
                            '    row_err_fl = "Y"
                            '    row_err_msg_tx = " New Cost cannot be equal to Current Cost."
                            'End If
                        End If
                    End If
                End If
                
            End If
            
            '--- If error was found, proceed with highlighting the cell with the error
            If row_err_fl = "Y" Then
                err_fl = "Y"
                '--- Highlight Cell with Error
                With objXLWS.Range(my_col & my_row).Interior
                    .Pattern = xlSolid
                    .PatternColorIndex = xlAutomatic
                    .Color = RGB(218, 150, 148)
                    .TintAndShade = 0
                    .PatternTintAndShade = 0
                End With
                '--- Update Feedback Listbox
                With ListBox1
                    .AddItem ("ERROR: Cell " & my_col & my_row & row_err_msg_tx)
                End With
            '--- If Warning was found, highlight the cell with the warning
            ElseIf row_wrn_fl = "Y" Then
                '--- Highlight Cell with Error
                With objXLWS.Range(my_col & my_row).Interior
                    .Pattern = xlSolid
                    .PatternColorIndex = xlAutomatic
                    .Color = RGB(255, 255, 102)
                    .TintAndShade = 0
                    .PatternTintAndShade = 0
                End With
                '--- Update Feedback Listbox
                With ListBox1
                    .AddItem ("WARNING: Cell " & my_col & my_row & row_wrn_msg_tx)
                End With
            Else
                '--- If no error was found, remove the background color
                objXLWS.Range(my_col & my_row).Interior.ColorIndex = 0
            End If
            
            '--- Capture UPC & RBP Group
            v_rbp_grp = objXLWS.Range(xlcol_pricing_rbp_prc_grp_id & my_row).Value
            v_rbp_upc = objXLWS.Range(xlcol_pricing_con_upc_no & my_row).Value
            '--- Determine if promotion exists for item
            v_prm_alw = objXLWS.Range(xlcol_pricing_ofi_unt_am & my_row).Value
            If v_rbp_grp <> 0 Then
                '--- Determine if RBP Group Exists In Dictionary
                    If d_rbp_grp.Exists(v_rbp_grp) = True Then
                        '--- RBP Group Exists, Update
                        Set d_rbp_upc = d_rbp_grp(v_rbp_grp)
                        '--- Determine If UPC Exists Within RBP Group
                        If d_rbp_upc.Exists(v_rbp_upc) = False Then
                            '--- Add UPC To Dictionary
                            d_rbp_upc.Add v_rbp_upc, v_prm_alw
                        End If
                        '--- Determine If RBP Group has at least one item with a promotion
                        If Len(v_prm_alw) > 0 And d_rbp_grp_prm.Exists(v_rbp_grp) = False Then
                            d_rbp_grp_prm.Add v_rbp_grp, "Y"
                        End If
                    Else
                        '--- RBP Group DOES NOT Exist, Insert
                        Set d_rbp_upc = New Dictionary
                        '--- Add UPC To Dictionary
                        d_rbp_upc.Add v_rbp_upc, v_prm_alw
                        d_rbp_grp.Add v_rbp_grp, d_rbp_upc
                        
                        '--- Determine If RBP Group has at least one item with a promotion
                        If Len(v_prm_alw) > 0 Then
                            d_rbp_grp_prm.Add v_rbp_grp, "Y"
                        End If
                    End If
                End If
                '--- Clear Any Warnings From UPC & RBP Columns
                objXLWS.Range(xlcol_pricing_rbp_prc_grp_id & my_row).Interior.ColorIndex = 0
                objXLWS.Range(xlcol_pricing_con_upc_no & my_row).Interior.ColorIndex = 0
        Next
NextIteration:
    Next
    
    '--- Populate RBP GROUP Dictionary
    For Each v_rbp_grp In d_rbp_grp.Keys
        If d_rbp_grp_prm.Exists(v_rbp_grp) Then
            '--- determine if RBP Group has at least one record with a promotion entered by the user
            If d_rbp_grp_prm(v_rbp_grp) = "Y" Then
                '--- at least one UPC within the RBP group has a promotion, check all UPC within the group
                Set d_rbp_upc = d_rbp_grp(v_rbp_grp)
                For Each v_rbp_upc In d_rbp_upc.Keys
                    v_prm_alw = d_rbp_upc(v_rbp_upc)
                    If Len(v_prm_alw) = 0 Then
                        'Debug.Print "GROUP: " & v_rbp_grp & " UPC: " & v_rbp_upc & vbNewLine;
                        '--- Flag RBP Group so we can later indicate warnings to the user
                        d_rbp_grp_prm(v_rbp_grp) = "W"
                    End If
                Next
            End If
            '--- Check to see if we need to write out warning messages to the user
            If d_rbp_grp_prm(v_rbp_grp) = "W" Then
                For Each v_rbp_upc In d_rbp_upc.Keys
                    '--- Highlight Cell with Error
                    With Sheets("PRICING").Range(xlcol_pricing_rbp_prc_grp_id & d_upc_inf(v_rbp_upc)).Interior
                        .Pattern = xlSolid
                        .PatternColorIndex = xlAutomatic
                        .Color = RGB(255, 255, 102)
                        .TintAndShade = 0
                        .PatternTintAndShade = 0
                    End With
                    With Sheets("PRICING").Range(xlcol_pricing_con_upc_no & d_upc_inf(v_rbp_upc)).Interior
                        .Pattern = xlSolid
                        .PatternColorIndex = xlAutomatic
                        .Color = RGB(255, 255, 102)
                        .TintAndShade = 0
                        .PatternTintAndShade = 0
                    End With
                    '--- Update Feedback Listbox
                    row_err_msg_tx = " has a possible price group issue.  Please verify."
                    With ListBox1
                        .AddItem ("WARNING: UPC " & v_rbp_upc & " in Cell " & xlcol_pricing_con_upc_no & d_upc_inf(v_rbp_upc) & row_err_msg_tx)
                    End With
                Next
            End If
        End If
    Next
    
    '--- Protect Worksheet
    'objXLWS.Protect ("Teri!")
    'objXLWS.Protect Password:="Teri!", AllowFormattingCells:=False
    Call lock_worksheet("PRICING")
    
    '--- Update Caption Of Verify Data Button
    CommandButton2.Caption = "Verify Data"
       
    '--- Determine if any errors were encountered
    If err_fl = "N" Then
        'If vnd_dat_fnd_fl = "N" Then
        '    MsgBox ("Verification complete, however no changes were made.")
        'Else
            'Dim objXLWS As Excel.Worksheet
            ActiveWorkbook.Unprotect ("Teri!")
            Sheets("PRICING").Activate
            'Set objXLWS = ActiveWorkbook.Worksheets("PRICING")
            'ActiveSheet.Unprotect ("Teri!")
            'objXLWS.Protect ("Teri!")
            objXLWS.Visible = xlSheetHidden
            Sheets("IMPORT").Visible = xlSheetHidden
            'Sheets("PRICING").Visible = xlSheetHidden
            ActiveWorkbook.Protect ("Teri!")
            
            
            
            
            '--- enable export file button
            CommandButton1.Enabled = True
            CommandButton2.Enabled = False
            CommandButton4.Enabled = False
            MsgBox ("Verification complete.  No errors found.")
        'End If
    Else
        '--- display errors
        MsgBox ("Verification complete.  Errors found.  Please review and correct and re-run verification.")
        CommandButton2.Enabled = True
    End If
    
    'CommandButton1.Enabled = True
    
    '--- Come back to Review & Submit Tab
    Sheets("REVIEW & SUBMIT").Activate
    Sheets("REVIEW & SUBMIT").Select
End Sub

Private Sub CommandButton2_DblClick(ByVal Cancel As MSForms.ReturnBoolean)

End Sub


Private Sub CommandButton3_Click()
'---
'--- Continue Working on Data button
'---
Dim objXLWS As Excel.Worksheet
ActiveWorkbook.Unprotect ("Teri!")
Set objXLWS = ActiveWorkbook.Worksheets("PRICING")
objXLWS.Visible = xlSheetVisible
Set objXLWS = ActiveWorkbook.Worksheets("IMPORT")
objXLWS.Visible = xlSheetVisible
ActiveWorkbook.Protect ("Teri!")
CommandButton1.Enabled = False
CommandButton2.Enabled = True
CommandButton4.Enabled = True
End Sub



Public Sub CommandButton4_Click()
'---
'--- Refresh Cost & Retails button
'---
    Dim regEx As New VBScript_RegExp_55.RegExp
    Dim matches, s
'--- Refresh Retails and Costs
    Dim rtl_rule_min As Dictionary
    Dim rtl_rule_max As Dictionary
    Dim rtl_rule_rtl As Dictionary
    Dim rtl_rule_mu As Dictionary
    Dim rtl_rule_com As Dictionary
    Dim rtl_rule_sub_com As Dictionary
    
    Dim sub_com_rul As Dictionary
    Dim com_rul As Dictionary
    
    Dim arr_ctr_row_nums As Variant
    
    Dim ctr_inf As Dictionary
    Set ctr_inf = New Dictionary
    Dim ctr_upc_no As String
    
    
    
    
    Set rtl_rule_min = New Dictionary
    Set rtl_rule_max = New Dictionary
    Set rtl_rule_rtl = New Dictionary
    Set rtl_rule_mu = New Dictionary
    Set rtl_rule_com = New Dictionary
    Set rtl_rule_sub_com = New Dictionary
    
    Set sub_com_rul = New Dictionary
    Set com_rul = New Dictionary
    
    Set reg_sub_com_rul = New Dictionary
    Set reg_com_rul = New Dictionary
    
    
    '--- Unlock Worksheet
    Call unlock_worksheet("PRICING")
    Sheets("REVIEW & SUBMIT").Activate
    
    '--- Define Fields that will require validation
    Set dict = CreateObject("Scripting.Dictionary")
    '--- New SRU
    dict.Add xlcol_pricing_new_sto_rcv_unt_qy, "integer"
    '--- New Case Pack
    dict.Add xlcol_pricing_new_cas_pak_qy, "integer"
    '--- New Case Cost
    dict.Add xlcol_pricing_cur_cas_cst_am, "numeric"
    '---New Bottle Charge
    dict.Add xlcol_pricing_cur_btl_chr_am, "numeric"
    '--- Supplier Suggested White Tag Retail
    dict.Add xlcol_pricing_sug_reg_rtl_am, "retail"
    '--- Off Invoice Amount
    dict.Add xlcol_pricing_ofi_unt_am, "numeric"
    '--- Bill Back Amount
    dict.Add xlcol_pricing_sda_unt_am, "numeric"
    '--- Supplier Suggested Retail
    dict.Add xlcol_pricing_sug_rtl_am, "retail"
    
    '--- Read Retail Rules from data tab
    Set objXLWS = ActiveWorkbook.Worksheets("DATA")
    my_col = "A"
    my_row = 2
    rtl_rule_vlu_id = objXLWS.Range(my_col & my_row).Value
    Do While Len(rtl_rule_vlu_id) > 0
        rtl_rule_min.Add rtl_rule_vlu_id, objXLWS.Range("C" & my_row).Value
        rtl_rule_max.Add rtl_rule_vlu_id, objXLWS.Range("D" & my_row).Value
        rtl_rule_rtl.Add rtl_rule_vlu_id, objXLWS.Range("E" & my_row).Value
        rtl_rule_mu.Add rtl_rule_vlu_id, objXLWS.Range("F" & my_row).Value
        'rtl_rule_com.Add rtl_rule_vlu_id, objXLWS.Range("G" & my_row).Value
        'rtl_rule_sub_com.Add rtl_rule_vlu_id, objXLWS.Range("H" & my_row).Value
        
        'com_sub_com = objXLWS.Range("G" & my_row).Value & objXLWS.Range("H" & my_row).Value
        'If sub_com_rul.Exists(com_sub_com) = False Then
        '    sub_com_rul.Add com_sub_com, objXLWS.Range("F" & my_row).Value
        'End If
        
        
        my_row = my_row + 1
        rtl_rule_vlu_id = objXLWS.Range(my_col & my_row).Value
    Loop
    
    '--- Read Business Markup Information From Data Tab
    my_col = "G"
    my_row = 2
    my_com_cd = objXLWS.Range(my_col & my_row).Value
    Do While Len(my_com_cd) > 0
        com_sub_com = objXLWS.Range("G" & my_row).Value & objXLWS.Range("H" & my_row).Value
        reg_com_sub_com = objXLWS.Range("G" & my_row).Value & objXLWS.Range("H" & my_row).Value
        If sub_com_rul.Exists(com_sub_com) = False Then
            sub_com_rul.Add com_sub_com, objXLWS.Range("I" & my_row).Value
            reg_sub_com_rul.Add com_sub_com, objXLWS.Range("J" & my_row).Value
        End If
        my_row = my_row + 1
        my_com_cd = objXLWS.Range(my_col & my_row).Value
    Loop
    
    '--- Define Pricing Worksheet Object
    Set objXLWS = ActiveWorkbook.Worksheets("PRICING")
    objXLWS.Activate
    my_sel_col = ActiveCell.Address
    
    '--- Get Last Row Containing Data
    row_qy = objXLWS.UsedRange.Rows.Count
    
    
    '--- Validate Data Prior To Perfoming Calculations
    err_fl = False
    my_err_cell = ""
    For x = xlrow_pricing_bgn To row_qy
        my_row = x
        For Each my_col In dict.Keys()
            my_cell_vlu = Trim(objXLWS.Range(my_col & my_row).Value)
            err_fl = validate_field(my_cell_vlu, dict(my_col))
            If err_fl = True Then
                '--- Save Cell where error was found so we can re-direct them later
                my_sel_col = my_col & my_row
                Exit For
            End If
        Next
        If err_fl = True Then
            Exit For
        End If
    Next
            
    If err_fl = False Then
        '--- No Errors Found, Proceed With Calculating Costs/Retails
        
        
        Set objXLWS_ctr = ActiveWorkbook.Worksheets("CONTRACTS")
        my_col = "A"
        my_row = 2
        ctr_upc_no = objXLWS_ctr.Range(my_col & my_row).Value
        Do While Len(ctr_upc_no) > 0
            If ctr_inf.Exists(ctr_upc_no) Then
                ctr_inf.Item(ctr_upc_no) = ctr_inf.Item(ctr_upc_no) & "," & my_row
            Else
                ctr_inf.Add ctr_upc_no, "," & my_row
            End If
            
            
            
            
            my_row = my_row + 1
            ctr_upc_no = objXLWS_ctr.Range(my_col & my_row).Value
        Loop
        
        
        
        
        
        '--- Loop Over Each Row And Calculate Data
        Set objXLWS = ActiveWorkbook.Worksheets("PRICING")
        objXLWS.Activate
        my_sel_col = ActiveCell.Address
        neg_zero_cst_fl = "N"
        For x = xlrow_pricing_bgn To row_qy
            row_err_fl = "N"
            row_err_msg_tx = ""
            '--- Calculate True Row Number
            my_row = x
              
            '--- Capture UPC Number and Row Number
            v_upc = Trim(objXLWS.Range(xlcol_pricing_con_upc_no & my_row).Value)
            
            
            '--- Loop Over Contract Data And Determine If Existing Offers Impact Promotion Window
            existing_oi_ctr_am = 0
            If ctr_inf.Exists(v_upc) Then
                '--- contracts Exist...
                
                '--- Get OI Dates Supplied By User
                prc_oi_stt_dt = Trim(objXLWS.Range(xlcol_pricing_oi_stt_dt & my_row).Value)
                prc_oi_end_dt = Trim(objXLWS.Range(xlcol_pricing_oi_end_dt & my_row).Value)
                
                '--- Loop Over Row(s) Containing Contract Data For Item
                ctr_row_list = ctr_inf.Item(v_upc)
                arr_ctr_row_nums = Split(ctr_row_list, ",")
                For i = 1 To UBound(arr_ctr_row_nums)
                    ctr_row = arr_ctr_row_nums(i)
                    
                    
                    
                    '--- Get Start And End Dates For Existing Contract
                    ctr_oi_stt_dt = Trim(objXLWS_ctr.Range(xlcol_contract_oi_stt_dt & ctr_row).Value)
                    ctr_oi_end_dt = Trim(objXLWS_ctr.Range(xlcol_contract_oi_end_dt & ctr_row).Value)
                    
                    If (CDate(ctr_oi_end_dt) >= CDate(prc_oi_stt_dt) And CDate(ctr_oi_stt_dt) < CDate(prc_oi_stt_dt)) Or (CDate(ctr_oi_end_dt) <= CDate(prc_oi_end_dt) And CDate(ctr_oi_stt_dt) >= CDate(prc_oi_stt_dt)) Then
                    'If CDate(ctr_oi_end_dt) >= CDate(prc_oi_stt_dt) Then
                      '--- We have an overlapping contract, include
                      existing_oi_ctr_am = existing_oi_ctr_am + Trim(objXLWS_ctr.Range(xlcol_contract_ofi_unt_am & ctr_row).Value)
                    End If
                    
                    
                    'xlcol_pricing_oi_stt_dt
                    'xlcol_pricing_oi_end_dt
                    
                Next i
            End If
            
            
            '--- Default Calculated Fields
            objXLWS.Range(xlcol_pricing_prj_reg_rtl_mu_pt & my_row).Value = ""
            objXLWS.Range(xlcol_pricing_sup_reg_rtl_mu_pt & my_row).Value = ""
            objXLWS.Range(xlcol_pricing_prj_reg_rtl_am & my_row).Value = ""
            objXLWS.Range(xlcol_pricing_net_cst_am & my_row).Value = ""
            objXLWS.Range(xlcol_pricing_prj_rtl_am & my_row).Value = ""
            objXLWS.Range(xlcol_pricing_kro_mu_pt & my_row).Value = ""
            objXLWS.Range(xlcol_pricing_sup_mu_pt & my_row).Value = ""

            '--- Set Variables for all fields involved in calculations
            cur_cas_pak_qy = Trim(objXLWS.Range(xlcol_pricing_cur_cas_pak_qy & my_row).Value)
            new_cas_pak_qy = Trim(objXLWS.Range(xlcol_pricing_new_cas_pak_qy & my_row).Value)
            
            
            
            'cur_cst_am = objXLWS.Range(xlcol_pricing_unt_001_cst_am & my_row).Value
            'new_cst_am = objXLWS.Range(xlcol_pricing_new_unt_001_cst_am & my_row).Value
            
            cur_cas_cst_am = Trim(objXLWS.Range(xlcol_pricing_cur_cas_cst_am & my_row).Value)
            new_cas_cst_am = Trim(objXLWS.Range(xlcol_pricing_new_cas_cst_am & my_row).Value)
            
            sug_reg_rtl_am = Trim(objXLWS.Range(xlcol_pricing_sug_reg_rtl_am & my_row).Value)
            ofi_unt_am = Trim(objXLWS.Range(xlcol_pricing_ofi_unt_am & my_row).Value)
            '--- Add Existing OI Offer Amounts (If Applicable)
            If Len(ofi_unt_am) = 0 Then
                ofi_unt_am = 0
            End If
            'ofi_unt_am = ofi_unt_am + existing_oi_ctr_am
            objXLWS.Range(xlcol_pricing_exi_ofi_unt_am & my_row).Value = existing_oi_ctr_am
                        
            sda_unt_am = Trim(objXLWS.Range(xlcol_pricing_sda_unt_am & my_row).Value)
            sug_rtl_am = Trim(objXLWS.Range(xlcol_pricing_sug_rtl_am & my_row).Value)
            net_prc_fl = UCase(Trim(objXLWS.Range(xlcol_pricing_net_prc_fl & my_row).Value))
            
            '--- Determine If User provided a retail multiple for REGULAR/WHITE TAG RETAIL (i.e. 2/4.00)
            regEx.Pattern = "\d+\/\d+\.*\d*"
            regEx.IgnoreCase = True 'True to ignore case
            regEx.Global = True 'True matches all occurances, False matches the first occurance
            If regEx.Test(sug_reg_rtl_am) Then
                '--- Retail With Multiples Found, Split
                my_retail = Split(sug_reg_rtl_am, "/", 2)
                my_rtl_qy = my_retail(0)
                my_rtl_am = my_retail(1)
                sug_reg_rtl_am = my_rtl_am / my_rtl_qy
            End If
            
            '--- Determine If User provided a retail multiple for PROMO RETAIL (i.e. 2/4.00)
            regEx.Pattern = "\d+\/\d+\.*\d*"
            regEx.IgnoreCase = True 'True to ignore case
            regEx.Global = True 'True matches all occurances, False matches the first occurance
            If regEx.Test(sug_rtl_am) Then
                '--- Retail With Multiples Found, Split
                my_retail = Split(sug_rtl_am, "/", 2)
                my_rtl_qy = my_retail(0)
                my_rtl_am = my_retail(1)
                sug_rtl_am = my_rtl_am / my_rtl_qy
            End If
            
            '--- Determine Which CASE PACK to use
            v_cas_pak_qy = cur_cas_pak_qy
            If Len(new_cas_pak_qy) > 0 Then
                '--- User provided new SRU amount, use what was provided
                v_cas_pak_qy = new_cas_pak_qy
            End If
            
            
            '--- -----------------------------------------------------------------------
            '--- DETERMINE WHICH MARK-UP PERCENTAGE TO USE (BASED ON COM/SUB-COM)
            '--- -----------------------------------------------------------------------
            '--- Default Commodity & Sub-Commodity
            v_rtl_rul_com_cd = "XXX"
            v_rtl_rul_sub_com_cd = "XXXXX"
            v_rtl_rul_com_sub_com = v_rtl_rul_com_cd & v_rtl_rul_sub_com_cd
            
            '--- Get Commodity & Sub-Commodity of Item
            v_com = Trim(objXLWS.Range(xlcol_pricing_com_cd & my_row).Value)
            v_sub_com = Trim(objXLWS.Range(xlcol_pricing_sub_com_cd & my_row).Value)
            v_com_sub_com = v_com & v_sub_com
            
            '--- Determine If Item Com/Subcom has a different markup
            If sub_com_rul.Exists(v_com_sub_com) = True Then
                v_rtl_rul_com_cd = Left(com_sub_com, 3)
                v_rtl_rul_sub_com_cd = Right(com_sub_com, 5)
                v_rtl_rul_com_sub_com = v_rtl_rul_com_cd & v_rtl_rul_sub_com_cd
            End If
            
            '--- Get Markup Amount
            v_rtl_rul_mu = sub_com_rul(v_rtl_rul_com_sub_com)
            v_reg_rtl_rul_mu = reg_sub_com_rul(v_rtl_rul_com_sub_com)
            
            'fnd_com_sub_com = "N"
            'For Each com_sub_com In sub_com_rul.Keys()
            '    If com_sub_com = v_com_sub_com Then
            '        fnd_com_sub_com = "Y"
            '        v_rtl_rul_com_cd = Left(com_sub_com, 3)
            '        v_rtl_rul_sub_com_cd = Right(com_sub_com, 5)
            '    End If
            'Next
        
        
            
            '--- -----------------------------------------------------------------------
            '--- COST/PACK CHANGES
            '--- -----------------------------------------------------------------------
            
            '--- Calculate Current Unit Cost
            v_unt_cst_am = cur_cas_cst_am
            If v_cas_pak_qy <> 0 Then
                v_unt_cst_am = v_unt_cst_am / v_cas_pak_qy
            End If
            
            '--- Determine if user provided pack/cost change
            v_new_cst_am = ""
            If Len(new_cas_cst_am) > 0 Then
                If new_cas_cst_am > 0 Then
                    '--- User provided new cost amount, use what was provided
                    v_new_cst_am = new_cas_cst_am
                End If
            End If
            
           
            If Len(v_new_cst_am) > 0 Then
                '--- User provided a new cost, calculate projected white tag retail
                v_new_unt_cst_am = v_new_cst_am
                If v_cas_pak_qy > 0 Then
                    v_new_unt_cst_am = v_new_unt_cst_am / v_cas_pak_qy
                End If
                v_clc_rtl_am = ""
                For Each rtl_rule_vlu_id In rtl_rule_min.Keys()
                    'v_pre_rtl_am = v_new_unt_cst_am * (rtl_rule_mu(rtl_rule_vlu_id) / 100)
                    If (v_reg_rtl_rul_mu = 1) Then
                        v_pre_rtl_am = v_new_unt_cst_am + (v_new_unt_cst_am)
                    Else
                        v_pre_rtl_am = v_new_unt_cst_am + (v_new_unt_cst_am * (v_reg_rtl_rul_mu / (1 - v_reg_rtl_rul_mu)))
                    End If
                    v_cents = Round((v_pre_rtl_am - Int(v_pre_rtl_am)), 4)
            
            
                    '--- Determine appropriate retail rule
                    v_min = rtl_rule_min(rtl_rule_vlu_id)
                    v_max = rtl_rule_max(rtl_rule_vlu_id)
                    If (v_cents * 100) >= v_min And (v_cents * 100) < v_max Then
                        v_clc_rtl_am = Int(v_pre_rtl_am) + (rtl_rule_rtl(rtl_rule_vlu_id) / 100)
                        objXLWS.Range(xlcol_pricing_prj_reg_rtl_am & my_row).Value = v_clc_rtl_am
                    End If
                Next
                
                '--- Calculate Kroger Projected White Tag Markup Percent
                v_mu_pt = 0
                v_clc_rtl_am = objXLWS.Range(xlcol_pricing_prj_reg_rtl_am & my_row).Value
                If v_clc_rtl_am <> 0 Then
                    v_mu_pt = (v_clc_rtl_am - v_new_unt_cst_am) / v_clc_rtl_am
                End If
                objXLWS.Range(xlcol_pricing_prj_reg_rtl_mu_pt & my_row).Value = v_mu_pt
                v_clc_rtl_am = ""
                v_unt_cst_am = v_new_unt_cst_am
            End If
            
            '--- Calculate Suggested REGULAR Retail Markup Percent
            v_sug_reg_rtl_am = sug_reg_rtl_am
            v_mu_pt = 0
            If Len(Trim(v_sug_reg_rtl_am)) > 0 Then
                If v_sug_reg_rtl_am <> 0 Then
                    v_mu_pt = (v_sug_reg_rtl_am - v_unt_cst_am) / v_sug_reg_rtl_am
                End If
                objXLWS.Range(xlcol_pricing_sup_reg_rtl_mu_pt & my_row).Value = v_mu_pt
            End If
            
            '--- -----------------------------------------------------------------------
            '--- PROMOTIONS
            '--- -----------------------------------------------------------------------
            
            '--- Determine Gross Cost
            v_cst_am = cur_cas_cst_am
            If Len(new_cas_cst_am) > 0 Then
                If new_cas_cst_am > 0 Then
                    '--- User provided new cost amount, use what was provided
                    v_cst_am = new_cas_cst_am
                End If
            End If
            
            '--- Determine If User supplied an OI offer
            v_oi_am = 0
            If Len(ofi_unt_am) > 0 Then
                If ofi_unt_am > 0 Then
                    '--- User provided new OI amount, use what was provided
                    v_oi_am = ofi_unt_am
                End If
            End If
            
            '--- Determine If User supplied a SDA offer
            v_sda_am = 0
            If Len(sda_unt_am) > 0 Then
                If sda_unt_am > 0 Then
                    '--- User provided new SRU amount, use what was provided
                    v_sda_am = sda_unt_am
                End If
            End If
            
            
            '--- Determine If Promotion Was Offered
            '--- Determine If Net Price Promotion Was Offered
            If v_oi_am > 0 Or v_sda_am > 0 Or (net_prc_fl = "Y" And Len(sug_rtl_am) > 0) Then
'            If (v_oi_am > 0 Or v_sda_am > 0) Then
                '--- Determine Net Cost
                v_net_cst_am = v_cst_am
                v_net_cst_am = v_net_cst_am - v_oi_am
                If v_cas_pak_qy > 0 Then
                    v_net_cst_am = v_net_cst_am / v_cas_pak_qy
                End If
                v_net_cst_am = v_net_cst_am - v_sda_am
                v_net_cst_am = Round(v_net_cst_am, 4)
                objXLWS.Range(xlcol_pricing_net_cst_am & my_row).Value = v_net_cst_am
                
                '--- Determine If User Should be alerted about negative costs
                If v_net_cst_am <= 0 Then
                    '--- Negative or Zero Cost found, set flag to alert user
                    neg_zero_cst_fl = "Y"
                Else
                    '--- Calculate Suggested PROMOTIONAL Retail Markup Percent
                    v_sug_rtl_am = sug_rtl_am
                    v_mu_pt = 0
                    If Len(Trim(v_sug_rtl_am)) > 0 Then
                        If v_sug_rtl_am <> 0 Then
                           v_mu_pt = (v_sug_rtl_am - v_net_cst_am) / v_sug_rtl_am
                        End If
                        objXLWS.Range(xlcol_pricing_sup_mu_pt & my_row).Value = v_mu_pt
                    Else
                        '--- No Suggested promotional retail was provided, make sure associated markup percent is blank
                        objXLWS.Range(xlcol_pricing_sup_mu_pt & my_row).Value = ""
                    End If

                    '--- Determine Projected Retail
                    For Each rtl_rule_vlu_id In rtl_rule_min.Keys()
                        'v_pre_rtl_am = v_net_cst_am * (rtl_rule_mu(rtl_rule_vlu_id) / 100)
                        If (v_rtl_rul_mu = 1) Then
                            v_pre_rtl_am = v_net_cst_am + (v_net_cst_am)
                        Else
                            v_pre_rtl_am = v_net_cst_am + (v_net_cst_am * (v_rtl_rul_mu / (1 - v_rtl_rul_mu)))
                        End If
                        v_cents = Round((v_pre_rtl_am - Int(v_pre_rtl_am)), 4)
                
                        '--- Determine appropriate retail rule
                        v_min = rtl_rule_min(rtl_rule_vlu_id)
                        v_max = rtl_rule_max(rtl_rule_vlu_id)
                        If (v_cents * 100) >= v_min And (v_cents * 100) < v_max Then
                            v_clc_rtl_am = Int(v_pre_rtl_am) + (rtl_rule_rtl(rtl_rule_vlu_id) / 100)
                            objXLWS.Range(xlcol_pricing_prj_rtl_am & my_row).Value = v_clc_rtl_am
                        End If
                        'MsgBox (rtl_rule_max(rtl_rule_vlu_id))
                    Next
                End If
                '--- Calculate Kroger Markup Percent
                v_mu_pt = 0
                v_clc_rtl_am = objXLWS.Range(xlcol_pricing_prj_rtl_am & my_row).Value
                If v_clc_rtl_am <> 0 Then
                    v_mu_pt = (v_clc_rtl_am - v_net_cst_am) / v_clc_rtl_am
                End If
                objXLWS.Range(xlcol_pricing_kro_mu_pt & my_row).Value = v_mu_pt
            End If
        Next
        
        '--- Notify User if Negative Cost was found
        'If neg_zero_cst_fl = "Y" Then
        '    MsgBox ("WARNING: At least one negative cost was found.  Please correct prior to submitting your data.  Negative Net Costs will result in your data being rejected.")
        'End If
    Else
        MsgBox ("WARNING: Errors found with data required for retail and cost calculations.  Please correct the errors and try again.  If you need help locating the errors, run the Verify Data option on the REVIEW & SUBMIT tab.")
    End If
    
    '--- Protect Worksheet
    Call lock_worksheet("PRICING")
    

    '--- Redirect user to their last position no pricing sheet
    If Len(cost_retail_redirect) = 0 Then
        cost_retail_redirect = "PRICING"
    End If
    Sheets(cost_retail_redirect).Activate
    If cost_retail_redirect = "PRICING" Then
        ActiveSheet.Range(my_sel_col).Select
    End If
    cost_retail_redirect = "PRICING"
    
End Sub

Private Sub ListBox1_Click()

End Sub


Private Sub ListBox1_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
Dim my_cell_vlu As String
Dim my_cell_ws_vlu As String
Dim my_cell_diff_no As Integer

'Find "CELL" in the listbox string
my_cell_ws_vlu = InStr(InStr(1, ListBox1.Value, "Cell", vbTextCompare) + 5, ListBox1.Value, " ", vbTextCompare)
'Find the true length of the cell, ignoring whitespace
my_cell_diff_no = my_cell_ws_vlu - InStr(1, ListBox1.Value, "Cell", vbTextCompare) - 5
my_cell_vlu = Trim(Mid(ListBox1.Value, InStr(1, ListBox1.Value, "Cell", vbTextCompare) + 5, my_cell_diff_no))

ActiveWorkbook.Unprotect ("Teri!")
Sheets("PRICING").Visible = xlSheetVisible
ActiveWorkbook.Protect ("Teri!")
Sheets("PRICING").Activate
ActiveSheet.Range(my_cell_vlu).Select
'disable export file button
CommandButton1.Enabled = False

'Application.GoTo PRICING.Range(my_cell_vlu), True
End Sub


Private Sub Worksheet_SelectionChange(ByVal Target As Range)

End Sub


Attribute VB_Name = "Sheet4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "cmd_import, 1, 0, MSForms, CommandButton"
Attribute VB_Control = "CommandButton1, 2, 1, MSForms, CommandButton"
Private Sub CommandButton1_Click()
    '--- Unlock Import Worksheet
    Call unlock_worksheet("IMPORT")
    
    If MsgBox("Are you sure that you wish to clear the contents of the Import form?", vbYesNo, "Confirm") = vbYes Then
        
        '--- Get Last Row Containing Data
        row_qy = ActiveSheet.UsedRange.Rows.Count
        '--- Turn ScreenUpdate OFF
        Application.ScreenUpdating = False
        '--- Clear User's Content
        ActiveSheet.Range("A5:R" & row_qy).ClearContents
        '--- Turn ScreenUpdate ON
        Application.ScreenUpdating = True
    End If
    '--- Lock Import Worksheet
    Call lock_worksheet("IMPORT")
End Sub

Private Sub cmd_import_Click()
Dim err_fl As String
    Dim err_msg_tx As String
    Dim row_qy As Integer
    Dim objXLWS As Excel.Worksheet
    Dim my_upc_no As Variant
    Dim v_upc As Variant
    Dim v_new_unt_001_qy As Variant
    Dim v_new_unt_001_cst_am As Variant
    Dim FindString As String
    Dim Rng As Range
    Dim cas_pak_chg_fl As String
        
    
    '--- Column Definitions
    xlcol_import_stu = "A"
    xlcol_import_con_upc_no = "B"
    xlcol_import_vnd_pdt_no = "C"
    xlcol_import_del_rqst_tx = "D"
    xlcol_import_net_prc_fl = "E"
    
    xlcol_import_new_sto_rcv_unt_qy = "F"
    xlcol_import_new_cas_pak_qy = "G"
    xlcol_import_new_cas_cst_am = "H"
    xlcol_import_new_btl_chr_am = "I"
    xlcol_import_sto_rcv_unt_eff_day_dt = "J"
    xlcol_import_sug_reg_rtl_am = "K"
    
    xlcol_import_oi_unt_am = "L"
    xlcol_import_oi_stt_dt = "M"
    xlcol_import_oi_end_dt = "N"
    xlcol_import_sda_unt_am = "O"
    xlcol_import_sda_stt_dt = "P"
    xlcol_import_sda_end_dt = "Q"
    xlcol_import_sug_rtl_am = "R"
    
    
    
    
    
    
    '--- Unlock Import Worksheet
    Call unlock_worksheet("IMPORT")
    
    '--- Get Last Row Containing Data
    row_qy = ActiveSheet.UsedRange.Rows.Count
    
    '--- Clear Import Status
    For x = 5 To row_qy
        ' Selects cell down 1 row from active cell.
        'ActiveCell.Offset(1, 0).Select
        '--- Clear Import Status Field
        ActiveSheet.Range(xlcol_import_stu & x) = ""
    Next
    
    '--- Set Variable to determine if cost and retail calculations will be required
    v_recalc_cst_rtl_fl = "N"
    
    '--- Get Last Row Containing Data
    row_qy = ActiveSheet.UsedRange.Rows.Count
    
    '--- Loop Over Each Row And Validate Data
    ActiveSheet.Range("A5").Select
    For x = 5 To row_qy
        If Len(ActiveSheet.Range(xlcol_import_con_upc_no & x).Value) > 0 Then
            '--- Selects cell down 1 row from active cell.
            'ActiveCell.Offset(1, 0).Select
            '--- Clear Import Status Field
            ActiveSheet.Range(xlcol_import_stu & x) = ""
            '--- Set Variables from Import Sheet
            v_upc = Right("0000000000000" & ActiveSheet.Range(xlcol_import_con_upc_no & x).Value, 13)
            v_vnd_pdt_no = ActiveSheet.Range(xlcol_import_vnd_pdt_no & x).Value
            v_del_rqst_tx = ActiveSheet.Range(xlcol_import_del_rqst_tx & x).Value
            v_net_prc_fl = ActiveSheet.Range(xlcol_import_net_prc_fl & x).Value
            v_sto_rcv_unt_qy = ActiveSheet.Range(xlcol_import_new_sto_rcv_unt_qy & x).Value
            v_cas_pak_qy = ActiveSheet.Range(xlcol_import_new_cas_pak_qy & x).Value
            v_cas_cst_am = ActiveSheet.Range(xlcol_import_new_cas_cst_am & x).Value
            v_btl_chr_am = ActiveSheet.Range(xlcol_import_new_btl_chr_am & x).Value
            v_sto_rcv_unt_eff_day_dt = ActiveSheet.Range(xlcol_import_sto_rcv_unt_eff_day_dt & x).Value
            v_sug_reg_rtl_am = ActiveSheet.Range(xlcol_import_sug_reg_rtl_am & x).Value
            v_ofi_unt_am = ActiveSheet.Range(xlcol_import_oi_unt_am & x).Value
            v_oi_stt_dt = ActiveSheet.Range(xlcol_import_oi_stt_dt & x).Value
            v_oi_end_dt = ActiveSheet.Range(xlcol_import_oi_end_dt & x).Value
            v_sda_unt_am = ActiveSheet.Range(xlcol_import_sda_unt_am & x).Value
            v_sda_stt_dt = ActiveSheet.Range(xlcol_import_sda_stt_dt & x).Value
            v_sda_end_dt = ActiveSheet.Range(xlcol_import_sda_end_dt & x).Value
            v_sug_rtl_am = ActiveSheet.Range(xlcol_import_sug_rtl_am & x).Value
    
    
            '--- Update Pricing Sheet with data
            FindString = v_upc
            If Trim(FindString) <> "" Then
                With Sheets("PRICING").Range(xlcol_pricing_con_upc_no & ":" & xlcol_pricing_con_upc_no)
                    Set Rng = .Find(What:=FindString, _
                                    After:=.Cells(.Cells.Count), _
                                    LookIn:=xlValues, _
                                    LookAt:=xlWhole, _
                                    SearchOrder:=xlByRows, _
                                    SearchDirection:=xlNext, _
                                    MatchCase:=False)
                    If Not Rng Is Nothing Then
                        v_import_stu = "IMPORTED"
                        '--- Extract Row Number from Rng.Address Variable i.e. $G$3
                        pricing_row = ExtractElement(Rng.Address, 3, "$")
                        '--- Vendor Product #
                        If Len(v_vnd_pdt_no) > 0 Then
                            Sheets("PRICING").Range(xlcol_pricing_vnd_pdt_no & pricing_row) = v_vnd_pdt_no
                        End If
                        '--- Delete Record Request
                        If Len(v_del_rqst_tx) > 0 Then
                            Sheets("PRICING").Range(xlcol_pricing_del_rqst_tx & pricing_row) = v_del_rqst_tx
                        End If
                        
                        '--- Net Pricing Flag
                        If Len(v_net_prc_fl) > 0 Then
                            Sheets("PRICING").Range(xlcol_pricing_net_prc_fl & pricing_row) = v_net_prc_fl
                        End If

                        '--- New Store Receiving Unit Qty
                        If Len(v_sto_rcv_unt_qy) > 0 Then
                            v_recalc_cst_rtl_fl = "Y"
                            Sheets("PRICING").Range(xlcol_pricing_new_sto_rcv_unt_qy & pricing_row) = ""
                            If Sheets("PRICING").Range(xlcol_pricing_cur_sto_rcv_unt_qy & pricing_row).Value <> v_sto_rcv_unt_qy Then
                                Sheets("PRICING").Range(xlcol_pricing_new_sto_rcv_unt_qy & pricing_row) = v_sto_rcv_unt_qy
                            End If
                        End If
                        '--- New Case Pack
                        'cas_pak_chg_fl = "N"
                        'If Len(v_cas_pak_qy) > 0 Then
                        '    v_recalc_cst_rtl_fl = "Y"
                        '    Sheets("PRICING").Range(xlcol_pricing_new_cas_pak_qy & pricing_row) = ""
                        '    If Sheets("PRICING").Range(xlcol_pricing_cur_cas_pak_qy & pricing_row).Value <> v_cas_pak_qy Then
                        '        Sheets("PRICING").Range(xlcol_pricing_new_cas_pak_qy & pricing_row) = v_cas_pak_qy
                        '        cas_pak_chg_fl = "Y"
                        '    End If
                        'End If
                        ''--- New Case Cost
                        'If Len(v_cas_cst_am) > 0 Then
                        '    v_recalc_cst_rtl_fl = "Y"
                        '    Sheets("PRICING").Range(xlcol_pricing_new_cas_cst_am & pricing_row) = ""
                        '    If Sheets("PRICING").Range(xlcol_pricing_cur_cas_cst_am & pricing_row).Value <> v_cas_cst_am Or cas_pak_chg_fl = "Y" Then
                        '        Sheets("PRICING").Range(xlcol_pricing_new_cas_cst_am & pricing_row) = v_cas_cst_am
                        '    End If
                        'End If
                        cas_pak_chg_fl = "N"
                        If Len(v_cas_pak_qy) > 0 Or Len(v_cas_cst_am) > 0 Then
                            v_recalc_cst_rtl_fl = "Y"
                            Sheets("PRICING").Range(xlcol_pricing_new_cas_pak_qy & pricing_row) = ""
                            Sheets("PRICING").Range(xlcol_pricing_new_cas_cst_am & pricing_row) = ""
                            If Sheets("PRICING").Range(xlcol_pricing_cur_cas_pak_qy & pricing_row).Value <> v_cas_pak_qy Or Sheets("PRICING").Range(xlcol_pricing_cur_cas_cst_am & pricing_row).Value <> v_cas_cst_am Then
                                Sheets("PRICING").Range(xlcol_pricing_new_cas_pak_qy & pricing_row) = v_cas_pak_qy
                                Sheets("PRICING").Range(xlcol_pricing_new_cas_cst_am & pricing_row) = v_cas_cst_am
                                cas_pak_chg_fl = "Y"
                            End If
                        End If

                        '--- Bottle Charge
                        If Len(v_btl_chr_am) > 0 Then
                            v_recalc_cst_rtl_fl = "Y"
                            Sheets("PRICING").Range(xlcol_pricing_new_btl_chr_am & pricing_row) = ""
                            If Sheets("PRICING").Range(xlcol_pricing_cur_btl_chr_am & pricing_row).Value <> v_btl_chr_am Then
                                Sheets("PRICING").Range(xlcol_pricing_new_btl_chr_am & pricing_row) = v_btl_chr_am
                            End If
                        End If
                        '--- New Store Receiving Unit Qty Effective Date
                        If Len(v_sto_rcv_unt_eff_day_dt) > 0 Then
                            Sheets("PRICING").Range(xlcol_pricing_sto_rcv_unt_eff_day_dt & pricing_row) = v_sto_rcv_unt_eff_day_dt
                        End If
                                                
                        '--- Bracket 2 Cost & Qty
                        If Len(v_unt_002_qy) > 0 Then
                            Sheets("PRICING").Range(xlcol_pricing_new_unt_002_qy & pricing_row) = v_unt_002_qy
                            v_recalc_cst_rtl_fl = "Y"
                        End If
                        If Len(v_unt_002_cst_am) > 0 Then
                            Sheets("PRICING").Range(xlcol_pricing_new_unt_002_cst_am & pricing_row) = v_unt_002_cst_am
                            v_recalc_cst_rtl_fl = "Y"
                        End If
                        '--- Bracket 3 Cost & Qty
                        If Len(v_unt_003_qy) > 0 Then
                            Sheets("PRICING").Range(xlcol_pricing_new_unt_003_qy & pricing_row) = v_unt_003_qy
                            v_recalc_cst_rtl_fl = "Y"
                        End If
                        If Len(v_unt_003_cst_am) > 0 Then
                            Sheets("PRICING").Range(xlcol_pricing_new_unt_003_cst_am & pricing_row) = v_unt_003_cst_am
                            v_recalc_cst_rtl_fl = "Y"
                        End If
                        '--- Suggested WHITE TAG Retail Price
                        If Len(v_sug_reg_rtl_am) > 0 Then
                            Sheets("PRICING").Range(xlcol_pricing_sug_reg_rtl_am & pricing_row) = v_sug_reg_rtl_am
                            v_recalc_cst_rtl_fl = "Y"
                        End If
                        
                        '--- Off Invoice Amount
                        If Len(v_ofi_unt_am) > 0 Then
                            Sheets("PRICING").Range(xlcol_pricing_ofi_unt_am & pricing_row) = v_ofi_unt_am
                            v_recalc_cst_rtl_fl = "Y"
                        End If
                        If Len(v_oi_stt_dt) > 0 Then
                            Sheets("PRICING").Range(xlcol_pricing_oi_stt_dt & pricing_row) = v_oi_stt_dt
                        End If
                        If Len(v_oi_end_dt) > 0 Then
                            Sheets("PRICING").Range(xlcol_pricing_oi_end_dt & pricing_row) = v_oi_end_dt
                        End If
                        
                        '--- Scan-Down/Bill-back Amount
                        If Len(v_sda_unt_am) > 0 Then
                            Sheets("PRICING").Range(xlcol_pricing_sda_unt_am & pricing_row) = v_sda_unt_am
                            v_recalc_cst_rtl_fl = "Y"
                        End If
                        If Len(v_sda_stt_dt) > 0 Then
                            Sheets("PRICING").Range(xlcol_pricing_sda_stt_dt & pricing_row) = v_sda_stt_dt
                        End If
                        If Len(v_sda_end_dt) > 0 Then
                            Sheets("PRICING").Range(xlcol_pricing_sda_end_dt & pricing_row) = v_sda_end_dt
                        End If
                        
                        '--- Suggested PROMO Retail Price
                        If Len(v_sug_rtl_am) > 0 Then
                            Sheets("PRICING").Range(xlcol_pricing_sug_rtl_am & pricing_row) = v_sug_rtl_am
                            v_recalc_cst_rtl_fl = "Y"
                        End If
                       
                        
                    Else
                        '--- UPC provided by supplier could not be found, Set appropriate status
                        v_import_stu = "NOT FOUND"
                    End If
                    ActiveSheet.Range(xlcol_import_stu & x) = v_import_stu
                End With
            End If
        End If
    Next x
    
    '--- Set Cell Protection to UnLock
    ActiveSheet.Range(xlcol_import_con_upc_no & 5 & ":" & xlcol_import_sug_rtl_am & row_qy).Locked = False

    '--- Determine If Costs & Retails Need to be Refreshed
    If v_recalc_cst_rtl_fl = "Y" Then
        'Call Sheets("REVIEW & SUBMIT").CommandButton4_Click
        'MsgBox ("FIX ME")
        '--- Call Refresh Cost & Retail Buttons
        cost_retail_redirect = "IMPORT"
        Call Sheets("REVIEW & SUBMIT").CommandButton4_Click
        
    End If
    
    '--- Lock Import Worksheet
    Call lock_worksheet("IMPORT")
End Sub
Attribute VB_Name = "Sheet5"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet6"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet7"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True


Public Sub Workbook_Open()




End Sub
Attribute VB_Name = "frm_email"
Attribute VB_Base = "0{2CBDFBCE-333B-42AD-B460-5402CE62C024}{7875B17E-6DCA-492D-916A-6EEEE1D6FFCF}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub CommandButton1_Click()

'MsgBox OptionButton1.Value


If OptionButton1.Value = True Then
    CreateEmail
End If
frm_email.Hide
frm_savefile.Hide

End Sub

Private Sub CommandButton2_Click()
frm_email.Hide
End Sub

Private Sub Label2_Click()

End Sub

Private Sub OptionButton1_Click()
 send_to_email_address_line.Visible = False
 attached_xml_file_line.Visible = False
 send_to_email_address_caption.Visible = False
 attached_xml_file_caption.Visible = False
 subject_note.Visible = False

End Sub

Private Sub OptionButton2_Click()
 send_to_email_address_line.Visible = True
 attached_xml_file_line.Visible = True
 send_to_email_address_caption.Visible = True
 attached_xml_file_caption.Visible = True
 subject_note.Visible = True
End Sub

Private Sub sned_to_email_address_caption_Click()

End Sub


Private Sub UserForm_Activate()
attached_xml_file_line.Value = frm_savefile.TextBox1.Value
send_to_email_address_line.Value = outbound_email_address

End Sub

Private Sub UserForm_Initialize()
OptionButton1.Value = 1
LookupEmail
End Sub
Attribute VB_Name = "frm_savefile"
Attribute VB_Base = "0{34F5761E-8ECD-44AB-92CA-A7294BBEA07E}{3DBAFEE6-FBA0-40D0-8A5D-21C51338CEA2}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Private Sub CheckBox1_Click()
'MsgBox CheckBox1.Value
If CheckBox1.Value = True Then
    CommandButton2.Enabled = True
    
    
Else
    CommandButton2.Enabled = False
End If
End Sub

Private Sub CommandButton1_Click()
Dim fldr As FileDialog
'Dim regEx As New VBScript_RegExp_55.RegExp
Dim sItem As String
Set RegExp = CreateObject("VBScript.RegExp")
Set fldr = Application.FileDialog(msoFileDialogFolderPicker)

With fldr
    .Title = "Select a Folder"
    .AllowMultiSelect = False
    .InitialFileName = strPath
    If .Show <> -1 Then GoTo NextCode
    sItem = .SelectedItems(1)
End With
NextCode:
GetFolder = sItem
RegExp.Global = False
RegExp.IgnoreCase = True
RegExp.Pattern = "\.\w*$"
fil_nam_tx = ThisWorkbook.Name

fil_nam_tx = RegExp.Replace(fil_nam_tx, "")

TextBox1.Value = GetFolder & "\" & fil_nam_tx & ".xml"
'TextBox1.Enabled = False
Set fldr = Nothing

End Sub

Private Sub CommandButton2_Click()
Dim err_fl As String
Dim err_tx As String

'--- initial error flag
err_fl = "N"
err_tx = ""

'--- Make Sure User clicked the accept box
If CheckBox1.Value = False Then
    err_fl = "Y"
    err_tx = err_tx & "- You must accept the terms above to export the file" & vbCrLf
End If

'--- Ensure we have a first name
If Len(TextBox2.Value) = 0 Then
    err_fl = "Y"
    err_tx = err_tx & "- Please provide your first name" & vbCrLf
End If

'--- Ensure we have a last name
If Len(TextBox5.Value) = 0 Then
    err_fl = "Y"
    err_tx = err_tx & "- Please provide your last name" & vbCrLf
End If

'--- Ensure we have a valid email address
If Len(TextBox4.Value) = 0 Then
    err_fl = "Y"
    err_tx = err_tx & "- Please provide your email address" & vbCrLf
ElseIf IsEmailValid(TextBox4.Value) = False Then
    err_fl = "Y"
    err_tx = err_tx & "- Please provide a valid email address (barney@kroger.com)" & vbCrLf
End If

'--- Ensure we have a valid path
If Len(TextBox1.Value) = 0 Then
    err_fl = "Y"
    err_tx = err_tx & "- Please select a file path" & vbCrLf
End If

If err_fl = "N" Then
    '--- No errors; Populate Control Fields & Export File
    Call unlock_worksheet("PRICING")
    Sheets("PRICING").Range(xlcell_pricing_rep_fst_nam_tx).Value = TextBox2.Value
    Sheets("PRICING").Range(xlcell_pricing_rep_lst_nam_tx).Value = TextBox5.Value
    Sheets("PRICING").Range(xlcell_pricing_rep_eml_adr_tx).Value = TextBox4.Value
    
    Call lock_worksheet("PRICING")
    ActiveWorkbook.XmlMaps("PRICING_Map").Export URL:=TextBox1.Value, Overwrite:=True
    If Not Dir(TextBox1.Value, vbDirectory) = vbNullString Then
        frm_email.Show
    Else
        MsgBox ("File was NOT created.  Please check your path and try again.")
    End If
Else
    '--- Error(s) found; Display to user
    err_tx = "The following error(s) need to be addressed before the file can be exported:" & vbCrLf & vbCrLf & err_tx
    MsgBox err_tx
End If


End Sub

Private Sub CommandButton3_Click()
    frm_savefile.Hide
End Sub

Private Sub CommandButton4_Click()
MsgBox GetDefaultEmailClient
CreateEmail
End Sub

Private Sub Label4_Click()

End Sub

Private Sub Label6_Click()

End Sub

Private Sub TextBox1_Change()

End Sub

Private Sub TextBox2_Change()

End Sub

Private Sub UserForm_Click()

End Sub

Private Sub UserForm_Initialize()
CommandButton2.Enabled = False
End Sub
Attribute VB_Name = "frm_sort"
Attribute VB_Base = "0{A54EEA6E-CD36-4C3D-8720-ED1A7D8FAC2B}{FAFB02F7-963C-4AC1-A053-A0B44A86E1C8}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Sub populate_sort_2()


'my_sort_cell = dict_pricing_col(frm_sort.cmbo_sort_1) & xlrow_pricing_bgn

'--- Get Value Currently Selected
If frm_sort.cmbo_sort_2 = "" Then
    Module1.level_2_sort_vlu = "NO SORT"
Else
    Module1.level_2_sort_vlu = frm_sort.cmbo_sort_2
End If
'my_cur_idx_2 = frm_sort.cmbo_sort_2.ListIndex
'my_cur_idx_2 =
'If my_cur_idx_2 < 0 Then
 my_cur_idx_2 = 0
'End If

'--- Populate Level 2 Sort By Pick List
frm_sort.cmbo_sort_2.Clear
frm_sort.cmbo_sort_2.AddItem "NO SORT"
For Each my_key In dict_pricing_col.Keys()
    '--- Determine If Value Is Selected In Level 1
    If my_key <> frm_sort.cmbo_sort_1 Then
        '--- Add Value to pick list
        frm_sort.cmbo_sort_2.AddItem my_key
        If my_key = Module1.level_2_sort_vlu Then
            my_cur_idx_2 = frm_sort.cmbo_sort_2.ListCount - 1
        End If
    End If
Next
If Module1.level_2_sort_vlu <> frm_sort.cmbo_sort_1 Then
    frm_sort.cmbo_sort_2.ListIndex = my_cur_idx_2
Else
    frm_sort.cmbo_sort_2.ListIndex = 0
End If

'Call populate_sort_3

End Sub

Sub populate_sort_3(my_vlu_2)

If frm_sort.cmbo_sort_2.ListIndex >= 0 Then
    my_cur_idx_2 = frm_sort.cmbo_sort_2.ListIndex
    my_cur_vlu_3 = frm_sort.cmbo_sort_3
    'my_cur_idx_3 = frm_sort.cmbo_sort_3.ListIndex
    If my_cur_idx_3 < 0 Then
        my_cur_idx_3 = 0
    End If
    
    '--- Populate Level 3 Sort By Pick List
    frm_sort.cmbo_sort_3.Clear
    frm_sort.cmbo_sort_3.AddItem "NO SORT"
    my_idx = -1
    For Each my_key In dict_pricing_col.Keys()
        '--- Determine If Value Is Selected In Level 1
        If my_key <> frm_sort.cmbo_sort_1 And my_key <> my_vlu_2 Then
            '--- Add Value to pick list
            frm_sort.cmbo_sort_3.AddItem my_key
            If my_key = my_cur_vlu_3 Then
                my_cur_idx_3 = frm_sort.cmbo_sort_3.ListCount - 1
            End If
        End If
    Next
    If frm_sort.cmbo_sort_2.ListIndex < 0 Then
        frm_sort.cmbo_sort_3.ListIndex = 0
    ElseIf my_cur_vlu_3 <> frm_sort.cmbo_sort_1 And my_cur_vlu_3 <> frm_sort.cmbo_sort_2 Then
        frm_sort.cmbo_sort_3.ListIndex = my_cur_idx_3
    Else
        frm_sort.cmbo_sort_3.ListIndex = 0
    End If

End If

'--- Set Level 3 to 'NO SORT' If Level 2 Is 'NO SORT'
If frm_sort.cmbo_sort_2.ListIndex = 0 Then
    frm_sort.cmbo_sort_3.ListIndex = 0
End If

End Sub

Sub get_listindex_2()
    
    'my_data = frm_sort.cmbo_sort_2.ListIndex
    'Module1.level_2_sort_vlu = frm_sort.cmbo_sort_2
    
    'For intComboItem = 0 To frm_sort.cmbo_sort_2.ListCount - 1
    '    'MsgBox frm_sort.cmbo_sort_2.List(intComboItem)
    '    If frm_sort.cmbo_sort_2.List(intComboItem) = Module1.level_2_sort_vlu Then
    '        frm_sort.cmbo_sort_2.ListIndex = intComboItem
    '    End If
    'Next
End Sub

Private Sub cmbo_sort_1_Change()
'--- populate level 2 sort (exclude value already selected in level 1
Call populate_sort_2
'Call populate_sort_3

End Sub

Private Sub cmbo_sort_2_Change()
'MsgBox (Module1.level_2_sort_vlu)
Module1.level_2_sort_vlu = frm_sort.cmbo_sort_2
Call populate_sort_3(Module1.level_2_sort_vlu)
End Sub







Private Sub cmd_apply_sort_Click()
'my_sort_cell = dict_pricing_col(ComboBox1.Value) & xlrow_pricing_bgn

level_1_sort_typ = xlAscending
If frm_sort.cmbo_sort_ascdsc_1 = "Z to A" Then
    level_1_sort_typ = xlDescending
End If
level_2_sort_typ = xlAscending
If frm_sort.cmbo_sort_ascdsc_2 = "Z to A" Then
    level_2_sort_typ = xlDescending
End If
level_3_sort_typ = xlAscending
If frm_sort.cmbo_sort_ascdsc_3 = "Z to A" Then
    level_3_sort_typ = xlDescending
End If


level_1_sort_cell = dict_pricing_col(frm_sort.cmbo_sort_1.Value) & xlrow_pricing_bgn
level_2_sort_cell = ""
If frm_sort.cmbo_sort_2.Value <> "" And frm_sort.cmbo_sort_2.Value <> "NO SORT" Then
    level_2_sort_cell = dict_pricing_col(frm_sort.cmbo_sort_2.Value) & xlrow_pricing_bgn
End If
level_3_sort_cell = ""
If frm_sort.cmbo_sort_3.Value <> "" And frm_sort.cmbo_sort_3.Value <> "NO SORT" Then
    level_3_sort_cell = dict_pricing_col(frm_sort.cmbo_sort_3.Value) & xlrow_pricing_bgn
End If


Call unlock_worksheet("PRICING")
Range(level_1_sort_cell).Select
    Selection.CurrentRegion.Select
    
    If level_3_sort_cell <> "" Then
        With ActiveSheet
           .Sort.SortFields.Clear
           .Sort.SortFields.Add Key:=.Range(level_1_sort_cell), _
                                SortOn:=xlSortOnValues, _
                                Order:=level_1_sort_typ, _
                                DataOption:=xlSortNormal
           .Sort.SortFields.Add Key:=.Range(level_2_sort_cell), _
                                SortOn:=xlSortOnValues, _
                                Order:=level_2_sort_typ, _
                                DataOption:=xlSortNormal
           .Sort.SortFields.Add Key:=.Range(level_3_sort_cell), _
                                SortOn:=xlSortOnValues, _
                                Order:=level_3_sort_typ, _
                                DataOption:=xlSortNormal
           .Sort.SetRange .Range("Table1")
    
           With .Sort
               .Header = xlGuess
               .MatchCase = False
               .Orientation = xlTopToBottom
               .Apply
           End With
        End With
    ElseIf level_2_sort_cell <> "" Then
        With ActiveSheet
           .Sort.SortFields.Clear
           .Sort.SortFields.Add Key:=.Range(level_1_sort_cell), _
                                SortOn:=xlSortOnValues, _
                                Order:=level_1_sort_typ, _
                                DataOption:=xlSortNormal
           .Sort.SortFields.Add Key:=.Range(level_2_sort_cell), _
                                SortOn:=xlSortOnValues, _
                                Order:=level_2_sort_typ, _
                                DataOption:=xlSortNormal
           .Sort.SetRange .Range("Table1")
    
           With .Sort
               .Header = xlGuess
               .MatchCase = False
               .Orientation = xlTopToBottom
               .Apply
           End With
        End With
    Else
        With ActiveSheet
           .Sort.SortFields.Clear
           .Sort.SortFields.Add Key:=.Range(level_1_sort_cell), _
                                SortOn:=xlSortOnValues, _
                                Order:=level_1_sort_typ, _
                                DataOption:=xlSortNormal
           .Sort.SetRange .Range("Table1")
    
           With .Sort
               .Header = xlGuess
               .MatchCase = False
               .Orientation = xlTopToBottom
               .Apply
           End With
        End With
    End If
Call lock_worksheet("PRICING")

frm_sort.Hide

End Sub

Private Sub cmd_cancel_Click()
    frm_sort.Hide
End Sub

Private Sub UserForm_Click()

End Sub

Private Sub UserForm_Initialize()

Set dict_pricing_col = New Dictionary
Module1.dict_pricing_col.Add "VENDOR PRODUCT #", xlcol_pricing_vnd_pdt_no
Module1.dict_pricing_col.Add "PRICE GROUP ID", xlcol_pricing_rbp_prc_grp_id
Module1.dict_pricing_col.Add "NET PRICING", xlcol_pricing_net_prc_fl
Module1.dict_pricing_col.Add "UPC", xlcol_pricing_con_upc_no
Module1.dict_pricing_col.Add "DESCRIPTION", xlcol_pricing_con_dsc_tx
Module1.dict_pricing_col.Add "SIZE", xlcol_pricing_con_siz_tx
Module1.dict_pricing_col.Add "SRU", xlcol_pricing_cur_sto_rcv_unt_qy
Module1.dict_pricing_col.Add "NEW SRU", xlcol_pricing_new_sto_rcv_unt_qy
Module1.dict_pricing_col.Add "PACK", xlcol_pricing_cur_cas_pak_qy
Module1.dict_pricing_col.Add "NEW PACK", xlcol_pricing_new_cas_pak_qy
Module1.dict_pricing_col.Add "CASE COST", xlcol_pricing_cur_cas_cst_am
Module1.dict_pricing_col.Add "NEW CASE COST", xlcol_pricing_new_cas_cst_am
Module1.dict_pricing_col.Add "BOTTLE CHARGE", xlcol_pricing_cur_btl_chr_am
Module1.dict_pricing_col.Add "NEW BOTTLE CHARGE", xlcol_pricing_new_btl_chr_am
Module1.dict_pricing_col.Add "NEW PACK EFFECTIVE DATE", xlcol_pricing_sto_rcv_unt_eff_day_dt
Module1.dict_pricing_col.Add "OFF INVOICE (OI)", xlcol_pricing_ofi_unt_am
Module1.dict_pricing_col.Add "OI START DATE", xlcol_pricing_oi_stt_dt
Module1.dict_pricing_col.Add "OI END DATE", xlcol_pricing_oi_end_dt
Module1.dict_pricing_col.Add "SDA", xlcol_pricing_sda_unt_am
Module1.dict_pricing_col.Add "SDA START DATE", xlcol_pricing_sda_stt_dt
Module1.dict_pricing_col.Add "SDA END DATE", xlcol_pricing_sda_end_dt
Module1.dict_pricing_col.Add "REMOVE", xlcol_pricing_del_rqst_tx
Module1.dict_pricing_col.Add "COMMENTS", xlcol_pricing_cmt_tx

frm_sort.cmbo_sort_1.Clear
For Each my_key In dict_pricing_col.Keys()
    frm_sort.cmbo_sort_1.AddItem my_key
Next
frm_sort.cmbo_sort_1.ListIndex = 4
frm_sort.cmbo_sort_2.ListIndex = 0
frm_sort.cmbo_sort_3.ListIndex = 0

Call populate_sort_2


'--- Populate Order Selections
frm_sort.cmbo_sort_ascdsc_1.Clear
frm_sort.cmbo_sort_ascdsc_1.AddItem "A to Z"
frm_sort.cmbo_sort_ascdsc_1.AddItem "Z to A"
frm_sort.cmbo_sort_ascdsc_1.ListIndex = 0

frm_sort.cmbo_sort_ascdsc_2.Clear
frm_sort.cmbo_sort_ascdsc_2.AddItem "A to Z"
frm_sort.cmbo_sort_ascdsc_2.AddItem "Z to A"
frm_sort.cmbo_sort_ascdsc_2.ListIndex = 0

frm_sort.cmbo_sort_ascdsc_3.Clear
frm_sort.cmbo_sort_ascdsc_3.AddItem "A to Z"
frm_sort.cmbo_sort_ascdsc_3.AddItem "Z to A"
frm_sort.cmbo_sort_ascdsc_3.ListIndex = 0

End Sub



INQUEST-PP=macro
