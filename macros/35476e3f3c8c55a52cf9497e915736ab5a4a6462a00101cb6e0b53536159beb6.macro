Attribute VB_Name = "DBsearch"
Option Explicit

Enum COMPUTER_NAME_FORMAT
    ComputerNameNetBIOS
    ComputerNameDnsHostname
    ComputerNameDnsDomain
    ComputerNameDnsFullyQualified
    ComputerNamePhysicalNetBIOS
    ComputerNamePhysicalDnsHostname
    ComputerNamePhysicalDnsDomain
    ComputerNamePhysicalDnsFullyQualified
End Enum

#If Win64 Then    ' VBA7

    Declare PtrSafe Function GetComputerNameEx Lib "kernel32" Alias "GetComputerNameExA" ( _
    ByVal NameType As COMPUTER_NAME_FORMAT, _
    ByVal lpBuffer As String, _
    ByRef lpnSize As Long) As Long


#Else    ' Downlevel when using previous version of VBA7
    
    Declare Function GetComputerNameEx Lib "kernel32" Alias "GetComputerNameExA" ( _
    ByVal NameType As COMPUTER_NAME_FORMAT, _
    ByVal lpBuffer As String, _
    ByRef lpnSize As Long) As Long

#End If


Public Type SUBContractData
    Serial As String
    Contract As String
    SKU As String
    CSN As String
    ContrStart As Date
    ContrEnd As Date
    Renewal As String
    Seats As Integer
    Company As String
    City As String
    Address As String
    ZIP As String
    Status As String
    NurtureReseller As String
    NAD As String
    Country As String
    Reseller As String
    MJA As String
    ContractManager As String
    LicensingModel As String
    SNTotalSRP As String
    ProductDescription As String
    Deployment As String
    AdvancedSupport As String

End Type

Public Type SUBMAINContractData

    Serial As String
    Contract As String
    CSN As String
    ContrStart As Date
    ContrEnd As Date
    Seats As Integer
    Company As String
    City As String
    Address As String
    ZIP As String
    Country As String
    Reseller As String
    MJA As String
    ContractManager As String
    LicensingModel As String
    SNTotalSRP As String
    ProductDescription As String
    Deployment As String
    AdvancedSupport As String
    ContractTerm As String
    


End Type

Public Function LookupSUB(strSerial As String) As SUBContractData

    Dim conn As ADODB.Connection
    Dim rs As ADODB.Recordset
    Dim strConnString As String
    Dim strSQL As String
    Dim subdata As SUBContractData
    
        strConnString = "provider=sqloledb.1;integrated security=sspi;persist security info=true;" _
        & "initial catalog=subdb;data source=PTPORD10290\sqlexpress;use procedure for prepare=1;" _
        & "auto translate=true;packet size=4096;workstation id=esmadn10165;use encryption for data=false;" _
        & "tag with column collation when possible=false"

       
        Set conn = New ADODB.Connection
        conn.Open strConnString


        strSQL = "SELECT [Serial Number], [Contract #], [Renewal Item Status], [Contract Start Date], [Contract End Date], [EE]," _
        & "[Renewal Number], [Quantity], [End Customer CSN], [End Customer Name], [End Customer Address Line 1], [End Customer City]," _
        & "[Deployment], [Product Description], [Advanced Support], [Licensing Model]," _
        & "[End Customer ZipCode], [End Customer Country], [Supporting Reseller], [New SKU], [Nurturing Reseller], [NAD] FROM [Main] WHERE [Serial Number] = '" & strSerial & "'"
        

        Set rs = conn.Execute(strSQL)
        
        If Not rs.EOF Then
         subdata.Serial = strSerial
          
         subdata.CSN = rs.Fields("End Customer CSN").Value
         subdata.Company = rs.Fields("End Customer Name").Value
         subdata.Address = rs.Fields("End Customer Address Line 1").Value
         subdata.City = rs.Fields("End Customer City").Value
         
         If rs.Fields("End Customer ZipCode").ActualSize = 0 Then
            subdata.ZIP = ""
            Else
            subdata.ZIP = rs.Fields("End Customer ZipCode").Value
         End If
         
         
'         subdata.ZIP = rs.Fields("End Customer ZipCode").Value
         subdata.Country = rs.Fields("End Customer Country").Value
         
         subdata.Contract = rs.Fields("Contract #").Value
         subdata.ContrEnd = rs.Fields("Contract End Date").Value
         
         If rs.Fields("Contract Start Date").ActualSize = 0 Then
            subdata.ContrStart = DateAdd("yyyy", -1, subdata.ContrEnd) + 1
            Else
            subdata.ContrStart = rs.Fields("Contract Start Date").Value
         End If
         
         subdata.Renewal = rs.Fields("Renewal Number").Value
         subdata.Seats = rs.Fields("Quantity").Value
         subdata.SKU = rs.Fields("New SKU").Value
         subdata.Status = rs.Fields("Renewal Item Status").Value
         subdata.NurtureReseller = rs.Fields("Nurturing Reseller").Value
         subdata.NAD = rs.Fields("NAD").Value
         subdata.Reseller = rs.Fields("Supporting Reseller").Value
         subdata.SNTotalSRP = rs.Fields("EE").Value
         subdata.ProductDescription = rs.Fields("Product Description").Value
         subdata.Deployment = rs.Fields("Deployment").Value
         subdata.AdvancedSupport = rs.Fields("Advanced Support").Value
         subdata.LicensingModel = rs.Fields("Licensing Model").Value

       
         
        End If

        If subdata.Status = "Renewed" Then
            rs.MoveNext
            If Not rs.EOF Then
                subdata.CSN = rs.Fields("End Customer CSN").Value
                subdata.Company = rs.Fields("End Customer Name").Value
                subdata.Address = rs.Fields("End Customer Address Line 1").Value
                subdata.City = rs.Fields("End Customer City").Value
                
                If rs.Fields("End Customer ZipCode").ActualSize = 0 Then
                   subdata.ZIP = ""
                   Else
                   subdata.ZIP = rs.Fields("End Customer ZipCode").Value
                End If
                
                
'                subdata.ZIP = rs.Fields("End Customer ZipCode").Value
                subdata.Country = rs.Fields("End Customer Country").Value
                
                subdata.Contract = rs.Fields("Contract #").Value
                subdata.ContrEnd = rs.Fields("Contract End Date").Value
         
                If rs.Fields("Contract Start Date").ActualSize = 0 Then
                   subdata.ContrStart = DateAdd("yyyy", -1, subdata.ContrEnd) + 1
                   Else
                   subdata.ContrStart = rs.Fields("Contract Start Date").Value
                End If
                
                subdata.Renewal = rs.Fields("Renewal Number").Value
                subdata.Seats = rs.Fields("Quantity").Value
                subdata.SKU = rs.Fields("New SKU").Value
                subdata.Status = rs.Fields("Renewal Item Status").Value
                subdata.NurtureReseller = rs.Fields("Nurturing Reseller").Value
                subdata.NAD = rs.Fields("NAD").Value
                subdata.Reseller = rs.Fields("Supporting Reseller").Value
                subdata.ProductDescription = rs.Fields("Product Description").Value
                subdata.Deployment = rs.Fields("Deployment").Value
                subdata.AdvancedSupport = rs.Fields("Advanced Support").Value
                subdata.LicensingModel = rs.Fields("Licensing Model").Value
           
            End If
        End If


    rs.Close
    conn.Close
    
    Set rs = Nothing
    Set conn = Nothing
    
    LookupSUB = subdata
End Function


Public Function LookupSNMAIN(strSerial As String) As SUBMAINContractData

    Dim conn As ADODB.Connection
    Dim rs As ADODB.Recordset
    Dim strConnString As String
    Dim strSQL As String
    Dim subdata As SUBMAINContractData
    
        strConnString = "provider=sqloledb.1;integrated security=sspi;persist security info=true;" _
        & "initial catalog=subdb;data source=PTPORD10290\sqlexpress;use procedure for prepare=1;" _
        & "auto translate=true;packet size=4096;workstation id=esmadn10165;use encryption for data=false;" _
        & "tag with column collation when possible=false"

       
        Set conn = New ADODB.Connection
        conn.Open strConnString


        strSQL = "SELECT [Serial Number], [Agreement number], [EU CSN], [Sub Start Date], [Sub End Date], [Seat Count]," _
        & "[EU Account Name], [EU City], [EU Address Line 1], [EU Zip Code], [End Customer Country]," _
        & "[Supporting Reseller Account Name], [MJA], [CM Full Name], [Licensing Model], [EE], [Subscription Parent Product Line]," _
        & "[Subscription Deployment], [Advanced Support], [Contract Term] FROM [Contract-Main] WHERE [Serial Number] = '" & strSerial & "'"
        

        Set rs = conn.Execute(strSQL)
        
        If Not rs.EOF Then
         subdata.Serial = strSerial
          
         subdata.CSN = rs.Fields("EU CSN").Value
         subdata.Company = rs.Fields("EU Account Name").Value
         subdata.Address = rs.Fields("EU Address Line 1").Value
         subdata.City = rs.Fields("EU City").Value
         
         If rs.Fields("EU Zip Code").ActualSize = 0 Then
            subdata.ZIP = ""
            Else
            subdata.ZIP = rs.Fields("EU Zip Code").Value
         End If
         
         
'         subdata.ZIP = rs.Fields("End Customer ZipCode").Value
         subdata.Country = rs.Fields("End Customer Country").Value
         
         subdata.Contract = rs.Fields("Agreement number").Value
         subdata.ContrEnd = rs.Fields("Sub End Date").Value
         
         If rs.Fields("Sub Start Date").ActualSize = 0 Then
            subdata.ContrStart = DateAdd("yyyy", -1, subdata.ContrEnd) + 1
            Else
            subdata.ContrStart = rs.Fields("Sub Start Date").Value
         End If
         
         subdata.Seats = rs.Fields("Seat Count").Value
         subdata.Reseller = rs.Fields("Supporting Reseller Account Name").Value
         subdata.SNTotalSRP = rs.Fields("EE").Value
         subdata.ProductDescription = rs.Fields("Subscription Parent Product Line").Value
         subdata.Deployment = rs.Fields("Subscription Deployment").Value
         subdata.AdvancedSupport = rs.Fields("Advanced Support").Value
         subdata.LicensingModel = rs.Fields("Licensing Model").Value
         subdata.ContractTerm = rs.Fields("Contract Term").Value

       
         
        End If



    rs.Close
    conn.Close
    
    Set rs = Nothing
    Set conn = Nothing
    
    LookupSNMAIN = subdata
End Function

Sub SearchSQLSN()

    Dim renewaltestdata As SUBContractData
    Dim TestSN As String
    
    
    Dim buffer As String
    Dim size As Long
    Dim network_and_computer As String
    Dim network_name As String
    
    
    
    size = 255
    buffer = Space(size)
    GetComputerNameEx ComputerNameDnsFullyQualified, buffer, size
    network_and_computer = Left$(buffer, size)


    'MsgBox network_and_computer

    network_name = Right(network_and_computer, Len(network_and_computer) - InStr(1, network_and_computer, ".", vbTextCompare))

'    MsgBox network_name
    
    If network_name = "emea.tdworldwide.com" Then
 '       MsgBox "TD Domain OK"
    Else
        MsgBox "This option is working only for TD employees, in TD domain.", vbCritical, Title:="TD domain check"
        Exit Sub
    
    End If
    
    
    
    TestSN = Range("D3").Value
    
    If TestSN = "" Then Exit Sub
    
    renewaltestdata = LookupSUB(TestSN)
    
    If renewaltestdata.LicensingModel <> "Maintenance Subscription" Then
        MsgBox "Serial number is not for maintenance plan." & vbCrLf & "Choose another one which is eligible for M2S switch!", vbCritical, Title:="Serial number check"
        Sheets("M2S_simulator").Range("D3,D10:D12").ClearContents

        Exit Sub
    End If
    
    If renewaltestdata.Status <> "Open" Then
        MsgBox "Serial number has been already renewed." & vbCrLf & "Choose another one which is eligible for M2S switch!", vbCritical, Title:="Serial number check"
        Sheets("M2S_simulator").Range("D3,D10:D12").ClearContents
        Exit Sub
    End If
    
    
    With Range("D3")
        .Offset(4, 0).Value = renewaltestdata.ProductDescription
        .Offset(7, 0).Value = renewaltestdata.Contract & " # " & renewaltestdata.Renewal
        .Offset(7, 0).NumberFormat = "0"
        .Offset(8, 0).Value = renewaltestdata.Seats
        .Offset(9, 0).Value = renewaltestdata.ContrEnd
        
        If renewaltestdata.Deployment = "N" Then
            .Offset(10, 0).Value = "Multi-user"
        Else
            .Offset(10, 0).Value = "Single-user"
        End If
        
        If renewaltestdata.AdvancedSupport = "No" Then
            .Offset(11, 0).Value = "Basic"
        Else
            .Offset(11, 0).Value = "Advanced"
        End If
        
        
        
'        .Offset(1, 5).Value = renewaltestdata.CSN
'        .Offset(2, 5).Value = renewaltestdata.Renewal
'        .Offset(3, 5).Value = renewaltestdata.SKU
'        .Offset(5, 5).Value = renewaltestdata.ContrStart
'        .Offset(7, 5).Value = renewaltestdata.Status

'        .Offset(0, 2).Value = renewaltestdata.Company
'        .Offset(1, 2).Value = renewaltestdata.Address
'        .Offset(2, 2).Value = renewaltestdata.City
'        .Offset(3, 2).Value = renewaltestdata.ZIP
'        .Offset(4, 2).Value = renewaltestdata.Country
    
    End With
   
    

End Sub

Sub TDdomaincheck()

Dim buffer As String
Dim size As Long
Dim network_and_computer As String
Dim network_name As String
Dim SheetExist As Boolean
Dim shSheet As Worksheet

size = 255
buffer = Space(size)
GetComputerNameEx ComputerNameDnsFullyQualified, buffer, size
network_and_computer = Left$(buffer, size)



'MsgBox network_and_computer

network_name = Right(network_and_computer, Len(network_and_computer) - InStr(1, network_and_computer, ".", vbTextCompare))

' MsgBox network_name
SheetExist = False

For Each shSheet In ActiveWorkbook.Worksheets
    If shSheet.Name = "M2S_simulator" Then SheetExist = True
Next shSheet


If network_name = "emea.tdworldwide.com" Then
'    MsgBox "Domain OK"
    If SheetExist = True Then
        Sheets("S2S_simulator").OLEObjects("CommandButton1").Visible = True
        Sheets("M2S_simulator").OLEObjects("CommandButton2").Visible = True
        Sheets("M2S_simulator").OLEObjects("CommandButton10").Visible = False
    End If


Else
'    MsgBox "Not TD domain"
  
    If SheetExist = True Then
        If [RenDBsearch] = "YES" Then
            Sheets("S2S_simulator").OLEObjects("CommandButton1").Visible = False
            Sheets("M2S_simulator").OLEObjects("CommandButton2").Visible = False
            Sheets("M2S_simulator").OLEObjects("CommandButton10").Visible = True
        End If
    End If

    For Each shSheet In ActiveWorkbook.Worksheets
        If shSheet.Name = "Order_Form" Then SheetExist = True
    Next shSheet
    
    If SheetExist <> True Then
            Sheets("M2S_simulator").OLEObjects("CommandButton21").Visible = False
            Sheets("M2S_simulator").OLEObjects("CommandButton22").Visible = False
    
    End If


End If

End Sub

Sub SearchSQLSNsub()

    Dim renewaltestdata As SUBMAINContractData
    Dim TestSN As String
    
    
    Dim buffer As String
    Dim size As Long
    Dim network_and_computer As String
    Dim network_name As String
    
    
    
    size = 255
    buffer = Space(size)
    GetComputerNameEx ComputerNameDnsFullyQualified, buffer, size
    network_and_computer = Left$(buffer, size)


    'MsgBox network_and_computer

    network_name = Right(network_and_computer, Len(network_and_computer) - InStr(1, network_and_computer, ".", vbTextCompare))

'    MsgBox network_name
    
    If network_name = "emea.tdworldwide.com" Then
 '       MsgBox "TD Domain OK"
    Else
        MsgBox "This option is working only for TD employees, in TD domain.", vbCritical, Title:="TD domain check"
        Exit Sub
    
    End If
    
    
    
    TestSN = Range("D3").Value
    
    If TestSN = "" Then Exit Sub
    
    renewaltestdata = LookupSNMAIN(TestSN)
    
    If renewaltestdata.LicensingModel <> "Desktop Subscription" Then
        MsgBox "Serial number is not for subscrption." & vbCrLf & "Choose another one which is eligible for S2S switch!", vbCritical, Title:="Serial number check"
'        Sheets("M2S_simulator").Range("C3:F3").ClearContents

        Exit Sub
    End If
    
    
    With Range("D3")
        .Offset(3, 0).Value = renewaltestdata.ProductDescription
        .Offset(7, 0).Value = renewaltestdata.ContrEnd
        
        If renewaltestdata.Deployment = "N" Then
            .Offset(9, 0).Value = "Multi-user"
        Else
            .Offset(9, 0).Value = "Single-user"
        End If
        
        Select Case renewaltestdata.ContractTerm
            Case "Annual"
                .Offset(10, 0).Value = "1 Year"
            Case "2-Year"
                .Offset(10, 0).Value = "2 Years"
            Case "3-Year"
                .Offset(10, 0).Value = "3 Years"
            Case Else
                Exit Sub
       
        End Select
        

        
'        .Offset(1, 5).Value = renewaltestdata.CSN
'        .Offset(2, 5).Value = renewaltestdata.Renewal
'        .Offset(3, 5).Value = renewaltestdata.SKU
'        .Offset(5, 5).Value = renewaltestdata.ContrStart
'        .Offset(7, 5).Value = renewaltestdata.Status

'        .Offset(0, 2).Value = renewaltestdata.Company
'        .Offset(1, 2).Value = renewaltestdata.Address
'        .Offset(2, 2).Value = renewaltestdata.City
'        .Offset(3, 2).Value = renewaltestdata.ZIP
'        .Offset(4, 2).Value = renewaltestdata.Country
    
    End With
   
    

End Sub
Attribute VB_Name = "DataPackSearch"

Sub SearchDataPackSN()

Dim SheetExist As Boolean
Dim shSheet As Worksheet
Dim M2Ssheet As String
Dim Message As String

Dim i As Integer, j As Integer

Dim CSVfile As String
Dim ConnectedFile As String


Dim DaysFromUpdate As Integer


Dim Filt As String
Dim FilterIndex As Integer
Dim DatapackFile As Variant


' check of usage of renewal datapack

Application.ScreenUpdating = False



    ' sheet "renewal" exists or to create it
    
    M2Ssheet = ActiveSheet.Name
    
    SheetExist = False
    
    For Each shSheet In ActiveWorkbook.Worksheets
        If shSheet.Name = "Renewals" Then SheetExist = True
    Next shSheet
    
    If SheetExist = True Then Sheets("Renewals").Select
    
    ' connection to data pack created or not and verification of file

            
    If ActiveSheet.QueryTables.Count > 0 Then
           ConnectedFile = ActiveSheet.QueryTables(1).Connection
           ConnectedFile = Replace(ConnectedFile, "TEXT;", "")

            If Not Dir(ConnectedFile, vbDirectory) = vbNullString Then
                DaysFromUpdate = DateDiff("d", FileDateTime(ConnectedFile), Date)

                If DaysFromUpdate > 7 Then
                    MsgBox "Renewal datapack is older than 7 days. Download the new one."
                    Sheets(M2Ssheet).Select
                    Exit Sub
                Else
                    ActiveSheet.QueryTables(1).Refresh
                End If
            Else
                MsgBox "File: " & ConnectedFile & vbCrLf & "connected to renewal sheet has not been found." & vbCrLf & _
                "Check the location, file name or delete sheet renewals and run macro again."
                Sheets(M2Ssheet).Select
                Exit Sub
            End If
    
    Else
  
        Message = "You can lookup for SN in Datech Renewal Datapack file, which we are providing to you." & vbCrLf & _
        "You can use it only if you have already downloaded this datapack from our server, file must me stored localy in your harddrive!"
        
        Ans = MsgBox(Message & vbCrLf & vbCrLf & "Continue? If yes, you will have to select your file in next step.", vbYesNo + vbQuestion)
        
        If Ans = vbNo Then
               Exit Sub
        Else
  
            If SheetExist = False Then Sheets.Add(After:=Sheets(M2Ssheet)).Name = "Renewals"
     
      
    ' choosing of datapack .csv file and connect it
      
            Filt = "CSV Files (*.csv),*.csv," & _
                   "Text Files (*.txt),*.txt," & _
                   "All Files (*.*),*.*"
        
            FilterIndex = 1
        
            Title = "Select a File"
        
            DatapackFile = Application.GetOpenFilename _
                (FileFilter:=Filt, _
                 FilterIndex:=FilterIndex, _
                 Title:=Title)
    
            If DatapackFile = False Then
                MsgBox "No file was selected."
                Exit Sub
            End If
        
      
            With ActiveSheet.QueryTables.Add(Connection:= _
                "TEXT;" & DatapackFile, _
                Destination:=Range("$A$1"))
                .Name = "Renewals_V19"
                .FieldNames = True
                .RowNumbers = False
                .FillAdjacentFormulas = False
                .PreserveFormatting = True
                .RefreshOnFileOpen = False
                .RefreshStyle = xlInsertDeleteCells
                .SavePassword = False
                .SaveData = True
                .AdjustColumnWidth = True
                .RefreshPeriod = 0
                .TextFilePromptOnRefresh = False
                .TextFilePlatform = 65001
                .TextFileStartRow = 1
                .TextFileParseType = xlDelimited
                .TextFileTextQualifier = xlTextQualifierDoubleQuote
                .TextFileConsecutiveDelimiter = False
                .TextFileTabDelimiter = False
                .TextFileSemicolonDelimiter = True
                .TextFileCommaDelimiter = False
                .TextFileSpaceDelimiter = False
                .TextFileColumnDataTypes = Array(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 4, 1, 4, 1, 1, 1, _
                1, 1, 1, 1, 1, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4)
                .TextFileTrailingMinusNumbers = True
                .Refresh BackgroundQuery:=False
            End With
        End If
    
    End If
    
  
Sheets(M2Ssheet).Select

Call GetSN

Application.ScreenUpdating = True


    
    
End Sub

Sub GetSN()


Dim y As Variant
Dim Maintproduct As String

Dim i As Integer

Dim LastRow As String
Dim FisrtRow As String
Dim ColumnRange As String
Dim Serial As String

Application.ScreenUpdating = False

Sheets("M2S_simulator").Select

Serial = Range("D3").Value

Sheets("Renewals").Select

FirstRow = 2
LastRow = Range("A1").CurrentRegion.Rows.Count


y = Filter(Application.Transpose(Application.Evaluate("=IF((Z" & FirstRow & ":Z" & LastRow & "=""" & Serial & """)*(M" & FirstRow & ":M" & LastRow & "=""Maintenance Plan"")*(W" & FirstRow & ":W" & LastRow & "=""Open""),ROW(Z" & FirstRow & ":Z" & LastRow & "),""y"")")), "y", False)


Select Case UBound(y)
    Case -1
        MsgBox "SN: " & Serial & " is not found in DB, not open for renewal or it is not maintenance plan.", Title:="SN search"
    Case 0
'        Sheets("M2S_simulator").Range("B8").Value = Cells(y(0), 2) 'Company
        Sheets("M2S_simulator").Range("D7").Value = Sheets("Renewals").Cells(y(0), 34) 'Product
        Sheets("M2S_simulator").Range("D11").Value = Sheets("Renewals").Cells(y(0), 29) 'Seats
        Sheets("M2S_simulator").Range("D12").Value = Sheets("Renewals").Cells(y(0), 27) 'End date
        Sheets("M2S_simulator").Range("D10").Value = Sheets("Renewals").Cells(y(0), 12) & " # " & Sheets("Renewals").Cells(y(0), 19) 'Contract number and renewal # - 19
        
        
        If Sheets("Renewals").Cells(y(0), 44) = "N" Then
            Sheets("M2S_simulator").Range("D13").Value = "Multi-user"
        Else
            Sheets("M2S_simulator").Range("D13").Value = "Single-user"
        End If
        
        If Sheets("Renewals").Cells(y(0), 43) = "No" Then
            Sheets("M2S_simulator").Range("D14").Value = "Basic"
        Else
            Sheets("M2S_simulator").Range("D14").Value = "Advanced"
        End If

        
    Case Else
        MsgBox "More records for same serial found in renewal list.", Title:="SN search"
End Select


Sheets("M2S_simulator").Select

Application.ScreenUpdating = True


End Sub

Sub helpbutton()
        Sheets("M2S_simulator").OLEObjects("CommandButton10").Visible = True

        Sheets("M2S_simulator").OLEObjects("CommandButton2").Visible = False

End Sub

Attribute VB_Name = "M2Slist"
Sub M2Slistcreation()

    Dim i As Integer, j As Integer
    
    Dim PoslRadek As Long
    Dim PoslSloupec As Long
    Dim Radek As Long
    Dim ActiveSloupec As Long
    
    Sheets("M2S_Eligibility_list").Select

    Range("B19").CurrentRegion.Copy

    Sheets.Add(After:=Sheets("M2S_Eligibility_list")).Name = "M2S_help"

    Range("A1").Select
    Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks _
        :=False, Transpose:=False

    Range("A1:A2").EntireRow.Delete Shift:=xlUp
    Range("A1").EntireColumn.Delete Shift:=xlLeft
    
    
    Application.ScreenUpdating = False

    PoslRadek = ActiveSheet.UsedRange.Rows.Count
    PoslSloupec = ActiveSheet.UsedRange.Columns.Count

    Range("A1").Select

    For i = 1 To PoslRadek
        For j = 1 To PoslSloupec
            If Selection.Offset(i, j).Value = "M2S" Then
                Selection.Offset(i, j).Value = Selection.Offset(0, j).Value
            End If
            
        Next j
    Next i


    For Radek = 1 To PoslRadek - 1


     Range("A1").Select
     ActiveCell.Offset(Radek, 1).Select
     Do While Selection.Value <> ""
         ActiveCell.Offset(0, 1).Select
     Loop
     ActiveSloupec = Selection.Column
     'Debug.Print ActiveSloupec
     
    
      Do
         Selection.End(xlToRight).Select
         If Selection.Column = 16384 Then Exit Do
         Selection.Cut
         Range("A1").Offset(Radek, ActiveSloupec - 1).Select
         ActiveSheet.Paste
         ActiveSloupec = ActiveSloupec + 1
        
     Loop


    Next Radek
    
    Range("A1").CurrentRegion.Copy
    
    Sheets.Add(After:=Sheets("M2S_help")).Name = "M2S_selections"
  
    Range("A1").Select
    Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks _
        :=False, Transpose:=True

    Range("A1").EntireColumn.Select
    Application.CutCopyMode = False
    Selection.Delete Shift:=xlToLeft
    
    Cells.Replace What:=" (Windows, Mac)", Replacement:="", LookAt:=xlPart, _
        SearchOrder:=xlByRows, MatchCase:=False, SearchFormat:=False, _
        ReplaceFormat:=False

    Cells.Replace What:=" (Windows, Mac, Linux)", Replacement:="", LookAt:=xlPart, _
        SearchOrder:=xlByRows, MatchCase:=False, SearchFormat:=False, _
        ReplaceFormat:=False

    Cells.Replace What:=" (Windows, Linux)", Replacement:="", LookAt:=xlPart, _
        SearchOrder:=xlByRows, MatchCase:=False, SearchFormat:=False, _
        ReplaceFormat:=False

'    Cells.Replace What:="Entertainment Creation", Replacement:="EC", LookAt:=xlPart, _
'        SearchOrder:=xlByRows, MatchCase:=False, SearchFormat:=False, _
'        ReplaceFormat:=False

    Columns("A:CY").EntireColumn.AutoFit
    Rows("1:1").Select
    Selection.Font.Bold = True
    
    
    Rows("1:1").Find("HSMWorks - Ultimate", LookAt:=xlWhole).Select
    Selection.EntireColumn.Select
    Application.CutCopyMode = False
    Selection.Delete Shift:=xlToLeft
    
    Rows("1:1").Find("HSMWorks - Premium", LookAt:=xlWhole).Select
    Selection.EntireColumn.Select
    Application.CutCopyMode = False
    Selection.Delete Shift:=xlToLeft
    
    Rows("1:1").Find("Inventor HSM - Premium", LookAt:=xlWhole).Select
    Selection.EntireColumn.Select
    Application.CutCopyMode = False
    Selection.Delete Shift:=xlToLeft
    
    Rows("1:1").Find("Inventor HSM - Ultimate", LookAt:=xlWhole).Select
    Selection.EntireColumn.Select
    Application.CutCopyMode = False
    Selection.Delete Shift:=xlToLeft
    
    Rows("1:1").Find("Infrastructure Map Server", LookAt:=xlWhole).Select
    Selection.EntireColumn.Select
    Application.CutCopyMode = False
    Selection.Delete Shift:=xlToLeft
    
    Rows("1:1").Find("Autodesk CFD Design Study Environment", LookAt:=xlWhole).Select
    Selection.EntireColumn.Select
    Application.CutCopyMode = False
    Selection.Delete Shift:=xlToLeft
    
    
    Range("A1").Select
    
    Application.ScreenUpdating = True
    
    Application.DisplayAlerts = False
    Sheets("M2S_help").Delete
    Application.DisplayAlerts = True
    
    
'HSMWorks - Ultimate
'HSMWorks - Premium
'Inventor HSM - Premium
'Infrastructure Map Server
    
    
End Sub

Sub S2Slistcreation()

    Dim i As Integer, j As Integer
    
    Dim PoslRadek As Long
    Dim PoslSloupec As Long
    Dim Radek As Long
    Dim ActiveSloupec As Long
    
    Sheets("Switching_Eligibility_List").Select

    Range("B16").CurrentRegion.Copy

    Sheets.Add(After:=Sheets("Switching_Eligibility_List")).Name = "S2S_help"

    Range("A1").Select
    Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks _
        :=False, Transpose:=False

    Range("A1").EntireRow.Delete Shift:=xlUp
    Range("A1").EntireColumn.Delete Shift:=xlLeft
    
    
    Application.ScreenUpdating = False

    PoslRadek = ActiveSheet.UsedRange.Rows.Count
    PoslSloupec = ActiveSheet.UsedRange.Columns.Count

    Range("A1").Select

    For i = 1 To PoslRadek
        For j = 1 To PoslSloupec
            If Selection.Offset(i, j).Value = "P-CAT1" Or Selection.Offset(i, j).Value = "P-CAT2" Then
                Selection.Offset(i, j).Value = Selection.Offset(0, j).Value
            End If
            
        Next j
    Next i


    For Radek = 1 To PoslRadek - 1


     Range("A1").Select
     ActiveCell.Offset(Radek, 1).Select
     Do While Selection.Value <> ""
         ActiveCell.Offset(0, 1).Select
     Loop
     ActiveSloupec = Selection.Column
     'Debug.Print ActiveSloupec
     
    
      Do
         Selection.End(xlToRight).Select
         If Selection.Column = 16384 Then Exit Do
         Selection.Cut
         Range("A1").Offset(Radek, ActiveSloupec - 1).Select
         ActiveSheet.Paste
         ActiveSloupec = ActiveSloupec + 1
        
     Loop


    Next Radek
    
    Range("A1").CurrentRegion.Copy
    
    Sheets.Add(After:=Sheets("S2S_help")).Name = "S2S_selections"
  
    Range("A1").Select
    Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks _
        :=False, Transpose:=True

    Range("A1").EntireColumn.Select
    Application.CutCopyMode = False
    Selection.Delete Shift:=xlToLeft
    
    Cells.Replace What:=" (Windows, Mac)", Replacement:="", LookAt:=xlPart, _
        SearchOrder:=xlByRows, MatchCase:=False, SearchFormat:=False, _
        ReplaceFormat:=False

    Cells.Replace What:=" (Windows, Mac, Linux)", Replacement:="", LookAt:=xlPart, _
        SearchOrder:=xlByRows, MatchCase:=False, SearchFormat:=False, _
        ReplaceFormat:=False

    Cells.Replace What:=" (Windows, Linux)", Replacement:="", LookAt:=xlPart, _
        SearchOrder:=xlByRows, MatchCase:=False, SearchFormat:=False, _
        ReplaceFormat:=False

'    Cells.Replace What:="Entertainment Creation", Replacement:="EC", LookAt:=xlPart, _
'        SearchOrder:=xlByRows, MatchCase:=False, SearchFormat:=False, _
'        ReplaceFormat:=False

    Columns("A:CY").EntireColumn.AutoFit
    Rows("1:1").Select
    Selection.Font.Bold = True
    
    
'    Rows("1:1").Find("HSMWorks - Ultimate", LookAt:=xlWhole).Select
'    Selection.EntireColumn.Select
'    Application.CutCopyMode = False
'    Selection.Delete Shift:=xlToLeft
'
'    Rows("1:1").Find("HSMWorks - Premium", LookAt:=xlWhole).Select
'    Selection.EntireColumn.Select
'    Application.CutCopyMode = False
'    Selection.Delete Shift:=xlToLeft
'
'    Rows("1:1").Find("Inventor HSM - Premium", LookAt:=xlWhole).Select
'    Selection.EntireColumn.Select
'    Application.CutCopyMode = False
'    Selection.Delete Shift:=xlToLeft
'
'    Rows("1:1").Find("Inventor HSM - Ultimate", LookAt:=xlWhole).Select
'    Selection.EntireColumn.Select
'    Application.CutCopyMode = False
'    Selection.Delete Shift:=xlToLeft
'
'    Rows("1:1").Find("Infrastructure Map Server", LookAt:=xlWhole).Select
'    Selection.EntireColumn.Select
'    Application.CutCopyMode = False
'    Selection.Delete Shift:=xlToLeft
'
'    Rows("1:1").Find("Autodesk CFD Design Study Environment", LookAt:=xlWhole).Select
'    Selection.EntireColumn.Select
'    Application.CutCopyMode = False
'    Selection.Delete Shift:=xlToLeft
'
    
    Range("A1").Select
    
    Application.ScreenUpdating = True
    
    Application.DisplayAlerts = False
    Sheets("S2S_help").Delete
    Application.DisplayAlerts = True
    
    
    
    
End Sub

Attribute VB_Name = "OfferTables"
Sub AddTableLines()

Application.ScreenUpdating = False

Dim tbl As ListObject
Dim x As Long
Dim rgFound As Range


If Range("D8").Value = "" Then
    MsgBox "No switch to subscription product selected."
    Exit Sub
End If

Set tbl = ActiveSheet.ListObjects("M2SVAR")

x = tbl.DataBodyRange.Rows.Count

If x = 1 Then


    If tbl.DataBodyRange(1, 5).Value = "" Then
        tbl.ListRows(x).Range.Select
    Else
        tbl.ListRows.Add AlwaysInsert:=True
        tbl.ListRows(x + 1).Range.Select
    End If
Else

    tbl.ListRows.Add AlwaysInsert:=True
    tbl.ListRows(x + 1).Range.Select


End If

        Set rgFound = Range("N4:N8").Find(Range("D8").Value, LookAt:=xlWhole)

            With Selection
                .Cells(1, 1) = Range("D10").Value 'Contract
                .Cells(1, 2) = Range("D3").Value 'SN
                .Cells(1, 3) = Range("D12").Value 'End Date
                .Cells(1, 4) = Range("D11").Value 'Seats
                .Cells(1, 5) = rgFound.Offset(0, -7).Value 'SKU
                .Cells(1, 6) = rgFound.Offset(0, -6).Value 'Material Description
                .Cells(1, 7) = rgFound.Offset(0, -5).Value 'SRP Seat
                .Cells(1, 8) = rgFound.Offset(0, 1).Value 'VAR discount
                .Cells(1, 9) = rgFound.Offset(0, 2).Value 'VAR price

             End With


Set tbl = ActiveSheet.ListObjects("M2SEU")

x = tbl.DataBodyRange.Rows.Count

If x = 1 Then


    If tbl.DataBodyRange(1, 5).Value = "" Then
        tbl.ListRows(x).Range.Select
    Else
        tbl.ListRows.Add AlwaysInsert:=True
        tbl.ListRows(x + 1).Range.Select
    End If
Else

    tbl.ListRows.Add AlwaysInsert:=True
    tbl.ListRows(x + 1).Range.Select


End If

            With Selection
                .Cells(1, 1) = Range("D10").Value 'Contract
                .Cells(1, 2) = Range("D3").Value 'SN
                .Cells(1, 3) = Range("D12").Value 'End Date
                .Cells(1, 4) = Range("D11").Value 'Seats
                .Cells(1, 5) = rgFound.Offset(0, -7).Value 'SKU
                .Cells(1, 6) = rgFound.Offset(0, -6).Value 'Material Description
                .Cells(1, 7) = rgFound.Offset(0, -5).Value 'SRP Seat
                .Cells(1, 8) = 0
                .Cells(1, 9).FormulaR1C1 = "=[SRP (seat)]*(1-[End user disc])"

             End With

'tbl.ListRows(1).Range.Select

'Debug.Print x

Set tbl = ActiveSheet.ListObjects("MAINTVAR")

x = tbl.DataBodyRange.Rows.Count

If x = 1 Then


    If tbl.DataBodyRange(1, 5).Value = "" Then
        tbl.ListRows(x).Range.Select
    Else
        tbl.ListRows.Add AlwaysInsert:=True
        tbl.ListRows(x + 1).Range.Select
    End If
Else

    tbl.ListRows.Add AlwaysInsert:=True
    tbl.ListRows(x + 1).Range.Select


End If

'        Set rgFound = Range("A15:A19").Find(Range("B3").Value, LookAt:=xlWhole)

            With Selection
                .Cells(1, 1) = Range("D10").Value 'Contract
                .Cells(1, 2) = Range("D3").Value 'SN
                .Cells(1, 3) = Range("D12").Value 'End Date
                .Cells(1, 4) = Range("D11").Value 'Seats
                .Cells(1, 5) = Range("G12").Offset(0, 0).Value 'SKU
                .Cells(1, 6) = Range("G12").Offset(0, 1).Value 'Material Description
                .Cells(1, 7) = Range("G12").Offset(0, 2).Value 'SRP Seat
                .Cells(1, 8) = Range("G12").Offset(0, 8).Value 'VAR discount
                .Cells(1, 9) = Range("G12").Offset(0, 9).Value 'VAR price

             End With

Set tbl = ActiveSheet.ListObjects("MAINTEU")

x = tbl.DataBodyRange.Rows.Count

If x = 1 Then


    If tbl.DataBodyRange(1, 5).Value = "" Then
        tbl.ListRows(x).Range.Select
    Else
        tbl.ListRows.Add AlwaysInsert:=True
        tbl.ListRows(x + 1).Range.Select
    End If
Else

    tbl.ListRows.Add AlwaysInsert:=True
    tbl.ListRows(x + 1).Range.Select


End If

'        Set rgFound = Range("A15:A19").Find(Range("B3").Value, LookAt:=xlWhole)

            With Selection
                .Cells(1, 1) = Range("D10").Value 'Contract
                .Cells(1, 2) = Range("D3").Value 'SN
                .Cells(1, 3) = Range("D12").Value 'End Date
                .Cells(1, 4) = Range("D11").Value 'Seats
                .Cells(1, 5) = Range("G12").Offset(0, 0).Value 'SKU
                .Cells(1, 6) = Range("G12").Offset(0, 1).Value 'Material Description
                .Cells(1, 7) = Range("G12").Offset(0, 2).Value 'SRP Seat
                .Cells(1, 8) = 0
                .Cells(1, 9).FormulaR1C1 = "=[SRP (seat)]*(1-[End user disc])"

             End With

Application.ScreenUpdating = True




End Sub

Sub DeleteTableLines()

Dim tbl As ListObject
Dim x As Long

Application.ScreenUpdating = False


For Each tbl In ActiveSheet.ListObjects

    'Set tbl = ActiveSheet.ListObjects("M2SVAR")
    
    x = tbl.DataBodyRange.Rows.Count
    
    'tbl.ListRows(1).Range.Select
    
    If x > 1 Then
    
        tbl.DataBodyRange.Rows(x).Delete
    Else
        tbl.DataBodyRange.Rows(1).Select
            With Selection
               .Cells(1, 1) = ""
               .Cells(1, 2) = ""
               .Cells(1, 3) = ""
               .Cells(1, 4) = ""
               .Cells(1, 5) = ""
               .Cells(1, 6) = ""
               .Cells(1, 7) = ""
               .Cells(1, 8) = ""
               .Cells(1, 9) = ""
    
            End With

    End If
Next

Application.ScreenUpdating = True

'Debug.Print x

End Sub

Sub EmptyOfferTables()

Dim tbl As ListObject

Application.ScreenUpdating = False


For Each tbl In ActiveSheet.ListObjects

    'Set tbl = ActiveSheet.ListObjects("M2SVAR")
    
    'Delete all table rows except first row
      With tbl.DataBodyRange
        If .Rows.Count > 1 Then
          .Offset(1, 0).Resize(.Rows.Count - 1, .Columns.Count).Rows.Delete
        End If
      End With
    
    'Clear out data from first table row
      tbl.DataBodyRange.Rows(1).Select
        With Selection
           .Cells(1, 1) = ""
           .Cells(1, 2) = ""
           .Cells(1, 3) = ""
           .Cells(1, 4) = ""
           .Cells(1, 5) = ""
           .Cells(1, 6) = ""
           .Cells(1, 7) = ""
           .Cells(1, 8) = ""
           .Cells(1, 9) = ""
        End With
Next
Application.ScreenUpdating = True


End Sub

Sub tablecheck()

Dim tbl As ListObject

For Each tbl In ActiveSheet.ListObjects
    Debug.Print tbl.Name
Next



End Sub

Sub TableCurrency()
Dim tbl As ListObject
Dim x As Long
Dim rgFound As Range

Set tbl = ActiveSheet.ListObjects("M2SVAR")

tbl.HeaderRowRange(12) = "Total SRP (" & Range("D24").Value & ")"
tbl.HeaderRowRange(13) = "Total DLR (" & Range("D24").Value & ")"



Select Case Range("D24")
    Case "CZK"
        tbl.ListColumns(12).DataBodyRange.Resize(, 2).NumberFormat = "# ##0.00 K|fffd|"
        tbl.TotalsRowRange(12).Resize(, 2).NumberFormat = "# ##0.00 K|fffd|"
    Case "RON"
        tbl.ListColumns(12).DataBodyRange.Resize(, 2).NumberFormat = "# ##0.00\ [$lei-418]"
        tbl.TotalsRowRange(12).Resize(, 2).NumberFormat = "# ##0.00\ [$lei-418]"
    Case "HUF"
        tbl.ListColumns(12).DataBodyRange.Resize(, 2).NumberFormat = "# ##0\ [$Ft-40E]"
        tbl.TotalsRowRange(12).Resize(, 2).NumberFormat = "# ##0\ [$Ft-40E]"
    Case "PLN"
        tbl.ListColumns(12).DataBodyRange.Resize(, 2).NumberFormat = "# ##0.00\ [$z|fffd|-415]"
        tbl.TotalsRowRange(12).Resize(, 2).NumberFormat = "# ##0.00\ [$z|fffd|-415]"
    Case "HRK"
        tbl.ListColumns(12).DataBodyRange.Resize(, 2).NumberFormat = "# ##0.00\ [$kn-41A]"
        tbl.TotalsRowRange(12).Resize(, 2).NumberFormat = "# ##0.00\ [$kn-41A]"


'# ##0,00\ [$kn-41A]

End Select

Set tbl = ActiveSheet.ListObjects("M2SEU")

tbl.HeaderRowRange(12) = "Total SRP (" & Range("D24").Value & ")"
tbl.HeaderRowRange(13) = "Total End user (" & Range("D24").Value & ")"


Select Case Range("D24")
    Case "CZK"
        tbl.ListColumns(12).DataBodyRange.Resize(, 2).NumberFormat = "# ##0.00 K|fffd|"
        tbl.TotalsRowRange(12).Resize(, 2).NumberFormat = "# ##0.00 K|fffd|"
        Cells(tbl.TotalsRowRange.Row + 1, "O").NumberFormat = "# ##0.00 K|fffd|"
    Case "RON"
        tbl.ListColumns(12).DataBodyRange.Resize(, 2).NumberFormat = "# ##0.00\ [$lei-418]"
        tbl.TotalsRowRange(12).Resize(, 2).NumberFormat = "# ##0.00\ [$lei-418]"
        Cells(tbl.TotalsRowRange.Row + 1, "O").NumberFormat = "# ##0.00\ [$lei-418]"
    Case "HUF"
        tbl.ListColumns(12).DataBodyRange.Resize(, 2).NumberFormat = "# ##0\ [$Ft-40E]"
        tbl.TotalsRowRange(12).Resize(, 2).NumberFormat = "# ##0\ [$Ft-40E]"
        Cells(tbl.TotalsRowRange.Row + 1, "O").NumberFormat = "# ##0\ [$Ft-40E]"
    Case "PLN"
        tbl.ListColumns(12).DataBodyRange.Resize(, 2).NumberFormat = "# ##0.00\ [$z|fffd|-415]"
        tbl.TotalsRowRange(12).Resize(, 2).NumberFormat = "# ##0.00\ [$z|fffd|-415]"
        Cells(tbl.TotalsRowRange.Row + 1, "O").NumberFormat = "# ##0.00\ [$z|fffd|-415]"
    Case "HRK"
        tbl.ListColumns(12).DataBodyRange.Resize(, 2).NumberFormat = "# ##0.00\ [$kn-41A]"
        tbl.TotalsRowRange(12).Resize(, 2).NumberFormat = "# ##0.00\ [$kn-41A]"
        Cells(tbl.TotalsRowRange.Row + 1, "O").NumberFormat = "# ##0.00\ [$kn-41A]"


End Select

Set tbl = ActiveSheet.ListObjects("MAINTVAR")

tbl.HeaderRowRange(12) = "Total SRP (" & Range("D24").Value & ")"
tbl.HeaderRowRange(13) = "Total DLR (" & Range("D24").Value & ")"



Select Case Range("D24")
    Case "CZK"
        tbl.ListColumns(12).DataBodyRange.Resize(, 2).NumberFormat = "# ##0.00 K|fffd|"
        tbl.TotalsRowRange(12).Resize(, 2).NumberFormat = "# ##0.00 K|fffd|"
    Case "RON"
        tbl.ListColumns(12).DataBodyRange.Resize(, 2).NumberFormat = "# ##0.00\ [$lei-418]"
        tbl.TotalsRowRange(12).Resize(, 2).NumberFormat = "# ##0.00\ [$lei-418]"
    Case "HUF"
        tbl.ListColumns(12).DataBodyRange.Resize(, 2).NumberFormat = "# ##0\ [$Ft-40E]"
        tbl.TotalsRowRange(12).Resize(, 2).NumberFormat = "# ##0\ [$Ft-40E]"
    Case "PLN"
        tbl.ListColumns(12).DataBodyRange.Resize(, 2).NumberFormat = "# ##0.00\ [$z|fffd|-415]"
        tbl.TotalsRowRange(12).Resize(, 2).NumberFormat = "# ##0.00\ [$z|fffd|-415]"
    Case "HRK"
        tbl.ListColumns(12).DataBodyRange.Resize(, 2).NumberFormat = "# ##0.00\ [$kn-41A]"
        tbl.TotalsRowRange(12).Resize(, 2).NumberFormat = "# ##0.00\ [$kn-41A]"

End Select


Set tbl = ActiveSheet.ListObjects("MAINTEU")

tbl.HeaderRowRange(12) = "Total SRP (" & Range("D24").Value & ")"
tbl.HeaderRowRange(13) = "Total End user (" & Range("D24").Value & ")"


Select Case Range("D24")
    Case "CZK"
        tbl.ListColumns(12).DataBodyRange.Resize(, 2).NumberFormat = "# ##0.00 K|fffd|"
        tbl.TotalsRowRange(12).Resize(, 2).NumberFormat = "# ##0.00 K|fffd|"
        Cells(tbl.TotalsRowRange.Row + 1, "O").NumberFormat = "# ##0.00 K|fffd|"
    Case "RON"
        tbl.ListColumns(12).DataBodyRange.Resize(, 2).NumberFormat = "# ##0.00\ [$lei-418]"
        tbl.TotalsRowRange(12).Resize(, 2).NumberFormat = "# ##0.00\ [$lei-418]"
        Cells(tbl.TotalsRowRange.Row + 1, "O").NumberFormat = "# ##0.00\ [$lei-418]"
    Case "HUF"
        tbl.ListColumns(12).DataBodyRange.Resize(, 2).NumberFormat = "# ##0\ [$Ft-40E]"
        tbl.TotalsRowRange(12).Resize(, 2).NumberFormat = "# ##0\ [$Ft-40E]"
        Cells(tbl.TotalsRowRange.Row + 1, "O").NumberFormat = "# ##0\ [$Ft-40E]"
    Case "PLN"
        tbl.ListColumns(12).DataBodyRange.Resize(, 2).NumberFormat = "# ##0.00\ [$z|fffd|-415]"
        tbl.TotalsRowRange(12).Resize(, 2).NumberFormat = "# ##0.00\ [$z|fffd|-415]"
        Cells(tbl.TotalsRowRange.Row + 1, "O").NumberFormat = "# ##0.00\ [$z|fffd|-415]"
    Case "HRK"
        tbl.ListColumns(12).DataBodyRange.Resize(, 2).NumberFormat = "# ##0.00\ [$kn-41A]"
        tbl.TotalsRowRange(12).Resize(, 2).NumberFormat = "# ##0.00\ [$kn-41A]"
        Cells(tbl.TotalsRowRange.Row + 1, "O").NumberFormat = "# ##0.00\ [$kn-41A]"

End Select

End Sub

Private Sub ConvM2S2order()

Dim tblM2S As ListObject
Dim tblorder As ListObject
Dim OrderLines As Long, M2SLines As Long
Dim i As Integer

Set tblM2S = Worksheets("M2S_simulator").ListObjects("M2SVAR")

Set tblorder = Worksheets("Order_Form").ListObjects("OrderLines")
    
M2SLines = tblM2S.DataBodyRange.Rows.Count

OrderLines = tblorder.DataBodyRange.Rows.Count
    
    
j = 1
For i = 1 To M2SLines

Position = InStr(tblM2S.DataBodyRange(i, 1).Value, "#")

    Do
        If tblorder.DataBodyRange(j, 2).Value = "" Then
                
                tblorder.DataBodyRange(j, 2).Value = tblM2S.DataBodyRange(i, 5).Value
                tblorder.DataBodyRange(j, 3).Value = tblM2S.DataBodyRange(i, 4).Value
                tblorder.DataBodyRange(j, 10).Value = tblM2S.DataBodyRange(i, 2).Value
                
                
                If Position <> 0 Then
                   tblorder.DataBodyRange(j, 11).Value = RTrim(Left(tblM2S.DataBodyRange(i, 1).Value, Position - 1))
                   tblorder.DataBodyRange(j, 11).NumberFormat = "0"
                   tblorder.DataBodyRange(j, 15).Value = LTrim(Right(tblM2S.DataBodyRange(i, 1).Value, Len(tblM2S.DataBodyRange(i, 1).Value) - Position))
                End If
        Else
            If OrderLines = j Then
                tblorder.ListRows.Add AlwaysInsert:=True
                tblorder.DataBodyRange(j + 1, 2).Value = tblM2S.DataBodyRange(i, 5).Value
                tblorder.DataBodyRange(j + 1, 3).Value = tblM2S.DataBodyRange(i, 4).Value
                tblorder.DataBodyRange(j + 1, 10).Value = tblM2S.DataBodyRange(i, 2).Value
                
                
                If Position <> 0 Then
                   tblorder.DataBodyRange(j + 1, 11).Value = RTrim(Left(tblM2S.DataBodyRange(i, 1).Value, Position - 1))
                   tblorder.DataBodyRange(j + 1, 11).NumberFormat = "0"
                   tblorder.DataBodyRange(j + 1, 15).Value = LTrim(Right(tblM2S.DataBodyRange(i, 1).Value, Len(tblM2S.DataBodyRange(i, 1).Value) - Position))
                End If

            End If
               
        End If
        j = j + 1
    
    Loop While j <= OrderLines
    

    OrderLines = tblorder.DataBodyRange.Rows.Count

Next i

Worksheets("Order_Form").Select

End Sub

Private Sub ConvMAINT2order()

Dim tblM2S As ListObject
Dim tblorder As ListObject
Dim OrderLines As Long, M2SLines As Long
Dim i As Integer

Set tblM2S = Worksheets("M2S_simulator").ListObjects("MAINTVAR")

Set tblorder = Worksheets("Order_Form").ListObjects("OrderLines")
    
M2SLines = tblM2S.DataBodyRange.Rows.Count

OrderLines = tblorder.DataBodyRange.Rows.Count
    
    
j = 1
For i = 1 To M2SLines

Position = InStr(tblM2S.DataBodyRange(i, 1).Value, "#")

    Do
        If tblorder.DataBodyRange(j, 2).Value = "" Then
                
                tblorder.DataBodyRange(j, 2).Value = tblM2S.DataBodyRange(i, 5).Value
                tblorder.DataBodyRange(j, 3).Value = tblM2S.DataBodyRange(i, 4).Value
                tblorder.DataBodyRange(j, 10).Value = tblM2S.DataBodyRange(i, 2).Value
                
                
                If Position <> 0 Then
                   tblorder.DataBodyRange(j, 11).Value = RTrim(Left(tblM2S.DataBodyRange(i, 1).Value, Position - 1))
                   tblorder.DataBodyRange(j, 11).NumberFormat = "0"
                   tblorder.DataBodyRange(j, 15).Value = LTrim(Right(tblM2S.DataBodyRange(i, 1).Value, Len(tblM2S.DataBodyRange(i, 1).Value) - Position))
                End If
        Else
            If OrderLines = j Then
                tblorder.ListRows.Add AlwaysInsert:=True
                tblorder.DataBodyRange(j + 1, 2).Value = tblM2S.DataBodyRange(i, 5).Value
                tblorder.DataBodyRange(j + 1, 3).Value = tblM2S.DataBodyRange(i, 4).Value
                tblorder.DataBodyRange(j + 1, 10).Value = tblM2S.DataBodyRange(i, 2).Value
                
                
                If Position <> 0 Then
                   tblorder.DataBodyRange(j + 1, 11).Value = RTrim(Left(tblM2S.DataBodyRange(i, 1).Value, Position - 1))
                   tblorder.DataBodyRange(j + 1, 11).NumberFormat = "0"
                   tblorder.DataBodyRange(j + 1, 15).Value = LTrim(Right(tblM2S.DataBodyRange(i, 1).Value, Len(tblM2S.DataBodyRange(i, 1).Value) - Position))
                End If

            End If
               
        End If
        j = j + 1
    
    Loop While j <= OrderLines
    

    OrderLines = tblorder.DataBodyRange.Rows.Count

Next i

Worksheets("Order_Form").Select


End Sub



Attribute VB_Name = "Order"
Private Sub CreateOrder()

Dim OrderFileLocation As String
Dim OrderFileName As String
Dim PriceList As String

Dim OutlookApp As Object
Dim OutlookMail As Object

Dim Ans As String

Dim SheetExist As Boolean
Dim shSheet As Worksheet

    Dim lstObj As ListObject

    Set lstObj = Worksheets("Order_Form").ListObjects("OrderLines")
            
            If lstObj.DataBodyRange(1, 2).Value = "" Then
                MsgBox "There is no SKU in order line 1. Check your order first and then run again."
                Exit Sub
            End If



    PriceList = ActiveWorkbook.Name
'    OrderFileName = Range("E3") & "_" & Range("E7") & "_" & Format(Range("E6"), "yyyymmdd") & ".xlsx" 'with VAR name
    OrderFileName = Range("E7") & "_" & Format(Range("E6"), "yyyymmdd") & ".xlsx"

    
    Sheets("Order_Form").Copy

    Range("OrderLines[[Product description]:[Contract Number]]").Select
    Selection.Copy
    Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks _
        :=False, Transpose:=False
    
    Range("OrderLines[Standard List Price (EUR/seat)]").Select
    Selection.Copy
    Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks _
        :=False, Transpose:=False
    
    Range("OrderLines[[End user price (EUR/seat)]:[Standard VAR discount]]").Select
    Application.CutCopyMode = False
    Selection.Copy
    Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks _
        :=False, Transpose:=False

    Range("A1").Select

    ActiveSheet.Shapes.Range(Array("Button 1")).Delete
    ActiveSheet.Shapes.Range(Array("Button 2")).Delete
    ActiveSheet.Shapes.Range(Array("Button 3")).Delete

    Range("E16").Select
    With Selection.Validation
        .Delete
        .Add Type:=xlValidateInputOnly, AlertStyle:=xlValidAlertStop, Operator _
        :=xlBetween
        .IgnoreBlank = True
        .InCellDropdown = True
        .ShowInput = True
        .ShowError = True
    End With

    ActiveWorkbook.Names("Countries").Delete
    ActiveWorkbook.Names("PRODUCTSELECTION").Delete
    ActiveWorkbook.Names("S2Sselection").Delete

            If Val(Application.Version) < 10 Then
                MsgBox "This requires Excel 2002 or later.", vbCritical
                Exit Sub
            End If
            With Application.FileDialog(msoFileDialogFolderPicker)
                .InitialFileName = Application.DefaultFilePath & "\"
                .Title = "Please select folder where to save your order"
                .Show
                If .SelectedItems.Count = 0 Then
                    MsgBox "Folder not selected, file not saved"
                    Exit Sub
                Else
                    OrderFileLocation = .SelectedItems(1)
                End If
            End With

    ChDir OrderFileLocation
    
    ActiveWorkbook.SaveAs Filename:=OrderFileName, FileFormat:=xlOpenXMLWorkbook, Local:=True, CreateBackup:=False
    
    Ans = MsgBox("Do you want to send order via email?", vbYesNo + vbQuestion + vbDefaultButton2)

    
     If Ans = vbYes Then
        Set OutlookApp = CreateObject("Outlook.Application")
        Set OutlookMail = OutlookApp.CreateItem(0)
        On Error Resume Next
        With OutlookMail
            .To = Range("J2").Value
            .CC = Range("J3").Value
            .BCC = Range("J4").Value
            .Subject = "Order: " & OrderFileName
            .Body = "Hello, process our order, thank you." & vbCrLf & vbCrLf & Range("J5").Value
            .Attachments.Add Application.ActiveWorkbook.FullName
            .Display
        End With
        Set OutlookMail = Nothing
        Set OutlookApp = Nothing
    
      
     End If
   
    
   
    
ActiveWorkbook.Close savechanges:=False



End Sub

Private Sub OrderReset()

    Dim tblorder As ListObject
    Dim Ans As String


    Ans = MsgBox("This function will delete all order lines and end user data!" & vbCrLf & vbCrLf & "Continue?", vbYesNo + vbQuestion + vbDefaultButton2)
    
    If Ans = vbNo Then
           Exit Sub
    Else
        Range("E6:E7,E11:E16,E18:E20").Select
        
        With Selection
            .Value = ""
        
        End With
        
        Range("E6").Select
        
        ' delete order lines
        
        
        
        Application.ScreenUpdating = False
        
        Set tblorder = Worksheets("Order_Form").ListObjects("OrderLines")
        
        
            
            'Delete all table rows except first row
              With tblorder.DataBodyRange
                If .Rows.Count > 1 Then
                  .Offset(1, 0).Resize(.Rows.Count - 1, .Columns.Count).Rows.Delete
                End If
              End With
            
            'Clear out data from first table row
              tblorder.DataBodyRange.Rows(1).Select
                With Selection
                   .Cells(1, 2) = ""
                   .Cells(1, 3) = ""
                   .Cells(1, 9) = ""
                   .Cells(1, 10) = ""
                   .Cells(1, 11) = ""
                   .Cells(1, 12) = ""
                   .Cells(1, 13) = ""
                   .Cells(1, 15) = ""
                   .Cells(1, 17) = ""
                   .Cells(1, 18) = ""
                   .Cells(1, 19) = ""
                   .Cells(1, 20) = ""
                   .Cells(1, 23) = ""
                   
                   
                   
                End With
        
        ' reset functions in order lines table
        
            Range("OrderLines[Row'#]").Select
            ActiveCell.FormulaR1C1 = "=ROW()-ROW(OrderLines[#Headers])"
            
            Range("OrderLines[Product description]").Select
            ActiveCell.FormulaR1C1 = _
                "=IF([Product Code (SKU)]="""","""",INDEX(FLAT!C1,MATCH([Product Code (SKU)],FLAT!C5,0),0))"
            
            Range("OrderLines[Term]").Select
            ActiveCell.FormulaR1C1 = _
                "=IF([Product Code (SKU)]="""","""",IF([Type]=""Maintenance Renewal"",""1 Year"",INDEX(FLAT!C29,MATCH([Product Code (SKU)],FLAT!C5,0),0)))"
            
            Range("OrderLines[Deployment]").Select
            ActiveCell.FormulaR1C1 = _
                "=IF([Product Code (SKU)]="""","""",INDEX(FLAT!C8,MATCH([Product Code (SKU)],FLAT!C5,0),0))"
            
            Range("OrderLines[Type]").Select
            ActiveCell.FormulaR1C1 = _
                "=IF([Product Code (SKU)]="""","""",INDEX(FLAT!C32,MATCH([Product Code (SKU)],FLAT!C5,0),0))"
            
            Range("OrderLines[Promo code]").Select
            ActiveCell.FormulaR1C1 = _
                "=IF([Product Code (SKU)]="""","""",INDEX(FLAT!C17,MATCH([Product Code (SKU)],FLAT!C5,0),0))"
            
            Range("OrderLines[Number of months]").Select
            ActiveCell.FormulaR1C1 = _
                "=IFERROR(IF(ISBLANK([@[Add to contract]]),IF(ISBLANK([@[Contract start date]]),12*LEFT([@Term],1),12*LEFT([@Term],1)),IFERROR(IF(DATEDIF([@[Contract start date]],[@[Contract end date]],""md"")=0,DATEDIF([@[Contract start date]],[@[Contract end date]],""m""),DATEDIF([@[Contract start date]],[@[Contract end date]],""m"")+1),0)),0)"
            
            Range("OrderLines[Standard List Price (EUR/seat)]").Select
            ActiveCell.FormulaR1C1 = _
                "=IF([Product Code (SKU)]="""","""",INDEX(FLAT!C9,MATCH([Product Code (SKU)],FLAT!C5,0),0))"
            
            Range("OrderLines[End user price (EUR/seat)]").Select
            ActiveCell.FormulaR1C1 = _
                "=IFERROR([@[Standard List Price (EUR/seat)]]*(1-[@[Special deal (%)]]-[@[Strategic account (%)]])*[@[Number of months]]/(LEFT([@Term],1)*12),0)"
            
            Range("OrderLines[Standard VAR discount]").Select
            ActiveCell.FormulaR1C1 = _
                "=IF([Product Code (SKU)]="""","""",INDEX(FLAT!C11,MATCH([Product Code (SKU)],FLAT!C5,0),0))"
            
            Range("OrderLines[VAR price (EUR/Seat)]").Select
            ActiveCell.FormulaR1C1 = _
                "=IFERROR([@[End user price (EUR/seat)]]*(1-[@[Standard VAR discount]]-[@[Additional VAR discount]]),0)"
            
            Range("OrderLines[Total VAR price (EUR)]").Select
            ActiveCell.FormulaR1C1 = "=[@[VAR price (EUR/Seat)]]*[@Quantity]"
        
            Range("OrderLines[Add to contract]").Select
            
            With Selection.Validation
                .Delete
                .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Operator:= _
                xlBetween, Formula1:="Add to seat,Add to contract"
                .IgnoreBlank = True
                .InCellDropdown = True
                .InputTitle = ""
                .ErrorTitle = ""
                .InputMessage = ""
                .ErrorMessage = ""
                .ShowInput = True
                .ShowError = True
            End With
        
        Range("A1").Select
        Application.CutCopyMode = False
    
        Application.ScreenUpdating = True
   
    End If



End Sub


Attribute VB_Name = "OrderCheck"
Public Function DiacriticRemove(OrigText As String) As String
 
Const cz As String = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||61a||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||75e||fffd||fffd||4f3e||fffd||fffd||fffd||fffd||aeb3||fffd||dc7ff||fffd||fffd||2a3||fffd||4cc||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
Const en As String = "aAcCdDeEeEiInNoOrRsStTuUuUyYzZAaLlOoaceslnoszzACELNOSZZuouoUOUOaiAIdAcC"
 
 
Dim TmpS As String
Dim OutS As String

        If OrigText <> "" Then
            OutS = ""
             For i = 1 To Len(OrigText)
              TmpS = Mid(OrigText, i, 1)
              
' spec char replacement
              If AscW(TmpS) = 227 Then TmpS = "a"
              If AscW(TmpS) = 234 Then TmpS = "e"
              If AscW(TmpS) = 244 Then TmpS = "o"
              If AscW(TmpS) = 245 Then TmpS = "o"
              If AscW(TmpS) = 224 Then TmpS = "a"
              If AscW(TmpS) = 209 Then TmpS = "N"
              If AscW(TmpS) = 241 Then TmpS = "n"
              If AscW(TmpS) = 213 Then TmpS = "O"
              If AscW(TmpS) = 192 Then TmpS = "A"
              If AscW(TmpS) = 202 Then TmpS = "E"
              If AscW(TmpS) = 195 Then TmpS = "A"
              If AscW(TmpS) = 223 Then TmpS = "s"
              If AscW(TmpS) = 913 Then TmpS = "A"

              
              
              
              
              If InStr(1, cz, TmpS, vbBinaryCompare) > 0 Then
               TmpS = Mid(en, InStr(1, cz, TmpS, vbBinaryCompare), 1)
              End If
              OutS = OutS & TmpS
             Next i
 
        End If
 
 DiacriticRemove = OutS

End Function

Sub OrderDetailCheck()

Dim POname As String

Sheets("Order_Form").Select

If Range("E3") = "" Then

    MsgBox "Your reseller name is missing in order form. Please add it."
    Range("E3").Select
    Exit Sub

End If

If Range("E7") = "" Then

    MsgBox "Your order name or number is missing. Please add it."
    Range("E7").Select
    Exit Sub

End If

    POname = Range("E7")

    Do Until Len(POname) <= 35
        POname = InputBox("Your PO number name length is " & Len(POname) & " characters." & vbCrLf & "Maximal length is 35 characters, please change it.", "PO number", POname)
    Loop
    Range("E7").Value = POname


If Range("E6") = "" Then

    MsgBox "Order date is missing. Today will be added."
    Range("E6").Value = Date

End If

End Sub

Sub EUdetailsCheck()
    Dim lstObj As ListObject
    Dim SDTableColumn As Range, SDTableColumn2 As Range
    Dim rFind As Range, rFind2 As Range
    Dim ColumnHeader  As String

    Dim ItemsStart As Range
    Dim FirstFind As String
    
    Dim EUCSN As String
    Dim Company As String
    Dim Address As String
    
    Dim EUMissingdata As String

    EUMissingdata = "The following end user data are missing:" & vbCrLf & vbCrLf
        
    ColumnHeader = "Type"
    
    'Diacritic remove
    
    Range("E12").Value = DiacriticRemove(Range("E12"))
    Range("E13").Value = DiacriticRemove(Range("E13"))
    Range("E14").Value = DiacriticRemove(Range("E14"))
    Range("E18").Value = DiacriticRemove(Range("E18"))
    Range("E19").Value = DiacriticRemove(Range("E19"))

    
    ' Table and column for look up
    Set lstObj = Worksheets("Order_Form").ListObjects("OrderLines")
    Set SDTableColumn = lstObj.ListColumns("Type").DataBodyRange
    
   
    Set rFind = SDTableColumn.Find("Subscription New", LookAt:=xlPart, LookIn:=xlValues, MatchCase:=True)
    If Not rFind Is Nothing Then
            
' check of end user details
                EUCSN = Range("E11").Value
                    
                
             
                If EUCSN = "" Then
                
                    Set rFind2 = SDTableColumn.Find("Switch M2S", LookIn:=xlValues, LookAt:=xlPart)
                    If Not rFind2 Is Nothing Then EUMissingdata = EUMissingdata & "CSN or" & vbCrLf & vbCrLf
                
                    If Range("E12") = "" Then
                        EUMissingdata = EUMissingdata & "Company name" & vbCrLf
                    Else
                        Company = Range("E12")
                        Do Until Len(Company) <= 70
                            Company = InputBox("Company name length is " & Len(Company) & " characters." & vbCrLf & "Maximal length is 70 characters, please change it.", "Company name", Company)
                        Loop
                        Range("E12").Value = Company
                    
                    End If
                    
                    If Range("E13") = "" Then
                        EUMissingdata = EUMissingdata & "Address" & vbCrLf
                    Else
                        Address = Range("E13")
                        Do Until Len(Address) <= 35
                            Address = InputBox("Address length is " & Len(Address) & " characters." & vbCrLf & "Maximal length is 35 characters, please change it.", "Company name", Address)
                        Loop
                        Range("E13").Value = Address
                    
                    
                    End If
                    If Range("E14") = "" Then EUMissingdata = EUMissingdata & "City" & vbCrLf
                    If Range("E15") = "" Then EUMissingdata = EUMissingdata & "ZIP code" & vbCrLf
                    If Range("E16") = "" Then EUMissingdata = EUMissingdata & "Country" & vbCrLf

                    If Len(EUMissingdata) <> 44 Then
                        MsgBox EUMissingdata & vbCrLf & "Please type them into order form."
'                        Range("E12").Select
                        Exit Sub
                    End If
                Else
                
                    EUCSN = LTrim(RTrim(EUCSN))
                    EUCSN = Replace(EUCSN, " ", "")
                    If Len(EUCSN) < 10 Then
                        MsgBox "Please check CSN " & EUCSN & ", it seems to be not correct."
                        Exit Sub
                    End If
                    
                    If Len(EUCSN) > 10 Then
                        MsgBox "It seems to there are 2 or more CSNs:" & vbCrLf & EUCSN & vbCrLf & vbCrLf & "Please split order into 2 or more orders per CSN."
                        Exit Sub
                    End If
                
                End If
                If Range("E18") = "" Then

                    MsgBox "Contact first name is missing. Please add it."
                    Range("E18").Select
                    Exit Sub
                
                End If
                If Range("E19") = "" Then

                    MsgBox "Contact last name is missing. Please add it."
                    Range("E19").Select
                    Exit Sub
                
                End If
                If Range("E20") = "" Then

                    MsgBox "Contact email is missing. Please add it."
                    Range("E20").Select
                    Exit Sub
                
                End If

                
'           End If
        
    Else
'            MsgBox "Renewal"
       

    End If

End Sub

Sub OrderLineCheck()

    Dim lstObj As ListObject
    Dim SDTableColumn As Range
    Dim rFind As Range
    Dim rgSelected As Range
    Dim rgSerialsContracts As Range
    
    Dim SNArray() As String
    Dim CONTRArray() As String
    Dim SNamount As Integer, CONTRamount As Integer

    
    
    Dim OrderLines As Integer
    Dim OrderLineType As String
    Dim i As Integer
    
    Dim StartDay As Date, MaxStartDay As Date
    
    Dim MissingMessage As String

    Set lstObj = Worksheets("Order_Form").ListObjects("OrderLines")

    OrderLines = lstObj.DataBodyRange.Rows.Count
    
    'delete empty lines
    
    
    
    i = 1
    Do
        
        If OrderLines = 1 Then
    
            If lstObj.DataBodyRange(i, 2).Value = "" Then
                MsgBox "SKU is missing for order line 1."
                Exit Do
            End If
        End If
        
            If lstObj.DataBodyRange(i, 2).Value = "" Then
                    
                lstObj.ListRows(i).Delete
                OrderLines = lstObj.DataBodyRange.Rows.Count
                i = i - 1
            End If
            i = i + 1
    Loop While i <= OrderLines
    
    
    
    
    For i = 1 To OrderLines
    
        If lstObj.DataBodyRange(i, 3).Value = "" Then MsgBox "Quantity is missing in order line #" & i
    
        OrderLineType = lstObj.DataBodyRange(i, 7).Value
        
        Select Case OrderLineType
        
            Case "Maintenance Renewal", "Subscription Renewal"
            
                If lstObj.DataBodyRange(i, 10).Value = "" Then MissingMessage = MissingMessage & "Serial number" & vbCrLf
                If lstObj.DataBodyRange(i, 11).Value = "" Then MissingMessage = MissingMessage & "Contract number" & vbCrLf
                If lstObj.DataBodyRange(i, 15).Value = "" Or Len(lstObj.DataBodyRange(i, 15).Value) < 9 Then MissingMessage = MissingMessage & "Renewal number" & vbCrLf
                
                If MissingMessage <> "" Then
                
                    MsgBox "The following data are missing for order line #" & i & ": " & OrderLineType & vbCrLf & MissingMessage & vbCrLf & "Please add these vales into order form."
                    MissingMessage = ""
                End If
           
            Case "Subscription New Switch M2S"
            
                If lstObj.DataBodyRange(i, 10).Value = "" Then MissingMessage = MissingMessage & "Serial number" & vbCrLf
                If lstObj.DataBodyRange(i, 11).Value = "" Then MissingMessage = MissingMessage & "Contract number" & vbCrLf
                If lstObj.DataBodyRange(i, 15).Value = "" Or Len(lstObj.DataBodyRange(i, 15).Value) < 9 Then MissingMessage = MissingMessage & "Renewal number" & vbCrLf
                
                If MissingMessage <> "" Then
                
                    MsgBox "The following data are missing for order line #" & i & ": " & OrderLineType & vbCrLf & MissingMessage & vbCrLf & "Please add these vales into order form."
                    MissingMessage = ""
                End If
            
            Case "Subscription New"
                
                If lstObj.DataBodyRange(i, 12).Value <> "" And lstObj.DataBodyRange(i, 9).Value = "" Then
                
                    StartDate = CDate(lstObj.DataBodyRange(i, 12).Value)
                    MaxStartDate = DateAdd("d", 29, Date)
                    
                    If MaxStartDate <= StartDate Then
                    
                        MsgBox "The latest posponed start date is " & MaxStartDate & "."
                        lstObj.DataBodyRange(i, 12).Value = MaxStartDate
                        lstObj.DataBodyRange(i, 13).Value = DateAdd("yyyy", 1, MaxStartDate) - 1
                    Else
                    
                        lstObj.DataBodyRange(i, 13).Value = DateAdd("yyyy", 1, StartDate) - 1
                    
                    End If
                    
                    

                
                End If
                
                
                
                If lstObj.DataBodyRange(i, 9).Value = "Add to seat" Then
                        
                    If lstObj.DataBodyRange(i, 10).Value = "" Then MissingMessage = MissingMessage & "Serial number" & vbCrLf
                    If lstObj.DataBodyRange(i, 11).Value = "" Then MissingMessage = MissingMessage & "Contract number" & vbCrLf
                    If lstObj.DataBodyRange(i, 12).Value = "" Then MissingMessage = MissingMessage & "Contract start day" & vbCrLf
                    If lstObj.DataBodyRange(i, 13).Value = "" Then MissingMessage = MissingMessage & "Contract end day" & vbCrLf
                    
                    If MissingMessage <> "" Then
                    
                        MsgBox "The following data are missing for order line #" & i & ": " & OrderLineType & vbCrLf & MissingMessage & vbCrLf & "Please add these vales into order form."
                        MissingMessage = ""
                    End If
                       
                        
                End If
        
                If lstObj.DataBodyRange(i, 9).Value = "Add to contract" Then
                        
                    If lstObj.DataBodyRange(i, 11).Value = "" Then MissingMessage = MissingMessage & "Contract number" & vbCrLf
                    If lstObj.DataBodyRange(i, 12).Value = "" Then MissingMessage = MissingMessage & "Contract start day" & vbCrLf
                    If lstObj.DataBodyRange(i, 13).Value = "" Then MissingMessage = MissingMessage & "Contract end day" & vbCrLf
                    
                    If MissingMessage <> "" Then
                    
                        MsgBox "The following data are missing for order line #" & i & ": " & OrderLineType & vbCrLf & MissingMessage & vbCrLf & "Please add these vales into order form."
                        MissingMessage = ""
                    End If
                       
                        
                End If
        
        
        End Select
        
    
    Next i

' check of more SNs or Contracts in order lines
    Set rgSerialsContracts = Range("OrderLines[[Actual Serial Number]:[Contract Number]]")
    rgSerialsContracts.Select
    For Each rgSelected In rgSerialsContracts
        
        rgSelected = LTrim(RTrim(rgSelected))
        
        If Left(rgSelected, 1) = Chr(10) Then
           rgSelected = Mid(rgSelected, 2, Len(rgSelected))
        End If
        
        If InStr(rgSelected, Chr(10)) > 0 Then
            rgSelected = Replace(rgSelected, Chr(10), ";")
        End If
        
        If InStr(rgSelected, ",") > 0 Then
            rgSelected = Replace(rgSelected, ",", ";")
        End If
        
        If InStr(rgSelected, " ") > 0 Then
            rgSelected = Replace(rgSelected, " ", "")
        End If
        
        If InStr(rgSelected, ";;") > 0 Then
            rgSelected = Replace(rgSelected, ";;", ";")
        End If
        
    Next
    
    For i = 1 To OrderLines
        SNArray = Split(lstObj.DataBodyRange(i, 10), ";")
        CONTRArray = Split(lstObj.DataBodyRange(i, 11), ";")
        SNamount = UBound(SNArray)
        CONTRamount = UBound(CONTRArray)
        
        If SNamount > 0 Then
        
            MsgBox "Order line #" & i & " contains more serial numbers :" & lstObj.DataBodyRange(i, 10) & vbCrLf & "Please divide order line into 2 or more, with individual SN per each order line!"
        
        End If
        If CONTRamount > 0 Then
        
            MsgBox "Order line #" & i & " contains more contract numbers :" & lstObj.DataBodyRange(i, 11) & vbCrLf & "Please divide order line into 2 or more, with individual contract per each order line!"
        
        End If
    
    Next i

Range("E3").Select

End Sub
Sub OrderCheck()

    Call OrderDetailCheck
    Call EUdetailsCheck
         
    Call OrderLineCheck

End Sub
Attribute VB_Name = "PriceListLookup"
Sub GetValueMultiCriteria()

Dim x As Variant
Dim y As Variant
Dim z As Variant
Dim Deployment As String
Dim Product As String
Dim Subscrproduct As String
Dim Maintproduct As String

Dim i As Integer

Dim Term As String
Dim LastRow As String
Dim FisrtRow As String
Dim ColumnRange As String
Dim Support As String

Dim PriceListStart As Range

Application.ScreenUpdating = False

Sheets("M2S_simulator").Select

Deployment = Range("G3").Value

Subscrproduct = Range("B3").Value
Maintproduct = Range("A3").Value
Product = Range("A1").Value
Term = Range("I3").Value
Support = Range("H3").Value

If Support = "Basic" Then
    Support = "SBR"
Else
    Support = "AGR"
End If

Sheets("FLAT").Select

Set PriceListStart = Range("A1:B20").Find("Autodesk Material Description", LookAt:=xlWhole)

FirstRow = PriceListStart.Row + 1

LastRow = PriceListStart.CurrentRegion.Rows.Count

ColumnRange = Range(PriceListStart.Cells(2, 2), Cells(LastRow, 2)).Address

' M2S switch

    Sheets("M2S_simulator").Range("B15:F19").ClearContents


For i = 1 To 5


    Subscrproduct = Sheets("M2S_simulator").Range("A14").Offset(i, 0).Value
    
    If Subscrproduct <> "" Then
    
        x = Filter(Application.Transpose(Application.Evaluate("=IF((B" & FirstRow & ":B" & LastRow & "=""M2SN"")*(H" & FirstRow & ":H" & LastRow & "=""" & Deployment & _
        """)*(W" & FirstRow & ":W" & LastRow & "<>""D"")*(Y" & FirstRow & ":Y" & LastRow & "=""" & Subscrproduct & """)*(AC" & FirstRow & ":AC" & LastRow & "=""" & Term & """),ROW(B" & FirstRow & ":B" & LastRow & "),""x"")")), "x", False)
        
        Select Case UBound(x)
            Case -1
                MsgBox "No M2S variant available for: " & Subscrproduct & "&" & Deployment, Title:="M2S"
            Case 0
        '        MsgBox "Row: " & x(0) & "; SKU: " & Cells(x(0), 5), Title:="M2S"
                Sheets("M2S_simulator").Range("C14").Offset(i, 0).Value = Cells(x(0), 1)
                Sheets("M2S_simulator").Range("B14").Offset(i, 0).Value = Cells(x(0), 5)
                Sheets("M2S_simulator").Range("F14").Offset(i, 0).Value = Cells(x(0), 9)
                Sheets("M2S_simulator").Range("J14").Offset(i, 0).Value = Cells(x(0), 11)
                Sheets("M2S_simulator").Range("K14").Offset(i, 0).Value = Cells(x(0), 12)
            
            Case Else
                MsgBox "More variants available", Title:="M2S"
        End Select

    End If

Next i

'Maintenance Plan Renewals

    Sheets("M2S_simulator").Range("B7:F7").ClearContents


y = Filter(Application.Transpose(Application.Evaluate("=IF((AG" & FirstRow & ":AG" & LastRow & "=""Maintenance Plan Renewals"")*(RIGHT(O" & FirstRow & ":O" & LastRow & ",3)=""" & Support & _
""")*(W" & FirstRow & ":W" & LastRow & "<>""D"")*(Y" & FirstRow & ":Y" & LastRow & "=""" & Maintproduct & """),ROW(B" & FirstRow & ":B" & LastRow & "),""y"")")), "y", False)

Select Case UBound(y)
    Case -1
        MsgBox "No Maintenance renewal available for: " & Maintproduct, Title:="Maintenance renewal"
    Case 0
'        MsgBox "Row: " & y(0) & "; SKU: " & Cells(y(0), 5), Title:="Maintenance renewal"
        Sheets("M2S_simulator").Range("C7").Value = Cells(y(0), 1)
        Sheets("M2S_simulator").Range("B7").Value = Cells(y(0), 5)
        Sheets("M2S_simulator").Range("F7").Value = Cells(y(0), 9)
        Sheets("M2S_simulator").Range("J7").Value = Cells(y(0), 11)
        Sheets("M2S_simulator").Range("K7").Value = Cells(y(0), 12)
    Case Else
        MsgBox "More variants of maintenance renewal is available", Title:="Maintenance renewal"
End Select


'Subscription new

Subscrproduct = Sheets("M2S_simulator").Range("B3").Value

    Sheets("M2S_simulator").Range("B11:F11").ClearContents

If Subscrproduct <> "" Then

'    z = Filter(Application.Transpose(Application.Evaluate("=IF((AF10:AF" & LastRow & "=""Subscriptions"")*(AB10:AB" & LastRow & "=""New"")*(Q10:Q" _
'    & LastRow & "="""")*(W10:W" & LastRow & "<>""D"")*(W10:W" & LastRow & "<>""$,D"")*(H10:H" & LastRow & "=""" & Deployment & _
'    """)*(Y10:Y" & LastRow & "=""" & Subscrproduct & """)*(AC10:AC" & LastRow & "=""" & Term & """),ROW(B10:B" & LastRow & "),""z"")")), "z", False)
    
    z = Filter(Application.Transpose(Application.Evaluate("=IF((AG" & FirstRow & ":AG" & LastRow & "=""Subscriptions"")*(AB" & FirstRow & ":AB" & LastRow & "=""New"")*(Q" & FirstRow & ":Q" _
    & LastRow & "="""")*(W" & FirstRow & ":W" & LastRow & "<>""D"")*(W" & FirstRow & ":W" & LastRow & "<>""$,D"")*(H" & FirstRow & ":H" & LastRow & "=""" & Deployment & _
    """)*(Y" & FirstRow & ":Y" & LastRow & "=""" & Subscrproduct & """)*(AC" & FirstRow & ":AC" & LastRow & "=""" & Term & """),ROW(B" & FirstRow & ":B" & LastRow & "),""z"")")), "z", False)
    
    Select Case UBound(z)
        Case -1
            MsgBox "No new subscription available for: " & Subscrproduct & "&" & Deployment, Title:="New subscription"
        Case 0
    '        MsgBox "Row: " & z(0) & "; SKU: " & Cells(z(0), 5), Title:="Maintenance renewal"
            Sheets("M2S_simulator").Range("C11").Value = Cells(z(0), 1)
            Sheets("M2S_simulator").Range("B11").Value = Cells(z(0), 5)
            Sheets("M2S_simulator").Range("F11").Value = Cells(z(0), 9)
            Sheets("M2S_simulator").Range("J11").Value = Cells(z(0), 11)
            Sheets("M2S_simulator").Range("K11").Value = Cells(z(0), 12)
        Case Else
            MsgBox "More variants of new subscription is available", Title:="New subscription"
    End Select

End If

Sheets("M2S_simulator").Select

Application.ScreenUpdating = True

End Sub

Sub GetS2SSKU()

Dim x As Variant
Dim i As Integer

Dim Deployment As String
Dim Subscrproduct As String
Dim S2Scategory As String

Dim Term As String
Dim LastRow As String
Dim FirstRow As String
Dim ColumnRange As String

Dim PriceListStart As Range

Application.ScreenUpdating = False

Sheets("S2S_simulator").Select

Deployment = Range("D12").Value
Subscrproduct = Range("D7").Value
Term = Range("D13").Value
S2Scategory = Range("G7").Value

Sheets("FLAT").Select

Set PriceListStart = Range("A1:B20").Find("Autodesk Material Description", LookAt:=xlWhole)

FirstRow = PriceListStart.Row + 1
LastRow = PriceListStart.CurrentRegion.Rows.Count

ColumnRange = Range(PriceListStart.Cells(2, 2), Cells(LastRow, 2)).Address

    
    If Subscrproduct <> "" Then
    
        x = Filter(Application.Transpose(Application.Evaluate("=IF((B" & FirstRow & ":B" & LastRow & "=""" & S2Scategory & """)*(Q" & FirstRow & ":Q" & LastRow & "<>""S2S Hero to Collection"")*(C" & FirstRow & ":C" & LastRow & "=""ELD"")*(H" & FirstRow & ":H" & LastRow & "=""" & Deployment & _
        """)*(W" & FirstRow & ":W" & LastRow & "<>""D"")*(Y" & FirstRow & ":Y" & LastRow & "=""" & Subscrproduct & """)*(AC" & FirstRow & ":AC" & LastRow & "=""" & Term & """),ROW(B" & FirstRow & ":B" & LastRow & "),""x"")")), "x", False)
        
        Select Case UBound(x)
            Case -1
                MsgBox "No S2S variant available for: " & Subscrproduct & "&" & Deployment, Title:="S2S"
            Case 0
        '        MsgBox "Row: " & x(0) & "; SKU: " & Cells(x(0), 5), Title:="M2S"
                Sheets("S2S_simulator").Range("H4").Value = Cells(x(0), 1)
                Sheets("S2S_simulator").Range("G4").Value = Cells(x(0), 5)
                Sheets("S2S_simulator").Range("I4").Value = Cells(x(0), 9)
                Sheets("S2S_simulator").Range("K4").Value = Cells(x(0), 11)
                Sheets("S2S_simulator").Range("L4").Value = Cells(x(0), 12)
            
            Case Else
                MsgBox "More variants available", Title:="S2S"
        End Select

    End If

Sheets("S2S_simulator").Select

Application.ScreenUpdating = True

End Sub

Sub GetMaintSKU()

' lookup for Maintenance plan SKU in FLAT sheet

Dim y As Variant
Dim Maintproduct As String

Dim i As Integer

Dim LastRow As String
Dim FisrtRow As String
Dim ColumnRange As String
Dim Support As String

Dim PriceListStart As Range

Application.ScreenUpdating = False

Sheets("M2S_simulator").Select

Maintproduct = Range("D7").Value
Support = Range("D14").Value

If Support = "Basic" Then
    Support = "SBR"
Else
    Support = "AGR"
End If

Sheets("FLAT").Select

Set PriceListStart = Range("A1:B20").Find("Autodesk Material Description", LookAt:=xlWhole)

FirstRow = PriceListStart.Row + 1

LastRow = PriceListStart.CurrentRegion.Rows.Count

ColumnRange = Range(PriceListStart.Cells(2, 2), Cells(LastRow, 2)).Address


'Maintenance Plan Renewals

    Sheets("M2S_simulator").Range("G12:I12").ClearContents


y = Filter(Application.Transpose(Application.Evaluate("=IF((AG" & FirstRow & ":AG" & LastRow & "=""Maintenance Renewal"")*(RIGHT(O" & FirstRow & ":O" & LastRow & ",3)=""" & Support & _
""")*(W" & FirstRow & ":W" & LastRow & "<>""D"")*(Y" & FirstRow & ":Y" & LastRow & "=""" & Maintproduct & """),ROW(B" & FirstRow & ":B" & LastRow & "),""y"")")), "y", False)

Select Case UBound(y)
    Case -1
        MsgBox "No Maintenance renewal available for: " & Maintproduct & " and " & Sheets("M2S_simulator").Range("D14").Value & " support.", Title:="Maintenance renewal"
    Case 0
'        MsgBox "Row: " & y(0) & "; SKU: " & Cells(y(0), 5), Title:="Maintenance renewal"
        Sheets("M2S_simulator").Range("H12").Value = Cells(y(0), 1)
        Sheets("M2S_simulator").Range("G12").Value = Cells(y(0), 5)
        Sheets("M2S_simulator").Range("I12").Value = Cells(y(0), 9)
        Sheets("M2S_simulator").Range("O12").Value = Cells(y(0), 11)
        Sheets("M2S_simulator").Range("P12").Value = Cells(y(0), 12)
    Case Else
        MsgBox "More variants of maintenance renewal are available", Title:="Maintenance renewal"
End Select


Sheets("M2S_simulator").Select

Application.ScreenUpdating = True


End Sub

Sub GetNewsubSKU()

Dim z As Variant
Dim Deployment As String
Dim Subscrproduct As String

Dim i As Integer

Dim Term As String
Dim LastRow As String
Dim FirstRow As String
Dim ColumnRange As String

Dim PriceListStart As Range

Application.ScreenUpdating = False

Sheets("M2S_simulator").Select

Deployment = Range("D13").Value

Term = Range("D15").Value

Sheets("FLAT").Select

Set PriceListStart = Range("A1:B20").Find("Autodesk Material Description", LookAt:=xlWhole)

FirstRow = PriceListStart.Row + 1

LastRow = PriceListStart.CurrentRegion.Rows.Count

ColumnRange = Range(PriceListStart.Cells(2, 2), Cells(LastRow, 2)).Address

Subscrproduct = Sheets("M2S_simulator").Range("D8").Value

    Sheets("M2S_simulator").Range("G16:I16").ClearContents

If Subscrproduct <> "" Then

   
    z = Filter(Application.Transpose(Application.Evaluate("=IF((AG" & FirstRow & ":AG" & LastRow & "=""Subscription New"")*(AB" & FirstRow & ":AB" & LastRow & "=""New"")*(Q" & FirstRow & ":Q" _
    & LastRow & "="""")*(W" & FirstRow & ":W" & LastRow & "<>""D"")*(W" & FirstRow & ":W" & LastRow & "<>""$,D"")*(H" & FirstRow & ":H" & LastRow & "=""" & Deployment & _
    """)*(Y" & FirstRow & ":Y" & LastRow & "=""" & Subscrproduct & """)*(AC" & FirstRow & ":AC" & LastRow & "=""" & Term & """),ROW(B" & FirstRow & ":B" & LastRow & "),""z"")")), "z", False)
    
    Select Case UBound(z)
        Case -1
            MsgBox "No new subscription available for: " & Subscrproduct & "&" & Deployment, Title:="New subscription"
        Case 0
    '        MsgBox "Row: " & z(0) & "; SKU: " & Cells(z(0), 5), Title:="Maintenance renewal"
            Sheets("M2S_simulator").Range("H16").Value = Cells(z(0), 1)
            Sheets("M2S_simulator").Range("G16").Value = Cells(z(0), 5)
            Sheets("M2S_simulator").Range("I16").Value = Cells(z(0), 9)
            Sheets("M2S_simulator").Range("O16").Value = Cells(z(0), 11)
            Sheets("M2S_simulator").Range("P16").Value = Cells(z(0), 12)
        Case Else
            MsgBox "More variants of new subscription are available", Title:="New subscription"
    End Select

End If

Sheets("M2S_simulator").Select

Application.ScreenUpdating = True

End Sub

Sub GetM2SSKU()

Dim x As Variant
Dim Deployment As String
Dim Subscrproduct As String

Dim i As Integer

Dim Term As String
Dim LastRow As String
Dim FirstRow As String
Dim ColumnRange As String

Dim PriceListStart As Range

Application.ScreenUpdating = False

Sheets("M2S_simulator").Select

Deployment = Range("D13").Value

Subscrproduct = Range("D8").Value
Term = Range("D15").Value

Sheets("FLAT").Select

Set PriceListStart = Range("A1:B20").Find("Autodesk Material Description", LookAt:=xlWhole)

FirstRow = PriceListStart.Row + 1

LastRow = PriceListStart.CurrentRegion.Rows.Count

ColumnRange = Range(PriceListStart.Cells(2, 2), Cells(LastRow, 2)).Address

' M2S switch

    Sheets("M2S_simulator").Range("G4:I8").ClearContents


For i = 1 To 5


    Subscrproduct = Sheets("M2S_simulator").Range("N3").Offset(i, 0).Value
    
    If Subscrproduct <> "" Then
    
        x = Filter(Application.Transpose(Application.Evaluate("=IF((B" & FirstRow & ":B" & LastRow & "=""M2SN"")*(H" & FirstRow & ":H" & LastRow & "=""" & Deployment & _
        """)*(W" & FirstRow & ":W" & LastRow & "<>""D"")*(Y" & FirstRow & ":Y" & LastRow & "=""" & Subscrproduct & """)*(AC" & FirstRow & ":AC" & LastRow & "=""" & Term & """),ROW(B" & FirstRow & ":B" & LastRow & "),""x"")")), "x", False)
        
        Select Case UBound(x)
            Case -1
                MsgBox "No M2S variant available for: " & Subscrproduct & "&" & Deployment, Title:="M2S"
            Case 0
        '        MsgBox "Row: " & x(0) & "; SKU: " & Cells(x(0), 5), Title:="M2S"
                Sheets("M2S_simulator").Range("H3").Offset(i, 0).Value = Cells(x(0), 1)
                Sheets("M2S_simulator").Range("G3").Offset(i, 0).Value = Cells(x(0), 5)
                Sheets("M2S_simulator").Range("I3").Offset(i, 0).Value = Cells(x(0), 9)
                Sheets("M2S_simulator").Range("O3").Offset(i, 0).Value = Cells(x(0), 11)
                Sheets("M2S_simulator").Range("P3").Offset(i, 0).Value = Cells(x(0), 12)
            
            Case Else
                MsgBox "More variants available", Title:="M2S"
        End Select

    End If

Next i

Sheets("M2S_simulator").Select

Application.ScreenUpdating = True

End Sub
Attribute VB_Name = "Shapes"
Sub ShapeFill()
Attribute ShapeFill.VB_ProcData.VB_Invoke_Func = " \n14"

Dim M2S3y As String
Dim NewSub3y As String
Dim Maint3y As String

Dim M2Ssavings As String
Dim M2SsavingsProc As String
Dim M2SSavingsMaint As String
Dim M2SSavingsMaintProc As String

Dim rgFound As Range

If Range("D8") = "" Or Range("L16") = "" Then

    Sheets("M2S_simulator").Shapes("TextBoxM2S3Y").TextFrame.Characters.Text = ""
    Sheets("M2S_simulator").Shapes("TextBoxNS3Y").TextFrame.Characters.Text = ""
    Sheets("M2S_simulator").Shapes("TextBoxMaint3Y").TextFrame.Characters.Text = ""
    Sheets("M2S_simulator").Shapes("TextBoxSaveNS").TextFrame.Characters.Text = ""
    Sheets("M2S_simulator").Shapes("TextBoxSaveNSproc").TextFrame.Characters.Text = ""
    Sheets("M2S_simulator").Shapes("TextBoxSaveMaint").TextFrame.Characters.Text = ""
    Sheets("M2S_simulator").Shapes("TextBoxSaveMaintProc").TextFrame.Characters.Text = ""


Else

    Set rgFound = Range("N4:N8").Find(Range("D8").Value, LookAt:=xlWhole)

    M2S3y = Format(rgFound.Offset(0, -2).Value, "|fffd| # ##0.00")
    
    NewSub3y = Format(Range("L16").Value, "|fffd| # ##0.00")
    Maint3y = Format(Range("L12").Value, "|fffd| # ##0.00")
    
    M2Ssavings = Range("L16").Value - rgFound.Offset(0, -2).Value
    M2Ssavings = Format(M2Ssavings, "|fffd| # ##0.00")
    
    M2SsavingsProc = (Range("L16").Value - rgFound.Offset(0, -2).Value) / Range("L16").Value
    M2SsavingsProc = Format(M2SsavingsProc, "0.0%")
    
    If Range("L12").Value = "" Then
        M2SSavingsMaint = 0
    Else
        M2SSavingsMaint = Range("L12").Value - rgFound.Offset(0, -2).Value
    
    End If
    
    If M2SSavingsMaint > 0 Then
        M2SSavingsMaint = Format(M2SSavingsMaint, "|fffd| # ##0.00")
        M2SSavingsMaintProc = (Range("L12").Value - rgFound.Offset(0, -2).Value) / Range("L12").Value
        M2SSavingsMaintProc = Format(M2SSavingsMaintProc, "0.0%")
    Else
        M2SSavingsMaint = ""
    End If
    
    Sheets("M2S_simulator").Shapes("TextBoxM2S3Y").TextFrame.Characters.Text = M2S3y
    Sheets("M2S_simulator").Shapes("TextBoxNS3Y").TextFrame.Characters.Text = NewSub3y
    Sheets("M2S_simulator").Shapes("TextBoxMaint3Y").TextFrame.Characters.Text = Maint3y
    Sheets("M2S_simulator").Shapes("TextBoxSaveNS").TextFrame.Characters.Text = M2Ssavings
    Sheets("M2S_simulator").Shapes("TextBoxSaveNSproc").TextFrame.Characters.Text = M2SsavingsProc
    
    If M2SSavingsMaint = "" Then
        Sheets("M2S_simulator").Shapes("TextBoxSaveMaint").Visible = False
        Sheets("M2S_simulator").Shapes("RectangleSaveMaint").Visible = False
        Sheets("M2S_simulator").Shapes("TextBoxSaveMaintProc").Visible = False
        Sheets("M2S_simulator").Shapes("RectangleSaveMaintProc").Visible = False
    Else
        Sheets("M2S_simulator").Shapes("TextBoxSaveMaint").Visible = True
        Sheets("M2S_simulator").Shapes("RectangleSaveMaint").Visible = True
        Sheets("M2S_simulator").Shapes("TextBoxSaveMaintProc").Visible = True
        Sheets("M2S_simulator").Shapes("RectangleSaveMaintProc").Visible = True
        Sheets("M2S_simulator").Shapes("TextBoxSaveMaint").TextFrame.Characters.Text = M2SSavingsMaint
        Sheets("M2S_simulator").Shapes("TextBoxSaveMaintProc").TextFrame.Characters.Text = M2SSavingsMaintProc
    End If
    
End If

End Sub
Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Sub reset_slicers()
Dim slc As SlicerCache
For Each slc In ThisWorkbook.SlicerCaches
slc.ClearManualFilter
Next
End Sub
Attribute VB_Name = "Sheet12"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet18"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet29"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet6"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Workbook_Open()

Call TDdomaincheck

End Sub


' InQuest injected base64 decoded content
' -jx%y&

INQUEST-PP=macro
