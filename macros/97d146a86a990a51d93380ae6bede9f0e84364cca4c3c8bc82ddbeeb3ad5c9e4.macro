Attribute VB_Name = "Calendar"
Attribute VB_Base = "0{785300EC-E930-4159-A702-8DD433EF4DFC}{85B1D20A-C47B-42C5-B2C2-17F71486EC0A}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False



'Version 1.1

Private refreshEnable As Boolean
Private currentDay As Integer
Public Result As String
Public sep As String


Private Sub tb_month_Change()
    Refresh
End Sub

Public Sub SetDate(Optional sdt As String = "")
Dim dt As Date

    
If Len(sdt) > 0 Then
    On Error Resume Next
    dt = Helper.StringToDate(sdt)
End If

If dt = Empty Then dt = Date

    refreshEnable = False
    
    
    tb_month.ListIndex = Month(dt) - 1
    tb_year.value = Year(dt)
    currentDay = Day(dt)
    
    refreshEnable = True
    Refresh
    Show
End Sub

Private Sub tb_year_Change()
    Refresh
End Sub

Private Sub UserForm_Initialize()
Dim y As Integer

refreshEnable = False
    tb_month.AddItem "|fffd||fffd||fffd||fffd||fffd||fffd|"
    tb_month.AddItem "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    tb_month.AddItem "|fffd||fffd||fffd||fffd|"
    tb_month.AddItem "|fffd||fffd||fffd||fffd||fffd||fffd|"
    tb_month.AddItem "|fffd||fffd||fffd|"
    tb_month.AddItem "|fffd||fffd||fffd||fffd|"
    tb_month.AddItem "|fffd||fffd||fffd||fffd|"
    tb_month.AddItem "|fffd||fffd||fffd||fffd||fffd||fffd|"
    tb_month.AddItem "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    tb_month.AddItem "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    tb_month.AddItem "|fffd||fffd||fffd||fffd||fffd||fffd|"
    tb_month.AddItem "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    
y = CInt(DatePart("yyyy", Date))
For i = y - 100 To y + 3
    tb_year.AddItem CStr(i)
Next

    
End Sub

Public Sub Refresh()
Dim dt As Date
Dim dc As Integer
Dim td As Integer
Dim R As Integer
Dim c As Integer
Dim d As Integer
Dim cntr As MSForms.CommandButton
'Dim sep As String
sep = Application.International(xlDateSeparator)
If refreshEnable = False Then Exit Sub

    For R = 1 To 6
        For c = 1 To 7
            Me.Controls("b_" & CStr(R) & "_" & CStr(c)).Visible = False
        Next
    Next
If tb_month.ListIndex = -1 Or tb_year.ListIndex = -1 Then Exit Sub
dt = DateSerial(CInt(tb_year.value), tb_month.ListIndex + 1, 1)


td = Helper.DaysOfMonth(dt)
d = Weekday(dt, vbMonday)

dc = 1
For R = 1 To 6
    For c = d To 7
        Set cntr = Me.Controls("b_" & CStr(R) & "_" & CStr(c))
        cntr.Visible = True
        cntr.Caption = dc
        cntr.BackColor = RGB(255, 255, 255)
        
        
        If dc = currentDay Then
            cntr.BackColor = RGB(255, 255, 127)
        End If
        dc = dc + 1
        If dc > td Then Exit Sub
    Next
    d = 1
Next

End Sub

Private Sub GetDate(b As CommandButton)
Dim d As String
Dim dt As Date
Dim rng As Range
sep = Application.International(xlDateSeparator)
d = CInt(b.Caption)
dt = CDate(d & sep & CStr(tb_month.ListIndex + 1) & sep & tb_year.value)
Result = Helper.DateToString(dt)


Me.Hide

End Sub





Private Sub b_1_1_Click()
GetDate b_1_1
End Sub
Private Sub b_1_2_Click()
GetDate b_1_2
End Sub
Private Sub b_1_3_Click()
GetDate b_1_3
End Sub
Private Sub b_1_4_Click()
GetDate b_1_4
End Sub
Private Sub b_1_5_Click()
GetDate b_1_5
End Sub
Private Sub b_1_6_Click()
GetDate b_1_6
End Sub
Private Sub b_1_7_Click()
GetDate b_1_7
End Sub

Private Sub b_2_1_Click()
GetDate b_2_1
End Sub
Private Sub b_2_2_Click()
GetDate b_2_2
End Sub
Private Sub b_2_3_Click()
GetDate b_2_3
End Sub
Private Sub b_2_4_Click()
GetDate b_2_4
End Sub
Private Sub b_2_5_Click()
GetDate b_2_5
End Sub
Private Sub b_2_6_Click()
GetDate b_2_6
End Sub
Private Sub b_2_7_Click()
GetDate b_2_7
End Sub


Private Sub b_3_1_Click()
GetDate b_3_1
End Sub
Private Sub b_3_2_Click()
GetDate b_3_2
End Sub
Private Sub b_3_3_Click()
GetDate b_3_3
End Sub
Private Sub b_3_4_Click()
GetDate b_3_4
End Sub
Private Sub b_3_5_Click()
GetDate b_3_5
End Sub
Private Sub b_3_6_Click()
GetDate b_3_6
End Sub
Private Sub b_3_7_Click()
GetDate b_3_7
End Sub


Private Sub b_4_1_Click()
GetDate b_4_1
End Sub
Private Sub b_4_2_Click()
GetDate b_4_2
End Sub
Private Sub b_4_3_Click()
GetDate b_4_3
End Sub
Private Sub b_4_4_Click()
GetDate b_4_4
End Sub
Private Sub b_4_5_Click()
GetDate b_4_5
End Sub
Private Sub b_4_6_Click()
GetDate b_4_6
End Sub
Private Sub b_4_7_Click()
GetDate b_4_7
End Sub

Private Sub b_5_1_Click()
GetDate b_5_1
End Sub
Private Sub b_5_2_Click()
GetDate b_5_2
End Sub
Private Sub b_5_3_Click()
GetDate b_5_3
End Sub
Private Sub b_5_4_Click()
GetDate b_5_4
End Sub
Private Sub b_5_5_Click()
GetDate b_5_5
End Sub
Private Sub b_5_6_Click()
GetDate b_5_6
End Sub
Private Sub b_5_7_Click()
GetDate b_5_7
End Sub

Private Sub b_6_1_Click()
GetDate b_6_1
End Sub
Private Sub b_6_2_Click()
GetDate b_6_2
End Sub
Private Sub b_6_3_Click()
GetDate b_6_3
End Sub
Private Sub b_6_4_Click()
GetDate b_6_4
End Sub
Private Sub b_6_5_Click()
GetDate b_6_5
End Sub
Private Sub b_6_6_Click()
GetDate b_6_6
End Sub
Private Sub b_6_7_Click()
GetDate b_6_7
End Sub


Attribute VB_Name = "ClassFactory"
'Class Factory VESRION 1.2


Public Function CreateQuestion(ByVal ID As String) As Question
Set CreateQuestion = New Question
CreateQuestion.ID = ID
CreateQuestion.Visible = True
CreateQuestion.ColumnWidth = 0
End Function


Public Function CreateDictionary(ByVal n As String, ByVal rng As String) As Dictionary
Dim arr As Collection
Dim total As Long

Set CreateDictionary = New Dictionary
CreateDictionary.name = n

Set arr = Helper.Spliter(rng, ":")

CreateDictionary.CKey = CStr(arr(1))
CreateDictionary.CValue = CStr(arr(2))

total = Helper.lastRow(GlobalModule.DList.name, GlobalModule.DList.Range(CreateDictionary.CKey & "1").Column)

CreateDictionary.HasIDs = False
If CreateDictionary.CKey <> CreateDictionary.CValue Then CreateDictionary.HasIDs = True

Set CreateDictionary.R = GlobalModule.DList.Range(GlobalModule.DList.name & "!" & CreateDictionary.CKey & "1:" & CreateDictionary.CValue & CStr(total))
Set CreateDictionary.RKey = GlobalModule.DList.Range(GlobalModule.DList.name & "!" & CreateDictionary.CKey & "1:" & CreateDictionary.CKey & CStr(total))
Set CreateDictionary.RValue = GlobalModule.DList.Range(GlobalModule.DList.name & "!" & CreateDictionary.CValue & "1:" & CreateDictionary.CValue & CStr(total))


End Function


Public Function CreateGrid(ByVal fr As MSForms.Frame) As Grid
    Set CreateGrid = New Grid
    CreateGrid.CellSpacing = 0
    CreateGrid.FontSize = 10
    CreateGrid.ID = "Grid" & "_" & Helper.GUID()
    Set CreateGrid.QFrame = fr
End Function

Public Function CreateNSI(ByVal NameID As String, ByVal NameNSI As String, ByVal rng As Range, Optional ByVal vAlwaysRender As Boolean = False) As NSIClass
Dim maxrow As Long

    Set CreateNSI = New NSIClass
    Set CreateNSI.rng = rng
    
    CreateNSI.NameNSI = NameNSI
    CreateNSI.NameID = NameID
    CreateNSI.AlwaysRender = vAlwaysRender
    CreateNSI.Init
    GlobalModule.NSIs.Add CreateNSI, CreateNSI.NameID
End Function
Attribute VB_Name = "DESCRIPTION"
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|

'GlobalModule - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'LocalModule - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
'Helper - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'ClassFactory - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|. |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| xls |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| bbox (<ENTITY>_START; <ENTITY>_END)
'ListBox |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| ENTITY |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| QTable
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd| NAMEID - Control.Name - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, NAMEID + Text - |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| radiobutton |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Frame |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| Q.NAMEID,
  '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| rb |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| QNAMEID_DICTVALUE, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  

'Grid - |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ListBox, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd|lassFactory
'GridCell - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| Grid
'|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| QTable |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Grid.Events
'Grid.Refresh Range - |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|

'Question:
'QUESTION_ID - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'QUESTION_NAME_ID - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'QUESTION_TYPE - |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| HEADER|TABLE
'QUESTION_TEXT - |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'QUESTION_DESCRIPTION - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'QUESTION_VALUE_TYPE - |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| String|Numeric|Date|Boolean
'QUESTION_IS_MANDATORY - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| True|False
'QUESTION_VALUE_SIZE - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| 0..32767 (|fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
'QUESTION_DEFAULT_VALUE - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'QUESTION_ENTITY - |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'QUESTION_VISIBLE - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| True|False
'QUESTION_SORT - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'QUESTION_COLUMN_WIDTH - |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'QUESTION_HALIGN - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'QUESTION_DICTNAMEID - |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| KeyValuePair_Meta |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|


'KeyValuePair_Meta:
'|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| KeyValue.
'|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| "A" |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|. |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| "B" |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|.
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|. |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|. |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|.

'NSI_Meta:
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|. |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| NSIClass.
'NSIClass - |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|
'NSIForm - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|
' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|:
' Set nsi = GlobalModule.NSIs("NFO")
' nsi.ShowForm
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| nsi.LastSelectedElement as Collection, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|




'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!!!
'1. |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ThisWorkbook
'2. |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ActiveX (|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|)
Attribute VB_Name = "DSP"

Public Const iod_s As String = "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|. |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|. |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd|), |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd|)."
Public Const pdn_s As String = "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|. |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|. |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd|), |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd|)."
Public Const iodpdn_s As String = "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|. |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|. |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd|), |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd|)."

Public iod As Boolean
Public pdn As Boolean
Public isExport As Boolean


Public Sub SetDSPFooter(ByRef sheet As Worksheet, ByVal s As String)
Dim CellName As String
Dim R As Range

CellName = "DSPFooter_" & sheet.name
Set R = Helper.GetRangeByName(CellName)

If Not R Is Nothing Then
        R.Value2 = s
        If Len(s) > 0 Then
            R.RowHeight = 100
        Else
            R.RowHeight = 10
        End If
    End If
End Sub
Public Sub SetDSPText(ByRef sheet As Worksheet, ByVal s As String)
Dim CellName As String
Dim R As Range

CellName = "DSPText_" & sheet.name
Set R = Helper.GetRangeByName(CellName)

If Not R Is Nothing Then
        R.Value2 = s
        If Len(s) > 0 Then
            With R.Font
                .Color = RGB(150, 0, 0)
                .name = "Calibri"
                .Size = 10
                .Strikethrough = False
                .Superscript = False
                .Subscript = False
                .OutlineFont = False
                .Shadow = False
                .Underline = xlUnderlineStyleNone
                .TintAndShade = 0
                .ThemeFont = xlThemeFontMinor
            End With
            With R
                .RowHeight = 100
                .NumberFormat = "General"
                 .Pattern = xlNone
                .HorizontalAlignment = xlLeft
                .VerticalAlignment = xlCenter
                .WrapText = True
                .Orientation = 0
                .AddIndent = False
                .IndentLevel = 0
                .ShrinkToFit = False
                .ReadingOrder = xlContext
            End With
        Else
            R.RowHeight = 10
        End If
    End If
End Sub



Public Sub AddDSPMark(ByRef sheet As Worksheet)
Dim s As String
Dim CellName As String
Dim sHeader As String
Dim st As String


CellName = "DSPFooter_" & sheet.name



isExport = False
On Error Resume Next




isExport = GlobalModule.SurveyMeta("ISEXPORT").value = "1"

On Error Resume Next
st = GlobalModule.SurveyMeta("DSP_Type").value

iod = InStr(st, "IOD") > 0
pdn = InStr(st, "PDN") > 0



SetDSPText sheet, ""
SetDSPFooter sheet, ""

If Not isExport Or (Not iod And Not pdn) Then
    ClearPrintArea sheet
    s = ""
    If iod And pdn Then
        s = iodpdn_s
    ElseIf pdn Then
        s = pdn_s
    ElseIf iod Then
        s = iod_s
    End If
    SetDSPText sheet, s
Else

    s = ""
    
    On Error Resume Next
    s = "|fffd||fffd||fffd|. " & GlobalModule.SurveyMeta("DSP_FIO").value & chr(10) & _
        "|fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" & chr(10) & _
        "|fffd||fffd||fffd||fffd|: " & GlobalModule.SurveyMeta("DSP_DATE").value & " |fffd||fffd||fffd||fffd||fffd|: " & GlobalModule.SurveyMeta("DSP_TIME").value
        
    SetDSPFooter sheet, s
        
        startCol = Helper.ColumnLitter(sheet.Range("PRINT_START_" & sheet.name).Column)
        endCol = Helper.ColumnLitter(sheet.Range("PRINT_END_" & sheet.name).Column)
        
        
    Application.PrintCommunication = False
    With sheet.PageSetup
        .PrintArea = "$" & startCol & ":$" & endCol
        .LeftHeader = ""
        .CenterHeader = ""
        .RightHeader = "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" & chr(10) & "|fffd||fffd||fffd| |fffd|__________________"
        .LeftFooter = ""
        .CenterFooter = ""
        .RightFooter = ""
        .LeftMargin = Application.InchesToPoints(0.708661417322835)
        .RightMargin = Application.InchesToPoints(0.708661417322835)
        .TopMargin = Application.InchesToPoints(0.748031496062992)
        .BottomMargin = Application.InchesToPoints(0.748031496062992)
        .HeaderMargin = Application.InchesToPoints(0.511811023622047)
        .FooterMargin = Application.InchesToPoints(0.31496062992126)
        .PrintHeadings = False
        .PrintGridlines = False
        .PrintComments = xlPrintNoComments
        .CenterHorizontally = False
        .CenterVertically = False
        .Orientation = xlLandscape
        .Draft = False
        .PaperSize = xlPaperA4
        .FirstPageNumber = xlAutomatic
        .Order = xlDownThenOver
        .BlackAndWhite = False
        .Zoom = False
        .FitToPagesWide = 1
        .FitToPagesTall = False
        .PrintErrors = xlPrintErrorsDisplayed
        .OddAndEvenPagesHeaderFooter = False
        .DifferentFirstPageHeaderFooter = False
        .ScaleWithDocHeaderFooter = True
        .AlignMarginsHeaderFooter = True
        .EvenPage.LeftHeader.Text = ""
        .EvenPage.CenterHeader.Text = ""
        .EvenPage.RightHeader.Text = ""
        .EvenPage.LeftFooter.Text = ""
        .EvenPage.CenterFooter.Text = ""
        .EvenPage.RightFooter.Text = ""
        .FirstPage.LeftHeader.Text = ""
        .FirstPage.CenterHeader.Text = ""
        .FirstPage.RightHeader.Text = ""
        .FirstPage.LeftFooter.Text = ""
        .FirstPage.CenterFooter.Text = ""
        .FirstPage.RightFooter.Text = ""
    End With
   
    Application.PrintCommunication = True
End If

SetDSPViewMode
        
     
End Sub

Public Sub ClearPrintArea(ByRef sheet As Worksheet)
 sheet.PageSetup.PrintArea = ""
End Sub

Public Sub SetDSPViewMode()
    If isExport And (iod Or pdn) Then
        ActiveWindow.View = xlPageBreakPreview
    Else
        ActiveWindow.View = xlNormalView
    End If
End Sub
Attribute VB_Name = "Dictionary"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'Dictionary VERSION 1.1

Option Explicit

Public name As String
Public CKey As String
Public CValue As String
Public R As Range '|fffd||fffd||fffd||fffd||fffd| range
Public RKey As Range 'Range |fffd||fffd||fffd||fffd||fffd||fffd|
Public RValue As Range 'Range |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public HasIDs As Boolean

Property Get ItemsCount() As Long
ItemsCount = RValue.rows.Count
End Property


Public Sub SetValidation(ByRef R As Range, Optional StopOnError As Boolean = True, Optional ByVal defaultValue As String = "")
    ' Range
Dim protected As Boolean
protected = R.Worksheet.ProtectContents

Helper.UnProtect R.Worksheet


    If Len(defaultValue) > 0 Then
        R.value = defaultValue
    End If

    With R.Validation
        .Delete
        .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, _
             Operator:=xlEqual, Formula1:="=KeyValuePair_Meta!$" & CValue & "$1:$" & CValue & "$" & CStr(ItemsCount)
        .ShowError = False
    End With
    
If protected Then Helper.Protect R.Worksheet


End Sub

Public Sub SetCMB(ByRef cmb As Object, Optional ByVal CanBeEmpty As Boolean = True, Optional ByVal defaultValue As String = "")
Dim key As String
Dim val As String
Dim i As Integer
Dim currentval As String
Dim currentvalExists As Boolean
Dim R As Range
Dim total As Integer


If TypeOf cmb Is MSForms.ComboBox Then
    currentval = cmb.Text
    currentvalExists = False

    cmb.Clear
    If CanBeEmpty Then
        cmb.AddItem
        cmb.List(0, 0) = ""
        cmb.List(0, 1) = ""
    End If
    
    For i = 0 To ItemsCount - 1
        cmb.AddItem
        val = R.Worksheet.Cells(i + RValue.row, RValue.Column)
        key = val
        If HasIDs Then
            key = R.Worksheet.Cells(i + RValue.row, RKey.Column)
        End If
        cmb.List(cmb.ListCount - 1, 0) = key
        cmb.List(cmb.ListCount - 1, 1) = val
        
        If val = currentval Then currentvalExists = True
    Next
'End If
cmb.ColumnCount = 1
cmb.ColumnWidths = "300"
    If HasIDs Then
        cmb.ColumnCount = 2
        cmb.ColumnWidths = "0; 300"
    End If
    
    
    If defaultValue <> "" Then
       cmb.value = defaultValue
    End If
End If

End Sub

Public Function GetIndexByKey(ByVal key As String) As Long
GetIndexByKey = Search(RKey, key)
End Function

Public Function GetKeyByIndex(ByVal index As Long) As String
GetKeyByIndex = RKey.Worksheet.Cells(index, RKey.Column)
End Function

Public Function GetKey(ByVal val As String) As String
Dim R As Long

GetKey = ""

If val <> "" Then
    R = Search(RValue, val)
    If R > 0 Then GetKey = GlobalModule.DList.Range(CKey & CStr(R)).value
End If

End Function

Public Function GetValue(ByVal key As String) As String
Dim R As Long

GetValue = ""
    If key <> "" Then
        R = Search(RKey, key)
        If R > 0 Then GetValue = GlobalModule.DList.Range(CValue & CStr(R)).value
    End If
End Function

Public Function GetValues() As Collection
Dim i As Integer
Dim val As String

Set GetValues = New Collection
For i = 0 To RValue.rows.Count - 1
    val = RValue.Worksheet.Cells(i + RValue.row, RValue.Column)
    GetValues.Add val
Next
End Function


Public Function Search(ByRef rng As Range, ByVal cond As String) As Long

Dim Result As Range
Dim firstRange As String

Search = 0

Set Result = rng.Find(What:=cond, LookIn:=xlValues)
If Not Result Is Nothing Then firstRange = Result.Address
        
    Do
        If Result Is Nothing Then Exit Do
        If LCase(CStr(Result.value)) = LCase(cond) Then
            Search = Result.row
            Exit Function
        End If
 
        Set Result = rng.FindNext(Result)
        If Result.Address = firstRange Then Exit Do
    Loop

End Function
Attribute VB_Name = "Errors"
Attribute VB_Base = "0{3B07239C-4AAA-4080-9393-92CE73741119}{0E88AD76-4602-41D8-A4E9-186714FF3A2C}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False






Private EventEnable As Boolean


Public Sub UpdateError(ByVal Q As Question, Optional ByVal RowNum As Long = 0)
    Dim row As Long
    Dim i As Long
    Dim QAddress As String
    Dim searchResult As Collection
    Dim eRow As Long
    
    
    
    
    
    Helper.UnProtect EList
    
    EventEnable = False
    
    
    
    QAddress = Q.NameID & "#" & CStr(RowNum)

    'try found question row in list
    row = -1

    Set searchResult = Helper.SimpleSearch(EList.name, "A", QAddress, True, True, 1)

    If searchResult.Count > 0 Then
        row = CLng(searchResult(1))
    End If

    With EList
    
    

    If Not Q.Validated Then
        If row < 0 Then
            row = Helper.lastRow(.name) + 1
        End If
            .Range("A" & CStr(row)).value = QAddress
            .Range("B" & CStr(row)).value = IIf(RowNum > 0, "[C|fffd||fffd||fffd||fffd||fffd| " & CStr(RowNum) & "] " & Q.Text, Q.Text)
            .Range("C" & CStr(row)).value = "|fffd||fffd||fffd||fffd||fffd||fffd|: " & Q.Error
    Else
        If Len(Q.Warning) > 0 Then
            If row < 0 Then
            row = Helper.lastRow(.name) + 1
        End If
            .Range("A" & CStr(row)).value = QAddress
            .Range("B" & CStr(row)).value = IIf(RowNum > 0, "[C|fffd||fffd||fffd||fffd||fffd| " & CStr(RowNum) & "] " & Q.Text, Q.Text)
            .Range("C" & CStr(row)).value = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " & Q.Warning
        Else
            If row >= 0 Then Helper.RemoveRow .name, row

        End If
    End If

    row = Helper.lastRow(.name)
    ErrorList.RowSource = .name & "!A2:C" & CStr(row)
    If row < 2 And Me.Visible Then
       Me.Hide
    End If

    End With
'
    Helper.Protect EList
    
    EventEnable = True
End Sub
Public Sub AddError(ByVal Q As Question, Optional ByVal RowNum As Long = 0)
    Dim row As Long
    Dim i As Long
    Dim QAddress As String
    Dim eRow As Long
    EventEnable = False
    QAddress = Q.NameID & "#" & CStr(RowNum)
 
    'row = Helper.ItemIndex(QAddress, QAddresses)
    'try found question row in list
    'row = -1
    
    'If searchResult.Count > 0 Then
        'row = CLng(searchResult(1))
    'End If

    With ThisWorkbook.Worksheets("Errors_Meta")

        If Not Q.Validated Then
        'If row < 0 Then
            row = Helper.lastRow(.name) + 1
        'Else
        'row = Helper.ItemIndex(QAddress, QAddresses)
        'End If
            .Range("A" & CStr(row)).value = QAddress
            .Range("B" & CStr(row)).value = IIf(RowNum > 0, "[C|fffd||fffd||fffd||fffd||fffd| " & CStr(RowNum) & "] " & Q.Text, Q.Text)
            .Range("C" & CStr(row)).value = "|fffd||fffd||fffd||fffd||fffd||fffd|: " & Q.Error
            GlobalModule.counter_of_errors = GlobalModule.counter_of_errors + 1
            
        Else
            If Len(Q.Warning) > 0 Then
                If row <= 0 Then
                   row = Helper.lastRow(.name) + 1
                End If
                .Range("A" & CStr(row)).value = QAddress
                .Range("B" & CStr(row)).value = IIf(RowNum > 0, "[C|fffd||fffd||fffd||fffd||fffd| " & CStr(RowNum) & "] " & Q.Text, Q.Text)
                .Range("C" & CStr(row)).value = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " & Q.Warning
                GlobalModule.war = GlobalModule.war + 1
            End If
        End If

    'row = Helper.lastRow(.Name)
    'ErrorList.RowSource = .Name & "!A1:C" & CStr(row)
    'If row < 2 And Me.Visible Then
       'Me.Hide
    'End If

    End With
'
    EventEnable = True
End Sub

Private Sub ErrorList_Click()
    Dim R As Range
    Dim QT As QTable
    Dim Q As Question
    Dim Qname As String
    Dim RowNum As Long

    If Not EventEnable Then Exit Sub
    
    
    If ErrorList.ListIndex >= 0 Then
        Qname = ErrorList.List(ErrorList.ListIndex, 0)
        RowNum = CDec(Right(Qname, Len(Qname) - InStr(Qname, "#")))
        Qname = Left(Qname, InStr(Qname, "#") - 1)
        Set Q = GlobalModule.Questions(Qname)
        Set R = Q.GetRange(RowNum)
        GlobalModule.SelectionEventEnabled = False
        R.Worksheet.Activate
        R.Select
        GlobalModule.SelectionEventEnabled = True
    End If
    
    
    
End Sub

Private Sub ErrorList_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    ErrorList_Click
    Me.Hide
End Sub



Private Sub UserForm_Initialize()
If GlobalModule.Questions Is Nothing Then Exit Sub

Errors.ErrorList.ColumnCount = 3
Errors.ErrorList.ColumnWidths = "0; 350; 2000;"
Errors.ErrorList.ColumnHeads = True
'Set QAddresses = New Collection
EventEnable = True


End Sub

Attribute VB_Name = "GlobalModule"
'GlobalModule version 2.0

'constants
Public Const Password As String = "&hfJ430KjqW%"
Public Const xlFORM As Integer = 0
Public Const xlSHEET As Integer = 1


Public Const RenderType As Integer = xlSHEET '1 - |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
                                            '0 - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
'Lists
Public AnketaSheets As Collection
Public SList As Worksheet
Public QList As Worksheet
Public AList As Worksheet
Public EList As Worksheet
Public DList As Worksheet
Public nsi As Worksheet
Public Meta As Worksheet
Public war As Integer
Public counter_of_errors As Double


'Collections
Public Questions As Collection '|fffd||fffd| NameID
Public QuestionsIds As Collection '|fffd||fffd| ID
Public QTables As Collection
Public Dictionaries As Collection
Public SurveyMeta As Collection
Public NSIs As Collection
Public CheckLinks As Collection

Public InterfaceProfile As Collection



'Events
Public EnableEvents As Boolean '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|. |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|!
Public ChangeEventEnabled As Boolean '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| / |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
Public SelectionEventEnabled As Boolean '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| / |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
Public Saving As Boolean
Public IsClosing As Boolean

'Objects
Public localFactory As LocalClassFactory
Public MainForm As MSForms.UserForm


'Properties
Public Property Get IAutoCheckHeaderQuestion() As Boolean
Dim val As String

    IAutoCheckHeaderQuestion = True
    
    On Error Resume Next
    IAutoCheckHeaderQuestion = IIf(InterfaceProfile("IAutoCheckHeaderQuestion") = "1", True, False)
    
End Property

Public Property Get ICheckFormName() As String
ICheckFormName = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
On Error Resume Next
ICheckFormName = InterfaceProfile("ICheckFormName")
End Property

Public Property Get IErrorTextMaxLength() As String
IErrorTextMaxLength = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| {0} |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
On Error Resume Next
IErrorTextMaxLength = InterfaceProfile("IErrorTextMaxLength")
End Property

Public Property Get IErrorTextMandatoryQuestion() As String
IErrorTextMandatoryQuestion = "|fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
On Error Resume Next
IErrorTextMandatoryQuestion = InterfaceProfile("IErrorTextMandatoryQuestion")
End Property



''''''''''''''''''''''''''''


Public Sub PrepareSheets(Optional ByVal hideSheets As Boolean = False)

Helper.ScreenRefresh False
    If ThisWorkbook.ProtectStructure Then ThisWorkbook.UnProtect Password:=GlobalModule.Password

If hideSheets Then

    ThisWorkbook.Worksheets("Title_Meta").Visible = xlSheetVisible
    
    For Each sheet In ThisWorkbook.Worksheets
        If sheet.name <> "Title_Meta" Then
            sheet.Visible = xlSheetVeryHidden
        End If
    Next

Else

    For Each sheet In ThisWorkbook.Worksheets
        If sheet.name <> "Title_Meta" Then '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|...
            If Len(sheet.name) >= 4 And Right(sheet.name, 4) = "Meta" Then
                If Helper.DebugAnketa Then
                    sheet.Visible = xlSheetVisible
                Else
                    sheet.Visible = xlSheetVeryHidden
                End If
            Else
                sheet.Visible = xlSheetVisible
                Application.ScreenUpdating = False
            End If
        End If
    Next
    
    ThisWorkbook.Worksheets("Title_Meta").Visible = xlSheetVeryHidden

End If

    If Application.Version <> "12.0" Then
        ThisWorkbook.Protect Structure:=True, Windows:=False, Password:=GlobalModule.Password
    End If

Helper.ScreenRefresh True

End Sub

Public Sub Distribute()
Dim sheet As Worksheet
Dim row As Long
Dim R As Range

Dim b_UpdateVersion As Boolean


If Helper.DebugAnketa Then
    MsgBox ("ALARM!!!! DEBUG_ANKETA IS ON!!!")
    Exit Sub
End If

b_UpdateVersion = False
If MsgBox("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|?", vbYesNo, "|fffd||fffd||fffd||fffd||fffd||fffd|") = vbYes Then b_UpdateVersion = True



Helper.ScreenRefresh False

'Answers
Set sheet = ThisWorkbook.Worksheets("Answer_Meta")
Helper.UnProtect
Helper.Clear_Sheet sheet.name, 1

'FLK & Version
Set sheet = ThisWorkbook.Worksheets("Survey_Meta")
row = Helper.lastRow(sheet.name)
For i = 1 To row
     Set R = sheet.Range("B" & CStr(i))
     
    Select Case sheet.Range("A" & CStr(i)).Text
        Case "SURVEY_ANONYMOUS"
            R.value = "0"
        Case "ANKETA_TEMPLATE_VERSION":
            If b_UpdateVersion Then R.value = CInt(R.value) + 1
        Case "FLK"
            R.value = "0"
        Case "ANKETA_TEMPLATE_NAMEID", "ANKETA_TEMPLATE_ID", "PERIODTYPE", "PERIODVALUE", "PERIODYEAR"
            ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        Case Else
            R.value = ""
    End Select
Next

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
If Not GlobalModule.Questions Is Nothing Then
    Set Questions = Nothing
End If


PrepareSheets True

Helper.Protect

Helper.ScreenRefresh True

If MsgBox("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| wiki?", vbYesNo, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|") = vbYes Then
    ThisWorkbook.SaveAs UpdateManager.wikiPath & "Templates\" & ThisWorkbook.name
End If

End Sub

Public Sub Auto_Open()
Attribute Auto_Open.VB_Description = "Start Anketa"
Attribute Auto_Open.VB_ProcData.VB_Invoke_Func = "R\n14"
Dim QT As QTable
Dim R As Range
Dim index As Integer
Dim h As Hyperlink
Dim LinkExists As Boolean
Dim sheet As Worksheet



ScreenRefresh False

PrepareSheets


For Each sheet In ThisWorkbook.Worksheets
    If sheet.Visible = xlSheetVisible Then Helper.UnProtect sheet
Next

EnableEvents = True
SelectionEventEnabled = False
ChangeEventEnabled = False


Init
GetMeta
FillPeriod
LocalModule.LocalInit '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'InitAnswers

Set R = Helper.GetRangeByName("SUPCOMMENT")
If Not R Is Nothing Then
    R.value = SurveyMeta("SUPCOMMENT").value
End If

If RenderType = xlFORM Then
    MainForm.Show
Else

    For Each QT In QTables
      
            QT.SetHeader
            QT.Render
      
    Next
    
    '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    Set CheckLinks = New Collection
    index = 1
    link = "CHECKLINK"
    Set R = Helper.GetRangeByName(link & CStr(index))
    
    Do While Not R Is Nothing
        LinkExists = False
        For Each h In R.Worksheet.Hyperlinks
            If Helper.RangeEqual(R, h.Range) Then
                LinkExists = True
                Exit For
            End If
        Next
        If Not LinkExists Then
            R.Worksheet.Hyperlinks.Add R, "", "", ICheckFormName, ICheckFormName
        End If
        CheckLinks.Add R
        
        index = index + 1
        Set R = Helper.GetRangeByName(link & CStr(index))
    Loop
    

    Helper.Protect
    ScreenRefresh True
End If


ProgressBarForm.Complete

SelectionEventEnabled = True
ChangeEventEnabled = True
ThisWorkbook.saved = True



End Sub

Public Sub Init()
Dim sheet As Worksheet

Set AnketaSheets = New Collection
For Each sheet In ThisWorkbook.Worksheets
    If sheet.Visible Then
        AnketaSheets.Add sheet, sheet.name
    End If
Next

Set SList = ThisWorkbook.Worksheets("Survey_Meta")
Set QList = ThisWorkbook.Worksheets("Question_Meta")
Set AList = ThisWorkbook.Worksheets("Answer_Meta")
Set EList = ThisWorkbook.Worksheets("Errors_Meta")
Set DList = ThisWorkbook.Worksheets("KeyValuePair_Meta")
Set nsi = ThisWorkbook.Worksheets("NSI_Meta")
Set Meta = ThisWorkbook.Worksheets("Meta")


Set Questions = New Collection
Set QuestionsIds = New Collection
Set QTables = New Collection
Set Dictionaries = New Collection
Set CheckList = New Collection
Set NSIs = New Collection
Set SurveyMeta = New Collection
Set localFactory = New LocalClassFactory
Set InterfaceProfile = New Collection


End Sub


Private Sub GetMeta()
Dim total As Long
Dim Q As Question
Dim d As Dictionary
Dim str As String
Dim c As Variant
Dim R As Range
Dim iod As Boolean
Dim pdn As Boolean
Dim s As SurveyMetaItem
Dim i As Integer
Dim periodname As Question


iod = False
pdn = False


ProgressBarForm.Start False

'Interface

If Helper.SheetExists("Interface_Meta") Then
    total = Helper.lastRow("Interface_Meta")
    For i = 1 To total
        InterfaceProfile.Add ThisWorkbook.Worksheets("Interface_Meta").Range("B" & CStr(i)).Text, ThisWorkbook.Worksheets("Interface_Meta").Range("A" & CStr(i)).Text
    Next
End If



'Survey
total = Helper.lastRow(SList.name)
For i = 1 To total
    ProgressBarForm.UpdateStatus "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|...", i, total
    Set s = New SurveyMetaItem
    s.key = SList.Range("A" & CStr(i)).value
    s.value = SList.Range("B" & CStr(i)).value
    s.row = i
    SurveyMeta.Add s, s.key
Next


'Dictionaries
total = Helper.lastRow(DList.name)

For i = 1 To total
    ProgressBarForm.UpdateStatus "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|...", i, total
    If DList.Cells(i, 1) <> "" Then
        Set d = ClassFactory.CreateDictionary(DList.Cells(i, 1), DList.Cells(i, 2))
        Dictionaries.Add d, d.name
    End If
Next


'Questions
If Helper.RangeExists("NamePeriod") Then
    Set periodname = New Question '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
    periodname.NameID = "NamePeriod"
    periodname.value = Helper.GetRangeByName("NamePeriod").value
    periodname.Text = "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
    periodname.IsMandatory = True
    periodname.QType = "HEADER"
    periodname.Question_Is_Fake = True
    Helper.Add_Fake_Question periodname, CStr(-1)
End If

total = Helper.lastRow(QList.name)

For i = 2 To total
    ProgressBarForm.UpdateStatus "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|...", i, total
    str = QList.Range("A" + CStr(i)).value
    Set Q = ClassFactory.CreateQuestion(str)
    Q.NameID = QList.Range("B" + CStr(i)).value
    Q.QType = QList.Range("C" + CStr(i)).value
    Q.Text = QList.Range("D" + CStr(i)).value
    Q.Description = QList.Range("E" + CStr(i)).value
    Q.ValueType = QList.Range("F" + CStr(i)).value
    Q.IsMandatory = QList.Range("G" + CStr(i)).value
    Q.ValueSize = QList.Range("H" + CStr(i)).value
    Q.defaultValue = QList.Range("I" + CStr(i)).value
    Q.Entity = QList.Range("J" + CStr(i)).value
    Q.Visible = QList.Range("K" + CStr(i)).value
    Q.Sort = QList.Range("L" + CStr(i)).value
    Q.ColumnWidth = QList.Range("M" + CStr(i)).value
    Q.halign = xlCenter
    Select Case QList.Range("N" + CStr(i)).value
        Case "xlCenter"
            Q.halign = xlCenter 'fmTextAlignCenter
        Case "xlLeft"
            Q.halign = xlLeft 'fmTextAlignLeft
        Case "xlRight"
            Q.halign = xlRight 'fmTextAlignRight
    End Select
    Q.DictNameID = QList.Range("O" + CStr(i)).value
    Q.CategoryData = QList.Range("P" + CStr(i)).value
    Q.EntityName = QList.Range("Q" + CStr(i)).value
    Q.KeyField = QList.Range("S" + CStr(i)).value
    Q.LControl = QList.Range("T" + CStr(i)).value
    Q.NSIID = QList.Range("U" + CStr(i)).value
    Q.NSIView = QList.Range("V" + CStr(i)).value
    Q.FractionSize = CInt(QList.Range("W" + CStr(i)).value)
    Q.QIsWarning = CInt(QList.Range("X" + CStr(i)).value)
    Q.value = Q.defaultValue
    
    Q.LogicControlInit
    
    
    Questions.Add Q, Q.NameID
    QuestionsIds.Add Q, CStr(Q.ID)

    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Set R = Helper.GetRangeByName(Q.NameID + "Text")
    If Not R Is Nothing Then
        R.value = Q.Text
    End If
    
    
        
        'KeyValues
        If Q.QType = "HEADER" Then
        Set R = Helper.GetRangeByName(Q.NameID)
            If Not R Is Nothing Then
                Set Q.Address = R
                Q.Error = ""
                Q.SetFormat R
                Q.SetValidator
                If Q.IsDictionary Then
                   Dictionaries(Q.DictNameID).SetValidation R
                End If
                Q.SetDescription R
            End If
        End If
    
    
    If Q.QType = "TABLE" Then
        SetToTable Q
    End If
    
    
    If Q.CategoryData = "IOD" Then iod = True
    If Q.CategoryData = "PDN1" Or Q.CategoryData = "PDN2" Then pdn = True
    
Next

 'lookup for Views
 
Dim viewIndex As Integer
Dim QV As QView
i = 1
total = QTables.Count
For Each QT In QTables
    ProgressBarForm.UpdateStatus "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & QT.name & "...", i, total
    viewIndex = 1
    Set rng = Helper.GetRangeByName(QT.ID & "_VIEW" & CStr(viewIndex) & "_START")
    Do While (Not rng Is Nothing)
        Set QV = New QView
        QV.ID = QT.ID & "_VIEW" & CStr(viewIndex)
        Set QV.sheet = rng.Worksheet
        Set QV.QT = QT
        QT.QViews.Add QV
        viewIndex = viewIndex + 1
        Set rng = Helper.GetRangeByName(QT.ID & "_VIEW" & CStr(viewIndex) & "_START")
    Loop
Next

 

Dim sheet As Worksheet
For Each sheet In AnketaSheets
    DSP.AddDSPMark sheet
Next



End Sub

Public Sub InitAnswers()

'Answers

Dim QID As String
Dim QValue As String
Dim QRowNum As Long
Dim total As Long
Dim i As Long

'If RenderType = xlSHEET Then ResetShapes


total = Helper.lastRow(AList.name)
'|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
If total > 1 Then
    
   '|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|-|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'    For i = 2 To total
'        ProgressBarForm.UpdateStatus "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|...", i, total
'        QID = CStr(AList.Range("A" + CStr(i)).value)
'        QValue = AList.Range("B" + CStr(i)).value
'        QRowNum = AList.Range("C" + CStr(i)).value
'
'        Set Q = QuestionsIds(QID)
'        AddAnswer Q, QValue, QRowNum
'    Next
Else
'|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    For Each Q In Questions
        If Q.QType = "HEADER" Then
            If RenderType = xlFORM Then
                Q.SetValue MainForm '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| HEADER |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            Else
                Q.SetValue
            End If
        End If
    Next
End If
End Sub

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
Private Sub SetToTable(ByRef Q As Question)
Dim QT As QTable
Dim rng As Range


    If Len(Q.Entity) > 0 Then
        If Not Helper.ContainsKey(QTables, Q.Entity) Then
            Set QT = New QTable
            QT.ID = Q.Entity
            
            Set rng = Helper.GetRangeByName(Q.Entity & "_START")
            If Not rng Is Nothing Then
                Set QT.sheet = rng.Worksheet
            Else
                Set QT.sheet = Anketa '|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            End If
            
            QT.InMemory = False
            QT.SetAddButtons
            QTables.Add QT, QT.ID
        Else
            Set QT = QTables(Q.Entity)
        End If
        QT.AddColumn Q
    End If

End Sub

Private Sub AddAnswer(ByVal Q As Question, ByVal QValue As String, ByVal QRowNum As Long)
Dim QR As QDataRow

    If Q.QType = "HEADER" Then
            Q.value = QValue
            If RenderType = xlFORM Then
                Q.SetValue MainForm '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| HEADER |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            Else
                '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| Excel
                Q.SetValue
            End If
    Else
        If Not Q.QT.IsDynamic Then
            While Q.QT.RowCount < QRowNum
                Set QR = Q.QT.NewRow
                Q.QT.AddRow QR, False
            Wend
        
            Set QR = Q.QT.QRows(QRowNum)
            Q.value = QValue
            QR.SetValueToRow Q
        End If
    End If
End Sub


Public Sub SetQuestionNames(ByVal uf As UserForm)
Dim O As Object
Dim c As Object
Dim ID As String
Dim d As Dictionary



    For Each Q In Questions
    Set O = Nothing
    Set d = Nothing
    If Len(Q.DictNameID) > 0 Then Set d = Dictionaries(Q.DictNameID)
    
        On Error Resume Next
        Set O = uf.Controls(Q.NameID + "Text")
        If (O Is Nothing) = False Then
            O.Caption = Q.Text
        End If
        
        On Error Resume Next
        Set O = uf.Controls(Q.NameID)
        If Not O Is Nothing Then
            If TypeOf c Is MSForms.ComboBox And Not d Is Nothing Then '|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                    d.SetCMB O
            End If
        End If
         
        
        '|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
         On Error Resume Next
        Set O = uf.Controls(Q.NameID)
        If (O Is Nothing) = False Then
            If TypeOf O Is MSForms.Frame Then
                O.Caption = Q.Text
                '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| radiobuttons
                For Each c In O.Controls
                    If TypeOf c Is MSForms.OptionButton Then
                        ID = Right(c.name, Len(c.name) - (Len(Q.NameID) + 1))
                        c.Caption = d.GetValue(ID)
                    End If
                Next
            End If
        End If
    Next
End Sub



Public Sub Submit(Optional ByVal silent As Boolean = False)
Dim checks As Boolean
Dim Q As Question
Dim QT As QTable
Dim R As Range
Dim row As Integer
Dim i As Integer
Dim errCount As Integer
If Not silent Then ProgressBarForm.Start True
war = 0
counter_of_errors = 0


If Questions Is Nothing Then Exit Sub

SelectionEventEnabled = False
ChangeEventEnabled = False



checks = True

On Error Resume Next
Unload Errors

Helper.ScreenRefresh False


Helper.UnProtect AList
Helper.UnProtect EList
Helper.UnProtect SList

Helper.Clear_Sheet "Errors_Meta", 1
Helper.Clear_Sheet "Answer_Meta", 1

For Each Q In Questions
    If Q.QType = "HEADER" Then
        Q.GetValue
        Q.Save
        Q.NoValidator = silent
        Helper.UnProtect Q.Address.Worksheet
        Q.Check
    End If
Next

If Not silent Then
    For Each QT In QTables
        Helper.UnProtect QT.TRange.Worksheet
        QT.Check silent
        Helper.Protect QT.TRange.Worksheet
        If ProgressBarForm.StopProcess Then GoTo Ending
    Next
End If

Ending:


If Not silent Then
    If Not ProgressBarForm.StopProcess Then
        row = Helper.lastRow("Errors_Meta")
        '|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        If row = 1 Or war = row - 1 Then
            LocalModule.Submit
        End If
        
        ProgressBarForm.Complete
        '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
        row = Helper.lastRow("Errors_Meta")
        If row > 1 Then
            If war = row - 1 Then
                UpdateSurveyMeta "FLK", "1"
            Else
                UpdateSurveyMeta "FLK", "2"
            End If
            Errors.ErrorList.RowSource = "Errors_Meta" & "!A2:C" & CStr(row)
            Errors.Show
        Else
            If Errors.Visible Then Errors.Hide
            UpdateSurveyMeta "FLK", "1"
        End If
    End If
End If


            

    
    Helper.Protect
    
    'On Error Resume Next
    'GetRangeByName("CHECKLINK").Activate
    
    SelectionEventEnabled = True
    ChangeEventEnabled = True
    
    If Not silent And Not ProgressBarForm Is Nothing Then
        '|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
        ProgressBarForm.Complete
    End If
    
    
    Helper.ScreenRefresh True
    
    If SurveyMeta("FLK").value = 1 Then
        MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|!"
    End If



End Sub

Public Sub UpdateSurveyMeta(ByVal key As String, ByVal val As String)
    Dim s As SurveyMetaItem
    Dim protected As Boolean
    
    protected = SList.ProtectContents
    
    
    If Not Helper.ContainsKey(SurveyMeta, key) Then
        Set s = New SurveyMetaItem
        s.key = key
        s.row = 0
        SurveyMeta.Add s, s.key
    End If
    
    Set s = SurveyMeta(key)
    If s.value = val Then Exit Sub '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    s.value = val
    
    Helper.UnProtect SList
    If s.row > 0 Then
        SList.Range("B" & CStr(s.row)).value = s.value
    Else
        s.row = Helper.lastRow(SList.name) + 1
        SList.Range("A" & CStr(s.row)).value = s.key
        SList.Range("B" & CStr(s.row)).value = s.value
    End If
    If protected Then Helper.Protect SList
    
End Sub


Public Sub ShowCalendar(ByVal R As Object, Optional dt As String = "")
    If dt = "..." Then dt = ""
    Calendar.SetDate dt
    If Len(Calendar.Result) = 0 Then Exit Sub
    
    
    
    If Not R Is Nothing Then
        Helper.ScreenRefresh False
        Helper.UnProtect R.Worksheet
        R.value = Calendar.Result
        Helper.Protect R.Worksheet
        ChangeEventEnabled = True
       Worksheet_Change R
    End If
End Sub




Private Sub FillPeriod()
Dim i As Integer
Dim j As Integer
Dim row As Long
Dim Months As Variant
Dim Quarts As Variant
Dim R As Range
Dim rod As Boolean




Quarts = Array("", "I", "II", "III", "IV")

Select Case LocalModule.PeriodNameCase
    Case "ROD"
                Months = Array("", "|fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd|", _
                "|fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", _
"|fffd||fffd||fffd||fffd||fffd||fffd||fffd|        ", "|fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
    Case Else
            Months = Array("", "|fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd|", _
            "|fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", _
            "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
End Select

Helper.UnProtect Meta

i = Helper.lastRow(Meta.name)
If i > 1 Then Helper.RemoveRows Meta.Range("A1"), Meta.Range("A" & CStr(i))


row = 1
Set R = Helper.GetRangeByName("NamePeriod")

If Not R Is Nothing Then



        If SurveyMeta("PERIODTYPE").value = "0" Or SurveyMeta("PERIODVALUE").value = "0" Then
      With R
        .Validation.Delete
        .value = ""
      End With
    Exit Sub
    End If


    If SurveyMeta("PERIODVALUE").value = "" Then
        For i = Year(Date) - 1 To Year(Date) + 1
    
           Select Case SurveyMeta("PERIODTYPE").value
            
                Case "0"
                With R
                   .value = ""
                   Exit Sub
                End With
                 
                Case "1" '|fffd||fffd||fffd||fffd||fffd||fffd|
                    For j = 1 To 52
                        Meta.Range("A" & CStr(row)).value = CStr(j) & IIf(LocalModule.PeriodNameCase = "ROD", " |fffd||fffd||fffd||fffd||fffd||fffd| ", " |fffd||fffd||fffd||fffd||fffd||fffd| ") & CStr(i) & " |fffd||fffd||fffd||fffd|"
                        Meta.Range("B" & CStr(row)).value = CStr(j)
                        Meta.Range("C" & CStr(row)).value = CStr(i)
                        row = row + 1
                    Next
                Case "2" '|fffd||fffd||fffd||fffd||fffd|
                    For j = 1 To 12
                        Meta.Range("A" & row).value = Months(j) & " " & CStr(i) & " |fffd||fffd||fffd||fffd|"
                        Meta.Range("B" & CStr(row)).value = CStr(j)
                        Meta.Range("C" & CStr(row)).value = CStr(i)
                        row = row + 1
                    Next
                Case "3" '|fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                    For j = 1 To 4
                        Meta.Range("A" & row).value = Quarts(j) & IIf(LocalModule.PeriodNameCase = "ROD", " |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ", " |fffd||fffd||fffd||fffd||fffd||fffd||fffd| ") & CStr(i) & " |fffd||fffd||fffd||fffd|"
                        Meta.Range("B" & CStr(row)).value = CStr(j)
                        Meta.Range("C" & CStr(row)).value = CStr(i)
                        row = row + 1
                    Next
                Case "4" '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                    For j = 1 To 2
                        Meta.Range("A" & row).value = Quarts(j) & IIf(LocalModule.PeriodNameCase = "ROD", " |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ", " |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ") & CStr(i) & " |fffd||fffd||fffd||fffd|"
                        Meta.Range("B" & CStr(row)).value = CStr(j)
                        Meta.Range("C" & CStr(row)).value = CStr(i)
                        row = row + 1
                    Next
                Case "5" '9 |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                        Meta.Range("A" & row).value = "9 |fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & CStr(i) & " |fffd||fffd||fffd||fffd|"
                        Meta.Range("B" & CStr(row)).value = "1"
                        Meta.Range("C" & CStr(row)).value = CStr(i)
                        row = row + 1
                Case "6" '|fffd||fffd||fffd|
                        Meta.Range("A" & row).value = CStr(i) & IIf(LocalModule.PeriodNameCase = "ROD", " |fffd||fffd||fffd||fffd|", " |fffd||fffd||fffd|")
                        Meta.Range("B" & CStr(row)).value = "1"
                        Meta.Range("C" & CStr(row)).value = CStr(i)
                        row = row + 1
            End Select
        Next
        row = row - 1
    Else
   
      If SurveyMeta("PERIODTYPE").value <> "6" Then
            Meta.Range("A" & CStr(row)).value = periodname() + " |fffd||fffd||fffd||fffd|"
        Else
            Meta.Range("A" & row).value = periodname() + IIf(LocalModule.PeriodNameCase = "ROD", " |fffd||fffd||fffd||fffd|", " |fffd||fffd||fffd|")
        End If
        Meta.Range("B" & CStr(row)).value = SurveyMeta("PERIODVALUE").value
        Meta.Range("C" & CStr(row)).value = SurveyMeta("PERIODYEAR").value
    End If

    Helper.UnProtect R.Worksheet
        With R.Validation
        .Delete
        .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, _
             Operator:=xlBetween, Formula1:="=Meta!A1:A" & CStr(row)
        End With
   ' Helper.Protect R.Worksheet

    'PeriodName
    If SurveyMeta("PERIODVALUE").value <> "" Then
    If SurveyMeta("PERIODTYPE").value <> "6" Then
       R.value = GlobalModule.periodname() + " |fffd||fffd||fffd||fffd|"
    Else
       R.value = GlobalModule.periodname() + IIf(LocalModule.PeriodNameCase = "ROD", " |fffd||fffd||fffd||fffd|", " |fffd||fffd||fffd|")
    End If
    End If
End If

Helper.Protect Meta


End Sub

Public Function periodname() As String
Dim PeriodID As Integer
Dim PeriodType As Integer
Dim PeriodYear As Integer
Dim rod As Boolean

periodname = ""

rod = LocalModule.PeriodNameCase = "ROD"

PeriodID = CInt(SurveyMeta("PeriodValue").value)
PeriodType = CInt(SurveyMeta("PeriodType").value)
PeriodYear = CInt(SurveyMeta("PeriodYear").value)

Select Case PeriodType
Case 1:
    periodname = CStr(PeriodID) & " |fffd||fffd||fffd||fffd||fffd||fffd| " & CStr(PeriodYear)
Case 2:
    Select Case PeriodID
        Case 1:
            periodname = IIf(rod, "|fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd|")
        Case 2:
            periodname = IIf(rod, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
        Case 3:
            periodname = IIf(rod, "|fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd|")
        Case 4:
            periodname = IIf(rod, "|fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd|")
        Case 5:
            periodname = IIf(rod, "|fffd||fffd||fffd|", "|fffd||fffd||fffd|")
        Case 6:
            periodname = IIf(rod, "|fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd|")
        Case 7:
            periodname = IIf(rod, "|fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd|")
        Case 8:
            periodname = IIf(rod, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd|")
        Case 9:
            periodname = IIf(rod, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
        Case 10:
            periodname = IIf(rod, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
        Case 11:
            periodname = IIf(rod, "|fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd|")
        Case 12:
            periodname = IIf(rod, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
    End Select
    periodname = periodname & " " & CStr(PeriodYear)
Case 3:
    Select Case PeriodID
        Case 1:
            periodname = IIf(rod, "I |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "I |fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
        Case 2:
            periodname = IIf(rod, "II |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "II |fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
        Case 3:
            periodname = IIf(rod, "III |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "III |fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
        Case 4:
            periodname = IIf(rod, "IV |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "IV |fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
    End Select
    periodname = periodname & " " & CStr(PeriodYear)
Case 4:
     Select Case PeriodID
        Case 1:
            periodname = IIf(rod, "I |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "I |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
        Case 2:
            periodname = IIf(rod, "II |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "II |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
     End Select
     periodname = periodname & " " & CStr(PeriodYear)
Case 5:
     periodname = "|fffd||fffd| 9 |fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & CStr(PeriodYear)
Case 6:
     periodname = CStr(PeriodYear)
End Select


End Function

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
Public Sub Worksheet_Change(ByVal Target As Range)
Dim Q As Question
Dim R As Range
Dim QT As QTable
Dim QR As QDataRow
Dim bFound As Boolean
Dim key As String
Dim value As String
Dim lNSI As NSIClass
Dim row As Long
Dim nsiElem As Collection


If Questions Is Nothing Then Exit Sub
If Not ChangeEventEnabled Then Exit Sub
If Not IAutoCheckHeaderQuestion Then GoTo finish


bFound = False


ChangeEventEnabled = False
SelectionChangeEnabled = False

            Helper.ScreenRefresh False
            Helper.UnProtect Target.Worksheet
            


'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
'NamePeriod
Set R = Helper.GetRangeByName("NamePeriod")
If Not R Is Nothing Then
    If Helper.RangeEqual(R, Target) Then
            row = Helper.SimpleSearch("Meta", "A", R.Text)(1)
            UpdateSurveyMeta "PERIODVALUE", Meta.Range("B" & CStr(row))
            UpdateSurveyMeta "PERIODYEAR", Meta.Range("C" & CStr(row))
            GoTo finish
    End If
End If

'SUPCOMMENT
Set R = Helper.GetRangeByName("SUPCOMMENT")
If Not R Is Nothing Then
    If Helper.RangeEqual(Target, R) Then
        UpdateSurveyMeta "SUPCOMMENT", R.Text
        GoTo finish
    End If
            
End If


'|fffd||fffd||fffd||fffd||fffd||fffd||fffd|
If Target.Count = 1 Then
    For Each Q In Questions
        If Q.QType = "HEADER" Then
            If Not Q.Address Is Nothing Then
                If Helper.RangeEqual(Target, Q.Address) Then
                    value = Target.Text
                    Helper.UnProtect AList
                    If Len(value) > 0 Then
                        Q.value = value
                        If Q.IsNSI Then Q.SetNsiValue Target
                        If Q.IsDictionary Then Q.SetDictValue Target
                        Q.GetValue
                        Q.Save
                        Q.Check 0, True
                    Else
                        Q.value = ""
                        Q.Error = ""
                        Q.SetValidator
                        Q.Save
                    End If
                    Helper.Protect AList
                    
                    UpdateSurveyMeta "FLK", "0"
                    
                    
                        bFound = True
                    Exit For
                End If
            End If
        End If
    Next
    
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    If Not bFound Then
        For Each QT In QTables
            If Helper.ContainsRange(QT.DRange, Target) And Target.Count = 1 Then
            '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
                For Each Q In QT.Columns
                    If Q.NumColumn = Target.Column Then
                        If QT.IsDynamic Then
                            '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                            If Q.IsNSI Then Q.SetNsiValue Target
                            If Q.IsDictionary Then Q.SetDictValue Target
                        Else
                            '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
                            Set QR = QT.QRows(Target.row - QT.RowStart)
                            Q.GetValue QR.RowID
                            Helper.UnProtect AList
                            Q.Save QR.RowID
                            Helper.Protect AList
                            If Len(Q.value) > 0 Then
                                If Q.IsNSI Then Q.SetNsiValue Target
                                If Q.IsDictionary Then Q.SetDictValue Target
                                Q.Check QR.RowID, True
                            Else
                                Q.Error = ""
                                Q.SetValidator QR.RowID
                            End If
                            QR.SetValueToRow Q
                        End If
                        UpdateSurveyMeta "FLK", "0"
                        Exit For
                    End If
                Next
            End If
        Next
    End If
End If

LocalModule.Worksheet_Change Target

finish:
SelectionChangeEnabled = True
ChangeEventEnabled = True


    Helper.Protect Target.Worksheet
    Helper.ScreenRefresh True


End Sub

'===================
Public Sub WorksheetSelection_Change(ByVal Target As Range)
Dim Q As Question
Dim QT As QTable
Dim nsi As NSIClass
Dim bFound As Boolean




If Questions Is Nothing Then Exit Sub
If Not SelectionEventEnabled Then Exit Sub

bFound = False

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|

For Each Q In Questions
    If Q.QType = "HEADER" Then
        If Not Q.Address Is Nothing Then
            If Helper.RangeEqual(Target, Q.Address) Then
                    bFound = True
                    If Q.ValueType = "Date" Then GlobalModule.ShowCalendar Q.Address, Q.Address.Text
                    If Len(Q.NSIID) > 0 Then
                        Set nsi = NSIs(Q.NSIID)
                        ChangeEventEnable = True
                        nsi.ShowForm Q.Address
                        ChangeEventEnabled = False
                    End If
                Exit For
            End If
        End If
    End If
Next

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd|
If Not bFound Then
    For Each QT In QTables
        If Not QT.IsDynamic Then
            If Helper.ContainsRange(QT.DRange, Target) Then
                '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
                For Each Q In QT.Columns
                    If Q.NumColumn = Target.Column Then
                        
                       If Q.ValueType = "Date" Then GlobalModule.ShowCalendar Target, Target.Text
                        If Len(Q.NSIID) > 0 Then
                            Set nsi = NSIs(Q.NSIID)
                            ChangeEventEnabled = True
                            nsi.ShowForm Target
                            ChangeEventEnabled = False
                        End If
                        bFound = True
                        Exit For
                    End If
                Next
            End If
        Else
        ' For Dynamic
            If Target.rows.Count = 1 And Target.Columns.Count = 1 And Target.row > QT.RowStart And QT.sheet.name = Target.Worksheet.name Then
                ChangeEventEnabled = False
                
                
                 For Each Q In QT.Columns
                    If Q.NumColumn = Target.Column And Target.Count = 1 Then
                    
                       If Q.ValueType = "Date" Then GlobalModule.ShowCalendar Target, Target.Text
                            
                            If Len(Q.DictNameID) > 0 Then
                                value = Target.value
                                
                                If Len(value) = 0 Then
                                    If Target.Validation.InputMessage <> "" Then
                                        If Q.IsNSI Then
                                            Helper.SetInputMessage Target, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
                                        Else
                                            Helper.SetInputMessage Target, ""
                                        End If
                                    End If
                                Else
                                    key = GlobalModule.Dictionaries(Q.DictNameID).GetKey(value)
                                    If key <> "" Then
                                        If Q.NSIView = ViewKey Then
                                            Target.value = key
                                            Helper.SetInputMessage Target, value
                                        End If
                                    Else
                                         '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
                                        value = GlobalModule.Dictionaries(Q.DictNameID).GetValue(value)
                                        If Len(value) > 0 And Target.Validation.InputMessage <> value Then
                                            Helper.SetInputMessage Target, value
                                        Else
                                            If Target.Validation.InputMessage <> "" Then
                                                Helper.SetInputMessage Target, ""
                                            End If
                                        End If
                                    End If
                                End If
                            End If
                            
                            
                             If Len(Q.NSIID) > 0 Then
                                   
                                    value = Target.value
                                    Set lNSI = GlobalModule.NSIs(Q.NSIID)
                                    row = lNSI.GetElementByKey(value)
                                    If row = 0 Then
                                        '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                                        row = lNSI.GetElementByValue(value)
                                    End If


                                    If row > 0 Then
                                        Set nsiElem = lNSI.GetElement(row)
                                        Target.value = nsiElem(1)
                                        If nsiElem.Count = 1 Then
                                            Helper.SetInputMessage Target, nsiElem(1) & ". |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
                                        Else
                                            Helper.SetInputMessage Target, nsiElem(2) & ". |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
                                        End If
                                    Else
                                        If Target.Validation.InputMessage <> "" Then
                                            Helper.SetInputMessage Target, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
                                        End If
                                    End If
                             End If
                            
                        bFound = True
                        Exit For
                    End If
                Next
            End If
        End If
    Next
End If




LocalModule.WorksheetSelection_Change Target

ChangeEventEnabled = True


End Sub

'==================
Public Sub Worksheet_FollowHyperlink(ByVal Target As Hyperlink)
Dim QT As QTable
Dim R As Range
Dim QR As QDataRow
If Questions Is Nothing Then Exit Sub


Helper.ScreenRefresh False
Helper.UnProtect


ChangeEventEnabled = False
SelectionEventEnabled = False

For Each R In CheckLinks
    If Helper.RangeEqual(Target.Range, R) Then
        Submit
        GoTo finish
    End If
Next



'QTables
For Each QT In QTables
    'AddButtons
    If Not QT.IsDynamic Then
    
        For Each R In QT.AddButtons
            If Helper.RangeEqual(R, Target.Range) Then
                Set QR = QT.NewRow()
                
                QT.AddRow QR
                GoTo finish
            End If
        Next
        
        'DeleteButtons
        If QT.DeleteAvailable Then
            'compare column
            If Target.Range.Column = QT.DeleteButtons.Column Then
                'comparerow
                If Target.Range.row > QT.RowStart And Target.Range.row <= QT.RowStart + QT.RowCount Then
                    'Delete row
                        QT.RemoveRow Target.Range.row - QT.RowStart
                    GoTo finish
                End If
            End If
        End If
        
        'InsertRow
        If QT.InsertAvailable Then
            'compare column
            If Target.Range.Column = QT.InsertButtons.Column Then
                'comparerow
                If Target.Range.row > QT.RowStart And Target.Range.row <= QT.RowStart + QT.RowCount Then
                    'Delete row
                        QT.InsertRow Target.Range.row - QT.RowStart
                    GoTo finish
                End If
            End If
        End If
        
        'DeleteButtons
        If QT.CopyRowAvailable Then
            'compare column
            If Target.Range.Column = QT.CopyRowButtons.Column Then
                'comparerow
                If Target.Range.row > QT.RowStart And Target.Range.row <= QT.RowStart + QT.RowCount Then
                    'Delete row
                        QT.CopyRow Target.Range.row - QT.RowStart
                    GoTo finish
                End If
            End If
        End If
    End If
Next


finish:
    ChangeEventEnabled = True
    SelectionEventEnabled = True
    
    Helper.Protect
    Helper.ScreenRefresh True
    
End Sub

Public Sub Worksheet_BeforeDoubleClick(ByVal Target As Range, Cancel As Boolean)
Cancel = True

If Questions Is Nothing Then Exit Sub

    
    For Each QT In QTables
        ' For Dynamic
        If QT.IsDynamic And Target.rows.Count = 1 And Target.Columns.Count = 1 And Target.row > QT.RowStart And QT.sheet.name = Target.Worksheet.name Then
                
                For Each Q In QT.Columns
                    If Q.NumColumn = Target.Column And Target.Count = 1 Then
                        If Q.IsNSI Then
                            With Target.Application.ActiveWindow
                                SearchForm.Set_Nsi GlobalModule.NSIs(Q.NSIID), Target
                                SearchForm.Left = (Target.Left - .VisibleRange.Left) * .Zoom / 100 + .Application.Left + 25
                                SearchForm.Top = (Target.Top + SearchForm.Height + Target.Height) * .Zoom / 100 + .Application.Top - Target.Worksheet.Range("A" & CStr(QT.RowStart) & ":A" & CStr(Target.Application.ActiveWindow.ScrollRow)).Height
                                SearchForm.Show
                            End With
                        End If
                        Exit For
                    End If
                Next
            Exit For
        End If
    Next
End Sub

Public Sub Workbook_BeforeClose(Cancel As Boolean)

IsClosing = True
   
End Sub



Public Sub Workbook_BeforeSave(ByVal SaveAsUI As Boolean, Cancel As Boolean)
Dim fname As String

        If GlobalModule.Saving Or GlobalModule.Questions Is Nothing Then Exit Sub
    
     'Prevent default Save behavior
        Cancel = True
   
        If GlobalModule.SurveyMeta("FLK").value = "0" Then
            If MsgBox("|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| C|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|." & chr(10) & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|:" _
            & chr(10) & " - |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|;" _
            & chr(10) & " - |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|;" _
            & chr(10) & " - |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|." _
            & chr(10) & chr(10) & _
            "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| C|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd| """ & ICheckFormName & """)." _
            & chr(10) & chr(10) & "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|?", vbYesNo, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|") = vbNo Then
                Exit Sub
            End If
        End If
        
        If GlobalModule.SurveyMeta("FLK").value = "2" Then
            If MsgBox("|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| C|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|." & chr(10) & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|:" _
            & chr(10) & " - |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|." _
            & chr(10) & chr(10) & _
            "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| C|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd| """ & ICheckFormName & """)." _
            & chr(10) & chr(10) & "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|?", vbYesNo, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|") = vbNo Then
                Exit Sub
            End If
        End If
        
        'Saving....
                 
            ' Prevent another call when we save the file
            
              If SaveAsUI Then
2:               With Application.FileDialog(msoFileDialogSaveAs)
                  .InitialFileName = ThisWorkbook.name
                    If .Show = -1 Then
                        Helper.ScreenRefresh False
                        fname = .SelectedItems(1)
                        If Not Mid(fname, InStrRev(fname, ".") + 1) = "xlsm" Then
                            MsgBox ("|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|. |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ""|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"" *.xlsm |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
                            GoTo 2
                        End If
                        GlobalModule.PrepareSheets True
                        GlobalModule.Saving = True
                        ThisWorkbook.SaveAs fname
                        GlobalModule.Saving = False
                        GlobalModule.PrepareSheets
                        ThisWorkbook.saved = True
                    End If
               End With
            Else
                Helper.ScreenRefresh False
                GlobalModule.PrepareSheets True
                GlobalModule.Saving = True
                ThisWorkbook.Save
                GlobalModule.Saving = False
                GlobalModule.PrepareSheets
                Helper.ScreenRefresh True
                ThisWorkbook.saved = True
            End If
       
End Sub

Public Sub Auto_Close()
Dim saved As Boolean

saved = ThisWorkbook.saved

If Not saved And Not Questions Is Nothing Then
    If GlobalModule.SurveyMeta("FLK").value = "1" Then
        If MsgBox("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ?", vbYesNo, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|") = vbNo Then saved = True
    End If
End If

If Not saved Then GlobalModule.Workbook_BeforeSave False, False

ThisWorkbook.saved = True


End Sub



Attribute VB_Name = "Grid"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'Grid VERSION 1.3

Public ID As String 'ID |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
Public QFrame As MSForms.Frame '|fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
Public rng As Range
Private FilteredRows As Collection '|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public CellSpacing As Integer '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Private p_SelectedRow As Long '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
Public name As String
Public Events As Collection
Public FontSize As Integer
Private RenderColumns As Collection





Property Get SelectedRow() As Long
    SelectedRow = 0
    If p_SelectedRow > 0 Then
        If (FilteredRows Is Nothing) = False Then
            SelectedRow = FilteredRows(p_SelectedRow) - 1
        Else
            SelectedRow = p_SelectedRow
        End If
    End If
End Property
Property Get SheetRow() As Long
    SheetRow = 0
    If SelectedRow > 0 Then
        SheetRow = rng.row + SelectedRow
    End If
End Property







'FilteredRows - |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Sub Refresh(ByVal rr As Range, Optional ByVal fr As Collection)
Dim sheet As Worksheet
Dim TotalColWidth As Integer
Dim TotalRowHeight As Long
Dim w As Integer
Dim h As Integer
Dim gl As GridCell
Dim l As MSForms.LABEL
Dim R As Range
Dim halign As Integer
Dim rIndex As Integer

Dim needResize As Boolean
Dim wkoef As Single
Dim ignoreWidth As Single

Set FilteredRows = fr
p_SelectedRow = 0

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| event |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
Do While Events.Count > 0
Events.Remove (1)
Loop

Set rng = rr
Set sheet = rng.Worksheet

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
wkoef = 1
If QFrame.Width > rng.Width Then
    wkoef = QFrame.Width / rng.Width
End If

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
Set RenderColumns = New Collection
index = 1
col = rng.Column
Do While col < rng.Column + rng.Columns.Count
    Set R = sheet.Cells(rng.row, col).MergeArea
    RenderColumns.Add R
    col = col + R.Columns.Count
Loop




QFrame.Caption = name
QFrame.ForeColor = RGB(0, 0, 255)
QFrame.Controls.Clear

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
TotalColWidth = 0
col = 0
If name <> "" Then
    TotalRowHeight = 5 '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Else
    TotalRowHeight = CellSpacing
End If


row = rng.Cells.row
rCol = rng.Cells.Column

For i = 1 To RenderColumns.Count
        TotalColWidth = TotalColWidth + CellSpacing
        Set R = RenderColumns(i)
        w = CInt(R.Width * wkoef)
        h = CInt(R.Height)
        If h = 0 Then h = 30
    
        Set l = QFrame.Controls.Add("forms.label.1")
        With l
        .Left = TotalColWidth
        .Top = TotalRowHeight
        .TextAlign = fmTextAlignCenter
        .Height = h
        .Width = w
        .Font.Size = FontSize
        
        Set R = sheet.Cells(R.row, R.Column)
        If Not IsNull(R.Font.name) Then
           .Font.name = R.Font.name
        End If
        .Font.Size = R.Font.Size
        .Font.Bold = True
        .ForeColor = RGB(0, 0, 0)
        .BackColor = RGB(200, 200, 200)
        .Caption = R.Value2
        .BorderStyle = fmBorderStyleSingle
        End With
        
        TotalColWidth = TotalColWidth + w
Next
TotalRowHeight = TotalRowHeight + h

'|fffd||fffd||fffd||fffd||fffd||fffd|
If rng.rows.Count > 1 Then
    If Not (FilteredRows Is Nothing) Then
    rIndex = 1
     For Each row In FilteredRows
        TotalColWidth = 0
        For col = 1 To RenderColumns.Count
                TotalColWidth = TotalColWidth + CellSpacing
             
                Set R = sheet.Range(sheet.Cells(row, RenderColumns(col).Column), sheet.Cells(row, RenderColumns(col).Column + RenderColumns(col).Columns.Count - 1))
                
                w = CInt(R.Width * wkoef)
                h = CInt(R.Height)
            
                Set gl = New GridCell
                Set gl.QGrid = Me
                gl.RowNum = rIndex
                gl.ColNum = col
        
                Set gl.lab = QFrame.Controls.Add("forms.label.1")
                Events.Add gl
            
                halign = R.HorizontalAlignment
                Select Case R.HorizontalAlignment
                    Case xlLeft
                        halign = fmTextAlignLeft
                    Case xlCenter
                        halign = fmTextAlignCenter
                    Case xlRight
                        halign = fmTextAlignRight
                End Select
            
                If halign <> fmTextAlignCenter And halign <> fmTextAlignRight Then halign = fmTextAlignLeft
            
                Set R = sheet.Cells(R.row, R.Column)
                With gl.lab
                .name = ID & "_" & CStr(gl.RowNum) & "_" & CStr(gl.ColNum)
                .Left = TotalColWidth
                .Top = TotalRowHeight
                .TextAlign = halign
                .Height = h
                .Width = w
                .Font.Size = R.Font.Size
                If Not IsNull(R.Font.name) Then
                    .Font.name = R.Font.name
                End If
                If Not IsNull(R.Font.Color) Then
                    .ForeColor = R.Font.Color
                End If
                If p_SelectedRow = row Then
                    .BackColor = RGB(200, 240, 255)
                Else
                    .BackColor = RGB(255, 255, 255)
                End If
                .Caption = R.Value2
                .BorderStyle = fmBorderStyleSingle
                End With
                TotalColWidth = TotalColWidth + w
        Next
    TotalRowHeight = TotalRowHeight + h
    rIndex = rIndex + 1
    Next
Else
    For row = 1 To rng.rows.Count - 1
    TotalColWidth = 0
        For col = 1 To RenderColumns.Count
                TotalColWidth = TotalColWidth + CellSpacing
             
                Set R = sheet.Range(sheet.Cells(rng.row + row, RenderColumns(col).Column), sheet.Cells(rng.row + row, RenderColumns(col).Column + RenderColumns(col).Columns.Count - 1))
                w = CInt(R.Width * wkoef)
                h = CInt(R.Height)
            
                Set gl = New GridCell
                Set gl.QGrid = Me
                gl.RowNum = row
                gl.ColNum = col
            
                Set gl.lab = QFrame.Controls.Add("forms.label.1")
                Events.Add gl
                
                halign = R.HorizontalAlignment
                Select Case R.HorizontalAlignment
                    Case xlLeft
                        halign = fmTextAlignLeft
                    Case xlCenter
                        halign = fmTextAlignCenter
                    Case xlRight
                        halign = fmTextAlignRight
                End Select
                
                If halign <> fmTextAlignCenter And halign <> fmTextAlignRight Then halign = fmTextAlignLeft
                Set R = sheet.Cells(R.row, R.Column)
                
                With gl.lab
                    .name = ID & "_" & CStr(gl.RowNum) & "_" & CStr(gl.ColNum)
                    .Left = TotalColWidth
                    .Top = TotalRowHeight
                    .TextAlign = halign
                    .Height = h
                    .Width = w
                    .Font.Size = FontSize
                    If Not IsNull(R.Font.name) Then
                        .Font.name = R.Font.name
                    End If
                    If Not IsNull(R.Font.Color) Then
                        .ForeColor = R.Font.Color
                    End If
                    
                    If p_SelectedRow = row Then
                        .BackColor = RGB(200, 240, 255)
                    Else
                        .BackColor = RGB(255, 255, 255)
                    End If
                    .Caption = R.Value2
                    .BorderStyle = fmBorderStyleSingle
                End With
                TotalColWidth = TotalColWidth + w
        Next
    TotalRowHeight = TotalRowHeight + h
    Next
    End If
End If

If p_SelectedRow >= rng.rows.Count Then p_SelectedRow = 0


'SrollBars
Dim scroll As Integer
scroll = 0
If TotalRowHeight > QFrame.Height Then scroll = scroll + 1
If TotalColWidth > QFrame.Width Then scroll = scroll + 2

Select Case scroll
Case 0
    QFrame.ScrollBars = fmScrollBarsNone
Case 1
    QFrame.ScrollBars = fmScrollBarsVertical
Case 2
    QFrame.ScrollBars = fmScrollBarsHorizontal
Case 3
    QFrame.ScrollBars = fmScrollBarsBoth
End Select

QFrame.ScrollWidth = TotalColWidth
QFrame.ScrollHeight = TotalRowHeight
QFrame.ScrollTop = 0


End Sub


Public Sub SelectRow(ByVal num As Long)
Dim c As MSForms.control

If p_SelectedRow = num Then Exit Sub


'|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
If p_SelectedRow > 0 Then
    For col = 1 To RenderColumns.Count
            QFrame.Controls(ID & "_" & CStr(p_SelectedRow) & "_" & CStr(col)).BackColor = RGB(255, 255, 255)
    Next
End If

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    p_SelectedRow = num
     For col = 1 To RenderColumns.Count
            QFrame.Controls(ID & "_" & CStr(p_SelectedRow) & "_" & CStr(col)).BackColor = RGB(200, 240, 255)
    Next
End Sub



Attribute VB_Name = "GridCell"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'GridCell VERSION 1.0

Public WithEvents lab As MSForms.LABEL
Attribute lab.VB_VarHelpID = -1
Public ColNum As Integer
Public RowNum As Long

Public QGrid As Grid

Private Sub lab_Click()
   QGrid.SelectRow RowNum
End Sub
Attribute VB_Name = "GridForm"
Attribute VB_Base = "0{AB41F749-B19C-48AA-993B-89232D1B86E2}{46833019-7E06-421B-B326-F99950200326}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Public GridEvents As New Collection '|fffd||fffd||fffd| event |fffd| |fffd||fffd||fffd||fffd|e
Public QT As QTable


Public Sub Init(ByRef tbl As QTable)
    Set QT = tbl
    Set QT.FGrid = ClassFactory.CreateGrid(Me.GridFrame)
    Set QT.FGrid.Events = Me.GridEvents
    QT.FGrid.name = QT.name
    QT.Render
    Show
End Sub


Private Sub b_Add_Click()
    LocalModule.ShowEditForm QT.ID
End Sub

Private Sub b_Edit_Click()
Dim QR As QDataRow

    If QT.FGrid.SelectedRow = 0 Then
        MsgBox ("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
        Exit Sub
    End If
    
    Set QR = QT.QRows(QT.FGrid.SelectedRow)
    LocalModule.ShowEditForm QT.ID, QR

End Sub

Private Sub b_Delete_Click()


If QT.FGrid.SelectedRow = 0 Then
    MsgBox ("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
    Exit Sub
End If

QT.RemoveRow QT.FGrid.SelectedRow
QT.Render

End Sub

Private Sub b_Save_Click()
    Me.Hide
End Sub
Attribute VB_Name = "Helper"
'Helper Version 1.7

Public Const DebugAnketa As Boolean = False '|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
Public Const SearchMaxResult As Long = 128


'Declare Function CoCreateGuid Lib "ole32" (pguid As TGUID) As Long

#If VBA7 Then    '  Office 2010-2013
    Private Declare PtrSafe Function CoCreateGuid Lib "ole32" (pguid As TGUID) As LongPtr
#Else    '  Office 2003-2007
   Private Declare Function CoCreateGuid Lib "ole32" (pguid As TGUID) As Long
#End If

Type TGUID
    Data1 As Long
    Data2 As Integer
    Data3 As Integer
    Data4(7) As Byte
End Type
 
Public Function GUID() As String
 
Const S_OK As Long = 0
 
Dim GuidPointer As TGUID
Dim strData4 As String
Dim i As Byte
 
strData4 = ""

If CoCreateGuid(GuidPointer) = S_OK Then
    With GuidPointer
        GUID = Hex(.Data1) & "-" & Hex(.Data2) & "-" & Hex(.Data3)
        For i = 0 To 7
            strData4 = strData4 & Hex(.Data4(i))
            If i = 1 Then strData4 = strData4 & "-"
        Next i
    End With
End If
GUID = GUID & strData4
 
End Function

Function AddRow(ByVal ListName As String, ByVal row As Integer) As Integer
Dim cnt As Integer
    
    
    ThisWorkbook.Sheets(ListName).Range("A" + CStr(row)).EntireRow.Insert
    AddRow = row
    
    
End Function

Public Function GetRangeByName(ByVal n As String) As Range
Dim nm As name

Set GetRangeByName = Nothing


On Error Resume Next
Set nm = ThisWorkbook.Names(n)

If nm Is Nothing Then Exit Function

Set GetRangeByName = nm.RefersToRange

End Function

Public Function RangeEqual(ByRef a As Range, ByRef b As Range) As Boolean
RangeEqual = False

    If a Is Nothing Then Exit Function
    If b Is Nothing Then Exit Function
    If a.Worksheet.name <> b.Worksheet.name Then Exit Function
    If a.row <> b.row Or a.Column <> b.Column Then Exit Function
    
    
    RangeEqual = True
    
End Function

Public Function CheckBoxIsSelected(ByVal a As Integer, ByVal b As Integer, ByVal c As Integer) As Boolean
CheckBoxIsSelected = False

If b > a Then
Exit Function
End If

Do While c > a
   c = c / 2
Loop

   a = a - c
If a >= 0 And b = c Then
   CheckBoxIsSelected = True
   Exit Function
Else
Do While a >= b
   c = c / 2
   a = a - c
If a >= 0 And b = c Then
   CheckBoxIsSelected = True
   Exit Function
End If
Loop
End If
  
End Function

Sub CopyToClipboard()
    Dim objClpb As New DataObject
    Dim sStr As String
    sStr = "|fffd||fffd||fffd||fffd||fffd||fffd|"
    objClpb.SetText sStr
    objClpb.PutInClipboard
End Sub

Public Function GetClipboard() As String

    Dim DataObject As Object
    
    GetClipboard = ""
    
    Set DataObject = GetObject("New:{1C3B4210-F441-11CE-B9EA-00AA006B1A69}")
    DataObject.GetFromClipboard
    
    If Not DataObject.GetFormat(format:=1) Then
        Exit Function
    End If
    
    GetClipboard = DataObject.GetText(format:=1)
    
End Function

Public Function Clear_Sheet(ByVal sheetName As String, Optional ByVal SkipHeaderRows As Long = 0)
    
    With ThisWorkbook.Worksheets(sheetName)
        Helper.RemoveRow sheetName, SkipHeaderRows + 1, .rows.Count
        .UsedRange.Clear
        .UsedRange
    End With
    
End Function

Public Sub RemoveRow(ByVal ListName As String, ByVal RowStart As Long, Optional ByVal RowEnd As Long = 0)
Dim rng As String

If RowEnd = 0 Then RowEnd = RowStart

rng = CStr(RowStart) + ":" + CStr(RowEnd)
'ThisWorkbook.Sheets(ListName).Activate
ThisWorkbook.Sheets(ListName).rows(rng).Delete Shift:=xlUp

'    Selection.Delete Shift:=xlUp

End Sub

Public Sub RemoveRows(ByVal Start As Range, ByVal finish As Range)
Dim rng As String
Dim RowStart As Long
Dim RowEnd As Long

RowStart = Start.row
RowEnd = finish.row
If RowEnd - RowStart < 2 Then Exit Sub


rng = CStr(RowStart + 1) + ":" + CStr(RowEnd - 1)
ThisWorkbook.Sheets(Start.Parent.name).rows(rng).Delete Shift:=xlUp

End Sub

Private Sub ProtectWorkbook()
 If Application.Version <> "12.0" Then
    If Not ThisWorkbook.ProtectStructure Then ThisWorkbook.Protect Structure:=True, Windows:=False, Password:=GlobalModule.Password
 End If
End Sub

Private Sub UnProtectWorkbook()
    If ThisWorkbook.ProtectStructure Then ThisWorkbook.UnProtect Password:=GlobalModule.Password
End Sub

Public Sub Protect(Optional ByRef sheet As Worksheet = Nothing)
    If DebugAnketa Then Exit Sub
    
    If Not sheet Is Nothing Then
        On Error Resume Next
        If sheet.name <> GlobalModule.nsi.name And Not sheet.ProtectContents Then sheet.Protect GlobalModule.Password
    Else
        UnProtectWorkbook
        For Each s In ThisWorkbook.Worksheets
            If Not s.ProtectContents Then s.Protect GlobalModule.Password
            'If Len(s.name) > 5 Then
                'If Right(s.name, 4) = "Meta" And s.Visible <> xlSheetVeryHidden Then
                    's.Visible = xlSheetVeryHidden
                'End If
            'End If
        Next
        ProtectWorkbook
    End If
    
End Sub

Public Sub UnProtect(Optional ByRef sheet As Worksheet = Nothing)
    
    If Not sheet Is Nothing Then
        If sheet.ProtectContents Then sheet.UnProtect GlobalModule.Password
    Else
        UnProtectWorkbook
        For Each s In ThisWorkbook.Worksheets
            If s.ProtectContents Then s.UnProtect GlobalModule.Password
        Next
        ProtectWorkbook
    End If
    
End Sub

Public Function SheetExists(ByVal name As String) As Boolean
Dim s As Worksheet

SheetExists = False
For Each s In ThisWorkbook.Worksheets
    If s.name = name Then
        SheetExists = True
        Exit For
    End If
Next
End Function

Public Sub SetInputMessage(ByRef Target As Range, ByVal str As String, Optional ByVal title As String = "")
Dim protected As Boolean

    protected = Target.Worksheet.ProtectContents

    UnProtect Target.Worksheet
    On Error Resume Next
    Target.Validation.InputMessage = str
    On Error Resume Next
    Target.Validation.InputTitle = title
    If protected Then Protect Target.Worksheet
    
End Sub

Public Function RangeExists(ByVal rng As String) As Boolean
RangeExists = Not GetRangeByName(rng) Is Nothing
End Function


Public Function GetShape(ByVal sheet As Worksheet, ByVal shapeName As String) As Shape
Set GetShape = Nothing
On Error Resume Next
Set GetShape = sheet.shapes(shapeName)
End Function

Public Function GetShapes(ByVal sheet As Worksheet, ByVal groupName As String) As Collection
Dim shp As Shape
Dim objType As String
Dim obj As Object


Set GetShapes = New Collection

For Each shp In sheet.shapes
    
    Set obj = shp.DrawingObject.Object
    objType = TypeName(obj)
    
    If objType = "OptionButton" Or objType = "CheckBox" Then
        If obj.groupName = groupName Then GetShapes.Add shp
    End If
    
Next

End Function

Function ColumnLitter(ByVal col As Long) As String
    On Error Resume Next
    ColumnLitter = Application.ConvertFormula("r1c" & col, xlR1C1, xlA1)
    ColumnLitter = Replace(Replace(Mid(ColumnLitter, 2), "$", ""), "1", "")
End Function


Public Function GetDecimalSeparator()

    GetDecimalSeparator = Mid(format(1000, "#,##0.00"), 6, 1)

End Function

'|fffd||fffd| |fffd||fffd||fffd||fffd| String, |fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Function FractionPart(ByVal d As String) As String
Dim ind As Integer

    ind = InStr(d, GetDecimalSeparator)
    If ind > 1 Then
        FractionPart = Right(d, Len(d) - ind)
    Else
        FractionPart = ""
    End If
    
End Function
Public Sub Add_Fake_Question(Q_Fake As Question, Q_Fake_ID As String)
Dim R As Range
    GlobalModule.Questions.Add Q_Fake, Q_Fake.NameID
    GlobalModule.QuestionsIds.Add Q_Fake, Q_Fake_ID
    
    If Q_Fake.QType = "HEADER" Then
        Set R = Helper.GetRangeByName(Q_Fake.NameID)
            If Not R Is Nothing Then
                Set Q_Fake.Address = R
                Q_Fake.Error = ""
                Q_Fake.SetFormat R
                Q_Fake.SetValidator
                If Q_Fake.IsDictionary Then
                   Dictionaries(Q_Fake.DictNameID).SetValidation R
                End If
                Q_Fake.SetDescription R
            End If
        End If
    
End Sub


Public Function IsNumber(ByVal value As String) As Boolean
IsNumber = True
Dim s As Currency


 If Len(value) = 0 Then Exit Function
 
    If Not IsNumeric(value) Then
        IsNumber = False
        Exit Function
    End If
    
    On Error GoTo err
    s = CCur(value)
    Exit Function
err:
    IsNumber = False
    
End Function

Public Function search_same_symbols(val As String, smbl As String, n_of_same As Integer) As Boolean
Dim i As Long
Dim j As Long
Dim n As Integer
For i = 1 To Len(val)
  If InStr(1, Mid$(val, i, 1), smbl) Then
    n = n + 1
    If n < n_of_same Then
    j = i
    End If
    If j = i - 1 Then
    search_same_symbols = True
    Exit Function
    End If
  End If
Next i
End Function

Public Function HasValidation(ByRef R As Range) As Boolean
HasValidation = False
Dim s As String


On Error GoTo Vadd
s = R.Validation.InputMessage

HasValidation = True
Exit Function

Vadd:
HasValidation = False
End Function

Public Sub AddComment(ByVal rng As Range, ByVal str As String, Optional Color As Long = -1)
    Dim protected As Boolean
    Dim w As Integer
    Dim h As Integer
    Dim koef As Single
    Dim rows As Integer
    Dim charInRow As Integer
    
    
      '''' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| ''''
    charInRow = 25
    koef = 6
    rows = CInt(Len(str) / charInRow)
    h = 17 * rows
    w = IIf(rows > 1, 25, Len(str)) * koef
    
    
    
    With rng
    protected = .Worksheet.ProtectContents
    
        Helper.UnProtect .Worksheet
        .AddComment
        .Comment.Visible = False
        .Comment.Text Text:=str
        .Comment.Shape.Width = w
        .Comment.Shape.Height = h
        .Comment.Shape.Locked = True
    
        
        '.Comment.Shape.ScaleWidth 2, msoFalse, msoScaleFromTopLeft
        '.Comment.Shape.ScaleHeight 2, msoFalse, msoScaleFromTopLeft
        If Color <> -1 Then .Interior.Color = Color
        If protected Then Helper.Protect .Worksheet
    End With
End Sub

Public Sub ClearComment(ByVal rng As Range, Optional Color As Long = -1)
Dim protected As Boolean

protected = rng.Worksheet.ProtectContents


    With rng
        Helper.UnProtect .Worksheet
        .ClearComments
        If Color <> -1 Then
            .Interior.Pattern = xlSolid
            .Interior.Color = Color
        Else
            .Interior.Pattern = xlNone
        End If
        If protected Then Helper.Protect .Worksheet
    End With
End Sub


Public Function Spliter(str As String, delimiter As String) As Collection
Dim tmp As String
Dim chr As String

Set Spliter = New Collection
chr = ""
For i = 1 To Len(str)
    tmp = Mid(str, i, 1)
    If tmp = delimiter Then
        Spliter.Add chr
        chr = ""
    Else
        chr = chr + tmp
    End If
Next

Spliter.Add chr 'last

End Function


Public Function lastRow(ByVal sheetName As String, Optional ByVal col As Integer = 1) As Long

With ThisWorkbook.Worksheets(sheetName)

        lastRow = .Cells(.rows.Count, col).End(xlUp).row
        Do While lastRow > 1
        If .Cells(lastRow, col) <> "" Then Exit Function
            lastRow = lastRow - 1
        Loop
End With
    
    
End Function


Public Function ContainsKey(col As Collection, ByVal key As String) As Boolean
Dim O As Object

ContainsKey = True
On Error Resume Next
Set O = col(key)
If O Is Nothing Then ContainsKey = False

End Function

Public Function IndexOf(col As Collection, ByVal item As Variant) As Long
    Dim i As Integer
    If col Is Nothing Then Set col = New Collection
    
    For i = 1 To col.Count
        If col(i) Is item Then
            IndexOf = i
            Exit Function
        End If
    Next
End Function

Public Sub Sort(ByVal sheet As String, ByVal startRow As Long, ByVal endRow As Long, ByVal startCol As String, ByVal endCol As String, ByVal sortCol As String)
       
    ThisWorkbook.Worksheets(sheet).Sort.SortFields.Clear
    ThisWorkbook.Worksheets(sheet).Sort.SortFields.Add key:=Range(sortCol & CStr(startRow) & ":" & sortCol & CStr(endRow)), _
        SortOn:=xlSortOnValues, Order:=xlAscending, DataOption:=xlSortNormal
    With ThisWorkbook.Worksheets(sheet).Sort
        .SetRange Range(startCol & CStr(startRow) & ":" & endCol & CStr(endRow))
        .header = xlGuess
        .MatchCase = False
        .Orientation = xlTopToBottom
        .SortMethod = xlPinYin
        .Apply
    End With
    
End Sub

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Function ContainsRange(ByVal Container As Range, ByVal R As Range) As Boolean
    ContainsRange = Container.Worksheet.name = R.Worksheet.name And IIf(Container.row <= R.row And Container.row + Container.rows.Count > R.row And Container.Column <= R.Column And Container.Column + Container.Columns.Count > R.Column, True, False)
End Function

Public Sub HeaderStyle(ByRef rng As Range)
    rng.Interior.Color = RGB(196, 196, 196)
    rng.HorizontalAlignment = xlCenter
End Sub
Public Sub GridStyle(ByRef rng As Range, Optional ByVal backgroundIgnore As Boolean = False)


    'RNG.Select
    If Not backgroundIgnore Then rng.Interior.Color = RGB(255, 255, 255)
    rng.Borders(xlDiagonalDown).LineStyle = xlNone
    rng.Borders(xlDiagonalUp).LineStyle = xlNone
     With rng.Borders(xlEdgeLeft)
        .LineStyle = xlContinuous
        .Weight = xlThin
        .ColorIndex = xlAutomatic
    End With
    With rng.Borders(xlEdgeTop)
        .LineStyle = xlContinuous
        .Weight = xlThin
        .ColorIndex = xlAutomatic
    End With
    With rng.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .Weight = xlThin
        .ColorIndex = xlAutomatic
    End With
    With rng.Borders(xlEdgeRight)
        .LineStyle = xlContinuous
        .Weight = xlThin
        .ColorIndex = xlAutomatic
    End With
    With rng.Borders(xlInsideVertical)
        .LineStyle = xlContinuous
        .Weight = xlThin
        .ColorIndex = xlAutomatic
    End With
    With rng.Borders(xlInsideHorizontal)
        .LineStyle = xlContinuous
        .Weight = xlThin
        .ColorIndex = xlAutomatic
    End With
    'With Selection.Interior
    '    .ColorIndex = 15
    '    .Pattern = xlSolid
    'End With
    'GlobalModule.Anketa.Range("A1").Select
    
End Sub


Public Sub CleanTable(ByVal sheet As Worksheet, ByVal tName As String)
    Dim s As String
    Dim e As String
    
    s = tName + "_START"
    e = tName + "_END"
    RemoveRows sheet.Range(s), sheet.Range(e)
    
   
End Sub

Public Function GetRangeName(ByVal R As Long, ByVal c As Long) As String
GetRangeName = Cells(R, c).Address
End Function

Public Function StringToDate(s As String, Optional separator As String = ".") As Date
Dim col As Collection

'format |fffd||fffd||fffd||fffd| dd.MM.yyyy

StringToDate = Empty
Set col = Spliter(s, separator)
If col.Count <> 3 Then Exit Function


On Error Resume Next
StringToDate = DateSerial(CInt(col(3)), CInt(col(2)), CInt(col(1)))




    
End Function



Public Function DateToString(dt As Date) As String
Dim sd As String
Dim sm As String


sd = CStr(Day(dt))
sm = CStr(Month(dt))
If Len(sd) < 2 Then sd = "0" & sd
If Len(sm) < 2 Then sm = "0" & sm
DateToString = sd & "." & sm & "." & CStr(Year(dt))

End Function

Public Sub ScreenRefresh(ByVal b As Boolean)
    If b = False Then
        On Error GoTo err
        Application.ScreenUpdating = False
        Application.EnableEvents = False
'        Application.Cursor = xlWait
    Else
        Application.EnableEvents = True
        Application.ScreenUpdating = True
        Application.Cursor = xlDefault
    End If
    
err:
    
End Sub

Public Function DaysOfMonth(dDate As Date) As Integer

 DaysOfMonth = DateDiff("d", dDate, DateAdd("m", 1, dDate))

End Function


'|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| a/b
Public Function DivRem(ByVal a As Double, ByVal b As Double) As Double
    Dim c As Double
    
    c = Fix(a / b)
    c = a - c * b
    DivRem = c

End Function


Public Sub SetDropDown(ByRef rng As Range, ByRef source As Range)

 rng.NumberFormat = "@"
    With rng.Validation
        .Delete
        .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Operator:= _
        xlBetween, Formula1:="=" & source.Worksheet.name & "!" & source.Address
        .IgnoreBlank = True
        .InCellDropdown = True
        .InputTitle = ""
        .ErrorTitle = "|fffd||fffd||fffd||fffd||fffd||fffd|"
        .InputMessage = ""
        .ErrorMessage = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        .ShowInput = False
        .ShowError = True
    End With

End Sub

Public Function Search(ByVal sheetName As String, ByVal condition As Collection, ByVal first As Boolean, Optional ByVal skipRows As Long = 0) As Collection
Dim Result As Range
Dim firstRange As String
Dim row As Long
Dim major As NSIColumn
Dim minor As NSIColumn
Dim val As String
Dim Accept As Boolean
Dim totalAdded As Long

totalAdded = 0

Set Search = New Collection
Set major = condition(1)

On Error GoTo err
Set Result = ThisWorkbook.Worksheets(sheetName).Columns(major.col + ":" + major.col).Find(What:=major.value, LookIn:=xlValues)
 If Not Result Is Nothing Then
        firstRange = Result.Address
        
 Do
 
 If Result Is Nothing Then Exit Do
 
 row = Result.row
 Accept = True
 '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| major |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
 If major.FullEqual = True Then
    If LCase(CStr(Result.value)) <> LCase(major.value) Then Accept = False
 End If
 
 If row <= skipRows Then Accept = False '|fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
 
 
 
 '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| minor
 If Accept = True Then
 
    If condition.Count > 1 Then
    For i = 2 To condition.Count
    Set minor = condition(i)
    
    val = ThisWorkbook.Worksheets(sheetName).Range(minor.col + CStr(row)).value
    If minor.FullEqual = True Then
        If LCase(val) <> LCase(minor.value) Then Accept = False
    Else
        If InStr(LCase(val), LCase(minor.value)) = 0 Then Accept = False
    End If
    
    If Accept = False Then Exit For
    
    Next
     
    End If
 End If

 If Accept Then
    Search.Add Result.row
    totalAdded = totalAdded + 1
 End If
    
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
 If totalAdded >= SearchMaxResult Then
     MsgBox ("|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" & chr(10) & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|!")
    Exit Do
 End If
 
 '|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
 If Accept And first Then Exit Do
 
 
 Set Result = ThisWorkbook.Worksheets(sheetName).Columns(major.col + ":" + major.col).FindNext(Result)
 
 If Result.Address = firstRange Then Exit Do
 
 Loop
 End If
 
err:
 

 
End Function


Public Function SimpleSearch(ByVal sheetName As String, ByVal col As String, ByVal val As String, Optional ByVal FullEqual As Boolean = True, Optional ByVal first As Boolean = True, Optional ByVal skipRows As Long = 0) As Collection
Dim Result As Range
Dim firstRange As String
Dim row As Long
Dim Accept As Boolean
Dim totalAdded As Long

totalAdded = 0

Set SimpleSearch = New Collection


Set Result = ThisWorkbook.Worksheets(sheetName).Columns(col + ":" + col).Find(What:=val, LookIn:=xlValues)
 If Not Result Is Nothing Then
        firstRange = Result.Address
        
 Do
 
 If Result Is Nothing Then Exit Do
 
 row = Result.row
 Accept = True
 '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| major |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
 If FullEqual = True Then
    If LCase(CStr(Result.value)) <> LCase(val) Then Accept = False
 End If
 
 If row <= skipRows Then Accept = False '|fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
 
 
 
 
 If Accept Then
    SimpleSearch.Add Result.row
    totalAdded = totalAdded + 1
 End If
    

 
 '|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
 If Accept And first Then Exit Do
 
 
 Set Result = ThisWorkbook.Worksheets(sheetName).Columns(col + ":" + col).FindNext(Result)
 
 If Result.Address = firstRange Then Exit Do
 
 Loop
 End If
 

End Function


Sub UndoLastAction()

    With Application
        .EnableEvents = False
        .Undo
        .EnableEvents = True
    End With

End Sub

Public Sub ExportVB()
Dim vb As Object
Dim i As Integer
Dim ext As String

With ThisWorkbook.VBProject
For i = 1 To .VBComponents.Count
ext = ""
If .VBComponents(i).Type = vbext_ct_ClassModule Then ext = ".cls"
If .VBComponents(i).Type = vbext_ct_MSForm Then ext = ".frm"
If .VBComponents(i).Type = vbext_ct_StdModule Then ext = ".bas"
If ext <> "" Then .VBComponents(i).Export ("c:\work\modules\" & .VBComponents(i).name & ext)
Next

End With


End Sub


Attribute VB_Name = "LocalClassFactory"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'Public Function Create<EntityName>(Optional ByRef QR As QDataRow = Nothing) As EntityClass
'Dim QT As QTable
'    If QR Is Nothing Then
'        Set QT = GlobalModule.QTables("USERTABLE")
'        Set QR = QT.NewRow()
'    End If
'    Set CreateUserClass = New UserClass
'    Set CreateUserClass.QR = QR
'End Function

Attribute VB_Name = "LocalModule"
'|fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
Public Const PeriodNameCase As String = "IMIN"


Public Sub LocalInit()
Dim QT As QTable
Dim rng As Range
Dim l_nsi As NSIClass
Dim cnsi As NSIColumn
Dim i As Integer
Dim QR As QDataRow
Dim m As Integer
Dim y As Integer


'FIELDS
Helper.UnProtect
'ko
ThisWorkbook.Worksheets("|fffd||fffd||fffd||fffd||fffd||fffd||fffd|").Range("KONAME").value = GlobalModule.SurveyMeta("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|.|fffd||fffd||fffd||fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|").value
ThisWorkbook.Worksheets("|fffd||fffd||fffd||fffd||fffd||fffd||fffd|").Range("KONUMBER").value = GlobalModule.SurveyMeta("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|.|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||fffd|_|fffd||fffd|").value

'ondate
m = CInt(SurveyMeta("PERIODVALUE").value) + 1
y = CInt(SurveyMeta("PERIODYEAR").value)
If m = 13 Then
    m = 1
    y = y + 1
End If

ThisWorkbook.Worksheets("|fffd||fffd||fffd||fffd||fffd||fffd||fffd|").Range("ONDATE").value = "01." & IIf(m < 10, "0" & CStr(m), CStr(m)) & "." & CStr(y)



'NSI


'QT
Set QT = GlobalModule.QTables("IPOTEKA")
QT.HeaderVisible = False
QT.RowNumVisible = False
QT.InsertAvailable = False
QT.CopyRowAvailable = False
QT.IsDynamic = False
QT.IsStatic = True

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd| 17 |fffd||fffd||fffd||fffd||fffd|
For i = 1 To 16
    Set QR = QT.NewRow
    QR.RowID = i
    QT.QRows.Add QR
Next






End Sub

Public Sub ShowEditForm(ByVal NameID As String, Optional ByRef QR As QDataRow = Nothing)



End Sub


Public Sub Submit()
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| submit
    Check
End Sub


'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
Public Function Check() As Boolean
Dim QR As QDataRow
Dim QT As QTable
Dim Q As Question
Dim total1 As Long
Dim total2 As Long
Dim total3 As Long
Dim row1 As Long
Dim row2 As Long
Dim row3 As Long




    Check = True
    
    Helper.UnProtect ThisWorkbook.Worksheets("|fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
    
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
   Set QT = GlobalModule.QTables("IPOTEKA")
   
   ' 1 >= 2+3
   If CLng(QT.QRows(1).Data(2)) < CLng(QT.QRows(2).Data(2)) + CLng(QT.QRows(3).Data(2)) Then
        Set Q = GlobalModule.Questions("Column2")
        Q.Error = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| 2, 3 |fffd||fffd||fffd||fffd||fffd| 4 |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| 1 |fffd||fffd||fffd||fffd||fffd| 4. |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| 2, 3 |fffd||fffd||fffd||fffd||fffd| 4"
        Q.SetValidator 1
        Errors.AddError Q, 1
        
   End If
   
   If CLng(QT.QRows(1).Data(3)) < CLng(QT.QRows(2).Data(3)) + CLng(QT.QRows(3).Data(3)) Then
        Set Q = GlobalModule.Questions("Column3")
        Q.Error = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| 2, 3 |fffd||fffd||fffd||fffd||fffd| 5 |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| 1 |fffd||fffd||fffd||fffd||fffd| 5. |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| 2, 3 |fffd||fffd||fffd||fffd||fffd| 5"
        Q.SetValidator 1
        Errors.AddError Q, 1
   End If
   
   If CLng(QT.QRows(1).Data(4)) < CLng(QT.QRows(2).Data(4)) + CLng(QT.QRows(3).Data(4)) Then
        Set Q = GlobalModule.Questions("Column4")
        Q.Error = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| 2, 3 |fffd||fffd||fffd||fffd||fffd| 6 |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| 1 |fffd||fffd||fffd||fffd||fffd| 6. |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| 2, 3 |fffd||fffd||fffd||fffd||fffd| 6"
        Q.SetValidator 1
        Errors.AddError Q, 1
   End If
   
    ' 3<= MAX(4+5+6+7+8+9+10+11+12+13+14+15+16)
    total1 = 0
    total2 = 0
    total3 = 0
    row1 = 0
    row2 = 0
    row3 = 0
    For i = 4 To 16
    
        If total1 < CLng(QT.QRows(i).Data(2)) Then
            total1 = CLng(QT.QRows(i).Data(2))
            row1 = i
        End If
        
         If total2 < CLng(QT.QRows(i).Data(3)) Then
            total2 = CLng(QT.QRows(i).Data(3))
            row2 = i
        End If
        
        
        If total3 < CLng(QT.QRows(i).Data(4)) Then
            total3 = CLng(QT.QRows(i).Data(4))
            row3 = i
        End If
        
        
    Next
    
   If CLng(QT.QRows(3).Data(2)) < total1 Then
        Set Q = GlobalModule.Questions("Column2")
        Q.Error = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| 4-16 |fffd||fffd||fffd||fffd||fffd| 4 |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| 3 |fffd||fffd||fffd||fffd||fffd| 4. |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| 4-16 |fffd||fffd||fffd||fffd||fffd| 4"
        Q.SetValidator 3
        Errors.AddError Q, 3
        Helper.AddComment ThisWorkbook.Worksheets("|fffd||fffd||fffd||fffd||fffd||fffd||fffd|").Range("E" & CStr(row1 + QT.RowStart)), Q.Error, RGB(255, 127, 127)
        
   End If
   
    If CLng(QT.QRows(3).Data(3)) < total2 Then
        Set Q = GlobalModule.Questions("Column3")
        Q.Error = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| 4-16 |fffd||fffd||fffd||fffd||fffd| 5 |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| 3 |fffd||fffd||fffd||fffd||fffd| 5. |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| 4-16 |fffd||fffd||fffd||fffd||fffd| 5"
        Q.SetValidator 3
        Errors.AddError Q, 3
        Helper.AddComment ThisWorkbook.Worksheets("|fffd||fffd||fffd||fffd||fffd||fffd||fffd|").Range("F" & CStr(row2 + QT.RowStart)), Q.Error, RGB(255, 127, 127)
        
   End If
   
    If CLng(QT.QRows(3).Data(4)) < total3 Then
        Set Q = GlobalModule.Questions("Column4")
        Q.Error = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| 4-16 |fffd||fffd||fffd||fffd||fffd| 6 |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| 3 |fffd||fffd||fffd||fffd||fffd| 6. |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| 4-16 |fffd||fffd||fffd||fffd||fffd| 6"
        Q.SetValidator 3
        Errors.AddError Q, 3
        Helper.AddComment ThisWorkbook.Worksheets("|fffd||fffd||fffd||fffd||fffd||fffd||fffd|").Range("G" & CStr(row3 + QT.RowStart)), Q.Error, RGB(255, 127, 127)
        
   End If
   
   ' 3<= 4+5+6+7+8+9+10+11+12+13+14+15+16
   
    total1 = 0
    total2 = 0
    total3 = 0
    For i = 4 To 16
        total1 = total1 + CLng(QT.QRows(i).Data(2))
        total2 = total2 + CLng(QT.QRows(i).Data(3))
        total3 = total3 + CLng(QT.QRows(i).Data(4))
    Next
    
   If CLng(QT.QRows(3).Data(2)) > total1 Then
        Set Q = GlobalModule.Questions("Column2")
        Q.Error = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| 4-16 |fffd||fffd||fffd||fffd||fffd| 4 |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| 3 |fffd||fffd||fffd||fffd||fffd| 4. |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| 4-16 |fffd||fffd||fffd||fffd||fffd| 4"
        Q.SetValidator 3
        Errors.AddError Q, 3
   End If
   
    If CLng(QT.QRows(3).Data(3)) > total2 Then
        Set Q = GlobalModule.Questions("Column3")
        Q.Error = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| 4-16 |fffd||fffd||fffd||fffd||fffd| 5 |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| 3 |fffd||fffd||fffd||fffd||fffd| 5. |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| 4-16 |fffd||fffd||fffd||fffd||fffd| 5"
        Q.SetValidator 3
        Errors.AddError Q, 3
   End If
   
    If CLng(QT.QRows(3).Data(4)) > total3 Then
        Set Q = GlobalModule.Questions("Column4")
        Q.Error = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| 4-16 |fffd||fffd||fffd||fffd||fffd| 6 |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| 3 |fffd||fffd||fffd||fffd||fffd| 6. |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| 4-16 |fffd||fffd||fffd||fffd||fffd| 6"
        Q.SetValidator 3
        Errors.AddError Q, 3
   End If
   
   Helper.Protect ThisWorkbook.Worksheets("|fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
    
End Function

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
Public Sub Worksheet_Change(ByVal Target As Range)

End Sub

Public Sub WorksheetSelection_Change(ByVal Target As Range)
   
End Sub
Attribute VB_Name = "LogicControl"
'Logic Control

Public Sub Check(ByRef Q As Question, Optional RowNum As Long = 0)
Dim iValue As Currency
Dim dValue As Double
Dim valid As Boolean
Dim l_nsi As NSIClass
Dim l_row As Long



'Exlude


If Len(Q.value) = 0 Then Exit Sub
If Not Q.Validated Then Exit Sub

Select Case Q.NameID
'''''''''''''''''''''''''''' HEADER    ''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Case "FIOUser"
    If Not LogicControlHelper.IsFIO(Q.value) Then
        Q.Error = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|. |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|: |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|  |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd|-|fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd|: |fffd||fffd||fffd||fffd||fffd| / |fffd||fffd||fffd||fffd||fffd| / |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    End If
    
Case "Phone"
       If Not LogicControlHelper.IsPhone(Q.value) Then
           Q.Error = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|. |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|: |fffd||fffd||fffd||fffd||fffd| 0-9 / |fffd||fffd||fffd||fffd||fffd| / |fffd||fffd||fffd||fffd||fffd||fffd| / |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
       End If
  

    Case Else:
        'do nothing
        
End Select

End Sub

Public Sub CheckRow(ByVal QR As QDataRow)
Dim v As String
Dim Q As Question
Dim rows As Collection
Dim index As Long


    
    Select Case QR.QT.ID
    
        Case "IPOTEKA":
         
                
    End Select
   
   
  
    
End Sub


Attribute VB_Name = "LogicControlHelper"
Public Function IsFIO(ByVal val As String) As Boolean
Dim i As Integer
Dim c As String

IsFIO = True

For i = 1 To Len(val)
    c = Mid(val, i, 1)
    
    Select Case UCase(c)
        Case "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|", "|fffd|"
        Case " ", "-", "."
        Case Else
            IsFIO = False
    End Select
    
Next


End Function

Public Function IsPhone(ByVal val As String) As Boolean
Dim i As Integer

IsPhone = True

    For i = 1 To Len(val)
        Select Case Mid(val, i, 1)
            Case "1", "2", "3", "4", "5", "6", "7", "8", "9", "0", "(", ")", "-", " ", "+"
                'it's ok
            Case Else
                IsPhone = False
                Exit Function
        End Select
    Next
End Function

Public Function IsWeb(ByVal val As String) As Boolean
    IsWeb = True
    If Len(val) < 4 Or Len(val) - InStrRev(val, ".") < 2 Or InStrRev(val, ".") < 2 Then
        IsWeb = False
    End If
End Function

Public Function IsEmail(ByVal val As String) As Boolean
    IsEmail = True
    If InStr(val, "@") > 1 And InStr(val, "@") = InStrRev(val, "@") And Len(val) >= 6 Then
        If Not IsWeb(Mid(val, InStr(val, "@") + 1, Len(val) - InStr(val, "@"))) Then
            IsEmail = False
        End If
    Else
        IsEmail = False
    End If
End Function



Public Function IsGreaterOrEqualZero(ByVal val As String) As Boolean
Dim d As Double
    IsGreaterOrEqualZero = True
    
    val = Trim(val)
    
    On Error GoTo err
    d = CDec(val)
    If d < 0 Or Left(val, 1) = "-" Then GoTo err
    
    Exit Function
    
err:
    IsGreaterOrEqualZero = False
End Function


Public Function IsGreaterZero(ByVal val As String) As Boolean
Dim d As Double
    IsGreaterZero = True
    
    val = Trim(val)
    
    On Error GoTo err
    d = CDec(val)
    If d <= 0 Then GoTo err
    
    Exit Function
    
err:
    IsGreaterZero = False
End Function


Public Function IsLessOrEqualZero(ByVal val As String) As Boolean
Dim d As Double
    IsLessOrEqualZero = True
    
    val = Trim(val)
    
    On Error GoTo err
    d = CDec(val)
    If d > 0 Or Left(val, 1) <> "-" Then GoTo err
    
    Exit Function
    
err:
    IsLessOrEqualZero = False
End Function

Public Function IsLessZero(ByVal val As String) As Boolean
Dim d As Double
    IsLessZero = True
    
    val = Trim(val)
    
    On Error GoTo err
    d = CDec(val)
    If d >= 0 Then GoTo err
    
    Exit Function
    
err:
    IsLessZero = False
End Function



Public Function IsOGRN(ByVal val As String) As Boolean
'1. |fffd||fffd||fffd||fffd||fffd||fffd||fffd| 12-|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| (|fffd| 1-|fffd| |fffd||fffd| 12-|fffd| |fffd||fffd||fffd||fffd||fffd|).
'2. |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| 11.
'3. |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| 13-|fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|. |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|.

Dim d1_12 As Double
Dim d As Double
Dim d13 As Double
Dim index As Double

    IsOGRN = True
    If Not IsDigital(val) Or Len(val) <> 13 Then
        IsOGRN = False
        Exit Function
    End If
    
     d13 = CDec(Right(val, 1))
    d1_12 = CDec(Left(val, 12))
    
    d = Helper.DivRem(d1_12, 11)
    If d > 9 Then d = 0
    
    If d <> d13 Then IsOGRN = False
End Function



Public Function IsINN(ByVal val As String) As Boolean
'2. |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: (2,4,10,3,5,9,4,6,8,0)
'3. |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| 11
'4. |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| 9, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| 10
'5. |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|. |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|.
Dim sum As Double
Dim arr(1 To 10) As Double
Dim del As Double

IsINN = True


            If Not IsDigital(val) Or Len(val) <> 10 Then
                IsINN = False
                Exit Function
            End If
            
            sum = 0
            arr(1) = 2
            arr(2) = 4
            arr(3) = 10
            arr(4) = 3
            arr(5) = 5
            arr(6) = 9
            arr(7) = 4
            arr(8) = 6
            arr(9) = 8
            arr(10) = 0
            
               For i = 1 To 9
                    sum = sum + CDec(Mid(val, i, 1)) * arr(i)
               Next
               
               del = Helper.DivRem(sum, 11)
                If del > 9 Then del = 0
                    
                IsINN = del = CDec(Right(val, 1))

End Function


Public Function IsOKPO(ByVal val As String) As Boolean
'1. |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| 1 |fffd||fffd| 10. |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| 10, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|.
'2. |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|.
'3. |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd|11|fffd|.
'4. |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| 0 |fffd||fffd| 9.
'5. |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd| 10, |fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| (3, 4, 5,...).
'6. |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| 10, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd|0|fffd|.

Dim sum1 As Double
Dim sum2 As Double
Dim arr1(1 To 10) As Double
Dim arr2(1 To 10) As Double
Dim d As Double

Dim del1 As Double
Dim del2 As Double

IsOKPO = True


            If Not IsDigital(val) Or (Len(val) <> 8 And Len(val) <> 10) Then
                IsOKPO = False
                Exit Function
            End If
            

            
            For i = 1 To 10
                arr1(i) = i
                d = i + 2
                If d > 10 Then d = d - 10
                arr2(i) = d
            Next

            d = CDec(Right(val, 1))
                
                For i = 1 To Len(val) - 1
                    sum1 = sum1 + CDec(Mid(val, i, 1)) * arr1(i)
                Next

                
                del1 = Helper.DivRem(sum1, 11)

                If del1 < 10 Then
                    IsOKPO = del1 = d
                    Exit Function
                End If


                For i = 1 To Len(val) - 1
                    sum2 = sum2 + CDec(Mid(val, i, 1)) * arr2(i)
                Next

                del2 = Helper.DivRem(sum2, 11)

                If del2 = 10 Then del2 = 0
                IsOKPO = del2 = d

End Function

Public Function IsDigital(ByVal val As String) As Boolean
IsDigital = True
 For i = 1 To Len(val)
    If Not IsNumeric(Mid(val, i, 1)) Then
        IsDigital = False
        Exit Function
    End If
 Next

End Function
Public Function IsNoNumbers(ByVal val As String) As Boolean
 IsNoNumbers = True
 
 
 For i = 1 To Len(val)
    If IsNumeric(Mid(val, i, 1)) Then
        IsNoNumbers = False
        Exit Function
    End If
 Next
 
          
End Function


Public Function IsISIN(ByVal val As String) As String
'Convert any letters to numbers:
'A = 10, G = 16, U = 30, V = 31, X = 33, Z = 35. AU0000XVGZA -> 10 30 0000 33 31 16 35 10.
'Collect odd and even characters:
'103000003331163510 = (1, 3, 0, 0, 3, 3, 1, 3, 1), (0, 0, 0, 0, 3, 1, 6, 5, 0)
'Multiply the group containing the rightmost character (which is the SECOND group) by 2:
'(0, 0, 0, 0, 6, 2, 12, 10, 0)
'Add up the individual digits:
'(1 + 3 + 0 + 0 + 3 + 3 + 1 + 3 + 1) + (0 + 0 + 0 + 0 + 6 + 2 + (1 + 2) + (1 + 0) + 0) = 27
'Take the 10s modulus of the sum:
'27 mod 10 = 7
'Subtract from 10:
'10 - 7 = 3
'Take the 10s modulus of the result (this final step is important in the instance where the modulus of the sum is 0, as the resulting check digit would be 10).
'3 mod 10 = 3
'So the ISIN check digit is three.

Dim first() As Integer
Dim second() As Integer

Dim i As Integer
Dim c As String
Dim a As Integer
Dim arrLen As Integer
Dim odd As Boolean
Dim sumN As Integer
Dim i12 As Integer
Dim err As String


IsISIN = ""

If Len(val) <> 12 Then
    IsISIN = "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| ISIN, |fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| 12 |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!"
    Exit Function
End If

If Not IsNumeric(Right(val, 1)) Then
    IsISIN = "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| ISIN, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|!"
    Exit Function
End If


i12 = CInt(Right(val, 1))

err = ""
For i = 1 To 11
    c = Mid(val, i, 1)
    If Not IsNumeric(c) Then
        a = Asc(c)
        
        If Not ((a >= 65 And a <= 90) Or (a >= 97 And a <= 122)) Then
            err = err + c + " "
        End If
    End If
Next

If Len(err) > 0 Then
    IsISIN = "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| ISIN, |fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " + err
    Exit Function
End If





odd = True

 For i = 1 To 11
    c = Mid(val, i, 1)
    If Not IsNumeric(c) Then
        a = Asc(UCase(c)) - 55
    Else
        a = CInt(c)
    End If
    
   
    
    If a >= 10 Then
        
        
        arrLen = 0
        On Error Resume Next
        arrLen = UBound(first)
        arrLen = arrLen + 1
        ReDim Preserve first(arrLen)
    
        
        arrLen = 0
        On Error Resume Next
        arrLen = UBound(second)
        arrLen = arrLen + 1
        ReDim Preserve second(arrLen)
        
        If odd Then
            first(UBound(first)) = Fix(a / 10)
            odd = False
        Else
            second(UBound(second)) = Fix(a / 10)
            odd = True
        End If
        
        If odd Then
            first(UBound(first)) = Helper.DivRem(a, 10)
            odd = False
        Else
            second(UBound(second)) = Helper.DivRem(a, 10)
            odd = True
        End If
      
            
    Else
        If odd Then
                arrLen = 0
                On Error Resume Next
                arrLen = UBound(first)
                arrLen = arrLen + 1
                ReDim Preserve first(arrLen)
            first(UBound(first)) = a
            odd = False
        Else
                arrLen = 0
                On Error Resume Next
                arrLen = UBound(second)
                arrLen = arrLen + 1
                ReDim Preserve second(arrLen)
            second(UBound(second)) = a
            odd = True
        End If
    End If
Next
    
    
    
    If Not odd Then
        For i = 1 To UBound(first)
            first(i) = first(i) * 2
        Next
    Else
        For i = 1 To UBound(second)
            second(i) = second(i) * 2
        Next
    End If
    
    sumN = 0
    For i = 1 To UBound(first)
        a = first(i)
        If a > 9 Then
            sumN = sumN + Fix(a / 10)
            sumN = sumN + Helper.DivRem(a, 10)
        Else
            sumN = sumN + a
        End If
    Next
    
    For i = 1 To UBound(second)
        a = second(i)
        If a > 9 Then
            sumN = sumN + Fix(a / 10)
            sumN = sumN + Helper.DivRem(a, 10)
        Else
            sumN = sumN + a
        End If
    Next
    
    sumN = Helper.DivRem(sumN, 10)
    sumN = 10 - sumN
    sumN = Helper.DivRem(sumN, 10)
    
    If sumN <> i12 Then
            IsISIN = "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| ISIN, |fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|. |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|! "
    End If
    
    
End Function

Public Function IsLEI(ByVal val As String) As String
Dim err As String
Dim i As Integer
Dim a As Integer
Dim m As Integer
Dim Ascii(20) As Integer

IsLEI = ""

If Len(val) <> 20 Then
    IsLEI = "|fffd||fffd||fffd| LEI |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| 20 |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!"
    Exit Function
End If


err = ""
For i = 1 To 20
    c = Mid(val, i, 1)
    If Not IsNumeric(c) Then
        a = Asc(c)
        
        If Not ((a >= 65 And a <= 90) Or (a >= 97 And a <= 122)) Then
            err = err + c + " "
        End If
        Ascii(i) = a - 55
    Else
        Ascii(i) = CInt(c)
    End If
Next

If Len(err) > 0 Then
    IsLEI = "|fffd||fffd||fffd| LEI |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " + err
    Exit Function
End If

m = 0
For i = 1 To 20
    a = Ascii(i)
    If a < 10 Then
        m = Helper.DivRem((m * 10 + a), 97)
    Else
        m = Helper.DivRem((m * 100 + a), 97)
    End If
Next


If m <> 1 Then
    IsLEI = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|. |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|."
    Exit Function
End If


End Function



Attribute VB_Name = "NSIClass"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'NSIClass VERSION 1.6
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| ClassFactory

Option Explicit
Public NameNSI As String
Public NameID As String
Public rng As Range
Public Columns As Collection
Public uf As NSIForm
Public LastSelectedElement As Collection '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public LastSele|fffd|tedElementRow As Long '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public KeyColumn As NSIColumn
Public ValueColumn As NSIColumn '|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public AlwaysRender As Boolean


Property Get Count() As Long
Count = rng.rows.Count - 1 ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
End Property

Property Get CanRenderWithoutFilter() As Boolean
CanRenderWithoutFilter = False
If AlwaysRender Or Count <= 50 Then CanRenderWithoutFilter = True
End Property

Property Get RangeValue() As Range
Set RangeValue = GlobalModule.nsi.Range(ValueColumn.col & "2:" & ValueColumn.col & CStr(Count + 1))
End Property


'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Sub Init()
Dim nsic As NSIColumn
Dim Cols As Variant
Dim c As Range
Dim i As Integer
Dim colname As String
Dim maxrow As Long
Dim crow As Long

maxrow = 0

Set Columns = New Collection
   ' Cols = Helper.Spliter(RNG, ":")
    
    
    For i = 1 To rng.Columns.Count
        Set c = rng.Columns(i)
        colname = Replace((Split(c.Address, "$")(1)), ":", "")
        Set nsic = New NSIColumn
        nsic.col = colname
        nsic.name = rng.Worksheet.Range(colname & "1").value
        nsic.FullEqual = False
        nsic.NameID = colname
        nsic.value = ""
        nsic.FilterVisible = True
        nsic.GridVisible = True
        crow = Helper.lastRow(rng.Worksheet.name, rng.Worksheet.Range(colname & "1").Column)
        If maxrow < crow Then maxrow = crow
        Columns.Add nsic, nsic.NameID
        If i = 1 Then Set KeyColumn = nsic
        If i = 2 Or (i = 1 And rng.Columns.Count = 1) Then Set ValueColumn = nsic
    Next
    
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Range
    Set rng = rng.Worksheet.Range(Columns(1).NameID & "1:" & Columns(Columns.Count).NameID & CStr(maxrow))
    
    
End Sub

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Function GetNSIColumn(ByVal cnameid As String) As NSIColumn
Set GetNSIColumn = Nothing
If Helper.ContainsKey(Columns, cnameid) = False Then
    MsgBox ("|fffd||fffd||fffd| |fffd||fffd||fffd| " & NameID & " |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & cnameid)
    Exit Function
End If
Set GetNSIColumn = Columns(cnameid)
End Function

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
Public Sub ShowForm(Optional ByVal R As Range = Nothing)

Set LastSelectedElement = Nothing
Set uf = New NSIForm
uf.ShowForm Me

    If Not LastSelectedElement Is Nothing Then
        If Not R Is Nothing Then
            Helper.UnProtect R.Worksheet
            R.value = LastSelectedElement(1)
            Helper.Protect R.Worksheet
        End If
    End If


End Sub

'|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Function SearchAll(ByVal sitems As Collection) As Collection
    Set SearchAll = Helper.Search(rng.Worksheet.name, sitems, False, 1)
End Function

'|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Function SearchFirst(ByRef sitems As Collection) As Collection
    Set SearchFirst = Helper.Search(rng.Worksheet.name, sitems, True, 1)
End Function

Public Function GetElement(ByVal row As Long) As Collection
Dim c As NSIColumn
Dim v As String

Set GetElement = New Collection
For Each c In Columns
    v = rng.Worksheet.Range(c.col & CStr(row)).Value2
    GetElement.Add v, c.NameID
Next
End Function

Public Function GetElementByKey(ByVal key As String) As Long
Dim filter As Collection
Dim Result As Collection
Dim b As Boolean

GetElementByKey = -1
If Len(key) = 0 Then Exit Function

Set filter = New Collection
KeyColumn.value = key
'push
b = KeyColumn.FullEqual
KeyColumn.FullEqual = True
filter.Add KeyColumn
Set Result = SearchFirst(filter)
'pop
KeyColumn.FullEqual = b
If Result.Count > 0 Then GetElementByKey = Result(1)
End Function

Public Function GetElementByValue(ByVal value As String) As Long
Dim filter As Collection
Dim Result As Collection
Dim b As Boolean

GetElementByValue = -1
If Len(value) = 0 Then Exit Function

Set filter = New Collection
ValueColumn.value = value
'push
b = ValueColumn.FullEqual
ValueColumn.FullEqual = True
filter.Add ValueColumn
Set Result = SearchFirst(filter)
'pop
ValueColumn.FullEqual = b

If Result.Count > 0 Then GetElementByValue = Result(1)
End Function

'|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Function GetKey(ByVal value As String) As String
    Dim elem As Collection
    Dim row As Long
    
    
    GetKey = ""
    If Len(value) = 0 Then Exit Function
    row = GetElementByValue(value)
    If row > 0 Then
        Set elem = GetElement(row)
        GetKey = elem(ValueColumn.NameID)
    End If
        
End Function

'|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Function GetValue(ByVal key As String) As String
    Dim elem As Collection
    Dim row As Long
    
    
    GetValue = ""
    If Len(value) = 0 Then Exit Function
    row = GetElementByKey(value)
    If row > 0 Then
        Set elem = GetElement(row)
        GetValue = elem(KeyColumn.NameID)
    End If
        
End Function


Public Sub SetCMB(ByRef R As Range, Optional ByVal StopOnError As Boolean = True, Optional ByVal defaultValue As String = "")
' Range

    If Len(defaultValue) > 0 Then
        R.value = defaultValue
    End If

    With R.Validation
        .Delete
        .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, _
             Operator:=xlEqual, Formula1:="=NSI_Meta!$" & ValueColumn.col & "$2:$" & ValueColumn.col & "$" & CStr(Count + 1)
        .ShowError = False
    End With


End Sub

Attribute VB_Name = "NSIColumn"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'NSIColumn VERSION 1.2

Option Explicit

Public col As String '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
Public name As String '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public NameID As String '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|)
Public FilterVisible As Boolean '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public GridVisible As Boolean '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd|
Public FullEqual As Boolean '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public value As String '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
Public dict As Dictionary '|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|.
Public Mandatory As Boolean '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|


Attribute VB_Name = "NSIForm"
Attribute VB_Base = "0{2ED5A5B9-056C-4EBA-804B-A251A4695BE2}{BC66586C-8A95-4253-BED4-457208190509}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False




Public GridEvents As New Collection '|fffd||fffd||fffd| event |fffd| |fffd||fffd||fffd||fffd||fffd|
Public nsi As NSIClass
Public gr As Grid
Public SearchOne As Boolean


Public Sub ShowForm(ByRef n As NSIClass, Optional ByVal searchonlyfirst As Boolean)
Dim c As NSIColumn
Dim control As MSForms.control
Dim h As Integer
Dim ignoreColumns As Collection

Set nsi = n
Set ignoreColumns = New Collection


Caption = nsi.NameNSI
SearchOne = searchonlyfirst

FilterFrame.Controls.Clear
    
h = 10
    For i = 1 To nsi.Columns.Count
        Set c = nsi.Columns(i)
        If c.GridVisible = False Then
            ignoreColumns.Add i, CStr(i)
        End If
        
        If c.FilterVisible = True Then
            'label
            Set control = FilterFrame.Controls.Add("Forms.Label.1")
            control.Top = h
            control.Left = 10
            control.Caption = c.name
            control.Width = 150
            control.Height = 20
            control.ForeColor = RGB(0, 0, 0)
            
            'TextBox
            Set control = FilterFrame.Controls.Add("Forms.TextBox.1")
            control.name = c.NameID
            control.Top = h
            control.Left = 160
            control.value = "" 'c.Value
            control.Width = FilterFrame.Width - 5 - control.Left
            control.Height = 20
            
            h = h + 20 + 2
        End If
    Next
    
    FilterFrame.Height = h + 10
    
    b_Search.Top = FilterFrame.Top + FilterFrame.Height + 5
    FrameResult.Top = b_Search.Top + b_Search.Height + 5
    
    FrameResult.Height = b_Ok.Top - 5 - FrameResult.Top
    
    
    Set gr = ClassFactory.CreateGrid(Me.FrameResult)
    Set gr.Events = Me.GridEvents
    gr.name = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    
    If nsi.CanRenderWithoutFilter Then
        gr.Refresh nsi.rng
    Else
        
        If Me.FrameResult.Controls.Count = 0 Then
             Set l = Me.FrameResult.Controls.Add("forms.label.1")
                With l
                .Left = 2
                .Top = 2
                .TextAlign = fmTextAlignCenter
                .Height = 40
                .Width = Me.FrameResult.Width - 4
                .Font.Size = 14
                .Caption = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|!"
                End With
        End If
        
    End If
        
    Me.Show
End Sub


Private Sub b_ok_Click()
Dim Element As Collection

If gr.SelectedRow = 0 Then
    MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    Exit Sub
End If

Set nsi.LastSelectedElement = nsi.GetElement(gr.SheetRow)
t_debug.Caption = nsi.LastSelectedElement(1)
Me.Hide

End Sub

Private Sub b_Search_Click()
    Dim c As NSIColumn
    Dim filter As Collection
    Dim Result As Collection
    
    
    
    
    Set filter = New Collection
    
    For Each c In nsi.Columns
        If c.FilterVisible = True Then
            If Len(FilterFrame.Controls(c.NameID).value) > 0 Then
                c.value = FilterFrame.Controls(c.NameID).value
                filter.Add c, c.NameID
            End If
        End If
    Next
    
    If filter.Count = 0 Then
        If nsi.CanRenderWithoutFilter Then
            gr.Refresh nsi.rng
            Exit Sub
        Else
            MsgBox ("|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|")
            Exit Sub
        End If
    End If

    Application.Cursor = xlWait
    If SearchOne Then
       Set Result = nsi.SearchFirst(filter)
    Else
       Set Result = nsi.SearchAll(filter)
    End If
    
    
    gr.name = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    gr.Refresh nsi.rng, Result
    
    Application.Cursor = xlDefault
    
    If Result.Count = 0 Then MsgBox "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    

End Sub


Attribute VB_Name = "ProgressBarForm"
Attribute VB_Base = "0{12895331-BA4B-4C6F-9E4C-C86B04AD2436}{0846A0C9-C546-489C-9CA1-012FB7E985D7}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False





Private ProgressBarWidth As Integer
Private ProgressBarDiv As Single
Public StopProcess As Boolean
Private StopClose As Boolean






Private Sub cb_cancel_Click()
    StopProcess = True
    StopClose = False
End Sub


Public Sub UpdateStatus(ByVal op As String, ByVal counter As Double, ByVal total As Double, Optional statusText As String = "", Optional ErrorsText As String = "", Optional counter_errors As Double)

Dim w As Integer
Dim proc As Integer
Dim d As Double


d = counter / total
proc = CInt(d * 100)

w = ProgressBarDiv * proc


pr1.Width = w
pr2.Width = ProgressBarWidth - w
pr2.Left = pr1.Left + pr1.Width

l_status.Caption = statusText & " " & CStr(counter) & " |fffd||fffd| " & CStr(total)
l_operation.Caption = op
If Not GlobalModule.counter_of_errors = 0 Then
l_c_errors.Caption = ErrorsText & " " & CStr(counter_errors)
l_c_errors.Visible = True
End If
DoEvents
End Sub

Public Sub Start(ByVal isCancelEnable As Boolean)
StopProcess = False
UpdateStatus "", 0, 100
cb_cancel.Visible = isCancelEnable
StopClose = True
Me.Show False
End Sub

Private Sub UserForm_Initialize()
pr1.BackColor = RGB(159, 211, 247)
    ProgressBarWidth = pr1.Width + pr2.Width
    ProgressBarDiv = ProgressBarWidth / 100
End Sub

Public Sub Complete()
    StopClose = False
    Unload Me
End Sub
Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
    If StopClose Then Cancel = -1
End Sub
Attribute VB_Name = "QDataRow"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'QDataRow VERSION 1.0


Option Explicit

Public RowID As Long
Public QT As QTable
Public Data As New Collection



Public Function Check() As Boolean
Dim Q As Question
Dim Error As String

Check = True

    For Each Q In QT.Columns
        Q.value = Data(Q.NameID)
        Error = Q.Check
        Q.value = ""
        
        If Q.Validated = False Then
            Check = False
        End If
    Next
End Function

Public Sub Update()
    If RowID < 1 Then QT.AddRow Me
End Sub

Public Sub Save()
Dim Q As Question

For Each Q In QT.Columns
    Q.value = Data(Q.NameID)
    Q.Save RowID
    Q.value = ""
Next

End Sub


Public Sub GetValues(ByRef f As UserForm)
Dim Q As Question

For Each Q In QT.Columns
    Q.value = ""
    Q.GetValue f
    SetValueToRow Q
Next

End Sub

Public Sub SetValueToRow(ByVal Q As Question)
    Data.Remove (Q.NameID)
    Data.Add Q.value, Q.NameID
   'Data(Q.NameID) = CStr(Q.Value)
    Q.value = ""

End Sub


Public Sub SetValues(ByRef f As UserForm)
Dim Q As Question

For Each Q In QT.Columns
    Q.value = Data(Q.NameID)
    Q.SetValue f
    Q.value = ""
Next

End Sub
Attribute VB_Name = "QTable"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'QTable VERSION 1.0

Option Explicit

Public ID As String
Public name As String
Public Columns As New Collection '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public QRows As New Collection

Public IsStatic As Boolean '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|. |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|-|fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
Public IsDynamic As Boolean '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|

Public InMemory As Boolean
Public sheet As Worksheet '|fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public FGrid As Grid 'Grid |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public HeaderVisible As Boolean '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd|
Public RowNumVisible As Boolean '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public DeleteAvailable As Boolean
Public InsertAvailable As Boolean
Public CopyRowAvailable As Boolean
Public WrapTextInCells As Boolean
Public AddButtons As Collection '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|

Public DeleteButtons As Range
Public InsertButtons As Range
Public CopyRowButtons As Range


Property Get RowStart() As Long
    RowStart = sheet.Range(ID + "_START").row
End Property
Property Get ColStart() As Long
    ColStart = sheet.Range(ID + "_START").Column
End Property
Property Get ColEnd() As Long
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| IsDynamic |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|!!! |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|... TODO |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|!
    ColEnd = 0
    If IsDynamic Then
        ColEnd = ColStart + Columns.Count - 1
    Else
        ColEnd = sheet.Range(ID + "_END").Column
    End If
End Property


Property Get RowCount() As Long
Dim lRow As Long
Dim index As Integer


    If IsDynamic Then
         '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
        RowCount = 0
        For index = 1 To Columns.Count
            lRow = Helper.lastRow(sheet.name, ColStart + index - 1) - RowStart
            If RowCount < lRow Then RowCount = lRow
        Next
    Else
        RowCount = QRows.Count
    End If
End Property


Public Function HRange() As Range '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    Set HRange = sheet.Range(sheet.Cells(RowStart, ColStart), sheet.Cells(RowStart, ColEnd))
End Function
Public Function TRange() As Range '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    Set TRange = sheet.Range(sheet.Cells(RowStart, ColStart), sheet.Cells(RowStart + RowCount, ColEnd))
End Function
Public Function DRange() As Range '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    If IsDynamic Then
        Set DRange = sheet.Range(sheet.Cells(RowStart + 1, ColStart), sheet.Cells(sheet.rows.Count, ColEnd))
    Else
        Set DRange = sheet.Range(sheet.Cells(RowStart + 1, ColStart), sheet.Cells(RowStart + RowCount, ColEnd))
    End If
End Function



Private Sub Class_Initialize()
    ID = Helper.GUID '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| EMPLOYEE).
    InMemory = True
    HeaderVisible = True
    RowNumVisible = True
    Set AddButtons = New Collection
    WrapTextInCells = True
    DeleteAvailable = True
    InsertAvailable = False
    CopyRowAvailable = False
End Sub

Public Sub AddColumn(ByVal Q As Question)
Dim c As Question
name = Q.EntityName
Set Q.QT = Me
    'Sort
    For Each c In Columns
        If c.Sort > Q.Sort Then
            Columns.Add Q, Q.NameID, c.NameID
            Exit Sub
        End If
    Next
    
    Columns.Add Q, Q.NameID
End Sub


Public Function NewRow() As QDataRow
Dim Q As Question

Set NewRow = New QDataRow
Set NewRow.QT = Me
For Each Q In Columns
    NewRow.Data.Add Q.defaultValue, Q.NameID
Next
NewRow.RowID = -1
End Function


Public Sub AddRow(ByVal QR As QDataRow, Optional ByVal needRender As Boolean = True)
Dim R As Range
Dim row As Long
Dim Q As Question
Dim d As Dictionary
Dim col As Integer
    
    Set QR.QT = Me
    If QR.RowID < 0 Then
        QR.RowID = RowCount + 1
        QRows.Add QR
    End If

    If Not InMemory And needRender Then
        
        row = Helper.AddRow(sheet.name, sheet.Range(ID + "_END").row)
        Set R = sheet.Range(sheet.Cells(row, ColStart), sheet.Cells(row, ColEnd))
        Helper.GridStyle R
        R.NumberFormat = "@"

        '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        
        If RowNumVisible Then
            sheet.Range(sheet.Cells(row, ColStart), sheet.Cells(row, ColStart + sheet.Cells(RowStart, ColStart).MergeArea.Columns.Count - 1)).merge
            With sheet.Cells(row, ColStart)
                .HorizontalAlignment = xlCenter
                .WrapText = False
                .VerticalAlignment = xlCenter
                .Value2 = QR.RowID
            End With
        End If
            
        For Each Q In Columns
            If Q.Visible Then
                sheet.Range(sheet.Cells(row, Q.NumColumn), sheet.Cells(row, Q.NumColumn + sheet.Cells(RowStart, Q.NumColumn).MergeArea.Columns.Count - 1)).merge
                With sheet.Cells(row, Q.NumColumn)
                    .HorizontalAlignment = Q.halign
                    .WrapText = WrapTextInCells
                    .VerticalAlignment = xlTop
                    .Value2 = Q.GetDictValue(QR.Data(Q.NameID))
                End With
                
                If Len(Q.DictNameID) > 0 Then
                     Set d = GlobalModule.Dictionaries(Q.DictNameID)
                     d.SetCMB sheet.Cells(row, Q.NumColumn)
                End If
            End If
        Next
        '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
        sheet.rows(row).EntireRow.AutoFit
        
        '|fffd||fffd||fffd||fffd||fffd|
        If DeleteAvailable Then
            sheet.Range(sheet.Cells(row, DeleteButtons.Column), sheet.Cells(row, DeleteButtons.Column + DeleteButtons.MergeArea.Columns.Count - 1)).merge
            sheet.Hyperlinks.Add Anchor:=sheet.Cells(row, DeleteButtons.Column), Address:="", ScreenTip:="|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|", TextToDisplay:="|fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        End If
         If InsertAvailable Then
            sheet.Range(sheet.Cells(row, InsertButtons.Column), sheet.Cells(row, InsertButtons.Column + InsertButtons.MergeArea.Columns.Count - 1)).merge
            sheet.Hyperlinks.Add Anchor:=sheet.Cells(row, InsertButtons.Column), Address:="", ScreenTip:="|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|", TextToDisplay:="|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        End If
         If CopyRowAvailable Then
            sheet.Range(sheet.Cells(row, CopyRowButtons.Column), sheet.Cells(row, CopyRowButtons.Column + CopyRowButtons.MergeArea.Columns.Count - 1)).merge
            sheet.Hyperlinks.Add Anchor:=sheet.Cells(row, CopyRowButtons.Column), Address:="", ScreenTip:="|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|", TextToDisplay:="|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        End If
    End If
End Sub

Public Sub RemoveRow(ByVal row As Long)
Dim QR As QDataRow
Dim Q As Question
Dim i As Long
Dim tmp As Long

'|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
For Each Q In Columns
    Q.value = ""
    Q.Save row
Next

QRows.Remove (row)

    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    For i = 1 To RowCount
        Set QR = QRows(i)
        QR.RowID = i
    Next
    
    If Not InMemory Then
        Helper.RemoveRow sheet.name, RowStart + row
        If RowNumVisible Then
            For Each QR In QRows
                sheet.Cells(RowStart + QR.RowID, ColStart) = CStr(QR.RowID)
                Helper.GridStyle Range(sheet.Cells(RowStart + QR.RowID, ColStart), sheet.Cells(RowStart + QR.RowID, ColEnd)), True
            Next
        End If
    End If
    
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    tmp = Helper.lastRow(GlobalModule.AList.name)
    If tmp > 1 Then
        For i = 2 To tmp
            If GlobalModule.QuestionsIds(CStr(GlobalModule.AList.Range("A" & CStr(i)).value)).Entity = ID And CDec(GlobalModule.AList.Range("C" & CStr(i)).value) > row Then
                GlobalModule.AList.Range("C" & CStr(i)).value = CDec(GlobalModule.AList.Range("C" & CStr(i)).value) - 1
            End If
        Next
    End If
    
    
End Sub

Public Sub InsertRow(ByVal row As Long)
Dim QR As QDataRow
Dim QRold As QDataRow
Dim tmp As Collection
Dim totalRows As Long


'MsgBox Helper.GetClipboard()
'Exit Sub

Dim i As Long

Set QR = NewRow()

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
Set tmp = New Collection
For i = 1 To RowCount
    If row = i Then
        Set QR.QT = Me
        QR.RowID = i
        tmp.Add QR
    End If
    
    Set QRold = QRows(i)
    If i >= row Then
        QRold.RowID = QRold.RowID + 1
    End If
    tmp.Add QRold
Next
Set QRows = tmp

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    totalRows = Helper.lastRow(GlobalModule.AList.name)
    If totalRows > 1 Then
        For i = 2 To totalRows
            If GlobalModule.QuestionsIds(CStr(GlobalModule.AList.Range("A" & CStr(i)).value)).Entity = ID And CDec(GlobalModule.AList.Range("C" & CStr(i)).value) >= row Then
                GlobalModule.AList.Range("C" & CStr(i)).value = CDec(GlobalModule.AList.Range("C" & CStr(i)).value) + 1
            End If
        Next
    End If

Render


End Sub

Public Sub CopyRow(ByVal row As Long)
Dim QR As QDataRow
Dim QRSource As QDataRow
Dim Q As Question

    Set QRSource = QRows(row)
    Set QR = NewRow()
    For Each Q In Columns
        Q.value = QRSource.Data(Q.NameID)
        QR.SetValueToRow Q
    Next
    
    AddRow QR
    QR.Save


End Sub


Public Sub Save()
Dim QR As QDataRow
Dim lRow As Long
Dim index As Long




If Not IsDynamic Then
    For Each QR In QRows
        QR.Save
    Next
Else
   'ClearAnswers
   
End If


End Sub

'Buttons
Public Sub SetAddButtons()
Dim R As Range
Dim index As Integer

If IsDynamic Then Exit Sub
If IsStatic Then Exit Sub


'|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
index = 1
Set R = Helper.GetRangeByName(ID & "_ADD" & CStr(index))
Do While Not R Is Nothing

sheet.Hyperlinks.Add Anchor:=R, Address:="", ScreenTip:="|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|", TextToDisplay:="|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
AddButtons.Add R
index = index + 1
Set R = Helper.GetRangeByName(ID & "_ADD" & CStr(index))
Loop

End Sub
'SetHeader
Public Sub SetHeader()
Dim header As Range
Dim mergeNum As Integer
Dim cellR As Range
Dim index As Integer
Dim Q As Question
Dim col As Integer
Dim d As Dictionary
Dim n As NSIClass
Dim R As Range
Dim lRow As Long


If IsDynamic Then
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
lRow = sheet.rows.Count

    For index = 1 To Columns.Count
        Set Q = Columns(index)
        Q.NumColumn = ColStart + index - 1
        
        ProgressBarForm.UpdateStatus "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & """" & name & """", index, Columns.Count
        
       ' If Helper.DebugAnketa Then
        
            Set R = sheet.Range(sheet.Cells(RowStart + 1, Q.NumColumn), sheet.Cells(lRow, Q.NumColumn))
            
            
            Q.SetFormat R
        
            If Len(Q.DictNameID) > 0 Then
                Set d = GlobalModule.Dictionaries(Q.DictNameID)
                d.SetValidation R, Q.NSIValidate
            End If
            If Len(Q.NSIID) > 0 Then
                'Set n = GlobalModule.NSIs(Q.NSIID)
                'n.SetCMB R, Q.NSIValidate
                
                With R.Validation
                    .Delete
                    .Add Type:=xlValidateInputOnly, AlertStyle:=xlValidAlertStop, _
                         Operator:=xlEqual, Formula1:="" '"=NSI_Meta!$" & ValueColumn.col & "$2:$" & ValueColumn.col & "$" & CStr(Count + 1)
                    .InputMessage = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
                    .ShowError = False
                End With
                
    
            End If
      '  End If
        'Q.SetDescription R
    Next
    
    
        Dim srange As String
        
        srange = Helper.ColumnLitter(ColStart) & CStr(RowStart + 1) & ":" & Helper.ColumnLitter(ColEnd) & CStr(lRow)
        Set R = sheet.Range(srange)
    Helper.ClearComment R
    
    'editable range
  '  If Helper.DebugAnketa Then
       
       Dim tmp As String
       tmp = ID & "Editable"
       
       On Error Resume Next
         sheet.Protection.AllowEditRanges(tmp).Delete
    '
    
        
        sheet.Protection.AllowEditRanges.Add title:=tmp, Range:=R
        Helper.GridStyle R
        
    
        sheet.Activate
        sheet.Range("A1").Activate '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
        ThisWorkbook.Worksheets(1).Activate
  '  End If


     

Else
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    
    If Not IsStatic Then Helper.CleanTable sheet, ID
    
    Set header = HRange()
    
    index = 1
    col = header.Column
    mergeNum = 1
    
    If RowNumVisible Then
    
            If HeaderVisible Then '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
                With sheet.Range(sheet.Cells(header.row, col), sheet.Cells(header.row, col))
                    .HorizontalAlignment = xlCenter
                    .WrapText = True
                    .VerticalAlignment = xlCenter
                    .value = "|fffd|"
                End With
            End If
    
        mergeNum = sheet.Cells(header.row, col).MergeArea.Columns.Count
        col = col + mergeNum '|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    End If
    
    For Each Q In Columns
        If Q.Visible Then
            If HeaderVisible Then '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
                With sheet.Range(sheet.Cells(header.row, col), sheet.Cells(header.row, col))
                    .HorizontalAlignment = xlCenter
                    .WrapText = True
                    .VerticalAlignment = xlCenter
                    .value = Q.Text
                End With
            End If
            '
            Q.NumColumn = col
            mergeNum = sheet.Cells(header.row, col).MergeArea.Columns.Count
            col = col + mergeNum
            
          
            
        End If
    Next
    
      '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            If IsStatic Then
                Set R = sheet.Range(Cells(RowStart + 1, ColStart), Cells(RowStart + RowCount, ColEnd))
                    Helper.ClearComment R, RGB(255, 255, 255)
            End If
    
    If HeaderVisible Then Helper.HeaderStyle header
    
    '|fffd||fffd||fffd||fffd||fffd|
            col = ColEnd + 1
           If DeleteAvailable Then
                Set DeleteButtons = sheet.Cells(RowStart, col)
                col = col + sheet.Cells(RowStart, col).MergeArea.Columns.Count
            End If
             If InsertAvailable Then
                Set InsertButtons = sheet.Cells(RowStart, col)
                col = col + sheet.Cells(RowStart, col).MergeArea.Columns.Count
            End If
             If CopyRowAvailable Then
                Set CopyRowButtons = sheet.Cells(RowStart, col)
                col = col + sheet.Cells(RowStart, col).MergeArea.Columns.Count
           End If
    
End If

End Sub

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd| |fffd||fffd||fffd||fffd||fffd|
Public Sub Render()
Dim i As Integer
Dim col As Long
Dim row As Long
Dim QR As QDataRow
Dim Q As Question
Dim R As Range
Dim rng As Range
Dim index As Integer

If IsDynamic Then Exit Sub


'|fffd||fffd||fffd||fffd||fffd||fffd|
If Not IsStatic Then
    Helper.CleanTable sheet, ID
    
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    For Each QR In QRows
        Me.AddRow QR
    Next
End If


If (FGrid Is Nothing) = False Then
    FGrid.Refresh TRange()
End If


End Sub

Public Function Check(Optional ByVal silent As Boolean) As Boolean
Dim QR As QDataRow
Dim Q As Question
Dim R As Range
Dim index As Long
Dim lRow As Long
Dim i As Long
Dim del As Collection
Dim maxRows As Long
Dim val As String


Check = True

If Not IsDynamic Then




    For Each QR In QRows
        For Each Q In Columns
            If Q.Visible Then
                Set R = sheet.Cells(RowStart + QR.RowID, Q.NumColumn)
                val = Q.GetDictKey(R.Text)
                Q.value = val
                QR.SetValueToRow Q
                Q.value = val
                Q.Error = ""
                Q.NoValidator = silent
                Q.Check QR.RowID
                Q.Save QR.RowID
                If Not Q.Validated Then Check = False
            End If
        Next
    Next
Else

'SetHeader '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|



    '|fffd||fffd||fffd||fffd||fffd||fffd|
    For index = 1 To Columns.Count
        Set Q = Columns(index)
        Q.SaveWithOverride = True
        Set R = sheet.Cells(RowStart + 1, Q.NumColumn)
        lRow = sheet.rows.Count 'R.End(xlDown).row
        Set R = sheet.Range(sheet.Cells(R.row, R.Column), sheet.Cells(lRow, R.Column))
        Helper.ClearComment R
        '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|(|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| submit)
'            Set del = Helper.SimpleSearch(GlobalModule.AList.Name, "A", Q.ID, True, False, 1)
'            If del.Count > 0 Then
'                '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
'                For i = del.Count To 1 Step -1
'                        '|fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'                        Helper.RemoveRow AList.Name, CDec(del(i)), CDec(del(i))
'                Next
'            End If
    Next
    
   maxRows = RowCount + RowStart
    
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Set QR = NewRow()
    If maxRows > RowStart Then
    

    
    
    Dim l_mr As Long
    l_mr = RowCount
    
        For index = RowStart + 1 To maxRows
        
        
        
            QR.RowID = index - RowStart
            ProgressBarForm.UpdateStatus "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & """" & Me.name & """", QR.RowID, l_mr, "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|:", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|:", GlobalModule.counter_of_errors

            If ProgressBarForm.StopProcess Then
                Exit Function
            End If
            For Each Q In Columns
                Q.value = sheet.Cells(index, Q.NumColumn).Value2
                
                If Q.NSIView = ViewValue Then
                    If Q.IsDictionary Or Q.IsNSI Then
                        Q.value = Q.GetDictKey(Q.value)
                    End If
                End If
                
                
                
                Q.NoValidator = silent
                Q.Check index - RowStart
                Q.Save index - RowStart
                QR.SetValueToRow Q
            Next
            LogicControl.CheckRow QR '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
            
            'If index > 1000 Then
                
               ' Exit Function
            'End If
            
        Next
        
        
        
    End If
End If
End Function
Attribute VB_Name = "QView"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Public ID As String
Public QT As QTable
Public sheet As Worksheet
Private Columns As Collection '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| View

Public RowNumVisible As Boolean '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Private Linked As Boolean '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|


Property Get RowStart() As Long
    RowStart = sheet.Range(ID + "_START").row
End Property
Property Get ColStart() As Long
    ColStart = sheet.Range(ID + "_START").Column
End Property
Property Get ColEnd() As Long
    ColEnd = sheet.Range(ID + "_END").Column
End Property

Property Get RowCount() As Long
    RowCount = QT.QRows.Count
End Property

Public Function TRange() As Range '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    Set TRange = sheet.Range(sheet.Cells(RowStart, ColStart), sheet.Cells(RowStart + RowCount, ColEnd))
End Function


Private Sub Class_Initialize()
    ID = Helper.GUID '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| EMPLOYEE).
    RowNumVisible = False
End Sub


Public Sub LinkToSheet()
    Dim Q As Question
    Dim CurrentQ As Integer
    Dim startQ As Integer
    Dim rng As Range
    Dim c As Long
    Dim lastc As Long
    Dim R As Long
    Dim merge As Integer
    Dim b As Boolean
    
    If Linked Then Exit Sub
    
     Set Columns = New Collection
     
    Set rng = sheet.Range(ID & "_START")
    R = rng.row
    c = rng.Column
    lastc = sheet.Range(ID & "_END").Column
    
    
    '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| View
    CurrentQ = 1
    b = False
    
    For startQ = 1 To QT.Columns.Count
        Set Q = QT.Columns(startQ)
        If Q.Visible And Q.NumColumnInView = 0 Then
            b = True
            Exit For
        End If
    Next
    
    If Not b Then Exit Sub
    
    If Me.RowNumVisible Then
        merge = sheet.Cells(R, c).MergeArea.Count
        c = c + merge
    End If
    
    For CurrentQ = startQ To QT.Columns.Count
        If c > lastc Then Exit For
        Set Q = QT.Columns(CurrentQ)
        If Q.Visible Then
            Q.NumColumnInView = c
            merge = sheet.Cells(R, c).MergeArea.Count
            c = c + merge
            Columns.Add Q, Q.NameID
        End If
    Next
    
    Linked = True
    
End Sub

Public Sub Refresh()
Dim Q As Question
Dim QR As QDataRow
Dim h As Long
Dim c As Long
Dim i As Long
Dim merge As Integer



Helper.UnProtect sheet

LinkToSheet

Helper.CleanTable sheet, ID
h = RowStart


'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
For i = 1 To RowCount
    Helper.AddRow sheet.name, sheet.Range(ID + "_END").row
Next

'render
For i = 1 To RowCount
    If RowNumVisible Then
        merge = Cells(h, ColStart).MergeArea.Count
        If merge > 1 Then sheet.Range(sheet.Cells(h + i, ColStart), sheet.Cells(h + i, ColStart + merge - 1)).merge
        sheet.Cells(h + i, ColStart).value = i
    End If
   
    For Each Q In Columns
        merge = Cells(h, Q.NumColumnInView).MergeArea.Count
        If merge > 1 Then sheet.Range(sheet.Cells(h + i, Q.NumColumnInView), sheet.Cells(h + i, Q.NumColumnInView + merge - 1)).merge
        sheet.Cells(h + i, Q.NumColumnInView).Value2 = QT.QRows(i).Data(Q.NameID)
    Next
Next

Helper.GridStyle TRange

Helper.Protect sheet

End Sub

Attribute VB_Name = "Question"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'Question VERSION 2.0

Enum NSIViewType
    ViewValue = 0
    ViewKey = 1
End Enum

Enum QIsWarningViewType
    QIsMandatory = 1
    QIsDictionary = 2
    QHasLogicControl = 4
    QIsNSI = 8
    QFormatControl = 16
End Enum

Option Explicit

Public ID As String
Public NameID As String
Public QType As String
Public Text As String
Public Description As String
Public ValueType As String
Public IsMandatory As Boolean
Public ValueSize As Integer
Public FractionSize As Integer
Public QIsWarning As Integer
Public defaultValue As String
Public value As String
Public Entity As String
Public Visible As Boolean
Public Sort As Integer
Public ColumnWidth As Integer
Public halign As Integer
Public DictNameID As String
Public NSIID As String
Public NSIValidate As Boolean
Public EntityName As String
Public QT As QTable '|fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public CategoryData As String
Public KeyField As String
Public LControl As String
Public Error As String
Public Warning As String
Public Question_Is_Fake As Boolean
Private NumericSign As String



Public NumColumn As Integer '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public NumColumnInView As Integer '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| QView

'|fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| Header |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Address As Range

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public NoValidator As Boolean

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| Answer_Meta
Public SaveWithOverride As Boolean

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public NSIView As NSIViewType

Public QIsWarningView As QIsWarningViewType

Property Get IsDictionary() As Boolean
    IsDictionary = Len(DictNameID) > 0
End Property

Property Get IsNSI() As Boolean
    IsNSI = Len(NSIID) > 0
End Property

Property Get Validated() As Boolean
    Validated = Len(Error) = 0
End Property


Public Function GetRange(ByVal RowNum As Long) As Range
    Dim QT As QTable
    If Len(Entity) > 0 And RowNum > 0 Then
        Set QT = GlobalModule.QTables(Entity)
        Set GetRange = QT.sheet.Cells(QT.RowStart + RowNum, NumColumn)
    Else
        Set GetRange = Address
    End If
    
End Function

Public Function Check(Optional ByVal RowNum As Long = 0, Optional ByVal CheckOnEdit As Boolean = False) As String
Dim R As Range
Dim l_nsi As NSIClass
Dim l_dict As Dictionary
Dim Numeric_without_space As Range


    Error = ""
    Warning = ""
    value = Trim(value)
    
    If value = "" Then
    If Not CheckBoxIsSelected(QIsWarning, CInt(QIsWarningViewType.QIsMandatory), 16) Then
        If IsMandatory Then
            Error = IErrorTextMandatoryQuestion
            GoTo ext
        End If
    Else
        Warning = IErrorTextMandatoryQuestion
        GoTo ext
    End If
    End If

    
    If ValueSize > 0 And Len(value) > ValueSize Then
    If Not CheckBoxIsSelected(QIsWarning, CInt(QIsWarningViewType.QFormatControl), 16) Then
        Error = Replace(GlobalModule.IErrorTextMaxLength, "{0}", CStr(ValueSize))
        GoTo ext
    Else
        Warning = Replace(GlobalModule.IErrorTextMaxLength, "{0}", CStr(ValueSize))
        GoTo ext
    End If
    End If
    
    Select Case ValueType
        Case "String"
            'skip
        Case "Numeric"
        
         value = Replace(value, " ", "")
        'Set Numeric_without_space = GetRange(RowNum)
        'If Len(Numeric_without_space.Formula) = 0 Then Numeric_without_space.value = value '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
       
            If Len(value) > 0 Then
                If Not Helper.IsNumber(value) Then
                If Not CheckBoxIsSelected(QIsWarning, CInt(QIsWarningViewType.QFormatControl), 16) Then
                        Error = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| <|fffd||fffd||fffd||fffd||fffd|> |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
                Else
                        Warning = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| <|fffd||fffd||fffd||fffd||fffd|> |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
                End If
                GoTo ext
                End If
                
                Select Case NumericSign
                    Case "+"
                        If Not LogicControlHelper.IsGreaterZero(value) Then
                        If Not CheckBoxIsSelected(QIsWarning, CInt(QIsWarningViewType.QHasLogicControl), 16) Then
                            Error = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
                        Else
                            Warning = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
                        End If
                            GoTo ext
                        End If
                    Case "-"
                        If Not LogicControlHelper.IsLessZero(value) Then
                        If Not CheckBoxIsSelected(QIsWarning, CInt(QIsWarningViewType.QHasLogicControl), 16) Then
                            Error = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
                        Else
                            Warning = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
                        End If
                            GoTo ext
                        End If
                    Case "0+"
                        If Not LogicControlHelper.IsGreaterOrEqualZero(value) Then
                        If Not CheckBoxIsSelected(QIsWarning, CInt(QIsWarningViewType.QHasLogicControl), 16) Then
                            Error = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| 0"
                        Else
                            Warning = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| 0"
                        End If
                            GoTo ext
                        End If
                    Case "-0"
                        If Not LogicControlHelper.IsLessOrEqualZero(value) Then
                        If Not CheckBoxIsSelected(QIsWarning, CInt(QIsWarningViewType.QHasLogicControl), 16) Then
                            Error = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| 0"
                        Else
                            Warning = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| 0"
                        End If
                            GoTo ext
                        End If
                    Case "-+"
                        If CDec(value) = 0 Then
                        If Not CheckBoxIsSelected(QIsWarning, CInt(QIsWarningViewType.QHasLogicControl), 16) Then
                            Error = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| 0"
                        Else
                            Warning = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| 0"
                        End If
                            GoTo ext
                        End If
                        
                End Select
                
                
                If Len(Helper.FractionPart(value)) > FractionSize Then
                        If FractionSize = 0 Then
                        If Not CheckBoxIsSelected(QIsWarning, CInt(QIsWarningViewType.QFormatControl), 16) Then
                            Error = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
                        Else
                            Warning = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
                        End If
                            GoTo ext
                        Else
                        Dim cs As String
                        If Not CheckBoxIsSelected(QIsWarning, CInt(QIsWarningViewType.QFormatControl), 16) Then
                            Error = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & CStr(FractionSize) & IIf(FractionSize = 1, " |fffd||fffd||fffd||fffd| ", IIf(FractionSize < 5, " |fffd||fffd||fffd||fffd||fffd| ", " |fffd||fffd||fffd||fffd||fffd||fffd| ")) & "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
                        Else
                            Warning = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & CStr(FractionSize) & IIf(FractionSize = 1, " |fffd||fffd||fffd||fffd| ", IIf(FractionSize < 5, " |fffd||fffd||fffd||fffd||fffd| ", " |fffd||fffd||fffd||fffd||fffd||fffd| ")) & "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
                        End If
                            GoTo ext
                        End If
                End If
            End If
        Case "Date"
            If Len(value) > 0 And Helper.StringToDate(value) = Empty Then
            If Not CheckBoxIsSelected(QIsWarning, CInt(QIsWarningViewType.QFormatControl), 16) Then
                Error = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| <|fffd||fffd||fffd||fffd|>"
            Else
                Warning = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| <|fffd||fffd||fffd||fffd|>"
            End If
                GoTo ext
            End If
    End Select
    

    
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    If IsDictionary Then
        Set l_dict = GlobalModule.Dictionaries(DictNameID)
        If Not CheckBoxIsSelected(QIsWarning, CInt(QIsWarningViewType.QIsDictionary), 16) Then
        If l_dict.Search(l_dict.RKey, value) < 1 Then Error = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        Else
        If l_dict.Search(l_dict.RKey, value) < 1 Then Warning = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
        End If
    End If
    
    If IsNSI Then
            Set l_nsi = GlobalModule.NSIs(NSIID)
            If Not CheckBoxIsSelected(QIsWarning, CInt(QIsWarningViewType.QIsNSI), 16) Then
            If l_nsi.GetElementByKey(value) < 1 Then Error = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
            Else
            If l_nsi.GetElementByKey(value) < 1 Then Warning = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
            End If
    End If
    
    
ext:
   
    LogicControl.Check Me, RowNum
   
    
    SetValidator RowNum
    
    If Not CheckOnEdit Then
        Errors.AddError Me, RowNum
    Else
        Errors.UpdateError Me, RowNum
    End If
    
End Function
Public Sub SetFormat(ByRef R As Range)
Dim format As String
Dim i As Integer
Dim protected As Boolean

protected = R.Worksheet.ProtectContents
Helper.UnProtect R.Worksheet


     
     Select Case ValueType
            Case "Numeric":
                If R.HorizontalAlignment <> xlRight Then R.HorizontalAlignment = xlRight
                format = "#,##0"
                If FractionSize > 0 Then
                    format = "#,##0."
                    For i = 1 To FractionSize
                        format = format + "0"
                    Next
                    If R.NumberFormat <> format Then R.NumberFormat = format
                End If
            Case "String":
                If Len(Entity) > 0 And R.HorizontalAlignment <> xlCenter Then R.HorizontalAlignment = xlCenter
                If R.NumberFormat <> "@" Then R.NumberFormat = "@"
            Case "Date":
                If Len(Entity) > 0 And R.HorizontalAlignment <> xlCenter Then R.HorizontalAlignment = xlCenter
                If R.NumberFormat <> "m/d/yyyy" Then R.NumberFormat = "m/d/yyyy"
        End Select
    If protected Then Helper.Protect R.Worksheet
End Sub
Public Sub SetValidator(Optional ByVal RowNum As Long = 0, Optional ByRef uf As UserForm = Nothing)
Dim shp As Shape
Dim objType As String
Dim uc As control
Dim R As Range



Set R = GetRange(RowNum)

R.Interior.Color = vbWhite

  If uf Is Nothing Then
  'sheet
    If Not R Is Nothing Then
        Helper.ClearComment R
        If Not NoValidator Then
            If Not Validated Then
                Helper.AddComment R, Error, RGB(255, 127, 127)
            Else
                If Len(Warning) > 0 Then
                    Helper.AddComment R, Warning, RGB(255, 255, 127)
                End If
            End If
        End If
        '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
       ' If ValueType = "Numeric" Then
        '    R.Value = Value
     '   End If
    Else
    'form
        On Error Resume Next
        Set uc = uf.Controls(NameID)
   
        If Not uc Is Nothing Then
        
            If TypeOf uc Is MSForms.LABEL Then
                If Validated Then
                    uc.BackColor = RGB(255, 255, 255)
                Else
                    uc.BackColor = RGB(255, 127, 127)
                End If
            End If
            If TypeOf uc Is MSForms.TextBox Then
                If Validated Then
                    uc.BackColor = RGB(255, 255, 255)
                Else
                    uc.BackColor = RGB(255, 127, 127)
                End If
            End If
            If TypeOf uc Is MSForms.CheckBox Then
                If Validated Then
                    uc.BackColor = RGB(255, 255, 255)
                Else
                    uc.BackColor = RGB(255, 127, 127)
                End If
            End If
             If TypeOf uc Is MSForms.Frame Then
                If Validated Then
                    uc.BorderColor = RGB(0, 0, 0)
                Else
                    uc.BorderColor = RGB(255, 127, 127)
                End If
            End If
             If TypeOf uc Is MSForms.ComboBox Then
                If Validated Then
                    uc.BorderColor = RGB(0, 0, 0)
                Else
                    uc.BorderColor = RGB(255, 127, 127)
                End If
            End If
            If TypeOf uc Is MSForms.CommandButton Then
                If Validated Then
                    uc.BackColor = RGB(255, 255, 255)
                Else
                    uc.BackColor = RGB(255, 127, 127)
                End If
            End If
        End If
    End If
End If
NoValidator = False '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
End Sub


Public Sub SetDescription(ByRef R As Range)
Dim protected As Boolean
protected = R.Worksheet.ProtectContents
Helper.UnProtect R.Worksheet
If Not Helper.HasValidation(R) Then
    R.Validation.Add xlValidateInputOnly, xlValidAlertStop, xlEqual
End If

    With R.Validation
        If Len(Description) > 0 Then
                .InputTitle = Text
                .InputMessage = Description
        Else
            .InputTitle = ""
            .InputMessage = ""
        End If
    End With
If protected Then Helper.Protect R.Worksheet
End Sub

Public Sub GetValue(Optional RowNum As Long = 0, Optional ByRef f As UserForm = Nothing)
Dim c As Object
Dim d As Dictionary
Dim n As NSIClass
Dim fr As Frame
Dim fValue As String
Dim Error As String
Dim R As Range

value = ""

If IsDictionary Then Set d = GlobalModule.Dictionaries(DictNameID)
If IsNSI Then Set n = GlobalModule.NSIs(NSIID)

'xlFORM
If f Is Nothing = False Then
    On Error Resume Next
    Set c = f.Controls(NameID)
   
    If (c Is Nothing) = False Then
        If TypeOf c Is MSForms.LABEL Then value = c.Caption
        If TypeOf c Is MSForms.TextBox Then value = c.Text
        If TypeOf c Is MSForms.CheckBox Then
            value = "0"
            If c.value Then value = "1"
        End If
        If TypeOf c Is MSForms.ComboBox Then
            value = ""
            If c.ListIndex > -1 Then
                value = c.List(c.ListIndex, 0)
                If c.ColumnCount > 1 Then fValue = c.List(c.ListIndex, 1)
            End If
        End If
            
        If TypeOf c Is MSForms.CommandButton Then value = c.Caption
        If TypeOf c Is MSForms.Frame Then
            Set fr = c
            For Each c In fr.Controls
                If TypeOf c Is MSForms.OptionButton Then
                    If c.value = True Then
                        fValue = c.Caption
                        value = d.GetKey(fValue)
                    End If
                End If
            Next
        End If
    End If
    
    If QType = "HEADER" Then
        Set R = Helper.GetRangeByName(NameID)
        If Not R Is Nothing Then
            If Len(fValue) > 0 Then
                R.value = fValue
            Else
                R.value = value
            End If
        End If
    End If
'xlSHEET
Else '|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| MainForm
    
    Dim obj As Object
    Dim objType As String
    
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Set R = GetRange(RowNum)
    
    If Not R Is Nothing Then
        value = R.Text
        If Not d Is Nothing And NSIView = ViewValue Then value = d.GetKey(value)
        If Not n Is Nothing And NSIView = ViewValue Then value = n.GetKey(value)
    End If
End If

    value = Trim(value)
      
      If ValueType = "Numeric" Then
        If Len(value) > 0 Then
            If Helper.IsNumber(value) Then
                    value = CStr(CDec(value))
            End If
        End If
      End If
      
        
End Sub
Public Sub SetValue(Optional ByRef f As MSForms.UserForm = Nothing)
Dim c As Object
Dim d As Dictionary
Dim n As NSIClass
Dim R As Range


 If IsDictionary Then Set d = GlobalModule.Dictionaries(DictNameID)
 If IsNSI Then Set n = GlobalModule.NSIs(NSIID)

    If Not f Is Nothing Then

        On Error Resume Next
        Set c = f.Controls(NameID)
    
        If (c Is Nothing) = False Then
    
                 If TypeOf c Is MSForms.LABEL Then
                    c.Caption = value
                End If
    
                If TypeOf c Is MSForms.TextBox Then
                    c.Text = value
                End If
                
                If TypeOf c Is MSForms.ComboBox Then '|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                    d.SetCMB c
                    c.value = value
                End If
                
                If TypeOf c Is MSForms.CheckBox Then
                    c.value = value
                End If
                
                 If TypeOf c Is MSForms.CommandButton Then
                    c.Caption = value
                End If
                
                If TypeOf c Is MSForms.Frame Then
                    On Error Resume Next
                    If Len(value) > 0 Then c.Controls(NameID & "_" & value).value = True ' |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                End If
        End If
    Else
        Dim protected As Boolean
        
        Set R = Helper.GetRangeByName(NameID)
        If Not R Is Nothing Then  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        
            If Not R.Locked Then
                protected = R.Worksheet.ProtectContents
                Helper.UnProtect R.Worksheet
                
                R.value = value
                If Len(value) > 0 Then
                    If Not d Is Nothing And NSIView = ViewValue Then R.value = d.GetValue(value)
                    If Not n Is Nothing And NSIView = ViewValue Then R.value = n.GetValue(value)
                End If
                If protected Then Helper.Protect R.Worksheet
            End If
        End If
    End If
End Sub


Public Sub SetDictValue(ByVal Target As Range)
Dim value As String
Dim key As String

    value = Target.value
    If NSIView = ViewKey Then
        key = GlobalModule.Dictionaries(DictNameID).GetKey(value)
        
        Target.Validation.InputMessage = ""
        If Len(key) > 0 Then
            Target.value = key
            If value <> key Then Target.Validation.InputMessage = value
        End If
    End If
End Sub

Public Sub SetNsiValue(ByVal Target As Range)
Dim value As String
Dim key As String
Dim lNSI As NSIClass
Dim row As Long
Dim nsiElem As Collection
Dim QT As QTable
Dim postfix As String
Dim protected As Boolean

protected = Target.Worksheet.ProtectContents
postfix = ""
If Len(Entity) > 0 Then
    Set QT = GlobalModule.QTables(Entity)
    If QT.IsDynamic And IsNSI Then
        postfix = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
    End If
End If


     value = Target.value
     Set lNSI = GlobalModule.NSIs(NSIID)
     If NSIView = ViewKey Then
        row = lNSI.GetElementByValue(value)
        
        
        Helper.UnProtect Target.Worksheet
        Target.Validation.InputMessage = postfix
        If row > 0 Then
            Set nsiElem = lNSI.GetElement(row)
            Target.value = nsiElem(1)
            If nsiElem.Count > 1 Then
                Target.Validation.InputMessage = nsiElem(2) & ". " & postfix
            End If
        End If
        If protected Then Helper.Protect Target.Worksheet
        
     End If
   
                        
End Sub



Private Sub SetToShape(ByRef shp As Shape)
Dim obj As Object
Dim objType As String
Dim d As Dictionary

If Len(value) = 0 Then Exit Sub
If Len(DictNameID) > 0 Then Set d = GlobalModule.Dictionaries(DictNameID)

Set obj = shp.DrawingObject.Object
objType = TypeName(obj)
    
    Select Case objType
        Case "TextBox"
    obj.Text = value
        Case "OptionButton"
    obj.value = True
        Case "CommandButton"
    obj.Caption = value
        Case "ComboBox"
            obj.Text = d.GetValue(value)
        Case "CheckBox"
            If value = "1" Then
                obj.value = True
            Else
                obj.value = False
            End If
        End Select
End Sub

Public Sub Save(Optional ByVal RowNum As Long = 0)
    Dim row As Long
    Dim found As Boolean
    Dim i As Long
    Dim Result As Collection
    Dim Arow As Long
    If Question_Is_Fake = True Then
    Exit Sub
    End If
    Arow = 0
    If Not SaveWithOverride Then
    '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
        Arow = GetAnswerRow(RowNum)
    End If
    
    If Len(value) > 0 Then '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        If Arow = 0 Then Arow = Helper.lastRow(GlobalModule.AList.name) + 1
        AList.Range("A" + CStr(Arow)).value = ID
        AList.Range("B" + CStr(Arow)).value = value
        If RowNum > 0 Then AList.Range("C" + CStr(Arow)).value = RowNum
    Else
        '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
        If Arow > 0 Then
            Helper.RemoveRow GlobalModule.AList.name, Arow, Arow
        End If
    End If
    
    'KEYFIELD
    If Len(KeyField) > 0 Then
       GlobalModule.UpdateSurveyMeta KeyField, value
    End If
End Sub

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
Public Function GetDictValue(ByVal key As String)
Dim d As Dictionary
Dim n As NSIClass
Dim R As Long
Dim tmp As Collection

    GetDictValue = key
    
    If Len(value) > 0 Then
        If ValueType = "Boolean" Then
            If key = "1" Then GetDictValue = "V" Else GetDictValue = ""
        End If
        If IsDictionary Then
                Set d = GlobalModule.Dictionaries(DictNameID)
                On Error Resume Next
                GetDictValue = d.GetValue(key)
        End If
        If IsNSI Then
            Set n = GlobalModule.NSIs(NSIID)
            R = n.GetElementByKey(key)
            If R > 0 Then
                Set tmp = n.GetElement(R)
                GetDictValue = tmp(1)
                If tmp.Count > 1 Then GetDictValue = tmp(2)
            End If
        End If
    End If
End Function

Public Function GetDictKey(ByVal val As String)
Dim d As Dictionary
Dim n As NSIClass
Dim R As Long


    GetDictKey = val

    If Len(val) > 0 Then
        If IsDictionary Then
            Set d = GlobalModule.Dictionaries(DictNameID)
            On Error Resume Next
            GetDictKey = d.GetKey(val)
        End If
        If IsNSI Then
            Set n = GlobalModule.NSIs(NSIID)
            R = n.GetElementByValue(val)
            If R > 0 Then
                GetDictKey = n.GetElement(R)(1)
            End If
        End If
    End If


End Function





Public Function GetAnswerRow(Optional ByVal RowNum As Long = 0) As Long
Dim row As Long
GetAnswerRow = 0
Dim i As Long


     '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    row = Helper.lastRow(GlobalModule.AList.name)
    If row > 1 Then
        For i = 2 To row
            With GlobalModule.AList
                If .Range("A" & CStr(i)).value = ID Then
                    If RowNum > 0 Then
                        If .Range("C" & CStr(i)).value = CStr(RowNum) Then
                            GetAnswerRow = i
                            Exit For
                        End If
                    Else
                        GetAnswerRow = i
                    End If
                End If
            End With
        Next
    End If
End Function

Public Function Clone() As Question
    Set Clone = New Question
    Clone.ID = Me.ID
    Clone.defaultValue = Me.defaultValue
    Clone.Description = Me.Description
    Clone.IsMandatory = Me.IsMandatory
    Clone.NameID = Me.NameID
    Clone.QType = Me.QType
    Clone.Text = Me.Text
    Clone.value = Me.value
    Clone.ValueSize = Me.ValueSize
    Clone.ValueType = Me.ValueType
    Clone.Visible = Me.Visible
    Clone.Sort = Me.Sort
    Clone.ColumnWidth = Me.ColumnWidth
    Clone.EntityName = Me.EntityName
    Clone.Entity = Me.Entity
    Clone.CategoryData = Me.CategoryData
    Clone.DictNameID = Me.DictNameID
    Clone.halign = Me.halign
    Clone.KeyField = Me.KeyField
    Clone.LControl = Me.LControl
    
    Set Clone.QT = Me.QT
End Function

Private Sub Class_Initialize()
    NSIValidate = True
End Sub

Public Sub LogicControlInit()
Dim col As Collection
Dim i As Integer
Dim lvar As String



    If Len(LControl) = 0 Then Exit Sub
    
    Set col = Helper.Spliter(LControl, ";")
    For i = 1 To col.Count
        lvar = col(i)
        
        Select Case lvar
            Case "+", "-", "0+", "-0", "-+"
                NumericSign = lvar
                
        End Select
    Next
    
End Sub

Attribute VB_Name = "SearchForm"
Attribute VB_Base = "0{6B8604D5-B62E-4C56-99CA-0B2DEB6B0214}{E2748C51-0076-4D82-87FD-D01E9E76F294}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False


Option Explicit

Public nsi As NSIClass
Public Target As Range



Private Sub lbIn_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    If lbIn.ListIndex <> -1 Then Call OKButton_Click
End Sub

Private Sub OKButton_Click()
    Target.value = lbIn.Text
    Unload Me
End Sub

Private Sub tbIn_Change()
Dim col As Long

        'If tbIn.Text = "" Then
            'Call AutoFilterClear
        'Else
            Helper.UnProtect GlobalModule.nsi
            col = GlobalModule.nsi.Range(nsi.ValueColumn.col & "1").Column
            Union(GlobalModule.nsi.Range(nsi.ValueColumn.col & "1"), nsi.RangeValue).AutoFilter field:=1, Criteria1:="=*" & tbIn.Text & "*"
            'Helper.Protect GlobalModule.nsi
        'End If
    Call AddListItem
End Sub

Private Sub UserForm_Initialize()
    
End Sub

Public Sub Set_Nsi(ByVal n As NSIClass, ByVal R As Range)

If Not nsi Is Nothing Then
    GlobalModule.nsi.Range(nsi.ValueColumn.col & "1").AutoFilter '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
End If

    Set nsi = n
    Set Target = R
    Call tbIn_Change
    
End Sub



Private Sub AddListItem()
    Dim R As Range
    On Error Resume Next
    lbIn.Clear
    OKButton.Enabled = False
    Set R = nsi.RangeValue.SpecialCells(xlCellTypeVisible)
    If err <> 0 Then Exit Sub

    For Each R In nsi.RangeValue.SpecialCells(xlCellTypeVisible)
        lbIn.AddItem R.value
    Next R
    lbIn.ListIndex = 0
    OKButton.Enabled = True
End Sub

Private Sub AutoFilterClear()
Dim R As Range

Set R = GlobalModule.nsi.Range(nsi.ValueColumn.col & "1")
Helper.UnProtect R.Worksheet
R.AutoFilter
'Helper.Protect R.Worksheet
   ' Union(R, nsi.RangeValue).AutoFilter field:=1
   ' R.Sort Key1:=R, header:=xlYes

End Sub

Private Sub UserForm_Terminate()
    Call AutoFilterClear
End Sub
Attribute VB_Name = "SurveyMetaItem"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Public key As String
Public value As String
Public row As Integer



Attribute VB_Name = "|fffd||fffd||fffd||fffd|1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "|fffd||fffd||fffd||fffd|10"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "|fffd||fffd||fffd||fffd|11"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "|fffd||fffd||fffd||fffd|12"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "|fffd||fffd||fffd||fffd|2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "|fffd||fffd||fffd||fffd|3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "|fffd||fffd||fffd||fffd|4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "|fffd||fffd||fffd||fffd|5"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "|fffd||fffd||fffd||fffd|6"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "|fffd||fffd||fffd||fffd|7"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "|fffd||fffd||fffd||fffd|8"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "|fffd||fffd||fffd||fffd|9"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub CommandButton1_Click()
GlobalModule.Submit
End Sub
Attribute VB_Name = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True


Private Sub Workbook_BeforeClose(Cancel As Boolean)
    GlobalModule.Workbook_BeforeClose Cancel
End Sub

Private Sub Workbook_BeforeSave(ByVal SaveAsUI As Boolean, Cancel As Boolean)
    GlobalModule.Workbook_BeforeSave SaveAsUI, Cancel
End Sub

Private Sub Workbook_SheetSelectionChange(ByVal Sh As Object, ByVal Target As Range)
    If Right(Sh.name, 4) = "Meta" Then Exit Sub
    GlobalModule.WorksheetSelection_Change Target
End Sub

Private Sub Workbook_SheetChange(ByVal Sh As Object, ByVal Target As Range)
If Right(Sh.name, 4) = "Meta" Then Exit Sub
    GlobalModule.Worksheet_Change Target
End Sub

Private Sub Workbook_SheetFollowHyperlink(ByVal Sh As Object, ByVal Target As Hyperlink)
If Right(Sh.name, 4) = "Meta" Then Exit Sub
    GlobalModule.Worksheet_FollowHyperlink Target
End Sub


Private Sub Workbook_SheetBeforeDoubleClick(ByVal Sh As Object, ByVal Target As Range, Cancel As Boolean)
If Right(Sh.name, 4) = "Meta" Then Exit Sub
    GlobalModule.Worksheet_BeforeDoubleClick Target, Cancel
End Sub



' InQuest injected base64 decoded content
' (^rA
' x)br

INQUEST-PP=macro
