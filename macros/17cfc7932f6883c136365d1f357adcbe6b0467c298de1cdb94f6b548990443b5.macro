Attribute VB_Name = "FourierTransform"
'|fffd|t|fffd|[|fffd||fffd||fffd|G|fffd||3ca||fffd|
Public Function Fourier(rows As Variant, Optional window As String) As Variant

    Dim rowCount As Long
    Dim n As Double
   
    '2|fffd||302||fffd||fffd||60a9||fffd|H|fffd||fffd||fffd||5c2||fffd|
    n = Log(rows.count) / Log(2)
    
    If n = Int(n) Then
        ' |fffd|f|fffd|[|fffd|^|fffd||90||fffd||fffd||fffd||fffd|Q|fffd||302||fffd||fffd||fffd||302||182||fffd|
        ' FFT
        Fourier = FFT(rows, 1#, window)
    Else
        ' DFT
        Fourier = DFT(rows, 1#, window)
    End If
    
End Function

'|fffd|t|fffd|t|fffd|[|fffd||fffd||fffd|G|fffd||3ca||fffd|
Public Function IFourier(rows As Variant, Optional window As String) As Variant

    Dim rowCount As Long
    Dim n As Double

    '2|fffd||302||fffd||fffd||60a9||fffd|H|fffd||fffd||fffd||5c2||fffd|
    n = Log(rows.count) / Log(2)
    
    If n = Int(n) Then
        ' |fffd|f|fffd|[|fffd|^|fffd||90||fffd||fffd||fffd||fffd|Q|fffd||302||fffd||fffd||fffd||302||182||fffd|
        ' FFT
        IFourier = FFT(rows, -1#, window)
    Else
        ' DFT
        IFourier = DFT(rows, -1#, window)
    End If
    
End Function



'|fffd|t|fffd|[|fffd||fffd||fffd|G|fffd||3ca||fffd|(|fffd||fffd||392|l|fffd|o|fffd||fffd|)
Public Function FourierAbs(rows As Variant, Optional window As String) As Variant

    Dim rowCount As Long
    Dim n As Double

    '2|fffd||302||fffd||fffd||60a9||fffd|H|fffd||fffd||fffd||5c2||fffd|
    n = Log(rows.count) / Log(2)
    
    If n = Int(n) Then
        ' |fffd|f|fffd|[|fffd|^|fffd||90||fffd||fffd||fffd||fffd|Q|fffd||302||fffd||fffd||fffd||302||182||fffd|
        ' FFT
        FourierAbs = FFTAbs(rows, 1#, window)
    Else
        ' DFT
        FourierAbs = DFTAbs(rows, 1#, window)
    End If
    
End Function


'|fffd|t|fffd|t|fffd|[|fffd||fffd||fffd|G|fffd||3ca||fffd|(|fffd||fffd||392|l|fffd|o|fffd||fffd|)
Public Function IFourierAbs(rows As Variant, Optional window As String) As Variant

    Dim rowCount As Long
    Dim n As Double

    '2|fffd||302||fffd||fffd||60a9||fffd|H|fffd||fffd||fffd||5c2||fffd|
    n = Log(rows.count) / Log(2)
    
    If n = Int(n) Then
        ' |fffd|f|fffd|[|fffd|^|fffd||90||fffd||fffd||fffd||fffd|Q|fffd||302||fffd||fffd||fffd||302||182||fffd|
        ' FFT
        IFourierAbs = FFTAbs(rows, -1#, window)
    Else
        ' DFT
        IFourierAbs = DFTAbs(rows, -1#, window)
    End If
    
End Function



'FFT|fffd||590||fffd|
Public Function FFT(rows As Variant, id As Double, Optional window As String) As Variant

    Dim re() As Double
    Dim im() As Double
    Dim imaginary() As String
    
    'GetRowsArray rows, re(), "FFT"
    
    'ReDim im(UBound(re))
    RowsToReIm rows, re, im, window
        
    ' FFT|fffd||30c|v|fffd|Z
    FftCalc re, im, id
    
    ' |fffd|Z|fffd||fffd||fffd||582||315|\|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||30d||c42c|
    GetImaginaryStringArr re, im, imaginary
    
    FFT = WorksheetFunction.Transpose(imaginary)

End Function

'FFT|fffd|i|fffd|p|fffd||fffd||fffd|[|fffd|X|fffd|y|fffd|N|fffd|g|fffd||fffd||fffd|o|fffd||341|j
Public Function FFTAbs(rows As Variant, id As Double, Optional window As String) As Variant

    Dim re() As Double
    Dim im() As Double
    Dim imAbs() As Double
    
    'GetRowsArray rows, re(), "FFT"
    
    'ReDim im(UBound(re))
    
    RowsToReIm rows, re, im, window
    
    ' FFT|fffd||30c|v|fffd|Z
    FftCalc re, im, id
    
    ' |fffd|Z|fffd||fffd||fffd||582||315|\|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||30d||c42c||fffd|i|fffd|p|fffd||fffd||fffd|[|fffd|X|fffd|y|fffd|N|fffd|g|fffd||fffd||fffd|j
    GetImAbsArr re, im, imAbs
    
    FFTAbs = WorksheetFunction.Transpose(imAbs)

End Function

' FFT|fffd||30c|v|fffd|Z
' re() |fffd||fffd||fffd||fffd||fffd||314|z|fffd||fffd| |fffd|Y|fffd||fffd||fffd||fffd||fffd||fffd|1|fffd|`N|fffd||243|f|fffd|[|fffd|^|fffd||fffd||fffd|i|fffd|[|fffd||302||fffd||fffd||fffd|
' im() |fffd||fffd||fffd||fffd||fffd||314|z|fffd||fffd| |fffd|Y|fffd||fffd||fffd||fffd||fffd||fffd|1|fffd|`N|fffd||243|f|fffd|[|fffd|^|fffd||fffd||fffd|i|fffd|[|fffd||302||fffd||fffd||fffd|
' id 1|fffd||302||182||fffd|FFT|fffd|A|fffd|@-1|fffd||302||182||fffd||fffd|tFFT
Private Sub FftCalc(re() As Double, im() As Double, id As Double)

    Dim i, i0, i1, j, ns, k, arg As Long
    Dim sinVal, cosVal, radTemp, re1, im1, th As Double
    
    Dim n As Long
    n = UBound(re)
    
    ns = n / 2
    radTemp = 2# * 4# * Atn(1#) / n
    
    Do While ns >= 1
    
        arg = 0
        
        For j = 1 To n Step 2 * ns
        
            k = n / 4
            
            th = -id * radTemp * arg
            cosVal = Cos(th)
            sinVal = Sin(th)
            
            For i0 = j To j + ns - 1
            
                i1 = i0 + ns
                
                re1 = re(i1) * cosVal - im(i1) * sinVal
                im1 = re(i1) * sinVal + im(i1) * cosVal
                
                re(i1) = re(i0) - re1
                im(i1) = im(i0) - im1
                
                re(i0) = re(i0) + re1
                im(i0) = im(i0) + im1

            Next
            
            Do While k <= arg
                arg = arg - k
                k = k / 2
                If k = 0 Then Exit Do
            Loop
            
            arg = arg + k

        Next
        
        ns = ns / 2
        
    Loop
    
    ' |fffd|t|fffd||3ca||fffd||fffd||302||182||fffd|
    If id < 0 Then
        For i = 1 To n
            re(i) = re(i) / n
            im(i) = im(i) / n
        Next
    End If
    
    j = 1
    For i = 1 To n - 1
        If i <= j Then
            re1 = re(i)
            re(i) = re(j)
            re(j) = re1
            
            im1 = im(i)
            im(i) = im(j)
            im(j) = im1
        End If
        
        k = n / 2
        
        Do While k < j
            j = j - k
            k = k / 2
        Loop
        
        j = j + k
    
    Next

End Sub

'DFT|fffd||590||fffd|
Public Function DFT(rows As Variant, id As Double, Optional window As String) As Variant

    Dim re() As Double
    Dim im() As Double
    Dim imaginary() As String
    
    'GetRowsArray rows, re()
    
    'ReDim im(UBound(re))
    
    RowsToReIm rows, re, im, window
        
    ' DFT|fffd||30c|v|fffd|Z
    DftCalc re, im, id
    
    ' |fffd|Z|fffd||fffd||fffd||582||315|\|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||30d||c42c|
    GetImaginaryStringArr re, im, imaginary
    
    DFT = WorksheetFunction.Transpose(imaginary)

End Function


'DFT|fffd||590||fffd|(|fffd|p|fffd||fffd||fffd|[|fffd|X|fffd|y|fffd|N|fffd|g|fffd||fffd||fffd|o|fffd||fffd|)
Public Function DFTAbs(rows As Variant, id As Double, Optional window As String) As Variant

    Dim re() As Double
    Dim im() As Double
    Dim imAbs() As Double
    
    'GetRowsArray rows, re()
    'ReDim im(UBound(re))
    
    RowsToReIm rows, re, im
    
    ' DFT|fffd||30c|v|fffd|Z
    DftCalc re, im, id
    
    ' |fffd|Z|fffd||fffd||fffd||582||315|\|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||30d||c42c|
    GetImAbsArr re, im, imAbs
    
    DFTAbs = WorksheetFunction.Transpose(imAbs)
   

End Function

' |fffd|Z|fffd||fffd||fffd||314|z|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||18b||fffd||fffd||fffd||fffd||314|z|fffd||fffd||255||fffd||fffd||fffd||fffd||fffd|
Private Sub RowsToReIm(rows As Variant, re() As Double, im() As Double, Optional window As String)
    Dim count As Long
    
    count = rows.count
    
    ReDim re(count)
    ReDim im(count)
    
    Dim i As Long
    
    For i = 1 To count
        re(i) = WorksheetFunction.ImReal(rows(i).Cells)
        im(i) = WorksheetFunction.imaginary(rows(i).Cells)
    Next
    
     ' |fffd||fffd||fffd||590||fffd|
    FFTWindow re, window
    FFTWindow im, window
    
End Sub


' DFT|fffd||30c|v|fffd|Z
' re() |fffd||fffd||fffd||fffd||fffd||314|z|fffd||fffd| |fffd|Y|fffd||fffd||fffd||fffd||fffd||fffd|1|fffd|`N|fffd||243|f|fffd|[|fffd|^|fffd||fffd||fffd|i|fffd|[|fffd||302||fffd||fffd||fffd|
' im() |fffd||fffd||fffd||fffd||fffd||314|z|fffd||fffd| |fffd|Y|fffd||fffd||fffd||fffd||fffd||fffd|1|fffd|`N|fffd||243|f|fffd|[|fffd|^|fffd||fffd||fffd|i|fffd|[|fffd||302||fffd||fffd||fffd|
' id 1|fffd||302||182||fffd|FFT|fffd|A|fffd|@-1|fffd||302||182||fffd||fffd|tFFT
Private Sub DftCalc(re() As Double, im() As Double, id As Double)

    Dim i, t As Long
    Dim radTemp As Double
    
    ' |fffd|f|fffd|[|fffd|^|fffd||90||fffd|
    Dim n As Long
    n = UBound(re)
    
    ' |fffd|f|fffd|[|fffd|^|fffd||90||fffd||fffd||314||fffd||fffd||fffd||fffd||702||fffd|
    Dim i1 As Long
    i1 = Int(n / 2)
    
    Dim reTemp(), imTemp() As Double
    
     
    'ReDim reTemp(i1 + 1)
    'ReDim imTemp(i1 + 1)
    ReDim reTemp(n)
    ReDim imTemp(n)
    
    
    ' Cos,Sin|fffd||312|l|fffd||fffd||fffd||24c|v|fffd|Z|fffd||fffd||fffd||102||fffd||fffd||fffd|
    Dim cosVal(), sinVal()  As Double
    ReDim cosVal(n - 1)
    ReDim sinVal(n - 1)
    
    radTemp = -id * 2# * 4# * Atn(1#) / n
    
    For i = 0 To n - 1
        cosVal(i) = Cos(radTemp * i)
        sinVal(i) = Sin(radTemp * i)
    Next
    
    Dim thIndex As Long
    Dim reSum, imSum As Double
    
    ' |fffd|f|fffd|[|fffd|^|fffd||fffd||fffd||fffd|DFT
    'For t = 0 To i1
    For t = 0 To n - 1
    
        reSum = 0
        imSum = 0
    
        For i = 0 To n - 1
            
            thIndex = (i * t) Mod n
                 
            reSum = reSum + re(i + 1) * cosVal(thIndex) - im(i + 1) * sinVal(thIndex)
            imSum = imSum + re(i + 1) * sinVal(thIndex) + im(i + 1) * cosVal(thIndex)
        
        Next
        
        reTemp(t + 1) = reSum
        imTemp(t + 1) = imSum
        
        If id < 0 Then
            reTemp(t + 1) = reTemp(t + 1) / n
            imTemp(t + 1) = imTemp(t + 1) / n
        End If
        
    Next
    
    ' |fffd||fffd||fffd||282||fffd||fffd||fffd||fffd||314|z|fffd||fffd||256||7c2||fffd|
    For t = 1 To n  'i1 + 1
        re(t) = reTemp(t)
        im(t) = imTemp(t)
    Next

End Sub


Private Sub FFTWindow(x() As Double, window As String)

    ' |fffd||fffd||fffd||590||fffd|
    Select Case window
        Case "Hamming"
            HammingWindow x
        
        Case "Hanning"
            HanningWindow x
        
        Case "Blackman"
            BlackmanWindow x
        
    End Select
End Sub

' |fffd|n|fffd|~|fffd||fffd||fffd|O|fffd||fffd|
Private Sub HammingWindow(x() As Double)
    Dim i, n As Long
    Dim radTemp As Double
    
    n = UBound(x)
    
    radTemp = 2# * 4# * Atn(1#) / n
    
    For i = 1 To n
        x(i) = x(i) * (0.54 - 0.46 * Cos(radTemp * (i - 1)))
    Next
    
End Sub

' |fffd|n|fffd|j|fffd||fffd||fffd|O|fffd||fffd|
Private Sub HanningWindow(x() As Double)
    Dim i, n As Long
    Dim radTemp As Double
    
    n = UBound(x)
    
    radTemp = 2# * 4# * Atn(1#) / n
    
    For i = 1 To n
        x(i) = x(i) * 0.5 * (1# - Cos(radTemp * (i - 1)))
    Next
    
End Sub

' |fffd|u|fffd||fffd||fffd|b|fffd|N|fffd|}|fffd||fffd||fffd||fffd|
Private Sub BlackmanWindow(x() As Double)
    Dim i, n As Long
    Dim radTemp As Double
    
    n = UBound(x)
    
    radTemp = 2# * 4# * Atn(1#) / n
    
    For i = 1 To n
        x(i) = x(i) * (0.42 - 0.5 * Cos(radTemp * (i - 1)) + 0.08 * Cos(2# * radTemp * (i - 1)))
    Next
    
End Sub


Private Sub GetRowsArray(rows As Variant, data() As Double, Optional dataType As String)

    Dim dataCount As Long
    Dim i As Long
    Dim rowCount As Long
    Dim n As Double
    
    rowCount = rows.count
    
    If dataType = "FFT" Then
        '2|fffd||302||fffd||fffd||60a9||fffd|H|fffd||fffd||fffd||5c2||fffd|
        n = Log(rowCount) / Log(2)
        
        '2|fffd||302||fffd||fffd||fffd||250||602||fffd|l|fffd||7c2||fffd|
        rowCount = 2 ^ Int(n)
    End If
    
    ReDim data(rowCount)
      
    For i = 1 To rowCount
        data(i) = rows(i, 1)
    Next

End Sub

Private Sub GetImaginaryStringArr(re() As Double, im() As Double, imginary() As String)

    Dim i, count As Long
    
    Dim strRe, strIm As String

    count = UBound(re)
    ReDim imginary(count - 1)

    For i = 1 To count
      
        strRe = str(re(i))

        If im(i) = 0 Then
            strIm = ""
        ElseIf im(i) > 0 Then
            strIm = " + " + str(im(i)) + "i"
        Else
            strIm = " - " + str(Abs(im(i))) + "i"
        End If

        imginary(i - 1) = strRe + strIm
    Next

End Sub

Private Sub GetImAbsArr(re() As Double, im() As Double, imAbs() As Double)

    Dim i, count As Long
    Dim p As Double

    count = UBound(re)
    ReDim imAbs(count - 1)
    
    For i = 1 To count
        imAbs(i - 1) = Sqr(re(i) * re(i) + im(i) * im(i))
    Next

End Sub






Attribute VB_Name = "Sheet2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True


INQUEST-PP=macro
