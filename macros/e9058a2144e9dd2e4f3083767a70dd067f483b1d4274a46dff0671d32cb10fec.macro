Attribute VB_Name = "KS1Data"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Module1"
    
Attribute VB_Name = "Sheet2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "VersionInfo"
'********************************************************************************************
'*                                                                                          *
'*                              VERSION CONTROL INFORMATION                                 *
'*                                                                                          *
'********************************************************************************************
'   v1.0 - 3/06/2019 - M Eynon
'   Changed to v1.0 for release following Customer and TDU sign off.
'
'   v0.2 - 0.7 29/05/2019 - M Eynon
'   Updates include:
'   update data validtion for DOB so it is for all DOB cells
'   removed LAs 835, 836, 837, added 838, 839
'   added sort function so if row 21 is left blank it will be removed in export process
'   NOTSEN removed from P scales as requested by customer
'   amend spellnig mistake
'
'   v0.1 - 20/12/2018 - M Eynon
'   Rolled over from 2018.
'   Updated DOB ranage, changed DOB validation to show a warning message as opposed to an error when DOB ouside of expected range entered.
'   Updated TA Result codes for Reading, Writing and Maths (Removed PKF, added PK1, PK2, PK3 PK4)
'   Updated P scales values for Reading, Writing, Speaking, Listening, Number, Using & Applying, Shape Space & Measure (removed P5, P6, P7, P8)
'

'   v1.1 - 13/6/2018 - M Eynon
'   Input Sheet not exporting DOB correctly in the exported CSV file, coming out as a date reference number rather than a date format.
'   Updated the code with basExport module as follows:
'
'   Removed: Range("E" & lFIRSTPUPILROW & ":E" & lLASTPUPILROW).NumberFormat = "dd/mm/yyyy;@"
'   Replaced with: Range("H:H").NumberFormat = "dd/mm/yyyy;@"
'   IRFC TDU0159 applies


'   v1.0 - 14/5/2018 - M Eynon
'   Changed to v1.0 for release following Customer and TDU sign off.

'   v0.2 - 2/5/2018 - M Eynon
'   Removed 'blank' option from Science TA code

'   v0.1 - 2/5/2018 - M Eynon
'   Rolled over from 2017. Updated TA codes for Reading, Writing, Maths & Science

'   v1.2 Released following Customer and TDU sign off.

'   v1.1.3 - 2016-06-02 - S Stacey
'   Further expansion following rewrite of Excel VBA
'   * The test for p-scales has been rewritten into VBA which should offer us some more flexibility for when they inevitably change.
'   * Similarly, the test for assessments has also been rewritten as VBA.
'   * Between them, these saved a large number of columns and computations.  I've therefore cleaned up the data entry worksheet and removed redundant information.
'   * Instead of the concatenation method, I've used a call to RangeHasText to determine whether pupil or p-scale information is populated.  Should be a touch quicker.
'   * The cleanup means we have less hassle needed in order to trim the extraneous data from the workbook - just nuke cols U->AR and any trailing rows.
'   * Annotated functions, ran through code analyser and fixed final issues.

'   v1.1.2 - 2016-06-01 - S Stacey
'   Full refactor of VBA code.  Summary of changes:
'   * There were four functions that were doing pretty much the same thing - running through a column of cells in the 'Child' area and flagging up an error if a cell was blank,
'       non-zero or a value that was not contained in an enumeration (M, F).  This has been replaced with a single multipurpose function.
'   * Instead of aborting validation at the first error, the worksheet will attempt to evaluate all conditions and display a list of any faults found.  This should help schools
'       address multiple problems per-run of the code.
'   * The UPN check is through VBA, via some code I wrote for EYFSP last year.  This function is available from Excel, and is used to show the 'Invalid UPN' message in the relevant column.
'       I've also simplified the 'Duplicate UPN' test.  At present I haven't removed the UPN area, but this whole section of code is now redundant.
'   * The original preparation/export code is now split into logical groups of operations.  The first block performs validation of the workbook.  The second block, after a prompt to
'       the user, manipulates the structure of the workbook.  The final block writes the data to .csv.
'   * Change to the prompt to the user - a vbCritical should not be used in a question dialog box.
'   * Cleaned up module-level and public variables - instead using arguments and function returns to pass data back and forth.
'   * Replaced the call to comdlg32 with a MSOFileDialog call - thus fixing the 64-bit issue.
'   * This has fixed the reported fault where a user could ignore the error dialog and export the data anyway, but I'm not certain why this originally was the case (unless the removal
'   of protection without it being subsequently reapplied was something to do with this).
'   * Removed macro recorder type code.
'   * Downgraded version of output to xlExcel8 (97-2003 format) and resaved as .xls
'   * Option Explicit enabled throughout.

'
'   v1.1.1 - 2016-05-26 - C Wood
'   Removed the programme and project management properties window from workbook
'   Removed HNM from the first row
'
'
'   v1.1 - 2016-05-11 - C Wood
'   Put Speaking and Listening pscales back in
'   updated references after the new column inserts
'   Released following Customer and TDU sign off.

'   v1.0 - 2016-05-10 - C Wood
'   Changed to v1.0 for release following Customer and TDU sign off.

'   v0.2.1 - 2016-05-05 - C Wood
'   Updated the enumeration for the Teacher Assessments

'   v0.2 - 2016-05-05 - C Wood
'   Moved reference data onto it's own sheet, protected and made hidden
'   Removed redundant columns
'   re-linked all vba hard coded references
'   Modified the last 10 rows DOB validation to warnings to allow the insertion of pupils that are_
'   correctly out of DOB range - advised by Tower Hamlets LA

'   v0.1 - modifications made to roll over dates

Attribute VB_Name = "basExport"
Option Explicit

Public Const lFIRSTPUPILROW As Long = 21
Public Const lLASTPUPILROW As Long = 170
Public Const sVALCOL As String = "AQ"

Private Function IsCellEmpty(sCellRef As String, ByRef sContainer As String) As Boolean
'Tests to see whether a cell is empty.  If so returns TRUE.
'Otherwise, the second parameter is set to the text of the cell concerned.

Dim bRetVal As Boolean
    bRetVal = False
    If IsEmpty(Range(sCellRef)) Then
        bRetVal = True
    Else
        sContainer = Range(sCellRef).Value
    End If
    IsCellEmpty = bRetVal
End Function

Public Sub CopyToNewWorksheet()
Dim wbkMain As Excel.Workbook
Dim wbkNew As Excel.Workbook
Dim wksNew As Excel.Worksheet
    
    Application.EnableEvents = False
    Set wbkMain = ActiveWorkbook
    Set wbkNew = Workbooks.Add
    Set wksNew = wbkNew.Worksheets(1)
    wbkMain.Worksheets("KS1Data").Range("A19:I170").Copy
    wksNew.Range("D1").PasteSpecial xlPasteValues
    wbkMain.Worksheets("KS1Data").Range("K19:T170").Copy
    wksNew.Range("M1").PasteSpecial xlPasteValues
    wbkMain.Worksheets("KS1Data").Range("A6:A8").Copy
    wksNew.Range("A1").PasteSpecial xlPasteValues, , , True
    wbkMain.Worksheets("KS1Data").Range("B6:B8").Copy
    wksNew.Range(Range("D65535").End(xlUp).Offset(0, -1), "A3").PasteSpecial xlPasteValues, , , True
    Range("H:H").NumberFormat = "dd/mm/yyyy;@"
    Application.EnableEvents = True
End Sub

Private Sub ClearNonPupilInformation()
'Deletes data to the right of and below the pupil information.  Only deletes data below if any is detected (otherwise this would cause extended run-times on Office 2007+).
'Deletes columns U through AQ as these contain validation helper information.
'Does not delete rows 1 through 18 - this is done later in PrepareForExport.

Dim objWS As Excel.Worksheet
Dim lEndRow As Long
Set objWS = ThisWorkbook.Worksheets("KS1Data")
    lEndRow = objWS.Cells(objWS.Rows.Count, "A").End(xlUp).Row
    If lEndRow > lLASTPUPILROW Then
        Range("A" & lEndRow & ":A" & (lLASTPUPILROW + 1)).EntireRow.ClearContents
    End If
    Range("U1:AQ1").EntireColumn.Delete         'Admin columns for validation
    Range("J1").EntireColumn.Delete             'UPN Check column
End Sub

Private Sub PrepareForExport()
    'format date in DOB column
    Range("E" & lFIRSTPUPILROW & ":E" & lLASTPUPILROW).NumberFormat = "dd/mm/yyyy;@"

    'copy & paste values of all cells to remove formulae
    Cells.Copy
    Range("A1").PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks:=False, Transpose:=False

    'find last row on which pupil data entered & remove any blank rows, counting no of rows removed
    ClearNonPupilInformation
    
    'insert 3 new columns to left of existing
    Columns("A:C").Insert Shift:=xlToRight

    'Head new columns sSchName/sLEANo/sSchoolNo
    Range("D6:D8").Copy
    Range("A20").PasteSpecial Paste:=xlPasteAll, Transpose:=True

    'copy and paste sSchName/sLEANo/sSchoolNo into new columns
    Range("E6:E8").Copy
    Range("D" & lFIRSTPUPILROW, Range("D" & (lLASTPUPILROW + 1)).End(xlUp)).Offset(0, -3).PasteSpecial Paste:=xlPasteAll, Transpose:=True

    'delete rows above pupil data - SS: Leaving this until after the transpositions take place as otherwise the ranges will be awkward to calculate
    Range("A1:A18").EntireRow.Delete        '****************Check***************
End Sub

Private Sub AttemptCSVOutput(sSchoolNo As String, sLEANo As String, bIsMaintained As Boolean)
'Tries to write the file as a CSV to the location of a user's choice.  Does not allow modification of the filename as this is not permitted by the KS1 specification.
    
    Dim sFilename As String
    Dim sDirName As String

    If Not bIsMaintained Then
        sFilename = "KS1_" & sSchoolNo & "_19.csv"
    Else
        sFilename = "KS1_" & sLEANo & sSchoolNo & "_19.csv"
    End If

    If GetFolder(sDirName) Then
        ActiveWorkbook.SaveAs sDirName & sFilename, xlCSV
        MsgBox "File saved as " & sDirName & sFilename & " - click ok to close"
    Else
        MsgBox "User cancelled save operation.  You will need to re-run the code in order to export the data."
    End If
    ActiveWorkbook.Close (False)
End Sub

Public Function Validates(sSchoolNo As String, sLEANo As String, bIsMaintained As Boolean) As Boolean
Attribute Validates.VB_ProcData.VB_Invoke_Func = " \n14"
'Wrapper for all validation routines. Returns TRUE if the workbook passes validation.  If the workbook fails validation,
'returns FALSE after displaying a dialog to the user showing all issues detected.
    
    Dim sSchName As String
    Dim sYesNo As String
    Dim sErrMsg As String
    Dim iNumberPupils As Integer
    Dim bFailsToValidate As Boolean
        
    bIsMaintained = False
    bFailsToValidate = False
    sErrMsg = vbNullString
    
    'Check that at least one pupil is recorded
    iNumberPupils = Range("U20").Value
    If iNumberPupils = 0 Then
        sErrMsg = sErrMsg & "You have not entered any pupil details" & vbNewLine
        bFailsToValidate = True
    End If

    'Get school name
    If IsCellEmpty("B6", sSchName) Then
        sErrMsg = sErrMsg & "You need to enter your School Name" & vbNewLine
        bFailsToValidate = True
    End If

    'Get LA number
    If IsCellEmpty("B7", sLEANo) Then
        sErrMsg = sErrMsg & "You need to enter your LA number" & vbNewLine
        bFailsToValidate = True
    End If

    'Get Estab
    If IsCellEmpty("B8", sSchoolNo) Then
        sErrMsg = sErrMsg & "You need to enter your DfE School Number" & vbNewLine
        bFailsToValidate = True
    End If

    'Establish whether school is maintained
    If IsCellEmpty("D6", sYesNo) Then
        sErrMsg = sErrMsg & "You need to say whether the school is LA-maintained or not" & vbNewLine
        bFailsToValidate = True
    End If
    bIsMaintained = UCase$(sYesNo) = "YES"
    
    'check that Pscales are not entered for line with no pupil details
    If Range("W20").Value > 0 Then
        If HasEmptyOrInvalidCells(Range("W" & lFIRSTPUPILROW), "P Scales exist on a line where there are no pupil details.  Please enter the pupil details or remove the P Scales ", " 0 ", sErrMsg) Then
            bFailsToValidate = True
        End If
    End If

    'Update for v1.2 CWood - 26/05/2016
    'check that all "BLW" values have a Pscale entry
    If bIsMaintained Then    'LA Maintained School
        If Range("AB20").Value > 0 Then
            If HasEmptyOrInvalidCells(Range("AB" & lFIRSTPUPILROW), "P Scale level must be entered for the subject where the KS1 TA level is BLW. Please enter correct P Scale details ", " 0 ", sErrMsg) Then
                bFailsToValidate = True
            End If
        End If
    End If

    'Update for v1.2 CWood - 26/05/2016
    'check that all Pscales entries have a "BLW" or "HNM" value
    If bIsMaintained Then    'LA Maintained School
        If Range("AM20").Value > 0 Then
            If HasEmptyOrInvalidCells(Range("AM" & lFIRSTPUPILROW), "P Scale level is not appropriate unless the KS1 TA level is BLW (or HNM for Science). Please enter the correct KS1 TA level or P Scale details ", " 0 ", sErrMsg) Then
                bFailsToValidate = True
            End If
        End If
    End If

    'Check that no pupil details are missing (SS:2016 - separated from formal validation checks for clarity)
    If Range(sVALCOL & "21").Value < iNumberPupils Then
        If HasEmptyOrInvalidCells(Range("A" & lFIRSTPUPILROW), "You need to add missing surname", vbNullString, sErrMsg) Then
            bFailsToValidate = True
        End If
    End If

    'Missing data check - Forename
    If Range(sVALCOL & "22").Value < iNumberPupils Then
        If HasEmptyOrInvalidCells(Range("B" & lFIRSTPUPILROW), "You need to add missing forename", vbNullString, sErrMsg) Then
            bFailsToValidate = True
        End If
    End If

    'Missing data check - UPN
    If bIsMaintained Then
        If Range(sVALCOL & "34").Value <> 0 Then
            If HasEmptyOrInvalidCells(Range("C" & lFIRSTPUPILROW), "You need to add missing UPN", vbNullString, sErrMsg) Then
                bFailsToValidate = True
            End If
        End If
    End If

    'Missing data check - UPN
    If bIsMaintained Then
        If Range(sVALCOL & "32").Value <> 0 Then
            If HasEmptyOrInvalidCells(Range("J" & lFIRSTPUPILROW), "You have duplicate UPNs", " Invalid UPN ", sErrMsg) Then
                bFailsToValidate = True
            End If
        End If
    End If

    'Missing data check - Gender (note there is a separate validation for gender further on)
    If Range(sVALCOL & "24").Value < iNumberPupils Then
        If HasEmptyOrInvalidCells(Range("D" & lFIRSTPUPILROW), "You need to add missing gender", vbNullString, sErrMsg) Then
            bFailsToValidate = True
        End If
    End If

    'Missing data check - DoB
    If Range(sVALCOL & "25").Value < iNumberPupils Then
        If HasEmptyOrInvalidCells(Range("E" & lFIRSTPUPILROW), "You need to add missing date of birth", vbNullString, sErrMsg) Then
            bFailsToValidate = True
        End If
    End If

    'Invalid UPN check
    If bIsMaintained Then
        If HasInvalidUPNs(Range("C" & lFIRSTPUPILROW), sErrMsg) Then
            bFailsToValidate = True
        End If
    End If

    'Invalid Gender check
    If HasEmptyOrInvalidCells(Range("D" & lFIRSTPUPILROW), "Invalid Gender code - enter M (for a boy) or F (for a girl),", " M F ", sErrMsg) Then
        bFailsToValidate = True
    End If

    'Missing data check - Scores
    If Range(sVALCOL & "30").Value <> (iNumberPupils * 4) Then
        If HasEmptyOrInvalidCells(Range("AO" & lFIRSTPUPILROW), "You have missing level(s) ", " 0 ", sErrMsg) Then
            bFailsToValidate = True
        End If
    End If
    
    If bFailsToValidate Then
        MsgBox sErrMsg & vbNewLine & "Ctrl+C will send a copy of this error message to clipboard."
    End If

    Validates = Not (bFailsToValidate)

End Function

Public Sub SortInputData()
    Application.EnableEvents = False
    KS1Data.Range("A21:T170").Sort Key1:=Range("A21"), Order1:=xlAscending
    Range("u21:u170").FormulaR1C1 = "=RangeHasText(RC[-20]:RC[-12])"
    Application.EnableEvents = True
End Sub


Public Sub MainExport()
'Main wrapper function.  Used to hold the glue code that didn't logically fit in the subprocesses.
'TODO: Consider, instead of modifying 'this' workbook, just copypasta to a fresh workbook and save that.
'It'll save us at least one file operation and will be more amenable to work on / test.

    Dim sSchoolNo As String
    Dim sLEANo As String
    Dim bIsMaintained As Boolean
    Dim sUIMessage As String
    Dim lResp As VbMsgBoxResult
    Dim sFilename As String
    
    sFilename = CurDir() & "\" & ThisWorkbook.Name

    'SS - Revision, March 30 2012.
    'ActiveWorkbook.Save is not appropriate for Excel 2007 and above - a file format should
    'be supplied.  I'm adding a handler for Excel 2007 as a piecemeal patch but not touching
    'the rest of the code contained within the project as it's not one of our products.
    If Val(Application.Version) < 12 Then
        'Excel 2003 and earlier - just use the originally supplied command.
        'This should no longer be necessary as Office 2003 is a year out of support.  Suggest removal for 2017.
        ActiveWorkbook.Save
    Else
        Application.DisplayAlerts = False
        ActiveWorkbook.SaveAs Filename:=sFilename, FileFormat:=xlExcel8
        Application.DisplayAlerts = True
    End If

    UnprotectWB
    Worksheets("Reference").Range("U1:AO1").Copy
    With Worksheets("KS1Data")
        .Range("U21:U170").PasteSpecial xlPasteAll
        .Range("U1:AQ1").EntireColumn.Hidden = False
        .Range("F21:I170").Copy
        .Range("F21").PasteSpecial xlPasteAll
        .Range("K21:T170").Copy
        .Range("K21").PasteSpecial xlPasteAll
'        .Range("U1:AQ1").EntireColumn.Hidden = True
    End With
    
    Application.Calculate
    If Validates(sSchoolNo, sLEANo, bIsMaintained) Then
        sUIMessage = "Are you ready to export the data? The next dialog will allow you to save to a location of your choice."
        lResp = MsgBox(sUIMessage, vbYesNo + vbQuestion + vbDefaultButton2)
    
        If lResp = vbNo Then
            ProtectWB
        Else
            SortInputData
            CopyToNewWorksheet
'            PrepareForExport
            AttemptCSVOutput sSchoolNo, sLEANo, bIsMaintained
        End If
    End If
End Sub
Attribute VB_Name = "basLibrary"
Option Explicit

Private Const WBPASSWORD As String = "Scooter"

Public Sub UnprotectWB()
    ActiveSheet.Unprotect (WBPASSWORD)
End Sub

Public Sub ProtectWB()
    ActiveSheet.Protect (WBPASSWORD)
End Sub

Public Sub Dev()
    UnprotectWB
    Range("U1:AQ1").EntireColumn.Hidden = False
End Sub

Public Sub PFR()
'    Range("U1:AQ1").EntireColumn.Hidden = True
    ProtectWB
End Sub

Public Function GetFolder(ByRef sFoldername As String) As Boolean
'Replaces basSaveFileAs which was an old wrapper for comdlg32.  This wasn't pointer-safe under VBA7
'and thus failed on 64-bit builds of Office.  Now that the functionality is provided by Office VBA we can
'get rid of the old module and use this neater code.

Dim objFileD As office.FileDialog
Dim bRetVal As Boolean
    bRetVal = False
    Set objFileD = Application.FileDialog(msoFileDialogFolderPicker)
    objFileD.Title = "Select directory for output file"
    objFileD.AllowMultiSelect = False
    If objFileD.Show Then
        sFoldername = CStr(objFileD.SelectedItems(1)) & "\"
        bRetVal = True
    End If
    GetFolder = bRetVal
End Function

Public Function RangeHasText(rngCells As Excel.Range) As Boolean
'Selects a number of cells starting from sLocation and tests whether
'any of those in the relevant range have text input within them.
'Added Because Range("A2:F2").text doesn't return anything useful.
Dim bRetVal As Boolean
Dim rngTemp As Excel.Range
    For Each rngTemp In rngCells
        If Len(rngTemp.Text) <> 0 Then
            bRetVal = True
            Exit For
        End If
    Next rngTemp
    RangeHasText = bRetVal
End Function
Attribute VB_Name = "basValidate"
Option Explicit

Private Const CHECKVALUES = "ABCDEFGHJKLMNPQRTUVWXYZ"           'Excludes I, O, S to reduce confusion with numeric content in UPNs
Private Const CHECKVALMOD = 23                                  'Number of individual characters in $ above, used as MOD value

Public Function TestUPN(sUPN As String) As Boolean
Dim bRetVal As Boolean
Dim lChecksum As Long
Dim n As Long

' Routine created May 2015 for EYFSP workbook
' Tests UPNs against check digit algorithm.
    Application.Volatile
    
    If Len(sUPN) = 13 Then
        If InStr(Left$(CHECKVALUES, 10), Right$(sUPN, 1)) <> 0 Then  'Temporary UPN
            sUPN = Left$(sUPN, 12) & CStr((InStr(Left$(CHECKVALUES, 10), Right$(sUPN, 1)) - 1))
'            Debug.Print sUPN
        End If
        For n = 2 To 13
            If Mid$(sUPN, n, 1) >= "0" And Mid$(sUPN, n, 1) <= "9" Then
                lChecksum = lChecksum + CInt(Mid$(sUPN, n, 1)) * n
            End If
        Next n
'        Debug.Print lChecksum, lChecksum Mod 23, Mid$(CHECKVALUES, (1 + lChecksum Mod CHECKVALMOD), 1)
        bRetVal = Left$(sUPN, 1) = Mid$(CHECKVALUES, (1 + lChecksum Mod CHECKVALMOD), 1)
    End If
    TestUPN = bRetVal
End Function

Public Function HasInvalidUPNs(rngRef As Excel.Range, ByRef sErrMsg As String) As Boolean
'Cycles through the UPNs in the workbook, testing them one at a time.  Returns TRUE if validation fails.
'Ignores empty cells as this matches the behaviour of the original workbook.

Dim bRetVal As Boolean
Dim bFinished As Boolean
Dim lRow As Long
    bRetVal = False
    bFinished = False
    While Not bFinished
        lRow = rngRef.Row
        If Len(rngRef.Text) <> 0 Then
            If TestUPN(rngRef.Text) = False Then
                bFinished = True
                bRetVal = True
                sErrMsg = sErrMsg & "Invalid UPN - enter a valid UPN, starting on row " & lRow & vbNewLine
            End If
        End If
        
        Set rngRef = rngRef.Offset(1, 0)
        If rngRef.Row = 171 Then
            bFinished = True
        End If
    Wend
    HasInvalidUPNs = bRetVal
End Function

Public Function HasEmptyOrInvalidCells(rngRef As Excel.Range, _
    sCellError As String, _
    sCellCriteria As String, _
    ByRef sErrMsg As String) As Boolean
'The logic held in the previous workbook was: add the contents of columns 1 through 9 of the workbook together.
'If any of these cells contained data, all of them should contain data (acceptably validated).

Dim bRetVal As Boolean
Dim bFinished As Boolean
Dim lRow As Long
    bRetVal = False
    bFinished = False
    While Not bFinished
        lRow = rngRef.Row
        If RangeHasText(Range("A" & lRow & ":I" & lRow)) Then
            If (Len(sCellCriteria) = 0 And Len(rngRef.Text) = 0) Or _
                (Len(sCellCriteria) <> 0 And InStr(sCellCriteria, " " & rngRef.Text & " ") = 0) Then  'Empty, or we have a restricted set of values and the value supplied isn't in the list
                    bFinished = True            'Short-circuit the test as there's been a failure
                    bRetVal = True
                    sErrMsg = sErrMsg & sCellError & " starting on row " & lRow & vbNewLine
            End If
        End If
        Set rngRef = rngRef.Offset(1, 0)
        If rngRef.Row = 171 Then
            bFinished = True
        End If
    Wend
    HasEmptyOrInvalidCells = bRetVal
End Function

Public Function TestPScales(Subject As String, Assessment As String, ParamArray PScales() As Variant) As String
'Available from UI.  Purpose, check that a Subject with an assessment of "BLW" (Reading, writing, maths) or "HNM" (Science) has an
'associated p-scale value.  As the interlinks between a subject and a p-scale seem volatile, the user is permitted to provide as many
'p-scales for one subject as they desire.

Dim sRetVal As String
Dim sSearch As String
Dim vTemp As Variant
'We might in future need to provide a list of appropriate p-scales per subject in the following case statement.
'At the moment leaving out as the presence of a value in the p-scales table means it's been OK'd by the UI.
    
'I'm leaving this code in at the moment but this validation has been redacted as it's no longer present within
'COLLECT.  Therefore we simply set the return value to 0 (=no error) and exit.

    TestPScales = 0
    Exit Function
    
'The following is the original validation - left in as it may be used in a modified version later.
    
    Application.Volatile
    Select Case UCase$(Subject)
        Case "REA", "WRI", "MAT"
            sSearch = "BLW"
            sRetVal = "1"
        Case "SCI"
            sSearch = "XXX"
            sRetVal = "0"
        Case Else
            sRetVal = "Invalid subject code"
    End Select
    
    If Assessment = sSearch Then    'PScale required, check for presence of one in ParamArray
        For Each vTemp In PScales
            If Len(vTemp) <> 0 Then
                sRetVal = "0"
            End If
        Next vTemp
    Else
        sRetVal = "0"               'Not of interest, signal OK
    End If
    TestPScales = sRetVal
End Function

Public Function TestAssessments(PScale As String, Assessment As String, ParamArray Subjects() As Variant) As String
'Available from UI.  Purpose, check that a p-scale with a populated value has an associated subject with an assessment of "BLW" (Reading, writing, maths)
'or "HNM" (Science).  As the interlinks between a subject and a p-scale seem volatile, the user is permitted to provide as many
'subjects for one p-scale as they desire.  Currently, only ENG takes two subjects - Reading and Writing.

Dim sRetVal As String
Dim sSearch As String
Dim vTemp As Variant
    Application.Volatile
    Select Case UCase$(PScale)
        Case "E", "M", "R", "W", "SP", "LIS", "NUM", "USING", "SHAPE"
            sSearch = "BLW"
            sRetVal = "1"
        Case "SC"
            sSearch = "HNM"
            sRetVal = "1"
        Case Else
            sRetVal = "Invalid subject code"
    End Select
    
    If Len(Assessment) = 0 Then             'PScale not supplied therefore not of interest
        sRetVal = "0"
    Else
        For Each vTemp In Subjects          'PScale supplied, test subjects for search value
            If vTemp = sSearch Then
                sRetVal = "0"
            End If
        Next vTemp
    End If
    TestAssessments = sRetVal
End Function


' InQuest injected base64 decoded content
' MEV]

INQUEST-PP=macro
