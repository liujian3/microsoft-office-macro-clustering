Attribute VB_Name = "ReadCSV"
Option Explicit

'NumberFormats |fffd||fffd|Dictionary|fffd|iKey|fffd|F|fffd||fffd||50d||fffd||fffd|AValue|fffd|F|fffd||fffd||fffd|[|fffd|U|fffd||fffd|`|fffd||fffd||fffd||fffd||fffd|j|fffd||fffd||fffd|w|fffd||80b7||fffd||fffd|
'Charset|fffd||34f||fffd||fffd||fffd||fffd||752||fffd||311||fffd||fffd|AShift_JIS|fffd|Aeuc-jp|fffd|Autf-8|fffd|Autf-8n|fffd||202||1c2||fffd||fffd||752||fffd||142||fffd||fffd||fffd|

Const mc_AutoDetectString As String = "_autodetect_all"

Public Function ReadCSV(ByRef Filepath As String, _
    Optional ByRef OutputWorksheet As Worksheet, _
    Optional ByRef TextColumns As String = "", _
    Optional ByRef SkipColumns As String = "", _
    Optional ByRef ColumnNumberFormats As Object = Nothing, _
    Optional ByRef ReadHeader As Boolean = True, _
    Optional ByVal OutputRow As Long = 1, _
    Optional ByVal OutputColumn As Long = 1, _
    Optional ByRef Delimiter As String = ",", _
    Optional ByRef Charset As String = mc_AutoDetectString, _
    Optional ByRef Quote As String = """", _
    Optional ByRef LineEndingCode As String = mc_AutoDetectString, _
    Optional ByRef AutoFit As Boolean = True) As Worksheet

  Dim CSV As Variant
  CSV = ReadCSVToArray2D(Filepath, SkipColumns, ReadHeader, Delimiter, Charset, Quote, LineEndingCode)
  
  If OutputWorksheet Is Nothing Then
    Set OutputWorksheet = Worksheets.Add
  End If
  
  Call Array2DToWorksheetWithColumnFormat(OutputWorksheet, CSV, TextColumns, SkipColumns, ColumnNumberFormats, OutputRow, OutputColumn, AutoFit)
  
  Set ReadCSV = OutputWorksheet
End Function

Public Sub Array2DToWorksheetWithColumnFormat(ByRef OutputWorksheet As Worksheet, _
    ByRef Array2D As Variant, _
    Optional ByRef TextColumns As String = "", _
    Optional ByRef SkipColumns As String = "", _
    Optional ByRef ColumnNumberFormats As Object = Nothing, _
    Optional ByVal OutputRow As Long = 1, _
    Optional ByVal OutputColumn As Long = 1, _
    Optional ByRef AutoFit As Boolean = True)
  
  Dim ColumnNumberFormat As Variant
  ColumnNumberFormat = getColumnDataTypes(TextColumns, SkipColumns, ColumnNumberFormats, UBound(Array2D, 2) - LBound(Array2D, 2) + 1)
   
  Dim maxRow As Long
  maxRow = OutputRow + UBound(Array2D, 1) - LBound(Array2D, 1)
  
  Dim maxColumn As Long
  maxColumn = OutputColumn + UBound(Array2D, 2) - LBound(Array2D, 2)
  
  With OutputWorksheet
    Dim oCol As Long
    
    For oCol = 1 To UBound(Array2D, 2) - LBound(Array2D, 2) + 1
      .Range(.Cells(OutputRow, OutputColumn + oCol - 1), _
             .Cells(maxRow, OutputColumn + oCol - 1)).NumberFormatLocal = ColumnNumberFormat(oCol)
    Next
      
    .Range(.Cells(OutputRow, OutputColumn), .Cells(maxRow, maxColumn)).Value = Array2D
    
    If AutoFit Then
      .Range(.Columns(OutputColumn), .Columns(maxColumn)).AutoFit
    End If
  End With

End Sub


'NumberFormats|fffd||fffd|Dictionary|fffd|O|fffd||fffd|
Private Function getColumnDataTypes(TextColumns As String, SkipColumns As String, ColumnNumberFormats As Object, MaxColumnNumber As Long) As Variant
  
  Dim SkipColumnDict As Object
  Set SkipColumnDict = ParseColumnsSelectString(SkipColumns)
  
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|A|fffd||fffd||fffd||fffd|SkipColumnDict|fffd||fffd||fffd||202||fffd||fffd||fffd||fffd||302||182||fffd||fffd||114|z|fffd||fffd||fffd||fffd||c42c|
  Dim FormatData As Variant
  ReDim FormatData(1 To MaxColumnNumber + SkipColumnDict.Count)
  
  Dim C As Long
  For C = 1 To MaxColumnNumber + SkipColumnDict.Count
    FormatData(C) = "G/|fffd|W|fffd||fffd|"
  Next
  
  Dim Column As Variant
  
  Dim TextColumnDict As Object
  Set TextColumnDict = ParseColumnsSelectString(TextColumns)
  
  For Each Column In TextColumnDict
    FormatData(CLng(Column)) = "@"
  Next


'|fffd||fffd||fffd||68d||5c2||215|\|fffd||fffd||fffd|`|fffd||fffd||fffd|w|fffd||80aa||fffd||fffd||fffd||fffd||a347||fffd||242||341|A|fffd||33d1||fffd||fffd|
  If Not ColumnNumberFormats Is Nothing Then
    For Each Column In ColumnNumberFormats.Keys
      FormatData(Column) = ColumnNumberFormats(Column)
    Next
  End If
  
  
'Skip|fffd||fffd||fffd||fffd||fffd||315||2433||fffd||fffd||fffd||fffd||fffd||fffd|
'Skip|fffd||38f||6c2||317||42a82||fffd||fffd||fffd||a347||fffd||242||341|A|fffd||fffd||fffd||fffd||fffd||182||311||389||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||302||155||2433||fffd||fffd||fffd||fffd||fffd||fffd|
'|fffd||fffd||fffd||182||fffd||fffd||381|ACSV|fffd||fffd|4|fffd||fffd||141|A|fffd||fffd||fffd||fffd||fffd||fffd||fffd|u|fffd||fffd||fffd||fffd||fffd||fffd|,|fffd||fffd||fffd||fffd||fffd||fffd|,skip,|fffd|W|fffd||fffd||fffd|v|fffd||182||fffd||fffd||fffd||fffd|w|fffd||fffd||242||202||fffd||fffd||102||fffd||fffd||fffd||a347||fffd|B
'CSV|fffd||fffd|4|fffd||fffd||682||30f||fffd||fffd||fffd||fffd||182||fffd||fffd||10e|w|fffd||80b5||fffd||102||fffd||fffd||fffd|l|fffd|i|fffd|W|fffd||fffd||fffd|j|fffd||fffd||fffd|A|fffd|V|fffd|[|fffd|g|fffd||fffd|3|fffd||fffd||682||250||752||80b5||fffd||202||fffd||fffd||182||fffd||fffd||fffd||fffd||202||fffd|
   
  Dim Ret As Variant
  ReDim Ret(1 To MaxColumnNumber)
  
  Dim RetColumn As Long
  RetColumn = LBound(Ret)
  
  Dim FormatColumn As Long
  For FormatColumn = LBound(FormatData) To UBound(FormatData)
    If Not SkipColumnDict.Exists(CStr(FormatColumn)) Then
      Ret(RetColumn) = FormatData(FormatColumn)
      RetColumn = RetColumn + 1
    End If
  Next

Finally:
  getColumnDataTypes = Ret
End Function


Private Function ParseColumnsSelectString(ColumnsSelectString As String) As Object
  Dim Columns As Variant
  Columns = Split(ColumnsSelectString, ",")
  
  Dim Dict As Object
  Set Dict = CreateObject("Scripting.Dictionary")
  
  Dim Column As Variant
  For Each Column In Columns
    If Not Dict.Exists(Column) Then
      Dict(Column) = Column
    End If
  Next
  
  Set ParseColumnsSelectString = Dict
  
End Function


'LineEndingCode|fffd||242||341|AvbCrLf vbCr vbLf|fffd||202||1c2||fffd||fffd|w|fffd||80b7||fffd||fffd|
Public Function ReadCSVToArray2D(ByRef inputFilepath As String, _
    Optional ByRef SkipColumns As String = "", _
    Optional ByVal ReadHeader As Boolean = True, _
    Optional ByRef Delimiter As String = ",", _
    Optional ByRef Charset As String = mc_AutoDetectString, _
    Optional ByRef Quote As String = """", _
    Optional ByRef LineEndingCode As String = mc_AutoDetectString) As Variant
  
  Dim InputStr As String
  InputStr = ReadFileToString(inputFilepath, Charset)
  
  ReadCSVToArray2D = CSVStringToArray2D(InputStr, SkipColumns, ReadHeader, Delimiter, Quote, LineEndingCode)
  
End Function


'CSV|fffd|f|fffd|[|fffd|^|fffd||fffd||fffd|i|fffd|[|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||342||fffd||fffd||fffd|2|fffd||fffd||fffd||fffd||fffd|z|fffd||fffd||fffd||502||fffd|
'LineEndingCode|fffd||242||341|AvbCrLf vbCr vbLf|fffd||202||1c2||fffd||fffd|w|fffd||80b7||fffd||fffd|
Public Function CSVStringToArray2D(ByRef InputStr As String, _
    Optional ByRef SkipColumns As String = "", _
    Optional ByVal ReadHeader As Boolean = True, _
    Optional ByRef Delimiter As String = ",", _
    Optional ByRef Quote As String = """", _
    Optional ByRef LineEndingCode As String = mc_AutoDetectString) As Variant
    
  If Len(Quote) > 1 Then
    MsgBox "|fffd||fffd||fffd|p|fffd||fffd||fffd||fffd|1|fffd||fffd||fffd||fffd||fffd||14e|w|fffd||80b5||fffd||102||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    End
  End If
  
  If LineEndingCode = mc_AutoDetectString Then
    LineEndingCode = DetectLineEndingCode(InputStr)
  End If
  
'|fffd||182||80a0||fffd||fffd||fffd||fffd||fffd|A|fffd|s|fffd||fffd||fffd||30d||151||fffd|l|fffd||fffd||fffd||64fe||fffd||fffd||fffd||90bd||fffd||7c1|A|fffd|b|fffd||fffd|I|fffd||253||fffd||fffd||343|f|fffd|[|fffd|^|fffd||fffd||fffd||fffd||fffd|s|fffd|R|fffd|[|fffd|h|fffd||fffd||fffd||182||254|z|fffd||fffd||255||fffd||fffd||fffd|
  Dim iLines() As String
  iLines = Split(InputStr, LineEndingCode)

  Dim oLinesCollection As Collection
  Set oLinesCollection = New Collection
   
  Dim Re As Object
  Set Re = getRegexPattern(Delimiter, Quote)
  
  Dim SkipColumnDict As Object
  Set SkipColumnDict = ParseColumnsSelectString(SkipColumns)
  
  
  Dim oLine As Variant  '1|fffd||fffd||fffd||fffd||fffd|z|fffd||42a93||fffd||fffd||fffd|
  Dim oLinesColumnMax As Long
  
  'iLines|fffd||30c||fffd||fffd||74f||fffd||fffd||fffd||fffd||38f||6cd|s
  Dim iY As Long
  iY = LBound(iLines)
  
  'CSV|fffd||fffd||fffd||fffd||342||fffd||fffd||fffd||fffd||fffd||fffd||282||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|Collection|fffd|ioLine|fffd|j|fffd||24a|i|fffd|[
  '|fffd||151||fffd||50502||fffd|oLinesColumnMax|fffd||24a|i|fffd|[
  Do While iY <= UBound(iLines)
    
    'getLine|fffd||30c||102||44f|o|fffd||fffd||fffd||fffd|AiY|fffd||fffd||fffd||3c9||fffd||fffd||fffd||fffd||fffd|i|fffd||fffd||fffd||fffd||fffd||fffd|j|fffd||302||152||fffd||fffd||4c1|I
    Dim iLine As String
    iLine = GetLine(iLines, iY, LineEndingCode, Quote)
        
    Set oLine = ParseLine(iLine, Re, LineEndingCode, Quote, Delimiter, SkipColumnDict)
    oLinesCollection.Add oLine
    oLinesColumnMax = WorksheetFunction.Max(oLine.Count, oLinesColumnMax)
    
  Loop
  
  If Not ReadHeader Then
    oLinesCollection.Remove 1
  End If
  
  CSVStringToArray2D = CollectionToArray2D(oLinesCollection, oLinesColumnMax, Quote)
End Function

Private Function DetectLineEndingCode(InputStr As String) As String
  Dim LineEndingCode As Variant
  LineEndingCode = Array(vbCrLf, vbCr, vbLf)
             
  Dim No As Long
  For No = LBound(LineEndingCode) To UBound(LineEndingCode)
    If InStr(InputStr, LineEndingCode(No)) > 0 Then
      DetectLineEndingCode = LineEndingCode(No)
      Exit Function
    End If
  Next

  MsgBox "|fffd||fffd||fffd|s|fffd|R|fffd|[|fffd|h|fffd||30e||fffd||fffd||fffd||fffd||fffd||fffd||80aa||fffd||142||fffd||fffd||702||fffd||fffd||fffd||142||fffd||fffd||fffd|"
  End

End Function

Private Function CollectionToArray2D(oLinesCollection As Collection, oLinesColumnMax As Long, Quote As String) As Variant
  Dim oData As Variant
  ReDim oData(1 To oLinesCollection.Count, 1 To oLinesColumnMax) As Variant
  
  Dim oY As Long
  oY = 1
  
  Dim oLine As Variant
  For Each oLine In oLinesCollection
    Dim oX As Long
    oX = 1
    
    Dim oCell As Variant
    For Each oCell In oLine
      oData(oY, oX) = oCell
      oX = oX + 1
    Next
    
    oY = oY + 1
  Next

  CollectionToArray2D = oData
End Function


Private Function RemoveQuotes(ByVal Data As Variant, ByVal Quote As String) As Variant
  
'|fffd||64ea||fffd||18d||14c||30aa|Quote|fffd||30f||a347|
  If Left(Data, 1) = Quote And Right(Data, 1) = Quote Then
    
    '|fffd||64ea||fffd||18d||14c||fffd||fffd|Quote|fffd||fffd||fffd|J|fffd|b|fffd|g
    Data = Mid(Data, 2, Len(Data) - 2)
    
    '2|fffd|A|fffd||fffd|Quote|fffd||fffd|1|fffd||82||fffd|Quote|fffd||24f|C|fffd||fffd|
    Data = Replace(Data, Quote & Quote, Quote)
  End If
  
  RemoveQuotes = Data
End Function


'|fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||1c2||74d||fffd||fffd||fffd|
'|fffd||fffd||fffd||fffd|I|fffd||fffd||fffd||fffd||fffd|A|fffd||1c2||74d||fffd||fffd||fffd|String|fffd||fffd||502||fffd|
Public Function ReadFileToString(Filepath As String, Optional Charset As String = "_autodetect_all") As String
  If Dir(Filepath) = "" Then
    MsgBox "|fffd|t|fffd|@|fffd|C|fffd||fffd|:" & Filepath & "|fffd||fffd||fffd||fffd||fffd||742||fffd||fffd||702||fffd||fffd||fffd|"
    End
  End If
   
'utf-8n|fffd||302||753||fffd||fffd||291||389||fffd|
  If Charset = "utf-8n" Then
    Charset = "utf-8"
  End If
   
  Dim ST As Object
  Set ST = CreateObject("ADODB.Stream")
  
  With ST
    .Mode = 3  'adModeReadWrite
    .Type = 2  'adTypeText
    .Charset = Charset
  
    .Open
    .LoadFromFile Filepath
    .Position = 0
    
    Dim Buf As String
    Buf = .ReadText(-1) 'adReadAll
  
    .Close
  End With
  
'utf-8|fffd|iBOM|fffd||fffd||fffd||fffd|j|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||153||1c2||74d||fffd||fffd||42f8f||a347||fffd||315||2433||fffd|@|fffd||fffd||fffd||8b||fffd||fffd||242||fffd||fffd||fffd||102||355|s|fffd|v|fffd||209||94|\|fffd||fffd||fffd||fffd||fffd||fffd|
  If AscW(Buf) = -257 Then    '-257 = &hFEFF
    Buf = MidB(Buf, 3, LenB(Buf))
  End If
'utf-8|fffd|iBOM|fffd||fffd||fffd||fffd|j|fffd||2433||fffd||fffd||fffd||fffd||fffd||702||fffd|
    
  ReadFileToString = Buf
End Function



'Lines|fffd|i|fffd|z|fffd||fffd|j|fffd||312||fffd||fffd||fffd|iY|fffd|s|fffd||682||303|f|fffd|[|fffd|^|fffd||fffd||fffd||fffd||fffd|o|fffd||fffd||fffd|B
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd|A|fffd||fffd||fffd|o|fffd||fffd||fffd||fffd||fffd|s|fffd||241|AQuote|fffd||fffd||fffd||f414||fffd||82||fffd||fffd||fffd||fffd||202||fffd||fffd||a347||fffd||242||341|A|fffd||fffd||fffd||30d|s|fffd||fffd||fffd||fffd||fffd||d0b9||fffd||113||1c2||74d||fffd||fffd||fffd|
'|fffd||fffd|CSV|fffd|f|fffd|[|fffd|^|fffd||341|A1|fffd|s|fffd||312||fffd||fffd||fffd|Quote|fffd||34b||fffd||fffd||fffd||fffd||82||fffd||fffd||fffd||342||fffd||fffd|B
'|fffd||f414||fffd||82||fffd||fffd||fffd||a347||fffd||242||341|AQuote|fffd||312||fffd||fffd||249||fffd||fffd|s|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||102||fffd||fffd||101|A|fffd||fffd||fffd||30d|s|fffd||18d||fffd||fffd||d0b9||fffd||fffd|1|fffd|s|fffd||182||fffd||fffd||114|F|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|K|fffd|v|fffd||fffd||fffd||fffd||fffd||fffd|B
'|fffd||fffd||fffd||fffd||fffd||fffd|Quote|fffd||fffd||fffd||f414||fffd||82||fffd||fffd||90a9||fffd||1c2||fffd||fffd||fffd||fffd||314||fffd||fffd||fffd||fffd||fffd|s|fffd||fffd|

Private Function GetLine(ByRef Lines() As String, ByRef iY As Long, ByRef LineEndingCode As String, ByRef Quote As String) As String
'|fffd||fffd||fffd||fffd|Function|fffd||142||341|AiY|fffd||312|l|fffd||11742||20b5||fffd||102||fffd||fffd||fffd|
'ByRef|fffd||14e||c2bce||fffd||fffd||fffd||102||fffd||fffd||fffd||302||141|A|fffd||102||44f|o|fffd||fffd||fffd||fffd||fffd||fffd|iY|fffd||fffd||fffd||3c9||fffd||fffd||fffd||fffd||90b1||fffd||182||252||fffd||fffd||4c1|I

  Dim Line As String
  Line = ""
  
  Dim LineEnding As String
  LineEnding = ""
    
  Dim QuoteCount As Long
  Do
    Line = Line & LineEnding & Lines(iY)
    QuoteCount = (QuoteCount + Len(Lines(iY)) - Len(Replace(Lines(iY), Quote, ""))) Mod 2
    
    iY = iY + 1

    If QuoteCount = 0 Or iY > UBound(Lines) Then
      Exit Do
    End If
    
    LineEnding = vbLf '|fffd|Z|fffd||fffd||fffd||fffd||fffd||fffd||fffd|s|fffd||fffd|vbLf|fffd||302||fffd||fffd||7c1|A|fffd||fffd||fffd||309||fffd||fffd|s|fffd|R|fffd|[|fffd|h|fffd||242||fffd||fffd||fffd||fffd||fffd||70b8|vbLf|fffd||fffd||fffd|w|fffd||fffd|
  Loop
  
  If QuoteCount = 1 And iY > UBound(Lines) Then
    Err.Raise 65534, , "CSV|fffd||303|f|fffd|[|fffd|^|fffd|`|fffd||fffd||fffd||fffd||fffd|s|fffd||fffd||fffd||142||fffd||fffd|i|fffd||fffd||fffd|p|fffd||fffd||fffd||fffd||fffd|K|fffd||602||255|t|fffd||fffd||fffd||fffd||102||fffd||fffd||702||fffd||fffd||fffd|j"
  End If

  GetLine = Line
  
End Function


Private Function ParseLine( _
         ByRef Line As String, _
         ByRef Regex As Object, _
         ByRef LineEndingCode As String, _
         ByRef Quote As String, _
         ByRef Delimiter As String, _
         ByRef SkipColumnDict As Object) As Collection
         
  Dim CSV As Collection
  Set CSV = New Collection
                 
  Dim Matches As Object
  Set Matches = Regex.Execute(Line & Delimiter)
  With Matches
    Dim Column As Long
    For Column = 1 To .Count
      If Not SkipColumnDict.Exists(CStr(Column)) Then
        CSV.Add RemoveQuotes(.Item(Column - 1).SubMatches(0), Quote)
      End If
    Next
  End With
  
  Set ParseLine = CSV
End Function


Private Function getRegexPattern(ByRef Delimiter As String, ByRef Quote As String) As Object
    
  Dim NotQuoted As String
  NotQuoted = "[^" & Delimiter & Quote & "]*"
' |fffd||fffd||fffd|K|fffd|\|fffd||fffd||fffd||fffd|   [^,"]*
  
  
  Dim InsideOfQuote As String
  InsideOfQuote = "(?:[^" & Quote & "]|" & Quote & Quote & ")*"
' |fffd||fffd||fffd|K|fffd|\|fffd||fffd||fffd||fffd|       (?:[^"]|"")*
   
  Dim Quoted As String
  Quoted = Quote & InsideOfQuote & Quote
' |fffd||fffd||fffd|K|fffd|\|fffd||fffd||fffd||fffd|  "(?:[^"]|"")*"

  Dim Re As Object
  Set Re = CreateObject("VBScript.RegExp")
  Re.Global = True
  Re.MultiLine = False
  Re.Pattern = "(" & NotQuoted & "|" & Quoted & ")" & Delimiter
' |fffd||fffd||fffd|K|fffd|\|fffd||fffd||fffd||fffd|   ([^,"]*|"(?:[^"]|"")*"),

  Set getRegexPattern = Re

End Function


Public Function NumberFormatParams(ParamArray Param()) As Object
  Dim Dict As Object
  Set Dict = CreateObject("Scripting.Dictionary")
  
  If UBound(Param) Mod 2 = 0 Then
    MsgBox "NumberFormatParams|fffd||308||fffd||fffd||fffd||fffd||310||fffd||fffd||34b||fffd||fffd||fffd||fffd||82||242||fffd||fffd||102||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
    End
  End If
  
  Dim No As Long
  For No = LBound(Param) To UBound(Param) Step 2
    Dict(Param(No)) = Param(No + 1)
  Next

  Set NumberFormatParams = Dict
End Function





Attribute VB_Name = "Sample"
Option Explicit

Sub |fffd||635e||fffd||fffd|1()
  Dim Filepath As String
  With Application.FileDialog(msoFileDialogOpen)
    .AllowMultiSelect = False
    .Filters.Clear
    .Filters.Add "CSV|fffd|t|fffd|@|fffd|C|fffd||fffd|(*.csv)", "*.csv", 1
    .InitialFileName = ThisWorkbook.Path & "\"
    .Show
    
    If .SelectedItems.Count = 0 Then
      End
    End If
    
    Filepath = .SelectedItems(1)
  End With

  Dim WS As Worksheet
  Set WS = ReadCSV.ReadCSV(Filepath:=Filepath, TextColumns:="4,22,23,24,25,26,27")
End Sub
Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit



INQUEST-PP=macro
