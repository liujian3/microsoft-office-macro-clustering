Attribute VB_Name = "Checksum"

Public Function CalcChecksum(Dataline As Variant, lngRow As Long, spaltechecksum As Integer) As String

Dim DataSumme As Variant
Dim iChecksum As Long
Dim iChecksumLow As Long
Dim iChecksumHigh As Long
Dim antwort

            'Checksummengleichung: Ganzzahl(10 x Wurzel(ABS(77 x Summe(Daten1-16))))
            If Dataline(0) = 9 And CheckManipulation = True Then
                DataSumme = 0
                For i = 4 To spaltechecksum - 1 '(Summe Daten 1-16)
                    If IsNumeric(Dataline(i)) Then
                        DataSumme = DataSumme + Dataline(i)
                    Else
                        MsgBox Worksheets("Lang").Range("B125").Value
                        Exit For
                    End If
                Next i
                
                'Checksummengleichung #########################
                 iChecksum = Int(Sqr(Abs(DataSumme * 77)) * 10)
                '##############################################
                
                'Rundungsfehler ausschlie|fffd|en
                 iChecksumLow = iChecksum - 1
                 iChecksumHigh = iChecksum + 1
                
                'Checksummenvergleich weicht ab: Abbruch
                 If (Dataline(spaltechecksum) < iChecksumLow Or Dataline(spaltechecksum) > iChecksumHigh) And CheckManipulation And iChecksum <> 0 Then
                        antwort = MsgBox(Worksheets("Lang").Range("B126").Value & (Chr(10)) _
                        & Worksheets("Lang").Range("B127").Value & lngRow & (Chr(10)) _
                        & Worksheets("Lang").Range("B128").Value & iChecksum & (Chr(10)) _
                        & Worksheets("Lang").Range("B129").Value & Dataline(spaltechecksum) & (Chr(10)) & (Chr(10)) _
                        & Worksheets("Lang").Range("B130").Value _
                        , vbYesNoCancel)
                        If antwort = vbYes Then
                            CheckManipulation = False
                        End If
                        If antwort = vbNo Then
                            CheckManipulation = True
                        End If
                        If antwort = vbCancel Then
                            CalcChecksum = "Cancel"
                            Exit Function
                        End If
                 End If
            End If

CalcChecksum = False

End Function
Attribute VB_Name = "DateInput"
Attribute VB_Base = "0{E9DA0B68-47EE-4751-944B-6D84C8553B68}{A42D826C-D007-4164-9F37-987349D02888}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False


Option Explicit


Private Sub CommandButton1_Click()

Worksheets("Settings").Range("Datum").Value = TextBox1 & " " & TextBox2

UserForm_Initialize
Unload Me
End Sub

Private Sub CommandButton2_Click()
Unload Me
End Sub

Private Sub Label3_Click()

End Sub

Private Sub Label5_Click()

End Sub

Private Sub UserForm_Initialize()
Application.EnableEvents = False


Application.EnableEvents = True
End Sub
Attribute VB_Name = "DatumAktualisieren"
Sub CopyDate()

Dim iZeile As Integer
Dim iZeit As Date

Worksheets("Data").Range("A3").Value = Worksheets("Settings").Range("Datum").Value

For iZeile = 4 To Worksheets("Settings").Range("Laenge").Value + 2

Worksheets("Data").Range("A" & iZeile & "").Value = DateAdd("s", Worksheets("Data").Range("B" & iZeile & "").Value * 60, Worksheets("Data").Range("A" & iZeile - 1 & "").Value)

Next iZeile

End Sub
Attribute VB_Name = "DiagrammZeichnen"

Sub KurveZeichnen()

If NCC = True Then
    On Error Resume Next
End If

    If Worksheets("Settings").Range("file").Value = "error" Then
        MsgBox Worksheets("Lang").Range("B131").Value
        Exit Sub
    End If

'Kurven l|fffd|schen
Worksheets("Diagram").Activate
Dim lngZahl As Long
  With ActiveSheet
    If .ChartObjects.count <> 0 Then
      For lngZahl = .ChartObjects.count To 1 Step -1
        .ChartObjects(lngZahl).Delete
      Next lngZahl
    End If
  End With

'Kurve zeichnen
Dim A, B, C, D, E, F, G, H, i, J, K, L, M, N, O, P, Q As String
Dim Varname(16) As String
Dim Varachse(16) As Integer
Dim VarFarbe(16) As Integer


With Application 'beschleunigt Berechnung
        .ScreenUpdating = False
        .EnableEvents = False
        .Calculation = xlCalculationManual
    End With

   With Worksheets("Settings")
      varlaenge = .Range("Laenge").Value
      VarXStart = .Range("Xstart").Value
      VarXEnd = .Range("Xend").Value
      VarYStart = .Range("Ystart").Value
      VarYend = .Range("Yend").Value
      VarY2Start = .Range("Y2start").Value
      VarY2end = .Range("Y2end").Value
      VarY1Name = .Range("Y1Name").Value
      vary2name = .Range("Y2Name").Value

For i = 1 To 9
        If .Range("Faktor0" & i).Value <> 0 Then Varname(i) = .Range("Kurve0" & i).Value Else Varname(i) = "-"
        Varachse(i) = .Range("Achse0" & i).Value
        VarFarbe(i) = Worksheets("Settings").Range("Farbe0" & i).Interior.ColorIndex
        If VarFarbe(i) < 2 Then
            VarFarbe(i) = 56
        End If
Next i
For i = 10 To 16
    If .Range("Faktor" & i).Value <> 0 Then Varname(i) = .Range("Kurve" & i).Value Else Varname(i) = "-"
    Varachse(i) = .Range("Achse" & i).Value
    VarFarbe(i) = Worksheets("Settings").Range("Farbe" & i).Interior.ColorIndex
        If VarFarbe(i) < 2 Then
            VarFarbe(i) = 56
        End If
Next i
         
   End With
'------------------------------------------------------------
'##Datenmenge ermitteln
        If varlaenge < 3 Then
        varlaenge = 3
            MsgBox "Not enough data"
        End If
        
'##Quelle X-Achse
        A = "C2:C" & varlaenge + 2
'##Quelle Y-Achse
        B = ",D2:D" & varlaenge + 2
        C = ",E2:E" & varlaenge + 2
        D = ",F2:F" & varlaenge + 2
        E = ",G2:G" & varlaenge + 2
        F = ",H2:H" & varlaenge + 2
        G = ",I2:I" & varlaenge + 2
        H = ",J2:J" & varlaenge + 2
        i = ",K2:K" & varlaenge + 2
        J = ",L2:L" & varlaenge + 2
        K = ",M2:M" & varlaenge + 2
        L = ",N2:N" & varlaenge + 2
        M = ",O2:O" & varlaenge + 2
        N = ",P2:P" & varlaenge + 2
        O = ",Q2:Q" & varlaenge + 2
        P = ",R2:R" & varlaenge + 2
        Q = ",S2:S" & varlaenge + 2
     
     Charts.Add
     ActiveChart.ChartType = xlXYScatterLinesNoMarkers
     ActiveChart.SetSourceData Source:=Sheets("Data").Range(A & B & C & D & E & F & G & H & i & J & K & L & M & N & O & P & Q), PlotBy:=xlColumns
       
    
    ActiveChart.Location Where:=xlLocationAsObject, Name:="Diagram"
    
    Dim QBeschreibung As String
    Dim QFileCommand As String
    
    If Worksheets("Settings").Range("Beschreibung").Value <> "" And Not Worksheets("Settings").Range("Beschreibung").Value = "-" Then
        QBeschreibung = vbCrLf & " [" & Worksheets("Settings").Range("Beschreibung").Value & "]"
    End If
        
    If Worksheets("Settings").Range("Kommentar").Value <> "" And Not Worksheets("Settings").Range("Kommentar").Value = "---" Then
        QFileCommand = vbCrLf & " [" & Worksheets("Settings").Range("Kommentar").Value & "]"
    End If
        
'####################################
  'Title des Diagramms zusammensetzen
    With ActiveChart
        .HasTitle = True
        .ChartTitle.Characters.Text = _
        "[" & _
        Worksheets("Settings").Range("FileTitle").Value & ": " & _
        Worksheets("Settings").Range("file").Value & _
        "]   [" & _
        Worksheets("Settings").Range("Textstartzeit").Value & ": " & _
        Worksheets("Settings").Range("Datum").Value & _
        Worksheets("Settings").Range("Startzeit").Value & "]" & _
        QBeschreibung & _
        QFileCommand

        .Axes(xlCategory, xlPrimary).HasTitle = True
        .Axes(xlCategory, xlPrimary).AxisTitle.Characters.Text = Worksheets("Lang").Range("B21").Value
        .Axes(xlValue, xlPrimary).HasTitle = True
        .Axes(xlValue, xlPrimary).AxisTitle.Characters.Text = VarY1Name
        
        .Axes(xlValue).MajorGridlines.Border.ColorIndex = 48
        .Axes(xlValue).MajorGridlines.Border.Weight = xlHairline
        .Axes(xlValue).MajorGridlines.Border.LineStyle = xlContinuous
    
    End With
    

    
On Error GoTo ErrorHandler
    
For i = 1 To 16
    
  If Varname(i) <> "-" Then
    ActiveChart.SeriesCollection(i).Select
    ActiveChart.SeriesCollection(i).Name = Varname(i)
    ActiveChart.SeriesCollection(i).AxisGroup = Varachse(i)
    With Selection.Border
        .ColorIndex = VarFarbe(i)
        .Weight = xlMedium
        .LineStyle = xlContinuous
    End With
    With Selection
        .MarkerBackgroundColorIndex = xlAutomatic
        .MarkerForegroundColorIndex = xlAutomatic
        .MarkerStyle = xlNone
        .Smooth = False
        .MarkerSize = 5
        .Shadow = False
    End With
  End If
Next i

ErrorHandler:
If Err.Number = 1004 Then
      MsgBox Worksheets("Lang").Range("B135").Value, vbCritical + vbOKOnly, ""
End If

On Error Resume Next

'---------------------
' ## Formatierung Chart
    ActiveChart.PlotArea.Select
    ActiveChart.HasLegend = True
    ActiveChart.Legend.Select
        Selection.AutoScaleFont = True
    With Selection.Font
        .Name = "Arial"
        .FontStyle = "Standard"
        .size = 8
    End With
    
    Selection.Position = xlBottom
    With Selection.Border
        .ColorIndex = 2
        .Weight = xlMedium
        .LineStyle = xlContinuous
    End With
    
    With Selection.Interior
        .ColorIndex = 2
        .PatternColorIndex = 1
        .Pattern = xlSolid
    End With

Dim Dia As ChartObject

 Set Dia = Sheets("Diagram").ChartObjects(1)

  With Dia
      .Width = 950
      .Height = 700
      .Top = 0
      .Left = 0
  End With

  Set Dia = Nothing

' ## Formatierung X-Achse
    ActiveChart.Axes(xlCategory).Select
    Selection.TickLabels.NumberFormat = "#,##0"
'        Selection.TickLabels.NumberFormat = "hh:mm:ss"
   
    With ActiveChart.Axes(xlCategory)
        .HasMajorGridlines = False
        .HasMinorGridlines = True
        .MinimumScale = VarXStart
        .MaximumScale = VarXEnd
        .MinorUnitIsAuto = True
        .MajorUnitIsAuto = True
        .Crosses = xlAutomatic
        .ReversePlotOrder = False
        .DisplayUnit = xlNone
    End With

    ActiveChart.Axes(xlValue).MinorGridlines.Select
    With Selection.Format.Line
        .Visible = msoTrue
        .ForeColor.ObjectThemeColor = msoThemeColorBackground1
        .ForeColor.TintAndShade = 0
        .ForeColor.Brightness = -0.150000006
        .Transparency = 0
    End With
    ActiveChart.Axes(xlValue).MajorGridlines.Select
    With Selection.Format.Line
        .Visible = msoTrue
        .ForeColor.ObjectThemeColor = msoThemeColorBackground1
        .ForeColor.TintAndShade = 0
        .ForeColor.Brightness = -0.150000006
        .Transparency = 0
    End With


' ## Formatierung 1. Y-Achse
    
Dim Y1Scale As Variant
Dim Y1Format As String

Y1Scale = 1
Y1Format = "#,##0.0"

Y1Scale = YScale((VarYend - VarYStart), Y1Format)

    ActiveChart.Axes(xlValue).Select
    With ActiveChart.Axes(xlValue)
        .HasMajorGridlines = True
        .HasMinorGridlines = False
        .MinimumScale = VarYStart
        .MaximumScale = VarYend
        .MinorUnit = 10
        .MajorUnit = Y1Scale
        .Crosses = xlAutomatic
        .ReversePlotOrder = False
        .DisplayUnit = xlNone
       .TickLabels.NumberFormat = Y1Format
    End With
    
' ## Formatierung 2. Y-Achse
Dim zelle As Range
Dim Y2Scale As Variant
Dim Y2Format As String

Y2Scale = 1
Y2Format = "#,##0.0"

Y2Scale = YScale((VarY2end - VarY2Start), Y2Format)


For Each zelle In Worksheets("Settings").Range("AxisRange")
    If zelle = "2" Then
       ActiveChart.Axes(xlValue, xlSecondary).Select
        With ActiveChart.Axes(xlValue, xlSecondary)
            .MinimumScale = VarY2Start
            .MaximumScale = VarY2end
            .MinorUnit = 10
            .MajorUnit = Y2Scale
            .Crosses = xlAutomatic
            .ReversePlotOrder = False
            .DisplayUnit = xlNone
            .HasTitle = True
            .AxisTitle.Characters.Text = vary2name
        End With
    End If
Next zelle
     
     
    With Application
        .EnableEvents = True
        .Calculation = xlCalculationAutomatic
        .ScreenUpdating = True
    End With

End Sub


Attribute VB_Name = "DieseArbeitsmappe"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

Option Explicit

'Aufl|fffd|sung ermitteln
#If VBA7 Then 'Office 2010 und neuer
Private Declare PtrSafe Function GetSystemMetrics Lib "user32" (ByVal nIndex As Long) As Long
#Else 'Office 2003 und |fffd|lter
Private Declare Function GetSystemMetrics Lib "user32" (ByVal nIndex As Long) As Long
#End If

Const SM_CXSCREEN = 0
Const SM_CYSCREEN = 1


Private Sub Workbook_Open()

On Error GoTo ErrorHandler

'Farben definieren
ActiveWorkbook.Colors(1) = RGB(145, 175, 215)

With Worksheets("Settings")
    .Range("Pfad").Interior.ColorIndex = 1
    .Range("Y1Name").Interior.ColorIndex = 1
    .Range("Y2Name").Interior.ColorIndex = 1
    .Range("Yend").Interior.ColorIndex = 1
    .Range("Y2end").Interior.ColorIndex = 1
    .Range("Ystart").Interior.ColorIndex = 1
    .Range("Y2start").Interior.ColorIndex = 1
    .Range("Xstart").Interior.ColorIndex = 1
    .Range("Xend").Interior.ColorIndex = 1
    .Range("Beschreibung").Interior.ColorIndex = 1
    .Range("Company").Interior.ColorIndex = 1
End With
    
 With Worksheets("Start")
    .Range("Zoom").Interior.ColorIndex = 1
 End With

'Erste Lasche Aufrufen
Sheets("Start").Select
Range("A1:A1").Select

'Ausgabe ausschalten
Application.ScreenUpdating = False   'Schaltet den Bildschirm aus

'Version von diesem Programm ermitteln
Version

'X-Achse vorformatieren
Worksheets("Settings").Range("Xend").Value = Round(Worksheets("Settings").Range("MaxZeilen").Value) + 1

'Fehler ausschalten
On Error Resume Next

'Startseite aufrufen
Sheets("Start").Select
    
'Comboboxen initialisieren
Call ComboBox1_Change
Call ComboBox2_Change
    
'Checkboxen initialisieren
Worksheets("Settings").CheckManipulationButton.Value = True
CheckManipulation = Worksheets("Settings").CheckManipulationButton.Value

Worksheets("Settings").NCCButton.Value = False
NCC = Worksheets("Settings").NCCButton.Value


'Aufl|fffd|sung ermitteln und einstellen
Dim Aufloesung As Integer

Aufloesung = Worksheets("Start").Range("Zoom").Value

    Worksheets("Start").Select
        ActiveWindow.Zoom = Aufloesung
    Worksheets("Settings").Select
        ActiveWindow.Zoom = Aufloesung * 0.9
    Worksheets("Diagram").Select
        ActiveWindow.Zoom = Aufloesung * 0.75
    Worksheets("Raw Values").Select
        ActiveWindow.Zoom = Aufloesung * 0.84
    Worksheets("Data").Select
        ActiveWindow.Zoom = Aufloesung * 0.84
    Worksheets("Furnaces").Select
        ActiveWindow.Zoom = Aufloesung * 0.9
    Worksheets("Sets").Select
        ActiveWindow.Zoom = Aufloesung * 0.7

'Scrollen sperren
Worksheets("Start").ScrollArea = "A1:M30"
Worksheets("Settings").ScrollArea = "A1:K35"
Worksheets("Sets").ScrollArea = "A1:z100"

'Liste f|fffd|r die Sprachauswahl initiieren
Worksheets("Start").ComboBoxSprache.List = Array( _
Worksheets("Lang").Range("C2").Value, _
Worksheets("Lang").Range("D2").Value, _
Worksheets("Lang").Range("E2").Value, _
Worksheets("Lang").Range("F2").Value, _
Worksheets("Lang").Range("G2").Value, _
Worksheets("Lang").Range("H2").Value, _
Worksheets("Lang").Range("I2").Value, _
Worksheets("Lang").Range("J2").Value)

'PDF-Button l|fffd|schen, wenn <Office 2007
Dim strValue As String

If Val(Application.Version) < 12 Then
    Worksheets("Diagram").Shapes.Range(Array("CommandButton21")).Visible = False
Else
    Worksheets("Diagram").Shapes.Range(Array("CommandButton21")).Visible = True
End If

Application.ScreenUpdating = True   'Schaltet den Bildschirm wieder ein

'Erste Lasche Aufrufen
Sheets("Start").Select
Range("A1:A1").Select

ErrorHandler:
If Err.Number = 1004 Then
      MsgBox Worksheets("Lang").Range("B134").Value, vbCritical + vbOKOnly, ""
End If

End Sub

Private Sub ComboBox1_Change()

'Liste f|fffd|r die Setauswahl initiieren
Worksheets("Settings").ComboBox1.List = _
Array(Worksheets("Sets").Range("dset1").Value, _
Worksheets("Sets").Range("dset2").Value, _
Worksheets("Sets").Range("dset3").Value, _
Worksheets("Sets").Range("dset4").Value, _
Worksheets("Sets").Range("dset5").Value, _
Worksheets("Sets").Range("dset6").Value, _
Worksheets("Sets").Range("dset7").Value, _
Worksheets("Sets").Range("dset8").Value, _
Worksheets("Sets").Range("dset9").Value, _
Worksheets("Sets").Range("dset10").Value, _
Worksheets("Sets").Range("dset11").Value, _
Worksheets("Sets").Range("dset12").Value)
 
'Faktoren aktualisieren
   ' FaktorAktualisieren

End Sub
Private Sub ComboBox2_Change()

'Liste f|fffd|r die Ofenauswahl initiieren
Worksheets("Settings").ComboBox2.ListFillRange = "Furnaces!B5:B36"

End Sub


Function Aufloesung() As Integer
Dim intBreit As Integer
Dim intHoch As Integer
Dim strErgebnis As String
intBreit = GetSystemMetrics(SM_CXSCREEN)
intHoch = GetSystemMetrics(SM_CYSCREEN)
strErgebnis = intBreit & "x" & intHoch
'MsgBox strErgebnis

  Select Case strErgebnis
    
    Case "1400x1050"
      Aufloesung = 120
    Case "1280x1024"
      Aufloesung = 115
    Case "1024x768"
      Aufloesung = 80
    Case "800x600"
      Aufloesung = 55
    Case Else
'      MsgBox "unbekannte Aufloesung:" & strErgebnis
      Aufloesung = 0
  End Select
End Function

Attribute VB_Name = "FaktAkt"
Option Explicit

Public SW As Long
'Public anzTage As Long, anzDaten As Long
Dim Schritt As Double, Schritt1 As Double, Schritt2 As Double
Dim L|fffd|nge As Double, L|fffd|nge1 As Double, L|fffd|nge2 As Double
Dim i As Long, z As Long

Sub FaktorAktualisieren()

' Aufruf des Formulars PB1 zur Darstellung des Fortschrittsbalken. Im Code des Formulars wird dann das Skript Aktualisieren aufgerufen und damit die Werte
' die Datentabelle |fffd|bertragen

PB1.Show

End Sub


Sub Aktualisieren()
Dim ws As Worksheet
Dim ws_setting As Worksheet
Dim iZeile, iZeile2 As Long
Dim MaxLaenge, Fortschritt As Integer
Dim strDate         'Datum
Dim strDateVor

If NCC = False Then
    On Error GoTo ErrorHandler
End If

If NCC = True Then
    On Error Resume Next
End If

'1. Zeile Werte einf|fffd|gen
Set ws = Worksheets("Raw values") 'easy data solution
Set ws_setting = Worksheets("Settings")
With ThisWorkbook.Worksheets("Data")
        iZeile = 2
        'Spalte Datum
        .Range("A3").Value = Worksheets("Raw values").Range("B" & iZeile & "")
        'Spalte Diff. Minuten
        .Range("B3").Value = "0"
        ' Absolute Minuten
        .Range("C3").Value = "0"
        
'schnellere Daten|fffd|bertragung easy data solution
        'Werte 1-16
.Range("D3").Value = ws.Cells(iZeile, 5) * ws_setting.Cells(18, 5)
.Range("E3").Value = ws.Cells(iZeile, 6) * ws_setting.Cells(19, 5)
.Range("F3").Value = ws.Cells(iZeile, 7) * ws_setting.Cells(20, 5)
.Range("G3").Value = ws.Cells(iZeile, 8) * ws_setting.Cells(21, 5)
.Range("H3").Value = ws.Cells(iZeile, 9) * ws_setting.Cells(22, 5)
.Range("I3").Value = ws.Cells(iZeile, 10) * ws_setting.Cells(23, 5)
.Range("J3").Value = ws.Cells(iZeile, 11) * ws_setting.Cells(24, 5)
.Range("K3").Value = ws.Cells(iZeile, 12) * ws_setting.Cells(25, 5)
.Range("L3").Value = ws.Cells(iZeile, 13) * ws_setting.Cells(26, 5)
.Range("M3").Value = ws.Cells(iZeile, 14) * ws_setting.Cells(27, 5)
.Range("N3").Value = ws.Cells(iZeile, 15) * ws_setting.Cells(28, 5)
.Range("O3").Value = ws.Cells(iZeile, 16) * ws_setting.Cells(29, 5)
.Range("P3").Value = ws.Cells(iZeile, 17) * ws_setting.Cells(30, 5)
.Range("Q3").Value = ws.Cells(iZeile, 18) * ws_setting.Cells(31, 5)
.Range("R3").Value = ws.Cells(iZeile, 19) * ws_setting.Cells(32, 5)
.Range("S3").Value = ws.Cells(iZeile, 20) * ws_setting.Cells(33, 5)

'Faktoren in Zeile 2 Aktualisieren
.Range("D2").Value = ws_setting.Range("Faktor01")
.Range("E2").Value = ws_setting.Range("Faktor02")
.Range("F2").Value = ws_setting.Range("Faktor03")
.Range("G2").Value = ws_setting.Range("Faktor04")
.Range("H2").Value = ws_setting.Range("Faktor05")
.Range("I2").Value = ws_setting.Range("Faktor06")
.Range("J2").Value = ws_setting.Range("Faktor07")
.Range("K2").Value = ws_setting.Range("Faktor08")
.Range("L2").Value = ws_setting.Range("Faktor09")
.Range("M2").Value = ws_setting.Range("Faktor10")
.Range("N2").Value = ws_setting.Range("Faktor11")
.Range("O2").Value = ws_setting.Range("Faktor12")
.Range("P2").Value = ws_setting.Range("Faktor13")
.Range("Q2").Value = ws_setting.Range("Faktor14")
.Range("R2").Value = ws_setting.Range("Faktor15")
.Range("S2").Value = ws_setting.Range("Faktor16")

End With

'Ab 2. Zeile Werte einf|fffd|gen
Worksheets("Settings").Activate
Worksheets("Settings").Range("StatusImport").Value = "0.01"

'Fortschrittsbalken konfiguerieren
PB1.Label2.Width = 0
SW = 100                                      'Schrittweite festlegen
L|fffd|nge = 0
Schritt = PB1.Label1.Width / SW                 'Schrittbreite pro Aktualisierung

For iZeile = 3 To Worksheets("Settings").Range("Laenge").Value + 1
    iZeile2 = iZeile + 1
    strDate = Worksheets("Raw values").Range("B" & iZeile & "")
    strDateVor = Worksheets("Raw values").Range("B" & iZeile - 1 & "")
    
    With ThisWorkbook.Worksheets("Data")
        'Spalte Datum
        .Range("A" & iZeile2 & "").Value = strDate
        'Spalte Diff. Minuten. Bei tageswechsel verwende letzte Differenz, da dies im Ausland zu Problemen f|fffd|hren kann
        If (DateDiff("s", strDateVor, strDate) / 60) < 601 Then
            .Range("B" & iZeile2 & "").Value = DateDiff("s", strDateVor, strDate) / 60
        Else
            .Range("B" & iZeile2 & "").Value = .Range("B" & iZeile2 - 1 & "").Value
        End If
        ' Absolute Minuten
        .Range("C" & iZeile2 & "").Value = .Range("C" & iZeile2 - 1 & "").Value + .Range("B" & iZeile2 & "").Value
        'Werte 1-16, Formeln verwendet, um Skalierung nachtr|fffd|glich |fffd|ndern zu k|fffd|nnen
        .Range("D" & iZeile2 & "").Formula = ws.Cells(iZeile, 5) * ws_setting.Cells(18, 5)
        .Range("E" & iZeile2 & "").Formula = ws.Cells(iZeile, 6) * ws_setting.Cells(19, 5)
        .Range("F" & iZeile2 & "").Formula = ws.Cells(iZeile, 7) * ws_setting.Cells(20, 5)
        .Range("G" & iZeile2 & "").Formula = ws.Cells(iZeile, 8) * ws_setting.Cells(21, 5)
        .Range("H" & iZeile2 & "").Formula = ws.Cells(iZeile, 9) * ws_setting.Cells(22, 5)
        .Range("I" & iZeile2 & "").Formula = ws.Cells(iZeile, 10) * ws_setting.Cells(23, 5)
        .Range("J" & iZeile2 & "").Formula = ws.Cells(iZeile, 11) * ws_setting.Cells(24, 5)
        .Range("K" & iZeile2 & "").Formula = ws.Cells(iZeile, 12) * ws_setting.Cells(25, 5)
        .Range("L" & iZeile2 & "").Formula = ws.Cells(iZeile, 13) * ws_setting.Cells(26, 5)
        .Range("M" & iZeile2 & "").Formula = ws.Cells(iZeile, 14) * ws_setting.Cells(27, 5)
        .Range("N" & iZeile2 & "").Formula = ws.Cells(iZeile, 15) * ws_setting.Cells(28, 5)
        .Range("O" & iZeile2 & "").Formula = ws.Cells(iZeile, 16) * ws_setting.Cells(29, 5)
        .Range("P" & iZeile2 & "").Formula = ws.Cells(iZeile, 17) * ws_setting.Cells(30, 5)
        .Range("Q" & iZeile2 & "").Formula = ws.Cells(iZeile, 18) * ws_setting.Cells(31, 5)
        .Range("R" & iZeile2 & "").Formula = ws.Cells(iZeile, 19) * ws_setting.Cells(32, 5)
        .Range("S" & iZeile2 & "").Formula = ws.Cells(iZeile, 20) * ws_setting.Cells(33, 5)
    

' Falsche Datumsdifferenzen korrigieren ???
If .Range("B" & iZeile2 & "").Value > 100 Or .Range("B" & iZeile2 & "").Value < 0 Then
   .Range("A" & iZeile2 & "").Value = .Range("A" & iZeile2 - 1 & "").Value
   .Range("B" & iZeile2 & "").Value = .Range("B" & iZeile2 - 1 & "").Value
   .Range("C" & iZeile2 & "").Value = .Range("C" & iZeile2 - 1 & "").Value + .Range("B" & iZeile2 - 1 & "").Value
End If


End With

'Meldung "Keine R|fffd|ckmeldung verhindern"
DoEvents

'Fortschritt berechnen
If iZeile > (Worksheets("Settings").Range("StatusImport").Value * 100 * Worksheets("Settings").Range("Laenge").Value / 100) + 1 Then
     Worksheets("Settings").Range("StatusImport").Value = Worksheets("Settings").Range("StatusImport").Value + 0.01
    'Fortschrittsbalken
     L|fffd|nge = L|fffd|nge + Schritt
     PB1.Label2.Width = L|fffd|nge
     PB1.Label3.Caption = Format(Worksheets("Settings").Range("StatusImport").Value, "0 %")
End If

Next iZeile


' Schlie|fffd|en des Fortschrittsbalken verz|fffd|gern und dann Schlie|fffd|en
Application.Wait (Now + TimeValue("0:00:2"))
Unload PB1

'Status l|fffd|schen
Worksheets("Settings").Range("StatusImport").Value = ""

MaxLaenge = Worksheets("Settings").Range("Laenge").Value + 2

' Datenspalten ausblenden, wenn diese |fffd|ber Skalierung ausgeblendet werden sollen
If Worksheets("Data").Range("D2").Value = 0 Then
    Worksheets("Data").Range("D3:D" & MaxLaenge & "").ClearContents
End If
If Worksheets("Data").Range("E2").Value = 0 Then
    Worksheets("Data").Range("E3:E" & MaxLaenge & "").ClearContents
End If
If Worksheets("Data").Range("F2").Value = 0 Then
    Worksheets("Data").Range("F3:F" & MaxLaenge & "").ClearContents
End If
If Worksheets("Data").Range("G2").Value = 0 Then
    Worksheets("Data").Range("G3:G" & MaxLaenge & "").ClearContents
End If
If Worksheets("Data").Range("H2").Value = 0 Then
    Worksheets("Data").Range("H3:H" & MaxLaenge & "").ClearContents
End If
If Worksheets("Data").Range("I2").Value = 0 Then
    Worksheets("Data").Range("I3:I" & MaxLaenge & "").ClearContents
End If
If Worksheets("Data").Range("J2").Value = 0 Then
    Worksheets("Data").Range("J3:J" & MaxLaenge & "").ClearContents
End If
If Worksheets("Data").Range("K2").Value = 0 Then
    Worksheets("Data").Range("K3:K" & MaxLaenge & "").ClearContents
End If
If Worksheets("Data").Range("L2").Value = 0 Then
    Worksheets("Data").Range("L3:L" & MaxLaenge & "").ClearContents
End If
If Worksheets("Data").Range("M2").Value = 0 Then
    Worksheets("Data").Range("M3:M" & MaxLaenge & "").ClearContents
End If
If Worksheets("Data").Range("N2").Value = 0 Then
    Worksheets("Data").Range("N3:N" & MaxLaenge & "").ClearContents
End If
If Worksheets("Data").Range("O2").Value = 0 Then
    Worksheets("Data").Range("O3:O" & MaxLaenge & "").ClearContents
End If
If Worksheets("Data").Range("P2").Value = 0 Then
    Worksheets("Data").Range("P3:P" & MaxLaenge & "").ClearContents
End If
If Worksheets("Data").Range("Q2").Value = 0 Then
    Worksheets("Data").Range("Q3:Q" & MaxLaenge & "").ClearContents
End If
If Worksheets("Data").Range("R2").Value = 0 Then
    Worksheets("Data").Range("R3:R" & MaxLaenge & "").ClearContents
End If
If Worksheets("Data").Range("S2").Value = 0 Then
    Worksheets("Data").Range("S3:S" & MaxLaenge & "").ClearContents
End If

'Datum in Data-Tabelle |fffd|bernehmen
If ProductLine = "MB" Then
    CopyDate
End If

'#########################
If NCC = False Then
ErrorHandler:
    If Err.Number = 13 Then
         MsgBox Worksheets("Lang").Range("B108").Value & Err.Number & Worksheets("Lang").Range("B109").Value, vbCritical + vbOKOnly, Worksheets("Lang").Range("B110").Value
    End If
End If
'#########################


End Sub
Attribute VB_Name = "GlobaleVariablen"
'Globale Variablen definieren
Public VarDatumZeit
Public NCC
Public CheckManipulation As Boolean
Public VarVersion As String
Public ProductLine As String

Public bln_system As Boolean 'easy data solution

Attribute VB_Name = "KonvertRegion"
Option Explicit
Dim lng_Ende As Long 'Bestimmt die letzte Zeile der csv Datei
Dim ws As Worksheet
Dim str_DeziTrenner As String 'Dezimaltrenner

#If VBA7 Then 'Office 2010 und neuer
Declare PtrSafe Function GetLocaleInfo Lib "kernel32" Alias "GetLocaleInfoA" ( _
ByVal Locale As Long, ByVal LCType As Long, ByVal lpLCData As String, _
ByVal cchData As Long) As Long
Declare PtrSafe Function SetLocaleInfo Lib "kernel32" Alias "SetLocaleInfoA" ( _
ByVal Locale As Long, ByVal LCType As Long, ByVal lpLCData As String) As Boolean
Declare PtrSafe Function GetUserDefaultLCID Lib "kernel32" () As Long
#Else 'Office 2003 und |fffd|lter
Declare Function GetLocaleInfo Lib "kernel32" Alias "GetLocaleInfoA" ( _
ByVal Locale As Long, ByVal LCType As Long, ByVal lpLCData As String, _
ByVal cchData As Long) As Long
Declare Function SetLocaleInfo Lib "kernel32" Alias "SetLocaleInfoA" ( _
ByVal Locale As Long, ByVal LCType As Long, ByVal lpLCData As String) As Boolean
Declare Function GetUserDefaultLCID Lib "kernel32" () As Long
#End If

Const LOCALE_SDECIMAL = &HE
Const LOCALE_STHOUSAND = &HF

Sub Dezimal()
Dim lngID As Long, lngCVal As Long, msg As String
lngCVal = GetUserDefaultLCID()
msg = String(255, 0)
Call GetLocaleInfo(lngID, LOCALE_SDECIMAL, msg, 255)
str_DeziTrenner = Left(msg, InStr(msg, Chr(0)) - 1)

End Sub
Sub Spalte_E_bis_T()
Dim l_zeile As Long 'Bestimmung Laufindex

'F|fffd|ngt die leeren Spalten bei NCC ab
If NCC = True Then
    On Error Resume Next
End If

'Pr|fffd|ft die Systemeinstellung
Set ws = Worksheets("Raw values") 'Bestimmung Objektvariable
lng_Ende = ws.Range("a2").End(xlDown).Row 'letzte Zeile der Tabelle Raw value

Dezimal 'Bestimmt den Dezimaltrenner
If str_DeziTrenner = "." Then 'nur wenn der Trenner ein Punkt ist
    For l_zeile = 2 To lng_Ende
        ws.Range("e" & l_zeile) = Replace(ws.Range("e" & l_zeile), ",", str_DeziTrenner) * 1
        ws.Range("F" & l_zeile) = Replace(ws.Range("F" & l_zeile), ",", str_DeziTrenner) * 1
        ws.Range("G" & l_zeile) = Replace(ws.Range("G" & l_zeile), ",", str_DeziTrenner) * 1
        ws.Range("H" & l_zeile) = Replace(ws.Range("H" & l_zeile), ",", str_DeziTrenner) * 1
        ws.Range("I" & l_zeile) = Replace(ws.Range("I" & l_zeile), ",", str_DeziTrenner) * 1
        ws.Range("J" & l_zeile) = Replace(ws.Range("J" & l_zeile), ",", str_DeziTrenner) * 1
        ws.Range("K" & l_zeile) = Replace(ws.Range("K" & l_zeile), ",", str_DeziTrenner) * 1
        ws.Range("L" & l_zeile) = Replace(ws.Range("L" & l_zeile), ",", str_DeziTrenner) * 1
        ws.Range("M" & l_zeile) = Replace(ws.Range("M" & l_zeile), ",", str_DeziTrenner) * 1
        ws.Range("N" & l_zeile) = Replace(ws.Range("N" & l_zeile), ",", str_DeziTrenner) * 1
        ws.Range("O" & l_zeile) = Replace(ws.Range("O" & l_zeile), ",", str_DeziTrenner) * 1
        ws.Range("P" & l_zeile) = Replace(ws.Range("P" & l_zeile), ",", str_DeziTrenner) * 1
        ws.Range("Q" & l_zeile) = Replace(ws.Range("Q" & l_zeile), ",", str_DeziTrenner) * 1
        ws.Range("R" & l_zeile) = Replace(ws.Range("R" & l_zeile), ",", str_DeziTrenner) * 1
        ws.Range("S" & l_zeile) = Replace(ws.Range("S" & l_zeile), ",", str_DeziTrenner) * 1
        ws.Range("T" & l_zeile) = Replace(ws.Range("T" & l_zeile), ",", str_DeziTrenner) * 1
    Next l_zeile
End If

'stellt die alte Systemeinstellung wieder zur|fffd|ck
If bln_system = True Then
Application.UseSystemSeparators = True
End If
End Sub



Sub UmwandlungRichtigesFormat()
Set ws = Worksheets("Raw values") 'Bestimmung Objektvariable
lng_Ende = ws.Range("a2").End(xlDown).Row 'letzte Zeile der Tabelle Raw value

Spalte_B
Spalte_E_bis_T
'wenn es das das Wort Checksumme gibt
If CheckManipulation = True Then
    ChecksummenPruefung
End If
End Sub

Sub Spalte_B()
Dim s_Tag As String 'Bestimmung Tag
Dim s_Monat As String 'Bestimmung Monat
Dim s_Jahr As String 'Bestimmung Jahr
Dim l_zeile As Long 'Bestimmung Laufindex
Dim s_Uhrzeit As String 'Bestimmung Uhrzeit
Dim s_DtTrenner As String 'Bestimmung Datumstrenner

s_DtTrenner = ws.Application.International(xlDateSeparator)
For l_zeile = 2 To lng_Ende
    s_Tag = Left(ws.Range("b" & l_zeile), 2) 'Bestimmung Tag
    s_Monat = Mid(ws.Range("b" & l_zeile), 4, 2) 'Bestimmung Monat
    s_Jahr = Mid(ws.Range("b" & l_zeile), 7, 4) 'Bestimmung Jahr
    s_Uhrzeit = Mid(ws.Range("b" & l_zeile), 11) 'Bestimmung Uhrzeit
    
    'Umwandlung der einzelnen Zellen in das passende Format
    If Application.International(xlDateOrder) = 0 Then 'Monat/Tag/Jahr
    ws.Range("b" & l_zeile) = s_Monat & s_DtTrenner & s_Tag & s_DtTrenner & s_Jahr & s_Uhrzeit
    ElseIf Application.International(xlDateOrder) = 1 Then 'Tag/Monat/Jahr
    ws.Range("b" & l_zeile) = s_Tag & s_DtTrenner & s_Monat & s_DtTrenner & s_Jahr & s_Uhrzeit
    ElseIf Application.International(xlDateOrder) = 2 Then 'Jahr/Monat/Tag
    ws.Range("b" & l_zeile) = s_Jahr & s_DtTrenner & s_Monat & s_DtTrenner & s_Tag & s_Uhrzeit
    End If
Next l_zeile


End Sub

Sub ChecksummenPruefung()

Dim DataSumme As Variant
Dim iChecksum As Long
Dim iChecksumLow As Long
Dim iChecksumHigh As Long
Dim antwort As String
Dim spaltechecksum As Integer
Dim i_ende As Integer
Dim j_zeile As Integer
Dim i As Integer
Dim b_pruefung As Boolean

b_pruefung = False
If Not ws.Range("a1:iv1").Find("Checksum") Is Nothing Then
spaltechecksum = ws.Range("a1:iv1").Find("Checksum").Column
    Else
End
End If
i_ende = ws.Range("a1").End(xlDown).Row
            
            'Checksummengleichung: Ganzzahl(10 x Wurzel(ABS(77 x Summe(Daten1-16))))
            'If Dataline(0) = 9 And CheckManipulation = True Then
            '    DataSumme = 0
                
              For j_zeile = 2 To i_ende
              DataSumme = 0
                For i = 5 To spaltechecksum - 1 '(Summe Daten 1-16)
                    If IsNumeric(ws.Cells(j_zeile, i)) Then
                        DataSumme = DataSumme + Cells(j_zeile, i)
                    Else
                        MsgBox Worksheets("Lang").Range("B125").Value
                        Exit For
                    End If
                Next i
             
                'Checksummengleichung #########################
                 iChecksum = Int(Sqr(Abs(DataSumme * 77)) * 10)
                '##############################################
                
                'Rundungsfehler ausschlie|fffd|en
                 iChecksumLow = iChecksum - 1
                 iChecksumHigh = iChecksum + 1
                
                'Checksummenvergleich weicht ab: Abbruch
                 If b_pruefung = False Then
                    If (ws.Cells(j_zeile, spaltechecksum) < iChecksumLow Or ws.Cells(j_zeile, spaltechecksum) > iChecksumHigh) And CheckManipulation And iChecksum <> 0 Then
                           antwort = MsgBox(Worksheets("Lang").Range("B126").Value & (Chr(10)) _
                           & Worksheets("Lang").Range("B127").Value & j_zeile & (Chr(10)) _
                           & Worksheets("Lang").Range("B128").Value & iChecksum & (Chr(10)) _
                           & Worksheets("Lang").Range("B129").Value & ws.Cells(j_zeile, spaltechecksum) & (Chr(10)) & (Chr(10)) _
                           & Worksheets("Lang").Range("B130").Value _
                           , vbYesNo)
                           If antwort = vbYes Then
                               b_pruefung = True 'pr|fffd|ft, ob die Checksummenpr|fffd|fung f|fffd|r alle Zeilen ausgeschaltet werden soll
                               CheckManipulation = False
                           End If
                           If antwort = vbNo Then
                           ws.Cells.Clear
                           Exit Sub
                               CheckManipulation = True
                           End If
                           'If antwort = vbCancel Then
                             '  CalcChecksum = "Cancel"
                           '    Exit Sub
                          ' End If
                    End If
                 End If
            'End If
Next j_zeile
'CalcChecksum = False


End Sub



Attribute VB_Name = "KopfFussZeile"
Public Function headerfooter() As Boolean

Application.ScreenUpdating = False

Dim var_date
Dim var_file
Dim var_page
Dim var_NCC As String

If NCC = True Then
    var_NCC = " (NCC)"
Else
    var_NCC = ""
End If

'Version ermitteln
Version

var_file = Application.ActiveWorkbook.Name

      With Worksheets("Diagram")
      DoEvents
            .PageSetup.LeftHeader = "&""Arial""&8&D"
            .PageSetup.CenterHeader = "&""Arial,fett""&8" & Worksheets("Lang").Range("B7").Value & ": " & Worksheets("Settings").Range("Company").Value
            .PageSetup.RightHeader = "&""Arial""&8" & Worksheets("Lang").Range("B8").Value & ": " & Worksheets("Settings").Range("Ofen").Value
            
            .PageSetup.LeftFooter = "&""Arial""&8" & Worksheets("Lang").Range("B6").Value & ": " & ActiveWorkbook.FullName & ")"
            .PageSetup.RightFooter = "&""Arial""&8 NTGraph V" & VarVersion & " - &P/&N" & var_NCC
      End With

      With Worksheets("Data")
      DoEvents
            .PageSetup.LeftHeader = "&""Arial""&8&D"
            .PageSetup.CenterHeader = "&""Arial,fett""&8" & Worksheets("Lang").Range("B7").Value & ": " & Worksheets("Settings").Range("Company").Value
            .PageSetup.RightHeader = "&""Arial""&8" & Worksheets("Lang").Range("B8").Value & ": " & Worksheets("Settings").Range("Ofen").Value
            
            .PageSetup.LeftFooter = "&""Arial""&8" & Worksheets("Lang").Range("B6").Value & ": " & ActiveWorkbook.FullName & ")"
            .PageSetup.RightFooter = "&""Arial""&8 NTGraph V" & VarVersion & " - &P/&N" & var_NCC
      End With

headerfooter = True
Application.ScreenUpdating = True

End Function

Attribute VB_Name = "NCCConvert"
Public Function NCCFileConvert(NCCFileIn As String) As String

'Variablen & Konstanten definieren
Dim NCCfso, objEingabe, objAusgabe, objSuchen
Dim EingabeDatei, AusgabeDatei, Zeile
Dim Dateiname As String

'EingabeDatei = NCC
'AusgabeDatei = "2.csv"
Const ForReading = 1, ForWriting = 2, ForAppending = 8

'Objekt erstellen
Set NCCfso = CreateObject("Scripting.FileSystemObject")

If NCCfso.FileExists(NCCPath & NCCFileIn) Then
    Set objEingabe = NCCfso.OpenTextFile(NCCFileIn, 1)
    
    Dateiname = Dir(NCCFileIn)
    Dateiname = Left(NCCFileIn, InStr(NCCFileIn, ".") - 1) & "_convert.csv"

    Set objAusgabe = NCCfso.OpenTextFile(Dateiname, 2, True)
Else
    MsgBox "Fehler: Eingabedatei ist nicht vorhanden."
    Exit Function
End If

Do Until objEingabe.AtEndOfStream
    Zeile = objEingabe.ReadAll
    Zeile = Replace(Zeile, Chr(10), Chr(13) & Chr(10))
    objAusgabe.Write (Zeile)
Loop

objEingabe.Close
objAusgabe.Close

' Konvertierte Datei l|fffd|schen
'NCCfso.DeleteFile EingabeDatei, True

' Ausgabedatei umbenennen durch MoveFile
'NCCfso.MoveFile AusgabeDatei, EingabeDatei

Set objAusgabe = Nothing
Set objEingabe = Nothing
Set NCCfso = Nothing

NCCFileConvert = Dateiname

End Function

Attribute VB_Name = "PB1"
Attribute VB_Base = "0{B52A1779-7F6F-49A3-B656-A2C88BA38998}{A9DCA1E9-8781-4550-AEA1-809FBC051197}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Option Explicit


Private Sub UserForm_Activate()

' die Datenaktualisierung muss in diesem Code aufgerufen werden, sonst funktioniert der Fortschrittsbalkenn nicht.
Call Aktualisieren

End Sub


Attribute VB_Name = "PublicFunctions"
Public Function umwandeln(Zellfarbe) As String

Dim Rot As Long, Gruen As Long, Blau As Long

Rot = Zellfarbe Mod 256
Zellfarbe = (Zellfarbe - Rot) / 256
Gruen = Zellfarbe Mod 256
Zellfarbe = (Zellfarbe - Gruen) / 256
Blau = Zellfarbe Mod 256

umwandeln = Format(Hex(Rot), "00") & Format(Hex(Gruen), "00") & Format(Hex(Blau), "00")

End Function


Public Function strDezToBin(ByVal lngZahl As Long) As String
    
    Select Case lngZahl
        Case 0
            strDezToBin = "0"
        Case 1
            strDezToBin = "1"
        Case Else
            strDezToBin = strDezToBin(lngZahl \ 2) & IIf(lngZahl Mod 2, "1", "0")
    End Select

End Function

Public Function YScale(VarDiff As Variant, YFormat As String) As Variant

Select Case (VarDiff)
Case 0 To 4.9
    YScale = 0.1
    YFormat = "#,##0.0"
Case 5 To 49
    YScale = 1
    YFormat = "#,##0"
Case 50 To 99
    YScale = 5
    YFormat = "#,##0"
Case 100 To 500
    YScale = 10
    YFormat = "#,##0"
Case 500 To 999
    YScale = 20
    YFormat = "#,##0"
Case 1000 To 1999
    YScale = 50
    YFormat = "#,##0"
Case 2000 To 2999
    YScale = 100
    YFormat = "#,##0"
Case 3000 To 9999
    YScale = 200
    YFormat = "#,##0"
Case Else
    YScale = 500
    YFormat = "#,##0"
End Select

End Function

Attribute VB_Name = "ReportErstellen"
Sub ReportGenerate()

'Variablen definieren
Dim Chargennummer, PfadKomplettBild, PfadkomplettHtml As String
Dim fsDateiHTML As Object, Text As Object
Dim intSpeichern As Integer
'Dim Dateiname As Variant
Dim count As Long
Dim Inhalt, Pfadname, VarDateiname As String
Dim Zeile As Long, LZ As Long
Dim Spalte As Long, LS As Long
Dim Zellfarbe As Long, TabBreite As Long
Dim ZeichenPos As Integer
Dim ReportUeberschreiben As Boolean
Dim BeschreibungTemp As String
Dim var_NCC As String
Dim BeschreibungHTML, BeschreibungHTML1, BeschreibungHTML2, BeschreibungHTML3, BeschreibungHTML4, BeschreibungHTML5, KommentarHTML As String

'Ausgabe ausschalten
Application.ScreenUpdating = False   'Schaltet den Bildschirm aus

'Wenn ein Fehler auftritt gehe nach unten zum Error-Handler
On Error GoTo ErrorHandler

'Diagramm anw|fffd|hlen
Worksheets("Diagram").Activate
ActiveSheet.ChartObjects(1).Select

'Dateinamen f|fffd|r den HTML-Link des Bildes zusammensetzen und speichern
Chargennummer = Worksheets("Settings").Range("file").Value

If Chargennummer = "" Or Chargennummer = "Error" Then
    MsgBox Worksheets("Lang").Range("B112").Value
    Exit Sub
End If

'++++++++++++++++++++
'Kompletten Dateinamen mit Pfad f|fffd|r das Bild abfragen
    'Filefilter:="GIF-Format (*.gif)," & " *.gif,JPG-Format (*.jpg), *.jpg",
PfadkomplettHtml = Application.GetSaveAsFilename( _
InitialFileName:=Chargennummer, _
FileFilter:="(*.html),*.xl,Alle Dateien (*.*),*.*", _
FilterIndex:=1, _
Title:="", _
ButtonText:="")

'Dateiobjekt f|fffd|r die HTML-Datei anlegen
Set fsDateiHTML = CreateObject("Scripting.FileSystemObject")

'---------------------------
'KomplettDateiname der HTML-Datei erstellen, Komplettpfad der Bilddatei durchsuchen bis zum letzten "\"
    ZeichenPos = 0
    
    If PfadkomplettHtml = "Falsch" Then
        MsgBox Worksheets("Lang").Range("B113").Value
        Worksheets("Settings").Activate
        Exit Sub
    End If
       
    Do 'Pfadnamen durchsuchen bis das letzte "\" erreicht ist
        Pfadname = Mid(PfadkomplettHtml, 1, ZeichenPos)
        ZeichenPos = InStr(ZeichenPos + 1, PfadkomplettHtml, "\") '0 wenn keines mehr vorhanden
    Loop Until ZeichenPos = 0

    'Dateinam ermitteln
    VarDateiname = Mid(PfadkomplettHtml, InStrRev(PfadkomplettHtml, "\") + 1)
    PfadKomplettBild = Pfadname & Worksheets("Settings").Range("file").Value & ".gif"

'---------------------------
'HTML-Datei erstellen
Set fsDateiHTML = CreateObject("Scripting.FileSystemObject")

If fsDateiHTML.FileExists(PfadkomplettHtml) Then
   intSpeichern = MsgBox(PfadkomplettHtml & Worksheets("Lang").Range("B114").Value, 4, Worksheets("Lang").Range("B115").Value)  '4=Yes/No abfrage
Else
   intSpeichern = 6 'Antwort automatisch "Yes", wenn Datei noch nicht vorhanden
End If

' Wenn Dateiname g|fffd|ltig und |fffd|berschreiben freigegeben: l|fffd|sche Dateien und speichere Diagramm
'MsgBox "stop" & PfadkomplettHtml & intSpeichern

If PfadkomplettHtml <> "" And intSpeichern = 6 Then
   If fsDateiHTML.FileExists(PfadkomplettHtml) Then
      Kill PfadkomplettHtml
      Kill PfadKomplettBild
   End If
   ActiveChart.Export FileName:=PfadKomplettBild, FilterName:=Right(PfadKomplettBild, 3) 'Bild speichern
Else
   MsgBox Worksheets("Lang").Range("B116").Value
   Worksheets("Settings").Activate
   Exit Sub
End If

'++++++++++++++++++++
'HTML-Datei schreiben
On Error GoTo Hell

'|fffd|ffnet die Datei zum reinschreiben
fsDateiHTML.CreateTextFile PfadkomplettHtml
Set fsDateiHTML = fsDateiHTML.getfile(PfadkomplettHtml)
Set Text = fsDateiHTML.OpenAsTextStream(2, -1)

'-----------------------
'HTML-Grundger|fffd|st erstellen
Text.Write "<!DOCTYPE HTML PUBLIC ""-//W3C//DTD HTML 4.01 Transitional//EN"">" & vbLf
Text.Write "<html>" & vbLf  '& vbLf erzeugt im html-Quelltext einen Zeilenumbruch
Text.Write "<!-- " & ThisWorkbook.FullName & "-->" & vbLf

Text.Write "<head>" & vbLf
Text.Write "<meta http-equiv=""Content-Type"" content=""text/html; charset=iso-8859-1"">" & vbLf

Text.Write "<title>"
Text.Write Worksheets("Settings").Range("Company").Value & ": " & Worksheets("Settings").Range("Ofen").Value
Text.Write "</title>" & vbLf

Text.Write "<style type=""text/css"">"
Text.Write "@page { "
Text.Write "size: 128mm 257mm;"
Text.Write "margin: 1,5cm;"
Text.Write "margin-bottom: 1,5cm;"
Text.Write "margin-top: 1,5cm;"
Text.Write "landscape;}"
Text.Write "</style>" & vbLf

Text.Write "</head>" & vbLf & vbLf

'Body #####################################

Text.Write "<body bgcolor=""#ffffff"">" & vbLf & vbLf 'Hintergrundfarbe

' Header-Felder vorbelegen
If Worksheets("Settings").Range("Beschreibung").Value = "" Then
    BeschreibungHTML = "-"
Else
    BeschreibungHTML = Worksheets("Settings").Range("Beschreibung").Value
    BeschreibungHTML1 = Worksheets("Settings").Range("Beschreibung1").Value
    BeschreibungHTML2 = Worksheets("Settings").Range("Beschreibung2").Value
    BeschreibungHTML3 = Worksheets("Settings").Range("Beschreibung3").Value
    BeschreibungHTML4 = Worksheets("Settings").Range("Beschreibung4").Value
    BeschreibungHTML5 = Worksheets("Settings").Range("Beschreibung5").Value
End If

If Worksheets("Settings").Range("Kommentar").Value = "" Then
    KommentarHTML = "-"
Else
    KommentarHTML = Worksheets("Settings").Range("Kommentar").Value
End If

If NCC = True Then
    var_NCC = " (NCC)"
Else
    var_NCC = ""
End If

'Reportseite
Text.Write "<h1>" & Worksheets("Lang").Range("B52").Value & "</h1>" & vbLf
Text.Write "<table style=""text-align: left; width: 100%;"" border=""1"" cellpadding=""2"" cellspacing=""0"">" & vbLf
Text.Write "  <tbody>" & vbLf
Text.Write "    <tr>" & vbLf
Text.Write "      <td style=""width: 349px;"">" & Worksheets("Lang").Range("B7").Value & "</td>" & vbLf
Text.Write "      <td style=""width: 738px;"">" & Worksheets("Settings").Range("Company").Value & "</td>" & vbLf
Text.Write "    </tr>" & vbLf
Text.Write "    <tr>" & vbLf
Text.Write "      <td style=""width: 349px;"">" & Worksheets("Lang").Range("B8").Value & "</td>" & vbLf
Text.Write "      <td style=""width: 738px;"">" & Worksheets("Settings").Range("Ofen").Value & var_NCC & "</td>" & vbLf
Text.Write "    </tr>" & vbLf
Text.Write "    <tr>" & vbLf
Text.Write "      <td style=""width: 349px;"">" & Worksheets("Lang").Range("B5").Value & "</td>" & vbLf
Text.Write "      <td style=""width: 738px;"">" & Worksheets("Settings").Range("Datum").Value & "</td>" & vbLf
Text.Write "    </tr>" & vbLf
Text.Write "    <tr>" & vbLf
Text.Write "      <td style=""width: 349px;"">" & Worksheets("Lang").Range("B6").Value & "</td>" & vbLf
Text.Write "      <td style=""width: 738px;"">" & Chargennummer & "</td>" & vbLf
Text.Write "    </tr>" & vbLf
Text.Write "    <tr>" & vbLf
Text.Write "      <td style=""width: 349px;"">" & Worksheets("Lang").Range("B45").Value & "</td>" & vbLf
Text.Write "      <td style=""width: 738px;"">" & PfadkomplettHtml & "</td>" & vbLf
Text.Write "    </tr>" & vbLf
Text.Write "    <tr>" & vbLf
Text.Write "      <td style=""width: 349px;"">" & Worksheets("Lang").Range("B22").Value & " 1</td>" & vbLf
Text.Write "      <td style=""width: 738px;"">" & BeschreibungHTML & "</td>" & vbLf
Text.Write "    </tr>" & vbLf
    If BeschreibungHTML1 <> "" Then
        Text.Write "    <tr>" & vbLf
        Text.Write "      <td style=""width: 349px;"">" & Worksheets("Lang").Range("B22").Value & " 2</td>" & vbLf
        Text.Write "      <td style=""width: 738px;"">" & BeschreibungHTML1 & "</td>" & vbLf
        Text.Write "    </tr>" & vbLf
    End If
    If BeschreibungHTML2 <> "" Then
        Text.Write "    <tr>" & vbLf
        Text.Write "      <td style=""width: 349px;"">" & Worksheets("Lang").Range("B22").Value & " 3</td>" & vbLf
        Text.Write "      <td style=""width: 738px;"">" & BeschreibungHTML2 & "</td>" & vbLf
        Text.Write "    </tr>" & vbLf
    End If
    If BeschreibungHTML3 <> "" Then
        Text.Write "    <tr>" & vbLf
        Text.Write "      <td style=""width: 349px;"">" & Worksheets("Lang").Range("B22").Value & " 4</td>" & vbLf
        Text.Write "      <td style=""width: 738px;"">" & BeschreibungHTML3 & "</td>" & vbLf
        Text.Write "    </tr>" & vbLf
    End If
    If BeschreibungHTML4 <> "" Then
        Text.Write "    <tr>" & vbLf
        Text.Write "      <td style=""width: 349px;"">" & Worksheets("Lang").Range("B22").Value & " 5</td>" & vbLf
        Text.Write "      <td style=""width: 738px;"">" & BeschreibungHTML4 & "</td>" & vbLf
        Text.Write "    </tr>" & vbLf
    End If
    If BeschreibungHTML5 <> "" Then
        Text.Write "    <tr>" & vbLf
        Text.Write "      <td style=""width: 349px;"">" & Worksheets("Lang").Range("B22").Value & " 6</td>" & vbLf
        Text.Write "      <td style=""width: 738px;"">" & BeschreibungHTML5 & "</td>" & vbLf
        Text.Write "    </tr>" & vbLf
    End If
Text.Write "    <tr>" & vbLf
Text.Write "      <td style=""width: 349px;"">" & Worksheets("Lang").Range("B23").Value & "</td>" & vbLf
Text.Write "      <td style=""width: 738px;"">" & KommentarHTML & "</td>" & vbLf
Text.Write "    </tr>" & vbLf
Text.Write "    <tr>" & vbLf
Text.Write "      <td style=""width: 349px;"">" & Worksheets("Lang").Range("B71").Value & "</td>" & vbLf
Text.Write "      <td style=""width: 738px;"">" & Worksheets("Settings").Range("ProgramNumber").Value & "</td>" & vbLf
Text.Write "    </tr>" & vbLf
Text.Write "    <tr>" & vbLf
Text.Write "      <td style=""width: 349px;"">" & Worksheets("Lang").Range("B23").Value & "</td>" & vbLf
Text.Write "      <td style=""width: 738px;"">" & Worksheets("Settings").Range("ProgramName") & "</td>" & vbLf
Text.Write "    </tr>" & vbLf
Text.Write "    <tr>" & vbLf
Text.Write "      <td style=""width: 349px;"">" & Worksheets("Lang").Range("B46").Value & "</td>" & vbLf
Text.Write "      <td style=""width: 738px;"">" & Worksheets("Settings").ComboBox1.Value & "</td>" & vbLf
Text.Write "    </tr>" & vbLf
Text.Write "  </tbody>" & vbLf
Text.Write "</table>"
Text.Write "<br>" & vbLf & vbLf

'######################################################
'Diagramm einbinden, Seitenvorschub vorher
'Text.Write "<h2 style=""page-break-before:always"">" & Worksheets("Lang").Range("B47").Value & "</h2>" & vbLf
Text.Write "<h2>" & Worksheets("Lang").Range("B47").Value & "</h2>" & vbLf

'Leerzeichen gegen HTML-Kmonventionen %20 tauschen f|fffd|r Hyperlink ersetzen
'PfadDiagramm = Replace(PfadKomplettBild, " ", "%20")

Chargennummer = Replace(Chargennummer, " ", "%20")

Text.Write "<img style=""width: 900px; height: 580px;"" alt=""Diagram"""
Text.Write " src=" & Chargennummer & ".gif" & "></small>"
Text.Write "<br>"
Text.Write "<br>" & vbLf

'letzte Zeile mit Inhalt (Excel) ermitteln
Worksheets("Data").Activate
LZ = Worksheets("Settings").Range("Laenge").Value + 2
LS = Worksheets("Data").Cells.Find(What:="*", After:=[a1], SearchOrder:=xlByColumns, _
    SearchDirection:=xlPrevious).Column

'Tabellenbreite ermitteln
For Spalte = 1 To LS
  TabBreite = TabBreite + Round(Cells(1, Spalte).Width * 1)
Next Spalte

'HTML-Tabelle einf|fffd|gen

intSpeichern = MsgBox(Worksheets("Lang").Range("B117").Value, _
      4, Worksheets("Lang").Range("B115").Value) '4=Yes/No abfrage

If intSpeichern = 6 Then  ' 6 = Yes

    Text.Write "<h2 style=""page-break-before:always"">" & Worksheets("Lang").Range("B48").Value & "</h2>" & vbLf & vbLf
    Text.Write "<table border=""0"" bgcolor=""#C0C0C0"" align=""left""" _
          & "cellpadding=""3"" cellspacing=""1"" width=""" & TabBreite & """>" & vbLf

    For Zeile = 1 To LZ
    Text.Write "<tr>" & vbLf ' Zeile einf|fffd|gen
        For Spalte = 1 To LS
        ' Die ersten 3 Spalten ignorieren
            If Spalte <> 2 And Spalte <> 3 Then
                Zellfarbe = Worksheets("Data").Cells(Zeile, Spalte).Interior.Color
                'Hex_Farbe = umwandeln(Zellfarbe)  'Funktion aufrufen
                Hex_Farbe = "ffffff"
                Text.Write "    <td align=""right"" bgcolor=""#" & Hex_Farbe & """" & "width=""" & Round(Worksheets("Data").Cells(Zeile, Spalte).Width * 1) & """><small><small>"
                Inhalt = Worksheets("Data").Cells(Zeile, Spalte).Value
                Text.Write Inhalt & "</small></small></td>" & vbLf
            End If
        Next Spalte
    
        Text.Write "</tr>"  ' Zeile schlie|fffd|en
        Text.Write vbLf     'Zeilenumbruch im HTML-Quelltext
    Next Zeile

Else
    MsgBox Worksheets("Lang").Range("B118").Value
End If


'######################################################>
'alle HTML-Tags wieder schlie|fffd|en
Text.Write "</table>" & vbLf
Text.Write "</body>" & vbLf
Text.Write "</html>" & vbLf
Text.Close

Worksheets("Settings").Activate

'Info zu Speicherpfad + Frage wg Anzeige
'If MsgBox("Saved as Html-Report in:    " & PfadkomplettHtml _
'    & vbNewLine & vbNewLine _
'    & "Open Report?", vbYesNo, "") = vbYes Then
   Shell "hh " & PfadkomplettHtml, vbMaximizedFocus
'End If

'aufr|fffd|umen
Set fsDateiHTML = Nothing
Set Text = Nothing
Worksheets("Settings").Activate
Exit Sub

'Fehlerbehandlung
Hell:
Set fsDateiHTML = Nothing
Set Text = Nothing
MsgBox Worksheets("Lang").Range("B108").Value & Err.Number & vbNewLine & vbNewLine _
        & Worksheets("Lang").Range("B119").Value & Err.Description _
       , vbCritical, Worksheets("Lang").Range("B120").Value

Worksheets("Settings").Activate
Exit Sub

'ErrorHandler############
ErrorHandler:
If Err.Number = 91 Then
     MsgBox Worksheets("Lang").Range("B121").Value, _
     vbCritical + vbOKOnly, Worksheets("Lang").Range("B122").Value
ElseIf Err.Number = 1004 Then
     MsgBox Worksheets("Lang").Range("B123").Value, vbCritical + _
     vbOKOnly, Worksheets("Lang").Range("B124").Value
Else
     MsgBox Worksheets("Lang").Range("B108").Value & _
     Err.Number & " - " & Err.Description, vbCritical + _
     vbOKOnly, Worksheets("Lang").Range("B122").Value
End If

'Ausgabe einschalten
Application.ScreenUpdating = True ' Schaltet den Bildschirm aus

End Sub
Attribute VB_Name = "Tabelle1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Activate()
 Range("A1").Select
 End Sub
Attribute VB_Name = "Tabelle2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "CommandButton21, 24, 2, MSForms, CommandButton2"
Attribute VB_Control = "CommandButton22, 25, 3, MSForms, CommandButton2"
Private Sub CommandButton21_Click()
   Worksheets("Settings").Activate
End Sub

Private Sub CommandButton22_Click()
    
    headerfooter
    Application.Dialogs(xlDialogPrint).Show
    

End Sub

Private Sub Worksheet_Activate()
 Range("A1").Select
 
' ActiveSheet.Shapes.Range(Array("Drucken")).Select
' ActiveSheet.Shapes("Drucken").Width = 70
' ActiveSheet.Shapes("Drucken").Height = 40
' ActiveSheet.Shapes("Drucken").Left = 3
' ActiveSheet.Shapes("Drucken").Top = 3

' ActiveSheet.Shapes.Range(Array("einstellungen")).Select
' ActiveSheet.Shapes("einstellungen").Width = 70
' ActiveSheet.Shapes("einstellungen").Height = 40
' ActiveSheet.Shapes("einstellungen").Left = 71
' ActiveSheet.Shapes("einstellungen").Top = 3
 
 End Sub

Private Sub CommandButton1_Click()

   Worksheets("Settings").Activate

End Sub

Attribute VB_Name = "Tabelle3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "Drucken, 1, 0, MSForms, CommandButton"
Attribute VB_Control = "einstellungen, 2, 1, MSForms, CommandButton"
'Seite Sets

Private Sub Worksheet_Activate()
 Range("A1").Select
 End Sub

'Farbpalette |fffd|ffnen bei Click
Private Sub Worksheet_SelectionChange(ByVal Target As Range)
'     If Not Intersect(Target, Range("D05:D61, I05:I61, NI05:N61, SI05:S61")) Is Nothing Then
     If Not Intersect(Target, Range("D05:D61, I05:I61, N05:N61, S05:S61")) Is Nothing Then
        Application.Dialogs(xlDialogPatterns).Show
    End If
 End Sub
 

Private Sub Drucken_Click()
    
    headerfooter
    Application.Dialogs(xlDialogPrint).Show
        
End Sub

Private Sub einstellungen_Click()

'Liste f|fffd|r die Setauswahl initiieren
Worksheets("Settings").ComboBox1.List = _
Array(Worksheets("Sets").Range("dset1").Value, _
Worksheets("Sets").Range("dset2").Value, _
Worksheets("Sets").Range("dset3").Value, _
Worksheets("Sets").Range("dset4").Value, _
Worksheets("Sets").Range("dset5").Value, _
Worksheets("Sets").Range("dset6").Value, _
Worksheets("Sets").Range("dset7").Value, _
Worksheets("Sets").Range("dset8").Value, _
Worksheets("Sets").Range("dset9").Value, _
Worksheets("Sets").Range("dset10").Value, _
Worksheets("Sets").Range("dset11").Value, _
Worksheets("Sets").Range("dset12").Value)

Worksheets("Settings").Activate

End Sub


Attribute VB_Name = "Tabelle4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "CommandButton21, 1081, 6, MSForms, CommandButton2"
Attribute VB_Control = "einstellungen, 310, 7, MSForms, CommandButton"
Attribute VB_Control = "Drucken, 298, 8, MSForms, CommandButton"
Private Sub CommandButton21_Click()
Dim strFileName As String

Dim ws As Worksheet
Dim strPath As String
Dim myFile As Variant
Dim strFile As String
On Error GoTo errHandler

Set ws = ActiveSheet

strFileName = Worksheets("Settings").Range("Pfad").Value & Worksheets("Settings").Range("File").Value & ".pdf"

myFile = Application.GetSaveAsFilename _
    (InitialFileName:=strFileName, _
        FileFilter:="PDF Files (*.pdf), *.pdf", _
        Title:="")

If myFile <> "False" Then
    ws.ExportAsFixedFormat _
        Type:=xlTypePDF, _
        FileName:=myFile, _
        Quality:=xlQualityStandard, _
        IncludeDocProperties:=True, _
        IgnorePrintAreas:=False, _
        OpenAfterPublish:=True

'    MsgBox "PDF file has been created."
End If

exitHandler:
    Exit Sub
errHandler:
'    MsgBox "Could not create PDF file"
    Resume exitHandler

End Sub

Private Sub Worksheet_Activate()
 Range("A1").Select
 End Sub

Private Sub Drucken_Click()
    
    headerfooter
    Application.Dialogs(xlDialogPrint).Show

End Sub

Private Sub einstellungen_Click()
    
    Worksheets("Settings").Activate

End Sub



Attribute VB_Name = "Tabelle5"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "CheckManipulationButton, 1059, 1, MSForms, CheckBox"
Attribute VB_Control = "CSVLaden, 1030, 2, MSForms, CommandButton"
Attribute VB_Control = "ShowDiagram, 1042, 3, MSForms, CommandButton"
Attribute VB_Control = "ShowTable, 1043, 4, MSForms, CommandButton"
Attribute VB_Control = "Reset, 1049, 5, MSForms, CommandButton"
Attribute VB_Control = "ShowReport, 1058, 6, MSForms, CommandButton"
Attribute VB_Control = "ComboBox1, 1053, 7, MSForms, ComboBox"
Attribute VB_Control = "ComboBox2, 3063, 9, MSForms, ComboBox"
Attribute VB_Control = "NCCButton, 5400, 10, MSForms, CheckBox"
Attribute VB_Control = "PfadSuchen, 3569, 11, MSForms, CommandButton"
Option Explicit
   Dim Hex_Farbe As String
Option Base 1

Private Sub Worksheet_Activate()
 Range("A1").Select
 End Sub

' Farbpalette |fffd|ffnen bei Click
Private Sub Worksheet_SelectionChange(ByVal Target As Range)
     If Not Intersect(Target, Range("D18:D34")) Is Nothing Then
        Application.Dialogs(xlDialogPatterns).Show
    End If
 End Sub

Private Sub CheckManipulationButton_Click()

'Einschalten der Checksummenpr|fffd|fung nach dem Dr|fffd|cken
    If Worksheets("Settings").OLEObjects("CheckManipulationButton").Object.Value Then
        CheckManipulation = True
    Else
        CheckManipulation = False
    End If

End Sub
Private Sub NCCButton_Click()

'Bediener m|fffd|chte eine NCC-Datei importieren
    If Worksheets("Settings").OLEObjects("NCCButton").Object.Value Then
        NCC = True
    Else
        NCC = False
    End If

End Sub

Private Sub CommandButton1_Click()
DateInput.TextBox1.Value = Date
DateInput.TextBox2.Value = Time

DateInput.Show
End Sub

Private Sub ComboBox2_Change()
'|fffd|ber ein PullDownMen|fffd| kann ein anderer Ofenname angew|fffd|hlt werden
'Diese Funktion kopiert von der Ofenseite in die Startseite

'Liste f|fffd|r die Setauswahl initiieren
Worksheets("Settings").ComboBox2.ListFillRange = "Furnaces!B5:B36"

Dim VarFurnaceName As String ' aktueller Datensatz
Dim Datensatznummer, i As Integer
Dim iString, DatensatznummerString As String

'Eintrag in der Combobox lesen
VarFurnaceName = Worksheets("Settings").ComboBox2.Value

'Ofensatz und zugeh|fffd|rigen Datensatz kopieren
For i = 1 To 32
  iString = i
  If i < 10 Then
    iString = "0" & i
  End If
  
' Wenn Comboboxauswahl einem Ofensatz entspricht dann..
  If VarFurnaceName = Worksheets("Furnaces").Range("Ofen" & iString & "").Value Then
     ' Lies die Datensatznummer zu dem Ofen aus
     Datensatznummer = Worksheets("Furnaces").Range("OfenDS" & iString & "").Value
     ' F|fffd|ge eine 0 f|fffd|r Zahlen bis 10 hinzu
     If Datensatznummer < 10 Then
        DatensatznummerString = "0" & Datensatznummer
     Else
        DatensatznummerString = Datensatznummer
     End If
     'Kopiere den Ofensatz und kopiere ihn in die Einstellungsseite
     Worksheets("Furnaces").Range("Ofenset" & iString & "").Copy
     Worksheets("Settings").Paste Destination:=Worksheets("Settings").Range("FurnaceSet00")
     'Kopiere den zugeh|fffd|rigen Datensatz und kopiere ihn in die Einstellungsseite
     Worksheets("Sets").Range("Dataset" & DatensatznummerString & "").Copy
     Worksheets("Settings").Paste Destination:=Worksheets("Settings").Range("DataSet00")
     'Verlasse die For-Schleife wenn Eintrag erreicht
     Exit For
  End If
Next i
         
'Zwischenablage leeren
Application.CutCopyMode = False
         
' Stelle die Combobox f|fffd|r den Datensatz auf den entsprechenden Ofen ein.
Worksheets("Settings").ComboBox1.ListIndex = Datensatznummer - 1
   
'Faktoren aktualisieren
'FaktorAktualisieren

'ErrorHandler############
ErrorHandler:

If Err.Number = 1004 Then
      MsgBox Worksheets("Lang").Range("B100").Value & Worksheets("Lang").Range("B101").Value, vbCritical + vbOKOnly, Worksheets("Lang").Range("B102").Value
     
End If

End Sub


Private Sub PfadSuchen_Click()

'Sub netzwerk_durchsuchen()
Dim Ordnerpfad
Dim dat
Set dat = Application.FileDialog(msoFileDialogFolderPicker)
With dat
   .Title = "Netzwerk...."
   .InitialFileName = "c:\" 'oder was auch immer
              If .Show = -1 Then
                 Ordnerpfad = .SelectedItems(1)
 '               MsgBox Ordnerpfad 'Zur weiteren verwendung
                 Worksheets("Settings").Range("Pfad").Value = Ordnerpfad
             End If
    End With
End Sub

Private Sub ShowReport_Click()

'Modul Report generieren aufrufen
KurveZeichnen
headerfooter
ReportGenerate

Exit Sub

End Sub

Private Sub ShowDiagram_Click()
'Faktoren aktualisieren f|fffd|r die Skalierung
FaktorAktualisieren
    
'Neue Kurve zeichnen
KurveZeichnen
'headerfooter
    
'Diagramm aufrufen
    Worksheets("Diagram").Activate

End Sub

Private Sub ShowTable_Click()
' Faktoren aktualisieren f|fffd|r die Skalierung
    FaktorAktualisieren

'Datentabelle aufrufen
    Worksheets("Data").Activate

End Sub

' |fffd|ber ein PullDownMen|fffd| kann ein anderes Set angew|fffd|hlt werden
'Diese Funktion kopiert sets von der Set-Seite in die Startseite

Private Sub ComboBox1_Change()

'Liste f|fffd|r die Setauswahl initiieren
Worksheets("Settings").ComboBox1.List = _
Array(Worksheets("Sets").Range("dset1").Value, _
Worksheets("Sets").Range("dset2").Value, _
Worksheets("Sets").Range("dset3").Value, _
Worksheets("Sets").Range("dset4").Value, _
Worksheets("Sets").Range("dset5").Value, _
Worksheets("Sets").Range("dset6").Value, _
Worksheets("Sets").Range("dset7").Value, _
Worksheets("Sets").Range("dset8").Value, _
Worksheets("Sets").Range("dset9").Value, _
Worksheets("Sets").Range("dset10").Value, _
Worksheets("Sets").Range("dset11").Value, _
Worksheets("Sets").Range("dset12").Value)

Dim VarDataset As String ' aktueller Datensatz

'Wenn nicht richtig aktuelisiert wurde Fehler abfangen
On Error GoTo ErrorHandler

If NCC = True Then
    On Error Resume Next
End If

VarDataset = Worksheets("Settings").ComboBox1.Value

'Sets in die Zwischenablage kopieren
With Worksheets("Sets")
 If VarDataset = Worksheets("Sets").Range("dset1").Value Then
        .Range("Dataset01").Copy
    ElseIf VarDataset = Worksheets("Sets").Range("dset2").Value Then
        .Range("Dataset02").Copy
    ElseIf VarDataset = Worksheets("Sets").Range("dset3").Value Then
        .Range("Dataset03").Copy
    ElseIf VarDataset = Worksheets("Sets").Range("dset4").Value Then
        .Range("Dataset04").Copy
    ElseIf VarDataset = Worksheets("Sets").Range("dset5").Value Then
        .Range("Dataset05").Copy
    ElseIf VarDataset = Worksheets("Sets").Range("dset6").Value Then
        .Range("Dataset06").Copy
    ElseIf VarDataset = Worksheets("Sets").Range("dset7").Value Then
        .Range("Dataset07").Copy
    ElseIf VarDataset = Worksheets("Sets").Range("dset8").Value Then
        .Range("Dataset08").Copy
    ElseIf VarDataset = Worksheets("Sets").Range("dset9").Value Then
        .Range("Dataset09").Copy
    ElseIf VarDataset = Worksheets("Sets").Range("dset10").Value Then
        .Range("Dataset10").Copy
    ElseIf VarDataset = Worksheets("Sets").Range("dset11").Value Then
        .Range("Dataset11").Copy
    ElseIf VarDataset = Worksheets("Sets").Range("dset12").Value Then
        .Range("Dataset12").Copy
    End If
    
'Sets aus der Zwischenablage in die Startseite kopieren
    Worksheets("Settings").Paste Destination:=Worksheets("Settings").Range("Dataset00")

'Zwischenablage leeren
Application.CutCopyMode = False

'Faktoren aktualisieren
'    FaktorAktualisieren

End With

'ErrorHandler############
ErrorHandler:

If Err.Number = 1004 Then
      MsgBox Worksheets("Lang").Range("B100").Value & Worksheets("Lang").Range("B101").Value, vbCritical + vbOKOnly, Worksheets("Lang").Range("B102").Value
     
End If
    
End Sub

Private Sub Reset_Click()

'Originalskalierung wiederherstellen mit Button
With Worksheets("Settings")
      .Range("Yend").Value = Round(Application.Max(Sheets("Data").Range("D3:S" & Worksheets("Settings").Range("Laenge").Value + 3 & "")) * 1.15)
      .Range("Y2end").Value = 100
      .Range("Ystart").Value = 0
      .Range("Y2start").Value = 0
      .Range("Xstart").Value = 0
      .Range("Xend").Value = .Range("MaxZeilen").Value
    End With
End Sub

Private Sub StartKurve_Click()

'Neue Kurve zeichnen
KurveZeichnen
'headerfooter

End Sub

Private Sub CSVLaden_Click()

'File importieren
LargeFileImport
Worksheets("Settings").Activate

End Sub

Sub LargeFileImport()

' Ablauf:
'- Datei |fffd|ffnen mit dem vorgegebenen Pfad

Dim VarPfad, Laufwerk As String
Dim FileName As String
Dim FileNum As Integer
Dim ResultStr, ResultStr2 As String

Dim strValues(31999, 1) As String

Dim lngRow As Long
Dim intSheet As Integer

Dim filecharge As String

Dim DatenbereichGestartet As Boolean

Dim iCS As Integer
Dim iST As Integer
Dim SpalteStatus, SpalteA As Integer
Dim SpalteIndex As Variant

Dim ArrResultStr As Variant
Dim spaltechecksum As Integer
Dim ChecksumStatus As String
Dim VarProgramNumber As String
Dim VarProgramName As String

Dim i As Long
Dim StatusDez As Variant
Dim StatusBin As String

Dim ws As Worksheet
Dim ws_setting As Worksheet

Dim Zeitdiff, ZeitdiffMin, ZeitdiffMax As Long
                     
'Variablen Initialisieren
'NCC = False
DatenbereichGestartet = False
SpalteStatus = 0
spaltechecksum = 0
ProductLine = ""
Worksheets("Settings").Range("MaxZeilen").Value = ""
Worksheets("Settings").Range("StatusImport").Value = ""

'L|fffd|sche den Kommentar und Beschreibung nach einem neuen Einlesen der Datei
Worksheets("Settings").Range("Beschreibung").Value = ""
Worksheets("Settings").Range("Beschreibung1").Value = ""
Worksheets("Settings").Range("Beschreibung2").Value = ""
Worksheets("Settings").Range("Beschreibung3").Value = ""
Worksheets("Settings").Range("Beschreibung4").Value = ""
Worksheets("Settings").Range("Beschreibung5").Value = ""
Worksheets("Settings").Range("Kommentar").Value = ""


'#####################################################################################################################
'Pfadeinstellung -> Datei |fffd|ffnen
'#####################################################################################################################

'easy data solution: Trennzeichen vom Betriebsstystem ausschalten
'Pr|fffd|ft die Systemeinstellung
bln_system = False
If Application.UseSystemSeparators = True Then
    Application.UseSystemSeparators = False
    bln_system = True
End If

VarPfad = Worksheets("Settings").Range("Pfad").Value
Laufwerk = Left(VarPfad, 3)

If VarPfad <> "" Then
    Dim DateiObjekt As Object
    Set DateiObjekt = CreateObject("Scripting.FileSystemObject")
    If DateiObjekt.FolderExists(VarPfad) Then 'Pr|fffd|fen, ob Ordner existiert. Dir f|fffd|hrt zu Fehler bei CD-Laufwerk
        'If (Dir(VarPfad, vbDirectory) <> "") Then
            ChDrive Laufwerk
            ChDir VarPfad
        'End If
    Else
        MsgBox Worksheets("Lang").Range("B103").Value
    End If
    Set DateiObjekt = Nothing 'Objekt l|fffd|schen
End If


FileName = Application.GetOpenFilename("Textdateien " & "(*.txt; *.csv; *.html),*.txt; *.csv; *.html")

'****** NCC-Datei konvertieren
If NCC = True Then
    FileName = NCCFileConvert(FileName)
End If

If FileName = "" Or FileName = "Falsch" Then
    MsgBox Worksheets("Lang").Range("B104").Value
    Exit Sub
End If

'N|fffd|chste freie Filenummer ermitteln
FileNum = FreeFile()

'Filename ohne Endung extrahieren und auf der |fffd|bersicht anzeigen
    filecharge = Dir(FileName)
    filecharge = Left(filecharge, InStr(filecharge, ".") - 1)
    Worksheets("Settings").Range("file").Value = filecharge

Open FileName For Input As #FileNum
Application.ScreenUpdating = False

'Seite "Raw values" l|fffd|schen
Worksheets("Raw values").Range("A1:Z31999").ClearContents

'Oben links im Reiter "Raw values" positionieren
Worksheets("Raw values").Activate
lngRow = 1
intSheet = 1

'Checksummenpr|fffd|fung abfragen
If Worksheets("Settings").OLEObjects("CheckManipulationButton").Object.Value Then
      CheckManipulation = True
End If

'###############################################################################################################
'Datei zeilenweise einlesen bis die Datei zu Ende ist und in ein Textarray kopieren
'###############################################################################################################

Do While Seek(FileNum) <= LOF(FileNum)
    'Zeile in String einlesen
    Line Input #FileNum, ResultStr
              ResultStr = Replace(ResultStr, "Temperatur", "")
              ResultStr = Replace(ResultStr, "Temperature", "")
              ResultStr = Replace(ResultStr, "OP:", "")
 
 If ResultStr <> "" Then
'easydatasolution: Es wird gepr|fffd|ft, ob beim Import schon ein Komma oder ein Punkt als Dezimaltrenner verwendet wird
    If ThisWorkbook.Worksheets("Start").OLEObjects("OptionButton1").Object.Value = True Then
       ResultStr = Replace(ResultStr, ",", ".")
    End If
 
    'H|fffd|ufig verwendete Variablen f|fffd|llen
    ArrResultStr = Split(ResultStr, ";")
    'SpalteIndex = Left(ResultStr, 1)
    SpalteIndex = ArrResultStr(0)
 Else
    ArrResultStr = ""
    SpalteIndex = ""
 End If
        
        
'Wenn Datenbereich begonnen hat, dann akzeptiere nur noch Datenzeilen, da auch Header zwischendrin kommen k|fffd|nnen
    If SpalteIndex = "9" Then
        DatenbereichGestartet = True
    End If
 
'Importiere Product line
    If SpalteIndex = "83" Then
        ProductLine = ArrResultStr(2)
    End If

'Importiere Programmnummer
If SpalteIndex = "3" Then
        VarProgramNumber = ArrResultStr(2)
    End If

'Importiere Programmname
    If SpalteIndex = "3" Then
        VarProgramName = ArrResultStr(3)
        If VarProgramName = "" Then
            VarProgramName = "-"
        End If
    End If


'Zeilendiagnose: Kommentar ********************************************
    'Kommentar (Index = 6) auslesen und in den Startbildschirm eintragen
    If SpalteIndex = "6" Then
        If NCC Then
            Worksheets("Settings").Range("Kommentar").Value = "NCC"
        Else
            Worksheets("Settings").Range("Kommentar").Value = ArrResultStr(2)
        End If
    End If
    
'Zeilendiagnose: |fffd|berschriften ********************************************
    If SpalteIndex = "7" Then
        
        'Stelle fest, wo die Spalte mit der |fffd|berschrift "Checksum" ist
        For iCS = 1 To UBound(ArrResultStr)
            If ArrResultStr(iCS) = "Checksum" Then
                 spaltechecksum = iCS
            End If
        Next iCS
    
        'Es gibt keine |fffd|berschrift "Checksum" - > Pr|fffd|fung wird ignoriert f|fffd|r den Rest des Imports
        If spaltechecksum = 0 And CheckManipulation = True Then
            MsgBox Worksheets("Lang").Range("B105").Value
            Worksheets("Settings").OLEObjects("CheckManipulationButton").Object.Value = False
            CheckManipulation = False
        End If
        
        'Stelle fest, wo die Spalte mit der |fffd|berschrift "Status" ist
        For iST = 1 To UBound(ArrResultStr)
            If ArrResultStr(iST) = "Status" Then
                SpalteStatus = iST
            End If
        Next iST
        
    End If
    
'Zeilendiagnose: Datenzeilen und |fffd|berschriften -> 7 = Header, 9 = Daten ********************************************
    If (SpalteIndex = "7" And DatenbereichGestartet <> True) Or SpalteIndex = "9" Then
          
          'NCC: Stelle das zweite Semikolon fest, da Datum und Zeit bei NCC durch ";" getrennt sind
           If SpalteIndex = "9" And InStr(3, ResultStr, ";") < 16 Then
              'wenn Position < xy dann l|fffd|sche erstes Semikolon
              NCC = True
              ResultStr2 = Left(ResultStr, (InStr(3, ResultStr, ";") - 1)) & " " & Mid(ResultStr, ((InStr(3, ResultStr, ";") + 1)))
              'Nun das erste ";" verdoppeln, damit die Anzahl der Spalten wieder stimmt
              ResultStr = Left(ResultStr2, 2) & Replace(ResultStr2, ";", ";;", 3, 1, vbTextCompare)
              ResultStr = Replace(ResultStr, "Temperature", "")
              ResultStr = Replace(ResultStr, "OP:", "")
              'NCC hat Punkte als Dezimaltrenner. Dies muss gegen ein Komma getauscht werden, es sei denn der Punkt ist bereits Dezimaltrenner (USA)
              If ThisWorkbook.Worksheets("Start").OLEObjects("OptionButton1").Object.Value = False Then
                    ResultStr = Replace(ResultStr, ".", ",")
                    'MsgBox "Hallo"
              End If
            Else
              NCC = False
           End If

' Wenn eine NCC/Datei ge;ffnet wird, dann schalte alle Fehler aus.

If NCC = True Then
On Error Resume Next
End If

           
           'Status in Bin|fffd|res Form wandeln, in den Resultstr eintragen und in ein Array kopieren
            If ArrResultStr(0) = 9 And SpalteStatus <> "0" Then
            
                'String f|fffd|r den Status als Dezimalzahl sichern
                If IsNumeric(ArrResultStr(SpalteStatus)) Then
                    StatusDez = ArrResultStr(SpalteStatus)
                End If
                
                'Dezimalwert in Bin|fffd|rwert konvertieren
                StatusBin = "2#" & CStr(Format(strDezToBin(StatusDez), "0000000000000000"))
                
                'Bin|fffd|rwert in den Resultstr zur|fffd|ckkopieren
                ArrResultStr(SpalteStatus) = StatusBin
                ResultStr = ""
                
                For i = 0 To UBound(ArrResultStr)
                    ResultStr = ResultStr & ArrResultStr(i) & ";"
                Next i
            End If
            
          'Zeile in Arrayzelle kopieren
           strValues(lngRow, 1) = ResultStr
           'MsgBox ResultStr
     Else
         'Zeile nicht |fffd|bernehmen, wenn dies keine Datenzeile ist -> 7 = Header, 9 = Daten
         strValues(lngRow, 1) = ""
         lngRow = lngRow - 1
    End If
    
'################ Bei zu vielen Zeilen neues Sheet anlegen
    If lngRow < 31999 Then
            lngRow = lngRow + 1
        Else
            'Wenn Datei zu viele Zeilen hat, neues Sheet anlegen
            ActiveSheet.Range("A1:A31999") = strValues
            ActiveWorkbook.Worksheets.Add After:=Worksheets(Worksheets.count)
            lngRow = 1
            intSheet = intSheet + 1
            Application.StatusBar = "Blatt " & intSheet & " wird eingelesen"
    End If
    
    'Datei enth|fffd|lt keine Daten
    If Seek(FileNum) >= (LOF(FileNum)) - 1 And DatenbereichGestartet = False Then
        MsgBox Worksheets("Lang").Range("B106").Value
        Worksheets("Settings").Range("file").Value = "error"
        Exit Sub
    End If
   
Loop


'##########################################
'Kopiere die Datensatzanzahl in die |fffd|bersicht
Worksheets("Settings").Range("Laenge").Value = lngRow - 2

'Kopiere Programmname und Nummer in die |fffd|bersicht
Worksheets("Settings").Range("ProgramName").Value = VarProgramName
Worksheets("Settings").Range("ProgramNumber").Value = VarProgramNumber

Close

'Kopiere das Stringarray in das Rohdatenblatt Spalte A
ActiveSheet.Range("A1:A31999") = strValues

'Spalte A zertrennen nach Semikolon getrennt in die Spalten
With ActiveSheet
     .Range("A:A").TextToColumns Destination:=.Range("A1"), _
              DataType:=xlDelimited, _
                TextQualifier:=xlDoubleQuote, _
                ConsecutiveDelimiter:=False, _
                Tab:=False, _
                Semicolon:=True, _
                Comma:=False, _
                Space:=False, _
                Other:=False
End With

'Zeilenh|fffd|he in RawValue setzen
ActiveSheet.Cells.Select
    Selection.RowHeight = 12.75

'Hier beginnt die Verzweigung zur Umwandlung (easy data solution)
UmwandlungRichtigesFormat

'Alte Kurven l|fffd|schen
Worksheets("Diagram").Activate
Dim lngZahl As Long
  With ActiveSheet
    If .ChartObjects.count <> 0 Then
      For lngZahl = .ChartObjects.count To 1 Step -1
        .ChartObjects(lngZahl).Delete
      Next lngZahl
    End If
  End With

'Seite "Data Table" l|fffd|schen
Worksheets("Data").Range("A3:Z31999").ClearContents

'Datentabelle f|fffd|llen (|fffd|ber Form PB1)
FaktorAktualisieren

'Maximale Dateil|fffd|nge in Minuten ermitteln und in die |fffd|bersicht speichern
Worksheets("Settings").Range("MaxZeilen").Value = Application.Max(Sheets("Data").Range("C:C"))

'Pr|fffd|fung der maximalen Zeitdifferenzen auf zu gro|fffd|e Werte
ZeitdiffMax = Round(Application.Max(Sheets("Data").Range("B3:B" & Worksheets("Settings").Range("Laenge").Value + 3 & "")))
ZeitdiffMin = Abs(Application.Min(Sheets("Data").Range("B3:B" & Worksheets("Settings").Range("Laenge").Value + 3 & "")))

If ZeitdiffMin > ZeitdiffMax Then
    Zeitdiff = ZeitdiffMin
Else
    Zeitdiff = ZeitdiffMax
End If

If Zeitdiff > 100 Or Zeitdiff < 0 Then
'    MsgBox Worksheets("Lang").Range("B136").Value & "(" & Zeitdiff & ")"
End If
    
'Setze X-Achsenbereich auf die maximale Minutenanzahl der Aufzeichnung
If IsNumeric(Worksheets("Settings").Range("MaxZeilen").Value) Then
     Worksheets("Settings").Range("Xend").Value = Round(Worksheets("Settings").Range("MaxZeilen").Value) + 1
    Else
End If

'Setze Y-Achsenbereich auf den maximalen Wert der Aufzeichnung
     Worksheets("Settings").Range("Yend").Value = Round(Application.Max(Sheets("Data").Range("D3:S" & Worksheets("Settings").Range("Laenge").Value + 3 & "")) * 1.15)

'Startdatum Eingabe |fffd|ffnen
If ProductLine = "MB" Then
    DateInput.TextBox1.Value = Date
    DateInput.TextBox2.Value = Time
    DateInput.Caption = Worksheets("Lang").Range("B133").Value
    DateInput.CommandButton1.Caption = Worksheets("Lang").Range("B49").Value
    DateInput.CommandButton2.Caption = Worksheets("Lang").Range("B50").Value
    DateInput.Label4.Caption = Worksheets("Lang").Range("B132").Value

    DateInput.Show

  Else
    'Start Datum auf die Seite "Settings kopieren", wenn ein Controller mit Zeitstempel importiert wird
    Worksheets("Settings").Range("Datum").Value = Worksheets("Raw values").Cells(2, 2)
End If

'Eingegebenes Datum in Data-Tabelle |fffd|bernehmen
If ProductLine = "MB" Then
    CopyDate
End If

'DruckbereichFestlegen
SpalteA = Worksheets("Settings").Range("Laenge").Value + 3
Worksheets("Data").PageSetup.PrintArea = _
Range("$A$1:$S$" & SpalteA).Address

Application.ScreenUpdating = True
Application.StatusBar = "Fertig"

'#########################
If NCC = False Then
ErrorHandler:
    If Err.Number = 13 Then
         MsgBox Worksheets("Lang").Range("B108").Value & Err.Number & Worksheets("Lang").Range("B109").Value, vbCritical + vbOKOnly, Worksheets("Lang").Range("B110").Value
    End If
End If
'#########################

' Diagramm zur|fffd|cksetzen
With Worksheets("Settings")
      .Range("Yend").Value = Round(Application.Max(Sheets("Data").Range("D3:S" & Worksheets("Settings").Range("Laenge").Value + 3 & "")) * 1.15)
      .Range("Y2end").Value = 100
      .Range("Ystart").Value = 0
      .Range("Y2start").Value = 0
      .Range("Xstart").Value = 0
      .Range("Xend").Value = .Range("MaxZeilen").Value
    End With

End Sub
Attribute VB_Name = "Tabelle6"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "StartButton, 2, 0, MSForms, CommandButton"
Attribute VB_Control = "OptionButton2, 673, 6, MSForms, OptionButton"
Attribute VB_Control = "OptionButton1, 672, 7, MSForms, OptionButton"
Attribute VB_Control = "ComboBoxSprache, 139, 8, MSForms, ComboBox"
Private Sub Worksheet_Activate()
 Range("A1").Select
 End Sub



' |fffd|ber ein PullDownMen|fffd| kann eine andere Sprache angew|fffd|hlt werden

Private Sub ComboBoxSprache_Change()

'Liste f|fffd|r die Sprachauswahl initiieren
Worksheets("Start").ComboBoxSprache.List = Array( _
Worksheets("Lang").Range("C2").Value, _
Worksheets("Lang").Range("D2").Value, _
Worksheets("Lang").Range("E2").Value, _
Worksheets("Lang").Range("F2").Value, _
Worksheets("Lang").Range("G2").Value, _
Worksheets("Lang").Range("H2").Value, _
Worksheets("Lang").Range("I2").Value, _
Worksheets("Lang").Range("J2").Value, _
Worksheets("Lang").Range("K2").Value, _
Worksheets("Lang").Range("L2").Value, _
Worksheets("Lang").Range("M2").Value)

Dim VarDataset As String ' aktueller Datensatz

'Wenn nicht richtig aktuelisiert wurde Fehler abfangen
On Error GoTo ErrorHandler

VarDataset = Worksheets("Start").ComboBoxSprache.Value

'Sprache in die Zwischenablage kopieren
    Sheets("Lang").Select

With Worksheets("Lang")
 If VarDataset = .Range("C2").Value Then
        Sheets("Lang").Columns("C:C").Copy
    ElseIf VarDataset = .Range("D2").Value Then
        Sheets("Lang").Columns("D:D").Copy
    ElseIf VarDataset = .Range("E2").Value Then
        Sheets("Lang").Columns("E:E").Copy
    ElseIf VarDataset = .Range("F2").Value Then
        Sheets("Lang").Columns("F:F").Copy
    ElseIf VarDataset = .Range("G2").Value Then
        Sheets("Lang").Columns("G:G").Copy
    ElseIf VarDataset = .Range("H2").Value Then
        Sheets("Lang").Columns("H:H").Copy
    ElseIf VarDataset = .Range("I2").Value Then
        Sheets("Lang").Columns("I:I").Copy
    ElseIf VarDataset = .Range("J2").Value Then
        Sheets("Lang").Columns("J:J").Copy
    ElseIf VarDataset = .Range("K2").Value Then
        Sheets("Lang").Columns("K:K").Copy
    ElseIf VarDataset = .Range("L2").Value Then
        Sheets("Lang").Columns("L:L").Copy
    ElseIf VarDataset = .Range("M2").Value Then
        Sheets("Lang").Columns("M:M").Copy
    End If
    
' wieder einf|fffd|gen
    Sheets("Lang").Paste Destination:=Sheets("Lang").Columns("B:B")
    Application.CutCopyMode = False
'Zwischenablage leeren
Application.CutCopyMode = False

  
Sheets("Lang").Columns("B:B").Select
Selection.EntireColumn.Hidden = True
    
Sheets("Start").Select

End With

' Aufruf f|fffd|r die |fffd|bersetzung von Meldungen
ButtonSprache

'ErrorHandler############
ErrorHandler:
If Err.Number = 1004 Then
     MsgBox Worksheets("Lang").Range("B108").Value, vbCritical, vbOKOnly, Worksheets("Lang").Range("B111").Value
End If
    
End Sub

Sub ButtonSprache()
    
    Worksheets("Settings").CSVLaden.Caption = Worksheets("Lang").Range("B18").Value
    Worksheets("Settings").CheckManipulationButton.Caption = Worksheets("Lang").Range("B19").Value
    Worksheets("Settings").NCCButton.Caption = Worksheets("Lang").Range("B62").Value
    Worksheets("Settings").Reset.Caption = Worksheets("Lang").Range("B20").Value
'    Worksheets("Settings").StartKurve.Caption = Worksheets("Lang").Range("B24").Value
    Worksheets("Settings").ShowDiagram.Caption = Worksheets("Lang").Range("B25").Value
    Worksheets("Settings").ShowTable.Caption = Worksheets("Lang").Range("B26").Value
    Worksheets("Settings").ShowReport.Caption = Worksheets("Lang").Range("B27").Value
'    Worksheets("Settings").FaktorAkt.Caption = Worksheets("Lang").Range("B53").Value
    Worksheets("Settings").PfadSuchen.Caption = Worksheets("Lang").Range("B61").Value
    
    DateInput.Caption = Worksheets("Lang").Range("B133").Value
    DateInput.CommandButton1.Caption = Worksheets("Lang").Range("B49").Value
    DateInput.CommandButton2.Caption = Worksheets("Lang").Range("B50").Value
    DateInput.Label4.Caption = Worksheets("Lang").Range("B132").Value


End Sub


Private Sub StartButton_Click()

'Erste Lasche Aufrufen nach Tastenclick
Sheets("Settings").Select

End Sub

Attribute VB_Name = "Tabelle7"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

Private Sub Worksheet_Activate()
 Range("A1").Select
 End Sub

Private Sub Drucken_Click()
    
    headerfooter
    Application.Dialogs(xlDialogPrint).Show
    
End Sub

Private Sub einstellungen_Click()

'Liste f|fffd|r die Setauswahl initiieren
Worksheets("Settings").ComboBox1.List = _
Array(Worksheets("Sets").Range("dset1").Value, _
Worksheets("Sets").Range("dset2").Value, _
Worksheets("Sets").Range("dset3").Value, _
Worksheets("Sets").Range("dset4").Value, _
Worksheets("Sets").Range("dset5").Value, _
Worksheets("Sets").Range("dset6").Value, _
Worksheets("Sets").Range("dset7").Value, _
Worksheets("Sets").Range("dset8").Value, _
Worksheets("Sets").Range("dset9").Value, _
Worksheets("Sets").Range("dset10").Value, _
Worksheets("Sets").Range("dset11").Value, _
Worksheets("Sets").Range("dset12").Value)

Worksheets("Settings").Activate

End Sub


Attribute VB_Name = "Tabelle8"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "Drucken, 1, 0, MSForms, CommandButton"
Attribute VB_Control = "einstellungen, 2, 1, MSForms, CommandButton"
'Seite Furnaces

Private Sub Worksheet_Activate()
' Cursor setzen
 Range("A1").Select
 
 End Sub

Private Sub Drucken_Click()
    
    headerfooter
    Application.Dialogs(xlDialogPrint).Show
    
End Sub

Private Sub einstellungen_Click()

'Liste f|fffd|r die Ofenauswahl initiieren
Worksheets("Settings").ComboBox2.ListFillRange = "Furnaces!B5:B36"
Worksheets("Settings").Activate

End Sub

Attribute VB_Name = "Tabelle9"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "CommandButton1, 1, 0, MSForms, CommandButton"
Private Sub CommandButton1_Click()
    
    Worksheets("Settings").Activate

End Sub

Private Sub Worksheet_Activate()
' Cursor setzen
 Range("A1").Select
 
 End Sub

Attribute VB_Name = "Versionshistorie"


Sub Version()
'   Worksheets("Settings").Range("Version").Value = VarVersion
'!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
   VarVersion = "2.78"
'!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

'Version V2.78, 17.03.2015
'   Reset der Diagrammskalierung nach Import

'Version V2.77, 02.02.2015
'   Sets in den Scripten umbenannt

'Version V2.76, 02.02.2015
'   Letzten Beiden Datenzeilen anzeigen

'Version V2.75, 26.01.2015
'   PDF-Export ab Office 2010 f|fffd|r Kurven

'Version V2.74, 21.01.2015
'   X-Achsenbeschriftung ohne Nachkomma
'   VertikalNetzlinien

'Version V2.73, 11.12.2014
'   L|fffd|schen aller Beschreibungsfelder beim Laden einer neuen CSV-Datei

'Version V2.72, 17.11.2014
'   Unplausible Datumswerte filter

'Version V2.71, xx.10.2014
'   Buck bei der Anzeige des Dateikommentars behoben
'   Pr|fffd|fung der Zeitdifferenzen mit Meldung

'Version V2.70, 13.09.2014
'   Impressum+Nutzungsbedingungen

'Version V2.61, 05.06.2014
'   Programmnummer und Programmname darstellen
'   Verarbeitungsgeschwindigkeit erh|fffd|ht

'Version V2.60, 03.05.2014
'   Fortschrittsbalken
'   Ansicht Version in Ausdruck: Header |fffd|berarbeitet

'Version V2.58, 01.05.2014
'   Kurve aktualisieren bei Diagrammanwahl
'   Faktoren |fffd|bernehmen bei Tabelle anzeigen
'   Report verbessert
'   Farbauswahl auch in Set-Seite
'   Knopf "Diagramm erstellen" gel|fffd|scht

'Version V2.57.,02.04.2014
'   Setanzahl von 8 auf 12 erweitert
'   Seitenvorschub nach Header im Report entfernt
'   Set f|fffd|r die neuen Controller eingef|fffd|gt
'   Y-Skalierung korrigiert
'   Kurve aktualisieren bei Diagrammanwahl
'   Faktoren |fffd|bernehmen bei Tabelle anzeigen

'Version V2.56.,28.03.2014
'   Aktualisierung der Daten bei Reporterstellung
'   Report: Tabelle mit wei|fffd|em Hintergrund
'   Geringf|fffd|gige Design|fffd|nderungen

'Version V2.55.,24.03.2014
'   Weitere Beschreibungsfelder eingef|fffd|gt

'Version V2.54.,24.03.2014
'   Unterst|fffd|tzung f|fffd|r Office 64-bit hinzugef|fffd|gt (Declare mit PtrSafe) [http://msdn.microsoft.com/de-de/library/ee691831.aspx]
'   Pr|fffd|fung des angegebenen Dateipfades ge|fffd|ndert, da sonst Laufzeitfehler bei CD-Laufwerk
'   Datensatz 08 Customer 1 in HiProSystems H500 umbenannt und f|fffd|r H500 angepasst
'   Checkbox "NCC" hinzugef|fffd|gt. Bei Anwahl wird eine Kopie der CSV-Datei erzeugt, damit das Zeilenende f|fffd|r Excel lesbar ist.

'Version V2.50.,16.11.2013
'   Automatische Skalierung der Y-Achsen nach RESET
'   Schwarz als Kurvenfarbe nun m|fffd|glich und automatisches aufpoppen der Farbpalette
'   Report cellspacing = 0
'   Report mit File-Kommentar
'   Diagramm|fffd|berschrift angepasst

'Version V2.33.,22.02.2013
'   Verweis "Datensatz korrigiert
'   Schaltfl|fffd|chen unabh|fffd|ngig von Zellposition gemacht
'   Formatierung der Kurven in eine Schleife programmiert
'   Skalierungszelle in Data bei Aktualisierung kopiert

'Version V2.32.,22.01.2013
'   Fehler bei Eingabe des Datums f|fffd|r MB-Controller im Ausland behoben

'Version V2.31.,25.11.2012
'   Eingabeliste f|fffd|r |fffd|fen
'   Auswahl eines Ofens |fffd|ndert automatisch den Datensatz
'   NCC: Tausch von Punkt gegen Komma
 
'Version V2.26.,21.11.2012
'   Automatische Skalierung der Temperaturachse
'   Faktoren aktualisieren beim Importieren
'   Datenspalten mit Faktot 0 in der Tabelle l|fffd|schen
'   Eingabe und Auswahl Ofen mit Nummer

'Version V2.25.,25.08.2012
'   |fffd|bernahme des manuellen Datum in die Data-Tabelle
'   4 Zus|fffd|tzliche Sprachen hinzugef|fffd|gt

'Version V2.24.,20.07.2012
'   Auswahl f|fffd|r Dezimaltrennzeichen auf der Startseite eingef|fffd|gt

'Version V2.23.,20.07.2012
'   |fffd|bersetzung in Datumeingabe f|fffd|r MB-Controller korrigiert

'Version V2.22.,16.07.2012
'   Datediff bei Tageswechsel abgefangen

'Version V2.21., 22.05.2012
'   Austausch der Lasche Language gegen Lang, da dies ein Funktionstext im englischen Excel ist

'Version V2.20., 22.05.2012
'   Aktualisierung der Faktoren auf Knopfdruck
'   Checksummenpr|fffd|fung erst nach dem Import
'   Umprogrammierung Versorgung der Data-Tabelle
'   Aktualiseren der Faktoren bei Set-Wechsel

'Version V2.10., 21.05.2012
'   unabh|fffd|ngig von der Regionseinstellung des Rechners wird ein
'   richtiges Datumsformat und ein richtiger Dezimaltrenner eingetragen
'   ab hier k|fffd|nnen nur "Deutsche" CSV-Dateien eingelesen werden

'Version 2.00, 05.04.2012 :
'   Sprachumschaltung integriert
'   Namen der Kurven ausgeblendet wenn Faktor = 0
'   Seiten- und Versionsinformation im Footer neu geordnet

'Version 1.08, 23.02.2012 :
'   Buttons auf der Data-Seite vergr|fffd||fffd|ert

'Version 1.07, 10.12.2011 :
'   Tabelle optional in Report, mit Abfrage
'   Automatische Skalierung der Unterteilungen der Y1-Achse

'Version 1.06, 01.12.2011 :
'   Eingabe Datum f|fffd|r MB-Controller ohne Zeitstempel
'   Funktionen Report und Checksum in Module verschoben
'   Import von Dateien der MB-Controller eingebracht (Eingabe eines Datums)
'   Fehlermeldung 13 f|fffd|r Import eines fremden Datumsformats abgefangen
'   Tabelle optional in Report, mit Abfrage

'Version 1.05, 21.08.2011 :
'   Kommentare eingef|fffd|gt
'   Funktionen Report und Checksum in Module verschoben
'   Entfall Keine Auswertung bei 0|fffd|C

'Version 1.04, 21.07.2011 :
'   Ist die Spalte 5 (Istwert 1) = 0 wird der Checksummenvergleich deaktiviert
'   Dies funktioniert aber nicht bei Istwert Zone x
'   Funktion vorerts deaktiviert

'Version 1.03, 27.06.2011 :
'   Versionsanzeige korrigiert
'   Druckbereich des Data-Blattes eingegrenzt

'Version 1.02, 01.06.2011 :
'   Pfad nicht vorhanden beim Importieren abfangen

' Version 1.01, 01.04.2011 :
'   Nach dem Abbruch des Imports wird die Datentabelle nicht gel|fffd|scht
'   Description f|fffd|llen im Reportausdruck, wenn diese leer ist
'   Version NTGraph im Ausdruck angezeigt

'Historienbeschreibung
' Version 1.00, 01.11.2010 : Erstversion nach Tests

End Sub


' InQuest injected base64 decoded content
' ZrH+

INQUEST-PP=macro
