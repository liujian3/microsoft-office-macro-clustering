Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Change(ByVal Target As Range)
    ColCode = 18
    RowTD = RowBOT(Target.Parent)
    xFound = False
    For I = 1 To 30
        If LCase(Cells(RowTD, I).Value) = "from bit" Then
            ColCode = I
            xFound = True
        End If
    Next I
    If xFound = False Then Exit Sub
    If Target.Row > RowTD Then
        If Target.Column > 2 And Target.Column < ColCode Then
            Cells(Target.Row, ColCode).Value = ToCodeHexa(Target.Row, ColCode)
        End If
        If Target.Column = ColCode + 1 Then
            Call DeCodeHexa(Cells(Target.Row, ColCode + 1).Value, Target.Row, ColCode)
        End If
        If Target.Column = ColCode - 16 Then
            myDate = Cells(Target.Row, ColCode - 15).Value
            myYear = Cells(Target.Row, ColCode - 16).Value
            Cells(Target.Row, ColCode - 15).Value = DateSerial(myYear, Month(myDate), Day(myDate))
        End If
    End If
End Sub
Private Function ToCodeHexa(xRow, ColCode)
    Dim NgayTet As Date, sh As Worksheet
    On Error Resume Next
    NgayTet = Cells(xRow, ColCode - 15).Value
    OffsetTET = NgayTet - DateSerial(Year(NgayTet), 1, 1)
    BinOffsetTET = Right("0000000" & BinFromDec(OffsetTET), 7)
    BinDayOfMonth = ""
    For I = ColCode - 14 To ColCode - 2
        If Cells(xRow, I).Value = 1 Then
            BinDayOfMonth = BinDayOfMonth & "1"
        Else
            BinDayOfMonth = BinDayOfMonth & "0"
        End If
    Next I
    BinLeap = Right("0000" & BinFromDec(Cells(xRow, ColCode - 1).Value), 4)
    ToCodeHexa = HexFromBin(BinOffsetTET & BinDayOfMonth & BinLeap)
End Function
Private Sub DeCodeHexa(YearCode, xRow, ColCode)
    YearCode = Right(YearCode, 6)
    If Cells(xRow, ColCode - 16).Value = Empty Then
        yy = Year(Date)
    Else
        yy = Cells(xRow, ColCode - 16).Value
    End If
    YearCodeBinary = Right("000" & BinFromHex(YearCode), 24)
    OffsetOfTET = DecFromBin(Mid(YearCodeBinary, 1, 7))
    LeapMonthYear = DecFromBin(Mid(YearCodeBinary, 21, 4))
    jdFirstDate = jdFromDate(DateSerial(yy, 1, 1))                  'Ngay dau nam duong dich
    jdNgayTET = jdFirstDate + OffsetOfTET                           'Ngay dau nam Am lich
    NgayTet = jdToDate(jdNgayTET)
    Cells(xRow, ColCode - 16).Value = yy
    Cells(xRow, ColCode - 15).Value = NgayTet
    Cells(xRow, ColCode - 1).Value = LeapMonthYear
    For mm = 0 To 12
        BinDaysOfMonth = DecFromBin(Mid(YearCodeBinary, 1, 8 + mm)) Mod 2
        Cells(xRow, ColCode - 14 + mm) = BinDaysOfMonth
    Next mm
End Sub
Private Function HexFromBin(Binary)
    Hexa = Array("0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "a", "b", "c", "d", "e", "f")
    Binary = Trim(Binary)
    Mod4 = Len(Binary) Mod 4
    If Mod4 > 0 Then
        For I = 1 To 4 - Mod4
            Binary = "0" & Binary
        Next I
    End If
    HexFromBin = ""
    LenBinary = Len(Binary)
    For I = 4 To LenBinary Step 4
        BinaryGroup = Mid(Binary, LenBinary - I + 1, 4)
        HexFromBin = Hexa(DecFromBin(BinaryGroup)) & HexFromBin
    Next I
Ret:
End Function
Private Function BinFromHex(Hexa)
    BinFromHex = ""
    For I = 1 To Len(Trim(Hexa))
        Select Case LCase(Mid(Trim(Hexa), I, 1))
             Case "0": BinGroup4 = "0000"
             Case "1": BinGroup4 = "0001"
             Case "2": BinGroup4 = "0010"
             Case "3": BinGroup4 = "0011"
             Case "4": BinGroup4 = "0100"
             Case "5": BinGroup4 = "0101"
             Case "6": BinGroup4 = "0110"
             Case "7": BinGroup4 = "0111"
             Case "8": BinGroup4 = "1000"
             Case "9": BinGroup4 = "1001"
             Case "a": BinGroup4 = "1010"
             Case "b": BinGroup4 = "1011"
             Case "c": BinGroup4 = "1100"
             Case "d": BinGroup4 = "1101"
             Case "e": BinGroup4 = "1110"
             Case "f": BinGroup4 = "1111"
        End Select
        BinFromHex = BinFromHex & BinGroup4
    Next I
End Function
Private Function DecFromBin(Binary)
    Binary = Trim(Binary)
    DecFromBin = 0
    For I = 0 To Len(Binary) - 1
        HeSo = 1
        If I > 0 Then
            For k = 1 To I
                HeSo = HeSo * 2
            Next k
        End If
        DecFromBin = DecFromBin + Mid(Binary, Len(Binary) - I, 1) * HeSo
    Next I
End Function
Private Function BinFromDec(Dec)
    BinFromDec = ""
    For I = 1 To 25
        BinFromDec = Dec Mod 2 & BinFromDec
        Dec = Int(Dec / 2)
        If Dec < 2 Then
            BinFromDec = Int(Dec) & BinFromDec
            Exit For
        End If
    Next I
End Function
Private Function DecFromHex(Hexa)
    DecFromHex = 0
    For I = Len(Trim(Hexa)) To 1 Step -1
        Select Case LCase(Mid(Trim(Hexa), I, 1))
            Case "a": DonVi = 10
            Case "b": DonVi = 11
            Case "c": DonVi = 12
            Case "d": DonVi = 13
            Case "e": DonVi = 14
            Case "f": DonVi = 15
            Case Else: DonVi = Val(Mid(Trim(Hexa), I, 1))
        End Select
        DecFromHex = DecFromHex + DonVi * 16 ^ (Len(Trim(Hexa)) - I)
    Next I
End Function
Private Function HexFromDec(Dec)
    HexFromDec = HexFromBin(BinFromDec(Dec))
End Function

Private Function jdFromDate(myDate As Date)
    dd = Day(myDate)
    mm = Month(myDate)
    yy = Year(myDate)
    a = Int((14 - mm) / 12)
    Y = yy + 4800 - a
    m = mm + 12 * a - 3
    jdFromDate = dd + Int((153 * m + 2) / 5) + 365 * Y + Int(Y / 4) - Int(Y / 100) + Int(Y / 400) - 32045
End Function
Private Function jdToDate(jdDate)
    jd = jdDate
    If jd > 2299160 Then    'After 5/10/1582, Gregorian calendar
        a = jd + 32044
        b = Int((4 * a + 3) / 146097)
        c = a - Int((b * 146097) / 4)
    Else
        b = 0
        c = jd + 32082
    End If
    d = Int((4 * c + 3) / 1461)
    e = c - Int((1461 * d) / 4)
    m = Int((5 * e + 2) / 153)
    dd = e - Int((153 * m + 2) / 5) + 1
    mm = m + 3 - 12 * Int(m / 10)
    yy = b * 100 + d - 4800 + Int(m / 10)
    jdToDate = DateSerial(yy, mm, dd)
End Function

Attribute VB_Name = "Sheet2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "System10"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "mdAmLich"
Dim LunarMonth(14), DaysOfMonth(14), MonthLeap(14), jdNewMoon(14)
Dim LeapMonthYear, leapMonthLength, jdFirstDate, jdNgayTET, OffsetOfTET, MonthsOfYear, YearCode, YearCodeBinary, CodeIndex
Function Thu(myDate As Date)
    If TypeName(Application.Caller) = "Range" Then
        FontName = Application.Caller.Font.Name
    Else: FontName = ".VnTime"
    End If
    If Left(FontName, 3) = ".Vn" Then
        CodeIndex = 1
    ElseIf Left(FontName, 3) = "VNI" Then CodeIndex = 3
    ElseIf Left(FontName, 2) = "VN" Then CodeIndex = 2
    Else: CodeIndex = 4
    End If
    DayOfWeek = Array(Read("chu nhat"), Read("thu hai"), Read("thu ba"), Read("thu tu"), Read("thu nam"), Read("thu sau"), Read("thu bay"))
    Thu = DayOfWeek(Weekday(myDate, 1) - 1)
End Function
Function Tuan(myDate As Date)
    If TypeName(Application.Caller) = "Range" Then
        FontName = Application.Caller.Font.Name
    Else: FontName = ".VnTime"
    End If
    If Left(FontName, 3) = ".Vn" Then
        CodeIndex = 1
    ElseIf Left(FontName, 3) = "VNI" Then CodeIndex = 3
    ElseIf Left(FontName, 2) = "VN" Then CodeIndex = 2
    Else: CodeIndex = 4
    End If
    Tuan = Trim(Read("tuan thu") & ": " & DatePart("ww", myDate, vbMonday, vbFirstJan1))
End Function
Function TuanThu(myDate As Date)
    TuanThu = DatePart("ww", myDate, vbMonday, vbFirstJan1)
End Function
Function HoangDao(DuongLich As Date)
    CAN = Array(Read("giap"), Read("at"), Read("binh"), Read("dinh"), Read("mau"), Read("ky"), Read("canh"), Read("tan"), Read("nham"), Read("quy"))
    CHI = Array(Read("ti"), Read("suu"), Read("dan"), Read("mao"), Read("thin"), Read("ty"), Read("ngo"), Read("mui"), Read("than"), Read("dau"), Read("tuat"), Read("hoi"))
    GIO_HD = Array("110100101100", "001101001011", "110011010010", "101100110100", "001011001101", "010010110011")
    If TypeName(Application.Caller) = "Range" Then
        FontName = Application.Caller.Font.Name
    Else: FontName = ".VnTime"
    End If
    If Left(FontName, 3) = ".Vn" Then
        CodeIndex = 1
    ElseIf Left(FontName, 3) = "VNI" Then CodeIndex = 3
    ElseIf Left(FontName, 2) = "VN" Then CodeIndex = 2
    Else: CodeIndex = 4
    End If
    jdDate = jdFromDate(DuongLich)      'Julius day
    chiOfDay = (jdDate + 1) Mod 12
    gioHD = GIO_HD(chiOfDay Mod 6)
    StrGioHD = ""
    Count = 0
    For I = 1 To 12
        If Mid(gioHD, I, 1) = "1" Then
            a = I - 1
            StrGioHD = StrGioHD & CHI(a)
            StrGioHD = StrGioHD & " (" & (a * 2 + 23) Mod 24 & "-" & (a * 2 + 1) Mod 24 & ")"
            Count = Count + 1
            If Count < 6 Then StrGioHD = StrGioHD & ", "
            If Count = 6 Then StrGioHD = StrGioHD & "."
        End If
    Next I
    StrGioHD = Trim(StrGioHD)
    HoangDao = UCase(Left(StrGioHD, 1)) & Mid(StrGioHD, 2)
End Function
Function AmLich(DuongLich As Date)
    AmLich = SolarToLunar(DuongLich, 0)
End Function
Function StrAmLich(DuongLich As Date)
    StrAmLich = SolarToLunar(DuongLich, 1)
End Function
Function FullAmLich(DuongLich As Date)
    FullAmLich = SolarToLunar(DuongLich, 2)
End Function
Function DuongLich(AmLich)
    xLeap = 0
    AmLich = Trim(AmLich)
    a = InStr(1, AmLich, "/", 0)
    b = InStr(a + 1, AmLich, "/", 0)
    If InStr(b + 1, AmLich, " ", 0) > 0 Or InStr(b, AmLich, "(", 0) > 0 Or InStr(b, AmLich, "N", 0) > 0 Then
        If InStr(b, AmLich, " ", 0) > 0 Then
            c = InStr(b, AmLich, " ", 0) - 1
        ElseIf InStr(b, AmLich, "(", 0) > 0 Then
            c = InStr(b, AmLich, "(", 0) - 1
        ElseIf InStr(b, AmLich, "N", 0) > 0 Then
            c = InStr(b, AmLich, "N", 0) - 1
        End If
    Else
        c = Len(AmLich)
    End If
    dd = Val(Mid(AmLich, 1, a - 1))
    mm = Val(Mid(AmLich, a + 1, b - a - 1))
    yy = Val(Mid(AmLich, b + 1, c - b))
    If InStr(1, AmLich, "N", 0) > 0 Then xLeap = 1 Else xLeap = 0
    DuongLich = LunarToSolar(dd, mm, yy, xLeap)
Ret:
End Function
Private Function SolarToLunar(DuongLich As Date, Style)
    CAN = Array("Giap", "At", "Binh", "Dinh", "Mau", "Ky", "Canh", "Tan", "Nham", "Quy")
    CHI = Array("Ti", "Suu", "Dan", "Mao", "Thin", "Ty", "Ngo", "Mui", "Than", "Dau", "Tuat", "Hoi")
    DayOfWeek = Array("Chu Nhat", "Thu hai", "Thu ba", "Thu tu", "Thu nam", "Thu sau", "Thu bay")
    GIO_HD = Array("110100101100", "001101001011", "110011010010", "101100110100", "001011001101", "010010110011")
    
    jdFirstDay = jdFromDate(DateSerial(1800, 1, 25))  'Tet am lich 1800
    jdLasttDay = jdFromDate(DateSerial(2199, 12, 31))  '
    jdDate = jdFromDate(DuongLich)      ' Ngay Julius
    If jdDate > jdLasttDay Or jdDate < jdFirstDay Then
        SolarToLunar = "Unknown"
        Exit Function
    End If
    dd = Day(DuongLich)
    mm = Month(DuongLich)
    yy = Year(DuongLich)
    Call DecodeYear(yy)
    If jdDate < jdNgayTET Then
        yy = yy - 1
        Call DecodeYear(yy)
    End If
    '=================================================================================
    For I = MonthsOfYear To 1 Step -1
        If jdDate - jdNewMoon(I) >= 0 Then
            xMonth = I
            Exit For
        End If
    Next I
    OffsetDay = jdDate - jdNewMoon(xMonth)
    
    StrLunarDay = CAN((jdDate + 9) Mod 10) & " " & CHI((jdDate + 1) Mod 12)
    StrLunarMonth = CAN((yy * 12 + LunarMonth(xMonth) + 3) Mod 10) & " " & CHI((LunarMonth(xMonth) + 1) Mod 12)
    StrLunarYear = CAN((yy + 6) Mod 10) & " " & CHI((yy + 8) Mod 12)
    
    chiOfDay = (jdDate + 1) Mod 12
    gioHD = GIO_HD(chiOfDay Mod 6)
    StrGioHD = ""
    Count = 0
    For I = 1 To 12
        If Mid(gioHD, I, 1) = "1" Then
            a = I - 1
            StrGioHD = StrGioHD & CHI(a)
            StrGioHD = StrGioHD & " (" & (a * 2 + 23) Mod 24 & "-" & (a * 2 + 1) Mod 24 & ")"
            Count = Count + 1
            If Count < 6 Then StrGioHD = StrGioHD & ", "
            If Count = 6 Then StrGioHD = StrGioHD & "!"
        End If
    Next I
    myLunarDay = Right("0" & 1 + OffsetDay, 2)
    myLunarMonth = Right("0" & LunarMonth(xMonth), 2)
    If Style = 0 Then
        SolarToLunar = myLunarDay & "/" & myLunarMonth & "/" & yy
        If MonthLeap(xMonth) = 1 Then SolarToLunar = SolarToLunar & " (N)"
    ElseIf Style = 1 Then
        SolarToLunar = "Ngay " & myLunarDay & " thang " & myLunarMonth & " nam " & StrLunarYear
        If MonthLeap(xMonth) = 1 Then SolarToLunar = SolarToLunar & " (N)"
    ElseIf Style = 2 Then
        If MonthLeap(xMonth) = 1 Then
            SolarToLunar = "Ngay " & StrLunarDay & ", thang " & StrLunarMonth & ", Nam " & StrLunarYear & ". Gio Hoang dao: " & StrGioHD
        Else
            SolarToLunar = "Ngay " & StrLunarDay & ", thang " & StrLunarMonth & " (Nhuan)" & ", Nam " & StrLunarYear & ". Gio Hoang dao: " & StrGioHD
        End If
    End If
End Function
Function LunarToSolar(LunarDD, LunarMM, LunarYYYY, Leap)
    Call DecodeYear(LunarYYYY)
    '====================================================
    If LeapMonthYear = 0 Then
        xMonth = LunarMM
    Else
        If LunarMM < LeapMonthYear Then
            xMonth = LunarMM
        Else
            If LunarMM = LeapMonthYear Then
                If Leap = 0 Then
                    xMonth = LunarMM
                Else
                    xMonth = LunarMM + 1
                End If
            Else
                xMonth = LunarMM + 1
            End If
        End If
    End If
    '====================================================
    jdDate = jdNewMoon(xMonth) - 1 + LunarDD            'Julius Day
    jdFirstDay = jdFromDate(DateSerial(1800, 1, 25))    'Tet am lich 1800
    jdLasttDay = jdFromDate(DateSerial(2199, 12, 31))   '
    If jdDate > jdLasttDay Or jdDate < jdFirstDay Then
        LunarToSolar = "Unknown"
        Exit Function
    End If
    If LunarMM < 1 Or LunarMM > 12 Then
        LunarToSolar = "Thang khong hop le!"
        Exit Function
    End If
    If Val(LunarDD) < 1 Then
        LunarToSolar = "Ngay khong hop le!"
        Exit Function
    End If
    If Val(LunarDD) > DaysOfMonth(xMonth) Then
        LunarToSolar = "Thang chi co " & DaysOfMonth(xMonth) & " ngay!"
        Exit Function
    End If
    LunarToSolar = jdToDate(jdDate)
    '====================================================
End Function
Private Sub DecodeYear(yy)

TK19 = Array( _
    "0x30baa3", "0x56ab50", "0x422ba0", "0x2cab61", "0x52a370", "0x3c51e8", "0x60d160", "0x4ae4b0", "0x376926", "0x58daa0", _
    "0x445b50", "0x3116d2", "0x562ae0", "0x3ea2e0", "0x28e2d2", "0x4ec950", "0x38d556", "0x5cb520", "0x46b690", "0x325da4", _
    "0x5855d0", "0x4225d0", "0x2ca5b3", "0x52a2b0", "0x3da8b7", "0x60a950", "0x4ab4a0", "0x35b2a5", "0x5aad50", "0x4455b0", _
    "0x302b74", "0x562570", "0x4052f9", "0x6452b0", "0x4e6950", "0x386d56", "0x5e5aa0", "0x46ab50", "0x3256d4", "0x584ae0", _
    "0x42a570", "0x2d4553", "0x50d2a0", "0x3be8a7", "0x60d550", "0x4a5aa0", "0x34ada5", "0x5a95d0", "0x464ae0", "0x2eaab4", _
    "0x54a4d0", "0x3ed2b8", "0x64b290", "0x4cb550", "0x385757", "0x5e2da0", "0x4895d0", "0x324d75", "0x5849b0", "0x42a4b0", _
    "0x2da4b3", "0x506a90", "0x3aad98", "0x606b50", "0x4c2b60", "0x359365", "0x5a9370", "0x464970", "0x306964", "0x52e4a0", _
    "0x3cea6a", "0x62da90", "0x4e5ad0", "0x392ad6", "0x5e2ae0", "0x4892e0", "0x32cad5", "0x56c950", "0x40d4a0", "0x2bd4a3", _
    "0x50b690", "0x3a57a7", "0x6055b0", "0x4c25d0", "0x3695b5", "0x5a92b0", "0x44a950", "0x2ed954", "0x54b4a0", "0x3cb550", _
    "0x286b52", "0x4e55b0", "0x3a2776", "0x5e2570", "0x4852b0", "0x32aaa5", "0x56e950", "0x406aa0", "0x2abaa3", "0x50ab50")

TK20 = Array( _
    "0x3c4bd8", "0x624ae0", "0x4ca570", "0x3854d5", "0x5cd260", "0x44d950", "0x315554", "0x5656a0", "0x409ad0", "0x2a55d2", _
    "0x504ae0", "0x3aa5b6", "0x60a4d0", "0x48d250", "0x33d255", "0x58b540", "0x42d6a0", "0x2cada2", "0x5295b0", "0x3f4977", _
    "0x644970", "0x4ca4b0", "0x36b4b5", "0x5c6a50", "0x466d50", "0x312b54", "0x562b60", "0x409570", "0x2c52f2", "0x504970", _
    "0x3a6566", "0x5ed4a0", "0x48ea50", "0x336a95", "0x585ad0", "0x442b60", "0x2f86e3", "0x5292e0", "0x3dc8d7", "0x62c950", _
    "0x4cd4a0", "0x35d8a6", "0x5ab550", "0x4656a0", "0x31a5b4", "0x5625d0", "0x4092d0", "0x2ad2b2", "0x50a950", "0x38b557", _
    "0x5e6ca0", "0x48b550", "0x355355", "0x584da0", "0x42a5b0", "0x2f4573", "0x5452b0", "0x3ca9a8", "0x60e950", "0x4c6aa0", _
    "0x36aea6", "0x5aab50", "0x464b60", "0x30aae4", "0x56a570", "0x405260", "0x28f263", "0x4ed940", "0x38db47", "0x5cd6a0", _
    "0x4896d0", "0x344dd5", "0x5a4ad0", "0x42a4d0", "0x2cd4b4", "0x52b250", "0x3cd558", "0x60b540", "0x4ab5a0", "0x3755a6", _
    "0x5c95b0", "0x4649b0", "0x30a974", "0x56a4b0", "0x40aa50", "0x29aa52", "0x4e6d20", "0x39ad47", "0x5eab60", "0x489370", _
    "0x344af5", "0x5a4970", "0x4464b0", "0x2c74a3", "0x50ea50", "0x3d6a58", "0x6256a0", "0x4aaad0", "0x3696d5", "0x5c92e0")

TK21 = Array( _
    "0x46c960", "0x2ed954", "0x54d4a0", "0x3eda50", "0x2a7552", "0x4e56a0", "0x38a7a7", "0x5ea5d0", "0x4a92b0", "0x32aab5", _
    "0x58a950", "0x42b4a0", "0x2cbaa4", "0x50ad50", "0x3c55d9", "0x624ba0", "0x4ca5b0", "0x375176", "0x5c5270", "0x466930", _
    "0x307934", "0x546aa0", "0x3ead50", "0x2a5b52", "0x504b60", "0x38a6e6", "0x5ea4e0", "0x48d260", "0x32ea65", "0x56d520", _
    "0x40daa0", "0x2d56a3", "0x5256d0", "0x3c4afb", "0x6249d0", "0x4ca4d0", "0x37d0b6", "0x5ab250", "0x44b520", "0x2edd25", _
    "0x54b5a0", "0x3e55d0", "0x2a55b2", "0x5049b0", "0x3aa577", "0x5ea4b0", "0x48aa50", "0x33b255", "0x586d20", "0x40ad60", _
    "0x2d4b63", "0x525370", "0x3e49e8", "0x60c970", "0x4c54b0", "0x3768a6", "0x5ada50", "0x445aa0", "0x2fa6a4", "0x54aad0", _
    "0x4052e0", "0x28d2e3", "0x4ec950", "0x38d557", "0x5ed4a0", "0x46d950", "0x325d55", "0x5856a0", "0x42a6d0", "0x2c55d4", _
    "0x5252b0", "0x3ca9b8", "0x62a930", "0x4ab490", "0x34b6a6", "0x5aad50", "0x4655a0", "0x2eab64", "0x54a570", "0x4052b0", _
    "0x2ab173", "0x4e6930", "0x386b37", "0x5e6aa0", "0x48ad50", "0x332ad5", "0x582b60", "0x42a570", "0x2e52e4", "0x50d160", _
    "0x3ae958", "0x60d520", "0x4ada90", "0x355aa6", "0x5a56d0", "0x462ae0", "0x30a9d4", "0x54a2d0", "0x3ed150", "0x28e952")
    
TK22 = Array( _
    "0x4eb520", "0x38d727", "0x5eada0", "0x4a55b0", "0x362db5", "0x5a45b0", "0x44a2b0", "0x2eb2b4", "0x54a950", "0x3cb559", _
    "0x626b20", "0x4cad50", "0x385766", "0x5c5370", "0x484570", "0x326574", "0x5852b0", "0x406950", "0x2a7953", "0x505aa0", _
    "0x3baaa7", "0x5ea6d0", "0x4a4ae0", "0x35a2e5", "0x5aa550", "0x42d2a0", "0x2de2a4", "0x52d550", "0x3e5abb", "0x6256a0", _
    "0x4c96d0", "0x3949b6", "0x5e4ab0", "0x46a8d0", "0x30d4b5", "0x56b290", "0x40b550", "0x2a6d52", "0x504da0", "0x3b9567", _
    "0x609570", "0x4a49b0", "0x34a975", "0x5a64b0", "0x446a90", "0x2cba94", "0x526b50", "0x3e2b60", "0x28ab61", "0x4c9570", _
    "0x384ae6", "0x5cd160", "0x46e4a0", "0x2eed25", "0x54da90", "0x405b50", "0x2c36d3", "0x502ae0", "0x3a93d7", "0x6092d0", _
    "0x4ac950", "0x32d556", "0x58b4a0", "0x42b690", "0x2e5d94", "0x5255b0", "0x3e25fa", "0x6425b0", "0x4e92b0", "0x36aab6", _
    "0x5c6950", "0x4674a0", "0x31b2a5", "0x54ad50", "0x4055a0", "0x2aab73", "0x522570", "0x3a5377", "0x6052b0", "0x4a6950", _
    "0x346d56", "0x585aa0", "0x42ab50", "0x2e56d4", "0x544ae0", "0x3ca570", "0x2864d2", "0x4cd260", "0x36eaa6", "0x5ad550", _
    "0x465aa0", "0x30ada5", "0x5695d0", "0x404ad0", "0x2aa9b3", "0x50a4d0", "0x3ad2b7", "0x5eb250", "0x48b540", "0x33d556")
    '=================================================================================================
    If yy < 1900 Then
        YearCode = TK19(yy - 1800)
    ElseIf yy < 2000 Then
        YearCode = TK20(yy - 1900)
    ElseIf yy < 2100 Then
        YearCode = TK21(yy - 2000)
    Else
        YearCode = TK22(yy - 2100)
    End If
    YearCode = Right(YearCode, 6)
    YearCodeBinary = Right("000" & BinFromHex(YearCode), 24)        'YearCode co 24 bit
    OffsetOfTET = DecFromBin(Mid(YearCodeBinary, 1, 7))             '7 bit dau cho Offset of TET
    LeapMonthYear = DecFromBin(Mid(YearCodeBinary, 21, 4))          '4 bit cuoi cho thang nhuan (0-12)
    jdFirstDate = jdFromDate(DateSerial(yy, 1, 1))                  'Ngay dau nam duong dich
    jdNgayTET = jdFirstDate + OffsetOfTET                           'Ngay dau nam Am lich
    '=================================================================================================
    'Bit thu 8: So ngay trong thang nhuan
    'Bit thu 9 - 20: So ngay trong thang (thang 1 den thang 12)
    jdCurrentDay = jdNgayTET                                        'Bat dau tu dau nam Am lich
    monthLengths = Array(29, 30)                                    'Bit 0: thang co 29 ngay, Bit 1: thang co 30 ngay
    Dem = 1
    If LeapMonthYear = 0 Then
        For mm = 1 To 12
            LunarMonth(Dem) = mm
            'DaysOfMonth(Dem) = monthLengths(DecFromBin(Mid(YearCodeBinary, 1, 8 + mm)) Mod 2)
            DaysOfMonth(Dem) = monthLengths(Mid(YearCodeBinary, 8 + mm, 1))
            MonthLeap(Dem) = 0
            jdNewMoon(Dem) = jdCurrentDay
            jdCurrentDay = jdCurrentDay + DaysOfMonth(Dem)
            Dem = Dem + 1
        Next mm
    Else
        For mm = 1 To LeapMonthYear
            LunarMonth(Dem) = mm
            'DaysOfMonth(Dem) = monthLengths(DecFromBin(Mid(YearCodeBinary, 1, 8 + mm)) Mod 2)
            DaysOfMonth(Dem) = monthLengths(Mid(YearCodeBinary, 8 + mm, 1))
            MonthLeap(Dem) = 0
            jdNewMoon(Dem) = jdCurrentDay
            jdCurrentDay = jdCurrentDay + DaysOfMonth(Dem)
            Dem = Dem + 1
        Next mm
        LunarMonth(Dem) = LeapMonthYear
        'DaysOfMonth(Dem) = monthLengths(DecFromBin(Mid(YearCodeBinary, 1, 8)) Mod 2)
        DaysOfMonth(Dem) = monthLengths(Mid(YearCodeBinary, 8, 1))
        MonthLeap(Dem) = 1
        jdNewMoon(Dem) = jdCurrentDay
        jdCurrentDay = jdCurrentDay + DaysOfMonth(Dem)
        Dem = Dem + 1
        For mm = LeapMonthYear + 1 To 12
            LunarMonth(Dem) = mm
            'DaysOfMonth(Dem) = monthLengths(DecFromBin(Mid(YearCodeBinary, 1, 8 + mm)) Mod 2)
            DaysOfMonth(Dem) = monthLengths(Mid(YearCodeBinary, 8 + mm, 1))
            MonthLeap(Dem) = 0
            jdNewMoon(Dem) = jdCurrentDay
            jdCurrentDay = jdCurrentDay + DaysOfMonth(Dem)
            Dem = Dem + 1
        Next mm
    End If
    MonthsOfYear = Dem - 1
    '===================================================================================
End Sub
Private Function jdFromDate(myDate As Date)
    dd = Day(myDate)
    mm = Month(myDate)
    yy = Year(myDate)
    a = Int((14 - mm) / 12)
    Y = yy + 4800 - a
    m = mm + 12 * a - 3
    jdFromDate = dd + Int((153 * m + 2) / 5) + 365 * Y + Int(Y / 4) - Int(Y / 100) + Int(Y / 400) - 32045
End Function
Private Function jdToDate(jdDate)
    jd = jdDate
    If jd > 2299160 Then    'After 5/10/1582, Gregorian calendar
        a = jd + 32044
        b = Int((4 * a + 3) / 146097)
        c = a - Int((b * 146097) / 4)
    Else
        b = 0
        c = jd + 32082
    End If
    d = Int((4 * c + 3) / 1461)
    e = c - Int((1461 * d) / 4)
    m = Int((5 * e + 2) / 153)
    dd = e - Int((153 * m + 2) / 5) + 1
    mm = m + 3 - 12 * Int(m / 10)
    yy = b * 100 + d - 4800 + Int(m / 10)
    jdToDate = DateSerial(yy, mm, dd)
End Function
Private Function BinFromHex(Hexa)
    BinFromHex = ""
    For I = 1 To Len(Trim(Hexa))
        Select Case LCase(Mid(Trim(Hexa), I, 1))
             Case "0": BinGroup4 = "0000"
             Case "1": BinGroup4 = "0001"
             Case "2": BinGroup4 = "0010"
             Case "3": BinGroup4 = "0011"
             Case "4": BinGroup4 = "0100"
             Case "5": BinGroup4 = "0101"
             Case "6": BinGroup4 = "0110"
             Case "7": BinGroup4 = "0111"
             Case "8": BinGroup4 = "1000"
             Case "9": BinGroup4 = "1001"
             Case "a": BinGroup4 = "1010"
             Case "b": BinGroup4 = "1011"
             Case "c": BinGroup4 = "1100"
             Case "d": BinGroup4 = "1101"
             Case "e": BinGroup4 = "1110"
             Case "f": BinGroup4 = "1111"
        End Select
        BinFromHex = BinFromHex & BinGroup4
    Next I
End Function
Private Function DecFromBin(Binary)
    Binary = Trim(Binary)
    DecFromBin = 0
    For I = 0 To Len(Binary) - 1
        HeSo = 1
        If I > 0 Then
            For k = 1 To I
                HeSo = HeSo * 2
            Next k
        End If
        DecFromBin = DecFromBin + Mid(Binary, Len(Binary) - I, 1) * HeSo
    Next I
End Function
Private Function DecFromHex(Hexa)
    DecFromHex = 0
    For I = Len(Trim(Hexa)) To 1 Step -1
        Select Case LCase(Mid(Trim(Hexa), I, 1))
            Case "a": DonVi = 10
            Case "b": DonVi = 11
            Case "c": DonVi = 12
            Case "d": DonVi = 13
            Case "e": DonVi = 14
            Case "f": DonVi = 15
            Case Else: DonVi = Val(Mid(Trim(Hexa), I, 1))
        End Select
        DecFromHex = DecFromHex + DonVi * 16 ^ (Len(Trim(Hexa)) - I)
    Next I
End Function

Private Sub DecodeYear_1(yy)

TK19 = Array( _
    "0x30baa3", "0x56ab50", "0x422ba0", "0x2cab61", "0x52a370", "0x3c51e8", "0x60d160", "0x4ae4b0", "0x376926", "0x58daa0", _
    "0x445b50", "0x3116d2", "0x562ae0", "0x3ea2e0", "0x28e2d2", "0x4ec950", "0x38d556", "0x5cb520", "0x46b690", "0x325da4", _
    "0x5855d0", "0x4225d0", "0x2ca5b3", "0x52a2b0", "0x3da8b7", "0x60a950", "0x4ab4a0", "0x35b2a5", "0x5aad50", "0x4455b0", _
    "0x302b74", "0x562570", "0x4052f9", "0x6452b0", "0x4e6950", "0x386d56", "0x5e5aa0", "0x46ab50", "0x3256d4", "0x584ae0", _
    "0x42a570", "0x2d4553", "0x50d2a0", "0x3be8a7", "0x60d550", "0x4a5aa0", "0x34ada5", "0x5a95d0", "0x464ae0", "0x2eaab4", _
    "0x54a4d0", "0x3ed2b8", "0x64b290", "0x4cb550", "0x385757", "0x5e2da0", "0x4895d0", "0x324d75", "0x5849b0", "0x42a4b0", _
    "0x2da4b3", "0x506a90", "0x3aad98", "0x606b50", "0x4c2b60", "0x359365", "0x5a9370", "0x464970", "0x306964", "0x52e4a0", _
    "0x3cea6a", "0x62da90", "0x4e5ad0", "0x392ad6", "0x5e2ae0", "0x4892e0", "0x32cad5", "0x56c950", "0x40d4a0", "0x2bd4a3", _
    "0x50b690", "0x3a57a7", "0x6055b0", "0x4c25d0", "0x3695b5", "0x5a92b0", "0x44a950", "0x2ed954", "0x54b4a0", "0x3cb550", _
    "0x286b52", "0x4e55b0", "0x3a2776", "0x5e2570", "0x4852b0", "0x32aaa5", "0x56e950", "0x406aa0", "0x2abaa3", "0x50ab50")

TK20 = Array( _
    "0x3c4bd8", "0x624ae0", "0x4ca570", "0x3854d5", "0x5cd260", "0x44d950", "0x315554", "0x5656a0", "0x409ad0", "0x2a55d2", _
    "0x504ae0", "0x3aa5b6", "0x60a4d0", "0x48d250", "0x33d255", "0x58b540", "0x42d6a0", "0x2cada2", "0x5295b0", "0x3f4977", _
    "0x644970", "0x4ca4b0", "0x36b4b5", "0x5c6a50", "0x466d50", "0x312b54", "0x562b60", "0x409570", "0x2c52f2", "0x504970", _
    "0x3a6566", "0x5ed4a0", "0x48ea50", "0x336a95", "0x585ad0", "0x442b60", "0x2f86e3", "0x5292e0", "0x3dc8d7", "0x62c950", _
    "0x4cd4a0", "0x35d8a6", "0x5ab550", "0x4656a0", "0x31a5b4", "0x5625d0", "0x4092d0", "0x2ad2b2", "0x50a950", "0x38b557", _
    "0x5e6ca0", "0x48b550", "0x355355", "0x584da0", "0x42a5b0", "0x2f4573", "0x5452b0", "0x3ca9a8", "0x60e950", "0x4c6aa0", _
    "0x36aea6", "0x5aab50", "0x464b60", "0x30aae4", "0x56a570", "0x405260", "0x28f263", "0x4ed940", "0x38db47", "0x5cd6a0", _
    "0x4896d0", "0x344dd5", "0x5a4ad0", "0x42a4d0", "0x2cd4b4", "0x52b250", "0x3cd558", "0x60b540", "0x4ab5a0", "0x3755a6", _
    "0x5c95b0", "0x4649b0", "0x30a974", "0x56a4b0", "0x40aa50", "0x29aa52", "0x4e6d20", "0x39ad47", "0x5eab60", "0x489370", _
    "0x344af5", "0x5a4970", "0x4464b0", "0x2c74a3", "0x50ea50", "0x3d6a58", "0x6256a0", "0x4aaad0", "0x3696d5", "0x5c92e0")

TK21 = Array( _
    "0x46c960", "0x2ed954", "0x54d4a0", "0x3eda50", "0x2a7552", "0x4e56a0", "0x38a7a7", "0x5ea5d0", "0x4a92b0", "0x32aab5", _
    "0x58a950", "0x42b4a0", "0x2cbaa4", "0x50ad50", "0x3c55d9", "0x624ba0", "0x4ca5b0", "0x375176", "0x5c5270", "0x466930", _
    "0x307934", "0x546aa0", "0x3ead50", "0x2a5b52", "0x504b60", "0x38a6e6", "0x5ea4e0", "0x48d260", "0x32ea65", "0x56d520", _
    "0x40daa0", "0x2d56a3", "0x5256d0", "0x3c4afb", "0x6249d0", "0x4ca4d0", "0x37d0b6", "0x5ab250", "0x44b520", "0x2edd25", _
    "0x54b5a0", "0x3e55d0", "0x2a55b2", "0x5049b0", "0x3aa577", "0x5ea4b0", "0x48aa50", "0x33b255", "0x586d20", "0x40ad60", _
    "0x2d4b63", "0x525370", "0x3e49e8", "0x60c970", "0x4c54b0", "0x3768a6", "0x5ada50", "0x445aa0", "0x2fa6a4", "0x54aad0", _
    "0x4052e0", "0x28d2e3", "0x4ec950", "0x38d557", "0x5ed4a0", "0x46d950", "0x325d55", "0x5856a0", "0x42a6d0", "0x2c55d4", _
    "0x5252b0", "0x3ca9b8", "0x62a930", "0x4ab490", "0x34b6a6", "0x5aad50", "0x4655a0", "0x2eab64", "0x54a570", "0x4052b0", _
    "0x2ab173", "0x4e6930", "0x386b37", "0x5e6aa0", "0x48ad50", "0x332ad5", "0x582b60", "0x42a570", "0x2e52e4", "0x50d160", _
    "0x3ae958", "0x60d520", "0x4ada90", "0x355aa6", "0x5a56d0", "0x462ae0", "0x30a9d4", "0x54a2d0", "0x3ed150", "0x28e952")
    
TK22 = Array( _
    "0x4eb520", "0x38d727", "0x5eada0", "0x4a55b0", "0x362db5", "0x5a45b0", "0x44a2b0", "0x2eb2b4", "0x54a950", "0x3cb559", _
    "0x626b20", "0x4cad50", "0x385766", "0x5c5370", "0x484570", "0x326574", "0x5852b0", "0x406950", "0x2a7953", "0x505aa0", _
    "0x3baaa7", "0x5ea6d0", "0x4a4ae0", "0x35a2e5", "0x5aa550", "0x42d2a0", "0x2de2a4", "0x52d550", "0x3e5abb", "0x6256a0", _
    "0x4c96d0", "0x3949b6", "0x5e4ab0", "0x46a8d0", "0x30d4b5", "0x56b290", "0x40b550", "0x2a6d52", "0x504da0", "0x3b9567", _
    "0x609570", "0x4a49b0", "0x34a975", "0x5a64b0", "0x446a90", "0x2cba94", "0x526b50", "0x3e2b60", "0x28ab61", "0x4c9570", _
    "0x384ae6", "0x5cd160", "0x46e4a0", "0x2eed25", "0x54da90", "0x405b50", "0x2c36d3", "0x502ae0", "0x3a93d7", "0x6092d0", _
    "0x4ac950", "0x32d556", "0x58b4a0", "0x42b690", "0x2e5d94", "0x5255b0", "0x3e25fa", "0x6425b0", "0x4e92b0", "0x36aab6", _
    "0x5c6950", "0x4674a0", "0x31b2a5", "0x54ad50", "0x4055a0", "0x2aab73", "0x522570", "0x3a5377", "0x6052b0", "0x4a6950", _
    "0x346d56", "0x585aa0", "0x42ab50", "0x2e56d4", "0x544ae0", "0x3ca570", "0x2864d2", "0x4cd260", "0x36eaa6", "0x5ad550", _
    "0x465aa0", "0x30ada5", "0x5695d0", "0x404ad0", "0x2aa9b3", "0x50a4d0", "0x3ad2b7", "0x5eb250", "0x48b540", "0x33d556")
    
monthLengths = Array(29, 30)

    If yy < 1900 Then
        YearCode = TK19(yy - 1800)
    ElseIf yy < 2000 Then
        YearCode = TK20(yy - 1900)
    ElseIf yy < 2100 Then
        YearCode = TK21(yy - 2000)
    Else
        YearCode = TK22(yy - 2100)
    End If
    OffsetOfTET = Shift(YearCode, 17)
    LeapMonthYear = DecFromHex(Right(YearCode, 1))              'Thang nhuan cua nam HexChar cuoi cung
    leapMonthLength = monthLengths(Shift(YearCode, 16) Mod 2)   'Bit thu 16
    jdFirstDate = jdFromDate(DateSerial(yy, 1, 1))              'Ngay dau nam duong dich
    jdNgayTET = jdFirstDate + OffsetOfTET                       'Ngay dau nam Am lich
    '===================================================================================
    jdCurrentDay = jdNgayTET                                    'Bat dau tu dau nam Am lich
    Dem = 1                                                     'Bat dau tu thang 1 am lich
    If LeapMonthYear = 0 Then
        For mm = 1 To 12
            LunarMonth(Dem) = mm
            DaysOfMonth(Dem) = monthLengths(Shift(YearCode, 16 - mm) Mod 2)
            MonthLeap(Dem) = 0
            jdNewMoon(Dem) = jdCurrentDay
            jdCurrentDay = jdCurrentDay + DaysOfMonth(Dem)
            Dem = Dem + 1
        Next mm
    Else
        For mm = 1 To LeapMonthYear
            LunarMonth(Dem) = mm
            DaysOfMonth(Dem) = monthLengths(Shift(YearCode, 16 - mm) Mod 2)
            MonthLeap(Dem) = 0
            jdNewMoon(Dem) = jdCurrentDay
            jdCurrentDay = jdCurrentDay + DaysOfMonth(Dem)
            Dem = Dem + 1
        Next mm
        LunarMonth(Dem) = LeapMonthYear
        DaysOfMonth(Dem) = monthLengths(Shift(YearCode, 16) Mod 2)
        MonthLeap(Dem) = 1
        jdNewMoon(Dem) = jdCurrentDay
        jdCurrentDay = jdCurrentDay + DaysOfMonth(Dem)
        Dem = Dem + 1
        For mm = LeapMonthYear + 1 To 12
            LunarMonth(Dem) = mm
            DaysOfMonth(Dem) = monthLengths(Shift(YearCode, 16 - mm) Mod 2)
            MonthLeap(Dem) = 0
            jdNewMoon(Dem) = jdCurrentDay
            jdCurrentDay = jdCurrentDay + DaysOfMonth(Dem)
            Dem = Dem + 1
        Next mm
    End If
    MonthsOfYear = Dem - 1
    '===================================================================================
End Sub
Private Function Shift(Hexa, expression)
    NumBer = DecFromHex(Hexa)
    For I = 1 To expression
        NumBer = Int(NumBer / 2)
    Next I
    Shift = NumBer
End Function
Private Function Read(Chu As String)
    Dim sh As Worksheet, ColIndex As Integer, c
    Set sh = ThisWorkbook.Sheets("CanChi")
    ColIndex = CodeIndex + 1
    For I = 2 To 10000
        If sh.Cells(I, 1).Value = Empty Then Exit For
        If sh.Cells(I, 1).Value = Chu Then
            Read = sh.Cells(I, ColIndex).Value
            Exit Function
        End If
    Next I
    Read = Chu
End Function
Function RowBOT(sh As Worksheet)
    Dim I As Integer
    For I = 1 To 1000
        If LCase(sh.Cells(I, 1).Value) = "stt" Or _
           LCase(sh.Cells(I, 1).Value) = "parent" Or _
           LCase(sh.Cells(I, 1).Value) = "ky|fffd| hi|fffd||fffd|u" Or _
           LCase(sh.Cells(I, 1).Value) = "ma hieu" Or _
           LCase(sh.Cells(I, 1).Value) = "mh" Or _
           LCase(sh.Cells(I, 1).Value) = "tt" Or _
           LCase(sh.Cells(I, 1).Value) = "ma hieu dm" Or _
           LCase(sh.Cells(I, 1).Value) = "madm" Or _
           LCase(sh.Cells(I, 1).Value) = "ma" Or _
           LCase(sh.Cells(I, 1).Value) = "mark" Then
           isMerge = 0
           While sh.Cells(I, 1).MergeCells
                isMerge = 1
                I = I + 1
           Wend
           If isMerge = 1 Then I = I - 1
           RowBOT = I
           Exit Function
        End If
     Next I
    RowBOT = 1
End Function
Function RowEOT(sh As Worksheet) As Integer
    Dim I As Integer, a As Integer
    On Error GoTo 0
    For I = RowBOT(sh) + 1 To 19000
        For n = 1 To 10
            If IsError(sh.Cells(I, n).Value) Then
                sh.Cells(I, n).Value = Empty
                MsgBox "C|fffd|ng th|fffd|c trong b|fffd|ng " & sh.Name & " b|fffd| l|fffd|i t|fffd|i h|fffd|ng s|fffd| " & I
                sh.Cells(I, n).Value = Empty
                'End
            End If
        Next n
        If sh.Cells(I, 1).Value = Empty And _
           sh.Cells(I, 2).Value = Empty And _
           sh.Cells(I, 3).Value = Empty And _
           sh.Cells(I, 4).Value = Empty And _
           sh.Cells(I, 5).Value = Empty And _
           sh.Cells(I, 6).Value = Empty And _
           sh.Cells(I, 7).Value = Empty And _
           sh.Cells(I, 8).Value = Empty And _
           sh.Cells(I, 9).Value = Empty And _
           sh.Cells(I, 10).Value = Empty Then
            For a = I To I + 1
                If sh.Cells(a, 1).Value <> Empty Or _
                   sh.Cells(a, 2).Value <> Empty Or _
                   sh.Cells(a, 3).Value <> Empty Or _
                   sh.Cells(a, 4).Value <> Empty Or _
                   sh.Cells(a, 5).Value <> Empty Or _
                   sh.Cells(a, 6).Value <> Empty Or _
                   sh.Cells(a, 7).Value <> Empty Or _
                   sh.Cells(a, 8).Value <> Empty Or _
                   sh.Cells(a, 9).Value <> Empty Or _
                   sh.Cells(a, 10).Value <> Empty Then
                    I = a
                    GoTo Next1
                End If
            Next a
            RowEOT = I - 1
            Exit Function
Next1:
        End If
    Next I
    RowEOT = 1
End Function


Attribute VB_Name = "mdDocSo"
Private Sub Auto_Open()
    Dim add As AddIn, myFound As Boolean
    If Workbooks.Count = 0 Then Workbooks.add
    myFound = False
    For Each add In AddIns
        If LCase(add.Name) = "DocSo.xla" Then
            myFound = True
            Exit For
        End If
    Next
    If myFound = False Then
        AddIns.add Filename:=ThisWorkbook.Path & "\DocSo.xla"
    End If
    AddIns("DocSo").Installed = True
End Sub
Public Function DocSo(So)
    Dim ChuTi, ChuTrieu, ChuNgan, ChuTram, SoTi, SoTrieu, SoNgan, SoTram
    Dim DocTemp, CodeIndex As Integer, DauPhay As Boolean
    DauPhay = True
    If TypeName(Application.Caller) = "Range" Then
        FontName = Application.Caller.Font.Name
    Else
        FontName = ".VnTime"
    End If
    If Left(FontName, 3) = ".Vn" Then
        CodeIndex = 1
        ElseIf Left(FontName, 3) = "VNI" Then CodeIndex = 3
        ElseIf Left(FontName, 2) = "VN" Then CodeIndex = 2
        Else: CodeIndex = 4
    End If
    So = Right("000000000000" & Format(So, "0"), 12)
    SoTram = Right(So, 3)
    SoNgan = Mid(So, 7, 3)
    SoTrieu = Mid(So, 4, 3)
    SoTi = Left(So, 3)
    
    Chu1 = Trim(Doc3So(SoTram, CodeIndex))
    Chu2 = Trim(Doc3So(SoNgan, CodeIndex))
    Chu3 = Trim(Doc3So(SoTrieu, CodeIndex))
    Chu4 = Trim(Doc3So(SoTi, CodeIndex))
    
    If Chu1 = Empty Then ChuTram = "" Else ChuTram = Chu1
    If Chu2 = Empty Then ChuNgan = "" Else ChuNgan = Chu2 & Read("ngan", CodeIndex)
    If Chu3 = Empty Then ChuTrieu = "" Else ChuTrieu = Chu3 & Read("trieu", CodeIndex)
    If Chu4 = Empty Then ChuTi = "" Else ChuTi = Chu4 & Read("ti", CodeIndex)
    
    If ChuNgan <> "" And ChuTram <> "" Then
        If DauPhay = True Then ChuNgan = ChuNgan & ", " Else ChuNgan = ChuNgan & " "
    End If
    If ChuTrieu <> "" Then
        If ChuNgan <> "" Or ChuTram <> "" Then
            If DauPhay = True Then ChuTrieu = ChuTrieu & ", " Else ChuTrieu = ChuTrieu & " "
        End If
    End If
    If ChuTi <> "" Then
        If ChuTrieu <> "" Or ChuNgan <> "" Or ChuTram <> "" Then
            If DauPhay = True Then ChuTi = ChuTi & ", " Else ChuTi = ChuTi & " "
        End If
    End If
    DocTemp = Trim(ChuTi & ChuTrieu & ChuNgan & ChuTram) & Read("dong", CodeIndex)
    DocSo = "(" & UCase(Left(DocTemp, 1)) & Mid(DocTemp, 2) & ")"
End Function
Public Function DocSoUSD(So)
    Dim ChuTi, ChuTrieu, ChuNgan, ChuTram, SoTi, SoTrieu, SoNgan, SoTram
    Dim DocTemp, CodeIndex As Integer, DauPhay As Boolean
    DauPhay = True
    If TypeName(Application.Caller) = "Range" Then
        FontName = Application.Caller.Font.Name
    Else
        FontName = ".VnTime"
    End If
    If Left(FontName, 3) = ".Vn" Then
        CodeIndex = 1
        ElseIf Left(FontName, 3) = "VNI" Then CodeIndex = 3
        ElseIf Left(FontName, 2) = "VN" Then CodeIndex = 2
        Else: CodeIndex = 4
    End If
    Le = "0" & Right(Format(So, "#,##0.00"), 2)
    So = Right("000000000000" & Format(So, "0"), 12)
    
    SoLe = Right(Le, 3)
    SoTram = Right(So, 3)
    SoNgan = Mid(So, 7, 3)
    SoTrieu = Mid(So, 4, 3)
    SoTi = Left(So, 3)
   
    Chu0 = Trim(Doc3So(SoLe, CodeIndex))
    Chu1 = Trim(Doc3So(SoTram, CodeIndex))
    Chu2 = Trim(Doc3So(SoNgan, CodeIndex))
    Chu3 = Trim(Doc3So(SoTrieu, CodeIndex))
    Chu4 = Trim(Doc3So(SoTi, CodeIndex))

    If Chu0 = Empty Then ChuLe = "" Else ChuLe = Chu0 & Read("xen", CodeIndex)
    If Chu1 = Empty Then ChuTram = "" Else ChuTram = Chu1
    If Chu2 = Empty Then ChuNgan = "" Else ChuNgan = Chu2 & Read("ngan", CodeIndex)
    If Chu3 = Empty Then ChuTrieu = "" Else ChuTrieu = Chu3 & Read("trieu", CodeIndex)
    If Chu4 = Empty Then ChuTi = "" Else ChuTi = Chu4 & Read("ti", CodeIndex)

    If ChuLe <> "" Then
        ChuLe = Read("va", CodeIndex) & " " & ChuLe
    End If

    If ChuNgan <> "" And ChuTram <> "" Then
        If DauPhay = True Then ChuNgan = ChuNgan & ", " Else ChuNgan = ChuNgan & " "
    End If
    If ChuTrieu <> "" Then
        If ChuNgan <> "" Or ChuTram <> "" Then
            If DauPhay = True Then ChuTrieu = ChuTrieu & ", " Else ChuTrieu = ChuTrieu & " "
        End If
    End If
    If ChuTi <> "" Then
        If ChuTrieu <> "" Or ChuNgan <> "" Or ChuTram <> "" Then
            If DauPhay = True Then ChuTi = ChuTi & ", " Else ChuTi = ChuTi & " "
        End If
    End If
    DocTemp = Trim(ChuTi & ChuTrieu & ChuNgan & ChuTram) & Read("dola", CodeIndex) & ChuLe
    DocSoUSD = "(" & UCase(Left(DocTemp, 1)) & Mid(DocTemp, 2) & ")"
End Function

Private Function Read(Chu As String, CodeIndex As Integer)
    Dim sh As Worksheet, ColIndex As Integer, c
    Set sh = ThisWorkbook.Sheets("DocSo")
    ColIndex = CodeIndex + 1
    For I = 2 To 10000
        If sh.Cells(I, 1).Value = Empty Then Exit For
        If sh.Cells(I, 1).Value = Chu Then
            Read = " " & sh.Cells(I, ColIndex).Value
            Exit Function
        End If
    Next I
    Read = Chu
End Function

Private Function ToChu(So, CodeIndex As Integer)
    Select Case So
        Case 1: ToChu = Read("motj", CodeIndex)
        Case 2: ToChu = Read("hai", CodeIndex)
        Case 3: ToChu = Read("ba", CodeIndex)
        Case 4: ToChu = Read("bon", CodeIndex)
        Case 5: ToChu = Read("nam", CodeIndex)
        Case 6: ToChu = Read("sau", CodeIndex)
        Case 7: ToChu = Read("bay", CodeIndex)
        Case 8: ToChu = Read("tam", CodeIndex)
        Case 9: ToChu = Read("chin", CodeIndex)
        Case 0: ToChu = Read("khong", CodeIndex)
    End Select
End Function

Private Function Doc3So(So, CodeIndex As Integer)
    Dim a, b, c, Chu1, Chu2, Chu3
    If Len(So) > 3 Then Exit Function
    So = Right("000" & So, 3)
    a = Left(So, 1)
    b = Mid(So, 2, 1)
    c = Right(So, 1)
    Select Case a
        Case 0: Chu1 = ""
        Case Else: Chu1 = ToChu(a, CodeIndex) & Read("tram", CodeIndex)
    End Select
    Select Case b
        Case 0: If a = 0 Or c = 0 Then Chu2 = "" Else Chu2 = Read("le", CodeIndex)
        Case 1: Chu2 = Read("muoif", CodeIndex)
        Case Else: Chu2 = ToChu(b, CodeIndex) & Read("muoi", CodeIndex)
    End Select
    Select Case c
        Case 0:  If b = 0 Then Chu3 = " "
        Case 1:  If b = 0 Or b = 1 Then Chu3 = Read("motj", CodeIndex) Else Chu3 = Read("mots", CodeIndex)
        Case 5:  If b <> 0 Then Chu3 = Read("lam", CodeIndex) Else Chu3 = Read("nam", CodeIndex)
        Case Else: Chu3 = ToChu(c, CodeIndex)
    End Select
    Doc3So = Trim(Chu1 & Chu2 & Chu3)
End Function


INQUEST-PP=macro
