Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "Sheet2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "Sheet3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "Sheet4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private Sub Workbook_BeforeClose(Cancel As Boolean)
Sheets("Instructions").Activate
Application.EnableEvents = False
ThisWorkbook.Save
Application.EnableEvents = True
End Sub

Private Sub Workbook_BeforeSave(ByVal SaveAsUI As Boolean, Cancel As Boolean)

    ValidateWorksheet

End Sub

Private Sub Workbook_Open()
Sheets("ExpectedPupil").Activate
End Sub
Attribute VB_Name = "modConstants"
Option Explicit

Public Const gcstrSheetName As String = "ExpectedPupil"
Public Const gcintStartRow As Integer = 2
Public Const gcstrFirstColumn As String = "A"
Public Const gcstrLastColumn As String = "AD"
Attribute VB_Name = "modFormatting"
Option Explicit

Sub ShadeCell(CellLocation As Range)
    CellLocation.Interior.Color = vbRed
End Sub

Sub UnShadeCell(Location As Range)
    Location.Interior.Color = 16777215
    Location.Interior.Pattern = xlNone
End Sub

Sub ShadeText(CellLocation As Range)
    CellLocation.Interior.Color = xlNone
    CellLocation.Interior.Pattern = xlNone
    CellLocation.Font.Color = vbRed
End Sub

Sub UnShadeText(Location As Range)
    Location.Interior.Color = xlNone
    Location.Interior.Pattern = xlNone
    Location.Font.Color = vbBlack
End Sub

Sub ShadePupilData(DataRow As Integer)

    Dim rngValidationRange As Range
    Dim i As Integer

    Set rngValidationRange = ThisWorkbook.Sheets("ExpectedPupil").Range("rPupilDetails")

    For i = 1 To rngValidationRange.Rows(DataRow).Columns.Count
        ShadeText (rngValidationRange.Rows(DataRow).Cells(i))
    Next

End Sub

Sub ShadeTARange(DataRow As Long, TARange As String)

    Dim rngValidationRange As Range
    Dim i As Integer

    Set rngValidationRange = ThisWorkbook.Sheets("ExpectedPupil").Range(TARange)

    For i = 1 To rngValidationRange.Rows(DataRow).Columns.Count
        ShadeCell (rngValidationRange.Rows(DataRow).Cells(i))
    Next

End Sub
Attribute VB_Name = "modMain"
Option Explicit
Private ErrorsPresent As Boolean
Const strPassword As String = "maybe512"

Sub ValidateWorksheet()
    
   On Error GoTo ValidateWorksheet_Error

    ThisWorkbook.Sheets("ExpectedPupil").Unprotect strPassword
    RestoreValidation
    ErrorsPresent = False
    Dim objName As Name
    Dim intNumberOfRows As Integer

    Dim strMandatoryValue
    Dim rngValidationRange As Range
    Dim rng As Range
    Dim rngCell As Range
    Dim i As Long
    Dim intColumnCounter As Integer
    Dim strRange As String

    For Each objName In ThisWorkbook.Names

        Select Case objName.Name

        Case "rValidationEnglish", "rValidationMaths", "rValidationScience"

            Set rngValidationRange = ThisWorkbook.Sheets("ExpectedPupil").Range(objName.Value)

            For i = 1 To GetNumberOfRows

                strMandatoryValue = ""

                intColumnCounter = 0

                For Each rngCell In rngValidationRange.Rows(i).Cells

                    intColumnCounter = intColumnCounter + 1

                    Select Case rngCell.Value

                    Case "L", "F", "P"
                        If strMandatoryValue <> "" Then
                            If rngCell.Value <> strMandatoryValue Then
                                Call ShadeTARange(i, objName.Name)
                                'ShadeCell (ActiveSheet.Range(rngCell.Address))
                                ShadePupilData (i)
                                ErrorsPresent = True
                            End If
                        Else
                            If intColumnCounter > 1 Then
                                Call ShadeTARange(i, objName.Name)
                                'ShadeCell (rngValidationRange.Rows(i).Cells(intColumnCounter - 1))
                                ShadePupilData (i)
                                ErrorsPresent = True
                                strMandatoryValue = rngCell.Value
                            Else
                                strMandatoryValue = rngCell.Value
                            End If
                        End If

                    Case "W"
                        If strMandatoryValue <> "" Then
                            Call ShadeTARange(i, objName.Name)
                            'ShadeCell (ActiveSheet.Range(rngCell.Address))
                            ShadePupilData (i)
                            ErrorsPresent = True
                        End If

                        'Call PScaleValidation(objName.Name, i)

                    Case Else
                        If strMandatoryValue <> "" Then
                            Call ShadeTARange(i, objName.Name)
                            'ShadeCell (ActiveSheet.Range(rngCell.Address))
                            ShadePupilData (i)
                            ErrorsPresent = True
                        End If

                    End Select

                Next

            Next

        Case "rPupilDetails"

            Set rngValidationRange = ThisWorkbook.Sheets("ExpectedPupil").Range(objName.Value)

            For i = 1 To GetNumberOfRows
                intColumnCounter = 0
                For Each rngCell In rngValidationRange.Rows(i).Cells
                    intColumnCounter = intColumnCounter + 1

                    Select Case intColumnCounter

                    Case 5
                        If rngValidationRange.Rows(i).Cells(intColumnCounter).Value = "01/01/1970" Then
                            rngValidationRange.Rows(i).Cells(intColumnCounter).Locked = False
                            ShadeCell (rngValidationRange.Rows(i).Cells(intColumnCounter))
                        Else
                        rngValidationRange.Rows(i).Cells(intColumnCounter).Locked = True
                        End If

                    Case 6

                        If rngValidationRange.Rows(i).Cells(intColumnCounter).Value = "?" Then
                            rngValidationRange.Rows(i).Cells(intColumnCounter).Locked = False
                            ShadeCell (rngValidationRange.Rows(i).Cells(intColumnCounter))
                            Else
                            rngValidationRange.Rows(i).Cells(intColumnCounter).Locked = True
                        End If
                        
                    Case Else
                    
                    rngValidationRange.Rows(i).Cells(intColumnCounter).Locked = True
                    
                    End Select

                Next

            Next

        Case Else

            'Nothing currently...

        End Select

    Next
    
    Worksheets("ExpectedPupil").Protect strPassword

    If ErrorsPresent = True Then
        MsgBox "Please note that you are saving this document with invalid data." & vbCr & vbCr & "Please review the cells highlighted in red before submitting", vbCritical
    End If

   On Error GoTo 0
   Exit Sub

ValidateWorksheet_Error:

    MsgBox "Error " & Err.Number & " (" & Err.Description & ") in procedure ValidateWorksheet of Module modMain"

End Sub

Sub PScaleValidation(Subject As String, Row As Long)
    
    Dim rngPScale As Range
    Dim rngCell As Range

   On Error GoTo PScaleValidation_Error

    Select Case Subject
    Case "rValidationEnglish"
        Set rngPScale = ThisWorkbook.Sheets("ExpectedPupil").Range("rValidationEnglishPScale")
    Case "rValidationMaths"
        Set rngPScale = ThisWorkbook.Sheets("ExpectedPupil").Range("rValidationMathsPScale")
    Case "rValidationScience"
        Set rngPScale = ThisWorkbook.Sheets("ExpectedPupil").Range("rValidationSciencePScale")
    End Select

    For Each rngCell In rngPScale.Rows(Row).Cells

        If rngCell.Value = "" Then
            ShadeCell (ActiveSheet.Range(rngCell.Address))
            ShadePupilData (Row)
            ErrorsPresent = True
        End If

    Next

   On Error GoTo 0
   Exit Sub

PScaleValidation_Error:

    MsgBox "Error " & Err.Number & " (" & Err.Description & ") in procedure PScaleValidation of Module modMain"

End Sub
Attribute VB_Name = "modValidation"
Option Explicit
Option Base 1

Function ValidateText(TextToValidate As String, MaxLength As Integer, SpecialCharsAllowed As Boolean, CanBeNull As Boolean) As Boolean
'Validate plain text, based on max length and whether special characters are allowed

    ValidateText = False

    If TextToValidate = "" Then

        If CanBeNull = True Then
            ValidateText = True
        Else
            ValidateText = False
        End If

        Exit Function
    End If

    If Len(TextToValidate) <= MaxLength Then
        ValidateText = True
    Else
        ValidateText = False
        Exit Function
    End If

    If SpecialCharsAllowed = False Then
        If AlphaNumeric(TextToValidate) = True Then
            ValidateText = True
        Else
            ValidateText = False
        End If
    End If

End Function

Function ValidateYesNo(TextToValidate As String) As Boolean
'Checks whether the supplied string is equal to YES or NO

    If UCase(TextToValidate) = "YES" Or UCase(TextToValidate) = "NO" Then
        ValidateYesNo = True
    Else
        ValidateYesNo = False
    End If

End Function

Function ValidateDecimal(ValueToValidate As Variant, MaxLength As Integer) As Boolean
'ValueToValidate has to be declared as a Variant, because you can't directly declare the decimal datatype..

    On Error GoTo ValidateDecimal_Error

    If Len(CDec(ValueToValidate)) <= MaxLength Then
        ValidateDecimal = True
    Else
        ValidateDecimal = False
        Exit Function
    End If

    On Error GoTo 0
    Exit Function

ValidateDecimal_Error:

    ValidateDecimal = False

End Function

Function ValidateFromList(TextToValidate As String, PermittedValues() As String) As Boolean
    Dim i As Integer
    ValidateFromList = False

    For i = LBound(PermittedValues) To UBound(PermittedValues)
        If UCase(TextToValidate) = UCase(PermittedValues(i)) Then
            ValidateFromList = True
            Exit Function
        End If
    Next

End Function

Function ValidateInteger(TextToValidate As String) As Boolean

    On Error GoTo ValidateInteger_Error

    'Do a meaningless calculation - If it fails, the value is not an integer

    If TextToValidate = "" Then
        ValidateInteger = True
        Exit Function
    End If

    If CInt(TextToValidate) = CInt(TextToValidate) Then
        ValidateInteger = True
    End If

    If CInt(TextToValidate) < 1 Then
        ValidateInteger = False
    End If

    On Error GoTo 0
    Exit Function

ValidateInteger_Error:
    ValidateInteger = False
End Function

Function ValidateCommaSeparatedList(TextToValidate As String, MaxItemLength As Integer) As Boolean
    Dim strTextParts() As String
    Dim i As Integer
    On Error GoTo ValidateCommaSeparatedList_Error

    ValidateCommaSeparatedList = True

    strTextParts = Split(TextToValidate, ",")

    For i = LBound(strTextParts) To UBound(strTextParts)
        If Len(strTextParts(i)) > MaxItemLength Or strTextParts(i) = "" Then
            ValidateCommaSeparatedList = False
            Exit Function
        End If
    Next

    On Error GoTo 0
    Exit Function

ValidateCommaSeparatedList_Error:

    ValidateCommaSeparatedList = False

End Function

Sub TestListValidation()
'########PURELY FOR TESTING ValidateFromList Function ##############

    Dim strTest(3) As String

    strTest(1) = "Sausages"
    strTest(2) = "Live"
    strTest(3) = "Discontinued"

    Debug.Print "Validation result: " & ValidateFromList(Selection.Value, strTest)

End Sub

Function AlphaNumeric(pValue) As Boolean

    Dim LPos As Integer
    Dim LChar As String
    Dim LValid_Values As String

    'Start at first character in pValue
    LPos = 1

    'Set up values that are considered to be alphanumeric
    LValid_Values = " abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"

    'Test each character in pValue
    While LPos <= Len(pValue)

        'Single character in pValue
        LChar = Mid(pValue, LPos, 1)

        'If character is not alphanumeric, return FALSE
        If InStr(LValid_Values, LChar) = 0 Then
            AlphaNumeric = False
            Exit Function
        End If

        'Increment counter
        LPos = LPos + 1

    Wend

    'Value is alphanumeric, return TRUE
    AlphaNumeric = True

End Function

Function IsUniqueValue(Column As Integer, Value As String) As Boolean

    Dim rngEvaluate As Range

    Set rngEvaluate = ActiveSheet.UsedRange.Columns(Column)

    If WorksheetFunction.CountIf(rngEvaluate, Value) > 1 Then
        IsUniqueValue = False
    Else
        IsUniqueValue = True
    End If

End Function

Sub RestoreValidation()

    ThisWorkbook.Sheets("ValidationMaster").Range("A2:AD300").Copy
    
    Sheets("ExpectedPupil").Range("A2").Select

    Selection.PasteSpecial Paste:=xlPasteFormats, Operation:=xlNone, _
                           SkipBlanks:=False, Transpose:=False

    Selection.PasteSpecial Paste:=xlPasteValidation, Operation:=xlNone, _
                           SkipBlanks:=False, Transpose:=False

    Application.CutCopyMode = False
    Sheets("ExpectedPupil").Range("A2").Select

End Sub

Function GetNumberOfRows() As Long
    Dim i As Integer

    'Iterate over rows in the UsedRange (literally the part of the sheet that has actually been used)
    For i = gcintStartRow To ThisWorkbook.Sheets(gcstrSheetName).UsedRange.Rows.Count

        'If a row has a blank value in column A, check to see if the next is populated

        'If ThisWorkbook.Sheets(gcstrSheetName).Range("A" & i) <> "" Then
        If IsRowBlank(i) = False Then

        Else

            'If ThisWorkbook.Sheets(gcstrSheetName).Range("A" & i + 1) = "" Then
            If IsRowBlank(i + 1) = True Then
                Exit For
            Else
            End If

        End If

    Next

    'Return the number of rows, less 2 (one for the header row, one for the fact that we effectively iterate beyond)
    GetNumberOfRows = i - 2

End Function

Function IsRowBlank(Row As Integer) As Boolean
    Dim i As Integer

    IsRowBlank = True

    For i = 1 To ThisWorkbook.Sheets(gcstrSheetName).UsedRange.Columns.Count
        If ThisWorkbook.Sheets(gcstrSheetName).Rows(Row).Columns(i).Value <> "" Then
            IsRowBlank = False
        End If
    Next

End Function


INQUEST-PP=macro
