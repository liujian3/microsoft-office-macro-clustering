Attribute VB_Name = "DieseArbeitsmappe"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Workbook_Open()
WBOpenFormatIngridients20141217.run

End Sub
Attribute VB_Name = "Tabelle1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle5"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle6"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle7"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "WBOpenFormatIngridients20141217"
Function run()
    Dim sheetList()
    Dim sheet As Variant
    
    sheetList = Array("Speiseplan")
    
    Application.ScreenUpdating = False
    Application.CalculateFull
    Application.CalculateFullRebuild
    
    If ActiveWorkbook.Worksheets("Daten").Range("B11").Value = "1" Then
        For Each sheet In sheetList
            FormatIngridients (ActiveWorkbook.Sheets(sheet).index)
        Next sheet
    End If
    Application.ScreenUpdating = True
End Function

Function FormatIngridients(index As Integer)
' Deklarationsteil
Const startTag = "#MBS"
Const endTag = "MBS#"
Dim foundCell As Range
    ' Erste Zelle ausw|fffd|hlen damit die Suche
    ' funktioniert und alle m|fffd|glichen Zellen findet
    ActiveWorkbook.Worksheets(index).Activate
    
    ' Erste Zelle suchen
    Set foundCell = Cells.Find(startTag, After:=Range("A1"), LookIn:=xlValues, LookAt:=XlLookAt.xlPart)
    
    Do
        If Not foundCell Is Nothing Then
            ' Formelwert in Zelle |fffd|bernehmen
            foundCell.FormulaR1C1 = foundCell.Value
            
            '-- Falls Zeilenumbruch in erster Zeile (durch Beschreibung), diesen herausnehmen
            If Left(foundCell.Value, 1) = Chr(10) Then foundCell.Value = Right(foundCell.Value, Len(foundCell.Value) - 1)
            
            ' Indices f|fffd|r die Inhaltsstoffe
            Dim startIndex As Integer
            Dim endIndex As Integer
            
            ' Liste f|fffd|r die Indizes zum Hochstellen
            Dim indexList() As Integer
            Dim ind As Integer ' Index
            
            ' Ersten Startindex zuweisen
            startIndex = InStr(1, foundCell.Value, startTag, vbTextCompare)
            ReDim indexList(1)
            indexList(1) = startIndex
            
            ' Innere Schleife zur Textformatierung und Ersetzung der Markierungen
            Do While Not startIndex = 0
            
            ' Bei erstem Schleifendurchlauf, darf Startindex noch nicht zugewiesen werden
            If Not UBound(indexList) = 1 Then
                ind = UBound(indexList)
                ReDim Preserve indexList(ind + 1)
                ' Startindex |fffd|bernehmen
                indexList(ind + 1) = startIndex
            End If
            
            ' StartTag entfernen - Zur Berechnung des korrekten EndIndex
            foundCell.Value = Replace(foundCell.Value, startTag, "", 1, 1)
            
            ' EndTag suchen
            If endIndex = 0 Then
                endIndex = InStr(1, foundCell.Value, endTag, vbTextCompare)
            Else
                endIndex = InStr(startIndex, foundCell.Value, endTag, vbTextCompare)
            End If
            
            ind = UBound(indexList)
            ReDim Preserve indexList(ind + 1)
            
            ' Endindex |fffd|bernehmen
            indexList(ind + 1) = endIndex
            
            ' Endtag entfernen
            foundCell.Value = Replace(foundCell.Value, endTag, "", 1, 1)
            
            ' N|fffd|chsten StartTag suchen
            startIndex = InStr(endIndex, foundCell.Value, startTag, vbTextCompare)
            
            Loop ' Ende Schleife: "Indices f|fffd|r hochgestelltes formatieren ermitteln"
            
            ' Hochgestellte Zusatzstoffe nach Ersetzung der Tags
            For x = 1 To UBound(indexList) - 1 Step 2 ' In 2er-Schritten, da immer Start (1) / Endindex (2), usw.
            
                st = indexList(x) 'Startindex
                ende = indexList(x + 1) 'Endindex
                
                With foundCell.Characters(st, ende - st).Font
                    .Superscript = True
                End With
                Next x
                
                ' Speicherfreigabe der IndexListe
                Erase indexList()
                
                ' N|fffd|chste Zelle zuweisen
                Set foundCell = Cells.FindNext(After:=foundCell)
            
        End If ' Ende If foundCell != null
    Loop While Not foundCell Is Nothing ' Ende Schleife: "nach Zellen suchen"
End Function














INQUEST-PP=macro
