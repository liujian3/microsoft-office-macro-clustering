Attribute VB_Name = "CSpigaoOriginalReader"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

'Classe de lecture des donn|fffd|es d'un fichier originale
'Utilise le DieDataExtractor
Private Const cDieDataExtractorProgramName As String = "DieDataExtractor.exe"
Private Const cWorkingfoldername As String = "export"
Private pOriginalFilePath As String
Private pDieXmlFilePath As String
Private pFileNameToParse As String
Private pDicDatas As Dictionary
Private tabFiles() As String

Public Property Let OriginalfilePath(sPath As String)
    If sgFileSystem.FileExists(sPath) Then pOriginalFilePath = sPath
End Property

Public Property Let DieXmlFilePath(sPath As String)
    If sgFileSystem.FileExists(sPath) Then pDieXmlFilePath = sPath
End Property


Public Property Let FileNameToParse(sName As String)
On Error GoTo fin
Dim i As Integer

    pFileNameToParse = ""
    ProcessExtractListFilesFromOri
    ReadListFilesFromOri
    For i = 0 To UBound(tabFiles)
        If tabFiles(i) = sName Then
            pFileNameToParse = sName
            Exit Property
        End If
    Next
    'Todo faire un choix dans la liste si pas de mapping trouv|fffd|.
    If UBound(tabFiles) = 0 And tabFiles(0) <> "" Then
        pFileNameToParse = tabFiles(0)
    Else
        pFileNameToParse = SpigaoChoose(tabFiles)
    End If
fin:
End Property

Private Property Get cDieDataExtractorProgramFullPath() As String
    cDieDataExtractorProgramFullPath = sgFileSystem.getScribeProgramFilesPath() & "\SpigaoExtractor\" & cDieDataExtractorProgramName
End Property

'Chemin du fichier exported.xml
Private Property Get sListFilesFromOriXmlFilePath() As String
Dim sFolderPath As String
    If pDieXmlFilePath <> "" Then
        sFolderPath = sgFileSystem.getFolderPathFromFilePath(pDieXmlFilePath)
        sListFilesFromOriXmlFilePath = sgFileSystem.joinPath(sFolderPath, cWorkingfoldername & "\exported.xml")
    End If
End Property

'Chemin du fichier dataextracted.xml
Private Property Get sExtractedDatasXmlFilePath() As String
Dim sFolderPath As String
    If pDieXmlFilePath <> "" Then
        sFolderPath = sgFileSystem.getFolderPathFromFilePath(pDieXmlFilePath)
        sExtractedDatasXmlFilePath = sgFileSystem.joinPath(sFolderPath, cWorkingfoldername & "\dataextracted.xml")
    End If
End Property


'Extrait la liste des fichiers originaux du ori
Private Sub ProcessExtractListFilesFromOri()
    
    Dim sCmd As String

    sCmd = """" & cDieDataExtractorProgramFullPath & """ -p """ & pDieXmlFilePath & """ -l -r " & cWorkingfoldername
    sgFileSystem.runCmd sCmd

End Sub

'Lit la liste des fichiers
Private Sub ReadListFilesFromOri()
Dim oNodes As Object
Dim oNode As Object
Dim k As Integer
Dim oXml As New aXml

    If oXml.LoadFromFile(sListFilesFromOriXmlFilePath) Then
        ReDim tabFiles(0)
        k = 0
        Set oNodes = oXml.getNodesFromRoot("extracted/file[@type='xlsx' or @type='xlsm']/name")
        
        For Each oNode In oNodes
            
            ReDim Preserve tabFiles(k)
            tabFiles(k) = oNode.nodetypedvalue
            k = UBound(tabFiles) + 1
        Next
    End If
End Sub

Private Function ProcessExtractDatasToXml() As Boolean
Dim sFileNameToParse As String
Dim sCmd As String

    If pFileNameToParse = "" Then
        If UBound(tabFiles) = 0 Then
            sFileNameToParse = tabFiles(0)
        End If
    End If

    If pFileNameToParse = "" Then
        sCmd = """" & cDieDataExtractorProgramFullPath & """ -p """ & pDieXmlFilePath & """ -r """ & cWorkingfoldername & """ -s """ & pOriginalFilePath & """"
    Else
        sCmd = """" & cDieDataExtractorProgramFullPath & """ -p """ & pDieXmlFilePath & """ -r """ & cWorkingfoldername & """ -f """ & pFileNameToParse & """ -s """ & pOriginalFilePath & """"
    End If
    If sgFileSystem.runCmd(sCmd) Then
        If sgFileSystem.WaitForFileExists(sExtractedDatasXmlFilePath, 1) Then ProcessExtractDatasToXml = True
    End If
    
End Function

'Lit la liste des fichiers
Private Sub ReadDatas()
Dim oNodes As Object
Dim oNode As Object
Dim oNodePU As Object
Dim k As Integer
Dim oWkItem As cWkItem
Dim sId As String
Dim sPU As String
Dim oXml As New aXml

    Set pDicDatas = New Dictionary
    
    If oXml.LoadFromFile(sExtractedDatasXmlFilePath) Then
         Set oNodes = oXml.getNodesFromRoot("data/row")
         For Each oNode In oNodes
            Set oNodePU = oXml.getNode(oNode, "pu")
            If Not oNodePU Is Nothing Then
                sId = oXml.getAttributValue(oNode, "id")
                sPU = CStr(oNodePU.nodetypedvalue)
                If sId <> "" And sPU <> "" Then
                    Set oWkItem = New cWkItem
                    oWkItem.Id = "P@" & sId
                    oWkItem.WkType = eWorkItemType.Price
                    Set oWkItem.PU = sgWkDataBuilder.byString(sPU)
                    pDicDatas.add oWkItem.Id, oWkItem
                End If
            End If
         Next
    End If
End Sub

Public Function toDictionary() As Dictionary
On Error GoTo fin
    'check si les points d'entr|fffd|e sont ok
    'If pFileNameToParse = "" Then Exit Function
    If pOriginalFilePath = "" Then Exit Function
    If pDieXmlFilePath = "" Then Exit Function
    
    'go
    ProcessExtractDatasToXml
    ReadDatas
    Set toDictionary = pDicDatas
fin:
    If Err Then
        MsgBox "erreur lors de la r|fffd|cup|fffd|ration des donn|fffd|es du fichier original : " & Err.Description
        Set toDictionary = Nothing
    End If
End Function

Attribute VB_Name = "Feuil1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "Feuil2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "Feuil3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "JsonConverter"
''
' VBA-JSON v2.2.3
' (c) Tim Hall - https://github.com/VBA-tools/VBA-JSON
'
' JSON Converter for VBA
'
' Errors:
' 10001 - JSON parse error
'
' @class JsonConverter
' @author tim.hall.engr@gmail.com
' @license MIT (http://www.opensource.org/licenses/mit-license.php)
'' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ '
'
' Based originally on vba-json (with extensive changes)
' BSD license included below
'
' JSONLib, http://code.google.com/p/vba-json/
'
' Copyright (c) 2013, Ryo Yokoyama
' All rights reserved.
'
' Redistribution and use in source and binary forms, with or without
' modification, are permitted provided that the following conditions are met:
'     * Redistributions of source code must retain the above copyright
'       notice, this list of conditions and the following disclaimer.
'     * Redistributions in binary form must reproduce the above copyright
'       notice, this list of conditions and the following disclaimer in the
'       documentation and/or other materials provided with the distribution.
'     * Neither the name of the <organization> nor the
'       names of its contributors may be used to endorse or promote products
'       derived from this software without specific prior written permission.
'
' THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
' ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
' WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
' DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
' DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
' (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
' LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
' ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
' (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
' SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ '
Option Explicit

' === VBA-UTC Headers
#If Mac Then

#If VBA7 Then

' 64-bit Mac (2016)
Private Declare PtrSafe Function utc_popen Lib "libc.dylib" Alias "popen" _
    (ByVal utc_Command As String, ByVal utc_Mode As String) As LongPtr
Private Declare PtrSafe Function utc_pclose Lib "libc.dylib" Alias "pclose" _
    (ByVal utc_File As Long) As LongPtr
Private Declare PtrSafe Function utc_fread Lib "libc.dylib" Alias "fread" _
    (ByVal utc_Buffer As String, ByVal utc_Size As LongPtr, ByVal utc_Number As LongPtr, ByVal utc_File As LongPtr) As LongPtr
Private Declare PtrSafe Function utc_feof Lib "libc.dylib" Alias "feof" _
    (ByVal utc_File As LongPtr) As LongPtr

#Else

' 32-bit Mac
Private Declare Function utc_popen Lib "libc.dylib" Alias "popen" _
    (ByVal utc_Command As String, ByVal utc_Mode As String) As Long
Private Declare Function utc_pclose Lib "libc.dylib" Alias "pclose" _
    (ByVal utc_File As Long) As Long
Private Declare Function utc_fread Lib "libc.dylib" Alias "fread" _
    (ByVal utc_Buffer As String, ByVal utc_Size As Long, ByVal utc_Number As Long, ByVal utc_File As Long) As Long
Private Declare Function utc_feof Lib "libc.dylib" Alias "feof" _
    (ByVal utc_File As Long) As Long

#End If

#ElseIf VBA7 Then

' http://msdn.microsoft.com/en-us/library/windows/desktop/ms724421.aspx
' http://msdn.microsoft.com/en-us/library/windows/desktop/ms724949.aspx
' http://msdn.microsoft.com/en-us/library/windows/desktop/ms725485.aspx
Private Declare PtrSafe Function utc_GetTimeZoneInformation Lib "kernel32" Alias "GetTimeZoneInformation" _
    (utc_lpTimeZoneInformation As utc_TIME_ZONE_INFORMATION) As Long
Private Declare PtrSafe Function utc_SystemTimeToTzSpecificLocalTime Lib "kernel32" Alias "SystemTimeToTzSpecificLocalTime" _
    (utc_lpTimeZoneInformation As utc_TIME_ZONE_INFORMATION, utc_lpUniversalTime As utc_SYSTEMTIME, utc_lpLocalTime As utc_SYSTEMTIME) As Long
Private Declare PtrSafe Function utc_TzSpecificLocalTimeToSystemTime Lib "kernel32" Alias "TzSpecificLocalTimeToSystemTime" _
    (utc_lpTimeZoneInformation As utc_TIME_ZONE_INFORMATION, utc_lpLocalTime As utc_SYSTEMTIME, utc_lpUniversalTime As utc_SYSTEMTIME) As Long

#Else

Private Declare Function utc_GetTimeZoneInformation Lib "kernel32" Alias "GetTimeZoneInformation" _
    (utc_lpTimeZoneInformation As utc_TIME_ZONE_INFORMATION) As Long
Private Declare Function utc_SystemTimeToTzSpecificLocalTime Lib "kernel32" Alias "SystemTimeToTzSpecificLocalTime" _
    (utc_lpTimeZoneInformation As utc_TIME_ZONE_INFORMATION, utc_lpUniversalTime As utc_SYSTEMTIME, utc_lpLocalTime As utc_SYSTEMTIME) As Long
Private Declare Function utc_TzSpecificLocalTimeToSystemTime Lib "kernel32" Alias "TzSpecificLocalTimeToSystemTime" _
    (utc_lpTimeZoneInformation As utc_TIME_ZONE_INFORMATION, utc_lpLocalTime As utc_SYSTEMTIME, utc_lpUniversalTime As utc_SYSTEMTIME) As Long

#End If

#If Mac Then

#If VBA7 Then
Private Type utc_ShellResult
    utc_Output As String
    utc_ExitCode As LongPtr
End Type

#Else

Private Type utc_ShellResult
    utc_Output As String
    utc_ExitCode As Long
End Type

#End If

#Else

Private Type utc_SYSTEMTIME
    utc_wYear As Integer
    utc_wMonth As Integer
    utc_wDayOfWeek As Integer
    utc_wDay As Integer
    utc_wHour As Integer
    utc_wMinute As Integer
    utc_wSecond As Integer
    utc_wMilliseconds As Integer
End Type

Private Type utc_TIME_ZONE_INFORMATION
    utc_Bias As Long
    utc_StandardName(0 To 31) As Integer
    utc_StandardDate As utc_SYSTEMTIME
    utc_StandardBias As Long
    utc_DaylightName(0 To 31) As Integer
    utc_DaylightDate As utc_SYSTEMTIME
    utc_DaylightBias As Long
End Type

#End If
' === End VBA-UTC

#If Mac Then
#ElseIf VBA7 Then

Private Declare PtrSafe Sub json_CopyMemory Lib "kernel32" Alias "RtlMoveMemory" _
    (json_MemoryDestination As Any, json_MemorySource As Any, ByVal json_ByteLength As Long)

#Else

Private Declare Sub json_CopyMemory Lib "kernel32" Alias "RtlMoveMemory" _
    (json_MemoryDestination As Any, json_MemorySource As Any, ByVal json_ByteLength As Long)

#End If

Private Type json_Options
    ' VBA only stores 15 significant digits, so any numbers larger than that are truncated
    ' This can lead to issues when BIGINT's are used (e.g. for Ids or Credit Cards), as they will be invalid above 15 digits
    ' See: http://support.microsoft.com/kb/269370
    '
    ' By default, VBA-JSON will use String for numbers longer than 15 characters that contain only digits
    ' to override set `JsonConverter.JsonOptions.UseDoubleForLargeNumbers = True`
    UseDoubleForLargeNumbers As Boolean

    ' The JSON standard requires object keys to be quoted (" or '), use this option to allow unquoted keys
    AllowUnquotedKeys As Boolean

    ' The solidus (/) is not required to be escaped, use this option to escape them as \/ in ConvertToJson
    EscapeSolidus As Boolean
End Type
Public JsonOptions As json_Options

' ============================================= '
' Public Methods
' ============================================= '

''
' Convert JSON string to object (Dictionary/Collection)
'
' @method ParseJson
' @param {String} json_String
' @return {Object} (Dictionary or Collection)
' @throws 10001 - JSON parse error
''
Public Function ParseJson(ByVal JsonString As String) As Object
    Dim json_Index As Long
    json_Index = 1

    ' Remove vbCr, vbLf, and vbTab from json_String
    JsonString = VBA.Replace(VBA.Replace(VBA.Replace(JsonString, VBA.vbCr, ""), VBA.vbLf, ""), VBA.vbTab, "")

    json_SkipSpaces JsonString, json_Index
    Select Case VBA.Mid$(JsonString, json_Index, 1)
    Case "{"
        Set ParseJson = json_ParseObject(JsonString, json_Index)
    Case "["
        Set ParseJson = json_ParseArray(JsonString, json_Index)
    Case Else
        ' Error: Invalid JSON string
        Err.Raise 10001, "JSONConverter", json_ParseErrorMessage(JsonString, json_Index, "Expecting '{' or '['")
    End Select
End Function

''
' Convert object (Dictionary/Collection/Array) to JSON
'
' @method ConvertToJson
' @param {Variant} JsonValue (Dictionary, Collection, or Array)
' @param {Integer|String} Whitespace "Pretty" print json with given number of spaces per indentation (Integer) or given string
' @return {String}
''
Public Function ConvertToJson(ByVal JsonValue As Variant, Optional ByVal Whitespace As Variant, Optional ByVal json_CurrentIndentation As Long = 0) As String
    Dim json_buffer As String
    Dim json_BufferPosition As Long
    Dim json_BufferLength As Long
    Dim json_Index As Long
    Dim json_LBound As Long
    Dim json_UBound As Long
    Dim json_IsFirstItem As Boolean
    Dim json_Index2D As Long
    Dim json_LBound2D As Long
    Dim json_UBound2D As Long
    Dim json_IsFirstItem2D As Boolean
    Dim json_Key As Variant
    Dim json_Value As Variant
    Dim json_DateStr As String
    Dim json_Converted As String
    Dim json_SkipItem As Boolean
    Dim json_PrettyPrint As Boolean
    Dim json_Indentation As String
    Dim json_InnerIndentation As String

    json_LBound = -1
    json_UBound = -1
    json_IsFirstItem = True
    json_LBound2D = -1
    json_UBound2D = -1
    json_IsFirstItem2D = True
    json_PrettyPrint = Not IsMissing(Whitespace)

    Select Case VBA.VarType(JsonValue)
    Case VBA.vbNull
        ConvertToJson = "null"
    Case VBA.vbDate
        ' Date
        json_DateStr = ConvertToIso(VBA.CDate(JsonValue))

        ConvertToJson = """" & json_DateStr & """"
    Case VBA.vbString
        ' String (or large number encoded as string)
        If Not JsonOptions.UseDoubleForLargeNumbers And json_StringIsLargeNumber(JsonValue) Then
            ConvertToJson = JsonValue
        Else
            ConvertToJson = """" & json_Encode(JsonValue) & """"
        End If
    Case VBA.vbBoolean
        If JsonValue Then
            ConvertToJson = "true"
        Else
            ConvertToJson = "false"
        End If
    Case VBA.vbArray To VBA.vbArray + VBA.vbByte
        If json_PrettyPrint Then
            If VBA.VarType(Whitespace) = VBA.vbString Then
                json_Indentation = VBA.String$(json_CurrentIndentation + 1, Whitespace)
                json_InnerIndentation = VBA.String$(json_CurrentIndentation + 2, Whitespace)
            Else
                json_Indentation = VBA.Space$((json_CurrentIndentation + 1) * Whitespace)
                json_InnerIndentation = VBA.Space$((json_CurrentIndentation + 2) * Whitespace)
            End If
        End If

        ' Array
        json_BufferAppend json_buffer, "[", json_BufferPosition, json_BufferLength

        On Error Resume Next

        json_LBound = LBound(JsonValue, 1)
        json_UBound = UBound(JsonValue, 1)
        json_LBound2D = LBound(JsonValue, 2)
        json_UBound2D = UBound(JsonValue, 2)

        If json_LBound >= 0 And json_UBound >= 0 Then
            For json_Index = json_LBound To json_UBound
                If json_IsFirstItem Then
                    json_IsFirstItem = False
                Else
                    ' Append comma to previous line
                    json_BufferAppend json_buffer, ",", json_BufferPosition, json_BufferLength
                End If

                If json_LBound2D >= 0 And json_UBound2D >= 0 Then
                    ' 2D Array
                    If json_PrettyPrint Then
                        json_BufferAppend json_buffer, vbNewLine, json_BufferPosition, json_BufferLength
                    End If
                    json_BufferAppend json_buffer, json_Indentation & "[", json_BufferPosition, json_BufferLength

                    For json_Index2D = json_LBound2D To json_UBound2D
                        If json_IsFirstItem2D Then
                            json_IsFirstItem2D = False
                        Else
                            json_BufferAppend json_buffer, ",", json_BufferPosition, json_BufferLength
                        End If

                        json_Converted = ConvertToJson(JsonValue(json_Index, json_Index2D), Whitespace, json_CurrentIndentation + 2)

                        ' For Arrays/Collections, undefined (Empty/Nothing) is treated as null
                        If json_Converted = "" Then
                            ' (nest to only check if converted = "")
                            If json_IsUndefined(JsonValue(json_Index, json_Index2D)) Then
                                json_Converted = "null"
                            End If
                        End If

                        If json_PrettyPrint Then
                            json_Converted = vbNewLine & json_InnerIndentation & json_Converted
                        End If

                        json_BufferAppend json_buffer, json_Converted, json_BufferPosition, json_BufferLength
                    Next json_Index2D

                    If json_PrettyPrint Then
                        json_BufferAppend json_buffer, vbNewLine, json_BufferPosition, json_BufferLength
                    End If

                    json_BufferAppend json_buffer, json_Indentation & "]", json_BufferPosition, json_BufferLength
                    json_IsFirstItem2D = True
                Else
                    ' 1D Array
                    json_Converted = ConvertToJson(JsonValue(json_Index), Whitespace, json_CurrentIndentation + 1)

                    ' For Arrays/Collections, undefined (Empty/Nothing) is treated as null
                    If json_Converted = "" Then
                        ' (nest to only check if converted = "")
                        If json_IsUndefined(JsonValue(json_Index)) Then
                            json_Converted = "null"
                        End If
                    End If

                    If json_PrettyPrint Then
                        json_Converted = vbNewLine & json_Indentation & json_Converted
                    End If

                    json_BufferAppend json_buffer, json_Converted, json_BufferPosition, json_BufferLength
                End If
            Next json_Index
        End If

        On Error GoTo 0

        If json_PrettyPrint Then
            json_BufferAppend json_buffer, vbNewLine, json_BufferPosition, json_BufferLength

            If VBA.VarType(Whitespace) = VBA.vbString Then
                json_Indentation = VBA.String$(json_CurrentIndentation, Whitespace)
            Else
                json_Indentation = VBA.Space$(json_CurrentIndentation * Whitespace)
            End If
        End If

        json_BufferAppend json_buffer, json_Indentation & "]", json_BufferPosition, json_BufferLength

        ConvertToJson = json_BufferToString(json_buffer, json_BufferPosition, json_BufferLength)

    ' Dictionary or Collection
    Case VBA.vbObject
        If json_PrettyPrint Then
            If VBA.VarType(Whitespace) = VBA.vbString Then
                json_Indentation = VBA.String$(json_CurrentIndentation + 1, Whitespace)
            Else
                json_Indentation = VBA.Space$((json_CurrentIndentation + 1) * Whitespace)
            End If
        End If

        ' Dictionary
        If VBA.TypeName(JsonValue) = "Dictionary" Then
            json_BufferAppend json_buffer, "{", json_BufferPosition, json_BufferLength
            For Each json_Key In JsonValue.Keys
                ' For Objects, undefined (Empty/Nothing) is not added to object
                json_Converted = ConvertToJson(JsonValue(json_Key), Whitespace, json_CurrentIndentation + 1)
                If json_Converted = "" Then
                    json_SkipItem = json_IsUndefined(JsonValue(json_Key))
                Else
                    json_SkipItem = False
                End If

                If Not json_SkipItem Then
                    If json_IsFirstItem Then
                        json_IsFirstItem = False
                    Else
                        json_BufferAppend json_buffer, ",", json_BufferPosition, json_BufferLength
                    End If

                    If json_PrettyPrint Then
                        json_Converted = vbNewLine & json_Indentation & """" & json_Key & """: " & json_Converted
                    Else
                        json_Converted = """" & json_Key & """:" & json_Converted
                    End If

                    json_BufferAppend json_buffer, json_Converted, json_BufferPosition, json_BufferLength
                End If
            Next json_Key

            If json_PrettyPrint Then
                json_BufferAppend json_buffer, vbNewLine, json_BufferPosition, json_BufferLength

                If VBA.VarType(Whitespace) = VBA.vbString Then
                    json_Indentation = VBA.String$(json_CurrentIndentation, Whitespace)
                Else
                    json_Indentation = VBA.Space$(json_CurrentIndentation * Whitespace)
                End If
            End If

            json_BufferAppend json_buffer, json_Indentation & "}", json_BufferPosition, json_BufferLength

        ' Collection
        ElseIf VBA.TypeName(JsonValue) = "Collection" Then
            json_BufferAppend json_buffer, "[", json_BufferPosition, json_BufferLength
            For Each json_Value In JsonValue
                If json_IsFirstItem Then
                    json_IsFirstItem = False
                Else
                    json_BufferAppend json_buffer, ",", json_BufferPosition, json_BufferLength
                End If

                json_Converted = ConvertToJson(json_Value, Whitespace, json_CurrentIndentation + 1)

                ' For Arrays/Collections, undefined (Empty/Nothing) is treated as null
                If json_Converted = "" Then
                    ' (nest to only check if converted = "")
                    If json_IsUndefined(json_Value) Then
                        json_Converted = "null"
                    End If
                End If

                If json_PrettyPrint Then
                    json_Converted = vbNewLine & json_Indentation & json_Converted
                End If

                json_BufferAppend json_buffer, json_Converted, json_BufferPosition, json_BufferLength
            Next json_Value

            If json_PrettyPrint Then
                json_BufferAppend json_buffer, vbNewLine, json_BufferPosition, json_BufferLength

                If VBA.VarType(Whitespace) = VBA.vbString Then
                    json_Indentation = VBA.String$(json_CurrentIndentation, Whitespace)
                Else
                    json_Indentation = VBA.Space$(json_CurrentIndentation * Whitespace)
                End If
            End If

            json_BufferAppend json_buffer, json_Indentation & "]", json_BufferPosition, json_BufferLength
        End If

        ConvertToJson = json_BufferToString(json_buffer, json_BufferPosition, json_BufferLength)
    Case VBA.vbInteger, VBA.vbLong, VBA.vbSingle, VBA.vbDouble, VBA.vbCurrency, VBA.vbDecimal
        ' Number (use decimals for numbers)
        ConvertToJson = VBA.Replace(JsonValue, ",", ".")
    Case Else
        ' vbEmpty, vbError, vbDataObject, vbByte, vbUserDefinedType
        ' Use VBA's built-in to-string
        On Error Resume Next
        ConvertToJson = JsonValue
        On Error GoTo 0
    End Select
End Function

' ============================================= '
' Private Functions
' ============================================= '

Private Function json_ParseObject(json_String As String, ByRef json_Index As Long) As Dictionary
    Dim json_Key As String
    Dim json_NextChar As String

    Set json_ParseObject = New Dictionary
    json_SkipSpaces json_String, json_Index
    If VBA.Mid$(json_String, json_Index, 1) <> "{" Then
        Err.Raise 10001, "JSONConverter", json_ParseErrorMessage(json_String, json_Index, "Expecting '{'")
    Else
        json_Index = json_Index + 1

        Do
            json_SkipSpaces json_String, json_Index
            If VBA.Mid$(json_String, json_Index, 1) = "}" Then
                json_Index = json_Index + 1
                Exit Function
            ElseIf VBA.Mid$(json_String, json_Index, 1) = "," Then
                json_Index = json_Index + 1
                json_SkipSpaces json_String, json_Index
            End If

            json_Key = json_ParseKey(json_String, json_Index)
            json_NextChar = json_Peek(json_String, json_Index)
            If json_NextChar = "[" Or json_NextChar = "{" Then
                Set json_ParseObject.item(json_Key) = json_ParseValue(json_String, json_Index)
            Else
                json_ParseObject.item(json_Key) = json_ParseValue(json_String, json_Index)
            End If
        Loop
    End If
End Function

Private Function json_ParseArray(json_String As String, ByRef json_Index As Long) As Collection
    Set json_ParseArray = New Collection

    json_SkipSpaces json_String, json_Index
    If VBA.Mid$(json_String, json_Index, 1) <> "[" Then
        Err.Raise 10001, "JSONConverter", json_ParseErrorMessage(json_String, json_Index, "Expecting '['")
    Else
        json_Index = json_Index + 1

        Do
            json_SkipSpaces json_String, json_Index
            If VBA.Mid$(json_String, json_Index, 1) = "]" Then
                json_Index = json_Index + 1
                Exit Function
            ElseIf VBA.Mid$(json_String, json_Index, 1) = "," Then
                json_Index = json_Index + 1
                json_SkipSpaces json_String, json_Index
            End If

            json_ParseArray.add json_ParseValue(json_String, json_Index)
        Loop
    End If
End Function

Private Function json_ParseValue(json_String As String, ByRef json_Index As Long) As Variant
    json_SkipSpaces json_String, json_Index
    Select Case VBA.Mid$(json_String, json_Index, 1)
    Case "{"
        Set json_ParseValue = json_ParseObject(json_String, json_Index)
    Case "["
        Set json_ParseValue = json_ParseArray(json_String, json_Index)
    Case """", "'"
        json_ParseValue = json_ParseString(json_String, json_Index)
    Case Else
        If VBA.Mid$(json_String, json_Index, 4) = "true" Then
            json_ParseValue = True
            json_Index = json_Index + 4
        ElseIf VBA.Mid$(json_String, json_Index, 5) = "false" Then
            json_ParseValue = False
            json_Index = json_Index + 5
        ElseIf VBA.Mid$(json_String, json_Index, 4) = "null" Then
            json_ParseValue = Null
            json_Index = json_Index + 4
        ElseIf VBA.InStr("+-0123456789", VBA.Mid$(json_String, json_Index, 1)) Then
            json_ParseValue = json_ParseNumber(json_String, json_Index)
        Else
            Err.Raise 10001, "JSONConverter", json_ParseErrorMessage(json_String, json_Index, "Expecting 'STRING', 'NUMBER', null, true, false, '{', or '['")
        End If
    End Select
End Function

Private Function json_ParseString(json_String As String, ByRef json_Index As Long) As String
    Dim json_Quote As String
    Dim json_Char As String
    Dim json_Code As String
    Dim json_buffer As String
    Dim json_BufferPosition As Long
    Dim json_BufferLength As Long

    json_SkipSpaces json_String, json_Index

    ' Store opening quote to look for matching closing quote
    json_Quote = VBA.Mid$(json_String, json_Index, 1)
    json_Index = json_Index + 1

    Do While json_Index > 0 And json_Index <= Len(json_String)
        json_Char = VBA.Mid$(json_String, json_Index, 1)

        Select Case json_Char
        Case "\"
            ' Escaped string, \\, or \/
            json_Index = json_Index + 1
            json_Char = VBA.Mid$(json_String, json_Index, 1)

            Select Case json_Char
            Case """", "\", "/", "'"
                json_BufferAppend json_buffer, json_Char, json_BufferPosition, json_BufferLength
                json_Index = json_Index + 1
            Case "b"
                json_BufferAppend json_buffer, vbBack, json_BufferPosition, json_BufferLength
                json_Index = json_Index + 1
            Case "f"
                json_BufferAppend json_buffer, vbFormFeed, json_BufferPosition, json_BufferLength
                json_Index = json_Index + 1
            Case "n"
                json_BufferAppend json_buffer, vbCrLf, json_BufferPosition, json_BufferLength
                json_Index = json_Index + 1
            Case "r"
                json_BufferAppend json_buffer, vbCr, json_BufferPosition, json_BufferLength
                json_Index = json_Index + 1
            Case "t"
                json_BufferAppend json_buffer, vbTab, json_BufferPosition, json_BufferLength
                json_Index = json_Index + 1
            Case "u"
                ' Unicode character escape (e.g. \u00a9 = Copyright)
                json_Index = json_Index + 1
                json_Code = VBA.Mid$(json_String, json_Index, 4)
                json_BufferAppend json_buffer, VBA.ChrW(VBA.Val("&h" + json_Code)), json_BufferPosition, json_BufferLength
                json_Index = json_Index + 4
            End Select
        Case json_Quote
            json_ParseString = json_BufferToString(json_buffer, json_BufferPosition, json_BufferLength)
            json_Index = json_Index + 1
            Exit Function
        Case Else
            json_BufferAppend json_buffer, json_Char, json_BufferPosition, json_BufferLength
            json_Index = json_Index + 1
        End Select
    Loop
End Function

Private Function json_ParseNumber(json_String As String, ByRef json_Index As Long) As Variant
    Dim json_Char As String
    Dim json_Value As String
    Dim json_IsLargeNumber As Boolean

    json_SkipSpaces json_String, json_Index

    Do While json_Index > 0 And json_Index <= Len(json_String)
        json_Char = VBA.Mid$(json_String, json_Index, 1)

        If VBA.InStr("+-0123456789.eE", json_Char) Then
            ' Unlikely to have massive number, so use simple append rather than buffer here
            json_Value = json_Value & json_Char
            json_Index = json_Index + 1
        Else
            ' Excel only stores 15 significant digits, so any numbers larger than that are truncated
            ' This can lead to issues when BIGINT's are used (e.g. for Ids or Credit Cards), as they will be invalid above 15 digits
            ' See: http://support.microsoft.com/kb/269370
            '
            ' Fix: Parse -> String, Convert -> String longer than 15/16 characters containing only numbers and decimal points -> Number
            ' (decimal doesn't factor into significant digit count, so if present check for 15 digits + decimal = 16)
            json_IsLargeNumber = IIf(InStr(json_Value, "."), Len(json_Value) >= 17, Len(json_Value) >= 16)
            If Not JsonOptions.UseDoubleForLargeNumbers And json_IsLargeNumber Then
                json_ParseNumber = json_Value
            Else
                ' VBA.Val does not use regional settings, so guard for comma is not needed
                json_ParseNumber = VBA.Val(json_Value)
            End If
            Exit Function
        End If
    Loop
End Function

Private Function json_ParseKey(json_String As String, ByRef json_Index As Long) As String
    ' Parse key with single or double quotes
    If VBA.Mid$(json_String, json_Index, 1) = """" Or VBA.Mid$(json_String, json_Index, 1) = "'" Then
        json_ParseKey = json_ParseString(json_String, json_Index)
    ElseIf JsonOptions.AllowUnquotedKeys Then
        Dim json_Char As String
        Do While json_Index > 0 And json_Index <= Len(json_String)
            json_Char = VBA.Mid$(json_String, json_Index, 1)
            If (json_Char <> " ") And (json_Char <> ":") Then
                json_ParseKey = json_ParseKey & json_Char
                json_Index = json_Index + 1
            Else
                Exit Do
            End If
        Loop
    Else
        Err.Raise 10001, "JSONConverter", json_ParseErrorMessage(json_String, json_Index, "Expecting '""' or '''")
    End If

    ' Check for colon and skip if present or throw if not present
    json_SkipSpaces json_String, json_Index
    If VBA.Mid$(json_String, json_Index, 1) <> ":" Then
        Err.Raise 10001, "JSONConverter", json_ParseErrorMessage(json_String, json_Index, "Expecting ':'")
    Else
        json_Index = json_Index + 1
    End If
End Function

Private Function json_IsUndefined(ByVal json_Value As Variant) As Boolean
    ' Empty / Nothing -> undefined
    Select Case VBA.VarType(json_Value)
    Case VBA.vbEmpty
        json_IsUndefined = True
    Case VBA.vbObject
        Select Case VBA.TypeName(json_Value)
        Case "Empty", "Nothing"
            json_IsUndefined = True
        End Select
    End Select
End Function

Private Function json_Encode(ByVal json_Text As Variant) As String
    ' Reference: http://www.ietf.org/rfc/rfc4627.txt
    ' Escape: ", \, /, backspace, form feed, line feed, carriage return, tab
    Dim json_Index As Long
    Dim json_Char As String
    Dim json_AscCode As Long
    Dim json_buffer As String
    Dim json_BufferPosition As Long
    Dim json_BufferLength As Long

    For json_Index = 1 To VBA.Len(json_Text)
        json_Char = VBA.Mid$(json_Text, json_Index, 1)
        json_AscCode = VBA.AscW(json_Char)

        ' When AscW returns a negative number, it returns the twos complement form of that number.
        ' To convert the twos complement notation into normal binary notation, add 0xFFF to the return result.
        ' https://support.microsoft.com/en-us/kb/272138
        If json_AscCode < 0 Then
            json_AscCode = json_AscCode + 65536
        End If

        ' From spec, ", \, and control characters must be escaped (solidus is optional)

        Select Case json_AscCode
        Case 34
            ' " -> 34 -> \"
            json_Char = "\"""
        Case 92
            ' \ -> 92 -> \\
            json_Char = "\\"
        Case 47
            ' / -> 47 -> \/ (optional)
            If JsonOptions.EscapeSolidus Then
                json_Char = "\/"
            End If
        Case 8
            ' backspace -> 8 -> \b
            json_Char = "\b"
        Case 12
            ' form feed -> 12 -> \f
            json_Char = "\f"
        Case 10
            ' line feed -> 10 -> \n
            json_Char = "\n"
        Case 13
            ' carriage return -> 13 -> \r
            json_Char = "\r"
        Case 9
            ' tab -> 9 -> \t
            json_Char = "\t"
        Case 0 To 31, 127 To 65535
            ' Non-ascii characters -> convert to 4-digit hex
            json_Char = "\u" & VBA.Right$("0000" & VBA.Hex$(json_AscCode), 4)
        End Select

        json_BufferAppend json_buffer, json_Char, json_BufferPosition, json_BufferLength
    Next json_Index

    json_Encode = json_BufferToString(json_buffer, json_BufferPosition, json_BufferLength)
End Function

Private Function json_Peek(json_String As String, ByVal json_Index As Long, Optional json_NumberOfCharacters As Long = 1) As String
    ' "Peek" at the next number of characters without incrementing json_Index (ByVal instead of ByRef)
    json_SkipSpaces json_String, json_Index
    json_Peek = VBA.Mid$(json_String, json_Index, json_NumberOfCharacters)
End Function

Private Sub json_SkipSpaces(json_String As String, ByRef json_Index As Long)
    ' Increment index to skip over spaces
    Do While json_Index > 0 And json_Index <= VBA.Len(json_String) And VBA.Mid$(json_String, json_Index, 1) = " "
        json_Index = json_Index + 1
    Loop
End Sub

Private Function json_StringIsLargeNumber(json_String As Variant) As Boolean
    ' Check if the given string is considered a "large number"
    ' (See json_ParseNumber)

    Dim json_Length As Long
    Dim json_CharIndex As Long
    json_Length = VBA.Len(json_String)

    ' Length with be at least 16 characters and assume will be less than 100 characters
    If json_Length >= 16 And json_Length <= 100 Then
        Dim json_CharCode As String
        Dim json_Index As Long

        json_StringIsLargeNumber = True

        For json_CharIndex = 1 To json_Length
            json_CharCode = VBA.Asc(VBA.Mid$(json_String, json_CharIndex, 1))
            Select Case json_CharCode
            ' Look for .|0-9|E|e
            Case 46, 48 To 57, 69, 101
                ' Continue through characters
            Case Else
                json_StringIsLargeNumber = False
                Exit Function
            End Select
        Next json_CharIndex
    End If
End Function

Private Function json_ParseErrorMessage(json_String As String, ByRef json_Index As Long, ErrorMessage As String)
    ' Provide detailed parse error message, including details of where and what occurred
    '
    ' Example:
    ' Error parsing JSON:
    ' {"abcde":True}
    '          ^
    ' Expecting 'STRING', 'NUMBER', null, true, false, '{', or '['

    Dim json_StartIndex As Long
    Dim json_StopIndex As Long

    ' Include 10 characters before and after error (if possible)
    json_StartIndex = json_Index - 10
    json_StopIndex = json_Index + 10
    If json_StartIndex <= 0 Then
        json_StartIndex = 1
    End If
    If json_StopIndex > VBA.Len(json_String) Then
        json_StopIndex = VBA.Len(json_String)
    End If

    json_ParseErrorMessage = "Error parsing JSON:" & VBA.vbNewLine & _
                             VBA.Mid$(json_String, json_StartIndex, json_StopIndex - json_StartIndex + 1) & VBA.vbNewLine & _
                             VBA.Space$(json_Index - json_StartIndex) & "^" & VBA.vbNewLine & _
                             ErrorMessage
End Function

Private Sub json_BufferAppend(ByRef json_buffer As String, _
                              ByRef json_Append As Variant, _
                              ByRef json_BufferPosition As Long, _
                              ByRef json_BufferLength As Long)
#If Mac Then
    json_buffer = json_buffer & json_Append
#Else
    ' VBA can be slow to append strings due to allocating a new string for each append
    ' Instead of using the traditional append, allocate a large empty string and then copy string at append position
    '
    ' Example:
    ' Buffer: "abc  "
    ' Append: "def"
    ' Buffer Position: 3
    ' Buffer Length: 5
    '
    ' Buffer position + Append length > Buffer length -> Append chunk of blank space to buffer
    ' Buffer: "abc       "
    ' Buffer Length: 10
    '
    ' Copy memory for "def" into buffer at position 3 (0-based)
    ' Buffer: "abcdef    "
    '
    ' Approach based on cStringBuilder from vbAccelerator
    ' http://www.vbaccelerator.com/home/VB/Code/Techniques/RunTime_Debug_Tracing/VB6_Tracer_Utility_zip_cStringBuilder_cls.asp

    Dim json_AppendLength As Long
    Dim json_LengthPlusPosition As Long

    json_AppendLength = VBA.LenB(json_Append)
    json_LengthPlusPosition = json_AppendLength + json_BufferPosition

    If json_LengthPlusPosition > json_BufferLength Then
        ' Appending would overflow buffer, add chunks until buffer is long enough
        Dim json_TemporaryLength As Long

        json_TemporaryLength = json_BufferLength
        Do While json_TemporaryLength < json_LengthPlusPosition
            ' Initially, initialize string with 255 characters,
            ' then add large chunks (8192) after that
            '
            ' Size: # Characters x 2 bytes / character
            If json_TemporaryLength = 0 Then
                json_TemporaryLength = json_TemporaryLength + 510
            Else
                json_TemporaryLength = json_TemporaryLength + 16384
            End If
        Loop

        json_buffer = json_buffer & VBA.Space$((json_TemporaryLength - json_BufferLength) \ 2)
        json_BufferLength = json_TemporaryLength
    End If

    ' Copy memory from append to buffer at buffer position
    json_CopyMemory ByVal json_UnsignedAdd(StrPtr(json_buffer), _
                    json_BufferPosition), _
                    ByVal StrPtr(json_Append), _
                    json_AppendLength

    json_BufferPosition = json_BufferPosition + json_AppendLength
#End If
End Sub

Private Function json_BufferToString(ByRef json_buffer As String, ByVal json_BufferPosition As Long, ByVal json_BufferLength As Long) As String
#If Mac Then
    json_BufferToString = json_buffer
#Else
    If json_BufferPosition > 0 Then
        json_BufferToString = VBA.Left$(json_buffer, json_BufferPosition \ 2)
    End If
#End If
End Function

#If VBA7 Then
Private Function json_UnsignedAdd(json_Start As LongPtr, json_Increment As Long) As LongPtr
#Else
Private Function json_UnsignedAdd(json_Start As Long, json_Increment As Long) As Long
#End If

    If json_Start And &H80000000 Then
        json_UnsignedAdd = json_Start + json_Increment
    ElseIf (json_Start Or &H80000000) < -json_Increment Then
        json_UnsignedAdd = json_Start + json_Increment
    Else
        json_UnsignedAdd = (json_Start + &H80000000) + (json_Increment + &H80000000)
    End If
End Function

''
' VBA-UTC v1.0.3
' (c) Tim Hall - https://github.com/VBA-tools/VBA-UtcConverter
'
' UTC/ISO 8601 Converter for VBA
'
' Errors:
' 10011 - UTC parsing error
' 10012 - UTC conversion error
' 10013 - ISO 8601 parsing error
' 10014 - ISO 8601 conversion error
'
' @module UtcConverter
' @author tim.hall.engr@gmail.com
' @license MIT (http://www.opensource.org/licenses/mit-license.php)
'' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ '

' (Declarations moved to top)

' ============================================= '
' Public Methods
' ============================================= '

''
' Parse UTC date to local date
'
' @method ParseUtc
' @param {Date} UtcDate
' @return {Date} Local date
' @throws 10011 - UTC parsing error
''
Public Function ParseUtc(utc_UtcDate As Date) As Date
    On Error GoTo utc_ErrorHandling

#If Mac Then
    ParseUtc = utc_ConvertDate(utc_UtcDate)
#Else
    Dim utc_TimeZoneInfo As utc_TIME_ZONE_INFORMATION
    Dim utc_LocalDate As utc_SYSTEMTIME

    utc_GetTimeZoneInformation utc_TimeZoneInfo
    utc_SystemTimeToTzSpecificLocalTime utc_TimeZoneInfo, utc_DateToSystemTime(utc_UtcDate), utc_LocalDate

    ParseUtc = utc_SystemTimeToDate(utc_LocalDate)
#End If

    Exit Function

utc_ErrorHandling:
    Err.Raise 10011, "UtcConverter.ParseUtc", "UTC parsing error: " & Err.Number & " - " & Err.Description
End Function

''
' Convert local date to UTC date
'
' @method ConvertToUrc
' @param {Date} utc_LocalDate
' @return {Date} UTC date
' @throws 10012 - UTC conversion error
''
Public Function ConvertToUtc(utc_LocalDate As Date) As Date
    On Error GoTo utc_ErrorHandling

#If Mac Then
    ConvertToUtc = utc_ConvertDate(utc_LocalDate, utc_ConvertToUtc:=True)
#Else
    Dim utc_TimeZoneInfo As utc_TIME_ZONE_INFORMATION
    Dim utc_UtcDate As utc_SYSTEMTIME

    utc_GetTimeZoneInformation utc_TimeZoneInfo
    utc_TzSpecificLocalTimeToSystemTime utc_TimeZoneInfo, utc_DateToSystemTime(utc_LocalDate), utc_UtcDate

    ConvertToUtc = utc_SystemTimeToDate(utc_UtcDate)
#End If

    Exit Function

utc_ErrorHandling:
    Err.Raise 10012, "UtcConverter.ConvertToUtc", "UTC conversion error: " & Err.Number & " - " & Err.Description
End Function

''
' Parse ISO 8601 date string to local date
'
' @method ParseIso
' @param {Date} utc_IsoString
' @return {Date} Local date
' @throws 10013 - ISO 8601 parsing error
''
Public Function ParseIso(utc_IsoString As String) As Date
    On Error GoTo utc_ErrorHandling

    Dim utc_Parts() As String
    Dim utc_DateParts() As String
    Dim utc_TimeParts() As String
    Dim utc_OffsetIndex As Long
    Dim utc_HasOffset As Boolean
    Dim utc_NegativeOffset As Boolean
    Dim utc_OffsetParts() As String
    Dim utc_Offset As Date

    utc_Parts = VBA.Split(utc_IsoString, "T")
    utc_DateParts = VBA.Split(utc_Parts(0), "-")
    ParseIso = VBA.DateSerial(VBA.CInt(utc_DateParts(0)), VBA.CInt(utc_DateParts(1)), VBA.CInt(utc_DateParts(2)))

    If UBound(utc_Parts) > 0 Then
        If VBA.InStr(utc_Parts(1), "Z") Then
            utc_TimeParts = VBA.Split(VBA.Replace(utc_Parts(1), "Z", ""), ":")
        Else
            utc_OffsetIndex = VBA.InStr(1, utc_Parts(1), "+")
            If utc_OffsetIndex = 0 Then
                utc_NegativeOffset = True
                utc_OffsetIndex = VBA.InStr(1, utc_Parts(1), "-")
            End If

            If utc_OffsetIndex > 0 Then
                utc_HasOffset = True
                utc_TimeParts = VBA.Split(VBA.Left$(utc_Parts(1), utc_OffsetIndex - 1), ":")
                utc_OffsetParts = VBA.Split(VBA.Right$(utc_Parts(1), Len(utc_Parts(1)) - utc_OffsetIndex), ":")

                Select Case UBound(utc_OffsetParts)
                Case 0
                    utc_Offset = TimeSerial(VBA.CInt(utc_OffsetParts(0)), 0, 0)
                Case 1
                    utc_Offset = TimeSerial(VBA.CInt(utc_OffsetParts(0)), VBA.CInt(utc_OffsetParts(1)), 0)
                Case 2
                    ' VBA.Val does not use regional settings, use for seconds to avoid decimal/comma issues
                    utc_Offset = TimeSerial(VBA.CInt(utc_OffsetParts(0)), VBA.CInt(utc_OffsetParts(1)), Int(VBA.Val(utc_OffsetParts(2))))
                End Select

                If utc_NegativeOffset Then: utc_Offset = -utc_Offset
            Else
                utc_TimeParts = VBA.Split(utc_Parts(1), ":")
            End If
        End If

        Select Case UBound(utc_TimeParts)
        Case 0
            ParseIso = ParseIso + VBA.TimeSerial(VBA.CInt(utc_TimeParts(0)), 0, 0)
        Case 1
            ParseIso = ParseIso + VBA.TimeSerial(VBA.CInt(utc_TimeParts(0)), VBA.CInt(utc_TimeParts(1)), 0)
        Case 2
            ' VBA.Val does not use regional settings, use for seconds to avoid decimal/comma issues
            ParseIso = ParseIso + VBA.TimeSerial(VBA.CInt(utc_TimeParts(0)), VBA.CInt(utc_TimeParts(1)), Int(VBA.Val(utc_TimeParts(2))))
        End Select

        ParseIso = ParseUtc(ParseIso)

        If utc_HasOffset Then
            ParseIso = ParseIso + utc_Offset
        End If
    End If

    Exit Function

utc_ErrorHandling:
    Err.Raise 10013, "UtcConverter.ParseIso", "ISO 8601 parsing error for " & utc_IsoString & ": " & Err.Number & " - " & Err.Description
End Function

''
' Convert local date to ISO 8601 string
'
' @method ConvertToIso
' @param {Date} utc_LocalDate
' @return {Date} ISO 8601 string
' @throws 10014 - ISO 8601 conversion error
''
Public Function ConvertToIso(utc_LocalDate As Date) As String
    On Error GoTo utc_ErrorHandling

    ConvertToIso = VBA.Format$(ConvertToUtc(utc_LocalDate), "yyyy-mm-ddTHH:mm:ss.000Z")

    Exit Function

utc_ErrorHandling:
    Err.Raise 10014, "UtcConverter.ConvertToIso", "ISO 8601 conversion error: " & Err.Number & " - " & Err.Description
End Function

' ============================================= '
' Private Functions
' ============================================= '

#If Mac Then

Private Function utc_ConvertDate(utc_Value As Date, Optional utc_ConvertToUtc As Boolean = False) As Date
    Dim utc_ShellCommand As String
    Dim utc_Result As utc_ShellResult
    Dim utc_Parts() As String
    Dim utc_DateParts() As String
    Dim utc_TimeParts() As String

    If utc_ConvertToUtc Then
        utc_ShellCommand = "date -ur `date -jf '%Y-%m-%d %H:%M:%S' " & _
            "'" & VBA.Format$(utc_Value, "yyyy-mm-dd HH:mm:ss") & "' " & _
            " +'%s'` +'%Y-%m-%d %H:%M:%S'"
    Else
        utc_ShellCommand = "date -jf '%Y-%m-%d %H:%M:%S %z' " & _
            "'" & VBA.Format$(utc_Value, "yyyy-mm-dd HH:mm:ss") & " +0000' " & _
            "+'%Y-%m-%d %H:%M:%S'"
    End If

    utc_Result = utc_ExecuteInShell(utc_ShellCommand)

    If utc_Result.utc_Output = "" Then
        Err.Raise 10015, "UtcConverter.utc_ConvertDate", "'date' command failed"
    Else
        utc_Parts = Split(utc_Result.utc_Output, " ")
        utc_DateParts = Split(utc_Parts(0), "-")
        utc_TimeParts = Split(utc_Parts(1), ":")

        utc_ConvertDate = DateSerial(utc_DateParts(0), utc_DateParts(1), utc_DateParts(2)) + _
            TimeSerial(utc_TimeParts(0), utc_TimeParts(1), utc_TimeParts(2))
    End If
End Function

Private Function utc_ExecuteInShell(utc_ShellCommand As String) As utc_ShellResult
#If VBA7 Then
    Dim utc_File As LongPtr
    Dim utc_Read As LongPtr
#Else
    Dim utc_File As Long
    Dim utc_Read As Long
#End If

    Dim utc_Chunk As String

    On Error GoTo utc_ErrorHandling
    utc_File = utc_popen(utc_ShellCommand, "r")

    If utc_File = 0 Then: Exit Function

    Do While utc_feof(utc_File) = 0
        utc_Chunk = VBA.Space$(50)
        utc_Read = utc_fread(utc_Chunk, 1, Len(utc_Chunk) - 1, utc_File)
        If utc_Read > 0 Then
            utc_Chunk = VBA.Left$(utc_Chunk, utc_Read)
            utc_ExecuteInShell.utc_Output = utc_ExecuteInShell.utc_Output & utc_Chunk
        End If
    Loop

utc_ErrorHandling:
    utc_ExecuteInShell.utc_ExitCode = utc_pclose(utc_File)
End Function

#Else

Private Function utc_DateToSystemTime(utc_Value As Date) As utc_SYSTEMTIME
    utc_DateToSystemTime.utc_wYear = VBA.Year(utc_Value)
    utc_DateToSystemTime.utc_wMonth = VBA.Month(utc_Value)
    utc_DateToSystemTime.utc_wDay = VBA.Day(utc_Value)
    utc_DateToSystemTime.utc_wHour = VBA.Hour(utc_Value)
    utc_DateToSystemTime.utc_wMinute = VBA.Minute(utc_Value)
    utc_DateToSystemTime.utc_wSecond = VBA.Second(utc_Value)
    utc_DateToSystemTime.utc_wMilliseconds = 0
End Function

Private Function utc_SystemTimeToDate(utc_Value As utc_SYSTEMTIME) As Date
    utc_SystemTimeToDate = DateSerial(utc_Value.utc_wYear, utc_Value.utc_wMonth, utc_Value.utc_wDay) + _
        TimeSerial(utc_Value.utc_wHour, utc_Value.utc_wMinute, utc_Value.utc_wSecond)
End Function

#End If
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "aExcelApplication"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
'--------------------------------------------------
' Fa|fffd|ade Excel Application
'--------------------------------------------------
Private pApp As Application
Private pPile As Integer 'compteur d'empilement des demandes de freeze : on freeze |fffd| la premi|fffd|re demande uniquement, on d|fffd|freeze quand on revient |fffd| 0 dans la pile

Private Sub Class_Initialize()
    Set pApp = ThisWorkbook.Application
    pPile = 0
End Sub

'Relai
Public Property Get Engine() As Application
    Set Engine = pApp
End Property

'Gestion du freeze
Public Sub MuteOn()
    If pPile = 0 Then Freeze True
    pPile = pPile + 1
End Sub
Public Sub MuteOff()
    pPile = pPile - 1
    If pPile < 0 Then pPile = 0
    If pPile = 0 Then Freeze False
End Sub

Public Property Get isMuted() As Boolean
    isMuted = (pPile > 0)
End Property

Private Function Freeze(bValue As Boolean)
On Error Resume Next

    pApp.ScreenUpdating = Not bValue
    pApp.DisplayAlerts = Not bValue
    pApp.EnableEvents = Not bValue
    
    If pApp.Workbooks.count > 0 Then
        If bValue Then
            pApp.Calculation = xlCalculationManual
        Else
            pApp.Calculation = xlCalculationAutomatic
            
            pApp.CalculateFull
        End If
    End If
End Function



'Active ou d|fffd|sactive les macros Scribe install|fffd|es.
Public Function ToggleScribeAddin_Enabled(bEnabled As Boolean) As Boolean
On Error GoTo fin
    Dim i As Integer
    Dim sName As String
    
    MuteOn
    For i = 1 To pApp.AddIns.count
        sName = LCase(pApp.AddIns2.item(i).title)
         If (sName = "scribe" Or sName = "scribe_coeff" Or sName = "scribe_conv" Or sName = "scribe_poids" Or sName = "scribe_synthese") Then
            pApp.AddIns2.item(i).Installed = bEnabled
         End If
    Next
    
    ToggleScribeAddin_Enabled = True
    MuteOff
    Exit Function
fin:
    If Err > 0 Then MsgBox "Erreur lors de la d|fffd|sactivation des macros Scribe." & vbCrLf & Err.Description
    MuteOff

End Function

Public Function openWorkbook(sPath As String) As Excel.Workbook
    Set openWorkbook = pApp.Workbooks.Open(sPath)
End Function

'V|fffd|rifie par le nom du fichier excel si on en a d|fffd|j|fffd| un d'ouvert
Public Function hasWorkbookAlreadyLoaded(sName As String)
Dim oWk As Excel.Workbook

    For Each oWk In pApp.Workbooks
        If oWk.name = sName Then
            hasWorkbookAlreadyLoaded = True
            Exit Function
        End If
    Next
    
End Function

Public Sub autoRegister()
On Error GoTo fin

    Dim i As Integer
    Dim sName As String
    Dim oAddin As Excel.AddIn
    Dim oWk As Excel.Workbook
    
    MuteOn

    For i = 1 To pApp.AddIns.count
        sName = LCase(pApp.AddIns.item(i).title)
         If (sName = "connecteurexcel") Then
            If pApp.AddIns.item(i).Installed = False Then pApp.AddIns.item(i).Installed = True
            MuteOff
            Exit Sub
         End If
    Next
    
    'Pas trouv|fffd|
    If pApp.Workbooks.count = 0 Then Set oWk = pApp.Workbooks.add
    Set oAddin = pApp.AddIns.add(ThisWorkbook.FullName, False)
    If Not oAddin Is Nothing Then
        oAddin.Installed = True
    End If
    If Not oWk Is Nothing Then oWk.Close False
    'If Err Then MsgBox "Erreur lors du r|fffd|f|fffd|rencement de l'addin excel : " & Err.Description

fin:
    MuteOff

End Sub

Public Sub autoregisterAddin()
On Error GoTo fin
    Dim i As Integer
    Dim sName As String
    Dim oAddin As Excel.AddIn
    Dim oWk As Excel.Workbook
    
    MuteOn

    For i = 1 To pApp.COMAddIns.count
        sName = LCase(pApp.COMAddIns.item(i).progID)
        If (sName = "edisys.iulm.excel") Then
            If pApp.COMAddIns.item(i).Connect = False Then pApp.COMAddIns.item(i).Connect = True
            If Not pApp.COMAddIns.item(i).Connect Then
                'MsgBox "Impossible d'activer l'addin ConnecteurExcel.IULM." & vbCrLf & "Contactez le support SPIGAO."
            End If
            MuteOff
            Exit Sub
        End If
    Next
    
    'Pas trouv|fffd|
    'MsgBox "L'addin ConnecteurExcel.IULM n'est pas install|fffd| sur votre poste. Veuillez relancer l'installation."
fin:
    'If Err Then MsgBox "Erreur lors de l'enregistrement de l'addin ConnecteurExcel.IULM. " & Err.Description
    MuteOff
End Sub



Attribute VB_Name = "aExcelListener"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private WithEvents pApp As Application
Attribute pApp.VB_VarHelpID = -1
Private pIsPaused As Boolean
Private pLastSheetName As String
Private pLastConversionName As String

Private Sub Class_Initialize()
    Set pApp = sgExcelApplication.Engine
    pIsPaused = False
End Sub

Private Sub pApp_SheetActivate(ByVal sh As Object)
    On Error Resume Next
    
    If pIsPaused Then Exit Sub
    If sh.name = pLastSheetName Then Exit Sub
    LoadStudy sh
    ActualiseRibbonDevis
    pLastSheetName = ""
End Sub

Public Property Let PauseListener(sValue As Boolean)
    pIsPaused = sValue
End Property

Private Sub LoadStudy(sh As Excel.Worksheet)
On Error Resume Next

Dim oEs As aExcelSheet

    
    
    
    Set oEs = sgExcelSheetBuilder.buildByWorksheet(sh)
    If oEs Is Nothing Then
        Exit Sub
    End If
    
    Set gCurrentStudy = Nothing
    Set gCurrentPlanning = Nothing
    
    'On v|fffd|rifie si on est sur une |fffd|tude ancien format
    ' et que la d|fffd|tection ancien format est active
    ' et qu'on a pas fait d|fffd|ju|fffd| la demande |fffd| l'utilisateur...
    If oEs.parent.IsSpigaoOldStudyWorkbook _
        And Not sgSpigaoConfiguration.OldDieVersionDetection_Disabled _
        And oEs.parent.Workbook.FullName <> pLastConversionName Then
        pLastConversionName = oEs.parent.Workbook.FullName
        If MsgBox("Ce fichier est |fffd| l'ancien format Spigao." _
                & vbCrLf & "Il est recommand|fffd| de le convertir au nouveau format." _
                & vbCrLf & "Confirmez-vous la conversion ?", vbYesNo) = vbYes Then
            
            oEs.Sheet.visible = xlSheetHidden
            mOpenDieByConvertingOldXls
        End If
        Exit Sub
    ElseIf oEs.IsSpigaoStudySheet Then
        Set gCurrentStudy = sgStudyBuilder.buildByWorksheet(sh)
        'check si les r|fffd|pertoires ont boug|fffd|
        gCurrentStudy.activeSS.ES.IsListened = True
        Exit Sub
    End If
    
    'On v|fffd|rifie si on est sur un planning
    If oEs.IsSpigaoPlanningSheet Then
        
        Set gCurrentPlanning = sgPlanningBuilder.buildByWorksheet(oEs)
        gCurrentPlanning.sh.IsListened = True

    End If
    
    
fin:
    'IsLoadingstudy = False
End Sub



Private Sub pApp_WorkbookActivate(ByVal wb As Workbook)
On Error Resume Next
Dim mysh As Worksheet

    If pIsPaused Then Exit Sub
    If wb.activeSheet.name = pLastSheetName Then Exit Sub
    Set mysh = wb.activeSheet
    LoadStudy mysh

    ActualiseRibbonDevis
    pLastSheetName = ""
End Sub

Private Sub pApp_WorkbookBeforeClose(ByVal wb As Workbook, Cancel As Boolean)
On Error Resume Next
    If pIsPaused Then Exit Sub
    Set gCurrentStudy = Nothing
    ActualiseRibbonDevis
End Sub

Private Sub pApp_WorkbookOpen(ByVal wb As Workbook)
On Error Resume Next
Dim mysh As Worksheet

    If pIsPaused Then Exit Sub
    Set mysh = wb.activeSheet
    LoadStudy mysh
    pLastSheetName = mysh.name
    ActualiseRibbonDevis
End Sub

Attribute VB_Name = "aExcelRange"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private pAddress As String
Private pValue As Variant
Private pFormula As String
Private pFormulaLocal As String
Private pOldFormulaLocal As String
Private pOldValue As Variant
Private pOldFormula As String
Private pComment As String
Private pRow As Long
Private pColumn As Integer
Private pRg As Excel.range

Private Sub loadByRange()

    If pRg.Cells.count = 1 Then
        If Not pRg.comment Is Nothing Then
            pComment = pRg.comment.Text
        End If
        
        If pComment <> "" Then
            If Left(pComment, 1) = "=" Then
                pOldFormulaLocal = pComment
                pOldFormula = pComment
                pOldValue = Null
            Else
                pOldFormula = ""
                pOldFormulaLocal = ""
                pOldValue = pComment
            End If
        End If
        
        pFormula = pRg.formula
        pFormulaLocal = pRg.formulaLocal
        pValue = pRg.value
    End If
    pAddress = pRg.address(False, False)
    pRow = pRg.row
    pColumn = pRg.column
End Sub


Public Property Get address() As String
    address = pAddress
End Property
'Public Property Let address(sValue As String)
'    pAddress = sValue
'End Property
Public Property Get formula() As String
    formula = pFormula
End Property
Public Property Get formulaLocal() As String
    formulaLocal = pFormulaLocal
End Property
'Public Property Let formula(sValue As String)
'    pFormula = sValue
'End Property
Public Property Get value() As Variant
    value = pValue
End Property
'Public Property Let value(vValue As Variant)
'    pValue = vValue
'End Property
Public Property Get oldFormula() As String
    oldFormula = pOldFormula
End Property
Public Property Get oldFormulaLocal() As String
    oldFormulaLocal = pOldFormulaLocal
End Property
'Public Property Let oldFormula(sValue As String)
'    pOldFormula = sValue
'End Property
Public Property Get oldValue() As Variant
    oldValue = pOldValue
End Property
'Public Property Let oldValue(vValue As Variant)
'    pOldValue = vValue
'End Property

Public Property Get comment() As String
    comment = pComment
End Property
'Public Property Let comment(sValue As String)
'    pComment = sValue
'End Property
Public Property Get row() As Long
    row = pRow
End Property
'Public Property Let row(iValue As Long)
'    pRow = iValue
'End Property
Public Property Get column() As Integer
    column = pColumn
End Property
'Public Property Let column(iValue As Integer)
'    pColumn = iValue
'End Property
Public Property Get hasFormula() As Boolean
    hasFormula = (Left(pFormula, 1) = "=")
End Property
Public Property Get range() As Excel.range
    Set range = pRg
End Property
Public Property Set range(oRg As Excel.range)
    Set pRg = oRg
    loadByRange

End Property



'------------------------------------------------------------------
' Modif d'une cellule pour ajouter un commentaire et la marquer en rouge
Public Sub trackChange(oOldER As aExcelRange)
'Changement de formule

    If hasFormula Then
        If pFormulaLocal = oOldER.formulaLocal Then
            CleanChange
        Else
            markChange oOldER.formulaLocal
        End If
    Else
        If pValue = oOldER.value Then
            CleanChange
        Else
            If oOldER.hasFormula Then
                markChange oOldER.formulaLocal
            Else
                markChange oOldER.value
            End If
        End If
    End If
    loadByRange
End Sub
Private Sub markChange(sComment As String)
    If Not pRg.comment Is Nothing Then
        pRg.comment.delete
    End If
    pRg.AddComment sComment
    pRg.Font.ColorIndex = 3
    
    loadByRange
End Sub
Private Sub CleanChange()
    If Not pRg.comment Is Nothing Then
        pRg.comment.delete
    End If
    pRg.Font.ColorIndex = xlAutomatic
    loadByRange
End Sub

'format sp|fffd|cial des cellules poids des prix
Public Sub applyPriceStrengthFormat()
On Error Resume Next
Dim oDatabar As Databar
    #If VBA7 Then
        Set oDatabar = pRg.FormatConditions.AddDatabar
        With oDatabar
            .ShowValue = True
            .SetFirstPriority
            .MinPoint.Modify newtype:=xlConditionValueNumber, newvalue:=0
            .MaxPoint.Modify newtype:=xlConditionValueNumber, newvalue:=1
            .BarColor.Color = 5920255
            .BarColor.TintAndShade = 0
            .BarFillType = xlDataBarFillGradient
            .Direction = xlContext
            .NegativeBarFormat.ColorType = xlDataBarColor
            .BarBorder.type = xlDataBarBorderSolid
            .NegativeBarFormat.BorderColorType = xlDataBarColor
            .AxisPosition = xlDataBarAxisAutomatic
            .AxisColor.Color = 0
            .AxisColor.TintAndShade = 0
            .NegativeBarFormat.Color.Color = 255
            .NegativeBarFormat.Color.TintAndShade = 0
            .NegativeBarFormat.BorderColor.Color = 255
            .NegativeBarFormat.BorderColor.TintAndShade = 0
        End With
    #End If
End Sub
Public Sub resetFormat()
On Error Resume Next
Dim i As Integer

    While pRg.Cells.FormatConditions.count > 0
        pRg.Cells.FormatConditions(1).delete
    Wend

End Sub


'Remplacement
Public Function replaceIn(sOld As String, sNew As String)
Dim oCell As range

    Set oCell = pRg.Find(sOld)
    While Not oCell Is Nothing
        
        oCell.formula = Replace(oCell.formula, sOld, sNew)
        Set oCell = pRg.Find(sOld)
    Wend
End Function
'Cas sp|fffd|cial #FORMULAMT.XX#
Public Sub replaceInTranspose(sPattern As String, sFormula As String, iColRef As Integer)
Dim oCell As range
Dim sOld As String
Dim sCompletePattern As String
Dim sColDest As String
Dim sNew As String
Dim sColRef As String

    sColRef = Chr(64 + iColRef)
    Set oCell = pRg.Find(sPattern)
    While Not oCell Is Nothing
        sCompletePattern = Replace(oCell.formula, "#", "")
        sColDest = Mid(sCompletePattern, InStr(sCompletePattern, ".") + 1)
        sNew = transposeExcelFormula(sFormula, sColRef, sColDest)
        oCell.formula = sNew
        Set oCell = pRg.Find(sPattern)
    Wend


End Sub


Public Sub replaceInLinks(sParam As String, sNewUrl As String)
Dim oLink As Hyperlink
Dim i As Integer

    For Each oLink In pRg.Hyperlinks()
        If InStr(LCase(oLink.address), LCase("http://" & sParam)) > 0 Then
            oLink.address = sNewUrl
        End If
    Next
End Sub

Public Function findcol(sSearch As String) As Integer
    Dim oCell As range
    Set oCell = pRg.Find(sSearch)
    If Not (oCell Is Nothing) Then
        findcol = oCell.column
    End If
End Function

Public Function contains(sSearch As String) As Boolean
    Dim oCell As range
    Set oCell = pRg.Find(sSearch)
    contains = Not (oCell Is Nothing)
End Function
Public Function getRowByTag(stag As String) As Long

    Dim oCell As range
    Set oCell = pRg.Find(stag)
    
    If Not oCell Is Nothing Then getRowByTag = oCell.row
    
End Function
Attribute VB_Name = "aExcelRangeBuilder"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Public Function byRange(oRg As Excel.range) As aExcelRange
'Todo : l'utilisation du commentaire pour stocker l'ancienne valeur n'est pas tr|fffd|s fiable. A revoir.
Dim oER As aExcelRange
    
    Set oER = New aExcelRange
    Set oER.range = oRg
    
    Set byRange = oER

    
End Function

Public Function byAddress(oEs As aExcelSheet, sAddress As String) As aExcelRange
Dim oER As aExcelRange
    
    Set oER = New aExcelRange
    Set oER.range = oEs.Sheet.range(sAddress)
    
    Set byAddress = oER
    
End Function

Public Function byCoords(oEs As aExcelSheet, irow As Long, iCol As Integer)
    Dim oER As aExcelRange
    
    Set oER = New aExcelRange
    Set oER.range = oEs.Sheet.Cells(irow, iCol)
    
    Set byCoords = oER
End Function

Public Function clone(oER As aExcelRange) As aExcelRange
Dim oERclone As aExcelRange
    
    Set oERclone = New aExcelRange
    Set oERclone.range = oER.range
    
    Set clone = oERclone

End Function
Attribute VB_Name = "aExcelSheet"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
'---------------------------------------------------------------------------
' Fa|fffd|ade de gestion des feuilles excel
'---------------------------------------------------------------------------
Private WithEvents pSh As Excel.Worksheet
Attribute pSh.VB_VarHelpID = -1
Private pIsListenerActive As Boolean
Private pOldRowsCount As Long

Private pDicER As Dictionary

Public Event ESChanged(oREOld As aExcelRange, oRENew As aExcelRange, ByRef bAllowed)

Private pRelatedStudySheet As iRelatedItem
Private pParent As aExcelWorkBook

Private pStopEventActivated As Boolean
Private pStopEventDeactivated As Boolean


Public Property Set parent(oEw As aExcelWorkBook)
    Set pParent = oEw
End Property
Public Property Get parent() As aExcelWorkBook

    Set parent = pParent

End Property
Public Property Set Sheet(osh As Excel.Worksheet)
    Set pSh = osh
    If Not pSh Is Nothing Then pOldRowsCount = osh.usedRange.Rows.count
End Property
Public Property Get Sheet() As Excel.Worksheet
    Set Sheet = pSh
End Property
Public Property Get sheetName() As String
    If Not pSh Is Nothing Then sheetName = pSh.name
End Property
Public Property Let sheetName(sName As String)
    If Not pSh Is Nothing Then pSh.name = sName
End Property
Public Property Set RelatedStudySheet(oRI As iRelatedItem)
    Set pRelatedStudySheet = oRI
End Property


'V|fffd|rifie l'existance d'un range
Public Function cellExists(sAddress As String) As Boolean
On Error GoTo fin
    cellExists = False
    If Not pSh.range(sAddress) Is Nothing Then cellExists = True
fin:
    If Err Then
        Err.clear
        cellExists = False
    End If
End Function


'Renvoit le num|fffd|ro de colonne |fffd| partir d'un range nomm|fffd|
Public Function getColByRangeName(sRangeName As String) As Integer
On Error Resume Next
    getColByRangeName = 0
    If cellExists(sRangeName) Then getColByRangeName = pSh.range(sRangeName).column
End Function

'Marque un nom pour une colonne (utilis|fffd| par le configurator)
Public Function setRangeNameByCoords(sName As String, irow As Long, iCol As Integer)
    If irow = 0 And iCol = 0 Then
        pParent.deleteName sName
    ElseIf iCol > 0 And irow = 0 Then
        pParent.addName sName, pSh.Columns(iCol)
    ElseIf irow > 0 And iCol = 0 Then
        pParent.addName sName, pSh.Rows(irow)
    Else
        pParent.addName sName, pSh.Cells(irow, iCol).range
    End If
End Function
Public Function setRangeNameByAddress(sName As String, sAddress As String)
    If cellExists(sAddress) Then
        pParent.addName sName, pSh.range(sAddress)
    Else
        pParent.deleteName sName
    End If
End Function
Public Function deleteRangeName(sName As String)
    pParent.deleteName sName
End Function

'Renvoit l'adresse d'une cellule
Public Function getAddressByRangeName(sRangeName As String) As String
On Error Resume Next
    getAddressByRangeName = ""
    If cellExists(sRangeName) Then getAddressByRangeName = pSh.range(sRangeName).address
End Function
Public Function getAddressByCoord(irow As Long, iCol As Integer) As String
On Error Resume Next
    If irow > 0 And iCol > 0 Then
        getAddressByCoord = pSh.Cells(irow, iCol).address(False, False)
    ElseIf irow = 0 Then
        getAddressByCoord = pSh.Columns(iCol).address(False, False)
    ElseIf iCol = 0 Then
        getAddressByCoord = pSh.Rows(irow).address(False, False)
    End If
End Function
'Renvoit le num|fffd|ro de ligne
Public Function getRowByRangeName(sRangeName As String) As Integer
On Error Resume Next
    getRowByRangeName = 0
    If cellExists(sRangeName) Then getRowByRangeName = pSh.range(sRangeName).row
End Function
'Renvoit le nom d'une plage
Public Function getRangeNameByAddress(sAddress As String)
On Error GoTo fin
    getRangeNameByAddress = ""
    getRangeNameByAddress = pSh.range(sAddress).name.name
    'on enl|fffd|ve le nom de la feuille
    If InStr(getRangeNameByAddress, "!") > 0 Then
        getRangeNameByAddress = Mid(getRangeNameByAddress, InStrRev(getRangeNameByAddress, "!") + 1)
    End If

fin:
    If Err Then getRangeNameByAddress = ""

End Function
Public Function getRangeNameByCoord(irow As Long, iCol As Integer)
On Error GoTo fin
    getRangeNameByCoord = ""
    getRangeNameByCoord = pSh.range(getAddressByCoord(irow, iCol)).name.name
    'on enl|fffd|ve le nom de la feuille
    If InStr(getRangeNameByCoord, "!") > 0 Then
        getRangeNameByCoord = Mid(getRangeNameByCoord, InStrRev(getRangeNameByCoord, "!") + 1)
    End If

fin:
    If Err Then getRangeNameByCoord = ""

End Function

Public Property Get maxRow() As Long
    maxRow = pSh.usedRange.Rows.count
End Property
'----------------------------------------------------------
' gestion des properties sheet
'----------------------------------------------------------
Public Sub SetBooleanProperty(sName As String, bValue As Boolean)
On Error Resume Next
Dim oProp As CustomProperty

    Set oProp = getProperty(sName)
    If oProp Is Nothing Then
        pSh.CustomProperties.add sName, bValue
    Else
        oProp.value = bValue
    End If
End Sub

Public Function getBooleanProperty(sName As String, Optional bDefaultValue As Boolean = False) As Boolean
On Error Resume Next
Dim oProp As CustomProperty

    Set oProp = getProperty(sName)
    If oProp Is Nothing Then
        getBooleanProperty = bDefaultValue
    Else
        getBooleanProperty = oProp.value
    End If
End Function

Public Function getPropertyValue(sName As String) As String
On Error GoTo fin
Dim oCP As CustomProperty

    getPropertyValue = ""
    Set oCP = getProperty(sName)
    If oCP Is Nothing Then
        getPropertyValue = ""
    Else
        getPropertyValue = oCP.value
    End If
fin:
    If Err Then getPropertyValue = ""
End Function
Public Function getProperty(sName As String) As CustomProperty
On Error Resume Next
Dim i As Integer
    Set getProperty = Nothing
    
    For i = 1 To pSh.CustomProperties.count
        If pSh.CustomProperties(i).name = sName Then
            Set getProperty = pSh.CustomProperties(i)
            Exit Function
        End If
    Next
End Function

Public Sub setProperty(sName As String, sValue As String)
On Error Resume Next
Dim oProp As CustomProperty

    Set oProp = getProperty(sName)
    If oProp Is Nothing Then
        pSh.CustomProperties.add sName, sValue
    Else
        oProp.value = sValue
    End If
End Sub

'ins|fffd|re une colonne apr|fffd|s une autre
Public Sub insertColAfter(iCol As Integer, sName As String)
    pSh.Columns(iCol + 1).Insert Shift:=xlToRight, CopyOrigin:=xlFormatFromLeftOrAbove
    pSh.Columns(iCol + 1).ColumnWidth = pSh.Columns(iCol).ColumnWidth
    If sName <> "" Then pSh.parent.Names.add sName, pSh.Columns(iCol + 1)
    
End Sub

Public Sub resizeColumnWidth(iCol As Integer, iMinWidth As Integer)
    If pSh.Columns(iCol).ColumnWidth < iMinWidth Then pSh.Columns(iCol).ColumnWidth = iMinWidth
End Sub

'-------------------------------------------------------------------
' Gestion des sp|fffd|cificit|fffd|s relatives |fffd| spigao
'-------------------------------------------------------------------
Public Property Get IsSpigaoStudySheet() As Boolean
    IsSpigaoStudySheet = getBooleanProperty(cPropertyIsSpigaoBoq)
End Property
Public Property Let IsSpigaoStudySheet(bValue As Boolean)
    SetBooleanProperty cPropertyIsSpigaoBoq, bValue
End Property
Public Property Get IsSpigaoBaseSheet() As Boolean
    IsSpigaoBaseSheet = (getPropertyValue(cPropertyNameTypeSheet) = cPropertyValueIsBaseSheet)
End Property
Public Property Let IsSpigaoBaseSheet(bValue As Boolean)
    If bValue Then
        setProperty cPropertyNameTypeSheet, cPropertyValueIsBaseSheet
    Else
        setProperty cPropertyNameTypeSheet, ""
    End If
End Property
Public Property Get IsSpigaoCumulSheet() As Boolean
    IsSpigaoCumulSheet = (getPropertyValue(cPropertyNameTypeSheet) = cPropertyValueIsCumulsheet)
End Property
Public Property Let IsSpigaoCumulSheet(bValue As Boolean)
    If bValue Then
        setProperty cPropertyNameTypeSheet, cPropertyValueIsCumulsheet
    Else
        setProperty cPropertyNameTypeSheet, ""
    End If
End Property
Public Property Get IsSpigaoSpecificitiesSheet() As Boolean
    IsSpigaoSpecificitiesSheet = (getPropertyValue(cPropertyNameTypeSheet) = cPropertyValueIsSpecificitiesSheet)
End Property
Public Property Let IsSpigaoSpecificitiesSheet(bValue As Boolean)
    If bValue Then
        setProperty cPropertyNameTypeSheet, cPropertyValueIsSpecificitiesSheet
    Else
        setProperty cPropertyNameTypeSheet, ""
    End If
End Property
Public Property Get IsSpigaoPlanningSheet() As Boolean
    IsSpigaoPlanningSheet = getBooleanProperty(cPropertyIsSpigaoPlanning)
End Property
Public Property Let IsSpigaoPlanningSheet(bValue As Boolean)
    SetBooleanProperty cPropertyIsSpigaoPlanning, bValue
End Property
Public Property Get IsSpigaoPlanningStyleSheet() As Boolean
    IsSpigaoPlanningStyleSheet = getBooleanProperty(cPropertyIsSpigaoPlanningStyle)
End Property
Public Property Let IsSpigaoPlanningStyleSheet(bValue As Boolean)
    SetBooleanProperty cPropertyIsSpigaoPlanningStyle, bValue
End Property



'---------------------------------------------------------------------
' suivi des changements sur la feuille
'---------------------------------------------------------------------
Public Property Get IsListened() As Boolean
    IsListened = pIsListenerActive
End Property
Public Property Let IsListened(bValue As Boolean)
    pIsListenerActive = bValue
    If bValue Then
        loadDics
        pOldRowsCount = pSh.usedRange.Rows.count
    End If
End Property


'Sur activation de la feuille
Private Sub pSh_Activate()
    If Not IsSpigaoStudySheet Then Exit Sub
    If Not pRelatedStudySheet Is Nothing Then pRelatedStudySheet.IsActivated
End Sub
'Sur d|fffd|sactivation
Private Sub pSh_Deactivate()
    If Not IsSpigaoStudySheet Then Exit Sub
    If Not pRelatedStudySheet Is Nothing Then pRelatedStudySheet.IsDeactivated ""
End Sub


Private Sub pSh_Change(ByVal Target As range)
Dim oTargetER As aExcelRange
Dim oOldER As aExcelRange
Dim bTrackingAllowed As Boolean

    If Not (IsSpigaoStudySheet Or IsSpigaoPlanningSheet) Then Exit Sub
    If Not pIsListenerActive Then Exit Sub
    If pSh Is Nothing Then Exit Sub
    
    'Si insertion ou suppression de rows
    If pSh.usedRange.Rows.count <> pOldRowsCount Then
        'on reclacule...
        loadDics
        pOldRowsCount = pSh.usedRange.Rows.count
    End If
    
    If IsSpigaoStudySheet Then
        'On propage si modif d'une seule cellule
        If Target.Cells.count = 1 Then
            Set oTargetER = sgExcelRangeBuilder.byRange(Target)
            If pDicER.exists(oTargetER.address) Then
                'bTrackingAllowed = False
                Set oOldER = pDicER.item(oTargetER.address)
                
                RaiseEvent ESChanged(oOldER, oTargetER, bTrackingAllowed)
                
                If bTrackingAllowed Then oTargetER.trackChange oOldER
                'oTargetER.trackChange oOldER
            End If
        End If
    ElseIf IsSpigaoPlanningSheet Then
        'TODO voir si gestion sp|fffd|cifique au planning
        Debug.Print Target.address
    End If
    
End Sub


'-----------------------------------------------------------------------------------------
' Historisation des donn|fffd|es de la feuille
'-----------------------------------------------------------------------------------------


'Stocke en m|fffd|moire les formules & valeurs des cellules utilis|fffd|es
Private Sub loadDics()
Dim oRange As range
Dim oER As aExcelRange
    
    Set pDicER = New Dictionary
    
    For Each oRange In pSh.usedRange.Cells
        Set oER = sgExcelRangeBuilder.byRange(oRange)
        pDicER.add oER.address, oER
    Next
    
End Sub


'--------------------------------------------------------------------------------------
' Lecture
'--------------------------------------------------------------------------------------
Public Function readCellValueToStringByCoords(irow As Long, iCol As Integer) As String
    readCellValueToStringByCoords = CStr(pSh.Cells(irow, iCol).value)
End Function
Public Function readCellValueToStringByAddress(sAddress As String) As String
    readCellValueToStringByAddress = CStr(pSh.range(sAddress).value)
End Function
Public Function readCellFormulaByCoord(irow As Long, iCol As Integer) As String
    readCellFormulaByCoord = pSh.Cells(irow, iCol).formula
End Function
'R|fffd|cup|fffd|ration de la cellule originelle point|fffd|e par une formule
Public Function recurseOriginalAddress(sOldAddress As String) As String
Dim sNewFormula As String
Dim sFormula As String

    If Not cellExists(sOldAddress) Then
        recurseOriginalAddress = ""
        Exit Function
    End If
    
    sFormula = pSh.range(sOldAddress).formula
    If Left(sFormula, 1) = "=" And Len(sFormula) > 1 Then
        sFormula = Mid(sFormula, 2)
        If cellExists(sFormula) Then 'La formule pointe bien sur une autre cellule en direct
            'sNewFormula = pSh.range(sFormula).formula
            recurseOriginalAddress = recurseOriginalAddress(sFormula)
        Else 'formule cmplee, on renvoit l'adresse courante
            recurseOriginalAddress = sOldAddress
        End If
    Else 'Pas de formule, on renvoit l'adresse courante
        recurseOriginalAddress = sOldAddress
    End If
    
End Function

'--------------------------------------------------------------------------------------
' Ecriture
'--------------------------------------------------------------------------------------
Public Sub writeToCellByCoords(irow As Long, iCol As Integer, sValue As String)
On Error GoTo fin

    If IsNumeric(sValue) Then
        pSh.Cells(irow, iCol).value = CDbl(sValue)
    Else
        pSh.Cells(irow, iCol).value = sValue
    End If
fin:
    If Err Then MsgBox "Erreur d'|fffd|criture dans la cellule : (" & irow & "," & iCol & ")" & vbCrLf & sValue & vbCrLf & Err.Description
    
End Sub
Public Sub writeToCellByAddress(sAddress As String, sValue As String)
On Error GoTo fin
    If cellExists(sAddress) Then
        pSh.range(sAddress).value = sValue
    End If
fin:
    If Err Then MsgBox "Erreur d'|fffd|criture dans la cellule : " & sAddress & vbCrLf & sValue & vbCrLf & Err.Description
End Sub

Public Sub writeFormulaToCellByCoords(irow As Long, iCol As Integer, sValue As String)
On Error GoTo fin
    pSh.Cells(irow, iCol).formula = sValue
fin:
    If Err Then MsgBox "Erreur d'|fffd|criture dans la cellule : (" & irow & "," & iCol & ")" & vbCrLf & sValue & vbCrLf & Err.Description
End Sub
Public Sub writeFormulaToCellByAddress(sAddress As String, sValue As String)
On Error GoTo fin
    If cellExists(sAddress) Then
        pSh.range(sAddress).formula = sValue
    End If

fin:
    If Err Then MsgBox "Erreur d'|fffd|criture dans la cellule : " & sAddress & vbCrLf & sValue & vbCrLf & Err.Description
End Sub

Public Sub wrapText(irow As Long, iCol As Integer)
    pSh.Cells(irow, iCol).wrapText = True
End Sub
'Indentation
Public Sub indentCell(irow As Long, iCol As Integer, iIndent As Integer)
    If iIndent > 0 Then
        If iIndent > 3 Then iIndent = 3
        pSh.Cells(irow, iCol).IndentLevel = iIndent
    End If
    pSh.Cells(irow, iCol).wrapText = True
End Sub
Public Sub indentRow(ByVal irow As Long, ByVal iIndent As Integer, Optional bIncrement As Boolean = False)
    If iIndent = 0 Then Exit Sub
    If bIncrement Then
        iIndent = iIndent + (pSh.Rows(irow).OutlineLevel - 1)
    End If
    If iIndent > cMaxLevelOfGroupRows Then iIndent = cMaxLevelOfGroupRows
        
    pSh.Rows(irow).OutlineLevel = iIndent
End Sub
Public Sub indentRowsReset()
On Error Resume Next
    pSh.Rows.Ungroup
    pSh.Rows.OutlineLevel = 1
End Sub

'Gestion des commentaires
Public Sub addCommentToCellByCoords(irow As Long, iCol As Integer, sValue As String, bCrush As Boolean)
Dim sComment As String

    If Not pSh.Cells(irow, iCol).comment Is Nothing Then
        If Not bCrush Then sComment = pSh.Cells(irow, iCol).comment.Text
        pSh.Cells(irow, iCol).comment.delete
    End If
    
    If sValue <> "" And sComment <> "" Then sComment = sComment & vbCrLf
    sComment = sComment & sValue
    
    pSh.Cells(irow, iCol).AddComment sComment
End Sub
Public Sub delCommentToCellByCoords(irow As Long, iCol As Integer)
    If Not pSh.Cells(irow, iCol).comment Is Nothing Then
        pSh.Cells(irow, iCol).comment.delete
    End If
End Sub
Public Sub insertRow(iRowIndex As Long)
    pSh.Rows(iRowIndex).Insert xlDown
End Sub
Public Sub insertRowByCopy(iRowIndex As Long, oRgToCopy As range)
On Error GoTo fin
    DoEvents
    pSh.Rows(iRowIndex).Insert xlDown, oRgToCopy.Copy
fin:
    If Err Then
        MsgBox "erreur de copie de la ligne : " & iRowIndex
    End If
End Sub
'Application de style
Public Function cvStyleToName(eStyle As eSpigaoStyle) As String
    Select Case eStyle
        Case eSpigaoStyle.Normal
           cvStyleToName = "Normal"
        Case eSpigaoStyle.comment
           cvStyleToName = "SPIGAO_Comment"
        Case eSpigaoStyle.Titre1
            cvStyleToName = "SPIGAO_Titre_1"
        Case eSpigaoStyle.Titre2
            cvStyleToName = "SPIGAO_Titre_2"
        Case eSpigaoStyle.Titre3
            cvStyleToName = "SPIGAO_Titre_3"
        Case eSpigaoStyle.titrep
            cvStyleToName = "SPIGAO_Titre_P"
        Case eSpigaoStyle.Doublon
            cvStyleToName = "SPIGAO_Doublon"
        Case eSpigaoStyle.PM
            cvStyleToName = "SPIGAO_PM"
        Case eSpigaoStyle.PF
            cvStyleToName = "SPIGAO_PF"
        Case eSpigaoStyle.TrackModif
            cvStyleToName = "SPIGAO_Modif"
        Case eSpigaoStyle.TrackAjout
            cvStyleToName = "SPIGAO_Ajout"
        Case eSpigaoStyle.Recap
            cvStyleToName = "SPIGAO_Recap"
        Case eSpigaoStyle.Subtotal
            cvStyleToName = "SPIGAO_ST"
        Case eSpigaoStyle.TotalGeneral
            cvStyleToName = "SPIGAO_MT"
        Case eSpigaoStyle.CartoucheImportant
            cvStyleToName = "SPIGAO_CarImportant"
        Case eSpigaoStyle.CartoucheComplement
            cvStyleToName = "SPIGAO_CarComplement"
        Case eSpigaoStyle.CartoucheVigilance
            cvStyleToName = "SPIGAO_CarVigilance"
        Case eSpigaoStyle.Subtotal2
            cvStyleToName = "SPIGAO_ST2"
        Case eSpigaoStyle.Subtotal3
            cvStyleToName = "SPIGAO_ST3"
        Case eSpigaoStyle.Tva
            cvStyleToName = "SPIGAO_TVA"
    End Select
End Function

Public Sub applyStyleByCoords(irow As Long, iCol As Integer, eStyle As eSpigaoStyle)
On Error Resume Next
    pSh.Cells(irow, iCol).Style = cvStyleToName(eStyle)
End Sub
Public Sub applyStyleByAddress(sAddress As String, eStyle As eSpigaoStyle)
On Error Resume Next
    pSh.range(sAddress).Style = cvStyleToName(eStyle)
End Sub

Public Sub mergeCells(irow As Long, iColStart As Integer, iColEnd As Integer)
Dim iRowHeight As Integer
Dim iCellWidth As Integer
Dim iOldCellWidth As Integer
Dim oCell As range

    With pSh.range(pSh.Cells(irow, iColStart), pSh.Cells(irow, iColEnd))
        'm|fffd|morisation des valeurs de d|fffd|part
        iCellWidth = 0
        iOldCellWidth = pSh.Cells(irow, iColStart).ColumnWidth
        For Each oCell In .Cells
            iCellWidth = iCellWidth + oCell.ColumnWidth
        Next
        
        'simulation sur une seule cellule pour en d|fffd|duire la valeur de hauteur de ligne
        pSh.Cells(irow, iColStart).ColumnWidth = iCellWidth
        pSh.Cells(irow, iColStart).wrapText = True
        pSh.Cells(irow, iColStart).EntireRow.AutoFit
        iRowHeight = pSh.Rows(irow).Height
        
        'r|fffd|application valeur de d|fffd|part
        pSh.Cells(irow, iColStart).ColumnWidth = iOldCellWidth
        
        'merge final
        .mergeCells = True
        .wrapText = True
        .EntireRow.RowHeight = iRowHeight
    End With
    
    
    
End Sub
'Masquage ligne
Public Sub hideRow(irow As Long)
    pSh.Rows(irow).Hidden = True
End Sub
 Public Sub showRow(irow As Long)
    pSh.Rows(irow).Hidden = False
End Sub
Public Function isRowHidden(irow As Long) As Boolean
    isRowHidden = pSh.Rows(irow).Hidden
End Function

'Masquage col
Public Sub hideCol(iCol As Long)
    pSh.Columns(iCol).Hidden = True
End Sub
Public Sub showCol(iCol As Integer, Optional minWidth As Integer)
    pSh.Columns(iCol).Hidden = False
    If Not IsMissing(minWidth) Then resizeColumnWidth iCol, minWidth
End Sub
Public Function isColHidden(iCol As Integer) As Boolean
    isColHidden = pSh.Columns(iCol).Hidden
End Function

'Masquage de feuille
Public Sub hideSheet()
    pSh.visible = xlSheetHidden
End Sub

Public Sub showSheet()
    pSh.visible = xlSheetVisible
End Sub
'Recopie de feuille
Public Function copyTo(sName As String, Optional bBefore As Boolean = False) As aExcelSheet
On Error GoTo fin
Dim osh As Excel.Worksheet
Dim i As Integer
    If sName = "" Then Exit Function
    If parent.sheetExists(sName) Then
        MsgBox "Le classeur contient d|fffd|j|fffd| une feuille nomm|fffd|e '" & sName & "'." & vbCrLf & "Copie annul|fffd|e."
    End If
    
    'recopie de la feuille
    If bBefore Then
        pSh.Copy Before:=pSh
        Set osh = pSh.parent.Sheets(pSh.Index - 1)
    Else
        pSh.Copy After:=pSh
        Set osh = pSh.parent.Sheets(pSh.Index + 1)
    End If
    
    osh.name = sName
    
    'reprise de toutes les propri|fffd|t|fffd|s de la feuille initiale
    For i = 1 To pSh.CustomProperties.count
        osh.CustomProperties.add pSh.CustomProperties(i).name, getPropertyValue(pSh.CustomProperties(i).name)
    Next
    
    Set copyTo = sgExcelSheetBuilder.buildByWorksheet(osh)
    
fin:
    If Err Then MsgBox "Erreur lors de la recopie de la feuille " & pSh.name & " en " & sName
End Function

'Suppression
Public Sub delete()
    pSh.delete

End Sub


'Hyperlien
Public Sub setHyperlinkByCoords(irow As Long, iCol As Integer, sHyperLink As String)
    pSh.Hyperlinks.add pSh.Cells(irow, iCol), sHyperLink
End Sub

'Remplacement
Public Sub replaceIn(sOld As String, sNew As String)
Dim oER As aExcelRange

    Set oER = sgExcelRangeBuilder.byRange(pSh.usedRange)
    oER.replaceIn sOld, sNew
    
End Sub
'-----------------------
'Navigation
'-------------------------
Public Sub activate()
    pSh.activate
End Sub

'---------------------------------
Public Sub hideFont(irow As Long, iCol As Integer, bHide As Boolean)
On Error Resume Next
    
    With pSh.Cells(irow, iCol)
        If bHide Then
            .Font.Color = .Interior.Color
        Else
            .Font.Color = pSh.parent.Styles(.Style.name).Font.Color
        End If
    End With
End Sub
Attribute VB_Name = "aExcelSheetBuilder"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Public Function buildByWorksheet(osh As Excel.Worksheet) As aExcelSheet
    Dim oEs As aExcelSheet
    Dim oEw As aExcelWorkBook
    
    If osh Is Nothing Then
        Set buildByWorksheet = Nothing
        Exit Function
    End If
    Set oEs = New aExcelSheet
    Set oEs.Sheet = osh
    
    Set oEw = sgExcelWorkbookBuilder.buildByWorkbook(osh.parent)
    
    Set oEs.parent = oEw
    
    Set buildByWorksheet = oEs
End Function
Attribute VB_Name = "aExcelWorkBook"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private pWk As Excel.Workbook


Public Property Set Workbook(oWk As Excel.Workbook)
    Set pWk = oWk
End Property

Public Property Get Workbook() As Excel.Workbook
    Set Workbook = pWk
End Property


Public Property Get Sheets() As Collection

    Dim osh As Excel.Worksheet
    Dim oEs As aExcelSheet
    Dim oESCollection As New Collection
    
    For Each osh In pWk.Worksheets
        Set oEs = sgExcelSheetBuilder.buildByWorksheet(osh)
        oESCollection.add oEs
    Next

    Set Sheets = oESCollection
End Property

Public Property Get activeSheet() As aExcelSheet

    If Not pWk.activeSheet Is Nothing Then
        Set activeSheet = sgExcelSheetBuilder.buildByWorksheet(pWk.acivesheet)
    End If

End Property

Public Function sheetExists(sName As String) As Boolean
On Error GoTo fin
    sheetExists = False
    If Not pWk.Sheets(sName) Is Nothing Then sheetExists = True
fin:
    If Err Then
        Err.clear
        sheetExists = False
    End If
End Function

Public Function getSheetByName(sName As String) As aExcelSheet

    If Not pWk.Sheets(sName) Is Nothing Then
        Set getSheetByName = sgExcelSheetBuilder.buildByWorksheet(pWk.Sheets(sName))
    End If

End Function
Public Function getSheetByIndex(iIndex As Integer) As aExcelSheet

    If Not pWk.Sheets(iIndex) Is Nothing Then
        Set getSheetByIndex = sgExcelSheetBuilder.buildByWorksheet(pWk.Sheets(iIndex))
    End If

End Function
'---------------------------------------------------------------------
' Gestion des properties workbook
'---------------------------------------------------------------------
Public Function getProperty(sName As String) As Object
On Error Resume Next
Dim i As Integer
    Set getProperty = Nothing
    
    For i = 1 To pWk.CustomDocumentProperties.count
        If pWk.CustomDocumentProperties(i).name = sName Then
            Set getProperty = pWk.CustomDocumentProperties(i)
            Exit Function
        End If
    Next
End Function
Public Function getPropertyValue(sName As String) As String
On Error GoTo fin
Dim oCP As Object

    getPropertyValue = ""
    Set oCP = getProperty(sName)
    If oCP Is Nothing Then
        getPropertyValue = ""
    Else
        getPropertyValue = oCP.value
    End If
fin:
    If Err Then getPropertyValue = ""
End Function
Public Function setProperty(sName As String, sValue As String)
On Error Resume Next
Dim i As Integer
Dim oProperty As Object

    Set oProperty = getProperty(sName)
    If oProperty Is Nothing Then
        pWk.CustomDocumentProperties.add sName, sValue
    Else
        oProperty.value = sValue
    End If
    
End Function

Public Function hasMacro()
On Error GoTo fin

    hasMacro = False
    If pWk Is Nothing Then Exit Function
    hasMacro = pWk.HasVBProject

fin:
    If Err Then Err.clear
        
End Function
'--------------------------------------------------------------------
' NAmes
'--------------------------------------------------------------------
Public Sub addNameWithDirectValue(sName As String, sDirectValue As String)
On Error Resume Next

    pWk.Names(sName).delete
    If sDirectValue <> "" Then pWk.Names.add sName, sDirectValue

End Sub
Public Sub addName(sName As String, oRefersTo As range)
On Error Resume Next

    pWk.Names(sName).delete
    If Not oRefersTo Is Nothing Then pWk.Names.add sName, oRefersTo

End Sub
Public Sub deleteName(sName As String)
On Error Resume Next
    pWk.Names(sName).delete
End Sub

'--------------------------------------------------------------------
' Sp|fffd|cificit|fffd|s SPIGAO
'--------------------------------------------------------------------
'Rep|fffd|re si c'est un workbook d'|fffd|tude SPIGAO nouveau format
Public Function IsSpigaoStudyWorkbook() As Boolean
Dim oEs As aExcelSheet

    For Each oEs In Sheets
        If oEs.IsSpigaoStudySheet Then
            IsSpigaoStudyWorkbook = True
            Exit Function
        End If
    Next

End Function

'-------------------------------------------------------------
' D|fffd|tection d'une feuille param|fffd|tr|fffd|e comme planning Spigao dans le Wk
' Si sNamePlanning="", on prend la premi|fffd|re feuille aynt une propri|fffd|t|fffd|
' cPropertyIsSpigaoPlanning=True
'-------------------------------------------------------------
Public Function IsSpigaoPlanningWorkbook() As Boolean
On Error GoTo fin
Dim oEs As aExcelSheet

    For Each oEs In Sheets
        If oEs.IsSpigaoPlanningSheet Then
            IsSpigaoPlanningWorkbook = True
            Exit Function
        End If
    Next
    
fin:
    If Err Then MsgBox Err.Description
End Function



'Rep|fffd|re si le dossier excel est un dossier SPIGAO 'standard' livr|fffd| par la prod
Public Function IsSpigaoOldStudyWorkbook() As Boolean
On Error Resume Next
Dim oProp As Object

    IsSpigaoOldStudyWorkbook = False
    
    If pWk Is Nothing Then Exit Function
    Set oProp = getProperty(cPropertyOldSpigaoExcel_StdVersion)
    If Not oProp Is Nothing Then
        IsSpigaoOldStudyWorkbook = True
    Else
        Set oProp = getProperty(cPropertyOldSpigaoExcel_NumDossier)
        If Not oProp Is Nothing Then
            IsSpigaoOldStudyWorkbook = True
        End If
    End If
    
End Function

Public Function getBaseSheet() As aExcelSheet
    Dim osh As Excel.Worksheet
    Dim oEs As aExcelSheet
    
    Set getBaseSheet = Nothing
    For Each osh In pWk.Worksheets
        Set oEs = sgExcelSheetBuilder.buildByWorksheet(osh)
        If oEs.IsSpigaoBaseSheet Then
            Set getBaseSheet = oEs
            Exit Function
        End If
    Next
    
End Function

Public Function getPlanningSheet() As aExcelSheet
    Dim osh As Excel.Worksheet
    Dim oEs As aExcelSheet
    
    Set getPlanningSheet = Nothing
    For Each osh In pWk.Worksheets
        Set oEs = sgExcelSheetBuilder.buildByWorksheet(osh)
        If oEs.IsSpigaoPlanningSheet Then
            Set getPlanningSheet = oEs
            Exit Function
        End If
    Next
    
End Function
Public Function getPlanningStyleSheet() As aExcelSheet
    Dim osh As Excel.Worksheet
    Dim oEs As aExcelSheet
    
    Set getPlanningStyleSheet = Nothing
    For Each osh In pWk.Worksheets
        Set oEs = sgExcelSheetBuilder.buildByWorksheet(osh)
        If oEs.IsSpigaoPlanningStyleSheet Then
            Set getPlanningStyleSheet = oEs
            Exit Function
        End If
    Next
    
End Function

Public Function saveAs(sPath As String, Optional iFileFormat As Integer = 0) As Boolean
On Error GoTo fin
Dim lastCalculationValue As Variant
    'on r|fffd|tablit le calcul automatique avant enregistrement
    lastCalculationValue = pWk.Application.Calculation
    pWk.Application.Calculation = xlCalculationAutomatic
    
    If iFileFormat = 0 Then
        If sgFileSystem.getFileExtensionFromFilePath(sPath) = "xlsm" Then
            pWk.saveAs sPath, xlOpenXMLWorkbookMacroEnabled
        Else
            pWk.saveAs sPath
        End If
    Else
        pWk.saveAs sPath, iFileFormat
    End If

    saveAs = True
fin:
    pWk.Application.Calculation = lastCalculationValue
    If Err Then
        MsgBox "Erreur lors de l'enregistrement du classeur Excel : " & sPath & vbCrLf & Err.Description
    End If
End Function


Public Function save() As Boolean
On Error GoTo fin
Dim lastCalculationValue As Variant
    If pWk Is Nothing Then Exit Function

    'on r|fffd|tablit le calcul automatique avant enregistrement
    lastCalculationValue = pWk.Application.Calculation
    pWk.Application.Calculation = xlCalculationAutomatic
    
    pWk.save

    save = True
fin:
    pWk.Application.Calculation = lastCalculationValue
    If Err Then
        MsgBox "Erreur lors de l'enregistrement du classeur Excel : " & pWk.name & vbCrLf & Err.Description
    End If
End Function

Public Sub closeWorkbook()
    If Not pWk Is Nothing Then pWk.Close False
End Sub

Public Sub RunMacro(sName As String, ParamArray Args() As Variant)
On Error GoTo fin

    If UBound(Args) = -1 Then
        sgExcelApplication.Engine.Run "'" & pWk.name & "'!" & sName
    Else
        sgExcelApplication.Engine.Run "'" & pWk.name & "'!" & sName, Args(0)
    End If

fin:
    
End Sub
Attribute VB_Name = "aExcelWorkbookBuilder"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Public Function createByTemplate(sPathTemplate As String) As aExcelWorkBook
    Dim oWk As Excel.Workbook
    Dim oEw As aExcelWorkBook
    
    'TODO
    Set oWk = sgExcelApplication.Engine.Workbooks.add(sPathTemplate)
    Set oEw = New aExcelWorkBook
    Set oEw.Workbook = oWk
    
    Set createByTemplate = oEw
    
End Function

Public Function buildByWorkbook(oWk As Excel.Workbook) As aExcelWorkBook
Dim oEw As aExcelWorkBook

    Set oEw = New aExcelWorkBook
    Set oEw.Workbook = oWk
    
    Set buildByWorkbook = oEw
End Function


'G|fffd|re l'ouverture ou l'activation d'un classeur si d|fffd|j|fffd| ouvert.
Public Function buildByOpenWorkbook(sPath As String, bAllowWorkbookLoaded As Boolean) As aExcelWorkBook
On Error GoTo fin
Dim oWk As Excel.Workbook
Dim sName As String

    sName = sgFileSystem.getFileNameFromFilePath(sPath)
    If bAllowWorkbookLoaded Then
        'On v|fffd|rifie si le classeur est pas d|fffd|j|fffd| ouvert
        For Each oWk In sgExcelApplication.Engine.Workbooks
            If oWk.FullName = sPath Then
                oWk.activate
                Set buildByOpenWorkbook = buildByWorkbook(oWk)
                Exit Function
            End If
        Next
    End If
    'Sinon on l'ouvre
    Set oWk = sgExcelApplication.openWorkbook(sPath)
    Set buildByOpenWorkbook = buildByWorkbook(oWk)
    Exit Function
fin:
    MsgBox "Erreur lors de l'ouverture du classeur : " & sPath & vbCrLf & Err.Description

End Function
Attribute VB_Name = "aFileSystem"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private pfs As Object 'FileSystemObject 'Object

Public Function FileExists(sPath As String) As Boolean
    If sPath = "" Then Exit Function
    FileExists = pfs.FileExists(sPath)
End Function

Public Function getFile(sPath As String) As File
    If pfs.FileExists(sPath) Then
        Set getFile = pfs.getFile(sPath)
    End If
End Function

Public Function FolderExists(sPath As String) As Boolean
    If sPath = "" Then Exit Function
    FolderExists = pfs.FolderExists(sPath)
End Function

Public Property Get Engine() As Scripting.FileSystemObject
    Set Engine = pfs
End Property

Public Function promptForFilePath(Optional sDefaultPath As String = "c:\", Optional sInitPath As String = "", Optional sFilterDescription As String = "Fichiers Excel", Optional sFilterExtension As String = "*.xls?") As String
    On Error GoTo fin
    Dim FD As Object
    Dim vFile As Variant

    Set FD = Application.FileDialog(3) 'msoFileDialogFolderPicker) 'Application.GetOpenFilename(, , "Emplacement du r|fffd|pertoire de stockage des affaires...", , False)
    If pfs.FolderExists(sInitPath) Then
        FD.InitialFileName = sInitPath
    ElseIf pfs.FolderExists(sDefaultPath) Then
        FD.InitialFileName = sDefaultPath
    End If

    If sFilterExtension <> "" Then
        FD.Filters.clear
        FD.Filters.add sFilterDescription, sFilterExtension
    End If
    
    FD.Show
    
    If FD.SelectedItems.count > 0 Then
        promptForFilePath = FD.SelectedItems(1)
    End If

fin:
    If Err Then promptForFilePath = ""
End Function

Public Function promptForFolderPath(Optional sDefaultPath As String = "c:\", Optional sInitPath As String = "") As String
On Error GoTo fin
 Dim FD As Object

    Set FD = Application.FileDialog(4) 'msoFileDialogFolderPicker) 'Application.GetOpenFilename(, , "Emplacement du r|fffd|pertoire de stockage des affaires...", , False)
    If FolderExists(sInitPath) Then
        FD.InitialFileName = sInitPath
    ElseIf FolderExists(sDefaultPath) Then
        FD.InitialFileName = sDefaultPath
    End If

    FD.Show
    
    If FD.SelectedItems.count > 0 Then
        promptForFolderPath = FD.SelectedItems(1)
    End If

fin:
    If Err Then promptForFolderPath = ""

End Function
'*******************************************************************************
' Recopie des fichiers en s'assurant que les r|fffd|pertoires existent bien
'*******************************************************************************
Public Function copyFile(sPathFrom As String, sPathTo As String) As Boolean
    'Siource ok ?
    If Not pfs.FileExists(sPathFrom) Then Exit Function
    
    'R|fffd|pertoire cible ok ?
    If pfs.GetParentFolderName(sPathTo) = "" Then Exit Function
    If Not pfs.FolderExists(pfs.GetParentFolderName(sPathTo)) Then createFolderRecurse (pfs.GetParentFolderName(sPathTo))
    
    'recopie
    pfs.copyFile sPathFrom, sPathTo, True
    
    copyFile = True
End Function

Public Sub renameFile(sPathFile As String, sNewName As String)
On Error Resume Next
Dim ofile As File

    Set ofile = getFile(sPathFile)
    If Not ofile Is Nothing Then
        ofile.name = sNewName
    End If
End Sub
'********************************************************************************
'* Cr|fffd|ation d'un r|fffd|pertoire et des r|fffd|pertoires parents si n|fffd|cessaires |fffd| partir d'un chemin complet
' Ne le cr|fffd||fffd| que s'il n'existe pas
' Renvoit True si le r|fffd|pertoire existe apr|fffd|s tentative de cr|fffd|ation et False sinon
'********************************************************************************
Public Function createFolderRecurse(sPath As String) As Boolean
On Error GoTo fin

Dim sPathRoot As String

    createFolderRecurse = False
    'Suppression des / |fffd| l'envers
    sPath = Replace(sPath, "/", "\")
    'On enl|fffd|ve le dernier \ s'il existe
    If Right(sPath, 1) = "\" Then sPath = Left(sPath, Len(sPath) - 1)
    
    If Not pfs.FolderExists(sPath) Then
        'V|fffd|rifie que la racine
        sPathRoot = getFolderPathFromFilePath(sPath)
        If createFolderRecurse(sPathRoot) Then
            pfs.CreateFolder sPath
            If pfs.FolderExists(sPath) Then createFolderRecurse = True
        End If
    Else
        createFolderRecurse = True
    End If
    
    Exit Function
    
fin:
    If Err Then createFolderRecurse = False

End Function

'*********************************************************************************
' Copy d'un r|fffd|pertoire
' TODO : |fffd| rendre plus robuste pour d|fffd|tecter des erreurs de droit d'acc|fffd|s ou lenteur de r|fffd|ponse
'*********************************************************************************
Public Function copyFolder(sSourcePath As String, sDestinationPath As String)
    pfs.copyFolder sSourcePath, sDestinationPath, True
End Function


'--------------------------------------------------------
' Fonction de copie du contenu du r|fffd|pertoire d'import vers le r|fffd|pertoire DIE de l'affaire
' on doit copier tous les fichiers et dossier sauf le r|fffd|pertoire de destination de l'affaire
' au premier lancement : p_sSourceFolderPath = sPathFolderProject, p_sDestinationFolderPath = DieFolderPath
'------------------------------------------------------------
Public Sub copyDieFilesToFolder(p_sSourceFolderPath As String, p_sDestinationFolderPath As String, p_sDealFolderPath As String, p_sProjectName As String)

    Dim objFile As File
    Dim objFolderSource As Folder
    Dim objFolderParsed As Folder
    Dim strFolderName As String
    Dim strNewFolderPath As String
    Dim bDel As Boolean
    
    'Test si le r|fffd|pertoire de destination est un sous-r|fffd|pertoire du r|fffd|pertoire source. Dans ce cas on va d|fffd|placer les fichiers et pas juste les copier
    If InStr(p_sDestinationFolderPath, p_sSourceFolderPath) > 0 Then bDel = True
    
    Set objFolderSource = pfs.GetFolder(p_sSourceFolderPath)
    
    'Copie de l'ensemble des fichiers
    For Each objFile In objFolderSource.Files
        'on ne d|fffd|place ou copie que les fichiers explicitements li|fffd|s |fffd| spigao
        If sgRegex.matchPattern(LCase(objFile.name), "(^" & LCase(p_sProjectName) & "[a-z0-9_\.]*|entreprisedata)\.(txt|xls|xml|xlsx|old|xnf|pdf|cnf|rpt|dat|ori|spigao|tif|tiff)$") Then
            pfs.copyFile objFile.path, joinPath(p_sDestinationFolderPath, objFile.name), True
            If bDel Then deleteFile objFile.path
        End If
    Next
    
    'Copie des repos
    For Each objFolderParsed In objFolderSource.SubFolders
        'On ne lance la copie que si le r|fffd|p pars|fffd| n'est pas le repo de l'affaire, ni celui du die
        If (objFolderParsed.path <> p_sDealFolderPath And objFolderParsed.path <> p_sDestinationFolderPath) Then
            'On ne d|fffd|place que les r|fffd|pertoires li|fffd|s au die (btp_spigao)
            If objFolderParsed.name = "btp_spigao" Then
                strFolderName = objFolderParsed.name
                strNewFolderPath = joinPath(p_sDestinationFolderPath, strFolderName)
                createFolderRecurse strNewFolderPath
                copyDieFilesToFolder objFolderParsed.path, strNewFolderPath, p_sDealFolderPath, p_sProjectName
                If bDel Then objFolderParsed.delete True
            End If
        End If
    Next
    

End Sub

Private Sub deleteFile(sPath As String)
On Error GoTo fin

Dim objFile As File
    Set objFile = pfs.getFile(sPath)
    objFile.delete True

fin:
    Err.clear
End Sub

Public Function getFolderPathFromFilePath(sPath As String) As String
    getFolderPathFromFilePath = pfs.GetParentFolderName(sPath)
End Function
Public Function getFileNameFromFilePath(sPath As String) As String
    getFileNameFromFilePath = pfs.GetFileName(sPath)
End Function
Public Function getFileExtensionFromFilePath(sPath As String) As String
    getFileExtensionFromFilePath = pfs.GetExtensionName(sPath)
End Function

Private Sub Class_Initialize()
    Set pfs = CreateObject("Scripting.FileSystemObject")
End Sub


Public Function getScribeProgramFilesPath() As String
Dim s As String
    
    s = ReturnParam_Reg(cRepScribe & cPath)
    
    If s <> "" Then
        If FileExists(s) Then getScribeProgramFilesPath = getFolderPathFromFilePath(s)
    End If
    
End Function

Public Function RunExe(sCmd As String) As Boolean
        Dim MyAppID As Double
        MyAppID = Shell(sCmd, 1)
        AppActivate MyAppID
End Function
Public Function runCmd(sCmd As String) As Boolean
On Error GoTo fin
    Dim oScriptShell As Object
    Dim execcmd As Variant
    
    Set oScriptShell = CreateObject("WScript.Shell")
    execcmd = oScriptShell.Run(sCmd, 0, True)
    runCmd = (execcmd = 0)
    
    
fin:
    Set oScriptShell = Nothing
    If Err Then
        MsgBox "erreur lors de l'ex|fffd|cution de la ligne de commande : " & vbCrLf & sCmd
        runCmd = False
    End If
End Function


Public Function WaitForFileExists(sPath As String, secMax As Integer)
   Dim t As Date
   t = Timer + secMax
   Do Until Timer > t
      DoEvents
      If FileExists(sPath) Then
        WaitForFileExists = True
        Exit Function
      End If
   Loop
   
   WaitForFileExists = FileExists(sPath)

End Function

'Cherche un fichier dans une arborescence et renvoie son chemin absolu
Public Function SearchFileInSubFolders(sFolderPath As String, sFilename As String) As String

On Error GoTo fin

    Dim ofolder As Folder
    Dim oSubfolder As Folder
    Dim ofile As File
    Dim sResult As String
    
    If Not pfs.FolderExists(sFolderPath) Then Exit Function
    
    Set ofolder = pfs.GetFolder(sFolderPath)
    For Each ofile In ofolder.Files
        If LCase(ofile.name) = LCase(sFilename) Then
            SearchFileInSubFolders = ofile.path
            Exit Function
        End If
    Next
    
    For Each oSubfolder In ofolder.SubFolders
        sResult = SearchFileInSubFolders(oSubfolder.path, sFilename)
        If sResult <> "" Then
            SearchFileInSubFolders = sResult
            Exit Function
        End If
    Next
    
fin:


End Function


Public Sub deleteFolder(sPathFolder As String)
On Error Resume Next
    If FolderExists(sPathFolder) Then
        pfs.deleteFolder sPathFolder, True
    End If
End Sub

Public Function joinPath(sRootPath As String, sAddPath As String) As String

    sRootPath = Replace(sRootPath, "/", "\")
    If Right(sRootPath, 1) <> "\" Then sRootPath = sRootPath & "\"
    joinPath = sRootPath & sAddPath
    
End Function
Attribute VB_Name = "aSpigao"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Private pSpigaoWrapper As Object
Private pSpigao As Object

Private Const cUrlSupport As String = "https://support.spigao.com/link/support-homepage-client"
Private Const cUrlExcelConnectorUserGuide As String = "https://support.spigao.com/link/excel-connector-user-guide" 'http://support.spigao.com/Portals/0/LogicielEdisys/ConnecteurOffice/doc/webframe.html
Private Const cUrlExcelConnectorCompatibility As String = "https://support.spigao.com/link/excel-connector-compatibility" 'http://support.spigao.com/Portals/0/LogicielEdisys/ConnecteurOffice/doc/webframe.html#Compatibilite.html
Private Const cUrlExcelConnectorPersoFolder As String = "https://support.spigao.com/link/excel-connector-perso-folder" 'http://support.spigao.com/Portals/0/LogicielEdisys/ConnecteurOffice/doc/webframe.html#PersoRepertoire.html
Private Const cUrlExcelConnectorPersoStudy As String = "https://support.spigao.com/link/excel-connector-perso-study" 'http://support.spigao.com/Portals/0/LogicielEdisys/ConnecteurOffice/doc/webframe.html#PersoDevis.html

''---------------------------
'' utilis|fffd|e dans le reste du code de d|fffd|monstration
''---------------------------

''Private WithEvents pSpigaoEventProvider As DetectionEventProvider
Public pReadyState As Boolean



''---------------------------
'' Renvoie le loader
''---------------------------
Public Property Get Loader() As Object
    Set Loader = pSpigao
End Property

''---------------------------
'' Renvoie le detectionEngine du loader
''---------------------------
Public Property Get Detection() As Object
    Set Detection = pSpigao.Detection
End Property

''---------------------------
'' Renvoie le processingEngine du loader
''---------------------------
Public Property Get Processing() As Object
    Set Processing = pSpigao.Processing
End Property


Public Sub Restart()
    Set pSpigao = Nothing
    Initialize
End Sub

Public Property Get domain() As String
    domain = sgSpigao.Detection.account.Credentials.domain
End Property
Public Property Get password() As String
    password = sgSpigao.Detection.account.Credentials.password
End Property
Public Property Get login() As String
    login = sgSpigao.Detection.account.Credentials.UserId
End Property
''--------------------------
'' Fonction renvoyant si le connecteur SPIGAO est pret
'' |fffd| fonctionner : il a lev|fffd| un |fffd|v|fffd|nement _EngineReady
''--------------------------
Public Function isReady() As Boolean
    isReady = pReadyState
End Function

''---------------------------
'' Intialisation du connecteur
'' A noter que le connecteur l|fffd|ve un |fffd|v|fffd|nement _EngineReady
'' lorqu'il a termin|fffd| son processus d'initialisation
''---------------------------
Private Sub Class_Initialize()
On Error GoTo fin

    If Not Initialize() Then
        MsgBox "Erreur lors de l'initialisation du module SPIGAO : " & Err.Description
    End If

fin:
    If Err Then
        MsgBox "Erreur lors de l'initialisation du module SPIGAO : " & Err.Description
    End If
End Sub



Private Function Initialize() As Boolean
On Error GoTo fin

Dim sConfigPath As String

    sConfigPath = sgEnvironnement.programDataExcelConnectorPath & "\IULM.config"
    'Instancie le connecteur
    Set pSpigaoWrapper = Application.COMAddIns("Edisys.IULM.Excel").Object
    Set pSpigao = pSpigaoWrapper.CreateLoader(sConfigPath)
    
    'Debloque le module
    If Not unlockSPIGAO Then
        MsgBox "Erreur lors du d|fffd|blocage du module SPIGAO"
        Exit Function
    End If
    
    'conf sp|fffd|cifique
    configureGlobalSettings
    
    Initialize = True
    Exit Function
fin:
    
End Function

   

''--------------------------
'' D|fffd|blocage du composant
'' La cl|fffd| est d|fffd|livr|fffd|e par Edisys suite |fffd| validation de l'impl|fffd|mentation
''
''--------------------------
Private Function unlockSPIGAO() As Boolean
'
'    unlockSPIGAO = True
'    Exit Function
    unlockSPIGAO = False
    
   
    If Not pSpigao.Unlock("EDISYS", "Connecteur Excel 2.2.0", "137924179F715010BEAA") Then
    
        If MsgBox("La cl|fffd| de licence du connecteur SPIGAO n'est pas activ|fffd|e. Souhaitez vous poursuivre en mode test ?", vbYesNo) = vbYes Then
            unlockSPIGAO = True
        End If
    Else
        unlockSPIGAO = True
    End If

End Function

Public Sub resetCnf()
    configureGlobalSettings
End Sub

Private Sub configureGlobalSettings()
    With pSpigao.Processing.GlobalSettings
        .ChapterImportMode = 0 'ImportMode_Allow
        .ChapterMandatory = False
        .CommentImportMode = 0 'ImportMode_Allow
        .DesignationMaxLength = 0
        .IdentAllowAlpha = True
        .IdentMaxLength = 0
        .MaxLevel = 0
        .MaxLevelAction = 0 'MaxLevelAction_Top
        .MaxLineCount = 0
        .PriceNumberAllowAlpha = True
        .PriceNumberForComment = ""
        .PriceNumberMandatory = False
        .PriceNumberMaxLength = 0
        .PriceNumberRenumberingScope = 0 'PriceNumberRenumberingScope_Global
        .QuantityDecimals = 0
        .QuantityDefaultValue = 0
        .QuantityMandatory = False
        .UnitAllowedChars = ""
        .UnitDefaultValue = "U"
        .UnitMaxLength = 0
        .UnitPriceAllowLinks = 0 'AllowLinksMode_ByRef=0 AllowLinksMMode_ByPriceNumber=1
        .UnitPriceAllowNegative = True
        .UnitPriceDecimals = 0
        .UnitReplaceString = ""
    End With
End Sub

'R|fffd|cup|fffd|ration d'un project par n|fffd|deal
Public Function getProject(iDealId As Long) As Object
On Error GoTo fin
Dim result As Object

'S|fffd|lection du Deal concern|fffd| par l'import
    Set result = Processing.UI.ImportProject(iDealId)
    ' Puis lancer l'import
    If (result.ExecResult = 0) Then 'ExecResult_Completed
        Set getProject = result.project
    End If

fin:
    If Err Then
        MsgBox "Erreur lors du chargement du projet : " & Processing.GetLastError.Message
    End If
End Function

Public Function getProjectByXmlPath(sXmlPath As String) As Object
Dim oImporter As Object
Dim oProject As Object

    Set oProject = Processing.LoadProject(sXmlPath)
    Set oImporter = Processing.ImportProject(oProject)
    oImporter.Format
    oImporter.Done
    
    Set getProjectByXmlPath = oProject
    
End Function

'R|fffd|cup|fffd|ration d'un Deal
Public Function getDealByPlannedDeals() As Object
On Error GoTo fin

Dim pResult As Object

    'Affichage de la liste des affaires s|fffd|lectionn|fffd|es
    Set pResult = Detection.UI.Deals.ListPlannedDeals
    Select Case pResult.result
        Case 0 'ExecResult_Completed
            Set getDealByPlannedDeals = pResult.selectedDeal
        Case Else
            Exit Function
    End Select
    
fin:
    If Err Then
        MsgBox "Erreur lors de la selection d'un deal " & Detection.GetLastError.Message
    End If
End Function

Public Sub markDealAsIntegrated(iDealId As Long)
    pSpigao.Detection.Deals.markDealAsIntegrated iDealId, True
End Sub
Public Sub markDealAsPlannned(iDealId As Long)
    pSpigao.Detection.Deals.markDealAsPlanned iDealId, True
End Sub
Public Function getDealByNewDeals() As Object
On Error GoTo fin

Dim pResult As Object

    'Affichage de la liste des affaires s|fffd|lectionn|fffd|es
    Set pResult = Detection.UI.Deals.ListPlannedDeals
    Select Case pResult.result
        Case 0 'ExecResult_Completed
            Set getDealByNewDeals = pResult.selectedDeal
        Case Else
            Exit Function
    End Select
    
fin:
    If Err Then
        MsgBox "Erreur lors de la selection d'un deal " & Detection.GetLastError.Message
    End If
End Function

Public Function getDealById(sDealId As String) As Object
On Error GoTo fin
Dim pDeal As Object

    Set getDealById = Nothing
    If Not IsNumeric(sDealId) Then Exit Function
    'Affichage de la liste des affaires s|fffd|lectionn|fffd|es
    Set getDealById = Detection.Deals.getDeal(CLng(sDealId))
    
fin:
    If Err Then
        MsgBox "Erreur lors de la r|fffd|cup|fffd|ration d'un deal " & sDealId & vbCrLf & Detection.GetLastError.Message
    End If
End Function
'Showuser config
Public Sub showUserConfig()

    Detection.UI.ShowUserSettings
    
    If Detection.UserSettings.DefaultStorageFolder <> sgSpigaoConfiguration.RepoFolderPath Then
        sgSpigaoConfiguration.RepoFolderPath = Detection.UserSettings.DefaultStorageFolder
    End If
    
End Sub

Public Sub goToAutoLogin()
    getHtml Detection.WebSite.HomePageUrl
End Sub

Public Sub goToSupport()
On Error Resume Next
Dim sUrl As String
    
    sUrl = Detection.WebSite.GetLinkEditorPartnership()
    If sUrl = "" Then sUrl = cUrlSupport
    getHtml sUrl
End Sub

Public Sub goToCompatibilityHelp()
On Error Resume Next
Dim sUrl As String
    
    sUrl = cUrlExcelConnectorCompatibility
    getHtml sUrl
End Sub
Public Sub goToPersoFolderHelp()
On Error Resume Next
Dim sUrl As String
    
    sUrl = cUrlExcelConnectorPersoFolder
    getHtml sUrl
End Sub
Public Sub goToPersoStudyHelp()
On Error Resume Next
Dim sUrl As String
    
    sUrl = cUrlExcelConnectorPersoStudy
    getHtml sUrl
End Sub
Public Function getPlannedDealsCounter() As Integer
    getPlannedDealsCounter = Detection.Deals.CountPlannedDeals
End Function

Public Function getPlannedDealsList() As Object
Dim mydeals As Object
Dim i As Integer
Dim myDeal As Object

    Set getPlannedDealsList = Nothing
    
    Set mydeals = Detection.Deals.ListPlannedDeals()
    
    If mydeals.count = 0 Then
        Exit Function
    End If

    Set getPlannedDealsList = mydeals
    
End Function

Public Function getDceUrl(dealId As Long) As String
    If dealId > 0 Then
        getDceUrl = Detection.WebSite.GetDCEFilePageUrl(dealId)
    End If
End Function
Attribute VB_Name = "aSpigaoFormula"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit



Private pBrutExpression As String
Private pDataType As eDataType
Private pIsSpecial As Boolean


Public Function Load(sFormula As String, sDataType As eDataType)

    pBrutExpression = Replace(sFormula, "SI(", "IF(")
    pBrutExpression = Replace(pBrutExpression, "ESTNUM(", "ISNUMBER(")
    
    pDataType = sDataType
    
    pIsSpecial = False
    If pBrutExpression = "" Then Exit Function
    
    pIsSpecial = True
    Select Case pDataType
        Case eDataType.Quantity
            'check formule de type "=5"
            If sgRegex.matchPattern(pBrutExpression, "^=[0-9]{1,}[\.,]*[0-9]*$") Then pIsSpecial = False
        Case eDataType.TotalPrice
            'check formules type =ROUND((P_4_5.20 Qt|fffd|)*(P_4_5.20 PU),2)
            If sgRegex.matchPattern(pBrutExpression, "^=ROUND\(.{1,} Qt|fffd|\)\*\(.{1,} PU\),[0-9]\)$") _
                Or sgRegex.matchPattern(pBrutExpression, "^=ROUND\(.{1,} PU\)\*\(.{1,} Qt|fffd|\),[0-9]\)$") Then
                pIsSpecial = False
                pBrutExpression = "=IFERROR(" & Mid(pBrutExpression, 2) & ",""-"")"
            End If
            If sgRegex.matchPattern(pBrutExpression, "^=ROUND\(.{1,} PU\)\*\(.{1,} Qt|fffd|\),[0-9]\)$") Then pIsSpecial = False
            
            'check formules type =IF(ISNUMBER((P_4_5.20 Qt|fffd|)),ROUND((P_4_5.20 Qt|fffd|)*(P_4_5.20 PU),2),0)
            If sgRegex.matchPattern(pBrutExpression, "^=IF\(ISNUMBER\(.{1,}\),ROUND\(.{1,} Qt|fffd|\)\*\(.{1,} PU\),[0-9]\),.{1,}\)$") Then pIsSpecial = False
            If sgRegex.matchPattern(pBrutExpression, "^=IF\(ISNUMBER\(.{1,}\),ROUND\(.{1,} PU\)\*\(.{1,} Qt|fffd|\),[0-9]\),.{1,}\)$") Then pIsSpecial = False
        Case eDataType.UnitPrice
            'check formule de type "=5"
            If sgRegex.matchPattern(pBrutExpression, "^=[0-9]{1,}[\.,]*[0-9]*$") Then pIsSpecial = False
            
    End Select
    
    'Nettoyage en convertissant les anciens formats de ref en nouveaux.
    replaceOldsRefByNewRefs
    
End Function

Public Property Get Expression() As String
    
    Expression = pBrutExpression

End Property
Property Get IsSpecial() As Boolean

    IsSpecial = pIsSpecial
End Property

'Remplace toutes les r|fffd|f|fffd|rences de cellule par le nouveau syst|fffd|me : P_1_z1x23 par P@z1x23
Private Sub replaceOldsRefByNewRefs()
On Error GoTo fin
Dim s As String
Dim iPos As Integer
Dim istart As Integer
Dim iEnd As Integer
Dim sNameCell As String
Dim sNewNameCell As String


    s = deleteSheetNameFromExcelFormula(pBrutExpression)

    
    'While sgRegex.matchPattern(s, "(P_)|(C_)|(L_)|(ST_)|(HT_)|(TTC_)|(TVA_)")
    While sgRegex.matchPattern(s, "(P_)|(C_)|(L_)|(ST_)|(HT_)|(TTC_)|(TVA_)|(MT_)")
        sNameCell = sgRegex.extractFirstPattern(s, "(\()(P_[^)]{1,}|MT_[^)]{1,}|C_[^)]{1,}|L_[^)]{1,}|ST_[^)]{1,}|HT_[^)]{1,}|TTC_[^)]{1,}|TVA_[^)]{1,})(\))", 1)
        'sNameCell = sgRegex.extractFirstPattern(s, "(\()([P_|C_|L_|ST_|HT_|TTC_|TVA_]{1}[^\(^\)]{1,})(\))", 1)
        sNewNameCell = cvOldIdToNewId(sNameCell)
        If sNewNameCell <> "" Then
            s = Replace(s, sNameCell, sNewNameCell)
        Else
            s = ""
        End If
    Wend

    pBrutExpression = s
fin:
    If Err Then
        
    End If
End Sub


Attribute VB_Name = "aSpigaoSe"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

'Classe d'acc|fffd|s au web service IULM SE
Private Const cUrlApiIULMSE As String = "http://iulm.spigao.com/WSIulmSE/v1/api/"
Private Const cLoginApi As String = "85543CAAA6E7D1591AA2"
Private Const cPasswordApi As String = "passlicence"

Private dLastToken As Date
Private sLastToken As String
Private sLastLogin As String


Public Function getDeal(sDealId As String) As cDeal
Dim sToken As String
Dim sResult As String
    'dealid = entier
    If Not IsNumeric(sDealId) Then Exit Function
    
    'Jeton de session
    sToken = getToken()
    If sToken = "" Then Exit Function

    'Envoi du get
    If sgWebService.getJson(cUrlApiIULMSE & "Deal/" & sDealId, cLoginApi, cPasswordApi, sToken, sResult) Then
        'Parsing du retour en cas de retour OK
        Set getDeal = sgDealBuilder.buildByJson(sResult)
        
        'Debug.Print oResult("Id"), oResult("Caption"), oResult("Contractor").item("Name")
        
    Else
        'traitement d'erreur
        
    End If

End Function



Public Sub markDealAsIntegrated(sDealId As String)
Dim sToken As String
Dim sResult As String
Dim oJson As Dictionary
Dim sJson As String

    'dealid = entier
    If Not IsNumeric(sDealId) Then Exit Sub
    
    'Jeton de session
    sToken = getToken()
    If sToken = "" Then Exit Sub
    
    'Json d'appel
    Set oJson = New Dictionary
    oJson.add "Id", sDealId
    sJson = JsonConverter.ConvertToJson(oJson, Whitespace:=2)
    Set oJson = Nothing
    
    If sgWebService.postJson(cUrlApiIULMSE & "Deal/Integrate", cLoginApi, cPasswordApi, sToken, sJson, sResult) Then
        Debug.Print "Markdealasintegrated OK " & sDealId
    Else
        Debug.Print "Markdealasintegrated KO " & sDealId
    End If
    
    

End Sub






'----------------------------------------------
' M|fffd|thodes priv|fffd|es
'----------------------------------------------

'r|fffd|cup|fffd|ration du jeton de session
Private Function getToken() As String
Dim sJson As String
Dim sResult As String
Dim oJson As Dictionary

    'Conservation du token 15 min
    If sLastToken <> "" Then
        If sLastLogin = sgSpigao.domain & "|" & sgSpigao.login Then
            If DateDiff("n", dLastToken, Now) < 15 Then
                getToken = sLastToken
                Exit Function
            End If
        End If
    End If
    
    Set oJson = New Dictionary
    oJson("Domain") = sgSpigao.domain
    oJson("Username") = sgSpigao.login
    oJson("Password") = sgSpigao.password
    oJson("AccountKey") = ""
    oJson("LicenseKey") = cLoginApi
    
    sJson = JsonConverter.ConvertToJson(oJson, Whitespace:=2)
    Set oJson = Nothing
    
    If sgWebService.postJson(cUrlApiIULMSE & "Connection", cLoginApi, cPasswordApi, "", sJson, sResult) Then
        Set oJson = JsonConverter.ParseJson(sResult)
        getToken = oJson("Token")
        dLastToken = Now
        sLastLogin = sgSpigao.domain & "|" & sgSpigao.login
        sLastToken = getToken
    End If
    
End Function
Attribute VB_Name = "aStream"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private pStream As Object

'Initialisation de l'objet stream
Private Sub Class_Initialize()
    Set pStream = CreateObject("ADODB.Stream")
    pStream.Open
    pStream.position = 0
    pStream.Charset = "iso-8859-1" '"UTF-8"

    'pStream.type = 2
    
End Sub

'Ajout d'une ligne
Public Sub writeLine(d() As Variant, sDelimiter As String)
    Dim i As Integer
    Dim sLigne As String

    sLigne = Join(d, sDelimiter) & vbCrLf
    pStream.WriteText sLigne
End Sub
Public Sub writeStringLine(s As String)
    pStream.WriteText s & vbCrLf
End Sub
Public Sub saveAs(sPath As String)
    pStream.savetofile sPath, 2 'adSaveCreateOverWrite
End Sub

Public Function readfile(sPathFile As String) As String
Dim ofile As Object

    Set ofile = sgFileSystem.getFile(sPathFile)
    Set pStream = ofile.OpenAsTextStream(ForReading)
    While Not pStream.AtEndOfStream
        If readfile <> "" Then readfile = readfile & vbCrLf
        readfile = readfile & pStream.ReadLine
    Wend

End Function

Public Function getText() As String

Dim readfile As String

    'getText = pStream.ReadText()
    While Not pStream.AtEndOfStream
        If readfile <> "" Then readfile = readfile & vbCrLf
        readfile = readfile & pStream.ReadLine
    Wend

    getText = readfile

End Function



Public Function loadStreamFromFile(sPath As String) As Object
Dim ofile As Object

    Set ofile = sgFileSystem.getFile(sPath)
    Set pStream = ofile.OpenAsTextStream(ForReading)
    
    Set loadStreamFromFile = pStream
    
End Function

Public Sub closeStream()
    If Not pStream Is Nothing Then pStream.Close
End Sub

Private Sub Class_Terminate()
On Error Resume Next
    If Not pStream Is Nothing Then pStream.Close
End Sub
Attribute VB_Name = "aWebService"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

'Classe d'ex|fffd|cution des requ|fffd|tes en webservice

Private pHttp As Object


Private Function getHttp() As Object
    If pHttp Is Nothing Then
        Set pHttp = CreateObject("MSXML2.ServerXMLHTTP")
    End If
    Set getHttp = pHttp
End Function


Public Function getJson(sWsUrl As String, sWsLogin As String, sWsPassword As String, sToken As String, ByRef sResult As String) As Boolean
On Error GoTo fin

    sResult = ""
    getHttp.Open "GET", sWsUrl, False, sWsLogin, sWsPassword
    If sToken <> "" Then getHttp.setRequestHeader "X-IULM_SE-Token", sToken
    getHttp.Send ""
    
    ' En cas de r|fffd|ussite, le code renvoy|fffd| est 200
    If getHttp.Status = 200 Then
        getJson = True
        sResult = getHttp.responseText
    ElseIf getHttp.Status = 401 Then 'Erreur d'authentification
        getJson = False
        sResult = "Erreur d'authentification - " & getHttp.responseText
    ElseIf getHttp.Status = 400 Then 'erreur de requ|fffd|te
        getJson = False
        sResult = "Requ|fffd|te invalide - " & getHttp.responseText
    Else 'Erreur technique
        getJson = False
        sResult = "Erreur technique - " & getHttp.responseText
    End If

    Exit Function
fin:
    getJson = False
    If Err Then sResult = "Erreur d'acc|fffd|s au webservice SPIGAO : " & Err.Description
    
End Function


Public Function postJson(sWsUrl As String, sWsLogin As String, sWsPassword As String, sToken As String, sJson As String, ByRef sResult As String) As Boolean

On Error GoTo fin

    postJson = False
    sResult = ""
    
    ' Lecture du flux
    getHttp.Open "POST", sWsUrl, , sWsLogin, sWsPassword
    getHttp.setRequestHeader "Content-type", "application/json"
    getHttp.setRequestHeader "Accept", "application/json"
    If sToken <> "" Then getHttp.setRequestHeader "X-IULM_SE-Token", sToken
    getHttp.Send sJson
    
    ' En cas de r|fffd|ussite, le code renvoy|fffd| est 200
    If (getHttp.Status <> 200) Then
        sResult = "BAD REQUEST " & getHttp.responseText
    Else
        sResult = getHttp.responseText
        postJson = True
    End If

    
fin:

    If Err Then
        sResult = "Erreur sur post API : " & Err.Description
        postJson = False
    End If
End Function
Attribute VB_Name = "aXml"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private pXmlDoc As Object
Private pFilePath As String


Private Sub Class_Initialize()
    Set pXmlDoc = CreateObject("Microsoft.XMLDOM")
End Sub

Public Property Let path(sPath As String)
    pFilePath = sPath
End Property

'Chargement depuis fichier
Public Function LoadFromFile(sPath As String) As Boolean
On Error GoTo fin


    Set pXmlDoc = Nothing
    Set pXmlDoc = CreateObject("Microsoft.XMLDOM")
    pFilePath = sPath
    
    If sgFileSystem.FileExists(pFilePath) Then
        pXmlDoc.Load pFilePath
        If Not pXmlDoc Is Nothing Then LoadFromFile = True
    End If
    
fin:
    If Err Then LoadFromFile = False
End Function

'Chargement depuis String
Public Function LoadFromString(s As String) As Boolean
On Error GoTo fin

    Set pXmlDoc = Nothing
    Set pXmlDoc = CreateObject("Microsoft.XMLDOM")
    
    pXmlDoc.LoadXML s

    If Not pXmlDoc Is Nothing Then LoadFromString = True
fin:
    If Err Then LoadFromString = False
End Function

'Chargement depuis Node
Public Function LoadFromNode(oNode As Object) As Boolean
On Error GoTo fin


    Set pXmlDoc = Nothing
    Set pXmlDoc = oNode.OwnerDocument

    If Not pXmlDoc Is Nothing Then LoadFromNode = True

    
fin:
    If Err Then LoadFromNode = False
End Function

'Enregistrement
Public Function save() As Boolean
On Error GoTo fin
Dim sFolderPath As String
    
    If pFilePath = "" Then Exit Function
    
    'verif si r|fffd|pertoire parent est cr|fffd||fffd|
    sFolderPath = sgFileSystem.getFolderPathFromFilePath(pFilePath)
    If Not sgFileSystem.FolderExists(sFolderPath) Then sgFileSystem.createFolderRecurse (sFolderPath)
    
    'Enregistrement
    pXmlDoc.save pFilePath

    If sgFileSystem.FileExists(pFilePath) Then save = True

fin:
    If Err Then save = False
End Function

'Enregistrement cibl|fffd|.
Public Function saveAs(sPath As String) As Boolean

    pFilePath = sPath
    saveAs = save

End Function

'Lecture d'|fffd|l|fffd|ments & attributs
Public Function getNodeFromRoot(sFilter As String) As Object
    Set getNodeFromRoot = Nothing
    On Error Resume Next
    Set getNodeFromRoot = pXmlDoc.SelectSingleNode(sFilter)

End Function
Public Function getNodesFromRoot(sFilter As String) As Object
    Set getNodesFromRoot = Nothing
    On Error Resume Next
    Set getNodesFromRoot = pXmlDoc.SelectNodes(sFilter)
End Function

Public Function getNode(sNodeParent As Object, sFilter As String) As Object
    Set getNode = Nothing
    On Error Resume Next
    Set getNode = sNodeParent.SelectSingleNode(sFilter)

End Function
Public Function getNodes(sNodeParent As Object, sFilter As String) As Object
    Set getNodes = Nothing
    On Error Resume Next
    Set getNodes = sNodeParent.SelectNodes(sFilter)
End Function

Public Function getAttributValue(oNodeParent As Object, sAttributName As String) As String
On Error GoTo fin
Dim oAtt As Object
    Set oAtt = oNodeParent.SelectSingleNode("@" & sAttributName)
    If Not oAtt Is Nothing Then getAttributValue = oAtt.nodetypedvalue
fin:
    If Err Then getAttributValue = ""
End Function

'creation
Public Function createNodeFromRoot(sFilter As String) As Object

    Set createNodeFromRoot = createNode(pXmlDoc, sFilter)
    
End Function
Public Function createNode(oNodeParent As Object, sFilter As String) As Object
Dim oNode As Object
Dim oNextNode As Object
Dim sCurrentFilter As String
Dim sRestFilter As String

Dim i As Integer

    If sFilter = "" Then
        Set createNode = oNodeParent
        Exit Function
    End If
    
    If InStr(sFilter, "/") > 0 Then
        sCurrentFilter = Left(sFilter, InStr(sFilter, "/") - 1)
        sRestFilter = Mid(sFilter, InStr(sFilter, "/") + 1)
    Else
        sCurrentFilter = sFilter
        sRestFilter = ""
    End If

    Set oNextNode = getNode(oNodeParent, sCurrentFilter)
    If oNextNode Is Nothing Then 'on le cr|fffd||fffd|
        Set oNextNode = oNodeParent.OwnerDocument.createElement(sCurrentFilter)
        oNodeParent.appendChild oNextNode
    End If
    
    If sRestFilter <> "" Then
        Set createNode = createNode(oNextNode, sRestFilter)
    Else
        Set createNode = oNextNode
    End If
    
End Function

'Modifications
Public Function setNodeValueFromRoot(sFilter As String, sValue As Variant)
Dim pN As Object

    Set pN = createNode(pXmlDoc, sFilter)
    If Not pN Is Nothing Then
        pN.nodetypedvalue = sValue
    End If
End Function

Public Function setAttributValueFromNode(oNode As Object, sAttributName As String, sValue As Variant)

Dim oAtt As Object
    Set oAtt = oNode.SelectSingleNode("@" & sAttributName)
    
    If Not oAtt Is Nothing Then oAtt.nodetypedvalue = sValue

    
End Function
Attribute VB_Name = "aregularexpression"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private pRegex As Object

Public Function matchPattern(sExpression As String, sPattern As String) As Boolean
On Error GoTo fin
    Set pRegex = CreateObject("vbscript.regexp")
    pRegex.Pattern = sPattern
    matchPattern = pRegex.test(sExpression)
    
fin:
    Set pRegex = Nothing
    If Err Then Err.clear
End Function

Public Function extractFirstPattern(sExpression As String, sPattern As String, iSubMatchIndex As Integer) As String
On Error GoTo fin
Dim pRegex As Object
Dim oMatches As Object
Dim oMatch As Object

    Set pRegex = CreateObject("vbscript.regexp")
    pRegex.Global = True
    pRegex.Pattern = sPattern
    
    Set oMatches = pRegex.Execute(sExpression)
    If oMatches.count > 0 Then
        Set oMatch = oMatches(0)
        extractFirstPattern = oMatch.SubMatches(iSubMatchIndex)
    End If
    
fin:
    Set pRegex = Nothing
End Function


Public Function replacePattern(sExpression As String, sPattern As String, sReplacement As String) As String
On Error GoTo fin
    Set pRegex = CreateObject("vbscript.regexp")
    pRegex.Pattern = sPattern
    replacePattern = pRegex.Replace(sExpression, sReplacement)
fin:
    Set pRegex = Nothing
End Function


Attribute VB_Name = "cDeal"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private pActivities As Collection
Private pCaption As String
Private pContractorAddress As String
Private pContractorAddressCedex As String
Private pContractorAddressCountry As String
Private pContractorAddressMailAddress As String
Private pContractorAddressPostalCode As String
Private pContractorAddressStreet1 As String
Private pContractorAddressStreet2 As String
Private pContractorAddressTown As String
Private pContractor As String
Private pContractorId As String
Private pContractorName As String
Private pContractorRegistrationNumber As String
Private pContractorShortName As String
Private pContractorWebSite As String
Private pDCEFiles As Collection
Private pDIE As String
Private pDIELastModifiedOn As String
Private pDIEPublishedOn As String
Private pDIEStatus As String
Private pDeadLine As Date
Private pId As String
Private pIsPrivate As String
Private pIsRestricted As String
Private pLastModifiedOn As String
Private pLot As String
Private pLotCaption As String
Private pLotReference As String
Private pLotSubject As String
Private pMarketType As String
Private pMarketTypeCode As String
Private pMarketTypeDesignation As String
Private pNotice As String
Private pNoticeOrigin As String
Private pNoticeOriginReference As String
Private pProcedureType As String
Private pProcedureTypeCode As String
Private pProcedureTypeDesignation As String
Private pPublishedOn As String
Private pReference As String
Private pStatus As String
Private pSubject As String
Private pSupervisor As String
Private pSupervisorAddress As String
Private pSupervisorId As String
Private pSupervisorName As String
Private pSupervisorRegistrationNumber As String
Private pSupervisorShortName As String
Private pSupervisorWebSite As String
Private pTender As String
Private pTenderCaption As String
Private pTenderReference As String
Private pTenderSubject As String
Private pTerritories As Collection


Public Property Get Activities() As Collection
   Set Activities = pActivities
End Property

Public Property Get Caption() As String
   Caption = pCaption
End Property
Public Property Get ContractorAddress() As String
   ContractorAddress = pContractorAddress
End Property
Public Property Get ContractorAddressCedex() As String
   ContractorAddressCedex = pContractorAddressCedex
End Property
Public Property Get ContractorAddressCountry() As String
   ContractorAddressCountry = pContractorAddressCountry
End Property
Public Property Get ContractorAddressMailAddress() As String
   ContractorAddressMailAddress = pContractorAddressMailAddress
End Property
Public Property Get ContractorAddressPostalCode() As String
   ContractorAddressPostalCode = pContractorAddressPostalCode
End Property
Public Property Get ContractorAddressStreet1() As String
   ContractorAddressStreet1 = pContractorAddressStreet1
End Property
Public Property Get ContractorAddressStreet2() As String
   ContractorAddressStreet2 = pContractorAddressStreet2
End Property
Public Property Get ContractorAddressTown() As String
   ContractorAddressTown = pContractorAddressTown
End Property
Public Property Get Contractor() As String
   Contractor = pContractor
End Property
Public Property Get ContractorId() As String
   ContractorId = pContractorId
End Property
Public Property Get ContractorName() As String
   ContractorName = pContractorName
End Property
Public Property Get ContractorRegistrationNumber() As String
   ContractorRegistrationNumber = pContractorRegistrationNumber
End Property
Public Property Get ContractorShortName() As String
   ContractorShortName = pContractorShortName
End Property
Public Property Get ContractorWebSite() As String
   ContractorWebSite = pContractorWebSite
End Property
Public Property Get DCEFiles() As Collection
   Set DCEFiles = pDCEFiles
End Property

Public Property Get DIE() As String
   DIE = pDIE
End Property
Public Property Get DIELastModifiedOn() As String
   DIELastModifiedOn = pDIELastModifiedOn
End Property
Public Property Get DIEPublishedOn() As String
   DIEPublishedOn = pDIEPublishedOn
End Property
Public Property Get DIEStatus() As String
   DIEStatus = pDIEStatus
End Property
Public Property Get DeadLine() As Date
   DeadLine = pDeadLine
End Property
Public Property Get Id() As String
   Id = pId
End Property
Public Property Get IsPrivate() As String
   IsPrivate = pIsPrivate
End Property
Public Property Get IsRestricted() As String
   IsRestricted = pIsRestricted
End Property
Public Property Get LastModifiedOn() As String
   LastModifiedOn = pLastModifiedOn
End Property
Public Property Get Lot() As String
   Lot = pLot
End Property
Public Property Get LotCaption() As String
   LotCaption = pLotCaption
End Property
Public Property Get LotReference() As String
   LotReference = pLotReference
End Property
Public Property Get LotSubject() As String
   LotSubject = pLotSubject
End Property
Public Property Get MarketType() As String
   MarketType = pMarketType
End Property
Public Property Get MarketTypeCode() As String
   MarketTypeCode = pMarketTypeCode
End Property
Public Property Get MarketTypeDesignation() As String
   MarketTypeDesignation = pMarketTypeDesignation
End Property
Public Property Get Notice() As String
   Notice = pNotice
End Property
Public Property Get NoticeOrigin() As String
   NoticeOrigin = pNoticeOrigin
End Property
Public Property Get NoticeOriginReference() As String
   NoticeOriginReference = pNoticeOriginReference
End Property
Public Property Get ProcedureType() As String
   ProcedureType = pProcedureType
End Property
Public Property Get ProcedureTypeCode() As String
   ProcedureTypeCode = pProcedureTypeCode
End Property
Public Property Get ProcedureTypeDesignation() As String
   ProcedureTypeDesignation = pProcedureTypeDesignation
End Property
Public Property Get PublishedOn() As String
   PublishedOn = pPublishedOn
End Property
Public Property Get Reference() As String
   Reference = pReference
End Property
Public Property Get Status() As String
   Status = pStatus
End Property
Public Property Get Subject() As String
   Subject = pSubject
End Property
Public Property Get Supervisor() As String
   Supervisor = pSupervisor
End Property
Public Property Get SupervisorAddress() As String
   SupervisorAddress = pSupervisorAddress
End Property
Public Property Get SupervisorId() As String
   SupervisorId = pSupervisorId
End Property
Public Property Get SupervisorName() As String
   SupervisorName = pSupervisorName
End Property
Public Property Get SupervisorRegistrationNumber() As String
   SupervisorRegistrationNumber = pSupervisorRegistrationNumber
End Property
Public Property Get SupervisorShortName() As String
   SupervisorShortName = pSupervisorShortName
End Property
Public Property Get SupervisorWebSite() As String
   SupervisorWebSite = pSupervisorWebSite
End Property
Public Property Get Tender() As String
   Tender = pTender
End Property
Public Property Get TenderCaption() As String
   TenderCaption = pTenderCaption
End Property
Public Property Get TenderReference() As String
   TenderReference = pTenderReference
End Property
Public Property Get TenderSubject() As String
   TenderSubject = pTenderSubject
End Property
Public Property Get Territories() As Collection
   Set Territories = pTerritories
End Property


Public Property Set Activities(oDic As Collection)
   Set pActivities = oDic
End Property

Public Property Let Caption(sValue As String)
   pCaption = sValue
End Property
Public Property Let ContractorAddress(sValue As String)
   pContractorAddress = sValue
End Property
Public Property Let ContractorAddressCedex(sValue As String)
   pContractorAddressCedex = sValue
End Property
Public Property Let ContractorAddressCountry(sValue As String)
   pContractorAddressCountry = sValue
End Property
Public Property Let ContractorAddressMailAddress(sValue As String)
   pContractorAddressMailAddress = sValue
End Property
Public Property Let ContractorAddressPostalCode(sValue As String)
   pContractorAddressPostalCode = sValue
End Property
Public Property Let ContractorAddressStreet1(sValue As String)
   pContractorAddressStreet1 = sValue
End Property
Public Property Let ContractorAddressStreet2(sValue As String)
   pContractorAddressStreet2 = sValue
End Property
Public Property Let ContractorAddressTown(sValue As String)
   pContractorAddressTown = sValue
End Property
Public Property Let Contractor(sValue As String)
   pContractor = sValue
End Property
Public Property Let ContractorId(sValue As String)
   pContractorId = sValue
End Property
Public Property Let ContractorName(sValue As String)
   pContractorName = sValue
End Property
Public Property Let ContractorRegistrationNumber(sValue As String)
   pContractorRegistrationNumber = sValue
End Property
Public Property Let ContractorShortName(sValue As String)
   pContractorShortName = sValue
End Property
Public Property Let ContractorWebSite(sValue As String)
   pContractorWebSite = sValue
End Property
Public Property Set DCEFiles(sValue As Collection)
   Set pDCEFiles = sValue
End Property

Public Property Let DIE(sValue As String)
   pDIE = sValue
End Property
Public Property Let DIELastModifiedOn(sValue As String)
   pDIELastModifiedOn = sValue
End Property
Public Property Let DIEPublishedOn(sValue As String)
   pDIEPublishedOn = sValue
End Property
Public Property Let DIEStatus(sValue As String)
   pDIEStatus = sValue
End Property
Public Property Let DeadLine(dValue As Date)
   pDeadLine = dValue
End Property
Public Property Let Id(sValue As String)
   pId = sValue
End Property
Public Property Let IsPrivate(sValue As String)
   pIsPrivate = sValue
End Property
Public Property Let IsRestricted(sValue As String)
   pIsRestricted = sValue
End Property
Public Property Let LastModifiedOn(sValue As String)
   pLastModifiedOn = sValue
End Property
Public Property Let Lot(sValue As String)
   pLot = sValue
End Property
Public Property Let LotCaption(sValue As String)
   pLotCaption = sValue
End Property
Public Property Let LotReference(sValue As String)
   pLotReference = sValue
End Property
Public Property Let LotSubject(sValue As String)
   pLotSubject = sValue
End Property
Public Property Let MarketType(sValue As String)
   pMarketType = sValue
End Property
Public Property Let MarketTypeCode(sValue As String)
   pMarketTypeCode = sValue
End Property
Public Property Let MarketTypeDesignation(sValue As String)
   pMarketTypeDesignation = sValue
End Property
Public Property Let Notice(sValue As String)
   pNotice = sValue
End Property
Public Property Let NoticeOrigin(sValue As String)
   pNoticeOrigin = sValue
End Property
Public Property Let NoticeOriginReference(sValue As String)
   pNoticeOriginReference = sValue
End Property
Public Property Let ProcedureType(sValue As String)
   pProcedureType = sValue
End Property
Public Property Let ProcedureTypeCode(sValue As String)
   pProcedureTypeCode = sValue
End Property
Public Property Let ProcedureTypeDesignation(sValue As String)
   pProcedureTypeDesignation = sValue
End Property
Public Property Let PublishedOn(sValue As String)
   pPublishedOn = sValue
End Property
Public Property Let Reference(sValue As String)
   pReference = sValue
End Property
Public Property Let Status(sValue As String)
   pStatus = sValue
End Property
Public Property Let Subject(sValue As String)
   pSubject = sValue
End Property
Public Property Let Supervisor(sValue As String)
   pSupervisor = sValue
End Property
Public Property Let SupervisorAddress(sValue As String)
   pSupervisorAddress = sValue
End Property
Public Property Let SupervisorId(sValue As String)
   pSupervisorId = sValue
End Property
Public Property Let SupervisorName(sValue As String)
   pSupervisorName = sValue
End Property
Public Property Let SupervisorRegistrationNumber(sValue As String)
   pSupervisorRegistrationNumber = sValue
End Property
Public Property Let SupervisorShortName(sValue As String)
   pSupervisorShortName = sValue
End Property
Public Property Let SupervisorWebSite(sValue As String)
   pSupervisorWebSite = sValue
End Property
Public Property Let Tender(sValue As String)
   pTender = sValue
End Property
Public Property Let TenderCaption(sValue As String)
   pTenderCaption = sValue
End Property
Public Property Let TenderReference(sValue As String)
   pTenderReference = sValue
End Property
Public Property Let TenderSubject(sValue As String)
   pTenderSubject = sValue
End Property
Public Property Set Territories(sValue As Collection)
   Set pTerritories = sValue
End Property



Public Property Let dceUrl(sValue As String)
    
End Property
Public Property Get dceUrl() As String

End Property

Public Property Get departements() As String

End Property
Public Property Get hasDceUrl() As Boolean
    
End Property
Attribute VB_Name = "cDealBuilder"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Public Function buildByIDeal(oIDeal As Object) As cDeal

    Dim oDeal As cDeal
    
    If oIDeal Is Nothing Then
        Set buildByIDeal = Nothing
        Exit Function
    End If
    
    Set oDeal = New cDeal
    
    oDeal.Caption = oIDeal.Caption
    oDeal.ContractorName = oIDeal.Contractor.name
    oDeal.DeadLine = CDate(oIDeal.DeadLine)
    
    oDeal.Id = oIDeal.Id
    
    oDeal.dceUrl = sgSpigao.Detection.WebSite.GetDCEFilePageUrl(oIDeal.Id)
    
    Set buildByIDeal = oDeal
    
End Function

Public Function buildByDealSummary(oDealSummary As Object) As cDeal

 Dim oDeal As cDeal
    
    If oDealSummary Is Nothing Then
        Set buildByDealSummary = Nothing
        Exit Function
    End If
    
    Set oDeal = New cDeal
    
    oDeal.Caption = oDealSummary.Caption
    oDeal.ContractorName = oDealSummary.ContractorName
    oDeal.DeadLine = CDate(oDealSummary.DeadLine)
'    oDeal.departements = oDealSummary.departements
    oDeal.Id = oDealSummary.Id
    oDeal.dceUrl = sgSpigao.getDceUrl(oDealSummary.Id)
    oDeal.ProcedureType = oDealSummary.ProcedureType
'    oDeal.referenceMoa = oDealSummary.Reference
    
    Set buildByDealSummary = oDeal

End Function

Public Function buildByJson(sJson As String) As cDeal
    Dim oJson As Dictionary
    Dim oDeal As cDeal
    Dim dDatas As New Dictionary
    Dim sKey As Variant
    
    Set oDeal = New cDeal
    
    Set oJson = JsonConverter.ParseJson(sJson)

    If oJson Is Nothing Then Exit Function

    Set oDeal.Activities = oJson("Activities")
    oDeal.Caption = oJson("Caption")
    oDeal.ContractorAddressCedex = IfNull(oJson("Contractor")("Address")("Cedex"), "")
    oDeal.ContractorAddressCountry = IfNull(oJson("Contractor")("Address")("Country"), "")
    oDeal.ContractorAddressMailAddress = IfNull(oJson("Contractor")("Address")("MailAddress"), "")
    oDeal.ContractorAddressPostalCode = IfNull(oJson("Contractor")("Address")("PostalCode"), "")
    oDeal.ContractorAddressStreet1 = IfNull(oJson("Contractor")("Address")("Street1"), "")
    oDeal.ContractorAddressStreet2 = IfNull(oJson("Contractor")("Address")("Street2"), "")
    oDeal.ContractorAddressTown = IfNull(oJson("Contractor")("Address")("Town"), "")
    oDeal.ContractorId = oJson("Contractor")("Id")
    oDeal.ContractorName = IfNull(oJson("Contractor")("Name"), "")
    oDeal.ContractorRegistrationNumber = IfNull(oJson("Contractor")("RegistrationNumber"), "")
    oDeal.ContractorShortName = oJson("Contractor")("ShortName")
    oDeal.ContractorWebSite = IfNull(oJson("Contractor")("WebSite"), "")
    Set oDeal.DCEFiles = oJson("DCEFiles")
    
    oDeal.DIELastModifiedOn = IfNull(oJson("DIE")("LastModifiedOn"), "")
    oDeal.DIEPublishedOn = IfNull(oJson("DIE")("PublishedOn"), "")
    oDeal.DIEStatus = IfNull(oJson("DIE")("Status"), "")
    oDeal.DeadLine = cStoD(oJson("DeadLine"))
    oDeal.Id = oJson("Id")
    oDeal.IsPrivate = IfNull(oJson("IsPrivate"), "")
    oDeal.IsRestricted = IfNull(oJson("IsRestricted"), "")
    oDeal.LastModifiedOn = IfNull(oJson("LastModifiedOn"), "")
    oDeal.LotCaption = IfNull(oJson("Lot")("Caption"), "")
    oDeal.LotReference = IfNull(oJson("Lot")("Reference"), "")
    oDeal.LotSubject = IfNull(oJson("Lot")("Subject"), "")
    oDeal.MarketTypeCode = oJson("MarketType")("Code")
    oDeal.MarketTypeDesignation = oJson("MarketType")("Designation")
    oDeal.NoticeOrigin = IfNull(oJson("Notice")("Origin"), "")
    oDeal.NoticeOriginReference = IfNull(oJson("Notice")("OriginReference"), "")
    oDeal.ProcedureTypeCode = oJson("ProcedureType")("Code")
    oDeal.ProcedureTypeDesignation = oJson("ProcedureType")("Designation")
    oDeal.PublishedOn = oJson("PublishedOn")
    oDeal.Reference = oJson("Reference")
    oDeal.Status = oJson("Status")
    oDeal.Subject = oJson("Subject")
    oDeal.SupervisorAddress = IfNull(oJson("Supervisor")("Address"), "")
    oDeal.SupervisorId = IfNull(oJson("Supervisor")("Id"), "")
    oDeal.SupervisorName = IfNull(oJson("Supervisor")("Name"), "")
    oDeal.SupervisorRegistrationNumber = IfNull(oJson("Supervisor")("RegistrationNumber"), "")
    oDeal.SupervisorShortName = IfNull(oJson("Supervisor")("ShortName"), "")
    oDeal.SupervisorWebSite = IfNull(oJson("Supervisor")("WebSite"), "")
    oDeal.TenderCaption = oJson("Tender")("Caption")
    oDeal.TenderReference = oJson("Tender")("Reference")
    oDeal.TenderSubject = oJson("Tender")("Subject")
    
    Set oDeal.Territories = oJson("Territories")

    Set buildByJson = oDeal

End Function

Attribute VB_Name = "cDealFolder"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit


Public Function create(sPath As String) As Boolean
On Error GoTo fin

    'On le cr|fffd||fffd| s'il n'existe pas
    If Not sgFileSystem.FolderExists(sPath) Then
        sgFileSystem.createFolderRecurse sPath
    End If
    

    'On copie le contenu du template dedans.
    sgFileSystem.copyFolder sgEnvironnement.templateFolderPath, sPath

    create = True
fin:
    If Err Then
        MsgBox "Erreur lors de la cr|fffd|ation du r|fffd|pertoire d'affaire : " & vbCrLf & Err.Description
        create = False
    End If
End Function
Attribute VB_Name = "cEnvironnement"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit


Private pProgramDataPath As String
Private pAppDataPath As String



Private Sub Class_Initialize()
Dim sPath As String
Dim sPathPgData As String
Dim objshell As Object

    Set objshell = CreateObject("Shell.Application")
    pProgramDataPath = objshell.Namespace(&H23&).Self.path
    pAppDataPath = objshell.Namespace(&H1A&).Self.path
    
    Set objshell = Nothing

    'On s'assure de l'existence du r|fffd|pertoire mod|fffd|le de dossier
    sPath = sgFileSystem.joinPath(pAppDataPath, "Edisys\ConnecteurExcelVba\Template\Folder")
    If Not sgFileSystem.FolderExists(sPath) Then
        sgFileSystem.createFolderRecurse sPath
        sPathPgData = sgFileSystem.joinPath(pProgramDataPath, "Edisys\ConnecteurExcelVba\Template\Folder")
        If sgFileSystem.FolderExists(sPathPgData) Then sgFileSystem.Engine.copyFolder sPathPgData, sPath, True
    End If
    
End Sub
Public Property Get programDataIulmPath() As String
    programDataIulmPath = sgFileSystem.joinPath(pProgramDataPath, "Edisys\IULM\")
End Property
Public Property Get programDataExcelConnectorPath() As String
    programDataExcelConnectorPath = sgFileSystem.joinPath(pProgramDataPath, "Edisys\ConnecteurExcelVba")
End Property
Public Property Get appDataExcelConnectorPath() As String
    appDataExcelConnectorPath = sgFileSystem.joinPath(pAppDataPath, "Edisys\ConnecteurExcelVba")
End Property

Public Property Get templateStudyPath() As String
    templateStudyPath = programDataExcelConnectorPath & "\Template"
End Property

Public Property Get templateConsultationFullPath() As String
    templateConsultationFullPath = sgFileSystem.joinPath(templateStudyPath, "TemplateConsultation.xltx")
End Property

Public Property Get templateStubPath() As String
    templateStubPath = sgFileSystem.joinPath(templateStudyPath, "Demo")
End Property

Public Property Get configExcelConnectorFullPath() As String
    configExcelConnectorFullPath = sgFileSystem.joinPath(appDataExcelConnectorPath, "ConnecteurExcelVba.config")
End Property

Public Property Get configExcelConnectorProgramDataFullPath() As String
    configExcelConnectorProgramDataFullPath = sgFileSystem.joinPath(programDataExcelConnectorPath, "ConnecteurExcelVba.config")
End Property


Public Property Get templateFolderPath() As String
    templateFolderPath = sgFileSystem.joinPath(pAppDataPath, "Edisys\ConnecteurExcelVba\Template\Folder")
End Property

Public Property Get templateDemoStubForExcelConnectorPath() As String
    templateDemoStubForExcelConnectorPath = sgFileSystem.joinPath(pProgramDataPath, "Edisys\ConnecteurExcelVba\Template\Demo")
End Property
Public Property Get configIulmAppDataFullPath() As String
    configIulmAppDataFullPath = sgFileSystem.joinPath(pAppDataPath, "Edisys\Iulm\Iulm.config")
End Property

Public Property Get configIulmProgramDataFullPath() As String
    configIulmProgramDataFullPath = sgFileSystem.joinPath(programDataExcelConnectorPath, "Iulm.config")
End Property
Attribute VB_Name = "cSpigaoConfiguration"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Const cstDefaultConfig As String = "<?xml version = ""1.0""?><DemoCnf><RepoFolderPath/><DieFolderName>SPIGAO</DieFolderName><StudyFolderName></StudyFolderName><SheetStudyName>Spigao</SheetStudyName><SheetConsultationName>Consultation</SheetConsultationName><SheetSyntheseName>SpigaoCumul</SheetSyntheseName></DemoCnf>"
Private Const cstDefaultTemplateForStudyName As String = "TemplateSpigao.spigao"

Public Property Get IsConfigured() As Boolean
    IsConfigured = False
    If sgFileSystem.FileExists(sgEnvironnement.configExcelConnectorFullPath) Then IsConfigured = True
End Property

'Premier chargement de config = premier usage du connecteur Excel sur le poste
Private Sub FirstConfiguration()

    '1- Recopie du fichier de config par d|fffd|faut
    sgFileSystem.copyFile sgEnvironnement.configExcelConnectorProgramDataFullPath, sgEnvironnement.configExcelConnectorFullPath
    
    '2- D|fffd|sactivation des macros Edisys si la conf de base le permet
    If sgSpigaoConfiguration.DisableDeprecatedVersion_Allowed Then sgExcelApplication.ToggleScribeAddin_Enabled False

End Sub

Private Function GetConfParam(sParam As String) As String
Dim mdoc As New aXml
Dim myNode As Object

    If Not IsConfigured Then FirstConfiguration

    If sgFileSystem.FileExists(sgEnvironnement.configExcelConnectorFullPath) Then 'Chargement conf par defaut des programdata
        mdoc.LoadFromFile sgEnvironnement.configExcelConnectorFullPath
    Else
        MsgBox "Erreur lors du chargement de la configuration. Contactez le support SPIGAO"
    End If
    
    Set myNode = mdoc.getNodeFromRoot("//" & sParam)
    If Not myNode Is Nothing Then
        GetConfParam = myNode.nodetypedvalue
    End If
    
fin:
    Set mdoc = Nothing
End Function


Private Function SetConfParam(sParam As String, sValue As String) As String
On Error Resume Next
Dim mdoc As New aXml
Dim myNode As Object


    If sgFileSystem.FileExists(sgEnvironnement.configExcelConnectorFullPath) Then
        mdoc.LoadFromFile (sgEnvironnement.configExcelConnectorFullPath)
    ElseIf sgFileSystem.FileExists(sgEnvironnement.configExcelConnectorProgramDataFullPath) Then
        mdoc.LoadFromFile (sgEnvironnement.configExcelConnectorProgramDataFullPath)
    Else
        mdoc.LoadFromString (cstDefaultConfig)
    End If
    
    Set myNode = mdoc.getNodeFromRoot("DemoCnf/" & sParam)
    mdoc.setNodeValueFromRoot "DemoCnf/" & sParam, sValue
    mdoc.saveAs sgEnvironnement.configExcelConnectorFullPath
  
fin:

End Function

'----------------------------------------------
' Rep de stockage par d|fffd|faut des affaires
Public Property Get RepoFolderPath() As String
Dim sPath As String
    sPath = GetConfParam("RepoFolderPath")
    If Not sgFileSystem.FolderExists(sPath) Then
        RepoFolderPath = ""
    Else
        RepoFolderPath = sPath
    End If
End Property

Public Property Let RepoFolderPath(sValue As String)
    SetConfParam "RepoFolderPath", sValue
End Property

'----------------------------------------------------
' Derni|fffd|re version utilis|fffd|e
Public Property Get LastVersionUsed() As String
    LastVersionUsed = GetConfParam("LastVersionUsed")
End Property
Public Property Let LastVersionUsed(sValue As String)
    SetConfParam "LastVersionUsed", sValue
End Property


'----------------------------------------------------
'Nom donn|fffd| au r|fffd|pertoire contenant le DIE
Public Property Get DieFolderName() As String
    DieFolderName = GetConfParam("DieFolderName")
End Property

Public Property Let DieFolderName(sValue As String)
    SetConfParam "DieFolderName", sValue
End Property

'----------------------------------------------------
'Nom donn|fffd| au r|fffd|pertoire DCE
Public Property Get DceFolderName() As String
    DceFolderName = GetConfParam("DceFolderName")
End Property
Public Property Let DceFolderName(sValue As String)
    SetConfParam "DceFolderName", sValue
End Property

'----------------------------------------------------
' Nom donn|fffd| au r|fffd|pertoire soumission
Public Property Get SubmitFolderName() As String
    SubmitFolderName = GetConfParam("SubmitFolderName")
End Property
Public Property Let SubmitFolderName(sValue As String)
    SetConfParam "SubmitFolderName", sValue
End Property

'----------------------------------------------------
' Nom du r|fffd|pertoire contenant l'|fffd|tude
Public Property Get StudyFolderName() As String
    StudyFolderName = GetConfParam("StudyFolderName")
End Property
Public Property Let StudyFolderName(sValue As String)
    SetConfParam "StudyFolderName", sValue
End Property

'----------------------------------------------------
' Nom de la feuille d'|fffd|tude
' TODO |fffd| d|fffd|gager, s'appuyer sur le IsSpigaoBoq
Public Property Get SheetStudyName() As String
    SheetStudyName = GetConfParam("SheetStudyName")
End Property
Public Property Let SheetStudyName(sValue As String)
    SetConfParam "SheetStudyName", sValue
End Property

'----------------------------------------------------
' Nom de la feuille de synthese
Public Property Get SheetSyntheseName() As String
    SheetSyntheseName = GetConfParam("SheetSyntheseName")
    If SheetSyntheseName = "" Then SheetSyntheseName = "SpigaoCumul"
End Property

'----------------------------------------------------
' Nom de la feuille de consultation
Public Property Get templateForConsultationName() As String
    templateForConsultationName = "TemplateConsultation.spigao"
End Property
Public Property Get templateForConsultationPath() As String
    templateForConsultationPath = sgFileSystem.joinPath(sgEnvironnement.templateStudyPath, templateForConsultationName)
End Property
Public Property Get SheetConsultationName() As String
    SheetConsultationName = GetConfParam("SheetConsultationName")
    If SheetConsultationName = "" Then SheetConsultationName = "Consultation"
End Property

'----------------------------------------------------
' Date de derni|fffd|re v|fffd|rif de la version
Public Property Get LastVersionCheck() As Date
Dim sDate As String
    sDate = GetConfParam("LastVersionCheck")
    If sDate = "" Then
        LastVersionCheck = #1/1/2001#
    Else
        LastVersionCheck = CDate(sDate)
    End If
End Property
Public Property Let LastVersionCheck(sValue As Date)
    SetConfParam "LastVersionCheck", Format(sValue, "dd/mm/yyyy hh:mm:ss")
End Property

'----------------------------------------------------
' Nombre de lignes par row ins|fffd|r|fffd|s
' TODO |fffd| basculer dans la gestion des personnalisations
Public Property Get RowsStep() As Integer
Dim s As String
    s = GetConfParam("RowsStep")
    If s = "" Then
        RowsStep = 1
    Else
        RowsStep = CInt(s)
    End If
    
End Property
Public Property Let RowsStep(iStep As Integer)
    SetConfParam "RowsStep", CStr(iStep)
End Property

'----------------------------------------------------
' Mod|fffd|le de devis perso
Public Property Get TemplateForStudyName() As String
Dim s As String
    s = GetConfParam("TemplateSpigaoWorkbookName")
    If s = "" Or s = "TemplateSpigao.xltx" Then
        TemplateForStudyName = cstDefaultTemplateForStudyName
    Else
        TemplateForStudyName = s
    End If
End Property
Public Property Let TemplateForStudyName(sName As String)
    SetConfParam "TemplateSpigaoWorkbookName", sName
End Property
Public Property Get templateForStudyPath() As String
    templateForStudyPath = sgFileSystem.joinPath(sgEnvironnement.templateStudyPath, TemplateForStudyName)
End Property


'Indique si on a param|fffd|tr|fffd| un template de devis sp|fffd|cifique.
Public Property Get hasSpecificTemplateForStudy() As Boolean
    hasSpecificTemplateForStudy = (TemplateForStudyName <> cstDefaultTemplateForStudyName)
End Property
'reset
Public Function resetTemplateForStudyNameToDefaultValue()
    SetConfParam "TemplateSpigaoWorkbookName", cstDefaultTemplateForStudyName
End Function


'----------------------------------------------------
' Mode Chaf
Public Property Get IsChafVersion() As Boolean
    IsChafVersion = (GetConfParam("IsDemoVersion") <> "") And (GetConfParam("IsDemoVersion") <> "False")
End Property
Public Property Let IsChafVersion(bValue As Boolean)
    If bValue Then
        SetConfParam "IsDemoVersion", "True"
    Else
        SetConfParam "IsDemoVersion", "False"
    End If
End Property
'----------------------------------------------------
' Gestion des d|fffd|tection de DIE excel |fffd| l'ancien format
Public Property Get OldDieVersionDetection_Disabled() As Boolean
    OldDieVersionDetection_Disabled = (LCase(GetConfParam("OldVersionDetectionDisabled")) = "true")
End Property

Public Property Let OldDieVersionDetection_Disabled(bValue As Boolean)
    If bValue Then
        SetConfParam "OldVersionDetectionDisabled", "True"
    Else
        SetConfParam "OldVersionDetectionDisabled", "False"
    End If
End Property

'----------------------------------------------------
'Conf des maj automatiques d|fffd|sactiv|fffd|es
Public Property Get CheckForUpdateAutomatically_Disabled() As Boolean
    CheckForUpdateAutomatically_Disabled = (GetConfParam("CheckForUpdateAutomatically_Disabled") = "True")
End Property
Public Property Let CheckForUpdateAutomatically_Disabled(bValue As Boolean)
    If bValue Then
        SetConfParam "CheckForUpdateAutomatically_Disabled", "True"
    Else
        SetConfParam "CheckForUpdateAutomatically_Disabled", "False"
        LastVersionCheck = #1/1/2001#
    End If
End Property
'Conf masquage des totaux de chapitre
Public Property Get HideChapterTotal_Disabled() As Boolean
    HideChapterTotal_Disabled = (GetConfParam("HideChapterTotal_Disabled") = "True")
End Property
Public Property Let HideChapterTotal_Disabled(bValue As Boolean)
    
    If bValue Then
        SetConfParam "HideChapterTotal_Disabled", "True"
    Else
        SetConfParam "HideChapterTotal_Disabled", "False"
    End If
End Property
'Conf des r|fffd|activation d'anciennes version macro EDISYS
'DisableDeprecatedVersionAutomatically_Allowed = bloque la d|fffd|sactivation par d|fffd|faut des macros Edisys lors de la premi|fffd|re install (utile pour Colas)
Public Property Get DisableDeprecatedVersion_Allowed() As Boolean
    DisableDeprecatedVersion_Allowed = (GetConfParam("DisableDeprecatedVersion_Allowed") = "True")
End Property
Public Property Let DisableDeprecatedVersion_Allowed(bValue As Boolean)
    If bValue Then
        SetConfParam "DisableDeprecatedVersion_Allowed", "True"
    Else
        SetConfParam "DisableDeprecatedVersion_Allowed", "False"
    End If
End Property
Public Property Get LastDeprecatedMacrosEnabled() As Date
Dim sDate As String
    sDate = GetConfParam("LastDeprecatedVersionEnabled")
    If sDate = "" Then
        LastDeprecatedMacrosEnabled = #1/1/2001#
    Else
        LastDeprecatedMacrosEnabled = CDate(sDate)
    End If
End Property
Public Property Let LastDeprecatedMacrosEnabled(sValue As Date)
    SetConfParam "LastDeprecatedVersionEnabled", Format(sValue, "dd/mm/yyyy hh:mm:ss")
End Property

'---------------------------------------------------------------
' Extension Progapwin
Public Property Get IsExtensionProgapWinEnabled() As Boolean
    IsExtensionProgapWinEnabled = (GetConfParam("IsProgapWinExtensionEnabled") = "True")
End Property

Public Property Let IsExtensionProgapWinEnabled(bValue As Boolean)
    If bValue Then
        SetConfParam "IsProgapWinExtensionEnabled", "True"
    Else
        SetConfParam "IsProgapWinExtensionEnabled", "False"
    End If
End Property


'---------------------------------------------------------------
' Extension Onaya facturation
Public Property Get IsExtensionOnayaFacturationEnabled() As Boolean
    IsExtensionOnayaFacturationEnabled = (GetConfParam("IsExtensionOnayaFacturationEnabled") = "True")
End Property

Public Property Let IsExtensionOnayaFacturationEnabled(bValue As Boolean)
    If bValue Then
        SetConfParam "IsExtensionOnayaFacturationEnabled", "True"
    Else
        SetConfParam "IsExtensionOnayaFacturationEnabled", "False"
    End If
End Property

'---------------------------------------------------------------
' Extension QDV6
Public Property Get IsExtensionQDV6Enabled() As Boolean
    IsExtensionQDV6Enabled = (GetConfParam("IsExtensionQDV6Enabled") = "True")
End Property

Public Property Let IsExtensionQDV6Enabled(bValue As Boolean)
    If bValue Then
        SetConfParam "IsExtensionQDV6Enabled", "True"
    Else
        SetConfParam "IsExtensionQDV6Enabled", "False"
    End If
End Property

'---------------------------------------------------------------
' Extension Amiprix
Public Property Get IsExtensionAmiprixEnabled() As Boolean
    IsExtensionAmiprixEnabled = (GetConfParam("IsExtensionAmiprixEnabled") = "True")
End Property

Public Property Let IsExtensionAmiprixEnabled(bValue As Boolean)
    If bValue Then
        SetConfParam "IsExtensionAmiprixEnabled", "True"
    Else
        SetConfParam "IsExtensionAmiprixEnabled", "False"
    End If
End Property



'**********************************************************************
' Planning
'**********************************************************************
'---------------------------------------------------------------
' Flag module planning activ|fffd|
Public Property Get IsSpigaoPlanningEnabled() As Boolean
    IsSpigaoPlanningEnabled = (GetConfParam("IsSpigaoPlanningEnabled") = "True")
End Property

Public Property Let IsSpigaoPlanningEnabled(bValue As Boolean)
    If bValue Then
        SetConfParam "IsSpigaoPlanningEnabled", "True"
    Else
        SetConfParam "IsSpigaoPlanningEnabled", "False"
    End If
End Property

'Chemin de stockage du planning
Public Property Get planningTemplateFullPath() As String
    planningTemplateFullPath = GetConfParam("PlanningTemplateFullPath")
End Property
Public Property Let planningTemplateFullPath(sPath As String)
    SetConfParam "PlanningTemplateFullPath", sPath
End Property

' synchro aut du planning
Public Property Get IsSpigaoPlanningSynchroAutoEnabled() As Boolean
    IsSpigaoPlanningSynchroAutoEnabled = (GetConfParam("IsSpigaoPlanningSynchroAutoEnabled") = "True")
End Property

Public Property Let IsSpigaoPlanningSynchroAutoEnabled(bValue As Boolean)
    If bValue Then
        SetConfParam "IsSpigaoPlanningSynchroAutoEnabled", "True"
    Else
        SetConfParam "IsSpigaoPlanningSynchroAutoEnabled", "False"
    End If
End Property
Attribute VB_Name = "cSpigaoOldRef"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private pOldRef As String
Private pDataType As eDataType
Private pId As String
Private pCol As String

'Classe de conversion/gestion des anciens nommages de type "P_1_z1x23 PU" ou "P_1_z1x23 Qt|fffd|"
Public Property Let oldRef(sValue As String)
Dim t() As String
Dim p() As String


    pOldRef = sValue
    t = Split(pOldRef, " ")
    
    pId = cvOldIdToNewId(t(0))
        
    pCol = t(1)
    Select Case t(1)
        Case "PU"
            pDataType = eDataType.UnitPrice
        Case "Qt|fffd|"
            pDataType = eDataType.Quantity
        Case "MT"
            pDataType = eDataType.TotalPrice
        Case Else
            pDataType = eDataType.Extended

    End Select
    
End Property


Public Property Let newRef(sValue As String)
Dim t() As String
    t = Split(sValue, " ")

    pId = t(0)
    pCol = t(1)
    Select Case t(1)
        Case "PU"
            pDataType = eDataType.UnitPrice
        Case "Qt|fffd|"
            pDataType = eDataType.Quantity
        Case "MT"
            pDataType = eDataType.TotalPrice
        Case Else
            pDataType = Extended
    End Select
End Property
Public Property Get dataType() As eDataType
    dataType = pDataType
End Property
Public Property Get Id() As String
    Id = pId
End Property
Public Property Get extCol() As String
    extCol = pCol
End Property
Attribute VB_Name = "cSpigaoPlanning"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit


Private pRgTemplateForDealRow As aExcelRange
Private pInsertBefore As Boolean

Private pCol_FolderPath As Integer

Private pNumCol_colSubject As Integer
Private pNumCol_colId As Integer
Private pNumCol_colReference As Integer
Private pNumCol_colContractorShortName As Integer
Private pNumCol_colContractorName As Integer
Private pNumCol_colContractorAddressMail As Integer
Private pNumCol_colContractorAddressStreet1 As Integer
Private pNumCol_colContractorAddressStreet2 As Integer
Private pNumCol_colContractorAddressPostalCode As Integer
Private pNumCol_colContractorAddressTown As Integer
Private pNumCol_colContractorAddressCountry As Integer
Private pNumCol_colContractorAddressCedex As Integer
Private pNumCol_colContractorRegistrationNumber As Integer
Private pNumCol_colSupervisorShortName As Integer
Private pNumCol_colSupervisorName As Integer
Private pNumCol_colSupervisorAddressMail As Integer
Private pNumCol_colSupervisorAddressStreet1 As Integer
Private pNumCol_colSupervisorAddressStreet2 As Integer
Private pNumCol_colSupervisorAddressPostalCode As Integer
Private pNumCol_colSupervisorAddressTown As Integer
Private pNumCol_colSupervisorAddressCountry As Integer
Private pNumCol_colSupervisorAddressCedex As Integer
Private pNumCol_colSupervisorRegistrationNumber As Integer
Private pNumCol_colDeadline As Integer
Private pNumCol_colDescription As Integer
Private pNumCol_colDetailAffaireLink As Integer
Private pNumCol_colPublishedOn As Integer
Private pNumCol_colTerritories As Integer
Private pNumCol_colActivities As Integer
Private pNumCol_colDceLink As Integer
Private pNumCol_colDieLink As Integer
Private pNumCol_colUserName As Integer
Private pNumCol_colGroupName As Integer

Private pRowTitle As Long

Private pWkPlanning As aExcelWorkBook 'Classeur en charge du planning
Private pShPlanning As aExcelSheet 'Feuille du planning
Private pShPlanningStyle As aExcelSheet

Private pDicPlanningUsedFields As New Dictionary
Private pDicPlanningDealsId As New Dictionary



Public Property Get sh() As aExcelSheet
    Set sh = pShPlanning
End Property

Public Property Set Workbook(oEw As aExcelWorkBook)
    Set pWkPlanning = oEw
End Property
'Lecture des donn|fffd|es internes utiles |fffd| la gestion du planning
'Pr|fffd|-requis : avoir sett|fffd| le pWkPlanning
Public Sub readParams()
Dim i As Long
Dim sId As String

    Set pShPlanning = pWkPlanning.getPlanningSheet()
    pDicPlanningDealsId.RemoveAll
    
    'r|fffd|cup|fffd|ration du mode d'insertion
    pInsertBefore = pShPlanning.getBooleanProperty(cPropertySpigaoPlanningInsertBefore, True)
    
    'row titre
    pRowTitle = pShPlanning.getRowByRangeName(cRangeNameSpigaoPlanningTitleRow)
    
    Set pShPlanningStyle = pWkPlanning.getPlanningStyleSheet()
    If pShPlanningStyle Is Nothing Then
        MsgBox "Le fichier suivant n'est pas configur|fffd| compl|fffd|tement :" & vbCrLf & pWkPlanning.Workbook.name
        Exit Sub
    End If
    
    If pShPlanningStyle.cellExists(cRangeNameSpigaoPlRowTemplate) Then
        Set pRgTemplateForDealRow = sgExcelRangeBuilder.byAddress(pShPlanningStyle, cRangeNameSpigaoPlRowTemplate)
        loadUsedFields
    End If

    'Liste des ids de deals
    pCol_FolderPath = 27
    pNumCol_colId = pRgTemplateForDealRow.findcol(cSpigaoPlDataId)
    If pNumCol_colId = 0 Then MsgBox "Erreur de lecture du planning"
    For i = pRowTitle + 1 To pShPlanning.maxRow
        sId = pShPlanning.readCellValueToStringByCoords(i, pNumCol_colId)
        If sId <> "" Then
            If Not pDicPlanningDealsId.exists("P" & sId) Then
                pDicPlanningDealsId.add "P" & sId, sId
            End If
        End If
        
    Next
    
    
End Sub

'------------------------------------------------------------
' Activation d'une feuille planning sp|fffd|cifique
'------------------------------------------------------------
Public Sub ActivatePlanningSheet(sNamePlanning As String)

    If pWkPlanning Is Nothing Then Exit Sub
    If pShPlanning Is Nothing Then
        Set pShPlanning = pWkPlanning.getPlanningSheet
    End If
    If Not pShPlanning Is Nothing Then pShPlanning.activate
End Sub


Private Sub loadUsedFields()

    Dim oF As Variant
    Dim sNameField As String
    Dim oLien As Hyperlink
    Dim oCell As range
    
    Dim oField As cSpigaoPlanningField
    pDicPlanningUsedFields.RemoveAll
    
    For Each oF In dicPlanningFields
        sNameField = CStr(oF)
        'on r|fffd|cup|fffd|re les tags de cellules
        If pRgTemplateForDealRow.contains(sNameField) Then
            Set oField = New cSpigaoPlanningField
            oField.Load CStr(oF)
            If Not pDicPlanningUsedFields.exists(CStr(oF)) Then pDicPlanningUsedFields.add sNameField, oField
        End If
        'on r|fffd|cup|fffd|re les tags de Hyperliens
        'TODO
'        For Each oLien In pRgTemplateForDealRow.Hyperlinks
'
'        Next
    Next
    
  
End Sub


Public Function addDeal(oDeal As Object)
Dim oRgInserted As aExcelRange
Dim i As Integer
Dim sKey As Variant
Dim irow As Long

    If pInsertBefore Then
        irow = pRowTitle + 1
    Else
        irow = pShPlanning.maxRow + 1
    End If
    pShPlanning.insertRowByCopy irow, pRgTemplateForDealRow.range()
        
    Set oRgInserted = sgExcelRangeBuilder.byAddress(pShPlanning, pShPlanning.getAddressByCoord(irow, 0))

    Dim oFieldP As Object
    'For Each oFieldP In pDicPlanningUsedFields.Items()
    'For i = 0 To pDicPlanningUsedFields.Items.Count - 1
    For Each sKey In pDicPlanningUsedFields.Keys()
        
        Set oFieldP = pDicPlanningUsedFields(sKey)
        oFieldP.MergeInPlanningRow oRgInserted, oDeal
    Next
    
    sgSpigao.markDealAsPlannned oDeal.Id
    If Not pDicPlanningDealsId.exists(oDeal.Id) Then pDicPlanningDealsId.add "P" & oDeal.Id, oDeal.Id
End Function

Public Sub importOneDeal(oDeal As Object)
    Dim oD As cDeal
    Dim bConfirmImport As Boolean
    Dim bDceDownload As Boolean
    Dim bDealFolderCreate As Boolean
    Dim bDieDownload As Boolean
    Dim sDealFolderPath As String
    
    If oDeal Is Nothing Then Exit Sub
    Set oD = sgDealBuilder.buildByIDeal(oDeal)
    
    If formImportDealWizard.getImportParameters(oD, bConfirmImport, bDealFolderCreate, sDealFolderPath, bDieDownload, bDceDownload) Then
        If bConfirmImport Then addDeal oDeal
        
        If bDealFolderCreate Then sgDealFolderManager.create sDealFolderPath
        
        If bDceDownload Then getHtml (oD.dceUrl)
            

    End If
    
End Sub

Public Sub importOneDealInSilence(oDeal As Object)

    If oDeal Is Nothing Then Exit Sub
    
    'Insertion dans le planning
    addDeal oDeal
    
    'Marque comme int|fffd|gr|fffd|
    sgSpigaoSe.markDealAsIntegrated oDeal.Id
    'Creation du dossier
    'sgDealFolderManager.create sgFileSystem.joinPath(sgSpigaoConfiguration.RepoFolderPath, oDeal.Id)
    
    
End Sub

Public Sub sychroniseDeals(bSilent As Boolean)
On Error GoTo fin
Dim tabIds() As String
Dim i As Integer
Dim iCpt As Integer
Dim oListDeals As Object
Dim oIDeal As Object
Dim oDeal As cDeal

    readParams


    iCpt = sgSpigao.getPlannedDealsCounter()
    'Pas d'affaire au planning => on sort
    If iCpt = 0 Then
        Exit Sub
    End If
     
    Set oListDeals = sgSpigao.getPlannedDealsList()
    'Erreur de r|fffd|cup|fffd|ration de la liste des affaires du planning => on sort
    If oListDeals Is Nothing Then
        Exit Sub
    End If

    'On compte le nombre r|fffd|el d'affaires |fffd| importer
    iCpt = 0
    For i = 0 To oListDeals.count - 1
        If Not pDicPlanningDealsId.exists("P" & oListDeals.item(i).Id) Then
            iCpt = iCpt + 1
        End If
        i = i + 1
    Next
    
    'Pas de nouvelle affaire |fffd| importer => on sort
    If iCpt = 0 Then
        If Not bSilent Then MsgBox "Aucune affaire nouvelle |fffd| synchroniser"
        Exit Sub
    End If
    
    'Confirmation utilisateur
    If Not bSilent Then
        If MsgBox(iCpt & " affaires vont |fffd|tre import|fffd|es dans le planning. Voulez-vous continuer ?", vbYesNo) = vbNo Then Exit Sub
    End If
    
    modProgress.ProgressInit "Synchronisation en cours. Veuillez patienter..."
    
    For i = 0 To oListDeals.count - 1
        If Not pDicPlanningDealsId.exists("P" & oListDeals.item(i).Id) Then
            Set oDeal = sgSpigaoSe.getDeal(oListDeals.item(i).Id)
            importOneDealInSilence oDeal
        End If
        i = i + 1
        modProgress.ProgressUpdate CDbl(i / iCpt)
    Next
    
fin:
    modProgress.ProgressClose
End Sub

'R|fffd|cup|fffd|re l'id d'un deal dans le planning
Public Function activeDealId() As Long
Dim sId As String
    If Not ActiveCell Is Nothing Then
        If ActiveCell.row > 4 Then
            sId = gCurrentPlanning.sh.readCellFormulaByCoord(ActiveCell.row, pNumCol_colId)
            If IsNumeric(sId) Then activeDealId = CLng(sId)
        End If
    End If
End Function

Public Function isDealSelected() As Boolean
    If activeDealId <> 0 Then isDealSelected = True
End Function


Public Function openFolder() As Boolean
    Dim iId As Long
    Dim sPath As String
    Dim sRef As String
    
    iId = activeDealId
    If iId <> 0 Then
        sPath = gCurrentPlanning.sh.readCellFormulaByCoord(ActiveCell.row, pCol_FolderPath)
        If sPath = "" Then
            sRef = gCurrentPlanning.sh.readCellFormulaByCoord(ActiveCell.row, 3)
            sPath = formSaveDevis.getDealFolderPathToSave(sRef, "", True)
            If sPath <> "" Then
                createDealFolder sPath, True
                gCurrentPlanning.sh.writeFormulaToCellByCoords ActiveCell.row, pCol_FolderPath, sPath
            End If
        End If
        
        If sPath <> "" Then getHtml (sPath)
    End If
    
End Function


'Configuration du r|fffd|pertoire d'affaire avec les sous r|fffd|pertoires qui vont bien.
Private Sub createDealFolder(sPath As String, bApplyTemplateFolder As Boolean)
On Error GoTo fin

Dim orootfolder As Folder
    
    'On le cr|fffd||fffd| s'il n'existe pas
    If Not sgFileSystem.FolderExists(sPath) Then
        sgFileSystem.createFolderRecurse sPath
    End If
    
    'Si n|fffd|cessaire on copie le contenu du template dedans.
    If bApplyTemplateFolder Then
        sgFileSystem.copyFolder sgEnvironnement.templateFolderPath, sPath
    End If
    
fin:
    If Err Then
        MsgBox "Erreur lors de la cr|fffd|ation du r|fffd|pertoire d'affaire : " & vbCrLf & Err.Description
    End If
End Sub
Attribute VB_Name = "cSpigaoPlanningBuilder"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

'instancie
Public Function buildByWorksheet(oEs As aExcelSheet) As cSpigaoPlanning
On Error GoTo fin
Dim oSP As cSpigaoPlanning
    
    
    Set buildByWorksheet = Nothing
    If Not oEs.IsSpigaoPlanningSheet Then Exit Function
    
    
    Set oSP = New cSpigaoPlanning
    Set oSP.Workbook = oEs.parent
    oSP.readParams
    
    Set buildByWorksheet = oSP
    Exit Function
fin:
    If Err Then MsgBox "Erreur lors du chargement du planning." & Err.Description
    
End Function


'-----------------------------------------------------------------------
' Chargement et affichage du planning Excel
'-----------------------------------------------------------------------
Public Function buildByPath(sPathWk As String) As cSpigaoPlanning
    On Error GoTo fin
    Dim oEw As aExcelWorkBook
    Dim oSP As cSpigaoPlanning
    
    Set buildByPath = Nothing
    
    'V|fffd|rification existence
    If Not sgFileSystem.FileExists(sPathWk) Then
        MsgBox "Impossible de trouver le planning |fffd| l'emplacement suivant : " & vbCrLf & sPathWk & vbCrLf & vbCrLf & "Ouverture annul|fffd|e."
        Exit Function
    End If
    
    'Ouverture classeur
    Set oEw = sgExcelWorkbookBuilder.buildByOpenWorkbook(sPathWk, True)
    
    'V|fffd|rification si c'est bien un classeur 'planning'
    If Not oEw.IsSpigaoPlanningWorkbook Then
        MsgBox "Le fichier suivant n'est pas un planning Spigao valide :" & vbCrLf & sPathWk
        oEw.closeWorkbook
        Exit Function
    End If
    
    
'    Set oSP = New cSpigaoPlanning
'    Set oSP.Workbook = oEw
'    oSP.readParams
'
'    'Retour
'    Set buildByPath = oSP
    Exit Function
    
fin:
    If Err Then MsgBox "Erreur lors du chargement du planning : " & sPathWk & vbCrLf & Err.Description

End Function
Attribute VB_Name = "cSpigaoPlanningConfiguration"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Attribute VB_Name = "cSpigaoPlanningField"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

'Classe de gestion des colonnes de planning

Private pName As String

'Initialisation de l'objet
Public Function Load(sName As String)
    pName = sName
End Function

'
Public Property Get Id() As String
    Id = pName
End Property

Public Function MergeInPlanningRow(oRg As aExcelRange, oDeal As cDeal)
Dim s As String
Dim i As Integer

    s = ""
    Select Case pName
        Case cSpigaoPlDataSubject
            oRg.replaceIn "#" & cSpigaoPlDataSubject & "#", oDeal.Subject
        Case cSpigaoPlDataId
            oRg.replaceIn "#" & cSpigaoPlDataId & "#", oDeal.Id
        Case cSpigaoPlDataReference
            oRg.replaceIn "#" & cSpigaoPlDataReference & "#", oDeal.Reference
        Case cSpigaoPlDataContractorShortName
            oRg.replaceIn "#" & cSpigaoPlDataContractorShortName & "#", oDeal.ContractorShortName
        Case cSpigaoPlDataContractorName
            oRg.replaceIn "#" & cSpigaoPlDataContractorName & "#", oDeal.ContractorName
        Case cSpigaoPlDataContractorAddressMail
            oRg.replaceIn "#" & cSpigaoPlDataContractorAddressMail & "#", oDeal.ContractorAddressMailAddress
        Case cSpigaoPlDataContractorAddressStreet1
            oRg.replaceIn "#" & cSpigaoPlDataContractorAddressStreet1 & "#", oDeal.ContractorAddressStreet1
        Case cSpigaoPlDataContractorAddressStreet2
            oRg.replaceIn "#" & cSpigaoPlDataContractorAddressStreet2 & "#", oDeal.ContractorAddressStreet2
        Case cSpigaoPlDataContractorAddressPostalCode
            oRg.replaceIn "#" & cSpigaoPlDataContractorAddressPostalCode & "#", oDeal.ContractorAddressPostalCode
        Case cSpigaoPlDataContractorAddressTown
            oRg.replaceIn "#" & cSpigaoPlDataContractorAddressTown & "#", oDeal.ContractorAddressTown
        Case cSpigaoPlDataContractorAddressCountry
            oRg.replaceIn "#" & cSpigaoPlDataContractorAddressCountry & "#", oDeal.ContractorAddressCountry
        Case cSpigaoPlDataContractorAddressCedex
            oRg.replaceIn "#" & cSpigaoPlDataContractorAddressCedex & "#", oDeal.ContractorAddressCedex
        Case cSpigaoPlDataContractorRegistrationNumber
            oRg.replaceIn "#" & cSpigaoPlDataContractorRegistrationNumber & "#", oDeal.ContractorRegistrationNumber
        Case cSpigaoPlDataSupervisorShortName
            oRg.replaceIn "#" & cSpigaoPlDataSupervisorShortName & "#", oDeal.SupervisorShortName
        Case cSpigaoPlDataSupervisorName
            oRg.replaceIn "#" & cSpigaoPlDataSupervisorName & "#", oDeal.SupervisorName
''        Case cSpigaoPlDataSupervisorAddressMail
''            oRg.replaceIn "#" & cSpigaoPlDataSupervisorAddressMail & "#", oDeal.supervisoraddressMailAddress
''        Case cSpigaoPlDataSupervisorAddressStreet1
''            oRg.replaceIn "#" & cSpigaoPlDataSupervisorAddressStreet1 & "#", oDeal.supervisorStreet1
''        Case cSpigaoPlDataSupervisorAddressStreet2
''            oRg.replaceIn "#" & cSpigaoPlDataSupervisorAddressStreet2 & "#", oDeal.supervisorStreet2
''        Case cSpigaoPlDataSupervisorAddressPostalCode
''            oRg.replaceIn "#" & cSpigaoPlDataSupervisorAddressPostalCode & "#", oDeal.supervisorPostalCode
''        Case cSpigaoPlDataSupervisorAddressTown
''            oRg.replaceIn "#" & cSpigaoPlDataSupervisorAddressTown & "#", oDeal.supervisorTown
''        Case cSpigaoPlDataSupervisorAddressCountry
''            oRg.replaceIn "#" & cSpigaoPlDataSupervisorAddressCountry & "#", oDeal.supervisorCountry
''        Case cSpigaoPlDataSupervisorAddressCedex
''            oRg.replaceIn "#" & cSpigaoPlDataSupervisorAddressCedex & "#", oDeal.supervisorCedex
        Case cSpigaoPlDataSupervisorRegistrationNumber
            oRg.replaceIn "#" & cSpigaoPlDataSupervisorRegistrationNumber & "#", oDeal.SupervisorRegistrationNumber
        Case cSpigaoPlDataDeadline
            oRg.replaceIn "#" & cSpigaoPlDataDeadline & "#", oDeal.DeadLine
        Case cSpigaoPlDataDescription
            oRg.replaceIn "#" & cSpigaoPlDataDescription & "#", oDeal.Caption
        'Case cSpigaoPlDataDetailAffaireLink
        '    oRg.replaceIn "#" & cSpigaoPlDataDetailAffaireLink & "#", oDeal.DetailAffairLink
        Case cSpigaoPlDataPublishedOn
            oRg.replaceIn "#" & cSpigaoPlDataPublishedOn & "#", oDeal.PublishedOn
'        Case cSpigaoPlDataActivities
'            If Not oDeal.Activities Is Nothing Then
'                For i = 0 To oDeal.Activities.count - 1
'                    If s <> "" Then s = s & " - "
'                    s = s & oDeal.Activities.item(i).Designation
'                Next
'                oRg.replaceIn "#" & cSpigaoPlDataActivities & "#", s
'            End If
        Case cSpigaoPlDataTerritories
            If Not oDeal.Territories Is Nothing Then
                For i = 1 To oDeal.Territories.count
                    If s <> "" Then s = s & " - "
                    s = s & oDeal.Territories.item(i)("Code") & " " & oDeal.Territories.item(i)("Designation")
                Next
                oRg.replaceIn "#" & cSpigaoPlDataTerritories & "#", s
            End If
'        Case cSpigaoPlDataDetailAffaireLink
'            oRg.replaceIn "#" & cSpigaoPlDataDetailAffaireLink & "#", sgSpigao.Detection.WebSite.GetDealPageUrl(oDeal.id)
'            oRg.replaceInLinks cSpigaoPlDataDetailAffaireLink, sgSpigao.Detection.WebSite.GetDealPageUrl(oDeal.id)
'        Case cSpigaoPlDataDieLink
'            oRg.replaceIn "#" & cSpigaoPlDataDieLink & "#", sgSpigao.Detection.WebSite.GetDIEPageUrl(oDeal.id)
'            oRg.replaceInLinks cSpigaoPlDataDieLink, sgSpigao.Detection.WebSite.GetDIEPageUrl(oDeal.id)
'        Case cSpigaoPlDataDceLink
'            oRg.replaceIn "#" & cSpigaoPlDataDceLink & "#", sgSpigao.Detection.WebSite.GetDCEFilePageUrl(oDeal.id)
'            oRg.replaceInLinks cSpigaoPlDataDceLink, sgSpigao.Detection.WebSite.GetDCEFilePageUrl(oDeal.id)
'        Case cSpigaoPlDataUserName
'            oRg.replaceIn "#" & cSpigaoPlDataUserName & "#", sgSpigao.Detection.UserSettings.SpigaoUserId
'        Case cSpigaoPlDataGroupName
'            oRg.replaceIn "#" & cSpigaoPlDataGroupName & "#", sgSpigao.Detection.UserSettings.SpigaoAccount
    End Select

End Function




Attribute VB_Name = "cStudy"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Implements iRelatedItem
'Classe de gestion de l'ensemble de l'|fffd|tude
'Contient toutes les donn|fffd|es de description de l'|fffd|tude
Private pWkItemList As cWkItemList
Private pEW As aExcelWorkBook

Private pSSBase As cStudySheet
Private pSSCumul As cStudySheet

Private pActiveSSType As eStudySheetMode

Private pRelatedStudyForBase As iRelatedItem
Private pRelatedstudyForCumul As iRelatedItem

Private pStudySheetCollection As Collection

Private pVAT As Double

Private pDicExtendedCols As Dictionary
Private pHasExtendedColsForReport As Boolean

Private pTemplateFormulaForMT As String

Private pStudyName As String
Private pHasBP As Integer

Public Property Set EW(oEw As aExcelWorkBook)
    Set pEW = oEw
End Property
Public Property Get EW() As aExcelWorkBook
    Set EW = pEW
End Property
Public Property Set BaseSheet(oSS As cStudySheet)
    Set pSSBase = oSS
    'Set pSSBase.relatedStudy = Me
End Property
Public Property Get BaseSheet() As cStudySheet
    Set BaseSheet = pSSBase
End Property
Public Property Set CumulSheet(oSS As cStudySheet)
    Set pSSCumul = oSS
End Property
Public Property Get CumulSheet() As cStudySheet
    Set CumulSheet = pSSCumul
End Property

Public Property Get activeSS() As cStudySheet
    If pActiveSSType = Base Then
        Set activeSS = pSSBase
    ElseIf pActiveSSType = Cumul Then
        Set activeSS = pSSCumul
    Else
        Set activeSS = Nothing
    End If
End Property

Public Property Get IsActivated() As Boolean
    IsActivated = Not (activeSS Is Nothing)
End Property
Public Property Let Mode(eMode As eStudySheetMode)
    pActiveSSType = eMode
End Property

Public Property Let VAT(dValue As Double)
    pVAT = dValue
    pEW.addNameWithDirectValue "TVA", "=" & Replace(CStr(dValue), ",", ".")
End Property

Public Property Get VAT() As Double
    VAT = pVAT
End Property

Public Property Get Identifier() As String
    Identifier = pEW.Workbook.FullName & "|" & activeSS.ES.sheetName
End Property

'Indique si le die contient un BP ou non
Public Property Get hasBP() As Boolean
On Error GoTo fin

    Dim oXml As aXml
    Dim oNode As Object
    Dim sPathFileBpx As String
    
    hasBP = False
    If pHasBP = 0 Then
    
        Set oXml = New aXml
        oXml.LoadFromFile projectId
        Set oNode = oXml.getNodeFromRoot("//BPX_NbPages")
        If Not oNode Is Nothing Then
            If oNode.nodetypedvalue > 0 Then
                pHasBP = 1
                hasBP = True
                Set oXml = Nothing
                Exit Property
            End If
        End If
        
        'on teste le bpx.cnf
        sPathFileBpx = sgFileSystem.joinPath(dieFolderPath, projectName & "bpx.pdf")
        If sgFileSystem.FileExists(sPathFileBpx) Then
            pHasBP = 1
            hasBP = True
            Set oXml = Nothing
            Exit Property
        End If
        pHasBP = -1

    Else
        hasBP = (pHasBP = 1)
    End If
fin:
    Set oXml = Nothing
End Property

'Permet de savoir si on a un bp avec marquage pour lancer scribe au besoin.
Public Property Get hasBpxCnf() As Boolean
    
    Dim oStream As aStream
    Dim sPathBpxCnf As String
    Dim sBpxContent As String
    
    sPathBpxCnf = bpxCnfFilePath
    If sgFileSystem.FileExists(sPathBpxCnf) Then
        'on v|fffd|rifie que le fichier cnf contient au moins un champ
        Set oStream = New aStream
        sBpxContent = oStream.readfile(sPathBpxCnf)
        
        hasBpxCnf = sgRegex.matchPattern(sBpxContent, "Nombre_champs=[1-9]")
    Else
        hasBpxCnf = False
    End If
    

End Property
'Permet de savoir si on a un bp avec marquage pour lancer scribe au besoin.
Public Property Get hasAeCnf() As Boolean
    
    Dim oStream As aStream
    Dim sPathAeCnf As String
    Dim sBpxContent As String
    
    sPathAeCnf = aeCnfFilePath
    If sgFileSystem.FileExists(sPathAeCnf) Then
        'on v|fffd|rifie que le fichier cnf contient au moins un champ
        Set oStream = New aStream
        sBpxContent = oStream.readfile(sPathAeCnf)
        
        hasAeCnf = sgRegex.matchPattern(sBpxContent, "Nombre_champs=[1-9]")
    Else
        hasAeCnf = False
    End If
    

End Property

'R|fffd|cup|fffd|re les colonnes supl|fffd|mentaires
Public Function readExtendedColsFromXml(oXmlStudy As aXml) As Boolean
On Error GoTo fin

    Dim oExtendedCol As cStudyExtendedCol
    Dim oNode As Object
    Dim oNodeTitle As Object
    Dim oNodeCols As Object
    Dim sRefersTo As String
    Dim sName As String
    Dim bAdd As Boolean
    Dim bSpecific As Boolean
    Dim eLastRef As eDataType
    Dim iLastRefPosition As Integer
    Dim k As Integer
    Dim sCols As String
    
    Set oNodeCols = oXmlStudy.getNodesFromRoot("//Names/NamedRange")
    Set pDicExtendedCols = New Dictionary
    For Each oNode In oNodeCols
        sRefersTo = oXmlStudy.getAttributValue(oNode, "ss:RefersTo")
        sRefersTo = deleteSheetNameFromExcelFormula(sRefersTo)
        sName = oXmlStudy.getAttributValue(oNode, "ss:Name")
        
        bAdd = False
        
        If sgRegex.matchPattern(sRefersTo, "^C[0-9]{1,2}") Then
            bAdd = True
            sName = oXmlStudy.getAttributValue(oNode, "ss:Name")
            Set oExtendedCol = New cStudyExtendedCol
            If Left(sName, 2) = "PU" And sName <> "PU" And sName <> "PU_DET" Then
                oExtendedCol.colType = UnitPrice
                bSpecific = True
            ElseIf Left(sName, 3) = "Qt|fffd|" And sName <> "Qt|fffd|" And sName <> "Qt|fffd|_DET" Then
                oExtendedCol.colType = Quantity
                bSpecific = True
            ElseIf Left(sName, 2) = "MT" And sName <> "MT" And sName <> "MT_DET" Then
                oExtendedCol.colType = TotalPrice
                bSpecific = True
            ElseIf LCase(sName) = "unit" And sName <> "Unit" Then
                oExtendedCol.colType = Unit
            Else
                'MsgBox "Type de colonne non g|fffd|r|fffd| : " & sName
                If sName = "PU" Then
                    eLastRef = UnitPrice
                    iLastRefPosition = CInt(Replace(sRefersTo, "C", ""))
                    oExtendedCol.colType = UnitPrice
                ElseIf sName = "Qt|fffd|" Then
                    eLastRef = Quantity
                    iLastRefPosition = CInt(Replace(sRefersTo, "C", ""))
                    oExtendedCol.colType = Quantity
                ElseIf sName = "MT" Then
                    eLastRef = TotalPrice
                    iLastRefPosition = CInt(Replace(sRefersTo, "C", ""))
                    oExtendedCol.colType = TotalPrice
                ElseIf sName = "Unit" Then
                    eLastRef = Unit
                    iLastRefPosition = CInt(Replace(sRefersTo, "C", ""))
                    oExtendedCol.colType = Unit
                Else
                    bAdd = False
                End If
            End If
            
            'V|fffd|rif si la colonne est pas d|fffd|j|fffd| r|fffd|f|fffd|renc|fffd|e pour une m|fffd|me position
            'Cas de DIE 2548706 : la m|fffd|me colonne est r|fffd|f|fffd|renc|fffd|e plusieurs fois dans les names
            For k = 0 To pDicExtendedCols.count - 1
                If pDicExtendedCols.Items(k).position = CInt(Replace(sRefersTo, "C", "")) Then
                    bAdd = False
                    Exit For
                End If
            Next
            
            If bAdd Then
                oExtendedCol.name = sName
                oExtendedCol.position = CInt(Replace(sRefersTo, "C", ""))
                oExtendedCol.positionXml = oExtendedCol.position
                oExtendedCol.positionFromType = eLastRef
                oExtendedCol.positionFromIndice = oExtendedCol.position - iLastRefPosition
                Set oNodeTitle = oXmlStudy.getNodeFromRoot("//Worksheet/Table/Row/Cell[NamedCell/@ss:Name='Headers'][" & oExtendedCol.position - 1 & "]/Data")
                'If oNodeTitle Is Nothing Then Set oNodeTitle = oXmlStudy.getNodeFromRoot("//ss:Worksheet/ss:Table/ss:Row/ss:Cell[ss:NamedCell/@ss:Name='Headers' and position()=" & oExtendedCol.position - 1 & "]/ss:Data")
                If Not oNodeTitle Is Nothing Then
                    oExtendedCol.title = oNodeTitle.nodetypedvalue
                    pDicExtendedCols.add oExtendedCol.name, oExtendedCol
                End If
                
            End If
        End If
        
    Next

    'a reprendre de l'ancienne m|fffd|thode
    pSSBase.ST.specialFormulaForMT = ""
    Set oNode = oXmlStudy.getNodeFromRoot("//CustomDocumentProperties/MT")
    If oNode Is Nothing Then Set oNode = oXmlStudy.getNodeFromRoot("//o:CustomDocumentProperties/o:MT")
    If Not oNode Is Nothing Then
        pSSBase.ST.specialFormulaForMT = oNode.nodetypedvalue
    End If
    
    
    'Template personnalis|fffd| => on annula la gestion multi colonne
    If pSSBase.ST.hasTemplateForPriceItem And bSpecific Then
        MsgBox "Ce DIE contient des colonnes suppl|fffd|mentaires non compatibles avec votre format de devis personnalis|fffd|." & vbCrLf _
            & "Pour charger compl|fffd|tement ce devis, repassez sur le mod|fffd|le de devis standard via le menu Configuration > Personnalisation" & vbCrLf _
            & " puis relancez la cr|fffd|ation de l'|fffd|tude."
        Set pDicExtendedCols = Nothing
        Exit Function
    End If
        
    'd|fffd|tection de colonnes sp|fffd|cifiques pour le report
    Set oNodeCols = oXmlStudy.getNodeFromRoot("//RecupCols")
    If oNodeCols Is Nothing Then Set oNodeCols = oXmlStudy.getNodeFromRoot("//o:RecupCols")
    If Not oNodeCols Is Nothing Then
        sCols = oNodeCols.nodetypedvalue
        If InStr(sCols, "Qt|fffd|;PU;Qt|fffd|;PU") > 0 Then sCols = Replace(sCols, "Qt|fffd|;PU;Qt|fffd|;PU", "Qt|fffd|;PU")
        pHasExtendedColsForReport = (sCols <> "Qt|fffd|;PU")
    End If
    
    If pDicExtendedCols.count = 0 Then Set pDicExtendedCols = Nothing
    
    readExtendedColsFromXml = True
    Exit Function
fin:
    If Err Then
        MsgBox "Erreur lors de la lecture des colonnes suppl|fffd|mentaires. Celles-ci ne seront pas g|fffd|r|fffd|es." & vbCrLf & Err.Description
        Set pDicExtendedCols = Nothing
        readExtendedColsFromXml = False
    End If


End Function


'R|fffd|cup|fffd|re la liste des colonnes pour voir si il ya des colonnes sp|fffd|cifiques
'Plus utilis|fffd|e.. A d|fffd|gager
Public Function readExtendedColsFromXml_old(oXmlStudy As aXml)
On Error GoTo fin
Dim sCols As String
Dim tabExtendedCols() As String
Dim i As Integer
Dim k As Integer

Dim oExtendedCol As cStudyExtendedCol
Dim sCol As String
Dim oNode As Object
Dim oNodes As Object
Dim oNodeCols As Object
Dim sPosition As String
Dim iMaxPosition As Integer

    'R|fffd|cup|fffd|ration de la liste des colonnes
    Set oNodeCols = oXmlStudy.getNodeFromRoot("//RecupCols")
    If oNodeCols Is Nothing Then Set oNodeCols = oXmlStudy.getNodeFromRoot("//o:RecupCols")
    If oNodeCols Is Nothing Then Exit Function
    sCols = oNodeCols.nodetypedvalue
    If InStr(sCols, "Qt|fffd|;PU;Qt|fffd|;PU") > 0 Then sCols = Replace(sCols, "Qt|fffd|;PU;Qt|fffd|;PU", "Qt|fffd|;PU")
    'If sCols = "Qt|fffd|;PU;Qt|fffd|;PU" Then sCols = "Qt|fffd|;PU"
    If sCols = "Qt|fffd|;PU" Then Exit Function 'Cas standard, RAS
    tabExtendedCols = Split(sCols, ";")
    Set pDicExtendedCols = New Dictionary
    
    For i = 0 To UBound(tabExtendedCols)
        sCol = tabExtendedCols(i)
        If sCol <> "" Then
            Set oExtendedCol = New cStudyExtendedCol
            If Left(sCol, 2) = "PU" Then
                oExtendedCol.colType = UnitPrice
                oExtendedCol.name = sCol
                oExtendedCol.position = i
                pDicExtendedCols.add oExtendedCol.name, oExtendedCol
            ElseIf Left(sCol, 3) = "Qt|fffd|" Then
                oExtendedCol.colType = Quantity
                oExtendedCol.name = sCol
                oExtendedCol.position = i
                pDicExtendedCols.add oExtendedCol.name, oExtendedCol
            ElseIf LCase(sCol) = "unit" Then
                oExtendedCol.colType = Unit
                oExtendedCol.name = sCol
                oExtendedCol.position = i
                pDicExtendedCols.add oExtendedCol.name, oExtendedCol
            Else
                MsgBox "Type de colonne non g|fffd|r|fffd| : " & sCol
            End If
        End If
    Next

    'R|fffd|cup|fffd|ration de la position dans le Xml
    For i = 0 To pDicExtendedCols.count - 1
        Set oExtendedCol = pDicExtendedCols.Items(i)
        Set oNode = oXmlStudy.getNodeFromRoot("//Worksheet/Names/NamedRange[@ss:Name='" & oExtendedCol.name & "']")
        If oNode Is Nothing Then Set oNode = oXmlStudy.getNodeFromRoot("//ss:Worksheet/ss:Names/ss:NamedRange[@ss:Name='" & oExtendedCol.name & "']")
        If Not oNode Is Nothing Then
            sPosition = oXmlStudy.getAttributValue(oNode, "ss:RefersTo")
            If sPosition <> "" Then
                If InStr(sPosition, "!") > 0 Then
                    sPosition = Mid(sPosition, InStr(sPosition, "!") + 1)
                End If
                sPosition = Replace(sPosition, "C", "")
                oExtendedCol.positionXml = CInt(sPosition)
            Else    'D|fffd|fault value
                iMaxPosition = 1
                For k = 0 To pDicExtendedCols.count - 1
                    If pDicExtendedCols.Items(k).positionXml > iMaxPosition Then iMaxPosition = pDicExtendedCols.Items(k).positionXml
                Next
                oExtendedCol.positionXml = iMaxPosition + 1
            End If

        Else
            MsgBox "Erreur de positionnement des colonnes dans le dossier. Contacter le support SPIGAO."
        End If
    Next
    
    'R|fffd|cup|fffd|ration du titre de la colonne
    i = 1
    Set oNodes = oXmlStudy.getNodesFromRoot("//Worksheet/Table/Row/Cell[NamedCell/@ss:Name='Headers']/Data")
    If oNodes.Length = 0 Then Set oNodes = oXmlStudy.getNodesFromRoot("//ss:Worksheet/ss:Table/ss:Row/ss:Cell[ss:NamedCell/@ss:Name='Headers']/ss:Data")
    
    For i = 0 To pDicExtendedCols.count - 1
        Set oExtendedCol = pDicExtendedCols.Items(i)
        oExtendedCol.title = oNodes(oExtendedCol.positionXml - 1).nodetypedvalue
    Next

    'R|fffd|cup|fffd|ration de la formule total
    pSSBase.ST.specialFormulaForMT = ""
    Set oNode = oXmlStudy.getNodeFromRoot("//CustomDocumentProperties/MT")
    If oNode Is Nothing Then Set oNode = oXmlStudy.getNodeFromRoot("//o:CustomDocumentProperties/o:MT")
    If Not oNode Is Nothing Then
        pSSBase.ST.specialFormulaForMT = oNode.nodetypedvalue
    End If
fin:
    If Err Then
        MsgBox "Erreur lors de la lecture des colonnes suppl|fffd|mentaires. Celles-ci ne seront pas g|fffd|r|fffd|es." & vbCrLf & Err.Description
        Set pDicExtendedCols = Nothing
    End If
End Function


Public Property Get hasExtendedCols() As Boolean
    hasExtendedCols = False
    If Not pDicExtendedCols Is Nothing Then
        hasExtendedCols = (pDicExtendedCols.count > 0)
    End If
End Property

Public Property Get hasExtendedColsForReport() As Boolean
    hasExtendedColsForReport = pHasExtendedColsForReport
End Property


Public Property Get hasOriReport() As Boolean
    hasOriReport = sgFileSystem.FileExists(oriFilePath)
End Property

Public Sub createExtendedCols()
    pSSBase.createExtendedCols pDicExtendedCols
End Sub

Private Sub pSSBase_IsActivated()
    pActiveSSType = eStudySheetMode.Base
End Sub
Private Sub pSSBase_IsDeactivated()
    pActiveSSType = eStudySheetMode.None
End Sub
Private Sub pSSCumul_IsActivated()
    pActiveSSType = eStudySheetMode.Cumul
End Sub
Private Sub pSSCumul_IsDeactivated()
    pActiveSSType = eStudySheetMode.None
End Sub


Public Property Get dealId() As String
On Error Resume Next
    dealId = pSSBase.ES.getPropertyValue(cPropertySpigaoDealId)
End Property
Public Property Let dealId(sValue As String)
On Error Resume Next
    pSSBase.ES.setProperty cPropertySpigaoDealId, sValue
End Property
Public Property Get hasDealId() As Boolean
    hasDealId = (dealId <> "")
End Property


Public Sub checkProjectIdPath()
Dim sP As String
Dim sXmlFileName As String
Dim sFolderPath As String

    sP = projectId
    If sP = "" Then Exit Sub
    'check si le die existe dans le chemin
    If Not sgFileSystem.FileExists(sP) Or (InStr(sP, dealFolderPath) = 0) Then
        'On essaie de rep|fffd|rer le XML par rapport au r|fffd|pertoire de l'|fffd|tude
        sXmlFileName = projectName & ".xml"
        sFolderPath = pEW.Workbook.path
        
        'on recherche d'abord dans le r|fffd|pertoire d'excel
        sP = sgFileSystem.SearchFileInSubFolders(sFolderPath, sXmlFileName)
        If sP <> "" Then
            projectId = sP
            pEW.save
            Exit Sub
        Else 'tentative n|fffd|2 => on regarde un cran au dessus
            sFolderPath = sgFileSystem.getFolderPathFromFilePath(sFolderPath)
            If Not sFolderPath = "" Then
                sP = sgFileSystem.SearchFileInSubFolders(sFolderPath, sXmlFileName)
                If sP <> "" Then
                    projectId = sP
                    pEW.save
                    Exit Sub
                Else
                    If MsgBox("Impossible de trouver le fichier Xml du DIE. Voulez-vous le s|fffd|lectionner manuelleemnt ?", vbYesNo) = vbYes Then
                        projectId = sgFileSystem.promptForFilePath(sgSpigaoConfiguration.RepoFolderPath, dealFolderPath, "Fichiers Xml", "*.xml")
                        pEW.save
                    End If
                End If
            End If
        End If
    End If

End Sub
Public Property Get projectId() As String
    projectId = pSSBase.ES.getPropertyValue(cPropertySpigaoProjectId)
    
End Property

Public Property Let projectId(sValue As String)
On Error Resume Next
    pSSBase.ES.setProperty cPropertySpigaoProjectId, sValue
End Property

Public Property Get projectName() As String
    projectName = pSSBase.ES.getPropertyValue(cPropertySpigaoDieName)
End Property
Public Property Let projectName(sValue As String)
    pSSBase.ES.setProperty cPropertySpigaoDieName, sValue
End Property
Public Property Get projectReference() As String
    projectReference = pSSBase.ES.getPropertyValue(cPropertySpigaoDieId)
End Property
Public Property Let projectReference(sValue As String)
    pSSBase.ES.setProperty cPropertySpigaoDieId, sValue
End Property
Public Property Get studyName() As String
    studyName = pStudyName
End Property
Public Property Let studyName(sValue As String)
    pStudyName = sValue
End Property
Public Property Get studyfolderPath() As String
    studyfolderPath = pEW.Workbook.path
End Property
Public Property Get dieFolderPath() As String
    dieFolderPath = sgFileSystem.getFolderPathFromFilePath(projectId)
End Property
Public Property Get detTxtFilePath() As String
    detTxtFilePath = sgFileSystem.joinPath(dieFolderPath, projectName & "DET.txt")
End Property
Public Property Get expTxtFilePath() As String 'Nom de fichiers d'export txt pour les Lms
    expTxtFilePath = sgFileSystem.joinPath(dieFolderPath, projectName & ".txt")
End Property
Public Property Get detCnfFilePath() As String
    detCnfFilePath = sgFileSystem.joinPath(dieFolderPath, projectName & "det.cnf")
End Property
Public Property Get bpxCnfFilePath() As String
    bpxCnfFilePath = sgFileSystem.joinPath(dieFolderPath, projectName & "bpx.cnf")
End Property
Public Property Get aeCnfFilePath() As String
    aeCnfFilePath = sgFileSystem.joinPath(dieFolderPath, projectName & "ae.xnf")
End Property
Public Property Get oldXlsFilePath() As String
    oldXlsFilePath = sgFileSystem.joinPath(dieFolderPath, projectName & ".xls")
End Property
Public Property Get oriFilePath() As String
    oriFilePath = sgFileSystem.joinPath(dieFolderPath, projectName & ".ori")
End Property

'V|fffd|rifie que le r|fffd|pertoire courant est toujours un conteneur de l'|fffd|tude excel
Public Sub checkDealFolderPath()
On Error GoTo fin
    Dim sPath As String
    Dim bRetry As Boolean
    Dim sPathDie As String
    
    sPath = dealFolderPath
    If sPath = "" Then Exit Sub
    'test si fichier d'|fffd|tude d|fffd|plac|fffd|
    '1 on essaye de retrouver le DIE dans le r|fffd|pertoire courant du excel ou un sous-r|fffd|pertoire
    If (InStr(pEW.Workbook.FullName, sPath) = 0) Then
        sPathDie = sgFileSystem.SearchFileInSubFolders(pEW.Workbook.path, projectName & ".xml")
        If sPathDie <> "" Then
            dealFolderPath = pEW.Workbook.path
            projectId = sPathDie
            pEW.save
            Exit Sub
        End If
    End If
    '2 si toujours pas ok, on demande |fffd| l'utilisateur
    If Not sgFileSystem.FolderExists(sPath) Or (InStr(pEW.Workbook.FullName, sPath) = 0) Then
        bRetry = True
        While bRetry
            If MsgBox("Le r|fffd|pertoire global de l'affaire a |fffd|t|fffd| d|fffd|plac|fffd| de : " & sPath & vbCrLf & "Voulez-vous indiquer le nouvel emplacement ?", vbYesNo) = vbYes Then
                sPath = sgFileSystem.promptForFolderPath(sgSpigaoConfiguration.RepoFolderPath, sgSpigaoConfiguration.RepoFolderPath)
                If sgFileSystem.FolderExists(sPath) Then
                    bRetry = False
                    dealFolderPath = sPath
                    pEW.save
                End If
                
            Else
                bRetry = False
            End If
        Wend
        
        If sgFileSystem.FolderExists(sPath) Then pSSBase.ES.setProperty cPropertyFolderPath, sPath
            
    End If
fin:
    If Err Then
        MsgBox "Erreur lors de la r|fffd|cup|fffd|ration du chemin du r|fffd|pertoire d'affaire : " & sPath & vbCrLf & Err.Description
    End If
End Sub



Public Property Get dealFolderPath() As String
   
    dealFolderPath = pSSBase.ES.getPropertyValue(cPropertyFolderPath)
    
End Property

Public Property Let dealFolderPath(sValue As String)
    pSSBase.ES.setProperty cPropertyFolderPath, sValue
End Property

Public Property Let NbDecimalsForQuantities(iValue As Integer)
    pSSBase.NbDecimalsForQuantities = iValue
End Property


Private Sub Class_Terminate()

    Set pWkItemList = Nothing
    Set pEW = Nothing
    Set pSSBase = Nothing
    Set pSSCumul = Nothing
    Set pRelatedStudyForBase = Nothing
    Set pRelatedstudyForCumul = Nothing
    Set pStudySheetCollection = Nothing
    Set pDicExtendedCols = Nothing

End Sub

Private Function iRelatedItem_IsActivated(Optional sName As String = "") As iRelatedItem
    If sName = pSSBase.ES.Sheet.name Then
        pActiveSSType = eStudySheetMode.Base
    ElseIf sName = pSSCumul.ES.Sheet.name Then
        pActiveSSType = eStudySheetMode.Cumul
    Else
        pActiveSSType = eStudySheetMode.None
    End If
End Function

Private Function iRelatedItem_IsDeactivated(Optional sName As String = "") As iRelatedItem
    pActiveSSType = eStudySheetMode.None
End Function


Public Sub export()
On Error GoTo fin

   '1- Charge le dossier par son identifiant (chemin XML) qui avait ete stocke lors de l'import
   Dim project As Object
   Dim sPathXml As String
   Dim oXml As aXml
   Dim sCmdLine As String
   

   
   'Contr|fffd|le fichier Xml pr|fffd|sent
   sPathXml = projectId
   If Not sgFileSystem.FileExists(sPathXml) Then
        MsgBox "Impression impossible, le fichier " & vbCrLf & sPathXml & vbCrLf & " n'est pas disponible." & vbCrLf & "Impression annul|fffd|e"
        Exit Sub
   End If

   'Contr|fffd|le r|fffd|pertoire btp_spigao pr|fffd|sent (TODO)
    If Not sgFileSystem.FolderExists(sgFileSystem.getFolderPathFromFilePath(sPathXml) & "\btp_spigao") Then
        MsgBox "Impression impossible, le dossier d'import : " & vbCrLf & sgFileSystem.getFolderPathFromFilePath(sPathXml) & "\btp_spigao" & vbCrLf & " n'est pas disponible." & vbCrLf & "Impression annul|fffd|e"
        Exit Sub
    End If
    
    'G|fffd|n|fffd|ration Xnf pour g|fffd|rer les modifs de quantit|fffd|s si besoin
    modXnfGenerator.generateXnfFromCnf detCnfFilePath
    
    'On recharge le dictionary des colonnes depuis le xml
    Set oXml = New aXml
    oXml.LoadFromFile sPathXml
    readExtendedColsFromXml oXml
    
    'Gestion standard si pas de colonnes sp|fffd|ciales
    If Not hasExtendedColsForReport Then
       Set project = sgSpigao.Processing.LoadProject(sPathXml)
    
       '2- Maj projet
       activeSS.updateProject project
        
        '3- Wizard export
       sgSpigao.Processing.UI.ExportProject project, ""
    Else 'Gestion sp|fffd|cifique le temps que IULM le g|fffd|re
        'cr|fffd|ation du det.txt
        createDetTxt
        'lancement du report scribe
        If Not hasOriReport Then
            'on lance scribe
            sCmdLine = sgFileSystem.getScribeProgramFilesPath & "\Scribe.exe " & detCnfFilePath
            sgFileSystem.RunExe sCmdLine
        Else
            'on lance l'export cadre ori
            sCmdLine = """" & sgFileSystem.getScribeProgramFilesPath & "\demonstrator\demonstrator.exe"" -p """ & projectId & """"
            sgFileSystem.runCmd sCmdLine
            'on propose d'ouvrir scribe si on suppose qu'il y a un bp ou un ae marqu|fffd|s
            If hasBpxCnf Then
                If MsgBox("Voulez vous ouvrir Scribe ?", vbYesNo) = vbYes Then
                    sgFileSystem.RunExe sgFileSystem.getScribeProgramFilesPath & "\Scribe.exe " & bpxCnfFilePath
                End If
            ElseIf hasAeCnf Then
                If MsgBox("Voulez vous ouvrir Scribe ?", vbYesNo) = vbYes Then
                    sgFileSystem.RunExe sgFileSystem.getScribeProgramFilesPath & "\Scribe.exe " & aeCnfFilePath
                End If
            End If
        End If
        
    End If

   Exit Sub
fin:
    If Err Then
        MsgBox "erreur lors de l'impression du devis : " & Err.Description
    End If

End Sub

'Cr|fffd|ation du det.txt
Public Sub createDetTxt()
    activeSS.createStream detTxtFilePath, pDicExtendedCols
End Sub

'---------------------------------------------------------------------------------------------------
' M|fffd|thodes d'|fffd|criture dans la feuille d'|fffd|tude
'---------------------------------------------------------------------------------------------------
Public Sub writeTitle(s As String)
    pSSBase.writeTitle s
End Sub


'---------------------------------------------------------------------------------------------------
' Cumul des quantit|fffd|s
'---------------------------------------------------------------------------------------------------
'Cr|fffd|ation de la feuille de cumul |fffd| partir de la feuille 'base'
Public Sub cumulCreateCumulSheet()
Dim oEs As aExcelSheet
Dim dicQuantities As New Dictionary
Dim irow As Long
Dim oWkItem As cWkItem
Dim sQuantity As String
Dim sId As String

    If pEW.sheetExists(sgSpigaoConfiguration.SheetSyntheseName) Then
        pEW.getSheetByName(sgSpigaoConfiguration.SheetSyntheseName).delete
    End If

    'Recopie de la feuille
    Set oEs = pSSBase.ES.copyTo(sgSpigaoConfiguration.SheetSyntheseName)
    
    'Flag cumul
    oEs.IsSpigaoCumulSheet = True
    oEs.IsSpigaoBaseSheet = False
            
    'on parse la feuille de base et on calcule le cumul des quantit|fffd|s
    For irow = pSSBase.ST.rowStart To pSSBase.ES.maxRow
        If irow = 44 Then
            Debug.Print ""
        End If
        Set oWkItem = sgWkItemBuilder.buildByStudySheet(pSSBase, irow, pSSBase.IsCoefEnabled)
        If Not oWkItem Is Nothing Then
            If oWkItem.WkType = Price Then
                'on r|fffd|cup|fffd|re la formule quantit|fffd|.
                sQuantity = oWkItem.QT.toPureFormula
                If IsNumeric(sQuantity) Then
                    sQuantity = Replace(sQuantity, ",", ".")
                Else
                    sQuantity = 0
                End If
                'Si doublon
                If oWkItem.IsDuplicated Then
                    If dicQuantities.exists(oWkItem.referenceId) Then 'D|fffd|j|fffd| r|fffd|f|fffd|renc|fffd|, on ajoute la quantit|fffd|
                        If Left(sQuantity, 1) = "-" Then 'Gestion des moins
                            dicQuantities(oWkItem.referenceId) = dicQuantities(oWkItem.referenceId) & sQuantity
                        Else
                            dicQuantities(oWkItem.referenceId) = dicQuantities(oWkItem.referenceId) & "+" & sQuantity
                        End If
                        If Left(dicQuantities(oWkItem.referenceId), 1) <> "=" Then dicQuantities(oWkItem.referenceId) = "=" & dicQuantities(oWkItem.referenceId)
                    Else
                        dicQuantities.add oWkItem.referenceId, sQuantity 'cas bizarre, le doublon est lu avant la r|fffd|f|fffd|rence...
                    End If
                Else
                    dicQuantities.add oWkItem.Id, sQuantity
                End If
            End If
        End If
    Next
    'Build de la study sheet cumul
    Set pSSCumul = sgStudySheetBuilder.buildByES(oEs)
    'on rectifie la feuille de cumul avec les nouvelles quantit|fffd|s...
    For irow = pSSCumul.ST.rowStart To pSSCumul.ES.maxRow
        Set oWkItem = sgWkItemBuilder.buildByStudySheet(pSSCumul, irow)
        If Not oWkItem Is Nothing Then
            If oWkItem.WkType = Price Then
                If dicQuantities.exists(oWkItem.Id) Then
                        'Ecriture de la formule quantit|fffd|
                        pSSCumul.ES.writeFormulaToCellByCoords irow, pSSCumul.ST.colQuantity, dicQuantities(oWkItem.Id)
                        If Left(dicQuantities(oWkItem.Id), 1) = "=" Then pSSCumul.ES.applyStyleByCoords irow, pSSCumul.ST.colQuantity, Doublon
                        
                
                Else 'c'est un doublon
                    'on vire la quantit|fffd| existante
                    pSSCumul.ES.writeFormulaToCellByCoords irow, pSSCumul.ST.colQuantity, "0"
                    'on masque
                    pSSCumul.ES.hideRow (irow)
                End If
            Else
                pSSCumul.ES.hideRow (irow)
            End If
        End If
        
    Next
    
    'On supprime les groupements de ligne
    pSSCumul.ES.indentRowsReset
    
    'On masque la feuille de base
    pSSBase.ES.hideSheet
    
    'Initialisation des filtres
    pSSCumul.IsRowsChapterHidden = True
    pSSCumul.IsRowsCommentHidden = True
    pSSCumul.IsRowsOtherHidden = True
    
    'Activation de la feuille cumul
    pSSCumul.ES.Sheet.activate

    
    'On indique que la feuille de bse c'est celle du cumul
    pActiveSSType = Cumul
    
    
End Sub

'R|fffd|active la feuille de base et reprend les PU de la feuille de cumul pour les r|fffd|injecter dans la feuille de base
Public Sub cumulRestoreBaseSheet()
Dim oWklist As cWkItemList
Dim oWkItem As cWkItem
Dim i As Long


    'On r|fffd|affiche la feuille de base
    pSSBase.ES.showSheet
    
    
    'On masque la feuille cumul
    pSSCumul.ES.hideSheet
    
    
    'on parse la feuille de cumul et on r|fffd|cup|fffd|re les PU
    Set oWklist = New cWkItemList
    oWklist.fillWithStudySheet pSSCumul
    
    're-|fffd|criture
    For i = 1 To oWklist.count
        Set oWkItem = oWklist.list.item(i)
        If oWkItem.WkType = Price Then
            If oWkItem.IsDuplicated Then
                'Pas touche |fffd| la formule
            Else
                'r|fffd|cup|fffd|ration ligne et mise |fffd| jour prix
                oWkItem.writeUnitPriceToES pSSBase, pSSBase.rowById(oWkItem.Id)
            End If
        End If
    Next
    
    'conservation des coefs
    If pSSCumul.ST.isCoefAllowed And pSSBase.ST.isCoefAllowed Then
        If pSSCumul.IsCoefEnabled And Not pSSBase.IsCoefEnabled Then pSSBase.coefShowColCoef
        If Not pSSCumul.IsCoefEnabled And pSSBase.IsCoefEnabled Then pSSBase.coefHideColCoef
        pSSBase.ES.writeToCellByAddress pSSBase.ST.cellCoefGeneral, pSSCumul.ES.readCellValueToStringByAddress(pSSBase.ST.cellCoefGeneral)
    End If
    
    pSSBase.ES.Sheet.activate
    
    'On indique que la feuille active c'est la feuille de base
    pActiveSSType = Base
End Sub

'*****************************************************************************************************
' Import |fffd|tude de prix
'*****************************************************************************************************
'Import depuis det.txt
Public Sub importDetTxt()
Dim sPath As String
Dim oWklist As cWkItemList
Dim oWkItem As cWkItem

    'Chargement liste |fffd| partir du det.txt
    Set oWklist = New cWkItemList
    oWklist.fillWithDetTxt detTxtFilePath

    'Ecriture des valeurs sur la feuille
    oWklist.writeUnitPricesAndQuantitiesValuesToStudySheet activeSS
    
End Sub

'Import depuis fichier excel ancien format
Public Sub importOldExcelValues(oWb As aExcelWorkBook)
Dim sName As String
Dim oOldES As aExcelSheet
Dim oWklist As cWkItemList
Dim oWkItem As cWkItem

    sName = oWb.Workbook.name
    sName = Left(sName, InStrRev(sName, ".") - 1)
    Set oOldES = oWb.getSheetByName(sName)
 
    'Chargement liste |fffd| partir du det.txt
    Set oWklist = New cWkItemList
    oWklist.fillWithOldExcel oOldES

    'Ecriture des valeurs sur la feuille
    oWklist.writeUnitPricesAndQuantitiesValuesToStudySheet activeSS
End Sub

'Import depuis un fichier excel original
Public Sub importUnitPricesFromOriginalExcel()
On Error GoTo fin
    Dim sFilePath As String
    Dim mydic As Dictionary
    Dim sName As String
    Dim oOriReader As CSpigaoOriginalReader
    Dim irow As Long
    Dim i As Long
    Dim oWkItem As cWkItem
    

    
    'recup fichier
    sFilePath = sgFileSystem.promptForFilePath(sgSpigaoConfiguration.RepoFolderPath, dealFolderPath, "Devis excel", "*.xlsx;*.xlsm")
    If sFilePath = "" Then Exit Sub
    If Not sgFileSystem.FileExists(sFilePath) Then Exit Sub
    sName = sgFileSystem.getFileNameFromFilePath(sFilePath)
    
    'chargement
    Set oOriReader = New CSpigaoOriginalReader
    oOriReader.DieXmlFilePath = projectId
    oOriReader.FileNameToParse = sName
    oOriReader.OriginalfilePath = sFilePath
    Set mydic = oOriReader.toDictionary()
    
    'Si au moins 1 PU remont|fffd| on |fffd|crit dans la fen|fffd|tre courante
    If Not mydic Is Nothing Then
        If mydic.count > 0 Then
            For i = 0 To mydic.count - 1
                Set oWkItem = mydic.Items(i)
                irow = activeSS.rowById(oWkItem.Id)
                If irow > 0 Then
                    oWkItem.writeUnitPriceToES activeSS, irow
                End If
            Next
        End If
    End If
    
    
fin:
    If Err Then MsgBox "Erreur lors de l'import des PU dans l'|fffd|tude." & vbCrLf & Err.Description
End Sub


'*****************************************************************************************************
' Enregistrement
'*****************************************************************************************************
Public Function save(sDealTargetFolderPath As String, sStudyName As String, bApplyFolderTemplate As Boolean) As Boolean
On Error GoTo fin

Dim sDieTargetFolderPath As String
Dim sStudyTargetFolderPath As String
Dim sStudyTargetPath As String
Dim sDieCurrentFolderPath As String
Dim i As Integer
Dim sextension As String


    save = False
    If pEW.hasMacro Then
        sextension = ".xlsm"
    Else
        sextension = ".xlsx"
    End If
    
    'Cr|fffd|ation (si besoin) et configuration du r|fffd|pertoire d'affaire en appliquant le template
    createDealFolder sDealTargetFolderPath, bApplyFolderTemplate
    
    If Not sgFileSystem.FolderExists(sDealTargetFolderPath) Then
        MsgBox "Impossible de poursuivre, le r|fffd|pertoire d'affaire n'existe pas."
        Exit Function
    End If
    
    'pr|fffd|paration du r|fffd|pertoire d'enregistrement du die
    If bApplyFolderTemplate And sgSpigaoConfiguration.DieFolderName <> "" Then
        sDieTargetFolderPath = sgFileSystem.joinPath(sDealTargetFolderPath, sgSpigaoConfiguration.DieFolderName)
        'on s'assure qu'il est bien cr|fffd||fffd|
        sgFileSystem.createFolderRecurse sDieTargetFolderPath
    Else
        sDieTargetFolderPath = sDealTargetFolderPath
    End If
    
    
    'recopie du die dans son r|fffd|pertoire cible
    If sgFileSystem.FileExists(projectId) Then
        sDieCurrentFolderPath = sgFileSystem.getFolderPathFromFilePath(projectId)
                
        'on renomme le excel brut livr|fffd|
        sgFileSystem.renameFile oldXlsFilePath, projectName & ".xls.old"
    
        'on recopie si changement de r|fffd|pertoire cible
        If LCase(sDieCurrentFolderPath) <> LCase(sDieTargetFolderPath) Then
            'recopie des fichiers et r|fffd|p btp_spigao
            sgFileSystem.copyDieFilesToFolder sDieCurrentFolderPath, sDieTargetFolderPath, sDealTargetFolderPath, projectName
            
            'on supprime le die source si il a |fffd|t|fffd| download|fffd| par le connecteur
            If Mid(sDieCurrentFolderPath, InStrRev(sDieCurrentFolderPath, "\") + 1, 4) = "die_" Then
                If InStr(sDieTargetFolderPath, sDieCurrentFolderPath) = 0 Then
                    sgFileSystem.deleteFolder sDieCurrentFolderPath
                End If
            End If
        End If
    End If
    
    'enregistrement du devis
    'd|fffd|finition du r|fffd|pertoire de sauvegarde
    If bApplyFolderTemplate And sgSpigaoConfiguration.StudyFolderName <> "" Then
        sStudyTargetFolderPath = sgFileSystem.joinPath(sDealTargetFolderPath, sgSpigaoConfiguration.StudyFolderName)
        sgFileSystem.createFolderRecurse sStudyTargetFolderPath
    Else 'on le met |fffd| la racine
        sStudyTargetFolderPath = sDealTargetFolderPath
    End If

    'd|fffd|finition du fullpath du fichier d'|fffd|tude excel en incr|fffd|mentant les versions
    If InStr(sStudyName, ".") > 0 Then
        pStudyName = Left(sStudyName, InStrRev(sStudyName, ".") - 1)
    Else
        pStudyName = sStudyName
    End If
    If pStudyName = "" Then pStudyName = projectName
    sStudyTargetPath = sgFileSystem.joinPath(sStudyTargetFolderPath, pStudyName)
    While sgFileSystem.FileExists(sStudyTargetPath & sextension) Or sgExcelApplication.hasWorkbookAlreadyLoaded(pStudyName & IIf(i > 0, "_" & i, ""))
        i = i + 1
        sStudyTargetPath = sgFileSystem.joinPath(sStudyTargetFolderPath, pStudyName & "_" & i)
    Wend
    sStudyTargetPath = sStudyTargetPath & sextension
    
    'Maj chemin folder deal
    dealFolderPath = sDealTargetFolderPath
    'Maj lien die devis
    projectId = sgFileSystem.joinPath(sDieTargetFolderPath, sgFileSystem.getFileNameFromFilePath(projectId))
    
    'Enregistrement
    If pEW.saveAs(sStudyTargetPath) Then save = True
    
    Exit Function
    
fin:
    save = False
    
End Function

'Configuration du r|fffd|pertoire d'affaire avec les sous r|fffd|pertoires qui vont bien.
Private Sub createDealFolder(sPath As String, bApplyTemplateFolder As Boolean)
On Error GoTo fin

Dim orootfolder As Folder
    
    'On le cr|fffd||fffd| s'il n'existe pas
    If Not sgFileSystem.FolderExists(sPath) Then
        sgFileSystem.createFolderRecurse sPath
    End If
    
    'Si n|fffd|cessaire on copie le contenu du template dedans.
    If bApplyTemplateFolder Then
        sgFileSystem.copyFolder sgEnvironnement.templateFolderPath, sPath
    End If
    
fin:
    If Err Then
        MsgBox "Erreur lors de la cr|fffd|ation du r|fffd|pertoire d'affaire : " & vbCrLf & Err.Description
    End If
End Sub


'*****************************************************************************************************
' Fermeture
'*****************************************************************************************************
Public Sub closeStudy()
    pEW.closeWorkbook
End Sub


'*****************************************************************************************************
' Fonctions additionnelles
'*****************************************************************************************************
'T|fffd|l|fffd|chargement DCE
Public Sub goToDceDownload()
Dim sUrl As String
Dim bfound As Boolean

    If hasDealId Then
        sUrl = sgSpigao.Detection.WebSite.GetDCEFilePageUrl(CLng(dealId))
        If sUrl <> "" Then
            bfound = True
            getHtml (sUrl)
        End If
    End If
    
    If Not bfound Then MsgBox "Adresse de t|fffd|l|fffd|chargement du DCE inaccessible."
End Sub

'Affichage BP
Public Sub showBpx(irow As Long)

    Dim oProject As Object
    Dim oWkItem As cWkItem
    
    Set oProject = sgSpigao.Processing.LoadProject(projectId)
    If oProject Is Nothing Then Exit Sub
    Set oWkItem = sgWkItemBuilder.buildByStudySheet(activeSS, irow, False)
    If oWkItem Is Nothing Then Exit Sub
    sgSpigao.Processing.UI.showBpx oProject, oWkItem.Id, 2 'ComDocumentType_BPX
    
End Sub

'Affichage vue 360
Public Sub showDeal()

    If Not hasDealId Then Exit Sub
    sgSpigao.Detection.UI.Deals.viewDeal CLng(dealId)
    
End Sub
'---------------------------------------------------------------
' GESTION DES FILTRE CHAPITRES
'---------------------------------------------------------------
Public Sub toggleVisibility_ForChapter(Optional bShow As Variant)
Dim result As Integer

    result = toggleVisibility(eWorkItemType.chapter, bShow)
    activeSS.IsRowsChapterHidden = (result = 2)
End Sub
Public Sub toggleVisibility_ForPrice(Optional bShow As Variant)
Dim result As Integer

    result = toggleVisibility(eWorkItemType.Price, bShow)
    activeSS.IsRowsPriceHidden = (result = 2)
End Sub
Public Sub toggleVisibility_ForComment(Optional bShow As Variant)
Dim result As Integer
    result = toggleVisibility(eWorkItemType.comment, bShow)
    activeSS.IsRowsCommentHidden = (result = 2)
End Sub
Public Sub toggleVisibility_ForTaxes(Optional bShow As Variant)
Dim result As Integer

    result = toggleVisibility(eWorkItemType.Tva, bShow)
    activeSS.IsRowsTaxeHidden = (result = 2)
End Sub
Public Sub ToggleVisibility_ForOther(Optional bShow As Variant)
Dim result As Integer

    result = toggleVisibility(eWorkItemType.Subtotal, bShow)
    activeSS.IsRowsOtherHidden = (result = 2)
End Sub

'Renvoit 1 si on affiche les lignes et 2 si on les masque
Private Function toggleVisibility(iFilter As eWorkItemType, Optional bShow As Variant) As Integer
On Error GoTo fin

Dim k As Integer
Dim i As Long
Dim sh As Excel.Worksheet
Dim oWkItem As cWkItem

    If activeSS Is Nothing Then Exit Function
    
    
    'On d|fffd|finit la transformation |fffd| appliquer
    k = 0
    If Not IsMissing(bShow) Then
        If bShow Then
            k = 1
        Else
            k = 2
        End If
    End If
    
    
    For i = activeSS.ST.rowStart To activeSS.ES.maxRow
        Set oWkItem = sgWkItemBuilder.buildByStudySheet(activeSS, i, False)
        If Not oWkItem Is Nothing Then
            If oWkItem.WkType = iFilter _
                Or (iFilter = eWorkItemType.Tva And (oWkItem.WkType = eWorkItemType.TTC Or oWkItem.WkType = eWorkItemType.Tva)) _
                Or (iFilter = eWorkItemType.Subtotal And oWkItem.WkType <> Price And oWkItem.WkType <> eWorkItemType.comment And oWkItem.WkType <> chapter) Then
                If k = 0 Then
                    If activeSS.ES.isRowHidden(i) Then
                        k = 1 'R|fffd|afficher
                    Else
                        k = 2 'Masquer
                    End If
                End If
            
                If k = 1 Then
                    activeSS.ES.showRow (i)
                Else
                    activeSS.ES.hideRow (i)
                End If
            
            End If
        End If
    Next

    toggleVisibility = k
    
fin:

End Function

'---------------------------------------------------------
' r|fffd|duction des sous-niveaux
'---------------------------------------------------------
Public Sub reduceLevel()

    If pActiveSSType = Base Then
        pSSBase.reduceLevel
    End If

End Sub

'*********************************************************************************
' Methodes additionnelles de demo ou prod
'*********************************************************************************
Public Sub demoPriceRandom()
On Error GoTo fin

Dim irow As Long
Dim oWkItem As cWkItem


    For irow = activeSS.ST.rowStart To activeSS.ES.maxRow
        
        Set oWkItem = sgWkItemBuilder.buildByStudySheet(activeSS, irow, activeSS.IsCoefEnabled)
        If Not oWkItem Is Nothing Then
            If oWkItem.WkType = eWorkItemType.Price Then
                If Not oWkItem.PU.hasFormula And oWkItem.PU.value = 0 Then
                    oWkItem.PU.value = CInt(Rnd(10) * 10000) / 100
                    oWkItem.writeUnitPriceToES activeSS, irow
                End If
            End If
        End If
    Next

fin:
    If Err Then MsgBox "Erreur dans le chiffrage automatique : " & Err.Description

End Sub

Public Sub demoQuantityRandom()
On Error GoTo fin

Dim irow As Long
Dim oWkItem As cWkItem


    For irow = activeSS.ST.rowStart To activeSS.ES.maxRow
        
        Set oWkItem = sgWkItemBuilder.buildByStudySheet(activeSS, irow, activeSS.IsCoefEnabled)
        If Not oWkItem Is Nothing Then
            If oWkItem.WkType = eWorkItemType.Price Then
                If Not oWkItem.QT.hasFormula And oWkItem.QT.value = 0 Then
                    oWkItem.QT.value = CInt(Rnd(10) * 10000) / 100
                    oWkItem.writeUnitPricesAndQuantitiesValuesToES activeSS, irow
                End If
            End If
        End If
    Next

fin:
    If Err Then MsgBox "Erreur dans la saisie al|fffd|atoire de quantit|fffd|s : " & Err.Description

End Sub


Attribute VB_Name = "cStudyBuilder"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

'constructeur de study |fffd| partir d'une feuille excel
Public Function buildByWorksheet(oShActive As Excel.Worksheet) As cStudy
On Error Resume Next
Dim oEw As aExcelWorkBook
Dim oEs As aExcelSheet
Dim oStudy As cStudy
Dim oStudySheet As cStudySheet


    'Chargement du classeur
    Set oEw = sgExcelWorkbookBuilder.buildByWorkbook(oShActive.parent)
    If Not oEw.IsSpigaoStudyWorkbook Then
        MsgBox "Mod|fffd|le incomplet : aucune feuille marqu|fffd|e Spigao trouv|fffd|e. Cr|fffd|ation annul|fffd|e."
        Exit Function
    End If
    
    'Instanciation
    Set oStudy = New cStudy
    
    'Affectation du classeur
    Set oStudy.EW = oEw
    
    'Feuilles et vues du classeur
    For Each oEs In oEw.Sheets
        If oEs.IsSpigaoBaseSheet Then
            Set oStudy.BaseSheet = sgStudySheetBuilder.buildByES(oEs)
        ElseIf oEs.IsSpigaoCumulSheet Then
            Set oStudy.CumulSheet = sgStudySheetBuilder.buildByES(oEs)
        End If
    Next
    
    'Chargement de la feuille active
    Set oEs = sgExcelSheetBuilder.buildByWorksheet(oShActive)
    If oEs.IsSpigaoBaseSheet Then
        oStudy.Mode = eStudySheetMode.Base
    ElseIf oEs.IsSpigaoCumulSheet Then
        oStudy.Mode = eStudySheetMode.Cumul
    Else
        oStudy.Mode = eStudySheetMode.None
    End If


    
    Set buildByWorksheet = oStudy


End Function

'Cr|fffd|ation d'une nouvelle |fffd|tude |fffd| partir d'un project.
Public Function createByProject(oProject As Object, sDealId As String, Optional sDealCaption As String = "") As cStudy
On Error GoTo fin

Dim oStudy As cStudy
Dim oEw As aExcelWorkBook
Dim oEs As aExcelSheet
Dim sTitleBoq As String
Dim oWklist As cWkItemList
Dim oXmlStudy As aXml
Dim oWk As cWkItem
Dim oNode As Object

    '
    modProgress.ProgressInit
    
    'Cr|fffd|ation du classeur
    Set oEw = sgExcelWorkbookBuilder.createByTemplate(sgSpigaoConfiguration.templateForStudyPath)
    'oEW.IsSpigaoStudyWorkbook
    
    'Ciblage de la feuille d'|fffd|tude de base
    Set oStudy = buildByWorksheet(oEw.getBaseSheet.Sheet)
    
    modProgress.ProgressUpdate 0.1
    
    'Chargement XML brut
    Set oXmlStudy = New aXml
    oXmlStudy.LoadFromFile oProject.path
    
    'Param|fffd|tres rep|fffd|res du devis
    'DealFolderPath = getFolderPath(project.path)
    oStudy.dealId = CStr(sDealId)
    oStudy.projectId = oProject.Id
    oStudy.projectReference = oProject.Reference
    oStudy.projectName = oProject.name
    oStudy.VAT = CDbl(oProject.BillOfQuantity.Properties.VatRate) / 100
    oStudy.NbDecimalsForQuantities = oProject.BillOfQuantity.Properties.DecimalDigits
    
    If Not oStudy.readExtendedColsFromXml(oXmlStudy) Then
        Err.Raise 1000, "Format de DIE sp|fffd|cifique", "Import annul|fffd|"
    End If
    
    'Initialisation pricestrength
    If oStudy.BaseSheet.ST.colPriceStrengthIsEnabled Then
        oStudy.BaseSheet.IsPriceStrengthEnabled = Not oStudy.BaseSheet.ES.isColHidden(oStudy.BaseSheet.ST.colPriceStrength)
    Else
        oStudy.BaseSheet.IsPriceStrengthEnabled = False
    End If
        
    'Initialisation coef
    If oStudy.BaseSheet.ST.colCoefIsEnabled Then
        oStudy.BaseSheet.IsCoefEnabled = Not oStudy.BaseSheet.ES.isColHidden(oStudy.BaseSheet.ST.colCoef)
    Else
        oStudy.BaseSheet.IsCoefEnabled = False
    End If
    
    'En-t|fffd|te
    If sTitleBoq = "" Then
        If sDealCaption = "" Then
            'Reconstruction
            Set oNode = oXmlStudy.getNodeFromRoot("//sc:Avis/sc:INFOS/sc:Objet")
            If Not oNode Is Nothing Then sDealCaption = oNode.nodetypedvalue
            Set oNode = oXmlStudy.getNodeFromRoot("//sc:Avis/sc:INFOS/sc:Lot")
            If Not oNode Is Nothing Then
                If oXmlStudy.getAttributValue(oNode, "sc:Num") <> "LG" Then
                    sDealCaption = sDealCaption & " - Lot " & oXmlStudy.getAttributValue(oNode, "sc:Num") & " : " & oNode.nodetypedvalue
                End If
            End If
        End If
            
        If sDealCaption = "" Then
            sTitleBoq = oProject.BillOfQuantity.title & " (" & oProject.Reference & ")"
        Else
            sTitleBoq = sDealCaption & " (" & oProject.Reference & ")"
        End If
    Else
        sTitleBoq = sTitleBoq & " (" & oProject.Reference & ")"
    End If
    sTitleBoq = trimall(sTitleBoq)
    oStudy.writeTitle sTitleBoq
        
    '------------------------------------
    ' r|fffd|cup|fffd|ration des donn|fffd|es
    'Creation liste item depuis IULM
    Set oWklist = New cWkItemList
    oWklist.fillWithBillOfQuantities oProject.BillOfQuantity.GetFlatWorkItemList(0)
       
    'Ajout des sous totaux si n|fffd|cessaire
    If oStudy.BaseSheet.ST.hasTemplateForSubTotal And oStudy.BaseSheet.ST.isGenericSubTotalAllowed Then oWklist.addSubTotals
       
    'Formules sp|fffd|ciales ajout|fffd|es
    oWklist.fillWithExtendedXml oXmlStudy
    
    
    '----------------------------------------
    'Ecriture de la feuille Excel
    'Colonnes sp|fffd|ciales
    If oStudy.hasExtendedCols Then
        oStudy.createExtendedCols
    End If
    
    modProgress.ProgressUpdate 0.2
    
    'Ajout des lignes - premi|fffd|re passe
    oWklist.insertRowsToStudySheet oStudy.BaseSheet
    
    'relecture du mapping des donn|fffd|es Id vs N|fffd| ligne
    oStudy.BaseSheet.loadMapRowToWkId
    
    
    'redirection des formules sp|fffd|ciales
    oWklist.updateFormulas oStudy.BaseSheet
    
    'mise |fffd| jour des donn|fffd|es dans la feuille excel avec formules |fffd| jour
    oWklist.updateRowsToStudySheet oStudy.BaseSheet
    
    'total
    oStudy.BaseSheet.writeTotal
    
    'mise en page
    oStudy.BaseSheet.ApplyDefaultLayout

    oStudy.toggleVisibility_ForTaxes False
    'cartouche
    FillSpecificites oXmlStudy, oStudy, sDealId, sTitleBoq

    Set createByProject = oStudy
    
    modProgress.ProgressClose
    Exit Function
fin:
    'Erreur
    modProgress.ProgressClose
    oEw.closeWorkbook
    Set createByProject = Nothing
End Function

'Cartouche
Private Sub FillSpecificites(oXml As aXml, oStudy As cStudy, iDeal As String, sTitle As String)
Dim oDeal As Object
Dim oER As aExcelRange
Dim oEs As aExcelSheet
Dim oEsSpecificities As aExcelSheet
Dim osh As Excel.Sheets
Dim i As Integer
Dim oNode As Object
Dim sPagesDET As String
Dim sPagesBP As String
Dim oNodesConsignes As Object
Dim oNodeConsigne As Object
Dim irow As Long
Dim sMailAgence As String


Dim sTerritories As String
'Remplissage des infos li|fffd|es au deal
    Set oEsSpecificities = Nothing
    'Feuilles et vues du classeur
    For Each oEs In oStudy.EW.Sheets
        If oEs.IsSpigaoSpecificitiesSheet Then
            Set oEsSpecificities = oEs
            Exit For
        End If
    Next
    If oEsSpecificities Is Nothing Then Exit Sub
    Set oER = sgExcelRangeBuilder.byRange(oEsSpecificities.Sheet.usedRange)
    
    'Die.Title
    oER.replaceIn "#Die.Title#", sTitle
    
    'Die.Id
    oER.replaceIn "#Die.Id#", oStudy.projectReference
    
    If iDeal <> "" And iDeal <> "0" Then
        Set oDeal = sgSpigao.getDealById(iDeal)
        If Not oDeal Is Nothing Then
            'Territories
            If Not oDeal.Territories Is Nothing Then
               For i = 0 To oDeal.Territories.count - 1
                   If sTerritories <> "" Then sTerritories = sTerritories & ", "
                   sTerritories = sTerritories & oDeal.Territories.item(i).designation
               Next
            End If
            oER.replaceIn "#Deal.Territories#", sTerritories
            
            'Deadline
            oER.replaceIn "#Deal.Deadline#", cDtoS(oDeal.DeadLine)
            
            'Mode passation
            oER.replaceIn "#Procedure.Type#", oDeal.ProcedureType.designation
            
            'Moa
            oER.replaceIn "#Moa.Nom#", oDeal.Contractor.name
        End If
    End If
    
    'Retrait des tags non g|fffd|r|fffd|s
    oER.replaceIn "#Deal.Territories#", ""
    oER.replaceIn "#Deal.Deadline#", ""
    oER.replaceIn "#Procedure.Type#", ""
    oER.replaceIn "#Moa.Nom#", ""
    
    
    'Agence
    Set oNode = oXml.getNodeFromRoot("//MailAgence")
    If oNode Is Nothing Then
        sMailAgence = ""
    Else
        sMailAgence = oNode.nodetypedvalue
    End If
    oER.replaceIn "#Agence.Mail#", sMailAgence
    
    'format DIE
    '#Submission.Format#
    If sgFileSystem.FileExists(oStudy.oriFilePath) Then
        oER.replaceIn "#Submission.Format#", "Excel"
    Else
        oER.replaceIn "#Submission.Format#", "PDF"
    End If
    
    '#Die.Dqe.Pages#
    sPagesDET = ""
    Set oNode = oXml.getNodeFromRoot("//sc:SCRIBE/sc:Image[@sc:Type='DET' or @sc:ID='sc1']")
    If Not oNode Is Nothing Then
        sPagesDET = oXml.getAttributValue(oNode, "sc:Count")
    End If
    oER.replaceIn "#Die.Dqe.Pages#", sPagesDET
    
    '#Die.Bpu.Pages#
    sPagesBP = ""
    Set oNode = oXml.getNodeFromRoot("//sc:SCRIBE/sc:Image[@sc:Type='BPU']")
    If Not oNode Is Nothing Then
        sPagesBP = oXml.getAttributValue(oNode, "sc:Count")
    End If
    oER.replaceIn "#Die.Bpu.Pages#", sPagesBP

    irow = 0
    'Points de vigilance
    Set oNodesConsignes = oXml.getNodesFromRoot("//cc:Rules/cc:Rule[@cc:Level='3']/cc:Body/cc:Line")
    If oNodesConsignes.Length = 0 Then Set oNodesConsignes = oXml.getNodesFromRoot("//c:Rules/c:Rule[@c:Level='3']/c:Body/c:Line")
    If Not oNodesConsignes Is Nothing Then
        If oNodesConsignes.Length > 0 Then
            If irow = 0 Then
                irow = oEsSpecificities.getRowByRangeName(cRangeName_rowRuleImportant)
            Else
                irow = irow + 2
            End If
            oEsSpecificities.insertRow irow
            oEsSpecificities.writeToCellByCoords irow, 1, oNodesConsignes.Length & " point" & IIf(oNodesConsignes.Length > 1, "s", "") & " de vigilance"
            oEsSpecificities.applyStyleByCoords irow, 1, eSpigaoStyle.CartoucheVigilance
                        
            For Each oNodeConsigne In oNodesConsignes
                irow = irow + 1
                oEsSpecificities.insertRow irow
                oEsSpecificities.writeToCellByCoords irow, 1, oNodeConsigne.nodetypedvalue
                oEsSpecificities.applyStyleByCoords irow, 1, Normal
                oEsSpecificities.mergeCells irow, 1, 4
            Next
        End If
    End If
    
    
    
    'Consignes importantes
    Set oNodesConsignes = oXml.getNodesFromRoot("//cc:Rules/cc:Rule[@cc:Level='2']/cc:Body/cc:Line")
    If oNodesConsignes.Length = 0 Then Set oNodesConsignes = oXml.getNodesFromRoot("//c:Rules/c:Rule[@c:Level='2']/c:Body/c:Line")
    If Not oNodesConsignes Is Nothing Then
        If oNodesConsignes.Length > 0 Then
            'on insert la ligne de titre
            irow = oEsSpecificities.getRowByRangeName(cRangeName_rowRuleImportant)
            oEsSpecificities.insertRow irow
            oEsSpecificities.writeToCellByCoords irow, 1, oNodesConsignes.Length & " information" & IIf(oNodesConsignes.Length > 1, "s", "") & " importante" & IIf(oNodesConsignes.Length > 1, "s", "")
            oEsSpecificities.applyStyleByCoords irow, 1, eSpigaoStyle.CartoucheImportant
            
            For Each oNodeConsigne In oNodesConsignes
                irow = irow + 1
                oEsSpecificities.insertRow irow
                oEsSpecificities.writeToCellByCoords irow, 1, oNodeConsigne.nodetypedvalue
                oEsSpecificities.applyStyleByCoords irow, 1, Normal
                oEsSpecificities.mergeCells irow, 1, 4
            Next
        End If
    End If
    
    'Consignes compl|fffd|ment
    Set oNodesConsignes = oXml.getNodesFromRoot("//cc:Rules/cc:Rule[@cc:Level='1']/cc:Body/cc:Line")
    If oNodesConsignes.Length = 0 Then Set oNodesConsignes = oXml.getNodesFromRoot("//c:Rules/c:Rule[@c:Level='1']/c:Body/c:Line")
    If Not oNodesConsignes Is Nothing Then
        If oNodesConsignes.Length > 0 Then
            If irow = 0 Then
                irow = oEsSpecificities.getRowByRangeName(cRangeName_rowRuleImportant)
            Else
                irow = irow + 2
            End If
            oEsSpecificities.insertRow irow
            oEsSpecificities.writeToCellByCoords irow, 1, oNodesConsignes.Length & " information" & IIf(oNodesConsignes.Length > 1, "s", "") & " compl|fffd|mentaire" & IIf(oNodesConsignes.Length > 1, "s", "")
            oEsSpecificities.applyStyleByCoords irow, 1, eSpigaoStyle.CartoucheComplement
                        
            For Each oNodeConsigne In oNodesConsignes
                irow = irow + 1
                oEsSpecificities.insertRow irow
                oEsSpecificities.writeToCellByCoords irow, 1, oNodeConsigne.nodetypedvalue
                oEsSpecificities.applyStyleByCoords irow, 1, Normal
                oEsSpecificities.mergeCells irow, 1, 4
            Next
        End If
    End If
    

End Sub

Attribute VB_Name = "cStudyConsultation"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

'********************************************************************
' Classe de gestion des dossiers de consultation
'********************************************************************

'Cr|fffd|ation du classeur
Public Sub createConsultationWorkbook(oStudy As cStudy, oRg As Excel.range)
Dim oEw As aExcelWorkBook
Dim oStudyConsultation As cStudy
Dim tRows() As Long
Dim irow As Long
Dim i As Long
Dim oWk As cWkItem
Dim oSS_source As cStudySheet
Dim oSS_target As cStudySheet
Dim sUrlBP As String
Dim sConsultationName As String
Dim sConsultationFileFullPath As String
Dim bOneRowInserted As Boolean

    If oRg Is Nothing Then Exit Sub
    
    Set oSS_source = oStudy.activeSS
    'Cr|fffd|ation du classeur
    Set oEw = sgExcelWorkbookBuilder.createByTemplate(sgSpigaoConfiguration.templateForConsultationPath)
    'oEW.IsSpigaoStudyWorkbook
    
    'Ciblage de la feuille d'|fffd|tude de base
    Set oStudyConsultation = sgStudyBuilder.buildByWorksheet(oEw.getBaseSheet.Sheet)
    Set oSS_target = oStudyConsultation.BaseSheet
    
    'Si on a un BP dans le die on r|fffd|cup|fffd|re l'url de visu
    If oStudy.hasBP Then
        sUrlBP = "http://old.spigao.com/Visualisation/" & oStudy.projectReference & "/" & oStudy.projectName & "BPX.PDF"
    End If

    'Chargement du fichier de consultation
    tRows = GetSelectedRowsOrdered(oRg)
    For i = 0 To UBound(tRows)
        irow = i + oSS_target.ST.rowStart
        Set oWk = sgWkItemBuilder.buildByStudySheet(oSS_source, CLng(tRows(i)), False)
        If Not oWk Is Nothing Then
            If oWk.WkType = eWorkItemType.Price Then bOneRowInserted = True
            'on reset les pu
            If Not oWk.PU Is Nothing Then oWk.PU.value = 0
            oWk.writeInsToES oSS_target, irow
            oWk.writeUpdToES oSS_target, irow
            
            'Ajout hyperlien
            If oWk.WkType = eWorkItemType.Price And sUrlBP <> "" Then
                oSS_target.ES.setHyperlinkByCoords irow, oSS_target.ST.colPriceNumber, sUrlBP
            End If
        End If
        
    Next
    
    If Not bOneRowInserted Then
        MsgBox "Veuillez s|fffd|lectionner au moins une ligne de prix pour cr|fffd|er le fichier de consultation."
        oEw.closeWorkbook
        Exit Sub
    End If
    
    'Titre
    oSS_target.writeTitle oSS_source.ES.readCellValueToStringByAddress(cRangeName_cellTitle)
    
    'Total g|fffd|n|fffd|ral
    oSS_target.writeTotal
    
    
    'Mise en forme finale
    oSS_target.ApplyDefaultLayout
    
    'Enregistrement
    sConsultationName = InputBox("Nom de la consultation : ", "", "Consultation")
    If sConsultationName = "" Then
        oEw.closeWorkbook
        Exit Sub
    End If
    
    sConsultationName = cleanFileName(sConsultationName)
    sConsultationFileFullPath = sgFileSystem.joinPath(oStudy.studyfolderPath, sConsultationName & ".xlsx")
    While sgFileSystem.FileExists(sConsultationFileFullPath)
        sConsultationName = InputBox("Ce nom de consultation existe d|fffd|j|fffd|, choisissez en un autre : ", , sConsultationName)
        sConsultationName = cleanFileName(sConsultationName)
        sConsultationFileFullPath = sgFileSystem.joinPath(oStudy.studyfolderPath, sConsultationName & ".xlsx")
    Wend
    
    oEw.saveAs sConsultationFileFullPath
    
    'Message utilisateur
    formConfirm.ShowMsg "Dossier de consultation", "Votre fichier de consultation a bien |fffd|t|fffd| g|fffd|n|fffd|r|fffd| |fffd| l'emplacement suivant :", sConsultationFileFullPath, True, oEw.Workbook
    
End Sub

'Cr|fffd||fffd| un tableau listant dans l'ordre les num|fffd|ros de lignes concern|fffd|s par oSel
Public Function GetSelectedRowsOrdered(oSel As range) As Variant

    Dim r() As Long
    Dim i As Integer
    Dim j As Integer
    Dim k As Integer
    Dim bExist As Boolean
    
    Dim oRow As range
    k = -1
    For Each oRow In oSel.Rows
        
        bExist = False
        
        For i = 0 To k
            If r(i) = oRow.row Then
                bExist = True
                Exit For
            ElseIf r(i) > oRow.row Then
                Exit For
            End If
        Next
        
        If Not bExist Then
            ReDim Preserve r(k + 1)
            k = UBound(r)
            
            For j = k - 1 To i Step -1
                r(j + 1) = r(j)
            Next
            r(i) = oRow.row
        End If
        
    Next
    
    GetSelectedRowsOrdered = r
End Function
Attribute VB_Name = "cStudyExtendedCol"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Public colType As eDataType
Public name As String
Public position As Integer
Public title As String
Public positionXml As Integer
Public positionFromType As eDataType
Public positionFromIndice As Integer



Attribute VB_Name = "cStudySheet"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Implements iRelatedItem
Private WithEvents pES As aExcelSheet
Attribute pES.VB_VarHelpID = -1
'Private pES As aExcelSheet 'Excel sheet de base
Private pST As cStudyTemplate 'Mod|fffd|le de pr|fffd|sentation correspondant
Private pDicMapRowToWkId As New Dictionary 'Dictionnaire de mapping des rows avec Id de workitem

Private pIsLoaded As Boolean

Private pStopEventActivated As Boolean
Private pStopEventDeactivated As Boolean

Private pRelatedStudy As iRelatedItem



Public Property Get Mode() As eStudySheetMode
    Dim s As String
    
    Mode = eStudySheetMode.None
    If pES Is Nothing Then Exit Property
    
    s = pES.getPropertyValue(cPropertyNameTypeSheet)
    If s = cPropertyValueIsBaseSheet Then
        Mode = eStudySheetMode.Base
    ElseIf s = cPropertyValueIsCumulsheet Then
        Mode = eStudySheetMode.Cumul
    End If
End Property
Public Property Let Mode(sValue As eStudySheetMode)

    Select Case sValue
        Case eStudySheetMode.None
            pES.setProperty cPropertyNameTypeSheet, ""
        Case eStudySheetMode.Base
            pES.setProperty cPropertyNameTypeSheet, cPropertyValueIsBaseSheet
        Case eStudySheetMode.Cumul
            pES.setProperty cPropertyNameTypeSheet, cPropertyValueIsCumulsheet
    End Select
    
End Property

Public Property Get IsCoefEnabled() As Boolean
    IsCoefEnabled = (pES.getBooleanProperty(cPropertyCoeffActivated) And pST.isCoefAllowed)
End Property
Public Property Let IsCoefEnabled(bValue As Boolean)
    pES.SetBooleanProperty cPropertyCoeffActivated, bValue
End Property

Public Property Get IsPriceStrengthEnabled() As Boolean
    IsPriceStrengthEnabled = (pES.getBooleanProperty(cPropertyPriceStrengthActivated) And pST.isPriceStrengthallowed)
End Property
Public Property Let IsPriceStrengthEnabled(bValue As Boolean)
    pES.SetBooleanProperty cPropertyPriceStrengthActivated, bValue
End Property


'Filtre des lignes chapitre
Public Property Get IsRowsChapterHidden() As Boolean
    IsRowsChapterHidden = False
    IsRowsChapterHidden = pES.getBooleanProperty(cPropertyRowsChapterHidden)
End Property
Public Property Let IsRowsChapterHidden(bValue As Boolean)
    pES.SetBooleanProperty cPropertyRowsChapterHidden, bValue
End Property
'Filtre des lignes commentaires
Public Property Get IsRowsCommentHidden() As Boolean
    IsRowsCommentHidden = False
    IsRowsCommentHidden = pES.getBooleanProperty(cPropertyRowsCommentHidden)
End Property
Public Property Let IsRowsCommentHidden(bValue As Boolean)
    pES.SetBooleanProperty cPropertyRowsCommentHidden, bValue
End Property
'Filtre des lignes prix
Public Property Get IsRowsPriceHidden() As Boolean
    IsRowsPriceHidden = False
    IsRowsPriceHidden = pES.getBooleanProperty(cPropertyRowsPriceHidden)
End Property
Public Property Let IsRowsPriceHidden(bValue As Boolean)
    pES.SetBooleanProperty cPropertyRowsPriceHidden, bValue
End Property
'Filtre des lignes taxes
Public Property Get IsRowsTaxeHidden() As Boolean
    IsRowsTaxeHidden = False
    IsRowsTaxeHidden = pES.getBooleanProperty(cPropertyRowsTaxeHidden)
End Property
Public Property Let IsRowsTaxeHidden(bValue As Boolean)
    pES.SetBooleanProperty cPropertyRowsTaxeHidden, bValue
End Property
'Filtre des lignes prix
Public Property Get IsRowsOtherHidden() As Boolean
    IsRowsOtherHidden = False
    IsRowsOtherHidden = pES.getBooleanProperty(cPropertyRowsOtherHidden)
End Property
Public Property Let IsRowsOtherHidden(bValue As Boolean)
    pES.SetBooleanProperty cPropertyRowsOtherHidden, bValue
End Property


Public Property Get ES() As aExcelSheet
    Set ES = pES
End Property
Public Property Set ES(oEs As aExcelSheet)
    Set pES = oEs
End Property
Public Property Get ST() As cStudyTemplate
    Set ST = pST
End Property
Public Property Set ST(oST As cStudyTemplate)
    Set pST = oST
End Property
Public Property Set relatedStudy(oRI As iRelatedItem)
    Set pRelatedStudy = oRI
End Property

Public Property Let NbDecimalsForQuantities(iValue As Integer)
    pST.NbDecimalsForQuantities = iValue
End Property
'Chargement des donn|fffd|es du StudySheet depuis la feuille Excel
Public Sub loadBySheet()

    If pES Is Nothing Then Exit Sub
    'lecture du template
    Set pST = New cStudyTemplate
    pST.loadBySheet pES
    
    'lecture du mapping row/wkitem
    loadMapRowToWkId
    
    'Affichage / masquage
    'hideChapterTotal sgSpigaoConfiguration.HideChapterTotal_Disabled
    pIsLoaded = True

End Sub

'Stocke en m|fffd|moire le lien IdWkItem / iRow
Public Sub loadMapRowToWkId()
Dim i As Long
Dim myRange As range

    pDicMapRowToWkId.RemoveAll
    For i = pST.rowStart To pES.maxRow
        If pES.readCellValueToStringByCoords(i, pST.colId) <> "" Then
            pDicMapRowToWkId.add pES.readCellValueToStringByCoords(i, pST.colId), i
        End If
    Next

End Sub




'-------------------------------------------------------------------------
' Gestion du changement de cellule
'-------------------------------------------------------------------------
Private Sub pES_ESChange(oREOld As aExcelRange, oRENew As aExcelRange, bAllowed As Variant)

    'TODO
    
    
End Sub


'-------------------------------------------------------------------------
' Activation de la feuille
'-------------------------------------------------------------------------
Private Function iRelatedItem_IsActivated(Optional sName As String = "") As iRelatedItem
    If Not pRelatedStudy Is Nothing Then pRelatedStudy.IsActivated pES.sheetName
End Function


Private Function iRelatedItem_IsDeactivated(Optional sName As String = "") As iRelatedItem
    If Not pRelatedStudy Is Nothing Then pRelatedStudy.IsDeactivated pES.sheetName
End Function


'--------------------------------------------------------------------------
' Export : mise |fffd| jour des donn|fffd|es du Project IULM avec les donn|fffd|es de la feuille
'--------------------------------------------------------------------------
Public Function updateProject(ByRef oProject As Object) As Boolean

   Dim MyItem As Object
   Dim oWkPrice As cWkItem
   Dim i As Long

   i = pST.rowStart
   'On parcourt toutes les lignes du devis dans Excel
   'While ws.Cells(i, curSpigaoStudy.ViewColId) <> ""
   While i <= ES.maxRow
   
        Set oWkPrice = sgWkItemBuilder.buildByStudySheet(Me, i)
        'Chargement du workItem correspondant a l'identifiant SPIGAO de ligne
        If Not oWkPrice Is Nothing Then
            Set MyItem = oProject.BillOfQuantity.FindWorkItemById(oWkPrice.Id)
            'Pour les chapitres ajoutes dynamiquement notamment quand chaptermandatory=true
            If Not MyItem Is Nothing Then
                If Not MyItem.asPrice Is Nothing Then
                    'Mise a jour de la quantite uniquement si feuille de base
                    If Mode = Base And Not oWkPrice.QT Is Nothing Then
                        If oWkPrice.QT.hasValue Then
                            MyItem.asPrice.SetQuantity oWkPrice.QT.value
                        Else
                            MyItem.asPrice.SetQuantity 0
                        End If
                    End If
                    'Mise a jour du prix unitaire
                    If Not oWkPrice.PU Is Nothing Then
                        If oWkPrice.PU.hasValue Then
                            MyItem.asPrice.SetUnitPrice oWkPrice.PU.value
                        Else
                            MyItem.asPrice.SetUnitPrice 0
                            'MsgBox "Erreur : prix de la ligne " & i & " non numerique"
                        End If
                    End If
                End If
            End If
        End If
        i = i + 1
   Wend


End Function

'G|fffd|n|fffd|ration det.txt
Public Function createStream(sPath As String, dicExtendedCols As Dictionary) As Boolean

   Dim oStream As aStream
   Dim oWkItem As cWkItem
   Dim i As Long
   Dim t() As Variant
   Dim k As Integer
   Dim oExtendedCol As cStudyExtendedCol
   Dim sKey As String
   Dim sValue As Variant
   Dim odata As cWkData
   
   Set oStream = New aStream
   
   'Ligne d'en-t|fffd|te
    ReDim t(dicExtendedCols.count + 1)
    t(0) = "N|fffd| Prix"
    For k = 0 To dicExtendedCols.count - 1
         sKey = dicExtendedCols.Keys(k)
         t(k + 1) = sKey
    Next
       
   t(k + 1) = "MT"
   oStream.writeLine t(), vbTab
   
   i = pST.rowStart
   'On parcourt toutes les lignes du devis dans Excel
   'While ws.Cells(i, curSpigaoStudy.ViewColId) <> ""
   While i <= ES.maxRow
        ReDim t(dicExtendedCols.count + 1)
        
        Set oWkItem = sgWkItemBuilder.buildByStudySheet(Me, i)
        If Not oWkItem Is Nothing Then
            If oWkItem.Id <> "" And oWkItem.WkType <> eWorkItemType.chapter And oWkItem.WkType <> eWorkItemType.comment Then
                t(0) = oWkItem.IdDetTxt
                
                'On parcourt dans l'ordre du dictionary
                For k = 0 To dicExtendedCols.count - 1
                    sKey = dicExtendedCols.Keys(k)
                    'Cas unit
                    If LCase(sKey) = "unit" Then
                        sValue = oWkItem.Unit
                    Else
                        If LCase(sKey) = "pu" Then
                            Set odata = oWkItem.PU
                        ElseIf LCase(sKey) = "qt|fffd|" Then
                            Set odata = oWkItem.QT
                        Else
                            Set oExtendedCol = dicExtendedCols(sKey)
                            If Not oWkItem.dicExtendedDatas Is Nothing Then
                                If oWkItem.dicExtendedDatas.exists(sKey) Then
                                    Set odata = oWkItem.dicExtendedDatas(sKey)
                                End If
                            End If
                        End If
                        If Not odata Is Nothing Then
                            sValue = odata.value
                        Else
                            sValue = 0
                        End If
                        sValue = cvStrToDbl(CStr(sValue))
                        If IsNull(sValue) Then sValue = 0
                        sValue = Replace(CStr(sValue), ",", ".")
                    End If
                    t(k + 1) = sValue
                Next
                'Col MT
                If Not oWkItem.MT Is Nothing Then
                    t(k + 1) = oWkItem.MT.value
                End If
                oStream.writeLine t(), vbTab
            End If
        End If
        i = i + 1
   Wend

    oStream.saveAs sPath

End Function

'********************************************************************************
' LECTURE
'******************************************************************************
'Renvoi l'adresse d'une cellule par rapport |fffd| un Id de WkItem et un type de donn|fffd|e)
Public Function cellAddressById(sId As String, dataType As eDataType) As String
    If pDicMapRowToWkId.exists(sId) Then
        cellAddressById = pES.getAddressByCoord(pDicMapRowToWkId.item(sId), pST.col(dataType))
    End If
End Function
'Renvoi l'adresse d'une cellule par rapport |fffd| un Id de WkItem et un type de donn|fffd|e)
Public Function cellAddressByIdCol(sId As String, sColName As String) As String
    If pDicMapRowToWkId.exists(sId) And pST.getExtendedColIndex(sColName) > 0 Then
        cellAddressByIdCol = pES.getAddressByCoord(pDicMapRowToWkId.item(sId), pST.getExtendedColIndex(sColName))
    End If
End Function
'Renvoi l'adresse d'une cellule par rapport |fffd| un Id de WkItem et un id de colonne
Public Function cellAddressByIdColIndex(sId As String, iCol As Integer) As String
    If pDicMapRowToWkId.exists(sId) Then
        cellAddressByIdColIndex = pES.getAddressByCoord(pDicMapRowToWkId.item(sId), iCol)
    End If
End Function
'Renvoi l'adresse d'une cellule par rapport |fffd| une r|fffd|f|fffd|rence ancienne de type 'P_2_z1x23 PU')
Public Function cellAddressByOldRef(sOldRef As String) As String
Dim sId As String
Dim eDt As eDataType

    sId = sgOldRef.byOldRef(sOldRef).Id
    eDt = sgOldRef.byOldRef(sOldRef).dataType
    
    cellAddressByOldRef = cellAddressById(sId, eDt)
    
End Function
'Renvoi l'adresse d'une cellule par rapport |fffd| une r|fffd|f|fffd|rence ancienne de type 'P@z1x23 PU')
Public Function cellAddressByNewRef(sNewRef As String) As String
Dim sId As String
Dim eDt As eDataType
Dim oOldRef As cSpigaoOldRef

    Set oOldRef = sgOldRef.byNewRef(sNewRef)

    If oOldRef.dataType = Extended Then
        cellAddressByNewRef = cellAddressByIdCol(oOldRef.Id, oOldRef.extCol)
    Else
        cellAddressByNewRef = cellAddressById(oOldRef.Id, oOldRef.dataType)
    End If
    
End Function

'Renvoie l'id d'une ligne |fffd| partir de son adresse excel
Public Function wkItemIdByRowId(irow As Long) As String
    'on r|fffd|cup|fffd|re l'id |fffd| partir de la ref excel
    wkItemIdByRowId = pES.readCellValueToStringByCoords(irow, pST.colId)
End Function

'Renvoi le num|fffd|ro de ligne |fffd| partir d'un id

Public Function rowById(sId As String) As Long
    If pDicMapRowToWkId.exists(sId) Then
        rowById = pDicMapRowToWkId(sId)
    End If
End Function

'**************************************************************************
' Gestion sp|fffd|cifique des colonnes de prix unitaire |fffd|ditables
' si le mode coef est activ|fffd|, la colonne |fffd|ditable est celle de PU sec
' sinon c'est la colonne PU normale
'**************************************************************************
Public Property Get colUnitPriceEditable() As Integer
    If IsCoefEnabled And pST.colUnitPriceWithoutCoefIsEnabled Then
        colUnitPriceEditable = pST.colUnitPriceWithoutCoef
    Else
        colUnitPriceEditable = pST.colUnitPrice
    End If
End Property
Public Property Get colUnitPriceEditableIsEnabled() As Boolean
    colUnitPriceEditableIsEnabled = (colUnitPriceEditable <> 0)
End Property
'**************************************************************************
' Calculs sp|fffd|ciaux
'**************************************************************************
'Fonction de conversion d'une formule standard en formule applicable sur la feuille Excel
' Exemple : "P@01.1 MT" => "I7"
Public Function cvFormulaToStudyExcelFormula(sFormula As String) As String
On Error GoTo fin
Dim s As String
Dim sNameCell As String
Dim sNewNameCell As String
Dim sSource As String


    s = sFormula
    sSource = sFormula
    While sgRegex.matchPattern(sSource, "(REC@)|(P@)|(MT@)|(ST@)|(HT@)|(TTC@)|(TVA@)")
        sNameCell = sgRegex.extractFirstPattern(sSource, "(\()(REC@[^)]{1,}|MT@[^)]{1,}|P@[^)]{1,}|ST@[^)]{1,}|HT@[^)]{1,}|TTC@[^)]{1,}|TVA@[^)]{1,})(\))", 1)
        sNewNameCell = cellAddressByNewRef(sNameCell)
        sNameCell = "(" & sNameCell & ")"
        If sNewNameCell <> "" Then
            s = Replace(s, sNameCell, sNewNameCell)
            sSource = Replace(sSource, sNameCell, sNewNameCell)
        Else
            'on d|fffd|gage le nom du  ssource comme |fffd|a on le recherche pas |fffd| nouveau
            sSource = Replace(sSource, sNameCell, "")
        End If
    Wend

    cvFormulaToStudyExcelFormula = s
fin:
    If Err Then
        cvFormulaToStudyExcelFormula = ""
    End If
    
    
End Function




'********************************************************************************
' ECRITURE
'********************************************************************************

Public Sub writeTitle(s As String)
    pES.writeToCellByAddress pST.cellTitleAddress, s
End Sub

'Ajout des colonnes sp|fffd|ciales
Public Sub createExtendedCols(oDicExtendedCols As Dictionary)
Dim i As Integer
Dim iPos As Integer
Dim bFinished As Boolean
Dim iCol As Integer
Dim iNbColsAdded As Integer
Dim oExtendedCol As cStudyExtendedCol
Dim iColFrom As Integer

    If oDicExtendedCols Is Nothing Then Exit Sub
    'R|fffd|cup|fffd|ration de la position minimum en colonne
    For i = 0 To oDicExtendedCols.count - 1
        Set oExtendedCol = oDicExtendedCols.Items(i)
        If iPos = 0 Then
            iPos = oExtendedCol.positionXml
        Else
            If iPos > oExtendedCol.positionXml Then iPos = oExtendedCol.positionXml
        End If
    Next
    
    'par d|fffd|faut on se positionne sur le min entre col pu et col quantit|fffd|
    iCol = pST.colQuantity
    If pST.colUnitPrice < iCol Then iCol = pST.colUnitPrice
    
'    While Not bFinished
'        bFinished = True
        For i = 0 To oDicExtendedCols.count - 1
            Set oExtendedCol = oDicExtendedCols.Items(i)
            
            'If oExtendedCol.positionXml = iPos Then 'on traite la colonne
                'on ne rajoute que les colonnes non pr|fffd|sentes
                If LCase(oExtendedCol.name) = "pu" Then
                    iCol = pST.colUnitPrice + iNbColsAdded
                    If pST.rowTitle > 0 Then pES.writeToCellByCoords pST.rowTitle, iCol, oExtendedCol.title
                ElseIf LCase(oExtendedCol.name) = "qt|fffd|" Then
                    iCol = pST.colQuantity + iNbColsAdded
                    If pST.rowTitle > 0 Then pES.writeToCellByCoords pST.rowTitle, iCol, oExtendedCol.title
                ElseIf LCase(oExtendedCol.name) = "unit" Then
                    iCol = pST.colUnit
                    If pST.rowTitle > 0 Then pES.writeToCellByCoords pST.rowTitle, iCol, oExtendedCol.title
                ElseIf LCase(oExtendedCol.name) = "mt" Then
                    iCol = pST.colTotalPrice + iNbColsAdded
                    If pST.rowTitle > 0 Then pES.writeToCellByCoords pST.rowTitle, iCol, oExtendedCol.title
                Else 'on ins|fffd|re
                
                    Select Case oExtendedCol.positionFromType
                        Case eDataType.Quantity
                            iColFrom = pST.colQuantity
                        Case eDataType.Unit
                            iColFrom = pST.colUnit
                        Case eDataType.UnitPrice
                            iColFrom = pST.colUnitPrice
                        Case eDataType.TotalPrice
                            iColFrom = pST.colTotalPrice
                        Case Else
                            'Pas g|fffd|r|fffd|
                            MsgBox "Erreur de positionnement des colonnes"
                    End Select
                
                    iCol = iColFrom + oExtendedCol.positionFromIndice - 1
                
                    pES.insertColAfter iCol, "col_" & oExtendedCol.name
                    iNbColsAdded = iNbColsAdded + 1
                    'titre
                    If pST.rowTitle > 0 Then pES.writeToCellByCoords pST.rowTitle, iCol + 1, oExtendedCol.title
                    'iCol = iCol + 1
                End If
                iPos = iPos + 1
                bFinished = False
'            ElseIf oExtendedCol.positionXml > iPos Then
'                'on se positionne apr|fffd|s la colonne colMT
'                iCol = pST.colTotalPrice + oExtendedCol.positionXml - 6
'
'                pES.insertColAfter iCol, "col_" & oExtendedCol.name
'                'titre
'                If pST.rowTitle > 0 Then pES.writeToCellByCoords pST.rowTitle, iCol + 1, oExtendedCol.title
'
'            End If
            
        Next
'    Wend

    'on recharge le template...
    pST.loadBySheet pES
End Sub



Public Sub writeTotal()

    'Total HT
    If pST.cellTotalGeneralHTIsEnabled Then
        pES.writeFormulaToCellByAddress pST.cellTotalGeneralHT, "=SUBTOTAL(9," & usedRange(pST.colReportMT).address(False, False) & ")"
    End If

End Sub


'--------------------------------------------------------------
' MISE EN PAGE
'--------------------------------------------------------------
Public Sub ApplyDefaultLayout()
'On Error Resume Next
Dim i As Integer
Dim sKey As String
Dim iCol As Integer


    pES.Sheet.Columns(pST.colId).Hidden = True
    pES.Sheet.Columns(pST.colId).wrapText = False
    'If pST.colDesignationIsEnabled Then usedRange(pST.colDesignation).WrapText = True

    If pST.colQuantityIsEnabled Then
        usedRange(pST.colQuantity).Cells.NumberFormat = pST.FormatForQuantities
        usedRange(pST.colQuantity).HorizontalAlignment = xlRight
        pES.resizeColumnWidth pST.colQuantity, cMinWidthForQuantities
    End If

    If pST.colUnitPriceIsEnabled Then
        usedRange(pST.colUnitPrice).NumberFormat = pST.FormatForUnitPrices
        usedRange(pST.colUnitPrice).HorizontalAlignment = xlRight
        pES.resizeColumnWidth pST.colUnitPrice, cMinWidthForPrices
    End If
    
    If pST.colCoefIsEnabled Then
        usedRange(pST.colCoef).Cells.NumberFormat = "0.00"
        usedRange(pST.colCoef).HorizontalAlignment = xlRight
    End If
    
    If pST.colUnitPriceWithoutCoefIsEnabled Then
        usedRange(pST.colUnitPriceWithoutCoef).NumberFormat = pST.FormatForUnitPrices
        usedRange(pST.colUnitPriceWithoutCoef).HorizontalAlignment = xlRight
        pES.resizeColumnWidth pST.colUnitPrice, cMinWidthForPrices
    End If

    If pST.colTotalPriceIsEnabled Then
        usedRange(pST.colTotalPrice).NumberFormat = "#,##0.00"
        usedRange(pST.colTotalPrice).HorizontalAlignment = xlRight
        pES.resizeColumnWidth pST.colUnitPrice, cMinWidthForPrices
    End If
    
    If pST.colPriceStrengthIsEnabled Then
        usedRange(pST.colPriceStrength).NumberFormat = "0.0%"
        usedRange(pST.colPriceStrength).HorizontalAlignment = xlRight
    End If
    
    If pST.colUnitIsEnabled Then
        usedRange(pST.colUnit).HorizontalAlignment = xlCenter
    End If
    
    If pST.hasExtendedCols Then
        For i = 0 To pST.dicExtendedCols.count - 1
            sKey = pST.dicExtendedCols.Keys(i)
            iCol = pST.getExtendedColIndex(sKey)
            If iCol > 0 Then
                If Left(LCase(sKey), 2) = "pu" Then
                    pES.resizeColumnWidth iCol, cMinWidthForPrices
                    usedRange(iCol).NumberFormat = pST.FormatForUnitPrices
                    usedRange(iCol).HorizontalAlignment = xlRight
                ElseIf Left(LCase(sKey), 3) = "qt|fffd|" Then
                    pES.resizeColumnWidth iCol, cMinWidthForQuantities
                    usedRange(iCol).NumberFormat = pST.FormatForQuantities
                    usedRange(iCol).HorizontalAlignment = xlRight
                ElseIf Left(LCase(sKey), 2) = "mt" Then
                    pES.resizeColumnWidth iCol, cMinWidthForPrices
                    usedRange(iCol).NumberFormat = "#,##0.00"
                    usedRange(iCol).HorizontalAlignment = xlRight
                Else
                    MsgBox "non g|fffd|r|fffd|"
                End If
            End If
        Next
    End If
    

    pES.Sheet.range(CStr(pST.rowStart) & ":" & pES.Sheet.usedRange.Rows.count).EntireRow.AutoFit

    

End Sub

Private Function usedRange(iCol As Integer) As range
    Set usedRange = pES.Sheet.range(pST.colAddress(iCol, pES.Sheet.usedRange.Rows.count))
End Function


'********************************************************************************
' Coefficients
'********************************************************************************
Public Sub coefShowColCoef()

    If Not pST.isCoefAllowed Then Exit Sub
    
    'On flag
    IsCoefEnabled = True
    
    'Parcourt la liste pour re-|fffd|crire les PU
    rewriteUnitPricesAndCoefs False
    
    'Affiche les colonnes
    pES.showCol pST.colCoef
    pES.showCol pST.colUnitPriceWithoutCoef
    pES.resizeColumnWidth pST.colUnitPriceWithoutCoef, cMinWidthForPrices
    
End Sub
Public Sub coefHideColCoef()

    If Not pST.isCoefAllowed Then Exit Sub
    
    'on flag
    IsCoefEnabled = False
    
    'Parcourt la liste pour re-|fffd|crire les PU
    rewriteUnitPricesAndCoefs True
    
    'Masque les colonnes
    pES.hideCol pST.colCoef
    pES.hideCol pST.colUnitPriceWithoutCoef
End Sub
Private Sub rewriteUnitPricesAndCoefs(bFromUnitPriceWithoutCoef As Boolean)
    Dim oWkItem As cWkItem
    Dim i As Long
    
    'Parcourt la liste pour re-|fffd|crire les PU
    For i = pST.rowStart To pES.maxRow
        Set oWkItem = sgWkItemBuilder.buildByStudySheet(Me, i, bFromUnitPriceWithoutCoef)
        If Not oWkItem Is Nothing Then
            If oWkItem.WkType = Price Then
                oWkItem.writeUnitPriceToES Me, i
            End If
        End If
    Next
End Sub

'********************************************************************************
' Poids des prix
'********************************************************************************
' affiche ou masque le poids des prix
Public Sub strengthShowColPriceStrength()
Dim irow As Long
Dim oWkItem As cWkItem
Dim oER As aExcelRange

    If Not pST.isPriceStrengthallowed Then Exit Sub
    
    For irow = pST.rowStart To pES.maxRow
        Set oWkItem = sgWkItemBuilder.buildByStudySheet(Me, irow)
        Set oER = sgExcelRangeBuilder.byCoords(pES, irow, pST.colPriceStrength)
        
        If Not oWkItem Is Nothing Then
            If oWkItem.WkType = Price Then
                oER.applyPriceStrengthFormat
            Else
                oER.resetFormat
            End If
        Else
            oER.resetFormat
        End If
    Next
    
    pES.showCol pST.colPriceStrength, 10
     
    'Ajout filtre PDP
    With pES.Sheet
    If pES.IsSpigaoBaseSheet Then
        pES.Sheet.range(.Cells(pST.rowTitle, pST.colPriceStrength), .Cells(pES.maxRow, pST.colPriceStrength)).AutoFilter Field:=1
    ElseIf pES.IsSpigaoCumulSheet Then
        pES.Sheet.range(.Cells(pST.rowTitle, pST.colPriceStrength), .Cells(pES.maxRow, pST.colPriceStrength)).AutoFilter Field:=1, Criteria1:="<>"
    
    End If
    End With
    IsPriceStrengthEnabled = True
    
End Sub

Public Sub strengthHideColPriceStrength()
Dim irow As Long
Dim oWkItem As cWkItem
Dim oER As aExcelRange
    
    If Not pST.isPriceStrengthallowed Then Exit Sub
    
    For irow = pST.rowStart To pES.maxRow
        Set oER = sgExcelRangeBuilder.byCoords(pES, irow, pST.colPriceStrength)
        oER.resetFormat
    Next
    
    pES.hideCol pST.colPriceStrength
    
    IsPriceStrengthEnabled = False
End Sub

Private Sub pES_ESChanged(oREOld As aExcelRange, oRENew As aExcelRange, bAllowed As Variant)
Dim bOK As Boolean

    bOK = True
    If Not (oREOld.column = pST.colPriceNumber) _
    And Not (oREOld.column = pST.colDesignation) _
    And Not (oREOld.column = pST.colUnit) _
    And Not (oREOld.column = pST.colQuantity) _
    And Not (oREOld.column = pST.colTotalPrice) _
    And Not (oREOld.column = pST.colCoef) Then bOK = False
    
    If oREOld.row < pST.rowStart Then bOK = False
    If oREOld.row > pES.maxRow Then bOK = False
    
    bAllowed = bOK
        
End Sub

'***************************************************
' Affiche/Masque les totaux de chapitre
'***************************************************
Public Sub hideChapterTotal(bHide As Boolean)
Dim i As Long

    For i = pST.rowStart To pES.maxRow
        If Left(pES.readCellValueToStringByCoords(i, pST.colId), 2) = "C@" Then
            pES.hideFont i, pST.colTotalPrice, bHide
        End If
    Next
End Sub

'indique si ona masqu|fffd| le total au niveau du chapitre (couleur de police=couleur de fond)
Public Function isChapterTotalHidden() As Boolean
On Error Resume Next
Dim i As Long

    For i = pST.rowStart To pES.maxRow
        If Left(pES.readCellValueToStringByCoords(i, pST.colId), 2) = "C@" Then
            isChapterTotalHidden = (pES.Sheet.Cells(i, pST.colTotalPrice).Font.Color = pES.Sheet.Cells(i, pST.colTotalPrice).Interior.Color)
            Exit Function
        End If
    Next
    
End Function
'*****************************************************
' R|fffd|duction du nombre de niveaux
'*****************************************************
Public Sub reduceLevel()
Dim iLevelStart As Integer
Dim iCurrentLevel As Integer
Dim iMaxLevel As Integer
Dim i As Long
Dim iRowStart As Long

    If ActiveCell Is Nothing Then Exit Sub
    
    iRowStart = ActiveCell.row
    iLevelStart = pES.Sheet.Rows(iRowStart).OutlineLevel
    
    If Left(pES.readCellValueToStringByCoords(iRowStart, pST.colId), 2) <> "C@" Then
        Exit Sub
    End If
    
    i = iRowStart + 1
    iCurrentLevel = pES.Sheet.Rows(i).OutlineLevel
    iMaxLevel = iCurrentLevel
    While iCurrentLevel > iLevelStart
        If iMaxLevel < iCurrentLevel Then iMaxLevel = iCurrentLevel
        i = i + 1
        iCurrentLevel = pES.Sheet.Rows(i).OutlineLevel
    Wend
    
    i = iRowStart + 1
    iCurrentLevel = pES.Sheet.Rows(i).OutlineLevel
    While iCurrentLevel > iLevelStart
        If Left(pES.Sheet.Cells(i, 1), 2) = "C@" Then
            pES.applyStyleByAddress "B" & i & ":I" & i, eSpigaoStyle.comment
            pES.writeFormulaToCellByCoords i, pST.colTotalPrice, ""
        End If
        'pES.Sheet.Rows(i).OutlineLevel = iLevelStart + 1
        i = i + 1
        iCurrentLevel = pES.Sheet.Rows(i).OutlineLevel
    Wend

End Sub
Attribute VB_Name = "cStudySheetBuilder"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

'Builder de study sheet
'TODO : |fffd| adapter pour sheet cumul si n|fffd|cessaire
Public Function buildByES(oEs As aExcelSheet) As cStudySheet
Dim oSS As cStudySheet
    Set oSS = New cStudySheet
    Set oSS.ES = oEs
    oSS.loadBySheet
    Set oSS.ES.RelatedStudySheet = oSS
    'Set oES.RelatedStudySheet = oSS
    Set buildByES = oSS
End Function


Public Function createCumulSheet(oSSBase As cStudySheet) As cStudySheet


    If oSSBase Is Nothing Then Exit Function
    
    'Recopie de la feuille de base
    

End Function
Attribute VB_Name = "cStudySubDetailBuilder"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit


Public Sub initTemplate(oST As cStudyTemplate)
    If Not oST.hasTemplateForSubDetail Then Exit Sub
    oST.shTemplateForSubDetail.showSheet
End Sub

Public Sub closeTemplate(oST As cStudyTemplate)
    If Not oST.hasTemplateForSubDetail Then Exit Sub
    oST.shTemplateForSubDetail.hideSheet
End Sub

Public Function build(oST As cStudyTemplate, iNum As Long) As aExcelSheet
Dim oEsTemplate As aExcelSheet
    Set build = Nothing
    
    If Not oST.hasTemplateForSubDetail Then Exit Function
    Set oEsTemplate = oST.shTemplateForSubDetail
    
    Set build = oEsTemplate.copyTo(CStr(iNum), True)
    build.replaceIn "#NUMAUTO_P#", CStr(iNum)
    

End Function
Attribute VB_Name = "cStudyTemplate"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private pColNumAuto As Integer
Private pColId As Integer
Private pColPriceNumber As Integer
Private pColDesignation As Integer
Private pColUnit As Integer
Private pColQuantity As Integer
Private pColUnitPriceWithoutCoef As Integer
Private pColCoef As Integer
Private pColUnitPrice As Integer
Private pColTotalPrice As Integer
Private pColPriceStrength As Integer
Private pColMin As Integer
Private pColMax As Integer
Private pColReportMT As Integer
Private pColRefId As Integer 'Colonne contenant l'id du priceitem de r|fffd|f|fffd|rence en cas de doublon et |fffd| d|fffd|faut l'id du priceitem en cours

Private pCellCoefGeneral_Address As String
Private pCellTotalHT_Address As String
Private pCellTitle_Address As String

'Private pHasTemplateForPriceItem As Boolean
'Private pHasTemplateForSubDetails As Boolean
'Private pHasTemplateForSubTotal As Boolean

Private pRgTemplateForPriceItem As range
Private pRgTemplateForPriceItemDuplicated As range
Private pRgTemplateForSubTotalItem As range
Private pRgTemplateForChapterItem As range
Private pRgTemplateForCommentItem As range
Private pShTemplateForSubDetail As aExcelSheet

Private pRowCountForChapterItem As Integer
Private pRowCountForSubTotalItem As Integer
Private pRowCountForPriceItem As Integer

Private pIsCoefAllowed As Boolean
Private pIsPriceStrengthAllowed As Boolean
Private pIsCumulAllowed As Boolean
Private pIsSubTotalAllowed As Boolean 'autorisation de marquage des sous-totaux du dossier
Private pIsRecapAllowed As Boolean
Private pIsTotalGeneralAllowed As Boolean
Private pIsTotalOnChapterAllowed As Boolean
Private pIsGenericSubTotalAllowed As Boolean 'autorisation de marquage des sous-totaux automatiques (un par chapitre)

Private pStyleST2 As eSpigaoStyle
Private pStyleST3 As eSpigaoStyle
Private pStyleTVA As eSpigaoStyle

''
''Public Const cPropertySpigaoAllowCoef As String = "SpigaoIsCoefAllowed"
''Public Const cPropertySpigaoAllowPriceStrength As String = "SpigaoIsPriceStrengthAllowed"
''Public Const cPropertySpigaoAllowCumul As String = "SpigaoIsCumulAllowed"
''Public Const cPropertySpigaoAllowSubTotal As String = "SpigaoIsSubTotalAllowed"
''Public Const cPropertySpigaoAllowRecap As String = "SpigaoIsRecapAllowed"
''Public Const cPropertySpigaoAllowTotalOnChapter As String = "SpigaoIsTotalChapterAllowed"
''Public Const cPropertySpigaoAllowTotalGeneral As String = "SpigaoIsTotalRecapAllowed"
Private pRowStart As Long
Private pRowEnd As Long
Private pRowTitle As Long


Private pESStyle As New aExcelSheet

Private pNbDecimalsForQuantities As Integer
Private pNbDecimalsForUnitPrices As Integer


Private pDicExtendedCols As Dictionary
Private pSpecialFormulaForMT As String

Public Property Get rowStart() As Long
    rowStart = pRowStart
End Property
Public Property Get rowTitle() As Long
    rowTitle = pRowTitle
End Property
Public Property Get colId() As Integer
    colId = pColId
End Property
Public Property Get colPriceNumber() As Integer
    colPriceNumber = pColPriceNumber
End Property
Public Property Get colPriceNumberIsEnabled() As Boolean
    colPriceNumberIsEnabled = (pColPriceNumber <> 0)
End Property
Public Property Get colDesignation() As Integer
    colDesignation = pColDesignation
End Property
Public Property Get colDesignationIsEnabled() As Boolean
    colDesignationIsEnabled = (pColDesignation <> 0)
End Property

Public Property Get colUnit() As Integer
    colUnit = pColUnit
End Property
Public Property Get colUnitIsEnabled() As Boolean
    colUnitIsEnabled = (pColUnit <> 0)
End Property
Public Property Get colQuantity() As Integer
    colQuantity = pColQuantity
End Property
Public Property Get colQuantityIsEnabled() As Boolean
    colQuantityIsEnabled = (pColQuantity <> 0)
End Property

Public Property Get colUnitPriceWithoutCoef() As Integer
    colUnitPriceWithoutCoef = pColUnitPriceWithoutCoef
End Property
Public Property Get colUnitPriceWithoutCoefIsEnabled() As Boolean
    colUnitPriceWithoutCoefIsEnabled = (pColUnitPriceWithoutCoef <> 0)
End Property

Public Property Get colUnitPrice() As Integer
    colUnitPrice = pColUnitPrice
End Property
Public Property Get colUnitPriceIsEnabled() As Boolean
    colUnitPriceIsEnabled = (pColUnitPrice <> 0)
End Property
Public Property Get colTotalPrice() As Integer
    colTotalPrice = pColTotalPrice
End Property
Public Property Get colTotalPriceIsEnabled() As Boolean
    colTotalPriceIsEnabled = (pColTotalPrice <> 0)
End Property
Public Property Get colCoef() As Integer
    colCoef = pColCoef
End Property
Public Property Get colCoefIsEnabled() As Boolean
    colCoefIsEnabled = (pColCoef <> 0)
End Property
Public Property Get colPriceStrength() As Integer
    colPriceStrength = pColPriceStrength
End Property
Public Property Get colPriceStrengthIsEnabled() As Boolean
    colPriceStrengthIsEnabled = (pColPriceStrength <> 0)
End Property
Public Property Get colReportMT() As Integer
    colReportMT = pColReportMT
End Property

Public Property Get colReportMTIsEnabled() As Boolean
    colReportMTIsEnabled = (pColReportMT <> 0)
End Property
Public Property Get colRefId() As Integer
    colRefId = pColRefId
End Property
Public Property Get colRefIdIsEnabled() As Boolean
    colRefIdIsEnabled = (pColRefId <> 0)
End Property
Public Property Get colMin() As Integer
    colMin = pColMin
End Property
Public Property Get colMax() As Integer
    colMax = pColMax
End Property
Public Property Get cellTitleAddress() As String
    cellTitleAddress = cRangeName_cellTitle
End Property

Public Property Get colNumAuto() As Integer
    colNumAuto = pColNumAuto
End Property
Public Property Get colNumAutoIsEnabled() As Boolean
    colNumAutoIsEnabled = (pColNumAuto <> 0)
End Property


Public Property Get hasExtendedCols() As Boolean
    hasExtendedCols = Not (pDicExtendedCols Is Nothing)
End Property
Public Property Get dicExtendedCols() As Dictionary
    Set dicExtendedCols = pDicExtendedCols
End Property
Public Property Let specialFormulaForMT(sValue As String)
    pSpecialFormulaForMT = sValue
End Property
Public Property Get specialFormulaForMT() As String
    specialFormulaForMT = pSpecialFormulaForMT
End Property

'adresse du coef general
Public Property Get cellCoefGeneral() As String
    cellCoefGeneral = cRangeName_cellCoefGeneral
End Property
Public Property Get cellCoefGeneralIsEnabled() As Boolean
    cellCoefGeneralIsEnabled = (pCellCoefGeneral_Address <> "")
End Property

Public Property Get cellTotalGeneralHT() As String
    cellTotalGeneralHT = cRangeName_cellTotal_HT
End Property
Public Property Get cellTotalGeneralHTIsEnabled() As Boolean
    cellTotalGeneralHTIsEnabled = (pCellTotalHT_Address <> "") And colReportMTIsEnabled
End Property

Public Property Get styleST2() As eSpigaoStyle
    styleST2 = pStyleST2
End Property
Public Property Get styleST3() As eSpigaoStyle
    styleST3 = pStyleST3
End Property
Public Property Get styleTva() As eSpigaoStyle
    styleTva = pStyleTVA
End Property
'------------------------------------------------------------------
' Gestion des nombres de d|fffd|cimales pour les quantit|fffd|s
'------------------------------------------------------------------
Public Property Get NbDecimalsForQuantities() As Integer
    If pNbDecimalsForQuantities = 0 Then
        NbDecimalsForQuantities = 2
    Else
        NbDecimalsForQuantities = pNbDecimalsForQuantities
    End If
End Property
Public Property Get FormatForQuantities() As String
    FormatForQuantities = "#,##0"
    If NbDecimalsForQuantities > 0 Then FormatForQuantities = FormatForQuantities & "." & String(NbDecimalsForQuantities, "0")
End Property

Public Property Let NbDecimalsForQuantities(iValue As Integer)
    pNbDecimalsForQuantities = iValue
End Property

'------------------------------------------------------------------
' Gestion des nombres de d|fffd|cimales pour les PU
'------------------------------------------------------------------
Public Property Get NbDecimalsForUnitPrices() As Integer
    If pNbDecimalsForUnitPrices = 0 Then
        NbDecimalsForUnitPrices = 2
    Else
        NbDecimalsForUnitPrices = pNbDecimalsForUnitPrices
    End If
End Property
Public Property Get FormatForUnitPrices() As String
    FormatForUnitPrices = "#,##0"
    If NbDecimalsForUnitPrices > 0 Then FormatForUnitPrices = FormatForUnitPrices & "." & String(NbDecimalsForUnitPrices, "0")
End Property

Public Property Let NbDecimalsForUnitPrices(iValue As Integer)
    pNbDecimalsForUnitPrices = iValue
End Property

'Renvoie l'addresse de localisation d'une ligne utile dans le template
Public Function rowAddress(irow As Long) As String
    rowAddress = sgExcelApplication.Engine.range(Cells(irow, pColMin), Cells(irow, pColMax)).address(False, False)
End Function
Public Function rowsAddress(iRowStart As Long, iRowEnd As Long) As String
    rowsAddress = sgExcelApplication.Engine.range(Cells(iRowStart, pColMin), Cells(iRowEnd, pColMax)).address(False, False)
End Function
'Renvoie l'addresse de localisation d'une colonne utile dans le template
Public Function colAddress(iCol As Integer, iRowMax As Long) As String
    colAddress = sgExcelApplication.Engine.range(Cells(pRowStart, iCol), Cells(iRowMax, iCol)).address(False, False)
End Function
'Renvoi l'adresse de la colonne en fonction d'un type de donn|fffd|e
Public Function col(dType As eDataType) As Integer
    Select Case dType
        Case eDataType.Quantity
            col = pColQuantity
        Case eDataType.UnitPrice
            col = pColUnitPrice
        Case eDataType.TotalPrice
            col = pColTotalPrice
    End Select
End Function


'Lecture des param|fffd|tres de la feuille
Public Sub loadBySheet(oESStudy As aExcelSheet)
On Error GoTo fin
    Dim oEw As aExcelWorkBook
    Dim sShortName As String
    Dim oStyle As Object

    If oESStudy Is Nothing Then Exit Sub
    Set oEw = oESStudy.parent
    
    'Gestion migration : valeurs par d|fffd|faut
    pColNumAuto = 0
    pColId = 1
    pColPriceNumber = 2
    pColDesignation = 3
    pColUnit = 4
    pColQuantity = 5
    pColUnitPriceWithoutCoef = 6
    pColCoef = 7
    pColUnitPrice = 8
    pColTotalPrice = 9
    pColPriceStrength = 10
    pColMin = 1
    pColMax = 10
    pColReportMT = 0
    pColRefId = 0
    
    pCellCoefGeneral_Address = "$G$3"
    pCellTitle_Address = "$C$1"
    pCellTotalHT_Address = "$I$3"
    
    pRowStart = 5
    pRowTitle = 4
    'Si au moins la colonne Id nomm|fffd|e=> on charge la conf depuis la feuille
    If oESStudy.cellExists(cRangeName_colId) Then
        pColNumAuto = oESStudy.getColByRangeName(cRangeName_colNumAuto)
        pColId = oESStudy.getColByRangeName(cRangeName_colId)
        pColPriceNumber = oESStudy.getColByRangeName(cRangeName_colPriceNumber)
        pColDesignation = oESStudy.getColByRangeName(cRangeName_colDesignation)
        pColUnit = oESStudy.getColByRangeName(cRangeName_colUnit)
        pColQuantity = oESStudy.getColByRangeName(cRangeName_colQuantity)
        pColUnitPriceWithoutCoef = oESStudy.getColByRangeName(cRangeName_colUnitPriceWithoutCoef)
        pColCoef = oESStudy.getColByRangeName(cRangeName_colCoef)
        pColUnitPrice = oESStudy.getColByRangeName(cRangeName_colUnitPrice)
        pColTotalPrice = oESStudy.getColByRangeName(cRangeName_colTotalPrice)
        pColPriceStrength = oESStudy.getColByRangeName(cRangeName_colPriceStrength)
        pColReportMT = oESStudy.getColByRangeName(cRangeName_colReportMT)
        pColRefId = oESStudy.getColByRangeName(cRangeName_colRefId)
        pColMin = oESStudy.getColByRangeName(cRangeName_colMin)
        If pColMin = 0 Then
            pColMin = Min(pColId, pColPriceNumber, pColDesignation, pColUnit, pColQuantity, pColUnitPriceWithoutCoef, pColCoef, pColUnitPrice, pColTotalPrice, pColPriceStrength)
        End If
        pColMax = oESStudy.getColByRangeName(cRangeName_colMax)
        If pColMax = 0 Then
            pColMax = Max(pColId, pColPriceNumber, pColDesignation, pColUnit, pColQuantity, pColUnitPriceWithoutCoef, pColCoef, pColUnitPrice, pColTotalPrice, pColPriceStrength)
        End If
        
        pCellCoefGeneral_Address = oESStudy.getAddressByRangeName(cRangeName_cellCoefGeneral)
        pCellTitle_Address = oESStudy.getAddressByRangeName(cRangeName_cellTitle)
        pCellTotalHT_Address = oESStudy.getAddressByRangeName(cRangeName_cellTotal_HT)
        
        pRowStart = oESStudy.getRowByRangeName(cRangeName_rowStart)
        pRowTitle = oESStudy.getRowByRangeName(cRangeName_rowTitle)
        If pRowStart = 0 Then MsgBox "Erreur de configuration du mod|fffd|le de devis : rowBaseStart=0"
    End If
    
    'Chargement des colonnes |fffd|tendues
    Dim sName As Variant
    For Each sName In oESStudy.Sheet.parent.Names
        sShortName = sName.name
        If InStr(sShortName, "!") > 0 Then sShortName = Mid(sShortName, InStr(sShortName, "!") + 1)
        If (Left(LCase(sShortName), 6) = "col_pu" And LCase(sShortName) <> "col_pu") _
            Or (Left(LCase(sShortName), 7) = "col_qt|fffd|" And LCase(sShortName) <> "col_qt|fffd|") _
            Or (Left(LCase(sShortName), 6) = "col_mt" And LCase(sShortName) <> "col_mt") Then
            If pDicExtendedCols Is Nothing Then Set pDicExtendedCols = New Dictionary
            pDicExtendedCols.add Mid(sShortName, 5), oESStudy.getColByRangeName(sShortName)
        End If
    Next
    
    
    'Chargement des options sp|fffd|cifiques
    pIsCoefAllowed = oESStudy.getBooleanProperty(cPropertySpigaoAllowCoef)
    pIsPriceStrengthAllowed = oESStudy.getBooleanProperty(cPropertySpigaoAllowPriceStrength)
    pIsCumulAllowed = oESStudy.getBooleanProperty(cPropertySpigaoAllowCumul)
    pIsSubTotalAllowed = oESStudy.getBooleanProperty(cPropertySpigaoAllowSubTotal)
    pIsGenericSubTotalAllowed = oESStudy.getBooleanProperty(cPropertySpigaoAllowGenericSubTotal)
    pIsRecapAllowed = oESStudy.getBooleanProperty(cPropertySpigaoAllowRecap)
    pIsTotalOnChapterAllowed = oESStudy.getBooleanProperty(cPropertySpigaoAllowTotalOnChapter)
    pIsTotalGeneralAllowed = oESStudy.getBooleanProperty(cPropertySpigaoAllowTotalGeneral)
    
    
    'Chargement de la conf li|fffd|e |fffd| la feuille de style
    If oEw.sheetExists(cStyleDefaultSheetName) Then
    Set pESStyle = oEw.getSheetByName(cStyleDefaultSheetName)
    If Not pESStyle Is Nothing Then
        If pESStyle.cellExists(cRangeName_templateForPriceItem) Then
            Set pRgTemplateForPriceItem = pESStyle.Sheet.range(cRangeName_templateForPriceItem)
            pRowCountForPriceItem = pRgTemplateForPriceItem.Rows.count
            If pESStyle.cellExists(cRangeName_templateForPriceItemDuplicated) Then
                Set pRgTemplateForPriceItemDuplicated = pESStyle.Sheet.range(cRangeName_templateForPriceItemDuplicated)
            Else
                Set pRgTemplateForPriceItemDuplicated = pRgTemplateForPriceItem
            End If
        Else
            Set pRgTemplateForPriceItem = Nothing
            pRowCountForPriceItem = 1
        End If
        
        If pESStyle.cellExists(cRangeName_templateForSubTotal) Then
            Set pRgTemplateForSubTotalItem = pESStyle.Sheet.range(cRangeName_templateForSubTotal)
            pRowCountForSubTotalItem = pRgTemplateForSubTotalItem.Rows.count
        Else
            Set pRgTemplateForSubTotalItem = Nothing
            pRowCountForSubTotalItem = 1
        End If
        
        If pESStyle.cellExists(cRangeName_templateForChapterItem) Then
            Set pRgTemplateForChapterItem = pESStyle.Sheet.range(cRangeName_templateForChapterItem)
            pRowCountForChapterItem = pRgTemplateForChapterItem.Rows.count
        Else
            Set pRgTemplateForChapterItem = Nothing
            pRowCountForChapterItem = 1
        End If
        
        'R|fffd|cup|fffd|ration des styles |fffd|tendus
        pStyleST2 = eSpigaoStyle.Subtotal
        pStyleST3 = eSpigaoStyle.Subtotal
        pStyleTVA = eSpigaoStyle.TotalGeneral
        For Each oStyle In pESStyle.Sheet.parent.Styles
            If oStyle.name = pESStyle.cvStyleToName(eSpigaoStyle.Subtotal2) Then
                pStyleST2 = eSpigaoStyle.Subtotal2
            ElseIf oStyle.name = pESStyle.cvStyleToName(eSpigaoStyle.Subtotal3) Then
                pStyleST3 = eSpigaoStyle.Subtotal3
            ElseIf oStyle.name = pESStyle.cvStyleToName(eSpigaoStyle.Tva) Then
                pStyleTVA = eSpigaoStyle.Tva
            End If
        Next
    End If
    End If
    'Recup du sousdetail
    If oEw.sheetExists(cSheetName_templateForSubDetails) Then
        Set pShTemplateForSubDetail = oEw.getSheetByName(cSheetName_templateForSubDetails)
    End If
    
fin:
    If Err Then MsgBox "Erreur lors de la lecture des param|fffd|tres du mod|fffd|le d'|fffd|tude." & Err.Description

End Sub

'-----------------------------------------------------------------------------
' Options sp|fffd|cifiques du template
'-----------------------------------------------------------------------------

Public Property Get isCoefAllowed() As Boolean
    isCoefAllowed = pIsCoefAllowed
End Property
Public Property Get isPriceStrengthallowed() As Boolean
    isPriceStrengthallowed = pIsPriceStrengthAllowed
End Property
Public Property Get isCumulAllowed() As Boolean
    isCumulAllowed = pIsCumulAllowed
End Property
Public Property Get isSubTotalAllowed() As Boolean
    isSubTotalAllowed = pIsSubTotalAllowed
End Property
Public Property Get isGenericSubTotalAllowed() As Boolean
    isGenericSubTotalAllowed = pIsGenericSubTotalAllowed
End Property
Public Property Get isRecapAllowed() As Boolean
    isRecapAllowed = pIsRecapAllowed
End Property
Public Property Get isTotalGeneralAllowed() As Boolean
    isTotalGeneralAllowed = pIsTotalGeneralAllowed
End Property
Public Property Get isTotalOnChapterAllowed() As Boolean
    isTotalOnChapterAllowed = pIsTotalOnChapterAllowed And colReportMTIsEnabled
End Property

Public Property Get hasTemplateForPriceItem() As Boolean
    hasTemplateForPriceItem = Not (pRgTemplateForPriceItem Is Nothing)
End Property
Public Property Get hasTemplateForPriceItemDuplicated() As Boolean
    hasTemplateForPriceItemDuplicated = Not (pRgTemplateForPriceItemDuplicated Is Nothing)
End Property
Public Property Get hasTemplateForChapterItem() As Boolean
    hasTemplateForChapterItem = Not (pRgTemplateForChapterItem Is Nothing)
End Property
Public Property Get hasTemplateForCommentItem() As Boolean
    hasTemplateForCommentItem = Not (pRgTemplateForCommentItem Is Nothing)
End Property
Public Property Get hasTemplateForSubDetail() As Boolean
    hasTemplateForSubDetail = Not (pShTemplateForSubDetail Is Nothing)
End Property
Public Property Get hasTemplateForSubTotal() As Boolean
    hasTemplateForSubTotal = Not (pRgTemplateForSubTotalItem Is Nothing)
End Property

Public Property Get shTemplateForSubDetail() As aExcelSheet
    Set shTemplateForSubDetail = pShTemplateForSubDetail
End Property
Public Property Get rgTemplateForChapterItem() As range
    Set rgTemplateForChapterItem = pRgTemplateForChapterItem
End Property
Public Property Get rgTemplateForPriceItem() As range
    Set rgTemplateForPriceItem = pRgTemplateForPriceItem
End Property
Public Property Get rgTemplateForPriceItemDuplicated() As range
    Set rgTemplateForPriceItemDuplicated = pRgTemplateForPriceItemDuplicated
End Property

Public Property Get rgTemplateForSubTotalItem() As range
    Set rgTemplateForSubTotalItem = pRgTemplateForSubTotalItem
End Property

Public Property Get rowCountForChapterItem() As Integer
    rowCountForChapterItem = pRowCountForChapterItem
End Property
Public Property Get rowCountForSubtotalItem() As Integer
    rowCountForSubtotalItem = pRowCountForSubTotalItem
End Property
Public Property Get rowCountForPriceItem() As Integer
    rowCountForPriceItem = pRowCountForPriceItem
End Property
'--------------------------------------------------------------
' Gestion des colonnes |fffd|tendues
'---------------------------------------------------------------
'Ajout des colonnes et affectation des n|fffd| de colonnes correspondant dans la feuille excel
'Public Function addExtendedCols(dicExCols As Dictionary)
'
'Dim oExCol As cStudyExtendedCol
'Dim i As Integer
'Dim iCol As Integer
'
'    If dicExCols.count = 0 Then Exit Function
'
'    Set pDicExtendedCols = New Dictionary
'
'    For i = 0 To dicExCols.count - 1
'        Set oExCol = dicExCols(i)
'        If oExCol.name = "PU" Then iCol = pColUnitPrice
'        If oExCol.name = "Qt|fffd|" Then iCol = pColQuantity
'        If iCol <= pColDesignation Then MsgBox "Erreur dans le rep|fffd|rage des colonnes suppl|fffd|mentaires."
'        pDicExtendedCols.add oExCol.name, iCol
'        iCol = iCol + 1
'    Next
'
'
'End Function

Public Property Get getExtendedColIndex(sName As String) As Integer

    If pDicExtendedCols.exists(sName) Then
        getExtendedColIndex = pDicExtendedCols(sName)
    End If
        
End Property
Attribute VB_Name = "cUnit"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Public code As String
Public designation As String
Public frequence As String


Attribute VB_Name = "cWkData"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private pStringValue As String
Private pValue As Variant
Private pFormula As String
Private pIsSpecialFormula As Boolean


Public Property Get value() As Variant
    value = pValue
End Property
Public Property Let value(vValue As Variant)
    pValue = vValue
End Property
Public Property Get formula() As String
    formula = pFormula
End Property
Public Property Let formula(sValue As String)
    pFormula = sValue
End Property
Public Property Get hasFormula() As Boolean
    hasFormula = pFormula <> ""
End Property
Public Property Get hasSpecialFormula() As Boolean
    hasSpecialFormula = pIsSpecialFormula
End Property
Public Property Let hasSpecialFormula(bValue As Boolean)
    pIsSpecialFormula = bValue
End Property
'Indique si l formule est de type '={valuer numerique}'
Public Property Get hasAbsoluteFormula() As Boolean
    If pFormula <> "" Then
        hasAbsoluteFormula = IsNumeric(cvStrToDbl(Mid(pFormula, 2)))
    End If
End Property
Public Property Get hasValue() As Boolean
    hasValue = IsNumeric(pValue)
End Property

Public Function merge(odata As cWkData)

    If pFormula = "" And odata.formula <> "" Then
        pFormula = odata.formula
        pIsSpecialFormula = odata.hasSpecialFormula
    End If
    If Not odata.value = Null Then
        If (pValue Is Null Or pValue = 0) And odata.value <> 0 Then pValue = odata.value
    End If
    
End Function

'restitue la valeur destin|fffd|e |fffd| une value de cellule Excel
Public Function toCell() As String
    'Par d|fffd|faut on prend la formule
    If pFormula <> "" Then
        toCell = pFormula
        Exit Function
    End If
    
    'Second choix : la valeur
    If Not IsNull(pValue) Then
        toCell = CStr(pValue)
        Exit Function
    End If
    
    '3eme choix : rien
    toCell = ""
End Function

'renvoit une formule expurg|fffd|e du =
Public Function toPureFormula() As String

    If pFormula <> "" And pFormula <> "=" Then
        If Left(pFormula, 1) = "=" Then
            toPureFormula = "(" & Mid(pFormula, 2) & ")"
        Else
            toPureFormula = pFormula
        End If
    ElseIf Not IsNull(pValue) Then
        toPureFormula = CStr(pValue)
    End If

End Function
Attribute VB_Name = "cWkDataBuilder"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Public Function byString(sValue As String) As cWkData
Dim vValue As Variant
Dim odata As cWkData

    Set odata = New cWkData
    If Left(sValue, 1) = "=" Then 'formule
        odata.value = Null
        odata.formula = sValue
    Else
        vValue = cvStrToDbl(sValue)
        If IsNull(vValue) Then
            odata.value = sValue
            odata.formula = ""
        Else
            odata.value = vValue
            odata.formula = ""
        End If
    End If
    Set byString = odata
End Function

Public Function byCell(oValue As range) As cWkData
Dim vValue As Variant
Dim odata As cWkData
    Set odata = New cWkData
    If Left(oValue.formula, 1) = "=" Then
        odata.formula = oValue.formula
        odata.value = oValue.value
    Else
        odata.formula = ""
        vValue = cvStrToDbl(oValue.value)
        If IsNull(vValue) Then
            odata.value = oValue.value
            odata.formula = ""
        Else
            odata.value = vValue
            odata.formula = ""
        End If
    End If
    Set byCell = odata
End Function

Public Function byWkItem(oValue As Object) As cWkData
Dim odata As cWkData

    Set odata = New cWkData
    If IsNumeric(oValue.value) Then
        odata.value = oValue.value
        odata.formula = ""
    Else
        odata.value = Null
        odata.formula = oValue.formula
    End If
    Set byWkItem = odata
    
End Function

Public Function byFormula(sFormula As String, bIsSpecial As Boolean) As cWkData
Dim odata As cWkData

    If Left(sFormula, 1) <> "=" Then
        MsgBox "Formule incorrecte : " & sFormula
        Exit Function
    End If
    
    Set odata = New cWkData
    odata.formula = sFormula
    odata.value = Null
    odata.hasSpecialFormula = bIsSpecial
    Set byFormula = odata
    
End Function
Attribute VB_Name = "cWkItem"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private pId As String
Private pPriceNumber As String
Private pDesignation As String
Private pLevel As Integer
Private pUnit As String
Private pWkType As eWorkItemType
Private pParentId As String
Private pWk As cWkItem
Private pPU As cWkData
Private pQT As cWkData
Private pMT As cWkData
Private pIsPM As Boolean
Private pIsFixed As Boolean
Private pReferenceId As String
Private pParentList As cWkItemList
Private pDicExtendedDatas As Dictionary


Private pNumAuto As Long
Private pNumAutoPrice As Long
Private pNumAutoComment As Long
Private pNumAutoChapter As Long

'Id au sens IULM : P@XXX
Public Property Get Id() As String
    Id = pId
End Property
Public Property Get PriceNumber() As String
    PriceNumber = pPriceNumber
End Property
Public Property Get designation() As String
    designation = pDesignation
End Property
Public Property Get Level() As Integer
    Level = pLevel
End Property
Public Property Get WkType() As eWorkItemType
    WkType = pWkType
End Property
Public Property Get ParentId() As String
    ParentId = pParentId
End Property
Public Property Get Unit() As String
    Unit = pUnit
End Property
Public Property Get IdXml() As String
    IdXml = Mid(pId, 3)
End Property
Public Property Get IdXls() As String
    Select Case pWkType
        Case eWorkItemType.chapter
            IdXls = "C_" & pLevel & "_" & Mid(pId, InStr(pId, "@") + 1)
        Case eWorkItemType.comment
            IdXls = "L_" & pLevel & "_" & Mid(pId, InStr(pId, "@") + 1)
        Case eWorkItemType.Price
            IdXls = "P_" & pLevel & "_" & Mid(pId, InStr(pId, "@") + 1)
        Case eWorkItemType.Subtotal
            IdXls = "ST_" & pLevel & "_" & Mid(pId, InStr(pId, "@") + 1)
        Case eWorkItemType.title
            IdXls = "T_" & pLevel & "_" & Mid(pId, InStr(pId, "@") + 1)
        Case eWorkItemType.HT
            IdXls = "HT_" & pLevel & "_" & Mid(pId, InStr(pId, "@") + 1)
        Case eWorkItemType.MT
            IdXls = "MT_" & pLevel & "_" & Mid(pId, InStr(pId, "@") + 1)
        Case eWorkItemType.TTC
            IdXls = "TTC_" & pLevel & "_" & Mid(pId, InStr(pId, "@") + 1)
        Case eWorkItemType.Tva
            IdXls = "TVA_" & pLevel & "_" & Mid(pId, InStr(pId, "@") + 1)
        Case Else
            IdXls = ""
    End Select
End Property
Public Property Get IdDetTxt() As String
    IdDetTxt = Mid(pId, InStr(pId, "@") + 1)
End Property
Public Property Get PU() As cWkData
    Set PU = pPU
End Property
Public Property Set PU(odata As cWkData)
    Set pPU = odata
    If odata.hasFormula Then
        If IsNumeric(cvStrToDbl(Mid(odata.toCell, 2))) Then pIsFixed = True
    End If
End Property
Public Property Get QT() As cWkData
    Set QT = pQT
End Property
Public Property Set QT(odata As cWkData)
    Set pQT = odata
End Property
Public Property Get MT() As cWkData
    Set MT = pMT
End Property
Public Property Set MT(odata As cWkData)
    Set pMT = odata
End Property
Public Property Get IsPM() As Boolean
    IsPM = pIsPM
End Property
Public Property Let IsPM(bValue As Boolean)
    pIsPM = bValue
End Property
Public Property Get IsFixed() As Boolean
    IsFixed = pIsFixed
End Property
Public Property Let IsFixed(bValue As Boolean)
    pIsFixed = bValue
End Property
Public Property Get IsDuplicated() As Boolean
    IsDuplicated = (pReferenceId <> "")
End Property
Public Property Get referenceId() As String
    referenceId = pReferenceId
End Property
Public Property Get quantityForExcel() As Variant

On Error Resume Next
Dim s2 As String

    If Not QT.hasFormula Then
        If IsPM Then
            quantityForExcel = "PM"
        Else
            quantityForExcel = pQT.value
        End If
    Else
        quantityForExcel = pQT.formula
    End If
    
End Property

Public Property Get numAuto() As Long
    numAuto = pNumAuto
End Property
Public Property Get numAutoPrice() As Long
    numAutoPrice = pNumAutoPrice
End Property
Public Property Get numAutoComment() As Long
    numAutoComment = pNumAutoComment
End Property
Public Property Get numAutoChapter() As Long
    numAutoChapter = pNumAutoChapter
End Property
Public Property Let Id(sValue As String)
    pId = sValue
End Property
Public Property Let PriceNumber(sValue As String)
    pPriceNumber = sValue
End Property
Public Property Let designation(sValue As String)
    pDesignation = sValue
End Property
Public Property Let Level(sValue As Integer)
    pLevel = sValue
End Property
Public Property Let WkType(sValue As eWorkItemType)
    pWkType = sValue
End Property
Public Property Let WkTypeByString(sValue As String)

    If Left(sValue, 2) = "HT" Then
        pWkType = eWorkItemType.HT
    ElseIf Left(sValue, 3) = "TVA" Then
        pWkType = eWorkItemType.Tva
    ElseIf Left(sValue, 3) = "TTC" Then
        pWkType = eWorkItemType.TTC
    ElseIf Left(sValue, 2) = "ST" Then
        pWkType = eWorkItemType.Subtotal
    ElseIf Left(sValue, 2) = "SC" Then
        pWkType = eWorkItemType.SubTotalForChapter
    ElseIf Left(sValue, 2) = "MT" Then
        pWkType = eWorkItemType.MT
    ElseIf Left(sValue, 3) = "REC" Then
        pWkType = eWorkItemType.REC
    ElseIf Left(sValue, 1) = "L" Then
        pWkType = eWorkItemType.comment
    ElseIf Left(sValue, 1) = "C" Then
        pWkType = eWorkItemType.chapter
    ElseIf Left(sValue, 1) = "T" Then
        pWkType = eWorkItemType.title
    ElseIf Left(sValue, 1) = "P" Then
        pWkType = eWorkItemType.Price
    
    Else 'd|fffd|bordement si on passe le num|fffd|ro de prix directement, il n'a pas de pr|fffd|fixe sp|fffd|cifique
        pWkType = eWorkItemType.Price
    End If

End Property

Public Property Let Unit(sValue As String)
    pUnit = sValue
End Property
Public Property Let ParentId(sValue As String)
    pParentId = sValue
End Property
Public Property Let referenceId(sValue As String)
    pReferenceId = sValue
End Property
Public Property Let numAuto(iValue As Long)
    pNumAuto = iValue
End Property
Public Property Let numAutoPrice(iValue As Long)
    pNumAutoPrice = iValue
End Property
Public Property Let numAutoComment(iValue As Long)
    pNumAutoComment = iValue
End Property
Public Property Let numAutoChapter(iValue As Long)
    pNumAutoChapter = iValue
End Property

Public Sub addExtendedData(sDataName As String, odata As cWkData)
   
    If pDicExtendedDatas Is Nothing Then Set pDicExtendedDatas = New Dictionary
    pDicExtendedDatas.add sDataName, odata
    
End Sub

Public Property Get dicExtendedDatas() As Dictionary
    Set dicExtendedDatas = pDicExtendedDatas
End Property
Public Property Set ParentList(oWklist As cWkItemList)
    Set pParentList = oWklist
End Property

Public Property Get subDetailName() As String
    If pWkType = eWorkItemType.Price Then subDetailName = CStr(pNumAutoPrice)
End Property
'Compl|fffd|te les donn|fffd|es courantes avec celles du oWk pass|fffd| en argument
Public Function merge(oWk As cWkItem)
Dim i As Integer
Dim odata As cWkData
Dim sKey As String
    If pPriceNumber = "" And oWk.PriceNumber <> "" Then pPriceNumber = oWk.PriceNumber
    If pDesignation = "" And oWk.designation <> "" Then pDesignation = oWk.designation
    If pLevel = 0 And oWk.Level > 0 Then pLevel = oWk.Level
    If pUnit = "" And oWk.Unit <> "" Then pUnit = oWk.Unit
    If pParentId = "" And oWk.ParentId <> "" Then pParentId = oWk.ParentId
    If pIsFixed = False And oWk.IsFixed = True Then pIsFixed = True
    If pIsPM = False And oWk.IsPM = True Then pIsPM = True
    If pReferenceId = "" And oWk.referenceId <> "" Then pReferenceId = oWk.referenceId
    If Not oWk.QT Is Nothing Then
       If pQT Is Nothing Then Set pQT = New cWkData
       pQT.merge oWk.QT
    End If
    If Not oWk.PU Is Nothing Then
       If pPU Is Nothing Then Set pPU = New cWkData
       pPU.merge oWk.PU
    End If
    If Not oWk.MT Is Nothing Then
       If pMT Is Nothing Then Set pMT = New cWkData
       pMT.merge oWk.MT
    End If
    If Not oWk.dicExtendedDatas Is Nothing Then
       If pDicExtendedDatas Is Nothing Then Set pDicExtendedDatas = New Dictionary
       For i = 0 To oWk.dicExtendedDatas.count - 1
           sKey = oWk.dicExtendedDatas.Keys(i)
           If pDicExtendedDatas.exists(sKey) Then
               Set odata = pDicExtendedDatas(sKey)
               odata.merge oWk.dicExtendedDatas(i)
           Else
               addExtendedData sKey, oWk.dicExtendedDatas(sKey)
           End If
       Next
    End If

End Function


Public Function loadFromSpigaoWkItem(oWk As Object)

    pId = oWk.Id
    pPriceNumber = oWk.PriceNumber.current.value
    pDesignation = oWk.designation.current.value
    pLevel = oWk.Level.current.value
    pParentId = oWk.parent.current.value.Id
    
    If Not oWk.asPrice Is Nothing Then

        
        If oWk.asPrice.IsDuplicated Then pReferenceId = oWk.asPrice.ReferenceItem.Id
        Set pPU = sgWkDataBuilder.byString(oWk.asPrice.UnitPrice.current.value)
        Set pQT = sgWkDataBuilder.byString(oWk.asPrice.Quantity.current.value)
    End If
End Function


Private Sub Class_Initialize()
'        Set pPU = New cWkData
'        Set pQT = New cWkData
'        Set pMT = New cWkData
End Sub

'Fonction principale d'insertion du workitem dans la feuille Excel
'G|fffd|re par insertion d'une ou plusieurs lignes (cas des mod|fffd|les de devis personnalis|fffd|s)
'Renvoit le num|fffd|ro de derni|fffd|re ligne ajout|fffd|
Public Function writeInsToES(oSS As cStudySheet, iRowIndex As Long) As Long
On Error GoTo fin

    Dim oEs As aExcelSheet
    Dim oST As cStudyTemplate
    
    Set oEs = oSS.ES
    Set oST = oSS.ST
    
    'Par d|fffd|faut on |fffd|crit pas donc on renvoit la ligne d'entr|fffd|e
    writeInsToES = iRowIndex
    
    'En fonction du type de workitem et des autorisations du template on |fffd|crit la ligne.
    Select Case pWkType
        Case eWorkItemType.Price
            If Not oST.hasTemplateForPriceItem Then
                writeInsToES = writeInsPriceToEs_Std(oSS, iRowIndex)
            Else
                writeInsToES = writeInsPriceToEs_Spc(oSS, iRowIndex)
            End If
            'Ajout de la feuille sous-detail si n|fffd|cessaire
            writeInsSubDetailToEs oSS
        Case eWorkItemType.chapter
            If Not oST.hasTemplateForChapterItem Then
                writeInsToES = writeInsChapterToEs_Std(oSS, iRowIndex)
            Else
                writeInsToES = writeInsChapterToEs_Spc(oSS, iRowIndex)
            End If
        Case eWorkItemType.comment
            writeInsToES = writeInsCommentToEs_Std(oSS, iRowIndex)
        Case eWorkItemType.Subtotal
            If oSS.ST.hasTemplateForSubTotal Then
                writeInsToES = writeInsSubTotalToES(oSS, iRowIndex)
            ElseIf oSS.ST.isSubTotalAllowed Then
            
                writeInsToES = writeInsRecapToEs_Std(oSS, iRowIndex)
            End If
        Case eWorkItemType.SubTotalForChapter
            If oSS.ST.hasTemplateForSubTotal Then
                writeInsToES = writeInsSubTotalToES(oSS, iRowIndex)
            ElseIf oSS.ST.isSubTotalAllowed Then
                writeInsToES = writeInsRecapToEs_Std(oSS, iRowIndex)
            End If
            
        Case eWorkItemType.Tva, eWorkItemType.HT, eWorkItemType.TTC
            If oSS.ST.isTotalGeneralAllowed Then writeInsToES = writeInsRecapToEs_Std(oSS, iRowIndex)
        Case eWorkItemType.REC
            If oSS.ST.isRecapAllowed Then writeInsToES = writeInsCommentToEs_Std(oSS, iRowIndex)
        Case eWorkItemType.MT
            If oSS.ST.isRecapAllowed Then writeInsToES = writeInsRecapToEs_Std(oSS, iRowIndex)
    End Select
    

fin:
    If Err Then
        Debug.Print Err.Description
    End If
    

End Function


'Fonction principale d'insertion du sous-total d'un chapitre (workitem en cours) dans la feuille Excel
'G|fffd|re par insertion d'une ou plusieurs lignes (cas des mod|fffd|les de devis personnalis|fffd|s)
'Renvoit le num|fffd|ro de derni|fffd|re ligne ajout|fffd|
Public Function writeInsSubTotalToES(oSS As cStudySheet, iRowIndex As Long) As Long
On Error GoTo fin
Dim k As Long
Dim iRowMax As Long
Dim oER As aExcelRange
Dim sAddress As String

    'Par d|fffd|faut on |fffd|crit pas donc on renvoit la ligne d'entr|fffd|e
    writeInsSubTotalToES = iRowIndex
    
    If oSS.ST.hasTemplateForSubTotal Then
        iRowMax = iRowIndex + oSS.ST.rowCountForSubtotalItem - 1
        oSS.ES.insertRowByCopy iRowIndex, oSS.ST.rgTemplateForSubTotalItem
        
        'R|fffd|cup|fffd|ration de la ligne pour |fffd|criture de l'ID
        sAddress = Chr(64 + oSS.ST.colId) & iRowIndex & ":" & Chr(64 + oSS.ST.colId) & (iRowIndex + oSS.ST.rowCountForSubtotalItem - 1)
        Set oER = sgExcelRangeBuilder.byAddress(oSS.ES, sAddress)
        If oER.contains("#ID#") Then 'Prise en compte des sous-totaux sur plusieurs lignes... on |fffd|crit l'id l|fffd| o|fffd| le template le sp|fffd|cifie.
            oER.replaceIn "#ID#", Id
        Else 'Par d|fffd|faut on se met sur la premi|fffd|re ligne
            oSS.ES.writeToCellByCoords iRowIndex, oSS.ST.colId, Id
        End If
        
        'Indentation/groupement
        For k = iRowIndex To iRowMax
            oSS.ES.indentRow k, pLevel
        Next
        writeInsSubTotalToES = iRowMax + 1
    End If
    

fin:
    If Err Then
        Debug.Print Err.Description
    End If
    

End Function
'Mise |fffd| jour des donn|fffd|es de la ligne
Public Function writeUpdToES(oSS As cStudySheet, iRowIndex As Long) As Long
Dim i As Integer
Dim iCol As Integer

Dim sKey As String
Dim odata As cWkData
    If iRowIndex = 0 Then Exit Function
    Select Case pWkType
        Case eWorkItemType.Price
            If Not oSS.ST.hasTemplateForPriceItem Then
                writeUpdToES = writeUpdPriceToEs_Std(oSS, iRowIndex)
            Else
                If IsDuplicated And oSS.ST.hasTemplateForPriceItemDuplicated Then
                    writeUpdToES = writeUpdToEs_Spc(oSS, iRowIndex, oSS.ST.rgTemplateForPriceItemDuplicated.Rows.count)
                Else
                    writeUpdToES = writeUpdToEs_Spc(oSS, iRowIndex, oSS.ST.rowCountForPriceItem)
                End If
            End If
        Case eWorkItemType.chapter
            If Not oSS.ST.hasTemplateForChapterItem Then
                If oSS.ST.isTotalOnChapterAllowed And Not MT Is Nothing Then
                    oSS.ES.writeFormulaToCellByCoords iRowIndex, oSS.ST.colTotalPrice, MT.toCell
                End If
            Else
                writeUpdToES = writeUpdToEs_Spc(oSS, iRowIndex, oSS.ST.rowCountForChapterItem)
            End If
        Case eWorkItemType.comment
            'Nothing
        Case eWorkItemType.Subtotal, eWorkItemType.SubTotalForChapter
            If oSS.ST.hasTemplateForSubTotal Then
                writeUpdToES = writeUpdToEs_Spc(oSS, iRowIndex, oSS.ST.rowCountForSubtotalItem)
            ElseIf oSS.ST.isSubTotalAllowed And Not MT Is Nothing Then
                oSS.ES.writeFormulaToCellByCoords iRowIndex, oSS.ST.colTotalPrice, MT.toCell
                
                'ExtendedCols
                If oSS.ST.hasExtendedCols Then
                    If Not pDicExtendedDatas Is Nothing Then
                        For i = 0 To pDicExtendedDatas.count - 1
                            sKey = pDicExtendedDatas.Keys(i)
                            If Left(LCase(sKey), 2) = "mt" Then
                                Set odata = pDicExtendedDatas(sKey)
                                iCol = oSS.ST.getExtendedColIndex(sKey)
                                'icol=oSS.exte
                                If iCol > 0 Then
                                    oSS.ES.writeFormulaToCellByCoords iRowIndex, iCol, odata.toCell
                                    oSS.ES.Sheet.Cells(iRowIndex, iCol).NumberFormat = oSS.ST.FormatForUnitPrices
                                End If
                            End If
                        Next
                    End If
                End If
            End If
        Case eWorkItemType.Tva, eWorkItemType.HT, eWorkItemType.TTC
            If oSS.ST.isTotalGeneralAllowed And Not MT Is Nothing Then
                oSS.ES.writeFormulaToCellByCoords iRowIndex, oSS.ST.colTotalPrice, MT.toCell
            End If
        Case eWorkItemType.REC
            If oSS.ST.isRecapAllowed And Not MT Is Nothing Then
                oSS.ES.writeFormulaToCellByCoords iRowIndex, oSS.ST.colTotalPrice, MT.toCell
            End If
        Case eWorkItemType.MT
            If oSS.ST.isRecapAllowed And Not MT Is Nothing Then
                oSS.ES.writeFormulaToCellByCoords iRowIndex, oSS.ST.colTotalPrice, MT.toCell
            End If
            'If oSS.ST.IsRecapAllowed Then writeInsToES = writeInsRecapToEs_Std(oSS, iRowIndex)
    End Select
End Function


Public Function writeUnitPriceToES(oSS As cStudySheet, iRowIndex As Long) As Long
'On Error GoTo fin

    
    'on renvoit la ligne d'entr|fffd|e
    writeUnitPriceToES = iRowIndex
    
    '
    If pWkType <> Price Then Exit Function
    
    'En fonction du type de workitem et des autorisations du template on |fffd|crit la ligne.
    If oSS.ST.hasTemplateForPriceItem Then
        If Not PU.hasFormula Then
            If oSS.ST.colUnitPriceIsEnabled Then
                oSS.ES.writeFormulaToCellByCoords iRowIndex, oSS.ST.colUnitPrice, PU.value
            End If
        End If
    Else
        With oSS.ES
            'Cas de coefs activ|fffd|s
            If oSS.IsCoefEnabled Then
                If Not PU.hasFormula Then
                    'On r|fffd|initialise la formule du PU calcul|fffd|
                    .writeFormulaToCellByCoords iRowIndex, oSS.ST.colUnitPrice, "=IFERROR(ROUND(" & .getAddressByCoord(iRowIndex, oSS.ST.colUnitPriceWithoutCoef) & "*" & .getAddressByCoord(iRowIndex, oSS.ST.colCoef) & "," & oSS.ST.NbDecimalsForUnitPrices & "),""-"")"
                    'On charge la valeur du PU sec
                    If oSS.ST.colUnitPriceWithoutCoefIsEnabled Then .writeToCellByCoords iRowIndex, oSS.ST.colUnitPriceWithoutCoef, PU.value
                Else
                    If IsDuplicated Then
                        .writeFormulaToCellByCoords iRowIndex, oSS.ST.colUnitPriceWithoutCoef, "=" & oSS.cellAddressByIdColIndex(referenceId, oSS.ST.colUnitPriceWithoutCoef)
                        .writeFormulaToCellByCoords iRowIndex, oSS.ST.colUnitPrice, "=" & oSS.cellAddressByIdColIndex(referenceId, oSS.ST.colUnitPrice)
                        .applyStyleByCoords iRowIndex, oSS.ST.colUnitPriceWithoutCoef, Doublon
                        .applyStyleByCoords iRowIndex, oSS.ST.colUnitPrice, Doublon
                    Else
                        'Le pu sec n'est pas |fffd| saisir - on reporte la formule telle que
                        .applyStyleByCoords iRowIndex, oSS.ST.colUnitPriceWithoutCoef, PF
                        .writeToCellByCoords iRowIndex, oSS.ST.colCoef, 1
                        .writeFormulaToCellByCoords iRowIndex, oSS.ST.colUnitPriceWithoutCoef, PU.toCell
                    End If
                    'TODO |fffd| v|fffd|rifier voir si c'est pas dangereux dans le cadre d'une remise des prix sur la feuille de base apr|fffd|s affichage de la feuille cumul.
                    '.writeToCellByCoords iRowIndex, oSS.ST.colUnitPriceWithoutCoef, PU.toCell
                End If
            Else 'Cas des coefs d|fffd|sactiv|fffd|s
                'Si la colonne PU sec existe, on la vide
                If oSS.ST.colUnitPriceWithoutCoefIsEnabled Then
                    .writeFormulaToCellByCoords iRowIndex, oSS.ST.colUnitPriceWithoutCoef, ""
                End If
                'Ecriture de la valeur. Si le PU a une formule on y touche pas.
                If oSS.ST.colUnitPriceIsEnabled Then
                    If IsDuplicated Then
                        .writeFormulaToCellByCoords iRowIndex, oSS.ST.colUnitPrice, "=" & oSS.cellAddressByIdColIndex(referenceId, oSS.ST.colUnitPrice)
                    Else
                        .writeToCellByCoords iRowIndex, oSS.ST.colUnitPrice, PU.toCell
                    End If
                End If
            End If
            
        End With
    End If
    
    

fin:
    If Err Then
        Debug.Print Err.Description
    End If
    

End Function

'Ecrase uniquement les PU et quantit|fffd|s qui n'ont pas de formule
Public Function writeUnitPricesAndQuantitiesValuesToES(oSS As cStudySheet, iRowIndex As Long) As Long
'On Error GoTo fin
Dim oER As aExcelRange
Dim i As Integer
Dim odata As cWkData
Dim sKey As String
Dim iCol As Integer
    'on renvoit la ligne d'entr|fffd|e
    writeUnitPricesAndQuantitiesValuesToES = iRowIndex
    
    'on ne traite que les PriceItem
    If pWkType <> Price Then Exit Function
    
    'En fonction du type de workitem et des autorisations du template on |fffd|crit la ligne.
    If oSS.ST.hasTemplateForPriceItem Then
        'TODO Template sp|fffd|cifique...
    Else
        With oSS.ES
            'Qt|fffd|
            If oSS.ST.colQuantityIsEnabled And Not (QT Is Nothing) Then
                Set oER = sgExcelRangeBuilder.byCoords(oSS.ES, iRowIndex, oSS.ST.colQuantity)
                'on |fffd|crase que si pas de formule dans la cellule
                If Not oER.hasFormula Then
                    .writeToCellByCoords iRowIndex, oSS.ST.colQuantity, QT.toCell
                End If
            End If
            
            'PU
            If oSS.colUnitPriceEditableIsEnabled And Not (PU Is Nothing) Then
                Set oER = sgExcelRangeBuilder.byCoords(oSS.ES, iRowIndex, oSS.colUnitPriceEditable)
                If Not oER.hasFormula Then
                    .writeToCellByCoords iRowIndex, oSS.colUnitPriceEditable, PU.toCell
                End If
            End If
            
            'ExtendedDatas
            If oSS.ST.hasExtendedCols Then
                If Not pDicExtendedDatas Is Nothing Then
                    For i = 0 To pDicExtendedDatas.count - 1
                        sKey = pDicExtendedDatas.Keys(i)
                        Set odata = pDicExtendedDatas(sKey)
                        iCol = oSS.ST.getExtendedColIndex(sKey)
                        
                        Set oER = sgExcelRangeBuilder.byCoords(oSS.ES, iRowIndex, iCol)
                        If Not oER.hasFormula Then
                            .writeToCellByCoords iRowIndex, iCol, odata.toCell
                        End If
                    Next
                End If
            End If
        End With
    End If
    
    

fin:
    If Err Then
        Debug.Print Err.Description
    End If
    

End Function

'OBSOLETE
Private Function unitPriceForExcel(oSS As cStudySheet) As Variant
    'Valeur par d|fffd|faut
    If pPU.hasValue Then
        unitPriceForExcel = pPU.value
    Else
        unitPriceForExcel = 0
    End If

    'Priorit|fffd| si c'est un doublon, on force la formule en lien avec le prix ma|fffd|tre
    If IsDuplicated Then
        If pParentList.exists(pReferenceId) Then
            unitPriceForExcel = "=" & oSS.cellAddressById(pParentList.item(pId), UnitPrice)
        Else
            MsgBox "Erreur r|fffd|f|fffd|rence non trouv|fffd|e : " & pReferenceId
        End If
    'Sinon gestion formule sp|fffd|ciale
    ' TODO voir si besoin de g|fffd|rer l'expansion des formules
    ElseIf PU.hasSpecialFormula Then
        unitPriceForExcel = oSS.cvFormulaToStudyExcelFormula(PU.formula)
    End If

End Function
'''G|fffd|re l'insertion d'une ligne de prix dans un mod|fffd|le standard
'''Premi|fffd|re passe on se contente d'ins|fffd|rer la ligne et de remplir
''' les infos ind|fffd|pendants des formules de calcul
''Private Function writeInsPriceToEs_Std(oSS As cStudySheet, iRowIndex As Long) As Long
''On Error GoTo fin
'''Dim itmp As Integer
''Dim sAddressCellQuantity As String
''Dim sAddressCellUnitPrice As String
''Dim sAddressCellTotalPrice As String
''
''Dim oST As cStudyTemplate
''Dim oEs As aExcelSheet
''Dim i As Integer
''Dim iCol As Integer
''Dim sKey As String
''Dim oData As cWkData
''
''    Set oST = oSS.ST
''    Set oEs = oSS.ES
''
''    With oEs
''        'Insertion de la ligne
''        .insertRow iRowIndex
''
''        'Format par d|fffd|faut
''        .applyStyleByAddress oST.rowAddress(iRowIndex), eSpigaoStyle.Normal
''
''        'Remplissage des infos
''        'Id
''        .writeToCellByCoords iRowIndex, oST.colId, Id
''
''        'Numauto
''        If oST.colNumAutoIsEnabled Then .writeToCellByCoords iRowIndex, oST.colNumAuto, CStr(pNumAuto)
''
''        'PriceNumber
''        If oST.colPriceNumberIsEnabled Then .writeToCellByCoords iRowIndex, oST.colPriceNumber, "'" & pPriceNumber
''
''        'Designation
''        If oST.colDesignationIsEnabled Then .writeToCellByCoords iRowIndex, oST.colDesignation, "'" & pDesignation
''
''        'Quantit|fffd|
''        If oST.colQuantityIsEnabled Then
''            .writeToCellByCoords iRowIndex, oST.colQuantity, quantityForExcel
''            .Sheet.Cells(iRowIndex, oST.colQuantity).NumberFormat = oST.FormatForQuantities
''        End If
''
''
''        'Unit|fffd|
''        If oST.colUnitIsEnabled Then .writeToCellByCoords iRowIndex, oST.colUnit, pUnit
''
''        'PU
''        writeUnitPriceToES oSS, iRowIndex
''
''        'ExtendedCols
''        If oST.hasExtendedCols Then
''            If Not pDicExtendedDatas Is Nothing Then
''                For i = 0 To pDicExtendedDatas.count - 1
''                    sKey = pDicExtendedDatas.Keys(i)
''                    Set oData = pDicExtendedDatas(sKey)
''                    iCol = oST.getExtendedColIndex(sKey)
''                    If iCol > 0 And Not oData.hasFormula Then .writeToCellByCoords iRowIndex, iCol, oData.toCell
''                    If Left(LCase(sKey), 2) = "pu" Then .Sheet.Cells(iRowIndex, iCol).NumberFormat = oST.FormatForUnitPrices
''                    If Left(LCase(sKey), 3) = "qt|fffd|" Then .Sheet.Cells(iRowIndex, iCol).NumberFormat = oST.FormatForQuantities
''                Next
''            End If
''        End If
''
''        'Coef
''        If oST.colCoefIsEnabled And oST.cellCoefGeneralIsEnabled Then
''            .writeFormulaToCellByCoords iRowIndex, oST.colCoef, "=" & oST.cellCoefGeneral
''        End If
''
''        'Pour rep|fffd|rer qu'il s'agit d'un doublon ou d'une liaison
''        If IsDuplicated Then
''            If pParentList.exists(pReferenceId) Then
''                .addCommentToCellByCoords iRowIndex, oST.colUnitPrice, "Rappel de " & pParentList.item(pReferenceId).PriceNumber, True
''            End If
''            .applyStyleByCoords iRowIndex, oST.colUnitPrice, eSpigaoStyle.Doublon
''        End If
''
''        'Gestion prix pour memoire
''        'TODO Multicol
''        If IsPM And oST.colQuantityIsEnabled Then
''            .applyStyleByCoords iRowIndex, oST.colQuantity, eSpigaoStyle.PM
''        End If
''
''        'Gestion prix fixes
''        'TODO Multicol
''        If IsFixed And oST.colUnitPriceIsEnabled Then
''            .applyStyleByCoords iRowIndex, oST.colUnitPrice, eSpigaoStyle.PF
''            .addCommentToCellByCoords iRowIndex, oST.colUnitPrice, "Prix fix|fffd| : " & PU.value, True
''        End If
''
''        'Ajout de la formule total
''        If oST.colQuantityIsEnabled And oST.colUnitPriceIsEnabled And oST.colTotalPriceIsEnabled Then
''
''            If Not MT Is Nothing Then
''                If MT.hasSpecialFormula Then
''                'plus tard : on |fffd|crit la formule une fois toutes les lignes inject|fffd|es
''                '.writeFormulaToCellByCoords iRowIndex, oST.colTotalPrice, oSS.cvFormulaToStudyExcelFormula(MT.Formula)
''                Else
''                sAddressCellQuantity = .getAddressByCoord(iRowIndex, oST.colQuantity)
''                sAddressCellUnitPrice = .getAddressByCoord(iRowIndex, oST.colUnitPrice)
''                .writeFormulaToCellByCoords iRowIndex, oST.colTotalPrice, "=IF(ISNUMBER(" & sAddressCellQuantity & "),ROUND(" & sAddressCellQuantity & "*" & sAddressCellUnitPrice & ",2),""-"")"
''                End If
''            Else
''                sAddressCellQuantity = .getAddressByCoord(iRowIndex, oST.colQuantity)
''                sAddressCellUnitPrice = .getAddressByCoord(iRowIndex, oST.colUnitPrice)
''                .writeFormulaToCellByCoords iRowIndex, oST.colTotalPrice, "=IF(ISNUMBER(" & sAddressCellQuantity & "),ROUND(" & sAddressCellQuantity & "*" & sAddressCellUnitPrice & ",2),""-"")"
''            End If
''        End If
''
''        'Ajout de la formule poids prix
''        If oST.colTotalPriceIsEnabled And oST.colPriceStrengthIsEnabled Then
''            sAddressCellTotalPrice = .getAddressByCoord(iRowIndex, oST.colTotalPrice)
''            If oST.specialFormulaForMT = "" Then
''                .writeFormulaToCellByCoords iRowIndex, oST.colPriceStrength, "=IF(ISNUMBER(" & sAddressCellTotalPrice & "),IF(ISNUMBER(" & oST.cellTotalGeneralHT & ")," & sAddressCellTotalPrice & "/" & oST.cellTotalGeneralHT & ",""""),"""")"
''            Else
'''
''            End If
''        End If
''
''
''        'Indentation/groupement
''        .indentRow iRowIndex, pLevel
''    End With
''
''    writeInsPriceToEs_Std = iRowIndex + 1
''
''fin:
''    If Err Then
''        MsgBox "Erreur lors de l'insertion de la ligne : " & pId
''    End If
''End Function

'G|fffd|re l'insertion d'une ligne de prix dans un mod|fffd|le standard
'Premi|fffd|re passe on se contente d'ins|fffd|rer la ligne et de remplir
' les infos ind|fffd|pendants des formules de calcul
Private Function writeInsPriceToEs_Std(oSS As cStudySheet, iRowIndex As Long) As Long
On Error GoTo fin
'Dim itmp As Integer
Dim sAddressCellQuantity As String
Dim sAddressCellUnitPrice As String
Dim sAddressCellTotalPrice As String

Dim oST As cStudyTemplate
Dim oEs As aExcelSheet
Dim i As Integer
Dim iCol As Integer
Dim sKey As String
Dim odata As cWkData

    Set oST = oSS.ST
    Set oEs = oSS.ES
    
    With oEs
        'Insertion de la ligne
        .insertRow iRowIndex
        
        'Format par d|fffd|faut
        .applyStyleByAddress oST.rowAddress(iRowIndex), eSpigaoStyle.Normal
                
        'Remplissage des infos
        'Id
        .writeToCellByCoords iRowIndex, oST.colId, Id
                
        'Numauto
        If oST.colNumAutoIsEnabled Then .writeToCellByCoords iRowIndex, oST.colNumAuto, CStr(pNumAuto)
        
        'PriceNumber
        If oST.colPriceNumberIsEnabled Then .writeToCellByCoords iRowIndex, oST.colPriceNumber, "'" & pPriceNumber
        
        'Designation
        If oST.colDesignationIsEnabled Then .writeToCellByCoords iRowIndex, oST.colDesignation, "'" & pDesignation
        
        'Quantit|fffd|
        If oST.colQuantityIsEnabled Then
            .Sheet.Cells(iRowIndex, oST.colQuantity).NumberFormat = oST.FormatForQuantities
        End If
        
        'Unit|fffd|
        If oST.colUnitIsEnabled Then .writeToCellByCoords iRowIndex, oST.colUnit, pUnit
        
        'Coef
        If oST.colCoefIsEnabled And oST.cellCoefGeneralIsEnabled Then
            .writeFormulaToCellByCoords iRowIndex, oST.colCoef, "=" & oST.cellCoefGeneral
        End If
        
        'Pour rep|fffd|rer qu'il s'agit d'un doublon ou d'une liaison
        'Par d|fffd|faut on met en refId la valeur courante de l'id
        If oST.colRefIdIsEnabled Then .writeToCellByCoords iRowIndex, oST.colRefId, Id
        If IsDuplicated Then
            If pParentList.exists(pReferenceId) Then
                .addCommentToCellByCoords iRowIndex, oST.colUnitPrice, "Ouvrage identique |fffd| " & pParentList.item(pReferenceId).PriceNumber, True
                'Si doublon r|fffd|f|fffd|renc|fffd| => on |fffd|crase le refId
                If oST.colRefIdIsEnabled Then .writeToCellByCoords iRowIndex, oST.colRefId, pReferenceId
            End If
            .applyStyleByCoords iRowIndex, oST.colUnitPrice, eSpigaoStyle.Doublon
        End If
               
        'Gestion prix pour memoire
        'TODO Multicol
        If IsPM And oST.colQuantityIsEnabled Then
            .applyStyleByCoords iRowIndex, oST.colQuantity, eSpigaoStyle.PM
        End If
        
        'Gestion prix fixes
        'TODO Multicol
        If IsFixed And oST.colUnitPriceIsEnabled Then
            .applyStyleByCoords iRowIndex, oST.colUnitPrice, eSpigaoStyle.PF
            .addCommentToCellByCoords iRowIndex, oST.colUnitPrice, "Prix fix|fffd| : " & PU.value, True
        End If
                                
        'Ajout de la formule poids prix
        If oST.colTotalPriceIsEnabled And oST.colPriceStrengthIsEnabled Then
            sAddressCellTotalPrice = .getAddressByCoord(iRowIndex, oST.colTotalPrice)
            .writeFormulaToCellByCoords iRowIndex, oST.colPriceStrength, "=IFERROR(" & sAddressCellTotalPrice & "/" & oST.cellTotalGeneralHT & ",""-"")"
        End If
               
        'Colonne cach|fffd|e pour sous-totaux par chapitre
        If oST.isTotalOnChapterAllowed Or oST.cellTotalGeneralHTIsEnabled Then
            sAddressCellTotalPrice = .getAddressByCoord(iRowIndex, oST.colTotalPrice)
            .writeFormulaToCellByCoords iRowIndex, oST.colReportMT, "=" & sAddressCellTotalPrice
        End If
        
        'Indentation/groupement
        .indentRow iRowIndex, pLevel
        If oST.colDesignationIsEnabled Then .wrapText iRowIndex, oST.colDesignation
    End With
    
    writeInsPriceToEs_Std = iRowIndex + 1
    
fin:
    If Err Then
        MsgBox "Erreur lors de l'insertion de la ligne : " & pId
    End If
End Function

'G|fffd|re le remplissage d'une ligne de prix dans un mod|fffd|le standard
'Premi|fffd|re passe on se contente d'ins|fffd|rer la ligne et de remplir
' les infos ind|fffd|pendants des formules de calcul
Private Function writeUpdPriceToEs_Std(oSS As cStudySheet, iRowIndex As Long) As Long
On Error GoTo fin
'Dim itmp As Integer
Dim sAddressCellQuantity As String
Dim sAddressCellUnitPrice As String
Dim sAddressCellTotalPrice As String

Dim oST As cStudyTemplate
Dim oEs As aExcelSheet
Dim i As Integer
Dim iCol As Integer
Dim sKey As String
Dim odata As cWkData

    Set oST = oSS.ST
    Set oEs = oSS.ES
    
    With oEs
        
        'Quantit|fffd|
        If oST.colQuantityIsEnabled Then
            .writeToCellByCoords iRowIndex, oST.colQuantity, quantityForExcel
            If IsNumeric(quantityForExcel) Then
                If quantityForExcel < 0 Then
                    .addCommentToCellByCoords iRowIndex, oST.colQuantity, "Moins value", True
                    .applyStyleByCoords iRowIndex, oST.colQuantity, eSpigaoStyle.PF
                End If
            
            End If
        End If
        
        'PU
        writeUnitPriceToES oSS, iRowIndex
        
        'ExtendedCols
        If oST.hasExtendedCols Then
            If Not pDicExtendedDatas Is Nothing Then
                For i = 0 To pDicExtendedDatas.count - 1
                    sKey = pDicExtendedDatas.Keys(i)
                    Set odata = pDicExtendedDatas(sKey)
                    iCol = oST.getExtendedColIndex(sKey)
                    'icol=oSS.exte
                    If iCol > 0 Then
                        .writeToCellByCoords iRowIndex, iCol, odata.toCell
                        If Left(LCase(sKey), 2) = "pu" Then .Sheet.Cells(iRowIndex, iCol).NumberFormat = oST.FormatForUnitPrices
                        If Left(LCase(sKey), 3) = "qt|fffd|" Then .Sheet.Cells(iRowIndex, iCol).NumberFormat = oST.FormatForQuantities
                    End If
                    
                Next
            End If
        End If
        
        
        
        'Ajout de la formule total
        If oST.colQuantityIsEnabled And oST.colUnitPriceIsEnabled And oST.colTotalPriceIsEnabled Then
            If Not MT Is Nothing Then
                sAddressCellQuantity = .getAddressByCoord(iRowIndex, oST.colQuantity)
                sAddressCellUnitPrice = .getAddressByCoord(iRowIndex, oST.colUnitPrice)
                .writeFormulaToCellByCoords iRowIndex, oST.colTotalPrice, MT.toCell
            Else
                sAddressCellQuantity = .getAddressByCoord(iRowIndex, oST.colQuantity)
                sAddressCellUnitPrice = .getAddressByCoord(iRowIndex, oST.colUnitPrice)
                .writeFormulaToCellByCoords iRowIndex, oST.colTotalPrice, "=IFERROR(ROUND(" & sAddressCellQuantity & "*" & sAddressCellUnitPrice & ",2),""-"")"
            End If
        End If

    End With
    
    writeUpdPriceToEs_Std = iRowIndex
    
fin:
    If Err Then
        MsgBox "Erreur lors de la mise |fffd| jour de la ligne : " & pId
    End If
End Function

Private Function writeUpdToEs_Spc(oSS As cStudySheet, iRowIndex As Long, iRowCount As Integer) As Long
On Error GoTo fin

Dim oST As cStudyTemplate
Dim oEs As aExcelSheet
Dim iRowMax As Long
Dim oER As aExcelRange

    Set oST = oSS.ST
    Set oEs = oSS.ES
    
    With oEs
        'Insertion de la ligne
        iRowMax = iRowIndex + iRowCount - 1
        
        'R|fffd|cup|fffd|ration de la ligne
        Set oER = sgExcelRangeBuilder.byAddress(oEs, oST.rowsAddress(iRowIndex, iRowMax))
                     
        'remplacement des #FIELD#
        writeFieldInRange oER, oSS
        
    End With
    
    writeUpdToEs_Spc = iRowMax + 1
    
fin:
    If Err Then
        MsgBox "Erreur lors de la mise |fffd| jour de la ligne : " & pId
    End If
End Function

'G|fffd|re l'insertion d'une ligne de prix dans un mod|fffd|le personnalis|fffd|
Private Function writeInsPriceToEs_Spc(oSS As cStudySheet, iRowIndex As Long) As Long
On Error GoTo fin

Dim sAddressCellTotalPrice As String

Dim oST As cStudyTemplate
Dim oEs As aExcelSheet
Dim iRowMax As Long
Dim k As Long
Dim oER As aExcelRange

    Set oST = oSS.ST
    Set oEs = oSS.ES
    
    With oEs
        'Insertion de la ligne
        If IsDuplicated Then
            .insertRowByCopy iRowIndex, oST.rgTemplateForPriceItemDuplicated
            iRowMax = iRowIndex + oST.rgTemplateForPriceItemDuplicated.Rows.count - 1
        Else
            .insertRowByCopy iRowIndex, oST.rgTemplateForPriceItem
            iRowMax = iRowIndex + oST.rowCountForPriceItem - 1
        End If
        
        'R|fffd|cup|fffd|ration de la ligne
        Set oER = sgExcelRangeBuilder.byAddress(oEs, oST.rowsAddress(iRowIndex, iRowMax))
                     
        'Remplissage des infos
        'Id
        .writeToCellByCoords iRowIndex, oST.colId, Id
        If oST.colRefIdIsEnabled Then 'gestion des r|fffd|f|fffd|rence de priceitem pour calcul de cumul de quantit|fffd|
            If IsDuplicated Then
                'Par d|fffd|faut on met en refId la valeur courante de l'id
                .writeToCellByCoords iRowIndex, oST.colRefId, referenceId
            Else
                .writeToCellByCoords iRowIndex, oST.colRefId, Id
            End If
        End If
        'Colonne cach|fffd|e pour sous-totaux par chapitre
        If oST.isTotalOnChapterAllowed Or oST.cellTotalGeneralHTIsEnabled Then
            sAddressCellTotalPrice = .getAddressByCoord(iRowIndex, oST.colTotalPrice)
            .writeFormulaToCellByCoords iRowIndex, oST.colReportMT, "=" & sAddressCellTotalPrice
        End If
        
        'Indentation/groupement
        For k = iRowIndex To iRowMax
            .indentRow k, pLevel, True
            If oST.colDesignationIsEnabled Then .wrapText k, oST.colDesignation
        Next
        
    End With
    
    writeInsPriceToEs_Spc = iRowMax + 1
    
fin:
    If Err Then
        MsgBox "Erreur lors de l'insertion de la ligne : " & pId
    End If
End Function


'Cr|fffd||fffd| une feuille de sous-detail et renvoit une ref de sousDetail
Private Sub writeInsSubDetailToEs(oSS As cStudySheet)
On Error GoTo fin

Dim oESSubdetail As aExcelSheet
Dim oER As aExcelRange

    'Gestion feuille sous detail
    If oSS.ST.hasTemplateForPriceItem Then
        If Not IsDuplicated Then
            Set oESSubdetail = sgStudySubDetailBuilder.build(oSS.ST, pNumAutoPrice)
            If Not oESSubdetail Is Nothing Then
                Set oER = sgExcelRangeBuilder.byRange(oESSubdetail.Sheet.usedRange)
                writeFieldInRange oER, oSS
                oSS.ES.parent.RunMacro cSpigaoHookSubDetail_After, oESSubdetail.sheetName
            End If
        End If
    End If
    
fin:
    If Err Then
        MsgBox "Erreur lors de la cr|fffd|ation de la feuille de sous-d|fffd|tail du prix : " & pId
    End If
End Sub


'Insertion d'une ligne (1 ou plusieurs lignes excel) de prix dans un DQE |fffd| partir d'un template de ligne
Private Function writeInsChapterToEs_Std(oSS As cStudySheet, iRowIndex As Long) As Long
On Error GoTo fin
Dim oST As cStudyTemplate
Dim oEs As aExcelSheet
    
    Set oST = oSS.ST
    Set oEs = oSS.ES
    
    With oEs
        'Insertion de la ligne
        .insertRow iRowIndex
        
         'Remplissage des infos
        'Id
        .writeToCellByCoords iRowIndex, oST.colId, Id
                
        'Numauto
        If oST.colNumAutoIsEnabled Then .writeToCellByCoords iRowIndex, oST.colNumAuto, CStr(pNumAuto)
        
        'PriceNumber
        If oST.colPriceNumberIsEnabled Then .writeToCellByCoords iRowIndex, oST.colPriceNumber, "'" & pPriceNumber
        
        'Designation
        If oST.colDesignationIsEnabled Then
            .writeToCellByCoords iRowIndex, oST.colDesignation, "'" & pDesignation
        End If
        
        'Montant total
        If oST.isTotalOnChapterAllowed Then
            .writeToCellByCoords iRowIndex, oST.colTotalPrice, ""
        End If
        
        'Indentation/groupement
        .indentRow iRowIndex, pLevel
        
        
        'Mise en forme
        If pLevel = 1 Then
            .applyStyleByAddress oST.rowAddress(iRowIndex), eSpigaoStyle.Titre1
        ElseIf pLevel = 2 Then
            .applyStyleByAddress oST.rowAddress(iRowIndex), eSpigaoStyle.Titre2
        Else
            .applyStyleByAddress oST.rowAddress(iRowIndex), eSpigaoStyle.Titre3
        End If
        
        If oST.colDesignationIsEnabled Then
            .indentCell iRowIndex, oST.colDesignation, pLevel - 1
        End If
        
        'masquage total
        If Not sgSpigaoConfiguration.HideChapterTotal_Disabled Then .hideFont iRowIndex, oST.colTotalPrice, True
    End With

    writeInsChapterToEs_Std = iRowIndex + 1
    
fin:
    If Err Then
        MsgBox "Erreur lors de l'insertion de la ligne : " & pId
    End If

End Function

'Insertion d'une ligne (1 ou plusieurs lignes excel) de prix dans un DQE |fffd| partir d'un template de ligne
Private Function writeInsChapterToEs_Spc(oSS As cStudySheet, iRowIndex As Long) As Long
On Error GoTo fin
Dim oST As cStudyTemplate
Dim oEs As aExcelSheet
Dim oER As aExcelRange
Dim iRowMax As Long
Dim i As Long

    Set oST = oSS.ST
    Set oEs = oSS.ES
    
    With oEs
        'Insertion de la ligne
        .insertRowByCopy iRowIndex, oST.rgTemplateForChapterItem
        iRowMax = iRowIndex + oST.rowCountForChapterItem - 1
        
        'R|fffd|cup|fffd|ration de la ligne
        Set oER = sgExcelRangeBuilder.byAddress(oEs, oST.rowsAddress(iRowIndex, iRowMax))
        
         'Remplissage des infos
        'Id la colonne id est toujours utilis|fffd|e
        .writeToCellByCoords iRowIndex, oST.colId, Id
                
        'remplacement des #FIELD#
        'writeFieldInRange oER, oSS
               
        'Indentation/groupement
        For i = iRowIndex To iRowMax
            .indentRow i, pLevel
            If oST.colDesignationIsEnabled Then .indentCell i, oST.colDesignation, pLevel
        Next
        
    End With

    writeInsChapterToEs_Spc = iRowMax + 1
    
fin:
    If Err Then
        MsgBox "Erreur lors de l'insertion de la ligne : " & pId
    End If

End Function

Private Sub writeFieldInRange(oER As aExcelRange, oSS As cStudySheet)

    oER.replaceIn "#ID#", CStr(pId)
    oER.replaceIn "#NUMAUTO#", CStr(pNumAuto)
    oER.replaceIn "#NUMAUTO_C#", CStr(pNumAutoChapter)
    oER.replaceIn "#NUMAUTO_L#", CStr(pNumAutoComment)
    oER.replaceIn "#NUMAUTO_P#", CStr(pNumAutoPrice)
    oER.replaceIn "#PRICENUMBER#", "'" & CStr(PriceNumber)
    oER.replaceIn "#DESIGNATION#", "'" & CStr(designation)
    If QT Is Nothing Then
        oER.replaceIn "#QUANTITY#", ""
    Else
        oER.replaceIn "#QUANTITY#", QT.toCell
    End If
    oER.replaceIn "#UNIT#", "'" & CStr(Unit)
    If PU Is Nothing Then
        oER.replaceIn "#UNITPRICE#", ""
    Else
        oER.replaceIn "#UNITPRICE#", PU.toCell
    End If
    
    If IsDuplicated Then
        oER.replaceIn "#UNITPRICEREF#", oSS.cellAddressById(pReferenceId, UnitPrice)
        oER.replaceIn "#IDREF#", CStr(pReferenceId)
    Else
        oER.replaceIn "#UNITPRICEREF#", ""
        oER.replaceIn "#IDREF#", CStr(pId)
    End If
    
    If MT Is Nothing Then
        oER.replaceIn "#TOTALPRICE#", ""
    Else
        oER.replaceIn "#TOTALPRICE#", MT.toCell
    End If
    oER.replaceIn "#SHSUBDETAIL#", subDetailName
    
    
    
    
    If pWkType = eWorkItemType.chapter Then
        oER.replaceIn "#CHAPTER_ROW_MIN", oER.row + oSS.ST.rowCountForChapterItem
        oER.replaceIn "#CHAPTER_ROW_MAX", oSS.rowById(pParentList.lastItemIdInChapter(pId))
    Else
        oER.replaceIn "#CHAPTER_ROW_MIN", oSS.rowById(pParentId) + oSS.ST.rowCountForChapterItem
        oER.replaceIn "#CHAPTER_ROW_MAX", oSS.rowById(pParentList.lastItemIdInChapter(pParentId, pId))
    End If
'
    If Not pMT Is Nothing Then
    oER.replaceInTranspose "#FORMULAMT", pMT.toCell, oSS.ST.colTotalPrice
    End If
    
    oER.replaceIn "#=", "="
    
End Sub



'Insertion d'une ligne (1 ou plusieurs lignes excel) de prix dans un DQE |fffd| partir d'un template de ligne
Private Function writeInsRecapToEs_Std(oSS As cStudySheet, iRowIndex As Long) As Long
On Error GoTo fin
Dim oST As cStudyTemplate
Dim oEs As aExcelSheet
    
    'annulation |fffd|criture si on a pas de formule
    If MT Is Nothing Then
        writeInsRecapToEs_Std = iRowIndex
        Exit Function
    End If
    
    Set oST = oSS.ST
    Set oEs = oSS.ES
    
    With oEs
        'Insertion de la ligne
        .insertRow iRowIndex
        
         'Remplissage des infos
        'Id
        .writeToCellByCoords iRowIndex, oST.colId, Id
                
        'Numauto
        If oST.colNumAutoIsEnabled Then .writeToCellByCoords iRowIndex, oST.colNumAuto, CStr(pNumAuto)
        
        'PriceNumber
        If oST.colPriceNumberIsEnabled Then .writeToCellByCoords iRowIndex, oST.colPriceNumber, "'" & pPriceNumber
        
        'Designation
        If oST.colDesignationIsEnabled Then .writeToCellByCoords iRowIndex, oST.colDesignation, "'" & pDesignation
        
        'Indentation/groupement
        .indentRow iRowIndex, pLevel
        
        
        'Mise en forme
        Select Case pWkType
            Case eWorkItemType.Subtotal, eWorkItemType.SubTotalForChapter
                If pLevel = 1 Then
                    .applyStyleByAddress oST.rowAddress(iRowIndex), eSpigaoStyle.Subtotal
                ElseIf pLevel = 2 Then
                    .applyStyleByAddress oST.rowAddress(iRowIndex), oST.styleST2
                Else
                    .applyStyleByAddress oST.rowAddress(iRowIndex), oST.styleST3
                End If
            Case eWorkItemType.HT
                .applyStyleByAddress oST.rowAddress(iRowIndex), eSpigaoStyle.TotalGeneral
            Case eWorkItemType.Tva, eWorkItemType.TTC
                .applyStyleByAddress oST.rowAddress(iRowIndex), oST.styleTva
            Case eWorkItemType.MT
                .applyStyleByAddress oST.rowAddress(iRowIndex), eSpigaoStyle.Recap
        End Select
        
        If oST.colDesignationIsEnabled Then .indentCell iRowIndex, oST.colDesignation, pLevel
    End With

    writeInsRecapToEs_Std = iRowIndex + 1
    
fin:
    If Err Then
        MsgBox "Erreur lors de l'insertion de la ligne de r|fffd|capitulatif : " & pId
    End If

End Function

'Insertion d'une ligne (1 ou plusieurs lignes excel) de prix dans un DQE |fffd| partir d'un template de ligne
Private Function writeInsCommentToEs_Std(oSS As cStudySheet, iRowIndex As Long) As Long
On Error GoTo fin
Dim oST As cStudyTemplate
Dim oEs As aExcelSheet
    
    Set oST = oSS.ST
    Set oEs = oSS.ES
    
    With oEs
        'Insertion de la ligne
        .insertRow iRowIndex
        
         'Remplissage des infos
        'Id
        .writeToCellByCoords iRowIndex, oST.colId, Id
                
        'Numauto
        If oST.colNumAutoIsEnabled Then .writeToCellByCoords iRowIndex, oST.colNumAuto, CStr(pNumAuto)
        
        'PriceNumber
        If oST.colPriceNumberIsEnabled Then .writeToCellByCoords iRowIndex, oST.colPriceNumber, "'" & pPriceNumber
        
        'Designation
        If oST.colDesignationIsEnabled Then
            .writeToCellByCoords iRowIndex, oST.colDesignation, "'" & pDesignation
            
        End If
        
        'Indentation/groupement
        .indentRow iRowIndex, pLevel
        
        
        'Mise en forme
        .applyStyleByAddress oST.rowAddress(iRowIndex), eSpigaoStyle.comment
        
        .wrapText iRowIndex, oST.colDesignation
    End With

    writeInsCommentToEs_Std = iRowIndex + 1
    
fin:
    If Err Then
        MsgBox "Erreur lors de l'insertion de la ligne : " & pId
    End If


End Function
Attribute VB_Name = "cWkItemBuilder"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Public Function buildByObject(oItem As Object) As cWkItem
Dim oWkItem As cWkItem
    
    
    Set oWkItem = New cWkItem
    
    oWkItem.Id = oItem.Id
    oWkItem.PriceNumber = oItem.PriceNumber.current.value
    oWkItem.designation = oItem.designation.current.value
    oWkItem.Level = oItem.Level.current.value
    If Not oItem.parent.current.value Is Nothing Then
        oWkItem.ParentId = oItem.parent.current.value.Id
    End If
    
    Select Case oItem.ItemType.current.value
        Case 2 'ComWorkItemType.ComWorkItemType_Chapter
            oWkItem.WkType = eWorkItemType.chapter
        Case 5 'ComWorkItemType.ComWorkItemType_Comment
            oWkItem.WkType = eWorkItemType.comment
        Case 3 'ComWorkItemType.ComWorkItemType_Price
            oWkItem.WkType = eWorkItemType.Price
            oWkItem.Unit = oItem.asPrice.Unit.current.value
            Set oWkItem.QT = sgWkDataBuilder.byWkItem(oItem.asPrice.Quantity.current)
            Set oWkItem.PU = sgWkDataBuilder.byWkItem(oItem.asPrice.UnitPrice.current)
            If oItem.asPrice.IsDuplicated Then
                oWkItem.referenceId = oItem.asPrice.ReferenceItem.Id
            End If
            oWkItem.IsPM = oItem.asPrice.IsPM
            oWkItem.IsFixed = oItem.asPrice.IsFixed
            
    End Select

    Set buildByObject = oWkItem
End Function


Public Function buildByXmlNode(oNode As Object) As cWkItem
Dim oWkItem As cWkItem
Dim oXml As aXml
Dim oNodeIlm As Object
Dim oFormula As aSpigaoFormula
Dim oNodeQuantity As Object
Dim oNodeName As Object
Dim oNodeQuantities As Object
Dim oNodeUnitPrice As Object
Dim oNodeTotalPrice As Object
Dim oNodeDesi As Object
Dim iLevel As String
Dim sFormulaQuantity As String
Dim sFormulaUnitPrice As String
Dim sFormulaTotalPrice As String
Dim sExtendedColName As String
Dim odata As cWkData

    Set oXml = New aXml
    oXml.LoadFromNode oNode
      
    
    Set oNodeIlm = oXml.getNode(oNode, "sc:ILM")
    If Not oNodeIlm Is Nothing Then
        Set oWkItem = New cWkItem
        oWkItem.Id = oXml.getAttributValue(oNodeIlm, "sc:Type") & "@" & oXml.getAttributValue(oNodeIlm, "sc:Name")
    Else
        Exit Function
    End If
    
    'Type
    Select Case oXml.getAttributValue(oNodeIlm, "sc:Type")
        Case "P"
            oWkItem.WkType = eWorkItemType.Price
        Case "L"
            oWkItem.WkType = eWorkItemType.comment
        Case "C"
            oWkItem.WkType = eWorkItemType.chapter
        Case "ST"
            oWkItem.WkType = eWorkItemType.Subtotal
        Case "T"
            oWkItem.WkType = eWorkItemType.title
        Case "HT"
            oWkItem.WkType = eWorkItemType.HT
        Case "TTC"
            oWkItem.WkType = eWorkItemType.TTC
        Case "REC"
            oWkItem.WkType = eWorkItemType.REC
        Case "MT"
            oWkItem.WkType = eWorkItemType.MT
        Case "TVA"
            oWkItem.WkType = eWorkItemType.Tva
        Case Else
            MsgBox "Autre : " & oXml.getAttributValue(oNodeIlm, "sc:Type")
    End Select

    'Level
    iLevel = oXml.getAttributValue(oNodeIlm, "sc:Level")
    If iLevel = "" Then iLevel = "1"
    oWkItem.Level = CInt(iLevel)
    
    'On charge le wkitem |fffd| partir des infos Xml compl|fffd|mentaires
    Set oNodeDesi = oXml.getNode(oNode, "Cell[NamedCell/@ss:Name='Desi']/Data")
    If oNodeDesi Is Nothing Then Set oNodeDesi = oXml.getNode(oNode, "ss:Cell[ss:NamedCell/@ss:Name='Desi']/ss:Data") 'Cas Manta
    If Not oNodeDesi Is Nothing Then
        oWkItem.designation = oNodeDesi.nodetypedvalue
    End If
    
    
    Set oNodeQuantity = oXml.getNode(oNode, "Cell[NamedCell/@ss:Name='Qt|fffd|']")
    If oNodeQuantity Is Nothing Then Set oNodeQuantity = oXml.getNode(oNode, "ss:Cell[ss:NamedCell/@ss:Name='Qt|fffd|']")
    If Not oNodeQuantity Is Nothing Then
        If Not oXml.getAttributValue(oNodeQuantity, "ss:Formula") = "" Then
            sFormulaQuantity = oXml.getAttributValue(oNodeQuantity, "ss:Formula")
            Set oFormula = New aSpigaoFormula
            oFormula.Load sFormulaQuantity, Quantity
            Set oWkItem.QT = sgWkDataBuilder.byFormula(oFormula.Expression, oFormula.IsSpecial)
        End If
    End If
        
    Set oNodeUnitPrice = oXml.getNode(oNode, "Cell[NamedCell/@ss:Name='PU']")
    If oNodeUnitPrice Is Nothing Then Set oNodeUnitPrice = oXml.getNode(oNode, "ss:Cell[ss:NamedCell/@ss:Name='PU']")
    If Not oNodeUnitPrice Is Nothing Then
        If Not oXml.getAttributValue(oNodeUnitPrice, "ss:Formula") = "" Then
            sFormulaUnitPrice = oXml.getAttributValue(oNodeUnitPrice, "ss:Formula")
            Set oFormula = New aSpigaoFormula
            oFormula.Load sFormulaUnitPrice, UnitPrice
            Set oWkItem.PU = sgWkDataBuilder.byFormula(oFormula.Expression, oFormula.IsSpecial)
            
        End If
    End If
        
            
    Set oNodeTotalPrice = oXml.getNode(oNode, "Cell[NamedCell/@ss:Name='MT']")
    If oNodeTotalPrice Is Nothing Then Set oNodeTotalPrice = oXml.getNode(oNode, "ss:Cell[ss:NamedCell/@ss:Name='MT']")
    If Not oNodeTotalPrice Is Nothing Then
        If Not oXml.getAttributValue(oNodeTotalPrice, "ss:Formula") = "" Then
            sFormulaTotalPrice = oXml.getAttributValue(oNodeTotalPrice, "ss:Formula")
            Set oFormula = New aSpigaoFormula
            oFormula.Load sFormulaTotalPrice, TotalPrice
            Set oWkItem.MT = sgWkDataBuilder.byFormula(oFormula.Expression, oFormula.IsSpecial)
        End If
    End If

    'Colonnes Qt|fffd| suppl|fffd|mentaires
    
    Set oNodeQuantities = oXml.getNodes(oNode, "Cell[NamedCell/@ss:Name]")
    If oNodeQuantities.Length = 0 Then Set oNodeQuantities = oXml.getNodes(oNode, "ss:Cell[ss:NamedCell/@ss:Name]")
    If Not oNodeQuantities Is Nothing Then
        For Each oNodeQuantity In oNodeQuantities
            Set oNodeName = oXml.getNode(oNodeQuantity, "NamedCell[@ss:Name]")
            If oNodeName Is Nothing Then Set oNodeName = oXml.getNode(oNodeQuantity, "ss:NamedCell[@ss:Name]")
            sExtendedColName = oXml.getAttributValue(oNodeName, "ss:Name")
            If (Left(LCase(sExtendedColName), 3) = "qt|fffd|" And LCase(sExtendedColName) <> "qt|fffd|") _
                Or (Left(LCase(sExtendedColName), 2) = "pu" And LCase(sExtendedColName) <> "pu") _
                Or (Left(LCase(sExtendedColName), 2) = "mt" And LCase(sExtendedColName) <> "mt") Then
                sFormulaQuantity = oXml.getAttributValue(oNodeQuantity, "ss:Formula")
                If sFormulaQuantity <> "" Then
                    Set oFormula = New aSpigaoFormula
                    oFormula.Load sFormulaQuantity, Quantity
                    Set odata = sgWkDataBuilder.byFormula(oFormula.Expression, oFormula.IsSpecial)
                    oWkItem.addExtendedData sExtendedColName, odata
                Else
                    sFormulaQuantity = oXml.getNode(oNodeQuantity, "Data").nodetypedvalue
                    If sFormulaQuantity = "" Then sFormulaQuantity = "0"
                    Set odata = sgWkDataBuilder.byString(sFormulaQuantity)
                    oWkItem.addExtendedData sExtendedColName, odata
                End If
            End If
        Next
    
    End If
    

    Set buildByXmlNode = oWkItem
End Function

'Construction d'un wkItem |fffd| partir d'une ligne Excel et des infos de template
Public Function buildByStudySheet(oSS As cStudySheet, irow As Long, Optional bPUSec As Boolean = False) As cWkItem

Dim oP As cWkItem
Dim k As Integer
Dim iCol As Integer
Dim odata As cWkData
Dim sKey As String
Dim sType As String
Dim sFormula As String
Dim sOriginalAddress As String
Dim iRowOrigin As Long
Dim oRg As aExcelRange
Dim oRgSec As aExcelRange
Dim colPU As Integer

    Set oP = New cWkItem
    'Id
    oP.Id = oSS.ES.readCellValueToStringByCoords(irow, oSS.ST.colId)

    If oP.Id = "" Then 'Or InStr(oP.Id, "@") = 0 Then
        Set buildByStudySheet = Nothing
        Exit Function
    End If
    'PriceNumber
    If oSS.ST.colPriceNumberIsEnabled Then oP.PriceNumber = oSS.ES.readCellValueToStringByCoords(irow, oSS.ST.colPriceNumber)
    'Designation
    If oSS.ST.colDesignationIsEnabled Then oP.designation = oSS.ES.readCellValueToStringByCoords(irow, oSS.ST.colDesignation)
    'Unit|fffd|
    If oSS.ST.colUnitIsEnabled Then oP.Unit = oSS.ES.readCellValueToStringByCoords(irow, oSS.ST.colUnit)
    
    'Quantit|fffd|
    If oSS.ST.colQuantityIsEnabled Then
        If oSS.ES.Sheet.Cells(irow, oSS.ST.colQuantity).formula <> "" Then
            Set oP.QT = sgWkDataBuilder.byCell(oSS.ES.Sheet.Cells(irow, oSS.ST.colQuantity))
        Else
            Set oP.QT = sgWkDataBuilder.byString("0")
        End If
    End If
    
    'Lecture du PU
    Set oRg = Nothing
    If Not bPUSec Then
        colPU = oSS.ST.colUnitPrice
        If oSS.ST.colUnitPriceIsEnabled Then Set oRg = sgExcelRangeBuilder.byCoords(oSS.ES, irow, oSS.ST.colUnitPrice)
    Else
        colPU = oSS.ST.colUnitPriceWithoutCoef
        If oSS.ST.colUnitPriceWithoutCoefIsEnabled Then Set oRg = sgExcelRangeBuilder.byCoords(oSS.ES, irow, oSS.ST.colUnitPriceWithoutCoef)
    End If
    If Not oRg Is Nothing Then
        If oRg.formula <> "" Then
            Set oP.PU = sgWkDataBuilder.byCell(oRg.range)
            'Identification des doublons
            If oP.PU.hasFormula Then
                sOriginalAddress = oSS.ES.recurseOriginalAddress(oRg.address)
                'Si on a trouv|fffd| une adresse originelle diff|fffd|rente de l'adresse de d|fffd|part et pointant sur la colonne PU, il s'agit d'un doublon...
                If sOriginalAddress <> "" And sOriginalAddress <> oRg.address And oSS.ES.getColByRangeName(sOriginalAddress) = colPU Then
                     iRowOrigin = oSS.ES.getRowByRangeName(sOriginalAddress)
                     oP.referenceId = oSS.ES.readCellValueToStringByCoords(iRowOrigin, oSS.ST.colId)
                End If
            End If
        Else
            Set oP.PU = sgWkDataBuilder.byString("0")
        End If
    End If
    
    'Type
    If InStr(oP.Id, "@") > 0 Then
        sType = Left(oP.Id, InStr(oP.Id, "@") - 1)
        Select Case sType
            Case "P"
                oP.WkType = eWorkItemType.Price
            Case "L"
                oP.WkType = eWorkItemType.comment
            Case "C"
                oP.WkType = eWorkItemType.chapter
            Case "ST"
                oP.WkType = eWorkItemType.Subtotal
            Case "T"
                oP.WkType = eWorkItemType.title
            Case "HT"
                oP.WkType = eWorkItemType.HT
            Case "TTC"
                oP.WkType = eWorkItemType.TTC
            Case "REC"
                oP.WkType = eWorkItemType.REC
            Case "MT"
                oP.WkType = eWorkItemType.MT
            Case "TVA"
                oP.WkType = eWorkItemType.Tva
            Case "SC"
                oP.WkType = eWorkItemType.SubTotalForChapter
            Case Else
                MsgBox "Autre : "
        End Select
    Else 'r|fffd|cup|fffd|ration du type par le style dans le cas o|fffd| on aurait charg|fffd| l'identifiant avec renum|fffd|rotation.
        Select Case oSS.ES.Sheet.Cells(irow, oSS.ST.colPriceNumber).Style
            Case oSS.ES.cvStyleToName(eSpigaoStyle.Normal)
                oP.WkType = eWorkItemType.Price
            Case oSS.ES.cvStyleToName(eSpigaoStyle.Titre1), oSS.ES.cvStyleToName(eSpigaoStyle.Titre2), oSS.ES.cvStyleToName(eSpigaoStyle.Titre3), oSS.ES.cvStyleToName(eSpigaoStyle.titrep)
                oP.WkType = eWorkItemType.chapter
            Case oSS.ES.cvStyleToName(eSpigaoStyle.comment)
                oP.WkType = eWorkItemType.comment
            Case oSS.ES.cvStyleToName(eSpigaoStyle.Subtotal)
                oP.WkType = eWorkItemType.Subtotal
            Case oSS.ES.cvStyleToName(eSpigaoStyle.TotalGeneral)
                oP.WkType = eWorkItemType.HT
            Case Else
                oP.WkType = eWorkItemType.comment
        End Select
    End If
    'Level
    oP.Level = oSS.ES.Sheet.Rows(irow).OutlineLevel

    
    'Colonnes additionnelles
    If oSS.ST.hasExtendedCols Then
        For k = 0 To oSS.ST.dicExtendedCols.count - 1
            sKey = oSS.ST.dicExtendedCols.Keys(k)
            iCol = oSS.ST.dicExtendedCols(sKey)
            If oSS.ES.Sheet.Cells(irow, iCol).formula <> "" Then
                Set odata = sgWkDataBuilder.byCell(oSS.ES.Sheet.Cells(irow, iCol))
                oP.addExtendedData sKey, odata
            End If
        Next
    End If
    

    Set buildByStudySheet = oP

End Function

'Construction d'un wkitem |fffd| partir d'une ligne de det.txt
Public Function buildByDetTxtLine(sLine As String, dicCols As Dictionary) As cWkItem
Dim oP As cWkItem
Dim t() As String
Dim sPriceNumber As String
Dim i As Integer
Dim sKey As String

    Set buildByDetTxtLine = Nothing
    If Not dicCols.exists("PriceNumber") Then Exit Function
    t = Split(sLine, vbTab)
    sPriceNumber = t(dicCols("PriceNumber"))
    
    'Exclusion ligne date
    If sPriceNumber = "d" Then Exit Function
    
    Set oP = New cWkItem
       
    
    'Type sp|fffd|ciaux
    If Left(sPriceNumber, 2) = "HT" Then
        oP.WkType = eWorkItemType.HT
        oP.Id = "HT@" & sPriceNumber
    ElseIf Left(sPriceNumber, 3) = "TVA" Then
        oP.WkType = eWorkItemType.Tva
        oP.Id = "TVA@" & sPriceNumber
    ElseIf Left(sPriceNumber, 3) = "TTC" Then
        oP.WkType = eWorkItemType.TTC
        oP.Id = "TTC@" & sPriceNumber
    ElseIf Left(sPriceNumber, 2) = "ST" Then
        oP.WkType = eWorkItemType.Subtotal
        oP.Id = "ST@" & sPriceNumber
    ElseIf Left(sPriceNumber, 2) = "MT" Then
        oP.WkType = eWorkItemType.MT
        oP.Id = "MT@" & sPriceNumber
    Else
        oP.WkType = eWorkItemType.Price
        oP.Id = "P@" & sPriceNumber
    End If
    

    
    'N|fffd|
    oP.PriceNumber = sPriceNumber
    
    'On ne g|fffd|re que la lecture des N|fffd| de prix
    If oP.WkType = eWorkItemType.Price Then
        
        'Quantit|fffd|
        If dicCols.exists("Quantity") Then Set oP.QT = sgWkDataBuilder.byString(t(dicCols("Quantity")))
        
        'Pu
        If dicCols.exists("UnitPrice") Then Set oP.PU = sgWkDataBuilder.byString(t(dicCols("UnitPrice")))
    
        'Colonnes additionnelles
        For i = 0 To dicCols.count - 1
            sKey = dicCols.Keys(i)
            If sKey <> "PriceNumber" And sKey <> "UnitPrice" And sKey <> "Quantity" Then
                oP.addExtendedData sKey, sgWkDataBuilder.byString(t(dicCols(sKey)))
            End If
        Next
        
        Set buildByDetTxtLine = oP
    Else
        Set buildByDetTxtLine = Nothing
    End If
                
End Function

'Construction d'un wkitem |fffd| partir d'une ligne d'un excel ancienne g|fffd|n|fffd|ration
Public Function buildByOldXlsRow(oEs As aExcelSheet, irow As Long, dicCols As Dictionary) As cWkItem
Dim oP As cWkItem
Dim sPriceNumber As String
Dim i As Integer
Dim sKey As String

    Set buildByOldXlsRow = Nothing
    If Not dicCols.exists("PriceNumber") Then Exit Function
    
    sPriceNumber = oEs.getRangeNameByCoord(irow, 0)
    If sPriceNumber = "" Then Exit Function
    
    
    'Exclusion ligne date
    If sPriceNumber = "d" Then Exit Function
    
    Set oP = New cWkItem
    oP.Id = cvOldIdToNewId(sPriceNumber)
      
    'Type
    oP.WkTypeByString = sPriceNumber
    
    'N|fffd|
    oP.PriceNumber = oEs.readCellFormulaByCoord(irow, dicCols("PriceNumber"))
    
    'On ne g|fffd|re que la lecture des N|fffd| de prix
    If oP.WkType = eWorkItemType.Price Then
        
        'Quantit|fffd|
        If dicCols.exists("Quantity") Then Set oP.QT = sgWkDataBuilder.byString(oEs.readCellFormulaByCoord(irow, dicCols("Quantity")))
        
        'Pu
        If dicCols.exists("UnitPrice") Then Set oP.PU = sgWkDataBuilder.byString(oEs.readCellFormulaByCoord(irow, dicCols("UnitPrice")))
    
        'Colonnes additionnelles
        For i = 0 To dicCols.count - 1
            sKey = dicCols.Keys(i)
            If sKey <> "PriceNumber" And sKey <> "UnitPrice" And sKey <> "Quantity" Then
                oP.addExtendedData sKey, sgWkDataBuilder.byString(oEs.readCellFormulaByCoord(irow, dicCols(sKey)))
            End If
        Next
        
        Set buildByOldXlsRow = oP
    Else
        Set buildByOldXlsRow = Nothing
    End If
                
End Function

Public Function buildByValues(oWkType As eWorkItemType, sId As String, sDesignation As String, iLevel As Integer) As cWkItem
    
    Set buildByValues = New cWkItem
    
    buildByValues.WkType = oWkType
    buildByValues.Id = sId
    buildByValues.designation = sDesignation
    buildByValues.Level = iLevel
End Function
Attribute VB_Name = "cWkItemList"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private pList As Collection
Private pNumAuto As Long
Private pNumAutoPrice As Long
Private pNumAutoComment As Long
Private pNumAutoChapter As Long

Private Sub Class_Initialize()
    Set pList = New Collection
End Sub

'Ajoute ou compl|fffd|te le workitem par son id
Public Function add(oWk As cWkItem, Optional sKeyAfter As String = "", Optional sKeyBefore As String = "") As Boolean
    '
    If oWk Is Nothing Then Exit Function
    'Annulation ajout si total ou sous-total sans formule de montant
    If (oWk.WkType = eWorkItemType.HT Or oWk.WkType = eWorkItemType.MT _
        Or oWk.WkType = eWorkItemType.REC Or oWk.WkType = eWorkItemType.Subtotal _
        Or oWk.WkType = eWorkItemType.TTC Or oWk.WkType = eWorkItemType.Tva) And oWk.MT Is Nothing Then Exit Function
    
    
    If exists(oWk.Id) Then
        pList.item(oWk.Id).merge oWk
        add = True
    Else
        'Ajout des num|fffd|rotations auto
        pNumAuto = pNumAuto + 1
        oWk.numAuto = pNumAuto
        Select Case oWk.WkType
            Case eWorkItemType.chapter
                pNumAutoChapter = pNumAutoChapter + 1
                oWk.numAutoChapter = pNumAutoChapter
            Case eWorkItemType.Price
                pNumAutoPrice = pNumAutoPrice + 1
                oWk.numAutoPrice = pNumAutoPrice
            Case eWorkItemType.comment
                pNumAutoComment = pNumAutoComment + 1
                oWk.numAutoComment = pNumAutoComment
        End Select
        
        'Injection d|fffd|pendance liste
        Set oWk.ParentList = Me
        If sKeyAfter = "" And sKeyBefore = "" Then
            pList.add oWk, oWk.Id
        ElseIf sKeyAfter <> "" Then
            pList.add oWk, oWk.Id, , sKeyAfter
        Else
            pList.add oWk, oWk.Id, sKeyBefore
        End If
        add = True
    End If
End Function

'Vide la liste
Public Function clear()
    Set pList = New Collection
End Function

'V|fffd|rifie l'existence d'un item
Public Function exists(sId As String) As Boolean
On Error GoTo fin
    exists = False
    If Not pList.item(sId) Is Nothing Then exists = True
fin:
    If Err Then exists = False
End Function

'Renvoit la collection compl|fffd|te
Public Function list() As Collection
    Set list = pList
End Function

'Renvoit un item |fffd| partir de son Id
Public Function item(sId As String) As cWkItem
On Error GoTo fin
    Set item = pList.item(sId)
fin:
    If Err Then Set item = Nothing
End Function

'Renvoit le nb d'items
Public Function count() As Integer
    count = pList.count
End Function

'renvoit le dernier item |fffd| l'int|fffd|rieur d'un chapitre
'iMaxId = sortie automatique si on tombe sur cet id (pour |fffd|viter des r|fffd|f|fffd|rences circulaires dans un sous-total)
Public Function lastItemIdInChapter(sChapterId As String, Optional iMaxId As String = "") As String
Dim i As Long
Dim iLev As Integer
Dim oWk As cWkItem
Dim bIn As Boolean
Dim sLastId As String

    If Not exists(sChapterId) Then Exit Function
    For i = 1 To pList.count
        Set oWk = pList.item(i)
        '
        If bIn Then
            If oWk.Level <= iLev Then
                lastItemIdInChapter = sLastId
                Exit Function
            End If
            If oWk.Id = iMaxId Then
                lastItemIdInChapter = sLastId
                Exit Function
            End If
        End If
        'Flag le d|fffd|but
        If oWk.Id = sChapterId Then
            bIn = True
            iLev = oWk.Level
        End If
        'TODO pas propre : je ne prends que le dernier id de ligne de type prix
        'Ne fonctionnera pas si on veut vraiment r|fffd|cup|fffd|rer tous
        If oWk.WkType = eWorkItemType.chapter Or oWk.WkType = eWorkItemType.Price Then sLastId = oWk.Id
    Next
    lastItemIdInChapter = sLastId
    If sLastId = "0" Then
        Debug.Print "pause"
    End If
End Function




'*****************************************************************************************
' ALIMENTATION DE La COLLECTION
'*****************************************************************************************
'On cr|fffd||fffd| la liste avec une liste de workitems restitu|fffd|s par IULM
Public Sub fillWithBillOfQuantities(oWkItems As Object)
    Dim i As Long
    Dim oWk As Object
    Dim oWkItem As cWkItem
    
    For i = 0 To oWkItems.count - 1
        Set oWk = oWkItems.item(i)
        Set oWkItem = sgWkItemBuilder.buildByObject(oWk)
        add oWkItem
    Next
End Sub

'On cr|fffd||fffd| ou maj la liste avec le contenu du Xml
Public Sub fillWithExtendedXml(oXml As aXml)

    Dim i As Long
    Dim oNodes As Object
    Dim oNode As Object
    Dim oWkItem As cWkItem
    Dim oldWkId As String
    
    Set oNodes = oXml.getNodesFromRoot("//Row")
    If oNodes.Length = 0 Then Set oNodes = oXml.getNodesFromRoot("//ss:Row")
    For Each oNode In oNodes
        Set oWkItem = sgWkItemBuilder.buildByXmlNode(oNode)
        If add(oWkItem, oldWkId) Then oldWkId = oWkItem.Id
    Next

End Sub

'On cr|fffd||fffd| ou maj la liste avec le contenu d'une |fffd|tude Excel nouveau format
Public Sub fillWithStudySheet(oSS As cStudySheet)
Dim irow As Long
Dim oldWkId As String
Dim oWkItem As cWkItem

     For irow = oSS.ST.rowStart To oSS.ES.maxRow
        Set oWkItem = sgWkItemBuilder.buildByStudySheet(oSS, irow, oSS.IsCoefEnabled)
        If add(oWkItem, oldWkId) Then oldWkId = oWkItem.Id
    Next

End Sub

Public Sub fillWithDetTxt(sPathDetTxt As String)
On Error GoTo fin

Dim oFileDet As File
Dim oStreamDet As TextStream
Dim t() As String
Dim i As Integer
Dim sValue As String
Dim oWkItem As cWkItem
Dim dicCols As New Dictionary

    'Si Det.txt n'existe pas on arr|fffd|te tout
    If Not sgFileSystem.FileExists(sPathDetTxt) Then Exit Sub
    
    'Lecture du Det.txt
    Set oFileDet = sgFileSystem.getFile(sPathDetTxt)
    Set oStreamDet = oFileDet.OpenAsTextStream(ForReading)
        
    
    With oStreamDet
        'Lecture ligne d'en-tete
        'Chargement du dictionnaire des colonnes
        t = Split(.ReadLine, vbTab)
        For i = 0 To UBound(t)
            If t(i) = "N|fffd| prix" Or t(i) = "N|fffd| Prix" Or t(i) = "NP" Then
                dicCols.add "PriceNumber", i
            ElseIf t(i) = "Qt|fffd|" Or t(i) = "QT" Then
                dicCols.add "Quantity", i
            ElseIf t(i) = "PU" Then
                dicCols.add "UnitPrice", i
            ElseIf t(i) = "MT" Then 'on ne charge pas la colonne MT
            Else
                dicCols.add t(i), i
            End If
        Next
        
        If Not dicCols.exists("PriceNumber") Then
            MsgBox "Num|fffd|ros de prix absents du fichier " & sPathDetTxt & vbCrLf & "Lecture du fichier Det.txt impossible."
            .Close
            Exit Sub
        End If
        
        'Chargement des lignes du dessous
        While Not .AtEndOfStream
            Set oWkItem = sgWkItemBuilder.buildByDetTxtLine(.ReadLine, dicCols)
            If Not oWkItem Is Nothing Then add oWkItem
        Wend
    
    
        .Close
    End With


    Exit Sub
fin:
    If Err Then MsgBox "Erreur lors du chargemet du det.txt"

End Sub





'Completion |fffd| partir du fichier excel ancien format
Public Sub fillWithOldExcel(oOldExcel As aExcelSheet)
Dim oOldES As aExcelSheet
Dim irow As Long
Dim t() As String
Dim i As Integer
Dim sValue As String
Dim oWkItem As cWkItem
Dim dicCols As New Dictionary
Dim sCols As String


    If oOldExcel Is Nothing Then Exit Sub
    
    Set oOldES = sgExcelSheetBuilder.buildByWorksheet(oOldExcel.Sheet)
    If oOldES Is Nothing Then Exit Sub
    If Not oOldES.parent.IsSpigaoOldStudyWorkbook Then Exit Sub
    
    'Colonne pricenumber toujours sur C
    dicCols.add "PriceNumber", 3
    'R|fffd|cup|fffd|ration de la liste des colonnes au format -Qt|fffd|-Qt|fffd|1-Qt|fffd|2-Qt|fffd|3-PU-
    sCols = oOldES.parent.getPropertyValue("RecupCols")
    'correctif si Cols mal renseign|fffd|
    'If sCols = "-Qt|fffd|-PU-Qt|fffd|-PU-" Then sCols = "-Qt|fffd|-PU-"
    If InStr(sCols, "-Qt|fffd|-PU-Qt|fffd|-PU-") > 0 Then sCols = Replace(sCols, "-Qt|fffd|-PU-Qt|fffd|-PU-", "-Qt|fffd|-PU-")
    t = Split(sCols, "-")
    For i = 1 To UBound(t) 'on d|fffd|marre |fffd| 1 car la chaine a un tiret au d|fffd|part
        
        If t(i) = "Qt|fffd|" Or t(i) = "QT" Then
            dicCols.add "Quantity", oOldES.getColByRangeName(t(i))
        ElseIf t(i) = "PU" Then
            dicCols.add "UnitPrice", oOldES.getColByRangeName(t(i))
        ElseIf t(i) = "MT" Then 'on ne charge pas la colonne MT
        
        ElseIf t(i) <> "" Then
            dicCols.add t(i), oOldES.getColByRangeName(t(i))
        End If
    Next
    
    
    For irow = 4 To oOldES.maxRow
        Set oWkItem = sgWkItemBuilder.buildByOldXlsRow(oOldES, irow, dicCols)
        If Not oWkItem Is Nothing Then add oWkItem
    Next




    Exit Sub
fin:
    If Err Then
        MsgBox "Erreur lors de la r|fffd|cup|fffd|ration des donn|fffd|es de l'ancien devis." & vbCrLf & Err.Description
    End If
End Sub

'Compl|fffd|te la liste avec des sous-totaux automatiques
'si le template le g|fffd|re
Public Sub addSubTotals()
    Dim i As Long
    
    Dim oWk As cWkItem
    Dim owkSubTotal As cWkItem
    Dim oWkParent As cWkItem
    
    
    Dim pDicLevel As New Dictionary
    Dim sKey As Variant
    Dim ilastLevel As Integer
    Dim l As Integer
    
    i = 1
    ilastLevel = 0
    While i <= pList.count
        Set oWk = pList.item(i)

        If oWk.Level > 0 And oWk.Level < ilastLevel Then 'Changement de niveau
            'ajout sous-total
            For l = ilastLevel - 1 To oWk.Level Step -1
                Set oWkParent = item(pDicLevel("L" & l))
                Set owkSubTotal = sgWkItemBuilder.buildByValues(eWorkItemType.SubTotalForChapter, "SC@" & oWkParent.IdDetTxt, "Sous-total " & oWkParent.designation, l + 1)
                owkSubTotal.ParentId = oWkParent.Id
                Set owkSubTotal.MT = sgWkDataBuilder.byFormula("=""""", False)
                add owkSubTotal, , oWk.Id
                i = i + 1
            Next
        End If
        
        If (oWk.WkType = eWorkItemType.chapter) Then
            If pDicLevel.exists("L" & oWk.Level) Then 'on passe au chapitre suivant
                'Maj du level en cours
                pDicLevel("L" & oWk.Level) = oWk.Id
                'Suppression des levels en dessous
                For Each sKey In pDicLevel.Keys
                    If sKey > "L" & oWk.Level Then pDicLevel.Remove (sKey)
                Next
            Else
                pDicLevel.add "L" & oWk.Level, oWk.Id
            End If
        End If


        ilastLevel = oWk.Level
        i = i + 1
    Wend
    'dernier item
    If oWk.Level > 1 Then 'Changement de niveau
        'ajout sous-total
        For l = ilastLevel - 1 To 1 Step -1
            Set oWkParent = item(pDicLevel("L" & l))
            Set owkSubTotal = sgWkItemBuilder.buildByValues(eWorkItemType.SubTotalForChapter, "SC@" & oWkParent.IdDetTxt, "Sous-total " & oWkParent.designation, l + 1)
            owkSubTotal.ParentId = oWkParent.Id
            Set owkSubTotal.MT = sgWkDataBuilder.byFormula("=""""", False)
            add owkSubTotal
        Next
    End If
End Sub


'*****************************************************************************************
' RESTITUTION EXCEL
'*****************************************************************************************
'Remplit la feuille excel |fffd| partir des Wkitems de la collection.
Public Sub insertRowsToStudySheet(oSS As cStudySheet)
On Error GoTo fin

    Dim i As Long
    Dim irow As Long
    Dim oWk As cWkItem

    
    sgStudySubDetailBuilder.initTemplate oSS.ST
    

    irow = oSS.ST.rowStart + 1
    For i = 1 To pList.count
       
        If irow > 82 Then
            Debug.Print "pause"
        End If
        Set oWk = pList.item(i)
        
        If irow = 136 Then
            Debug.Print "pause"
        End If
        irow = oWk.writeInsToES(oSS, irow)
    

        'progression toutes les 10 lignes
        If i Mod 10 = 0 Then modProgress.ProgressUpdate 0.2 + CInt(i * 100 * 0.3 / pList.count) / 100
    Next
    
fin:
    
    sgStudySubDetailBuilder.closeTemplate oSS.ST
    If Err Then
        MsgBox "Erreur lors de l'insertion des lignes : " & irow
    End If
End Sub

'Compl|fffd|te les donn|fffd|es avec les bonnes formules
Public Sub updateRowsToStudySheet(oSS As cStudySheet)

    Dim i As Long
    Dim irow As Long
    Dim oWk As cWkItem
    
    
    irow = oSS.ST.rowStart + 1
    For i = 1 To pList.count
        Set oWk = pList.item(i)
        irow = oSS.rowById(oWk.Id)
''        If iRow = 8 Then
''            Debug.Print ""
''        End If
        oWk.writeUpdToES oSS, irow
        
        'progression toutes les 10 lignes
        If i Mod 10 = 0 Then modProgress.ProgressUpdate 0.5 + CInt(i * 100 * 0.4 / pList.count) / 100
    Next
End Sub
'Met |fffd| jour les formules speciales des wkitems en rempla|fffd|ant la formule scribe
' par son |fffd|quivalent Excel
Public Sub updateFormulas(oSS As cStudySheet)

    Dim i As Long
    Dim irow As Long
    Dim oWkItem As cWkItem
    Dim odata As cWkData
    Dim sFormula As String
    Dim j As Integer
    Dim sKey As String
    Dim sLastIdInChapter As String
    
    irow = oSS.ST.rowStart + 1
    For i = 1 To pList.count
        Set oWkItem = pList.item(i)
        
        'Formules de montant sp|fffd|ciales
        If Not oWkItem.MT Is Nothing Then
            If oWkItem.MT.hasFormula Then
                sFormula = oWkItem.MT.toCell
                
                'Correction des formules...
                sFormula = oSS.cvFormulaToStudyExcelFormula(sFormula)
                sFormula = cleanExcelFormula(sFormula)
                ''sFormula = transposeExcelFormula(sFormula, Chr(64 + oSS.ST.colTotalPrice), Chr(64 + oSS.ST.colReportMT))
                oWkItem.MT.formula = sFormula
            End If
        End If
        'Formules de PU sp|fffd|ciales
        If Not oWkItem.PU Is Nothing Then
            If oWkItem.PU.hasFormula Then
                sFormula = oWkItem.PU.toCell
                
                'Correction des formules...
                sFormula = oSS.cvFormulaToStudyExcelFormula(sFormula)
                'sFormula = cleanExcelFormula(sFormula)
                
                oWkItem.PU.formula = sFormula
            End If
        End If
        'Formules de QT sp|fffd|ciales
        If Not oWkItem.QT Is Nothing Then
            If oWkItem.QT.hasFormula Then
                sFormula = oWkItem.QT.toCell
                
                'Correction des formules...
                sFormula = oSS.cvFormulaToStudyExcelFormula(sFormula)
                'sFormula = cleanExcelFormula(sFormula)
                
                oWkItem.QT.formula = sFormula
            End If
        End If
        'ExtendedDatas
        If Not oWkItem.dicExtendedDatas Is Nothing Then
            For j = 0 To oWkItem.dicExtendedDatas.count - 1
                sKey = oWkItem.dicExtendedDatas.Keys(j)
                Set odata = oWkItem.dicExtendedDatas(sKey)
                If odata.hasFormula Then
                    sFormula = odata.toCell
                    sFormula = oSS.cvFormulaToStudyExcelFormula(sFormula)
                    'sFormula = cleanExcelFormula(sFormula)
                    odata.formula = sFormula
                End If
            Next
        End If
        
        'Totaux de chapitre
        If oWkItem.WkType = eWorkItemType.chapter Then
            sLastIdInChapter = lastItemIdInChapter(oWkItem.Id)
            If sLastIdInChapter <> oWkItem.Id And sLastIdInChapter <> "" Then
                sFormula = "=SUBTOTAL(9," _
                            & oSS.ES.getAddressByCoord(oSS.rowById(oWkItem.Id) + 1, oSS.ST.colReportMT) _
                            & ":" _
                            & oSS.ES.getAddressByCoord(oSS.rowById(sLastIdInChapter), oSS.ST.colReportMT) _
                            & ")"
                Set oWkItem.MT = sgWkDataBuilder.byFormula(sFormula, False)
            End If
        End If
    Next
End Sub



'Compl|fffd|te uniquement les pu et quantit|fffd|s sur la feuille d'|fffd|tude |fffd| partir
' des valeurs du Wkitem
Public Sub writeUnitPricesAndQuantitiesValuesToStudySheet(oSS As cStudySheet)

    Dim i As Long
    Dim irow As Long
    Dim oWk As cWkItem
    
    For i = 1 To pList.count
        Set oWk = pList.item(i)
        irow = oSS.rowById(oWk.Id)
  
        oWk.writeUnitPricesAndQuantitiesValuesToES oSS, irow
    Next
End Sub

'Fonction d'expansion de formules. A utiliser pour g|fffd|r|fffd|er ls cas o|fffd| les formules pointes sur des items non charg|fffd|s
'''Fonction d'extension des formules
''Public Function expandFormulas(sFormula As String) As String
''On Error GoTo fin
''Dim s As String
''Dim iPos As Integer
''Dim istart As Integer
''Dim iEnd As Integer
''Dim sNameCell As String
''Dim sNewNameCell As String
''Dim sSource As String
''
''
''    s = sFormula
''    sSource = sFormula
''    While sgRegex.matchPattern(sSource, "(ST@)|(HT@)|(TTC@)|(TVA@)")
''        sNameCell = sgRegex.extractFirstPattern(sSource, "(\()(ST@[^)]{1,}|HT@[^)]{1,}|TTC@[^)]{1,}|TVA@[^)]{1,})(\))", 1)
''        sNewNameCell = cvExpandOneRef(sNameCell)
''        If sNewNameCell <> "" Then
''            s = Replace(s, sNameCell, sNewNameCell)
''            sSource = Replace(sSource, sNameCell, sNewNameCell)
''        Else
''            'on d|fffd|gage le nom du  ssource comme |fffd|a on le recherche pas |fffd| nouveau
''            sSource = Replace(sSource, sNameCell, "")
''        End If
''    Wend
''
''    expandFormulas = s
''fin:
''    If Err Then
''        expandFormulas = ""
''    End If
''End Function
''
''
''
'''Renvoit la formule de calcul correspondant |fffd| une r|fffd|f|fffd|rence consolid|fffd|e (sous-total & co)
''Private Function cvExpandOneRef(ByVal sRefCell As String)
''Dim t() As String
''Dim sID As String
''Dim iRowRef As Long
''
''    t = Split(sRefCell, " ")
''    sID = t(0)
''
''        If UBound(t) = 1 Then
''            Select Case t(1)
''                Case "PU"
''                    If Not item(sID).PU.hasAbsoluteFormula Then cvExpandOneRef = Mid(item(sID).PU.formula, 2)
''                Case "Qt|fffd|"
''                    If Not item(sID).QT.hasAbsoluteFormula Then cvExpandOneRef = Mid(item(sID).QT.formula, 2)
''                Case "MT"
''                    If Not item(sID).MT.hasAbsoluteFormula Then cvExpandOneRef = Mid(item(sID).MT.formula, 2)
''            End Select
''        End If
''
''
''
''End Function





Private Sub Class_Terminate()

    Set pList = Nothing

End Sub
Attribute VB_Name = "clsDieDownloader"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private pSpigao As aSpigao
Private pDwld As Object
''Private WithEvents pDwEventProvider As DIEDownloadEventProvider
Public isCompleted As Boolean
Public sProjectPath As String

Public Function Prepare(mysp As aSpigao, numDeal As Long) As Boolean
On Error GoTo fin

    

    isCompleted = False
    sProjectPath = ""

    Set pSpigao = mysp
    Set pDwld = pSpigao.Detection.Deals.DownloadDIE(numDeal)
    'Set pDwEventProvider = pDwld.Events

    
fin:
    If Err > 0 Then
        Prepare = False
    Else
        Prepare = True
    End If
End Function

Public Function Run() As Boolean

    
    pDwld.Start
    
End Function

''Private Sub pDwEventProvider_DownloadCompleted(ByVal sender As Edisys_IULM_Core.IDIEDownloader, ByVal e As Edisys_IULM_Core.IDownloadCompletedEventArgs)
''
''
''    If e.Status = ExecResult_Completed Then
''        isCompleted = True
''        sProjectPath = e.projectPath
''
''    End If
''
''End Sub

Attribute VB_Name = "cspigaoOldRefBuilder"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit


Public Function byOldRef(sValue As String) As cSpigaoOldRef
Dim oRef As cSpigaoOldRef

    Set oRef = New cSpigaoOldRef
    oRef.oldRef = sValue
    Set byOldRef = oRef

End Function

Public Function byNewRef(sValue As String) As cSpigaoOldRef
Dim oRef As cSpigaoOldRef

    Set oRef = New cSpigaoOldRef
    oRef.newRef = sValue
    Set byNewRef = oRef

End Function
Attribute VB_Name = "formAbout"
Attribute VB_Base = "0{9A0BB5AC-9971-424D-A7F7-AEAC0024088A}{E1BEFC0B-DCD3-4B3B-9E2A-F3A4CCB1EF3F}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Option Explicit

Private Sub cmdFermer_Click()
    Unload Me
End Sub

Private Sub cmdGoSupport_Click()
    mGoToSupport
End Sub

Private Sub cmdMaj_Click()
    checkForUpdate True
End Sub

Private Sub lblWebSite_Click()
    getHtml "http://www.spigao.com"
End Sub

Private Sub UserForm_Initialize()

    Me.Left = Application.Left + CInt(Application.Width / 2) - CInt(Me.Width / 2)
    Me.lblAppVersion.Caption = "Version " & cAppCurrentVersion
    Me.lblIULMVersion.Caption = "IULM v" & sgSpigao.Loader.Version.Text
End Sub
Attribute VB_Name = "formAvancement"
Attribute VB_Base = "0{3B09E1F7-ABE9-43C9-8527-7BF10AFB9481}{C8E8C4FD-C1B6-42D1-9108-0398E2EF08D8}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Attribute VB_Name = "formChooseFileName"
Attribute VB_Base = "0{A19604F8-033F-44CC-A6F2-12165C4CBB13}{1984A1D6-B101-4973-904C-3385BBEBB2E4}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Option Explicit




Public Function LoadChoices(tabNames As Variant) As String
Dim i As Integer

  
    Me.lstFilesName.clear
    For i = 0 To UBound(tabNames)
        lstFilesName.AddItem tabNames(i)
    Next
    

End Function



Private Sub lstFilesName_DblClick(ByVal Cancel As MSForms.ReturnBoolean)

    gSpigaoChoiceKept = lstFilesName.Text
    Unload Me
End Sub

Private Sub UserForm_Initialize()
Me.Left = Application.Left + CInt(Application.Width / 2) - CInt(Me.Width / 2)
End Sub
Attribute VB_Name = "formConfigExtensions"
Attribute VB_Base = "0{5921BECF-8170-4133-8BD8-ADFE2DED3F03}{37D77C61-4AC7-44FD-91DF-284C98EA7E41}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Sub chkExtensionAmiprix_Click()
    sgSpigaoConfiguration.IsExtensionAmiprixEnabled = Not (Me.chkExtensionAmiprix.value = 0)
    ActualiseRibbonDevis
End Sub

Private Sub chkExtensionQDV6_Click()
    sgSpigaoConfiguration.IsExtensionQDV6Enabled = Not (Me.chkExtensionQDV6.value = 0)
    ActualiseRibbonDevis
End Sub

Private Sub cmdOK_Click()
 Unload Me
End Sub

Private Sub chkExtensionOnayaFacturation_Click()
    sgSpigaoConfiguration.IsExtensionOnayaFacturationEnabled = Not (Me.chkExtensionOnayaFacturation.value = 0)
    ActualiseRibbonDevis
End Sub

Private Sub chkExtensionProgapwin_Click()
    sgSpigaoConfiguration.IsExtensionProgapWinEnabled = Not (Me.chkExtensionProgapwin.value = 0)
    ActualiseRibbonDevis
End Sub


Private Sub UserForm_Initialize()
    If sgSpigaoConfiguration.IsExtensionProgapWinEnabled Then Me.chkExtensionProgapwin.value = 1
    If sgSpigaoConfiguration.IsExtensionOnayaFacturationEnabled Then Me.chkExtensionOnayaFacturation.value = 1
    If sgSpigaoConfiguration.IsExtensionQDV6Enabled Then Me.chkExtensionQDV6.value = 1
    If sgSpigaoConfiguration.IsExtensionAmiprixEnabled Then Me.chkExtensionAmiprix.value = 1
End Sub
Attribute VB_Name = "formConfigPlanning"
Attribute VB_Base = "0{48B4F27F-FA92-4E7C-87C8-149FD03ED1CF}{2C7D3D6B-AE2F-4887-ACEA-8F20D6CFFC7C}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Sub chkSynchroAuto_Click()
    sgSpigaoConfiguration.IsSpigaoPlanningSynchroAutoEnabled = Me.chkSynchroAuto.value
End Sub

Private Sub cmCancel_Click()
    Unload Me
End Sub

Private Sub cmdParcourir_Click()

    Dim sPath As String
    
    sPath = sgFileSystem.promptForFilePath(sgSpigaoConfiguration.RepoFolderPath, sgFileSystem.getFolderPathFromFilePath(Me.txtPlanningPath.Text))
    If sPath <> "" Then Me.txtPlanningPath.Text = sPath


End Sub


Private Sub cmdValid_Click()

    'Enregistrement du nouveau chemin de planning
    If sgFileSystem.FileExists(Me.txtPlanningPath.Text) Then
        sgSpigaoConfiguration.planningTemplateFullPath = Me.txtPlanningPath.Text
    End If
    
End Sub

Private Sub UserForm_Initialize()
Me.txtPlanningPath = sgSpigaoConfiguration.planningTemplateFullPath
End Sub
Attribute VB_Name = "formConfigRepo"
Attribute VB_Base = "0{382986FA-F2E1-4833-A485-C6E2B839B905}{D1C78BF6-8ECB-4075-8EB5-FC75FDE73B2A}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Option Explicit

Private psPathTemplateForStudy As String
Private pbChangeTemplateForStudy As Boolean

'Bouton annuler
Private Sub cmCancel_Click()
    Unload Me
End Sub

'Bouton parcourir pour s|fffd|lectionner un mod|fffd|le de devis personnalis|fffd|
Private Sub cmdParcourirModelFile_Click()
Dim sPathF As String

    
    sPathF = sgFileSystem.promptForFilePath(, , "Mod|fffd|le d'|fffd|tude spigao", "*.spigao")
    If sgFileSystem.FileExists(sPathF) Then
        psPathTemplateForStudy = sPathF
        pbChangeTemplateForStudy = True
        Me.optModelStudySpecific.value = True
        Me.optModelStudySpecific.Caption = "Mod|fffd|le sp|fffd|cifique : " & sgFileSystem.getFileNameFromFilePath(sPathF)
    End If

End Sub

'Bouton parcourir pour s|fffd|lectionner un mod|fffd|le de r|fffd|pertoire
Private Sub cmdTemplateFolderChoose_Click()

    Dim sPath As String

    resetCboSubFolders
    sPath = sgFileSystem.promptForFolderPath(sgEnvironnement.templateFolderPath)
    
    LoadFrm sPath, sgSpigaoConfiguration.DceFolderName, sgSpigaoConfiguration.DieFolderName, sgSpigaoConfiguration.StudyFolderName, sgSpigaoConfiguration.SubmitFolderName, False
    
End Sub


Private Sub resetCboSubFolders()

    Me.cboDCEFolderPath.clear
    Me.cboDieFolderPath.clear
    Me.cboStudyFolderPath.clear
    Me.cboSubmitFolderPath.clear
    activeCboSubFolders False
    
End Sub

Private Sub activeCboSubFolders(bActive As Boolean)

    Me.cboDCEFolderPath.Enabled = bActive
    Me.cboDieFolderPath.Enabled = bActive
    Me.cboStudyFolderPath.Enabled = bActive
    Me.cboSubmitFolderPath.Enabled = bActive
    
End Sub


Private Sub LoadFrm(sTemplateFolderPath As String, sDefaultDCEPath As String, sDefaultDiePath As String, sDefaultStudyPath As String, sDefaultSubmitPath As String, bLoadTemplateForStudyConf As Boolean)


    Dim orootfolder As Folder
    Dim oSubfolder As Folder
    
    'Chargement des infos de mod|fffd|le de rep
    Me.lblTemplateFolderPath.Caption = sTemplateFolderPath
    resetCboSubFolders
    If sgFileSystem.FolderExists(sTemplateFolderPath) Then
            'on parcourt le rep et ses sous reps
            Set orootfolder = sgFileSystem.Engine.GetFolder(sTemplateFolderPath)
            AddFolderToCbo orootfolder, orootfolder
            activeCboSubFolders True
            
            'on check si on a un default
            If sDefaultDCEPath <> "" Then defaultCboItem Me.cboDCEFolderPath, sDefaultDCEPath
            If sDefaultDiePath <> "" Then defaultCboItem Me.cboDieFolderPath, sDefaultDiePath
            If sDefaultStudyPath <> "" Then defaultCboItem Me.cboStudyFolderPath, sDefaultStudyPath
            If sDefaultSubmitPath <> "" Then defaultCboItem Me.cboSubmitFolderPath, sDefaultSubmitPath
    End If
    
    'Chargement/Changement des infos de mod|fffd|le d'|fffd|tude si sp|fffd|cifi|fffd|
    If bLoadTemplateForStudyConf Then
        pbChangeTemplateForStudy = False
        psPathTemplateForStudy = ""
        Me.optModelStudySpecific.value = sgSpigaoConfiguration.hasSpecificTemplateForStudy
        Me.optModelStudyStd.value = Not sgSpigaoConfiguration.hasSpecificTemplateForStudy
        If sgSpigaoConfiguration.hasSpecificTemplateForStudy Then
            Me.optModelStudySpecific.Caption = "Mod|fffd|le sp|fffd|cifique : " & sgSpigaoConfiguration.TemplateForStudyName
        Else
            Me.optModelStudySpecific.Caption = "Mod|fffd|le sp|fffd|cifique : "
        End If
    End If

    'activation des macros Edisys visibles ou non
    If IsScribeAddinInstalled Then
        chkScribeMacros.visible = True
        lblScribeMacros.visible = True
        chkScribeMacros.value = IsScribeAddinLoaded
    Else
        chkScribeMacros.visible = False
        lblScribeMacros.visible = False
    End If
    
End Sub

Private Function AddFolderToCbo(orootfolder As Folder, ofolder As Folder)

Dim oSubfolder As Folder
Dim sRelativePath As String
    
    sRelativePath = Mid(ofolder.path, Len(orootfolder.path) + 2)
    
    AddItemToCbo sRelativePath
    
    For Each oSubfolder In ofolder.SubFolders
        AddFolderToCbo orootfolder, oSubfolder
    Next
    
End Function


Private Function AddItemToCbo(s As String)
    
    Me.cboDCEFolderPath.AddItem s
    Me.cboDieFolderPath.AddItem s
    Me.cboStudyFolderPath.AddItem s
    Me.cboSubmitFolderPath.AddItem s
End Function

Private Sub cmdValid_Click()
On Error GoTo fin



    If Not sgFileSystem.FolderExists(Me.lblTemplateFolderPath.Caption) Then
        MsgBox "Le r|fffd|pertoire du mod|fffd|le d'affaire n'existe pas. Enregistrement annul|fffd|."
        Exit Sub
    End If
    
    If pbChangeTemplateForStudy And Me.optModelStudySpecific.value Then
        If Not sgFileSystem.FileExists(psPathTemplateForStudy) Then
            MsgBox "Le mod|fffd|le d'|fffd|tude sp|fffd|cifi|fffd| n'est pas accessible. Enregistrement annul|fffd|."
            Exit Sub
        End If
    End If
    
    'Gestion des chemin non saisis
    If Me.cboDCEFolderPath.ListIndex = -1 Then Me.cboDCEFolderPath.Text = ""
    If Me.cboDieFolderPath.ListIndex = -1 Then Me.cboDieFolderPath.Text = ""
    If Me.cboStudyFolderPath.ListIndex = -1 Then Me.cboStudyFolderPath.Text = ""
    If Me.cboSubmitFolderPath.ListIndex = -1 Then Me.cboSubmitFolderPath.Text = ""
    
    
    'Recopie du r|fffd|pertoire template
    If Me.lblTemplateFolderPath.Caption = sgEnvironnement.templateFolderPath Then
        'Pas de recopie |fffd| pr|fffd|voir
    Else
        'on supprime l'ancien rep
        sgFileSystem.deleteFolder sgEnvironnement.templateFolderPath
        'On met |fffd| jour
        sgFileSystem.copyFolder Me.lblTemplateFolderPath.Caption, sgEnvironnement.templateFolderPath
    End If
    
    'recopie du fichier template study si n|fffd|cessaire
    If pbChangeTemplateForStudy And Me.optModelStudySpecific.value Then
        sgFileSystem.copyFile psPathTemplateForStudy, sgFileSystem.joinPath(sgEnvironnement.templateStudyPath, sgFileSystem.getFileNameFromFilePath(psPathTemplateForStudy))
    End If
    
    'Maj de la conf
    sgSpigaoConfiguration.DceFolderName = Me.cboDCEFolderPath.Text
    sgSpigaoConfiguration.DieFolderName = Me.cboDieFolderPath.Text
    sgSpigaoConfiguration.StudyFolderName = Me.cboStudyFolderPath.Text
    sgSpigaoConfiguration.SubmitFolderName = Me.cboSubmitFolderPath.Text

    If Me.optModelStudyStd.value Then
        sgSpigaoConfiguration.resetTemplateForStudyNameToDefaultValue
    ElseIf pbChangeTemplateForStudy And psPathTemplateForStudy <> "" Then
        sgSpigaoConfiguration.TemplateForStudyName = sgFileSystem.getFileNameFromFilePath(psPathTemplateForStudy)
    End If
    
    'Maj addin
    If chkScribeMacros.visible Then
        ToggleScribeAddin_Enabled chkScribeMacros.value
    End If
    
fin:

    If Err Then MsgBox "Erreur lors de l'enregistrement de la configuration. " & Err.Description
    Unload Me
End Sub



Private Sub lblPlusInfoRepoTemplate_Click()
    sgSpigao.goToPersoFolderHelp
End Sub

Private Sub lblPlusInfoTemplate_Click()
    sgSpigao.goToPersoStudyHelp
End Sub

Private Sub UserForm_Initialize()
    Me.Left = Application.Left + CInt(Application.Width / 2) - CInt(Me.Width / 2)
    LoadFrm sgEnvironnement.templateFolderPath, sgSpigaoConfiguration.DceFolderName, sgSpigaoConfiguration.DieFolderName, sgSpigaoConfiguration.StudyFolderName, sgSpigaoConfiguration.SubmitFolderName, True
    
End Sub


Private Sub defaultCboItem(Mycb As ComboBox, s As String)

    Dim i As Integer
    If Mycb.ListCount <= 0 Then Exit Sub
    For i = 0 To Mycb.ListCount - 1
        If Mycb.list(i) = s Then
            Mycb.ListIndex = i
            Exit Sub
        End If
    Next
End Sub


Attribute VB_Name = "formConfiguration"
Attribute VB_Base = "0{144A2D8F-434B-489B-9C83-219C781F9289}{9B5845A1-23B8-4772-9428-FDFB23ABDF01}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Option Explicit



Private bInitialize As Boolean




Private Sub cmdConfigPlanning_Click()
    formConfigPlanning.Show
End Sub

Private Sub cmdExtensions_Click()
    formConfigExtensions.Show
End Sub

'Initialisation
Private Sub UserForm_Initialize()

    bInitialize = True
    'init datas
    Me.txtRepositoryPath = sgSpigaoConfiguration.RepoFolderPath()
    If sgSpigaoConfiguration.CheckForUpdateAutomatically_Disabled Then Me.chkDisableAutomaticUpdateChecking.value = 1
    If sgSpigaoConfiguration.OldDieVersionDetection_Disabled Then Me.chkDisableOldFormatDetection.value = 1
    If sgSpigaoConfiguration.HideChapterTotal_Disabled Then Me.chkShowChapterTotal.value = 1
    'On masque la partie Edisys si elle n'est pas autoris|fffd|e dans la conf
    If Not sgSpigaoConfiguration.IsChafVersion Then
        fraChaf.visible = False
        fraButtons.Top = fraChaf.Top
        Me.Height = fraButtons.Top + fraButtons.Height + (Me.Height - Me.InsideHeight)
    Else
        enable_form True
    End If
    
    'On affiche le bouton planning si la conf le permet
    If sgSpigaoConfiguration.IsSpigaoPlanningEnabled Then Me.cmdConfigPlanning.visible = True
    
    'Positionnement fen|fffd|tre
    Me.Left = sgExcelApplication.Engine.Left + CInt(sgExcelApplication.Engine.Width / 2) - CInt(Me.Width / 2)
    bInitialize = False
    
End Sub

'**************************************************************************
' Partie standard
'**************************************************************************
'Case |fffd| cocher 'd|fffd|sactiver la v|fffd|rification automatique des mises |fffd| jour
Private Sub chkDisableAutomaticUpdateChecking_Click()
    If Not bInitialize Then
        sgSpigaoConfiguration.CheckForUpdateAutomatically_Disabled = Not (Me.chkDisableAutomaticUpdateChecking.value = 0)
    End If
End Sub
Private Sub chkShowChapterTotal_Click()
    If Not bInitialize Then
        sgSpigaoConfiguration.HideChapterTotal_Disabled = Not (Me.chkShowChapterTotal.value = 0)
    End If
End Sub
'Bouton Identifiants
Private Sub cmdConfigure_Click()
    sgSpigao.showUserConfig
End Sub

'Bouton Fermer
Private Sub cmdOK_Click()

Dim bOK As Boolean

    bOK = False
    If Me.txtRepositoryPath <> "" Then
        If sgFileSystem.FolderExists(Me.txtRepositoryPath) Then bOK = True
        'V|fffd|rifie si on est dans une migration avec les macros Edisys encore activ|fffd|es
        ForceScribeMacrosDisabled
    End If

    If Not bOK Then
        If MsgBox("Le r|fffd|pertoire de stockage des affaires n'est pas correct. Si vous continuez la modification ne sera pas sauvegard|fffd|e." & vbCrLf & "Souhaitez-vous poursuivre ?", vbYesNo) = vbNo Then
            Exit Sub
        Else
            Unload Me
        End If
    End If
    
    Unload Me
End Sub


'chiffrage automatique cach|fffd|
Private Sub cmdOK_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)

    If KeyCode = 17 Then
        mDemoPriceRandom
    End If

End Sub

'Changement du r|fffd|pertoire de stockage
Private Sub cmdParcourir_Click()
Dim sP As String

    
    sP = sgFileSystem.promptForFolderPath(sgSpigaoConfiguration.RepoFolderPath, Me.txtRepositoryPath.value)
    If sP <> "" Then
        Me.txtRepositoryPath.value = sP
        sgSpigaoConfiguration.RepoFolderPath = Me.txtRepositoryPath.value
        sgSpigao.Processing.UserSettings.DefaultStorageFolder = Me.txtRepositoryPath.value
        sgSpigao.Processing.UserSettings.save
    End If

fin:

End Sub

'Bouton Personnalisation
Private Sub cmdRepository_Click()
    formConfigRepo.Show
End Sub


'**************************************************************************
' Partie Edisys
'**************************************************************************

'D|fffd|sactive la d|fffd|tection des anciens formats
Private Sub chkDisableOldFormatDetection_Click()
    If Not bInitialize Then
        sgSpigaoConfiguration.OldDieVersionDetection_Disabled = Not (Me.chkDisableOldFormatDetection.value = 0)
    End If
End Sub

'
Public Sub enable_form(IsEnabled As Boolean)
Dim bActiveStub As Boolean



    cmdToggleStubMode.Enabled = IsEnabled
    cmdAddSelectedDeals.Enabled = IsEnabled
    cmdCheckDemo.Enabled = IsEnabled
    cmdRAZ.Enabled = IsEnabled
    cmdSelect.Enabled = IsEnabled
    cmdConfigure.Enabled = IsEnabled

    If IsEnabled Then
        If getCurrentModeStub = StubMode.Enabled Then
            lblModeActif.Caption = "Mode d|fffd|mo activ|fffd| (hors connexion)"
            cmdToggleStubMode.Caption = "Le mode d|fffd|mo est actif." & vbCrLf & "Cliquer pour basculer en mode r|fffd|el."
            cmdToggleStubMode.ForeColor = vbRed
            bActiveStub = True
        Else
            lblModeActif.Caption = "Mode r|fffd|el activ|fffd|"
            cmdToggleStubMode.Caption = "Le mode r|fffd|el est actif." & vbCrLf & "Cliquer pour basculer en mode d|fffd|mo."
            cmdToggleStubMode.ForeColor = vbBlack
            bActiveStub = False
        End If

    End If

    cmdAddSelectedDeals.visible = Not bActiveStub
    cmdCheckDemo.visible = bActiveStub
    cmdRAZ.visible = True
    cmdSelect.visible = Not bActiveStub
    cmdToggleStubMode.visible = True
    cmdConfigure.visible = True
End Sub


'Bascule mode stub
Private Sub cmdToggleStubMode_click()

    If getCurrentModeStub = StubMode.Disabled Then
        modStubManager.AppDataActiveConfigStub
    Else
        modStubManager.AppDataDesactiveConfigStub
    End If

End Sub

Private Sub cmdRAZ_Click()
    modStubManager.ReinitStub
End Sub

Private Sub cmdCheckDemo_Click()
    sgSpigao.Detection.UI.Deals.ListNewDeals
End Sub


Private Sub cmdAddSelectedDeals_Click()
    enable_form False
    addallselected
    enable_form True
End Sub

Private Sub cmdChiffrageAuto_Click()
    mDemoPriceRandom
End Sub
Private Sub cmdQuantityAuto_Click()
    mDemoQuantityRandom
End Sub
Private Sub cmdSelect_Click()
    enable_form False
    addOneDealInStub
    enable_form True
End Sub

Private Sub cmdSwitchDemo_Click()

    AppDataActiveConfigStub

End Sub

Private Sub cmdSwitchReel_Click()
    AppDataDesactiveConfigStub
End Sub




Attribute VB_Name = "formConfirm"
Attribute VB_Base = "0{69291135-4CEF-4589-A529-DB64F6C477E5}{DB5BF9FD-BFED-4AF6-9101-FF062641B97B}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Option Explicit
Private pWk As Excel.Workbook
Private Sub cmdClose_Click()
    Unload Me
End Sub

Private Sub cmdCopyPath_Click()


    Dim clipboard As MSForms.DataObject
    Set clipboard = New MSForms.DataObject
    clipboard.SetText Me.lblPath.Caption
    clipboard.PutInClipboard

End Sub


Public Sub ShowMsg(sTitle As String, sMessage As String, sPathFinal As String, bAllowSendByMail As Boolean, oWk As Excel.Workbook)

    Set pWk = oWk
    Me.Caption = sTitle
    Me.lblMessage.Caption = sMessage
    Me.lblPath.Caption = sPathFinal
    Me.cmdSendMail.visible = (sgExcelApplication.Engine.MailSystem = xlMAPI And bAllowSendByMail)
    Me.Show
    
End Sub


Private Sub cmdSendMail_Click()
On Error Resume Next

    pWk.SendMail "", "Demande de prix : " & pWk.Sheets(1).Cells(1, 3)
    pWk.Close False
    
End Sub

Private Sub UserForm_Initialize()
    Me.Left = Application.Left + CInt(Application.Width / 2) - CInt(Me.Width / 2)
End Sub
Attribute VB_Name = "formConfirmConversion"
Attribute VB_Base = "0{8FF5081E-A610-449E-9811-5F4EDD26B76E}{933DBFC3-D195-4156-98E6-ABD9C296BBB6}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Option Explicit
Private pConversionAllowed As Boolean

Private Sub cmdCancel_Click()
    Me.Hide
End Sub

Private Sub cmdOK_Click()
    pConversionAllowed = True
    Me.Hide
End Sub



Private Sub lblPlusInfo_Click()
 
    sgSpigao.goToCompatibilityHelp
    
End Sub


Public Function getConversionAllowed() As Boolean
    Me.Left = Application.Left + CInt(Application.Width / 2) - CInt(Me.Width / 2)
    pConversionAllowed = False
    Me.Show
    getConversionAllowed = pConversionAllowed
End Function
Attribute VB_Name = "formImportChooseMode"
Attribute VB_Base = "0{24905399-16AB-4880-A4B5-0F6FDE47B1F1}{42AAE207-07C6-47B0-8138-D3583EB65046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private sChoice As Integer

Private Sub cmdImportDet_Click()
        sChoice = eImportMode.DetTxt
        Me.Hide
End Sub


Private Sub CmdImportXls_Click()
        sChoice = eImportMode.XlsOri
        Me.Hide
End Sub

Private Sub UserForm_Initialize()
    Me.Left = Application.Left + CInt(Application.Width / 2) - CInt(Me.Width / 2)
End Sub

Public Function getchoice() As String
    
    sChoice = eImportMode.None
    Me.Show
    getchoice = sChoice
    
End Function
Attribute VB_Name = "formImportDealWizard"
Attribute VB_Base = "0{96B02584-9283-4E74-973D-5AAEC1F79090}{51DE2CD7-C041-44CE-B150-4D11715F4B21}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Private bCancel As Boolean

Public Function getImportParameters(oDeal As cDeal, ByRef doImportPlanning As Boolean, ByRef doCreateFolder As Boolean, ByRef sFolderPath As String _
                                    , ByRef doImportDie As Boolean, ByRef doDownloadDce As Boolean) As Boolean
    
    If oDeal Is Nothing Then Exit Function
    
    'init
    resetForm
    Me.lblDealCaption.Caption = oDeal.Caption
    
    'planning
    Me.chkAddPlanning.value = True
    
    'r|fffd|pertoire d'affaire
    Me.chkDealFolder.Enabled = True
    Me.chkDealFolder.value = True
    Me.txtDealFolderPath.Text = sgFileSystem.joinPath(sgSpigaoConfiguration.RepoFolderPath, oDeal.Id)
    allowdealFolderSelection True
    
    'die
    Me.chkDie.Enabled = True
    Me.chkDie.value = True
    
    'dce
    If oDeal.hasDceUrl Then
        Me.chkDce.Enabled = True
        Me.chkDce.value = True
        Me.lblDceUrl.Caption = oDeal.dceUrl
    End If
    
    Me.Show

    If bCancel Then
        getImportParameters = False
    Else
        doImportPlanning = (Me.chkAddPlanning.value <> 0)
        doCreateFolder = (Me.chkDealFolder.value <> 0)
        doImportDie = (Me.chkDie.value <> 0)
        doDownloadDce = (Me.chkDce.value <> 0)
        If Me.chkDealFolder.value <> 0 Then
            sFolderPath = Me.txtDealFolderPath.Text
        Else
            sFolderPath = ""
        End If
        getImportParameters = True
    End If
End Function

Private Sub chkDealFolder_Click()
    If Me.chkDealFolder.value = 0 Then
        allowdealFolderSelection False
    Else
        allowdealFolderSelection True
    End If
End Sub

Private Sub cmdCancel_Click()
    bCancel = True
    Me.Hide
    
End Sub

Private Sub cmdParcourir_Click()

    Dim sPath As String
    
    sPath = sgFileSystem.promptForFolderPath(sgSpigaoConfiguration.RepoFolderPath, Me.txtDealFolderPath.Text)
    If sPath <> "" Then
        Me.txtDealFolderPath.Text = sPath
    End If

End Sub

Private Sub cmdValid_Click()
    If controlForm() Then
        bCancel = False
        Me.Hide
    End If
End Sub

Private Sub resetForm()
    Me.lblDealCaption.Caption = ""
    Me.chkAddPlanning.Enabled = False
    Me.chkAddPlanning.value = 0
    Me.chkDce.Enabled = False
    Me.chkDce.value = 0
    Me.chkDealFolder.Enabled = False
    Me.chkDealFolder.value = 0
    Me.txtDealFolderPath.Text = ""
    Me.chkDie.Enabled = False
    Me.chkDie.value = 0
    Me.lblDceUrl.Caption = ""
    allowdealFolderSelection False
End Sub

Private Sub allowdealFolderSelection(bAllowed As Boolean)
    Me.txtDealFolderPath.Enabled = bAllowed
    Me.cmdParcourir.Enabled = bAllowed
End Sub


Private Function controlForm() As Boolean
On Error GoTo fin

    controlForm = True
    
    If Me.chkDealFolder.value Then
        If Me.txtDealFolderPath.Text = "" Or Me.txtDealFolderPath.Text = sgSpigaoConfiguration.RepoFolderPath Then
            MsgBox "Veuillez indiquer un r|fffd|pertoire d'affaire sp|fffd|cifique."
            controlForm = False
            Exit Function
        End If
    End If

    Exit Function
fin:
    If Err Then MsgBox Err.Description
    controlForm = False

End Function

Attribute VB_Name = "formMsgBox"
Attribute VB_Base = "0{2B34A98A-2730-4595-8485-2909089E1BC9}{846666E8-165B-42F8-8A79-7ADBBA53B85C}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Option Explicit

Private Sub cmdClose_Click()
    Unload Me
End Sub


Public Sub Load(sTitle As String, sMessage As String)

    lblMessage.Caption = sMessage
    Me.Caption = sTitle

    Me.Show
End Sub

Private Sub UserForm_Initialize()
Me.Left = Application.Left + CInt(Application.Width / 2) - CInt(Me.Width / 2)
End Sub
Attribute VB_Name = "formSaveDevis"
Attribute VB_Base = "0{65E5E9A5-4115-4A8F-8DA0-C81BE3F0A356}{86F52413-4380-49A6-AB11-5478FCD3B490}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Option Explicit


Dim pDieXmlFilePath As String
Dim bContinue As Boolean
Dim bCancelClic As Boolean
Public sDealFolderPath As String
Public sStudyFileName As String

Public Function getDealFolderPathToSave(sProjectName As String, sProjectPath As String, Optional bWithoutStudyName As Boolean = False) As String

    Me.Left = Application.Left + CInt(Application.Width / 2) - CInt(Me.Width / 2)
    
    Me.lblstudyName.visible = Not bWithoutStudyName
    Me.txtStudyName.visible = Not bWithoutStudyName
    
    ReinitForm
    Me.txtNewDealName = ""
    
    pDieXmlFilePath = sProjectPath
    InitiateForm sProjectName
    
    bContinue = False
    
    Me.Show
    
    If bContinue Then
        sStudyFileName = Me.txtStudyName.Text
        If Me.OptNew Then
            getDealFolderPathToSave = sgFileSystem.joinPath(sgSpigaoConfiguration.RepoFolderPath, Me.txtNewDealName)
        ElseIf Me.optSpecific Then
            getDealFolderPathToSave = Me.txtSpecificFolderPath.Text
        End If
    Else
        getDealFolderPathToSave = ""
    End If

End Function


Private Sub cmdAnnuler_Click()
    bContinue = False
    Me.Hide
End Sub

'Changement du r|fffd|pertoire de stockage par d|fffd|faut des dossiers
Private Sub cmdChangeRep_Click()
    Dim sNewFolderPath As String
    sNewFolderPath = sgFileSystem.promptForFolderPath(sgSpigaoConfiguration.RepoFolderPath, Me.txtRepPath.Text)
    
    
    If sNewFolderPath <> "" Then
        Me.txtRepPath.Text = sNewFolderPath
        sgSpigaoConfiguration.RepoFolderPath = sNewFolderPath
        sgSpigao.Processing.UserSettings.DefaultStorageFolder = Me.txtRepPath.Text
        sgSpigao.Processing.UserSettings.save
        
        ReinitForm
        InitiateForm Me.txtNewDealName.value
    End If
fin:

End Sub




Private Sub cmdOK_Click()

Dim sDealPath As String

'
    If Me.txtStudyName.visible Then
        If Len(Me.txtStudyName.Text) < 5 Then
            MsgBox "Veuillez renseigner un nom d'|fffd|tude en .xlsx" & vbCrLf & "Enregistrement annul|fffd|."
            Exit Sub
        End If
        If Right(Me.txtStudyName.Text, 5) <> ".xlsx" Then
            MsgBox "Veuillez renseigner un nom d'|fffd|tude en .xlsx." & vbCrLf & "Enregistrement annul|fffd|."
            Exit Sub
        End If
        
        If sgExcelApplication.hasWorkbookAlreadyLoaded(Me.txtStudyName.Text) Then
            MsgBox "Un classeur portant le nom " & Me.txtStudyName.Text & " est d|fffd|j|fffd| ouvert dans Excel." _
            & vbCrLf & "Veuillez choisir un autre nom pour l'|fffd|tude." _
            & vbCrLf & "Enregistrement annul|fffd|."
            Exit Sub
        End If
    End If
    
    If (Me.OptNew) Then
        sDealPath = sgFileSystem.joinPath(sgSpigaoConfiguration.RepoFolderPath, Me.txtNewDealName)
        'Test si rep existe
        If sgFileSystem.FolderExists(sDealPath) Then
            If MsgBox("Le r|fffd|pertoire d'affaire " & sDealPath & " existe d|fffd|j|fffd|." & vbCrLf & "Voulez-vous ajouter l'|fffd|tude dans ce r|fffd|pertoire d'affaire ?", vbYesNo) = vbNo Then
                Exit Sub
            Else
                bContinue = True
                sDealFolderPath = sDealPath
                Me.Hide
            End If
        Else
            bContinue = True
            sDealFolderPath = sDealPath
            Me.Hide
        End If
    ElseIf (Me.optSpecific) Then
        sDealPath = Me.txtSpecificFolderPath.Text
        If sgFileSystem.FolderExists(sDealPath) Then
            bContinue = True
            sDealFolderPath = sDealPath
            Me.Hide
        Else
            MsgBox "Le dossier sp|fffd|cifi|fffd| n'existe pas : " & sDealPath
            Exit Sub
        End If
    End If
    
    

fin:

End Sub

Private Sub optSpecific_Click()
Dim s As String

    If bCancelClic Then Exit Sub
    If Not Me.optSpecific.value Then
        bCancelClic = True
        Me.optSpecific.value = True
        bCancelClic = False
    End If
    s = sgFileSystem.promptForFolderPath(sgSpigaoConfiguration.RepoFolderPath, Me.txtSpecificFolderPath.Text)
    If s <> "" Then Me.txtSpecificFolderPath.Text = s
    
End Sub

Private Sub optSpecific_MouseDown(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal y As Single)
    optSpecific_Click
End Sub

Private Sub txtNewDealName_Enter()

    Me.OptNew = Checked
End Sub

Private Sub ReinitForm()

Dim ofolder As Folder
Dim oSubfolder As Folder

    
    
    Me.txtRepPath.Text = sgSpigaoConfiguration.RepoFolderPath
    Me.txtSpecificFolderPath.Text = ""
    Me.txtStudyName.Text = ""
    If sgFileSystem.FolderExists(sgSpigaoConfiguration.RepoFolderPath) Then
        Me.cmdAnnuler.Enabled = True
        Me.cmdOK.Enabled = True
        Me.txtRepPath.ForeColor = vbBlack
    Else
        Me.cmdAnnuler.Enabled = False
        Me.cmdOK.Enabled = False
        Me.txtRepPath.ForeColor = vbRed
        Me.txtRepPath.Text = "Indiquez un r|fffd|pertoire de stockage des affaires     --->"
    End If
End Sub



Private Sub InitiateForm(sProjectName As String)

    Dim i As Integer
    Dim bfound As Boolean
    Dim s As String
    sDealFolderPath = ""
    bfound = False
    bCancelClic = False
    
    
    If Me.txtStudyName.visible Then
        'Check si on est dans un r|fffd|pertoire DIE_...
        s = sgFileSystem.getFolderPathFromFilePath(pDieXmlFilePath)
        If Not Mid(s, InStrRev(s, "\") + 1, 4) = "die_" Then
            'on est pas sur un die t|fffd|l|fffd|charg|fffd| automatiquement donc on reste dans le m|fffd|me rep par d|fffd|faut
            ' et on se repositionne sur le rep parent si on est dans un template connu...
            If Right(s, Len(sgSpigaoConfiguration.DieFolderName)) = sgSpigaoConfiguration.DieFolderName Then
                s = sgFileSystem.getFolderPathFromFilePath(s)
            End If
            
            Me.txtSpecificFolderPath.Text = s
            bCancelClic = True
            Me.optSpecific = True
            bCancelClic = False
        Else
            Me.txtNewDealName = sProjectName
            Me.OptNew = Checked
        
        End If
        
        Me.txtStudyName.Text = sProjectName & ".xlsx"
    End If
    
End Sub

Private Sub txtStudyName_Change()

End Sub
Attribute VB_Name = "formUnite"
Attribute VB_Base = "0{741EA77B-45CF-4701-860C-7D463EEEFCB3}{8B8FB8F1-3FB8-4FC8-AC97-89E0B35B6867}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Private bCancel As Boolean



Private Sub UserForm_Initialize()
    Me.cbUnit.clear
    Me.cmdUnit.Enabled = False
End Sub

Public Function getNewMapping(oWkItem As cWkItem, oDicRef As Dictionary) As String
On Error Resume Next

    Dim sKey As Variant
    bCancel = False
    
    Me.Caption = "Mapping des unit|fffd|s"
    Me.l_Unit.Caption = oWkItem.Unit
    Me.l_Designation.Caption = oWkItem.designation
    Me.l_Num.Caption = oWkItem.PriceNumber
    Me.l_Qte.Caption = oWkItem.QT.value
    
    Me.cbUnit.clear
    For Each sKey In oDicRef.Keys
        Me.cbUnit.AddItem oDicRef(sKey).code
        Me.cbUnit.list(Me.cbUnit.ListCount - 1, 1) = oDicRef(sKey).designation
    Next
    Me.cmdUnit.Enabled = False
    Me.Show
    If bCancel Then
        getNewMapping = ""
    Else
        getNewMapping = Me.cbUnit.value
    End If
End Function

Private Sub cbUnit_Change()
    If Me.cbUnit.ListIndex > -1 Then
        Me.l_Unite.Caption = Me.cbUnit.list(Me.cbUnit.ListIndex, 1)
        Me.cmdUnit.Enabled = True
    End If
End Sub


Private Sub cmdIgnore_Click()
    bCancel = True
    Unload Me
End Sub

Private Sub cmdUnit_Click()

    Unload Me
End Sub






Attribute VB_Name = "iRelatedItem"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Public Function IsActivated(Optional sName As String = "") As iRelatedItem

End Function

Public Function IsDeactivated(Optional sName As String = "") As iRelatedItem

End Function
Attribute VB_Name = "iWkItem"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Property Get Id() As String
   
End Property
Property Get PriceNumber() As String
    'PriceNumber = pPriceNumber
End Property
Property Get designation() As String
    'Designation = pDesignation
End Property
Property Get Level() As Integer
    'Level = pLevel
End Property
Property Get WkType() As eWorkItemType
    'WkType = pWkType
End Property
Property Get ParentId() As String

End Property
''Property Let Id(sValue As String)
''    'pId = sValue
''End Property
''Property Let PriceNumber(sValue As String)
''    'pPriceNumber = sValue
''End Property
''Property Let Designation(sValue As String)
''    'pDesignation = sValue
''End Property
''Property Let Level(sValue As String)
''    'pLevel = sValue
''End Property
''Property Let WkType(sValue As eWorkItemType)
''    'pWkType = sValue
''End Property

Public Function loadFromSpigaoWkItem(oWk As Object)

End Function
Attribute VB_Name = "mExportToRepositoryTool"
Option Explicit

Private Const cTargetDirectory As String = "D:\repos\SpigaoExcelConnector\Src\Src"
Private Const cTargetBuildPath As String = "D:\repos\SpigaoExcelConnector\Src\Build\ConnecteurExcel.save.xlam"

' Excel macro to export all VBA source code in this project to text files for proper source control versioning
' Requires enabling the Excel setting in Options/Trust Center/Trust Center Settings/Macro Settings/Trust access to the VBA project object model
Public Sub ExportVisualBasicCode()
    Const Module = 1
    Const ClassModule = 2
    Const Form = 3
    Const Document = 100
    Const Padding = 24
    
    Dim VBComponent As Object
    Dim count As Integer
    Dim path As String
    Dim extension As String
    Dim fso As New FileSystemObject
    
    count = 0
    
    If Not fso.FolderExists(cTargetDirectory) Then
        Exit Sub
    End If
    Set fso = Nothing
    
    For Each VBComponent In ThisWorkbook.VBProject.VBComponents
        Select Case VBComponent.type
            Case ClassModule, Document
                extension = ".cls"
            Case Form
                extension = ".frm"
            Case Module
                extension = ".bas"
            Case Else
                extension = ".txt"
        End Select
            
                
        On Error Resume Next
        Err.clear
        
        path = cTargetDirectory & "\" & VBComponent.name & extension
        Call VBComponent.export(path)
        
        If Err.Number <> 0 Then
            Call MsgBox("Failed to export " & VBComponent.name & " to " & path, vbCritical)
        Else
            count = count + 1
            Debug.Print "Exported " & Left$(VBComponent.name & ":" & Space(Padding), Padding) & path
        End If

        On Error GoTo 0
    Next
    
End Sub

Public Sub rebuildNewConnectorXlam()

    Dim fso As New FileSystemObject
    Dim ofile As Object
    Dim ofolder As Object
    Dim oWk As Excel.Workbook
    Dim sextension As String
    If Not fso.FolderExists(cTargetDirectory) Then Exit Sub
    
    
    'Nouvel Excel
    Set oWk = Excel.Workbooks.add
    Set ofolder = fso.GetFolder(cTargetDirectory)
    For Each ofile In ofolder.Files
        sextension = LCase(Mid(ofile.path, InStrRev(ofile.path, ".")))
        If sextension = ".bas" Or sextension = ".frm" Or sextension = ".cls" Then
        oWk.VBProject.VBComponents.Import ofile.path
        End If
    Next
    
    
    oWk.saveAs cTargetBuildPath, xlOpenXMLAddIn
    
    MsgBox "classeur cr|fffd||fffd| : pensez |fffd| prot|fffd|ger le code par mot de passe"
End Sub
Attribute VB_Name = "mMainPlanning"
Option Explicit


Attribute VB_Name = "modBuilder"
''Option Explicit
''
''Public Sub parseDic(oDic As Object, sHead As String, ByRef dProp As Dictionary, sroot As String)
''
''    Dim sKey As Variant
''    Dim oDic2 As Object
''
''    If TypeName(oDic) = "Dictionary" Then
''        For Each sKey In oDic.Keys
''            If IsObject(oDic(sKey)) Then
''                parseDic oDic(sKey), sHead & CStr(sKey), dProp, sroot & "(""" & sKey & """)"
''            Else
''                'Debug.Print sHead & sKey & " : " & oDic(sKey)
''                If Not dProp.exists(sHead & sKey) Then
''                    If sroot <> "" Then
''                        dProp.add sHead & sKey, sroot & "(""" & sKey & """)"
''                    Else
''                        dProp.add sHead & sKey, "oJson(""" & sKey & """)"
''                    End If
''                End If
''            End If
''        Next
''    ElseIf TypeName(oDic) = "Collection" Then
''        For Each oDic2 In oDic
''            parseDic oDic2, sHead, dProp, sroot
''        Next
''    End If
''
''End Sub
''
''Public Function buildByJson(sJson As String) As cDeal
''    Dim oJson As Dictionary
''    Dim oDeal As cDeal
''    Dim dDatas As New Dictionary
''    Dim sKey As Variant
''
''    Set oDeal = New cDeal
''
''    Set oJson = JsonConverter.ParseJson(sJson)
''
''    If oJson Is Nothing Then Exit Function
''
''    parseDic oJson, "", dDatas, "oJson"
''
''
'''    For Each sKey In dDatas.Keys
'''        Debug.Print "private p" & sKey & " as string"
'''    Next
'''
'''    For Each sKey In dDatas.Keys
'''        Debug.Print "public property get " & sKey & "() as string"
'''        Debug.Print "   " & sKey & "=p" & sKey
'''        Debug.Print "end property"
'''    Next
'''
'''    For Each sKey In dDatas.Keys
'''        Debug.Print "public property let " & sKey & "(sValue as string)"
'''        Debug.Print "   p" & sKey & "=sValue"
'''        Debug.Print "end property"
'''    Next
Attribute VB_Name = "modCompatibility"
Option Explicit

'Function de conversion d'un Id ancien format type P_1_z1x23 en nouveau format type P@z1x23
Public Function cvOldIdToNewId(ByVal s As String) As String
Dim p() As String

    If InStr(s, "!") > 0 Then s = Mid(s, InStr(s, "!") + 1)
    p = Split(s, "_")
    If UBound(p) = 2 Then
        cvOldIdToNewId = p(0) & "@" & p(2)
    End If
    
End Function

'Force la d|fffd|sactivation des macros Edisys
Public Sub ForceScribeMacrosDisabled()
    
    If sgSpigaoConfiguration.DisableDeprecatedVersion_Allowed Then
        If sgSpigaoConfiguration.LastDeprecatedMacrosEnabled < Now - 30 And IsScribeAddinLoaded Then
            formMsgBox.Load "Spigao - d|fffd|sactivation des macros Scribe", "Les macros Scribe pr|fffd|sentes dans l'onglet 'Edisys' d'Excel vont |fffd|tre automatiquement d|fffd|sactiv|fffd|es." & vbCrLf & vbCrLf & "Vous pouvez les r|fffd|activer |fffd| tout moment via le menu Configuration > Param|fffd|tres avanc|fffd|s."
            ToggleScribeAddin_Enabled False
            sgSpigaoConfiguration.LastDeprecatedMacrosEnabled = Now
        End If
    End If
End Sub

'Active ou d|fffd|sactive les macros Scribe install|fffd|es.
Public Function ToggleScribeAddin_Enabled(bEnabled As Boolean) As Boolean
On Error GoTo fin
    Dim i As Integer
    Dim sName As String
    
    sgExcelApplication.MuteOn
    For i = 1 To sgExcelApplication.Engine.AddIns.count
        sName = LCase(sgExcelApplication.Engine.AddIns2.item(i).title)
         If (sName = "scribe" Or sName = "scribe_coeff" Or sName = "scribe_conv" Or sName = "scribe_poids" Or sName = "scribe_synthese") Then
            sgExcelApplication.Engine.AddIns2.item(i).Installed = bEnabled
         End If
    Next
    
    ToggleScribeAddin_Enabled = True
    sgExcelApplication.MuteOff
    Exit Function
fin:
    If Err > 0 Then MsgBox "Erreur lors de la d|fffd|sactivation des macros Scribe." & vbCrLf & Err.Description
    sgExcelApplication.MuteOff

End Function

Public Function IsScribeAddinInstalled() As Boolean
On Error GoTo fin

    Dim i As Integer
    Dim sName As String
    IsScribeAddinInstalled = False
    For i = 1 To sgExcelApplication.Engine.AddIns.count
        sName = LCase(sgExcelApplication.Engine.AddIns2.item(i).title)
        If sName = "scribe" Or sName = "scribe_coeff" Or sName = "scribe_conv" Or sName = "scribe_poids" Or sName = "scribe_synthese" Then
            IsScribeAddinInstalled = True
            Exit For
        End If
    Next
fin:
    If Err Then Err.clear
End Function
Public Function IsScribeAddinLoaded() As Boolean
On Error GoTo fin

    Dim i As Integer
    Dim sName As String
    IsScribeAddinLoaded = False
    For i = 1 To sgExcelApplication.Engine.AddIns.count
         sName = LCase(sgExcelApplication.Engine.AddIns2.item(i).title)
        If (sName = "scribe" Or sName = "scribe_coeff" Or sName = "scribe_conv" Or sName = "scribe_poids" Or sName = "scribe_synthese") And sgExcelApplication.Engine.AddIns2.item(i).Installed Then
            IsScribeAddinLoaded = True
            Exit For
        End If
    Next
fin:
    If Err Then Err.clear
End Function



'*****************************************************************************************
' Appel de Formule1 en enregistrant l'onglet *det sous forme de fichier texte
'*****************************************************************************************
Public Function ExportDIE_Compatibility()
Dim sNom As String
Dim sFirstFile As String
Dim wbk As Workbook
Dim Sheet As Worksheet
Dim sFichier As String
Dim sCheminF1 As String
Dim nDeci As Integer
Dim sDeci As String
'Dim shData As Worksheet

    
    sCheminF1 = ReturnParam_Reg(cRepScribe & cPath) & " "
    
    ' r|fffd|cup|fffd|ration du param|fffd|tre de d|fffd|cimale
    sDeci = ReturnParam_Reg(cRepXLA & cDeciScrXLA)
    
    ' test si c'est une valeur d|fffd|cimale
    If Not IsNumeric(sDeci) Then
        nDeci = 2
    Else
        nDeci = CInt(sDeci)
    End If
    
    ' configuration du nombre de decimale
    sDeci = String(nDeci, "0")
    
    Application.DisplayAlerts = False
    
    Set wbk = Application.ActiveWorkbook
    
    'XML : suppression onglet Undo_
    Dim shData As Worksheet
    If LCase(Right(wbk.name, 4)) = ".xml" Then
        For Each shData In wbk.Sheets
            If LCase(Left(shData.name, 5)) = "undo_" Then
                shData.visible = xlSheetVisible
                Application.DisplayAlerts = False
                shData.delete
                Application.DisplayAlerts = True
            End If
        Next
        On Error GoTo 0
    End If
    
    ' sauvegarde du fichier Excel
    Application.DisplayAlerts = False
    'wbk.Save

    ' on garde le nom du classeur
    Dim sPath As String
    sPath = wbk.FullName
    
    
    If LCase(Right(wbk.name, 4)) = ".xls" Then
        
        ' recherche de la feuille DET
        For Each Sheet In wbk.Sheets
            ' detection des feuilles det |fffd| exporter
            If LCase(Right(Sheet.name, 3)) = "det" Or LCase(Right(Sheet.name, 3)) = "bpx" Then
         
                 With Sheet
                    
                    'Nom de la feuille |fffd| exporter
                    sNom = .name
        
                    'Formatage de la feuille
                    InitSheet Sheet, nDeci
                    
                    On Error GoTo errSave
                    ' exportation de la feuille en fichier det ent type texte
                    Sheet.saveAs Filename:=wbk.path & "\" & sNom & ".TXT", FileFormat:=xlTextWindows, CreateBackup:=False
                
                    ' chaine d'ouverture de formule1
                    sFichier = sCheminF1 & wbk.path & "\" & sNom & ".cnf"
            
                    ' identification du premier fichier pour ouverture avec F1
                    If sFirstFile = "" Then
                        sFirstFile = sFichier
                    End If
            
                End With
            End If
        Next Sheet
        
        ' fermeture du txt
        wbk.saveAs sPath, xlWorkbookNormal
        'et r|fffd|ouverture
        Application.Workbooks.Open sPath
        
    End If
        
    ' test si un onglet DET a |fffd|t|fffd| trouv|fffd|
    If sFirstFile <> "" Then
        On Error GoTo errF1
        ' Ex|fffd|cute Formule1 pour l'impression
        Dim MyAppID As Double
        MyAppID = Shell(sFirstFile, 1)
        AppActivate MyAppID ' Active Formule 1
        Application.DisplayAlerts = True
        Exit Function
    Else
        'aucune feuille Det trouv|fffd|e
        MsgBox "Aucune information trouv|fffd|e pour lancer Scribe"
    End If
    
    Application.DisplayAlerts = True
    Exit Function
    
errF1:
    MsgBox "Impossible de trouver l'application Scribe!!"
    Exit Function
    
errSave:
    MsgBox "Impossible d'enregistrer le fichier de donn|fffd|e!!"

End Function

'Corige les erreurs de la sheet
Sub InitSheet(ByRef osh As Worksheet, ByVal nDeci As Integer)
Dim i As Integer
Dim j As Integer
Dim tCol() As Integer
Dim nValue As Integer

    ReDim tCol(0)
    
    ' formatage ds colonnes non vide |fffd| partir de la colonne B
    i = 2
    Do While i <= osh.usedRange.Columns.count
        ' si pas d'ent|fffd|te de colonne on supprime la colonne
        If osh.Cells(1, i) = "" Then
            osh.Columns(i).delete
            DoEvents
        ElseIf UCase(Left(osh.Cells(1, i), 2)) = "QT" Then
            ReDim Preserve tCol(UBound(tCol) + 1)
            tCol(UBound(tCol)) = i
        End If
        i = i + 1
    Loop

    ' parcours de toutes les lignes
    For i = 2 To osh.usedRange.Rows.count
        If osh.Cells(i, 1) <> "" Then
            For j = 1 To UBound(tCol)
                If IsNumeric(osh.Cells(i, tCol(j))) Then
                    nValue = DecimalCounter(osh.Cells(i, tCol(j)).value)
                                        
                    ' Nombre de d|fffd|cimales par d|fffd|faut si inf|fffd|reiur
                    If nValue < nDeci Then
                        nValue = nDeci
                    End If
                    osh.Cells(i, tCol(j)).NumberFormat = "0." & String(nValue, "0")
                    osh.Cells(i, tCol(j)).HorizontalAlignment = xlRight
                End If
            Next j
        End If
    Next i


End Sub

Private Function DecimalCounter(s As Variant) As Integer
    
    DecimalCounter = 0
    If Not IsNumeric(s) Then Exit Function
    DecimalCounter = Len(Mid(CStr(CDbl(s)), InStr(CStr(CDbl(s)), DecimalSeparator) + 1))
    
End Function

Private Function DecimalSeparator() As String
Dim str As String

    If InStr(CStr(0.1), ",") > 0 Then
        DecimalSeparator = ","
    Else
        DecimalSeparator = "."
    End If
    
End Function
Attribute VB_Name = "modConfiguration"
Option Explicit


'1- Pour savoir si la feuille active est une feuille d'|fffd|tude
Public Function corIsSpigaoStudySheet() As Boolean
    corIsSpigaoStudySheet = sgExcelSheetBuilder.buildByWorksheet(activeSheet).IsSpigaoStudySheet
End Function
Public Sub corMarkActiveSheetAsSpigaoStudySheet()
    sgExcelSheetBuilder.buildByWorksheet(activeSheet).IsSpigaoStudySheet = True
End Sub

'2- Pour savoir si la feuille active est une feuille d'|fffd|tude de base (diff|fffd|rent de la feuille de cumul)
Public Function corIsSpigaoStudyBaseSheet() As Boolean
    corIsSpigaoStudyBaseSheet = sgExcelSheetBuilder.buildByWorksheet(activeSheet).IsSpigaoBaseSheet
End Function
Public Sub corMarkActiveSheetAsSpigaoStudyBaseSheet()
    sgExcelSheetBuilder.buildByWorksheet(activeSheet).IsSpigaoBaseSheet = True
End Sub

'3- Lecture des colonnes
Public Function cor_colNumAuto() As Integer
    cor_colNumAuto = sgExcelSheetBuilder.buildByWorksheet(activeSheet).getColByRangeName(cRangeName_colNumAuto)
End Function
Public Function cor_colNumAutoPrice() As Integer
    cor_colNumAutoPrice = sgExcelSheetBuilder.buildByWorksheet(activeSheet).getColByRangeName(cRangeName_colNumAutoPrice)
End Function

Public Function cor_colId() As Integer
    cor_colId = sgExcelSheetBuilder.buildByWorksheet(activeSheet).getColByRangeName(cRangeName_colId)
End Function
Public Function cor_colPriceNumber() As Integer
    cor_colPriceNumber = sgExcelSheetBuilder.buildByWorksheet(activeSheet).getColByRangeName(cRangeName_colPriceNumber)
End Function
Public Function cor_colDesignation() As Integer
    cor_colDesignation = sgExcelSheetBuilder.buildByWorksheet(activeSheet).getColByRangeName(cRangeName_colDesignation)
End Function
Public Function cor_colUnit() As Integer
    cor_colUnit = sgExcelSheetBuilder.buildByWorksheet(activeSheet).getColByRangeName(cRangeName_colUnit)
End Function
Public Function cor_colQuantity() As Integer
    cor_colQuantity = sgExcelSheetBuilder.buildByWorksheet(activeSheet).getColByRangeName(cRangeName_colQuantity)
End Function
Public Function cor_colUnitPriceWithoutCoef() As Integer
    cor_colUnitPriceWithoutCoef = sgExcelSheetBuilder.buildByWorksheet(activeSheet).getColByRangeName(cRangeName_colUnitPriceWithoutCoef)
End Function
Public Function cor_colCoef() As Integer
    cor_colCoef = sgExcelSheetBuilder.buildByWorksheet(activeSheet).getColByRangeName(cRangeName_colCoef)
End Function
Public Function cor_colUnitPrice() As Integer
    cor_colUnitPrice = sgExcelSheetBuilder.buildByWorksheet(activeSheet).getColByRangeName(cRangeName_colUnitPrice)
End Function
Public Function cor_colTotalPrice() As Integer
    cor_colTotalPrice = sgExcelSheetBuilder.buildByWorksheet(activeSheet).getColByRangeName(cRangeName_colTotalPrice)
End Function
Public Function cor_colPriceStrength() As Integer
    cor_colPriceStrength = sgExcelSheetBuilder.buildByWorksheet(activeSheet).getColByRangeName(cRangeName_colPriceStrength)
End Function
Public Function cor_colMin() As Integer
    cor_colMin = sgExcelSheetBuilder.buildByWorksheet(activeSheet).getColByRangeName(cRangeName_colMin)
End Function
Public Function cor_colMax() As Integer
    cor_colMax = sgExcelSheetBuilder.buildByWorksheet(activeSheet).getColByRangeName(cRangeName_colMax)
End Function
Public Function cor_colReportMT() As Integer
    cor_colReportMT = sgExcelSheetBuilder.buildByWorksheet(activeSheet).getColByRangeName(cRangeName_colReportMT)
End Function
Public Function cor_colRefId() As Integer
    cor_colRefId = sgExcelSheetBuilder.buildByWorksheet(activeSheet).getColByRangeName(cRangeName_colRefId)
End Function

'3- Ecriture des colonnes
Public Sub cor_SetCols(colNumAuto As Integer, colNumAutoPrice As Integer, colId As Integer, colPriceNumber As Integer, colDesignation As Integer _
    , colUnit As Integer, colQuantity As Integer, colUnitPriceWithoutCoef As Integer, colCoef As Integer, colUnitPrice As Integer _
    , colTotalPrice As Integer, colPriceStrength As Integer, colMin As Integer, colMax As Integer, colReportMT As Integer, colRefId As Integer)
    
    sgExcelSheetBuilder.buildByWorksheet(activeSheet).setRangeNameByCoords cRangeName_colNumAuto, 0, colNumAuto
    sgExcelSheetBuilder.buildByWorksheet(activeSheet).setRangeNameByCoords cRangeName_colNumAutoPrice, 0, colNumAutoPrice
    sgExcelSheetBuilder.buildByWorksheet(activeSheet).setRangeNameByCoords cRangeName_colId, 0, colId
    sgExcelSheetBuilder.buildByWorksheet(activeSheet).setRangeNameByCoords cRangeName_colPriceNumber, 0, colPriceNumber
    sgExcelSheetBuilder.buildByWorksheet(activeSheet).setRangeNameByCoords cRangeName_colDesignation, 0, colDesignation
    sgExcelSheetBuilder.buildByWorksheet(activeSheet).setRangeNameByCoords cRangeName_colUnit, 0, colUnit
    sgExcelSheetBuilder.buildByWorksheet(activeSheet).setRangeNameByCoords cRangeName_colQuantity, 0, colQuantity
    sgExcelSheetBuilder.buildByWorksheet(activeSheet).setRangeNameByCoords cRangeName_colUnitPriceWithoutCoef, 0, colUnitPriceWithoutCoef
    sgExcelSheetBuilder.buildByWorksheet(activeSheet).setRangeNameByCoords cRangeName_colCoef, 0, colCoef
    sgExcelSheetBuilder.buildByWorksheet(activeSheet).setRangeNameByCoords cRangeName_colUnitPrice, 0, colUnitPrice
    sgExcelSheetBuilder.buildByWorksheet(activeSheet).setRangeNameByCoords cRangeName_colTotalPrice, 0, colTotalPrice
    sgExcelSheetBuilder.buildByWorksheet(activeSheet).setRangeNameByCoords cRangeName_colPriceStrength, 0, colPriceStrength
    sgExcelSheetBuilder.buildByWorksheet(activeSheet).setRangeNameByCoords cRangeName_colMin, 0, colMin
    sgExcelSheetBuilder.buildByWorksheet(activeSheet).setRangeNameByCoords cRangeName_colMax, 0, colMax
    sgExcelSheetBuilder.buildByWorksheet(activeSheet).setRangeNameByCoords cRangeName_colReportMT, 0, colReportMT
    sgExcelSheetBuilder.buildByWorksheet(activeSheet).setRangeNameByCoords cRangeName_colRefId, 0, colRefId
End Sub


'4- Lecture des lignes
Public Function cor_rowStart() As Integer
    cor_rowStart = sgExcelSheetBuilder.buildByWorksheet(activeSheet).getRowByRangeName(cRangeName_rowStart)
End Function
Public Function cor_rowTitle() As Integer
    cor_rowTitle = sgExcelSheetBuilder.buildByWorksheet(activeSheet).getRowByRangeName(cRangeName_rowTitle)
End Function

'4- Enregistrement des lignes
Public Sub cor_SetRows(rowStart As Long, rowTitle As Long)
    sgExcelSheetBuilder.buildByWorksheet(activeSheet).setRangeNameByCoords cRangeName_rowStart, rowStart, 0
    sgExcelSheetBuilder.buildByWorksheet(activeSheet).setRangeNameByCoords cRangeName_rowTitle, rowTitle, 0
End Sub

'5-Lecture des lignes template
Public Function cor_templateForPriceItem() As String
    If sgExcelSheetBuilder.buildByWorksheet(activeSheet).parent.sheetExists(cStyleDefaultSheetName) Then
        cor_templateForPriceItem = sgExcelSheetBuilder.buildByWorksheet(activeSheet).parent.getSheetByName(cStyleDefaultSheetName).getAddressByRangeName(cRangeName_templateForPriceItem)
    End If
End Function
Public Function cor_templateForPriceItemDuplicated() As String
    If sgExcelSheetBuilder.buildByWorksheet(activeSheet).parent.sheetExists(cStyleDefaultSheetName) Then
        cor_templateForPriceItemDuplicated = sgExcelSheetBuilder.buildByWorksheet(activeSheet).parent.getSheetByName(cStyleDefaultSheetName).getAddressByRangeName(cRangeName_templateForPriceItemDuplicated)
    End If
End Function
Public Function cor_templateForSubTotal() As String
    If sgExcelSheetBuilder.buildByWorksheet(activeSheet).parent.sheetExists(cStyleDefaultSheetName) Then
        cor_templateForSubTotal = sgExcelSheetBuilder.buildByWorksheet(activeSheet).parent.getSheetByName(cStyleDefaultSheetName).getAddressByRangeName(cRangeName_templateForSubTotal)
    End If
End Function
Public Function cor_templateForChapterItem() As String
    If sgExcelSheetBuilder.buildByWorksheet(activeSheet).parent.sheetExists(cStyleDefaultSheetName) Then
        cor_templateForChapterItem = sgExcelSheetBuilder.buildByWorksheet(activeSheet).parent.getSheetByName(cStyleDefaultSheetName).getAddressByRangeName(cRangeName_templateForChapterItem)
    End If
End Function

'5-Enregistrement des lignes template
Public Sub cor_SetTemplates(sAddresstemplateForPriceItem As String, sAddresstemplateForPriceItemDuplicated As String, sAddresstemplateForSubTotal As String, sAddresstemplateForChapterItem As String)
    If sgExcelSheetBuilder.buildByWorksheet(activeSheet).parent.sheetExists(cStyleDefaultSheetName) Then
        If sAddresstemplateForPriceItem <> "" Then
            sgExcelSheetBuilder.buildByWorksheet(activeSheet).parent.getSheetByName(cStyleDefaultSheetName).setRangeNameByAddress cRangeName_templateForPriceItem, sAddresstemplateForPriceItem
        Else
            sgExcelSheetBuilder.buildByWorksheet(activeSheet).parent.getSheetByName(cStyleDefaultSheetName).deleteRangeName cRangeName_templateForPriceItem
        End If
        If sAddresstemplateForPriceItemDuplicated <> "" Then
            sgExcelSheetBuilder.buildByWorksheet(activeSheet).parent.getSheetByName(cStyleDefaultSheetName).setRangeNameByAddress cRangeName_templateForPriceItemDuplicated, sAddresstemplateForPriceItemDuplicated
        Else
            sgExcelSheetBuilder.buildByWorksheet(activeSheet).parent.getSheetByName(cStyleDefaultSheetName).deleteRangeName cRangeName_templateForPriceItemDuplicated
        End If
        If sAddresstemplateForSubTotal <> "" Then
            sgExcelSheetBuilder.buildByWorksheet(activeSheet).parent.getSheetByName(cStyleDefaultSheetName).setRangeNameByAddress cRangeName_templateForSubTotal, sAddresstemplateForSubTotal
        Else
            sgExcelSheetBuilder.buildByWorksheet(activeSheet).parent.getSheetByName(cStyleDefaultSheetName).deleteRangeName cRangeName_templateForSubTotal
        End If
        If sAddresstemplateForChapterItem <> "" Then
            sgExcelSheetBuilder.buildByWorksheet(activeSheet).parent.getSheetByName(cStyleDefaultSheetName).setRangeNameByAddress cRangeName_templateForChapterItem, sAddresstemplateForChapterItem
        Else
            sgExcelSheetBuilder.buildByWorksheet(activeSheet).parent.getSheetByName(cStyleDefaultSheetName).deleteRangeName cRangeName_templateForChapterItem
        End If
    End If
End Sub


'6-template sous-detail
Public Function cor_hasTemplateForSubDetail() As Boolean
    cor_hasTemplateForSubDetail = (sgExcelSheetBuilder.buildByWorksheet(activeSheet).parent.sheetExists(cSheetName_templateForSubDetails))
End Function


'7-Cellules sp|fffd|cifiques
Public Function cor_cellCoefGeneral() As String
    cor_cellCoefGeneral = sgExcelSheetBuilder.buildByWorksheet(activeSheet).getAddressByRangeName(cRangeName_cellCoefGeneral)
End Function
Public Function cor_cellTitle() As String
    cor_cellTitle = sgExcelSheetBuilder.buildByWorksheet(activeSheet).getAddressByRangeName(cRangeName_cellTitle)
End Function
Public Function cor_cellTotal_HT() As String
    cor_cellTotal_HT = sgExcelSheetBuilder.buildByWorksheet(activeSheet).getAddressByRangeName(cRangeName_cellTotal_HT)
End Function

'7-Enregistrement cellules sp|fffd|cifiques
Public Sub cor_SetCells(sAddress_cellCoefGeneral As String, sAddress_cellTitle As String, sAddress_cellTotal_HT As String)

    If sAddress_cellCoefGeneral <> "" Then
        sgExcelSheetBuilder.buildByWorksheet(activeSheet).setRangeNameByAddress cRangeName_cellCoefGeneral, sAddress_cellCoefGeneral
    Else
        sgExcelSheetBuilder.buildByWorksheet(activeSheet).deleteRangeName cRangeName_cellCoefGeneral
    End If
    
    If sAddress_cellTitle <> "" Then
        sgExcelSheetBuilder.buildByWorksheet(activeSheet).setRangeNameByAddress cRangeName_cellTitle, sAddress_cellTitle
    Else
        sgExcelSheetBuilder.buildByWorksheet(activeSheet).deleteRangeName cRangeName_cellTitle
    End If
    
    If sAddress_cellTotal_HT <> "" Then
        sgExcelSheetBuilder.buildByWorksheet(activeSheet).setRangeNameByAddress cRangeName_cellTotal_HT, sAddress_cellTotal_HT
    Else
        sgExcelSheetBuilder.buildByWorksheet(activeSheet).deleteRangeName cRangeName_cellTotal_HT
    End If
    
End Sub

'8-Options
Public Function cor_AllowCoef() As Boolean
    cor_AllowCoef = sgExcelSheetBuilder.buildByWorksheet(activeSheet).getBooleanProperty(cPropertySpigaoAllowCoef)
End Function
Public Function cor_AllowPriceStrength() As Boolean
    cor_AllowPriceStrength = sgExcelSheetBuilder.buildByWorksheet(activeSheet).getBooleanProperty(cPropertySpigaoAllowPriceStrength)
End Function
Public Function cor_AllowCumul() As Boolean
    cor_AllowCumul = sgExcelSheetBuilder.buildByWorksheet(activeSheet).getBooleanProperty(cPropertySpigaoAllowCumul)
End Function
Public Function cor_AllowSubTotal() As Boolean
    cor_AllowSubTotal = sgExcelSheetBuilder.buildByWorksheet(activeSheet).getBooleanProperty(cPropertySpigaoAllowSubTotal)
End Function
Public Function cor_AllowRecap() As Boolean
    cor_AllowRecap = sgExcelSheetBuilder.buildByWorksheet(activeSheet).getBooleanProperty(cPropertySpigaoAllowRecap)
End Function
Public Function cor_AllowTotalOnChapter() As Boolean
    cor_AllowTotalOnChapter = sgExcelSheetBuilder.buildByWorksheet(activeSheet).getBooleanProperty(cPropertySpigaoAllowTotalOnChapter)
End Function
Public Function cor_AllowTotalGeneral() As Boolean
    cor_AllowTotalGeneral = sgExcelSheetBuilder.buildByWorksheet(activeSheet).getBooleanProperty(cPropertySpigaoAllowTotalGeneral)
End Function

'8-SetOptions
Public Sub cor_SetOptions(bAllowCoef As Boolean, bAllowPriceStrength As Boolean, bAllowCumul As Boolean, bAllowSubTotal As Boolean _
                        , bAllowRecap As Boolean, bAllowTotalOnChapter As Boolean, bAllowTotalGeneral As Boolean)
    sgExcelSheetBuilder.buildByWorksheet(activeSheet).SetBooleanProperty cPropertySpigaoAllowCoef, bAllowCoef
    sgExcelSheetBuilder.buildByWorksheet(activeSheet).SetBooleanProperty cPropertySpigaoAllowPriceStrength, bAllowPriceStrength
    sgExcelSheetBuilder.buildByWorksheet(activeSheet).SetBooleanProperty cPropertySpigaoAllowCumul, bAllowCumul
    sgExcelSheetBuilder.buildByWorksheet(activeSheet).SetBooleanProperty cPropertySpigaoAllowSubTotal, bAllowSubTotal
    sgExcelSheetBuilder.buildByWorksheet(activeSheet).SetBooleanProperty cPropertySpigaoAllowRecap, bAllowRecap
    sgExcelSheetBuilder.buildByWorksheet(activeSheet).SetBooleanProperty cPropertySpigaoAllowTotalOnChapter, bAllowTotalOnChapter
    sgExcelSheetBuilder.buildByWorksheet(activeSheet).SetBooleanProperty cPropertySpigaoAllowTotalGeneral, bAllowTotalGeneral

End Sub

'Lecture des param|fffd|tres de la feuille
Public Sub saveTemplate(colNumAuto As Integer, colId As Integer, colPriceNumber As Integer, colDesignation As Integer _
    , colUnit As Integer, colQuantity As Integer, colUnitPriceWithoutCoef As Integer, colCoef As Integer, colUnitPrice As Integer _
    , colTotalPrice As Integer, colPriceStrength As Integer, colMin As Integer, colMax As Integer, colReportMT As Integer _
    , cellCoef As String, cellTitle As String, cellTotal As String, rowStart As Long, rowTitle As Long _
    , isCoefAllowed As Boolean, isPriceStrengthallowed As Boolean, isCumulAllowed As Boolean, isSubTotalAllowed As Boolean _
    , isRecapAllowed As Boolean, isTotalOnChapterAllowed As Boolean, isTotalGeneralAllowed As Boolean _
    , rgTemplateForPriceItem As String, rgTemplateForPriceItemDuplicated As String, rgTemplateForSubTotalItem As String _
    , rgTemplateForChapterItem As String)
On Error GoTo fin

    Dim oEs As aExcelSheet
    
    Set oEs = sgExcelSheetBuilder.buildByWorksheet(activeSheet)
    If oEs Is Nothing Then Exit Sub
    



''
''    'Si au moins la colonne Id nomm|fffd|e=> on charge la conf depuis la feuille
''    If oESStudy.cellExists(cRangeName_colId) Then
''        pColNumAuto = oESStudy.getColByRangeName(cRangeName_colNumAuto)
''        pColId = oESStudy.getColByRangeName(cRangeName_colId)
''        pColPriceNumber = oESStudy.getColByRangeName(cRangeName_colPriceNumber)
''        pColDesignation = oESStudy.getColByRangeName(cRangeName_colDesignation)
''        pColUnit = oESStudy.getColByRangeName(cRangeName_colUnit)
''        pColQuantity = oESStudy.getColByRangeName(cRangeName_colQuantity)
''        pColUnitPriceWithoutCoef = oESStudy.getColByRangeName(cRangeName_colUnitPriceWithoutCoef)
''        pColCoef = oESStudy.getColByRangeName(cRangeName_colCoef)
''        pColUnitPrice = oESStudy.getColByRangeName(cRangeName_colUnitPrice)
''        pColTotalPrice = oESStudy.getColByRangeName(cRangeName_colTotalPrice)
''        pColPriceStrength = oESStudy.getColByRangeName(cRangeName_colPriceStrength)
''        pColReportMT = oESStudy.getColByRangeName(cRangeName_colReportMT)
''        pColMin = oESStudy.getColByRangeName(cRangeName_colMin)
''        If pColMin = 0 Then
''            pColMin = Min(pColId, pColPriceNumber, pColDesignation, pColUnit, pColQuantity, pColUnitPriceWithoutCoef, pColCoef, pColUnitPrice, pColTotalPrice, pColPriceStrength)
''        End If
''        pColMax = oESStudy.getColByRangeName(cRangeName_colMax)
''        If pColMax = 0 Then
''            pColMax = Max(pColId, pColPriceNumber, pColDesignation, pColUnit, pColQuantity, pColUnitPriceWithoutCoef, pColCoef, pColUnitPrice, pColTotalPrice, pColPriceStrength)
''        End If
''
''        pCellCoefGeneral_Address = oESStudy.getAddressByRangeName(cRangeName_cellCoefGeneral)
''        pCellTitle_Address = oESStudy.getAddressByRangeName(cRangeName_cellTitle)
''        pCellTotalHT_Address = oESStudy.getAddressByRangeName(cRangeName_cellTotal_HT)
''
''        pRowStart = oESStudy.getRowByRangeName(cRangeName_rowStart)
''        pRowTitle = oESStudy.getRowByRangeName(cRangeName_rowTitle)
''        If pRowStart = 0 Then MsgBox "Erreur de configuration du mod|fffd|le de devis : rowBaseStart=0"
''    End If
''
''    'Chargement des colonnes |fffd|tendues
''    Dim sName As Variant
''    For Each sName In oESStudy.Sheet.parent.Names
''        sShortName = sName.name
''        If InStr(sShortName, "!") > 0 Then sShortName = Mid(sShortName, InStr(sShortName, "!") + 1)
''        If (Left(LCase(sShortName), 6) = "col_pu" And LCase(sShortName) <> "col_pu") _
''            Or (Left(LCase(sShortName), 7) = "col_qt|fffd|" And LCase(sShortName) <> "col_qt|fffd|") Then
''            If pDicExtendedCols Is Nothing Then Set pDicExtendedCols = New Dictionary
''            pDicExtendedCols.add Mid(sShortName, 5), oESStudy.getColByRangeName(sShortName)
''        End If
''    Next
''
''
''    'Chargement des options sp|fffd|cifiques
''    pIsCoefAllowed = oESStudy.getBooleanProperty(cPropertySpigaoAllowCoef)
''    pIsPriceStrengthAllowed = oESStudy.getBooleanProperty(cPropertySpigaoAllowPriceStrength)
''    pIsCumulAllowed = oESStudy.getBooleanProperty(cPropertySpigaoAllowCumul)
''    pIsSubTotalAllowed = oESStudy.getBooleanProperty(cPropertySpigaoAllowSubTotal)
''    pIsRecapAllowed = oESStudy.getBooleanProperty(cPropertySpigaoAllowRecap)
''    pIsTotalOnChapterAllowed = oESStudy.getBooleanProperty(cPropertySpigaoAllowTotalOnChapter)
''    pIsTotalGeneralAllowed = oESStudy.getBooleanProperty(cPropertySpigaoAllowTotalGeneral)
''
''
''    'Chargement de la conf li|fffd|e |fffd| la feuille de style
''    If oEW.sheetExists(cStyleDefaultSheetName) Then
''    Set pESStyle = oEW.getSheetByName(cStyleDefaultSheetName)
''    If Not pESStyle Is Nothing Then
''        If pESStyle.cellExists(cRangeName_templateForPriceItem) Then
''            Set pRgTemplateForPriceItem = pESStyle.Sheet.range(cRangeName_templateForPriceItem)
''            If pESStyle.cellExists(cRangeName_templateForPriceItemDuplicated) Then
''                Set pRgTemplateForPriceItemDuplicated = pESStyle.Sheet.range(cRangeName_templateForPriceItemDuplicated)
''            Else
''                Set pRgTemplateForPriceItemDuplicated = pRgTemplateForPriceItem
''            End If
''        Else
''
''            Set pRgTemplateForPriceItem = Nothing
''        End If
''
''        If pESStyle.cellExists(cRangeName_templateForSubTotal) Then
''            Set pRgTemplateForSubTotalItem = pESStyle.Sheet.range(cRangeName_templateForSubTotal)
''        Else
''            Set pRgTemplateForSubTotalItem = Nothing
''        End If
''
''        If pESStyle.cellExists(cRangeName_templateForChapterItem) Then
''            Set pRgTemplateForChapterItem = pESStyle.Sheet.range(cRangeName_templateForChapterItem)
''        Else
''            Set pRgTemplateForChapterItem = Nothing
''        End If
''    End If
''    End If
''    'Recup du sousdetail
''    If oEW.sheetExists(cSheetName_templateForSubDetails) Then
''        Set pShTemplateForSubDetail = oEW.getSheetByName(cSheetName_templateForSubDetails)
''    End If
    
fin:
    If Err Then MsgBox "Erreur lors de la lecture des param|fffd|tres du mod|fffd|le d'|fffd|tude." & Err.Description

End Sub

Attribute VB_Name = "modConstantes"
Option Explicit

Public Const cPropertyFolderPath As String = "SpigaoFolderPath"
Public Const cPropertyCoeffActivated As String = "SpigaoCoeff"
Public Const cPropertyPriceStrengthActivated As String = "SpigaoPoidsPrix"
Public Const cPropertyRowsChapterHidden As String = "SpigaoRowsChapterHidden"
Public Const cPropertyRowsPriceHidden As String = "SpigaoRowsPriceHidden"
Public Const cPropertyRowsCommentHidden As String = "SpigaoRowsCommentHidden"
Public Const cPropertyRowsTaxeHidden As String = "SpigaoRowsTaxeHidden"
Public Const cPropertyRowsOtherHidden As String = "SpigaoRowsOtherHidden"
Public Const cPropertyHasDoublon As String = "SpigaoDoublons"
Public Const cPropertyIsSpigaoBoq As String = "SpigaoIsBoq"
Public Const cPropertySpigaoProjectId As String = "SpigaoProjectId"
Public Const cPropertySpigaoDealId As String = "SpigaoDealId"
Public Const cPropertySpigaoDieId As String = "SpigaoDieId"
Public Const cPropertySpigaoDieName As String = "SpigaoDieName"
Public Const cPropertySpigaoCumulMode As String = "SpigaoCumulMode"
Public Const cPropertyValueIsBaseSheet As String = "SpigaoBase"
Public Const cPropertyValueIsCumulsheet As String = "SpigaoCumul"
Public Const cPropertyValueIsSpecificitiesSheet As String = "SpigaoSpecificites"
Public Const cPropertyNameTypeSheet As String = "SpigaoTypeSheet"
Public Const cPropertyOldSpigaoExcel_NumDossier = "NumDossier"
Public Const cPropertyOldSpigaoExcel_StdVersion = "StdVersion"
Public Const cPropertySpigaoAllowCoef As String = "SpigaoIsCoefAllowed"
Public Const cPropertySpigaoAllowPriceStrength As String = "SpigaoIsPriceStrengthAllowed"
Public Const cPropertySpigaoAllowCumul As String = "SpigaoIsCumulAllowed"
Public Const cPropertySpigaoAllowSubTotal As String = "SpigaoIsSubTotalAllowed"
Public Const cPropertySpigaoAllowGenericSubTotal As String = "SpigaoIsGenericSubTotalAllowed"
Public Const cPropertySpigaoAllowRecap As String = "SpigaoIsRecapAllowed"
Public Const cPropertySpigaoAllowTotalOnChapter As String = "SpigaoIsTotalOnChapterAllowed"
Public Const cPropertySpigaoAllowTotalGeneral As String = "SpigaoIsTotalGeneralAllowed"
Public Const cPropertySpigaoNbDecimalsForQuantity As String = "SpigaoNbDecimalsForQuantity"
Public Const cPropertySpigaoNbDecimalsForUnitPrice As String = "SpigaoNbDecimalsForUnitPrice"


Public Const cRangeName_colNumAuto As String = "col_NumAuto"
Public Const cRangeName_colNumAutoPrice As String = "col_NumAutoPrice"
Public Const cRangeName_colId As String = "col_ID"
Public Const cRangeName_colPriceNumber As String = "col_PriceNumber"
Public Const cRangeName_colDesignation As String = "col_Designation"
Public Const cRangeName_colUnit As String = "col_Unit"
Public Const cRangeName_colQuantity As String = "col_Quantity"
Public Const cRangeName_colUnitPrice As String = "col_UnitPrice"
Public Const cRangeName_colUnitPriceWithoutCoef As String = "col_UnitPriceWithoutCoef"
Public Const cRangeName_colTotalPrice As String = "col_TotalPrice"
Public Const cRangeName_colPriceStrength As String = "col_PriceStrength"
Public Const cRangeName_colCoef As String = "col_Coef"
Public Const cRangeName_colMax As String = "col_Max"
Public Const cRangeName_colMin As String = "col_Min"
Public Const cRangeName_colReportMT As String = "col_report_MT"
Public Const cRangeName_colRefId As String = "col_RefId"

Public Const cRangeName_cellTitle As String = "cell_Title"
Public Const cRangeName_cellCoefGeneral As String = "cell_CoefGeneral"
Public Const cRangeName_cellTotal_HT As String = "cell_Total_HT"

Public Const cRangeName_rowStart As String = "row_Start"
Public Const cRangeName_rowTitle As String = "row_Title"
Public Const cRangeName_rowRuleImportant As String = "rowImportantRule"


Public Const cRangeName_templateForPriceItem As String = "Spigao_template_for_priceitem"
Public Const cRangeName_templateForPriceItemDuplicated As String = "Spigao_template_for_priceitem_duplicated"
Public Const cRangeName_templateForSubTotal As String = "Spigao_template_for_subtotal"
Public Const cSheetName_templateForSubDetails As String = "SpigaoSDTemplate"
Public Const cRangeName_templateForChapterItem As String = "Spigao_template_for_chapter"
Public Const cRangeName_SubDetailsNumAuto As String = "Spigao_SsDetail_NumAuto_Cell_Address"

Public Const cStudyFileNameTemplate As String = "Etude"
Public Const cStyleDefaultSheetName As String = "Styles"


Public Const cMaxLevelOfGroupRows As Integer = 8 'Nb max de niveau de regroupement dans Excel
Public Const cMinWidthForQuantities As Integer = 12
Public Const cMinWidthForPrices As Integer = 14

Public Const cSpigaoHookSubDetail_After As String = "SpigaoStudySubDetail_After"
Attribute VB_Name = "modConstantesPlanning"
Option Explicit

Public Const cPropertyIsSpigaoPlanning As String = "SpigaoIsPlanning"
Public Const cPropertyIsSpigaoPlanningStyle As String = "SpigaoIsPlanningStyle"
Public Const cPropertySpigaoPlanningName As String = "SpigaoPlanningName"
Public Const cPropertySpigaoPlanningInsertBefore As String = "SpigaoPlanningInsertBefore"
Public Const cRangeNameSpigaoPlRowTemplate As String = "SpigaoPlRowTemplate"
Public Const cRangeNameSpigaoPlanningTitleRow As String = "SpigaoPlanningTitleRow"

'Listing des champs possibles et de leur nom |fffd|quivalent dans rangeName
Public Const cSpigaoPlDataSubject As String = "SpigaoPl_DataSubject"
Public Const cSpigaoPlDataId As String = "SpigaoPl_DataId"
Public Const cSpigaoPlDataReference As String = "SpigaoPl_DataReference"
Public Const cSpigaoPlDataContractorShortName As String = "SpigaoPl_DataContractorShortName"
Public Const cSpigaoPlDataContractorName As String = "SpigaoPl_DataContractorName"
Public Const cSpigaoPlDataContractorAddressMail As String = "SpigaoPl_DataContractorAddressMail"
Public Const cSpigaoPlDataContractorAddressStreet1 As String = "SpigaoPl_DataContractorAddressStreet1"
Public Const cSpigaoPlDataContractorAddressStreet2 As String = "SpigaoPl_DataContractorAddressStreet2"
Public Const cSpigaoPlDataContractorAddressPostalCode As String = "SpigaoPl_DataContractorAddressPostalCode"
Public Const cSpigaoPlDataContractorAddressTown As String = "SpigaoPl_DataContractorAddressTown"
Public Const cSpigaoPlDataContractorAddressCountry As String = "SpigaoPl_DataContractorAddressCountry"
Public Const cSpigaoPlDataContractorAddressCedex As String = "SpigaoPl_DataContractorAddressCedex"
Public Const cSpigaoPlDataContractorRegistrationNumber As String = "SpigaoPl_DataContractorRegistrationNumber"
Public Const cSpigaoPlDataSupervisorShortName As String = "SpigaoPl_DataSupervisorShortName"
Public Const cSpigaoPlDataSupervisorName As String = "SpigaoPl_DataSupervisorName"
Public Const cSpigaoPlDataSupervisorAddressMail As String = "SpigaoPl_DataSupervisorAddressMail"
Public Const cSpigaoPlDataSupervisorAddressStreet1 As String = "SpigaoPl_DataSupervisorAddressStreet1"
Public Const cSpigaoPlDataSupervisorAddressStreet2 As String = "SpigaoPl_DataSupervisorAddressStreet2"
Public Const cSpigaoPlDataSupervisorAddressPostalCode As String = "SpigaoPl_DataSupervisorAddressPostalCode"
Public Const cSpigaoPlDataSupervisorAddressTown As String = "SpigaoPl_DataSupervisorAddressTown"
Public Const cSpigaoPlDataSupervisorAddressCountry As String = "SpigaoPl_DataSupervisorAddressCountry"
Public Const cSpigaoPlDataSupervisorAddressCedex As String = "SpigaoPl_DataSupervisorAddressCedex"
Public Const cSpigaoPlDataSupervisorRegistrationNumber As String = "SpigaoPl_DataSupervisorRegistrationNumber"
Public Const cSpigaoPlDataDeadline As String = "SpigaoPl_DataDeadline"
Public Const cSpigaoPlDataDescription As String = "SpigaoPl_DataDescription"
Public Const cSpigaoPlDataDetailAffaireLink As String = "SpigaoPl_DataDetailAffaireLink"
Public Const cSpigaoPlDataPublishedOn As String = "SpigaoPl_DataPublishedOn"
Public Const cSpigaoPlDataTerritories As String = "SpigaoPl_DataTerritories"
Public Const cSpigaoPlDataActivities As String = "SpigaoPl_DataActivities"
Public Const cSpigaoPlDataDceLink As String = "SpigaoPl_DataDceLink"
Public Const cSpigaoPlDataDieLink As String = "SpigaoPl_DataDieLink"
Public Const cSpigaoPlDataUserName As String = "SpigaoPl_DataUserName"
Public Const cSpigaoPlDataGroupName As String = "SpigaoPl_DataGroupName"

Private pDicFields As New Dictionary

'Dictionnaire de tous les champs mappables pour un deal.
Public Function dicPlanningFields() As Dictionary

    'Initialisation tardive des champs possibles
    If pDicFields.count = 0 Then
        pDicFields.add cSpigaoPlDataSubject, cSpigaoPlDataSubject
        pDicFields.add cSpigaoPlDataId, cSpigaoPlDataId
        pDicFields.add cSpigaoPlDataReference, cSpigaoPlDataReference
        pDicFields.add cSpigaoPlDataContractorShortName, cSpigaoPlDataContractorShortName
        pDicFields.add cSpigaoPlDataContractorName, cSpigaoPlDataContractorName
        pDicFields.add cSpigaoPlDataContractorAddressMail, cSpigaoPlDataContractorAddressMail
        pDicFields.add cSpigaoPlDataContractorAddressStreet1, cSpigaoPlDataContractorAddressStreet1
        pDicFields.add cSpigaoPlDataContractorAddressStreet2, cSpigaoPlDataContractorAddressStreet2
        pDicFields.add cSpigaoPlDataContractorAddressPostalCode, cSpigaoPlDataContractorAddressPostalCode
        pDicFields.add cSpigaoPlDataContractorAddressTown, cSpigaoPlDataContractorAddressTown
        pDicFields.add cSpigaoPlDataContractorAddressCountry, cSpigaoPlDataContractorAddressCountry
        pDicFields.add cSpigaoPlDataContractorAddressCedex, cSpigaoPlDataContractorAddressCedex
        pDicFields.add cSpigaoPlDataContractorRegistrationNumber, cSpigaoPlDataContractorRegistrationNumber
        pDicFields.add cSpigaoPlDataSupervisorShortName, cSpigaoPlDataSupervisorShortName
        pDicFields.add cSpigaoPlDataSupervisorName, cSpigaoPlDataSupervisorName
        pDicFields.add cSpigaoPlDataSupervisorAddressMail, cSpigaoPlDataSupervisorAddressMail
        pDicFields.add cSpigaoPlDataSupervisorAddressStreet1, cSpigaoPlDataSupervisorAddressStreet1
        pDicFields.add cSpigaoPlDataSupervisorAddressStreet2, cSpigaoPlDataSupervisorAddressStreet2
        pDicFields.add cSpigaoPlDataSupervisorAddressPostalCode, cSpigaoPlDataSupervisorAddressPostalCode
        pDicFields.add cSpigaoPlDataSupervisorAddressTown, cSpigaoPlDataSupervisorAddressTown
        pDicFields.add cSpigaoPlDataSupervisorAddressCountry, cSpigaoPlDataSupervisorAddressCountry
        pDicFields.add cSpigaoPlDataSupervisorAddressCedex, cSpigaoPlDataSupervisorAddressCedex
        pDicFields.add cSpigaoPlDataSupervisorRegistrationNumber, cSpigaoPlDataSupervisorRegistrationNumber
        pDicFields.add cSpigaoPlDataDeadline, cSpigaoPlDataDeadline
        pDicFields.add cSpigaoPlDataDescription, cSpigaoPlDataDescription
        pDicFields.add cSpigaoPlDataDetailAffaireLink, cSpigaoPlDataDetailAffaireLink
        pDicFields.add cSpigaoPlDataPublishedOn, cSpigaoPlDataPublishedOn
        pDicFields.add cSpigaoPlDataTerritories, cSpigaoPlDataTerritories
        pDicFields.add cSpigaoPlDataActivities, cSpigaoPlDataActivities
        pDicFields.add cSpigaoPlDataDceLink, cSpigaoPlDataDceLink
        pDicFields.add cSpigaoPlDataDieLink, cSpigaoPlDataDieLink
        pDicFields.add cSpigaoPlDataUserName, cSpigaoPlDataUserName
        pDicFields.add cSpigaoPlDataGroupName, cSpigaoPlDataGroupName
    End If
    
    Set dicPlanningFields = pDicFields
End Function

Attribute VB_Name = "modConversions"
Option Explicit

Private pDecimalSeparator As String

Private Function getDecimalSeparator() As String
    If pDecimalSeparator = "" Then
        If IsNull(CDbl("1,1")) Then
            pDecimalSeparator = "."
        Else
            pDecimalSeparator = ","
        End If
    End If
    getDecimalSeparator = pDecimalSeparator
End Function
'Conversion en double en tenant compte des s|fffd|parateurs d|fffd|cimaux r|fffd|gionaux
Public Function cvStrToDbl(sValue As String) As Variant
On Error GoTo fin
    Dim sDecimalSep As String

    sDecimalSep = getDecimalSeparator
    sValue = Trim(sValue)

    If InStr(sValue, ",") > 0 And InStr(sValue, ".") > 0 Then 'Format anglais avec s|fffd|parateur millier en virgule
            sValue = Replace(sValue, ",", "")
            sValue = Replace(sValue, ".", sDecimalSep)
    End If
    
    If sDecimalSep = "," Then sValue = Replace(sValue, ".", ",")
    If sDecimalSep = "." Then sValue = Replace(sValue, ",", ".")
    
    cvStrToDbl = CDbl(sValue)

fin:
    If Err Then cvStrToDbl = Null
End Function
Attribute VB_Name = "modEnums"
Option Explicit

Public Enum eWorkItemType
    chapter = 0
    comment = 1
    Price = 2
    Subtotal = 3
    title = 4
    HT = 5
    TTC = 6
    REC = 7
    MT = 8
    Tva = 9
    SubTotalForChapter = 10
End Enum


Public Enum eStudySheetMode
    None = 0
    Base = 1
    Cumul = 2
End Enum

Public Enum eStudyCumulState
    NotCreated = 0
    Enabled = 1
    Disabled = 2
End Enum

'Utilis|fffd| par classe aspigaoformula
Public Enum eDataType
    Quantity = 0
    UnitPrice = 1
    TotalPrice = 2
    Extended = 3
    Unit = 4
End Enum

Public Enum eSpigaoStyle
    comment = 0
    Titre1 = 1
    Titre2 = 2
    Titre3 = 3
    titrep = 4
    Doublon = 5
    PM = 6
    PF = 7
    TrackModif = 8
    TrackAjout = 9
    Normal = 10
    Subtotal = 11
    Recap = 12
    TotalGeneral = 13
    CartoucheImportant = 14
    CartoucheComplement = 15
    CartoucheVigilance = 16
    Subtotal2 = 17
    Subtotal3 = 18
    Tva = 19
End Enum

Public Enum eImportMode
    None = 0
    DetTxt = 1
    XlsOld = 2
    XlsOri = 3
End Enum
Attribute VB_Name = "modExtensions"
Option Explicit

'G|fffd|n|fffd|rateur fichier progap
Public Sub genProgapwinFile(oStudy As cStudy)
On Error GoTo fin

Dim oStream As aStream
Dim myResult As Object
Dim oProject As Object
Dim t() As Variant
Dim myworkitems As Object
Dim iCpt As Long
Dim i As Long
Dim mywk As Object
Dim oWk As cWkItem
Dim sPathFile As String
Dim sPBO As String
Dim myWkParent As Object
Dim oWkParent As cWkItem
    'Conf
    cnfIulmForProgapwin
    
    'Initialisation du fichier
    Set oStream = New aStream
    
    Set myResult = sgSpigao.Processing.UI.ImportProjectFromDisk(oStudy.projectId)
    If myResult.ExecResult <> 0 Then Exit Sub
    
    'R|fffd|cup|fffd|ration du project
    Set oProject = myResult.project
    
    'Ligne de titre
    t = Array("NUM_LIG", "TYPE", "TOP_PPM", "NIVEAU", "NO_PBO", "NO_PRIX", "LIBELLE", "UNITE", "QUANTITE")
    oStream.writeLine t, vbTab
                
    'Parcours de la liste et alimentation du fichier
    Set myworkitems = oProject.BillOfQuantity.GetFlatWorkItemList(0)
    iCpt = 1
    For i = 0 To myworkitems.count - 1
        Set mywk = myworkitems.item(i)
        Set oWk = sgWkItemBuilder.buildByObject(mywk)
        
        Select Case oWk.WkType
            Case eWorkItemType.Price
                If oWk.IsDuplicated Then
                    Set myWkParent = oProject.BillOfQuantity.FindWorkItemById(oWk.referenceId)
                    Set oWkParent = sgWkItemBuilder.buildByObject(myWkParent)
                    sPBO = oWkParent.IdDetTxt
                Else
                    sPBO = oWk.IdDetTxt
                End If
                t = Array(CStr(iCpt), "P", IIf(oWk.IsPM, "O", ""), "", sPBO, oWk.IdDetTxt, cleanDataToTxt(oWk.designation), oWk.PU.value, oWk.QT.value)
                oStream.writeLine t, vbTab
                iCpt = iCpt + 1
            Case eWorkItemType.chapter
                t = Array(CStr(iCpt), "L", "", CStr(oWk.Level), "", "", cleanDataToTxt(oWk.designation), "", "")
                oStream.writeLine t, vbTab
                iCpt = iCpt + 1
            Case eWorkItemType.comment
                t = Array(CStr(iCpt), "L", "", CStr(oWk.Level), "", "", cleanDataToTxt(oWk.designation), "", "")
                oStream.writeLine t, vbTab
                iCpt = iCpt + 1
        End Select
    Next
    
    'Enregistrement
    sPathFile = oStudy.expTxtFilePath
    oStream.saveAs sPathFile
    
    'Message utilisateur
    formConfirm.ShowMsg "G|fffd|n|fffd|ration du fichier Progapwin v5", "Le fichier d'import pour Progapwin v5 a |fffd|t|fffd| g|fffd|n|fffd|r|fffd| |fffd| l'emplacement suivant", sPathFile, False, Nothing
    
    
fin:
    sgSpigao.resetCnf
    If Err Then MsgBox "Erreur lors de la g|fffd|n|fffd|ration du fichier Progapwin v5 : " & Err.Description
End Sub

'G|fffd|n|fffd|rateur fichier progap
Public Sub genOnayaFacturationFile(oStudy As cStudy)
On Error GoTo fin

Dim oStream As aStream
Dim myResult As Object
Dim oProject As Object
Dim t() As Variant
Dim myworkitems As Object
Dim iCpt As Long
Dim i As Long
Dim mywk As Object
Dim oWk As cWkItem
Dim sPathFile As String
Dim myWkParent As Object
Dim oWkParent As cWkItem
Dim myimporter As Object

    'Conf
    cnfIulmForOnayaFacturation
    
    'Initialisation du fichier
    Set oStream = New aStream
    
    'R|fffd|cup|fffd|ration du project
    Set oProject = sgSpigao.Processing.LoadProject(oStudy.projectId)
    Set myimporter = sgSpigao.Processing.ImportProject(oProject)
    myimporter.Format
    myimporter.Done
    
    'Ligne de titre
    t = Array("O_TIT", "T", "CODE", "TEXTE_COURT", "", "", "")
    oStream.writeLine t, vbTab
    
    t = Array("O_OUV", "O", "CODE", "TEXTE_COURT+TEXTE_COMMERCIAL+TEXTE_TECHNIQUE", "UNITE", "QUANTITE", "PVI")
    oStream.writeLine t, vbTab
    
    t = Array("O_TXTLBR", "L", "TXTLIBRE", "", "", "", "")
    oStream.writeLine t, vbTab
    
    t = Array("O_ETU", "E", "", "", "", "", "")
    oStream.writeLine t, vbTab
    
    t = Array("0", "E", "", "", "", "", "")
    oStream.writeLine t, vbTab
                
    'Parcours de la liste et alimentation du fichier
    Set myworkitems = oProject.BillOfQuantity.GetFlatWorkItemList(0)
    iCpt = 1
    For i = 0 To myworkitems.count - 1
        Set mywk = myworkitems.item(i)
        Set oWk = sgWkItemBuilder.buildByObject(mywk)
        
        Select Case oWk.WkType
            Case eWorkItemType.Price
                t = Array(CStr(oWk.Level), "O", oWk.PriceNumber, cleanDataToTxt(oWk.designation), cleanDataToTxt(oWk.Unit), Replace(oWk.QT.value, ",", "."), Replace(oWk.PU.value, ",", "."))
                oStream.writeLine t, vbTab
                iCpt = iCpt + 1
            Case eWorkItemType.chapter
                t = Array(CStr(oWk.Level), "T", oWk.PriceNumber, cleanDataToTxt(oWk.designation), "", "", "")
                oStream.writeLine t, vbTab
                iCpt = iCpt + 1
            Case eWorkItemType.comment
                t = Array(CStr(oWk.Level), "L", cleanDataToTxt(oWk.designation), "", "", "", "")
                oStream.writeLine t, vbTab
                iCpt = iCpt + 1
        End Select
    Next
    
    'Enregistrement
    sPathFile = oStudy.expTxtFilePath
    oStream.saveAs sPathFile
    
    'Message utilisateur
    formConfirm.ShowMsg "G|fffd|n|fffd|ration du fichier Onaya Facturation", "Le fichier d'import pour Onaya Facturation a |fffd|t|fffd| g|fffd|n|fffd|r|fffd| |fffd| l'emplacement suivant", sPathFile, False, Nothing
    
    
fin:
    sgSpigao.resetCnf
    If Err Then MsgBox "Erreur lors de la g|fffd|n|fffd|ration du fichier Onaya Facturation : " & Err.Description
End Sub

'G|fffd|n|fffd|rateur fichier QDV6
Public Sub genQDV6File(oStudy As cStudy)
On Error GoTo fin

Const cQdvLevel = 1
Const cQdvPriceNumber = 2
Const cQdvDesignation = 3
Const cQdvUnit = 4
Const cQdvQuantity = 5

Dim oEw As aExcelWorkBook
Dim oEs As aExcelSheet
Dim myResult As Object
Dim oProject As Object
Dim myworkitems As Object
Dim i As Long
Dim mywk As Object
Dim oWk As cWkItem
Dim sPathFile As String
Dim bDelete As Boolean
Dim irow As Long
Dim iLevel As Integer

    'Conf
    cnfIulmForQDV6
    
    sgExcelApplication.MuteOn
    
    'Initialisation du fichier
    Set oEw = sgExcelWorkbookBuilder.createByTemplate("")
    If Not oEw Is Nothing Then
        'Todo v|fffd|rifier si multi-colonne
        
        'On ne garde qu'une seule feuille
        For Each oEs In oEw.Sheets
            If bDelete Then
                oEs.delete
            Else
                bDelete = True
            End If
        Next
        Set oEs = oEw.getSheetByIndex(1)
    
        
        'chargement
        Set myResult = sgSpigao.Processing.UI.ImportProjectFromDisk(oStudy.projectId)
        If myResult.ExecResult <> 0 Then Exit Sub
        
        'R|fffd|cup|fffd|ration du project
        Set oProject = myResult.project
        
        'Nom de la feuille
        oEs.sheetName = oStudy.projectName
        
        'D|fffd|finition de la taille des colonnes
        With oEs.Sheet
            .Cells(1, cQdvLevel).ColumnWidth = 12
            .Cells(1, cQdvPriceNumber).ColumnWidth = 12
            .Cells(1, cQdvDesignation).ColumnWidth = 50
            .Cells(1, cQdvUnit).ColumnWidth = 12
            .Cells(1, cQdvQuantity).ColumnWidth = 12
        End With
        
                    
        'Parcours de la liste et alimentation du fichier
        Set myworkitems = oProject.BillOfQuantity.GetFlatWorkItemList(0)
        irow = 1
        For i = 0 To myworkitems.count - 1
            Set mywk = myworkitems.item(i)
            Set oWk = sgWkItemBuilder.buildByObject(mywk)
            iLevel = oWk.Level - 1
            Select Case oWk.WkType
                Case eWorkItemType.Price
                    oEs.writeToCellByCoords irow, cQdvLevel, CStr(iLevel)
                    oEs.writeToCellByCoords irow, cQdvPriceNumber, "'" & oWk.IdDetTxt
                    oEs.writeToCellByCoords irow, cQdvDesignation, cleanDataToTxt(oWk.designation)
                    oEs.writeToCellByCoords irow, cQdvUnit, CStr(oWk.Unit)
                    oEs.writeToCellByCoords irow, cQdvQuantity, oWk.QT.toCell
    
                    irow = irow + 1
                Case eWorkItemType.chapter
                    oEs.writeToCellByCoords irow, cQdvLevel, CStr(iLevel)
                    oEs.writeToCellByCoords irow, cQdvPriceNumber, ""
                    oEs.writeToCellByCoords irow, cQdvDesignation, cleanDataToTxt(IIf(oWk.PriceNumber <> "", oWk.PriceNumber & " ", "") & oWk.designation)
                    irow = irow + 1
                Case eWorkItemType.comment
                    irow = irow + 1 'on ajoute une ligne vide avant chaque commentaire
                    oEs.writeToCellByCoords irow, cQdvLevel, CStr(iLevel)
                    oEs.writeToCellByCoords irow, cQdvPriceNumber, ""
                    oEs.writeToCellByCoords irow, cQdvDesignation, cleanDataToTxt(IIf(oWk.PriceNumber <> "", oWk.PriceNumber & " ", "") & oWk.designation)
                    irow = irow + 1
            End Select
            
        Next
        
        'Enregistrement
        sPathFile = Left(oStudy.oldXlsFilePath, InStrRev(oStudy.oldXlsFilePath, ".")) & "QDS"
        oEw.saveAs sPathFile, xlExcel5
        oEw.closeWorkbook
        
        'Message utilisateur
        formConfirm.ShowMsg "G|fffd|n|fffd|ration du fichier QDV6", "Le fichier d'import pour QDV6 a |fffd|t|fffd| g|fffd|n|fffd|r|fffd| |fffd| l'emplacement suivant", sPathFile, False, Nothing
    End If
    
fin:
    sgSpigao.resetCnf
    sgExcelApplication.MuteOff
    If Err Then MsgBox "Erreur lors de la g|fffd|n|fffd|ration du fichier Progapwin v5 : " & Err.Description
End Sub

Public Sub genAmiprixFile(oStudy As cStudy)
On Error GoTo fin

Dim oStream As aStream
Dim myResult As Object
Dim oProject As Object
Dim t() As Variant
Dim myworkitems As Object
Dim iCpt As Long
Dim i As Long
Dim mywk As Object
Dim oWk As cWkItem
Dim sPathFile As String
Dim sPBO As String
Dim sUnit As String

Dim myWkParent As Object
Dim oWkParent As cWkItem
    
    'Conf
    cnfIulmForAmiprix
    
    'Initialisation du fichier
    Set oStream = New aStream
    
    Set myResult = sgSpigao.Processing.UI.ImportProjectFromDisk(oStudy.projectId)
    If myResult.ExecResult <> 0 Then Exit Sub
    
    'R|fffd|cup|fffd|ration du project
    Set oProject = myResult.project
    
    'Ligne de titre
    t = Array("NUM_LIG", "TYPE", "TOP_PPM", "NIVEAU", "NO_PBO", "NO_PRIX", "LIBELLE", "UNITE", "QUANTITE")
    oStream.writeLine t, vbTab
                
    'Chargement du r|fffd|f|fffd|rentiel d'unit|fffd|
    modUnit.loadReferentiel modExtensions.getReferentielUniteForamiprix
    Set modUnit.initialMap = modExtensions.getInitialMappingForAmiprix
    
    'Parcours de la liste et alimentation du fichier
    Set myworkitems = oProject.BillOfQuantity.GetFlatWorkItemList(0)
    iCpt = 1
    For i = 0 To myworkitems.count - 1
        Set mywk = myworkitems.item(i)
        Set oWk = sgWkItemBuilder.buildByObject(mywk)
        
        Select Case oWk.WkType
            Case eWorkItemType.Price
                If oWk.IsDuplicated Then
                    Set myWkParent = oProject.BillOfQuantity.FindWorkItemById(oWk.referenceId)
                    Set oWkParent = sgWkItemBuilder.buildByObject(myWkParent)
                    sPBO = oWkParent.IdDetTxt
                Else
                    sPBO = oWk.IdDetTxt
                End If
                
                sUnit = modUnit.getUnit(oWk)
                t = Array(CStr(iCpt), "P", IIf(oWk.IsPM, "O", ""), "", sPBO, oWk.IdDetTxt, cleanDataToTxt(oWk.designation), sUnit, oWk.QT.value)
                oStream.writeLine t, vbTab
                iCpt = iCpt + 1
            Case eWorkItemType.chapter
                t = Array(CStr(iCpt), "L", "", CStr(oWk.Level), "", "", cleanDataToTxt(oWk.designation), "", "")
                oStream.writeLine t, vbTab
                iCpt = iCpt + 1
            Case eWorkItemType.comment
                t = Array(CStr(iCpt), "L", "", CStr(oWk.Level), "", "", cleanDataToTxt(oWk.designation), "", "")
                oStream.writeLine t, vbTab
                iCpt = iCpt + 1
        End Select
    Next
    
    'Enregistrement
    sPathFile = oStudy.expTxtFilePath
    oStream.saveAs sPathFile
    
    'Ajout d'un det.txt vide si besoin (pr|fffd|-requis amiprix)
    If Not sgFileSystem.FileExists(oStudy.detTxtFilePath) Then
        'cr|fffd|ation du det.txt
        Set oStream = New aStream
        oStream.saveAs oStudy.detTxtFilePath
    End If
    
    'Message utilisateur
    formConfirm.ShowMsg "G|fffd|n|fffd|ration du fichier Amiprix", "Le fichier d'import pour Amiprix a |fffd|t|fffd| g|fffd|n|fffd|r|fffd| |fffd| l'emplacement suivant", sPathFile, False, Nothing
    
    
fin:
    sgSpigao.resetCnf
    If Err Then MsgBox "Erreur lors de la g|fffd|n|fffd|ration du fichier Amiprix : " & Err.Description
End Sub
Private Sub cnfIulmForQDV6()
    With sgSpigao.Loader.Processing.GlobalSettings
        .ChapterImportMode = 0
        .ChapterMandatory = True
        .CommentImportMode = 0
        .DesignationMaxLength = 255
        .IdentAllowAlpha = True
        .IdentMaxLength = 0
        .MaxLevel = 6
        .MaxLevelAction = 1
        .MaxLineCount = 0
        .PriceNumberAllowAlpha = True
        .PriceNumberForComment = ""
        .PriceNumberMandatory = False
        .PriceNumberMaxLength = 0
        .PriceNumberRenumberingScope = 0
        .QuantityDecimals = 0
        .QuantityDefaultValue = 0
        .QuantityMandatory = False
        .UnitAllowedChars = ""
        .UnitDefaultValue = "U"
        .UnitMaxLength = 0
        .UnitPriceAllowLinks = 0
        .UnitPriceAllowNegative = True
        .UnitPriceDecimals = 0
        .UnitReplaceString = ""
    End With
End Sub

Private Sub cnfIulmForProgapwin()
    With sgSpigao.Loader.Processing.GlobalSettings
        .ChapterImportMode = 0
        .ChapterMandatory = True
        .CommentImportMode = 0
        .DesignationMaxLength = 4096
        .IdentAllowAlpha = True
        .IdentMaxLength = 10
        .MaxLevel = 4
        .MaxLevelAction = 0
        .MaxLineCount = 0
        .PriceNumberAllowAlpha = True
        .PriceNumberForComment = ""
        .PriceNumberMandatory = False
        .PriceNumberMaxLength = 10
        .PriceNumberRenumberingScope = 0
        .QuantityDecimals = 3
        .QuantityDefaultValue = 0
        .QuantityMandatory = False
        .UnitAllowedChars = ""
        .UnitDefaultValue = "U"
        .UnitMaxLength = 5
        .UnitPriceAllowLinks = 0
        .UnitPriceAllowNegative = True
        .UnitPriceDecimals = 2
        .UnitReplaceString = ""
    End With
End Sub
Private Sub cnfIulmForAmiprix()
    With sgSpigao.Loader.Processing.GlobalSettings
        .ChapterImportMode = 0
        .ChapterMandatory = True
        .CommentImportMode = 0
        .DesignationMaxLength = 255
        .IdentAllowAlpha = True
        .IdentMaxLength = 0
        .MaxLevel = 0
        .MaxLevelAction = 0
        .MaxLineCount = 0
        .PriceNumberAllowAlpha = True
        .PriceNumberForComment = ""
        .PriceNumberMandatory = False
        .PriceNumberMaxLength = 0
        .PriceNumberRenumberingScope = 0
        .QuantityDecimals = 3
        .QuantityDefaultValue = 0
        .QuantityMandatory = False
        .UnitAllowedChars = ""
        .UnitDefaultValue = "U"
        .UnitMaxLength = 0
        .UnitPriceAllowLinks = 0
        .UnitPriceAllowNegative = True
        .UnitPriceDecimals = 2
        .UnitReplaceString = ""
    End With
End Sub
Private Function cleanDataToTxt(s As String) As String

    cleanDataToTxt = Replace(s, vbCrLf, " ")
    cleanDataToTxt = Replace(cleanDataToTxt, vbCr, " ")
    cleanDataToTxt = Replace(cleanDataToTxt, vbLf, " ")
    cleanDataToTxt = Replace(cleanDataToTxt, vbTab, " ")
    cleanDataToTxt = Replace(cleanDataToTxt, "  ", " ")
    
End Function


Private Sub cnfIulmForOnayaFacturation()
    With sgSpigao.Loader.Processing.GlobalSettings
        .ChapterImportMode = 0
        .ChapterMandatory = True
        .CommentImportMode = 0
        .DesignationMaxLength = 255
        .IdentAllowAlpha = True
        .IdentMaxLength = 10
        .MaxLevel = 9
        .MaxLevelAction = 0
        .MaxLineCount = 0
        .PriceNumberAllowAlpha = True
        .PriceNumberForComment = ""
        .PriceNumberMandatory = False
        .PriceNumberMaxLength = 10
        .PriceNumberRenumberingScope = 0
        .QuantityDecimals = 3
        .QuantityDefaultValue = 0
        .QuantityMandatory = False
        .UnitAllowedChars = ""
        .UnitDefaultValue = "U"
        .UnitMaxLength = 8
        .UnitPriceAllowLinks = 0
        .UnitPriceAllowNegative = True
        .UnitPriceDecimals = 2
        .UnitReplaceString = ""
    End With
End Sub


Public Function getReferentielUniteForamiprix() As String

getReferentielUniteForamiprix = "FT|FORFAIT|5;;M2|METRE CARRE|5;;M3|METRE CUBE|5;;ML|METRE LINEAIRE|5;;PM|PRIX POUR MEMOIRE|5;;T|TONNE|5;;U|UNITE|5;;cm|CENTIMETRE|4;;H|HEURE|4" _
                                & "J|JOURNEE|4;;KG|KILOGRAMME|4;;%|POURCENTAGE|4;;DM|DECIMETRE|3;;DM/M|DECIMETRE / METRE|3;;DM/ML|DECIMETRE / METRE LINEAIRE|3;;DJ|DEMI-JOURNEE|3;;EN|ENSEMBLE|3;;HA|HECTARE|3;;KM|KILOMETRE|3" _
                                & "KW|KILOWATT|3;;KW/H|KILOWATT / HEURE|3;;L|LITRE|3;;M2/AN|METRE CARRE / AN|3;;M/J|METRE LINEAIRE / JOUR|3;;MV|MOINS-VALUE|3;;N|NUIT|3;;U/J|UNITE PAR JOUR|3;;EL|ELEMENT|2;;GR|GRAMME|2" _
                                & "HL|HECTOLITRE|2;;KG/HA|KILOGRAMME / HECTARE|2;;MP|MEGA PASCAL|2;;M2/KM|METRE CARRE / KILOMETRE|2;;M3/HM|METRE CUBE / HECTOMETRE|2;;M3/KM|METRE CUBE / KILOMETRE|2;;MO|mois|2;;PV|PLUS-VALUE|2;;..|SANS UNITE|2;;S|SEMAINE|2" _
                                & "TK|TONNE KILOMETRIQUE|2;;A|ARE|1;;CM/M|CENTIMETRE / METRE|1;;CM/M|fffd||CENTIMETRE / METRE CARRE|1;;D|fffd||DECIMETRE CUBE|1;;ES|ESTIMATION|1;;G/M2|GRAMME / M2|1;;HM|HECTOMETRE|1;;K|fffd||KILOMETRE CARRE|1;;CE|LE CENT|1" _
                                & "MILL|LE MILLE|1;;ML/KM|METRE LINEAIRE / KILOMETRE|1;;M/S|METRE LINEAIRE / SEMAINE|1;;MM/M2|MILLIMETRE / METRE CARRE|1;;MI|MINUTE|1;;PA|PAIRE|1;;8|POSTE A 8 HEURES|1;;10|POSTE 10 HEURES|1;;9|POSTE 9 HEURES|1;;SA|SAC|1" _
                                & "SE|SECONDE|1;;SP|SPIT|1;;T/HM|TONNE / HECTOMETRE|1;;U/AN|UNITE/AN|1"

End Function

Public Function getInitialMappingForAmiprix() As Dictionary
Dim pDic As New Dictionary

    pDic.add "KF", "FT"
    pDic.add "KFORFAIT", "FT"
    pDic.add "KFORF", "FT"
    
    pDic.add "KM|fffd|", "M2"
    pDic.add "KM|fffd|", "M3"
    
    pDic.add "KM", "ML"
    
    pDic.add "KUNIT|fffd|S", "U"
    pDic.add "KUNITES", "U"
    pDic.add "KUNIT|fffd|", "U"
    pDic.add "KUNITE", "U"
    
    Set getInitialMappingForAmiprix = pDic
End Function
Attribute VB_Name = "modHtml"
Option Explicit

#If VBA7 Then
    Private Declare PtrSafe Function ShellExecute Lib "shell32.dll" Alias "ShellExecuteA" _
    (ByVal hwnd As Long, ByVal lpOperation As String, ByVal lpFile As String, _
    ByVal lpParameters As String, ByVal lpDirectory As String, _
    ByVal nShowCmd As Long) As Long
#Else
    Private Declare Function ShellExecute Lib "shell32.dll" Alias "ShellExecuteA" _
    (ByVal hwnd As Long, ByVal lpOperation As String, ByVal lpFile As String, _
    ByVal lpParameters As String, ByVal lpDirectory As String, _
    ByVal nShowCmd As Long) As Long
#End If


Public Sub getHtml(s As String)
  Dim hwnd As Long
  ShellExecute hwnd, "open", s, "", "", 1
End Sub

Attribute VB_Name = "modMainPlanning"
Option Explicit


'S'assure que la feuille active est bien une feuille de planning Spigao
Public Function mIsPlanningSpigaoActivated() As Boolean
On Error Resume Next
Dim oEs As aExcelSheet
    mIsPlanningSpigaoActivated = False
    If sgExcelApplication.Engine.activeSheet Is Nothing Then Exit Function

    mIsPlanningSpigaoActivated = Not (gCurrentPlanning Is Nothing)
  
End Function

'affichage du planning
Public Sub mPlanningShow()
On Error GoTo fin

    
    sgPlanningBuilder.buildByPath sgSpigaoConfiguration.planningTemplateFullPath
    
fin:

End Sub


Public Sub mPlannningImportOneDeal()
On Error GoTo fin
Dim oDeal As Object

    If gCurrentPlanning Is Nothing Then Exit Sub
    
    Set oDeal = sgSpigao.getDealByPlannedDeals()
    
    If Not oDeal Is Nothing Then
        gCurrentPlanning.importOneDeal oDeal
    End If



fin:
    If Err Then MsgBox "Erreur lors de l'import d'une affaire : " & Err.Description
    
End Sub

Public Sub mSynchronisePlanning()
On Error GoTo fin


    If gCurrentPlanning Is Nothing Then Exit Sub
    
    sgExcelApplication.MuteOn
    gCurrentPlanning.sychroniseDeals False

fin:
    sgExcelApplication.MuteOff
    If Err Then MsgBox "Erreur lors de la synchronisation du planning : " & Err.Description
    
End Sub

Public Function mGetCurrentDealId() As Long
    
    If Not gCurrentPlanning Is Nothing Then
        If Not ActiveCell Is Nothing Then
            mGetCurrentDealId = gCurrentPlanning.sh.readCellFormulaByCoord(ActiveCell.row, 1)
        End If
    End If

End Function

Public Function mShowDeal()
On Error GoTo fin
    Dim iId As Long
    
    If Not gCurrentPlanning Is Nothing Then
        iId = gCurrentPlanning.activeDealId()
        If iId > 0 Then
            sgSpigao.Detection.UI.Deals.viewDeal iId
        End If
    End If
fin:

End Function
Attribute VB_Name = "modMainStudy"
Option Explicit

'*********************************************************
' Module contenant les appels de methodes principales
'*********************************************************
Public Sub auto_open()

    Set gExcelListener = New aExcelListener

End Sub

'*********************************************************
' Ouvertures de devis
'*********************************************************
'Par ouverture d'une |fffd|tude d|fffd|j|fffd| g|fffd|n|fffd|r|fffd|e
Public Sub mOpenDieByExcelFile()
Dim sPath As String

    checkForUpdate False
    sPath = sgFileSystem.promptForFilePath("c:\", sgSpigaoConfiguration.RepoFolderPath)
    If sPath <> "" Then
        If sgFileSystem.FileExists(sPath) Then
            sgExcelApplication.openWorkbook sPath
        End If
    End If
    
End Sub
'Par choix sp|fffd|cifique
Public Sub mOpenDieBySpecificDie()
    mImportDIE 0
End Sub
'Par selected deals
Public Sub mOpenDieBySelectedDeals()
Dim oDeal As Object

    'On v|fffd|rifie que la configuration a |fffd|t|fffd| faite... Sinon on renvoit dessus
    If Not sgSpigaoConfiguration.IsConfigured() Then
        MsgBox "Le connecteur Excel n'est pas encore configur|fffd|. Veuillez compl|fffd|ter le param|fffd|trage avant de lancer un import."
        'formConfig.Show
        Exit Sub
    End If
    
    checkForUpdate False
    
    'Affichage de la liste des affaires s|fffd|lectionn|fffd|es
    Set oDeal = sgSpigao.getDealByPlannedDeals()
    If Not oDeal Is Nothing Then
        mImportDIE oDeal.Id, oDeal.Contractor.ShortName & vbCrLf & oDeal.Caption
    End If

End Sub

Public Sub mOpenDieByConvertingOldXls()
On Error GoTo fin
Dim oEw As aExcelWorkBook
Dim oProject As Object
Dim sTargetFolderPath As String
Dim bSaved As Boolean
Dim sPathXml As String
Dim sFilename As String

    checkForUpdate False

    Set oEw = sgExcelWorkbookBuilder.buildByWorkbook(ActiveWorkbook)
    If Not oEw.IsSpigaoOldStudyWorkbook Then Exit Sub
    sPathXml = oEw.Workbook.path & "\" & Left(oEw.Workbook.name, InStrRev(oEw.Workbook.name, ".") - 1) & ".xml"
    sFilename = Left(oEw.Workbook.name, InStrRev(oEw.Workbook.name, ".") - 1) & ".xlsx"
    sgExcelApplication.MuteOn
    bSaved = False
    Set gCurrentStudy = Nothing
        
    Set oProject = sgSpigao.getProjectByXmlPath(sPathXml)
    
    If Not oProject Is Nothing Then
        'Cr|fffd|ation
        Set gCurrentStudy = sgStudyBuilder.createByProject(oProject, "")
        
        'Reprise des PU
        If Not gCurrentStudy Is Nothing Then
            gCurrentStudy.importOldExcelValues oEw
        End If
        
        'Fermeture du fichier original avant l'enregistrement car sinon on ne peut pas renommer ou d|fffd|placer le XLS
        oEw.closeWorkbook
        
        'Enregistrement
        If Not gCurrentStudy Is Nothing Then 'on enregistre
            sTargetFolderPath = sgFileSystem.getFolderPathFromFilePath(oProject.Id) 'formSaveDevis.getDealFolderPathToSave(oProject.name, oProject.id)
            If sTargetFolderPath <> "" Then
                'bSaved = gCurrentStudy.save(sTargetFolderPath, formSaveDevis.sStudyFileName, True)
                bSaved = gCurrentStudy.save(sTargetFolderPath, sFilename, False)
            End If
            'Enregistrement annul|fffd| => on ferme
            If Not bSaved Then
                gCurrentStudy.closeStudy
                Set gCurrentStudy = Nothing
            Else
                gCurrentStudy.activeSS.ES.IsListened = True
            End If
   
        End If
        
    End If

fin:
    sgExcelApplication.MuteOff
    ActualiseRibbonDevis
End Sub
'-------------------------------
' Import du DIE en cliquant directement
' sur Importer dans la feuille "Devis"
'-------------------------------
Private Sub mImportDIE(dealId As Long, Optional TitleBoq As String = "")
On Error GoTo fin

Dim oProject As Object
Dim sTargetFolderPath As String
Dim bSaved As Boolean


    sgExcelApplication.MuteOn
    bSaved = False
    Set gCurrentStudy = Nothing
        
    Set oProject = sgSpigao.getProject(dealId)
    
    If Not oProject Is Nothing Then
        Set gCurrentStudy = sgStudyBuilder.createByProject(oProject, CStr(dealId), TitleBoq)
        
        If Not gCurrentStudy Is Nothing Then 'on enregistre
            sTargetFolderPath = formSaveDevis.getDealFolderPathToSave(oProject.name, oProject.Id)
            If sTargetFolderPath <> "" Then
                bSaved = gCurrentStudy.save(sTargetFolderPath, formSaveDevis.sStudyFileName, True)
            End If
            'Enregistrement annul|fffd| => on ferme
            If Not bSaved Then
                gCurrentStudy.closeStudy
                Set gCurrentStudy = Nothing
            End If
        End If
        
    End If
    
    sgExcelApplication.MuteOff
    
    '
    gCurrentStudy.activeSS.ES.IsListened = True
    ActualiseRibbonDevis
    
    Exit Sub
fin:
    sgExcelApplication.MuteOff
    ActualiseRibbonDevis
End Sub
'*********************************************************
' Export de devis
'
'*********************************************************
Public Sub mExportSpigao()
    If gCurrentStudy Is Nothing Then
        If mIsSpigaoOldXlsActivated Then
            modCompatibility.ExportDIE_Compatibility
        End If
    Else
        gCurrentStudy.checkDealFolderPath
        gCurrentStudy.checkProjectIdPath
        gCurrentStudy.export
    End If
End Sub
'-----------------------------------------------------
' Tele DCE
'-----------------------------------------------------
Public Sub mGoToDownloadDcePage()
On Error GoTo fin

    If gCurrentStudy Is Nothing Then Exit Sub
    
    sgExcelApplication.MuteOn
    gCurrentStudy.goToDceDownload
fin:
    sgExcelApplication.MuteOff
End Sub


'-----------------------------------------------------
' Dossier de consultation
'-----------------------------------------------------
Public Sub mGenConsultation()
On Error GoTo fin

Dim oSelectedRg As range
Dim oConsultation As cStudyConsultation
    
    If gCurrentStudy Is Nothing Then Exit Sub
    gCurrentStudy.checkDealFolderPath
    
    If Selection.parent.name <> gCurrentStudy.activeSS.ES.sheetName Then
        MsgBox "Veuillez s|fffd|lectionner les lignes |fffd| joindre au dossier de consultation."
        Exit Sub
    End If
    
    sgExcelApplication.MuteOn
    Set oSelectedRg = Selection
    Set oConsultation = New cStudyConsultation
    oConsultation.createConsultationWorkbook gCurrentStudy, oSelectedRg

    sgExcelApplication.MuteOff
    ActualiseRibbonDevis
    Exit Sub
fin:
    sgExcelApplication.MuteOff

End Sub


'-----------------------------------------------------
' Poids des prix
'-----------------------------------------------------
Public Sub mTogglePriceStrength()
On Error GoTo fin
    
    If gCurrentStudy Is Nothing Then Exit Sub
    
    sgExcelApplication.MuteOn
    If gCurrentStudy.activeSS.IsPriceStrengthEnabled Then
        gCurrentStudy.activeSS.strengthHideColPriceStrength
    Else
        gCurrentStudy.activeSS.strengthShowColPriceStrength
    End If
    
    sgExcelApplication.MuteOff
    ActualiseRibbonDevis
    Exit Sub
fin:
    sgExcelApplication.MuteOff
End Sub


'------------------------------------------------------
' Coefs
'------------------------------------------------------
Public Sub mToggleCoefs()
On Error GoTo fin
    If gCurrentStudy Is Nothing Then Exit Sub
    
    sgExcelApplication.MuteOn
    If gCurrentStudy.activeSS.IsCoefEnabled Then
        gCurrentStudy.activeSS.coefHideColCoef
    Else
        gCurrentStudy.activeSS.coefShowColCoef
    End If
    
    sgExcelApplication.MuteOff
    ActualiseRibbonDevis
    Exit Sub
fin:
    sgExcelApplication.MuteOff
End Sub

'-------------------------------------------------------
' cumul des quantit|fffd|s
'-------------------------------------------------------
Public Sub mToggleCumulQuantity()
On Error GoTo fin
    If gCurrentStudy Is Nothing Then Exit Sub
    
    sgExcelApplication.MuteOn
    If gCurrentStudy.activeSS.ES.IsSpigaoBaseSheet Then
        gCurrentStudy.cumulCreateCumulSheet
    ElseIf gCurrentStudy.activeSS.ES.IsSpigaoCumulSheet Then
        gCurrentStudy.cumulRestoreBaseSheet
    End If
    
    sgExcelApplication.MuteOff
    ActualiseRibbonDevis
    Exit Sub
fin:
    sgExcelApplication.MuteOff
End Sub

'------------------------------------------------------
' Affichage des totaux par chapitre
'------------------------------------------------------
Public Sub mHideChapterTotal(bHide As Boolean)
On Error GoTo fin
    If gCurrentStudy Is Nothing Then Exit Sub
    
    sgExcelApplication.MuteOn

    gCurrentStudy.activeSS.hideChapterTotal bHide

    sgExcelApplication.MuteOff
    ActualiseRibbonDevis
    Exit Sub
fin:
    sgExcelApplication.MuteOff
End Sub
'-------------------------------------------------------
' import study
'-------------------------------------------------------
Public Sub mImportStudy()
On Error GoTo fin
Dim iModeImport As eImportMode

    If gCurrentStudy Is Nothing Then Exit Sub
    iModeImport = formImportChooseMode.getchoice()
    If iModeImport = eImportMode.None Then Exit Sub
    
    
    sgExcelApplication.MuteOn
    If iModeImport = eImportMode.DetTxt Then
        gCurrentStudy.importDetTxt
    ElseIf iModeImport = eImportMode.XlsOld Then
        'gCurrentStudy.importOldExcelValues
    ElseIf iModeImport = eImportMode.XlsOri Then
        gCurrentStudy.importUnitPricesFromOriginalExcel
    End If
    
    sgExcelApplication.MuteOff
    ActualiseRibbonDevis
    Exit Sub
    
fin:
    sgExcelApplication.MuteOff
End Sub

'-------------------------------------------------------
' ouvrir le r|fffd|pertoire de l'affaire courante
'-------------------------------------------------------
Public Sub mOpenDealFolder()
Dim sUrl As String
    
    sUrl = sgSpigaoConfiguration.RepoFolderPath
    If Not gCurrentStudy Is Nothing Then
        gCurrentStudy.checkDealFolderPath
        sUrl = gCurrentStudy.dealFolderPath
    End If
    If sUrl <> "" Then getHtml (sUrl)
    
End Sub
'-------------------------------------------------------
' Affichage bordereau
'-------------------------------------------------------
Public Sub mShowBpx()
On Error GoTo fin


    If gCurrentStudy Is Nothing Then Exit Sub
    gCurrentStudy.checkDealFolderPath
    gCurrentStudy.checkProjectIdPath
    gCurrentStudy.showBpx ActiveCell.row
fin:
    
End Sub

'-------------------------------------------------------
' R|fffd|duction des sous-chapitres
'-------------------------------------------------------
Public Sub mIndent()
On Error GoTo fin

    If gCurrentStudy Is Nothing Then Exit Sub
    
    If MsgBox("La r|fffd|duction des sous-niveaux n'est pas r|fffd|versible." & vbCrLf _
            & "Tous les chapitres sous le chapitre sel|fffd|ctionn|fffd| vont |fffd|tre bascul|fffd|s en commentaires." & vbCrLf _
            & "Assurez-vous d'avoir sauvegard|fffd| au pr|fffd|alable votre devis." & vbCrLf _
            & "Voulez-vous poursuivre ?", vbExclamation + vbOKCancel, "R|fffd|duction des sous-niveaux") = vbCancel Then
            Exit Sub
    End If
    
    sgExcelApplication.MuteOn
    gCurrentStudy.reduceLevel
fin:
    sgExcelApplication.MuteOff
    If Err Then MsgBox Err.Description
    
End Sub

'-------------------------------------------------------
' Filtre
'-------------------------------------------------------
Public Sub mToggleFilter_ForChapter(bShow As Boolean)
On Error GoTo fin

    If gCurrentStudy Is Nothing Then Exit Sub
    sgExcelApplication.MuteOn
    gCurrentStudy.toggleVisibility_ForChapter bShow

fin:
    sgExcelApplication.MuteOff
End Sub
Public Sub mToggleFilter_ForComment(bShow As Boolean)
On Error GoTo fin

    If gCurrentStudy Is Nothing Then Exit Sub
    sgExcelApplication.MuteOn
    gCurrentStudy.toggleVisibility_ForComment bShow

fin:
    sgExcelApplication.MuteOff
End Sub
Public Sub mToggleFilter_ForPrice(bShow As Boolean)
On Error GoTo fin

    If gCurrentStudy Is Nothing Then Exit Sub
    
    sgExcelApplication.MuteOn
    gCurrentStudy.toggleVisibility_ForPrice bShow

fin:
    sgExcelApplication.MuteOff
End Sub
Public Sub mToggleFilter_ForTaxes(bShow As Boolean)
On Error GoTo fin

    If gCurrentStudy Is Nothing Then Exit Sub
    sgExcelApplication.MuteOn
    gCurrentStudy.toggleVisibility_ForTaxes bShow

fin:
    sgExcelApplication.MuteOff
End Sub
Public Sub mToggleFilter_ForOthers(bShow As Boolean)
On Error GoTo fin

    If gCurrentStudy Is Nothing Then Exit Sub
    
    sgExcelApplication.MuteOn
    gCurrentStudy.ToggleVisibility_ForOther bShow

fin:
    sgExcelApplication.MuteOff
End Sub


Public Sub mConfiguration()

    formConfiguration.Show

End Sub

Public Sub mAbout()
    formAbout.Show
End Sub

Public Sub mGoToSpigao()
    sgSpigao.goToAutoLogin
End Sub

Public Sub mGoToSupport()
    sgSpigao.goToSupport
End Sub
'******************************************************
' Fonctions demo
'******************************************************
Public Sub mDemoPriceRandom()
On Error GoTo fin

    If gCurrentStudy Is Nothing Then Exit Sub
    
    sgExcelApplication.MuteOn
    gCurrentStudy.demoPriceRandom

fin:
    sgExcelApplication.MuteOff

End Sub
Public Sub mDemoQuantityRandom()
On Error GoTo fin

    If gCurrentStudy Is Nothing Then Exit Sub
    
    sgExcelApplication.MuteOn
    gCurrentStudy.demoQuantityRandom

fin:
    sgExcelApplication.MuteOff

End Sub
'*****************************************************************
' Reconnaissance du fichier excel courant
'*****************************************************************
'S'assure que la feuille active est bien une feuille d'|fffd|tude Spigao
Public Function mIsDevisSpigaoActivated() As Boolean
On Error Resume Next
    
    mIsDevisSpigaoActivated = False
    If sgExcelApplication.Engine.activeSheet Is Nothing Then Exit Function
    If gCurrentStudy Is Nothing Then Exit Function
    mIsDevisSpigaoActivated = gCurrentStudy.IsActivated
  
End Function
Public Function mIsSpigaoOldXlsActivated() As Boolean
Dim oEw As aExcelWorkBook

    mIsSpigaoOldXlsActivated = False
    If ActiveWorkbook Is Nothing Then Exit Function
    Set oEw = sgExcelWorkbookBuilder.buildByWorkbook(ActiveWorkbook)
    If oEw Is Nothing Then Exit Function
    mIsSpigaoOldXlsActivated = oEw.IsSpigaoOldStudyWorkbook

End Function


'*****************************************************************
' Extensions
'*****************************************************************
'g|fffd|n|fffd|ration progapwin
Public Sub mGenProgapwinFile()
    If gCurrentStudy Is Nothing Then Exit Sub
    gCurrentStudy.checkDealFolderPath
    gCurrentStudy.checkProjectIdPath
    modExtensions.genProgapwinFile gCurrentStudy
End Sub

'g|fffd|n|fffd|ration onay facturation
Public Sub mGenOnayaFacturationFile()
    If gCurrentStudy Is Nothing Then Exit Sub
    gCurrentStudy.checkDealFolderPath
    gCurrentStudy.checkProjectIdPath
    modExtensions.genOnayaFacturationFile gCurrentStudy
End Sub

'g|fffd|n|fffd|ration onay facturation
Public Sub mGenQDV6File()
    If gCurrentStudy Is Nothing Then Exit Sub
    gCurrentStudy.checkDealFolderPath
    gCurrentStudy.checkProjectIdPath
    modExtensions.genQDV6File gCurrentStudy
End Sub

'g|fffd|n|fffd|ration amiprix
Public Sub mGenAmiprixFile()
    If gCurrentStudy Is Nothing Then Exit Sub
    gCurrentStudy.checkDealFolderPath
    gCurrentStudy.checkProjectIdPath
    modExtensions.genAmiprixFile gCurrentStudy
End Sub
Attribute VB_Name = "modProgress"
Option Explicit

Public Sub ProgressInit(Optional sLegende As String = "")
    On Error GoTo fin
    formAvancement.lblProgress.Width = 0
    formAvancement.Left = Application.Left + CInt(Application.Width / 2) - CInt(formAvancement.Width / 2)
    If sLegende <> "" Then formAvancement.Caption = sLegende
    formAvancement.Show
    
fin:
    If Err Then Err.clear
End Sub

Public Sub ProgressUpdate(dblAvancement As Double)
    On Error GoTo fin
    Dim iW As Integer

    If formAvancement.visible = False Then Exit Sub
    
    If dblAvancement < 0 Then dblAvancement = 0
    If dblAvancement > 1 Then dblAvancement = 1
    
    iW = CInt(formAvancement.fraProgress.Width * dblAvancement)
    If (iW - formAvancement.lblProgress.Width) / formAvancement.fraProgress.Width > 0.05 Then
        formAvancement.lblProgress.Width = iW
        DoEvents
    End If
    
fin:
    If Err Then Err.clear
End Sub

Public Sub ProgressClose()
    On Error GoTo fin
    Unload formAvancement
fin:

    If Err Then Err.clear
End Sub


Attribute VB_Name = "modRegistry"
Option Explicit
'*******************************************************************************
'**                            vb_reg.bas                                     **
'*******************************************************************************
'*  this BAS file does the following :                                         *
'*     opens a key in any registry                                             *
'*     opens a key in any registry of a remote computer                        *
'*     lists all subkeys of any registry                                       *
'*     recursively deletes an opened key                                       *
'*     creates a value in an opened key                                        *
'*     lists all values of an opened key                                       *
'*     deletes a value in an opened key                                        *
'*     reads the data assigned a value                                         *
'*     creates a backup of a registry in a REG file                            *
'*     restores a REG file                                                     *
'*     assignes any programs to a file extension                               *
'*     unassignes the programs to the file extension                           *
'*******************************************************************************
'* date : 02/08/1999                                                           *
'*                                                                             *
'* environnement de d|fffd|veloppement : Windows NT4us, Service Pack 3us            *
'*                                  Visual Studio Entreprise 6                 *
'*                                                                             *
'* validation : tous les tests de qualification du produit serons r|fffd|alis|fffd|s     *
'*              sous Windows NT4us, Service Pack 3us                           *
'*******************************************************************************
'* AUTEUR : St|fffd|phane HABLOT                                                    *
'*                                                                             *
'* mail   : stefhabl@club-internet.fr                                          *
'* mail2  : ano808@tcc.thomson-csf.com                                         *
'* web    : http://perso.club-internet.fr/stefhabl                             *
'*******************************************************************************

Public Type valeur
    nom As String
    type As Long
    Data() As Byte
End Type
'API n|fffd|cessaires

#If VBA7 Then

    ' Pour se connecter une base de registre distante
    Private Declare PtrSafe Function RegConnectRegistry Lib "advapi32.dll" Alias "RegConnectRegistryA" (ByVal lpMachineName As String, ByVal hKey As Long, phkResult As Long) As Long
    ' pour |fffd|num|fffd|rer les valeures d'une cl|fffd| ouverte
    Private Declare PtrSafe Function RegEnumValue Lib "advapi32.dll" Alias "RegEnumValueA" (ByVal hKey As Long, ByVal dwIndex As Long, ByVal lpValueName As String, lpcbValueName As Long, ByVal lpReserved As Long, lpType As Long, lpData As Byte, lpcbData As Long) As Long
    ' pour |fffd|num|fffd|rer les sous cl|fffd| d'une cl|fffd| ouverte
    Private Declare PtrSafe Function RegEnumKey Lib "advapi32.dll" Alias "RegEnumKeyA" (ByVal hKey As Long, ByVal dwIndex As Long, ByVal lpName As String, ByVal cbName As Long) As Long
    'pour ouvrir une cl|fffd|
    Private Declare PtrSafe Function RegOpenKeyEx Lib "advapi32.dll" Alias "RegOpenKeyExA" (ByVal hKey As Long, ByVal lpSubKey As String, ByVal ulOptions As Long, ByVal samDesired As Long, phkResult As Long) As Long
    'pour fermer une cl|fffd| ouverte
    Private Declare PtrSafe Function RegCloseKey Lib "advapi32.dll" (ByVal hKey As Long) As Long
    'pour cr|fffd|er une cl|fffd|
    Private Declare PtrSafe Function RegCreateKey Lib "advapi32.dll" Alias "RegCreateKeyA" (ByVal hKey As Long, ByVal lpSubKey As String, phkResult As Long) As Long
    'pour supprimer une cl|fffd| ouverte
    Private Declare PtrSafe Function RegDeleteKey Lib "advapi32.dll" Alias "RegDeleteKeyA" (ByVal hKey As Long, ByVal lpSubKey As String) As Long
    'pour supprimer une valeur
    Private Declare PtrSafe Function RegDeleteValue Lib "advapi32.dll" Alias "RegDeleteValueA" (ByVal hKey As Long, ByVal lpSubKey As String) As Long
    'pour lire une valeur
    Private Declare PtrSafe Function RegQueryValueEx Lib "advapi32.dll" Alias "RegQueryValueExA" (ByVal hKey As Long, ByVal lpValueName As String, ByVal lpReserved As Long, lpType As Long, lpData As Any, lpcbData As Long) As Long
    'pour fixer ou cr|fffd|er une valeur
    Private Declare PtrSafe Function RegSetValueEx Lib "advapi32.dll" Alias "RegSetValueExA" (ByVal hKey As Long, ByVal lpValueName As String, ByVal Reserved As Long, ByVal dwType As Long, lpData As Any, ByVal cbData As Long) As Long


#Else

    ' Pour se connecter une base de registre distante
    Private Declare Function RegConnectRegistry Lib "advapi32.dll" Alias "RegConnectRegistryA" (ByVal lpMachineName As String, ByVal hKey As Long, phkResult As Long) As Long
    ' pour |fffd|num|fffd|rer les valeures d'une cl|fffd| ouverte
    Private Declare Function RegEnumValue Lib "advapi32.dll" Alias "RegEnumValueA" (ByVal hKey As Long, ByVal dwIndex As Long, ByVal lpValueName As String, lpcbValueName As Long, ByVal lpReserved As Long, lpType As Long, lpData As Byte, lpcbData As Long) As Long
    ' pour |fffd|num|fffd|rer les sous cl|fffd| d'une cl|fffd| ouverte
    Private Declare Function RegEnumKey Lib "advapi32.dll" Alias "RegEnumKeyA" (ByVal hKey As Long, ByVal dwIndex As Long, ByVal lpName As String, ByVal cbName As Long) As Long
    'pour ouvrir une cl|fffd|
    Private Declare Function RegOpenKeyEx Lib "advapi32.dll" Alias "RegOpenKeyExA" (ByVal hKey As Long, ByVal lpSubKey As String, ByVal ulOptions As Long, ByVal samDesired As Long, phkResult As Long) As Long
    'pour fermer une cl|fffd| ouverte
    Private Declare Function RegCloseKey Lib "advapi32.dll" (ByVal hKey As Long) As Long
    'pour cr|fffd|er une cl|fffd|
    Private Declare Function RegCreateKey Lib "advapi32.dll" Alias "RegCreateKeyA" (ByVal hKey As Long, ByVal lpSubKey As String, phkResult As Long) As Long
    'pour supprimer une cl|fffd| ouverte
    Private Declare Function RegDeleteKey Lib "advapi32.dll" Alias "RegDeleteKeyA" (ByVal hKey As Long, ByVal lpSubKey As String) As Long
    'pour supprimer une valeur
    Private Declare Function RegDeleteValue Lib "advapi32.dll" Alias "RegDeleteValueA" (ByVal hKey As Long, ByVal lpSubKey As String) As Long
    'pour lire une valeur
    Private Declare Function RegQueryValueEx Lib "advapi32.dll" Alias "RegQueryValueExA" (ByVal hKey As Long, ByVal lpValueName As String, ByVal lpReserved As Long, lpType As Long, lpData As Any, lpcbData As Long) As Long
    'pour fixer ou cr|fffd|er une valeur
    Private Declare Function RegSetValueEx Lib "advapi32.dll" Alias "RegSetValueExA" (ByVal hKey As Long, ByVal lpValueName As String, ByVal Reserved As Long, ByVal dwType As Long, lpData As Any, ByVal cbData As Long) As Long


#End If


' const propre |fffd| l'appli
Global Const VBREG_QUICKVIEW = 1
Global Const VBREG_SHOWEXT = 2
' const prises WINERROR.H
Global Const VBREG_ERROR_SUCCESS As Long = 0   ' pas d'erreur
Global Const VBREG_ERROR_INVALID_PARAMETER As Long = 87   ' Erreur dans les param|fffd|tres d'appel
Global Const VBREG_ERROR_NO_MORE_ITEMS As Long = 259   ' Il n'a plus de d'items |fffd| lister
Global Const VBREG_ERROR_ACCESS_DENIED As Long = 5   ' l'acc|fffd|s est refus|fffd|
Global Const VBREG_ERROR_INVALID_HANDLE As Long = 6    ' handel invalide
Global Const VBREG_ERROR_FILE_NOT_FOUND As Long = 2   ' r|fffd|f|fffd|rence non existente
Global Const VBREG_ERROR_MORE_DATA As Long = 234   ' buffer trop petit pour stocker les data
' const prises WINREG.H
Global Const VBREG_HKEY_CLASSES_ROOT As Long = &H80000000
Global Const VBREG_HKEY_CURRENT_USER As Long = &H80000001
Global Const VBREG_HKEY_LOCAL_MACHINE As Long = &H80000002
Global Const VBREG_HKEY_USERS As Long = &H80000003
Global Const VBREG_HKEY_PERFORMANCE_DATA As Long = &H80000004
Global Const VBREG_HKEY_CURRENT_CONFIG As Long = &H80000005
Global Const VBREG_HKEY_DYN_DATA As Long = &H80000006
' const prises WINNT.H
Global Const VBREG_REG_NONE As Long = 0
Global Const VBREG_REG_SZ As Long = 1
Global Const VBREG_REG_EXPAND_SZ As Long = 2
Global Const VBREG_REG_BINARY As Long = 3
Global Const VBREG_REG_DWORD As Long = 4
Global Const VBREG_REG_DWORD_BIG_ENDIAN As Long = 5
Global Const VBREG_REG_LINK As Long = 6
Global Const VBREG_REG_MULTI_SZ As Long = 7
Global Const VBREG_REG_RESOURCE_LIST As Long = 8
Global Const VBREG_REG_FULL_RESOURCE_DESCRIPTOR As Long = 9
Global Const VBREG_REG_RESOURCE_REQUIREMENTS_LIST As Long = 10
' const prises WINNT.H
Global Const VBREG_KEY_QUERY_VALUE As Long = &H1
Global Const VBREG_KEY_SET_VALUE As Long = &H2
Global Const VBREG_KEY_CREATE_SUB_KEY As Long = &H4
Global Const VBREG_KEY_ENUMERATE_SUB_KEYS As Long = &H8
Global Const VBREG_KEY_NOTIFY As Long = &H10
Global Const VBREG_KEY_CREATE_LINK As Long = &H20
Global Const VBREG_KEY_READ As Long = VBREG_KEY_QUERY_VALUE Or VBREG_KEY_ENUMERATE_SUB_KEYS Or VBREG_KEY_NOTIFY
Global Const VBREG_KEY_WRITE As Long = VBREG_KEY_SET_VALUE Or VBREG_KEY_CREATE_SUB_KEY
Global Const VBREG_KEY_EXECUTE As Long = VBREG_KEY_READ
Global Const VBREG_KEY_ALL_ACCESS As Long = VBREG_KEY_QUERY_VALUE + VBREG_KEY_SET_VALUE + VBREG_KEY_CREATE_SUB_KEY + VBREG_KEY_ENUMERATE_SUB_KEYS + VBREG_KEY_NOTIFY + VBREG_KEY_CREATE_LINK

'Chemins
Global Const cRepScribe = "HKEY_LOCAL_MACHINE\SOFTWARE\EDISYS\Scribe\"
Global Const cRepEDIAO = "HKEY_LOCAL_MACHINE\SOFTWARE\EDISYS\EdiScan\"
Global Const cRepILM = "HKEY_CURRENT_USER\SOFTWARE\EDISYS\ILM\"
Global Const cRepCalP = "HKEY_CURRENT_USER\SOFTWARE\EDISYS\CalPrev\"
Global Const cRepXLA = "HKEY_CURRENT_USER\SOFTWARE\EDISYS\macros\Scribe\"

'Sp|fffd|cifiques Scribe
Global Const cPassScribe = "HKEY_CURRENT_USER\SOFTWARE\EDISYS\Scribe\pwd"
Global Const cUserScribe = "HKEY_CURRENT_USER\SOFTWARE\EDISYS\Scribe\user"

'Sp|fffd|cifiques Scribe.xla
Global Const cDeciScrXLA = "Decimale"
Global Const cDynaScrXLA = "Dyna"
Global Const cMacroVersionXLA = "MacroVersion"

' Constante pour la base de registre
Global Const cPathDossier = "Path_Dossier"
Global Const cVersion = "Version"
Global Const cTableau = "Tableau"
Global Const cPath = "Path"
Global Const cAppScribe = "Scribe.exe"
Global Const cSiteSpigao = "HKEY_CURRENT_USER\SOFTWARE\EDISYS\url_spigao"
Global Const cSiteEdisys = "HKEY_CURRENT_USER\SOFTWARE\EDISYS\url_edisys"

Private Function decode_hkey(Key As Variant) As Long
    Dim STR_type As String
    
    decode_hkey = VBREG_ERROR_INVALID_PARAMETER

    STR_type = TypeName(Key)
    If STR_type <> "Long" And STR_type <> "String" Then
        Exit Function
    End If
    If STR_type = "Long" Then
        decode_hkey = Key
    Else
        Select Case Key
        Case "HKEY_CLASSES_ROOT"
            decode_hkey = VBREG_HKEY_CLASSES_ROOT
        Case "HKEY_CURRENT_USER"
            decode_hkey = VBREG_HKEY_CURRENT_USER
        Case "HKEY_LOCAL_MACHINE"
            decode_hkey = VBREG_HKEY_LOCAL_MACHINE
        Case "HKEY_USERS"
            decode_hkey = VBREG_HKEY_USERS
        Case "HKEY_PERFORMANCE_DATA"
            decode_hkey = VBREG_HKEY_PERFORMANCE_DATA
        Case "HKEY_DYN_DATA"
            decode_hkey = VBREG_HKEY_DYN_DATA
        Case "HKEY_CURRENT_CONFIG"
            decode_hkey = VBREG_HKEY_CURRENT_CONFIG
        Case Else
            Exit Function
        End Select
    End If

End Function
Public Function open_remote_key(Remote_Host As String, Base_key As Variant, Optional resultat As Long) As Long
' cette fonction sera utilis|fffd|e pour obtenir un handle de cl|fffd| sur un morceau
' de la base de registre d'un ordinateur distant
'-----------------------------------------------------------------------------
' param :   Remote_Host as string  au format UNV ("\\host_name") ou
'                                                ("\\Adress_IP")
'           Base_Key as variant      vous pouvez y indiquer :
'              - une chaine egale |fffd|
'                   "HKEY_CLASSES_ROOT","HKEY_CURRENT_USER","HKEY_LOCAL_MACHINE"
'                   "HKEY_USERS","HKEY_CURRENT_CONFIG","HKEY_DYN_DATA"
'                   "HKEY_PERFORMANCE_DATA"
'              - un long egale une des constente pr|fffd|d|fffd|finie
'                   VBREG_HKEY_CLASSES_ROOT,VBREG_HKEY_CURRENT_USER
'                   VBREG_HKEY_CURRENT_USER,VBREG_HKEY_USERS,
'                   VBREG_HKEY_CURRENT_CONFIG,VBREG_HKEY_DYN_DATA
'                   HKEY_PERFORMANCE_DATA
'              - un long provenant d'une pr|fffd|c|fffd|dente ouverture
'                 --------------------------------------------------------------
'                 |cette cl|fffd| peut |fffd|tre dans tous les cas                       |
'                 |   VBREG_HKEY_LOCAL_MACHINE, VBREG_HKEY_USERS               |
'                 |et en plus sous WinNT VBREG_HKEY_PERFORMANCE_DATA           |
'                 |et en plus sous 95/98 VBREG_HKEY_DYN_DATA,                  |
'                 |                      VBREG_HKEY_CURRENT_CONFIG             |
'                 |mais jamais VBREG_HKEY_CLASSES_ROOT, VBREG_HKEY_CURRENT_USER|
'                 --------------------------------------------------------------
'
'           Resultat as long       param|fffd|tre optionnel qui retournera le
'                                  r|fffd|sultat de l'op|fffd|ration sur un long
'-----------------------------------------------------------------------------
' retourne le handle de la cl|fffd| ouverte sur un long
'-----------------------------------------------------------------------------
    Dim LNG_key1 As Long
    Dim LNG_key2 As Long
    Dim STR_type As String
    
    open_remote_key = 0
    LNG_key2 = decode_hkey(Base_key)
    If LNG_key2 = 0 Then open_remote_key = LNG_key2: Exit Function
    resultat = RegConnectRegistry(ByVal Remote_Host, LNG_key2, LNG_key1)
    open_remote_key = LNG_key1
End Function
Public Function open_a_key(Base_key As Variant, SubKey As String, Sam As Long, Optional resultat As Long) As Long
' cette fonction sera utilis|fffd|e pour obtenir un handle de cl|fffd| sur un morceau
' de la base de registre
'-----------------------------------------------------------------------------
' param :   Base_Key as variant      vous pouvez y indiquer :
'              - une chaine egale |fffd|
'                   "HKEY_CLASSES_ROOT","HKEY_CURRENT_USER","HKEY_LOCAL_MACHINE"
'                   "HKEY_USERS","HKEY_CURRENT_CONFIG","HKEY_DYN_DATA"
'                   "HKEY_PERFORMANCE_DATA"
'              - un long egale une des constente pr|fffd|d|fffd|finie
'                   VBREG_HKEY_CLASSES_ROOT,VBREG_HKEY_CURRENT_USER
'                   VBREG_HKEY_CURRENT_USER,VBREG_HKEY_USERS,
'                   VBREG_HKEY_CURRENT_CONFIG,VBREG_HKEY_DYN_DATA
'                   HKEY_PERFORMANCE_DATA
'              - un long provenant d'une pr|fffd|c|fffd|dente ouverture
'
'           SubKey as string       contient le chemin de la sous cl|fffd| |fffd| ouvrir
'                                   EX : "SOFTWARE\test\test2"
'                si key vaut un handle d'une cl|fffd| ouverte, subkey n'est que
'                la partie fille de la registry
'                si key vaut un handle de cl|fffd| de base, subkey sera le chemin
'                complet de la cl|fffd| cibl|fffd|e
'
'           Sam as long            contient les option d'ouverture
'                                   EX : VBREG_KEY_ALL_ACCESS
'
'           Resultat as long       param|fffd|tre optionnel qui retournera le
'                               r|fffd|sultat de l'op|fffd|ration sur un long
'-----------------------------------------------------------------------------
' retourne le handle de la cl|fffd| ouverte sur un long
'-----------------------------------------------------------------------------
    Dim LNG_key1 As Long
    Dim LNG_key2 As Long
    Dim STR_type As String
    
    open_a_key = 0
    LNG_key2 = decode_hkey(Base_key)
    If LNG_key2 = 0 Then open_a_key = LNG_key2: Exit Function
    resultat = RegOpenKeyEx(LNG_key2, SubKey, 0&, ByVal Sam, LNG_key1)
    If resultat = VBREG_ERROR_FILE_NOT_FOUND And LNG_key2 = VBREG_HKEY_LOCAL_MACHINE Then
        Dim SubKey64 As String
        SubKey64 = Replace(SubKey, "SOFTWARE\", "SOFTWARE\Wow6432node\")
        resultat = RegOpenKeyEx(LNG_key2, SubKey64, 0&, ByVal Sam, LNG_key1)
    End If
    open_a_key = LNG_key1
End Function
Public Function close_a_key(Base_key As Long) As Long
' ferme la cl|fffd| ouverte avec son handle d'ouverture
' ce handel ne pas |fffd|tre une constente pr|fffd|d|fffd|finie VBREG_HKEY_LOCAL_MACHINE...
'-----------------------------------------------------------------------------
' retourne le r|fffd|sultat sur un long
'-----------------------------------------------------------------------------
    close_a_key = RegCloseKey(Base_key)
End Function
Public Function create_a_key(Base_key As Variant, SubKey As String, Optional resultat As Long) As Long
' cette fonction sera utilis|fffd|e pour cr|fffd|er une sous cl|fffd| sur un morceau
'  de la base de registre
'-----------------------------------------------------------------------------
' param :   Base_Key as variant      vous pouvez y indiquer :
'              - une chaine egale |fffd|
'                   "HKEY_CLASSES_ROOT","HKEY_CURRENT_USER","HKEY_LOCAL_MACHINE"
'                   "HKEY_USERS","HKEY_CURRENT_CONFIG","HKEY_DYN_DATA"
'                   "HKEY_PERFORMANCE_DATA"
'              - un long egale une des constente pr|fffd|d|fffd|finie
'                   VBREG_HKEY_CLASSES_ROOT,VBREG_HKEY_CURRENT_USER
'                   VBREG_HKEY_CURRENT_USER,VBREG_HKEY_USERS,
'                   VBREG_HKEY_CURRENT_CONFIG,VBREG_HKEY_DYN_DATA
'                   HKEY_PERFORMANCE_DATA
'              - un long provenant d'une pr|fffd|c|fffd|dente ouverture
'
'           SubKey as string       contient le chemin de la sous cl|fffd| |fffd| ouvrir
'                                   EX : "SOFTWARE\test\test2"
'                si key vaut un handle d'une cl|fffd| ouverte, subkey n'est que
'                la partie fille de la registry
'                si key vaut un handle de cl|fffd| de base, subkey sera le chemin
'                complet de la cl|fffd| cibl|fffd|e
'
'           Resultat as long       param|fffd|tre optionnel qui retournera le
'                               r|fffd|sultat de l'op|fffd|ration sur un long
'-----------------------------------------------------------------------------
' retourne le handle de la cl|fffd| cr|fffd|e sur un long
'-----------------------------------------------------------------------------
    Dim LNG_key1 As Long
    Dim LNG_key2 As Long
    Dim STR_type As String
    
    create_a_key = 0
    LNG_key2 = decode_hkey(Base_key)
    If LNG_key2 = 0 Then create_a_key = LNG_key2: Exit Function
    resultat = RegCreateKey(LNG_key2, SubKey, LNG_key1)
    create_a_key = LNG_key1
End Function
Public Function delete_a_key(Parent_Key As Long, SubKey As String) As Long
' d|fffd|truit la cl|fffd| dont on donne le handle d'ouverture de la cl|fffd| parente
' ATTENTION toute les filles seront d|fffd|truite par r|fffd|cursivit|fffd|
'-----------------------------------------------------------------------------
' param :   Parent_Key as long         handle d'ouverture de la cl|fffd| parente
'
'           SubKey as string         chaine de caractaiResultat contenant la
'               cl|fffd| fille |fffd| supprimer
'-----------------------------------------------------------------------------
' retourne le r|fffd|sultat sur un long
'-----------------------------------------------------------------------------
    Dim LNG_key1 As Long
    Dim STR_keyname As String
    Dim LNG_len As Long
    Dim LNG_resultat As Long
    Dim COL_subkeys As New Collection
    Dim LNG_cnt As Long
    
    
    LNG_resultat = get_subkeys(Parent_Key, COL_subkeys)
    For LNG_cnt = 1 To COL_subkeys.count
        If COL_subkeys.item(LNG_cnt) = SubKey Then
            LNG_cnt = -1
            Exit For
        End If
    Next LNG_cnt
    If LNG_cnt <> -1 Then Exit Function
    Do
        STR_keyname = String(513, Chr$(0))
        LNG_key1 = open_a_key(Parent_Key, SubKey, VBREG_KEY_ALL_ACCESS, LNG_resultat)
        If LNG_resultat <> 0 Then
            delete_a_key = LNG_resultat
            Exit Function
        End If
        LNG_resultat = RegEnumKey(LNG_key1, 0, ByVal STR_keyname, 512)
        If LNG_resultat <> 0 Then
            LNG_resultat = RegDeleteKey(Parent_Key, SubKey)
            delete_a_key = LNG_resultat
            Exit Do
        Else
            LNG_len = InStr(1, STR_keyname, Chr$(0))
            If LNG_len >= 2 Then STR_keyname = Left$(STR_keyname, LNG_len - 1)
            delete_a_key = delete_a_key(LNG_key1, STR_keyname)
        End If
    Loop
End Function
Public Function get_values(Base_key As Long, retour() As valeur) As Long
' Cette fonction remplie la variable de retour avec les valeurs directement
' li|fffd|es |fffd| la cl|fffd| dont vous fournissez le handle d'ouverture
'-----------------------------------------------------------------------------
' param :   Base_Key as long      provenant d'une pr|fffd|c|fffd|dente ouverture
'                                 ou d'une des constente pr|fffd|d|fffd|finie
'                   VBREG_HKEY_CLASSES_ROOT,VBREG_HKEY_CURRENT_USER,VBREG_HKEY_CURRENT_USER
'                   VBREG_HKEY_USERS,VBREG_HKEY_CURRENT_CONFIG,VBREG_HKEY_DYN_DATA
'
'           retour as valeur est un tableau de type valeur vide
'-----------------------------------------------------------------------------
' retourne le nombre de valeurs sur un long
'-----------------------------------------------------------------------------
    Dim LNG_index As Long
    Dim STR_valname As String
    Dim LNG_valtype As Long
    Dim BYT_buffer(512) As Byte
    Dim LNG_resultat As Long
    Dim LNG_cnt1 As Long
    Dim LNG_len As Long
    Dim LNG_bufferlen As Long
    
    LNG_cnt1 = 0
    STR_valname = String(512, Chr$(0))
    LNG_index = 0
        
    Do
        LNG_bufferlen = 512
        LNG_resultat = RegEnumValue(Base_key, LNG_index, ByVal STR_valname, 512, 0&, LNG_valtype, BYT_buffer(0), LNG_bufferlen)
        If LNG_resultat = 0 Then
            LNG_len = InStr(1, STR_valname, Chr$(0))
            ReDim Preserve retour(LNG_cnt1) As valeur
            If LNG_len > 1 Then
                retour(LNG_cnt1).nom = Left$(STR_valname, LNG_len - 1)
            Else
                retour(LNG_cnt1).nom = ""
            End If
            retour(LNG_cnt1).type = LNG_valtype
            If LNG_bufferlen <> 0 Then
                ReDim Preserve retour(LNG_cnt1).Data(LNG_bufferlen - 1) As Byte
                For LNG_len = 0 To LNG_bufferlen - 1
                    retour(LNG_cnt1).Data(LNG_len) = BYT_buffer(LNG_len)
                Next LNG_len
            End If
            LNG_cnt1 = LNG_cnt1 + 1
        End If
        LNG_index = LNG_index + 1
    Loop While (LNG_resultat = 0)
    get_values = LNG_index - 1
End Function

Public Function get_subkeys(Base_key As Long, Optional retour As Variant) As Long
' Cette fonction remplie la variable de retour avec les sous-cl|fffd| directement
' li|fffd|es |fffd| celle dont vous fournissez le handle d'ouverture
'-----------------------------------------------------------------------------
' param :   Base_Key as long      provenant d'une pr|fffd|c|fffd|dente ouverture
'                                 ou d'une des constente pr|fffd|d|fffd|finie
'                   VBREG_HKEY_CLASSES_ROOT,VBREG_HKEY_CURRENT_USER,VBREG_HKEY_CURRENT_USER
'                   VBREG_HKEY_USERS,VBREG_HKEY_CURRENT_CONFIG,VBREG_HKEY_DYN_DATA
'
'           retour as variant   est optionnel vous pouvez y passer
'                   une collection, une listbox, une combo box, ou un
'                   tableau de chaine vide
'                   si vous ne l'utilisez pas, la fonction retournera
'                   seulement le nombre de sous-cl|fffd| files
'-----------------------------------------------------------------------------
' retourne le nombre de sous-cl|fffd| fille sur un long
'-----------------------------------------------------------------------------
    Dim LNG_index As Long
    Dim STR_name As String
    Dim STR_keyname As String
    Dim STR_type As String
    Dim LNG_resultat As Long
    Dim LNG_len As Long
    Dim LNG_cnt1 As Long
    
    LNG_cnt1 = 0
    STR_name = String(513, Chr$(0))
    STR_type = TypeName(retour)
    LNG_index = 0
    Do
        LNG_resultat = RegEnumKey(Base_key, LNG_index, ByVal STR_name, 512)
        If LNG_resultat = 0 And STR_type <> "Error" Then
            LNG_len = InStr(1, STR_name, Chr$(0))
            If LNG_len >= 2 Then STR_keyname = Left$(STR_name, LNG_len - 1)
            If STR_type = "Collection" Then retour.add item:=STR_keyname
            If STR_type = "ListBox" Then retour.AddItem STR_keyname
            If STR_type = "ComboBox" Then retour.AddItem STR_keyname
            If STR_type = "String()" Then
                ReDim Preserve retour(LNG_cnt1) As String
                retour(LNG_cnt1) = STR_keyname
                LNG_cnt1 = LNG_cnt1 + 1
            End If
        End If
        LNG_index = LNG_index + 1
    Loop While (LNG_resultat = 0)
    get_subkeys = LNG_index - 1
End Function

Public Function create_a_value(Base_key As Long, value_type As Long, value_name As String, value_data As Variant) As Long
' cette fonction cr|fffd|era une donn|fffd|e fille de la cl|fffd| dont vous fournissez
' le handle d'ouverture
'-----------------------------------------------------------------------------
' param :   key as long         provenant d'une pr|fffd|c|fffd|dente ouverture
'
'           value_type as long      une des constente pr|fffd|d|fffd|fie
'               VBREG_REG_NONE,VBREG_REG_NONE,VBREG_REG_EXPAND_SZ,VBREG_REG_BINARY,VBREG_REG_DWORD
'               VBREG_REG_DWORD_BIG_ENDIAN,VBREG_REG_LINK,VBREG_REG_MULTI_SZ
'               VBREG_REG_RESOURCE_LIST,VBREG_REG_FULL_RESOURCE_DESCRIPTOR
'               VBREG_REG_RESOURCE_REQUIREMENTS_LIST
'
'           value_name as string    chaine de caractaires repr|fffd|sentant le nom
'                               que vous voulez donner |fffd| votre donn|fffd|e fille
'
'           value_data as variant   vous pouvez y passer :
'               un tableau de d'octet 'Byte()'
'               un tableau de cahine 'String()'
'               un 'String'
'               un 'Long'
'-----------------------------------------------------------------------------
' retourne le r|fffd|sultat sur un long
'-----------------------------------------------------------------------------
' fonctionnement :
'   un value_data donn|fffd| en tant que Byte() sera transform|fffd| en un String et
'       repassera dans la moulinette
'   un value_data donn|fffd| en tant que String() ne pourra |fffd|tre utilis|fffd| uniquement
'       avec un value_type REG_MULTY_SZ. le value_type sera automatiquement chang|fffd|
'       en REG_MULTY_SZ
'   un value_data String ou Byte() utilis|fffd| avec un value_type VBREG_REG_DWORD |fffd|crira un
'       DWORD |fffd|quivalent |fffd| la chaine de caractaires par VAL()
'-----------------------------------------------------------------------------
    Dim STR_type As String
    Dim STR_value As String
    Dim LNG_value As Long
    Dim BLN_cont As Boolean
    Dim LNG_resultat As Long
    
    STR_value = "":  LNG_value = 0
    
    STR_type = TypeName(value_data)
    Do
        BLN_cont = False
        Select Case STR_type
        Case "Byte()"
            STR_value = tbyte_to_string(value_data)
            STR_type = "String"
            BLN_cont = True
        Case "String()"
            STR_value = tstring_to_string(value_data)
            value_type = VBREG_REG_MULTI_SZ
            STR_type = "String"
            BLN_cont = True
        Case "String"
            STR_value = value_data
            If value_type = VBREG_REG_MULTI_SZ Then
                STR_value = Replace(STR_value, Chr$(13) + Chr$(10), Chr$(0)) + Chr$(0)
                If Right$(STR_value, 2) <> Chr$(0) + Chr$(0) Then STR_value = STR_value + Chr$(0)
            End If
            If value_type = VBREG_REG_DWORD Then
                LNG_value = Val(STR_value)
                STR_type = "Long"
            Else
            End If
        Case "Long"
            LNG_value = value_data
        End Select
    Loop While BLN_cont
    If STR_type = "Long" Then
        LNG_resultat = RegSetValueEx(Base_key, value_name, 0&, VBREG_REG_DWORD, LNG_value, 4)
        create_a_value = LNG_resultat
    Else
        LNG_resultat = RegSetValueEx(Base_key, value_name, 0&, value_type, ByVal STR_value, Len(STR_value))
        create_a_value = LNG_resultat
    End If
End Function

Public Function read_a_value(Base_key As Long, value_name As String, Optional value_type As Long) As Variant
' cette fonction retournera la donn|fffd|e contenue par la valeur fille de la cl|fffd|
' dont vous fournissez le handle d'ouverture
'-----------------------------------------------------------------------------
' param :   Base_Key as long         provenant d'une pr|fffd|c|fffd|dente ouverture
'
'           value_name as string    chaine de caractaires repr|fffd|sentant le nom
'                               de la valeur dont vous voulez r|fffd|cup|fffd|rer la
'                               donn|fffd|e
'
'           value_type as long      est un param|fffd|tre optionel dans lequel sera
'                               stoqu|fffd| le type de donn|fffd|e contenu
'-----------------------------------------------------------------------------
' retourne le contenue dans une variable de type variante
'-----------------------------------------------------------------------------
    Dim STR_value As String
    Dim LNG_value As Long
    Dim LNG_lenbuffer As Long
    Dim LNG_resultat As Long
    Dim LNG_type As Long
    
    LNG_resultat = RegQueryValueEx(Base_key, value_name, 0&, LNG_type, 0&, LNG_lenbuffer)
    value_type = LNG_type
    If LNG_type = VBREG_REG_DWORD Then
        LNG_resultat = RegQueryValueEx(Base_key, value_name, 0&, VBREG_REG_DWORD, LNG_value, 4)
        read_a_value = LNG_value
    Else
        STR_value = String(LNG_lenbuffer, Chr$(0))
        LNG_resultat = RegQueryValueEx(Base_key, value_name, 0&, LNG_type, ByVal STR_value, LNG_lenbuffer)
        If LNG_type = VBREG_REG_SZ And STR_value <> "" Then STR_value = Left$(STR_value, Len(STR_value) - 1)
        If LNG_type = VBREG_REG_MULTI_SZ Then
            STR_value = Left$(STR_value, Len(STR_value) - 2)
            STR_value = Replace(STR_value, Chr$(0), Chr$(13) + Chr$(10))
        End If
        read_a_value = STR_value
    End If
End Function
Public Function delete_all_values(Base_key As Long) As Long
' cette fonction d|fffd|truiera les valeurs contenues dans une cl|fffd|
'-----------------------------------------------------------------------------
' param :   Base_Key as long provenant d'une pr|fffd|c|fffd|dente ouverture
'
'-----------------------------------------------------------------------------
' retourne le nombre de valeurs d|fffd|truites
'-----------------------------------------------------------------------------
    Dim ARY_valeur() As valeur
    Dim LNG_nbvaleur As Long
    Dim LNG_resultat As Long
    Dim LNG_cnt As Long
    
    LNG_nbvaleur = get_values(Base_key, ARY_valeur)
    For LNG_cnt = 0 To LNG_nbvaleur - 1
        LNG_resultat = delete_a_value(Base_key, ARY_valeur(LNG_cnt).nom)
    Next LNG_cnt
End Function
Public Function delete_a_value(Base_key As Long, value_name As String) As Long
' cette fonction d|fffd|truiera la valeur dont vous donn|fffd| le handel d'ouverture de
' la cl|fffd| parente
'-----------------------------------------------------------------------------
' param :   Base_Key as long provenant d'une pr|fffd|c|fffd|dente ouverture
'
'           value_name as string    chaine de caractaires repr|fffd|sentant le nom
'                               de la valeur que vous voulez d|fffd|truire
'-----------------------------------------------------------------------------
' retourne le r|fffd|sultat sur un long
'-----------------------------------------------------------------------------
    delete_a_value = RegDeleteValue(Base_key, ByVal value_name)
End Function
Public Sub save_a_reg_file(Base_key As String, file_name As String)
' cette proc|fffd|dure sauvegardera la cl|fffd| m|fffd|re dont vous founirez le chemin
' dans un fichier de type REG
'-----------------------------------------------------------------------------
' param :   Base_Key as string contient le chemin de la cl|fffd| |fffd| sauvegarder
'              EX : "VBREG_HKEY_LOCAL_MACHINE\SOFTWARE\test"
'
'           file_name as string contien le du fichier de sauvegarde
'-----------------------------------------------------------------------------
    Dim INT_filehandel As Integer
    Dim STR_hkey As String
    Dim STR_subkey As String
    Dim STR_parentkey As String
    Dim STR_tampo As String
    Dim LNG_key As Long
    Dim LNG_resultat As Long
    
    STR_tampo = "[" + Base_key + "]"
    STR_hkey = get_hkey(STR_tampo)
    STR_subkey = get_subkey(STR_tampo)
    STR_parentkey = STR_tampo
    LNG_key = open_a_key(STR_hkey, STR_parentkey + "\" + STR_subkey, VBREG_KEY_ALL_ACCESS, LNG_resultat)
    If LNG_resultat <> 0 Then
        Exit Sub
    End If
    INT_filehandel = FreeFile
    Open file_name For Output As #INT_filehandel
    Print #INT_filehandel, "REGEDIT4"
    Print #INT_filehandel, "[" + Base_key + "]"
    Call save_the_values(LNG_key, INT_filehandel)
    Call save_the_keys(LNG_key, Base_key, INT_filehandel)
    Close #INT_filehandel
    LNG_resultat = close_a_key(LNG_key)
End Sub
Private Sub save_the_keys(Base_key As Long, basekey_name As String, file_handel As Integer)
    Dim LNG_resultat As Long
    Dim LNG_key As Long
    Dim STR_keyname As String
    Dim LNG_pos As Long
    Dim LNG_index As Long
    
    Do
        STR_keyname = String(513, Chr$(0))
        LNG_resultat = RegEnumKey(Base_key, LNG_index, ByVal STR_keyname, 512)
        If LNG_resultat <> 0 Then
            Exit Do
        Else
            LNG_pos = InStr(1, STR_keyname, Chr$(0))
            If LNG_pos >= 2 Then STR_keyname = Left$(STR_keyname, LNG_pos - 1)
            Print #file_handel, "[" + basekey_name + "\" + STR_keyname + "]"
            LNG_key = open_a_key(Base_key, STR_keyname, VBREG_KEY_ALL_ACCESS, LNG_resultat)
            Call save_the_values(LNG_key, file_handel)
            Call save_the_keys(LNG_key, basekey_name + "\" + STR_keyname, file_handel)
            LNG_resultat = close_a_key(LNG_key)
        End If
        LNG_index = LNG_index + 1
    Loop
End Sub
Private Sub save_the_values(Base_key As Long, file_handel As Integer)
    Dim ARY_valeurs() As valeur
    Dim LNG_nbvaleurs As Long
    Dim STR_linetowrite As String
    Dim LNG_cnt1 As Long
    Dim LNG_cnt2 As Long
    Dim VRT_cnt3 As Variant
    
    LNG_nbvaleurs = get_values(Base_key, ARY_valeurs)
    For LNG_cnt1 = 0 To LNG_nbvaleurs - 1
        If ARY_valeurs(LNG_cnt1).nom = "" Then
            STR_linetowrite = "@="
        Else
            STR_linetowrite = Chr$(34) + ARY_valeurs(LNG_cnt1).nom + Chr$(34) + "="
        End If
        Select Case ARY_valeurs(LNG_cnt1).type
        Case VBREG_REG_SZ
            STR_linetowrite = STR_linetowrite + Chr$(34) + tbyte_to_string(ARY_valeurs(LNG_cnt1).Data)
            STR_linetowrite = Left$(STR_linetowrite, Len(STR_linetowrite) - 1) + Chr$(34)
        Case VBREG_REG_DWORD
            STR_linetowrite = STR_linetowrite + "dword:"
            For LNG_cnt2 = 3 To 0 Step -1
                STR_linetowrite = STR_linetowrite + Hex$(ARY_valeurs(LNG_cnt1).Data(LNG_cnt2))
            Next LNG_cnt2
        Case Else
            STR_linetowrite = STR_linetowrite + "hex(" + Trim$(Hex$(ARY_valeurs(LNG_cnt1).type)) + "):"
            For Each VRT_cnt3 In ARY_valeurs(LNG_cnt1).Data
                STR_linetowrite = STR_linetowrite + Trim$(Hex$(VRT_cnt3)) + ","
            Next VRT_cnt3
            STR_linetowrite = Left$(STR_linetowrite, Len(STR_linetowrite) - 1)
        End Select
        Print #file_handel, STR_linetowrite
    Next LNG_cnt1
End Sub
Public Sub restore_a_reg_file(file_name As String)
' cette proc|fffd|dure d|fffd|truira la cl|fffd| m|fffd|re contenue dans lefichier REG
' et fera la restoration de celui-ci
'-----------------------------------------------------------------------------
    Dim BYT_car1 As Byte
    Dim BYT_car2 As Byte
    Dim STR_tempo1 As String
    Dim STR_tempo2 As String
    Dim LNG_linetype As Long
    Dim LNG_key1 As Long
    Dim LNG_key2 As Long
    Dim STR_hkey As String
    Dim STR_subkey As String
    Dim STR_parentkey As String
    Dim STR_valuename As String
    Dim LNG_resultat As Long
    Dim INT_filehandel As Integer
    Dim BYT_finligne As Byte
    Dim LNG_debutpath As Long
    Dim LNG_finpath As Long
    
    BYT_finligne = 0: BYT_car1 = 0: BYT_car2 = 0
    INT_filehandel = FreeFile
    Open file_name For Binary As INT_filehandel
        While (Not EOF(INT_filehandel))
            Get #INT_filehandel, , BYT_car1
            If BYT_finligne = 1 And BYT_car1 <> 34 And BYT_car1 <> 64 And BYT_car1 <> 91 And (Not EOF(INT_filehandel)) Then
                BYT_finligne = 0
            End If
            If BYT_finligne = 1 And (BYT_car1 = 34 Or BYT_car1 = 64 Or BYT_car1 = 91 Or EOF(INT_filehandel)) Then
                BYT_finligne = 2
                LNG_linetype = 0
                STR_tempo1 = Mid$(STR_tempo2, 1, 1)
                If STR_tempo1 = "[" Then LNG_linetype = 1
                If STR_tempo1 = Chr$(34) Or STR_tempo1 = "@" Then LNG_linetype = 2
                If LNG_linetype = 1 Then
                    LNG_debutpath = InStr(STR_tempo2, "[")
                    LNG_finpath = InStr(STR_tempo2, "]")
                    STR_tempo2 = Mid$(STR_tempo2, LNG_debutpath, LNG_finpath - LNG_debutpath + 1)
                End If
                If LNG_linetype = 2 Then
                    STR_tempo1 = Right$(STR_tempo2, 2)
                    While (STR_tempo1 = Chr$(13) + Chr$(10) Or STR_tempo1 = Chr$(10) + Chr$(13))
                        STR_tempo2 = Left$(STR_tempo2, Len(STR_tempo2) - 2)
                        STR_tempo1 = Right$(STR_tempo2, 2)
                    Wend
                End If
            End If
            If (BYT_car1 = 13 And BYT_car2 = 10) Or (BYT_car1 = 10 And BYT_car2 = 13) Then
                BYT_finligne = 1
            End If
            If BYT_finligne = 2 Then
                If LNG_linetype = 1 Then
                    LNG_resultat = close_a_key(LNG_key1)
                    STR_hkey = get_hkey(STR_tempo2)
                    STR_subkey = get_subkey(STR_tempo2)
                    STR_parentkey = STR_tempo2
                    LNG_key1 = open_a_key(STR_hkey, STR_parentkey, VBREG_KEY_ALL_ACCESS, LNG_resultat)
                    LNG_resultat = delete_a_key(LNG_key1, STR_subkey)
                    LNG_key1 = create_a_key(STR_hkey, STR_parentkey + "\" + STR_subkey, LNG_resultat)
                End If
                If LNG_linetype = 2 Then
                    STR_valuename = get_value_name(STR_tempo2)
                    LNG_linetype = get_value_type(STR_tempo2)
                    LNG_resultat = create_a_value(LNG_key1, LNG_linetype, STR_valuename, STR_tempo2)
                End If
                STR_tempo2 = Chr$(BYT_car1)
                BYT_finligne = 0
            Else
                STR_tempo2 = STR_tempo2 + Chr$(BYT_car1)
                BYT_car2 = BYT_car1
            End If
        Wend
    Close INT_filehandel
End Sub
Private Function get_hkey(key_path As String) As String
    Dim STR_tempo As String
    Dim LNG_len As Long
    Dim LNG_cnt As Long
    Dim STR_car As String
    
    LNG_len = Len(key_path)
    For LNG_cnt = 1 To LNG_len
        STR_car = Mid$(key_path, LNG_cnt, 1)
        If STR_car <> "[" And STR_car <> "\" Then
            STR_tempo = STR_tempo + STR_car
        End If
        If STR_car = "\" Then
            key_path = Right$(key_path, LNG_len - LNG_cnt)
            key_path = Left$(key_path, Len(key_path) - 1)
            Exit For
        End If
    Next LNG_cnt
    get_hkey = STR_tempo
End Function
Private Function get_subkey(key_path As String) As String
    Dim STR_tempo As String
    Dim LNG_len As Long
    Dim LNG_cnt As Long
    Dim STR_car As String
    
    LNG_len = Len(key_path)
    For LNG_cnt = LNG_len To 1 Step -1
        STR_car = Mid$(key_path, LNG_cnt, 1)
        If STR_car = "\" Then
            STR_tempo = Right$(key_path, Len(key_path) - LNG_cnt)
            key_path = Left$(key_path, LNG_cnt - 1)
            Exit For
        End If
    Next LNG_cnt
    get_subkey = STR_tempo
End Function
Private Function get_value_name(value_line As String) As String
    Dim STR_tempo As String
    Dim LNG_len As Long
    Dim LNG_cnt As Long
    Dim STR_car As String
    
    LNG_len = Len(value_line)
    If Mid$(value_line, 1, 1) = "@" Then
        get_value_name = ""
        value_line = Mid$(value_line, 3, LNG_len - 2)
        Exit Function
    End If
    For LNG_cnt = 1 To LNG_len
        STR_car = Mid$(value_line, LNG_cnt, 1)
        If STR_car <> Chr$(34) And STR_car <> "=" Then
            STR_tempo = STR_tempo + STR_car
        End If
        If STR_car = "=" Then
            value_line = Right$(value_line, LNG_len - LNG_cnt)
            Exit For
        End If
    Next LNG_cnt
    get_value_name = STR_tempo
End Function
Private Function get_value_type(value_line As String) As Long
    Dim LNG_len As Long
    Dim STR_tempo1 As String
    Dim STR_tempo2 As String
    Dim STR_tempo3 As String
    Dim STR_tempo4 As String
    Dim STR_tempo5 As String
    
    LNG_len = Len(value_line)
    STR_tempo1 = Mid$(value_line, 1, 1)
    STR_tempo2 = Mid$(value_line, 1, 4)
    STR_tempo3 = Mid$(value_line, 1, 3)
    STR_tempo4 = Mid$(value_line, 1, 5)
    STR_tempo5 = Mid$(value_line, 5, 1)
    
    If STR_tempo3 = "hex" And STR_tempo2 <> "hex(" Then STR_tempo2 = "hex(": STR_tempo5 = "3"
    If STR_tempo1 = Chr$(34) Then
        get_value_type = VBREG_REG_SZ
        value_line = Mid$(value_line, 2, LNG_len - 2)
        Exit Function
    End If
    If STR_tempo2 = "hex(" Then
        get_value_type = Val("&H" + STR_tempo5)
        value_line = Right$(value_line, LNG_len - 7)
        If get_value_type = 7 Then value_line = Left$(value_line, Len(value_line) - 1)
        value_line = get_value_BI(value_line)
        Exit Function
    End If
    If STR_tempo4 = "dword" Or STR_tempo4 = "DWORD" Then
        get_value_type = VBREG_REG_DWORD
        value_line = Right$(value_line, LNG_len - 6)
        value_line = str$(Val("&H" + value_line))
        Exit Function
    End If
    get_value_type = 0
End Function
Private Function get_value_BI(value_line As String) As String
    Dim STR_tempo As String
    Dim LNG_len As Long
    Dim STR_car As String
    Dim LNG_cnt As Long
    
    value_line = Replace(value_line, ",", "")
    LNG_len = Len(value_line)
    For LNG_cnt = 1 To LNG_len Step 2
        STR_car = Mid$(value_line, LNG_cnt, 2)
        STR_tempo = STR_tempo + Chr$(Val("&H" + STR_car))
    Next LNG_cnt
    get_value_BI = STR_tempo
End Function
Public Sub delete_association(Ext_name As String)
' cette proc|fffd|dure d|fffd|truira une association entre un type de fichier et une
' application
'-----------------------------------------------------------------------------
' param :   Ext_name as string      extention de votre type de fichier
'                                    EX=".xxx"
'-----------------------------------------------------------------------------
    Dim LNG_key As Long
    Dim LNG_resultat As Long
    Dim STR_tempo As String
    
    LNG_key = open_a_key(VBREG_HKEY_CLASSES_ROOT, Ext_name, VBREG_KEY_ALL_ACCESS, LNG_resultat)
    If LNG_resultat <> 0 Then
        LNG_key = open_a_key(VBREG_HKEY_LOCAL_MACHINE, "SOFTWARE\Classes\" + Ext_name, VBREG_KEY_ALL_ACCESS, LNG_resultat)
        If LNG_resultat <> 0 Then Exit Sub
    End If
    STR_tempo = read_a_value(LNG_key, "")
    LNG_resultat = close_a_key(LNG_key)
    LNG_key = open_a_key(VBREG_HKEY_CLASSES_ROOT, "", VBREG_KEY_ALL_ACCESS)
    LNG_resultat = delete_a_key(LNG_key, Ext_name)
    LNG_resultat = delete_a_key(LNG_key, STR_tempo)
    LNG_resultat = close_a_key(LNG_key)
    LNG_key = open_a_key(VBREG_HKEY_LOCAL_MACHINE, "SOFTWARE\Classes", VBREG_KEY_ALL_ACCESS)
    LNG_resultat = delete_a_key(LNG_key, Ext_name)
    LNG_resultat = delete_a_key(LNG_key, STR_tempo)
    close_a_key (LNG_key)
End Sub
Public Sub create_association(Ext_name As String, App_name As String, Cmd_lines As Variant, Icone As String, comment As String, Options As Long)
' cette proc|fffd|dure cr|fffd|era une association entre un type de fichier et une
' application
'-----------------------------------------------------------------------------
' param :   Ext_name as string      extention de votre type de fichier
'                                    EX=".xxx"
'
'           App_name as string      nom de votre programme
'
'           Cmd_line as variant     contient un tableau de string
'                       var(0,n)=nom de l'action
'                       var(1,n)=command |fffd| ex|fffd|cuter
'
'           Icone as string         contient le fichier .ico de l'icone
'                                   repr|fffd|sentant votre type de fichiers
'
'           Comment as string       ligne de commantaire qui sera incluse
'                                   le gestionnaire des extentions (dans
'                                   les option d'affichage d'un explorateur)
'
'           Options as long         option possible pour la cr|fffd|ation de
'                                   votre association=
'                                   VBREG_QUICKVIEW= autorise le quickview
'                                   VBREG_SHOWEXT= oblige |fffd| montrer l'extention
'-----------------------------------------------------------------------------
    Dim STR_filetype As String
    Dim LNG_resultat As Long
    Dim LNG_key As Long
    Dim STR_type As String
    Dim STR_shellname As String
    Dim STR_shellcommand As String
    Dim BLN_quickview As Boolean
    Dim BLN_showext As Boolean
    Dim LNG_cnt As Long
    
    If Options And VBREG_QUICKVIEW = VBREG_QUICKVIEW Then BLN_quickview = True
    If Options And VBREG_SHOWEXT = VBREG_SHOWEXT Then BLN_showext = True
    
    STR_type = TypeName(Cmd_lines)
    If STR_type <> "String()" Then Exit Sub

    STR_filetype = App_name + " files"
    LNG_key = create_a_key(VBREG_HKEY_CLASSES_ROOT, Ext_name)
    LNG_resultat = create_a_value(LNG_key, VBREG_REG_SZ, "", STR_filetype)
    LNG_key = create_a_key(VBREG_HKEY_CLASSES_ROOT, STR_filetype)
    LNG_resultat = create_a_value(LNG_key, VBREG_REG_SZ, "", comment)
    LNG_resultat = create_a_value(LNG_key, VBREG_REG_BINARY, "EditFlags", Chr$(0) + Chr$(0) + Chr$(0) + Chr$(0))
    If BLN_showext = True Then LNG_resultat = create_a_value(LNG_key, VBREG_REG_BINARY, "AlwaysShowExt", "")
    LNG_key = create_a_key(LNG_key, "DefaultIcon")
    LNG_resultat = create_a_value(LNG_key, VBREG_REG_SZ, "", Icone)

    LNG_key = create_a_key(VBREG_HKEY_LOCAL_MACHINE, "SOFTWARE\Classes\" + Ext_name)
    LNG_resultat = create_a_value(LNG_key, VBREG_REG_SZ, "", STR_filetype)
    LNG_key = create_a_key(VBREG_HKEY_LOCAL_MACHINE, "SOFTWARE\Classes\" + STR_filetype)
    LNG_resultat = create_a_value(LNG_key, VBREG_REG_SZ, "", comment)
    LNG_resultat = create_a_value(LNG_key, VBREG_REG_BINARY, "EditFlags", Chr$(0) + Chr$(0) + Chr$(0) + Chr$(0))
    If BLN_showext = True Then LNG_resultat = create_a_value(LNG_key, VBREG_REG_BINARY, "AlwaysShowExt", "")
    LNG_key = create_a_key(LNG_key, "DefaultIcon")
    LNG_resultat = create_a_value(LNG_key, VBREG_REG_SZ, "", Icone)

    If BLN_quickview = True Then
        LNG_key = create_a_key(VBREG_HKEY_CLASSES_ROOT, STR_filetype)
        LNG_key = create_a_key(LNG_key, "BLN_quickview")
        LNG_resultat = create_a_value(LNG_key, VBREG_REG_SZ, "", "*")
        LNG_key = create_a_key(VBREG_HKEY_LOCAL_MACHINE, "SOFTWARE\Classes\" + STR_filetype)
        LNG_key = create_a_key(LNG_key, "BLN_quickview")
        LNG_resultat = create_a_value(LNG_key, VBREG_REG_SZ, "", "*")
    End If
    
    On Error GoTo fin_boucle
    While (True)
        STR_shellname = Cmd_lines(0, LNG_cnt)
        STR_shellcommand = Cmd_lines(1, LNG_cnt)
        If STR_shellname <> "" And STR_shellcommand <> "" Then
            LNG_key = create_a_key(VBREG_HKEY_CLASSES_ROOT, STR_filetype)
            LNG_key = create_a_key(LNG_key, "shell\" + STR_shellname + "\command")
            LNG_resultat = create_a_value(LNG_key, VBREG_REG_SZ, "", STR_shellcommand)

            LNG_key = create_a_key(VBREG_HKEY_LOCAL_MACHINE, "SOFTWARE\Classes\" + STR_filetype)
            LNG_key = create_a_key(LNG_key, "shell\" + STR_shellname + "\command")
            LNG_resultat = create_a_value(LNG_key, VBREG_REG_SZ, "", STR_shellcommand)
        End If
        LNG_cnt = LNG_cnt + 1
    Wend
fin_boucle:
        On Error GoTo 0
End Sub
Private Function tbyte_to_string(byte_array As Variant) As String
    Dim VRT_cnt As Variant
    
    For Each VRT_cnt In byte_array
        tbyte_to_string = tbyte_to_string + Chr$(VRT_cnt)
    Next VRT_cnt
End Function
Private Function tstring_to_string(string_array As Variant) As String
    Dim VRT_cnt As Variant
    
    For Each VRT_cnt In string_array
        If VRT_cnt <> "" Then tstring_to_string = tstring_to_string + VRT_cnt + Chr$(0)
    Next VRT_cnt
    tstring_to_string = tstring_to_string + Chr$(0)
End Function
Private Function string_to_tstring(a_string As String) As String()
    Dim LNG_len As Long
    Dim LNG_cnt1 As Long
    Dim LNG_cnt2 As Long
    Dim STR_retour() As String
    Dim STR_car As String
    Dim STR_mot As String
    
    LNG_cnt2 = 0
    LNG_len = Len(a_string)
    For LNG_cnt1 = 1 To LNG_len
        STR_car = Mid$(a_string, LNG_cnt1, 1)
        If STR_car = Chr$(0) Then
            If STR_mot <> "" Then
                ReDim Preserve STR_retour(LNG_cnt2) As String
                STR_retour(LNG_cnt2) = STR_mot
                LNG_cnt2 = LNG_cnt2 + 1
            End If
            STR_mot = ""
        Else
            STR_mot = STR_mot + STR_car
        End If
    Next LNG_cnt1
    string_to_tstring = STR_retour
End Function
Private Function string_to_tbyte(a_string As String) As Byte()
    Dim LNG_len As Long
    Dim LNG_cnt1 As Long
    Dim LNG_cnt2 As Long
    Dim BYT_retour() As Byte
    Dim STR_car As String
    
    LNG_cnt2 = 0
    LNG_len = Len(a_string)
    For LNG_cnt1 = 1 To LNG_len
        STR_car = Mid$(a_string, LNG_cnt1, 1)
        ReDim Preserve BYT_retour(LNG_cnt2) As Byte
        BYT_retour(LNG_cnt2) = Asc(STR_car)
        LNG_cnt2 = LNG_cnt2 + 1
    Next LNG_cnt1
    string_to_tbyte = BYT_retour
End Function



' ******************************
'* indique si la surveillance dynamique est actif
' ******************************
Public Function HasDynamique() As Boolean
    HasDynamique = (ReturnParam_Reg(cRepXLA & cDynaScrXLA) = "1")
End Function





' ******************************
'* test si l'incription d|fffd|cimales dans la registy a |fffd|t|fffd| faites
' ******************************
Public Sub TestInscriptDeci()
Dim sValue As String
    
    sValue = ReturnParam_Reg(cRepXLA & cDeciScrXLA)
    
    If sValue = "" Then
        UpdateValue cRepXLA & cDeciScrXLA, "3"
    End If
    
End Sub

    
' ******************************
'* Retourne le chemin de Scribe *
' ******************************

Function ReturnParam_Reg(sPath As String) As Variant
    
    Dim hResultat As Long
    Dim hResult As Long

    Dim sHKEY As String
    Dim sParam As String
    
    'Recherche du registre de base et de la propri|fffd|t|fffd| recherch|fffd|e
    CutConst sPath, sHKEY, sParam
    
    hResult = open_a_key(sHKEY, sPath, VBREG_KEY_READ, hResultat)
        
    ' si la cl|fffd| n'existe pas on la cr|fffd|er et les valeurs attendues
    If hResultat = VBREG_ERROR_SUCCESS Then
        ' s'assure que la cl|fffd| path est pr|fffd|sente
        ReturnParam_Reg = read_a_value(hResult, sParam)
    End If

End Function


' ***********************************************************
'* S|fffd|paration du registre de base, du chemin et du param|fffd|tre *
' ***********************************************************

Sub CutConst(ByRef sPath As String, ByRef sHKEY As String, ByRef sParam As String)

    Dim i As Integer
    i = InStr(1, sPath, "\")
    sHKEY = Mid(sPath, 1, i - 1)
    sPath = Mid(sPath, i + 1)
    i = InStrRev(sPath, "\")
    sParam = Mid(sPath, i + 1)
    sPath = Mid(sPath, 1, i - 1)

End Sub

' ******************************************************
'* Renvoie la version de scribe sous la forme d'un r|fffd|el *
' ******************************************************
''
''Function ScribeVersion() As Single
''
''    Dim sV As String
''
''    sV = ReturnParam_Reg(cRepScribe & cVersion)
''
''    If sV <> "" Then ScribeVersion = CDbl(ExtraNom(sV, 1, ".") & "," & ExtraNom(sV, 2, "."))
''
''End Function

' *********************************
'* Met |fffd| jour une valeur existante *
' *********************************

Sub UpdateValue(sFullPath As String, sValue As String)

    Dim hResultat As Long
    Dim hResult As Long
 
    Dim sHKEY As String
    Dim sParam As String
    
    'Recherche du registre de base et de la propri|fffd|t|fffd| recherch|fffd|e
    CutConst sFullPath, sHKEY, sParam
    
    hResult = open_a_key(sHKEY, sFullPath, VBREG_KEY_ALL_ACCESS, hResultat)
        
    ' si la cl|fffd| existe on met |fffd| jour la valeur
    If hResultat <> VBREG_ERROR_SUCCESS Then
        hResult = create_a_key(sHKEY, sFullPath, hResultat)
    End If
    hResultat = create_a_value(hResult, VBREG_REG_SZ, sParam, sValue)
    
End Sub




Attribute VB_Name = "modRibbon"
Option Explicit

Public pRibbonUI As IRibbonui

Private IsRibbonBeingRefreshed As Boolean

' Ribbon callback : runs when ribbon is loaded
Private Sub onLoadRibbon_SpigaoConnector(ribbon As Object)
    ' Get a reference to the ribbon
    Set pRibbonUI = ribbon
End Sub
Public Sub loadRibbon()

    Set pRibbonUI = Application.Windows
End Sub

Public Sub ActualiseRibbonDevis()
    On Error Resume Next
    If pRibbonUI Is Nothing Then Exit Sub
    If IsRibbonBeingRefreshed Then Exit Sub
    If sgExcelApplication.isMuted Then Exit Sub
    
    IsRibbonBeingRefreshed = True
    
    pRibbonUI.InvalidateControl "btView360"
    pRibbonUI.InvalidateControl "btDwnldDce"
    pRibbonUI.InvalidateControl "btConsult"
    pRibbonUI.InvalidateControl "btPriceStrength"
    pRibbonUI.InvalidateControl "btCoef"
    pRibbonUI.InvalidateControl "btCumul"
    pRibbonUI.InvalidateControl "btImport"
    pRibbonUI.InvalidateControl "btOpenFolder"
    pRibbonUI.InvalidateControl "btBpx"

    pRibbonUI.InvalidateControl "chkChapterVisibility"
    pRibbonUI.InvalidateControl "chkPriceItemVisibility"
    pRibbonUI.InvalidateControl "chkCommentVisibility"
    pRibbonUI.InvalidateControl "chkTaxeItemVibility"
    pRibbonUI.InvalidateControl "chkOtherItemVisibility"
    pRibbonUI.InvalidateControl "mnuHideLines"
    pRibbonUI.InvalidateControl "btIndent"
    pRibbonUI.InvalidateControl "btShowTotalOnChapter"
    
    pRibbonUI.InvalidateControl "btExport"
    pRibbonUI.InvalidateControl "gpSpigaoConverter"
    pRibbonUI.InvalidateControl "btConvert"
    pRibbonUI.InvalidateControl "cmdConvert"
    pRibbonUI.InvalidateControl "gpSpigaoProgapWin"
    pRibbonUI.InvalidateControl "btGenProgapWinFile"
    pRibbonUI.InvalidateControl "gpSpigaoOnayaFacturation"
    pRibbonUI.InvalidateControl "btGenOnayaFacturationFile"
    pRibbonUI.InvalidateControl "gpSpigaoQDV6"
    pRibbonUI.InvalidateControl "btGenQDV6File"
    pRibbonUI.InvalidateControl "gpSpigaoAmiprix"
    pRibbonUI.InvalidateControl "btGenAmiprixFile"
    
    pRibbonUI.InvalidateControl "gpSpigaoPlanning"
    pRibbonUI.InvalidateControl "btOpenPlanning"
    pRibbonUI.InvalidateControl "btImportDeal"
    pRibbonUI.InvalidateControl "btShowDeal"
    pRibbonUI.InvalidateControl "btOpenDeal"
    
    
fin:
    If Err Then MsgBox Err.Description
    IsRibbonBeingRefreshed = False
End Sub

'GetVisible
''Public Sub GetVisible(control As Object, ByRef visible)
''    visible = False
''    'If control.Id = "sc:gpSpigaoProgapWin" Then visible = sgSpigaoConfiguration.IsExtensionProgapWinEnabled And mIsDevisSpigaoActivated
''    'If control.Id = "sc:gpSpigaoOnayaFacturation" Then visible = sgSpigaoConfiguration.IsExtensionOnayaFacturationEnabled And mIsDevisSpigaoActivated
''    If control.Id = "sc:gpSpigaoConverter" And mIsSpigaoOldXlsActivated Then
''        visible = True
''    End If
''    If control.Id = "sc:gpSpigaoProgapWin" And sgSpigaoConfiguration.IsExtensionProgapWinEnabled Then
''        visible = True
''    End If
''    If control.Id = "sc:gpSpigaoOnayaFacturation" And sgSpigaoConfiguration.IsExtensionOnayaFacturationEnabled Then
''        visible = True
''    End If
''End Sub
Public Sub GetVisibleSpigaoPlanning(control As Object, ByRef visible)
    visible = sgSpigaoConfiguration.IsSpigaoPlanningEnabled
    'visible = False
End Sub
Public Sub GetVisiblegpSpigaoConverter(control As Object, ByRef visible)
    visible = mIsSpigaoOldXlsActivated
End Sub
Public Sub GetVisiblegpSpigaoProgapWin(control As Object, ByRef visible)
    visible = sgSpigaoConfiguration.IsExtensionProgapWinEnabled
End Sub
Public Sub GetVisiblegpSpigaoQDV6(control As Object, ByRef visible)
    visible = sgSpigaoConfiguration.IsExtensionQDV6Enabled
End Sub
Public Sub GetVisiblegpSpigaoOnayaFacturation(control As Object, ByRef visible)
    visible = sgSpigaoConfiguration.IsExtensionOnayaFacturationEnabled
End Sub
Public Sub GetVisiblegpSpigaoAmiprix(control As Object, ByRef visible)
    visible = sgSpigaoConfiguration.IsExtensionAmiprixEnabled
End Sub
Public Sub GetVisibleStudyTools(control As Object, ByRef visible)
    visible = True
    'visible = mIsDevisSpigaoActivated
End Sub
'Bouton vue 360 btView360_Enabled
Public Sub btView360_Enabled(control As Object, ByRef returnedVal)
On Error Resume Next
    returnedVal = False
    If Not gCurrentStudy Is Nothing Then
       returnedVal = gCurrentStudy.hasDealId
       Exit Sub
    End If
    If Not gCurrentPlanning Is Nothing Then
        returnedVal = True
    End If
End Sub
Public Sub btView360_Click(control As Object)
    If Not gCurrentStudy Is Nothing Then
        gCurrentStudy.showDeal
    End If
    If Not gCurrentPlanning Is Nothing Then
        mShowDeal
    End If
End Sub


'Etiquette de l'onglet |fffd|tude
Public Sub gpSpigaoStudy_Label(control As Object, ByRef label)
    label = "Devis Spigao " & cAppCurrentVersion
End Sub

'Bouton nouvelle |fffd|tude
Public Sub btOpenStudyBySelectedDeal_Click(control As Object)
    mOpenDieBySelectedDeals
End Sub
'Depuis selecteddeals
Public Sub btOpenStudyByList_Click(control As Object)
    mOpenDieBySelectedDeals
End Sub
'Depuis sp|fffd|cific
Public Sub btOpenStudyBySpecific_Click(control As Object)
    mOpenDieBySpecificDie
End Sub
'Depuis |fffd|tude excel
Public Sub btOpenStudyByXlsx_Click(control As Object)
    mOpenDieByExcelFile
End Sub

't|fffd|l|fffd|charger dce
Public Sub btDwnldDce_Enabled(control As Object, ByRef returnedVal)
On Error Resume Next
    returnedVal = False
    If Not gCurrentStudy Is Nothing Then
       returnedVal = gCurrentStudy.hasDealId
    End If
End Sub
Public Sub btDwnldDce_Click(control As Object)
    mGoToDownloadDcePage
End Sub
't|fffd|l|fffd|charger die
Public Sub btDwnldDie_Enabled(control As Object, ByRef returnedVal)
On Error Resume Next
    returnedVal = False

End Sub
Public Sub btDwnldDie_Click(control As Object)
    
End Sub
't|fffd|l|fffd|charger die
Public Sub btPlanningOpenFolder_Enabled(control As Object, ByRef returnedVal)
On Error Resume Next
    returnedVal = False

End Sub
Public Sub btPlanningOpenFolder_Click(control As Object)
    
End Sub

'Consulter btConsult_Enabled
Public Sub btConsult_Enabled(control As Object, ByRef returnedVal)
    returnedVal = mIsDevisSpigaoActivated
End Sub
Public Sub btConsult_Click(control As Object)
    mGenConsultation
End Sub

'PriceStrength
Public Sub btPriceStrength_Enabled(control As Object, ByRef returnedVal)
    returnedVal = False
    If mIsDevisSpigaoActivated Then returnedVal = gCurrentStudy.activeSS.ST.isPriceStrengthallowed
End Sub
Public Sub btPriceStrength_Label(control As Object, ByRef label)
    label = "Afficher le poids des prix"
    If gCurrentStudy Is Nothing Then Exit Sub
    If gCurrentStudy.activeSS.IsPriceStrengthEnabled Then
        label = "Masquer le poids des prix"
    End If
End Sub
Public Sub btPriceStrength_Click(control As Object)
    mTogglePriceStrength
End Sub

'Coefs
Public Sub btCoef_Enabled(control As Object, ByRef returnedVal)
    returnedVal = False
    If mIsDevisSpigaoActivated Then returnedVal = gCurrentStudy.activeSS.ST.isCoefAllowed
End Sub
Public Sub btCoef_Label(control As Object, ByRef label)
    label = "Activer les coefficients"
    If gCurrentStudy Is Nothing Then Exit Sub
    If gCurrentStudy.activeSS.IsCoefEnabled Then
        label = "D|fffd|sactiver les coefficients"
    End If
End Sub
Public Sub btCoef_Click(control As Object)
    mToggleCoefs
End Sub

'Cumul des quantit|fffd|s
Public Sub btCumul_Enabled(control As Object, ByRef returnedVal)
    returnedVal = False
    If mIsDevisSpigaoActivated Then returnedVal = gCurrentStudy.activeSS.ST.isCumulAllowed
End Sub
Public Sub btCumul_Label(control As Object, ByRef label)
    label = "Activer le cumul des quantit|fffd|s"
    If gCurrentStudy Is Nothing Then Exit Sub
    If (gCurrentStudy.activeSS.Mode = eStudySheetMode.Cumul) Then
        label = "D|fffd|sactiver le cumul des quantit|fffd|s"
    End If
End Sub
Public Sub btCumul_Click(control As Object)
    mToggleCumulQuantity
End Sub

'Import |fffd|tude de prix
Public Sub btImport_Enabled(control As Object, ByRef returnedVal)
    returnedVal = mIsDevisSpigaoActivated
End Sub
Public Sub btImport_Click(control As Object)
    mImportStudy
End Sub

'Ouvrir r|fffd|pertoire
Public Sub btOpenFolder_Enabled(control As Object, ByRef returnedVal)
    returnedVal = mIsDevisSpigaoActivated
End Sub
Public Sub btOpenFolder_Click(control As Object)
    mOpenDealFolder
End Sub


'Affichage Bp
Public Sub btBpx_Enabled(control As Object, ByRef returnedVal)
    returnedVal = mIsDevisSpigaoActivated
End Sub
Public Sub btBpx_Click(control As Object)
    mShowBpx
End Sub

'Indentation
Public Sub btIndent_Enabled(control As Object, ByRef returnedVal)
    returnedVal = mIsDevisSpigaoActivated
End Sub
Public Sub btIndent_Click(control As Object)
    mIndent
End Sub

'Filtre
Public Sub mnuHideLines_Enabled(control As Object, ByRef returnedVal)
    returnedVal = mIsDevisSpigaoActivated
End Sub
Public Sub chkTogglePriceItemVibility_getPressed(control As Object, ByRef returnedVal)
    If mIsDevisSpigaoActivated Then
        returnedVal = Not gCurrentStudy.activeSS.IsRowsPriceHidden
    Else
        returnedVal = True
    End If
End Sub
Public Sub chkToggleChapterVibility_getPressed(control As Object, ByRef returnedVal)
    If mIsDevisSpigaoActivated Then
        returnedVal = Not gCurrentStudy.activeSS.IsRowsChapterHidden
    Else
        returnedVal = True
    End If
End Sub
Public Sub chkToggleCommentVibility_getPressed(control As Object, ByRef returnedVal)
    If mIsDevisSpigaoActivated Then
        returnedVal = Not gCurrentStudy.activeSS.IsRowsCommentHidden
    Else
        returnedVal = True
    End If
End Sub
Public Sub chkToggleTaxeItemVibility_getPressed(control As Object, ByRef returnedVal)
    If mIsDevisSpigaoActivated Then
        returnedVal = Not gCurrentStudy.activeSS.IsRowsTaxeHidden
    Else
        returnedVal = True
    End If
End Sub
Public Sub chkToggleOtherItemVibility_getPressed(control As Object, ByRef returnedVal)
    If mIsDevisSpigaoActivated Then
        returnedVal = Not gCurrentStudy.activeSS.IsRowsOtherHidden
    Else
        returnedVal = True
    End If
End Sub

Public Sub chkTogglePriceItemVibility_onAction(control As Object, pressed As Boolean)
    If mIsDevisSpigaoActivated Then
        mToggleFilter_ForPrice pressed
    End If
End Sub
Public Sub chkToggleChapterVibility_onAction(control As Object, pressed As Boolean)
    If mIsDevisSpigaoActivated Then
        mToggleFilter_ForChapter pressed
    End If
End Sub
Public Sub chkToggleCommentVibility_onAction(control As Object, pressed As Boolean)
    If mIsDevisSpigaoActivated Then
        mToggleFilter_ForComment pressed
    End If
End Sub
Public Sub chkToggleTaxeItemVibility_onAction(control As Object, pressed As Boolean)
    If mIsDevisSpigaoActivated Then
        mToggleFilter_ForTaxes pressed
    End If
End Sub
Public Sub chkToggleOtherItemVibility_onAction(control As Object, pressed As Boolean)
    If mIsDevisSpigaoActivated Then
        mToggleFilter_ForOthers pressed
    End If
End Sub

'Affichage des sous-totaux
Public Sub btShowTotalOnChapter_Enabled(control As Object, ByRef returnedVal)
    returnedVal = False
    If mIsDevisSpigaoActivated Then
        returnedVal = Not gCurrentStudy.activeSS.ST.hasTemplateForChapterItem
    End If
End Sub
Public Sub btShowTotalOnChapter_Label(control As Object, ByRef label)
    label = "Afficher les totaux par chapitre"
    If gCurrentStudy Is Nothing Then Exit Sub
    If Not gCurrentStudy.activeSS.isChapterTotalHidden Then
        label = "Masquer les totaux par chapitre"
    End If
End Sub
Public Sub btShowTotalOnChapter_Click(control As Object)
    If gCurrentStudy Is Nothing Then Exit Sub
    mHideChapterTotal Not gCurrentStudy.activeSS.isChapterTotalHidden
End Sub

'Impression
Public Sub btExport_Enabled(control As Object, ByRef returnedVal)
    returnedVal = mIsDevisSpigaoActivated Or mIsSpigaoOldXlsActivated
End Sub
Public Sub btExport_Click(control As Object)
    mExportSpigao
End Sub

'Config
Public Sub btConfig_Click(control As Object) '!
    mConfiguration
End Sub

'A propos
Public Sub btAbout_Click(control As Object) '!
    mAbout
End Sub

'Aide
Public Sub btHelp_Click(control As Object) '!
    mGoToSupport
End Sub

'Autologin
Public Sub btAutoLogin_Click(control As Object) '!
    mGoToSpigao
End Sub

'*******************************
'Planning
'*******************************
Public Sub btOpenPlanning_Click(control As Object)
    mPlanningShow
End Sub
Public Sub btOpenPlanning_Enabled(control As Object, ByRef returnedVal)
    returnedVal = True
End Sub
Public Sub btImportDeal_Click(control As Object)
    mSynchronisePlanning
End Sub
Public Sub btImportDeal_Enabled(control As Object, ByRef returnedVal)
    returnedVal = mIsPlanningSpigaoActivated
End Sub
Public Sub btImportOneDeal_Click(control As Object)
    mPlannningImportOneDeal
End Sub
Public Sub btImportOneDeal_Enabled(control As Object, ByRef returnedVal)
    returnedVal = mIsPlanningSpigaoActivated
End Sub

Public Sub btDeal_Enabled(control As Object, ByRef returnedVal)
    returnedVal = False
    If Not gCurrentPlanning Is Nothing Then
        returnedVal = gCurrentPlanning.isDealSelected
    End If
End Sub

Public Sub btShowDeal_click(control As Object)
    mShowDeal
End Sub
Public Sub btOpenDeal_Click(control As Object)
    If Not gCurrentPlanning Is Nothing Then
        gCurrentPlanning.openFolder
    End If
End Sub
'******************************
'Extensions
'*******************************
'convertisseur old excel to new excel
Public Sub btConvert_Enabled(control As Object, ByRef returnedVal)
Dim oEs As aExcelSheet
    returnedVal = mIsSpigaoOldXlsActivated
End Sub
Public Sub btConvert_Click(control As Object)
    mOpenDieByConvertingOldXls
End Sub

'progap
Public Sub btGenProgapWinFile_Enabled(control As Object, ByRef returnedVal)
Dim oEs As aExcelSheet
    returnedVal = mIsDevisSpigaoActivated
End Sub
Public Sub btGenProgapWinFile_Click(control As Object)
    mGenProgapwinFile
End Sub

'Onaya facturation
Public Sub btGenOnayaFacturationFile_Enabled(control As Object, ByRef returnedVal)
Dim oEs As aExcelSheet
    returnedVal = mIsDevisSpigaoActivated
End Sub
Public Sub btGenOnayaFacturationFile_Click(control As Object)
    mGenOnayaFacturationFile
End Sub

'QDV6
Public Sub btGenQDV6File_Enabled(control As Object, ByRef returnedVal)
Dim oEs As aExcelSheet
    returnedVal = mIsDevisSpigaoActivated
End Sub
Public Sub btGenQDV6File_Click(control As Object)
    mGenQDV6File
End Sub

'Amiprix
Public Sub btGenAmiprixFile_Enabled(control As Object, ByRef returnedVal)
Dim oEs As aExcelSheet
    returnedVal = mIsDevisSpigaoActivated
End Sub
Public Sub btGenAmiprixFile_Click(control As Object)
    mGenAmiprixFile
End Sub
Attribute VB_Name = "modSingletons"
Option Explicit

Private pSpigaoExcelApplication As aExcelApplication
Private pSpigaoFs As aFileSystem
Private pSpigaoStudyBuilder As cStudyBuilder
Private pSpigaoStudySheetBuilder As cStudySheetBuilder
Private pSpigaoWkItemBuilder As cWkItemBuilder
Private pSpigaoIulm As aSpigao
Private pSpigaoEnvironnement As cEnvironnement
Private pSpigaoExcelWorkbookBuilder As aExcelWorkbookBuilder
Private pSpigaoExcelSheetBuilder As aExcelSheetBuilder
Private pSpigaoDealFolder As cDealFolder
Private pSpigaoRegex As aregularexpression
'Private pSpigaoPlanningBook As clsSpigaoPlanningBook
'Private pSpigaoXml As clsXmlManager
Private pSpigaoConfiguration As cSpigaoConfiguration


Private pSpigaoOldRef As cspigaoOldRefBuilder
Private pSpigaoWkDataBuilder As cWkDataBuilder
Private pSpigaoExcelRangeBuilder As aExcelRangeBuilder

Private pSpigaoStudySubDetailBuilder As cStudySubDetailBuilder
Private pSpigaoPlanningBuilder As cSpigaoPlanningBuilder
Private pSpigaoDealBuilder As cDealBuilder
Private pSpigaoWsManager As aWebService
Private pSpigaoIulmSe As aSpigaoSe


'Gestion du FileSystem
Public Function sgFileSystem() As aFileSystem
    If pSpigaoFs Is Nothing Then
        Set pSpigaoFs = New aFileSystem
    End If
    
    Set sgFileSystem = pSpigaoFs
End Function
'Gestion Excel
Public Function sgExcelApplication() As aExcelApplication
    If pSpigaoExcelApplication Is Nothing Then
        Set pSpigaoExcelApplication = New aExcelApplication
    End If
    
    Set sgExcelApplication = pSpigaoExcelApplication
End Function

'SpigaoIULM
Public Function sgSpigao() As aSpigao

    If pSpigaoIulm Is Nothing Then
        Set pSpigaoIulm = New aSpigao
    Else
        If pSpigaoIulm.Loader Is Nothing Then
            Set pSpigaoIulm = New aSpigao
        End If
    End If
    
    Set sgSpigao = pSpigaoIulm
End Function

'Environnement
Public Function sgEnvironnement() As cEnvironnement
    If pSpigaoEnvironnement Is Nothing Then
        Set pSpigaoEnvironnement = New cEnvironnement
    End If
    Set sgEnvironnement = pSpigaoEnvironnement
End Function

'Gestionnaire du r|fffd|pertoire d'affaire
Public Function sgDealFolderManager() As cDealFolder
    If pSpigaoDealFolder Is Nothing Then
        Set pSpigaoDealFolder = New cDealFolder
    End If
    Set sgDealFolderManager = pSpigaoDealFolder
End Function

'Gestionnaire d'expressions r|fffd|guli|fffd|res
Public Function sgRegex() As aregularexpression
    If pSpigaoRegex Is Nothing Then
        Set pSpigaoRegex = New aregularexpression
    End If
    Set sgRegex = pSpigaoRegex
End Function
'--------------------------------------------------------
' Builder
'--------------------------------------------------------
 Public Function sgStudyBuilder() As cStudyBuilder
    If pSpigaoStudyBuilder Is Nothing Then
        Set pSpigaoStudyBuilder = New cStudyBuilder
    End If
    Set sgStudyBuilder = pSpigaoStudyBuilder
        
End Function
Public Function sgStudySheetBuilder() As cStudySheetBuilder
    If pSpigaoStudySheetBuilder Is Nothing Then
        Set pSpigaoStudySheetBuilder = New cStudySheetBuilder
    End If
    Set sgStudySheetBuilder = pSpigaoStudySheetBuilder
        
End Function
Public Function sgExcelWorkbookBuilder() As aExcelWorkbookBuilder
    If pSpigaoExcelWorkbookBuilder Is Nothing Then
        Set pSpigaoExcelWorkbookBuilder = New aExcelWorkbookBuilder
    End If
    Set sgExcelWorkbookBuilder = pSpigaoExcelWorkbookBuilder
        
End Function
Public Function sgExcelSheetBuilder() As aExcelSheetBuilder
    If pSpigaoExcelSheetBuilder Is Nothing Then
        Set pSpigaoExcelSheetBuilder = New aExcelSheetBuilder
    End If
    Set sgExcelSheetBuilder = pSpigaoExcelSheetBuilder
        
End Function
Public Function sgWkItemBuilder() As cWkItemBuilder
    If pSpigaoWkItemBuilder Is Nothing Then
        Set pSpigaoWkItemBuilder = New cWkItemBuilder
    End If
    Set sgWkItemBuilder = pSpigaoWkItemBuilder
        
End Function

Public Function sgOldRef() As cspigaoOldRefBuilder
    If pSpigaoOldRef Is Nothing Then
        Set pSpigaoOldRef = New cspigaoOldRefBuilder
    End If
    Set sgOldRef = pSpigaoOldRef
End Function
Public Function sgWkDataBuilder() As cWkDataBuilder
    If pSpigaoWkDataBuilder Is Nothing Then
        Set pSpigaoWkDataBuilder = New cWkDataBuilder
    End If
    Set sgWkDataBuilder = pSpigaoWkDataBuilder
End Function
Public Function sgExcelRangeBuilder() As aExcelRangeBuilder
    If pSpigaoExcelRangeBuilder Is Nothing Then
        Set pSpigaoExcelRangeBuilder = New aExcelRangeBuilder
    End If
    Set sgExcelRangeBuilder = pSpigaoExcelRangeBuilder
End Function

Public Function sgSpigaoConfiguration() As cSpigaoConfiguration
    If pSpigaoConfiguration Is Nothing Then
        Set pSpigaoConfiguration = New cSpigaoConfiguration
    End If
    Set sgSpigaoConfiguration = pSpigaoConfiguration
End Function

Public Function sgStudySubDetailBuilder() As cStudySubDetailBuilder
    If pSpigaoStudySubDetailBuilder Is Nothing Then
        Set pSpigaoStudySubDetailBuilder = New cStudySubDetailBuilder
    End If
    Set sgStudySubDetailBuilder = pSpigaoStudySubDetailBuilder
End Function

Public Function sgPlanningBuilder() As cSpigaoPlanningBuilder
    If pSpigaoPlanningBuilder Is Nothing Then
        Set pSpigaoPlanningBuilder = New cSpigaoPlanningBuilder
    End If
    Set sgPlanningBuilder = pSpigaoPlanningBuilder
End Function

Public Function sgDealBuilder() As cDealBuilder
    If pSpigaoDealBuilder Is Nothing Then
        Set pSpigaoDealBuilder = New cDealBuilder
    End If
    Set sgDealBuilder = pSpigaoDealBuilder
End Function

Public Function sgWebService() As aWebService
    If pSpigaoWsManager Is Nothing Then
        Set pSpigaoWsManager = New aWebService
    End If
    Set sgWebService = pSpigaoWsManager
End Function

Public Function sgSpigaoSe() As aSpigaoSe
    If pSpigaoIulmSe Is Nothing Then
        Set pSpigaoIulmSe = New aSpigaoSe
    End If
    Set sgSpigaoSe = pSpigaoIulmSe
End Function
Attribute VB_Name = "modStubAdd"
Option Explicit

Public Function addallselected()
Dim i As Integer
Dim mydeals As Variant
Dim myDeal As Object
Dim sEtat As String
Dim d As Object

    If MsgBox("Confirmez-vous l'ajout de toutes les affaires s|fffd|lectionn|fffd|es ?", vbYesNo) = vbNo Then Exit Function
    
    Set mydeals = sgSpigao.Detection.Deals.ListSelectedDeals()
    
    If mydeals.count = 0 Then
        MsgBox "Aucune affaire s|fffd|lectionn|fffd|e."
        Exit Function
    End If
    
    For i = 0 To mydeals.count - 1
        Set myDeal = mydeals.item(i)
        Set d = sgSpigao.Detection.Deals.getDeal(myDeal.Id)
        addDealInStub d
    Next

End Function


Public Function viewdeals()
Dim d As Object
    sgSpigao.Detection.UI.Deals.Options.CanDeleteDeal = False
    sgSpigao.Detection.UI.Deals.Options.CanSelectDeal = False
    sgSpigao.Detection.UI.Deals.Options.CanImportDeal = False
    Set d = sgSpigao.getDealByNewDeals
    sgSpigao.Detection.UI.Deals.Options.CanDeleteDeal = True
    sgSpigao.Detection.UI.Deals.Options.CanSelectDeal = True
    sgSpigao.Detection.UI.Deals.Options.CanImportDeal = True
End Function
    
Public Function configure()


    sgSpigao.Detection.UI.ShowUserSettings
    
    If sgSpigao.Detection.UserSettings.DefaultStorageFolder <> sgSpigaoConfiguration.RepoFolderPath Then
        sgSpigaoConfiguration.RepoFolderPath = sgSpigao.Detection.UserSettings.DefaultStorageFolder
    End If
    
End Function
    
Public Function addOneDealInStub()
Dim d As Object
    
    'Set sgSpigao = New clsSpigaoManager
    
    Set d = sgSpigao.getDealByNewDeals
    
    addDealInStub d
End Function
    
Public Function addDealInStub(d As Object)

Dim fRc As String
Dim fDET As String
Dim fBP As String
Dim fCC As String
Dim sDeal As String
Dim SDealSummary As String
Dim sPathStorage As String
Dim sPathEntities As String
Dim sOslSummary As String
Dim i As Long


    If d Is Nothing Then Exit Function
    sPathStorage = getPathStorage()
      
    
    If sgFileSystem.FileExists(sPathStorage & "\" & d.Id & "\DCE\RC.pdf") Then
        fRc = "RC.pdf"
    End If
    If sgFileSystem.FileExists(sPathStorage & "\" & d.Id & "\DCE\DET.pdf") Then
        fDET = "DET.pdf"
    End If
    If sgFileSystem.FileExists(sPathStorage & "\" & d.Id & "\DCE\BPU.pdf") Then
        fBP = "BPU.pdf"
    End If
    If sgFileSystem.FileExists(sPathStorage & "\" & d.Id & "\DCE\CC.pdf") Then
        fCC = "CC.pdf"
    End If
    
    If d.DIE.Status = 2 Then 'DIEStatus_Available Then
    sDeal = pbuildJSONDeal(d.Id, d.Status, d.Reference, d.Subject, cDtoS(d.DeadLine), d.IsPrivate, d.IsRestricted, cDtoS(d.LastModifiedOn), cDtoS(d.PublishedOn) _
                            , d.Lot.Reference, d.Lot.Subject, d.MarketType.code, d.MarketType.designation, d.Notice.OriginReference, d.Notice.code, d.Notice.designation _
                            , d.OriginUrl, d.ProcedureType.code, d.ProcedureType.designation, d.Contractor.Id, d.Contractor.ShortName, d.Contractor.name, d.Contractor.RegistrationNumber, d.Contractor.WebSite _
                            , d.Contractor.address.Street1, d.Contractor.address.Street2, d.Contractor.address.PostalCode, d.Contractor.address.Town, d.Contractor.address.Country _
                            , fRc, fDET, fBP, fCC, d.DIE.Status, cDtoS(d.DIE.PublishedOn), cDtoS(d.DIE.LastModifiedOn), d.Territories.item(0).code, d.Territories.item(0).designation)
    Else
    sDeal = pbuildJSONDeal(d.Id, d.Status, d.Reference, d.Subject, cDtoS(d.DeadLine), d.IsPrivate, d.IsRestricted, cDtoS(d.LastModifiedOn), cDtoS(d.PublishedOn) _
                            , d.Lot.Reference, d.Lot.Subject, d.MarketType.code, d.MarketType.designation, d.Notice.OriginReference, d.Notice.code, d.Notice.designation _
                            , d.OriginUrl, d.ProcedureType.code, d.ProcedureType.designation, d.Contractor.Id, d.Contractor.ShortName, d.Contractor.name, d.Contractor.RegistrationNumber, d.Contractor.WebSite _
                            , d.Contractor.address.Street1, d.Contractor.address.Street2, d.Contractor.address.PostalCode, d.Contractor.address.Town, d.Contractor.address.Country _
                            , fRc, fDET, fBP, fCC, d.DIE.Status, "", "", d.Territories.item(0).code, d.Territories.item(0).designation)
    End If

    
    SDealSummary = pbuilJSONDealSummary(d.Contractor.ShortName, cDtoS(d.DeadLine), Left(d.Territories.item(0).code, 2), d.Id, d.Tender.Reference, d.Tender.Subject _
                    , d.Lot.Reference, d.Lot.Subject, d.OriginUrl, fRc, fDET, fBP, fCC, d.ProcedureType.designation, d.DIE.Status, d.Status)

    
    sPathEntities = getPathDemoEntities()
    'Cr|fffd|ation de l'osl deal entities
    CreateFile sPathEntities & "\deal_" & d.Id & ".osl", sDeal
    
    'Maj de l'osl dealssummary
    CreateFile sPathEntities & "\DealSummaryCollection.osl", buildDealSummary(SDealSummary, d.Id)
    
    'Recopie des fichiers de DCE
    copyDCE d.Id
    
    'DIE
    If d.DIE.Status = 2 Then 'DIEStatus_Available Then
        apiDwld d.Id
        Zip_All_Files_in_Folder sgSpigao.Processing.UserSettings.DefaultStorageFolder & "\die_" & d.Id, getPathDemoFiles() & "\die_" & d.Id & ".zip"
    End If
    
    'verif fichier stub originaux
    checkBaseEntitiesFiles
    
    'Fin
    MsgBox "Ajout termin|fffd|."
    
    
End Function

Public Function copyDCE(dID As String)

Dim ofolder As Folder
Dim sPathFiles As String
Dim sPathStorage As String

    sPathFiles = getPathDemoFiles()
    sPathStorage = getPathStorage()
    
    If Not sgFileSystem.FolderExists(sPathFiles & "\dce_" & dID) Then _
                sgFileSystem.createFolderRecurse sPathFiles & "\dce_" & dID

    If sgFileSystem.FolderExists(sPathStorage & "\" & dID & "\DCE") Then
        sgFileSystem.Engine.copyFolder sPathStorage & "\" & dID & "\DCE", sPathFiles & "\dce_" & dID, True
    End If

End Function


Public Function buildDealSummary(sDS As String, sId As String) As String
Dim sOslSummary As String
Dim sPathEntities As String
Dim i As Long

    sPathEntities = getPathDemoEntities()
    sOslSummary = getFileContent(sPathEntities & "\DealSummaryCollection.osl")
    
    'Pas de creation de doublon
    If InStr(sOslSummary, """Id"": """ & sId & """") > 0 Then
        buildDealSummary = sOslSummary
        Exit Function
    End If
    
    If sOslSummary = "" Then
        sOslSummary = "[" & sDS & "]"
    Else
        i = InStrRev(sOslSummary, "]")
        sOslSummary = Left(sOslSummary, i - 1)
        sOslSummary = sOslSummary & "," & vbCr & sDS & "]"
    End If
    buildDealSummary = sOslSummary
End Function


Public Sub apiDwld(dealId As Long)
Dim myDownloader As clsDieDownloader
Dim myD As Object

Dim oDIERep As Folder
Dim ofile As File
Dim sPathXml As String
Dim myproject As Object
Dim result As Object

    'V|fffd|rification pr|fffd|alable de la disponibilit|fffd| du DIE
    If Not sgSpigao.Detection.Deals.IsDIEAvailable(dealId) Then
        MsgBox "DIE indisponible : " & dealId
        Exit Sub
    End If

    'Instanciation de l'objet downloader
    Set myDownloader = New clsDieDownloader
    myDownloader.Prepare sgSpigao, dealId

    'Lancement du download
    myDownloader.Run

    'Attente de fin de download
    While Not myDownloader.isCompleted
        sWait 1
    Wend

End Sub


Private Function getFileContent(sPath As String) As String

Dim oStream As Object

    getFileContent = ""
    If Not sgFileSystem.FileExists(sPath) Then Exit Function
    
    Set oStream = CreateObject("adodb.stream")

    With oStream
        .Charset = "UTF-8"
        .type = 2
        .Open
        .LoadFromFile sPath
        getFileContent = .ReadText
        .Close
    End With

End Function
Attribute VB_Name = "modStubFilesManager"
Option Explicit



Public Function pbuilJSONDealSummary(cNomC As String, dLimit As String, dDep As String, dID As String, tRef As String, tSub As String, lRef As String, lSub As String, uDce As String, fRc As String, fDET As String, fBP As String, fCC As String, tpLabel As String, DIEStatus As String, dStatus As String) As String
Dim s As String
Dim lCaption, tCaption, dCaption As String
Dim dRef, dSubject As String
Dim sDCEAvailable As String
Dim sFileAvailable As String

Dim idoc As Integer
    
    If tRef <> "" Then
        tCaption = tRef & " | " & tSub
    Else
        tCaption = tSub
    End If
    
    If lRef = "LG" Or lRef = "" Then
        lCaption = "March|fffd| unique"
        dCaption = tCaption
        dRef = tRef
        dSubject = tSub
    Else
        lCaption = "Lot " & lRef & " : " & lSub
        dCaption = tCaption & " - " & lCaption
        dRef = tRef & " | " & lRef
        dSubject = tSub & " - " & lCaption
    End If
    
    If fDET <> "" Then idoc = 2
    If fBP <> "" Then idoc = idoc + 4
    If fRc <> "" Then idoc = idoc + 8
    If fCC <> "" Then idoc = idoc + 16
    
    If idoc > 0 Then sFileAvailable = "true" Else sFileAvailable = "false"
    
    If uDce <> "" Then sDCEAvailable = "true" Else sDCEAvailable = "false"
    
    s = "{" & vbCr _
        & " ""ContractorName"": """ & cNomC & """," & vbCr _
        & " ""DeadLine"": """ & dLimit & """," & vbCr _
        & " ""Departements"": """ & dDep & """," & vbCr _
        & " ""Id"": """ & dID & """," & vbCr _
        & " ""Reference"": """ & dRef & """," & vbCr _
        & " ""Subject"": """ & dSubject & """," & vbCr _
        & " ""Title"": """ & dCaption & """," & vbCr _
        & " ""IsDCELinkAvailable"": " & sDCEAvailable & "," & vbCr _
        & " ""AvailableDCEDocuments"": " & CStr(idoc) & "," & vbCr _
        & " ""HasDCEDocuments"": " & sFileAvailable & "," & vbCr _
        & " ""ProcedureType"": """ & tpLabel & """," & vbCr _
        & " ""Caption"": """ & dCaption & """," & vbCr _
        & " ""DIEStatus"": " & DIEStatus & "," & vbCr _
        & " ""DealStatus"": " & dStatus & "," & vbCr _
        & " ""UpdateState"": {" & vbCr _
        & " ""$type"": ""Edisys.IULM.Detection.Domain.DealUpdateState, Edisys.IULM.Detection""," & vbCr _
        & "     ""HasUpdatedData"": false," & vbCr _
        & "     ""UpdatedData"": 0" & vbCr _
        & "     }" & vbCr _
        & "}"

    pbuilJSONDealSummary = s
End Function


Public Function pbuildJSONDeal(dID As String, dStatus As String, tRef As String, tSub As String, dLimit As String, dPrivate As String, dRestr As String, dModif As String, dPub As String, lRef As String, lLabel As String, tmCode As String, tmLabel As String, aRef As String, aCode As String, aLabel As String, uDce As String, tpCode As String, tpLabel As String, cID As String, cNomC As String, cNomL As String, cSiret As String, cUrl As String, cStreet1 As String, cStreet2 As String, cCP As String, cVille As String, cPays As String, fRc As String, fDET As String, fBP As String, fCC As String, DIEStatus As String, diePub As String, dieMod As String, leCode As String, leVille As String) As String
Dim s As String
Dim sFile As String
Dim lCaption, tCaption, dCaption As String
Dim dRef, dSubject As String
    
    If aCode = "" Then aCode = "AAPC"
    If aLabel = "" Then aLabel = "BOAMP A"
    
    If tRef <> "" Then
        tCaption = tRef & " | " & tSub
    Else
        tCaption = tSub
    End If
    
    If lRef = "LG" Or lRef = "" Then
        lCaption = "March|fffd| unique"
        dCaption = tCaption
        dRef = tRef
        dSubject = tSub
    Else
        lCaption = "Lot " & lRef & " : " & lLabel
        dCaption = tCaption & " - " & lCaption
        dRef = tRef & " | " & lRef
        dSubject = tSub & " - " & lCaption
    End If
    
    s = "{" & vbCr _
            & "   ""Activities"": {" & vbCr _
            & "      ""$type"": ""Edisys.IULM.Detection.Domain.ActivityCollection, Edisys.IULM.Detection""," & vbCr _
            & "      ""$values"": [{}]" & vbCr _
            & "   }," & vbCr _
            & "   ""Caption"": """ & dCaption & """," & vbCr _
            & "   ""Contractor"": {" & vbCr _
            & "      ""$type"": ""Edisys.IULM.Detection.Domain.Company, Edisys.IULM.Detection""," & vbCr _
            & "      ""Address"": {" & vbCr _
            & "         ""$type"": ""Edisys.IULM.Detection.Domain.Address, Edisys.IULM.Detection""," & vbCr _
            & "         ""Cedex"": """"," & vbCr _
            & "         ""Country"": """ & cPays & """," & vbCr _
            & "         ""MailAddress"": ""thibaud.benoist@edisys.eu""," & vbCr _
            & "         ""PostalCode"": """ & cCP & """," & vbCr _
            & "         ""Street1"": """ & cStreet1 & """," & vbCr _
            & "         ""Street2"": """ & cStreet2 & """," & vbCr _
            & "         ""Town"": """ & cVille & """" & vbCr _
            & "      }," & vbCr _
            & "      ""Id"": " & cID & "," & vbCr _
            & "      ""Name"": """ & cNomL & """," & vbCr _
            & "      ""RegistrationNumber"": """ & cSiret & """," & vbCr _
            & "      ""ShortName"": """ & cNomC & """," & vbCr _
            & "      ""WebSite"": """ & cUrl & """" & vbCr _
            & "   }," & vbCr
            
    s = s & "   ""DCEFiles"": {" & vbCr _
            & "      ""$type"": ""Edisys.IULM.Detection.Domain.DCEFileCollection, Edisys.IULM.Detection""," & vbCr _
            & "      ""$values"": [" & vbCr
     
    If fRc <> "" Then
        sFile = sFile & "{" & vbCr _
                        & "         ""FileType"": """"," & vbCr _
                        & "         ""Type"": 8," & vbCr _
                        & "         ""Name"": ""RC.pdf""," & vbCr _
                        & "         ""PublishedOn"": ""2012-05-02T15:11:51""" & vbCr _
                        & "      }"
    End If
    
    If fDET <> "" Then
        If sFile <> "" Then sFile = sFile & ", "
        sFile = sFile & "{" & vbCr _
                        & "         ""FileType"": """"," & vbCr _
                        & "         ""Type"": 2," & vbCr _
                        & "         ""Name"": ""DET.pdf""," & vbCr _
                        & "         ""PublishedOn"": ""2012-05-02T15:11:51""" & vbCr _
                        & "      }"
    End If
    
    If fBP <> "" Then
        If sFile <> "" Then sFile = sFile & ", "
        sFile = sFile & "{" & vbCr _
                        & "         ""FileType"": """"," & vbCr _
                        & "         ""Type"": 4," & vbCr _
                        & "         ""Name"": ""BPU.pdf""," & vbCr _
                        & "         ""PublishedOn"": ""2012-05-02T15:11:51""" & vbCr _
                        & "      }"
    End If
    
    If fCC <> "" Then
        If sFile <> "" Then sFile = sFile & ", "
        sFile = sFile & "{" & vbCr _
                        & "         ""FileType"": """"," & vbCr _
                        & "         ""Type"": 16," & vbCr _
                        & "         ""Name"": ""CC.pdf""," & vbCr _
                        & "         ""PublishedOn"": ""2012-05-02T15:11:51""" & vbCr _
                        & "      }"
    End If

    If DIEStatus = "2" Then
    
            s = s & sFile & "]" & vbCr _
            & "   }," & vbCr _
            & "   ""DIE"": {" & vbCr _
            & "      ""$type"": ""Edisys.IULM.Detection.Domain.DIE, Edisys.IULM.Detection""," & vbCr _
            & "      ""LastModifiedOn"": """ & dieMod & """," & vbCr _
            & "      ""PublishedOn"": """ & diePub & """," & vbCr _
            & "      ""Status"": " & DIEStatus & vbCr _
            & "   }," & vbCr
    Else
                 s = s & sFile & "]" & vbCr _
            & "   }," & vbCr _
            & "   ""DIE"": {" & vbCr _
            & "      ""$type"": ""Edisys.IULM.Detection.Domain.DIE, Edisys.IULM.Detection""," & vbCr _
            & "      ""Status"": " & DIEStatus & vbCr _
            & "   }," & vbCr
    End If
 
    s = s & "   ""DeadLine"": """ & dLimit & """," & vbCr _
            & "   ""Id"": " & dID & "," & vbCr _
            & "   ""IsPrivate"": " & cBtoS(dPrivate) & "," & vbCr _
            & "   ""IsRestricted"": " & dRestr & "," & vbCr _
            & "   ""LastModifiedOn"": """ & dModif & """," & vbCr _
            & "   ""Lot"": {" & vbCr _
            & "      ""$type"": ""Edisys.IULM.Detection.Domain.Lot, Edisys.IULM.Detection""," & vbCr _
            & "      ""Reference"": """ & lRef & """," & vbCr _
            & "      ""Subject"": """ & lLabel & """," & vbCr _
            & "      ""Caption"": """ & lCaption & """" & vbCr _
            & "   }," & vbCr _
            & "   ""MarketType"": {" & vbCr _
            & "      ""$type"": ""Edisys.IULM.Detection.Domain.MarketType, Edisys.IULM.Detection""," & vbCr _
            & "      ""Code"": """ & tmCode & """," & vbCr _
            & "      ""Designation"": """ & tmLabel & """" & vbCr _
            & "   }," & vbCr _
            & "   ""Notice"": {" & vbCr _
            & "      ""$type"": ""Edisys.IULM.Detection.Domain.Notice, Edisys.IULM.Detection""," & vbCr _
            & "      ""Origin"": ""Avis d|fffd|appel public |fffd| la concurrence""," & vbCr _
            & "      ""OriginReference"": """ & aRef & """," & vbCr _
            & "      ""Code"": """ & aCode & """," & vbCr _
            & "      ""Designation"": """ & aLabel & """" & vbCr _
            & "   }," & vbCr
     
    s = s & "   ""OriginUrl"": """ & uDce & """," & vbCr _
            & "   ""ProcedureType"": {" & vbCr _
            & "      ""$type"": ""Edisys.IULM.Detection.Domain.ProcedureType, Edisys.IULM.Detection""," & vbCr _
            & "      ""Code"": """ & tpCode & """," & vbCr _
            & "      ""Designation"": """ & tpLabel & """" & vbCr _
            & "   }," & vbCr _
            & "   ""PublishedOn"": """ & dPub & """," & vbCr _
            & "   ""Reference"": """ & dRef & """," & vbCr _
            & "   ""Status"": " & dStatus & "," & vbCr _
            & "   ""Subject"": """ & dSubject & """," & vbCr _
            & "  ""Supervisor"": {" & vbCr _
            & "    ""$type"": ""Edisys.IULM.Detection.Domain.Company, Edisys.IULM.Detection""," & vbCr _
            & "    ""Address"": {" & vbCr _
            & "      ""$type"": ""Edisys.IULM.Detection.Domain.Address, Edisys.IULM.Detection""," & vbCr _
            & "      ""Cedex"": null," & vbCr _
            & "      ""Country"": null," & vbCr _
            & "      ""MailAddress"": null," & vbCr _
            & "      ""PostalCode"": null," & vbCr _
            & "      ""Street1"": null," & vbCr _
            & "      ""Street2"": null," & vbCr _
            & "      ""Town"": null" & vbCr _
            & "    }," & vbCr
     
    s = s & "    ""Id"": 0," & vbCr _
            & "    ""Name"": null," & vbCr _
            & "    ""RegistrationNumber"": null," & vbCr _
            & "    ""ShortName"": null," & vbCr _
            & "    ""WebSite"": null" & vbCr _
            & "  }," & vbCr _
            & "   ""Tender"": {" & vbCr _
            & "      ""$type"": ""Edisys.IULM.Detection.Domain.Tender, Edisys.IULM.Detection""," & vbCr _
            & "      ""Reference"": """ & tRef & """," & vbCr _
            & "      ""Subject"": """ & tSub & """," & vbCr _
            & "      ""Caption"": """ & tCaption & """," & vbCr _
            & "   }," & vbCr _
            & "   ""Territories"": {" & vbCr _
            & "      ""$type"": ""Edisys.IULM.Detection.Domain.TerritoryCollection, Edisys.IULM.Detection""," & vbCr _
            & "      ""$values"": [{" & vbCr _
            & "         ""Code"": """ & leCode & """," & vbCr _
            & "         ""Designation"": """ & leVille & """," & vbCr _
            & "         ""Type"": 1" & vbCr _
            & "      }]" & vbCr _
            & "   }" & vbCr _
            & "}"
            
    pbuildJSONDeal = s
End Function

Public Sub CreateFile(ByVal pstrFile As String, ByVal pstrData As String)
    Dim objStream As Object
    'Create the stream
    Set objStream = CreateObject("ADODB.Stream")
 
    'Initialize the stream
    objStream.Open
 
    'Reset the position and indicate the charactor encoding
    objStream.position = 0
    objStream.Charset = "UTF-8"
 
    'Write to the steam
    objStream.WriteText pstrData
 
    'Save the stream to a file
    objStream.savetofile pstrFile, 2 ' adSaveCreateOverWrite
End Sub




Attribute VB_Name = "modStubManager"
Option Explicit

Public Enum StubMode
    Enabled = 1
    Disabled = -1
    Unknown = 0
End Enum

Private pCurrentMode As StubMode

Public Function getPathDemoEntities() As String
    getPathDemoEntities = sgEnvironnement.programDataIulmPath & "Demo\entities"
    sgFileSystem.createFolderRecurse getPathDemoEntities
End Function
Public Function getPathStorage() As String

    getPathStorage = sgEnvironnement.programDataIulmPath & "storage"
    sgFileSystem.createFolderRecurse getPathStorage
    
End Function

Public Function getPathDemoFiles() As String

    getPathDemoFiles = sgEnvironnement.programDataIulmPath & "Demo\files"
    sgFileSystem.createFolderRecurse getPathDemoFiles
    
End Function


Public Function getCurrentModeStub() As StubMode
Dim s As String

    'If pCurrentMode = Unknown Then
        s = LCase(AppDataGetConfig("configuration/Detection@useStub"))
        If s = "true" Then
            pCurrentMode = Enabled
        ElseIf s = "false" Then
            pCurrentMode = Disabled
        ElseIf s = "" Then
            pCurrentMode = Disabled
        End If
    'End If
    
    getCurrentModeStub = pCurrentMode
End Function



Public Function AppDataActiveConfigStub() As Boolean
    
    On Error Resume Next
    'traceInfo "Activation du mode stub"
    'Remplacement du fichier de config programData
    AppDataActiveConfigStub = False

    AppDataSetConfig "configuration/Detection@useStub", "True"
    
    If Err.Number = 0 Then
        AppDataActiveConfigStub = True
        'traceInfo "Activation du mode stub"
        sgSpigao.Restart
        rebootExcel
    Else
        MsgBox "Erreur rencontr|fffd|e lors de l'activation du mode stub : " & Err.Description
    End If
    
End Function


Public Sub rebootExcel()
    If MsgBox("Vous devez red|fffd|marrer Excel pour appliquer les changements, confirmez vous la fermeture ?", vbYesNo) = vbYes Then ThisWorkbook.Application.Quit
End Sub

Public Function AppDataDesactiveConfigStub()
    
    On Error Resume Next
    'traceInfo "D|fffd|sactivation du mode stub"
    'Remplacement du fichier de config programData
    AppDataDesactiveConfigStub = False

    'replaceDataConfig getCurrentDir & cst_RepConfig & "\" & cf_DataConfigFileNameStub
    AppDataSetConfig "configuration/Detection@useStub", "False"

    
    If Err.Number = 0 Then
        AppDataDesactiveConfigStub = True
        'traceInfo "D|fffd|sactivation du mode stub r|fffd|ussie"
        sgSpigao.Restart
        rebootExcel
    Else
        MsgBox "Erreur rencontr|fffd|e lors de la d|fffd|sactivation du mode stub : " & Err.Description
    End If
    
End Function


    
    
'R|fffd|initialisation des affaires de demo
Public Function ReinitStub()


Dim sPathDemo As String
Dim sPathDemoTemplate As String

    
    If MsgBox("Etes-vous s|fffd|r de vouloir tout r|fffd|initialiser la demo ?", vbYesNo) = vbNo Then Exit Function
    
    ' r|fffd|cup|fffd|ration des path
    sPathDemo = sgEnvironnement.programDataIulmPath & "Demo"
    sPathDemoTemplate = sgEnvironnement.templateDemoStubForExcelConnectorPath
    
    ' suppression du programdata\edisys\iulm\demo
    sgFileSystem.deleteFolder (sPathDemo)
    
    'recopie
    sgFileSystem.createFolderRecurse sPathDemo
    sgFileSystem.copyFolder sPathDemoTemplate, sPathDemo
    
End Function


'Modification directe du fichier de config
Public Function AppDataSetConfig(sPath As String, sValue As String) As Boolean
    On Error Resume Next
    Dim xmlDoc As aXml
    Dim myNode As Object
    Dim tabPath() As String
    
    
    Set xmlDoc = New aXml
    
    xmlDoc.LoadFromFile sgEnvironnement.configIulmProgramDataFullPath
    
    tabPath = Split(sPath, "@")
    Set myNode = xmlDoc.getNodeFromRoot(tabPath(0))
    
    If UBound(tabPath) = 1 Then
        xmlDoc.setAttributValueFromNode myNode, tabPath(1), sValue
    Else
        myNode.nodetypedvalue = sValue
    End If
    
    xmlDoc.save
    
    Set xmlDoc = Nothing
    
    If Err.Number = 0 Then
        AppDataSetConfig = True
        'traceInfo "Mise |fffd| jour du fichier de config appdata r|fffd|ussie"
    Else
        MsgBox "Erreur rencontr|fffd|e lors mise |fffd| jour du fichier de config appdata : " & Err.Description
    End If
End Function

'Modification directe du fichier de config
Public Function AppDataGetConfig(sPath As String) As String
    On Error Resume Next
    Dim xmlDoc As aXml
    Dim myNode As Object
    Dim tabPath() As String
    
    
    Set xmlDoc = New aXml
    
    xmlDoc.LoadFromFile sgEnvironnement.configIulmProgramDataFullPath
    
    tabPath = Split(sPath, "@")
    
    Set myNode = xmlDoc.getNodeFromRoot(tabPath(0))
    
    If UBound(tabPath) = 1 Then
        AppDataGetConfig = xmlDoc.getAttributValue(myNode, tabPath(1))
    Else
        AppDataGetConfig = myNode.nodetypedvalue
    End If
    
      
    Set xmlDoc = Nothing
    
    If Err.Number = 0 Then
        
        'traceInfo "Mise |fffd| jour du fichier de config appdata r|fffd|ussie"
    Else
        AppDataGetConfig = ""
        MsgBox "Erreur rencontr|fffd|e lors de la lecture du fichier de config appdata : " & Err.Description
    End If
End Function

Public Sub checkBaseEntitiesFiles()

    If Not sgFileSystem.FileExists(getPathDemoEntities & "\SpigaoAlert.osl") Then
        sgFileSystem.copyFile sgEnvironnement.templateDemoStubForExcelConnectorPath & "\Entities\SpigaoAlert.osl", getPathDemoEntities & "\SpigaoAlert.osl"
    End If
    If Not sgFileSystem.FileExists(getPathDemoEntities & "\SpigaoMessageCollection.osl") Then
        sgFileSystem.copyFile sgEnvironnement.templateDemoStubForExcelConnectorPath & "\Entities\SpigaoMessageCollection.osl", getPathDemoEntities & "\SpigaoMessageCollection.osl"
    End If
End Sub

Attribute VB_Name = "modStubZip"
Option Explicit

Sub Zip_All_Files_in_Folder(sPathFolder As String, sPathZip As String)
    Dim FileNameZip, FolderName
    Dim strDate As String, DefPath As String
    Dim oApp As Object

    DefPath = Application.DefaultFilePath
    If Right(DefPath, 1) <> "\" Then
        DefPath = DefPath & "\"
    End If

    FolderName = sPathFolder    '<< Change

    strDate = Format(Now, " dd-mmm-yy h-mm-ss")
    FileNameZip = sPathZip

    'Create empty Zip File
    NewZip (FileNameZip)

    Set oApp = CreateObject("Shell.Application")
    'Copy the files to the compressed folder
    oApp.Namespace(FileNameZip).copyhere oApp.Namespace(FolderName).Items

    'Keep script waiting until Compressing is done
    On Error Resume Next
    Do Until oApp.Namespace(FileNameZip).Items.count = _
       oApp.Namespace(FolderName).Items.count
        Application.Wait (Now + TimeValue("0:00:01"))
    Loop
    On Error GoTo 0

    'MsgBox "You find the zipfile here: " & FileNameZip
End Sub


Sub Unzip(zipFileName As String, sFolderPath As String)
Dim oApp As Object
Dim ofile As Object
Dim ofolder As Object

    Set oApp = CreateObject("Shell.Application")
   
    Set ofolder = oApp.Namespace(CVar(zipFileName))
    For Each ofile In ofolder.Items()
        oApp.Namespace(CVar(sFolderPath)).copyhere ofile
    Next
   
End Sub


Sub NewZip(sPath)
'Create empty Zip File
'Changed by keepITcool Dec-12-2005
    If Len(Dir(sPath)) > 0 Then Kill sPath
    Open sPath For Output As #1
    Print #1, Chr$(80) & Chr$(75) & Chr$(5) & Chr$(6) & String(18, 0)
    Close #1
End Sub


Function bIsBookOpen(ByRef szBookName As String) As Boolean
' Rob Bovey
    On Error Resume Next
    bIsBookOpen = Not (Application.Workbooks(szBookName) Is Nothing)
End Function


Function Split97(sStr As Variant, sdelim As String) As Variant
'Tom Ogilvy
    Split97 = Evaluate("{""" & _
                       Application.Substitute(sStr, sdelim, """,""") & """}")
End Function



Attribute VB_Name = "modTemplate"
Option Explicit

Public Sub conftemplate()

Dim oEs As aExcelSheet

    Set oEs = sgExcelSheetBuilder.buildByWorksheet(activeSheet)
    
    oEs.SetBooleanProperty cPropertySpigaoAllowCoef, True
    oEs.SetBooleanProperty cPropertySpigaoAllowPriceStrength, True
    oEs.SetBooleanProperty cPropertySpigaoAllowCumul, True
    oEs.SetBooleanProperty cPropertySpigaoAllowSubTotal, True
    oEs.SetBooleanProperty cPropertySpigaoAllowRecap, True
    oEs.SetBooleanProperty cPropertySpigaoAllowTotalOnChapter, True
    oEs.SetBooleanProperty cPropertySpigaoAllowTotalGeneral, True

End Sub

Attribute VB_Name = "modTests"
Option Explicit
    Dim gSS As New cStudySheet
    Dim gES As New aExcelSheet
    Dim gEW As New aExcelWorkBook

Sub fitmultiline()
    With ActiveCell
        .ColumnWidth = .ColumnWidth / 4
        '.EntireRow.AutoFit
        'Debug.Print .RowHeight
        '.DisplayFormat.ShrinkToFit = True
    End With
End Sub

Sub test()

    Dim oProject As Object
    Dim oStudy As cStudy
    sgExcelApplication.MuteOn
    Set oProject = sgSpigao.Processing.LoadProject("C:\SPIGAO\Dossiers\BOURGOIN\Spigao\BOURGOIN.xml")
    Set oStudy = sgStudyBuilder.createByProject(oProject, "112")
    sgExcelApplication.MuteOff
End Sub
Sub test_cumul()

    Dim oProject As Object
    Dim oStudy As cStudy
    sgExcelApplication.MuteOn
    Set oProject = sgSpigao.Processing.LoadProject("C:\SPIGAO\4-DOUBLONS\Spigao\MALAY.xml")
    Set oStudy = sgStudyBuilder.createByProject(oProject, "112")
    'oStudy.cumulCreateCumulSheet
    sgExcelApplication.MuteOff
End Sub

Sub test_6000()

    Dim oProject As Object
    Dim oStudy As cStudy
    sgExcelApplication.MuteOn
    Set oProject = sgSpigao.Processing.LoadProject("C:\SPIGAO\T14_plus de 6000 lignes\BUS.xml")
    Set oStudy = sgStudyBuilder.createByProject(oProject, "112")
    'oStudy.cumulCreateCumulSheet
    sgExcelApplication.MuteOff
End Sub
Sub test_sncf()
    Dim oProject As Object
    Dim oStudy As cStudy
    sgExcelApplication.MuteOn
    Set oProject = sgSpigao.Processing.LoadProject("C:\SPIGAO\2537214\SEVRAN.xml")
    Set oStudy = sgStudyBuilder.createByProject(oProject, "112")
    'oStudy.cumulCreateCumulSheet
    sgExcelApplication.MuteOff
    
End Sub
Sub test_progapwin()
    Dim oStudy As cStudy

    Set oStudy = sgStudyBuilder.buildByWorksheet(activeSheet)
    modExtensions.genProgapwinFile oStudy


End Sub

Sub test_onayafacturation()
    Dim oStudy As cStudy

    Set oStudy = sgStudyBuilder.buildByWorksheet(activeSheet)
    modExtensions.genOnayaFacturationFile oStudy


End Sub
Sub test_qdv6()
    Dim oStudy As cStudy

    Set oStudy = sgStudyBuilder.buildByWorksheet(activeSheet)
    modExtensions.genQDV6File oStudy


End Sub

Sub test_amiprix()
    Dim oStudy As cStudy
    Set oStudy = sgStudyBuilder.buildByWorksheet(activeSheet)
    modExtensions.genAmiprixFile oStudy

End Sub
Sub test_activesheet_cumul()
      
    Dim oStudy As cStudy
    sgExcelApplication.MuteOn
    
    Set oStudy = sgStudyBuilder.buildByWorksheet(activeSheet)
    oStudy.cumulCreateCumulSheet
    sgExcelApplication.MuteOff

End Sub
Sub test_activecumul_restore()
Dim oStudy As cStudy
    sgExcelApplication.MuteOn
    Set oStudy = sgStudyBuilder.buildByWorksheet(activeSheet)
    oStudy.cumulRestoreBaseSheet
    sgExcelApplication.MuteOff
End Sub

Sub test_activeshowcoef()
Dim oStudy As cStudy
    sgExcelApplication.MuteOn
    Set oStudy = sgStudyBuilder.buildByWorksheet(activeSheet)
    oStudy.activeSS.coefShowColCoef
    sgExcelApplication.MuteOff

End Sub
Sub test_activehidecoef()
Dim oStudy As cStudy
    sgExcelApplication.MuteOn
    Set oStudy = sgStudyBuilder.buildByWorksheet(activeSheet)
    oStudy.activeSS.coefHideColCoef
    sgExcelApplication.MuteOff

End Sub

Sub test_activeshowPriceStrength()
Dim oStudy As cStudy
    sgExcelApplication.MuteOn
    Set oStudy = sgStudyBuilder.buildByWorksheet(activeSheet)
    oStudy.activeSS.strengthShowColPriceStrength
    sgExcelApplication.MuteOff

End Sub
Sub test_activehidePriceStrength()
Dim oStudy As cStudy
    sgExcelApplication.MuteOn
    Set oStudy = sgStudyBuilder.buildByWorksheet(activeSheet)
    oStudy.activeSS.strengthHideColPriceStrength
    sgExcelApplication.MuteOff

End Sub

Sub test_export()
Dim oStudy As cStudy
    Set oStudy = sgStudyBuilder.buildByWorksheet(activeSheet)
    oStudy.export
End Sub
Sub test_formule_speciale()

    Dim oProject As Object
    Dim oStudy As cStudy
    sgExcelApplication.MuteOn
    Set oProject = sgSpigao.Processing.LoadProject("C:\SPIGAO\Dossiers\PRORATA_2079986\Spigao\MCDO35.xml")
    Set oStudy = sgStudyBuilder.createByProject(oProject, "112")
    sgExcelApplication.MuteOff
End Sub

Sub test_col_sup()

    Dim oProject As Object
    Dim oStudy As cStudy
    sgExcelApplication.MuteOn
    Set oProject = sgSpigao.Processing.LoadProject("C:\SPIGAO\Formules speciales\PU remis|fffd|\2054673\HAGUENAU.xml")
    Set oStudy = sgStudyBuilder.createByProject(oProject, "112")
    sgExcelApplication.MuteOff
End Sub

Sub test_col_sup2()

    Dim oProject As Object
    Dim oStudy As cStudy
    sgExcelApplication.MuteOn
    Set oProject = sgSpigao.Processing.LoadProject("C:\SPIGAO\Formules speciales\Cumul de quantit|fffd|s\2011787\lgtfranc3.xml")
    
    Set oStudy = sgStudyBuilder.createByProject(oProject, "112")
    sgExcelApplication.MuteOff
End Sub


Sub test_loaddettxt()
Dim oStudy As cStudy
    sgExcelApplication.MuteOn
    Set oStudy = sgStudyBuilder.buildByWorksheet(activeSheet)
    oStudy.importDetTxt
    sgExcelApplication.MuteOff


End Sub

Sub test_loadOldXls()
Dim oWb As Excel.Workbook
Dim oStudy As cStudy
    sgExcelApplication.MuteOn
    Set oStudy = sgStudyBuilder.buildByWorksheet(activeSheet)
    Debug.Print oStudy.oldXlsFilePath
    Set oWb = Application.Workbooks.Open(oStudy.oldXlsFilePath)
    oStudy.importOldExcelValues sgExcelWorkbookBuilder.buildByWorkbook(oWb)
    oWb.Close False

    sgExcelApplication.MuteOff

    
End Sub
Sub test_formules()

    Dim myF As New aSpigaoFormula
    myF.Load "=ARRONDI(2%*((ST_3_ST06 MT)+(ST_4_ST07 MT));2)", Quantity
    
End Sub

Sub test_cData()

    Dim odata As New cWkData
    Set odata = sgWkDataBuilder.byFormula("13", False)
    Debug.Print odata.hasAbsoluteFormula
    
    
    
End Sub

Sub test_chargement_listworkitems()

    Dim oList As New cWkItemList
    Dim oProject As Object
    Dim oXml As New aXml
    
    Set oProject = sgSpigao.Processing.LoadProject("C:\SPIGAO\Dossiers\NICOPOLIS_RUN\Spigao\NICOPOLIS.xml")
    oList.fillWithBillOfQuantities oProject.BillOfQuantity.GetFlatWorkItemList(0)
    
    oXml.LoadFromFile "C:\SPIGAO\Dossiers\NICOPOLIS_RUN\Spigao\NICOPOLIS.xml"
    oList.fillWithExtendedXml oXml

    'Debug.Print oList.expandFormulas("=ROUND((HT@HT01 MT)*(HT@HT02 PU)%,2)")
End Sub
Sub test_insert_right()

    activeSheet.Columns(3).Insert Shift:=xlToLeft, _
      CopyOrigin:=xlFormatFromLeftOrAbove
End Sub

Sub test_choice()

    Debug.Print formImportChooseMode.getchoice()
    
End Sub

'***********************************************************************************************************
' TESTS FONCTIONS MAIN
'***********************************************************************************************************
Public Sub test_import_selected_deals()
    mOpenDieBySelectedDeals
End Sub

Public Sub test_import_specificdie()
    mOpenDieBySpecificDie
End Sub

Public Sub test_open_existingfile()
    mOpenDieByExcelFile
End Sub

Public Sub test_download_dce()
    mGoToDownloadDcePage
End Sub

Public Sub test_dossier_consultation()
    
    If gCurrentStudy Is Nothing Then Set gCurrentStudy = sgStudyBuilder.buildByWorksheet(activeSheet)
    mGenConsultation

End Sub

Public Sub test_toggle_pricestrength()
    If gCurrentStudy Is Nothing Then Set gCurrentStudy = sgStudyBuilder.buildByWorksheet(activeSheet)
    mTogglePriceStrength
End Sub


Public Sub test_toggle_coef()
    If gCurrentStudy Is Nothing Then Set gCurrentStudy = sgStudyBuilder.buildByWorksheet(activeSheet)
    mToggleCoefs
End Sub

Public Sub test_toggle_cumul()
    If gCurrentStudy Is Nothing Then Set gCurrentStudy = sgStudyBuilder.buildByWorksheet(activeSheet)
    mToggleCumulQuantity
End Sub

Public Sub test_import()
    If gCurrentStudy Is Nothing Then Set gCurrentStudy = sgStudyBuilder.buildByWorksheet(activeSheet)
    mImportStudy
End Sub
Public Sub test_showBP()
    If gCurrentStudy Is Nothing Then Set gCurrentStudy = sgStudyBuilder.buildByWorksheet(activeSheet)
    mShowBpx
End Sub

Public Sub test_toggle_chapter()
    If gCurrentStudy Is Nothing Then Set gCurrentStudy = sgStudyBuilder.buildByWorksheet(activeSheet)
    mToggleFilter_ForChapter True
End Sub
Public Sub test_toggle_price()
    If gCurrentStudy Is Nothing Then Set gCurrentStudy = sgStudyBuilder.buildByWorksheet(activeSheet)
    mToggleFilter_ForPrice True
End Sub
Public Sub test_toggle_comment()
    If gCurrentStudy Is Nothing Then Set gCurrentStudy = sgStudyBuilder.buildByWorksheet(activeSheet)
    mToggleFilter_ForComment True
End Sub
Public Sub test_toggle_other()
    If gCurrentStudy Is Nothing Then Set gCurrentStudy = sgStudyBuilder.buildByWorksheet(activeSheet)
    mToggleFilter_ForOthers True
End Sub

Public Sub test_main_export()
    If gCurrentStudy Is Nothing Then Set gCurrentStudy = sgStudyBuilder.buildByWorksheet(activeSheet)
    mExportSpigao
End Sub

Public Sub test_demoPriceRandom()
    If gCurrentStudy Is Nothing Then Set gCurrentStudy = sgStudyBuilder.buildByWorksheet(activeSheet)
    mDemoPriceRandom
End Sub


Public Sub test_config()
    mConfiguration
End Sub


Public Sub test_unit()

Dim oWk As New cWkItem

    oWk.Unit = "CDF"
    oWk.designation = "Test"
    Set oWk.QT = sgWkDataBuilder.byString("3")
    
    modUnit.loadReferentiel modExtensions.getReferentielUniteForamiprix
    Set modUnit.initialMap = modExtensions.getInitialMappingForAmiprix
    
    Debug.Print modUnit.getUnit(oWk)
    
End Sub
Attribute VB_Name = "modUnit"
Option Explicit

Private pDicUnitsReference As Dictionary
Private pDicMapUnit As Dictionary

Public Sub loadReferentiel(s As String)
Dim tRows() As String
Dim tCols() As String
Dim i As Integer
Dim oUnit As cUnit
Dim sKey As String

    Set pDicUnitsReference = New Dictionary
    tRows = Split(s, ";;")
    For i = 0 To UBound(tRows)
        tCols = Split(tRows(i), "|")
        Set oUnit = New cUnit
                
        oUnit.code = tCols(0)
        oUnit.designation = tCols(1)
        oUnit.frequence = tCols(2)
        
        sKey = cvCodeToKey(oUnit.code)
        If Not pDicUnitsReference.exists(sKey) Then
            pDicUnitsReference.add sKey, oUnit
        End If
        
    Next

End Sub

Public Property Set initialMap(oDic As Dictionary)
    Set pDicMapUnit = oDic
End Property
Public Function addMapUnit(sUnit As String, sUnitRef As String)
Dim sKey As String

    If pDicMapUnit Is Nothing Then pDicUnitsReference = New Dictionary
    
    sKey = cvCodeToKey(sUnit)
    If Not pDicMapUnit.exists(sKey) Then
        pDicMapUnit.add sKey, sUnitRef
    End If

End Function

Public Function getUnit(oWkItem As cWkItem) As String
Dim sKey As String

    sKey = cvCodeToKey(oWkItem.Unit)
    If pDicMapUnit.exists(sKey) Then
        getUnit = pDicMapUnit(sKey)
        Exit Function
    Else 'on demande |fffd| l'utilisateur...
        getUnit = formUnite.getNewMapping(oWkItem, pDicUnitsReference)
        If getUnit <> "" Then
            pDicMapUnit.add sKey, getUnit
        End If
    End If

End Function

Private Function cvCodeToKey(s As String)
    cvCodeToKey = UCase("K" & s)
End Function
Attribute VB_Name = "modUpdater"
Option Explicit

Public Const cAppName As String = "Connecteur Spigao pour Excel"
Public Const cAppCurrentVersion As String = "2.2.0"

Public Const cAppVersionWithPlanning As Boolean = False
Public Const cAppVersionWithExtractor As Boolean = True
'MODULE DE GESTION DES ALERTES MAJS

Private Const cUrlUpdateService As String = "http://link.spigao.com/UpdateService/GetInfos"
Private Const cUrlSupportPage As String = "https://support.spigao.com/link/support-homepage-client"


Public Function checkForUpdate(Optional bForce As Boolean = True)
On Error GoTo fin

    Dim sAppRequiredVersion As String
    
    'Hook pour d|fffd|sactiver les macros Edisys
    ForceScribeMacrosDisabled
        
    'Check si on annule la demande parce que la conf interdit la v|fffd|rification automatique
    If Not bForce And sgSpigaoConfiguration.CheckForUpdateAutomatically_Disabled Then Exit Function
    
    'Check si on annule la demande parce que d|fffd|j|fffd| faite dans la journ|fffd|e
    If Not bForce And Format(sgSpigaoConfiguration.LastVersionCheck, "dd/mm/yyyy") = Format(Date, "dd/mm/yyyy") Then Exit Function
    
    
    sAppRequiredVersion = GetCurrentVersionPublished()
    If sAppRequiredVersion <> "" Then
        If isUpdateNeeded(cAppCurrentVersion, sAppRequiredVersion) Then
            If MsgBox("Une nouvelle version du " & cAppName & " est disponible (v " & sAppRequiredVersion & ")." & vbCrLf & "Souhaitez-vous la t|fffd|l|fffd|charger ?", vbYesNo, "Mise |fffd| jour " & cAppName) = vbYes Then
                getHtml GetCurrentDownloadPath
            End If
        ElseIf bForce Then
            MsgBox "Votre version du " & cAppName & " est |fffd| jour.", vbOKOnly, cAppName
        End If
    Else 'impossible de r|fffd|cup|fffd|rer la version...pb de connexion au webservice.... On renvoit sur le site support.
        If bForce Then getHtml cUrlSupportPage
    End If
    
    sgSpigaoConfiguration.LastVersionCheck = Date
fin:
    

End Function


'R|fffd|cup|fffd|re la version publi|fffd|e en ligne. Peut |fffd|chouer si pb de proxy...
Private Function GetCurrentDownloadPath() As String
On Error GoTo fin
    Dim sXml As String
    Dim oXml As Object
    Dim oNode As Object
    Dim sDownloadUrl As String
    
    sXml = getXmlVersion
    If sXml <> "" Then
        Set oXml = CreateObject("MSXML2.DomDocument")
        oXml.LoadXML sXml
    End If
    
    If Not oXml Is Nothing Then
        Set oNode = oXml.SelectSingleNode("WEBSERVICE/updateInfos/downloadUrl")
        If Not oNode Is Nothing Then
            sDownloadUrl = oNode.nodetypedvalue
            GetCurrentDownloadPath = Replace(sDownloadUrl, "http://www.spigao.fr/download/Prgs/", "")
        End If
        
    End If

    If GetCurrentDownloadPath = "" Then GetCurrentDownloadPath = cUrlSupportPage
    
fin:
    Set oXml = Nothing

End Function
'R|fffd|cup|fffd|re la version publi|fffd|e en ligne. Peut |fffd|chouer si pb de proxy...
Private Function GetCurrentVersionPublished() As String
On Error GoTo fin
    Dim sXml As String
    Dim oXml As Object
    Dim oNode As Object
    Dim sVersion As String
    
    sXml = getXmlVersion
    If sXml <> "" Then
        Set oXml = CreateObject("MSXML2.DomDocument")
        oXml.LoadXML sXml
    End If
    
    If Not oXml Is Nothing Then
        Set oNode = oXml.SelectSingleNode("WEBSERVICE/updateInfos/Version")
        If Not oNode Is Nothing Then
            sVersion = oNode.nodetypedvalue
            GetCurrentVersionPublished = sVersion
        End If
        
    End If

fin:
    Set oXml = Nothing

End Function


Private Function getXmlVersion() As String
On Error GoTo fin

    Dim http As Object
    Dim sResult As String
    
    ' Lecture du flux
    Set http = CreateObject("MSXML2.ServerXMLHTTP")
    http.setTimeouts 2000, 2000, 2000, 2000
    http.Open "GET", "http://link.spigao.com/UpdateService/GetInfos?sSoftwareName=SpigaoExcelConnector2"
    http.setRequestHeader "Content-Type", "application/x-www-form-urlencoded"
    http.Send ""
    
    ' En cas de r|fffd|ussite, le code renvoy|fffd| est 200
    If http.Status = 200 Then
        sResult = "Connexion r|fffd|ussie au serveur"
        getXmlVersion = http.responseText
    ElseIf http.Status = 401 Then 'Erreur d'authentification
        sResult = "Erreur d'authentification - " & http.responseText
        getXmlVersion = ""
    ElseIf http.Status = 400 Then 'erreur de requ|fffd|te
        sResult = "Requ|fffd|te invalide - " & http.responseText
        getXmlVersion = ""
    Else 'Erreur technique
        sResult = "Erreur technique - " & http.responseText
        getXmlVersion = ""
    End If

fin:
    ' On lib|fffd|re les objets
    Set http = Nothing
    If Err Then
        'MsgBox "Erreur sur la r|fffd|cup|fffd|ration de la version |fffd| jour de SpigaoExcelConnector : " & Err.Description
    ElseIf getXmlVersion = "" Then
        'MsgBox "R|fffd|cup|fffd|ration de la versione n cours |fffd|chou|fffd| : " & sResult
    End If
    
End Function


Private Function isUpdateNeeded(sVersionCurrent As String, sVersionRequired As String) As Boolean
On Error GoTo fin

    Dim tabVersionCurrent() As String
    Dim tabVersionRequired() As String
    Dim i As Integer
    
    isUpdateNeeded = False
    tabVersionCurrent = Split(sVersionCurrent, ".")
    tabVersionRequired = Split(sVersionRequired, ".")
    
    For i = 0 To 2
        If tabVersionCurrent(i) <> tabVersionRequired(i) Then
           If IsNumeric(tabVersionCurrent(i)) And IsNumeric(tabVersionRequired(i)) Then
               isUpdateNeeded = (CInt(tabVersionCurrent(i)) < CInt(tabVersionRequired(i)))
               Exit Function
           Else
               isUpdateNeeded = (tabVersionCurrent(i) < tabVersionRequired(i))
               Exit Function
           End If
        End If
    Next
    
    
fin:



End Function

Attribute VB_Name = "modUtils"
Option Explicit

'Renvoi le min d'entiers en excluant la valeur 0
Public Function Min(ParamArray nb() As Variant) As Integer
Dim iMin As Integer
Dim i As Integer
iMin = 0
'LBound of a ParamArray is always 0. Each element of the ParamArray is added here:
For i = LBound(nb) To UBound(nb)
    If nb(i) > 0 Then
        If iMin = 0 Or nb(i) < iMin Then iMin = nb(i)
    End If

Next i

    Min = iMin

End Function

'renvoie le max
Public Function Max(ParamArray nb() As Variant) As Integer
Dim iMax As Integer
Dim i As Integer
iMax = 0
'LBound of a ParamArray is always 0. Each element of the ParamArray is added here:
For i = LBound(nb) To UBound(nb)

    If iMax = 0 Or nb(i) > iMax Then iMax = nb(i)

Next i

    Max = iMax

End Function

'nettoie une chaine en enlevant les caract|fffd|res susceptibles de perturber la lecture dans une cellule excel
Public Function trimall(s As String) As String
    s = Replace(s, Chr(10), " ")
    s = Replace(s, vbTab, " ")
    s = Replace(s, Chr(13), " ")
    s = Replace(s, "  ", " ")
    trimall = Trim(s)
End Function

'Supprime les caract|fffd|re interdits dans un nom de fichier
Public Function cleanFileName(s As String) As String

    s = Replace(s, "\", "_")
    s = Replace(s, "/", "_")
    s = Replace(s, ":", "_")
    s = Replace(s, "*", "_")
    s = Replace(s, "?", "_")
    s = Replace(s, "<", "_")
    s = Replace(s, ">", "_")
    s = Replace(s, "|", "_")
    cleanFileName = s
    
End Function

'G|fffd|re l'affichage de l'ihm formChoose et la r|fffd|cup|fffd|ration de la r|fffd|ponse
Public Function SpigaoChoose(tabChoices As Variant) As String

    gSpigaoChoiceKept = ""
    
    If UBound(tabChoices) = 0 Then
        If tabChoices(0) = "" Then Exit Function
    End If
    
    formChooseFileName.LoadChoices tabChoices
    formChooseFileName.Show
    
    SpigaoChoose = gSpigaoChoiceKept

End Function

Public Function cDtoS(mydate As Date) As String

    cDtoS = Format(mydate, "yyyy-mm-ddThh:mm:ss")

End Function

Public Function cStoD(sDate As String) As Date
    '2018-01-10T12:00:00
    If InStr(sDate, "T") = 11 Then
        sDate = Mid(sDate, 9, 2) & "/" & Mid(sDate, 6, 2) & "/" & Mid(sDate, 1, 4) & " " & Mid(sDate, 12)
        cStoD = CDate(sDate)
    End If
End Function

Public Function cBtoS(s As Variant) As String

    If s = True Then
        cBtoS = "true"
    ElseIf s = False Then
        cBtoS = "false"
    ElseIf LCase(s) = "faux" Or LCase(s) = "false" Then
        cBtoS = "false"
    ElseIf LCase(s) = "vrai" Or LCase(s) = "true" Then
        cBtoS = "true"
    End If

End Function

Public Function IfNull(vValue As Variant, vDefault As Variant) As Variant
    
    If IsNull(vValue) Then
        IfNull = vDefault
    Else
        IfNull = vValue
    End If

End Function
'------------------------------------
' Attente
'------------------------------------
Public Sub sWait(sec As Integer)
   Dim t As Date
   t = Timer + sec
   Do Until Timer > t
      DoEvents
   Loop
End Sub

'Fonction de rempalcement des formules SUM standard par des SUBTOTAL (9,
'Le remplacement n'est fait que si la formule de SUM est bien une addition pure de type
' SUM(A1:A23)
' SUM(+A1+A2+A3)
' SUM(A1,A2,A3)
' Dans tous les autres cas on ne touche pas |fffd| la formule
Public Function cleanExcelFormula(ByVal sFormula As String) As String
Dim ssum As String
Dim ssum2 As String

    'cleanExcelFormula = Replace(sFormula, "SUM(", "SUBTOTAL(9,")
    
    If Not sgRegex.matchPattern(sFormula, "SUM\([A-Z0-9+:]{1,}\)") Then
        cleanExcelFormula = sFormula
        Exit Function
    End If
    
    'remplace SUM(+A1+A2+A3) par SUM(A1,A2,A3)
    While sgRegex.matchPattern(sFormula, "SUM\([A-Z0-9+]{1,}\)")
        ssum = sgRegex.extractFirstPattern(sFormula, "(SUM\()([A-Z0-9+]{1,}[^)]{1,})", 1)
        ssum2 = Trim(Replace(ssum, "+", ","))
        If Left(ssum2, 1) = "," Then ssum2 = Mid(ssum2, 2)
        sFormula = Replace(sFormula, "SUM(" & ssum & ")", "SUM(" & ssum2 & ")")
    Wend

    'remplace SUM(A1:A3) par SUBTOTAL(9,A1:A3)
    While sgRegex.matchPattern(sFormula, "SUM\([A-Z]{1,2}[0-9]{1,}:[A-Z]{1,2}[0-9]{1,}\)")
        
        ssum = sgRegex.extractFirstPattern(sFormula, "(SUM\()([A-Z]{1,2}[0-9]{1,}:[A-Z]{1,2}[0-9]{1,})(\))", 1)
        ssum2 = ssum
        sFormula = Replace(sFormula, "SUM(" & ssum & ")", "SUBTOTAL(9," & ssum2 & ")")
        
    Wend
    
    cleanExcelFormula = sFormula
    
End Function

'Transpose une formule d'une colonne vers une autre
'Exemple SUBTOTAL(9,A1:A23) => subtotal(9, B1:B23)
Public Function transposeExcelFormula(ByVal sFormula As String, ByVal sColOri As String, ByVal sColDest As String) As String
Dim ssum As String
Dim ssum2 As String

    'transposeexcelFormula = sgRegex.replacePattern(sFormula,sColOri & "[1-9]{1,}"
    If sColOri = sColDest Then
        transposeExcelFormula = sFormula
        Exit Function
    End If
    While sgRegex.matchPattern(sFormula, "[^A-Z]{1,}" & sColOri & "[1-9]{1,}")
        
        ssum = sgRegex.extractFirstPattern(sFormula, "([^A-Z]{1,}" & sColOri & "[1-9]{1,})", 0)
        ssum2 = Replace(ssum, sColOri, sColDest)
        sFormula = Replace(sFormula, ssum, ssum2)
        
    Wend
    transposeExcelFormula = sFormula
End Function

'Supprime les r|fffd|f|fffd|rences |fffd| une feuille excel des formules pour |fffd|viter des probl|fffd|mes d'analyse
Public Function deleteSheetNameFromExcelFormula(ByVal s As String) As String
Dim sSheetRef As String

    If InStr(s, "!") > 0 Then
        While sgRegex.matchPattern(s, "!")
            sSheetRef = sgRegex.extractFirstPattern(s, "(\()([^!(]{1,})(!)", 1)
            If sSheetRef = "" Then sSheetRef = sgRegex.extractFirstPattern(s, "([^!(]{1,})(!)", 0)
            s = Replace(s, sSheetRef & "!", "")
        Wend
    End If
    deleteSheetNameFromExcelFormula = s

End Function
Attribute VB_Name = "modVariablesGlobales"
Option Explicit

Global gCurrentStudy As cStudy 'Etude charg|fffd|e
Global gCurrentPlanning As cSpigaoPlanning
Global gExcelListener As aExcelListener 'Ecouteur Excel

Global gSpigaoChoiceKept As String 'TODO |fffd| virer et changer la gestion du formulaire li|fffd|
Global gLastWbNameChecked As String 'M|fffd|moire du dernier Wb pour lequel on a demand|fffd| la conversion.

Attribute VB_Name = "modXnfGenerator"
Option Explicit

Public Sub testcnf()
    generateXnfFromCnf "C:\SPIGAO\PETITQUEVILLYrefection\Spigao\PETITQUEVILLYrefectiondet.cnf"
End Sub

Public Sub generateXnfFromCnf(sCnfPath As String)
On Error GoTo fin

Dim oCnf As aStream
Dim oXnf As aStream

Dim sXnfPath As String
Dim oCnfFile As Object
Dim t() As String
Dim l() As String
Dim newS As String

Dim s As String
Dim sSection As String
Dim sFonte As String
Dim sPoints As String

    If Not sgFileSystem.FileExists(sCnfPath) Then Exit Sub
    
    sXnfPath = Left(sCnfPath, Len(sCnfPath) - 4)
    sXnfPath = sXnfPath & ".xnf"
    
    If sgFileSystem.FileExists(sXnfPath) Then Exit Sub
    
    Set oCnf = New aStream
    Set oXnf = New aStream
    
    Set oCnfFile = oCnf.loadStreamFromFile(sCnfPath)
    
    While Not oCnfFile.AtEndOfStream
        s = oCnfFile.ReadLine
        
        
        
        If Left(s, 1) = "[" Then
            If Left(s, 6) = "[Page " Then
                sSection = "Page"
            Else
                sSection = s
            End If
            oXnf.writeStringLine s
        Else
            If InStr(s, "=") > 0 Then
                l = Split(s, "=")
                If sSection = "[Calage]" And LCase(l(0)) = "orientation" Then
                    oXnf.writeStringLine s
                    oXnf.writeStringLine "Version=2"
                ElseIf sSection = "[Calage]" And LCase(l(0)) = "y2_cm" Then
                    oXnf.writeStringLine s
                    oXnf.writeStringLine "FondGris=0"
                ElseIf sSection = "[Pr|fffd|sentation]" And LCase(l(0)) = "fonte" Then
                    sFonte = l(1)
                    oXnf.writeStringLine s
                ElseIf sSection = "[Pr|fffd|sentation]" And LCase(l(0)) = "points" Then
                    sPoints = l(1)
                    oXnf.writeStringLine s
                    oXnf.writeStringLine "Gras=Faux"
                    oXnf.writeStringLine "Souligne=Faux"
                    oXnf.writeStringLine "Italique=Faux"
                    oXnf.writeStringLine "Barre=Faux"
                ElseIf sSection = "[Pr|fffd|sentation]" And LCase(l(0)) = "couleur" Then
                    oXnf.writeStringLine s
                    oXnf.writeStringLine "CouleurFond=16777215"
                    oXnf.writeStringLine "DefDevise=EUR"
                ElseIf sSection = "[Source]" And LCase(l(0)) = "nombre" Then
                    oXnf.writeStringLine s
                    oXnf.writeStringLine "[Champs R|fffd|currents]"
                    oXnf.writeStringLine "Nombre_ChampsRecurrents=0"
                ElseIf sSection = "[R|fffd|gles verticales]" And IsNumeric(l(0)) Then
                    t = Split(l(1), "|")
                    newS = l(0) & "=" & t(0) & "|" & t(1) & "|" & sFonte & "|" & sPoints & "|16|" & t(4) & "|" & t(5) & "|" & t(6) & "|" & t(7) & "|" & t(8) & "|0"
                    oXnf.writeStringLine newS
                ElseIf sSection = "Page" And Left(l(0), 1) = "r" Then
                    t = Split(l(1), "|")
                    newS = l(0) & "=" & t(0) & "|" & t(1) & "|" & sFonte & "|" & sPoints & "|16|" & t(2) & "|" & t(4) & "|" & t(5) & "|" & t(6) & "|" & t(7) & "|0"
                    oXnf.writeStringLine newS
                ElseIf sSection = "Page" And Left(l(0), 1) = "c" Then
                    t = Split(l(1), "|")
                    newS = l(0) & "=" & t(0) & "|" & t(1) & "|" & sFonte & "|" & sPoints & "|16||" & t(6) & "|" & t(7) & "|" & t(8) & "|" & t(9) & "|" & t(10) & "|" & t(11) & "|" & IIf(Left(t(11), 1) = "%", 2, t(12)) & "|" & t(13) & "|" & t(14) & "|" & t(15) & "|" & t(16) & "|" & t(17) & "|0|Faux|Faux|Faux|16777215||Faux" & IIf(Right(t(1), 3) = "_MT" Or Left(Right(t(1), 4), 3) = "_MT", "|Faux", "")
                    oXnf.writeStringLine newS
                ElseIf sSection = "Page" And LCase(l(0)) = "nombre_champs" Then
                    oXnf.writeStringLine "Image=1"
                    oXnf.writeStringLine s
                Else
                    oXnf.writeStringLine s
                End If
            Else
                MsgBox "erreur " & s
            End If
        End If

    Wend
    
    oXnf.saveAs sXnfPath
fin:
    If Not oXnf Is Nothing Then oXnf.closeStream
    If Not oCnf Is Nothing Then oCnf.closeStream
    'on sort en abandonnant la cr|fffd|ation du xnf
End Sub
Attribute VB_Name = "modtestPlanning"
Option Explicit

Public Sub test_ImportWizard()

    Dim oIDeal As Object
    Dim oDeal As cDeal
    Dim bImport As Boolean
    Dim bDce As Boolean
    Dim bFolder As Boolean
    Dim bDie As Boolean
    Dim sPath As String
    
    
    Set oIDeal = sgSpigao.getDealByNewDeals()
    Set oDeal = sgDealBuilder.buildByIDeal(oIDeal)
    
    If formImportDealWizard.getImportParameters(oDeal, bImport, bFolder, sPath, bDie, bDce) Then
        Debug.Print bImport, bFolder, sPath, bDie, bDce
    Else
        MsgBox "annul|fffd|"
    End If
    

End Sub


' InQuest injected base64 decoded content
' K+-zd
' xZ+-
' y(^z
' y(^z
' '"zQ
' xihm
' +nw#Z
' zjej
' xZ+J
' :WUz
' N+ey
' j)@}
' zjej
' .j{b
' +nw$
' .j{b
' ~)eZ+a
' .j{b
' zjej
' m:-j
' q+nw$
' zjej
' *%Rx
' zjej
' zjej
' m:-jR-z
' (Szjej
' y+kzx-
' .j{b
' /z{@
' *':v
' rgSzjej
' zjej
' x*'~(
' y(^z
' y(^z
' q+nw!b
' +bjS
' V+"n)b
' V+"n)b
' -zebn)b
' %x(Z
' %x*&
' -zebn)b

INQUEST-PP=macro
