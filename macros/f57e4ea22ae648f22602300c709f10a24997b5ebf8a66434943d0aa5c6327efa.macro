Attribute VB_Name = "GwxDigiDisplay_Main"
' All functions and subroutines related to the subroutine DisplayCreate should
' reside in this module or in modules GwxDigiDisplay_<CustomName>.

Sub DigiDisplay(o As Object)

    ' Show custom form
    GwxDigiDisplay_MainForm.Show

End Sub
Attribute VB_Name = "GwxDigiDisplay_MainForm"
Attribute VB_Base = "0{609F1794-A1F1-46E5-B5F3-CA5DA41A696C}{FE4DBA85-9BF0-4F6D-BC34-7D1AA72F4971}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Private Type fld  'Data Type representing a Field of Values
  minval As Integer     'minimum
  maxval As Integer     'maximum
  numplaces As Integer  'Number of numeric places
  increment As Integer  'Increment value for field
  currval As Integer    'Current value of field
End Type

Dim g_fields(10) As fld   'An array of ten fields
Dim g_font As New StdFont 'Global font to be assigned to tags
Dim g_storetext As String 'Storage of base text with asterices
Dim g_symname As String   'Name of symbol



Private Sub chkskip_Click()
  Optstretch.Enabled = Not (chkskip.Value)
  optshrink.Enabled = Not (chkskip.Value)
End Sub


Private Sub cmbeffect_Change()
  If Not (cmbeffect.ListIndex) Then FrBlock.BorderStyle = fmBorderStyleSingle
  FrBlock.SpecialEffect = cmbeffect.ListIndex
End Sub

'Launch the OPC Universal Tag Browser
Private Sub cmdbrowse_Click()
  Dim hwnd As Long
  Dim tag_name As String
  If ThisDisplay.OpenTagBrowser(hwnd, tag_name) Then
    txtbasetext.Text = tag_name
  End If
End Sub

'Here is where the actual building of the display takes place
'All of the proper parameters are grabbed from the form and the building begins
Private Sub cmdbuild_Click()
  Dim Rec As GwxRectangle    'GraphWorX32 rectangle representing each block created
  Dim Recname As String  'Name of text created
  Dim dyn_obj As Object 'color change attached to each rectangle
  Dim Tp As Single      'Top of first rectangle
  Dim lef As Single            'left position of first rectangle
  Dim Time_to_Quit As Boolean  'True when all required points have been made
  Dim colcount As Integer      'Number of columns to create
  Dim rowcount As Integer      'Number of rows to create
  Dim items As Long         'Number of tags that have been created
  Dim go_signal As Boolean
  Dim res As Integer
  Dim ds As String          'data source string
  
  res = 6
  go_signal = True
  If ((optmultiply.Value) And (Not (FrFields.Enabled))) Then
    MsgBox ("You must configure at least one field by placing an asterix (*) in the base text name")
    go_signal = False
  End If
  
  If ((optmultSelect.Value) And (lstmultitags.ListCount < 1)) Then
    MsgBox ("You must select at least one tag to be created")
    go_signal = False
  End If
    
  If Val(txtinvisible.Text) > 0 Then
    res = MsgBox("With the rows and columns you specified, " + txtinvisible.Text + " tags will be left out.  Proceed with building the display anyway?", vbYesNo)
  End If
  items = 0
  
  If ((res = 6) And (go_signal)) Then
    'Initialize Scroll bar
    txtscroller.Width = 0
    Call TransformForm
    'Actual tag creation takes place here
    For colcount = 1 To spnColumns.Value
      'Update the scroll bar
      txtscroller.Width = 198 * (items / Val(txttotal.Text))
      lblprogress.Caption = Mid(str(Int(100 * (items / Val(txttotal.Text)))), 2) + "%"
      GwxDigiDisplay_MainForm.Repaint
      
      For rowcount = 1 To spnrows.Value
        'One item is created
        items = items + 1
        Call MakeRectangle(Rec, rowcount - 1, colcount - 1, items, cmbeffect.ListIndex)
        Recname = Rec.objectName
        If optmultiply.Value Then
          ds = GetCurrentTagName(g_storetext, Time_to_Quit, 0)
        Else
          ds = lstmultitags.List(items - 1)
          If items >= lstmultitags.ListCount Then Time_to_Quit = True
        End If
        
        Set dyn_obj = ThisDisplay.CreateDigitalColorDynamic(Recname, "Digi" + Mid(str(items), 2), False, True, False, False, FrFalse.BackColor, RGB(0, 0, 0), RGB(0, 0, 0), ds)
        If Time_to_Quit Then 'The last tag was just created
          Call Clean_misc(spnsize.Value, spnsize.Value) 'Do any re-sizing.  Bring back GraphworX32
          Exit Sub
        End If
      Next rowcount
    Next colcount
    
    Call Clean_misc(spnsize.Value, spnsize.Value)
  End If
End Sub

Private Sub cmdClose_Click()
  hide
End Sub

Private Sub cmdFalse_Click()
  Dim c As Long
  If ThisDisplay.SelectPaletteColor(c) = True Then
    FrFalse.BackColor = c
    If optOff.Value Then FrBlock.BackColor = c
  End If
End Sub

Private Sub cmdhelp_Click()
  Dim x As Double
  Open "Digital Display Creator.txt" For Output As 1
    Print #1, txtDigiHelp.Text
  Reset
  x = Shell("notepad Digital Display Creator.txt", vbNormalFocus)
End Sub

Private Sub cmdMultiTag_Click()
  Dim TagBrowse As New AutoConnect
  'If you get a "User Defined Type not Defined message here, then
  'go to the "Tools/Refereces" menu and click on the checkbox next
  'to "TagBrowser"
  Dim hwnd As Long
  Dim LaunchTag As Boolean
  Dim Get_More As Boolean
  Get_More = True
  Dim NStr As String
  
  hwnd = ThisDisplay.GetFrameWindowHandle
  LaunchTag = TagBrowse.GetMultiTagFromServerLang(hwnd, 1, 1)
  While (Get_More)
    Get_More = TagBrowse.NameNext(NStr)
    If Get_More Then lstmultitags.AddItem (NStr)
  Wend
  Call update_total
  Frame1.Enabled = True
End Sub

'When the user Clicks OK, count number of astrices and make fields
Private Sub cmdOK_Click()
  Dim x As Integer
  Dim count As Integer
  
  lstfields.Clear 'Clear any old data in the list box
  g_storetext = txtbasetext.Text 'Remember base text before it is modified
  x = get_num_stars 'Find out how many stars are in the text string
  
  If x = 0 Then
    MsgBox ("You must have at least one asterisk in the base tag name to configure fields")
  Else 'if there is at least on star
  
    If (Not (FrFields.Enabled)) Then Call enable_fields
    
    For count = 1 To x 'Add {F1}, {F2}, etc...
      lstfields.AddItem ("{F" + Mid(str(count), 2) + "}")
    Next count
  
    'Initialize the fields
    For x = 0 To 10
      g_fields(x).numplaces = 1
      g_fields(x).increment = 1
      g_fields(x).maxval = 0
      g_fields(x).minval = 0
    Next x
    lstfields.ListIndex = 0
    'Reset total tags, row and column counts
    update_total
  End If
End Sub

Private Sub cmdRemoveMulti_Click()
  Dim x As Integer
  
  x = 0
  While x < lstmultitags.ListCount
    If lstmultitags.Selected(x) Then
      lstmultitags.RemoveItem (x)
    Else
      x = x + 1
    End If
  Wend
  
  Call update_total
End Sub

Private Sub cmdTrue_Click()
  Dim c As Long
  If ThisDisplay.SelectPaletteColor(c) = True Then
    FrTrue.BackColor = c
    If opton.Value Then FrBlock.BackColor = c
  End If
End Sub


'Update information in fields frame with actaul field information
Private Sub lstfields_Click()
  txtmin.Value = g_fields(lstfields.ListIndex).minval
  txtmax.Value = g_fields(lstfields.ListIndex).maxval
  txtinc.Value = g_fields(lstfields.ListIndex).increment
  txtnumplace.Value = g_fields(lstfields.ListIndex).numplaces
  spnnumplace.Value = txtnumplace.Value
End Sub



Private Sub optmultiply_Click()
  If txtmin.Enabled Then FrFields.Enabled = True
  FrFields.Visible = True
  Frame3.Enabled = True
  Frame3.Visible = True
  FrMultiSelect.Visible = False
  FrMultiSelect.Enabled = False
  Call update_total
End Sub

Private Sub optmultSelect_Click()
  FrFields.Enabled = False
  FrFields.Visible = False
  Frame3.Enabled = False
  Frame3.Visible = False
  FrMultiSelect.Visible = True
  FrMultiSelect.Enabled = True
  If Not (g_MultiSelected) Then
    res = MsgBox("Use of this feature requires a referece to the Tagbrowser.dll.  Go into the Visual Basic Editor ('Tools/Macros/Visual Basic Editor...' from GraphWorX) In the Visual Basic Editor, go to the 'Tools/Refereces...' menu, and click on the checkbox next to 'Tag Browser'", vbInformation)
    g_MultiSelected = True
  End If
  Call update_total
End Sub

Private Sub optOff_Click()
  FrBlock.BackColor = FrFalse.BackColor
End Sub

Private Sub opton_Click()
  FrBlock.BackColor = FrTrue.BackColor
End Sub

'Change in increment
Private Sub spninc_Change()
  'Update text, field array, and total
  txtinc.Value = spninc.Value
  g_fields(lstfields.ListIndex).increment = spninc.Value
  Call update_total
End Sub

'Change in number of places
Private Sub spnnumplace_Change()
  'Update field array and text
  txtnumplace.Text = spnnumplace.Value
  g_fields(lstfields.ListIndex).numplaces = spnnumplace.Value
End Sub

'Change in number of columns
Private Sub spncolumns_Change()
  txtcolumns.Value = spnColumns.Value 'Update text
  
  'Let the user know now if any tags will be left out
  If Val(txttotal.Text) > (txtrows.Value * txtcolumns.Value) Then
    txtinvisible.Value = txttotal - (txtrows.Value * txtcolumns.Value)
  Else
    txtinvisible.Value = 0
  End If
End Sub

'Chang in number of rows
Private Sub spnrows_Change()
  txtrows.Value = spnrows.Value 'Update text
  
  'Let the user know if any tags will be left out
  If Val(txttotal.Text) > (spnrows.Value * spnColumns.Value) Then
    txtinvisible.Text = txttotal - (spnrows.Value * spnColumns.Value)
  Else
    txtinvisible.Text = 0
  End If
End Sub

Private Sub spnsize_Change()
  txtsize.Text = spnsize.Value
  FrBlock.Width = spnsize.Value / 1.35
  FrBlock.Height = spnsize.Value / 1.35
  FrBlock.Left = 20 - (FrBlock.Width / 2)
  FrBlock.Top = 20 - (FrBlock.Height / 2)
End Sub

'Change in increment
Private Sub txtinc_Change()
  'Update spin button
  If txtinc.Value > spninc.Max Then 'too big
    spninc.Value = spninc.Max
    txtinc.Value = spninc.Max
  Else
    If spninc.Value < spninc.Min Then 'too small
      spninc.Value = spninc.Min
      txtinc.Value = spninc.Min
    Else
      spninc.Value = txtinc.Value
    End If
  End If
  'update field array and total tags
  g_fields(lstfields.ListIndex).increment = spninc.Value
   Call update_total
End Sub
'New max value entered
Private Sub txtmax_AfterUpdate()
  If Val(txtmax.Text) < Val(txtmin.Text) Then txtmin.Text = txtmax.Text
  'Update field array and total
  g_fields(lstfields.ListIndex).minval = txtmin.Text
  g_fields(lstfields.ListIndex).maxval = txtmax.Text
  Call update_total
End Sub

'New min value entered
Private Sub txtmin_AfterUpdate()
  If Val(txtmin.Text) < 0 Then txtmin.Text = 0
   If Val(txtmin.Text) > Val(txtmax.Text) Then txtmax.Text = txtmin.Text
   'Update field array and total
   g_fields(lstfields.ListIndex).minval = txtmin.Text
   g_fields(lstfields.ListIndex).maxval = txtmax.Text
   Call update_total
End Sub

'Number of numeric places has changed
Private Sub txtnumplace_AfterUpdate()
  If Val(txtnumplace.Text) > spnnumplace.Max Then 'too big
    spnnumplace.Value = spnnumplace.Max
    txtnumplace.Text = spnnumplace.Max
  Else
    If spnnumplace.Value < spnnumplace.Min Then 'too small
      spnnumplace.Value = spnnumplace.Min
      txtnumplace.Text = spnnumplace.Min
    Else
      spnnumplace.Value = Val(txtnumplace.Text)
    End If
  End If
  'update field array
   g_fields(lstfields.ListIndex).numplaces = spnnumplace.Value
End Sub

'Text columns changed
Private Sub txtcolumns_AfterUpdate()
  If txtcolumns.Value > spnColumns.Max Then 'too big
    spnColumns.Value = spnColumns.Max
    txtcolumns.Value = spnColumns.Max
  Else
    If spnColumns.Value < spnColumns.Min Then 'too small
      spnColumns.Value = spnColumns.Min
      txtcolumns.Value = spnColumns.Min
    Else
      spnColumns.Value = txtcolumns.Value
    End If
  End If
End Sub


'Textbox rows changed
Private Sub txtrows_AfterUpdate()
  If txtrows.Value > spnrows.Max Then 'too big
    spnrows.Value = spnrows.Max
    txtrows.Value = spnrows.Max
  Else
    If spnrows.Value < spnrows.Min Then 'too small
      spnrows.Value = spnrows.Min
      txtrows.Value = spnrows.Min
    Else
      spnrows.Value = txtrows.Value
    End If
  End If
  
End Sub




Private Sub UserForm_Activate()
  Dim x As Integer
  cmbeffect.AddItem ("Flat")
  cmbeffect.AddItem ("Raised")
  cmbeffect.AddItem ("Sunken")
  cmbeffect.AddItem ("Etched")
  cmbeffect.ListIndex = 1
End Sub


'Updates the total ammount of tags and give a recommended number of rows and columns
'Four rows by 1 column is close to a square
Sub update_total()
  Dim x As Integer
  
  
  If optmultiply.Value Then
    txttotal.Value = 1
  
    'for each field, the total gets multiplied by the quantity in the field
    For x = 0 To lstfields.ListCount - 1
      txttotal.Value = txttotal.Value * Int((g_fields(x).maxval - g_fields(x).minval + 1) / g_fields(x).increment) + 1
      If ((g_fields(x).maxval - g_fields(x).minval + 1) Mod g_fields(x).increment = 0) Then txttotal.Value = txttotal.Value - 1
      g_fields(x).currval = g_fields(x).minval
    Next x
  Else
    txttotal.Value = lstmultitags.ListCount
  End If
  If txttotal.Value > 0 Then
    'Give recommended amounts for rows and columns
    spnrows.Value = Int(Val(txttotal.Text) ^ 0.5 + 0.0001)
    spnColumns.Value = spnrows.Value

    If (spnrows.Value ^ 2) < Val(txttotal.Text) Then spnrows.Value = spnrows.Value + 1
    If (spnrows.Value * spnColumns.Value) < Val(txttotal.Text) Then spnColumns.Value = spnColumns.Value + 1
  Else
    txtrows.Value = 0
    txtcolumns.Value = 0
  End If
  spnrows.Value = txtrows.Value
  spnColumns.Value = txtcolumns.Value
End Sub

'Enables the "Fields" frame
Sub enable_fields()
  Dim x As Integer
  FrFields.Enabled = True
  'For each item in the frame
  For x = 0 To FrFields.Controls.count - 1
    FrFields.Controls.Item(x).Enabled = True
  Next x
  Frame1.Enabled = True
End Sub

'Gets the number of stars in a string and replaces each star with "{Fx}"
Function get_num_stars() As Integer
  Dim x As Integer
  
  x = 0
  get_num_stars = 0
  
  While x < Len(txtbasetext.Text)
    x = x + 1
    If Mid(txtbasetext.Text, x, 1) = "*" Then
      get_num_stars = get_num_stars + 1 'add to numstars
      'Replace star with "{Fx}"
      txtbasetext.Text = Left(txtbasetext.Text, x - 1) + "{F" + Mid(str(get_num_stars), 2) + "}" + Mid(txtbasetext.Text, x + 1)
    End If
  Wend
End Function


'My encapsulation of CreateProcessPoint.  Makes handling the "Datatype" field easier
Sub MakeRectangle(ByRef InRec As GwxRectangle, row As Integer, col As Integer, Item_Num As Long, CbIndex As Integer)
  Dim sz As Integer
  sz = spnsize.Value
  Select Case CbIndex
    Case 0:  'flat
      Set InRec = ThisDisplay.CreateRectangle(Val(txtleft.Text) + sz * col, Val(txttop.Text) + sz * row, sz, sz, True, FrTrue.BackColor, RGB(0, 0, 0), 1, LineSolid, False, RGB(0, 0, 0), EdgeNone, False, "Rec" + Mid(str(Item_Num), 2), False)
    Case 1:  'raised
      Set InRec = ThisDisplay.CreateRectangle(Val(txtleft.Text) + sz * col, Val(txttop.Text) + sz * row, sz, sz, True, FrTrue.BackColor, RGB(0, 0, 0), 1, LineSolid, False, RGB(0, 0, 0), EdgeRaised, False, "Rec" + Mid(str(Item_Num), 2), False)
    Case 2:  'sunken
      Set InRec = ThisDisplay.CreateRectangle(Val(txtleft.Text) + sz * col, Val(txttop.Text) + sz * row, sz, sz, True, FrTrue.BackColor, RGB(0, 0, 0), 1, LineSolid, False, RGB(0, 0, 0), EdgeSunken, False, "Rec" + Mid(str(Item_Num), 2), False)
    Case 3:  'etched
      Set InRec = ThisDisplay.CreateRectangle(Val(txtleft.Text) + sz * col, Val(txttop.Text) + sz * row, sz, sz, True, FrTrue.BackColor, RGB(0, 0, 0), 1, LineSolid, False, RGB(0, 0, 0), EdgeEtched, False, "Rec" + Mid(str(Item_Num), 2), False)
  End Select
End Sub

'Recursive funtion that replaces the asterix in a string with the proper current
'field value, and then calls the same function to replace more astrices in the rest of the string

'tag_in in the string passed
'Quittime at the top level means all tags have been used
'At lower levels is is a signal to increment the field's current value (emulates a multi-digit counter)

Function GetCurrentTagName(tag_in As String, ByRef quittime As Boolean, x As Integer) As String
  Dim st1 As String 'Part of string before first asterix
  Dim st2 As String 'Rest of string
  Dim xcount As Integer
  Dim incval As Boolean 'Signal to increment value (true at lowest level)
  
  quittime = False
  st1 = Left(tag_in, First_star(tag_in) - 1)
  st2 = Mid(tag_in, First_star(tag_in) + 1, Len(g_storetext) - First_star(tag_in))
  
  If x < lstfields.ListCount - 1 Then 'Not at lowest level
    'Get name of rest of string with Proper values in place
    st2 = GetCurrentTagName(st2, incval, x + 1)
  Else 'At lowest level
    incval = True
  End If
  GetCurrentTagName = st1 + ProperFormat(g_fields(x).currval, g_fields(x).numplaces) + st2
  If incval Then 'Increment current value of current field
    If g_fields(x).currval < g_fields(x).maxval Then 'Room to increment
      g_fields(x).currval = g_fields(x).currval + g_fields(x).increment
    Else
      g_fields(x).currval = g_fields(x).minval
      quittime = True 'Next guy over needs to increment
    End If
  End If
End Function

'Gets the position of the first asterix in a string
Function First_star(worktag As String) As Integer
  Dim x As Integer
  Dim cur_char As String
  cur_char = ""
  x = 0
  While cur_char <> "*"
    x = x + 1
    cur_char = Mid(worktag, x, 1)
  Wend
  First_star = x
End Function
'Displays the proper number of numeric places specified in the item of the field array
Function ProperFormat(tagval As Integer, tagplaces As Integer) As String
  Dim val_st As String
  Dim L_places As Integer
  Dim x As Integer
  
  val_st = Mid(str(tagval), 2)
  L_places = Len(val_st)
  For x = L_places To tagplaces - 1
    val_st = "0" + val_st 'append zeros if needed
  Next x
  ProperFormat = val_st
End Function


'Delete creator symbol if necessary
'Group everything into a symbol
'Do any re-sizing
'Hide Scroll bar and restore GraphWorX32

Sub Clean_misc(wd As Single, ht As Single)
  Dim mainsymbol As GwxSymbol
  Dim Tp As Single    'top of symbol
  Dim lf As Single    'left position of symbol
  Dim disp_w As Long  'display width
  Dim disp_h As Long  'display height
  
  'Update scroll bar
  lblprogress.Caption = "Making Final Adjustments..."
  GwxDigiDisplay_MainForm.Repaint
  
  ThisDisplay.DeleteObject ("DigiDisplay")
  Set mainsymbol = ThisDisplay.CreateSymbol(g_symname)
  
  If Not chkskip.Value Then
  
    lf = Val(txtleft.Text)
    Tp = Val(txttop.Text)
    wd = wd * Val(txtcolumns.Text)
    ht = ht * Val(txtrows.Text)
    
    Call ThisDisplay.GetDisplayDimensions(disp_w, disp_h)
    If ((lf + wd > disp_w) Or (Tp + ht > disp_h)) Then
      
      'If the symbol goes beyond the bounds make bottom right corners match
      If (lf + wd) > disp_w Then lf = disp_w - wd
      If (Tp + ht) > disp_h Then Tp = disp_h - ht
  
      'If the width is still out of bounds Expand world or shrink symbol
      'According to option button in the form
      If wd > disp_w Then
        lf = 0
        If optshrink.Value Then
          wd = disp_w
        Else
          disp_w = wd
        End If
      End If
  
      'If the height is still out of bounds Expand world or shrink symbol
      'According to option button in the form
      If ht > disp_h Then
        Tp = 0
        If optshrink.Value Then
          ht = disp_h
        Else
          disp_h = ht
        End If
      End If
  
      'Update the changes
      If Optstretch.Value Then
        Call ThisDisplay.SetDisplayDimensions(disp_w, disp_h)
      End If
      Call mainsymbol.SetObjectDimensions(lf, Tp, wd, ht)
    End If
  End If
  'Hide the scroll bar
  GwxDigiDisplay_MainForm.hide
End Sub

'Turn the userform into a scroll bar
Sub TransformForm()
  Dim xcount As Integer
  Dim x As Integer
  ThisDisplay.HideWindow
  
  'Hide and disable all controls in the form
  xcount = GwxDigiDisplay_MainForm.Controls.count
  For x = 0 To xcount - 1
    GwxDigiDisplay_MainForm.Controls.Item(x).Visible = False
    GwxDigiDisplay_MainForm.Controls.Item(x).Enabled = False
  Next x
  
  'Enable the scroll bar, and progress text
  GwxDigiDisplay_MainForm.txtBackscroll.Visible = True
  GwxDigiDisplay_MainForm.txtscroller.Visible = True
  GwxDigiDisplay_MainForm.lblprogress.Visible = True
  GwxDigiDisplay_MainForm.lblprogress.Enabled = True
  
  'Change size of the form and update Caption
  GwxDigiDisplay_MainForm.Height = 70
  GwxDigiDisplay_MainForm.Width = 233
  GwxDigiDisplay_MainForm.Caption = "Creating Display..."
  
  GwxDigiDisplay_MainForm.Repaint
  ThisDisplay.ShowWindow
  GwxDigiDisplay_MainForm.Repaint
End Sub
Attribute VB_Name = "GwxRecipeButtons_Main"
' All functions and subroutines related to the subroutine RecipeButtons should
' reside in this module or in modules GwxRecipeButtons_<CustomName>.

Sub RecipeButtons(o As GwxSymbol)

    ' Show custom form
    GwxRecipeButtons_MainForm.Show

End Sub
Attribute VB_Name = "GwxRecipeButtons_MainForm"
Attribute VB_Base = "0{448802BE-F80F-4FB3-80ED-217E95C68909}{6751D019-614C-4C33-9537-F4F3CC0F9464}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False





Option Explicit

' On Initialize
Private Sub UserForm_Initialize()
    Dim sym As GwxSymbol
    Set sym = ThisDisplay.GetHeadObject
    
    If Not sym Is Nothing Then
        Dim i As Integer
        
        For i = 0 To sym.GetNumberOfChildVisibles - 1
            Dim vis 'As GwxVisible
            Set vis = sym.GetVisibleObjectFromIndex(i)
            
            If Not vis Is Nothing Then
                Dim pick 'As GwxPick
                Set pick = vis.GetDynamicObjectFromName("RecipeNew_")
                
                If Not pick Is Nothing Then
                    tbRecipeViewsID.Text = pick.RecipeViewsID
                    Exit Sub
                End If
            End If
        Next
    End If
End Sub

' On button Cancel
Private Sub cmdCancel_Click()
    Unload Me
End Sub

' On button OK
Private Sub cmdOK_Click()
    Dim sym As GwxSymbol
    Set sym = ThisDisplay.GetHeadObject
    
    If Not sym Is Nothing Then
        Dim i As Integer
        
        For i = 0 To sym.GetNumberOfChildVisibles - 1
            Dim vis 'As GwxVisible
            Set vis = sym.GetVisibleObjectFromIndex(i)
            
            If Not vis Is Nothing Then
                Dim pick 'As GwxPick
                Set pick = vis.GetDynamicObjectFromIndex(0)
                
                If Not pick Is Nothing Then
                    pick.RecipeViewsID = tbRecipeViewsID.Text
                End If
                
                Dim hide 'As GwxHide
                Set hide = vis.GetDynamicObjectFromIndex(1)
                
                If Not hide Is Nothing Then
                    Dim strHideDataSource As String
                    strHideDataSource = hide.dataSource
                    strHideDataSource = Replace(strHideDataSource, GetRecipeViewsID(strHideDataSource), tbRecipeViewsID.Text)
                    hide.dataSource = strHideDataSource
                End If
            End If
        Next
    End If
    
    Unload Me
End Sub

' Parse ViewsID name from the tag name
Private Function GetRecipeViewsID(ByVal str As String) As String
    Dim posEnd As Long, posBeg As Long
    posEnd = InStrRev(str, """")
    posBeg = InStrRev(str, """", posEnd - 1)
    GetRecipeViewsID = Mid(str, posBeg + 1, posEnd - posBeg - 1)
End Function

Attribute VB_Name = "GwxTools"
Option Explicit

' GraphWorX32 usefull routines
' ----------------------------

'
' Parse and compose custom data string
'

' Get all parameters from CustomData field as one string
'
'   The parameters should be in following formar: "... Parameters=<custom_parameters> ..."
'
Function CustomData_GetParameters(ByRef strCustomData As String) As String
    Dim posBeg As Integer, posEnd As Integer, RetVal As String
    
    RetVal = ""
    
    posBeg = InStr(1, strCustomData, "Parameters", vbTextCompare)
    If posBeg > 0 Then
        posBeg = InStr(posBeg, strCustomData, "<", vbTextCompare)
        If posBeg > 0 Then
            posEnd = InStr(posBeg, strCustomData, ">", vbTextCompare)
            If posEnd > posBeg Then
                RetVal = Right(strCustomData, Len(strCustomData) - posBeg)
                RetVal = Left(RetVal, posEnd - posBeg - 1)
            End If
        End If
    End If
    
    CustomData_GetParameters = RetVal
End Function

' Replace "... Parameters=<custom_parameters> ..." custom_parameters by custom data
'
'   The parameters should be in following format: "... Parameters=<custom_parameters> ..."
'
Function CustomData_SetParameters(ByRef strCustomData As String, ByRef strNewPar As String) As String
    Dim posBeg As Integer, posEnd As Integer, strOut As String
    
    posBeg = InStr(1, strCustomData, "Parameters", vbTextCompare)
    If posBeg > 0 Then
        posBeg = InStr(posBeg, strCustomData, "<", vbTextCompare)
        If posBeg > 0 Then
            posEnd = InStr(posBeg, strCustomData, ">", vbTextCompare)
            If posEnd > posBeg Then
                strOut = Left(strCustomData, posBeg)
                strOut = strOut + strNewPar
                strOut = strOut + Right(strCustomData, Len(strCustomData) - posEnd + 1)
                
                strCustomData = strOut
            End If
        End If
    End If
    CustomData_SetParameters = strCustomData
End Function

'''
Attribute VB_Name = "GwxTools_"
Option Explicit

'-------------------------------------------------------------------------------
' GraphWorX32 public routines to parse and compose parameters from/to CustomData
' (Inserted automatically by Script Wizard when necessary)
'-------------------------------------------------------------------------------

' Get parameters from CustomData in one string. We assume the parameters
' are in following format: "... Parameters=<custom_parameters> ..."
Function GetParametersFromCustomData(ByRef strCustomData As String) As String
    Dim posBeg As Integer, posEnd As Integer, RetVal As String

    RetVal = ""
    posBeg = InStr(1, strCustomData, "Parameters", vbTextCompare)
    If posBeg > 0 Then
        posBeg = InStr(posBeg, strCustomData, "<", vbTextCompare)
        If posBeg > 0 Then
            posEnd = InStr(posBeg, strCustomData, ">", vbTextCompare)
            If posEnd > posBeg Then
                RetVal = Right(strCustomData, Len(strCustomData) - posBeg)
                RetVal = Left(RetVal, posEnd - posBeg - 1)
            End If
        End If
    End If

    GetParametersFromCustomData = RetVal
End Function

' Compose new CustomData from given parameters and return as a string.
' This string can be used to assign new value to UserCustomData property.
Function GetCustomDataFromParameters(ByRef strCustomData As String, _
        ByRef strParameters As String) As String
    Dim posBeg As Integer, posEnd As Integer, strOut As String

    posBeg = InStr(1, strCustomData, "Parameters", vbTextCompare)
    If posBeg > 0 Then
        posBeg = InStr(posBeg, strCustomData, "<", vbTextCompare)
        If posBeg > 0 Then
            posEnd = InStr(posBeg, strCustomData, ">", vbTextCompare)
            If posEnd > posBeg Then
                strOut = Left(strCustomData, posBeg)
                strOut = strOut + strParameters
                strOut = strOut + Right(strCustomData, Len(strCustomData) - posEnd + 1)

                strCustomData = strOut
            End If
        End If
    End If
    GetCustomDataFromParameters = strCustomData
End Function



' Giving a string with all parameters, return number of parameters
' The delimitier is <space><comma>: ', '
Function GetNumberOfParameters(ByRef strParameters As String) As Integer
    Dim n As Integer, pos As Integer, strDelimit As String

    If Len(strParameters) = 0 Then GetNumberOfParameters = 0 ' return

    strDelimit = ", "
    n = 1
    pos = 0

    Do
        pos = InStr(pos + 1, strParameters, strDelimit, vbTextCompare)
        If pos > 0 Then n = n + 1
    Loop While pos > 0

    GetNumberOfParameters = n
End Function

' From a string with all parameters return a parameter on given position.
Function GetParameterByIndex(ByVal strParameters As String, index As Integer) As String
    Dim i As Integer, n As Integer, pos As Integer, strDelimit As String
    Dim lenDelimit As Integer

    If Len(strParameters) = 0 Then GetParameterByIndex = Empty ' return

    strDelimit = ", "
    lenDelimit = Len(strDelimit)
    pos = 0

    ' Find begin of the parameter
    While i < index
        i = i + 1
        pos = InStr(1, strParameters, strDelimit, vbTextCompare)
        If pos > 0 Then
            strParameters = Right(strParameters, Len(strParameters) - pos - 1)
        Else
            GetParameterByIndex = strParameters             ' return
        End If
    Wend

    ' find end of the parameter
    pos = InStr(1, strParameters, strDelimit, vbTextCompare)
    If pos > 0 Then
        GetParameterByIndex = Left(strParameters, pos - 1)  ' return
    Else
        GetParameterByIndex = strParameters                 ' return
    End If

End Function























Attribute VB_Name = "Kvitir"
Option Explicit

'Private Declare Function Sleep Lib "Kernel32.dll" (ByVal timeout As Long) As Long

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd| GetOPCValue
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd|. |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 0 |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
'|fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd| 0 |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
'|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Private Declare Function GetOPCValue Lib "OPCDualSource.dll" (ByRef a_pvOpcTag As Variant, ByRef a_pvValue As Variant) As Long
'
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd| SetOPCValue
'|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd| |fffd||fffd||fffd|. |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 0 |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
'|fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd| 0 |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|.
'|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Private Declare Function SetOPCValue Lib "OPCDualSource.dll" (ByRef a_pvOpcTag As Variant, ByRef a_pvValue As Variant) As Long
'
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd| SendTU
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|. |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd|
'|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd| (1000 - 1 |fffd||fffd||fffd||fffd||fffd||fffd||fffd|).
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|:
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd| 0. |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd| 1, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd| 1
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 0 |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, 1 |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'|fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd|
'|fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Private Declare Function SendTU Lib "OPCDualSource.dll" (ByRef a_pvOTUName As Variant, ByRef a_pvTUName As Variant, ByVal a_dwTimeOut As Long) As Long
'
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd| WaitValue - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
'|fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd| |fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd| (1000 - 1 |fffd||fffd||fffd||fffd||fffd||fffd||fffd|).
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 0 |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, 1 |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'|fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd|  |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd|
'|fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Private Declare Function WaitValue Lib "OPCDualSource.dll" (ByRef a_pvTagName As Variant, ByRef a_pvValue As Variant, ByVal a_dwTimeOut As Long) As Long
'
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd| SendAlarm
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|. |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
'|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|.
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|:
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| a_pvAlmTagName + ".SeverityAlm" |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| a_dwSeverity
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| a_pvAlmTagName + ".On_MessAlm" |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| a_pvText
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| a_pvAlmTagName |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 0
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| a_pvAlmTagName |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 1
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 0 |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd| 0 |fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd|
'|fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|:
'|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| ON:
'    |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'    |fffd||fffd||fffd||fffd||fffd| On |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'    |fffd||fffd||fffd||fffd||fffd| OFF |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'    |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| DescriptionAlm = ""
'    |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| SeverityAlm |fffd| On_MessAlm |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd|
'        |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Private Declare Function SendAlarm Lib "OPCDualSource.dll" (ByRef a_pvAlmTagName As Variant, ByRef a_pvText As Variant, ByVal a_dwSeverity As Long) As Long

Public Const S_OK As Long = 0
Public rAlias As String
Public theCurrentUser As String
Public theCompName As String

Public Declare Function GetComputerName Lib "kernel32" Alias "GetComputerNameA" _
(ByVal lpBuffer As String, nSize As Long) As Long

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| IsObjOK |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| TRUE |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
Function IsObjOK(obj As Object) As Boolean
  IsObjOK = (Not (obj Is Nothing)) And IsObject(obj)
End Function

Public Function ComputerName() As String
    Dim szName As String
    Dim nSize As Long
    Dim lpResult As Long
        nSize = 255
        szName = Space$(nSize)
        lpResult = GetComputerName(ByVal szName, nSize)
        szName = Left$(szName, nSize)
        ComputerName = szName
End Function

Public Function CurrentUser(SECServer As SECDual, Name As String) As Boolean
    CurrentUser = False
    On Error GoTo catch
    SECServer.Node = ComputerName()
    Name = SECServer.LoggedIn
    If Name = "" Then
        Name = "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| "
    End If
    CurrentUser = True
    Exit Function
catch:
    MsgBox "|fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", vbCritical, "|fffd||fffd||fffd||fffd||fffd||fffd|"
End Function

Sub Kvit_All()
Dim x, z, numvisies, koll_f As Integer
Dim vis_ob As Object
Dim dd As GwxDisplay
Dim SECServer As SECDual
Dim iRet As Long
Dim TheCurrentUserName As String
Dim isLoggedOn As Boolean
  
  koll_f = ThisDisplay.GetOpenPopupCount
  theCompName = ComputerName()
  Set SECServer = New SECDual
  isLoggedOn = CurrentUser(SECServer, TheCurrentUserName)
  Set SECServer = Nothing
  If isLoggedOn Then theCurrentUser = TheCurrentUserName
  For z = 1 To koll_f
    Set dd = ThisDisplay.GetOpenPopupByIndex(z - 1)
    numvisies = dd.GetNumberOfTopLevelVisibles
    For x = 1 To numvisies
      Set vis_ob = dd.GetVisibleObjectFromIndex(x - 1)
      If InStr(vis_ob.objectName, "TI_Symbol_") <> 0 Then
        Set vis_ob = vis_ob.GetVisibleObjectFromName("TI_Data_Text_")
        If IsObjOK(vis_ob) Then Call Get_tags(vis_ob)
      End If
    Next
  Next
  numvisies = ThisDisplay.GetNumberOfTopLevelVisibles
  For x = 1 To numvisies
    Set vis_ob = ThisDisplay.GetVisibleObjectFromIndex(x - 1)
    If InStr(vis_ob.objectName, "TI_Symbol_") <> 0 Then
      Set vis_ob = vis_ob.GetVisibleObjectFromName("TI_Data_Text_")
      If IsObjOK(vis_ob) Then Call Get_tags(vis_ob)
    End If
  Next
End Sub

Sub Kvit(o As GwxPick)
Dim SECServer As SECDual
Dim TheCurrentUserName As String
Dim isLoggedOn As Boolean
    
    theCompName = ComputerName()
    Set SECServer = New SECDual
    isLoggedOn = CurrentUser(SECServer, TheCurrentUserName)
    Set SECServer = Nothing
    If isLoggedOn Then theCurrentUser = TheCurrentUserName
    Call Get_tags(o.GetVisibleObject)
End Sub

Public Sub Get_tags(ByRef v_object As Object)
Dim x, y, ndyn, MyPos As Integer
Dim iRet As Double
Dim nTimeout As Long
Dim dyn_obj, sub_dyn As Object
Dim Newval, Point, szDesc, PointVal, szDescVal, Alm As Variant
Dim RaliasVal As String
    nTimeout = 100
    ndyn = v_object.GetNumberOfDynamics
    For x = 1 To ndyn
        Set dyn_obj = v_object.GetDynamicObjectFromIndex(x - 1)
        If dyn_obj.dataSource <> "" Then
            rAlias = LCase(dyn_obj.dataSource)
            MyPos = InStr(1, rAlias, ".flash")
            If MyPos <> 0 Then
                iRet = GetOPCValue(rAlias, szDesc)
                Point = rAlias
                Newval = 0
                RaliasVal = Left(rAlias, MyPos - 1)
                iRet = GetOPCValue(RaliasVal, szDescVal)
                If szDesc <> 0 Then
                    RaliasVal = Left(rAlias, MyPos - 1)
                    iRet = GetOPCValue(RaliasVal, szDescVal)
                    iRet = SetOPCValue(Point, 0)   '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                    Point = rAlias
                    iRet = WaitValue(Point, Newval, nTimeout)
                    If iRet <> S_OK Then
                        rAlias = Left(rAlias, MyPos - 1)
                        Point = rAlias + ".Description"
                        iRet = GetOPCValue(Point, szDesc)
                        If Len(szDesc) < 2 Then szDesc = Point
                        Point = szDesc + ". |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
                        iRet = SetOPCValue("SERVICE.TU.SWTU.On_MessAlm", Point)
                        If iRet = 0 Then
                            iRet = SetOPCValue("SERVICE.TU.SWTU", 0)
                            iRet = SetOPCValue("SERVICE.TU.SWTU", 1)
                        End If
                    End If
                    rAlias = Left(rAlias, MyPos - 1)
                    Point = rAlias + ".Description"
                    iRet = GetOPCValue(Point, szDesc)
                    If Len(szDesc) < 2 Then szDesc = Point
                    Point = szDesc + ". |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " + theCurrentUser + " !!! |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| " + theCompName + ". |fffd||fffd||fffd|.|fffd||fffd||fffd||fffd|.=" + str(szDescVal)
                    iRet = SetOPCValue("SERVICE.TU.SWTU.On_MessAlm", Point)
                    If iRet = 0 Then
                        iRet = SetOPCValue("SERVICE.TU.SWTU", 0)
                        iRet = SetOPCValue("SERVICE.TU.SWTU", 1)
                    End If
                End If
            End If
        End If
        Set dyn_obj = Nothing
    Next x
End Sub


Attribute VB_Name = "Main"
Option Explicit
'version 2.5 (31/10/2013)

'   |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
Sub SetVisBtHistoryPlayer()
Dim LocalVar As GwxPoint

    If IniFile.FileExists(GetSysDisk + HistoryPlayerPass + "HPPanel.exe") Then
        Set LocalVar = ThisDisplay.GetPointObjectFromName("~~visHistoryPlayer~~")
        If Not (LocalVar Is Nothing) Then
            LocalVar.Value = True
            Set LocalVar = Nothing
        End If
    End If
End Sub

'   |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd|" |fffd| |fffd||fffd|
Sub SetVisBtReport()
Dim LocalVar As GwxPoint

    If IniFile.FileExists(ThisDisplay.GetWorkingDirectory + "\rp\report.exe") Then
        Set LocalVar = ThisDisplay.GetPointObjectFromName("~~ExistsReport~~")
        If Not (LocalVar Is Nothing) Then
            LocalVar.Value = True
            Set LocalVar = Nothing
        End If
    End If
End Sub

'   |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
Sub SetVisBtHydro()
Dim LocalVar As GwxPoint

    If IniFile.FileExists(GetSysDir + "\HydrouklonProj.ocx") Then
        Set LocalVar = ThisDisplay.GetPointObjectFromName("~~visHydrouklon~~")
        If Not (LocalVar Is Nothing) Then
            LocalVar.Value = True
            Set LocalVar = Nothing
        End If
    End If
End Sub

'   |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|/|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
Sub SetAgregatView()
Dim LocalVar As GwxPoint
    
    Set LocalVar = ThisDisplay.GetPointObjectFromName("~~ShowMiniLayer~~")
    If Not (LocalVar Is Nothing) Then
        LocalVar.Value = IniReg.RegReadNum(NPS_RegPath, "AgregatView")
        Set LocalVar = Nothing
    End If
End Sub

'   |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|/|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|/|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|/...)
Sub SetTankView()
Dim LocalVar As GwxPoint

    Set LocalVar = ThisDisplay.GetPointObjectFromName("~~mode_view~~")
    If Not (LocalVar Is Nothing) Then
        LocalVar.Value = IniReg.RegReadNum(RP_RegPath, "TypeParams")
        Set LocalVar = Nothing
    End If
End Sub

'   |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Sub SetHView()
Dim LocalVar As GwxPoint

    Set LocalVar = ThisDisplay.GetPointObjectFromName("~~mode_view~~")
    If Not (LocalVar Is Nothing) Then
        LocalVar.Value = 0
        Set LocalVar = Nothing
    End If
End Sub

'   |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Sub SetQView()
Dim LocalVar As GwxPoint

    Set LocalVar = ThisDisplay.GetPointObjectFromName("~~mode_view~~")
    If Not (LocalVar Is Nothing) Then
        LocalVar.Value = 1
        Set LocalVar = Nothing
    End If
End Sub

'   |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Sub SetVView()
Dim LocalVar As GwxPoint

    Set LocalVar = ThisDisplay.GetPointObjectFromName("~~mode_view~~")
    If Not (LocalVar Is Nothing) Then
        LocalVar.Value = 2
        Set LocalVar = Nothing
    End If
End Sub

'   |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|/|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Sub SetHVView()
Dim LocalVar As GwxPoint

    Set LocalVar = ThisDisplay.GetPointObjectFromName("~~mode_view~~")
    If Not (LocalVar Is Nothing) Then
        LocalVar.Value = 3
        Set LocalVar = Nothing
    End If
End Sub

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Sub SetVisFlash()
Dim LocalVar As GwxPoint
  
    Set LocalVar = ThisDisplay.GetPointObjectFromName("~~Flash~~")
    If Not (LocalVar Is Nothing) Then
        LocalVar.Value = IniReg.RegReadNum(SDKU_RegPath, "FlashView")
        Set LocalVar = Nothing
    End If
End Sub

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Sub SetVisFlashTI()
Dim LocalVar As GwxPoint
  
    Set LocalVar = ThisDisplay.GetPointObjectFromName("~~FlashTI~~")
    If Not (LocalVar Is Nothing) Then
        LocalVar.Value = IniReg.RegReadNum(SDKU_RegPath, "FlashViewTI")
        Set LocalVar = Nothing
    End If
End Sub

'   |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|
Public Sub LU_Setup()
  
On Error GoTo ErrorHandler
    LU_Setup_Form.Show
    Exit Sub
ErrorHandler:
    LU_Setup_Form.Show
End Sub

'|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|
Public Sub NPS_Setup()
  
On Error GoTo ErrorHandler
    NPS_Setup_Form.Show
    Exit Sub
ErrorHandler:
    NPS_Setup_Form.Show
End Sub

'|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|
Public Sub RP_Setup()
  
On Error GoTo ErrorHandler
    RP_Setup_Form.Show
    Exit Sub
ErrorHandler:
    RP_Setup_Form.Show
End Sub

'|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
Public Sub OBJ_Setup(o As GwxPick)
  
On Error GoTo ErrorHandler
    OBJ_Setup_Form.Show
    Exit Sub
ErrorHandler:
    OBJ_Setup_Form.Show
End Sub
'|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
Public Sub Unit_Setup(o As GwxPick)
  
On Error GoTo ErrorHandler
    Unit_Setup_Form.Show
    Exit Sub
ErrorHandler:
    Unit_Setup_Form.Show
End Sub

'   |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Sub SetSecurity(Optional nameParamTU As String, Optional nameParamTR As String, Optional nameParamUST As String, Optional TAG As String)
Dim lvParam As GwxPoint
Dim visTU As Boolean, visTR As Boolean, visUST As Boolean

    Call GetSecurity(visTU, visTR, visUST, TAG)
    If Len(nameParamTU) > 0 Then
        Set lvParam = ThisDisplay.GetPointObjectFromName(nameParamTU)
        If Not (lvParam Is Nothing) Then
            lvParam.Value = visTU
            Set lvParam = Nothing
        End If
    End If
    If Len(nameParamTR) > 0 Then
        Set lvParam = ThisDisplay.GetPointObjectFromName(nameParamTR)
        If Not (lvParam Is Nothing) Then
            lvParam.Value = visTR
            Set lvParam = Nothing
        End If
    End If
    If Len(nameParamUST) > 0 Then
        Set lvParam = ThisDisplay.GetPointObjectFromName(nameParamUST)
        If Not (lvParam Is Nothing) Then
            lvParam.Value = visUST
            Set lvParam = Nothing
        End If
    End If
End Sub

Attribute VB_Name = "RP_Main"
Option Explicit

Public Const Tank_PathLoad = "http://bmn/sdku/popup\bmn_tank.gdf"
Public Const RP_RegPath = "Software\SDKUGWX\RP"

'new
Public Declare Function GetSystemMetrics Lib "user32" (ByVal nIndex As Long) As Long

Public Const SM_CXSCREEN = 0
Public Const SM_CYSCREEN = 1

Sub Tank_LoadPopup(o As GwxPick)
Dim aCommon As String
Dim vis As Object
Dim visNum As Object
Dim visNumText As Object
Dim dyn As Object
'Dim nPopupCnt As Integer
Dim gfxPopup As GwxDisplay
Dim sAliasCmd As String
Dim FlResize As Boolean
Dim TypePrarams As Integer
Dim tmWaitStart As Single

On Error GoTo TermProc
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| c |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
' |fffd| |fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd|
' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
aCommon = ""
Set vis = o.GetVisibleObject
If IsObjOK(vis) Then
  Set visNum = vis.GetVisibleObjectFromName("NumberTank")
  If IsObjOK(visNum) Then
    Set visNumText = visNum.GetVisibleObjectFromName("NumberTankText")
    If IsObjOK(visNumText) Then
      Set dyn = visNumText.GetDynamicObjectFromName("DynamicNumberTankText")
      aCommon = dyn.dataSource
    End If
  End If
End If
If aCommon = "" Then Exit Sub
aCommon = Mid$(aCommon, 1, InStr(aCommon, ".Name")) ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
sAliasCmd = "TANK" + Chr(9) + aCommon + Chr(13) + Chr(10) ' |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| GWX

' |fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|.

'nPopupCnt = ThisDisplay.GetOpenPopupCount ' |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'If nPopupCnt > 0 Then
   Set gfxPopup = ThisDisplay.GetOpenPopupWithTitle("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|") ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
   If IsObjOK(gfxPopup) Then
      gfxPopup.SetAliases (sAliasCmd) ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      FlResize = IniReg.RegReadNum(RP_RegPath, "ReSizeOn") ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
   Else
     'Set gfxPopup = ThisDisplay.OpenPopupWinSetAliases(Tank_PathLoad, False, False, True, 2, sAliasCmd)
     Set gfxPopup = ThisDisplay.OpenPopupWindow(Tank_PathLoad, False, True, True)
     Call gfxPopup.SetAliasDefinition("TANK", aCommon)

     FlResize = True
   End If
'Else
'End If

'On Error GoTo 0
If IsObjOK(gfxPopup) And FlResize Then ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
   Call Tank_SetPopUpPosWindow(gfxPopup, o)
   gfxPopup.ViewFitToWindow
   gfxPopup.ShowWindow
   gfxPopup.ViewShowWholeDisplay ' |fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ViewFitToWindow |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
End If

TermProc:

Set gfxPopup = Nothing
Set visNum = Nothing
Set visNumText = Nothing
Set dyn = Nothing

End Sub


Private Sub Tank_SetPopUpPosWindow(objPopup As GwxDisplay, objPick As Object)
Dim nLeft As Long, nTop As Long, nW As Long, nH As Long
Dim nW0 As Long, nH0 As Long
Dim nL As Long, nT As Long
Dim nCorell As Single
Dim nVisLeft As Long, nVisTop As Long, nVisRight As Long
Dim rLeft As Single, rTop As Single, rW As Single, rH As Single
Dim objVis As Object
Dim TypePrarams As Integer
Dim TypePos As Integer, TypeSize As Integer
Dim SizePrc As Integer

On Error GoTo TermProc

TypePos = IniReg.RegReadNum(RP_RegPath, "TypePos")
TypeSize = IniReg.RegReadNum(RP_RegPath, "TypeSize")
SizePrc = IniReg.RegReadNum(RP_RegPath, "SizePrc")

Call objPopup.GetWindowDimensionsPixels(nLeft, nTop, nW, nH) ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
nCorell = nW / nH ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Call ThisDisplay.GetClientDimensionsPixels(nLeft, nTop, nW0, nH0) ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
If TypePos = 2 Then ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
  If TypeSize Then ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    nH = SizePrc / 100 * nH0 ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
    nW = nCorell * nH ' |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  End If
  Set objVis = objPick.GetVisibleObject
  Call objVis.GetObjectDimensions(rLeft, rTop, rW, rH)
  Set objVis = Nothing
  nVisLeft = rLeft
  nVisTop = rTop
  Call ThisDisplay.LogicalPointToScreen(nVisLeft, nVisTop)
  nVisRight = rLeft + rW
  nVisTop = rTop
  Call ThisDisplay.LogicalPointToScreen(nVisRight, nVisTop)
  nL = nVisRight + 2  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
  If (nL + nW) > (nLeft + nW0) Then
     ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
     nL = nVisLeft - nW - 2
     If nL < nLeft Then nL = nLeft
  End If
  nT = nVisTop  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
  If (nT + nH) > (nTop + nH0) Then     ' |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
     nT = (nTop + nH0) - nH
     If nT < nTop Then nT = nTop
  End If
ElseIf TypePos = 1 Then ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  If TypeSize Then ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    nH = SizePrc / 100 * nH0 ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
    nW = nCorell * nH ' |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  End If
  nL = nLeft + (nW0 - nW) / 2
  nT = nTop + (nH0 - nH) / 2
Else '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
  nLeft = 0
  nTop = 0
  nW0 = GetSystemMetrics(SM_CXSCREEN)
  nH0 = GetSystemMetrics(SM_CYSCREEN)
  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
  If TypeSize Then ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    nH = SizePrc / 100 * nH0 ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    nW = nCorell * nH ' |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  End If
  nL = nLeft + (nW0 - nW) / 2
  nT = nTop + (nH0 - nH) / 2
End If
  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| Popup
  
  Call objPopup.SetWindowDimensionsPixels(nL, nT, nW, nH)
  'Print #1, "objPopup.GetWindowDimensionsPixels: nLeft " + Str(nLeft) + "  nTop" + Str(nTop) + "  nW" + Str(nW) + "  nH" + Str(nH)
  'Call objPopup.GetClientDimensionsPixels(nLeft, nTop, nW0, nH0) ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
  'msgbox "ThisDisplay.GetClientDimensionsPixels: nLeft " + Str(nLeft) + "n  Top" + Str(nTop) + "  nW0" + Str(nW0) + "  nH0" + Str(nH0)
  'msgbox "objVis.GetObjectDimensions: rLeft " + Str(rLeft) + "  rTop" + Str(rTop) + "  rW" + Str(rW) + "  rH" + Str(rH)
  'Call objPopup.GetClientDimensionsPixels(nLeft, nTop, nW0, nH0) ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
  'Print #1, "objPopup.GetClientDimensionsPixels: nLeft " + Str(nLeft) + "n  Top" + Str(nTop) + "  nW0" + Str(nW0) + "  nH0" + Str(nH0)
TermProc:

Set objVis = Nothing
  
End Sub

Sub SetHView()
  ThisDisplay.GetPointObjectFromName("~~mode_view~~").Value = 0
End Sub

Sub SetQView()
  ThisDisplay.GetPointObjectFromName("~~mode_view~~").Value = 1
End Sub

Sub SetVView()
  ThisDisplay.GetPointObjectFromName("~~mode_view~~").Value = 2
End Sub

Sub SetHVView()
  ThisDisplay.GetPointObjectFromName("~~mode_view~~").Value = 3
End Sub

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| IsObjOK |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| TRUE |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
Function IsObjOK(obj As Object) As Boolean
  IsObjOK = (Not (obj Is Nothing)) And IsObject(obj)
End Function

Public Sub Tank_Setup()
  Tank_Setup_Form.Show
End Sub


Public Sub TI_Setup()
  TI_Setup_Form.Show
End Sub

Attribute VB_Name = "RP_Setup_Form"
Attribute VB_Base = "0{F176A58E-D281-45DA-BCF2-F4FAB39D81F3}{B3E973EE-5E30-4DE3-93FD-C3EF32258C1F}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False







Option Explicit
'version 1.0

Private Sub btn_Apply_Click()
Dim iRet As Long
Dim LocalVar As GwxPoint

Set LocalVar = ThisDisplay.GetPointObjectFromName("~~mode_view~~")
If TypeParams_0.Value Then
    iRet = IniReg.RegWriteNum(RP_RegPath, "TypeParams", 0)
    If Not (LocalVar Is Nothing) Then LocalVar.Value = 0
ElseIf TypeParams_1.Value Then
    iRet = IniReg.RegWriteNum(RP_RegPath, "TypeParams", 1)
    If Not (LocalVar Is Nothing) Then LocalVar.Value = 1
ElseIf TypeParams_2.Value Then
    iRet = IniReg.RegWriteNum(RP_RegPath, "TypeParams", 2)
    If Not (LocalVar Is Nothing) Then LocalVar.Value = 2
ElseIf TypeParams_3.Value Then
    iRet = IniReg.RegWriteNum(RP_RegPath, "TypeParams", 3)
    If Not (LocalVar Is Nothing) Then LocalVar.Value = 3
End If
Set LocalVar = Nothing

If ckbFlashView.Value Then
    iRet = IniReg.RegWriteNum(SDKU_RegPath, "FlashView", 1)
Else
    iRet = IniReg.RegWriteNum(SDKU_RegPath, "FlashView", 0)
End If
Set LocalVar = ThisDisplay.GetPointObjectFromName("~~Flash~~")
If Not (LocalVar Is Nothing) Then LocalVar.Value = ckbFlashView.Value
Set LocalVar = Nothing

If ckbFlashViewTI.Value Then
    iRet = IniReg.RegWriteNum(SDKU_RegPath, "FlashViewTI", 1)
Else
    iRet = IniReg.RegWriteNum(SDKU_RegPath, "FlashViewTI", 0)
End If
Set LocalVar = ThisDisplay.GetPointObjectFromName("~~FlashTI~~")
If Not (LocalVar Is Nothing) Then LocalVar.Value = ckbFlashViewTI.Value
Set LocalVar = Nothing

RP_Setup_Form.hide
End Sub

Private Sub Btn_Cancel_Click()

RP_Setup_Form.hide
End Sub

Private Sub UserForm_Activate()
Dim TypeParams As Byte

TypeParams = IniReg.RegReadNum(RP_RegPath, "TypeParams")
Select Case TypeParams
  Case 0
    TypeParams_0.Value = True
  Case 1
    TypeParams_1.Value = True
  Case 2
    TypeParams_2.Value = True
  Case 3
    TypeParams_3.Value = True
End Select
ckbFlashView.Value = IniReg.RegReadNum(SDKU_RegPath, "FlashView")
ckbFlashViewTI.Value = IniReg.RegReadNum(SDKU_RegPath, "FlashViewTI")
End Sub
Attribute VB_Name = "ThisDisplay"
Attribute VB_Base = "0{CA84D600-E21C-11CE-97DA-00608CB87A7C}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Trend"
Option Explicit

Public Declare Function FindWindow Lib "user32" Alias "FindWindowA" _
    (ByVal lpString As Long, ByVal lpString As String) As Long
Private Declare Function PostMessage Lib "user32" Alias "PostMessageA" _
    (ByVal hwnd As Long, ByVal wMsg As Long, ByVal wParam As Long, ByVal lParam _
    As Long) As Long

Private Type PROCESS_INFORMATION
    hProcess As Long
    hThread As Long
    dwProcessId As Long
    dwThreadId As Long
End Type
Private Type STARTUPINFO
    cb As Long
    lpReserved As String
    lpDesktop As String
    lpTitle As String
    dwX As Long
    dwY As Long
    dwXSize As Long
    dwYSize As Long
    dwXCountChars As Long
    dwYCountChars As Long
    dwFillAttribute As Long
    dwFlags As Long
    wShowWindow As Integer
    cbReserved2 As Integer
    lpReserved2 As Long
    hStdInput As Long
    hStdOutput As Long
    hStdError As Long
End Type

Private Declare Function CreateProcess Lib "kernel32" Alias "CreateProcessA" _
    (ByVal lpApplicationName As String, _
    ByVal lpCommandLine As String, _
    lpProcessAttributes As Any, _
    lpThreadAttributes As Any, _
    ByVal bInheritHandles As Long, _
    ByVal dwCreationFlags As Long, _
    lpEnvironment As Any, _
    ByVal lpCurrentDriectory As String, _
    lpStartupInfo As STARTUPINFO, _
    lpProcessInformation As PROCESS_INFORMATION) As Long

Const NORMAL_PRIORITY_CLASS = &H20&
Const WM_QUIT = &H12
Const S_OK As Long = 0

Public RetTrendForm As Boolean

Function TrendViewSignal(SStr As String)
  Dim RetID As Long
  Dim PathTrendFile As String
  
  PathTrendFile = ThisDisplay.GetWorkingDirectory + "\trendsig.sgl"
  Open PathTrendFile For Output As #1
  Print #1, SStr
  Close #1
  RetID = StartTrend(PathTrendFile)

End Function

Sub TrendViewOne(o As GwxPick)
  Dim SStr As String
  Dim OBJ_dyn As Object
  Dim pc As Long
  Dim RetID As Long
  
  Set OBJ_dyn = GetDynamicFromPick(o)
  SStr = OBJ_dyn.dataSource
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  pc = 0
  Do
    pc = InStr(SStr, "\") + 1
    If pc = 1 Then Exit Do
    SStr = Mid(SStr, pc)
  Loop While True

  RetID = TrendViewSignal(SStr)

End Sub

Sub TrendViewAdd(o As GwxPick)
  Dim SStr As String
  Dim OBJ_dyn As Object
  Dim pc As Long
  Dim PathTrendFile As String
  Dim RetID As Long
  Dim i As Integer
  
  Set OBJ_dyn = GetDynamicFromPick(o)
  SStr = OBJ_dyn.dataSource
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  pc = 0
  Do
    pc = InStr(SStr, "\") + 1
    If pc = 1 Then Exit Do
    SStr = Mid(SStr, pc)
  Loop While True

  PathTrendFile = ThisDisplay.GetWorkingDirectory + "\trendsig.sgl"
  Open PathTrendFile For Append As #1
  Print #1, SStr
  Close #1
  
  Trend_MainForm.LB_Signals.Clear
  Open PathTrendFile For Input As #1
  While Not EOF(1)
    Input #1, SStr
    Trend_MainForm.LB_Signals.AddItem SStr
  Wend
  Close #1
  Trend_MainForm.Show
  Open PathTrendFile For Output As #1
  For i = 0 To Trend_MainForm.LB_Signals.ListCount - 1
    Print #1, Trend_MainForm.LB_Signals.List(i, 0)
  Next i
  Close #1
  If RetTrendForm Then
    RetID = StartTrend(PathTrendFile)
  End If

End Sub

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| WebTrend-|fffd| |fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Function GetWebTrendFileName() As String
  
  GetWebTrendFileName = IniFile.INIReadStr(ThisDisplay.GetWorkingDirectory + "\PROJECT.INI", "Trend", "WebTrend")
  If GetWebTrendFileName = "" Then
    MsgBox "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| INI-|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!", vbCritical + vbOKOnly, "|fffd||fffd||fffd||fffd||fffd||fffd|"
  ElseIf Not FileExists(GetWebTrendFileName) Then
    MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| INI-|fffd||fffd||fffd||fffd||fffd|! (" + GetWebTrendFileName + ")", vbCritical + vbOKOnly, "|fffd||fffd||fffd||fffd||fffd||fffd|"
  End If
End Function

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| InfinityTrend|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd|
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Private Function StartTrend(PathTrendFile As String) As Long
  Dim pInfo As PROCESS_INFORMATION
  Dim sInfo As STARTUPINFO
  Dim Comstr As String
  'Dim sTitle As String
  Dim iHwnd As Long
  Dim PathWebWrend As String
  
  StartTrend = 0
  PathWebWrend = GetWebTrendFileName()
  If PathWebWrend <> "" Then
    'sTitle = "InfinityTrends"
    'iHwnd = FindWindow(0&, sTitle)
    'If iHwnd <> 0 Then iReturn = PostMessage(iHwnd, WM_QUIT, 0&, 0&)
    'Sleep 100
    'RetID = Shell(PathWebWrend + " File=" + PathTrendFile, vbNormalFocus)
    Comstr = PathWebWrend + " File=" + PathTrendFile
    sInfo.cb = Len(sInfo)
    StartTrend = CreateProcess(vbNullString, Comstr, ByVal 0&, ByVal 0&, 0&, NORMAL_PRIORITY_CLASS, ByVal 0&, vbNullString, sInfo, pInfo)
  End If
End Function

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| :)
Private Function GetDynamicFromPick(o As Object) As Object
  Dim OBJ_vis As Object
  Dim OBJ_dyn As Object
  Dim i As Integer, num_dyn As Integer
  
  Set OBJ_vis = o.GetVisibleObject
  num_dyn = OBJ_vis.GetNumberOfDynamics
  i = 0
  Do
    Set OBJ_dyn = OBJ_vis.GetDynamicObjectFromIndex(i)
    If OBJ_dyn.GetObjectTypeName = "GwxProcessPoint" Then Exit Do
    i = i + 1
  Loop While i < num_dyn
  
  If i >= num_dyn Then MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| GwxProcessPoint."
  
  Set GetDynamicFromPick = OBJ_dyn
End Function

Public Function FileExists(strFile As String) As Boolean

    On Error GoTo ErrorHandler
    FileExists = (Len(Dir(strFile)) > 0)
    Exit Function
ErrorHandler:
    FileExists = False
End Function

Attribute VB_Name = "Trend_MainForm"
Attribute VB_Base = "0{65F9F012-F09E-473F-9A3C-4D77E88713A4}{3CDE45EB-ACB1-4C6D-97D4-A2C41CE5CC47}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False






Option Explicit

Private Sub Btn_Clear_Click()
  LB_Signals.Clear
End Sub

Private Sub CB_Close_Click()
  Trend.RetTrendForm = False
  hide
End Sub

Private Sub CB_Delete_Click()
  If LB_Signals.ListIndex > -1 Then LB_Signals.RemoveItem LB_Signals.ListIndex
End Sub

Private Sub CB_toTrendView_Click()
  Trend.RetTrendForm = True
  hide
End Sub

Attribute VB_Name = "analog_Main"
Option Explicit

Public Const TI_PathLoad = "http://bmn/sdku/PopUp/bmn_TI.gdf"
Public Const TI_RegPath = "Software\SDKUGWX\analog"
Public Const P_RegPath = "Software\SDKUGWX\analog\P"

Public Declare Function GetSystemMetrics Lib "user32" (ByVal nIndex As Long) As Long

Public Const SM_CXSCREEN = 0
Public Const SM_CYSCREEN = 1

Sub TI_LoadPopup(o As GwxPick)
Dim aCommon As String
Dim vis As Object
Dim visNum As Object
Dim visNumText As Object
Dim dyn As Object
'Dim nPopupCnt As Integer
Dim gfxPopup As GwxDisplay
Dim sAliasCmd As String
Dim FlResize As Boolean
Dim TypePrarams As Integer
Dim tmWaitStart As Single

On Error GoTo TermProc

' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
aCommon = o.GetVisibleObject.GetDynamicObjectFromIndex(0).dataSource
If aCommon = "" Then Exit Sub
'aCommon = Mid$(aCommon, 1, InStr(aCommon, ".Name")) ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
sAliasCmd = "DS" + Chr(9) + aCommon + Chr(13) + Chr(10) ' |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| GWX

' |fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|.

'nPopupCnt = ThisDisplay.GetOpenPopupCount ' |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'If nPopupCnt > 0 Then
   Set gfxPopup = ThisDisplay.GetOpenPopupWithTitle("|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|") ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
   If IsObjOK(gfxPopup) Then
      gfxPopup.SetAliases (sAliasCmd) ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      FlResize = IniReg.RegReadNum(TI_RegPath, "ReSizeOn") ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
   Else
     'Set gfxPopup = ThisDisplay.OpenPopupWinSetAliases(TI_PathLoad, False, False, True, 2, sAliasCmd)
     Set gfxPopup = ThisDisplay.OpenPopupWindow(TI_PathLoad, False, True, True)
     Call gfxPopup.SetAliasDefinition("DS", aCommon)

     FlResize = True
   End If
'Else
'End If

'On Error GoTo 0
If IsObjOK(gfxPopup) And FlResize Then ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
   Call TI_SetPopUpPosWindow(gfxPopup, o)
   gfxPopup.ViewFitToWindow
   gfxPopup.ShowWindow
   gfxPopup.ViewShowWholeDisplay ' |fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ViewFitToWindow |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
End If

TermProc:

Set gfxPopup = Nothing
Set visNum = Nothing
Set visNumText = Nothing
Set dyn = Nothing

End Sub


Private Sub TI_SetPopUpPosWindow(objPopup As GwxDisplay, objPick As Object)
Dim nLeft As Long, nTop As Long, nW As Long, nH As Long
Dim nW0 As Long, nH0 As Long
Dim nL As Long, nT As Long
Dim nCorell As Single
Dim nVisLeft As Long, nVisTop As Long, nVisRight As Long
Dim rLeft As Single, rTop As Single, rW As Single, rH As Single
Dim objVis As Object
Dim TypePrarams As Integer
Dim TypePos As Integer, TypeSize As Integer
Dim SizePrc As Integer

On Error GoTo TermProc

TypePos = IniReg.RegReadNum(TI_RegPath, "TypePos")
TypeSize = IniReg.RegReadNum(TI_RegPath, "TypeSize")
SizePrc = IniReg.RegReadNum(TI_RegPath, "SizePrc")

Call objPopup.GetWindowDimensionsPixels(nLeft, nTop, nW, nH) ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
nCorell = nW / nH ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Call ThisDisplay.GetClientDimensionsPixels(nLeft, nTop, nW0, nH0) ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
If TypePos = 2 Then ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
  If TypeSize Then ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    nH = SizePrc / 100 * nH0 ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
    nW = nCorell * nH ' |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  End If
  Set objVis = objPick.GetVisibleObject
  Call objVis.GetObjectDimensions(rLeft, rTop, rW, rH)
  Set objVis = Nothing
  nVisLeft = rLeft
  nVisTop = rTop
  Call ThisDisplay.LogicalPointToScreen(nVisLeft, nVisTop)
  nVisRight = rLeft + rW
  nVisTop = rTop
  Call ThisDisplay.LogicalPointToScreen(nVisRight, nVisTop)
  nL = nVisRight + 2  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
  If (nL + nW) > (nLeft + nW0) Then
     ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
     nL = nVisLeft - nW - 2
     If nL < nLeft Then nL = nLeft
  End If
  nT = nVisTop  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
  If (nT + nH) > (nTop + nH0) Then     ' |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
     nT = (nTop + nH0) - nH
     If nT < nTop Then nT = nTop
  End If
ElseIf TypePos = 1 Then ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  If TypeSize Then ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    nH = SizePrc / 100 * nH0 ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
    nW = nCorell * nH ' |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  End If
  nL = nLeft + (nW0 - nW) / 2
  nT = nTop + (nH0 - nH) / 2
Else '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
  nLeft = 0
  nTop = 0
  nW0 = GetSystemMetrics(SM_CXSCREEN)
  nH0 = GetSystemMetrics(SM_CYSCREEN)
  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
  If TypeSize Then ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    nH = SizePrc / 100 * nH0 ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    nW = nCorell * nH ' |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  End If
  nL = nLeft + (nW0 - nW) / 2
  nT = nTop + (nH0 - nH) / 2
End If
  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| Popup
  
  Call objPopup.SetWindowDimensionsPixels(nL, nT, nW, nH)
  'Print #1, "objPopup.GetWindowDimensionsPixels: nLeft " + Str(nLeft) + "  nTop" + Str(nTop) + "  nW" + Str(nW) + "  nH" + Str(nH)
  'Call objPopup.GetClientDimensionsPixels(nLeft, nTop, nW0, nH0) ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
  'msgbox "ThisDisplay.GetClientDimensionsPixels: nLeft " + Str(nLeft) + "n  Top" + Str(nTop) + "  nW0" + Str(nW0) + "  nH0" + Str(nH0)
  'msgbox "objVis.GetObjectDimensions: rLeft " + Str(rLeft) + "  rTop" + Str(rTop) + "  rW" + Str(rW) + "  rH" + Str(rH)
  'Call objPopup.GetClientDimensionsPixels(nLeft, nTop, nW0, nH0) ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
  'Print #1, "objPopup.GetClientDimensionsPixels: nLeft " + Str(nLeft) + "n  Top" + Str(nTop) + "  nW0" + Str(nW0) + "  nH0" + Str(nH0)
TermProc:

Set objVis = Nothing
  
End Sub

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| IsObjOK |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| TRUE |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
Function IsObjOK(obj As Object) As Boolean
  IsObjOK = (Not (obj Is Nothing)) And IsObject(obj)
End Function

Public Sub TI_Setup()
  TI_Setup_Form.Show
End Sub


Public Sub P_Setup()
  P_Setup_Form.Show
End Sub

Sub P_Change(P_val As Long)
Dim iP As GwxPoint

Call IniReg.RegWriteNum(P_RegPath, "Type", P_val)
'P_val = IniReg.RegReadNum(P_RegPath, "Type")
Set iP = ThisDisplay.GetPointObjectFromName("~~P~~")

iP.Value = P_val
Set iP = Nothing

End Sub


' InQuest injected base64 decoded content
' )]V+"nW

INQUEST-PP=macro
