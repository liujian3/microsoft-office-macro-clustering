Attribute VB_Name = "CommentFieldClass"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'/*************** Comment Sheet Filter Tool *****************\
'Class Name:  <CommentsFieldClass>
'Project:      <InEight Document (TeamBinder) TMR Comment Sheet Export Filter>
'Copyright (c) Queensland Department of Transport and Main Roads (TMR)
'
' This file is for code for a class that is used to store data of one comment
' exported from InEight Document.
'
' Record of revisions:
' Date          Programmer     Description of Change
' ==========    ==========     =========================
' 29/05/2019    D. Cole        Created.
'
'This source is subject to the TMR Public License.
'All other rights reserved.
'
'THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND,
'EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED
'WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR PURPOSE.
'\***************************************************************************/

Private m_strAttachments As String
Private m_bIsParentComment As Boolean
Private m_bIsCommentResponse As Boolean
Private m_strParentItem As String
Private m_lngParentItem As Long
Private m_lngParentItemIndex As Long
Private m_lngRow As Long
Private m_lngCol As Long
Private m_lngSort As Long
Private m_strItem As String
Private m_strDate As String
Private m_strRev As String
Private m_strSts As String
Private m_strRaised_By As String
Private m_strRaised_By_Company As String
Private m_strCommented_By As String
Private m_strCompany As String
Private m_strComments As String
Private m_strTMRCommentStatus As String
Private m_strParentTMRCommentStatus As String

Private m_strRelated_Documents As String
Private m_strAllDocsRelated As String
Private m_strContract_Clause_Reference_No As String
Private m_strCategory As String
Private m_strClosed_Out As String

Private Sub Class_Initialize()
  'Set default values when
  'class is first created

   m_strAttachments = ""
    m_strItem = ""
    m_strParentItem = ""
    m_strDate = ""
    m_strRev = ""
    m_strSts = ""
    m_strRaised_By = ""
    m_strRaised_By_Company = ""
    m_strCommented_By = ""
    m_strCompany = ""
    m_strComments = ""
    m_strRelated_Documents = ""
    m_strAllDocsRelated = ""
    m_strContract_Clause_Reference_No = ""
    m_strCategory = ""
    m_strClosed_Out = ""
    m_bIsCommentResponse = False
    m_bIsParentComment = False
    m_strTMRCommentStatus = ""
    m_strParentTMRCommentStatus = ""
    m_lngRow = 1
    m_lngCol = 1
    m_lngSort = 1
    
End Sub


Property Get IsCommentResponse() As Boolean
 
' If m_strItem = "," Then
'    m_bIsCommentResponse = True
' Else
'    m_bIsCommentResponse = False
' End If
 
 IsCommentResponse = m_bIsCommentResponse
 
 
End Property
Property Let IsCommentResponse(bCommentResponse As Boolean)
    bIsCommentResponse = bCommentResponse
    m_bIsParentComment = Not bCommentResponse
End Property

Property Get IsParentComment() As Boolean

 'm_bIsParentComment = Not m_bIsCommentResponse

 IsParentComment = m_bIsParentComment
 
End Property
Property Let IsParentComment(bParentComment As Boolean)
    bIsParentComment = bParentComment
    bIsCommentResponse = Not bParentComment
End Property

Property Get Attachments() As String
    Attachments = m_strAttachments
End Property
Property Let Attachments(strAttachments As String)
    m_strAttachments = strAttachments
End Property

Property Get Item() As String
    Item = m_strItem
End Property

Property Let Item(strItem As String)
Dim itemParts As Variant

    m_strItem = strItem

    itemParts = Split(strItem, ".")
    
    If IsArray(itemParts) And UBound(itemParts) > 0 Then
        m_bIsCommentResponse = True
        m_bIsParentComment = False
    Else
        m_bIsCommentResponse = False
        m_bIsParentComment = True
    End If
    
    If m_bIsParentComment Then
        m_strParentItem = m_strItem
    Else
        m_strParentItem = itemParts(LBound(itemParts))
    End If

End Property

Property Get ParentItem() As String
    ParentItem = m_strParentItem
End Property

Property Let ParentItem(strItem As String)

    m_strParentItem = strItem

End Property


Property Get CommentDate() As String
    CommentDate = m_strDate
End Property
Property Let CommentDate(strDate As String)
    m_strDate = strDate
End Property


Property Get Rev() As String
    Rev = m_strRev
End Property
Property Let Rev(strRev As String)
    m_strRev = strRev
End Property


Property Get Sts() As String
    Sts = m_strSts
End Property
Property Let Sts(strSts As String)
    m_strSts = strSts
End Property


Property Get TMRCommentStatus() As String
    TMRCommentStatus = m_strTMRCommentStatus
End Property
Property Let TMRCommentStatus(strTMRCommentStatus As String)
    m_strTMRCommentStatus = strTMRCommentStatus
End Property

Property Get ParentTMRCommentStatus() As String
    ParentTMRCommentStatus = m_strParentTMRCommentStatus
End Property
Property Let ParentTMRCommentStatus(strParentTMRCommentStatus As String)
    m_strParentTMRCommentStatus = strParentTMRCommentStatus
End Property

Property Get Raised_By() As String
    Raised_By = m_strRaised_By
End Property
Property Let Raised_By(strRaised_By As String)
    m_strRaised_By = strRaised_By
End Property

Property Get Raised_By_Company() As String
    Raised_By_Company = m_strRaised_By_Company
End Property
Property Let Raised_By_Company(strRaised_By_Company As String)
    m_strRaised_By_Company = strRaised_By_Company
End Property

Property Get Commented_By() As String
    Commented_By = m_strCommented_By
End Property
Property Let Commented_By(strCommented_By As String)
    m_strCommented_By = strCommented_By
End Property

Property Get Company() As String
    Company = m_strCompany
End Property
Property Let Company(strCompany As String)
    m_strCompany = strCompany
End Property

Property Get Comments() As String
    Comments = m_strComments
End Property
Property Let Comments(strComments As String)
    m_strComments = strComments
End Property

Property Get Related_Documents() As String
    Related_Documents = m_strRelated_Documents
End Property
Property Let Related_Documents(strRelated_Documents As String)
    m_strRelated_Documents = strRelated_Documents
End Property

Property Get AllDocsRelated() As String
    AllDocsRelated = m_strAllDocsRelated
End Property
Property Let AllDocsRelated(strAllDocsRelated As String)
    m_strAllDocsRelated = strAllDocsRelated
End Property

Property Get Contract_Clause_Reference_No() As String
    Contract_Clause_Reference_No = m_strContract_Clause_Reference_No
End Property
Property Let Contract_Clause_Reference_No(strContract_Clause_Reference_No As String)
    m_strContract_Clause_Reference_No = strContract_Clause_Reference_No
End Property

Property Get Category() As String
    Category = m_strCategory
End Property
Property Let Category(strCategory As String)
    m_strCategory = strCategory
End Property

Property Get Closed_Out() As String
    Closed_Out = m_strClosed_Out
End Property
Property Let Closed_Out(strClosed_Out As String)
    m_strClosed_Out = strClosed_Out
End Property

Public Property Let RowNo(lngRow As Long)
  m_lngRow = lngRow
End Property
Public Property Get RowNo() As Long
  RowNo = m_lngRow
End Property

Public Property Let ColumnNo(col As Long)
  m_lngCol = col
End Property
Public Property Get ColumnNo() As Long
  ColumnNo = m_lngCol
End Property

Public Property Let Sort(num As Long)
  m_lngSort = num
End Property
Public Property Get Sort() As Long
  Sort = m_lngSort
End Property




Attribute VB_Name = "CommentsExportClass"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'/*************** Comment Sheet Filter Tool *****************\
'Class Name:  <CommentsExportClass>
'Project:      <InEight Document (TeamBinder) TMR Comment Sheet Export Filter>
'Copyright (c) Queensland Department of Transport and Main Roads (TMR)
'
' This file is for code for a class that is used to store data read from a
' Excel file exported from InEight Document.
'
' Record of revisions:
' Date          Programmer     Description of Change
' ==========    ==========     =========================
' 29/05/2019    D. Cole        Created.
'
'This source is subject to the TMR Public License.
'All other rights reserved.
'
'THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND,
'EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED
'WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR PURPOSE.
'\***************************************************************************/
'
'
'-------------------------
'Document_Fields
'-------------------------
'DocumentNo
'Rev
'Sts
'Discipline
'
' GetDocumentHeaderFieldValuesRange "DocumentNo","Rev","Sts","Discipline"
'-------------------------
'Comment_Fields
'-------------------------
'Attachments
'Item
'Date
'Rev
'Sts
'Raised_By
'Raised_By_Company
'Commented_By
'Company
'Comments
'Related_Documents
'AllDocsRelated
'Contract_Clause_Reference_No
'Category
'Closed-Out


'
Private m_strDesignPackage As String
Private m_strDocumentNo As String
Private m_strDocumentRev As String
Private m_strDocumentSts As String
Private m_strDocumentDiscipline As String
Private arrComments() As New CommentFieldClass
Private arrHeaders() As New HeaderFieldClass
Private arrFilters() As String
Private arrSearchFilters() As String
Public Comments As Variant
Public Headers As Variant

Public Filters As Variant
Public SearchFilters As Variant
Private m_lngHeaderRow As Long
Private m_bCommentsInAscendingSortOrder As Boolean

Private m_lngHeaderRowAdjustment As Long


Private m_intNumHeaders As Integer
Private m_intNumCommentHeaders As Integer
Private m_lngCommentHeaderRow As Long
Private m_lngNumComments As Long
Private m_intCommentItem As Integer
Private m_intNumFilters As Integer


Private Sub Class_Initialize()
  'Set default values when
  'class is first created

    m_intCommentItem = 0
    m_lngNumComments = 0
    m_intNumFilters = 0
    m_intNumCommentHeaders = 0
    m_intNumHeaders = 0
    m_strDocumentNo = ""
    m_strDocumentRev = ""
    m_strDocumentSts = ""
    m_strDocumentDiscipline = ""
    m_strDesignPackage = ""
    Comments = arrComments
    Headers = arrHeaders
    Filters = arrFilters
    m_lngHeaderRow = 6
    m_lngHeaderRowAdjustment = 0
    m_lngCommentHeaderRow = 5
    m_bCommentsInAscendingSortOrder = False
    
End Sub

Public Property Get DesignPackage() As String
  DesignPackage = m_strDesignPackage
End Property


Public Property Let HeaderRow(lngRow As Long)
  m_lngHeaderRow = lngRow
End Property
Public Property Get HeaderRow() As Long
  HeaderRow = m_lngHeaderRow
End Property

Public Property Let HeaderRowAdjustment(lngNumRows As Long)
  m_lngHeaderRowAdjustment = lngNumRows
End Property
Public Property Get HeaderRowAdjustment() As Long
  HeaderRowAdjustment = m_lngHeaderRowAdjustment
End Property

Public Property Let DocumentNo(docno As String)
  
  m_strDocumentNo = docno
  
  Dim varWBS As Variant
  
  varWBS = Split(docno, "-")
  
  If IsArray(varWBS) And UBound(varWBS) > 2 Then
        m_strDesignPackage = varWBS(2)
  End If
  
End Property
Public Property Get DocumentNo() As String
  DocumentNo = m_strDocumentNo
End Property

Public Property Let DocumentRev(revision As String)
  m_strDocumentRev = revision
End Property
Public Property Get DocumentRev() As String
  DocumentRev = m_strDocumentRev
End Property

Public Property Let DocumentSts(status As String)
  m_strDocumentSts = status
End Property
Public Property Get DocumentSts() As String
  DocumentSts = m_strDocumentSts
End Property

Public Property Let DocumentDiscipline(discipline As String)
  m_strDocumentDiscipline = discipline
End Property
Public Property Get DocumentDiscipline() As String
  DocumentDiscipline = m_strDocumentDiscipline
End Property

Public Property Let CommentItem(itemNo As Integer)
  m_intCommentItem = itemNo
End Property
Public Property Get CommentItem() As Integer
  CommentItem = m_intCommentItem
End Property

'Public Property Let CommentItem(itemNo As Integer)
'  m_intCommentItem = itemNo
'End Property
Public Property Get NumHeaders() As Integer
  NumHeaders = m_intNumHeaders
End Property

Public Property Get NumCommentHeaders() As Integer
  NumCommentHeaders = m_intNumCommentHeaders
End Property

Public Property Get NumComments() As Integer
  NumComments = m_lngNumComments
End Property



Public Function GetFirstCommentHeaderIndex() As Long

  Dim rowIdx As Long
  rowIdx = -1
  For Each oHeader In arrHeaders
    rowIdx = rowIdx + 1
    If oHeader.RowNo > 4 Then
        GetFirstCommentHeaderIndex = rowIdx
        Exit For
    End If
  Next oHeader
End Function
Public Sub UpdateSortOrder()
    
    Dim lngCommentNo As Long
    If m_lngNumComments > 1 Then
        
        If IsAcsendingSortOrder() = True Then
        
            For Each oComment In Comments
    
                lngCommentNo = lngCommentNo + 1
    
                oComment.Sort = lngCommentNo
                
            Next oComment
        Else
            
            lngCommentNo = m_lngNumComments
            
            For Each oComment In Comments
    
                oComment.Sort = lngCommentNo
                
                lngCommentNo = lngCommentNo - 1
                
            Next oComment
        
        End If
        
    End If
End Sub

Public Function IsAcsendingSortOrder() As Boolean
    
    If m_lngNumComments > 1 Then
        
        If (Val(Comments(0).ParentItem) < Val(Comments(m_lngNumComments - 1).ParentItem)) Then
            m_bCommentsInAscendingSortOrder = True
        ElseIf (Val(Comments(0).ParentItem) = Val(Comments(m_lngNumComments - 1).ParentItem)) And Comments(0).IsParentComment Then
            m_bCommentsInAscendingSortOrder = True
        Else
            m_bCommentsInAscendingSortOrder = False
        End If
    Else
        m_bCommentsInAscendingSortOrder = True
    End If
    IsAcsendingSortOrder = m_bCommentsInAscendingSortOrder
End Function

Public Function IsDesendingSortOrder() As Boolean
     
    IsDesendingSortOrder = Not IsAcsendingSortOrder

End Function

Public Function GetDocumentFieldsRange() As String
Dim strRange As String

  Dim lngFirstCommentHeaderIdx As Long
  Dim lngIdx As Long
  lngFirstCommentHeaderIdx = GetFirstCommentHeaderIndex()
  strRange = Headers(0).ColumnLetter & (Headers(0).RowNo + HeaderRowAdjustment) & ":" & Headers(lngFirstCommentHeaderIdx - 1).ColumnLetter & (Headers(lngFirstCommentHeaderIdx - 1).RowNo + HeaderRowAdjustment + 1)
  
  GetDocumentFieldsRange = strRange

End Function
Function SumAll(ParamArray var() As Variant) As Double
    Dim i As Integer
    Dim tmp As Double
    For i = LBound(var) To UBound(var)
        If IsNumeric(var(i)) Then tmp = tmp + var(i)
    Next
    SumAll = tmp
End Function

Public Function GetDocumentFieldValuesRange() As String
Dim strRange As String

  Dim lngFirstCommentHeaderIdx As Long
  Dim lngIdx As Long
  lngFirstCommentHeaderIdx = GetFirstCommentHeaderIndex()
  strRange = Headers(0).ColumnLetter & (Headers(0).RowNo + HeaderRowAdjustment + 1) & ":" & Headers(lngFirstCommentHeaderIdx - 1).ColumnLetter & (Headers(lngFirstCommentHeaderIdx - 1).RowNo + HeaderRowAdjustment + 1)
  
  GetDocumentFieldValuesRange = strRange

End Function
Public Function GetDocumentHeaderFieldValuesRange(ParamArray args() As Variant) As String
    Dim strRange As String
    Dim i As Integer
    Dim tmp As String
    Dim lngMinTmpCol As Long
    Dim lngMaxTmpCol As Long
    
    Dim lngMinTmpRow As Long
    Dim lngMaxTmpRow As Long
    
    lngMinTmpCol = 100
    lngMaxTmpCol = 1
    
    lngMinTmpRow = 100
    lngMaxTmpRow = 1
    
    For i = LBound(args) To UBound(args)
        tmp = CStr(args(i))
        For Each oHeader In Headers
            If (oHeader.Name = tmp) And oHeader.RowNo < 5 Then
                lngMinTmpCol = WorksheetFunction.Min(oHeader.ColumnNo, lngMinTmpCol)
                lngMinTmpRow = WorksheetFunction.Min(oHeader.RowNo + HeaderRowAdjustment + 1, lngMinTmpRow)
                    
                lngMaxTmpCol = WorksheetFunction.Max(oHeader.ColumnNo, lngMaxTmpCol)
                lngMaxTmpRow = WorksheetFunction.Max(oHeader.RowNo + HeaderRowAdjustment + 1, lngMaxTmpRow)
                
                Exit For
                    
            End If
            
        Next oHeader
    Next
    
'  Dim lngFirstCommentHeaderIdx As Long
'  Dim lngIdx As Long
'  lngFirstCommentHeaderIdx = GetFirstCommentHeaderIndex()
  'strRange = Headers(0).ColumnLetter & (Headers(0).RowNo + HeaderRowAdjustment + 1) & ":" & Headers(lngFirstCommentHeaderIdx - 1).ColumnLetter & (Headers(lngFirstCommentHeaderIdx - 1).RowNo + HeaderRowAdjustment + 1)
  
  If (lngMinTmpCol = lngMaxTmpCol) And (lngMinTmpRow = lngMaxTmpRow) Then ' only one cell
    strRange = Number2Letter(lngMinTmpCol) & lngMinTmpRow
  Else
    strRange = Number2Letter(lngMinTmpCol) & lngMinTmpRow & ":" & Number2Letter(lngMaxTmpCol) & lngMaxTmpRow
  End If
  
  GetDocumentHeaderFieldValuesRange = strRange

End Function

Public Function GetDocumentHeaderFieldRange(ParamArray args() As Variant) As String
    Dim strRange As String
    Dim i As Integer
    Dim tmp As String
    Dim lngMinTmpCol As Long
    Dim lngMaxTmpCol As Long
    
    Dim lngMinTmpRow As Long
    Dim lngMaxTmpRow As Long
    
    lngMinTmpCol = 100
    lngMaxTmpCol = 1
    
    lngMinTmpRow = 100
    lngMaxTmpRow = 1
    
    For i = LBound(args) To UBound(args)
        tmp = CStr(args(i))
        For Each oHeader In Headers
            If (oHeader.Name = tmp) And oHeader.RowNo < 5 Then
                lngMinTmpCol = WorksheetFunction.Min(oHeader.ColumnNo, lngMinTmpCol)
                lngMinTmpRow = WorksheetFunction.Min(oHeader.RowNo + HeaderRowAdjustment, lngMinTmpRow)
                    
                lngMaxTmpCol = WorksheetFunction.Max(oHeader.ColumnNo, lngMaxTmpCol)
                lngMaxTmpRow = WorksheetFunction.Max(oHeader.RowNo + HeaderRowAdjustment, lngMaxTmpRow)
                
                Exit For
                    
            End If
            
        Next oHeader
    Next
    
    If (lngMinTmpCol = lngMaxTmpCol) And (lngMinTmpRow = lngMaxTmpRow) Then ' only one cell
        strRange = Number2Letter(lngMinTmpCol) & lngMinTmpRow
    Else
        strRange = Number2Letter(lngMinTmpCol) & lngMinTmpRow & ":" & Number2Letter(lngMaxTmpCol) & lngMaxTmpRow
    End If
    
    GetDocumentHeaderFieldRange = strRange

End Function
Public Function GetDocumentFieldHeadersRange() As String
Dim strRange As String

  Dim lngFirstCommentHeaderIdx As Long
  Dim lngIdx As Long
  lngFirstCommentHeaderIdx = GetFirstCommentHeaderIndex()
  strRange = Headers(0).ColumnLetter & (Headers(0).RowNo + HeaderRowAdjustment) & ":" & Headers(lngFirstCommentHeaderIdx - 1).ColumnLetter & (Headers(lngFirstCommentHeaderIdx - 1).RowNo + HeaderRowAdjustment)
  
  GetDocumentFieldHeadersRange = strRange

End Function
'Public Property Let Comments(comment As CommentFieldClass)
'  arrComments = comment
'End Property
'
'Public Property Get CommentItem() As Integer
'  CommentItem = intCommentItem
'End Property
Public Sub AddComment(newComment As CommentFieldClass) ' As Variant

    Dim oComment As New CommentFieldClass
    If m_lngNumComments = 0 Then
        ReDim arrComments(0) As New CommentFieldClass
    Else
        ReDim Preserve arrComments(m_lngNumComments) As New CommentFieldClass
    End If
    
    m_lngNumComments = UBound(arrComments) + 1
    
    arrComments(m_lngNumComments - 1).Item = newComment.Item
    arrComments(m_lngNumComments - 1).Attachments = newComment.Attachments
    arrComments(m_lngNumComments - 1).AllDocsRelated = newComment.AllDocsRelated
    arrComments(m_lngNumComments - 1).Category = newComment.Category
    arrComments(m_lngNumComments - 1).Closed_Out = newComment.Closed_Out
    arrComments(m_lngNumComments - 1).CommentDate = newComment.CommentDate
    arrComments(m_lngNumComments - 1).Commented_By = newComment.Commented_By
    arrComments(m_lngNumComments - 1).Comments = newComment.Comments
    arrComments(m_lngNumComments - 1).Company = newComment.Company
    arrComments(m_lngNumComments - 1).Contract_Clause_Reference_No = newComment.Contract_Clause_Reference_No
    arrComments(m_lngNumComments - 1).Raised_By = newComment.Raised_By
    arrComments(m_lngNumComments - 1).Raised_By_Company = newComment.Raised_By_Company
    arrComments(m_lngNumComments - 1).Related_Documents = newComment.Related_Documents
    arrComments(m_lngNumComments - 1).Rev = newComment.Rev
    arrComments(m_lngNumComments - 1).Sts = newComment.Sts
    arrComments(m_lngNumComments - 1).TMRCommentStatus = newComment.TMRCommentStatus
    arrComments(m_lngNumComments - 1).Sort = m_lngNumComments

    Comments = arrComments


    'Set AddComment = oSimple

End Sub

Public Sub AddHeader(newHeader As HeaderFieldClass)

    If m_intNumHeaders = 0 Then
        ReDim arrHeaders(0) As New HeaderFieldClass
    Else
        ReDim Preserve arrHeaders(m_intNumHeaders) As New HeaderFieldClass
    End If
    
    m_intNumHeaders = UBound(arrHeaders) + 1
    
    'arrHeaders(m_lngNumHeaders). = newComment.Item
    'arrHeaders(m_lngNumHeaders). = newHeader.
    arrHeaders(m_intNumHeaders - 1).Name = newHeader.Name
    arrHeaders(m_intNumHeaders - 1).ColumnLetter = newHeader.ColumnLetter
    arrHeaders(m_intNumHeaders - 1).ColumnNo = newHeader.ColumnNo
    arrHeaders(m_intNumHeaders - 1).RowNo = newHeader.RowNo
    
    arrHeaders(m_intNumHeaders - 1).IsCommentHeader = (m_intNumHeaders > GetFirstCommentHeaderIndex())

     Headers = arrHeaders
End Sub

Public Sub AddFilter(newFilter As String, Optional bMakeUnique As Boolean = True)

    If m_intNumFilters = 0 Then
        ReDim arrFilters(0) As String
    Else
        If bMakeUnique Then
            If Not FilterExists(newFilter) Then
                ReDim Preserve arrFilters(m_intNumFilters) As String
            End If
        Else
            ReDim Preserve arrFilters(m_intNumFilters) As String
        End If
    End If
    
    m_intNumFilters = UBound(arrFilters) + 1
    
    If m_intNumFilters > 1 Then
        If Not FilterExists(newFilter) Then
            arrFilters(m_intNumHeaders - 1) = newFilter
        End If
    Else
        arrFilters(m_intNumHeaders - 1) = newFilter
    End If

    Filters = arrFilters
End Sub

Public Function FilterExists(filterName As String) As Boolean
    
    FilterExists = False
    
    For Each sFilter In SearchFilters
        If filterName = sFilter Then
            FilterExists = True
            Exit For
        End If
    
    Next sFilter
    

End Function


Public Function FindFilterInComment(strComment As String) As Integer
    Dim intFilterIndex As Integer
    Dim intFoundFilterIndex As Integer
    'FilterExists = False
    intFilterIndex = -1
    intFoundFilterIndex = intFilterIndex
    
    For Each sFilter In SearchFilters
    
        intFilterIndex = intFilterIndex + 1
        If InStr(1, strComment, sFilter) > 0 Then
            intFoundFilterIndex = intFilterIndex
            Exit For
        End If
        
    Next sFilter
    
    FindFilterInComment = intFoundFilterIndex
End Function

Public Function FindParentComment(strParentItem As String) As Long
    Dim intCommentIndex As Long
    Dim intFoundParentIndex As Long
    'FilterExists = False
    intCommentIndex = -1
    intFoundParentIndex = intCommentIndex
    'Dim oComment As Object
    For Each oComment In Comments
    
        intCommentIndex = intCommentIndex + 1
        If oComment.Item = strParentItem Then
            intFoundParentIndex = intCommentIndex
            Exit For
        End If
        
    Next oComment
    
    FindParentComment = intFoundParentIndex
    
End Function

Public Sub SetParentCommentStatus()
    Dim intCommentIndex As Long
    Dim lngIndex As Long
    Dim intFoundParentIndex As Long
    Dim intParentIndex As Long
    Dim lngFirstItemIndex As Long
    Dim lngLastItemIndex As Long
    Dim lngParentItemIndex As Long
    Dim strParentStatus As String
    Dim list As ListObject
    
    lngFirstItemIndex = -1
    lngLastItemIndex = -1
    lngParentItemIndex = -1
    
    'FilterExists = False
    intCommentIndex = -1
    intFoundParentIndex = intCommentIndex
    
    Dim lngStartIdx As Long
    Dim lngEndIdx As Long
    
    lngStartIdx = 0
    lngEndIdx = lngStartIdx
    
    For lngIndex = 0 To m_lngNumComments - 1
    
        GetCommentItems Comments(lngIndex).ParentItem, lngFirstItemIndex, lngLastItemIndex, lngParentItemIndex
        
        If (lngFirstItemIndex > lngLastItemIndex) Or (lngFirstItemIndex = lngLastItemIndex) Then ' items in descending order
            'For lngStartIdx = lngLastItemIndex To lngFirstItemIndex Step -1
            For lngStartIdx = lngFirstItemIndex To lngLastItemIndex Step -1
    '            lngStartIdx = WorksheetFunction.Max(lngFirstItemIndex, lngLastItemIndex)
    '            lngEndIdx = WorksheetFunction.Min(lngFirstItemIndex, lngLastItemIndex)
                
                If Comments(lngParentItemIndex).ParentTMRCommentStatus <> "" And strParentStatus = "" Then
                    strParentStatus = Comments(lngParentItemIndex).ParentTMRCommentStatus
                End If
                
                If Comments(lngLastItemIndex).TMRCommentStatus <> "" And strParentStatus = "" Then
                    strParentStatus = Comments(lngLastItemIndex).TMRCommentStatus
                ElseIf strParentStatus = "" And Comments(lngStartIdx).TMRCommentStatus <> "" Then
                    strParentStatus = Comments(lngStartIdx).TMRCommentStatus
                    Comments(lngParentItemIndex).ParentTMRCommentStatus = strParentStatus
                End If
                
                If strParentStatus <> "" Then
                    Comments(lngStartIdx).ParentTMRCommentStatus = strParentStatus
                End If
                
            Next lngStartIdx
            
            lngIndex = lngLastItemIndex
        Else ' items in ascending order
    '        lngStartIdx = WorksheetFunction.Min(lngFirstItemIndex, lngLastItemIndex)
    '        lngEndIdx = WorksheetFunction.Max(lngFirstItemIndex, lngLastItemIndex)
    
            
                
            For lngStartIdx = lngLastItemIndex To lngFirstItemIndex Step -1
    '            lngStartIdx = WorksheetFunction.Max(lngFirstItemIndex, lngLastItemIndex)
    '            lngEndIdx = WorksheetFunction.Min(lngFirstItemIndex, lngLastItemIndex)
                
                
                If Comments(lngParentItemIndex).ParentTMRCommentStatus <> "" And strParentStatus = "" Then
                    strParentStatus = Comments(lngParentItemIndex).ParentTMRCommentStatus
                End If
            
                If Comments(lngLastItemIndex).TMRCommentStatus <> "" Then
                    strParentStatus = Comments(lngLastItemIndex).TMRCommentStatus
                    If Comments(lngParentItemIndex).ParentTMRCommentStatus = "" Then
                        Comments(lngParentItemIndex).ParentTMRCommentStatus = strParentStatus
                    End If
                ElseIf strParentStatus = "" And Comments(lngStartIdx).TMRCommentStatus <> "" Then
                    strParentStatus = Comments(lngStartIdx).TMRCommentStatus
                    If Comments(lngParentItemIndex).ParentTMRCommentStatus = "" Then
                        Comments(lngParentItemIndex).ParentTMRCommentStatus = strParentStatus
                    End If
                End If
                
                If strParentStatus <> "" Then
                    Comments(lngStartIdx).ParentTMRCommentStatus = strParentStatus
                End If
                
                
    
            Next lngStartIdx
            
            lngIndex = lngLastItemIndex
            
        End If
        strParentStatus = ""
        lngIndex = WorksheetFunction.Max(lngFirstItemIndex, lngLastItemIndex)
        
    Next lngIndex
    
'    For Each oComment In Comments
'
'        intCommentIndex = intCommentIndex + 1
'        intParentIndex = FindParentComment(oComment.ParentItem)
'
'        GetCommentItems oComment.ParentItem, lngFirstItemIndex, lngLastItemIndex, lngParentItemIndex 'GetCommentItems(ByVal strItem As String, ByRef lngFirstItemIndex As Long, ByRef lngLastItemIndex As Long, ByRef lngParentItemIndex As Long)
'        Debug.Print "Item=" & oComment.Item & "; first=" & lngFirstItemIndex&; "; last=" & lngLastItemIndex&; "; parent=" & lngParentItemIndex
'        If oComment.TMRCommentStatus <> "" Then
'        'oComment.ParentItem = Comments(intParentIndex).Item
'        'oComment.ParentTMRCommentStatus = Comments(intParentIndex).TMRCommentStatus
'        Comments(intParentIndex).ParentTMRCommentStatus = oComment.TMRCommentStatus
'        Comments(intParentIndex).TMRCommentStatus = oComment.TMRCommentStatus
'        oComment.ParentTMRCommentStatus = oComment.TMRCommentStatus
'        ElseIf (intCommentIndex <> intParentIndex) And Comments(intParentIndex).ParentTMRCommentStatus <> "CLOSED" And oComment.TMRCommentStatus = "CLOSED" Then
'
'            Comments(intParentIndex).ParentTMRCommentStatus = oComment.TMRCommentStatus
'            'Comments(intParentIndex).TMRCommentStatus = oComment.ParentTMRCommentStatus
'            oComment.ParentTMRCommentStatus = Comments(intParentIndex).TMRCommentStatus
'
'        ElseIf (intCommentIndex <> intParentIndex) And Comments(intParentIndex).TMRCommentStatus <> "" And oComment.ParentTMRCommentStatus <> "" Then
'            oComment.ParentTMRCommentStatus = Comments(intParentIndex).TMRCommentStatus
'
'        End If
''            intFoundParentIndex = intCommentIndex
''            Exit For
'
'        'End If
'
'
'    Next oComment
        
End Sub

Public Function GetCommentItems(ByVal strItem As String, ByRef lngFirstItemIndex As Long, ByRef lngLastItemIndex As Long, ByRef lngParentItemIndex As Long) As Boolean

Dim index As Long
Dim c As Boolean

index = -1
lngFirstItemIndex = -1
lngLastItemIndex = -1
lngParentItemIndex = -1
bFoundItem = False

    For Each oComment In Comments
        index = index + 1
         'Debug.Print "Item=" & oComment.Item & "; first=" & lngFirstItemIndex&; "; last=" & lngLastItemIndex&; "; parent=" & lngParentItemIndex
        If oComment.ParentItem = strItem Then
            bFoundItem = True
            If oComment.IsParentComment Then
                lngParentItemIndex = index
                lngFirstItemIndex = index
            End If
            
            If Not m_bCommentsInAscendingSortOrder And lngParentItemIndex < 0 And lngFirstItemIndex < 0 And lngLastItemIndex < 0 Then
                lngLastItemIndex = index
            ElseIf m_bCommentsInAscendingSortOrder And lngParentItemIndex < 0 And lngFirstItemIndex < 0 And lngLastItemIndex < 0 Then
                lngFirstItemIndex = index
            ElseIf Not m_bCommentsInAscendingSortOrder And lngLastItemIndex < 0 Then
                lngLastItemIndex = index
            ElseIf m_bCommentsInAscendingSortOrder And lngFirstItemIndex < 0 Then
                lngFirstItemIndex = index
            ElseIf m_bCommentsInAscendingSortOrder Then
                lngLastItemIndex = index
            End If
        ElseIf bFoundItem And oComment.ParentItem <> strItem Then
            Exit For
        End If
    Next oComment

    GetCommentItems = (lngParentItemIndex >= 0 And lngLastItemIndex >= 0 And lngFirstItemIndex >= 0)


End Function

Public Function GetCommentHeadingColumnNo(ByVal strHeadingTitle As String, Optional ByVal lngStartIndex As Long = 4) As Long

Dim index As Long

    index = -1

    For index = lngStartIndex To NumHeaders - 1
        'index = index + 1
         'Debug.Print "Item=" & oComment.Item & "; first=" & lngFirstItemIndex&; "; last=" & lngLastItemIndex&; "; parent=" & lngParentItemIndex
        If Headers(index).Name = strHeadingTitle Then
            Exit For
        End If
    Next index

    GetCommentHeadingColumn = Headers(index).ColumnNo

End Function

Public Function GetCommentHeadingColumnLetter(ByVal strHeadingTitle As String, Optional ByVal lngStartIndex As Long = 4) As String

Dim index As Long
Dim bFoundHeader As Boolean

    index = -1
    bFoundHeader = False
    

    For index = lngStartIndex To NumHeaders - 1
        'index = index + 1
         'Debug.Print "Item=" & oComment.Item & "; first=" & lngFirstItemIndex&; "; last=" & lngLastItemIndex&; "; parent=" & lngParentItemIndex
        If Headers(index).Name = strHeadingTitle Then
            bFoundHeader = True
            Exit For
        End If
    Next index
    If bFoundHeader Then
        GetCommentHeadingColumnLetter = Headers(index).ColumnLetter
    Else
        GetCommentHeadingColumnLetter = ""
    End If

End Function
Public Sub DebugPrintComments(Optional bOnlyShowCommentsWithStatus As Boolean = False)

    For Each comment In Comments
    
        If Not bOnlyShowCommentsWithStatus Or (bOnlyShowCommentsWithStatus And comment.TMRCommentStatus <> "") Then
            Debug.Print "Item=" & comment.Item '& vbCrLf
            Debug.Print "ParentItem=" & comment.ParentItem '& vbCrLf
            Debug.Print "IsParentComment=" & comment.IsParentComment '& vbCrLf
            Debug.Print "TMRCommentStatus=" & comment.TMRCommentStatus '& vbCrLf
        
        End If
    
    Next comment


End Sub
Attribute VB_Name = "HeaderFieldClass"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'/*************** Comment Sheet Filter Tool *****************\
'Class Name:  <HeaderFieldClass>
'Project:      <InEight Document (TeamBinder) TMR Comment Sheet Export Filter>
'Copyright (c) Queensland Department of Transport and Main Roads (TMR)
'
' This file is for code for a class that is used to store data of comment
' header information exported from InEight Document.
'
' Record of revisions:
' Date          Programmer     Description of Change
' ==========    ==========     =========================
' 29/05/2019    D. Cole        Created.
'
'This source is subject to the TMR Public License.
'All other rights reserved.
'
'THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND,
'EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED
'WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR PURPOSE.
'\***************************************************************************/
'
'
'-------------------------
'Document_Fields
'-------------------------
'DocumentNo
'Rev
'Sts
'Discipline
'
'
'-------------------------
'Comment_Fields
'-------------------------
'Attachments
'Item
'Date
'Rev
'Sts
'Raised_By
'Raised_By_Company
'Commented_By
'Company
'Comments
'Related_Documents
'AllDocsRelated
'Contract_Clause_Reference_No
'Category
'Closed-Out


'

Private m_lngHeaderRow As Long
Private m_lngHeaderColumn As Long
Private m_strHeaderName As String
Private m_strHeaderColumnLetter As String
Private m_bIsCommentHeader As Boolean




Private Sub Class_Initialize()
  'Set default values when
  'class is first created
    
    m_lngHeaderRow = 5
    m_lngHeaderColumn = 1
    m_strHeaderName = ""
    m_strHeaderColumnLetter = "A"
    m_bIsCommentHeader = False
    
End Sub

Public Property Let Name(headerTitle As String)
  m_strHeaderName = headerTitle
End Property
Public Property Get Name() As String
  Name = m_strHeaderName
End Property

Public Property Let ColumnLetter(strColumnLetter As String)
  m_strHeaderColumnLetter = strColumnLetter
End Property
Public Property Get ColumnLetter() As String
  ColumnLetter = m_strHeaderColumnLetter
End Property


Public Property Let RowNo(lngRow As Long)
  m_lngHeaderRow = lngRow
End Property
Public Property Get RowNo() As Long
  RowNo = m_lngHeaderRow
End Property

Public Property Let ColumnNo(col As Long)
  m_lngHeaderColumn = col
End Property
Public Property Get ColumnNo() As Long
  ColumnNo = m_lngHeaderColumn
End Property

Public Property Let IsCommentHeader(bIsHeader As Boolean)
  m_bIsCommentHeader = bIsHeader
End Property
Public Property Get IsCommentHeader() As Boolean
  IsCommentHeader = m_bIsCommentHeader
End Property


Attribute VB_Name = "Module1"
Sub ImportCommentSheetData(Optional ByVal strCommentSheetDataSheetName As String = "Comment Sheet")

    Dim ws As Worksheet
    Dim wsCommentSheetData As Worksheet
    Dim bExists As Boolean
    Dim i As Long
    Dim lngHeaderRow As Long
    Dim intNumAdditionalHeaderRows As Integer
    Dim directory As String, Filename As String, sheet As Worksheet, total As Integer
    Dim srcBook As Workbook
    Dim wsCopy As Worksheet
    Dim wsDest As Worksheet
    Dim Comments As New CommentsExportClass
    Dim newHeader As New HeaderFieldClass
    Dim newComment As New CommentFieldClass
    Dim names As Range
    Dim commentFieldValues As Range
    Dim lCopyLastRow As Long
    Dim lCopyLastColumn As Long
    Dim lDestLastRow As Long
    Dim Cell As Range
    Dim lastRow As Long
    Dim lastCol As Long
    Dim headerIndex As Long
    Dim commentFieldIndex As Long
    Dim commentFieldName As String
    Dim commentCount As Long
    Dim FilterRange As Range
    Dim sArray() As String
    
    lngHeaderRow = 5
    intNumAdditionalHeaderRows = 1
    Comments.HeaderRowAdjustment = intNumAdditionalHeaderRows
  
    Comments.HeaderRow = lngHeaderRow + intNumAdditionalHeaderRows
      
    Application.ScreenUpdating = False
    Application.ScreenUpdating = False
    Application.DisplayAlerts = False
    
    'Set variables
    If strCommentSheetDataSheetName = "" Then
        strCommentSheetDataSheetName = ActiveSheet.Name '"data"
    End If
    
    'Check if sheet exists or add it
    With ActiveWorkbook
        If SheetExists(strCommentSheetDataSheetName) Then
            Set wsDest = .Worksheets(strCommentSheetDataSheetName)
        Else
            Set wsDest = .Worksheets.Add(before:=.Sheets(1))
            wsDest.Name = strCommentSheetDataSheetName
        End If
    End With
    
    'Clear Cells
    ClearExistingCommentsData True

    Set FilterRange = ActiveWorkbook.Sheets("FilterList").Range("A1:A100")
    sArray = Split(Join(Application.Transpose(FilterRange), "#"), "#")
    sArray = RemoveEmptyEntriesFromArray(sArray)
    
    Comments.SearchFilters = sArray
    
    Set FilterRange = ActiveWorkbook.Sheets("FilterList").Range("B1:B100")
    sArray = Split(Join(Application.Transpose(FilterRange), "#"), "#")
    sArray = RemoveEmptyEntriesFromArray(sArray)
    
    Comments.Filters = sArray
  
    xTitleId = "TMR Comments Filter Tool - Select Exported Comment Sheet"
    With Application.FileDialog(msoFileDialogOpen)
        .Filters.Clear
        .Filters.Add "Excel 2007-13", "*.xlsx; *.xlsm; *.xlsa"
        .AllowMultiSelect = False
        .Title = xTitleId
        .Show
        
        If .SelectedItems.count > 0 Then
            '        Application.Workbooks.Open .SelectedItems(1)
            '        Set srcBook = Application.ActiveWorkbook
              
            Set srcBook = Application.Workbooks.Open(.SelectedItems(1), _
                UpdateLinks:=False, _
                ReadOnly:=True, _
                AddToMRU:=False)
            
            Set wsCopy = srcBook.Sheets(1)
                'srcBook.Sheets("Sheet1").Copy After:=ThisWorkbook.Sheets(ThisWorkbook.Sheets.count)
              
            '20
            lCopyLastRow = LastRowColumn(wsCopy, "r")
            
            '15
            lCopyLastColumn = LastRowColumn(wsCopy, "c")
            
            Set names = wsCopy.Range("A1" & ":" & Number2Letter(lCopyLastColumn) & lngHeaderRow - 1)
        
            lastRow = Last(1, names)
            lastCol = Last(2, names)
        
            For Each Cell In names
                'cell.Value = cell.Value & " " & cell.Offset(0, 1).Value
                
                Select Case Cell.value
                
                Case "DocumentNo"
                    
                    newHeader.RowNo = Cell.Row
                    newHeader.ColumnNo = Cell.Column
                    newHeader.ColumnLetter = Number2Letter(newHeader.ColumnNo)
                    newHeader.Name = CStr(Cell.value) 'CStr(wsCopy.Cells(newHeader.RowNo, newHeader.ColumnNo).Value)
                    Comments.AddHeader newHeader
                    
                    If IsDocumentField(names(Cell.Row, Cell.Column + 1)) Then
                        Comments.DocumentNo = CStr(names(Cell.Row + 1, Cell.Column).value)
                    Else
                        Comments.DocumentNo = CStr(names(Cell.Row, Cell.Column + 1).value)
                    End If
                    
                Case "Rev"
                    newHeader.RowNo = Cell.Row
                    newHeader.ColumnNo = Cell.Column
                    newHeader.ColumnLetter = Number2Letter(newHeader.ColumnNo)
                    newHeader.Name = CStr(Cell.value) 'CStr(wsCopy.Cells(newHeader.RowNo, newHeader.ColumnNo).Value)
                    Comments.AddHeader newHeader
                    
                    If IsDocumentField(names(Cell.Row, Cell.Column + 1)) Then
                        Comments.DocumentRev = CStr(names(Cell.Row + 1, Cell.Column).value)
                    Else
                        Comments.DocumentRev = CStr(names(Cell.Row, Cell.Column + 1).value)
                    End If
                Case "Sts"
                    newHeader.RowNo = Cell.Row
                    newHeader.ColumnNo = Cell.Column
                    newHeader.ColumnLetter = Number2Letter(newHeader.ColumnNo)
                    newHeader.Name = CStr(Cell.value) 'CStr(wsCopy.Cells(newHeader.RowNo, newHeader.ColumnNo).Value)
                    Comments.AddHeader newHeader
                    
                    If IsDocumentField(names(Cell.Row, Cell.Column + 1)) Then
                        Comments.DocumentSts = CStr(names(Cell.Row + 1, Cell.Column).value)
                    Else
                        Comments.DocumentSts = CStr(names(Cell.Row, Cell.Column + 1).value)
                    End If
                Case "Discipline"
                    newHeader.RowNo = Cell.Row
                    newHeader.ColumnNo = Cell.Column
                    newHeader.ColumnLetter = Number2Letter(newHeader.ColumnNo)
                    newHeader.Name = CStr(Cell.value) 'CStr(wsCopy.Cells(newHeader.RowNo, newHeader.ColumnNo).Value)
                    Comments.AddHeader newHeader
                    
                    If IsDocumentField(names(Cell.Row, Cell.Column + 1)) Or (Cell.Column > 1 And names(Cell.Row, Cell.Column + 1) = "" And IsDocumentField(names(Cell.Row, Cell.Column - 1))) Then
                        Comments.DocumentDiscipline = CStr(names(Cell.Row + 1, Cell.Column).value)
                    Else
                        Comments.DocumentDiscipline = CStr(names(Cell.Row, Cell.Column + 1).value)
                    End If
                    
                Case Else
                    ' ignore
                End Select
            Next Cell
            
            newHeader.ColumnNo = lCopyLastColumn
            
            Set names = wsCopy.Range("A" & lngHeaderRow & ":" & Number2Letter(newHeader.ColumnNo) & lngHeaderRow)
            
            For Each Cell In names
                'cell.Value = cell.Value & " " & cell.Offset(0, 1).Value
                newHeader.RowNo = lngHeaderRow
                newHeader.ColumnNo = Cell.Column
                newHeader.ColumnLetter = Number2Letter(newHeader.ColumnNo)
                newHeader.Name = CStr(Cell.value) 'CStr(wsCopy.Cells(newHeader.RowNo, newHeader.ColumnNo).Value)
                Comments.AddHeader newHeader
            Next Cell
        
            '
            '
            '
            commentCount = 0
            commentFieldIndex = 0
            headerIndex = Comments.GetFirstCommentHeaderIndex()
            
            For idx = headerIndex + 1 To lCopyLastRow - 1
            
                commentCount = commentCount + 1
                Set commentFieldValues = wsCopy.Range(Number2Letter(Comments.Headers(headerIndex).ColumnNo) & (lngHeaderRow + commentCount) & ":" & Number2Letter(lCopyLastColumn) & (lngHeaderRow + commentCount))
                commentFieldIndex = 0
                commentFieldName = ""
                If idx = lCopyLastRow Then
                commentFieldName = ""
                End If
                For Each commentField In commentFieldValues
                    commentFieldIndex = commentFieldIndex + 1
                    commentFieldName = Comments.Headers(headerIndex + commentFieldIndex - 1).Name
                    
                    If commentFieldIndex = 1 Then
                        newComment.RowNo = commentField.Row
                        newComment.ColumnNo = commentField.Column
                    End If
                    
                    Select Case commentFieldName
                    
                        Case "Attachments"
                            newComment.Attachments = CStr(commentField.value)
                        Case "Item"
                            newComment.Item = CStr(commentField.value)
                        Case "Date"
                            newComment.CommentDate = CStr(commentField.value)
                        Case "Rev"
                            newComment.Rev = CStr(commentField.value)
                        Case "Sts"
                            newComment.Sts = CStr(commentField.value)
                        Case "Raised By"
                            newComment.Raised_By = CStr(commentField.value)
                        Case "Raised By Company"
                            newComment.Raised_By_Company = CStr(commentField.value)
                        Case "Commented By"
                            newComment.Commented_By = CStr(commentField.value)
                        Case "Company"
                            newComment.Company = CStr(commentField.value)
                        Case "Comments"
                            newComment.Comments = CStr(commentField.value)
                            Dim intFilterIndex As Integer
                            intFilterIndex = Comments.FindFilterInComment(newComment.Comments)
                            
                            If intFilterIndex > -1 Then
                                newComment.TMRCommentStatus = Comments.Filters(intFilterIndex)
                            Else
                                newComment.TMRCommentStatus = ""
                            End If
                            
                            If newComment.IsParentComment Then
                                newComment.ParentTMRCommentStatus = newComment.TMRCommentStatus
                            End If
                            
                        Case "Related Documents"
                            newComment.Related_Documents = CStr(commentField.value)
                        Case "AllDocsRelated"
                            newComment.AllDocsRelated = CStr(commentField.value)
                        Case "Contract Clause Reference No"
                            newComment.Contract_Clause_Reference_No = CStr(commentField.value)
                        Case "Category"
                            newComment.Category = CStr(commentField.value)
                        Case "Closed-Out"
                            newComment.Closed_Out = CStr(commentField.value)
                        Case Else
                    
                    End Select
                    
                    'cell.Value = cell.Value & " " & cell.Offset(0, 1).Value
                    
                Next commentField
                
                Comments.AddComment newComment
                newComment.TMRCommentStatus = ""
                
            Next idx
            
            Application.StatusBar = "Clearing any existing data... "
            ClearCommentSheet wsDest
            
            'Comments.DebugPrintComments True
            
            Application.StatusBar = "Importing Data... "
            ' Find last used row in the copy range based on data in column A
            lCopyLastRow = wsCopy.Cells(wsCopy.Rows.count, "A").End(xlUp).Row
              
            ' Find first blank row in the destination range based on data in column A
            'Offset property moves down 1 row
            lDestLastRow = wsDest.Cells(wsDest.Rows.count, "A").End(xlUp).Offset(1).Row
       
            ' Copy & Paste Data
            wsCopy.Range("A1:" & Number2Letter(lCopyLastColumn) & lCopyLastRow).Copy _
            wsDest.Range("A" & (1 + intNumAdditionalHeaderRows))
        
            srcBook.Close False
            
            Debug.Print "IsAcsendingSortOrder=" & Comments.IsAcsendingSortOrder()
            Comments.UpdateSortOrder
            
            ' Set TMR comment status for parent item
            Application.StatusBar = "Searching for comment statuses... "
            Comments.SetParentCommentStatus
            Comments.SetParentCommentStatus
            
            
            ' Add filter header
            wsDest.Cells((lngHeaderRow + intNumAdditionalHeaderRows), (lCopyLastColumn + 1)).value = "TMR Comment Status"
            wsDest.Cells((lngHeaderRow + intNumAdditionalHeaderRows), (lCopyLastColumn + 2)).value = "Parent Item TMR Comment Status"
            wsDest.Cells((lngHeaderRow + intNumAdditionalHeaderRows), (lCopyLastColumn + 3)).value = "Sort"
            wsDest.Cells((lngHeaderRow + intNumAdditionalHeaderRows), (lCopyLastColumn + 4)).value = "Parent Item"
            
            ' Write TMR Comment status values
            For idx = 1 To Comments.NumComments
                wsDest.Cells((lngHeaderRow + intNumAdditionalHeaderRows + idx), (lCopyLastColumn + 1)).value = Comments.Comments(idx - 1).TMRCommentStatus
                wsDest.Cells((lngHeaderRow + intNumAdditionalHeaderRows + idx), (lCopyLastColumn + 2)).value = Comments.Comments(idx - 1).ParentTMRCommentStatus
                wsDest.Cells((lngHeaderRow + intNumAdditionalHeaderRows + idx), (lCopyLastColumn + 3)).value = Comments.Comments(idx - 1).Sort
                wsDest.Cells((lngHeaderRow + intNumAdditionalHeaderRows + idx), (lCopyLastColumn + 4)).value = Comments.Comments(idx - 1).ParentItem
            Next idx
            
            Application.StatusBar = "Adding for comment status filters... "
            FormatFilteredCommentSheet Comments, (lngHeaderRow + intNumAdditionalHeaderRows + Comments.NumComments), (lCopyLastColumn + 4), Comments.DesignPackage
            
            AddCommentStatusFormatting (lngHeaderRow + intNumAdditionalHeaderRows + 1), (lCopyLastColumn + 1), (lngHeaderRow + intNumAdditionalHeaderRows + Comments.NumComments), (lCopyLastColumn + 2)
            ApplyFilterToCommentSheet Comments
            
            ' Insert TMR logo
            InsertLogo strCommentSheetDataSheetName, 1, (lCopyLastColumn + 2)
            
            wsDest.Cells(1, 1).Select
        
        End If
    
    End With

    'Gridlines
    ActiveWindow.DisplayGridlines = False
  
    Application.StatusBar = "Finished Importing Data... "
    Application.OnTime Now + TimeSerial(0, 0, 10), "ClearStatusBar"
    
    Application.ScreenUpdating = True
    Application.DisplayAlerts = True
  
End Sub

Sub ClearStatusBar()
    Application.StatusBar = False
End Sub


Sub ApplyFilterToCommentSheet(ByVal Comments As CommentsExportClass)
'
' ApplyFilterToCommentSheet Macro
'
    Dim varFilterArray As Variant
    Dim arr As Variant
    Dim bHasFilters As Boolean
    Dim sArray() As String
    Dim strRange As String
    Dim lngArraySize As Long

    'arr = Array( _
            "AGREED", "DISAGREE", "OUTSTANDING", "=")
    bHasFilters = False
    
    strRange = "$" & Number2Letter(Comments.NumHeaders - 2) & "$" & (Comments.HeaderRow + 1) & ":" & "$" & Number2Letter(Comments.NumHeaders - 2) & "$" & (Comments.NumComments + Comments.HeaderRow)
    Set FilterRange = ActiveWorkbook.Sheets("Comment Sheet").Range(strRange)
    sArray = Split(Join(Application.Transpose(FilterRange), "#"), "#")
    sArray = RemoveEmptyEntriesFromArray(sArray)
    
    
    varFilterArray = sArray 'Comments.Filters
    '
    varFilterArray = UniqueArray(varFilterArray)

    'arr = Array(varFilterArray, _
        "AGREED", "DISAGREE", "OUTSTANDING", "=")

    If Not TMR_IsNothing(varFilterArray) Then
    
        bHasFilters = True
        lngArraySize = UBound(varFilterArray)
        ReDim Preserve varFilterArray(UBound(varFilterArray) + 1) As Variant
        
        varFilterArray(UBound(varFilterArray)) = "="
    
    End If
    
    'Range("A6:Q526").Select
    strRange = "$" & Comments.Headers(LBound(Comments.Headers)).ColumnLetter & "$" & Comments.HeaderRow & ":" & "$" & Number2Letter(Comments.NumHeaders - 0) & "$" & (Comments.NumComments + Comments.HeaderRow)
    'Range(Comments.Headers(LBound(Comments.Headers)).ColumnLetter & Comments.HeaderRow & ":" & Number2Letter(Comments.NumHeaders + 2) & (Comments.NumComments + Comments.HeaderRow + 1)).Select
    Range(strRange).Select
    Selection.AutoFilter

    If bHasFilters Then
        'ActiveSheet.Range("$A$6:$Q$526").AutoFilter Field:=17, Criteria1:=Array( _
            "AGREED", "DISAGREE", "OUTSTANDING", "="), Operator:=xlFilterValues
        
        'Turn filters off
        If ActiveSheet.AutoFilterMode Then
            Selection.AutoFilter
        End If
        
        ' Set filter
        'ActiveSheet.Range("$A$6:$Q$526").AutoFilter Field:=(Comments.NumHeaders + 2), Criteria1:=varFilterArray, Operator:=xlFilterValues
        ActiveSheet.Range(strRange).AutoFilter Field:=(Comments.NumHeaders - 2), Criteria1:=varFilterArray, Operator:=xlFilterValues
    '    ActiveSheet.Range(strRange).AutoFilter Field:=(Comments.NumHeaders - 2), Criteria1:=Array( _
            "AGREED", "DISAGREE", "OUTSTANDING", "="), Operator:=xlFilterValues
    Else
        bHasFilters = False
        
        'Turn filters on
        If Not ActiveSheet.AutoFilterMode Then
            Selection.AutoFilter
        End If
    End If
    
End Sub


Sub FormatFilteredCommentSheet(ByVal Comments As CommentsExportClass, ByVal lngLastRow As Long, ByVal lngLastCol As Long, Optional strDesignPackage As String = "")

' Col
'  A -- Attachments
'  B -- Item
'  C -- Date
'  D -- Rev
'  E -- Sts
'  F -- Raised By
'  G -- Raised By Company
'  H -- Commented By
'  I -- Company
'  J -- Comments
'  K -- Related Documents
'  L -- AllDocsRelated
'  M -- Contract Clause Reference No
'  N -- Category
'  O -- Closed-Out
'  P -- TMR Comment Status
'  Q -- Parent Item TMR Comment Status
Dim strTitle As String
Dim strReviewStatus As String
Dim strSelectRange As String
Dim strSelectColumn As String
Dim strCommentHeaderRow As String
Dim lngIndex As Long
Dim lngTMRCommentStatusColumn As Long
Dim lngParentTMRCommentStatusColumn As Long
Dim sArray() As String
Dim FilterRange As Range

    strCommentHeaderRow = CStr(Comments.HeaderRow)

    If (Comments.DocumentSts = "IRR") Then
        strReviewStatus = " - Review Responses"
    Else
        strReviewStatus = " - Review"
    End If
    
    strTitle = CStr("TMR Comment Sheet - " & strDesignPackage & " -- Revision " & Comments.DocumentRev & strReviewStatus)
    
    Set FilterRange = ActiveWorkbook.Sheets("Comment Sheet").Range(Comments.HeaderRow & ":" & Comments.HeaderRow)
    sArray = Split(Join(Application.Transpose(Application.Transpose(FilterRange)), "#"), "#")
    sArray = RemoveEmptyEntriesFromArray(sArray)
    
    lngIndex = GetArrayIndex(sArray, "TMR Comment Status")
    lngTMRCommentStatusColumn = lngIndex + 1

    lngIndex = GetArrayIndex(sArray, "Parent Item TMR Comment Status")
    lngParentTMRCommentStatusColumn = lngIndex + 1
    
    '
    ' Format Comment sheet document field values
    '
    'Range("A2:D3").Select
    strSelectRange = Comments.GetDocumentFieldsRange() 'Comments.Headers(0).ColumnLetter & Comments.Headers(0).RowNo + Comments.HeaderRowAdjustment
    
    If strSelectRange <> "" Then
        Range(strSelectRange).Select
        Selection.Borders(xlDiagonalDown).LineStyle = xlNone
        Selection.Borders(xlDiagonalUp).LineStyle = xlNone
        With Selection.Borders(xlEdgeLeft)
            .LineStyle = xlContinuous
            .ColorIndex = 0
            .TintAndShade = 0
            .Weight = xlThin
        End With
        With Selection.Borders(xlEdgeTop)
            .LineStyle = xlContinuous
            .ColorIndex = 0
            .TintAndShade = 0
            .Weight = xlThin
        End With
        With Selection.Borders(xlEdgeBottom)
            .LineStyle = xlContinuous
            .ColorIndex = 0
            .TintAndShade = 0
            .Weight = xlThin
        End With
        With Selection.Borders(xlEdgeRight)
            .LineStyle = xlContinuous
            .ColorIndex = 0
            .TintAndShade = 0
            .Weight = xlThin
        End With
        With Selection.Borders(xlInsideVertical)
            .LineStyle = xlContinuous
            .ColorIndex = 0
            .TintAndShade = 0
            .Weight = xlThin
        End With
        With Selection.Borders(xlInsideHorizontal)
            .LineStyle = xlContinuous
            .ColorIndex = 0
            .TintAndShade = 0
            .Weight = xlThin
        End With
    End If
    
    'Range("A2:D2").Select
    strSelectRange = Comments.GetDocumentFieldHeadersRange()
    
    If strSelectRange <> "" Then
        Range(strSelectRange).Select
        With Selection
            .HorizontalAlignment = xlCenter
            .VerticalAlignment = xlCenter
            .WrapText = False
            .Orientation = 0
            .AddIndent = False
            .IndentLevel = 0
            .ShrinkToFit = True
            .ReadingOrder = xlContext
            .MergeCells = False
        End With
    End If
    
    strSelectRange = Comments.GetDocumentHeaderFieldValuesRange("DocumentNo")
    If strSelectRange <> "" Then
        Range(strSelectRange).Select
        'Range("A3").Select
        With Selection
            .HorizontalAlignment = xlGeneral
            .VerticalAlignment = xlCenter
            .WrapText = True
            .Orientation = 0
            .AddIndent = False
            .IndentLevel = 0
            .ShrinkToFit = False
            .ReadingOrder = xlContext
            .MergeCells = False
        End With
    End If
    
    'Range("B3:D3").Select
    strSelectRange = Comments.GetDocumentHeaderFieldValuesRange("Rev", "Sts", "Discipline")
    
    If strSelectRange <> "" Then
        Range(strSelectRange).Select
    
        With Selection
            .HorizontalAlignment = xlCenter
            .VerticalAlignment = xlCenter
            .WrapText = True
            .Orientation = 0
            .AddIndent = False
            .IndentLevel = 0
            .ShrinkToFit = False
            .ReadingOrder = xlContext
            .MergeCells = False
        End With
    End If
    
    strSelectRange = Comments.GetDocumentHeaderFieldRange("Rev", "Sts", "Discipline")
    
    If strSelectRange <> "" Then
        'Range("B2:D2").Select
        Range(strSelectRange).Select
        
        With Selection
            .HorizontalAlignment = xlCenter
            .VerticalAlignment = xlCenter
            .WrapText = False
            .Orientation = 0
            .AddIndent = False
            .IndentLevel = 0
            .ShrinkToFit = True
            .ReadingOrder = xlContext
            .MergeCells = False
        End With
    End If
    
    strSelectColumn = Comments.GetCommentHeadingColumnLetter("Attachments")
    
    If strSelectColumn <> "" Then
        strSelectRange = strSelectColumn & ":" & strSelectColumn
        Columns(strSelectRange).ColumnWidth = 13.86
    End If
    
    
    strSelectRange = Comments.GetDocumentHeaderFieldValuesRange("DocumentNo")
    If strSelectRange <> "" Then
        Range(strSelectRange).Select
        With Selection
            .HorizontalAlignment = xlCenter
            .VerticalAlignment = xlCenter
            .WrapText = True
            .Orientation = 0
            .AddIndent = False
            .IndentLevel = 0
            .ShrinkToFit = False
            .ReadingOrder = xlContext
            .MergeCells = False
        End With
    End If
    
    strSelectRange = Comments.GetDocumentHeaderFieldRange("DocumentNo", "Rev", "Sts", "Discipline")
    If strSelectRange <> "" Then
        Range(strSelectRange).Select
        
        With Selection
            .HorizontalAlignment = xlCenter
            .VerticalAlignment = xlCenter
            .WrapText = True
            .Orientation = 0
            .AddIndent = False
            .IndentLevel = 0
            .ShrinkToFit = False
            .ReadingOrder = xlContext
            .MergeCells = False
        End With
        
        'Range("A2:D2").Select
        With Selection.Interior
            .Pattern = xlSolid
            .PatternColorIndex = xlAutomatic
            .ThemeColor = xlThemeColorDark1
            .TintAndShade = -0.14996795556505
            .PatternTintAndShade = 0
        End With
    End If
    
    '
    ' Format comments
    '
    '
    Range("A" & strCommentHeaderRow & ":" & Number2Letter(lngLastCol) & lngLastRow).Select
    'strCommentHeaderRow
    Selection.Borders(xlDiagonalDown).LineStyle = xlNone
    Selection.Borders(xlDiagonalUp).LineStyle = xlNone
    With Selection.Borders(xlEdgeLeft)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .TintAndShade = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlEdgeTop)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .TintAndShade = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .TintAndShade = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlEdgeRight)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .TintAndShade = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlInsideVertical)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .TintAndShade = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlInsideHorizontal)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .TintAndShade = 0
        .Weight = xlThin
    End With
    
    ' Select comment column headers
    Range("A" & strCommentHeaderRow & ":" & Number2Letter(lngLastCol) & strCommentHeaderRow).Select
    '
    With Selection
        .HorizontalAlignment = xlGeneral
        .VerticalAlignment = xlCenter
        .WrapText = True
        .Orientation = 0
        .AddIndent = False
        .IndentLevel = 0
        .ShrinkToFit = False
        .ReadingOrder = xlContext
        .MergeCells = False
    End With
    
    With Selection.Interior
        .Pattern = xlSolid
        .PatternColorIndex = xlAutomatic
        .ThemeColor = xlThemeColorDark1
        .TintAndShade = -0.14996795556505
        .PatternTintAndShade = 0
    End With
    
    Rows((Comments.HeaderRow + 1) & ":" & lngLastRow).Select
    
    With Selection
        .VerticalAlignment = xlTop
        .Orientation = 0
        .AddIndent = False
        .IndentLevel = 0
        .ShrinkToFit = False
        .ReadingOrder = xlContext
        .MergeCells = False
    End With
    
    '  C -- Date
    strSelectRange = Comments.GetCommentHeadingColumnLetter("Date")
    
    If strSelectRange <> "" Then
    
        strSelectRange = strSelectRange & ":" & strSelectRange
        
        Columns(strSelectRange).ColumnWidth = 10.14
        Columns(strSelectRange).Select
        Selection.Columns.AutoFit
        
        With Selection
        .HorizontalAlignment = xlCenter
        .VerticalAlignment = xlTop
        .WrapText = True
        .Orientation = 0
        .AddIndent = False
        .IndentLevel = 0
        .ShrinkToFit = False
        .ReadingOrder = xlContext
        .MergeCells = False
    End With
    
    End If
    
    '  B -- Item
    strSelectRange = Comments.GetCommentHeadingColumnLetter("Item")
    
    If strSelectRange <> "" Then
        
        strSelectRange = strSelectRange & ":" & strSelectRange
        Columns(strSelectRange).Select
        Selection.Columns.AutoFit
    End If
    
    '  D -- Rev
    strSelectRange = Comments.GetCommentHeadingColumnLetter("Rev")
    
    If strSelectRange <> "" Then
    
        strSelectRange = strSelectRange & ":" & strSelectRange
        Columns(strSelectRange).Select
        Selection.Columns.AutoFit
        Columns(strSelectRange).ColumnWidth = 9.43
    End If
    
    '  E -- Sts
    strSelectRange = Comments.GetCommentHeadingColumnLetter("Sts")
    
    If strSelectRange <> "" Then
    
        strSelectRange = strSelectRange & ":" & strSelectRange
        Columns(strSelectRange).Select
        Selection.Columns.AutoFit
    End If
    
    '  A -- Attachments
    strSelectRange = Comments.GetCommentHeadingColumnLetter("Attachments")
    
    If strSelectRange <> "" Then
    
        strSelectRange = strSelectRange & ":" & strSelectRange
        Columns(strSelectRange).Select
        Selection.ColumnWidth = 13
        
        With Selection
            .HorizontalAlignment = xlCenter
            .WrapText = True
            .Orientation = 0
            .AddIndent = False
            .IndentLevel = 0
            .ShrinkToFit = False
            .ReadingOrder = xlContext
            .MergeCells = False
        End With
    End If
    
    Range("A1:" & Number2Letter(lngLastCol) & "1").Select
    With Selection
        .HorizontalAlignment = xlCenter
        .WrapText = False
        .Orientation = 0
        .AddIndent = False
        .IndentLevel = 0
        .ShrinkToFit = False
        .ReadingOrder = xlContext
        .MergeCells = False
    End With
    
    '  Q -- Parent Item TMR Comment Status
    'Columns("Q:Q").Select
    
    If lngParentTMRCommentStatusColumn > 0 Then
        Columns(Number2Letter(lngParentTMRCommentStatusColumn) & ":" & Number2Letter(lngParentTMRCommentStatusColumn)).Select
    Else
        Columns(Number2Letter(lngLastCol) & ":" & Number2Letter(lngLastCol)).Select
    End If
    
    With Selection
        .HorizontalAlignment = xlCenter
        .WrapText = False
        .Orientation = 0
        .AddIndent = False
        .IndentLevel = 0
        .ShrinkToFit = False
        .ReadingOrder = xlContext
        .MergeCells = False
    End With
    Selection.Columns.AutoFit
    Selection.ColumnWidth = 7.5
    
    '  P -- TMR Comment Status
    'Columns("P:P").Select
    If lngTMRCommentStatusColumn > 0 Then
        Columns(Number2Letter(lngTMRCommentStatusColumn) & ":" & Number2Letter(lngTMRCommentStatusColumn)).Select
    Else
        Columns(Number2Letter(lngLastCol - 1) & ":" & Number2Letter(lngLastCol - 1)).Select
    End If
    
    With Selection
        .HorizontalAlignment = xlCenter
        .WrapText = False
        .Orientation = 0
        .AddIndent = False
        .IndentLevel = 0
        .ShrinkToFit = False
        .ReadingOrder = xlContext
        .MergeCells = False
    End With
    Selection.Columns.AutoFit
    Selection.ColumnWidth = 7.5
    
    '  O -- Closed-Out
    'Columns("O:O").Select
    strSelectRange = Comments.GetCommentHeadingColumnLetter("Closed-Out")
    
    If strSelectRange <> "" Then
        
        strSelectRange = strSelectRange & ":" & strSelectRange
        Columns(strSelectRange).Select
        Selection.Columns.AutoFit
        
        With Selection
            .HorizontalAlignment = xlCenter
            .Orientation = 0
            .AddIndent = False
            .IndentLevel = 0
            .ShrinkToFit = False
            .ReadingOrder = xlContext
        End With
    End If
    
    '  N -- Category
    'Columns("N:N").Select
    strSelectRange = Comments.GetCommentHeadingColumnLetter("Category")
    
    If strSelectRange <> "" Then
    
        strSelectRange = strSelectRange & ":" & strSelectRange
        Columns(strSelectRange).Select
        
        With Selection
            .HorizontalAlignment = xlCenter
            .Orientation = 0
            .AddIndent = False
            .IndentLevel = 0
            .ShrinkToFit = False
            .ReadingOrder = xlContext
        End With
    End If
    

    '  L -- AllDocsRelated
    'Columns("L:L").Select
    strSelectRange = Comments.GetCommentHeadingColumnLetter("AllDocsRelated")
    
    If strSelectRange <> "" Then
    
        strSelectRange = strSelectRange & ":" & strSelectRange
        Columns(strSelectRange).Select
        
        With Selection
            .HorizontalAlignment = xlCenter
            .Orientation = 0
            .AddIndent = False
            .IndentLevel = 0
            .ShrinkToFit = False
            .ReadingOrder = xlContext
        End With
    End If
    


    
    'Range("B6:Q6").Select
    '
    'Range("B6:" & Number2Letter(lngLastCol) & "6").Select
    Range("A" & strCommentHeaderRow & ":" & Number2Letter(lngLastCol) & strCommentHeaderRow).Select
    With Selection
        .VerticalAlignment = xlCenter
        .WrapText = True
        .Orientation = 0
        .AddIndent = False
        .IndentLevel = 0
        .ShrinkToFit = False
        .ReadingOrder = xlContext
        .MergeCells = False
    End With
    'Selection.Columns.AutoFit
        
        
'  C -- Date

'  E -- Sts
'  F -- Raised By



    '  J -- Comments
    strSelectRange = Comments.GetCommentHeadingColumnLetter("Comments")
    
    If strSelectRange <> "" Then
    
        strSelectRange = strSelectRange & ":" & strSelectRange
        Columns(strSelectRange).ColumnWidth = 100
        Range(strSelectRange).Select
        With Selection
            .HorizontalAlignment = xlLeft
            .WrapText = True
            .Orientation = 0
            .AddIndent = False
            .IndentLevel = 0
            .ShrinkToFit = False
            .ReadingOrder = xlContext
            .MergeCells = False
        End With
    End If

    
    '  M -- Contract Clause Reference No
    strSelectRange = Comments.GetCommentHeadingColumnLetter("Contract Clause Reference No")
    
    If strSelectRange <> "" Then
    
        strSelectRange = strSelectRange & ":" & strSelectRange
        Columns(strSelectRange).ColumnWidth = 12.43
        'Columns("M:M").ColumnWidth = 12.43
        Range(strSelectRange).Select
        With Selection
            .HorizontalAlignment = xlCenter
            .WrapText = True
            .Orientation = 0
            .AddIndent = False
            .IndentLevel = 0
            .ShrinkToFit = False
            .ReadingOrder = xlContext
            .MergeCells = False
        End With
    End If
    
    '  L -- AllDocsRelated
    strSelectRange = Comments.GetCommentHeadingColumnLetter("AllDocsRelated")
    
    If strSelectRange <> "" Then
    
        strSelectRange = strSelectRange & ":" & strSelectRange
        Columns(strSelectRange).ColumnWidth = 14
        'Columns("L:L").ColumnWidth = 14
        Range(strSelectRange).Select
        With Selection
            .HorizontalAlignment = xlCenter
            .WrapText = True
            .Orientation = 0
            .AddIndent = False
            .IndentLevel = 0
            .ShrinkToFit = False
            .ReadingOrder = xlContext
            .MergeCells = False
        End With
    End If
    
    '  K -- Related Documents
    strSelectRange = Comments.GetCommentHeadingColumnLetter("Related Documents")
    
    If strSelectRange <> "" Then
    
        strSelectRange = strSelectRange & ":" & strSelectRange
        Columns(strSelectRange).ColumnWidth = 10.57
        'Columns("K:K").ColumnWidth = 10.57
        Range(strSelectRange).Select
        With Selection
            .HorizontalAlignment = xlCenter
            .WrapText = True
            .Orientation = 0
            .AddIndent = False
            .IndentLevel = 0
            .ShrinkToFit = False
            .ReadingOrder = xlContext
            .MergeCells = False
        End With
    End If
    
    '  H -- Commented By
    strSelectRange = Comments.GetCommentHeadingColumnLetter("Commented By")
    
    If strSelectRange <> "" Then
        strSelectRange = strSelectRange & ":" & strSelectRange
        Columns(strSelectRange).ColumnWidth = 17.71
        'Columns("H:H").ColumnWidth = 17.71
        Range(strSelectRange).Select
        With Selection
            .HorizontalAlignment = xlCenter
            .WrapText = True
            .Orientation = 0
            .AddIndent = False
            .IndentLevel = 0
            .ShrinkToFit = False
            .ReadingOrder = xlContext
            .MergeCells = False
        End With
    End If
    
    '  F -- Raised By
    strSelectRange = Comments.GetCommentHeadingColumnLetter("Raised By")
    
    If strSelectRange <> "" Then
    
        strSelectRange = strSelectRange & ":" & strSelectRange
        Columns(strSelectRange).ColumnWidth = 15
        'Columns("G:G").ColumnWidth = 18.43
        Range(strSelectRange).Select
        With Selection
            .HorizontalAlignment = xlCenter
            .WrapText = True
            .Orientation = 0
            .AddIndent = False
            .IndentLevel = 0
            .ShrinkToFit = False
            .ReadingOrder = xlContext
            .MergeCells = False
        End With
    End If
    
    '  G -- Raised By Company
    strSelectRange = Comments.GetCommentHeadingColumnLetter("Raised By Company")
    
    If strSelectRange <> "" Then
    
        strSelectRange = strSelectRange & ":" & strSelectRange
        Columns(strSelectRange).ColumnWidth = 18.43
        'Columns("G:G").ColumnWidth = 18.43
        Range(strSelectRange).Select
        With Selection
            .HorizontalAlignment = xlCenter
            .WrapText = True
            .Orientation = 0
            .AddIndent = False
            .IndentLevel = 0
            .ShrinkToFit = False
            .ReadingOrder = xlContext
            .MergeCells = False
        End With
    End If
     
    '  B -- Item
    strSelectRange = Comments.GetCommentHeadingColumnLetter("Item")
    
    If strSelectRange <> "" Then
        'Range("B7:B" & lngLastRow).Select
        Range(strSelectRange & "7:" & strSelectRange & lngLastRow).Select
        
        With Selection
            .HorizontalAlignment = xlGeneral
            .WrapText = True
            .Orientation = 0
            .AddIndent = False
            .IndentLevel = 0
            .ShrinkToFit = False
            .ReadingOrder = xlContext
            .MergeCells = False
        End With
    End If
    
    '  D -- Rev
    strSelectRange = Comments.GetCommentHeadingColumnLetter("Rev")
    
    If strSelectRange <> "" Then
    
        strSelectRange = strSelectRange & "6:" & strSelectRange & lngLastRow
        Range(strSelectRange).Select
        'Range("D6:E" & lngLastRow).Select
    '    Range("D" & lngLastRow + 1).Activate
        With Selection
            .HorizontalAlignment = xlCenter
            .WrapText = True
            .Orientation = 0
            .AddIndent = False
            .IndentLevel = 0
            .ShrinkToFit = False
            .ReadingOrder = xlContext
            .MergeCells = False
        End With
    End If
    
    '  E -- Sts
    strSelectRange = Comments.GetCommentHeadingColumnLetter("Sts")
    
    If strSelectRange <> "" Then
    
        strSelectRange = strSelectRange & "6:" & strSelectRange & lngLastRow
        Range(strSelectRange).Select
        With Selection
            .HorizontalAlignment = xlCenter
            .WrapText = True
            .Orientation = 0
            .AddIndent = False
            .IndentLevel = 0
            .ShrinkToFit = False
            .ReadingOrder = xlContext
            .MergeCells = False
        End With
    End If
    
    '  I -- Company
    'Columns("I:I").ColumnWidth = 28.43
    strSelectRange = Comments.GetCommentHeadingColumnLetter("Company")
    
    If strSelectRange <> "" Then
        strSelectRange = strSelectRange & ":" & strSelectRange
        Columns(strSelectRange).ColumnWidth = 18.43
    End If
    
    '
    'Range("A6").Select
    Range("A" & strCommentHeaderRow).Select
    With Selection
        .HorizontalAlignment = xlGeneral
        .VerticalAlignment = xlCenter
        .WrapText = True
        .Orientation = 0
        .AddIndent = False
        .IndentLevel = 0
        .ShrinkToFit = False
        .ReadingOrder = xlContext
        .MergeCells = False
    End With
    
    'Range("B6:Q6").Select
    '
    'Range("B6:" & Number2Letter(lngLastCol) & "6").Select
    Range("A" & strCommentHeaderRow & ":" & Number2Letter(lngLastCol) & strCommentHeaderRow).Select
    With Selection
        .HorizontalAlignment = xlCenter
        .VerticalAlignment = xlCenter
        .WrapText = True
        .Orientation = 0
        .AddIndent = False
        .IndentLevel = 0
        .ShrinkToFit = False
        .ReadingOrder = xlContext
        .MergeCells = False
    End With
    
    strSelectRange = Comments.GetCommentHeadingColumnLetter("Comments")
    
    If strSelectRange <> "" Then
    
        strSelectRange = strSelectRange & strCommentHeaderRow & ":" & strSelectRange & strCommentHeaderRow
        Range(strSelectRange).Select
        With Selection
            .HorizontalAlignment = xlGeneral
            .VerticalAlignment = xlCenter
            .WrapText = True
            .Orientation = 0
            .AddIndent = False
            .IndentLevel = 0
            .ShrinkToFit = False
            .ReadingOrder = xlContext
            .MergeCells = False
        End With
    End If
    
    ' Set TMR Comment Sheet title
    Range("A1").Select
    Range("A1").Cells(1, 1).value = strTitle
    'Range("A1").Select
    Range("A1:" & Number2Letter(lngLastCol) & 1).Select
    Selection.Font.Bold = True
    Selection.Font.Size = 18
    With Selection
        .HorizontalAlignment = xlCenterAcrossSelection
        .VerticalAlignment = xlCenter
        .WrapText = True
        .Orientation = 0
        .AddIndent = False
        .IndentLevel = 0
        .ShrinkToFit = False
        .ReadingOrder = xlContext
        .MergeCells = False
    End With
    
    
    ' Format document fields
    strSelectRange = Comments.GetDocumentFieldsRange()
    
    If strSelectRange <> "" Then
        Range(strSelectRange).Select
        With Selection
            .HorizontalAlignment = xlCenter
            .VerticalAlignment = xlCenter
            .WrapText = True
            .Orientation = 0
            .AddIndent = False
            .IndentLevel = 0
            .ShrinkToFit = False
            .ReadingOrder = xlContext
            .MergeCells = False
        End With
        
        'Selection.Columns.AutoFit
        
    End If
    
    If lngTMRCommentStatusColumn > 0 And lngParentTMRCommentStatusColumn > 0 Then
        Columns(Number2Letter(lngTMRCommentStatusColumn) & ":" & Number2Letter(lngParentTMRCommentStatusColumn)).Select
    Else
        Columns(Number2Letter(lngLastCol - 1) & ":" & Number2Letter(lngLastCol)).Select
    End If
    Selection.Columns.AutoFit
    
    '  N -- Category
    'Columns("N:N").Select
    strSelectRange = Comments.GetCommentHeadingColumnLetter("Category")
    
    If strSelectRange <> "" Then
        strSelectRange = strSelectRange & ":" & strSelectRange
        Columns(strSelectRange).Select
        With Selection
            .WrapText = False
            .Orientation = 0
            .AddIndent = False
            .IndentLevel = 0
            .ShrinkToFit = False
            .ReadingOrder = xlContext
            .MergeCells = False
        End With
        
        Selection.Columns.AutoFit
    End If
    
    
    Application.PrintCommunication = False
    With ActiveSheet.PageSetup
        .PrintTitleRows = ""
        .PrintTitleColumns = ""
    End With
    
    Application.PrintCommunication = True
    Application.CutCopyMode = False
    Application.PrintCommunication = False
    With ActiveSheet.PageSetup
        '.PrintTitleRows = "$6:$6"
        .PrintTitleRows = "$" & strCommentHeaderRow & ":$" & strCommentHeaderRow
        .PrintTitleColumns = ""
    End With
    Application.PrintCommunication = True
    ActiveSheet.PageSetup.PrintArea = ""
    Application.PrintCommunication = False
    With ActiveSheet.PageSetup
        .LeftHeader = "&A"
        .CenterHeader = strTitle '"TMR Comment Sheet - " & strDesignPackage
        .RightHeader = "&D"
        .LeftFooter = "&Z&F"
        .CenterFooter = ""
        .RightFooter = "Page &P of &N"
        .LeftMargin = Application.InchesToPoints(0.708661417322835)
        .RightMargin = Application.InchesToPoints(0.708661417322835)
        .TopMargin = Application.InchesToPoints(1)
        .BottomMargin = Application.InchesToPoints(0.748031496062992)
        .HeaderMargin = Application.InchesToPoints(0.748031496062992)
        .FooterMargin = Application.InchesToPoints(0.31496062992126)
        .PrintHeadings = False
        .PrintGridlines = False
        .PrintComments = xlPrintNoComments
        .PrintQuality = 600
        .CenterHorizontally = True
        .CenterVertically = False
        .Orientation = xlLandscape
        .Draft = False
        .PaperSize = xlPaperA3
        .FirstPageNumber = xlAutomatic
        .Order = xlDownThenOver
        .BlackAndWhite = False
        .Zoom = False
        .FitToPagesWide = 1
        .FitToPagesTall = False
        .PrintErrors = xlPrintErrorsDisplayed
        .OddAndEvenPagesHeaderFooter = False
        .DifferentFirstPageHeaderFooter = False
        .ScaleWithDocHeaderFooter = True
        .AlignMarginsHeaderFooter = True
        .EvenPage.LeftHeader.Text = ""
        .EvenPage.CenterHeader.Text = ""
        .EvenPage.RightHeader.Text = ""
        .EvenPage.LeftFooter.Text = ""
        .EvenPage.CenterFooter.Text = ""
        .EvenPage.RightFooter.Text = ""
        .FirstPage.LeftHeader.Text = ""
        .FirstPage.CenterHeader.Text = ""
        .FirstPage.RightHeader.Text = ""
        .FirstPage.LeftFooter.Text = ""
        .FirstPage.CenterFooter.Text = ""
        .FirstPage.RightFooter.Text = ""
    End With
    Application.PrintCommunication = True
    'Rows("7:" & lngLastRow).Select
    Rows((Comments.HeaderRow + 1) & ":" & lngLastRow).Select
'    Range("H7").Activate
    Selection.Rows.AutoFit

End Sub


Sub AddCommentStatusFormatting(ByVal startRow As Long, ByVal startCol As Long, ByVal endRow As Long, ByVal endCol As Long)
'
'
'
    Dim strRange As String
    
    'Range("P7:Q19").Select
    strRange = Number2Letter(startCol) & startRow & ":" & Number2Letter(endCol) & endRow
    Range(strRange).Select
    
    Selection.FormatConditions.Add Type:=xlCellValue, Operator:=xlEqual, _
        Formula1:="=""CLOSED"""
    Selection.FormatConditions(Selection.FormatConditions.count).SetFirstPriority
    With Selection.FormatConditions(1).Font
        .Bold = True
        .Italic = False
        .ThemeColor = xlThemeColorDark1
        .TintAndShade = 0
    End With
    With Selection.FormatConditions(1).Interior
        .PatternColorIndex = xlAutomatic
        .Color = 52224
        .TintAndShade = 0
    End With
    Selection.FormatConditions(1).StopIfTrue = False

    Selection.FormatConditions.Add Type:=xlCellValue, Operator:=xlEqual, _
        Formula1:="=""DISAGREE"""
    Selection.FormatConditions(Selection.FormatConditions.count).SetFirstPriority
    With Selection.FormatConditions(1).Font
        .Bold = True
        .Italic = False
        .ThemeColor = xlThemeColorDark1
        .TintAndShade = 0
    End With
    With Selection.FormatConditions(1).Interior
        .PatternColorIndex = xlAutomatic
        .Color = 255
        .TintAndShade = 0
    End With
    Selection.FormatConditions(1).StopIfTrue = False
    
    Selection.FormatConditions.Add Type:=xlCellValue, Operator:=xlEqual, _
        Formula1:="=""LEVEL 2 RESOLUTION - CLOSED"""
    Selection.FormatConditions(Selection.FormatConditions.count).SetFirstPriority
    With Selection.FormatConditions(1).Font
        .Bold = True
        .Italic = False
        .ThemeColor = xlThemeColorDark1
        .TintAndShade = 0
    End With
    With Selection.FormatConditions(1).Interior
        .PatternColorIndex = xlAutomatic
        .Color = 52224
        .TintAndShade = 0
    End With
    Selection.FormatConditions(1).StopIfTrue = False
    
    Selection.FormatConditions.Add Type:=xlCellValue, Operator:=xlEqual, _
        Formula1:="=""LEVEL 2 RESOLUTION - AGREED"""
    Selection.FormatConditions(Selection.FormatConditions.count).SetFirstPriority
    With Selection.FormatConditions(1).Font
        .Bold = True
        .Italic = False
        .ThemeColor = xlThemeColorLight1
        .TintAndShade = 0
    End With
    With Selection.FormatConditions(1).Interior
        .PatternColorIndex = xlAutomatic
        .Color = 65535
        .TintAndShade = 0
    End With
    Selection.FormatConditions(1).StopIfTrue = False
    
    Selection.FormatConditions.Add Type:=xlCellValue, Operator:=xlEqual, _
        Formula1:="=""LEVEL 2 RESOLUTION"""
    Selection.FormatConditions(Selection.FormatConditions.count).SetFirstPriority
    With Selection.FormatConditions(1).Font
        .Bold = True
        .Italic = False
        .ThemeColor = xlThemeColorDark1
        .TintAndShade = 0
    End With
    With Selection.FormatConditions(1).Interior
        .PatternColorIndex = xlAutomatic
        .Color = 255
        .TintAndShade = 0
    End With
    Selection.FormatConditions(1).StopIfTrue = False

    Selection.FormatConditions.Add Type:=xlCellValue, Operator:=xlEqual, _
        Formula1:="=""AGREED"""
    Selection.FormatConditions(Selection.FormatConditions.count).SetFirstPriority
    With Selection.FormatConditions(1).Font
        .Bold = True
        .Italic = False
        .ThemeColor = xlThemeColorLight1
        .TintAndShade = 0
    End With
    With Selection.FormatConditions(1).Interior
        .PatternColorIndex = xlAutomatic
        .Color = 65535
        .TintAndShade = 0
    End With
    Selection.FormatConditions(1).StopIfTrue = False
    
    Selection.FormatConditions.Add Type:=xlCellValue, Operator:=xlEqual, _
        Formula1:="=""OUTSTANDING"""
    Selection.FormatConditions(Selection.FormatConditions.count).SetFirstPriority
    With Selection.FormatConditions(1).Font
        .Bold = True
        .Italic = False
        .TintAndShade = 0
    End With
    With Selection.FormatConditions(1).Interior
        .PatternColorIndex = xlAutomatic
        .Color = 49407
        .TintAndShade = 0
    End With
    Selection.FormatConditions(1).StopIfTrue = False
End Sub



Function RemoveEmptyEntriesFromArray(strArray() As String, Optional index As Long = -1, Optional TrimValues As Boolean = False) As String()
'    For x = Index To UBound(StrArray) - 1
'        StrArray(x) = StrArray(x + 1)
'    Next
    
    Dim idx As Long
    Dim newStrArray() As String
    idx = 0
    
    If (index < 0) Then
        If (LBound(strArray) > index) Then
            index = LBound(strArray)
        End If
    
    End If
    
    If (index >= 0) Then
        For x = index To UBound(strArray)
            
            'Debug.Print StrArray(x)
            
            If (Trim(strArray(x)) = "") Then
                ' skip this value
            Else ' add value to new array
            
                ReDim Preserve newStrArray(idx) As String
                
                If (TrimValues = True) Then
                    newStrArray(idx) = Trim(strArray(x))
                Else
                    newStrArray(idx) = strArray(x)
                End If
                idx = idx + 1
            End If
            
        Next
    Else
        newStrArray = strArray
    End If

    RemoveEmptyEntriesFromArray = newStrArray()
    
End Function


Function IsDocumentField(value As String) As Boolean

    Select Case value
        
        Case "DocumentNo"
            IsDocumentField = True
        Case "Rev"
            IsDocumentField = True
        Case "Sts"
            IsDocumentField = True
        Case "Discipline"
            IsDocumentField = True
        Case Else
            ' ignore
            IsDocumentField = False
    End Select
        
End Function
Function GetArrayIndex(ByRef sArray As Variant, ByVal findText As String) As Long

    Dim var As Variant
    Dim idx As Long
    
    idx = -1
    
    If Not TMR_IsNothing(sArray) Then
        For Each var In sArray
            
            idx = idx + 1
            
            If CStr(var) = findText Then
            
                Exit For
            
            End If
        
        Next var
    
    End If

    GetArrayIndex = idx

End Function

Function UniqueArray(strArray As Variant, Optional bSortArray As Boolean = True) As Variant
    Dim arr As New Collection, a
    Dim strUniqueArray() As Variant
    Dim i As Long, j As Long
    Dim count As Long

    On Error Resume Next
    For Each a In strArray
       arr.Add a, a
    Next
    
    If bSortArray Then
        'Two loops to bubble sort
        For i = 1 To arr.count - 1
            For j = i + 1 To arr.count
                If arr(i) > arr(j) Then
                    'store the lesser item
                    vTemp = arr(j)
                    'remove the lesser item
                    arr.Remove j
                    're-add the lesser item before the
                    'greater Item
                    arr.Add vTemp, vTemp, i
                End If
            Next j
        Next i
    End If
    
    count = 0
    For i = 1 To arr.count
        If arr(i) <> "CLOSED" Then
            If (count = 0) Then
                ReDim strUniqueArray(count) As Variant
            
               strUniqueArray(count) = arr(i)
               count = count + 1
            Else
               ReDim Preserve strUniqueArray(count) As Variant
               strUniqueArray(count) = arr(i)
               count = count + 1
            End If
        End If
    Next
    
    UniqueArray = strUniqueArray

End Function

Function SheetExists(WorksheetName As String) As Boolean

    On Error Resume Next
    SheetExists = (Sheets(WorksheetName).Name <> "")
    On Error GoTo 0

End Function

Sub ClearExistingCommentsData(Optional ByVal bDeleteAllExistingCells As Boolean = False)
'
' Clear all data on the "Comment Sheet" Worksheet
'
'
    Dim strWorksheetName As String

    strWorksheetName = "Comment Sheet"
    
    If SheetExists(strWorksheetName) Then
        Sheets(strWorksheetName).Select
        'Cells.Select
        'Selection.ClearContents
        
        If bDeleteAllExistingCells Then
            Cells.Select
            Selection.Delete Shift:=xlUp
            
        Else '  clear cell data & not formatting
            Sheets(strWorksheetName).Cells.Clear
        End If
        
        DeleteAllPicsOnWorksheet Sheets(strWorksheetName)
        
    End If
    
    If ActiveSheet.Name <> strWorksheetName Then
        If SheetExists(strWorksheetName) Then Sheets(strWorksheetName).Select
    End If
       
    Range("A1").Select

End Sub


Sub DeleteAllPicsOnWorksheet(ByRef oWorksheet As Worksheet)

    Dim shp As Shape
    Dim strType As String

    For Each shp In oWorksheet.Shapes
        
        If shp.Type = msoPicture Or shp.Type = msoLinkedPicture Then
            shp.Delete
        End If
        
    Next shp

End Sub

Sub ClearCommentSheet(ByRef oWorksheet As Worksheet)

    oWorksheet.Activate
    Cells.Select
    Selection.Delete Shift:=xlUp
    oWorksheet.Range("A1").Select
End Sub



Public Function TMR_IsNothing(value As Variant) As Boolean

    Dim vTest As Variant
    Dim iArrayStart As Integer
    Dim iCtr As Integer
    Dim bFlag As Boolean
    
    If IsEmpty(value) Then
        TMR_IsNothing = True
        Exit Function
    End If
    
    If IsNull(value) Then
        TMR_IsNothing = True
        Exit Function
    End If
    
    If VarType(value) = vbString Then
        If value = "" Then
            TMR_IsNothing = True
            Exit Function
        End If
    End If
    
    If IsNumeric(value) Then
        If value = 0 Then
            TMR_IsNothing = True
            Exit Function
        End If
    End If
    
    If IsObject(value) Then
        If value Is Nothing Then
            TMR_IsNothing = True
            Exit Function
        End If
        
    End If
    
    If IsArray(value) Then
        On Error Resume Next
        vTest = value(0)
        If IsEmpty(vTest) Then
            TMR_IsNothing = True
            Exit Function
        End If
        iArrayStart = IIf(err.Number = 0, 0, 1)
        err.Clear
        On Error GoTo 0
        For iCtr = iArrayStart To UBound(value)
            If Not TMR_IsNothing(value(iCtr)) Then
                bFlag = True
                Exit For
            End If
            
        Next
    
        TMR_IsNothing = Not bFlag
    End If

End Function



Function LastRowColumn(sht As Worksheet, RowColumn As String) As Long
'PURPOSE: Function To Return the Last Row Or Column Number In the Active Spreadsheet
'INPUT: "R" or "C" to determine which direction to search

    Dim rc As Long
    
    Select Case LCase(Left(RowColumn, 1)) 'If they put in 'row' or column instead of 'r' or 'c'.
        Case "c"
            LastRowColumn = sht.Cells.Find("*", LookIn:=xlFormulas, SearchOrder:=xlByColumns, _
            SearchDirection:=xlPrevious).Column
        Case "r"
            LastRowColumn = sht.Cells.Find("*", LookIn:=xlFormulas, SearchOrder:=xlByRows, _
            SearchDirection:=xlPrevious).Row
        Case Else
            LastRowColumn = 1
    End Select

End Function


Function Last(choice As Long, Rng As Range)
' 1 = last row
' 2 = last column
' 3 = last cell


'Caveats:
'1 : Find does not find a cell containing the Null string "" entered when you do Edit=>Copy and then Edit=>Paste Special, Values for a cell containing a formula like =IF(A1="","",A1*1.21), which may or may not be desirable (end(xlup) does).
'
'2 : Find not see cell formatting but only data, if this is important for you see the xlCellTypeLastCell and UsedRange section of this page to find the last row or column.
'
'3 : If you use merged cells (Please do not use merged cells) maybe you get unexpected results.
'It will give you the column number of the first cell and not the last cell in the merged cells.

    Dim lrw As Long
    Dim lcol As Long

    Select Case choice

    Case 1:
        On Error Resume Next
        Last = Rng.Find(What:="*", _
                        After:=Rng.Cells(1), _
                        Lookat:=xlPart, _
                        LookIn:=xlFormulas, _
                        SearchOrder:=xlByRows, _
                        SearchDirection:=xlPrevious, _
                        MatchCase:=False).Row
        On Error GoTo 0

    Case 2:
        On Error Resume Next
        Last = Rng.Find(What:="*", _
                        After:=Rng.Cells(1), _
                        Lookat:=xlPart, _
                        LookIn:=xlFormulas, _
                        SearchOrder:=xlByColumns, _
                        SearchDirection:=xlPrevious, _
                        MatchCase:=False).Column
        On Error GoTo 0

    Case 3:
        On Error Resume Next
        lrw = Rng.Find(What:="*", _
                       After:=Rng.Cells(1), _
                       Lookat:=xlPart, _
                       LookIn:=xlFormulas, _
                       SearchOrder:=xlByRows, _
                       SearchDirection:=xlPrevious, _
                       MatchCase:=False).Row
        On Error GoTo 0

        On Error Resume Next
        lcol = Rng.Find(What:="*", _
                        After:=Rng.Cells(1), _
                        Lookat:=xlPart, _
                        LookIn:=xlFormulas, _
                        SearchOrder:=xlByColumns, _
                        SearchDirection:=xlPrevious, _
                        MatchCase:=False).Column
        On Error GoTo 0

        On Error Resume Next
        Last = Rng.Parent.Cells(lrw, lcol).Address(False, False)
        If err.Number > 0 Then
            Last = Rng.Cells(1).Address(False, False)
            err.Clear
        End If
        On Error GoTo 0

    End Select
End Function


Function Number2Letter(ByVal ColumnNumber As Long) As String
'PURPOSE: Convert a given number into it's corresponding Letter Reference
'SOURCE: www.TheSpreadsheetGuru.com/the-code-vault

    Dim ColumnLetter As String
    
    'Convert To Column Letter
    ColumnLetter = Split(Cells(1, ColumnNumber).Address, "$")(1)
    
    'Display Result
    'MsgBox "Column " & ColumnNumber & " = Column " & ColumnLetter
    Number2Letter = ColumnLetter
  
End Function
Function Letter2Number(ByVal ColumnLetter As String) As Long
'PURPOSE: Convert a given letter into it's corresponding Numeric Reference
'SOURCE: www.TheSpreadsheetGuru.com/the-code-vault

    Dim ColumnNumber As Long
  
    'Convert To Column Number
    ColumnNumber = Range(ColumnLetter & 1).Column
    
    'Display Result
    'MsgBox "Column " & ColumnLetter & " = Column " & ColumnNumber
    
    Letter2Number = ColumnNumber
    
End Function


Function FileExists(ByVal FileToTest As String) As Boolean
   FileExists = (Dir(FileToTest) <> "")
End Function


Attribute VB_Name = "Module2"

Private Sub SaveAsHexFile(ByVal Filename As String)

    Dim c        As Long
    Dim DataByte As Byte
    Dim Data()   As Variant
    Dim i        As Long
    Dim n        As Integer
    Dim r        As Long
    Dim Wks      As Worksheet
    Dim x        As String
    
    If Dir(Filename) = "" Then
        MsgBox "The File '" & Filename & "' Not Found."
        Exit Sub
    End If
    
    On Error Resume Next
        Set Wks = Worksheets("Hex Byte Data")
        If err = 9 Then
            Worksheets.Add After:=Worksheets.count
            Set Wks = ActiveSheet
            Wks.Name = "Hex Byte Data"
        End If
    On Error GoTo 0
    
    Wks.Cells.ClearContents
    Wks.Cells(1, "AH").value = Dir(Filename)
    
    n = FreeFile
    
    Application.ScreenUpdating = False
    Application.ErrorCheckingOptions.NumberAsText = False
    
        With Wks.Columns("A:AF")
            .NumberFormat = "@"
            .Cells.HorizontalAlignment = xlCenter
    
            Open Filename For Binary Access Read As #n
                ReDim Data((LOF(n) - 1) \ 32, 31)
                
                For i = 0 To LOF(n) - 1
                    Get #n, , DataByte
                    c = i Mod 32
                    r = i \ 32
                    x = Hex(DataByte)
                    If DataByte < 16 Then x = "0" & x
                    Data(r, c) = x
                Next i
            Close #n
    
            Wks.Range("A1:AF1").Resize(r + 1, 32).value = Data
            .Columns("A:AF").AutoFit
        End With
    
    Application.ScreenUpdating = True
        
End Sub

Function RestoreHexFile() As String

    Dim Cell    As Range
    Dim Data()  As Byte
    Dim File    As String
    Dim j       As Long
    Dim LSB     As Variant
    Dim MSB     As Variant
    Dim n       As Integer
    Dim Rng     As Range
    Dim Wks     As Worksheet

    On Error Resume Next
        Set Wks = Worksheets("Hex Byte Data")
        If err <> 0 Then
            MsgBox "The Worksheet 'Hex Byte Data' is Missing.", vbCritical
            Exit Function
        End If
    On Error GoTo 0
    
    Set Rng = Wks.Range("A1").CurrentRegion
    
    File = Wks.Cells(1, "AH").value
    
    If File <> "" Then
        n = FreeFile
        File = Environ("TEMP") & "\" & File
        
        Open File For Binary Access Write As #n
            ReDim Data(Application.CountA(Rng) - 1)
            
            For Each Cell In Rng
                If Cell = "" Then Exit For
                
                MSB = Left(Cell, 1)
                If IsNumeric(MSB) Then MSB = 16 * MSB Else MSB = 16 * (Asc(MSB) - 55)
                
                LSB = Right(Cell, 1)
                If Not IsNumeric(LSB) Then LSB = (Asc(LSB) - 55) Else LSB = LSB * 1
                
                Data(j) = MSB + LSB
                j = j + 1
            Next Cell
            
            Put #n, , Data
        Close #n
    End If

   RestoreHexFile = File
       
End Function
'
'
'
'Sub InitialiseImageWorksheet()
'
'    Dim Filename As String
'
'      ' Save picture to the worksheet Hex Byte Data.
'        Filename = "D:\_Working\logos\Logos\qld gov logo option-2\option-1\Qld-CoA-Stylised-2LS-mono.png"
'        Call SaveAsHexFile(Filename)
'
'      ' Restore the file to the user's Temp directory.
'        Filename = RestoreHexFile
'
'      ' Filename now is the complete file path to the restored file.
'      ' Pass this to another macro or application.
'
'End Sub
'
'


Sub DeleteAllPicsOnWorksheet(ByRef oWorksheet As Worksheet)
    
    Dim shp As Shape

    For Each shp In oWorksheet.Shapes
    
        If shp.Type = msoPicture Or shp.Type = msoLinkedPicture Then
            shp.Delete
        End If
        
    Next shp

End Sub

Sub InsertLogo(ByVal strSheetName As String, ByVal insertRow As Long, ByVal insertCol As Long)
    
    Dim strFilename As String
    Dim strRange As String
    
    strRange = Number2Letter(insertCol) & insertRow
    
    ' Restore the file to the user's Temp directory.
    strFilename = RestoreHexFile

    Sheets(strSheetName).Select
    
    'Range("Q1").Select
    Range(strRange).Select
    
    If strFilename <> "" And FileExists(strFilename) Then
        
        ActiveSheet.Pictures.Insert(strFilename).Select
    '    Selection.ShapeRange.ScaleHeight 2.5210006102, msoFalse, msoScaleFromTopLeft
        'Selection.ShapeRange.ScaleWidth 2.5210014529, msoFalse, msoScaleFromTopLeft
        Selection.ShapeRange.ScaleWidth 0.5338984755, msoFalse, msoScaleFromTopLeft

    End If

End Sub


Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "CommandButton1, 1, 0, MSForms, CommandButton"
Private Sub CommandButton1_Click()
    
    Dim importToWorksheetName As String
    Dim addLinksSheet As String
    Dim startDataRow As Long

    importToWorksheetName = "Comment Sheet"

    If Not SheetExists(importToWorksheetName) Then
        importToWorksheetName = ActiveSheet.Name
    End If
    
    ImportCommentSheetData importToWorksheetName
    
    CommandButton1.Height = 22.5
    CommandButton1.Width = 223.5

End Sub

Attribute VB_Name = "Sheet2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet6"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "frmFilterType"
Attribute VB_Base = "0{A4B25D05-214F-41EB-9572-E37C3EBE0A80}{F5CE3E65-8BDD-4BC3-BC74-2C46583187B9}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Private Sub cmdCancel_Click()
    Unload Me
End Sub

Private Sub cmdOK_Click()

    If OptionButton2.value Then
        gImportType = "NCR"
    ElseIf OptionButton3.value Then
        gImportType = "LOT"
    Else
        gImportType = ""
    End If
    Unload Me
End Sub

Private Sub UserForm_Click()

End Sub

Private Sub UserForm_Initialize()
Dim lastRow As Long
Dim Row As Long
Dim numberOfRows As Long
numberOfRows = 1

'ComboBoxCommentStatus.AddItem "-- CLOSED -"
'ComboBoxCommentStatus.AddItem "-- AGREED --"
'
'ComboBoxCommentStatus.AddItem "-- DISAGREE -"
'
'ComboBoxCommentStatus.AddItem "- LEVEL 2 RESOLUTION - CLOSED -"
'
'ComboBoxCommentStatus.AddItem "- LEVEL 2 RESOLUTION -- AGREED --"
'ComboBoxCommentStatus.AddItem "- LEVEL 2 RESOLUTION --"

' Read lists from the "FilterList" worksheet to automatically set the form values

    lastRow = Worksheets("FilterList").Cells(Rows.count, "A").End(xlUp).Row
                
    n = 0
    For Row = 1 To lastRow Step numberOfRows
        n = n + 1
        ComboBoxCommentStatus.AddItem CStr(Worksheets("FilterList").Cells(Row, "A").value)
    Next

ComboBoxCommentStatus.value = ComboBoxCommentStatus.list(0)

If (UCase(CStr(Worksheets("FilterList").Cells(1, "E").value)) = "YES" Or UCase(CStr(Worksheets("FilterList").Cells(1, "E").value)) = "Y") Then
    CheckBoxDeleteFilterredData.value = True
Else
    CheckBoxDeleteFilterredData.value = False
End If

'-- OUTSTANDING --   Information is yet to be provided as agreed.
'-- CLOSED -  No further action is required
'-- AGREED --   Action to be provided at next design submission
'-- DISAGREE - Raised to Level 2 resolution
'- LEVEL 2 RESOLUTION - CLOSED -  No further action is required << supply details >>
'- LEVEL 2 RESOLUTION -- AGREED --

End Sub

' InQuest injected base64 decoded content
' z{Gy
' z{Gy
' z{Gy

INQUEST-PP=macro
