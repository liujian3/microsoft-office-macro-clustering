Attribute VB_Name = "ClavisDictionaryModule"
Public Function GetClavisDictionary(ByVal host As String, ByVal glossary As String, _
ByVal referenceDictionary As String) As Variant
Dim xml As String
Dim arr() As String
Dim sortArr() As String
Dim callerRows As Long
Dim callerCols As Long
callerRows = Application.Caller.rows.Count
callerCols = Application.Caller.Columns.Count
arr = GetDictionary(host, glossary, referenceDictionary)
sortArr = SortArray(arr)
GetClavisDictionary = GetFinalResult(callerRows, callerCols, sortArr)
End Function
Public Sub ChangeFormulaName()
On Error Resume Next
End Sub
Private Sub AddVBAClavisDictionaryFunction(ByVal range1 As String, ByVal range2 As String, _
ByVal arg1 As String, ByVal arg2 As String, ByVal arg3 As String, ByVal arg1Mapped As String, ByVal arg2Mapped As String, ByVal arg3Mapped As String, ByVal activeSheetIndex As Integer)
Dim argument1, argument2, argument3 As String
Dim rng As Range
If (arg1Mapped = "1") Then
argument1 = arg1
Else
argument1 = Chr(34) & arg1 & Chr(34)
End If
If (arg2Mapped = "1") Then
argument2 = arg2
Else
argument2 = Chr(34) & arg2 & Chr(34)
End If
If (arg3Mapped = "1") Then
argument3 = arg3
Else
argument3 = Chr(34) & arg3 & Chr(34)
End If
Sheets(activeSheetIndex).Activate
Set rng = Sheets(activeSheetIndex).Range(range1 & ":" & range2)
rng.Activate
rng.Select
rng.ClearContents
rng.FormulaArray = "=GetClavisDictionary(" & argument1 & "," & argument2 & "," & argument3 & ")"
Set rng = Nothing
End Sub
Private Function GetDictionary(ByVal host As String, ByVal glossary As String, _
ByVal referenceDictionary As String) As Variant
Dim myHTTP As MSXML2.XMLHTTP30
Dim xmlResponse As DOMDocument
Dim server As String
Dim keyNodes As IXMLDOMNodeList
Dim valueNodes As IXMLDOMNodeList
Dim titleNode As IXMLDOMNode
Dim retArray() As String
On Error GoTo Handler
server = "https://" & host & ".clavistechnology.com" & "/glossaries/" & glossary _
& "/reference_datas/" & referenceDictionary & ".xml"
Set myHTTP = CreateObject("msxml2.xmlhttp")
myHTTP.Open "GET", server, "False"
myHTTP.setRequestHeader "Content-type", "application/xml"
myHTTP.send
If Not (myHTTP.responseXML Is Nothing) Then
Set xmlResponse = New DOMDocument
xmlResponse.LoadXML (myHTTP.responseText)
Set keyNodes = xmlResponse.SelectNodes("/dictionary/entries/entry/key")
Set titleNode = xmlResponse.SelectSingleNode("/dictionary/name")
Set valueNodes = xmlResponse.SelectNodes("/dictionary/entries/entry/values")
If keyNodes.Length <> 0 Then
retArray = GetResult(titleNode.Text, keyNodes, valueNodes)
End If
End If
GetDictionary = retArray
Handler:
If Err.Description <> "" Then
MsgBox "No data could be retreived for the given arguments"
End If
End Function
Private Function GetResult(ByVal title As String, ByVal keyNodes As IXMLDOMNodeList, ByVal valueNodes As IXMLDOMNodeList) As Variant
Dim Node As IXMLDOMNode
Dim counter As Integer
Dim columnCounter As Integer
Dim retArray() As String
Dim columnSize As Integer
counter = 0
columnSize = valueNodes.Item(0).SelectNodes("./value").Length
ReDim retArray(keyNodes.Length - 1, columnSize)
For Each Node In keyNodes
retArray(counter, 0) = Node.Text
counter = counter + 1
Next
counter = 0
For Each Node In valueNodes
columnCounter = 1
For Each valueNode In Node.SelectNodes("./value")
retArray(counter, columnCounter) = valueNode.Text
columnCounter = columnCounter + 1
Next
counter = counter + 1
Next
GetResult = retArray
End Function
Private Function GetFinalResult(ByVal rows As Integer, ByVal cols As Integer, _
ByRef arrToCopyFrom() As String) As Variant
Dim arrCopy() As String
Dim numberOfItemsNotShown As Integer
Dim numberOfColumnItemsNotShown As Integer
Dim message As String
On Error GoTo Handler
ReDim arrCopy(rows, cols)
If ((rows - 1) < UBound(arrToCopyFrom, 1) And (cols - 1) >= UBound(arrToCopyFrom, 2)) Then
numberOfRowItemsNotShown = UBound(arrToCopyFrom, 1) - rows + 2
message = FormatMessage(numberOfRowItemsNotShown, 0)
For i = LBound(arrToCopyFrom, 1) To rows - 1
For j = LBound(arrToCopyFrom, 2) To UBound(arrToCopyFrom, 2)
If (i = (rows - 1) And j = 0) Then
arrCopy(i, j) = message
ElseIf (i = (rows - 1) And j > 0) Then
arrCopy(i, j) = ""
Else
arrCopy(i, j) = arrToCopyFrom(i, j)
End If
Next j
Next i
ElseIf ((rows - 1) < UBound(arrToCopyFrom, 1) And (cols - 1) < UBound(arrToCopyFrom, 2)) Then
numberOfRowItemsNotShown = UBound(arrToCopyFrom, 1) - rows + 2
numberOfColumnItemsNotShown = UBound(arrToCopyFrom, 2) - cols + 1
message = FormatMessage(numberOfRowItemsNotShown, numberOfColumnItemsNotShown)
For i = LBound(arrToCopyFrom, 1) To rows - 1
For j = LBound(arrToCopyFrom, 2) To cols - 1
If (i = (rows - 1) And j = 0) Then
arrCopy(i, j) = message
ElseIf (i = (rows - 1) And j > 0) Then
arrCopy(i, j) = ""
Else
arrCopy(i, j) = arrToCopyFrom(i, j)
End If
Next j
Next i
ElseIf ((rows - 1) > UBound(arrToCopyFrom, 1) And (cols - 1) < UBound(arrToCopyFrom, 2)) Then
numberOfColumnItemsNotShown = UBound(arrToCopyFrom, 2) - cols + 1
message = FormatMessage(0, numberOfColumnItemsNotShown)
For i = LBound(arrToCopyFrom, 1) To UBound(arrToCopyFrom, 1)
For j = LBound(arrToCopyFrom, 2) To cols - 1
arrCopy(i, j) = arrToCopyFrom(i, j)
Next j
Next i
If (numberOfColumnItemsNotShown > 0) Then
arrCopy(UBound(arrToCopyFrom, 1) + 1, 0) = message
End If
ElseIf ((rows - 1) = UBound(arrToCopyFrom, 1) And (cols - 1) < UBound(arrToCopyFrom, 2)) Then
numberOfColumnItemsNotShown = UBound(arrToCopyFrom, 2) - cols + 1
message = FormatMessage(0, numberOfColumnItemsNotShown)
For i = LBound(arrToCopyFrom, 1) To UBound(arrToCopyFrom, 1)
For j = LBound(arrToCopyFrom, 2) To cols - 1
arrCopy(i, j) = arrToCopyFrom(i, j)
Next j
Next i
If (numberOfColumnItemsNotShown > 0) Then
arrCopy(UBound(arrToCopyFrom, 1), 0) = message
End If
Else
For i = LBound(arrToCopyFrom, 1) To UBound(arrToCopyFrom, 1)
For j = LBound(arrToCopyFrom, 2) To UBound(arrToCopyFrom, 2)
arrCopy(i, j) = arrToCopyFrom(i, j)
Next j
Next i
End If
GetFinalResult = arrCopy
Handler:
If Err.Description <> "" Then
MsgBox "No data could be retreived for the given arguments"
End If
End Function
Private Function SortArray(ByRef arrToSort() As String) As Variant
Dim loop1, loop2 As Long
Dim tempArr() As String
ReDim tempArr(UBound(arrToSort, 1), UBound(arrToSort, 2))
For loop1 = 0 To UBound(arrToSort, 1)
For loop2 = loop1 To UBound(arrToSort, 1)
If UCase(arrToSort(loop2, 0)) < UCase(arrToSort(loop1, 0)) Then
For i = 0 To UBound(arrToSort, 2)
tempArr(loop1, i) = arrToSort(loop1, i)
tempArr(loop2, i) = arrToSort(loop2, i)
arrToSort(loop1, i) = tempArr(loop2, i)
arrToSort(loop2, i) = tempArr(loop1, i)
Next i
End If
Next loop2
Next loop1
SortArray = arrToSort
End Function
Private Function FormatMessage(ByVal noOfRows As Integer, ByVal noOfCols As Integer) As String
Dim message As String
If (noOfRows < 1) Then
If (noOfCols = 1) Then
message = CStr(noOfCols) + " column not shown"
ElseIf (noOfCols > 1) Then
message = CStr(noOfCols) + " columns not shown"
End If
ElseIf (noOfRows = 1) Then
If (noOfCols = 1) Then
message = "1 row and 1 column not shown"
ElseIf (noOfCols > 1) Then
message = "1 row and " + CStr(noOfCols) + " columns not shown"
Else
message = "1 row not shown"
End If
Else
If (noOfCols = 1) Then
message = CStr(noOfRows) + " rows and 1 column not shown"
ElseIf (noOfCols > 1) Then
message = CStr(noOfRows) + " rows and " + CStr(noOfCols) + " columns not shown"
Else
message = CStr(noOfRows) + " rows not shown"
End If
End If
FormatMessage = message
End Function


Attribute VB_Name = "ClavisFormBuilder"
Public saveOnOpen As Boolean
Public errors As String
Public hints As String
Public correctionNodeValues() As String
Public correctionCells() As String
Public IsChanging As Boolean
Public FormUpdateFinished As Boolean
Public FormUpdateIDs() As String
Public BenchmarkTime As Variant
Public SecondsMarked As Integer
Public IsValidateOnTimeElapsed As Boolean
Public err_count As Integer
Public valid_err As String


Sub Validate(ByVal isCellValidation As Boolean, ByVal cellId As Variant)
Dim myxml As String
saveOnOpen = True
SecondsMarked = 3

IsValidateOnTimeElapsed = False

myxml = "<?xml version '1.0' encoding='UTF-8'?><request><form version='6.0'><fields>"

fieldName0 = "Supplier"
value0 = ActiveWorkbook.Sheets(3).Range("D5")
value0 = Replace(value0, "<", "&lt;")
value0 = Replace(value0, ">", "&gt;")
myxml = myxml + xml_entry(fieldName0, value0)
fieldName1 = "Name of person completing form"
Value1 = ActiveWorkbook.Sheets(3).Range("D6")
Value1 = Replace(Value1, "<", "&lt;")
Value1 = Replace(Value1, ">", "&gt;")
myxml = myxml + xml_entry(fieldName1, Value1)
fieldName2 = "Email Address of person completing form"
Value2 = ActiveWorkbook.Sheets(3).Range("D7")
Value2 = Replace(Value2, "<", "&lt;")
Value2 = Replace(Value2, ">", "&gt;")
myxml = myxml + xml_entry(fieldName2, Value2)
fieldName3 = "Telephone of person completing form"
value3 = ActiveWorkbook.Sheets(3).Range("D8")
value3 = Replace(value3, "<", "&lt;")
value3 = Replace(value3, ">", "&gt;")
myxml = myxml + xml_entry(fieldName3, value3)
fieldName4 = "Product Description"
value4 = ActiveWorkbook.Sheets(3).Range("D11")
value4 = Replace(value4, "<", "&lt;")
value4 = Replace(value4, ">", "&gt;")
myxml = myxml + xml_entry(fieldName4, value4)
fieldName5 = "Brand Name"
value5 = ActiveWorkbook.Sheets(3).Range("D13")
value5 = Replace(value5, "<", "&lt;")
value5 = Replace(value5, ">", "&gt;")
myxml = myxml + xml_entry(fieldName5, value5)
fieldName6 = "GTIN Type"
value6 = ActiveWorkbook.Sheets(3).Range("D15")
value6 = Replace(value6, "<", "&lt;")
value6 = Replace(value6, ">", "&gt;")
myxml = myxml + xml_entry(fieldName6, value6)
fieldName7 = "Temperature Band"
value7 = ActiveWorkbook.Sheets(3).Range("D18")
value7 = Replace(value7, "<", "&lt;")
value7 = Replace(value7, ">", "&gt;")
myxml = myxml + xml_entry(fieldName7, value7)
fieldName8 = "Pack Size Weight"
value8 = ActiveWorkbook.Sheets(3).Range("D19")
value8 = Replace(value8, "<", "&lt;")
value8 = Replace(value8, ">", "&gt;")
myxml = myxml + xml_entry(fieldName8, value8)
fieldName9 = "Width"
value9 = ActiveWorkbook.Sheets(3).Range("D23")
value9 = Replace(value9, "<", "&lt;")
value9 = Replace(value9, ">", "&gt;")
myxml = myxml + xml_entry(fieldName9, value9)
fieldName10 = "Depth"
value10 = ActiveWorkbook.Sheets(3).Range("D24")
value10 = Replace(value10, "<", "&lt;")
value10 = Replace(value10, ">", "&gt;")
myxml = myxml + xml_entry(fieldName10, value10)
fieldName11 = "Height"
value11 = ActiveWorkbook.Sheets(3).Range("D25")
value11 = Replace(value11, "<", "&lt;")
value11 = Replace(value11, ">", "&gt;")
myxml = myxml + xml_entry(fieldName11, value11)
fieldName12 = "Stir Frying Instructions"
value12 = ActiveWorkbook.Sheets(3).Range("D104")
value12 = Replace(value12, "<", "&lt;")
value12 = Replace(value12, ">", "&gt;")
myxml = myxml + xml_entry(fieldName12, value12)
fieldName13 = "Steaming Instructions"
value13 = ActiveWorkbook.Sheets(3).Range("D103")
value13 = Replace(value13, "<", "&lt;")
value13 = Replace(value13, ">", "&gt;")
myxml = myxml + xml_entry(fieldName13, value13)
fieldName14 = "Pan Frying Instructions"
value14 = ActiveWorkbook.Sheets(3).Range("D100")
value14 = Replace(value14, "<", "&lt;")
value14 = Replace(value14, ">", "&gt;")
myxml = myxml + xml_entry(fieldName14, value14)
fieldName15 = "Microwaving Instructions"
value15 = ActiveWorkbook.Sheets(3).Range("D99")
value15 = Replace(value15, "<", "&lt;")
value15 = Replace(value15, ">", "&gt;")
myxml = myxml + xml_entry(fieldName15, value15)
fieldName16 = "Grilling Instructions"
value16 = ActiveWorkbook.Sheets(3).Range("D98")
value16 = Replace(value16, "<", "&lt;")
value16 = Replace(value16, ">", "&gt;")
myxml = myxml + xml_entry(fieldName16, value16)
fieldName17 = "Deep Frying Instructions"
value17 = ActiveWorkbook.Sheets(3).Range("D97")
value17 = Replace(value17, "<", "&lt;")
value17 = Replace(value17, ">", "&gt;")
myxml = myxml + xml_entry(fieldName17, value17)
fieldName18 = "Boiling Instructions"
value18 = ActiveWorkbook.Sheets(3).Range("D96")
value18 = Replace(value18, "<", "&lt;")
value18 = Replace(value18, ">", "&gt;")
myxml = myxml + xml_entry(fieldName18, value18)
fieldName19 = "Baking Instructions"
value19 = ActiveWorkbook.Sheets(3).Range("D95")
value19 = Replace(value19, "<", "&lt;")
value19 = Replace(value19, ">", "&gt;")
myxml = myxml + xml_entry(fieldName19, value19)
fieldName20 = "Contains Egg"
value20 = ActiveWorkbook.Sheets(3).Range("D59")
value20 = Replace(value20, "<", "&lt;")
value20 = Replace(value20, ">", "&gt;")
myxml = myxml + xml_entry(fieldName20, value20)
fieldName21 = "Contains Fish"
value21 = ActiveWorkbook.Sheets(3).Range("D60")
value21 = Replace(value21, "<", "&lt;")
value21 = Replace(value21, ">", "&gt;")
myxml = myxml + xml_entry(fieldName21, value21)
fieldName22 = "Contains Milk"
value22 = ActiveWorkbook.Sheets(3).Range("D63")
value22 = Replace(value22, "<", "&lt;")
value22 = Replace(value22, ">", "&gt;")
myxml = myxml + xml_entry(fieldName22, value22)
fieldName23 = "Contains Molluscs"
value23 = ActiveWorkbook.Sheets(3).Range("D64")
value23 = Replace(value23, "<", "&lt;")
value23 = Replace(value23, ">", "&gt;")
myxml = myxml + xml_entry(fieldName23, value23)
fieldName24 = "Contains Mustard"
value24 = ActiveWorkbook.Sheets(3).Range("D65")
value24 = Replace(value24, "<", "&lt;")
value24 = Replace(value24, ">", "&gt;")
myxml = myxml + xml_entry(fieldName24, value24)
fieldName25 = "Contains Peanut or Groundnut"
value25 = ActiveWorkbook.Sheets(3).Range("D66")
value25 = Replace(value25, "<", "&lt;")
value25 = Replace(value25, ">", "&gt;")
myxml = myxml + xml_entry(fieldName25, value25)
fieldName26 = "Contains Sesame Seeds"
value26 = ActiveWorkbook.Sheets(3).Range("D68")
value26 = Replace(value26, "<", "&lt;")
value26 = Replace(value26, ">", "&gt;")
myxml = myxml + xml_entry(fieldName26, value26)
fieldName27 = "Contains Soybean"
value27 = ActiveWorkbook.Sheets(3).Range("D69")
value27 = Replace(value27, "<", "&lt;")
value27 = Replace(value27, ">", "&gt;")
myxml = myxml + xml_entry(fieldName27, value27)
fieldName28 = "Contains Lupin"
value28 = ActiveWorkbook.Sheets(3).Range("D62")
value28 = Replace(value28, "<", "&lt;")
value28 = Replace(value28, ">", "&gt;")
myxml = myxml + xml_entry(fieldName28, value28)
fieldName29 = "Contains Sulphur Dioxide"
value29 = ActiveWorkbook.Sheets(3).Range("D67")
value29 = Replace(value29, "<", "&lt;")
value29 = Replace(value29, ">", "&gt;")
myxml = myxml + xml_entry(fieldName29, value29)
fieldName30 = "Contains Tree Nuts"
value30 = ActiveWorkbook.Sheets(3).Range("D70")
value30 = Replace(value30, "<", "&lt;")
value30 = Replace(value30, ">", "&gt;")
myxml = myxml + xml_entry(fieldName30, value30)
fieldName31 = "Contains Palm Oil"
value31 = ActiveWorkbook.Sheets(3).Range("D54")
value31 = Replace(value31, "<", "&lt;")
value31 = Replace(value31, ">", "&gt;")
myxml = myxml + xml_entry(fieldName31, value31)
fieldName32 = "Contains Hydrogenated Vegetable Oil"
value32 = ActiveWorkbook.Sheets(3).Range("D53")
value32 = Replace(value32, "<", "&lt;")
value32 = Replace(value32, ">", "&gt;")
myxml = myxml + xml_entry(fieldName32, value32)
fieldName33 = "Ingredients"
value33 = ActiveWorkbook.Sheets(3).Range("D52")
value33 = Replace(value33, "<", "&lt;")
value33 = Replace(value33, ">", "&gt;")
myxml = myxml + xml_entry(fieldName33, value33)
fieldName34 = "Contains Cereals containing Gluten"
value34 = ActiveWorkbook.Sheets(3).Range("D57")
value34 = Replace(value34, "<", "&lt;")
value34 = Replace(value34, ">", "&gt;")
myxml = myxml + xml_entry(fieldName34, value34)
fieldName35 = "Contains Crustacea"
value35 = ActiveWorkbook.Sheets(3).Range("D58")
value35 = Replace(value35, "<", "&lt;")
value35 = Replace(value35, ">", "&gt;")
myxml = myxml + xml_entry(fieldName35, value35)
fieldName36 = "Contains Celery or Celeriac"
value36 = ActiveWorkbook.Sheets(3).Range("D56")
value36 = Replace(value36, "<", "&lt;")
value36 = Replace(value36, ">", "&gt;")
myxml = myxml + xml_entry(fieldName36, value36)
fieldName37 = "Country of Origin"
value37 = ActiveWorkbook.Sheets(3).Range("D48")
value37 = Replace(value37, "<", "&lt;")
value37 = Replace(value37, ">", "&gt;")
myxml = myxml + xml_entry(fieldName37, value37)
fieldName38 = "Carbohydrate of Which Sugars"
value38 = ActiveWorkbook.Sheets(3).Range("D77")
value38 = Replace(value38, "<", "&lt;")
value38 = Replace(value38, ">", "&gt;")
myxml = myxml + xml_entry(fieldName38, value38)
fieldName39 = "Added Sugar"
value39 = ActiveWorkbook.Sheets(3).Range("D78")
value39 = Replace(value39, "<", "&lt;")
value39 = Replace(value39, ">", "&gt;")
myxml = myxml + xml_entry(fieldName39, value39)
fieldName40 = "Suitable for a Vegetarian Diet"
value40 = ActiveWorkbook.Sheets(3).Range("D74")
value40 = Replace(value40, "<", "&lt;")
value40 = Replace(value40, ">", "&gt;")
myxml = myxml + xml_entry(fieldName40, value40)
fieldName41 = "Suitable For a Vegan Diet"
value41 = ActiveWorkbook.Sheets(3).Range("D73")
value41 = Replace(value41, "<", "&lt;")
value41 = Replace(value41, ">", "&gt;")
myxml = myxml + xml_entry(fieldName41, value41)
fieldName42 = "Simmering Instruction"
value42 = ActiveWorkbook.Sheets(3).Range("D102")
value42 = Replace(value42, "<", "&lt;")
value42 = Replace(value42, ">", "&gt;")
myxml = myxml + xml_entry(fieldName42, value42)
fieldName43 = "Roasting Instructions"
value43 = ActiveWorkbook.Sheets(3).Range("D101")
value43 = Replace(value43, "<", "&lt;")
value43 = Replace(value43, ">", "&gt;")
myxml = myxml + xml_entry(fieldName43, value43)
fieldName44 = "Consumer Unit GTIN"
value44 = ActiveWorkbook.Sheets(3).Range("D16")
value44 = Replace(value44, "<", "&lt;")
value44 = Replace(value44, ">", "&gt;")
myxml = myxml + xml_entry(fieldName44, value44)
fieldName45 = "Consumer Unit GTIN Type"
value45 = ActiveWorkbook.Sheets(3).Range("D17")
value45 = Replace(value45, "<", "&lt;")
value45 = Replace(value45, ">", "&gt;")
myxml = myxml + xml_entry(fieldName45, value45)
fieldName46 = "Minimum Shelf Life on arrival"
value46 = ActiveWorkbook.Sheets(3).Range("D32")
value46 = Replace(value46, "<", "&lt;")
value46 = Replace(value46, ">", "&gt;")
myxml = myxml + xml_entry(fieldName46, value46)
fieldName47 = "Minimum Lifespan from Production"
value47 = ActiveWorkbook.Sheets(3).Range("D31")
value47 = Replace(value47, "<", "&lt;")
value47 = Replace(value47, ">", "&gt;")
myxml = myxml + xml_entry(fieldName47, value47)
fieldName48 = "Minimum Order Quantity Value"
value48 = ActiveWorkbook.Sheets(3).Range("D33")
value48 = Replace(value48, "<", "&lt;")
value48 = Replace(value48, ">", "&gt;")
myxml = myxml + xml_entry(fieldName48, value48)
fieldName49 = "Minimum Order Quantity Cases"
value49 = ActiveWorkbook.Sheets(3).Range("D34")
value49 = Replace(value49, "<", "&lt;")
value49 = Replace(value49, ">", "&gt;")
myxml = myxml + xml_entry(fieldName49, value49)
fieldName50 = "Layers per Pallet"
value50 = ActiveWorkbook.Sheets(3).Range("D37")
value50 = Replace(value50, "<", "&lt;")
value50 = Replace(value50, ">", "&gt;")
myxml = myxml + xml_entry(fieldName50, value50)
fieldName51 = "VAT Rate"
value51 = ActiveWorkbook.Sheets(3).Range("D45")
value51 = Replace(value51, "<", "&lt;")
value51 = Replace(value51, ">", "&gt;")
myxml = myxml + xml_entry(fieldName51, value51)
fieldName52 = "Net Cost per Case"
value52 = ActiveWorkbook.Sheets(3).Range("D44")
value52 = Replace(value52, "<", "&lt;")
value52 = Replace(value52, ">", "&gt;")
myxml = myxml + xml_entry(fieldName52, value52)
fieldName53 = "Invoice Cost per Case"
value53 = ActiveWorkbook.Sheets(3).Range("D43")
value53 = Replace(value53, "<", "&lt;")
value53 = Replace(value53, ">", "&gt;")
myxml = myxml + xml_entry(fieldName53, value53)
fieldName54 = "65% British"
value54 = ActiveWorkbook.Sheets(3).Range("D49")
value54 = Replace(value54, "<", "&lt;")
value54 = Replace(value54, ">", "&gt;")
myxml = myxml + xml_entry(fieldName54, value54)
fieldName55 = "Number of Servings per package"
value55 = ActiveWorkbook.Sheets(3).Range("D50")
value55 = Replace(value55, "<", "&lt;")
value55 = Replace(value55, ">", "&gt;")
myxml = myxml + xml_entry(fieldName55, value55)
fieldName56 = "Portion size"
value56 = ActiveWorkbook.Sheets(3).Range("D51")
value56 = Replace(value56, "<", "&lt;")
value56 = Replace(value56, ">", "&gt;")
myxml = myxml + xml_entry(fieldName56, value56)
fieldName57 = "Global Trade Item Number"
value57 = ActiveWorkbook.Sheets(3).Range("D14")
value57 = Replace(value57, "<", "&lt;")
value57 = Replace(value57, ">", "&gt;")
myxml = myxml + xml_entry(fieldName57, value57)
fieldName58 = "Suppliers Product Code"
value58 = ActiveWorkbook.Sheets(3).Range("D12")
value58 = Replace(value58, "<", "&lt;")
value58 = Replace(value58, ">", "&gt;")
myxml = myxml + xml_entry(fieldName58, value58)
fieldName59 = "Unique Marketing Statement"
value59 = ActiveWorkbook.Sheets(3).Range("D55")
value59 = Replace(value59, "<", "&lt;")
value59 = Replace(value59, ">", "&gt;")
myxml = myxml + xml_entry(fieldName59, value59)
fieldName60 = "Protein"
value60 = ActiveWorkbook.Sheets(3).Range("D83")
value60 = Replace(value60, "<", "&lt;")
value60 = Replace(value60, ">", "&gt;")
myxml = myxml + xml_entry(fieldName60, value60)
fieldName61 = "Fibre"
value61 = ActiveWorkbook.Sheets(3).Range("D79")
value61 = Replace(value61, "<", "&lt;")
value61 = Replace(value61, ">", "&gt;")
myxml = myxml + xml_entry(fieldName61, value61)
fieldName62 = "Kilocalories"
value62 = ActiveWorkbook.Sheets(3).Range("D80")
value62 = Replace(value62, "<", "&lt;")
value62 = Replace(value62, ">", "&gt;")
myxml = myxml + xml_entry(fieldName62, value62)
fieldName63 = "Sodium"
value63 = ActiveWorkbook.Sheets(3).Range("D84")
value63 = Replace(value63, "<", "&lt;")
value63 = Replace(value63, ">", "&gt;")
myxml = myxml + xml_entry(fieldName63, value63)
fieldName64 = "Ready to Eat Instructions"
value64 = ActiveWorkbook.Sheets(3).Range("D94")
value64 = Replace(value64, "<", "&lt;")
value64 = Replace(value64, ">", "&gt;")
myxml = myxml + xml_entry(fieldName64, value64)
fieldName65 = "Approved for Halal"
value65 = ActiveWorkbook.Sheets(3).Range("D71")
value65 = Replace(value65, "<", "&lt;")
value65 = Replace(value65, ">", "&gt;")
myxml = myxml + xml_entry(fieldName65, value65)
fieldName66 = "Approved for Kosher"
value66 = ActiveWorkbook.Sheets(3).Range("D72")
value66 = Replace(value66, "<", "&lt;")
value66 = Replace(value66, ">", "&gt;")
myxml = myxml + xml_entry(fieldName66, value66)
fieldName67 = "Packaging environmental claims"
value67 = ActiveWorkbook.Sheets(3).Range("D90")
value67 = Replace(value67, "<", "&lt;")
value67 = Replace(value67, ">", "&gt;")
myxml = myxml + xml_entry(fieldName67, value67)
fieldName68 = "Carbohydrate"
value68 = ActiveWorkbook.Sheets(3).Range("D76")
value68 = Replace(value68, "<", "&lt;")
value68 = Replace(value68, ">", "&gt;")
myxml = myxml + xml_entry(fieldName68, value68)
fieldName69 = "Product specified Organic"
value69 = ActiveWorkbook.Sheets(3).Range("D87")
value69 = Replace(value69, "<", "&lt;")
value69 = Replace(value69, ">", "&gt;")
myxml = myxml + xml_entry(fieldName69, value69)
fieldName70 = "Sustainability Claims"
value70 = ActiveWorkbook.Sheets(3).Range("D91")
value70 = Replace(value70, "<", "&lt;")
value70 = Replace(value70, ">", "&gt;")
myxml = myxml + xml_entry(fieldName70, value70)
fieldName71 = "Contains GM Protein or DNA"
value71 = ActiveWorkbook.Sheets(3).Range("D61")
value71 = Replace(value71, "<", "&lt;")
value71 = Replace(value71, ">", "&gt;")
myxml = myxml + xml_entry(fieldName71, value71)
fieldName72 = "Fat of which Saturates"
value72 = ActiveWorkbook.Sheets(3).Range("D82")
value72 = Replace(value72, "<", "&lt;")
value72 = Replace(value72, ">", "&gt;")
myxml = myxml + xml_entry(fieldName72, value72)
fieldName73 = "Fat"
value73 = ActiveWorkbook.Sheets(3).Range("D81")
value73 = Replace(value73, "<", "&lt;")
value73 = Replace(value73, ">", "&gt;")
myxml = myxml + xml_entry(fieldName73, value73)
fieldName74 = "Ethical or Fairly traded claims"
value74 = ActiveWorkbook.Sheets(3).Range("D88")
value74 = Replace(value74, "<", "&lt;")
value74 = Replace(value74, ">", "&gt;")
myxml = myxml + xml_entry(fieldName74, value74)
fieldName75 = "Assurance or accreditation schemes"
value75 = ActiveWorkbook.Sheets(3).Range("D89")
value75 = Replace(value75, "<", "&lt;")
value75 = Replace(value75, ">", "&gt;")
myxml = myxml + xml_entry(fieldName75, value75)
fieldName76 = "Name of Person Underwriting"
value76 = ActiveWorkbook.Sheets(3).Range("D108")
value76 = Replace(value76, "<", "&lt;")
value76 = Replace(value76, ">", "&gt;")
myxml = myxml + xml_entry(fieldName76, value76)
fieldName77 = "Position of Person Underwriting"
value77 = ActiveWorkbook.Sheets(3).Range("D109")
value77 = Replace(value77, "<", "&lt;")
value77 = Replace(value77, ">", "&gt;")
myxml = myxml + xml_entry(fieldName77, value77)
fieldName78 = "Email of person Underwriting"
value78 = ActiveWorkbook.Sheets(3).Range("D110")
value78 = Replace(value78, "<", "&lt;")
value78 = Replace(value78, ">", "&gt;")
myxml = myxml + xml_entry(fieldName78, value78)
fieldName79 = "Telephone of person  Underwriting"
value79 = ActiveWorkbook.Sheets(3).Range("D111")
value79 = Replace(value79, "<", "&lt;")
value79 = Replace(value79, ">", "&gt;")
myxml = myxml + xml_entry(fieldName79, value79)
fieldName80 = "Agree to Underwrite"
value80 = ActiveWorkbook.Sheets(3).Range("D107")
value80 = Replace(value80, "<", "&lt;")
value80 = Replace(value80, ">", "&gt;")
myxml = myxml + xml_entry(fieldName80, value80)
fieldName81 = "Packaging Type of TU Traded Unit"
value81 = ActiveWorkbook.Sheets(3).Range("D40")
value81 = Replace(value81, "<", "&lt;")
value81 = Replace(value81, ">", "&gt;")
myxml = myxml + xml_entry(fieldName81, value81)
fieldName82 = "Packaging Type of CU Consumer Unit"
value82 = ActiveWorkbook.Sheets(3).Range("D39")
value82 = Replace(value82, "<", "&lt;")
value82 = Replace(value82, ">", "&gt;")
myxml = myxml + xml_entry(fieldName82, value82)
fieldName83 = "Cases per Pallet"
value83 = ActiveWorkbook.Sheets(3).Range("D38")
value83 = Replace(value83, "<", "&lt;")
value83 = Replace(value83, ">", "&gt;")
myxml = myxml + xml_entry(fieldName83, value83)
fieldName84 = "Cases per Layer"
value84 = ActiveWorkbook.Sheets(3).Range("D36")
value84 = Replace(value84, "<", "&lt;")
value84 = Replace(value84, ">", "&gt;")
myxml = myxml + xml_entry(fieldName84, value84)
fieldName85 = "Delivery Lead Time"
value85 = ActiveWorkbook.Sheets(3).Range("D35")
value85 = Replace(value85, "<", "&lt;")
value85 = Replace(value85, ">", "&gt;")
myxml = myxml + xml_entry(fieldName85, value85)
fieldName86 = "Inner Pack"
value86 = ActiveWorkbook.Sheets(3).Range("D21")
value86 = Replace(value86, "<", "&lt;")
value86 = Replace(value86, ">", "&gt;")
myxml = myxml + xml_entry(fieldName86, value86)
fieldName87 = "Trade Item Splittable"
value87 = ActiveWorkbook.Sheets(3).Range("D22")
value87 = Replace(value87, "<", "&lt;")
value87 = Replace(value87, ">", "&gt;")
myxml = myxml + xml_entry(fieldName87, value87)
fieldName88 = "Sold By Weight"
value88 = ActiveWorkbook.Sheets(3).Range("D27")
value88 = Replace(value88, "<", "&lt;")
value88 = Replace(value88, ">", "&gt;")
myxml = myxml + xml_entry(fieldName88, value88)
fieldName89 = "Suitable for a Coeliac Diet"
value89 = ActiveWorkbook.Sheets(3).Range("D75")
value89 = Replace(value89, "<", "&lt;")
value89 = Replace(value89, ">", "&gt;")
myxml = myxml + xml_entry(fieldName89, value89)
fieldName90 = "Variable Weight Trade Item"
value90 = ActiveWorkbook.Sheets(3).Range("D28")
value90 = Replace(value90, "<", "&lt;")
value90 = Replace(value90, ">", "&gt;")
myxml = myxml + xml_entry(fieldName90, value90)
fieldName91 = "Gross Weight"
value91 = ActiveWorkbook.Sheets(3).Range("D26")
value91 = Replace(value91, "<", "&lt;")
value91 = Replace(value91, ">", "&gt;")
myxml = myxml + xml_entry(fieldName91, value91)
fieldName92 = "Consumer Units in Traded unit"
value92 = ActiveWorkbook.Sheets(3).Range("D20")
value92 = Replace(value92, "<", "&lt;")
value92 = Replace(value92, ">", "&gt;")
myxml = myxml + xml_entry(fieldName92, value92)
fieldName93 = "PK"
value93 = ActiveWorkbook.Sheets(3).Range("F1")
value93 = Replace(value93, "<", "&lt;")
value93 = Replace(value93, ">", "&gt;")
myxml = myxml + xml_entry(fieldName93, value93)
myxml = myxml + "</fields></form></request>"
e = SendXML(myxml, "https://3663.clavistechnology.com/process/FS%203663%20MNLF%20Onlist%20Food%20v2/form/3663%20Onlist%20Food%20v2/data", isCellValidation, cellId)
End Sub
Sub ValidateCell(ByVal cellId As Variant)
Validate True, cellId
End Sub
Function xml_entry(ByVal fld As String, ByVal value As String)
xml_entry = "<field><name>" + fld + "</name><value>" + value + "</value></field>"
End Function
Function SendXML(ByVal myxml As String, ByVal server As String, ByVal isCellValidation As Boolean, ByVal cellId As Variant)
Dim myHTTP As MSXML2.XMLHTTP30
Dim xml As DOMDocument
Dim errorNodes, CorrectionNodes, hintNodes As IXMLDOMNodeList
Dim errorForm As VBComponent
On Error GoTo Handler
Set myHTTP = CreateObject("msxml2.xmlhttp")
myHTTP.Open "POST", server, "False"
myHTTP.setRequestHeader "Content-type", "application/xml"
myHTTP.send myxml
myxml = myHTTP.responseText
Select Case myHTTP.Status
Case 200
valid_err = ""
Case 404
MsgBox "The system was not able to get the response from the server. The requested address was not found."
valid_err = "Failed"
Case 401
MsgBox "The Clavis Username/Password provided is invalid - please retry" & vbNewLine & _
"(NOTE: Both Username & Password are case-sensitive, so must be input EXACTLY as provided)" & vbNewLine & vbNewLine & _
"If you still cannot log in, please email datacollection@bidfood.co.uk or phone" & vbNewLine & _
"(01494) 555968 or (01494) 555974"
valid_err = "Failed"
Case 500
MsgBox "An error occured on the server while processing the validation message."
valid_err = "Failed"
Case 400
MsgBox "The request sent to the server was incorrect."
valid_err = "Failed"
Case Is <> 200
valid_err = "Failed"
End Select
Set xml = New DOMDocument
xml.LoadXML (myxml)
Set errorNodes = xml.SelectNodes("/response/failing_tests/test")
Set CorrectionNodes = xml.SelectNodes("/response/corrections/correction")
Set hintNodes = xml.SelectNodes("/response/hints/hint")
SetErrorMessage errorNodes, hintNodes, isCellValidation, cellId
correctionCells = GetCorrectionCells(CorrectionNodes, False)
mandatoryCorrectionCells = GetCorrectionCells(CorrectionNodes, True)
If (UBound(mandatoryCorrectionCells, 1) > -1 And isCellValidation = True) Then
If ((UBound(mandatoryCorrectionCells) = 0 And mandatoryCorrectionCells(0, 0) <> "") Or UBound(mandatoryCorrectionCells) > 0) Then
ApplyMandatoryCorrections mandatoryCorrectionCells
End If
End If
MakeUserForm correctionCells, isCellValidation
SendXML = myxml
Handler:
Application.StatusBar = False
If Err.Description <> "" Then
If (myHTTP.Status = 12007) Or (myHTTP.Status = 12029) Then
Dim ar() As String
ar = Split(server, "/")
MsgBox "Cannot connect to server " & ar(2) & vbNewLine & vbNewLine & _
"Please test you have a working network and Internet connection" & vbNewLine & _
"Contact your IT dept if necessary"
valid_err = "Failed"
Else
MsgBox Err.Description
valid_err = "Failed"
End If
End If
End Function
Sub MakeUserForm(ByVal nodes As Variant, ByVal isCellValidation As Boolean)
Dim errorForm As VBComponent
Dim btnErrOk As MSForms.CommandButton
Dim tabCtrl As MSForms.MultiPage
Dim tbx As MSForms.TextBox
Dim lbox As MSForms.ListBox
Dim N, X As Integer
For N = 1 To ActiveWorkbook.VBProject.VBComponents.Count
If ActiveWorkbook.VBProject.VBComponents(N).Name = "ClavisFrm" Then
ShowForm nodes, isCellValidation
Exit Sub
End If
Next N
Set errorForm = ActiveWorkbook.VBProject.VBComponents.Add(vbext_ct_MSForm)
With errorForm
.Properties("Height") = 170
.Properties("Width") = 285
On Error GoTo Handler
.Name = "ClavisFrm"
.Properties("Caption") = "Clavis Assistant"
End With
Set tabCtrl = errorForm.Designer.Controls.Add("Forms.MultiPage.1")
tabCtrl.Pages.Clear
With tabCtrl
.Pages.Add "Information"
.Pages.Add "Suggestions"
.Width = 281
.Height = 125
End With
Set lbox = tabCtrl.Pages(1).Controls.Add("Forms.ListBox.1")
With lbox
.Height = 100
.Top = 5
.Left = 6
.Width = 270
.SpecialEffect = fmSpecialEffectFlat
.ListStyle = fmListStylePlain
.BackColor = &H80000004
End With
Set tbx = tabCtrl.Pages(0).Controls.Add("Forms.TextBox.1")
With tbx
.BorderStyle = fmBorderStyleNone
.BackStyle = fmBackStyleTransparent
.ScrollBars = fmScrollBarsVertical
.MultiLine = True
.WordWrap = True
.Height = 100
.Width = 270
.Top = 5
.Font = "Arial"
.SpecialEffect = fmSpecialEffectFlat
.Locked = True
End With
Set btnErrOk = errorForm.Designer.Controls.Add("Forms.CommandButton.1")
With btnErrOk
.Caption = "OK"
.Height = 18
.Width = 44
.Left = 126
.Top = 126
End With
With errorForm.CodeModule
X = .CountOfLines
.InsertLines X + 1, "Sub CommandButton1_Click()"
.InsertLines X + 2, "Unload Me"
.InsertLines X + 3, "End Sub"
.InsertLines X + 4, "Sub ListBox1_DblClick(ByVal Cancel As MSForms.ReturnBoolean)"
.InsertLines X + 5, "Dim fldName As String"
.InsertLines X + 6, "Dim startIndex As Integer"
.InsertLines X + 7, "Dim endIndex As Integer"
.InsertLines X + 8, "Dim selectedValue As String"
.InsertLines X + 9, "Dim correction As String"
.InsertLines X + 10, "selectedValue = Me.ListBox1.value"
.InsertLines X + 11, "startIndex = InStr(1, selectedValue, "":"")"
.InsertLines X + 12, "endIndex = Len(selectedValue)"
.InsertLines X + 13, "For i = startIndex + 2 To endIndex"
.InsertLines X + 14, "correction = correction & Mid(selectedValue, i, 1)"
.InsertLines X + 15, "Next i"
.InsertLines X + 16, "For j = LBound(ClavisFormBuilder.correctionCells, 1) To UBound(ClavisFormBuilder.correctionCells, 1)"
.InsertLines X + 17, "If (ClavisFormBuilder.correctionCells(j, 1) = correction) Then"
.InsertLines X + 18, "fldName = ClavisFormBuilder.correctionCells(j, 0)"
.InsertLines X + 19, "Exit For"
.InsertLines X + 20, "End If"
.InsertLines X + 21, "Next j"
.InsertLines X + 22, "For i = LBound(ClavisFormBuilder.correctionNodeValues, 1) To UBound(ClavisFormBuilder.correctionNodeValues, 1)"
.InsertLines X + 23, "If (ClavisFormBuilder.correctionNodeValues(i, 0) = fldName) Then"
.InsertLines X + 24, "ClavisFormBuilder.IsChanging = True"
.InsertLines X + 25, "ActiveWorkbook.Sheets(CInt(ClavisFormBuilder.correctionNodeValues(i, 2))).Range(ClavisFormBuilder.correctionNodeValues(i, 1)) = correction"
.InsertLines X + 26, "ClavisFormBuilder.IsChanging = False"
.InsertLines X + 27, "Me.ListBox1.RemoveItem (Me.ListBox1.ListIndex)"
.InsertLines X + 28, "End If"
.InsertLines X + 29, "Next i"
.InsertLines X + 30, "If (Me.ListBox1.ListCount = 0) Then"
.InsertLines X + 31, "Unload Me"
.InsertLines X + 32, "End If"
.InsertLines X + 33, "End Sub"
End With
ShowForm nodes, isCellValidation
Handler:
Application.StatusBar = False
If Err.Description <> "" Then
MsgBox Err.Description
End If
End Sub
Sub ShowForm(ByVal nodes As Variant, ByVal isCellValidation As Boolean)
Dim hasInfoPage, hasSuggestionPage As Boolean
Dim message As String
message = Sheet7.Cells(2, 2)

Application.StatusBar = False
If (isCellValidation) Then
ClavisFrm.TextBox1 = ClavisFormBuilder.errors & Chr(10) & ClavisFormBuilder.hints
PopulateCorrectionList nodes
Else
ClavisFrm.TextBox1 = ClavisFormBuilder.errors & Chr(10) & ClavisFormBuilder.hints
End If
If (ClavisFrm.MultiPage1.Pages(0).Visible) Then
If (ClavisFormBuilder.errors = "" And ClavisFormBuilder.hints = "") Or message = "NO" Then
ClavisFrm.MultiPage1.Pages(0).Visible = False
hasInfoPage = False
Else
hasInfoPage = True
End If
Else
hasInfoPage = False
End If
If (ClavisFrm.MultiPage1.Pages(1).Visible) Then
If (ClavisFrm.ListBox1.ListCount > 0) Then
hasSuggestionPage = True
Else
hasSuggestionPage = False
End If
Else
hasSuggestionPage = False
End If
ClavisFrm.MultiPage1.Pages(0).Visible = hasInfoPage
ClavisFrm.MultiPage1.Pages(1).Visible = hasSuggestionPage
If (hasSuggestionPage Or hasInfoPage) Then
If (hasInfoPage) Then
ClavisFrm.MultiPage1.value = 0
End If
If (hasInfoPage = False And hasSuggestionPage) Then
ClavisFrm.MultiPage1.value = 1
End If
ClavisFrm.Show
End If
End Sub
Sub SetErrorMessage(ByVal errorNodes As IXMLDOMNodeList, ByVal hintNodes As IXMLDOMNodeList, ByVal isCellValidation As Boolean, ByVal cellId As Variant)
On Error Resume Next
ClavisFrm.MultiPage1.Pages(0).Visible = True
If (isCellValidation = False And errorNodes.Length = 0) Then
ClavisFormBuilder.errors = "No Errors"
Exit Sub
ElseIf (isCellValidation = True And errorNodes.Length = 0 And hintNodes.Length = 0) Then
ClavisFormBuilder.errors = ""
ClavisFormBuilder.hints = ""
ClavisFrm.MultiPage1.Pages(0).Visible = False
Exit Sub
End If
If (isCellValidation = False) Then
SetErrorMessageForAllCells errorNodes
Else
SetErrorMessageForCellsUpdate errorNodes, cellId
End If
Call SetHintMessage(hintNodes)
ClavisFrm.TextBox1 = ClavisFormBuilder.errors & Chr(10) & ClavisFormBuilder.hints
End Sub
Sub SetHintMessage(ByVal nodes As IXMLDOMNodeList)
Dim Node As IXMLDOMNode
Dim childNode As IXMLDOMNode
Dim hint As String
hint = ""
For Each Node In nodes
hint = hint & Node.Text & Chr(10) & Chr(10)
Next
ClavisFormBuilder.hints = hint
End Sub
Sub SetErrorMessageForCellsUpdate(ByVal nodes As IXMLDOMNodeList, ByVal cellId As Variant)
Dim Node As IXMLDOMNode
Dim childNode As IXMLDOMNode
Dim fld As IXMLDOMNode
Dim singleMsg As String
Dim errors() As String
Dim i As Integer
signleMsg = ""
i = 0
ReDim errors((nodes.Length - 1) ^ 2, 1)
For Each Node In nodes
For Each childNode In Node.ChildNodes
If (childNode.nodeName = "message") Then
singleMsg = singleMsg & childNode.Text & Chr(10)
End If
If (childNode.nodeName = "fields") Then
For Each fld In childNode.ChildNodes
If (TypeName(cellId) = "String()") Then
For k = LBound(cellId) To UBound(cellId)
If (fld.FirstChild.Text = cellId(k)) Then
errors(i, 0) = fld.FirstChild.Text
errors(i, 1) = singleMsg
i = i + 1
End If
Next k
Else
If (fld.FirstChild.Text = cellId) Then
errors(i, 0) = fld.FirstChild.Text
errors(i, 1) = singleMsg
i = i + 1
End If
End If
Next
singleMsg = ""
End If
Next
Next
For j = LBound(errors, 1) To UBound(errors, 1)
If (errors(j, 0) <> "") Then
singleMsg = singleMsg & errors(j, 1) & Chr(10)
End If
Next j
ClavisFormBuilder.errors = singleMsg
End Sub
Sub SetErrorMessageForAllCells(ByVal nodes As IXMLDOMNodeList)
Dim Node As IXMLDOMNode
Dim childNode As IXMLDOMNode
Dim msg As String
msg = ""

For Each Node In nodes
For Each childNode In Node.ChildNodes
If (childNode.nodeName = "message") Then
msg = msg & childNode.Text & Chr(10) & Chr(10)
err_count = err_count + 1
'err_count_valid = True
ElseIf (childNode.nodeName = "fields") Then
atts = childNode.ChildNodes.Length                  'number of BEs in test
be_name = ""
cell = ""
If atts = 1 Then                                                         'single BE test
form_name = childNode.LastChild.ChildNodes.Item(0).nodeTypedValue
For i = 0 To 93                                 'loop through all mapped attributes
If correctionNodeValues(i, 0) = form_name Then
cell = correctionNodeValues(i, 1)     'returns the cell mapping
'highlight mapped cell in error
Sheet3.Range(cell).Interior.Color = vbRed
Exit For                              'exit loop
End If
Next i
Else                                                'multiple BE test
'first attribute
form_name = childNode.ChildNodes.Item(0).ChildNodes.Item(0).nodeTypedValue
For i = 0 To 93                                 'loop through all mapped attributes
If correctionNodeValues(i, 0) = form_name Then
cell = correctionNodeValues(i, 1)     'returns the cell mapping
'highlight mapped cell in error
Sheet3.Range(cell).Interior.Color = vbRed
Exit For                              'exit loop
End If
Next i
For i = 1 To atts - 1                           'append additional attributes
form_name = childNode.ChildNodes.Item(i).ChildNodes.Item(0).nodeTypedValue
For j = 0 To 93                             'loop through all mapped attributes
If correctionNodeValues(j, 0) = form_name Then
cell = correctionNodeValues(j, 1) 'returns the cell mapping
'highlight mapped cell in error
Sheet3.Range(cell).Interior.Color = vbRed
Exit For                          'exit loop
End If
Next j
Next i
End If
End If
Next
Next

ClavisFormBuilder.errors = msg
End Sub
Function GetCorrectionCells(ByVal nodes As IXMLDOMNodeList, ByVal mandatory As Boolean) As String()
Dim Node As IXMLDOMNode
Dim nameNode As IXMLDOMNode
Dim corrs() As String
Dim childNode As IXMLDOMNode
Dim counter As Integer
Dim appendElement As Boolean
counter = 0
If nodes.Length = 0 Then
ReDim corrs(0, 0)
GetCorrectionCells = corrs()
Exit Function
Else
ReDim corrs(nodes.Length - 1, 1)
End If
For Each Node In nodes
For Each childNode In Node.ChildNodes
If (childNode.nodeName = "mandatory") Then
If (CBool(childNode.Text) = mandatory) Then
appendElement = True
Else
appendElement = False
End If
End If
If (childNode.nodeName = "field" And appendElement = True) Then
corrs(counter, 0) = childNode.Text
End If
If (childNode.nodeName = "new_value" And appendElement = True) Then
corrs(counter, 1) = childNode.Text
appendElement = False
counter = counter + 1
End If
Next
Next
GetCorrectionCells = corrs()
End Function
Sub PopulateCorrectionList(ByVal nodes As Variant)
On Error Resume Next
Dim msg, sTemp As String
Dim iWidth As Double
Dim showScrollBar As Boolean
msg = ""
If (UBound(nodes) = -1 Or (UBound(nodes) = 0 And nodes(0, 0) = "")) Then
ClavisFrm.MultiPage1.Pages(1).Visible = False
Exit Sub
End If
ClavisFrm.MultiPage1.Pages(1).Visible = True
For i = 0 To UBound(nodes)
If (nodes(i, 0) <> "") Then
msg = "Insert into " & nodes(i, 0) & " : " & nodes(i, 1)
ClavisFrm.ListBox1.AddItem (msg)
msg = ""
End If
Next i
ClavisFrm.ListBox1.ColumnWidths = (ClavisFrm.ListBox1.Width * 72) / 96
iWidth = (ClavisFrm.ListBox1.Width * 16.7) / 72
For iIndex = 0 To ClavisFrm.ListBox1.ListCount - 1
sTemp = ClavisFrm.ListBox1.List(iIndex)
If Len(sTemp) > iWidth Then
iWidth = Len(sTemp)
showScrollBar = True
End If
Next
If (showScrollBar = True) Then
ClavisFrm.ListBox1.ColumnWidths = (iWidth / 16.7) * 72
End If
End Sub
Sub ApplyMandatoryCorrections(ByVal mandatoryCorrectionCells As Variant)
For i = LBound(correctionNodeValues, 1) To UBound(correctionNodeValues, 1)
For j = LBound(mandatoryCorrectionCells, 1) To UBound(mandatoryCorrectionCells, 1)
If (correctionNodeValues(i, 0) = mandatoryCorrectionCells(j, 0)) Then
If (ActiveWorkbook.Sheets(CInt(correctionNodeValues(i, 2))).Range(correctionNodeValues(i, 1)) <> mandatoryCorrectionCells(j, 1)) Then
IsChanging = True
ActiveWorkbook.Sheets(CInt(correctionNodeValues(i, 2))).Range(correctionNodeValues(i, 1)) = mandatoryCorrectionCells(j, 1)
IsChanging = False
End If
End If
Next j
Next i
End Sub
Function SecondsElapsedWithinRange() As Boolean
Dim currentTime As Variant
Dim result As Long
If (BenchmarkTime = 0) Then
BenchmarkTime = DateTime.Now
End If
currentTime = DateTime.Now
result = DateTime.DateDiff("s", BenchmarkTime, currentTime)
BenchmarkTime = currentTime
SecondsElapsedWithinRange = (result >= SecondsMarked)
End Function
Function GetValidationServer(ByVal server As String, ByVal formUrl As String, ByVal processCell As String, ByVal processCellWs As String) As String
Dim url As String
url = ActiveWorkbook.Sheets(processCellWs).Range(processCell)
GetValidationServer = server & url & formUrl
End Function

Attribute VB_Name = "ClavisFrm"
Attribute VB_Base = "0{04B6A4E4-6E53-454E-85F1-13EBEA639739}{E9177E50-48B9-4DC3-BF84-23B361E92659}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Sub CommandButton1_Click()
Unload Me
End Sub
Sub ListBox1_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
Dim fldName As String
Dim startIndex As Integer
Dim endIndex As Integer
Dim selectedValue As String
Dim correction As String
selectedValue = Me.ListBox1.value
startIndex = InStr(1, selectedValue, ":")
endIndex = Len(selectedValue)
For i = startIndex + 2 To endIndex
correction = correction & Mid(selectedValue, i, 1)
Next i
For j = LBound(ClavisFormBuilder.correctionCells, 1) To UBound(ClavisFormBuilder.correctionCells, 1)
If (ClavisFormBuilder.correctionCells(j, 1) = correction) Then
fldName = ClavisFormBuilder.correctionCells(j, 0)
Exit For
End If
Next j
For i = LBound(ClavisFormBuilder.correctionNodeValues, 1) To UBound(ClavisFormBuilder.correctionNodeValues, 1)
If (ClavisFormBuilder.correctionNodeValues(i, 0) = fldName) Then
ClavisFormBuilder.IsChanging = True
ActiveWorkbook.Sheets(CInt(ClavisFormBuilder.correctionNodeValues(i, 2))).Range(ClavisFormBuilder.correctionNodeValues(i, 1)) = correction
ClavisFormBuilder.IsChanging = False
Me.ListBox1.RemoveItem (Me.ListBox1.ListIndex)
End If
Next i
If (Me.ListBox1.ListCount = 0) Then
Unload Me
End If
End Sub
Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet11"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

Private Sub Worksheet_Change(ByVal Target As Range)
Dim address As String
If (ClavisFormBuilder.IsChanging = True) Or (Sheet7.Cells(1, 2) = "OFF") Then
Exit Sub
End If
address = Target.address
address = Replace(address, "$", "")
ReDim correctionNodeValues(93, 2)
correctionNodeValues(0, 0) = "Supplier"
correctionNodeValues(0, 1) = "D5"
correctionNodeValues(0, 2) = "3"
correctionNodeValues(1, 0) = "Name of person completing form"
correctionNodeValues(1, 1) = "D6"
correctionNodeValues(1, 2) = "3"
correctionNodeValues(2, 0) = "Email Address of person completing form"
correctionNodeValues(2, 1) = "D7"
correctionNodeValues(2, 2) = "3"
correctionNodeValues(3, 0) = "Telephone of person completing form"
correctionNodeValues(3, 1) = "D8"
correctionNodeValues(3, 2) = "3"
correctionNodeValues(4, 0) = "Product Description"
correctionNodeValues(4, 1) = "D11"
correctionNodeValues(4, 2) = "3"
correctionNodeValues(5, 0) = "Brand Name"
correctionNodeValues(5, 1) = "D13"
correctionNodeValues(5, 2) = "3"
correctionNodeValues(6, 0) = "GTIN Type"
correctionNodeValues(6, 1) = "D15"
correctionNodeValues(6, 2) = "3"
correctionNodeValues(7, 0) = "Temperature Band"
correctionNodeValues(7, 1) = "D18"
correctionNodeValues(7, 2) = "3"
correctionNodeValues(8, 0) = "Pack Size Weight"
correctionNodeValues(8, 1) = "D19"
correctionNodeValues(8, 2) = "3"
correctionNodeValues(9, 0) = "Width"
correctionNodeValues(9, 1) = "D23"
correctionNodeValues(9, 2) = "3"
correctionNodeValues(10, 0) = "Depth"
correctionNodeValues(10, 1) = "D24"
correctionNodeValues(10, 2) = "3"
correctionNodeValues(11, 0) = "Height"
correctionNodeValues(11, 1) = "D25"
correctionNodeValues(11, 2) = "3"
correctionNodeValues(12, 0) = "Stir Frying Instructions"
correctionNodeValues(12, 1) = "D104"
correctionNodeValues(12, 2) = "3"
correctionNodeValues(13, 0) = "Steaming Instructions"
correctionNodeValues(13, 1) = "D103"
correctionNodeValues(13, 2) = "3"
correctionNodeValues(14, 0) = "Pan Frying Instructions"
correctionNodeValues(14, 1) = "D100"
correctionNodeValues(14, 2) = "3"
correctionNodeValues(15, 0) = "Microwaving Instructions"
correctionNodeValues(15, 1) = "D99"
correctionNodeValues(15, 2) = "3"
correctionNodeValues(16, 0) = "Grilling Instructions"
correctionNodeValues(16, 1) = "D98"
correctionNodeValues(16, 2) = "3"
correctionNodeValues(17, 0) = "Deep Frying Instructions"
correctionNodeValues(17, 1) = "D97"
correctionNodeValues(17, 2) = "3"
correctionNodeValues(18, 0) = "Boiling Instructions"
correctionNodeValues(18, 1) = "D96"
correctionNodeValues(18, 2) = "3"
correctionNodeValues(19, 0) = "Baking Instructions"
correctionNodeValues(19, 1) = "D95"
correctionNodeValues(19, 2) = "3"
correctionNodeValues(20, 0) = "Contains Egg"
correctionNodeValues(20, 1) = "D59"
correctionNodeValues(20, 2) = "3"
correctionNodeValues(21, 0) = "Contains Fish"
correctionNodeValues(21, 1) = "D60"
correctionNodeValues(21, 2) = "3"
correctionNodeValues(22, 0) = "Contains Milk"
correctionNodeValues(22, 1) = "D63"
correctionNodeValues(22, 2) = "3"
correctionNodeValues(23, 0) = "Contains Molluscs"
correctionNodeValues(23, 1) = "D64"
correctionNodeValues(23, 2) = "3"
correctionNodeValues(24, 0) = "Contains Mustard"
correctionNodeValues(24, 1) = "D65"
correctionNodeValues(24, 2) = "3"
correctionNodeValues(25, 0) = "Contains Peanut or Groundnut"
correctionNodeValues(25, 1) = "D66"
correctionNodeValues(25, 2) = "3"
correctionNodeValues(26, 0) = "Contains Sesame Seeds"
correctionNodeValues(26, 1) = "D68"
correctionNodeValues(26, 2) = "3"
correctionNodeValues(27, 0) = "Contains Soybean"
correctionNodeValues(27, 1) = "D69"
correctionNodeValues(27, 2) = "3"
correctionNodeValues(28, 0) = "Contains Lupin"
correctionNodeValues(28, 1) = "D62"
correctionNodeValues(28, 2) = "3"
correctionNodeValues(29, 0) = "Contains Sulphur Dioxide"
correctionNodeValues(29, 1) = "D67"
correctionNodeValues(29, 2) = "3"
correctionNodeValues(30, 0) = "Contains Tree Nuts"
correctionNodeValues(30, 1) = "D70"
correctionNodeValues(30, 2) = "3"
correctionNodeValues(31, 0) = "Contains Palm Oil"
correctionNodeValues(31, 1) = "D54"
correctionNodeValues(31, 2) = "3"
correctionNodeValues(32, 0) = "Contains Hydrogenated Vegetable Oil"
correctionNodeValues(32, 1) = "D53"
correctionNodeValues(32, 2) = "3"
correctionNodeValues(33, 0) = "Ingredients"
correctionNodeValues(33, 1) = "D52"
correctionNodeValues(33, 2) = "3"
correctionNodeValues(34, 0) = "Contains Cereals containing Gluten"
correctionNodeValues(34, 1) = "D57"
correctionNodeValues(34, 2) = "3"
correctionNodeValues(35, 0) = "Contains Crustacea"
correctionNodeValues(35, 1) = "D58"
correctionNodeValues(35, 2) = "3"
correctionNodeValues(36, 0) = "Contains Celery or Celeriac"
correctionNodeValues(36, 1) = "D56"
correctionNodeValues(36, 2) = "3"
correctionNodeValues(37, 0) = "Country of Origin"
correctionNodeValues(37, 1) = "D48"
correctionNodeValues(37, 2) = "3"
correctionNodeValues(38, 0) = "Carbohydrate of Which Sugars"
correctionNodeValues(38, 1) = "D77"
correctionNodeValues(38, 2) = "3"
correctionNodeValues(39, 0) = "Added Sugar"
correctionNodeValues(39, 1) = "D78"
correctionNodeValues(39, 2) = "3"
correctionNodeValues(40, 0) = "Suitable for a Vegetarian Diet"
correctionNodeValues(40, 1) = "D74"
correctionNodeValues(40, 2) = "3"
correctionNodeValues(41, 0) = "Suitable For a Vegan Diet"
correctionNodeValues(41, 1) = "D73"
correctionNodeValues(41, 2) = "3"
correctionNodeValues(42, 0) = "Simmering Instruction"
correctionNodeValues(42, 1) = "D102"
correctionNodeValues(42, 2) = "3"
correctionNodeValues(43, 0) = "Roasting Instructions"
correctionNodeValues(43, 1) = "D101"
correctionNodeValues(43, 2) = "3"
correctionNodeValues(44, 0) = "Consumer Unit GTIN"
correctionNodeValues(44, 1) = "D16"
correctionNodeValues(44, 2) = "3"
correctionNodeValues(45, 0) = "Consumer Unit GTIN Type"
correctionNodeValues(45, 1) = "D17"
correctionNodeValues(45, 2) = "3"
correctionNodeValues(46, 0) = "Minimum Shelf Life on arrival"
correctionNodeValues(46, 1) = "D32"
correctionNodeValues(46, 2) = "3"
correctionNodeValues(47, 0) = "Minimum Lifespan from Production"
correctionNodeValues(47, 1) = "D31"
correctionNodeValues(47, 2) = "3"
correctionNodeValues(48, 0) = "Minimum Order Quantity Value"
correctionNodeValues(48, 1) = "D33"
correctionNodeValues(48, 2) = "3"
correctionNodeValues(49, 0) = "Minimum Order Quantity Cases"
correctionNodeValues(49, 1) = "D34"
correctionNodeValues(49, 2) = "3"
correctionNodeValues(50, 0) = "Layers per Pallet"
correctionNodeValues(50, 1) = "D37"
correctionNodeValues(50, 2) = "3"
correctionNodeValues(51, 0) = "VAT Rate"
correctionNodeValues(51, 1) = "D45"
correctionNodeValues(51, 2) = "3"
correctionNodeValues(52, 0) = "Net Cost per Case"
correctionNodeValues(52, 1) = "D44"
correctionNodeValues(52, 2) = "3"
correctionNodeValues(53, 0) = "Invoice Cost per Case"
correctionNodeValues(53, 1) = "D43"
correctionNodeValues(53, 2) = "3"
correctionNodeValues(54, 0) = "65% British"
correctionNodeValues(54, 1) = "D49"
correctionNodeValues(54, 2) = "3"
correctionNodeValues(55, 0) = "Number of Servings per package"
correctionNodeValues(55, 1) = "D50"
correctionNodeValues(55, 2) = "3"
correctionNodeValues(56, 0) = "Portion size"
correctionNodeValues(56, 1) = "D51"
correctionNodeValues(56, 2) = "3"
correctionNodeValues(57, 0) = "Global Trade Item Number"
correctionNodeValues(57, 1) = "D14"
correctionNodeValues(57, 2) = "3"
correctionNodeValues(58, 0) = "Suppliers Product Code"
correctionNodeValues(58, 1) = "D12"
correctionNodeValues(58, 2) = "3"
correctionNodeValues(59, 0) = "Unique Marketing Statement"
correctionNodeValues(59, 1) = "D55"
correctionNodeValues(59, 2) = "3"
correctionNodeValues(60, 0) = "Protein"
correctionNodeValues(60, 1) = "D83"
correctionNodeValues(60, 2) = "3"
correctionNodeValues(61, 0) = "Fibre"
correctionNodeValues(61, 1) = "D79"
correctionNodeValues(61, 2) = "3"
correctionNodeValues(62, 0) = "Kilocalories"
correctionNodeValues(62, 1) = "D80"
correctionNodeValues(62, 2) = "3"
correctionNodeValues(63, 0) = "Sodium"
correctionNodeValues(63, 1) = "D84"
correctionNodeValues(63, 2) = "3"
correctionNodeValues(64, 0) = "Ready to Eat Instructions"
correctionNodeValues(64, 1) = "D94"
correctionNodeValues(64, 2) = "3"
correctionNodeValues(65, 0) = "Approved for Halal"
correctionNodeValues(65, 1) = "D71"
correctionNodeValues(65, 2) = "3"
correctionNodeValues(66, 0) = "Approved for Kosher"
correctionNodeValues(66, 1) = "D72"
correctionNodeValues(66, 2) = "3"
correctionNodeValues(67, 0) = "Packaging environmental claims"
correctionNodeValues(67, 1) = "D90"
correctionNodeValues(67, 2) = "3"
correctionNodeValues(68, 0) = "Carbohydrate"
correctionNodeValues(68, 1) = "D76"
correctionNodeValues(68, 2) = "3"
correctionNodeValues(69, 0) = "Product specified Organic"
correctionNodeValues(69, 1) = "D87"
correctionNodeValues(69, 2) = "3"
correctionNodeValues(70, 0) = "Sustainability Claims"
correctionNodeValues(70, 1) = "D91"
correctionNodeValues(70, 2) = "3"
correctionNodeValues(71, 0) = "Contains GM Protein or DNA"
correctionNodeValues(71, 1) = "D61"
correctionNodeValues(71, 2) = "3"
correctionNodeValues(72, 0) = "Fat of which Saturates"
correctionNodeValues(72, 1) = "D82"
correctionNodeValues(72, 2) = "3"
correctionNodeValues(73, 0) = "Fat"
correctionNodeValues(73, 1) = "D81"
correctionNodeValues(73, 2) = "3"
correctionNodeValues(74, 0) = "Ethical or Fairly traded claims"
correctionNodeValues(74, 1) = "D88"
correctionNodeValues(74, 2) = "3"
correctionNodeValues(75, 0) = "Assurance or accreditation schemes"
correctionNodeValues(75, 1) = "D89"
correctionNodeValues(75, 2) = "3"
correctionNodeValues(76, 0) = "Name of Person Underwriting"
correctionNodeValues(76, 1) = "D108"
correctionNodeValues(76, 2) = "3"
correctionNodeValues(77, 0) = "Position of Person Underwriting"
correctionNodeValues(77, 1) = "D109"
correctionNodeValues(77, 2) = "3"
correctionNodeValues(78, 0) = "Email of person Underwriting"
correctionNodeValues(78, 1) = "D110"
correctionNodeValues(78, 2) = "3"
correctionNodeValues(79, 0) = "Telephone of person  Underwriting"
correctionNodeValues(79, 1) = "D111"
correctionNodeValues(79, 2) = "3"
correctionNodeValues(80, 0) = "Agree to Underwrite"
correctionNodeValues(80, 1) = "D107"
correctionNodeValues(80, 2) = "3"
correctionNodeValues(81, 0) = "Packaging Type of TU Traded Unit"
correctionNodeValues(81, 1) = "D40"
correctionNodeValues(81, 2) = "3"
correctionNodeValues(82, 0) = "Packaging Type of CU Consumer Unit"
correctionNodeValues(82, 1) = "D39"
correctionNodeValues(82, 2) = "3"
correctionNodeValues(83, 0) = "Cases per Pallet"
correctionNodeValues(83, 1) = "D38"
correctionNodeValues(83, 2) = "3"
correctionNodeValues(84, 0) = "Cases per Layer"
correctionNodeValues(84, 1) = "D36"
correctionNodeValues(84, 2) = "3"
correctionNodeValues(85, 0) = "Delivery Lead Time"
correctionNodeValues(85, 1) = "D35"
correctionNodeValues(85, 2) = "3"
correctionNodeValues(86, 0) = "Inner Pack"
correctionNodeValues(86, 1) = "D21"
correctionNodeValues(86, 2) = "3"
correctionNodeValues(87, 0) = "Trade Item Splittable"
correctionNodeValues(87, 1) = "D22"
correctionNodeValues(87, 2) = "3"
correctionNodeValues(88, 0) = "Sold By Weight"
correctionNodeValues(88, 1) = "D27"
correctionNodeValues(88, 2) = "3"
correctionNodeValues(89, 0) = "Suitable for a Coeliac Diet"
correctionNodeValues(89, 1) = "D75"
correctionNodeValues(89, 2) = "3"
correctionNodeValues(90, 0) = "Variable Weight Trade Item"
correctionNodeValues(90, 1) = "D28"
correctionNodeValues(90, 2) = "3"
correctionNodeValues(91, 0) = "Gross Weight"
correctionNodeValues(91, 1) = "D26"
correctionNodeValues(91, 2) = "3"
correctionNodeValues(92, 0) = "Consumer Units in Traded unit"
correctionNodeValues(92, 1) = "D20"
correctionNodeValues(92, 2) = "3"
correctionNodeValues(93, 0) = "PK"
correctionNodeValues(93, 1) = "F1"
correctionNodeValues(93, 2) = "3"
If (IsValidateOnTimeElapsed = False Or (IsValidateOnTimeElapsed And SecondsElapsedWithinRange)) Then
For i = LBound(ClavisFormBuilder.correctionNodeValues, 1) To UBound(ClavisFormBuilder.correctionNodeValues, 1)
If (ClavisFormBuilder.correctionNodeValues(i, 1) = address And CInt(ClavisFormBuilder.correctionNodeValues(i, 2)) = ActiveSheet.Index) Then
Application.StatusBar = "Validating cell " & CStr(correctionNodeValues(i, 1))
Call ClavisFormBuilder.ValidateCell(ClavisFormBuilder.correctionNodeValues(i, 0))
End If
Next i
End If



End Sub
Attribute VB_Name = "Sheet4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet5"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet6"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet7"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet8"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

Attribute VB_Name = "Sheet9"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "cmdContinue, 1, 0, MSForms, CommandButton"
Attribute VB_Control = "cmd3663Review, 3, 2, MSForms, CommandButton"
Private Sub cmd3663Review_Click()

pass = InputBox("Enter Product Management password:", "Bidfood Internal Review")

If pass = "Clavis" Then
    Sheet3.Visible = xlSheetVisible
    Sheet1.Visible = xlSheetVisible
    Sheet3.Activate
'    Sheet2.Visible = xlSheetVisible
'    Sheet4.Visible = xlSheetVisible
'    Sheet5.Visible = xlSheetVisible
'    Sheet6.Visible = xlSheetVisible
'    Sheet7.Visible = xlSheetVisible
'    Sheet8.Visible = xlSheetVisible
'    Sheet9.Visible = xlSheetVisible
Else
    MsgBox "Invalid password entered, please contact:" & vbNewLine & _
    "(01494) 555968 or (01494) 555974 or email datacollection@Bidfood.co.uk"
    ThisWorkbook.ShowAllSheets
End If

End Sub

Private Sub cmdContinue_Click()

Sheet7.Cells(1, 2) = "ON"                      'flag to enable XML exchange
Sheet7.Cells(2, 2) = "NO"                      'flag to exclude Clavis popups for inline validations
Call ClavisFormBuilder.Validate(False, "")
Sheet7.Cells(1, 2) = "OFF"                      'flag to disable XML exchange
Sheet7.Cells(2, 2) = "YES"                      'flag to include Clavis popups for inline validations

If valid_err = "" Then

    ShtsToShow = Array("INPUT SHEET", "customer UNDERWRITING", "UNDERWRITING")
    ShtsToHide = Array("sheet1")
    
    For Each ShtName In ShtsToShow
        Worksheets(ShtName).Visible = True
    Next ShtName
    
    For Each ShtName In ShtsToHide
        Worksheets(ShtName).Visible = False
    Next ShtName
    
    Sheets("INPUT SHEET").Select
    Sheet3.Cells(5, 4).Select
    
End If

End Sub

Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Const MacroPage = "Macro Alert"
Const WelcomePage = "Instructions"
Public isclosing As Boolean

Private Sub AddRefsIfAccessAllowed()
     
Dim Response As VbMsgBoxResult
 
 'Test to ensure access is allowed
If Application.Version > 9 Then
    Dim VisualBasicProject As Object
    On Error Resume Next
    Set VisualBasicProject = ActiveWorkbook.VBProject
    If Not Err.Number = 0 Then
    
         If Application.Version >= 12 Then 'Excel 2007 onward
            Response = MsgBox("Your current security settings do not allow the code in this workbook " & _
            "to work as designed and you will get some error messages." & vbNewLine & vbNewLine & _
            "To allow the code to function correctly and without errors you need " & vbNewLine & _
            "to change your security setting as follows:" & vbNewLine & vbNewLine & _
            " 1. Right-click on the Home menu and select 'Customize Quick Access Toolbar'" & vbNewLine & _
            " 2. Select 'Trust Center' and then click 'Trust Center Settings'" & vbNewLine & _
            " 3. Select 'Macro Settings'" & vbNewLine & _
            " 4. Place a tick next to 'Trust access to the VBA project object model'" & vbNewLine & _
            " 5. Click OK" & vbNewLine & vbNewLine & _
            "Click on OK to show the security dialog now", vbOKOnly + vbCritical)
        Else
            Response = MsgBox("Your current security settings do not allow the code in this workbook " & _
            "to work as designed and you will get some error messages." & vbNewLine & vbNewLine & _
            "To allow the code to function correctly and without errors you need " & vbNewLine & _
            "to change your security setting as follows:" & vbNewLine & vbNewLine & _
            "    1. Select Tools - Macro - Security to show the security dialog" & vbNewLine & _
            "    2. Click the 'Trusted Sources' tab" & vbNewLine & _
            "    3. Place a checkmark next to 'Trust Access to Visual Basic Project'" & vbNewLine & _
            "    4. Click OK" & vbNewLine & vbNewLine & _
            "Click on OK to show the security dialog now", vbOKOnly + vbCritical)
        End If
        
        If Response = vbOK Then Application.CommandBars("Macro").Controls("Security...").Execute
        Exit Sub
        
    End If
End If
 
End Sub

Private Sub HideAllSheets()

Dim ws As Worksheet

Worksheets(MacroPage).Visible = xlSheetVisible

For Each ws In ThisWorkbook.Worksheets
    If Not ws.Name = MacroPage Then ws.Visible = xlSheetVeryHidden
Next ws

Worksheets(MacroPage).Activate
    
End Sub

Public Sub ShowAllSheets()

Dim ws As Worksheet

Worksheets(WelcomePage).Visible = xlSheetVisible

For Each ws In ThisWorkbook.Worksheets
    If Not ws.Name = WelcomePage Then ws.Visible = xlSheetVeryHidden
Next ws

Worksheets(WelcomePage).Activate
Sheet9.cmdContinue.Visible = True
Sheet9.Cells(1, 1).Select

End Sub

Private Sub Workbook_BeforeClose(Cancel As Boolean)

isclosing = True
Call HideAllSheets
Me.Save

End Sub

Private Sub Show_Exceptions()
Dim i, j As Integer
Dim found As Boolean

j = 1       'column index for exceptions

found = False
For i = 5 To 8
    If Sheet3.Cells(i, 4).Interior.Color = vbRed Then
        found = True
        Sheet3.Cells(i, j).Interior.ColorIndex = 24
        Sheet3.Cells(i, j).Borders.Color = vbBlack
    Else
        Sheet3.Cells(i, j).Interior.Color = vbWhite
        Sheet3.Cells(i, j).Borders.LineStyle = xlNone
    End If
Next
If found = True Then
    Sheet3.Cells(4, j).value = "Exception Feedback"
Else
    Sheet3.Cells(4, j).ClearContents
End If


found = False
For i = 11 To 28
    If Sheet3.Cells(i, 4).Interior.Color = vbRed Then
        found = True
        Sheet3.Cells(i, j).Interior.ColorIndex = 24
        Sheet3.Cells(i, j).Borders.Color = vbBlack
    Else
        Sheet3.Cells(i, 1).Interior.Color = vbWhite
        Sheet3.Cells(i, 1).Borders.LineStyle = xlNone
    End If
Next
If found = True Then
    Sheet3.Cells(10, j).value = "Exception Feedback"
Else
    Sheet3.Cells(10, j).ClearContents
End If


found = False
For i = 31 To 40
    If Sheet3.Cells(i, 4).Interior.Color = vbRed Then
        found = True
        Sheet3.Cells(i, j).Interior.ColorIndex = 24
        Sheet3.Cells(i, j).Borders.Color = vbBlack
    Else
        Sheet3.Cells(i, 1).Interior.Color = vbWhite
        Sheet3.Cells(i, 1).Borders.LineStyle = xlNone
    End If
Next
If found = True Then
    Sheet3.Cells(30, j).value = "Exception Feedback"
Else
    Sheet3.Cells(30, j).ClearContents
End If
      
      
found = False
For i = 43 To 45
    If Sheet3.Cells(i, 4).Interior.Color = vbRed Then
        found = True
        Sheet3.Cells(i, j).Interior.ColorIndex = 24
        Sheet3.Cells(i, j).Borders.Color = vbBlack
    Else
        Sheet3.Cells(i, 1).Interior.Color = vbWhite
        Sheet3.Cells(i, 1).Borders.LineStyle = xlNone
    End If
Next
If found = True Then
    Sheet3.Cells(42, j).value = "Exception Feedback"
Else
    Sheet3.Cells(42, j).ClearContents
End If


found = False
For i = 48 To 84
    If Sheet3.Cells(i, 4).Interior.Color = vbRed Then
        found = True
        Sheet3.Cells(i, j).Interior.ColorIndex = 24
        Sheet3.Cells(i, j).Borders.Color = vbBlack
    Else
        Sheet3.Cells(i, 1).Interior.Color = vbWhite
        Sheet3.Cells(i, 1).Borders.LineStyle = xlNone
    End If
Next
If found = True Then
    Sheet3.Cells(47, j).value = "Exception Feedback"
Else
    Sheet3.Cells(47, j).ClearContents
End If
      
      
found = False
For i = 87 To 91
    If Sheet3.Cells(i, 4).Interior.Color = vbRed Then
        found = True
        Sheet3.Cells(i, j).Interior.ColorIndex = 24
        Sheet3.Cells(i, j).Borders.Color = vbBlack
    Else
        Sheet3.Cells(i, 1).Interior.Color = vbWhite
        Sheet3.Cells(i, 1).Borders.LineStyle = xlNone
    End If
Next
If found = True Then
    Sheet3.Cells(86, j).value = "Exception Feedback"
Else
    Sheet3.Cells(86, j).ClearContents
End If
      
      
found = False
For i = 94 To 104
    If Sheet3.Cells(i, 4).Interior.Color = vbRed Then
        found = True
        Sheet3.Cells(i, j).Interior.ColorIndex = 24
        Sheet3.Cells(i, j).Borders.Color = vbBlack
    Else
        Sheet3.Cells(i, 1).Interior.Color = vbWhite
        Sheet3.Cells(i, 1).Borders.LineStyle = xlNone
    End If
Next
If found = True Then
    Sheet3.Cells(93, j).value = "Exception Feedback"
Else
    Sheet3.Cells(93, j).ClearContents
End If
      
      
found = False
For i = 107 To 111
    If Sheet3.Cells(i, 4).Interior.Color = vbRed Then
        found = True
        Sheet3.Cells(i, j).Interior.ColorIndex = 24
        Sheet3.Cells(i, j).Borders.Color = vbBlack
    Else
        Sheet3.Cells(i, 1).Interior.Color = vbWhite
        Sheet3.Cells(i, 1).Borders.LineStyle = xlNone
    End If
Next
If found = True Then
    Sheet3.Cells(106, j).value = "Exception Feedback"
Else
    Sheet3.Cells(106, j).ClearContents
End If
      
      
End Sub

Private Sub Workbook_BeforeSave(ByVal SaveAsUI As Boolean, Cancel As Boolean)

Dim message As String
Dim file_name As Variant
Static bolInProcess As Boolean
   
If Not bolInProcess Then
        
    err_count = 0
    Sheet3.Cells(1, 1) = ""
    Sheet3.Cells(114, 1) = ""
    
    Sheet3.Range("D5:D8").Interior.Color = vbWhite
    Sheet3.Range("D11:D28").Interior.Color = vbWhite
    Sheet3.Range("D31:D40").Interior.Color = vbWhite
    Sheet3.Range("D43:D45").Interior.Color = vbWhite
    Sheet3.Range("D48:D84").Interior.Color = vbWhite
    Sheet3.Range("D87:D91").Interior.Color = vbWhite
    Sheet3.Range("D94:D104").Interior.Color = vbWhite
    Sheet3.Range("D107:D111").Interior.Color = vbWhite

    Application.StatusBar = "Validating document"
    
    Sheet7.Cells(1, 2) = "ON"                      'flag to enable XML exchange
    
    If (isclosing = False) And (valid_err = "") Then
        Sheet7.Cells(2, 2) = "YES"                     'flag to include Clavis popups for inline validations
    Else
        Sheet7.Cells(2, 2) = "NO"
    End If

    Call ClavisFormBuilder.Validate(False, "")
    
    Sheet7.Cells(1, 2) = "OFF"                      'flag to disable XML exchange
    Sheet7.Cells(2, 2) = "NO"                      'flag to exclude Clavis popups for inline validations

    If valid_err = "" Then
        message = "Issues: " & err_count
        If err_count < 4 Then
            Show_Exceptions
        Else
            Sheet3.Range("A4:A111").ClearContents
            Sheet3.Range("A4:A111").ClearFormats
        End If
        
    ElseIf valid_err = "Failed" Then
        message = "DATA HAS NOT BEEN VALIDATED ... Bidfood WILL REJECT THIS FORM"
        Sheet3.Range("A4:A111").ClearContents
        Sheet3.Range("A4:A111").ClearFormats
    End If
        
        
    Sheet3.Cells(1, 1) = message
    Sheet3.Cells(114, 1) = message
        
    If SaveAsUI = True Then         '// Use a flag to prevent effective recurse //
                                    '// If we get here, then kill alerts    //
        Application.DisplayAlerts = False
        bolInProcess = True
        Cancel = True

        file_name = Application.GetSaveAsFilename("", "Excel 97-2003 Workbook (*.xls),*.xls")
        If file_name = False Then
                'MsgBox "You cancelled"
        Else
            ActiveWorkbook.SaveAs file_name, FileFormat:=xlNormal
        End If
        
        Application.DisplayAlerts = True
    End If
    
    bolInProcess = False
End If

End Sub

Private Sub Workbook_Open()

isclosing = False
Application.Calculation = xlCalculationAutomatic
Application.ScreenUpdating = False
Call ShowAllSheets
Application.ScreenUpdating = True
ThisWorkbook.Saved = True
Call AddRefsIfAccessAllowed

Sheet7.Cells(2, 2) = "NO"                      'flag to exclude Clavis popups for inline validations
Sheet7.Cells(1, 2) = "OFF"                      'flag to disable XML exchange
valid_err = "Failed"                           'connection to Clavis not established yet

saveOnOpen = True
SecondsMarked = 3
BenchmarkTime = 0
IsValidateOnTimeElapsed = False
ReDim correctionNodeValues(93, 2)
correctionNodeValues(0, 0) = "Supplier"
correctionNodeValues(0, 1) = "D5"
correctionNodeValues(0, 2) = "3"
correctionNodeValues(1, 0) = "Name of person completing form"
correctionNodeValues(1, 1) = "D6"
correctionNodeValues(1, 2) = "3"
correctionNodeValues(2, 0) = "Email Address of person completing form"
correctionNodeValues(2, 1) = "D7"
correctionNodeValues(2, 2) = "3"
correctionNodeValues(3, 0) = "Telephone of person completing form"
correctionNodeValues(3, 1) = "D8"
correctionNodeValues(3, 2) = "3"
correctionNodeValues(4, 0) = "Product Description"
correctionNodeValues(4, 1) = "D11"
correctionNodeValues(4, 2) = "3"
correctionNodeValues(5, 0) = "Brand Name"
correctionNodeValues(5, 1) = "D13"
correctionNodeValues(5, 2) = "3"
correctionNodeValues(6, 0) = "GTIN Type"
correctionNodeValues(6, 1) = "D15"
correctionNodeValues(6, 2) = "3"
correctionNodeValues(7, 0) = "Temperature Band"
correctionNodeValues(7, 1) = "D18"
correctionNodeValues(7, 2) = "3"
correctionNodeValues(8, 0) = "Pack Size Weight"
correctionNodeValues(8, 1) = "D19"
correctionNodeValues(8, 2) = "3"
correctionNodeValues(9, 0) = "Width"
correctionNodeValues(9, 1) = "D23"
correctionNodeValues(9, 2) = "3"
correctionNodeValues(10, 0) = "Depth"
correctionNodeValues(10, 1) = "D24"
correctionNodeValues(10, 2) = "3"
correctionNodeValues(11, 0) = "Height"
correctionNodeValues(11, 1) = "D25"
correctionNodeValues(11, 2) = "3"
correctionNodeValues(12, 0) = "Stir Frying Instructions"
correctionNodeValues(12, 1) = "D104"
correctionNodeValues(12, 2) = "3"
correctionNodeValues(13, 0) = "Steaming Instructions"
correctionNodeValues(13, 1) = "D103"
correctionNodeValues(13, 2) = "3"
correctionNodeValues(14, 0) = "Pan Frying Instructions"
correctionNodeValues(14, 1) = "D100"
correctionNodeValues(14, 2) = "3"
correctionNodeValues(15, 0) = "Microwaving Instructions"
correctionNodeValues(15, 1) = "D99"
correctionNodeValues(15, 2) = "3"
correctionNodeValues(16, 0) = "Grilling Instructions"
correctionNodeValues(16, 1) = "D98"
correctionNodeValues(16, 2) = "3"
correctionNodeValues(17, 0) = "Deep Frying Instructions"
correctionNodeValues(17, 1) = "D97"
correctionNodeValues(17, 2) = "3"
correctionNodeValues(18, 0) = "Boiling Instructions"
correctionNodeValues(18, 1) = "D96"
correctionNodeValues(18, 2) = "3"
correctionNodeValues(19, 0) = "Baking Instructions"
correctionNodeValues(19, 1) = "D95"
correctionNodeValues(19, 2) = "3"
correctionNodeValues(20, 0) = "Contains Egg"
correctionNodeValues(20, 1) = "D59"
correctionNodeValues(20, 2) = "3"
correctionNodeValues(21, 0) = "Contains Fish"
correctionNodeValues(21, 1) = "D60"
correctionNodeValues(21, 2) = "3"
correctionNodeValues(22, 0) = "Contains Milk"
correctionNodeValues(22, 1) = "D63"
correctionNodeValues(22, 2) = "3"
correctionNodeValues(23, 0) = "Contains Molluscs"
correctionNodeValues(23, 1) = "D64"
correctionNodeValues(23, 2) = "3"
correctionNodeValues(24, 0) = "Contains Mustard"
correctionNodeValues(24, 1) = "D65"
correctionNodeValues(24, 2) = "3"
correctionNodeValues(25, 0) = "Contains Peanut or Groundnut"
correctionNodeValues(25, 1) = "D66"
correctionNodeValues(25, 2) = "3"
correctionNodeValues(26, 0) = "Contains Sesame Seeds"
correctionNodeValues(26, 1) = "D68"
correctionNodeValues(26, 2) = "3"
correctionNodeValues(27, 0) = "Contains Soybean"
correctionNodeValues(27, 1) = "D69"
correctionNodeValues(27, 2) = "3"
correctionNodeValues(28, 0) = "Contains Lupin"
correctionNodeValues(28, 1) = "D62"
correctionNodeValues(28, 2) = "3"
correctionNodeValues(29, 0) = "Contains Sulphur Dioxide"
correctionNodeValues(29, 1) = "D67"
correctionNodeValues(29, 2) = "3"
correctionNodeValues(30, 0) = "Contains Tree Nuts"
correctionNodeValues(30, 1) = "D70"
correctionNodeValues(30, 2) = "3"
correctionNodeValues(31, 0) = "Contains Palm Oil"
correctionNodeValues(31, 1) = "D54"
correctionNodeValues(31, 2) = "3"
correctionNodeValues(32, 0) = "Contains Hydrogenated Vegetable Oil"
correctionNodeValues(32, 1) = "D53"
correctionNodeValues(32, 2) = "3"
correctionNodeValues(33, 0) = "Ingredients"
correctionNodeValues(33, 1) = "D52"
correctionNodeValues(33, 2) = "3"
correctionNodeValues(34, 0) = "Contains Cereals containing Gluten"
correctionNodeValues(34, 1) = "D57"
correctionNodeValues(34, 2) = "3"
correctionNodeValues(35, 0) = "Contains Crustacea"
correctionNodeValues(35, 1) = "D58"
correctionNodeValues(35, 2) = "3"
correctionNodeValues(36, 0) = "Contains Celery or Celeriac"
correctionNodeValues(36, 1) = "D56"
correctionNodeValues(36, 2) = "3"
correctionNodeValues(37, 0) = "Country of Origin"
correctionNodeValues(37, 1) = "D48"
correctionNodeValues(37, 2) = "3"
correctionNodeValues(38, 0) = "Carbohydrate of Which Sugars"
correctionNodeValues(38, 1) = "D77"
correctionNodeValues(38, 2) = "3"
correctionNodeValues(39, 0) = "Added Sugar"
correctionNodeValues(39, 1) = "D78"
correctionNodeValues(39, 2) = "3"
correctionNodeValues(40, 0) = "Suitable for a Vegetarian Diet"
correctionNodeValues(40, 1) = "D74"
correctionNodeValues(40, 2) = "3"
correctionNodeValues(41, 0) = "Suitable For a Vegan Diet"
correctionNodeValues(41, 1) = "D73"
correctionNodeValues(41, 2) = "3"
correctionNodeValues(42, 0) = "Simmering Instruction"
correctionNodeValues(42, 1) = "D102"
correctionNodeValues(42, 2) = "3"
correctionNodeValues(43, 0) = "Roasting Instructions"
correctionNodeValues(43, 1) = "D101"
correctionNodeValues(43, 2) = "3"
correctionNodeValues(44, 0) = "Consumer Unit GTIN"
correctionNodeValues(44, 1) = "D16"
correctionNodeValues(44, 2) = "3"
correctionNodeValues(45, 0) = "Consumer Unit GTIN Type"
correctionNodeValues(45, 1) = "D17"
correctionNodeValues(45, 2) = "3"
correctionNodeValues(46, 0) = "Minimum Shelf Life on arrival"
correctionNodeValues(46, 1) = "D32"
correctionNodeValues(46, 2) = "3"
correctionNodeValues(47, 0) = "Minimum Lifespan from Production"
correctionNodeValues(47, 1) = "D31"
correctionNodeValues(47, 2) = "3"
correctionNodeValues(48, 0) = "Minimum Order Quantity Value"
correctionNodeValues(48, 1) = "D33"
correctionNodeValues(48, 2) = "3"
correctionNodeValues(49, 0) = "Minimum Order Quantity Cases"
correctionNodeValues(49, 1) = "D34"
correctionNodeValues(49, 2) = "3"
correctionNodeValues(50, 0) = "Layers per Pallet"
correctionNodeValues(50, 1) = "D37"
correctionNodeValues(50, 2) = "3"
correctionNodeValues(51, 0) = "VAT Rate"
correctionNodeValues(51, 1) = "D45"
correctionNodeValues(51, 2) = "3"
correctionNodeValues(52, 0) = "Net Cost per Case"
correctionNodeValues(52, 1) = "D44"
correctionNodeValues(52, 2) = "3"
correctionNodeValues(53, 0) = "Invoice Cost per Case"
correctionNodeValues(53, 1) = "D43"
correctionNodeValues(53, 2) = "3"
correctionNodeValues(54, 0) = "65% British"
correctionNodeValues(54, 1) = "D49"
correctionNodeValues(54, 2) = "3"
correctionNodeValues(55, 0) = "Number of Servings per package"
correctionNodeValues(55, 1) = "D50"
correctionNodeValues(55, 2) = "3"
correctionNodeValues(56, 0) = "Portion size"
correctionNodeValues(56, 1) = "D51"
correctionNodeValues(56, 2) = "3"
correctionNodeValues(57, 0) = "Global Trade Item Number"
correctionNodeValues(57, 1) = "D14"
correctionNodeValues(57, 2) = "3"
correctionNodeValues(58, 0) = "Suppliers Product Code"
correctionNodeValues(58, 1) = "D12"
correctionNodeValues(58, 2) = "3"
correctionNodeValues(59, 0) = "Unique Marketing Statement"
correctionNodeValues(59, 1) = "D55"
correctionNodeValues(59, 2) = "3"
correctionNodeValues(60, 0) = "Protein"
correctionNodeValues(60, 1) = "D83"
correctionNodeValues(60, 2) = "3"
correctionNodeValues(61, 0) = "Fibre"
correctionNodeValues(61, 1) = "D79"
correctionNodeValues(61, 2) = "3"
correctionNodeValues(62, 0) = "Kilocalories"
correctionNodeValues(62, 1) = "D80"
correctionNodeValues(62, 2) = "3"
correctionNodeValues(63, 0) = "Sodium"
correctionNodeValues(63, 1) = "D84"
correctionNodeValues(63, 2) = "3"
correctionNodeValues(64, 0) = "Ready to Eat Instructions"
correctionNodeValues(64, 1) = "D94"
correctionNodeValues(64, 2) = "3"
correctionNodeValues(65, 0) = "Approved for Halal"
correctionNodeValues(65, 1) = "D71"
correctionNodeValues(65, 2) = "3"
correctionNodeValues(66, 0) = "Approved for Kosher"
correctionNodeValues(66, 1) = "D72"
correctionNodeValues(66, 2) = "3"
correctionNodeValues(67, 0) = "Packaging environmental claims"
correctionNodeValues(67, 1) = "D90"
correctionNodeValues(67, 2) = "3"
correctionNodeValues(68, 0) = "Carbohydrate"
correctionNodeValues(68, 1) = "D76"
correctionNodeValues(68, 2) = "3"
correctionNodeValues(69, 0) = "Product specified Organic"
correctionNodeValues(69, 1) = "D87"
correctionNodeValues(69, 2) = "3"
correctionNodeValues(70, 0) = "Sustainability Claims"
correctionNodeValues(70, 1) = "D91"
correctionNodeValues(70, 2) = "3"
correctionNodeValues(71, 0) = "Contains GM Protein or DNA"
correctionNodeValues(71, 1) = "D61"
correctionNodeValues(71, 2) = "3"
correctionNodeValues(72, 0) = "Fat of which Saturates"
correctionNodeValues(72, 1) = "D82"
correctionNodeValues(72, 2) = "3"
correctionNodeValues(73, 0) = "Fat"
correctionNodeValues(73, 1) = "D81"
correctionNodeValues(73, 2) = "3"
correctionNodeValues(74, 0) = "Ethical or Fairly traded claims"
correctionNodeValues(74, 1) = "D88"
correctionNodeValues(74, 2) = "3"
correctionNodeValues(75, 0) = "Assurance or accreditation schemes"
correctionNodeValues(75, 1) = "D89"
correctionNodeValues(75, 2) = "3"
correctionNodeValues(76, 0) = "Name of Person Underwriting"
correctionNodeValues(76, 1) = "D108"
correctionNodeValues(76, 2) = "3"
correctionNodeValues(77, 0) = "Position of Person Underwriting"
correctionNodeValues(77, 1) = "D109"
correctionNodeValues(77, 2) = "3"
correctionNodeValues(78, 0) = "Email of person Underwriting"
correctionNodeValues(78, 1) = "D110"
correctionNodeValues(78, 2) = "3"
correctionNodeValues(79, 0) = "Telephone of person  Underwriting"
correctionNodeValues(79, 1) = "D111"
correctionNodeValues(79, 2) = "3"
correctionNodeValues(80, 0) = "Agree to Underwrite"
correctionNodeValues(80, 1) = "D107"
correctionNodeValues(80, 2) = "3"
correctionNodeValues(81, 0) = "Packaging Type of TU Traded Unit"
correctionNodeValues(81, 1) = "D40"
correctionNodeValues(81, 2) = "3"
correctionNodeValues(82, 0) = "Packaging Type of CU Consumer Unit"
correctionNodeValues(82, 1) = "D39"
correctionNodeValues(82, 2) = "3"
correctionNodeValues(83, 0) = "Cases per Pallet"
correctionNodeValues(83, 1) = "D38"
correctionNodeValues(83, 2) = "3"
correctionNodeValues(84, 0) = "Cases per Layer"
correctionNodeValues(84, 1) = "D36"
correctionNodeValues(84, 2) = "3"
correctionNodeValues(85, 0) = "Delivery Lead Time"
correctionNodeValues(85, 1) = "D35"
correctionNodeValues(85, 2) = "3"
correctionNodeValues(86, 0) = "Inner Pack"
correctionNodeValues(86, 1) = "D21"
correctionNodeValues(86, 2) = "3"
correctionNodeValues(87, 0) = "Trade Item Splittable"
correctionNodeValues(87, 1) = "D22"
correctionNodeValues(87, 2) = "3"
correctionNodeValues(88, 0) = "Sold By Weight"
correctionNodeValues(88, 1) = "D27"
correctionNodeValues(88, 2) = "3"
correctionNodeValues(89, 0) = "Suitable for a Coeliac Diet"
correctionNodeValues(89, 1) = "D75"
correctionNodeValues(89, 2) = "3"
correctionNodeValues(90, 0) = "Variable Weight Trade Item"
correctionNodeValues(90, 1) = "D28"
correctionNodeValues(90, 2) = "3"
correctionNodeValues(91, 0) = "Gross Weight"
correctionNodeValues(91, 1) = "D26"
correctionNodeValues(91, 2) = "3"
correctionNodeValues(92, 0) = "Consumer Units in Traded unit"
correctionNodeValues(92, 1) = "D20"
correctionNodeValues(92, 2) = "3"
correctionNodeValues(93, 0) = "PK"
correctionNodeValues(93, 1) = "F1"
correctionNodeValues(93, 2) = "3"

End Sub

' InQuest injected base64 decoded content
' ?z{k
' r-zk
' ~`ZrD

INQUEST-PP=macro
