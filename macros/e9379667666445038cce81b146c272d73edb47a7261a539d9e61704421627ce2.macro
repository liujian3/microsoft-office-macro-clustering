Attribute VB_Name = "Automation"
' Build the kit list
Sub buildKitList()
    ' Turn off calculation and screen drawing while we do this for speed and to stop "flicker"
    Application.Calculation = xlCalculationManual
    Application.ScreenUpdating = False

    ' Unlock the kit list sheet
    KitList.Unprotect Password:="mtvKitList"

    ' Clear the existing kit list's work area
    Range("KitListTable").ClearContents
    
    ' Remove extra rows from the middle of the kit list table if there are still more than
    ' two rows. We keep the top and bottom rows to maintain the formatting, in particular
    ' the border styles that may have been set on the final row.
    If (Range("KitListTable").Rows.Count > 2) Then
        For i = (Range("KitListTable").Rows.Count - 1) To 2 Step -1
            Range("KitListTable").Rows(i).EntireRow.Delete
        Next i
    End If
    
    ' Loop over the price list rows. We do this here rather than using filters and stuff
    ' so that when the user returns to the price list they don't need to scroll back to
    ' where they were.
    kitListRowOffset = 1
    For Each priceListRow In Range("PriceListTable").Rows
        ' Grab the quantity
        plQuantity = priceListRow.Cells(1, 1) ' = Column A
        
        ' If the quantity is greater than 1, then we can copy the values over
        If (plQuantity > 0) Then
            ' Get the static details from the row
            With priceListRow
                plItemCode = .Cells(1, 2) ' = Column B
                plItemDescription = .Cells(1, 3) ' = Column C
                plGBPRRP = .Cells(1, 6) ' = Column F
                plGBPTotalRRP = .Cells(1, 7) ' = Column G
                plGBPUnit = .Cells(1, 8) ' = Column H
                plGBPTotalPrice = .Cells(1, 9) ' = Column I
            End With
            
            ' Do we need to add another row to the kit list table? We need to when there
            ' are more than two lines to copy over.
            If (kitListRowOffset > 1) Then
                ' Insert the row (it will become the second last row in the table)
                Range("KitListTable").Rows(Range("KitListTable").Rows.Count).EntireRow.Insert Shift:=xlDown
            End If
                
            ' Calculate the kit list row offset. Since there are always at least two
            ' rows in the kit list table available, we want to use the second-last
            ' row in the table each time (since it'll grow as we need it to). This
            ' of course means that the last row will remain blank, but we'll fix that
            ' later.
            kitListRowOffset = (Range("KitListTable").Rows.Count - 1)

            ' Copy the data over
            With Range("KitListTable").Rows(kitListRowOffset)
                .Cells(1, 1).Value = plQuantity ' = Column A
                .Cells(1, 2).Value = plItemCode ' = Column B
                .Cells(1, 3).Value = plItemDescription ' = Column C
                .Cells(1, 4).Value = plGBPRRP ' = Column D
                .Cells(1, 5).Value = plGBPTotalRRP ' = Column E
                .Cells(1, 6).Value = plGBPUnit ' = Column F
                .Cells(1, 7).Value = plGBPTotalPrice ' = Column G
            End With

            ' Increase the kit list row offset (which will trigger adding new rows if needed)
            kitListRowOffset = (kitListRowOffset + 1)
        End If
    Next priceListRow
    
    ' Since I'm pretty lazy, the last line on the list will actually be blank when there
    ' are two or more items. So, are we left with more than two rows in the kit list table?
    If (Range("KitListTable").Rows.Count > 2) Then
        ' Okay, kludge the thing to make it look pretty by copying the second last row's
        ' values into the last row's values and then delete the second last row. It's
        ' ugly, I know, but I don't have much time on my hands... Loop over the columns..
        For i = 1 To 7 Step 1
            ' Copy the value in this column
            Range("KitListTable").Cells(Range("KitListTable").Rows.Count, i).Value = _
                Range("KitListTable").Cells((Range("KitListTable").Rows.Count - 1), i)
        Next i
        
        ' And finally, remove that second last row...
        Range("KitListTable").Rows(Range("KitListTable").Rows.Count - 1).EntireRow.Delete
    End If
    
    ' Lock down the kit list sheet again
    KitList.Protect Password:="mtvKitList"

    ' Allow the screen to update and enable calculations again
    Application.Calculation = xlCalculationAutomatic
    Application.ScreenUpdating = True
End Sub


' Build the order form
Sub buildOrderForm()
    ' Build the kit list first
    Call buildKitList

    ' Turn off calculation and screen drawing while we do this for speed and to stop "flicker"
    Application.Calculation = xlCalculationManual
    Application.ScreenUpdating = False

    ' Unprotect the order form sheet
    OrderForm.Unprotect Password:="mtvOrderForm"

    ' Clear the order form
    Range("OrderFormTable").ClearContents
    
    ' Remove extra rows from the middle of the order form table if there are still more
    ' than. We keep the top and bottom rows to maintain pretty formatting, just like with
    ' the kit list.
    If (Range("OrderFormTable").Rows.Count > 2) Then
        For i = (Range("OrderFormTable").Rows.Count - 1) To 2 Step -1
            Range("OrderFormTable").Rows(i).EntireRow.Delete
        Next i
    End If
    
    ' Loop over the information in the kit list in order to use it to build the order form
    orderFormRowOffset = 1
    For Each kitListRow In Range("KitListTable").Rows
        ' Grab the cells we want for the order form
        With kitListRow
            kitListQuantity = .Cells(1, 1) ' = Column A
            kitListItemCode = .Cells(1, 2) ' = Column B
            kitListItemDescription = .Cells(1, 3) ' = Column C
            kitListGBPUnitPrice = .Cells(1, 6) ' = Column F (Trade price)
            kitListGBPLineTotal = .Cells(1, 7) ' = Column G (Total trade price)
        End With
        
        ' Do we need to add another row to the kit list table? We need to when there
        ' are more than two lines to copy over.
        If (orderFormRowOffset > 1) Then
            ' Insert the row (it will become the second last row in the table)
            Range("OrderFormTable").Rows(Range("OrderFormTable").Rows.Count).EntireRow.Insert Shift:=xlDown
        End If

        ' Recalculate the offset row. Since we know there are always at least two rows
        ' and the number of rows will grow dynamically, we can simply assume we can
        ' always use the second last row. Just like the kit list, this means the last
        ' row will always be empty, but we'll fix that later
        orderFormRowOffset = (Range("OrderFormTable").Rows.Count - 1)
        
        ' Copy over the values from the kit list into the order form
        With Range("OrderFormTable").Rows(orderFormRowOffset)
            .Cells(1, 1).Value = kitListQuantity ' = Column A
            .Cells(1, 2).Value = kitListItemCode ' = Column B
            .Cells(1, 3).Value = kitListItemDescription ' = Column C
            .Cells(1, 4).Value = kitListGBPUnitPrice ' = Column D
            .Cells(1, 5).Value = kitListGBPLineTotal ' = Column E
        End With
        
        ' Increase the order form row offset (which will trigger adding new rows if needed)
        orderFormRowOffset = (orderFormRowOffset + 1)
    Next kitListRow
    
    ' As with the kit list table, the last line on the list will actually be blank when
     ' there. So, are we left with more than two rows in the kit list table?
    If (Range("OrderFormTable").Rows.Count > 2) Then
        ' Okay, kludge the thing to make it look pretty by copying the second last row's
        ' values into the last row's values and then delete the second last row. It's
        ' ugly, I know, but I don't have much time on my hands... Loop over the columns..
        For i = 1 To 5 Step 1
            ' Copy the value in this column
            Range("OrderFormTable").Cells(Range("OrderFormTable").Rows.Count, i).Value = _
                Range("OrderFormTable").Cells((Range("OrderFormTable").Rows.Count - 1), i)
        Next i
        
        ' And finally, remove that second last row...
        Range("OrderFormTable").Rows(Range("OrderFormTable").Rows.Count - 1).EntireRow.Delete
    End If
    
    ' Restore password protection on the order form sheet
    OrderForm.Protect Password:="mtvOrderForm"

    ' Allow the screen to update and enable calculations again
    Application.Calculation = xlCalculationAutomatic
    Application.ScreenUpdating = True
End Sub


' Clear the quantities entered on the main price list sheet
Sub clearPriceListQuantities()
    ' Turn off calculation and screen drawing while we do this for speed and to stop "flicker"
    Application.Calculation = xlCalculationManual
    Application.ScreenUpdating = False

    ' Unprotect the price list sheet
    PriceList.Unprotect Password:="mtv"

    ' Clear the quantities from the price list
    PriceList.Range("PriceListQuantities").ClearContents

    ' Protect the price list sheet again
    PriceList.Protect Password:="mtv"

    ' Allow the screen to update and enable calculations again
    Application.Calculation = xlCalculationAutomatic
    Application.ScreenUpdating = True
End Sub


' Lock down the workbook ready to be handed to a reseller
Sub lockdownWorkbook()
    ' Make sure the user understands the dangers of doing this
    continue = MsgBox("Locking down the worksheet cannot easily be undone. Please make sure you save the workbook to a different file.", vbOKCancel)
    
    ' If the OK button was clicked, let's get on with it then..
    If (continue = vbOK) Then
        ' Clear the quantities from the price list
        Call clearPriceListQuantities
    
        ' Unprotect the price list sheet
        PriceList.Unprotect Password:="mtv"
        
        ' Hide the USD columns, and the exchange rate column
        PriceList.Range("$J:$N").EntireColumn.hidden = True
        
        ' Hide the exchange rate stuff
        With PriceList.Range("$I$2:$J$4")
            .Font.Color = .Interior.Color
        End With
        
        ' Remove the lock-down button
        PriceList.DrawingObjects("LockdownWorkbookButton").Delete
        
        ' Force protection on all sheets
        Home.Protect Password:="mtvHome"
        PriceList.Protect Password:="mtv"
        KitList.Protect Password:="mtvKitList"
        OrderForm.Protect Password:="mtvOrderForm"
        
        ' Select the "home" sheet...
        Home.Activate
        
        ' Protect the workbook
        ThisWorkbook.Protect Password:="mtv"
    End If
End Sub


' Hide/Unhide columns on the price list (used before printing)
Sub priceListPrintColumnsHiddenToggle(hiddenToggle)
    ' Stop the screen from updating like a muppet
    Application.ScreenUpdating = False

    ' Unlock the price list sheet
    PriceList.Unprotect Password:="mtv"

    ' Loop over all of the columns and hide them
    With Range("PriceListColumnsToHideWhenPrinting")
        For Each Column In .Columns
            Column.hidden = hiddenToggle
        Next Column
    End With
    
    ' Lock the sheet up again
    PriceList.Protect Password:="mtv"
    
    ' Allow the screen to update again
    Application.ScreenUpdating = True
End Sub


' Open the kit list sheet
Sub openKitList()
    KitList.Activate
End Sub


' Open the order form sheet
Sub openOrderForm()
    OrderForm.Activate
End Sub
Attribute VB_Name = "Home"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
' Called when the "home" sheet is actived
Private Sub Worksheet_Activate()
    ' Force protection
    Home.Protect Password:="mtv", UserInterfaceOnly:=True
End Sub

Attribute VB_Name = "KitList"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
' Called when the kit list sheet is opened
Private Sub Worksheet_Activate()
    ' Make sure the kit list is up to date
    Call buildKitList
    
    ' Select the top corner of the kit list
    KitList.Range("A1").Select

    ' Force the sheet to be protected
    KitList.Protect Password:="mtvKitList", UserInterfaceOnly:=True
End Sub
Attribute VB_Name = "OrderForm"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
' Called when the order form sheet is opened
Private Sub Worksheet_Activate()
    ' Make sure the kit list is up to date
    Call buildOrderForm
    
    ' Select the top corner of the order form
    OrderForm.Range("A1").Select

    ' Force the sheet to be protected
    OrderForm.Protect Password:="mtvOrderForm"
End Sub

Attribute VB_Name = "PriceList"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet6"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
' Called just before printing
Private Sub Workbook_BeforePrint(Cancel As Boolean)
    ' If the active sheet is the "home" sheet, cancel printing...
    If (Application.ActiveSheet.Name = Home.Name) Then
        Cancel = True
    End If
    
    ' If the active sheet is the price list, we need to do some special stuff first
    If (Application.ActiveSheet.Name = PriceList.Name) Then
        ' For one, cancel printing using the normal method...
        Cancel = True
        
        ' Turn off event processing (otherwise when _we_ print, we'll get stuck in an
        ' infinite loop when the print processor comes back to this subroutine)
        Application.EnableEvents = False
        
        ' Hide columns we don't want printed out
        Call priceListPrintColumnsHiddenToggle(True)
        
        ' Okay, print away :)
        Application.ActiveSheet.PrintOut
        
        ' Unhide the columns again so everything is back to normal
        Call priceListPrintColumnsHiddenToggle(False)
        
        ' Turn event processing back on
        Application.EnableEvents = True
    End If
End Sub


' Called when the workbook is opened
Private Sub Workbook_Open()
    ' Stop Excel from flickering like a silly thing
    Application.ScreenUpdating = False
    
    ' On the price list sheet, move the cursor to the top of the sheet
    PriceList.Select
    'Range("PriceListTopRow").Select

    ' Present the user with the "home" tab
    Home.Activate

    ' Allow Excel to redraw the screen again
    Application.ScreenUpdating = True
End Sub

' InQuest injected base64 decoded content
' .j{b

INQUEST-PP=macro
