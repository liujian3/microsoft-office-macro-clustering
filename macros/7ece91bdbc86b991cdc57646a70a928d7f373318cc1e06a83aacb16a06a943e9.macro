Attribute VB_Name = "PPC_CodeModule"
Public Function PPC_GetClientName()
  PPC_GetClientName = Application.ActiveWorkbook.CustomDocumentProperties("PPC_Template_Client_Name")
End Function

Public Function PPC_GetBalanceSheetDate()
  PPC_GetBalanceSheetDate = Application.ActiveWorkbook.CustomDocumentProperties("PPC_Template_Engagement_Date")
End Function

Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet5"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet6"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

' The following two Excel ThisWorkbook events and the code for each needs to be included in each OBET
' Excel template. It will allow workbooks derived from an OBET Excel template to be secure
' if sent to a non licensed user.

Private xlAppPPCOBETSec As New clsPPCOBETExcelSecurity      ' Declare security class
Private bPassedByBeforeClose As Boolean


Private Sub Workbook_BeforeClose(Cancel As Boolean)
    If Not Cancel Then
        bPassedByBeforeClose = True        ' Show have been to the beforeclose event
    End If
End Sub

Private Sub Workbook_Deactivate()
    ' Make sure Excel menu items are enabled
    ' Check if opening on a PC with PPCSecurity installed. If not then reenable Excel menus
    ' Do only if the process has passed thru the BeforeClose event
    If bPassedByBeforeClose Then
        xlAppPPCOBETSec.EnableExcelMenu Me, True
    
        'clean up memory
        Set xlAppPPCOBETSec = Nothing
    End If

End Sub

Private Sub Workbook_Open()

    bPassedByBeforeClose = False        ' Show haven't been to the beforeclose event
    
    ' Check if opening on a PC with PPCSecurity installed. If not then disable Excel menus
    Call xlAppPPCOBETSec.performSecurity(ThisWorkbook)
    
    
    ' Show the hidden sheets
    'Call xlAppPPCOBETSec.showHiddenSheets(ThisWorkbook)
    
End Sub





Attribute VB_Name = "clsPPCOBETExcelSecurity"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

' The following class needs to be included in each OBET Excel template.
' It will allow workbooks derived from an OBET Excel template to be secure
' if sent to a non licensed user.

Const strExcelPassword As String = "ppcexcelws"


' This sub performs a check to see if first this is a secured document and if so then
' it checks if the COM addin PPCSecurity is registered. If it is then nothing happens
' if the COM addin is not registered then it disables specific menu and toolbar items.
' The opposite occurs when the Excel workbook is closed.
Public Sub performSecurity(obj As Excel.Workbook)
Dim objPPCSec As Object
Dim docType As String
Dim bIsLicensed As Boolean
    
    Call ProtectExcelWorkbook(obj, False)
    Call showHiddenSheets(obj, False)
  
   ' Stop
    ' Check if this is a secured workbook
    If obj.CustomDocumentProperties("PPC_Template_Security") = "True" Then
    ' Check if this is excel workbook has protection turned on
    'If obj.ProtectWindows Then
  
    
        On Error GoTo check_it
        ' Check if PPC products are installed
        Set objPPCSec = CreateObject("PPCSecurity.PPCSecurityDsr")
        
check_it:
        On Error GoTo 0
        ' If PPCSecurity is not present then lock down the Excel workbook
        If objPPCSec Is Nothing Then
            Call ProtectExcelWorkbook(obj, True)
            Call EnableExcelMenu(obj, False)
        Else
            docType = obj.CustomDocumentProperties("PPC_Book_Acronym")
            bIsLicensed = False
            On Error Resume Next
            bIsLicensed = objPPCSec.bCheckLicense(docType, False, "OfficeBasedPracticeAids")
            On Error GoTo 0
            If bIsLicensed Then
                Call EnableExcelMenu(obj, True)
                Call ProtectExcelWorkbook(obj, False)
            Else
                Call ProtectExcelWorkbook(obj, True)
                Call EnableExcelMenu(obj, False)
            End If
       End If
    End If
    obj.Saved = True
    Set objPPCSec = Nothing
End Sub
Public Sub EnableExcelMenu(obj As Excel.Workbook, bEnabled As Boolean)

  ' This is needed in case some toolbar items or menu items are not present
  On Error Resume Next
  
  With obj.Application
   
    '
    ' Menu items
    '
    
    .CommandBars("File").Controls("Save").Enabled = bEnabled
    .CommandBars("File").Controls("Save As...").Enabled = bEnabled
    .CommandBars("File").Controls("Save as Web Page...").Enabled = bEnabled
    .CommandBars("File").Controls("Save Workspace...").Enabled = bEnabled
    .CommandBars("File").Controls("Properties").Enabled = bEnabled
    .CommandBars("File").Controls("Send To").Enabled = bEnabled
    
    .CommandBars("Tools").Controls("Protection").Enabled = bEnabled
    .CommandBars("Tools").Controls("Macro").Enabled = bEnabled
    
    .CommandBars("Format").Controls("Sheet").Controls("Rename").Enabled = bEnabled
        
    .CommandBars("Edit").Controls("Cut").Enabled = bEnabled
    .CommandBars("Edit").Controls("Copy").Enabled = bEnabled
    .CommandBars("Edit").Controls("Paste").Enabled = bEnabled
    .CommandBars("Edit").Controls("Paste Special...").Enabled = bEnabled
    .CommandBars("Edit").Controls("Paste as Hyperlink").Enabled = bEnabled
    .CommandBars("Edit").Controls("Delete Sheet").Enabled = bEnabled
    .CommandBars("Edit").Controls("Move or Copy Sheet...").Enabled = bEnabled
    
    .CommandBars("Worksheet Menu Bar").Controls("Insert").Controls("Worksheet").Enabled = bEnabled
    
    '
    ' Toolbar items
    '
    
    .CommandBars("Standard").Controls("Save").Enabled = bEnabled
    .CommandBars("Standard").Controls("Copy").Enabled = bEnabled
    .CommandBars("Standard").Controls("Paste").Enabled = bEnabled
      
    '
    ' Toolbars
    '
    
    .CommandBars("Visual Basic").Enabled = bEnabled
    
    '
    ' Worksheet tabs
    '
    
    .CommandBars("ply").Enabled = bEnabled
    
    '
    '  Disable right click popup copy and paste
    '
    
    .CommandBars("Cell").Controls("Cut").Enabled = bEnabled
    .CommandBars("Cell").Controls("Copy").Enabled = bEnabled
    .CommandBars("Cell").Controls("Paste").Enabled = bEnabled
    .CommandBars("Cell").Controls("Paste Special...").Enabled = bEnabled
    
    '
    ' Keys
    '
    
    If (bEnabled = True) Then
      .OnKey "^{s}"                             ' Ctrl+S  Save
      .OnKey "^{x}"                             ' Ctrl+X  Cut
      .OnKey "^{c}"                             ' Ctrl+C  Copy
      .OnKey "^{v}"                             ' Ctrl+V  Paste
      .OnKey "%{F8}"                            ' Alt+F8  Macros...
      .OnKey "%{F11}"                           ' Alt+F11 VBE
    Else
      .OnKey "^{s}", ""                         ' Ctrl+S  Save
      .OnKey "^{x}", ""                         ' Ctrl+X  Cut
      .OnKey "^{c}", ""                         ' Ctrl+C  Copy
      .OnKey "^{v}", ""                         ' Ctrl+V  Paste
      .OnKey "%{F8}", ""                        ' Alt+F8  Macros...
      .OnKey "%{F11}", ""                       ' Alt+F11 VBE
    End If

  End With

End Sub

' Protects the worksheets
Private Sub ProtectExcelWorkbook(obj As Excel.Workbook, bProtect As Boolean)
On Error Resume Next
    Dim ws As Excel.Worksheet
    
    If bProtect Then
        For Each ws In obj.Worksheets
            ws.Protect strExcelPassword, True, True, True, True
        Next
        obj.Protect strExcelPassword, True, True
    Else
        obj.Unprotect strExcelPassword
        For Each ws In obj.Worksheets
            ws.Unprotect strExcelPassword
        Next

    End If
End Sub

'This sub unhides the hidden sheets and hides the information sheet
Public Sub showHiddenSheets(obj As Excel.Workbook, Optional bEnabled As Boolean = False)

    Dim ws As Excel.Worksheet
    
    'Stop
     
    For Each ws In obj.Worksheets
        If ws.Name <> "Information" And ws.Name <> "PPCWPBI" Then
            If Not bEnabled Then
                ws.Visible = xlSheetVisible
            Else
                ws.Visible = xlSheetVeryHidden
            End If
        End If
    Next
    
    If bEnabled Then
        obj.Worksheets("Information").Visible = xlSheetVisible
    Else
        obj.Worksheets("Information").Visible = xlSheetVeryHidden
    End If
End Sub



INQUEST-PP=macro
