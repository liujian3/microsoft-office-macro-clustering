Attribute VB_Name = "A_Funktionen"
Option Explicit
Public auswahl
Public artinformation

Private Declare PtrSafe Function apiGetUserName Lib "advapi32.dll" Alias "GetUserNameA" (ByVal lpBuffer As String, nSize As Long) As Long
Function fncReplaceSpecChar(strFilename As String, Optional strRepChar As String) As String

    Dim strOutput                   As String
    Dim strSpecChar                 As String
    Dim strChar                     As String
    Dim i                           As Integer
    Dim imax                        As Integer

    ' Init
    strOutput = ""
    strSpecChar = "/\:*?<>"
    imax = Len(strFilename)
    If IsMissing(strRepChar) Then strRepChar = ""

    ' Zeichenkette durchsuchen, und unzul|fffd|ssige Zeichen ersetzen
    For i = 1 To imax
        strChar = Mid(strFilename, i, 1)
        If InStr(1, strSpecChar, strChar) > 0 Then
            strChar = strRepChar
        End If
        strOutput = strOutput & strChar
    Next i

    ' R|fffd|ckgabe
    fncReplaceSpecChar = strOutput

End Function

Function getWindowsUser() As String
    Dim lngLen As Long, lngX        As Long
    Dim strUserName                 As String

    strUserName = String$(254, 0)
    lngLen = 255
    lngX = apiGetUserName(strUserName, lngLen)
    If lngX <> 0 Then
        getWindowsUser = Left$(strUserName, lngLen - 1)
    Else
        getWindowsUser = ""
    End If
End Function

Function RangeExists(s As String) As Boolean
    On Error GoTo Nope
    RangeExists = Range(s).Count > 0

Nope:
End Function

Public Function GetLastRow(ByVal wks As Worksheet, _
                           Optional lRow As Long = 1, _
                           Optional lColumn As Long = 1) As Long
    On Error GoTo PROC_ERR

    With wks
        GetLastRow = .Cells(.Rows.Count, lColumn).End(xlUp).Row
        If GetLastRow < lRow Then
            GetLastRow = 0
        End If
    End With

PROC_EXIT:
    Exit Function
PROC_ERR:
    GetLastRow = 0
    Resume PROC_EXIT
End Function

Public Function GetLastColumn(vWks As Variant, Optional lRow = 1, Optional lColumn = 1) As Long
    Dim wks As Worksheet

    On Error GoTo PROC_ERR

    Select Case TypeName(vWks)
        Case "String"
            Set wks = ThisWorkbook.Worksheets(vWks)
        Case "Worksheet"
            Set wks = vWks
    End Select

    With wks
        GetLastColumn = .Cells(lRow, .Columns.Count).End(xlToLeft).Column
        If GetLastColumn < lColumn Then
            GetLastColumn = 0
        End If
    End With

PROC_EXIT:
    Set wks = Nothing
    Exit Function
PROC_ERR:
    GetLastColumn = 0
    Resume PROC_EXIT
End Function


Attribute VB_Name = "B_Mailversand"
Option Explicit
Sub mailversand()
Attribute mailversand.VB_ProcData.VB_Invoke_Func = "e\n14"

    Dim wkb                         As Workbook
    Dim wks                         As Worksheet
    Dim wks2                        As Worksheet
    Dim session                     As Object
    Dim db                          As Object
    Dim doc                         As Object
    Dim strTo                       As Variant
    Dim EmbedObj                    As Object
    Dim Workspace                   As Object
    Dim email                       As String
    Dim emailcc                     As String
    Dim mailtext                    As String
    Dim betreff                     As String
    Dim zielpfad                    As String
    Dim pfadanhang                  As String
    Dim lieferant                   As String
    Dim artbez                      As String
    Dim winuser                     As String
    Dim Fso                         As Object
    Dim gebindeinhalt               As Variant
    Dim anrede                      As String
    Dim projektname                 As String
    Dim i                           As Long
    Dim eingabe                     As Byte
    
    Set wkb = ActiveWorkbook
    Set wks = wkb.Sheets("Deklablatt")
    Call wks.Protect(gctSHEET_PASSWORD, , , , , True)
    'Set wks = wkb.Sheets("Deklablatt")
    'wks.Protect Password:="dmmcolumns", AllowFormattingCells:=True
    Set wks2 = wkb.Sheets("Pfade")
    
    eingabe = MsgBox("Wenn Sie die E-Mail aus A&D Verwaltung senden m|fffd|chten, dr|fffd|cken Sie bitte ''ja'', f|fffd|r den Versand aus der pers|fffd|nlichen Adresse heraus ''nein''.", vbYesNo, "Bitte beantworten!")
    
    lieferant = wks.Range("att_dnt_lieferant").Value
    If lieferant = "" Then lieferant = "UNBEKANNT"
    artbez = wks.Range("att_dnt_artbez").Value
    If artbez = "" Then artbez = "UNBEKANNT"
    If wks.Range("att_dnt_sortierung").Value <> "" Then
        artbez = artbez & " " & wks.Range("att_dnt_sortierung").Value
    End If
    gebindeinhalt = wks.Range("att_dnt_gebindeart").Value
    winuser = getWindowsUser

    Application.Calculation = xlCalculationAutomatic
    Application.ScreenUpdating = False
    Application.EnableEvents = False

    ' ************************************************************************************************
    ' Variablen zusammenbauen
    'Gebindeinhalt in Gebindeart ge|fffd|ndert TSc 13.10.14
    email = wks.Range("att_dnt_aplieferant")
    emailcc = wks.Range("att_dnt_apwerbeagentur")
    betreff = "Auftrag: " & wks.Range("att_dnt_projektnr").Value & " " & wks.Range("att_dnt_marke").Value & "/" & artbez & "/" & gebindeinhalt & "/" & lieferant & " vom " & wkb.BuiltinDocumentProperties("subject")
    betreff = Replace(Replace(betreff, Chr(10), ""), Chr(13), "")
    projektname = fncReplaceSpecChar("Dekla_" & wks.Range("att_dnt_projektnr").Value & "_" & artbez & "_" & gebindeinhalt & "_" & lieferant & "_" & wkb.BuiltinDocumentProperties("subject"), "")
    projektname = Replace(Replace(projektname, Chr(10), ""), Chr(13), "")
    If Len(projektname) > 230 Then projektname = Left(projektname, 230)
    If Left(wks.Range("att_dnt_aplief").Value, 4) = "Herr" Then
        anrede = "Sehr geehrter " & wks.Range("att_dnt_aplief").Value & "," & vbCrLf & vbCrLf
    ElseIf Left(wks.Range("att_dnt_aplief").Value, 4) = "Frau" Then
        anrede = "Sehr geehrte " & wks.Range("att_dnt_aplief").Value & "," & vbCrLf & vbCrLf
    Else
        anrede = "Sehr geehrte Damen und Herren," & vbCrLf & vbCrLf
    End If
    If eingabe = vbYes Then
        mailtext = anrede & "bitte senden Sie die ausgef|fffd|llte Dekla innerhalb von 5 Werktagen vollst|fffd|ndig ausgef|fffd|llt an BAP.XXX@lidl.com." & vbCrLf & vbCrLf & _
        "Bei den US-Artikeln werden Sie von der Compliance Abteilung der USA zur Kl|fffd|rung von deklaratorischen Fragen kontaktiert." & vbCrLf & vbCrLf & _
        "Zur Einhaltung der Lidl-internen Vorgaben m|fffd|ssen die angeh|fffd|ngten Richtlinien zum Ausf|fffd|llen des Excel-Deklarationsformblattes ber|fffd|cksichtigt werden." & vbCrLf & vbCrLf & _
        "Da die Deklarationsformbl|fffd|tter produktbezogen erstellt werden, f|fffd|llen Sie bitte immer zun|fffd|chst das dem jeweiligen Auftrag anh|fffd|ngende Deklarationsformblatt aus und beantworten anschlie|fffd|end die zus|fffd|tzlich generierten Fragen im unteren Teil des Formblattes." & vbCrLf & vbCrLf & _
        "Alte Formatvorlagen bzw. unvollst|fffd|ndig ausgef|fffd|llte Deklarationsformbl|fffd|tter werden nicht bearbeitet. Sollten sich w|fffd|hrend des Freigabeprozesses Korrekturen ergeben, sind Sie f|fffd|r die Aktualisierung des Deklarationsformblattes verantwortlich." & vbCrLf & vbCrLf & _
        "Das aktualisierte Deklarationsformblatt senden Sie bitte nach Erhalt der Druckdaten innerhalb von 2 Werktagen an die Werbeagentur." & vbCrLf & vbCrLf & _
        "Bitte beachten Sie, dass ab sofort bei neuen Artikeln (Wei|fffd|-) Muster der Prim|fffd|r- und Sekund|fffd|rverpackung innerhalb von 7 Werktagen an den u.g. VPM und die u.g. Werbeagentur gesendet werden m|fffd|ssen (siehe dazu auch Hinweisblatt)." & vbCrLf & vbCrLf & _
        "" & vbCrLf & vbCrLf & _
        "Vielen Dank im voraus" & vbCrLf & vbCrLf & _
        "" & vbCrLf & vbCrLf & _
        "Dear Sir or Madam," & vbCrLf & vbCrLf & _
        "the attached declaration file need to sent back to BAP.XXX@lidl.com within the next 5 days." & vbCrLf & vbCrLf & _
        "For US-Article you will be contacted by the compliance department of the US to clarify questions concerning the declaration." & vbCrLf & vbCrLf & _
        "When filling out the declaration sheet, you need to consider the attached guidelines in order to comply with the internal legal Lidl requirements." & vbCrLf & vbCrLf & _
        "As the declaration sheets are product specific you need to fill it out for each sort. Please answer the questions on the part below that are generated afterwards." & vbCrLf & vbCrLf & _
        "We do not consider nor work on outdated style sheets." & vbCrLf & vbCrLf & _
        "If there are any corrections during the approval process, you are responsible for the updating of the declaration sheet. After the reception of the printing data, you have to send the updated declaration sheet within two days to the agency." & vbCrLf & vbCrLf & _
        "In case of new articles, please do consider that you need to send (white) samples of the primary and secondary packaging within seven days to the agency as well as to the responsible packaging manager (see the attached information sheet)." & vbCrLf & vbCrLf & _
        "" & vbCrLf & vbCrLf & _
        "Thank you very much and kind regards." & vbCrLf & vbCrLf
    Else
        mailtext = anrede & "bitte senden Sie die ausgef|fffd|llte Dekla innerhalb von 5 Werktagen vollst|fffd|ndig ausgef|fffd|llt an BAP.XXX@lidl.com." & vbCrLf & vbCrLf & _
        "Bei den US-Artikeln werden Sie von der Compliance Abteilung der USA zur Kl|fffd|rung von deklaratorischen Fragen kontaktiert." & vbCrLf & vbCrLf & _
        "Zur Einhaltung der Lidl-internen Vorgaben m|fffd|ssen die angeh|fffd|ngten Richtlinien zum Ausf|fffd|llen des Excel-Deklarationsformblattes ber|fffd|cksichtigt werden." & vbCrLf & vbCrLf & _
        "Da die Deklarationsformbl|fffd|tter produktbezogen erstellt werden, f|fffd|llen Sie bitte immer zun|fffd|chst das dem jeweiligen Auftrag anh|fffd|ngende Deklarationsformblatt aus und beantworten anschlie|fffd|end die zus|fffd|tzlich generierten Fragen im unteren Teil des Formblattes." & vbCrLf & vbCrLf & _
        "Alte Formatvorlagen bzw. unvollst|fffd|ndig ausgef|fffd|llte Deklarationsformbl|fffd|tter werden nicht bearbeitet. Sollten sich w|fffd|hrend des Freigabeprozesses Korrekturen ergeben, sind Sie f|fffd|r die Aktualisierung des Deklarationsformblattes verantwortlich." & vbCrLf & vbCrLf & _
        "Das aktualisierte Deklarationsformblatt senden Sie bitte nach Erhalt der Druckdaten innerhalb von 2 Werktagen an die Werbeagentur." & vbCrLf & vbCrLf & _
        "Bitte beachten Sie, dass ab sofort bei neuen Artikeln (Wei|fffd|-) Muster der Prim|fffd|r- und Sekund|fffd|rverpackung innerhalb von 7 Werktagen an den u.g. VPM und die u.g. Werbeagentur gesendet werden m|fffd|ssen (siehe dazu auch Hinweisblatt)." & vbCrLf & vbCrLf & _
        "" & vbCrLf & vbCrLf & _
        "Vielen Dank im voraus" & vbCrLf & vbCrLf & _
        "" & vbCrLf & vbCrLf & _
        "Dear Sir or Madam," & vbCrLf & vbCrLf & _
        "the attached declaration file need to sent back to BAP.XXX@lidl.com within the next 5 days." & vbCrLf & vbCrLf & _
        "For US-Article you will be contacted by the compliance department of the US to clarify questions concerning the declaration." & vbCrLf & vbCrLf & _
        "When filling out the declaration sheet, you need to consider the attached guidelines in order to comply with the internal legal Lidl requirements." & vbCrLf & vbCrLf & _
        "As the declaration sheets are product specific you need to fill it out for each sort. Please answer the questions on the part below that are generated afterwards." & vbCrLf & vbCrLf & _
        "We do not consider nor work on outdated style sheets." & vbCrLf & vbCrLf & _
        "If there are any corrections during the approval process, you are responsible for the updating of the declaration sheet. After the reception of the printing data, you have to send the updated declaration sheet within two days to the agency." & vbCrLf & vbCrLf & _
        "In case of new articles, please do consider that you need to send (white) samples of the primary and secondary packaging within seven days to the agency as well as to the responsible packaging manager (see the attached information sheet)." & vbCrLf & vbCrLf & _
        "" & vbCrLf & vbCrLf & _
        "Thank you very much and kind regards." & vbCrLf & vbCrLf
    End If

    ' ************************************************************************************************
    ' Kopie des Deklablatts erstellen
    wkb.BuiltinDocumentProperties("category") = "Deklablatt 1.0"
    On Error GoTo fehler
    zielpfad = Environ("TEMP") & "\" & projektname & ".xlsm"    ' welches Laufwerk kann ich |fffd|ber alle L|fffd|nder benutzen????

weiter:
    wkb.SaveCopyAs (zielpfad)

    ' ************************************************************************************************
    ' Mail erstellen
    Set session = CreateObject("Notes.NotesSession")
    If eingabe = vbYes Then
        Set db = session.GetDatabase("LEUHQ0001AS4N/HUB/EU/LIDL", "LEU\ORG\EK\AD-Verwaltung.nsf") ' die Mail wird vom Sammelpostfach des Nutzers versendet. Die Daten zwischen den 1. G|fffd|nsef|fffd||fffd|chen sind ggf. unn|fffd|tig - diese Angabe steht im Lotus unter dem Namen (siehe Screenshot). Den Teil zwischen den zweiten G|fffd|nsef|fffd||fffd|chen erh|fffd|lt man |fffd|ber Datei ' Arbeitsumgebungen ' Arbeitsumgebungen verwalten ' Reiter E-Mail
    Else
        Set db = session.GetDatabase("", "")    ' die Mail wird vom privaten Postfach des Nutzers versendet
    End If
    If db.IsOpen = False Then db.OPENMAIL

    Set doc = db.CreateDocument
    With doc
        .body = mailtext & vbCrLf
        .form = "Memo"
        .SendTo = email
        .copyto = emailcc
        .Subject = betreff
        .Sign = "0"         ' meines Erachtens nicht n|fffd|tig
        .SaveMessageOnSend = True
        Set EmbedObj = doc.CreateRichTextItem(zielpfad).EmbedObject(1454, "", zielpfad)
        For i = 3 To 5
            pfadanhang = wks2.Cells(i, 2).Value
            If pfadanhang <> "" Then
                On Error GoTo fehler1
hier1:
                Set EmbedObj = doc.CreateRichTextItem(pfadanhang).EmbedObject(1454, "", pfadanhang)
                On Error GoTo fehler
            End If
        Next i
        .PostedDate = Now()
    End With

    Set Workspace = CreateObject("Notes.NotesUIWorkspace")
    Call Workspace.EDITDOCUMENT(True, doc)    'funktioniert im Lotus 8.5.2FP2. Dieser Befehl |fffd|ffnet die Mail als Entwurf

    Set EmbedObj = Nothing
    Set Workspace = Nothing
    Set db = Nothing
    Set doc = Nothing
    Set session = Nothing

    Kill zielpfad

ende:
    Application.ScreenUpdating = True
    Application.EnableEvents = True

    Exit Sub
    
fehler:
    Set Fso = CreateObject("Scripting.FileSystemObject")
    If Fso.FolderExists("H:\") = False Then
        If Fso.FolderExists("D:\") = False Then
            MsgBox ("Es ist ein Fehler aufgetreten! Der Vorgang wird beendet!")
            GoTo ende
        Else
            zielpfad = Replace(zielpfad, "C:\", "D:\")
            GoTo weiter
        End If
    Else
        zielpfad = Replace(zielpfad, "C:\", "H:\")
        GoTo weiter
    End If
    
    Exit Sub

fehler1:
    If Left(pfadanhang, 3) = "K:\" Then
        pfadanhang = Replace(pfadanhang, "K:\", "L:\")
        GoTo hier1
    Else
        MsgBox "Es ist ein Fehler aufgetreten. Der Vorgang wird abgebrochen!"
        GoTo ende
    End If


End Sub


Attribute VB_Name = "C1_Daten_aus_Export_|fffd|bernehmen"
Option Explicit
Sub daten_aus_export_uebernehmen()
Attribute daten_aus_export_uebernehmen.VB_ProcData.VB_Invoke_Func = "k\n14"

    Dim wkb                     As Workbook
    Dim wks                     As Worksheet
    Dim wks2                    As Worksheet
    Dim wkbquell                As Workbook
    Dim wksquell                As Worksheet
    Dim Verzeichnis, pfad       As String
    Dim pfadanhang              As String
    Dim suchwort                As String
    Dim vntSelectedItem         As Variant
    Dim v As Variant, vnames    As Variant
    Dim lfdnr                   As Variant
    Dim zeile                   As Long
    Dim spalte                  As Long
    Dim letztespalte            As Long
    Dim letztezeile             As Long
    Dim projektanlagedatum      As String

    Set wkb = ThisWorkbook
    Set wks = TFrontpage
    Set wks2 = TPathes
    pfad = wks2.Cells(2, 2).Value

'    If wks.ProtectContents = True Then
'        MsgBox "Zun|fffd|chst muss der Blattschutz aufgehoben werden. Der Vorgang wird abgebrochen!"
'        Exit Sub
'    End If
    
    Application.Calculation = xlCalculationAutomatic
    Application.ScreenUpdating = False
    Application.EnableEvents = False

    ' *********************************************************************************************
    ' *********************************************************************************************
    ' 1.) Datei |fffd|ffnen, aus der kopiert werden soll
'    MsgBox "Bitte w|fffd|hlen Sie die Exportdatei aus, aus der Sie die Daten kopieren m|fffd|chten!"
'    With Application.FileDialog(msoFileDialogOpen)
'        .AllowMultiSelect = False
'        .Filters.Clear
'        .Filters.Add "Excel-Files", "*.xlsx, *.xls, *.xlsm"
'        .InitialView = msoFileDialogViewDetails
'        .InitialFileName = ""
'
'        If .Show Then
'            pfad = .SelectedItems(1)
'
'            ' -----------------------------------------------------------------------------------
'            ' Pr|fffd|fung, dass die ausgew|fffd|hlte Datei auch eine Excel-Datei ist
'            If Right(pfad, 4) = ".xls" Or Right(pfad, 4) = "xlsx" Or Right(pfad, 4) = "xlsm" Then
'                Set wkbquell = Application.Workbooks.Open(pfad)
'                Set wksquell = wkbquell.ActiveSheet
'                letztezeile = GetLastRow(wksquell, 1, 1)
'            Else
'                MsgBox ("Bei der von Ihnen ausgew|fffd|hlten Datei handelt es sich nicht um eine Excel-Datei! Der Vorgang wird abgebrochen!")
'                GoTo ende
'            End If
'
'        Else
'            MsgBox ("Der Vorgang wurde abgebrochen!")
'            GoTo ende
'        End If
'    End With
    
    ' alternativ zu 1.): fester Pfad
    On Error GoTo fehler1
hier1:
    Set wkbquell = Application.Workbooks.Open(pfad)
    On Error GoTo fehler
    Set wksquell = wkbquell.ActiveSheet
    letztezeile = GetLastRow(wksquell, 1, 1)
    wks.Activate

    ' *********************************************************************************************
    ' *********************************************************************************************
    ' 2.) laufende Nr. eingeben
    lfdnr = Application.InputBox(Prompt:="Bitte geben Sie die laufende Nr. des Projekts ein!", Title:="Eingabe laufende Nr.", Default:="", Type:=1)
    If lfdnr = False Then
        MsgBox ("Der Vorgang wurde abgebrochen!")
        GoTo ende
    Else
        For zeile = 2 To letztezeile
            If wksquell.Cells(zeile, 1).Value = lfdnr Then GoTo weiter
        Next zeile
        MsgBox "lfd. Nr. nicht gefunden. Der Vorgang wird abgebrochen!"
        GoTo ende
    End If
    
weiter:
    ' *********************************************************************************************
    ' *********************************************************************************************
    ' 3.) Daten aus dem Export kopieren
    wks.Activate
    wks.Unprotect ("dmmcolumns")
    letztespalte = GetLastColumn(wksquell, 1, 1)
    
    wks.Range("att_dnt_projektnr").Value = lfdnr
    
    suchwort = "Starttermin"    ' Starttermin des Projekts merken, um das Deklablatt entsprechend abspeichern zu k|fffd|nnen
    Call spaltenueberschrift_suchen(wksquell, suchwort, letztespalte, spalte)
    projektanlagedatum = wksquell.Cells(zeile, spalte).Text
    wkb.BuiltinDocumentProperties("subject") = projektanlagedatum
    spalte = 0

'    suchwort = "IAN"
'    Call spaltenueberschrift_suchen(wksquell, suchwort, letztespalte, spalte)
'    wks.Range("att_dnt_ian").Value = wksquell.Cells(zeile, spalte)
'    spalte = 0
    
'    suchwort = "BAN"
'    Call spaltenueberschrift_suchen(wksquell, suchwort, letztespalte, spalte)
'    wks.Range("att_dnt_ban").Value = wksquell.Cells(zeile, spalte)
'    spalte = 0
    
    suchwort = "Marke"
    Call spaltenueberschrift_suchen(wksquell, suchwort, letztespalte, spalte)
    wks.Range("att_dnt_marke").Value = wksquell.Cells(zeile, spalte)
    spalte = 0
    
    suchwort = "PF"
    Call spaltenueberschrift_suchen(wksquell, suchwort, letztespalte, spalte)
    wks.Range("att_dnt_wg").Value = wksquell.Cells(zeile, spalte)
    spalte = 0
    
    suchwort = "Artikelbezeichnung"
    Call spaltenueberschrift_suchen(wksquell, suchwort, letztespalte, spalte)
    wks.Range("att_dnt_artbez").Value = wksquell.Cells(zeile, spalte)
    spalte = 0
    
    suchwort = "Sortierung"
    Call spaltenueberschrift_suchen(wksquell, suchwort, letztespalte, spalte)
    wks.Range("att_dnt_sortierung").Value = wksquell.Cells(zeile, spalte)
    spalte = 0
    
    suchwort = "Gebindeart"
    Call spaltenueberschrift_suchen(wksquell, suchwort, letztespalte, spalte)
    wks.Range("att_dnt_gebindeart").Value = wksquell.Cells(zeile, spalte)
    spalte = 0

    suchwort = "Listungsart"
    Call spaltenueberschrift_suchen(wksquell, suchwort, letztespalte, spalte)
    wks.Range("att_dnt_listungsart").Value = wksquell.Cells(zeile, spalte)
    spalte = 0
    
    suchwort = "Sprachkreise"
    Call spaltenueberschrift_suchen(wksquell, suchwort, letztespalte, spalte)
    wks.Range("att_dnt_sprachkreise").Value = wksquell.Cells(zeile, spalte)
    spalte = 0

'    suchwort = "Kopfland bei Sondersprachkreis"
'    Call spaltenueberschrift_suchen(wksquell, suchwort, letztespalte, spalte)
'    wks.Range("att_dnt_kopflaender").Value = wksquell.Cells(zeile, spalte)
'    spalte = 0
    
    suchwort = "Lieferant"
    Call spaltenueberschrift_suchen(wksquell, suchwort, letztespalte, spalte)
    wks.Range("att_dnt_lieferant").Value = wksquell.Cells(zeile, spalte)
    spalte = 0

    suchwort = "AP Lieferant"
    Call spaltenueberschrift_suchen(wksquell, suchwort, letztespalte, spalte)
    wks.Range("att_dnt_aplief").Value = wksquell.Cells(zeile, spalte)
    spalte = 0
  
    suchwort = "Mail Lieferant"
    Call spaltenueberschrift_suchen(wksquell, suchwort, letztespalte, spalte)
    wks.Range("att_dnt_aplieferant").Value = wksquell.Cells(zeile, spalte)
    spalte = 0

    suchwort = "EKL_lang"
    Call spaltenueberschrift_suchen(wksquell, suchwort, letztespalte, spalte)
    wks.Range("att_dnt_ekl").Value = wksquell.Cells(zeile, spalte)
    spalte = 0
    
    suchwort = "VPM_lang"
    Call spaltenueberschrift_suchen(wksquell, suchwort, letztespalte, spalte)
    wks.Range("att_dnt_vpm").Value = wksquell.Cells(zeile, spalte)
    spalte = 0
    
    suchwort = "INT/NAT"
    Call spaltenueberschrift_suchen(wksquell, suchwort, letztespalte, spalte)
    wks.Range("att_dnt_vhland").Value = wksquell.Cells(zeile, spalte)
    spalte = 0
        
    suchwort = "Agentur"
    Call spaltenueberschrift_suchen(wksquell, suchwort, letztespalte, spalte)
    wks.Range("att_dnt_werbeagentur").Value = wksquell.Cells(zeile, spalte)
    spalte = 0

'    suchwort = "AP Agentur"
'    Call spaltenueberschrift_suchen(wksquell, suchwort, letztespalte, spalte)
'    wks.Range("att_dnt_apwerbe").Value = wksquell.Cells(zeile, spalte)
'    spalte = 0
    
    suchwort = "Mail Agentur"
    Call spaltenueberschrift_suchen(wksquell, suchwort, letztespalte, spalte)
    wks.Range("att_dnt_apwerbeagentur").Value = wksquell.Cells(zeile, spalte)
    spalte = 0

'    suchwort = "Import-Artikel"
'    Call spaltenueberschrift_suchen(wksquell, suchwort, letztespalte, spalte)
'    If UCase(wksquell.Cells(zeile, spalte).Value) = "FALSCH" Then
'        wks.Range("att_dnt_importartikel").Value = "Nein"
'    Else
'        wks.Range("att_dnt_importartikel").Value = "Ja"
'    End If
'    spalte = 0
    
'    suchwort = "RLZ Lager <=20 T."
'    Call spaltenueberschrift_suchen(wksquell, suchwort, letztespalte, spalte)
'    If UCase(wksquell.Cells(zeile, spalte).Value) = "FALSCH" Then
'        wks.Range("att_dnt_rlz").Value = "Nein"
'    Else
'        wks.Range("att_dnt_rlz").Value = "Ja"
'    End If
'    spalte = 0
    
    '#### Warengruppenfragen neu aufbauen:
    Call GenArtGroupInterviews
    Call SetPrintArea(wks)

    wks.Protect Password:="dmmcolumns", AllowFormattingCells:=True
    
    wkbquell.Close False
    MsgBox ("Fertig! Die Daten wurden kopiert!")

ende:
    Application.ScreenUpdating = True
    Application.EnableEvents = True

    Exit Sub
fehler:
    MsgBox ("Es ist ein Fehler aufgetreten! Der Vorgang wird beendet!")
    GoTo ende

fehler1:
    If Left(pfad, 3) = "K:\" Then
        pfad = Replace(pfad, "K:\", "L:\")
        GoTo hier1
    Else
        GoTo fehler
    End If
End Sub
Attribute VB_Name = "C2_Suche_Spaltenueberschrift"
Option Explicit
Sub spaltenueberschrift_suchen(ByVal wksquell As Worksheet, suchwort As String, letztespalte As Long, ByRef spalte As Long)

For spalte = 1 To letztespalte
    If wksquell.Cells(1, spalte).Value = suchwort Then
        Exit Sub
    End If
Next spalte

MsgBox "Das Suchwort " & suchwort & " wurde im Export nicht gefunden! Der Vorgang wird fortgesetzt."

End Sub
Attribute VB_Name = "D_dnt_einfaerben"
Option Explicit
Sub dnt_einfaerben(ByVal wkb As Workbook, wks As Worksheet, aktion As String)

    Dim blattname                   As String
    Dim benanntebereiche            As Object
    Dim namebereich                 As String
    Dim rCellCheck                  As Range


    ' *******************************************************************************************************
    ' benannte Bereiche im Quellsheet auslesen
    blattname = wks.Name
    If InStr(1, blattname, " ") > 0 Then
        blattname = "'" & blattname & "'!"
    Else
        blattname = blattname & "!"
    End If

    For Each benanntebereiche In wkb.Names
        namebereich = Replace(benanntebereiche.Name, blattname, "")

        On Error Resume Next
        Set rCellCheck = Nothing
        Set rCellCheck = wks.Range(namebereich)
        On Error GoTo 0

        If rCellCheck Is Nothing Then
            '
        Else
            If InStr(1, namebereich, "_FilterDatabase") = 0 And InStr(1, namebereich, "Print_Area") = 0 Then
                If InStr(1, namebereich, "dnt_") > 0 Then
                    If aktion = "oeffnen" Then
                        wks.Range(namebereich).Font.ColorIndex = xlAutomatic
                    ElseIf aktion = "schliessen" Then
                        wks.Range(namebereich).Font.Color = COLOR_SPECIAL_BLUE
                    End If
                End If
            End If
        End If
    Next

End Sub



Attribute VB_Name = "DieseArbeitsmappe"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private Sub Workbook_open()
    Dim wkb                         As Workbook
    Dim wks                         As Worksheet
    Dim aktion                      As String

    '#### VBA aktiv -> Dummy ausblenden:
    Call ThisWorkbook.Unprotect(gctSHEET_PASSWORD)

    TFrontpage.Visible = xlSheetVisible
    TArticleGroup.Visible = xlSheetVeryHidden
    TArticleGroupInterviews.Visible = xlSheetVeryHidden
    TGeneralInterviews.Visible = xlSheetVeryHidden
    TIngredientsInterviews.Visible = xlSheetVeryHidden
    TAreas.Visible = xlSheetVeryHidden
    TPathes.Visible = xlSheetVeryHidden
    TAllergen.Visible = xlSheetVeryHidden

    Call ThisWorkbook.Protect(gctSHEET_PASSWORD)

    Set wkb = ActiveWorkbook
    Set wks = TFrontpage

    Application.DisplayAlerts = True

    aktion = "oeffnen"
    Call wks.Unprotect(gctSHEET_PASSWORD)
    'Call dnt_einfaerben(wkb, wks, aktion)

    '#### Warnmeldung ausblenden:
    wks.Range("A2").Value = Empty

    Call wks.Protect(gctSHEET_PASSWORD, , , , , True)
    Call ThisWorkbook.Protect(gctSHEET_PASSWORD)
End Sub

Private Sub Workbook_BeforeClose(Cancel As Boolean)
    Dim wkb                         As Workbook
    Dim wks                         As Worksheet
    Dim aktion                      As String
    Dim oLink                       As Hyperlink

    Application.EnableEvents = True

    Set wkb = ActiveWorkbook
    Set wks = TFrontpage

    'If wks.Range("zutatenverzeichnis").Value <> "" Then    ' beim leeren Blatt soll die Schrift nicht eingef|fffd|rbt werden, denn ggf. hat Lieferant keine Makros aktiviert
    aktion = "schliessen"
    Call wks.Unprotect(gctSHEET_PASSWORD)
    'Call dnt_einfaerben(wkb, wks, aktion)

    '#### Warnmeldung anzeigen:
    wks.Range("A2").Value = "Achtung: Bitte Excel-Makros aktivieren! (Attention: Please activate excel macros)"

    '#### Bei nicht gepflegten sonstigen Pflichtangaben, Warnhinweis anzeigen:
    If Len(wks.Range("MiscReqStatement").Value) = 0 Then
        With wks.Range("MiscReqStatement")
            .Value = """Bitte geben Sie hier die sonstigen Pflichtangaben an (Please include other mandatory statements here)"""
            .Font.Color = COLOR_SPECIAL_BLUE
        End With
    End If

    Call ThisWorkbook.Unprotect(gctSHEET_PASSWORD)
    TFrontpage.Visible = xlSheetVisible
    TArticleGroup.Visible = xlSheetVeryHidden
    TArticleGroupInterviews.Visible = xlSheetVeryHidden
    TGeneralInterviews.Visible = xlSheetVeryHidden
    TIngredientsInterviews.Visible = xlSheetVeryHidden
    TAreas.Visible = xlSheetVeryHidden
    TPathes.Visible = xlSheetVeryHidden
    TAllergen.Visible = xlSheetVeryHidden

    '#### Zellen blau f|fffd|rben:
    TArticleGroup.Cells.Font.Color = COLOR_SPECIAL_BLUE
    TArticleGroupInterviews.Cells.Font.Color = COLOR_SPECIAL_BLUE
    TGeneralInterviews.Cells.Font.Color = COLOR_SPECIAL_BLUE
    TIngredientsInterviews.Cells.Font.Color = COLOR_SPECIAL_BLUE

    Application.DisplayAlerts = False
    Call wkb.Save
    Application.DisplayAlerts = True
    'End If
End Sub
Attribute VB_Name = "E_Werte_loeschen"
Option Explicit
Sub werte_loeschen()
Attribute werte_loeschen.VB_ProcData.VB_Invoke_Func = "L\n14"

    Dim wkb                         As Workbook
    Dim wks                         As Worksheet
    Dim benanntebereiche            As Object
    Dim namebereich                 As String
    Dim blattname                   As String
    Dim rCellCheck                  As Range

    On Error GoTo fehler
    Application.EnableEvents = False
    Application.ScreenUpdating = False
    
    Set wkb = ActiveWorkbook
    Set wks = wkb.ActiveSheet
    blattname = wks.Name & "!"
    
    wks.Unprotect (gctSHEET_PASSWORD)

    For Each benanntebereiche In wkb.Names
        namebereich = Replace(benanntebereiche.Name, blattname, "")

        If InStr(1, namebereich, "att_") > 0 Then
            wks.Range(namebereich).Value = ""
        End If
    Next

ende:
    wks.Protect (gctSHEET_PASSWORD)
    Application.ScreenUpdating = True
    Application.EnableEvents = True
    
Exit Sub
fehler:
    MsgBox "Es ist ein Fehler aufgetreten!"
    GoTo ende
    
End Sub
Attribute VB_Name = "MFileDialogs"
Option Explicit

'#### Findet Fenster nach Fenster-Klasse und Fenster-Namen
Private Declare PtrSafe Function FindWindow Lib "user32" Alias "FindWindowA" (ByVal lpClassName As String, ByVal lpWindowName As String) As Long

'#### Datei-|fffd|ffnen-/Speichern-Dialog
Private Declare PtrSafe Function GetOpenFileName Lib "comdlg32.dll" Alias "GetOpenFileNameA" (pOpenfilename As GetFileArguments) As Long
Private Declare PtrSafe Function GetSaveFileName Lib "comdlg32.dll" Alias "GetSaveFileNameA" (pOpenfilename As GetFileArguments) As Long

Private Type GetFileArguments
    lStructSize                     As Long
    hwndOwner                       As Long
    hInstance                       As Long
    lpstrFilter                     As String
    lpstrCustomFilter               As String
    nMaxCustFilter                  As Long
    nFilterIndex                    As Long
    lpstrFile                       As String
    nMaxFile                        As Long
    lpstrFileTitle                  As String
    nMaxFileTitle                   As Long
    lpstrInitialDir                 As String
    lpstrTitle                      As String
    flags                           As Long
    nFileOffset                     As Integer
    nFileExtension                  As Integer
    lpstrDefExt                     As String
    lCustData                       As Long
    lpfnHook                        As Long
    lpTemplateName                  As String
End Type

Private Const OFN_HIDEREADONLY      As Long = &H4
Private Const OFN_ALLOWMULTISELECT  As Long = &H200
Private Const OFN_PATHMUSTEXIST     As Long = &H800
Private Const OFN_FILEMUSTEXIST     As Long = &H1000
Private Const OFN_EXPLORER          As Long = &H80000

',------------------------------------------------------------------------------------
'| Procedure  : Function GetHWnd
'| ReturnType : Long
'| DateTime   : 20.04.2006 09:41
'| Author     : Kremm
'| Purpose    : Findet das Window-Handle jedes Fensters
'`------------------------------------------------------------------------------------
'
Public Function GetHwnd(obj As Object) As Long
    Dim lVersion                    As Long
    Dim tClassName                  As String
    Dim tWindowName                 As String

    If TypeOf obj Is Application Then
        tWindowName = obj.Caption
        tClassName = "xlMain"
    ElseIf TypeOf obj Is UserForm Then
        lVersion = Int(Val(Application.Version))
        tWindowName = obj.Caption
        If lVersion < 9 Then
            tClassName = "ThunderXFrame"
        Else
            tClassName = "ThunderDFrame"
        End If
    End If
    GetHwnd = FindWindow(tClassName, tWindowName)
End Function

',------------------------------------------------------------------------------------
'| Procedure  : Function SelectOpenFile
'| ReturnType : String
'| DateTime   : 20.04.2006 09:41
'| Author     : Kremm
'| Purpose    : Zeigt den Datei-|fffd|ffnen-Dialog an
'`------------------------------------------------------------------------------------
'
Public Function SelectOpenFile(owner As Object, tPrompt As String, tPath As String, ParamArray filter()) As String
    Dim args                        As GetFileArguments
    Dim lReturn                     As Long
    Dim sFilter                     As String
    Dim i                           As Long
    Dim tScript                     As String

    If Application.OperatingSystem Like "Windows*" Then
        If UBound(filter) - LBound(filter) > 0 Then
            For i = LBound(filter) To UBound(filter)
                sFilter = sFilter & filter(i) & vbNullChar
            Next i
        Else
            sFilter = "Alle Dateien (*.*)" & vbNullChar & "*.*" & vbNullChar
        End If

        With args
            .lStructSize = Len(args)
            .hwndOwner = GetHwnd(owner)
            .lpstrFilter = sFilter
            .nFilterIndex = 1
            .hInstance = 0
            .lpstrFile = String(257, vbNullChar)
            .nMaxFile = Len(args.lpstrFile) - 1
            .lpstrFileTitle = args.lpstrFile
            .nMaxFileTitle = args.nMaxFile
            .lpstrInitialDir = tPath & vbNullChar
            .lpstrTitle = tPrompt
            .flags = OFN_PATHMUSTEXIST Or OFN_FILEMUSTEXIST Or OFN_EXPLORER Or OFN_HIDEREADONLY
        End With

        lReturn = GetOpenFileName(args)

        If lReturn = 0 Then
            SelectOpenFile = vbNullString
        Else
            SelectOpenFile = Left(args.lpstrFile, InStr(args.lpstrFile, vbNullChar) - 1)
        End If
    Else
        tScript = _
        "set applescript's text item delimiters to "","" " & vbNewLine & _
                  "set theFiles to (choose file of type " & _
                " {""" & filter(LBound(filter)) & """} " & _
                  "with prompt """ & tPrompt & """ default location alias """ & _
                  tPath & """ multiple selections allowed false) as string" & vbNewLine & _
                  "set applescript's text item delimiters to """" " & vbNewLine & _
                  "return theFiles"
        On Error GoTo UserAbort
        SelectOpenFile = MacScript(tScript)
        On Error GoTo 0
    End If
    Exit Function

UserAbort:
    SelectOpenFile = vbNullString
End Function

',------------------------------------------------------------------------------------
'| Procedure  : Function SelectOpenFiles
'| ReturnType : String
'| DateTime   : 20.04.2006 09:41
'| Author     : Kremm
'| Purpose    : Zeigt den Datei-|fffd|ffnen-Dialog an, und unterst|fffd|tzt Mehrfachauswahl
'`------------------------------------------------------------------------------------
'
Public Function SelectOpenFiles(owner As Object, tPrompt As String, tPath As String, ParamArray filter()) As Variant
    Dim args                        As GetFileArguments
    Dim lReturn                     As Long
    Dim sFilter                     As String
    Dim i                           As Long
    Dim tResult()                   As String
    Dim tScript                     As String
    Dim tTemp                       As String
    Dim tFiles()                    As String

    If Application.OperatingSystem Like "Windows*" Then

        If UBound(filter) - LBound(filter) > 0 Then
            For i = LBound(filter) To UBound(filter)
                sFilter = sFilter & filter(i) & Chr(0)
            Next i
        Else
            sFilter = "Alle Dateien" & Chr(0) & "*.*" & Chr(0)
        End If

        With args
            .lStructSize = Len(args)
            .hwndOwner = GetHwnd(owner)
            .lpstrFilter = sFilter
            .nFilterIndex = 1
            .hInstance = 0
            .lpstrFile = String(1026, Chr(0))    '#### Maximal 1024 Zeilen + zwei 0-Bytes am Ende
            .nMaxFile = Len(args.lpstrFile) - 2
            .lpstrFileTitle = args.lpstrFile
            .nMaxFileTitle = args.nMaxFile
            .lpstrInitialDir = tPath & Chr(0)
            .lpstrTitle = tPrompt
            .flags = OFN_PATHMUSTEXIST Or OFN_FILEMUSTEXIST Or OFN_ALLOWMULTISELECT Or OFN_EXPLORER Or OFN_HIDEREADONLY
        End With

        lReturn = GetOpenFileName(args)

        If lReturn = 0 Then
            SelectOpenFiles = Null
        Else
            tTemp = Left(args.lpstrFile, InStr(args.lpstrFile, Chr(0) & Chr(0)) - 1)
            If InStr(tTemp, Chr(0)) > 0 Then
                tFiles = Split(tTemp, Chr(0))
                ReDim tResult(LBound(tFiles) To UBound(tFiles) - 1)
                For i = LBound(tFiles) + 1 To UBound(tFiles)
                    tResult(i - 1) = tFiles(LBound(tFiles)) & "\" & tFiles(i)
                Next i
            Else
                ReDim tResult(1 To 1)
                tResult(1) = tTemp
            End If
            SelectOpenFiles = tResult
        End If
    Else
        tScript = _
        "set applescript's text item delimiters to "","" " & vbNewLine & _
                  "set theFiles to (choose file of type " & _
                " {""" & filter(LBound(filter)) & """} " & _
                  "with prompt """ & tPrompt & """ default location alias """ & _
                  tPath & """ multiple selections allowed true) as string" & vbNewLine & _
                  "set applescript's text item delimiters to """" " & vbNewLine & _
                  "return theFiles"
        On Error GoTo UserAbort
        SelectOpenFiles = Split(MacScript(tScript), ",")
        On Error GoTo 0
    End If
    Exit Function

UserAbort:
    SelectOpenFiles = Null
End Function
Attribute VB_Name = "MGlobals"
Option Explicit

Public Const gctSHEET_PASSWORD As String = "dmmcolumns"

Public dicRanges As Dictionary

Public Function GetRange(tName As String) As Range
    If dicRanges Is Nothing Then Set dicRanges = New Dictionary
    If dicRanges.Exists(tName) Then
        Set GetRange = dicRanges.Item(tName)
        Exit Function
    End If
    On Error GoTo RngNotFound
    Set GetRange = TFrontpage.Range(tName)
    On Error GoTo 0
    Call dicRanges.Add(tName, GetRange)
    Exit Function
RngNotFound:
    Call MsgBox("Range '" & tName & "' not found!", vbCritical)
    Set GetRange = Nothing
End Function

Public Property Get GetAllergen() As Dictionary
    Static dicAllergen As Dictionary
    
    If dicAllergen Is Nothing Then
        Set dicAllergen = TAllergen.GetAllergen()
    End If
    
    Set GetAllergen = dicAllergen
End Property

Public Function GetLastRowRev(wks As Worksheet, lCol As Long, Optional lMinRow As Long = 1) As Long
    GetLastRowRev = wks.Cells(wks.Rows.Count, lCol).End(xlUp).Row
    If GetLastRowRev < lMinRow Then GetLastRowRev = lMinRow
End Function
Attribute VB_Name = "MKremm"
Option Explicit
Option Private Module

Private Const LAST_COL              As Long = 26

Public Enum COLORS
    COLOR_MAINHEADER = 14545386
    COLOR_QUESTION = 14211288
    COLOR_SPECIAL_BLUE = 12611584
End Enum

Private Type T_BOLDPOS
    lStart                          As Long
    lLength                         As Long
End Type

Private Const IGNORE_CHARS          As String = "!""|fffd|$&/=?{[]}\*+~'#|<>" & vbCr & vbLf
Private Const SPEPARATOR_CHARS      As String = ";,:().%"

Public Sub RegenInterviews()
    With Application
        .ScreenUpdating = False
        .Calculation = xlCalculationManual
        .EnableEvents = False
    End With

    Call TFrontpage.Unprotect(gctSHEET_PASSWORD)
    Call DeleteInterviews
    Call GenGeneralInterviews
    Call GenIngridientsInterviews
    Call GenArtGroupInterviews
    Call SetPrintArea(TFrontpage)
    Call TFrontpage.Protect(gctSHEET_PASSWORD, , , , , True)

    With Application
        .ScreenUpdating = True
        .Calculation = xlCalculationAutomatic
        .EnableEvents = True
    End With
End Sub

Public Sub DeleteInterviews()
    Dim wks                         As Worksheet
    Dim lStartRow                   As Long
    Dim lLastRow                    As Long
    Dim lInsertRow                  As Long
    Dim i                           As Long

    Set wks = TFrontpage

    With wks
        lStartRow = wks.Range("dnt_ueberschrift2").Row + 2
        lLastRow = GetLastRowRev(wks, 1, lStartRow)
        Call .Range(.Rows(lStartRow), .Rows(lLastRow)).Delete
    End With
    
    '#### Cache l|fffd|schen:
    Set dicRanges = New Dictionary
End Sub

Public Sub GenGeneralInterviews()
    Dim wks                         As Worksheet
    Dim lStartRow                   As Long
    Dim lLastRow                    As Long
    Dim lInsertRow                  As Long
    Dim i                           As Long

    Set wks = TFrontpage

    '#### Einf|fffd|geposition finden:
    lStartRow = wks.Range("dnt_ueberschrift2").Row + 2
    lStartRow = GetLastRowRev(wks, 1, lStartRow)
    lInsertRow = lStartRow

    '#### Allgem. Fragen kopieren:
    '### |fffd|berschrift:
    Call WriteBlock(wks, lInsertRow, "allgemeine Fragen: (general questions:)", COLOR_MAINHEADER, True)
    Call WriteBlock(wks, lInsertRow + 1, , , , 3)
    lInsertRow = lInsertRow + 2
    '### Fragen:
    lLastRow = GetLastRowRev(TGeneralInterviews, 1, 1)
    With TGeneralInterviews
        For i = 2 To lLastRow
            If Len(.Cells(i, 2)) > 0 Then
                Call WriteBlock(wks, lInsertRow, .Cells(i, 1), COLOR_QUESTION, True, .Rows(i).RowHeight)
                Call WriteBlock(wks, lInsertRow + 1, , , , .Rows(i).RowHeight, True)
                Call WriteFormulaBlock(wks, lInsertRow + 1, 28)
                
                lInsertRow = lInsertRow + 2
            End If
        Next i
    End With
    Call WriteBlock(wks, lInsertRow, " ", , , 17.25)

    '### Range anlegen:
    Call wks.Names.Add("dnt_GeneralInterviews", "=$A$" & CStr(lStartRow) & ":$Z$" & CStr(lInsertRow), True)
End Sub

Public Sub GenIngridientsInterviews()
    Dim wks                         As Worksheet
    Dim lStartRow                   As Long
    Dim lLastRow                    As Long
    Dim lInsertRow                  As Long
    Dim i                           As Long

    Dim tIngredient                 As String
    Dim tIngredient2                As String
    Dim tText                       As String
    Dim tOldIngredient              As String
    Dim tOldIngredient2             As String
    Dim lStartRow2                  As Long
    Dim dRowHeight                  As Double
    Dim lTitleRow                   As Long

    Set wks = TFrontpage

    '#### Einf|fffd|geposition finden:
    lStartRow = wks.Range("dnt_ueberschrift2").Row + 2
    lStartRow = GetLastRowRev(wks, 1, lStartRow)
    lInsertRow = lStartRow

    '#### Fragen zu den Zutaten kopieren:
    '### |fffd|berschrift:
    Call WriteBlock(wks, lInsertRow, "allgemeine Fragen zu den Zutaten: (general questions to ingredients:)", COLOR_MAINHEADER, True)
    Call WriteBlock(wks, lInsertRow + 1, , , , 3)
    lTitleRow = lInsertRow
    lInsertRow = lInsertRow + 2
    '### Fragen:
    lLastRow = GetLastRowRev(TIngredientsInterviews, 1, 1)
    With TIngredientsInterviews
        For i = 2 To lLastRow
            If Len(.Cells(i, 5)) > 0 Then
                tIngredient = Trim(.Cells(i, 2))
                tIngredient2 = Trim(.Cells(i, 3))
                dRowHeight = .Rows(i).RowHeight
                tText = tIngredient & ": Frage " & .Cells(i, 1) & ": " & .Cells(i, 4)
                Call WriteBlock(wks, lInsertRow, tText, COLOR_QUESTION, True, dRowHeight)
                Call WriteBlock(wks, lInsertRow + 1, , , , dRowHeight, True)
                Call WriteFormulaBlock(wks, lInsertRow + 1, 28)
                
                tIngredient = CleanUpName(tIngredient)
                tIngredient2 = CleanUpName(tIngredient2)
                If Len(tOldIngredient) = 0 Then
                    tOldIngredient = tIngredient
                    tOldIngredient2 = tIngredient2
                    lStartRow2 = lInsertRow
                End If
                If tIngredient <> tOldIngredient Then
                    Call wks.Names.Add("Interview_" & tOldIngredient, "=$A$" & CStr(lStartRow2) & ":$Z$" & CStr(lInsertRow - 1), True)
                    If Len(tOldIngredient2) > 0 Then
                        Call wks.Names.Add("Interview_" & tOldIngredient2, "=$A$" & CStr(lStartRow2) & ":$Z$" & CStr(lInsertRow - 1), True)
                    End If
                    tOldIngredient = tIngredient
                    tOldIngredient2 = tIngredient2
                    lStartRow2 = lInsertRow
                End If
                lInsertRow = lInsertRow + 2
            End If
        Next i
    End With

    Call wks.Names.Add("Interview_" & tOldIngredient, "=$A$" & CStr(lStartRow2) & ":$Z$" & CStr(lInsertRow - 1), True)
    If Len(tOldIngredient2) > 0 Then
        Call wks.Names.Add("Interview_" & tOldIngredient2, "=$A$" & CStr(lStartRow2) & ":$Z$" & CStr(lInsertRow - 1), True)
    End If

    Call WriteBlock(wks, lInsertRow, " ", , , 17.25)

    '### Range anlegen:
    Call wks.Names.Add("dnt_IngridientsInterviews", "=$A$" & CStr(lStartRow) & ":$Z$" & CStr(lInsertRow), True)
    Call wks.Names.Add("IngridientsInterviewsItems", "=$A$" & CStr(lStartRow + 2) & ":$Z$" & CStr(lInsertRow), True)

    '### Fragen verstecken:
    wks.Range("A" & CStr(lStartRow + 2) & ":Z" & CStr(lInsertRow - 1)).EntireRow.Hidden = True
End Sub

Public Function CleanUpName(tName As String) As String
    Dim tResult                     As String

    tResult = Replace(tName, vbCr, vbNullString)
    tResult = Replace(tResult, vbLf, vbNullString)
    tResult = Replace(tResult, "-", "_")
    CleanUpName = Trim(Replace(tResult, " ", "_"))
End Function

Public Sub GenArtGroupInterviews()
    Dim wks                         As Worksheet
    Dim lStartRow                   As Long
    Dim lLastRow                    As Long
    Dim lInsertRow                  As Long
    Dim i                           As Long
    Dim lTitleRow                   As Long
    Dim lQuestionCounter            As Long

    Dim tGroupNr                    As String
    Dim tGroupName                  As String
    Dim tText                       As String

    Set wks = TFrontpage

    '#### Alte Fragen l|fffd|schen:
    Call TryDeleteRange(wks, "dnt_ArtGroupInterviews")

    '#### Einf|fffd|geposition finden:
    lStartRow = wks.Range("dnt_IngridientsInterviews").Row + wks.Range("dnt_IngridientsInterviews").Rows.Count
    lInsertRow = lStartRow

    '#### Warengruppen-Fragen kopieren:
    tGroupNr = wks.Range("att_dnt_wg").Value
    '### Warengruppe suchen:
    lLastRow = GetLastRowRev(TArticleGroup, 1, 1)
    With TArticleGroup
        For i = 2 To lLastRow
            If CStr(.Cells(i, 1)) = tGroupNr Then
                tGroupName = CStr(.Cells(i, 2))
                Exit For
            End If
        Next i
    End With
    '### |fffd|berschrift:
    tText = "allgemeine Fragen zu der Warengruppe: (general questions to item group and family number:)" & tGroupNr & " " & tGroupName & ":"
    Call WriteBlock(wks, lInsertRow, tText, COLOR_MAINHEADER, True)
    Call WriteBlock(wks, lInsertRow + 1, , , , 3)
    lTitleRow = lInsertRow
    lInsertRow = lInsertRow + 2
    '### Fragen:
    lLastRow = GetLastRowRev(TArticleGroupInterviews, 1, 1)
    With TArticleGroupInterviews
        For i = 2 To lLastRow
            If CStr(.Cells(i, 1)) = tGroupNr And Len(.Cells(i, 3)) > 0 Then
                Call WriteBlock(wks, lInsertRow, .Cells(i, 2), COLOR_QUESTION, True, .Rows(i).RowHeight)
                Call WriteBlock(wks, lInsertRow + 1, , , , .Rows(i).RowHeight, True)
                Call WriteFormulaBlock(wks, lInsertRow + 1, 28)
                
                lInsertRow = lInsertRow + 2
                lQuestionCounter = lQuestionCounter + 1
            End If
        Next i
    End With
    Call WriteBlock(wks, lInsertRow, "", , , 17.25)    ' XXXXXXX

    '### Range anlegen:
    Call wks.Names.Add("dnt_ArtGroupInterviews", "=$A$" & CStr(lStartRow) & ":$Z$" & CStr(lInsertRow), True)

    '#### |fffd|berschrift ausblenden, falls keine Fragen vorhanden sind:
    If lQuestionCounter = 0 Then
        With wks
            .Rows(lTitleRow).Hidden = True
            .Rows(lTitleRow + 2).Hidden = True
        End With
    End If
End Sub

Private Sub WriteFormulaBlock(wks As Worksheet, lRow As Long, lCol As Long)
    With wks.Cells(lRow, lCol)
        .Formula = "=$A$" & CStr(lRow)
        .WrapText = True
        .Font.Color = COLOR_SPECIAL_BLUE
        .Locked = True
    End With
End Sub

Private Sub WriteBlock(wks As Worksheet, lRow As Long, Optional tText As String = vbNullString, Optional lColor As Long = -1, Optional bBold As Boolean = False, Optional dRowHeight As Double = 30.75, Optional bUnlock As Boolean = False, Optional bVisible As Boolean = True)
    With wks
        With .Range(.Cells(lRow, 1), .Cells(lRow, LAST_COL))
            Call .Merge
            If lColor > 0 Then
                .Interior.Color = lColor
            End If
            If bBold Then
                .Font.Bold = True
            End If
            If bUnlock Then
                .Locked = False
                .WrapText = True
            End If
        End With
        If Len(tText) > 0 Then
            .Cells(lRow, 1).WrapText = True
            .Cells(lRow, 1).Value = tText
        End If
        With .Rows(lRow)
            If dRowHeight > 0 Then
                .RowHeight = dRowHeight
            End If
            If Not bVisible Then
                .Hidden = True
            End If
        End With
    End With
End Sub

Private Function GetLastRowRev(wks As Worksheet, lCol As Long, Optional lMinRow As Long = 1)
    GetLastRowRev = wks.Cells(wks.Rows.Count, lCol).End(xlUp).Row
    If GetLastRowRev < lMinRow Then GetLastRowRev = lMinRow
End Function

Public Function ExtractIngredients(tText As String) As String()
    Dim i                           As Long
    Dim c                           As String * 1
    Dim tIngredient                 As String
    Dim tIngredients()              As String
    Dim lCounter                    As Long
    Dim dicAllergen                 As Dictionary

    Set dicAllergen = GetAllergen()

    For i = 1 To Len(tText)
        c = Mid(tText, i, 1)
        If InStr(IGNORE_CHARS, c) > 0 Then
            '## IGNORE!
        ElseIf InStr(SPEPARATOR_CHARS, c) > 0 Then
            If Len(tIngredient) > 0 Then
                lCounter = lCounter + 1
                ReDim Preserve tIngredients(1 To lCounter)
                tIngredients(lCounter) = Trim(tIngredient)
                tIngredient = vbNullString
            End If
        Else
            tIngredient = tIngredient & c
        End If
    Next i
    If Len(tIngredient) > 0 Then
        lCounter = lCounter + 1
        ReDim Preserve tIngredients(1 To lCounter)
        tIngredients(lCounter) = Trim(tIngredient)
    End If

    ExtractIngredients = tIngredients
End Function

Public Sub MarkAllergen()
    Dim rngCell                     As Range
    Dim tText                       As String
    Dim i                           As Long
    Dim c                           As String * 1
    Dim tIngredient                 As String
    Dim tIngredients()              As String
    Dim lCounter                    As Long
    Dim dicAllergen                 As Dictionary
    Dim lStartPos                   As Long

    Set dicAllergen = GetAllergen()

    Set rngCell = TFrontpage.Range("zutatenverzeichnis")
    tText = CStr(rngCell.Value)

    rngCell.Font.Bold = False

    lStartPos = 1
    For i = 1 To Len(tText)
        c = Mid(tText, i, 1)
        If InStr(IGNORE_CHARS, c) > 0 Then
            '## IGNORE!
        ElseIf InStr(SPEPARATOR_CHARS, c) > 0 Then
            If Len(tIngredient) > 0 Then
                If dicAllergen.Exists(Trim(tIngredient)) Then
                    rngCell.Characters(lStartPos, i - lStartPos).Font.Bold = True
                End If
                tIngredient = vbNullString
                lStartPos = i + 1
            End If
        Else
            tIngredient = tIngredient & c
        End If
    Next i
    If Len(tIngredient) > 0 Then
        If dicAllergen.Exists(Trim(tIngredient)) Then
            rngCell.Characters(lStartPos, i - lStartPos).Font.Bold = True
        End If
    End If
End Sub

Public Sub ShowRange(wks As Worksheet, tRangeName As String, Optional bShow As Boolean = True)
    On Error Resume Next   '#### <- Manche Zutaten haben keine Fragen
    wks.Range(tRangeName).EntireRow.Hidden = Not bShow
End Sub

Public Sub SetPrintArea(wks As Worksheet)
    Dim lLastRow                    As Long

    lLastRow = GetLastRowRev(wks, 1, 166) + 1
    If wks.Cells(lLastRow, 1).MergeCells Then
        lLastRow = lLastRow + wks.Cells(lLastRow, 1).MergeArea.Rows.Count - 1
    End If
    
    wks.PageSetup.PrintArea = "A1:Z" & CStr(lLastRow)
End Sub

Private Sub TryDeleteRange(wks As Worksheet, tRange As String)
    On Error Resume Next
    Call wks.Range(tRange).EntireRow.Delete
End Sub

Public Sub NewNutritionalTable()
    Dim rngNutritionalTable As Range
    Dim lRowCount As Long

    Dim lRow As Long
    Dim i As Long
    Dim lColCount As Long
    Dim rngInser As Range
    Dim rngInsert As Range
    
    Call TFrontpage.Unprotect(gctSHEET_PASSWORD)
    
    With Application
        .EnableEvents = False
        .ScreenUpdating = False
        .Calculation = xlCalculationManual
    End With
    
    Set rngNutritionalTable = TFrontpage.Range("dnt_NutritionalTable")
    lRow = rngNutritionalTable.Row + rngNutritionalTable.Rows.Count
    lRowCount = rngNutritionalTable.Rows.Count
    lColCount = rngNutritionalTable.Columns.Count
    
    With rngNutritionalTable.Parent
        For i = 1 To lRowCount
            Call .Rows(lRow).Insert
        Next i
        
        Set rngInsert = TFrontpage.Range(TFrontpage.Cells(lRow, 1), TFrontpage.Cells(lRow + lRowCount - 1, lColCount))
        Call rngNutritionalTable.Copy(rngInsert)
        
        For i = 1 To lRowCount
             .Rows(lRow + i - 1).RowHeight = .Rows(rngNutritionalTable.Row + i - 1).RowHeight
        Next i
        
    End With
    
    With Application
        .Calculation = xlCalculationAutomatic
        .ScreenUpdating = True
        .EnableEvents = True
    End With
    
    Call TFrontpage.Protect(gctSHEET_PASSWORD, , , , , True)
End Sub




Attribute VB_Name = "MMisc"
Option Explicit

'Public Sub InsertRows()
'    Dim rngRow                      As Range
'    Dim i                           As Long
'
'    Set rngRow = Selection
'
'    For i = 1 To 30
'        Call rngRow.EntireRow.Insert(xlShiftDown)
'    Next i
'End Sub
'
'Public Sub UnprotectAll()
'    Dim wks                         As Worksheet
'
'    For Each wks In ThisWorkbook.Sheets
'        Call wks.Unprotect(gctSHEET_PASSWORD)
'    Next wks
'End Sub
'
'Public Sub FindX()
'    Dim wks                         As Worksheet
'    Dim rngCell                     As Range
'
'    For Each wks In ThisWorkbook.Sheets
'        For Each rngCell In wks.UsedRange.Cells
'            If rngCell.Value Like "*X*" Then
'                If rngCell.Font.ColorIndex <> 3 Then
'                    Call MsgBox(rngCell.Address, vbInformation)
'                End If
'            End If
'        Next rngCell
'    Next wks
'End Sub

Attribute VB_Name = "MPictures"
Option Explicit

Private Declare PtrSafe Function OpenClipboard Lib "user32" (ByVal hwnd As Long) As Long
Private Declare PtrSafe Function CloseClipboard Lib "user32" () As Long
Private Declare PtrSafe Function GetClipboardData Lib "user32" (ByVal wFormat As Long) As Long
Declare PtrSafe Function SelectObject Lib "gdi32" (ByVal hdc As Long, ByVal hObject As Long) As Long

Private Const CF_BITMAP             As Long = 2

Private Const PIC_MAX_BYTES As Long = 1024& * 1024& * 3&

Public Sub ImportSymbols()
    Call DoImportPictures("dnt_ItemSymbols", 50)
End Sub

Public Sub ImportPictures()
    Call DoImportPictures("dnt_ItemPictures", 100)
End Sub

Public Sub ClearSymbols()
    If MsgBox("ACHTUNG! Wollen Sie wirklich alle Symbole l|fffd|schen?", vbExclamation + vbYesNo) = vbNo Then Exit Sub

    Call DoClearPictures("dnt_ItemSymbols")
End Sub

Public Sub ClearPictures()
    If MsgBox("ACHTUNG! Wollen Sie wirklich alle Bilder l|fffd|schen?", vbExclamation + vbYesNo) = vbNo Then Exit Sub

    Call DoClearPictures("dnt_ItemPictures")
End Sub

Public Sub DoExportPictures()
    Dim wks                         As Worksheet
    Dim sh                          As Shape
    Dim hBitmap                     As Long
    Dim picSave                     As stdole.IPicture

    Set wks = TFrontpage

    For Each sh In wks.Shapes
        If sh.Type = msoPicture Then
            Call sh.ScaleHeight(1, msoTrue, msoScaleFromTopLeft)
            Call sh.CopyPicture(xlScreen, xlBitmap)
            '#### Speichern:
            Call OpenClipboard(GetHwnd(Application))
            '### Handle des Bitmaps ermitteln:
            hBitmap = GetClipboardData(CF_BITMAP)
            If hBitmap <> 0 Then
                Set picSave = New stdole.StdPicture
                Call SelectObject(picSave.Handle, hBitmap)
                Call picSave.SaveAsFile("C:\Test.bmp", True, 0)
            End If
            Call CloseClipboard
        End If
    Next sh
End Sub

Private Sub DoImportPictures(tRange As String, sSize As Single)
    Dim wks                         As Worksheet
    Dim tPath                       As String
    Dim tScript                     As String
    Dim tRet                        As String
    Dim vFiles                      As Variant
    Dim tFiles()                    As String
    Dim rngPictures                 As Range
    Dim i                           As Long
    Dim sInsertPos                  As Single
    Dim oObject                     As OLEObject
    Dim shPicture                   As Shape

    If Application.OperatingSystem Like "Windows*" Then
        vFiles = SelectOpenFiles(Application, "Bitte ein oder mehrere Bilder ausw|fffd|hlen", CurDir(), "Bilddateien (*.bmp;*.jpg*;.jpeg;*.png;*.tif;*.tiff;*.gif)", "*.bmp;*.jpg*;.jpeg;*.png;*.tif;*.tiff;*.gif", "Alle Dateien (*.*)", "*.*")
    Else
        vFiles = SelectOpenFiles(Application, "Bitte ein oder mehrere Bilder ausw|fffd|hlen", MacScript("return (path to documents folder) as String"), "public.image")
    End If
    If IsNull(vFiles) Then Exit Sub

    '#### Bilder einf|fffd|gen:
    tFiles = vFiles
    Set wks = TFrontpage
    Call wks.Unprotect(gctSHEET_PASSWORD)
    With wks
        Set rngPictures = .Range(tRange)
        sInsertPos = FindInsertPos(rngPictures)
        For i = LBound(tFiles) To UBound(tFiles)
            If FileLen(tFiles(i)) <= PIC_MAX_BYTES Then
                On Error GoTo BadFormat
                '### Bild einf|fffd|gen:
                Set shPicture = wks.Shapes.AddPicture(tFiles(i), msoFalse, msoTrue, sInsertPos + ((i - LBound(tFiles)) * (sSize + 5)), rngPictures.Top + 5, 1, 1)
                '### Bild skalieren:
                Call shPicture.ScaleHeight(0.1, msoTrue)
                Call shPicture.ScaleWidth(0.1, msoTrue)
                shPicture.LockAspectRatio = msoTrue
                shPicture.Width = sSize
                If shPicture.Height > sSize Then shPicture.Height = sSize
                '### Bild entsperren:
                shPicture.Locked = False
            Else
                Call MsgBox("Die Gr|fffd||fffd|e des Bildes |fffd|bersteigte die maximale Dateigr|fffd||fffd|e von 3 MB." & vbCr & "Bitte verringern Sie die Gr|fffd||fffd|e des Bildes, und versuchen Sie es erneut.", vbCritical)
            End If
NextPicture:
        Next i
    End With
    Call wks.Protect(gctSHEET_PASSWORD, , , , , True)
    Exit Sub

BadFormat:
    Call MsgBox("Dieses Format wird nicht unterst|fffd|tzt.", vbCritical)
    Resume NextPicture
End Sub

Private Function FindInsertPos(rngPictures As Range) As Single
    Dim sh                          As Shape
    Dim sMaxLeftPos                 As Single

    sMaxLeftPos = rngPictures.Left + 5
    For Each sh In rngPictures.Parent.Shapes
        If sh.Top >= rngPictures.Top And (sh.Top + sh.Height) <= (rngPictures.Top + rngPictures.Height) And _
           sh.Left >= rngPictures.Left Then
            If (sh.Left + sh.Width) > sMaxLeftPos Then sMaxLeftPos = sh.Left + sh.Width + 5
        End If
    Next sh

    FindInsertPos = sMaxLeftPos
End Function

Private Sub DoClearPictures(tRange As String)
    Dim wks                         As Worksheet
    Dim rngPictures                 As Range
    Dim sh                          As Shape

    Set wks = TFrontpage

    Set rngPictures = wks.Range(tRange)

    Call wks.Unprotect(gctSHEET_PASSWORD)
    For Each sh In wks.Shapes
        If sh.Type = msoPicture Then
            If sh.Top >= rngPictures.Top And sh.Top <= rngPictures.Top + rngPictures.Height And sh.Left >= rngPictures.Left Then
                Call sh.Delete
            End If
        End If
    Next sh
    Call wks.Protect(gctSHEET_PASSWORD, , , , , True)
End Sub
Attribute VB_Name = "Modul1"
Option Explicit

Sub Makro1()
Attribute Makro1.VB_ProcData.VB_Invoke_Func = " \n14"
'
' Makro1 Makro
'

'
    Range("F11:R11").Select
End Sub
Sub Makro2()
Attribute Makro2.VB_ProcData.VB_Invoke_Func = " \n14"
'
' Makro2 Makro
'

'
    ActiveSheet.Buttons.Add(613.5, 16.5, 96, 36.75).Select
    Range("Q12").Select
End Sub
Attribute VB_Name = "Modul2"
Option Explicit

Attribute VB_Name = "TAllergen"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Public Function GetAllergen() As Dictionary
    Dim dicAllergen                 As Dictionary
    Dim lLastRow                    As Long
    Dim i                           As Long
    Dim tItem                       As String

    Set dicAllergen = New Dictionary
    dicAllergen.CompareMode = TextCompare

    lLastRow = GetLastRow(Me, 2, 1)
    With Me
        For i = 2 To lLastRow
            tItem = CStr(.Cells(i, 1))
            Call dicAllergen.Add(tItem, tItem)
        Next i
    End With

    Set GetAllergen = dicAllergen
End Function
Attribute VB_Name = "TAreas"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "TArticleGroup"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "TArticleGroupInterviews"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "TFrontpage"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private mbDisableProtection         As Boolean

Private Sub Worksheet_BeforeDoubleClick(ByVal Target As Range, Cancel As Boolean)
    Dim btnCheck                    As Button
    Dim tInput As String

    If Target.Address = "$A$3" Then
        tInput = InputBox("Bitte Passwort eingeben:", "Passwort")
        
        If tInput = "qas" Then
            mbDisableProtection = True
            Call Me.Unprotect(gctSHEET_PASSWORD)
            Call MsgBox("Passwort korrekt, Bereich entsperrt.", vbInformation)
        ElseIf tInput = "wFragenLidl" Then
            TArticleGroup.Visible = xlSheetVisible
            TArticleGroupInterviews.Visible = xlSheetVisible
            TGeneralInterviews.Visible = xlSheetVisible
            TIngredientsInterviews.Visible = xlSheetVisible
            TAreas.Visible = xlSheetVisible
            TPathes.Visible = xlSheetVisible
            TAllergen.Visible = xlSheetVisible
            Call MsgBox("Passwort korrekt, Fragen entsperrt.", vbInformation)
        Else
            mbDisableProtection = False
            Call Me.Protect(gctSHEET_PASSWORD, , , , , True)
            TArticleGroup.Visible = xlSheetVeryHidden
            TArticleGroupInterviews.Visible = xlSheetVeryHidden
            TGeneralInterviews.Visible = xlSheetVeryHidden
            TIngredientsInterviews.Visible = xlSheetVeryHidden
            TAreas.Visible = xlSheetVeryHidden
            TPathes.Visible = xlSheetVeryHidden
            TAllergen.Visible = xlSheetVeryHidden
            Call MsgBox("Falsches oder kein Passwort.", vbExclamation)
        End If
        Cancel = True
        ' nachfolgender Code hinzugef|fffd|gt Nadas 20.05.2014
    Else
        Dim bereich                 As Variant
        On Error GoTo ende
        Application.EnableEvents = False
        If InStr(1, Target.Address, ":") > 0 Then   ' wenn Zellen verbunden sind, dann nur erste Zelle nehmen
            bereich = Left(Target.Address, InStr(1, Target.Address, ":") - 1)
            If Target.Address = Range("att_dnt_lieferant").Address Or bereich = Range("att_dnt_lieferant").Address Then
                If ActiveSheet.ProtectContents = False Then
                    ' Daten aus Pfad im Blatt "Bereiche" in Liste ziehen und ausw|fffd|hlbar machen
                    artinformation = "Lieferanten"
                    UserForm1.Hide
                    UserForm1.UserForm_Initialize
                    UserForm1.Show
                    Range("att_dnt_lieferant").Value = auswahl
                    Cells(Range("att_dnt_lieferant").Row + 2, Range("att_dnt_lieferant").Column).Select
                End If
            ElseIf Target.Address = Range("att_dnt_marke").Address Or bereich = Range("att_dnt_marke").Address Then
                If ActiveSheet.ProtectContents = False Then
                    ' Daten aus Pfad im Blatt "Bereiche" in Liste ziehen und ausw|fffd|hlbar machen
                    artinformation = "Marken"
                    UserForm1.Hide
                    UserForm1.UserForm_Initialize
                    UserForm1.Show
                    Range("att_dnt_marke").Value = auswahl
                    Cells(Range("att_dnt_marke").Row + 2, Range("att_dnt_marke").Column).Select
                End If
            ElseIf Target.Address = Range("att_dnt_ekl").Address Or bereich = Range("att_dnt_ekl").Address Then
                If ActiveSheet.ProtectContents = False Then
                    ' Daten aus Pfad im Blatt "Bereiche" in Liste ziehen und ausw|fffd|hlbar machen
                    artinformation = "EKLs"
                    UserForm1.Hide
                    UserForm1.UserForm_Initialize
                    UserForm1.Show
                    Range("att_dnt_ekl").Value = auswahl
                    Cells(Range("att_dnt_ekl").Row + 2, Range("att_dnt_ekl").Column).Select
                End If
            ElseIf Target.Address = Range("att_dnt_werbeagentur").Address Or bereich = Range("att_dnt_werbeagentur").Address Then
                If ActiveSheet.ProtectContents = False Then
                    ' Daten aus Pfad im Blatt "Bereiche" in Liste ziehen und ausw|fffd|hlbar machen
                    artinformation = "Agenturen"
                    UserForm1.Hide
                    UserForm1.UserForm_Initialize
                    UserForm1.Show
                    Range("att_dnt_werbeagentur").Value = auswahl
                    Cells(Range("att_dnt_werbeagentur").Row + 2, Range("att_dnt_werbeagentur").Column).Select
                End If
            End If
        End If
ende:
        Application.EnableEvents = True
        ' Ende hinzugef|fffd|gt Nadas 20.05.2014
    End If
End Sub

Private Sub Worksheet_Change(ByVal Target As Range)
    Dim wks                         As Worksheet
    Dim rngArticleGroup             As Range
    Dim rngIngredients              As Range
    Dim rngEKUserEdit               As Range
    Dim i                           As Long
    Dim tIngridients()              As String
    Dim tIngridient                 As String
    Dim lQuestionCounter            As Long
    Dim lTitleRow                   As Long
    Dim lLastRow                    As Long

    Set wks = TFrontpage

    On Error GoTo CleanupExit

    With Application
        .ScreenUpdating = False
        .Calculation = xlCalculationManual
        .EnableEvents = False
    End With

    Call wks.Unprotect(gctSHEET_PASSWORD)

    '#### WG-Fragen neu aufbauen:
    Set rngArticleGroup = wks.Range("att_dnt_wg")
    If Not Intersect(Target, rngArticleGroup) Is Nothing Then
        Call GenArtGroupInterviews
        Call SetPrintArea(wks)
    End If

    '#### Zutaten-Tabelle verarbeiten:
    Set rngIngredients = wks.Range("zutatenverzeichnis")
    If Not Intersect(Target, rngIngredients) Is Nothing Then
        Call ShowRange(wks, "IngridientsInterviewsItems", False)
        If Len(rngIngredients.Value) > 0 Then
            tIngridients = ExtractIngredients(rngIngredients.Value)
            For i = LBound(tIngridients) To UBound(tIngridients)
                tIngridient = CleanUpName(tIngridients(i))
                Call ShowRange(wks, "Interview_" & tIngridient)
                If tIngridient <> "Zutaten" And tIngridient <> "" Then
                    lQuestionCounter = lQuestionCounter + 1
                End If
            Next i
        End If
        '### |fffd|berschrift ausblenden, falls keine Fragen vorhanden sind:
        With wks
            If lQuestionCounter > 0 Then
                lTitleRow = .Range("dnt_IngridientsInterviews").Row
                .Rows(lTitleRow).Hidden = False
                .Rows(lTitleRow + 1).Hidden = False
            Else
                lTitleRow = .Range("dnt_IngridientsInterviews").Row
                .Rows(lTitleRow).Hidden = True
                .Rows(lTitleRow + 1).Hidden = True
            End If
        End With
        '### Druckbereich anpassen:
        Call SetPrintArea(wks)
    End If
'    lLastRow = GetLastRow(wks, 1, 1) + 1
'    With wks.PageSetup
'        .PrintArea = "A1:Z" & CStr(lLastRow)
'        .Zoom = False
'        .FitToPagesTall = False
'        .FitToPagesWide = 1
'    End With

    '#### Autofit:
    If Not Intersect(Target, GetRange("dnt_artbez_kopie")) Is Nothing Then
        Call Target.Rows.AutoFit
    ElseIf Not Intersect(Target, GetRange("verkehrsbezeichnung")) Is Nothing Then
        Call Target.Rows.AutoFit
    ElseIf Not Intersect(Target, GetRange("zutatenverzeichnis")) Is Nothing Then
        Call Target.Rows.AutoFit
    'ElseIf Not Intersect(Target, GetRange("StorrageInstruction")) Is Nothing Then'
        'Call Target.Rows.AutoFit'
    ElseIf Not Intersect(Target, GetRange("PreperationInstruction")) Is Nothing Then
        Call Target.Rows.AutoFit
    ElseIf Not Intersect(Target, GetRange("RecipeProposal")) Is Nothing Then
        Call Target.Rows.AutoFit
    ElseIf Not Intersect(Target, GetRange("MiscReqStatement")) Is Nothing Then
        Call Target.Rows.AutoFit
    ElseIf Not Intersect(Target, GetRange("dnt_IngridientsInterviews")) Is Nothing Then
        Call Target.Rows.AutoFit
    ElseIf Not Intersect(Target, GetRange("dnt_GeneralInterviews")) Is Nothing Then
        Call Target.Rows.AutoFit
    ElseIf Not Intersect(Target, GetRange("dnt_ArtGroupInterviews")) Is Nothing Then
        Call Target.Rows.AutoFit
    End If

CleanupExit:
    If Not mbDisableProtection Then
        Call wks.Protect(gctSHEET_PASSWORD, , , , , True)
    End If
    With Application
        .EnableEvents = True
        .Calculation = xlCalculationAutomatic
        .ScreenUpdating = True
    End With
End Sub

Sub test()
    MsgBox "Letzte Zeile: " & Mid(ActiveSheet.PageSetup.PrintArea, InStrRev(ActiveSheet.PageSetup.PrintArea, "$") + 1)
End Sub


Attribute VB_Name = "TFrontpage1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private mbDisableProtection         As Boolean

Private Sub Worksheet_BeforeDoubleClick(ByVal Target As Range, Cancel As Boolean)
    Dim btnCheck                    As Button
    Dim tInput As String

    If Target.Address = "$A$3" Then
        tInput = InputBox("Bitte Passwort eingeben:", "Passwort")
        
        If tInput = "qas" Then
            mbDisableProtection = True
            Call Me.Unprotect(gctSHEET_PASSWORD)
            Call MsgBox("Passwort korrekt, Bereich entsperrt.", vbInformation)
        ElseIf tInput = "wFragenLidl" Then
            TArticleGroup.Visible = xlSheetVisible
            TArticleGroupInterviews.Visible = xlSheetVisible
            TGeneralInterviews.Visible = xlSheetVisible
            TIngredientsInterviews.Visible = xlSheetVisible
            TAreas.Visible = xlSheetVisible
            TPathes.Visible = xlSheetVisible
            TAllergen.Visible = xlSheetVisible
            Call MsgBox("Passwort korrekt, Fragen entsperrt.", vbInformation)
        Else
            mbDisableProtection = False
            Call Me.Protect(gctSHEET_PASSWORD, , , , , True)
            TArticleGroup.Visible = xlSheetVeryHidden
            TArticleGroupInterviews.Visible = xlSheetVeryHidden
            TGeneralInterviews.Visible = xlSheetVeryHidden
            TIngredientsInterviews.Visible = xlSheetVeryHidden
            TAreas.Visible = xlSheetVeryHidden
            TPathes.Visible = xlSheetVeryHidden
            TAllergen.Visible = xlSheetVeryHidden
            Call MsgBox("Falsches oder kein Passwort.", vbExclamation)
        End If
        Cancel = True
        ' nachfolgender Code hinzugef|fffd|gt Nadas 20.05.2014
    Else
        Dim bereich                 As Variant
        On Error GoTo ende
        Application.EnableEvents = False
        If InStr(1, Target.Address, ":") > 0 Then   ' wenn Zellen verbunden sind, dann nur erste Zelle nehmen
            bereich = Left(Target.Address, InStr(1, Target.Address, ":") - 1)
            If Target.Address = Range("att_dnt_lieferant").Address Or bereich = Range("att_dnt_lieferant").Address Then
                If ActiveSheet.ProtectContents = False Then
                    ' Daten aus Pfad im Blatt "Bereiche" in Liste ziehen und ausw|fffd|hlbar machen
                    artinformation = "Lieferanten"
                    UserForm1.Hide
                    UserForm1.UserForm_Initialize
                    UserForm1.Show
                    Range("att_dnt_lieferant").Value = auswahl
                    Cells(Range("att_dnt_lieferant").Row + 2, Range("att_dnt_lieferant").Column).Select
                End If
            ElseIf Target.Address = Range("att_dnt_marke").Address Or bereich = Range("att_dnt_marke").Address Then
                If ActiveSheet.ProtectContents = False Then
                    ' Daten aus Pfad im Blatt "Bereiche" in Liste ziehen und ausw|fffd|hlbar machen
                    artinformation = "Marken"
                    UserForm1.Hide
                    UserForm1.UserForm_Initialize
                    UserForm1.Show
                    Range("att_dnt_marke").Value = auswahl
                    Cells(Range("att_dnt_marke").Row + 2, Range("att_dnt_marke").Column).Select
                End If
            ElseIf Target.Address = Range("att_dnt_ekl").Address Or bereich = Range("att_dnt_ekl").Address Then
                If ActiveSheet.ProtectContents = False Then
                    ' Daten aus Pfad im Blatt "Bereiche" in Liste ziehen und ausw|fffd|hlbar machen
                    artinformation = "EKLs"
                    UserForm1.Hide
                    UserForm1.UserForm_Initialize
                    UserForm1.Show
                    Range("att_dnt_ekl").Value = auswahl
                    Cells(Range("att_dnt_ekl").Row + 2, Range("att_dnt_ekl").Column).Select
                End If
            ElseIf Target.Address = Range("att_dnt_werbeagentur").Address Or bereich = Range("att_dnt_werbeagentur").Address Then
                If ActiveSheet.ProtectContents = False Then
                    ' Daten aus Pfad im Blatt "Bereiche" in Liste ziehen und ausw|fffd|hlbar machen
                    artinformation = "Agenturen"
                    UserForm1.Hide
                    UserForm1.UserForm_Initialize
                    UserForm1.Show
                    Range("att_dnt_werbeagentur").Value = auswahl
                    Cells(Range("att_dnt_werbeagentur").Row + 2, Range("att_dnt_werbeagentur").Column).Select
                End If
            End If
        End If
ende:
        Application.EnableEvents = True
        ' Ende hinzugef|fffd|gt Nadas 20.05.2014
    End If
End Sub

Private Sub Worksheet_Change(ByVal Target As Range)
    Dim wks                         As Worksheet
    Dim rngArticleGroup             As Range
    Dim rngIngredients              As Range
    Dim rngEKUserEdit               As Range
    Dim i                           As Long
    Dim tIngridients()              As String
    Dim tIngridient                 As String
    Dim lQuestionCounter            As Long
    Dim lTitleRow                   As Long
    Dim lLastRow                    As Long

    Set wks = TFrontpage

    On Error GoTo CleanupExit

    With Application
        .ScreenUpdating = False
        .Calculation = xlCalculationManual
        .EnableEvents = False
    End With

    Call wks.Unprotect(gctSHEET_PASSWORD)

    '#### WG-Fragen neu aufbauen:
    Set rngArticleGroup = wks.Range("att_dnt_wg")
    If Not Intersect(Target, rngArticleGroup) Is Nothing Then
        Call GenArtGroupInterviews
        Call SetPrintArea(wks)
    End If

    '#### Zutaten-Tabelle verarbeiten:
    Set rngIngredients = wks.Range("zutatenverzeichnis")
    If Not Intersect(Target, rngIngredients) Is Nothing Then
        Call ShowRange(wks, "IngridientsInterviewsItems", False)
        If Len(rngIngredients.Value) > 0 Then
            tIngridients = ExtractIngredients(rngIngredients.Value)
            For i = LBound(tIngridients) To UBound(tIngridients)
                tIngridient = CleanUpName(tIngridients(i))
                Call ShowRange(wks, "Interview_" & tIngridient)
                If tIngridient <> "Zutaten" And tIngridient <> "" Then
                    lQuestionCounter = lQuestionCounter + 1
                End If
            Next i
        End If
        '### |fffd|berschrift ausblenden, falls keine Fragen vorhanden sind:
        With wks
            If lQuestionCounter > 0 Then
                lTitleRow = .Range("dnt_IngridientsInterviews").Row
                .Rows(lTitleRow).Hidden = False
                .Rows(lTitleRow + 1).Hidden = False
            Else
                lTitleRow = .Range("dnt_IngridientsInterviews").Row
                .Rows(lTitleRow).Hidden = True
                .Rows(lTitleRow + 1).Hidden = True
            End If
        End With
        '### Druckbereich anpassen:
        Call SetPrintArea(wks)
    End If
'    lLastRow = GetLastRow(wks, 1, 1) + 1
'    With wks.PageSetup
'        .PrintArea = "A1:Z" & CStr(lLastRow)
'        .Zoom = False
'        .FitToPagesTall = False
'        .FitToPagesWide = 1
'    End With

    '#### Autofit:
    If Not Intersect(Target, GetRange("dnt_artbez_kopie")) Is Nothing Then
        Call Target.Rows.AutoFit
    ElseIf Not Intersect(Target, GetRange("verkehrsbezeichnung")) Is Nothing Then
        Call Target.Rows.AutoFit
    ElseIf Not Intersect(Target, GetRange("zutatenverzeichnis")) Is Nothing Then
        Call Target.Rows.AutoFit
    'ElseIf Not Intersect(Target, GetRange("StorrageInstruction")) Is Nothing Then'
        'Call Target.Rows.AutoFit'
    ElseIf Not Intersect(Target, GetRange("PreperationInstruction")) Is Nothing Then
        Call Target.Rows.AutoFit
    ElseIf Not Intersect(Target, GetRange("RecipeProposal")) Is Nothing Then
        Call Target.Rows.AutoFit
    ElseIf Not Intersect(Target, GetRange("MiscReqStatement")) Is Nothing Then
        Call Target.Rows.AutoFit
    ElseIf Not Intersect(Target, GetRange("dnt_IngridientsInterviews")) Is Nothing Then
        Call Target.Rows.AutoFit
    ElseIf Not Intersect(Target, GetRange("dnt_GeneralInterviews")) Is Nothing Then
        Call Target.Rows.AutoFit
    ElseIf Not Intersect(Target, GetRange("dnt_ArtGroupInterviews")) Is Nothing Then
        Call Target.Rows.AutoFit
    End If

CleanupExit:
    If Not mbDisableProtection Then
        Call wks.Protect(gctSHEET_PASSWORD, , , , , True)
    End If
    With Application
        .EnableEvents = True
        .Calculation = xlCalculationAutomatic
        .ScreenUpdating = True
    End With
End Sub

Sub test()
    MsgBox "Letzte Zeile: " & Mid(ActiveSheet.PageSetup.PrintArea, InStrRev(ActiveSheet.PageSetup.PrintArea, "$") + 1)
End Sub


Attribute VB_Name = "TGeneralInterviews"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "TIngredientsInterviews"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "TPathes"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "Tabelle1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "Tabelle2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "UserForm1"
Attribute VB_Base = "0{8BC5FE99-9817-4098-A880-81BA1F5EB4A0}{57433E07-9975-4CB6-B29D-2C7D2B6BD867}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit                                     ' Variablendefinition erforderlich
Private Sub CommandButton1_Click()
    If ListBox1.ListIndex = -1 Then
        UserForm1.Hide
        Exit Sub
    Else
        auswahl = ListBox1.List(ListBox1.ListIndex)
        UserForm1.Hide
    End If
End Sub



Sub UserForm_Initialize()
    Dim objDictionary As Object
    Dim varBereich As Variant
    Dim loZaehler As Long
    Dim arrDaten
    Dim letztezeile As Long
    Dim pfad As String
    Dim wkbquell As Workbook
    Dim wksquell As Worksheet
    Dim spalte As Long
    
    If artinformation = "Lieferanten" Then
        pfad = TPathes.Cells(2, 2).Value
        spalte = TPathes.Cells(2, 3).Value
    ElseIf artinformation = "Marken" Then
        pfad = TPathes.Cells(3, 2).Value
        spalte = TPathes.Cells(3, 3).Value
    ElseIf artinformation = "EKLs" Then
        pfad = TPathes.Cells(4, 2).Value
        spalte = TPathes.Cells(4, 3).Value
    ElseIf artinformation = "Agenturen" Then
        pfad = TPathes.Cells(5, 2).Value
        spalte = TPathes.Cells(5, 3).Value
    End If
    
    Set wkbquell = Application.Workbooks.Open(pfad)
    Set wksquell = wkbquell.ActiveSheet
    letztezeile = GetLastRow(wksquell, 1, spalte)
    Set objDictionary = CreateObject("Scripting.Dictionary")
    varBereich = wksquell.Range(Cells(2, spalte), Cells(letztezeile, spalte))
    
    ' Schleife |fffd|ber alle Werte des Bereichs
    For loZaehler = LBound(varBereich) To UBound(varBereich)
        ' Eintrag wird nur |fffd|bernommen wenn er im DictionaryObject noch nicht enthalten ist
        objDictionary(varBereich(loZaehler, 1)) = 0
    Next
    ' Werte in ein Array |fffd|bergeben
    arrDaten = objDictionary.keys
    wkbquell.Close False
    ListBox1.List = arrDaten
End Sub


Public Sub Init()

    UserForm_Initialize
End Sub

' InQuest injected base64 decoded content
' bz{l"{^

INQUEST-PP=macro
