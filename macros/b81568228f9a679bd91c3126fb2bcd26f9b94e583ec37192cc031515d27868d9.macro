Attribute VB_Name = "ThisDocument"
Attribute VB_Base = "0{00020906-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "bookmarks"

'Collects bookmarks related information for word bookmarks
Function bookmarkLinks()
Dim destLeft, destTop, destPageNum, pageHeight, pageWidth, actBookmarkCount, noOfBookmarks, bookmarkNameLength, asciiValue As Long
Dim bookmarkName, bookmarkNameString, bookmarkNameChar As String
Dim tempBookmarkStringVal As String
tempBookmarkStringVal = ""
On Error Resume Next
noOfBookmarks = ActiveDocument.bookmarks.count
actBookmarkCount = 0

For I = 1 To noOfBookmarks
'Select the destination of the bookmark and retrieve its location
    ActiveDocument.bookmarks(I).Range.Select
    Selection.Collapse (wdStart)
    If (((Selection.Information(wdInEndnote)) <> True) And ((Selection.Information(wdInFootnote)) <> True)) Then
        destLeft = Selection.Information(wdHorizontalPositionRelativeToPage)
        destTop = Selection.Information(wdVerticalPositionRelativeToPage)
        destPageNum = Selection.Information(wdActiveEndPageNumber)
        pageHeight = Selection.PageSetup.pageHeight
        pageWidth = Selection.PageSetup.pageWidth
        bookmarkName = ActiveDocument.bookmarks(I).Name
        bookmarkNameLength = Len(bookmarkName)
        bookmarkNameString = ""
        bookmarkNameString = bookmarkNameLength & dLim
        'Collecting the filename information character by character because for double byte character dlgBox.Name
        'doesnt return the correct filename
        For j = 1 To Len(bookmarkName)
            bookmarkNameChar = Mid(bookmarkName, j, 1)
            asciiValue = AscW(bookmarkNameChar)
            bookmarkNameString = bookmarkNameString & asciiValue & dLim
        Next j
        If ((destLeft >= 0) And (destTop >= 0) And (pageHeight >= 0) And (pageWidth >= 0) And (destPageNum > 0)) Then
            actBookmarkCount = actBookmarkCount + 1
            tempBookmarkStringVal = tempBookmarkStringVal & pageHeight & dLim & pageWidth & dLim & destLeft & dLim & destTop & dLim & destPageNum & dLim & bookmarkNameString
        End If
    End If
Next I
If (actBookmarkCount > 0) Then
    link.stringVal = link.stringVal & actBookmarkCount & dLim & tempBookmarkStringVal
Else
   link.stringVal = stringVal & actBookmarkCount & dLim
End If
End Function








Attribute VB_Name = "intraDocLinkCreation"
Public tempIntraDocStringVal As String
Public noOfIntraDocLinks As Long

'Initialize the public variables for intra-document links
Function initIntraDocLinks()
    tempIntraDocStringVal = ""
    noOfIntraDocLinks = 0
End Function

'Collects table of contents link information
Function tocLinks()
Dim noOfTOCTables As Long
Dim tocRange As Range
noOfTOCTables = ActiveDocument.TablesOfContents.count
On Error Resume Next:
For I = 1 To noOfTOCTables
    Set tocRange = ActiveDocument.TablesOfContents(I).Range
     Call insertIntraDocLinkDetails(tocRange)
Next I
End Function

'Collects table of figures link information
Function tofLinks()
Dim noOfTOFTables, noOfFields As Long
Dim tofRange As Range
noOfTOFTables = ActiveDocument.TablesOfFigures.count
On Error Resume Next:
For I = 1 To noOfTOFTables
    Set tofRange = ActiveDocument.TablesOfFigures(I).Range
    Call insertIntraDocLinkDetails(tofRange)
Next I
End Function

'Collects cross reference links information
Function crossRefLinks()
Dim first, Second, destLeft, destTop, sourceLeft, sourceRight, sourceTop, sourceBottom, sourcePageHeight, sourcePageWidth, sourcePageNum, destPageNum, destPageHeight, destPageWidth, noOfCrossRefLinks, noOfChars, retVal, prevLineNo, currLineNo, noOfBookmarks, hyperlinkCount, noOfFields, intraDocMin, intraDocMax As Long
Dim bookmarkId, code As String
intraDocMinPos = 10
intraDocMaxPos = 15
noOfFields = ActiveDocument.Fields.count
For I = 1 To noOfFields
    On Error Resume Next
    code = ActiveDocument.Fields(I).code
    'Collect cross reference link data for links of type wdFieldRef( Example cross reference to headings),
    ' wdFieldPageRef (Example reference to bookmark with as hyperlink property set to false)
    ' wdFieldNoteRef (Example cross reference to endnote/footnote
    ' hyperlink of intradocument type,
    ' table of contents links which were not covered using TableOfContents.Fields property
     If (((ActiveDocument.Fields(I).Type = wdFieldRef) And ((InStr(code, "\h") <> 0) Or (InStr(code, "\H") <> 0))) Or ((ActiveDocument.Fields(I).Type = wdFieldPageRef) And (InStr(code, "_T") = 0)) Or (ActiveDocument.Fields(I).Type = wdFieldNoteRef) Or ((ActiveDocument.Fields(I).Type = wdFieldHyperlink) And ((InStr(code, "\l") >= intraDocMinPos) And (InStr(code, "\l") <= intraDocMaxPos))) Or ((ActiveDocument.TablesOfContents.count = 0) And (ActiveDocument.Fields(I).Type = wdFieldPageRef) And (InStr(code, "_T") <> 0))) Then
       'Extract boomark id from the field code
        code = ActiveDocument.Fields(I).code
        first = InStr(code, "_")
        If (ActiveDocument.Fields(I).Type = wdFieldHyperlink) Then
        'Fixing bug#3844310. Fields of type Hyperlinks dont have _ in their description
        ' So search for presence of ".
            If (first = 0) Then
                first = InStr(code, """")
                first = first + 1
            End If
            Second = InStr(first + 1, code, """")
        Else
            Second = InStr(first + 1, code, " ")
        End If
        If (first = 0) Then
            noOfBookmarks = ActiveDocument.bookmarks.count
            For j = 1 To noOfBookmarks
                first = InStr(code, ActiveDocument.bookmarks(j).Name)
                If (first <> 0) Then
                    bookmarkId = ActiveDocument.bookmarks(j).Name
                End If
            Next j
        Else
            bookmarkId = Mid(code, first, Second - first)
            bookmarkId = "" & bookmarkId & ""
        End If
        'Collect cross reference link destination information using the bookmark id
        ActiveDocument.bookmarks(bookmarkId).Range.Select
        Selection.Collapse (wdStart)
        'Fixing bug#3731521. VBA calls fail for selections present in endnote ,footnote.
        'Switching off link creation for such cases
        
        If ((Selection.Information(wdInEndnote) = False) And (Selection.Information(wdInFootnote) = False)) Then
            destLeft = Selection.Information(wdHorizontalPositionRelativeToPage)
            destTop = Selection.Information(wdVerticalPositionRelativeToPage)
            destPageNum = Selection.Information(wdActiveEndPageNumber)
            destPageHeight = Selection.PageSetup.pageHeight
            destPageWidth = Selection.PageSetup.pageWidth
            'Collect cross reference link source information
            ActiveDocument.Fields(I).Select
            noOfChars = Selection.Characters.count
            sourcePageHeight = Selection.PageSetup.pageHeight
            sourcePageWidth = Selection.PageSetup.pageWidth
            Selection.Collapse (wdStart)
            'To collect the source location information traverse the selection character by character
            'This helps us to detect the presence of links that span over multiple rows
            'TODO: Optimise this process
            sourceLeft = Selection.Information(wdHorizontalPositionRelativeToPage)
            sourceTop = Selection.Information(wdVerticalPositionRelativeToPage)
            For k = 1 To noOfChars
                prevLineNo = Selection.Information(wdVerticalPositionRelativeToPage)
                retVal = Selection.Move(wdCharacter, 1)
                currLineNo = Selection.Information(wdVerticalPositionRelativeToPage)
                If (prevLineNo <> currLineNo) Then
                    retVal = Selection.Move(wdCharacter, -1)
                    sourceRight = Selection.Information(wdHorizontalPositionRelativeToPage)
                    sourceBottom = Selection.Font.Size + sourceTop
                    sourcePageNum = Selection.Information(wdActiveEndPageNumber)
                    prevLineNo = currLineNo
                    If ((sourcePageHeight > 0) And (sourcePageWidth > 0) And (sourceTop > 0) And (sourceBottom > 0) And (sourceLeft > 0) And (sourceRight > 0) And (sourcePageNum > 0) And (destPageHeight > 0) And (destPageWidth > 0) And (destLeft > 0) And (destTop > 0) And (destPageNum > 0)) Then
                        tempIntraDocStringVal = tempIntraDocStringVal & sourcePageHeight & dLim & sourcePageWidth & dLim & sourceTop & dLim & sourceBottom & dLim & sourceLeft & dLim & sourceRight & dLim & sourcePageNum & dLim & destPageHeight & dLim & destPageWidth & dLim & destLeft & dLim & destTop & dLim & destPageNum & dLim
                        noOfIntraDocLinks = noOfIntraDocLinks + 1
                    End If
                    retVal = Selection.Move(wdCharacter, 1)
                    sourceLeft = Selection.Information(wdHorizontalPositionRelativeToPage)
                    sourceTop = Selection.Information(wdVerticalPositionRelativeToPage)
                End If
            Next k
            sourceRight = Selection.Information(wdHorizontalPositionRelativeToPage)
            sourceBottom = Selection.Font.Size + sourceTop
            sourcePageNum = Selection.Information(wdActiveEndPageNumber)
            If ((sourcePageHeight > 0) And (sourcePageWidth > 0) And (sourceTop > 0) And (sourceBottom > 0) And (sourceLeft > 0) And (sourceRight > 0) And (sourcePageNum > 0) And (destPageHeight > 0) And (destPageWidth > 0) And (destLeft > 0) And (destTop > 0) And (destPageNum > 0)) Then
                noOfIntraDocLinks = noOfIntraDocLinks + 1
                tempIntraDocStringVal = tempIntraDocStringVal & sourcePageHeight & dLim & sourcePageWidth & dLim & sourceTop & dLim & sourceBottom & dLim & sourceLeft & dLim & sourceRight & dLim & sourcePageNum & dLim & destPageHeight & dLim & destPageWidth & dLim & destLeft & dLim & destTop & dLim & destPageNum & dLim
            End If
        End If
    End If
Next I
End Function

Function intraDocLinksTerm()
'Update stringVal's value with intra-document link information
If (noOfIntraDocLinks > 0) Then
    link.stringVal = link.stringVal & noOfIntraDocLinks & dLim & tempIntraDocStringVal
Else
    link.stringVal = link.stringVal & noOfIntraDocLinks & dLim
End If
End Function

Function insertIntraDocLinkDetails(ByRef tableRange As Range)
Dim first, Second, destLeft, destTop, sourceLeft, sourceRight, sourceTop, sourceBottom, sourcePageHeight, sourcePageWidth, sourcePageNum, destPageNum, destPageHeight, destPageWidth, noOfChars, retVal, prevLineNo, currLineNo, noOfBookmarks, hyperlinkCount, noOfFields As Long
Dim bookmarkId, code As String
On Error Resume Next:
tableRange.Select
sourcePageHeight = Selection.PageSetup.pageHeight
sourcePageWidth = Selection.PageSetup.pageWidth
noOfFields = tableRange.Fields.count
For j = 1 To noOfFields
    If (tableRange.Fields(j).Type = wdFieldPageRef) Then
    'Extract the bookmark if from the field code
        code = tableRange.Fields(j).code.Text
        first = InStr(code, "_")
        Second = InStr(first + 1, code, " ")
        bookmarkId = Mid(code, first, Second - first)
        bookmarkId = "" & bookmarkId & ""
        ActiveDocument.bookmarks(bookmarkId).Range.Select
        'Collect table of figures/contents links destination location information
        Selection.Collapse (wdStart)
        destLeft = Selection.Information(wdHorizontalPositionRelativeToPage)
        destTop = Selection.Information(wdVerticalPositionRelativeToPage)
        destPageNum = Selection.Information(wdActiveEndPageNumber)
        destPageHeight = Selection.PageSetup.pageHeight
        destPageWidth = Selection.PageSetup.pageWidth
        'Collect table of figures/contents links destination location information
        tableRange.Fields(j).Select
        noOfChars = Selection.Characters.count
        Selection.Collapse (wdStart)
        sourceLeft = Selection.Information(wdHorizontalPositionRelativeToPage)
        If (sourceLeft > 100) Then
            'The selection points only to the page number portion of table of contents
            ' so subracting 100 to provide a wider clickable source region.
            sourceLeft = sourceLeft - 100
        End If
        retVal = Selection.Move(wdCharacter, noOfChars)
        sourceRight = Selection.Information(wdHorizontalPositionRelativeToPage)
        sourceTop = Selection.Information(wdVerticalPositionRelativeToPage)
        sourceBottom = Selection.Information(wdVerticalPositionRelativeToPage) + Selection.Font.Size
        sourcePageNum = Selection.Information(wdActiveEndPageNumber)
        If ((sourcePageHeight > 0) And (sourcePageWidth > 0) And (sourceTop > 0) And (sourceBottom > 0) And (sourceLeft > 0) And (sourceRight > 0) And (sourcePageNum > 0) And (destPageHeight > 0) And (destPageWidth > 0) And (destLeft > 0) And (destTop > 0) And (destPageNum > 0)) Then
            noOfIntraDocLinks = noOfIntraDocLinks + 1
            tempIntraDocStringVal = tempIntraDocStringVal & sourcePageHeight & dLim & sourcePageWidth & dLim & sourceTop & dLim & sourceBottom & dLim & sourceLeft & dLim & sourceRight & dLim & sourcePageNum & dLim & destPageHeight & dLim & destPageWidth & dLim & destLeft & dLim & destTop & dLim & destPageNum & dLim
        End If
    End If
Next j
End Function

Attribute VB_Name = "link"
'PtrSafe is not available for Office 2011
#If (MAC_OFFICE_VERSION < 15) Then
    Declare Function CreateLinks Lib "/Library/Application Support/Adobe/MACPDFM/MacPDFM.framework/Versions/A/MacPDFM" (ByRef address As String) As Long
    Declare Function ShowProgressWindow Lib "/Library/Application Support/Adobe/MACPDFM/MacPDFM.framework/Versions/A/MacPDFM" () As Boolean
    Declare Function CloseProgressWindow Lib "/Library/Application Support/Adobe/MACPDFM/MacPDFM.framework/Versions/A/MacPDFM" () As Boolean
#Else
    Declare PtrSafe Function CreateLinks Lib "/Library/Application Support/Adobe/MACPDFM/MacPDFM.framework/Versions/A/MacPDFM" (ByRef address As String) As Long
    Declare PtrSafe Function ShowProgressWindow Lib "/Library/Application Support/Adobe/MACPDFM/MacPDFM.framework/Versions/A/MacPDFM" () As Boolean
    Declare PtrSafe Function CloseProgressWindow Lib "/Library/Application Support/Adobe/MACPDFM/MacPDFM.framework/Versions/A/MacPDFM" () As Boolean
    Declare PtrSafe Function ShowUnsavedChangesDialog Lib "/Library/Application Support/Adobe/MACPDFM/MacPDFM.framework/Versions/A/MacPDFM" ()
#End If
Public stringVal As String
Public docView As WdViewType
Public showHiddenText As Boolean
Public dLim, dLimName As String
Public isConversionSilent As Boolean
Public defaultCustomizationContext As Template
Enum ShareMode
 OpenNone = 0
 OpenShare = 1
 OpenSign = 2
End Enum
Sub AutoExec()
    #If (MAC_OFFICE_VERSION < 15) Then
        Dim cmdMenuBar As CommandBar
        Dim cmdPopup As CommandBarPopup
        Dim cmdCtrl, cmdFileCtrl As CommandBarControl
        Dim exists, fileMenuFound As Boolean
        Dim t As Template
        Dim count As Long
        Dim saveAsString As String
        Dim acrobatExists As Boolean
        Dim fileMenuString As String
        exists = False
        fileMenuFound = False
        isConversionSilent = False
        Set defaultCustomizationContext = Application.CustomizationContext
        acrobatExists = utils.CheckForAcrobatInstallation
        If (acrobatExists = True) Then
           
            For Each t In Templates
               If (t.Name = "linkCreation.dotm") Then
                   CustomizationContext = t
                   Exit For
                End If
            Next t
            Set cmdMenuBar = Application.CommandBars("Menu Bar")
            'Create the Save As Adobe PDF option in the file menu
            saveAsString = utils.getLocalizedString("saveAs")
            'Check if localized version of file menu exists. If not
            'then as file menu is expected to be present at 2nd index, iterate over the
            '2nd file menu to find the word "URL" which is consistent across all languages.
            'If found then add Adobe menu.
            fileMenuString = utils.getLocalizedString("fileMenu")
            For Each cmdCtrl In cmdMenuBar.Controls
                If cmdCtrl.DescriptionText = fileMenuString Then
                    Set cmdPopup = cmdCtrl
                    fileMenuFound = True
                    Exit For
                End If
            Next cmdCtrl
            If (fileMenuFound = False) Then
                Set cmdPopup = cmdMenuBar.Controls(2)
                For Each cmdFileCtrl In cmdPopup.Controls
                    If InStr(cmdFileCtrl.Caption, "URL") > 0 Then
                        fileMenuFound = True
                        Exit For
                    End If
                Next cmdFileCtrl
            End If
            If (fileMenuFound = True) Then
                For Each cmdFileCtrl In cmdPopup.Controls
                    If InStr(cmdFileCtrl.Caption, "Adobe") > 0 Then
                        If cmdFileCtrl.Caption = saveAsString Then
                            exists = True
                            Exit For
                        Else
                            cmdFileCtrl.Delete
                        End If
                    End If
                Next cmdFileCtrl
                If (exists = False) Then
                    With cmdPopup.Controls.Add(Type:=msoControlButton, Before:=10)
                        .Caption = saveAsString
                        .OnAction = "startPrint"
                        .Visible = True
                    End With
                End If
            End If
            t.saved = True
            Application.CustomizationContext = defaultCustomizationContext
        End If
    #End If
End Sub

Sub startPrint(Optional ByVal nShareMode As Long = 0)
Dim dlgBox As Dialog
Dim fileName, fileNameChar, script As String
Dim fileNameLength As Integer
Dim asciiValue As Double
Dim saved As Boolean
Dim retVal As Boolean
Dim returnVal As Long
Dim dlgBoxOption As Integer
Dim docName, outputFilePath As String
Dim extPos As Long
Dim acrobatExists As Boolean
stringVal = ""
dLim = "|"
dLimName = ":"
On Error Resume Next
#If (MAC_OFFICE_VERSION < 15) Then
    acrobatExists = utils.CheckForAcrobatInstallation
#Else
    'For Office 2016 we will hide the ribbon if acrobat is not installed.
    'We dont need to check Acrobat's installation for every conversion.
    acrobatExists = True
#End If
If (acrobatExists = True) Then
    If (Application.Documents.count > 0) Then
        saved = ActiveDocument.saved
        'Show the Save As dialog box to create the PDF and get the created PDF's filename
        Set dlgBox = Application.Dialogs(wdDialogFileSaveAs)
        dlgBox.Format = Word.wdFormatPDF
        If (isConversionSilent = True) Then
            outputFilePath = getOutputFilePath
            If (outputFilePath <> "") Then
                dlgBox.Name = outputFilePath
                dlgBox.Execute
            End If
        
        Else
            dlgBoxOption = dlgBox.Show
        End If
        If ((dlgBoxOption <> 0) Or ((isConversionSilent = True) And (outputFilePath <> ""))) Then
            fileName = dlgBox.Name
            fileNameLength = Len(fileName)
            stringVal = fileNameLength & dLimName
            'Collecting the filename information character by character because for double byte character dlgBox.Name
            ' doent return the correct filename
            For I = 1 To Len(fileName)
                fileNameChar = Mid(fileName, I, 1)
                asciiValue = AscW(fileNameChar)
                stringVal = stringVal & asciiValue & dLimName
            Next I
            'Not creating links for protected documents necause most of the VBA calls fail in such cases
            If ((ActiveDocument.ProtectionType = wdNoProtection) Or (ActiveDocument.ProtectionType = wdAllowOnlyReading)) Then
            'Not creating links for documents with mixed orientation because more than 1 PDF's are created in such cases.
            'Not creating links for documents with comments pane because Word and PDF"s co-ordinates dont match in such cases.
            'Not creating links for documents with vertical text because VBA returns incorrect position.
                If (((ActiveDocument.PageSetup.Orientation = wdOrientLandscape) Or (ActiveDocument.PageSetup.Orientation = wdOrientPortrait)) And (ActiveDocument.Comments.count = 0) And ((ActiveDocument.Range.Orientation = wdTextOrientationHorizontal) Or (ActiveDocument.Range.Orientation = wdTextOrientationHorizontalRotatedFarEast))) Then
                    If (nShareMode <> 0) Then
                        isConversionSilent = True
                    End If
                    initDoc
                    #If MAC_OFFICE_VERSION >= 15 Then
                        retVal = ShowProgressWindow
                        Call CollectInfo
                    #Else
                        progressDialog.Show
                    #End If
                    
                    If (link.docView <> ActiveDocument.ActiveWindow.View) Then
                        ActiveDocument.ActiveWindow.View = link.docView
                    End If
                    If (link.showHiddenText <> ActiveWindow.View.showHiddenText) Then
                        ActiveWindow.View.showHiddenText = link.showHiddenText
                    End If
                    If (saved <> ActiveDocument.saved) Then
                        ActiveDocument.saved = True
                    End If
                    'Format of stringVal
                    ' Number of characters in file name followed by each character of the filename separated by ":",
                    ' Application type (0- Word, 1- Powerpoint)
                    'number of pages in Word Document
                    'boolean indicating whether the conversion is silent(invoked from Acrobat or FEAT)
                    'number of weblinks, weblinks information,
                    'number of intradocument links , intradocument link information
                    'number of bookmarks, bookmark information separated by "|"
                    'stringVal example for a file containing 1 weblink, 1 toc Link and 1 bookmark named test.
                    '45:77:97:99:105:110:116:111:115:104:32:72:68:58:85:115:101:114:115:58:98:97:108:97:109:58:68:101:115:107:116:111:112:58:116:101:115:116:70:105:108:101:46:112:100:102:
                    ' 1|
                    ' 1|842|595|244.65|255.65|144.65|183.35|1|http://www.adobe.com|
                    ' 1|842|595|121.35|133.35|397.35|504.65|1|842|595|120|214|1|
                    '1|842|595|225.35|244.65|1|test|
                    ' TODO : Write value to a file and read from there using a standard format
                    returnVal = CreateLinks(stringVal)
                    Dim scrRes As String
                    If (nShareMode = ShareMode.OpenShare) Then
                        scrRes = AppleScriptTask("AcrobatUtils.scpt", "CreatePDFAndShare", fileName)
                        isConversionSilent = False
                    ElseIf (nShareMode = ShareMode.OpenSign) Then
                        scrRes = AppleScriptTask("AcrobatUtils.scpt", "CreatePDFAndSign", fileName)
                        isConversionSilent = False
                    End If
                    #If MAC_OFFICE_VERSION >= 15 Then
                        retVal = CloseProgressWindow
                    #End If
                Else
                    If (isConversionSilent = False) Then
                        MsgBox utils.getLocalizedString("linkCreationError")
                    End If
                End If
            Else
                If (isConversionSilent = False) Then
                    MsgBox utils.getLocalizedString("linkCreationError")
                End If
            End If
            If (returnVal <> 0) Then
                If (isConversionSilent = False) Then
                    MsgBox utils.getLocalizedString("linkCreationError")
                End If
            End If
        End If
        stringVal = ""
    Else
        If (isConversionSilent = False) Then
            MsgBox utils.getLocalizedString("noActiveDoc")
        End If
    End If
Else
    MsgBox utils.getLocalizedString("acrobatUninstalledError")
End If
End Sub

'Set the document properties before processing it for the locations
Function initDoc()
    isInvokedFromFeat = False
    docView = ActiveDocument.ActiveWindow.View
    'Set document view to get correct link postions
    ActiveDocument.ActiveWindow.View = wdPrintView
    'Set showHidden text to false because created PDF's do not contain hidden text
    link.showHiddenText = ActiveDocument.ActiveWindow.View.showHiddenText
    ActiveDocument.ActiveWindow.View.showHiddenText = False
    ActiveDocument.Repaginate
    ActiveDocument.Range.Select
    'Set app type as word (0)
    link.stringVal = link.stringVal & "0" & dLim
    noOfPages = Selection.Information(wdNumberOfPagesInDocument)
    link.stringVal = link.stringVal & noOfPages & dLim
    If (isConversionSilent = True) Then
        link.stringVal = link.stringVal & "1" & dLim
    Else
        link.stringVal = link.stringVal & "0" & dLim
    End If
End Function

'Delete the Save As Adobe PDF.. option on exit
Sub AutoExit()
#If MAC_OFFICE_VERSION < 15 Then
    Dim cmdPopup As CommandBarPopup
    Dim cmdCtrl, cmdFileCtrl As CommandBarControl
    Dim t As Template
    For Each t In Templates
        If (t.Name = "linkCreation.dotm") Then
            CustomizationContext = t
            Exit For
        End If
    Next t
    Set cmdMenuBar = Application.CommandBars("Menu Bar")
    For Each cmdCtrl In cmdMenuBar.Controls
        If cmdCtrl.DescriptionText = "File Menu" Then
            Set cmdPopup = cmdCtrl
            For Each cmdFileCtrl In cmdPopup.Controls
                If cmdFileCtrl.Caption = utils.getLocalizedString("saveAs") Then
                    cmdFileCtrl.Delete
                    Exit For
                End If
            Next cmdFileCtrl
            Exit For
        End If
    Next cmdCtrl
    t.saved = True
    Application.CustomizationContext = defaultCustomizationContext
#End If
End Sub


' Function to invoke link creation from FEAT. It is similar to startPrint(). Difference is
' that instead of asking user for destination location it reads the destination location
' from a temporary file which contains the path to FEAT's output directory. Also the function doesnt
' throw any error message box.
'
Sub startPrintFromAcrobat()
    isConversionSilent = True
    startPrint
    isConversionSilent = False
End Sub

'Reads feat output path from a temporary file and deletes it.
Function getOutputFilePath() As String
    Dim tempFilePath, outputFilePath, script As String
    Dim fileNameStartPos As Long
    Dim bFileExists As Boolean
    tempFilePath = "/tmp/AcrOutputFilePath.txt"
    script = "POSIX file" & """" & tempFilePath & """"
    tempFilePath = MacScript(script)
    fileNameStartPos = InStr(tempFilePath, " ")
    tempFilePath = Mid(tempFilePath, fileNameStartPos + 1)
#If MAC_OFFICE_VERSION >= 15 Then
    bFileExists = AppleScriptTask("AcrobatUtils.scpt", "FileExists", tempFilePath)
    If (bFileExists) Then
        getOutputFilePath = AppleScriptTask("AcrobatUtils.scpt", "GetContentsOfFile", tempFilePath)
    Else
        getOutputFilePath = ""
    End If
#Else
    bFileExists = FileExists(tempFilePath)
    If (bFileExists) Then
        Open tempFilePath For Input As #1
        Line Input #1, outputFilePath
        Close #1
        getOutputFilePath = outputFilePath
        Kill tempFilePath
    Else
        getOutputFilePath = ""
    End If
#End If

    
End Function

Function FileExists(ByVal filePath As String) As Boolean
    Dim ScriptToCheckWhetherFileExists As String
    ScriptToCheckWhetherFileExists = "tell application " & Chr(34) & "Finder" & Chr(34) & Chr(13) & "exists file " & _
        Chr(34) & filePath & Chr(34) & Chr(13) & "end tell" & Chr(13)
    FileExists = MacScript(ScriptToCheckWhetherFileExists)

End Function

#If MAC_OFFICE_VERSION >= 15 Then
Sub startPrintService(Optional ByVal nShareMode As Long = 0)
    Dim filePath, currFileName As String
    currFileName = ActiveDocument.Name
    filePath = ActiveDocument.Path & "/" & currFileName
    'If document not saved, or Path is empty (new document) prompt to save doc
    If ActiveDocument.saved = False Or ActiveDocument.Path = "" Then
        ShowUnsavedChangesDialog
    Else
        'if document path includes 'https://' then it comes from cloud sources like SharePoint
        If InStr(ActiveDocument.Path, "https://") = 1 Then
            Dim localFolder, folderName As String
            folderName = "Adobe Service Files"
            localFolder = "/Users/" & Environ("USER") & "/Library/Group Containers/UBF8T346G9.Office/" & folderName & "/"
            If Len(Dir(localFolder, vbDirectory)) = 0 Then
                Dim CreateFolder As String
                CreateFolder = AppleScriptTask("AcrobatUtils.scpt", "CreateServiceConversionFolder", folderName)
            End If
            Set docObj = Documents.Add(Template:=filePath, NewTemplate:=False, DocumentType:=wdNewBlankDocument, Visible:=False)
            currFileName = localFolder & currFileName
            docObj.SaveAs2 fileName:=currFileName, FileFormat:=wdFormatDocumentDefault, AddToRecentFiles:=False
            filePath = docObj.Path & "/" & docObj.Name
            docObj.Close
        End If
    
        Dim scrRes As String
        If (nShareMode = ShareMode.OpenShare) Then
            scrRes = AppleScriptTask("AcrobatUtils.scpt", "CreatePDFAndShare", filePath)
        ElseIf (nShareMode = ShareMode.OpenSign) Then
            scrRes = AppleScriptTask("AcrobatUtils.scpt", "CreatePDFAndSign", filePath)
            isConversionSilent = False
        Else
            scrRes = AppleScriptTask("AcrobatUtils.scpt", "CreatePDFServiceConversion", filePath)
        End If
    End If
End Sub
'Automation Helper APIs
Sub startPrintAndShare()
    isConversionSilent = True
    startPrint (1)
    isConversionSilent = False
End Sub
Sub startServiceAndShare()
    startPrintService (1)
End Sub
#End If


Attribute VB_Name = "progressDialog"
Attribute VB_Base = "0{C8DE14E3-AE53-024F-B368-578F779F4FD9}{6D7AF8EE-2285-D646-A4D3-8B186E1227BF}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False


Private Sub UserForm_Activate()
    Label3.Caption = utils.getLocalizedString("convertToPDF")
    webLinkCreation.initWebLinks
    webLinkCreation.addTextLink
    Label1.Width = 50
    Frame1.Repaint
    DoEvents
    webLinkCreation.addHeaderFooterWebLinks
    Label1.Width = 100
    Frame1.Repaint
    DoEvents
    webLinkCreation.addShapesWebLinks
    Label1.Width = 150
    Frame1.Repaint
    DoEvents
    webLinkCreation.webLinksTerm
    intraDocLinkCreation.initIntraDocLinks
    intraDocLinkCreation.tocLinks
    Label1.Width = 200
    Frame1.Repaint
    DoEvents
    intraDocLinkCreation.tofLinks
    Label1.Width = 250
    Frame1.Repaint
    DoEvents
    intraDocLinkCreation.crossRefLinks
    Label1.Width = 300
    Frame1.Repaint
    DoEvents
    intraDocLinkCreation.intraDocLinksTerm
    bookmarks.bookmarkLinks
    Label1.Width = 390
    Frame1.Repaint
    DoEvents
    Unload Me
End Sub



Attribute VB_Name = "utils"
'PtrSafe is not available for Office 2011
#If MAC_OFFICE_VERSION < 15 Then
    Declare Function getLocalizedStringLength Lib "/Library/Application Support/Adobe/MACPDFM/MacPDFM.framework/Versions/A/MacPDFM" (ByVal stringID As String) As Long
    Declare Function getLocalizedStringAsArray Lib "/Library/Application Support/Adobe/MACPDFM/MacPDFM.framework/Versions/A/MacPDFM" (ByRef stringArray As Long) As Long
    Declare Function IsAcrobatInstalled Lib "/Library/Application Support/Adobe/MACPDFM/MacPDFM.framework/Versions/A/MacPDFM" () As Boolean
    Declare Function getSizeOfLong Lib "/Library/Application Support/Adobe/MACPDFM/MacPDFM.framework/Versions/A/MacPDFM" () As Integer
#Else
    Declare PtrSafe Function getLocalizedStringLength Lib "/Library/Application Support/Adobe/MACPDFM/MacPDFM.framework/Versions/A/MacPDFM" (ByVal stringID As String) As Long
    Declare PtrSafe Function getLocalizedStringAsArray Lib "/Library/Application Support/Adobe/MACPDFM/MacPDFM.framework/Versions/A/MacPDFM" (ByRef stringArray As Long) As Long
    Declare PtrSafe Function IsAcrobatInstalled Lib "/Library/Application Support/Adobe/MACPDFM/MacPDFM.framework/Versions/A/MacPDFM" () As Boolean
    Declare PtrSafe Function getSizeOfLong Lib "/Library/Application Support/Adobe/MACPDFM/MacPDFM.framework/Versions/A/MacPDFM" () As Integer
    Declare PtrSafe Function IsConversionRouteService Lib "/Library/Application Support/Adobe/MACPDFM/MacPDFM.framework/Versions/A/MacPDFM" () As Boolean
    Declare PtrSafe Function IsServiceConversionEnabled Lib "/Library/Application Support/Adobe/MACPDFM/MacPDFM.framework/Versions/A/MacPDFM" () As Boolean
    Declare PtrSafe Function ShowPreferences Lib "/Library/Application Support/Adobe/MACPDFM/MacPDFM.framework/Versions/A/MacPDFM" ()
    Declare PtrSafe Function IsCreateAndSignEnabled Lib "/Library/Application Support/Adobe/MACPDFM/MacPDFM.framework/Versions/A/MacPDFM" () As Boolean

#End If

Function getLocalizedString(ByVal stringID As String) As String

    Dim strLength As Long
    Dim strArray() As Long
    Dim localizedString As String
    Dim longSize As Integer
    Dim adjFactor As Integer
    longSize = getSizeOfLong
    adjFactor = longSize / LenB(strArray(0))
    strLength = getLocalizedStringLength(stringID)
    If (strLength > 0) Then
        ReDim strArray(strLength * adjFactor)
        getLocalizedStringAsArray strArray(0)
        For I = 0 To strLength - 1
            localizedString = localizedString & ChrW(strArray(I * adjFactor))
        Next I
    End If
    getLocalizedString = localizedString
End Function


Function CheckForAcrobatInstallation() As Boolean
#If MAC_OFFICE_VERSION < 15 Then
    Dim myscript As String
    myscript = "try" & Chr(13) & _
    "tell application " & Chr(34) & "Finder" & Chr(34) & " to get application file id " & Chr(34) & "com.adobe.Acrobat.Pro" & Chr(34) & Chr(13) & _
    "set appExists to true" & Chr(13) & _
    "on error" & Chr(13) & _
    "set appExists to false" & Chr(13) & _
    "end try"
    CheckForAcrobatInstallation = MacScript(myscript)
#Else
    CheckForAcrobatInstallation = IsAcrobatInstalled
#End If
End Function

Function convertToHFS(ByVal filePath As String) As String
    Dim myscript As String
    myscript = "POSIX file " & Chr(34) & filePath & Chr(34) & " as string"
    convertToHFS = MacScript(myscript)
End Function

Function convertToPosix(ByVal filePath As String) As String
    Dim myscript As String
    myscript = "POSIX path of" & Chr(34) & filePath & Chr(34) & " as string"
    convertToPosix = MacScript(myscript)
End Function


Function CollectInfo()
    webLinkCreation.initWebLinks
    webLinkCreation.addTextLink
    webLinkCreation.addHeaderFooterWebLinks
    webLinkCreation.addShapesWebLinks
    webLinkCreation.webLinksTerm
    intraDocLinkCreation.initIntraDocLinks
    intraDocLinkCreation.tocLinks
    intraDocLinkCreation.tofLinks
    intraDocLinkCreation.crossRefLinks
    intraDocLinkCreation.intraDocLinksTerm
    bookmarks.bookmarkLinks
End Function

#If MAC_OFFICE_VERSION >= 15 Then
Public Function GetLabel(ByVal control As IRibbonControl, ByRef returnVal)
    Dim labelStr As String
On Error GoTo Err:
    If control.ID = "ACROBAT_CreatePDF" Then
        labelStr = getLocalizedString("createPDF")
        returnVal = labelStr
    ElseIf control.ID = "ACROBAT_Preferences" Then
        labelStr = getLocalizedString("preferencesLabel")
        returnVal = labelStr
    ElseIf control.ID = "ACROBAT_SHARE" Then
        labelStr = getLocalizedString("shareGrpLabel")
        returnVal = labelStr
    ElseIf control.ID = "ACROBAT_CreateAndShare" Then
        labelStr = getLocalizedString("shareBtnLabel")
        returnVal = labelStr
    ElseIf control.ID = "ACROBAT_CreateAndSign" Then
        labelStr = getLocalizedString("signBtnLabel")
        returnVal = labelStr
    End If
    
    Exit Function
Err:
    returnVal = ""
End Function


Public Function OnAction(ByVal control As IRibbonControl)
    Dim doService As Boolean
    Dim nShareMode As Long
    nShareMode = ShareMode.OpenNone
    If control.ID = "ACROBAT_CreatePDF" Or control.ID = "ACROBAT_CreateAndShare" Or control.ID = "ACROBAT_CreateAndSign" Then
        'Check if User chose (or chooses) to convert via Service
        If control.ID = "ACROBAT_CreateAndShare" Then
            nShareMode = ShareMode.OpenShare
        ElseIf control.ID = "ACROBAT_CreateAndSign" Then
            nShareMode = ShareMode.OpenSign
        End If
        If IsServiceConversionEnabled Then
            #If MAC_OFFICE_VERSION >= 16 Then
            'For September release avoid service conversion if document has track changes and user selected to hide them
                If (ActiveDocument.Revisions.count > 0 Or ActiveDocument.Comments.count > 0) And ActiveWindow.View.RevisionsFilter.Markup <> wdRevisionsMarkupAll Then
                    doService = False
                Else
                    doService = IsConversionRouteService()
                End If
            #Else
                doService = IsConversionRouteService()
            #End If
        Else
            doService = False
        End If
        If doService = False Then
            startPrint (nShareMode)
        Else
            startPrintService (nShareMode)
        End If
    
    ElseIf control.ID = "ACROBAT_Preferences" Then
        ShowPreferences
    End If
End Function

Public Function GetEnabled(ByVal control As IRibbonControl, ByRef returnVal)
On Error GoTo Err:
    If control.ID = "ACROBAT_CreatePDF" Or control.ID = "ACROBAT_Preferences" Or control.ID = "ACROBAT_CreateAndShare" Or control.ID = "ACROBAT_CreateAndSign" Then
        returnVal = CheckForAcrobatInstallation
    End If
    Exit Function
Err:
    returnVal = False
End Function

Public Function GetVisible(ByVal control As IRibbonControl, ByRef returnVal)
    Dim version, subVersion As String
    Dim firstDotPos, secondDotPos, versionInt As Integer
    If control.ID = "ACROBAT_RIBBON" Then
    #If MAC_OFFICE_VERSION = 15 Then
        returnVal = False
        version = Application.version
        firstDotPos = InStr(version, ".")
        secondDotPos = InStr(firstDotPos + 1, version, ".")
        If secondDotPos <> 0 Then
            subVersion = Mid(version, firstDotPos + 1, secondDotPos - firstDotPos - 1)
        Else
            subVersion = Mid(version, firstDotPos + 1)
        End If
        versionInt = CInt(subVersion)
        If versionInt >= 22 Then
            returnVal = True
        End If
    #Else
        returnVal = True
    #End If
    ElseIf control.ID = "ACROBAT_Preferences" Then
        returnVal = IsServiceConversionEnabled
    ElseIf control.ID = "ACROBAT_CreateAndSign" Then
        returnVal = IsCreateAndSignEnabled
    End If
End Function

    
Public Function GetScreentip(ByVal control As IRibbonControl, ByRef returnVal)
    Dim tipStr As String
    If control.ID = "ACROBAT_CreateAndShare" Then
        tipStr = getLocalizedString("shareScreenTip")
    ElseIf control.ID = "ACROBAT_CreateAndSign" Then
        tipStr = getLocalizedString("signScreenTip")
    End If
    returnVal = tipStr
End Function
#End If
Attribute VB_Name = "webLinkCreation"
Public noOfLinks As Long
Public tempStringVal As String

Function initWebLinks()
    tempStringVal = ""
    noOfLinks = 0
End Function

Function addTextLink() As Long
Dim hyperlinkCount, top, bottom, left, right, pageNum, pageHeight, pageWidth, paperSize, fontSize, noOfChars, prevLineNo, currLineNo, noOfPages, noOfSections, noOfSectionLinks As Long
Dim address As String
Dim returnValue As Integer
Dim Val As Boolean
Dim hyperLinkVal As Hyperlink
noOfPages = 0
noOfSections = ActiveDocument.Sections.count
On Error Resume Next
'Collect hyperlink information for each section
For I = 1 To noOfSections
    hyperlinkCount = ActiveDocument.Sections(I).Range.Hyperlinks.count
    pageHeight = ActiveDocument.Sections(I).PageSetup.pageHeight
    pageWidth = ActiveDocument.Sections(I).PageSetup.pageWidth
    For j = 1 To hyperlinkCount
        Set hyperLinkVal = ActiveDocument.Sections(I).Range.Hyperlinks(j)
        If (hyperLinkVal.Type = msoHyperlinkRange) Then
            If (IsInternetLink(hyperLinkVal)) Then
                If (hyperLinkVal.Range.Words.count > 0 And pageHeight > 0 And pageWidth > 0) Then
                   Call insertLinkDetails(hyperLinkVal, pageHeight, pageWidth)
                End If
                'Word at times treats link on inline shape as msoHyperlinkRange
                If (ActiveDocument.Sections(I).Range.Hyperlinks(j).Range.InlineShapes.count > 0) Then
                    address = ActiveDocument.Sections(I).Range.Hyperlinks(j).address
                    If (ActiveDocument.Sections(I).Range.Hyperlinks(j).SubAddress <> "") Then
                        address = address & "#" & ActiveDocument.Sections(I).Range.Hyperlinks(j).SubAddress
                    End If
                    ActiveDocument.Sections(I).Range.Hyperlinks(j).Range.InlineShapes(1).Select
                    top = Selection.Information(wdVerticalPositionRelativeToPage)
                    left = Selection.Information(wdHorizontalPositionRelativeToPage)
                    bottom = top + ActiveDocument.Sections(I).Range.Hyperlinks(j).Range.InlineShapes(1).Height
                    right = left + ActiveDocument.Sections(I).Range.Hyperlinks(j).Range.InlineShapes(1).Width
                    pageNum = Selection.Information(wdActiveEndPageNumber)
                    If ((pageHeight > 0) And (pageWidth > 0) And (top > 0) And (bottom > 0) And (left > 0) And (right > 0) And (pageNum > 0) And (address <> "")) Then
                        noOfLinks = noOfLinks + 1
                        tempStringVal = tempStringVal & pageHeight & dLim & pageWidth & dLim & top & dLim & bottom & dLim & left & dLim & right & dLim & pageNum & dLim & address & dLim
                    End If
                End If
            End If
        End If
    Next j
Next I
End Function

Function addHeaderFooterWebLinks()
Dim secFirstPageNo, secLastPageNo, pageNum, pageHeight, pageWidth, paperSize, noOfSections, headersCount, noOfSectionLinks, footersCount, first  As Long
Dim diffFirstPage, diffOddAndEven As Boolean
Dim hyperLinkVal As Hyperlink
noOfSections = ActiveDocument.Sections.count
On Error Resume Next:
For I = 1 To noOfSections
    diffFirstPage = ActiveDocument.Sections(I).PageSetup.DifferentFirstPageHeaderFooter
    diffOddAndEven = ActiveDocument.Sections(I).PageSetup.OddAndEvenPagesHeaderFooter
    'Determine the first and last page numbers for each section
    ' as header/footer will span the entire section.
    If I = 1 Then
        secFirstPageNo = 1
    Else
        If ActiveDocument.Sections(I - 1).PageSetup.SectionStart = wdSectionContinuous Then
            ActiveDocument.Sections(I - 1).Range.Select
            secFirstPageNo = Selection.Information(wdActiveEndPageNumber) + 1
        Else
            ActiveDocument.Sections(I - 1).Range.Select
            secFirstPageNo = Selection.Information(wdActiveEndPageNumber)
        End If
    End If
    If (I <> noOfSections) Then
        If (ActiveDocument.Sections(I + 1).PageSetup.SectionStart <> wdSectionContinuous) Then
             ActiveDocument.Sections(I - 1).Range.Select
             secLastPageNo = Selection.Information(wdActiveEndPageNumber) - 1
        Else
             ActiveDocument.Sections(I - 1).Range.Select
             secLastPageNo = Selection.Information(wdActiveEndPageNumber)
        End If
    Else
        ActiveDocument.Sections(I - 1).Range.Select
        secLastPageNo = Selection.Information(wdActiveEndPageNumber)
    End If
    headersCount = ActiveDocument.Sections(I).Headers.count
    If headersCount > 0 Then
     'Collect headers link information
        ActiveDocument.Sections(I).Range.Select
        pageHeight = Selection.PageSetup.pageHeight
        pageWidth = Selection.PageSetup.pageWidth
        For j = 1 To headersCount
            If ActiveDocument.Sections(I).Headers(j).exists = True Then
                noOfSectionLinks = ActiveDocument.Sections(I).Headers(j).Range.Hyperlinks.count
                If noOfSectionLinks > 0 Then
                    For k = 1 To noOfSectionLinks
                        Set hyperLinkVal = ActiveDocument.Sections(I).Headers(j).Range.Hyperlinks(k)
                        If (hyperLinkVal.Type = msoHyperlinkRange) Then
                            If (IsInternetLink(hyperLinkVal)) Then
                            'Set the view of the document according to the header type to determine correct location
                            ' of header links
                                If (j = 1) Then
                                    ActiveDocument.ActiveWindow.View.SeekView = wdSeekPrimaryHeader
                                End If
                                If (j = 2) Then
                                    ActiveDocument.ActiveWindow.View.SeekView = wdSeekFirstPageHeader
                                End If
                                If (j = 3) Then
                                    ActiveDocument.ActiveWindow.View.SeekView = wdSeekEvenPagesHeader
                                End If
                                If (pageHeight > 0 And pageWidth > 0 And j > 0 And secFirstPageNo > 0 And secLastPageNo > 0) Then
                                    Call insertHFLinkDetails(hyperLinkVal, pageHeight, pageWidth, j, secFirstPageNo, secLastPageNo, diffFirstPage, diffOddAndEven)
                                End If
                            End If
                        End If
                    Next k
                End If
            End If
        Next j
    End If
    footersCount = ActiveDocument.Sections(I).Footers.count
    If footersCount > 0 Then
    'Collect footers links information
        ActiveDocument.Sections(I).Range.Select
        pageHeight = Selection.PageSetup.pageHeight
        pageWidth = Selection.PageSetup.pageWidth
        For j = 1 To footersCount
            If ActiveDocument.Sections(I).Footers(j).exists = True Then
                noOfSectionLinks = ActiveDocument.Sections(I).Footers(j).Range.Hyperlinks.count
                If noOfSectionLinks > 0 Then
                    For k = 1 To noOfSectionLinks
                        Set hyperLinkVal = ActiveDocument.Sections(I).Footers(j).Range.Hyperlinks(k)
                        If (hyperLinkVal.Type = msoHyperlinkRange) Then
                            If (IsInternetLink(hyperLinkVal)) Then
                            'Set the view of the document according to the footer type to determine correct location
                            ' of footer links
                                If (j = 1) Then
                                    ActiveDocument.ActiveWindow.View.SeekView = wdSeekPrimaryFooter
                                End If
                                If (j = 2) Then
                                    ActiveDocument.ActiveWindow.View.SeekView = wdSeekFirstPageFooter
                                End If
                                If (j = 3 And ActiveDocument.ComputeStatistics(wdStatisticPages) > 1) Then
                                    ActiveDocument.ActiveWindow.View.SeekView = wdSeekEvenPagesFooter
                                End If
                                 If (pageHeight > 0 And pageWidth > 0 And j > 0 And secFirstPageNo > 0 And secLastPageNo > 0) Then
                                    Call insertHFLinkDetails(hyperLinkVal, pageHeight, pageWidth, j, secFirstPageNo, secLastPageNo, diffFirstPage, diffOddAndEven)
                                End If
                            End If
                        End If
                    Next k
                End If
            End If
        Next j
    End If
Next I
End Function

Function addShapesWebLinks()
Dim noOfInlineShapes, noOfShapes, inlineShapeLinkCount, hyperlinkCount, top, bottom, left, right, pageNum, pageHeight, pageWidth, paperSize, fontSize, noOfChars, prevLineNo, currLineNo, shapesCount, shapeLinkCount, noOfPages, noOfSections, noOfSectionLinks As Long
ActiveDocument.ActiveWindow.View = wdPrintView
noOfSections = ActiveDocument.Sections.count
On Error Resume Next:
For I = 1 To noOfSections
    pageHeight = ActiveDocument.Sections(I).PageSetup.pageHeight
    pageWidth = ActiveDocument.Sections(I).PageSetup.pageWidth
    noOfInlineShapes = ActiveDocument.Sections(I).Range.InlineShapes.count
    For j = 1 To noOfInlineShapes
    'Collect link information for links on inline shapes.
        If (ActiveDocument.Sections(I).Range.InlineShapes(j).Type = wdInlineShapePicture Or ActiveDocument.Sections(I).Range.InlineShapes(j).Type = wdInlineShapeHorizontalLine Or ActiveDocument.Sections(I).Range.InlineShapes(j).Type = wdInlineShapeSmartArt Or ActiveDocument.Sections(I).Range.InlineShapes(j).Type = wdInlineShapeEmbeddedOLEObject Or ActiveDocument.Sections(I).Range.InlineShapes(j).Type = wdInlineShapeChart) Then
            ActiveDocument.Sections(I).Range.InlineShapes(j).Select
            inlineShapeLinkCount = Selection.Hyperlinks.count
            If (inlineShapeLinkCount > 0) Then
                For k = 1 To inlineShapeLinkCount
                If (IsInternetLink(Selection.Hyperlinks(k))) Then
                    If ((Selection.Hyperlinks(k).Type = msoHyperlinkInlineShape) Or (Selection.Hyperlinks(k).Type = msoHyperlinkShape)) Then
                        address = Selection.Hyperlinks(k).address
                        If (Selection.Hyperlinks(k).SubAddress <> "") Then
                            address = address & "#" & Selection.Hyperlinks(k).SubAddress
                        End If
                        top = Selection.Information(wdVerticalPositionRelativeToPage)
                        bottom = top + ActiveDocument.Sections(I).Range.InlineShapes(j).Height
                        left = Selection.Information(wdHorizontalPositionRelativeToPage)
                        right = left + ActiveDocument.Sections(I).Range.InlineShapes(j).Width
                        pageNum = Selection.Information(wdActiveEndPageNumber)
                        If ((pageHeight > 0) And (pageWidth > 0) And (top > 0) And (bottom > 0) And (left > 0) And (right > 0) And (pageNum > 0) And (address <> "")) Then
                            tempStringVal = tempStringVal & pageHeight & dLim & pageWidth & dLim & top & dLim & bottom & dLim & left & dLim & right & dLim & pageNum & dLim & address & dLim
                            noOfLinks = noOfLinks + 1
                        End If
                        Selection.Collapse (wdCollapseStart)
                    End If
                End If
                Next k
            End If
        End If
    Next j
Next I
noOfShapes = ActiveDocument.Shapes.count
Dim txtBoxLinkCount As Long
For I = 1 To noOfShapes
'Collect link information for links on shapes
    If (ActiveDocument.Shapes(I).Type = msoAutoShape Or ActiveDocument.Shapes(I).Type = msoFreeform Or ActiveDocument.Shapes(I).Type = msoLine Or ActiveDocument.Shapes(I).Type = msoPicture Or ActiveDocument.Shapes(I).Type = msoCallout Or ActiveDocument.Shapes(I).Type = msoTextBox Or ActiveDocument.Shapes(I).Type = msoChart Or ActiveDocument.Shapes(I).Type = msoEmbeddedOLEObject) Then
        ActiveDocument.Shapes(I).Select
        On Error Resume Next:
        If (IsInternetLink(ActiveDocument.Shapes(I).Hyperlink)) Then
            If (ActiveDocument.Shapes(I).Hyperlink.Type = msoHyperlinkShape) Then
                pageHeight = Selection.Sections(1).PageSetup.pageHeight
                pageWidth = Selection.Sections(1).PageSetup.pageWidth
                address = ActiveDocument.Shapes(I).Hyperlink.address
                If (ActiveDocument.Shapes(I).Hyperlink.SubAddress <> "") Then
                    address = address & "#" & ActiveDocument.Shapes(I).Hyperlink.SubAddress
                End If
                top = ActiveDocument.Shapes(I).top + ActiveDocument.Shapes(I).Anchor.Information(wdVerticalPositionRelativeToPage)
                bottom = top + ActiveDocument.Shapes(I).Height
                left = ActiveDocument.Shapes(I).left + ActiveDocument.Shapes(I).Anchor.Information(wdHorizontalPositionRelativeToPage)
                right = left + ActiveDocument.Shapes(I).Width
                pageNum = Selection.Information(wdActiveEndPageNumber)
                If ((pageHeight > 0) And (pageWidth > 0) And (top > 0) And (bottom > 0) And (left > 0) And (right > 0) And (pageNum > 0) And (address <> "")) Then
                    tempStringVal = tempStringVal & pageHeight & dLim & pageWidth & dLim & top & dLim & bottom & dLim & left & dLim & right & dLim & pageNum & dLim & address & dLim
                    noOfLinks = noOfLinks + 1
                End If
                Selection.Collapse (wdCollapseStart)
            End If
        End If
    End If
    On Error Resume Next:
    'Collect link information for links inside text boxes.
    If ((ActiveDocument.Shapes(I).Type = msoTextBox Or ActiveDocument.Shapes(I).Type = msoAutoShape) And (ActiveDocument.Shapes(I).TextFrame.HasText)) Then
        txtBoxLinkCount = ActiveDocument.Shapes(I).TextFrame.TextRange.Hyperlinks.count
        For j = 1 To txtBoxLinkCount
            If (ActiveDocument.Shapes(I).TextFrame.TextRange.Hyperlinks(j).Type = msoHyperlinkRange) Then
                If (IsInternetLink(ActiveDocument.Shapes(I).TextFrame.TextRange.Hyperlinks(j))) Then
                    ActiveDocument.Shapes(I).Select
                    pageHeight = Selection.Sections(1).PageSetup.pageHeight
                    pageWidth = Selection.Sections(1).PageSetup.pageWidth
                    ActiveDocument.Shapes(I).TextFrame.TextRange.Hyperlinks(j).Range.Select
                    noOfChars = Selection.Characters.count
                    address = ActiveDocument.Shapes(I).TextFrame.TextRange.Hyperlinks(j).address
                    If (ActiveDocument.Shapes(I).TextFrame.TextRange.Hyperlinks(j).SubAddress <> "") Then
                        address = address & "#" & ActiveDocument.Shapes(I).TextFrame.TextRange.Hyperlinks(j).SubAddress
                    End If
                    Selection.Collapse (wdCollapseStart)
                    returnValue = Selection.Move(wdCharacter, 1)
                    fontSize = Selection.Font.Size
                    returnValue = Selection.Move(wdCharacter, -1)
                    left = Selection.Information(wdHorizontalPositionRelativeToPage)
                    top = Selection.Information(wdVerticalPositionRelativeToPage)
                    For k = 1 To noOfChars
                        prevLineNo = Selection.Information(wdVerticalPositionRelativeToPage)
                        returnValue = Selection.Move(wdCharacter, 1)
                        currLineNo = Selection.Information(wdVerticalPositionRelativeToPage)
                        If (prevLineNo <> currLineNo) Then
                            returnValue = Selection.Move(wdCharacter, -1)
                            right = Selection.Information(wdHorizontalPositionRelativeToPage)
                            bottom = fontSize + top
                            pageNum = Selection.Information(wdActiveEndPageNumber)
                            prevLineNo = currLineNo
                            If ((pageHeight > 0) And (pageWidth > 0) And (top > 0) And (bottom > 0) And (left > 0) And (right > 0) And (pageNum > 0) And (address <> "")) Then
                                tempStringVal = tempStringVal & pageHeight & dLim & pageWidth & dLim & top & dLim & bottom & dLim & left & dLim & right & dLim & pageNum & dLim & address & dLim
                                noOfLinks = noOfLinks + 1
                            End If
                            returnValue = Selection.Move(wdCharacter, 1)
                            left = Selection.Information(wdHorizontalPositionRelativeToPage)
                            fontSize = Selection.Font.Size
                            top = Selection.Information(wdVerticalPositionRelativeToPage)
                        End If
                    Next k
                    right = Selection.Information(wdHorizontalPositionRelativeToPage)
                    bottom = fontSize + top
                    pageNum = Selection.Information(wdActiveEndPageNumber)
                    If ((pageHeight > 0) And (pageWidth > 0) And (top > 0) And (bottom > 0) And (left > 0) And (right > 0) And (pageNum > 0) And (address <> "")) Then
                        noOfLinks = noOfLinks + 1
                        tempStringVal = tempStringVal & pageHeight & dLim & pageWidth & dLim & top & dLim & bottom & dLim & left & dLim & right & dLim & pageNum & dLim & address & dLim
                    End If
                End If
            End If
        Next j
    End If
Next I
End Function

'Determines whether a hyperlink is an internet link or not
Function IsInternetLink(aLink As Hyperlink) As Boolean
Dim url As String
Dim colonPos As Long
Dim protocol As String
IsInternetLink = False
On Error Resume Next:
url = LCase(aLink.address)
colonPos = InStr(url, ":")
If (colonPos > 0) Then
    protocol = left(url, colonPos - 1)
    Select Case protocol
    Case "http", "https", "ftp", "mailto", "gopher", "news", "telnet", "wais"
         IsInternetLink = True
    Case Else
        IsInternetLink = False
    End Select
ElseIf LCase(left(url, 4)) = "www." Then
    IsInternetLink = True
End If
End Function

'Updates first page number for the header/footer depending on header/footer type
' and whether the document has different first page header/footer and different odd/even page header /footer.
Function determineRange(ByVal hfType As Long, ByVal secFirstPageNo As Long, ByVal diffFirstPage As Boolean, ByVal diffOddAndEven As Boolean, ByRef stepVal As Long) As Long
    first = secFirstPageNo
    If (hfType = 3) Then
        If secFirstPageNo Mod 2 <> 0 Then
            first = first + 1
        End If
        stepVal = 2
    End If
    If (hfType = 1 And diffFirstPage = False And diffOddAndEven = True) Then
        If secFirstPageNo Mod 2 = 0 Then
            first = first + 1
        End If
        stepVal = 2
    End If
    If (hfType = 1 And diffFirstPage = True And diffOddAndEven = True) Then
        If (secFirstPageNo + 1) Mod 2 = 0 Then
            first = first + 2
        Else
            first = first + 1
        End If
        stepVal = 2
    End If
    If (hfType = 1 And diffFirstPage = True And diffOddAndEven = False) Then
            first = first + 1
    End If
    determineRange = first
End Function
 
Function insertLinkDetails(ByRef hyperLinkVal As Hyperlink, ByVal pageHeight As Long, ByVal pageWidth As Long)
    Dim address As String
    Dim noOfChars, fontSize, returnValue, top, bottom, left, right, pageNum As Long
    On Error Resume Next:
    hyperLinkVal.Range.Select
    noOfChars = Selection.Characters.count
    address = hyperLinkVal.address
    'Check if the link is anchored to a particular position in the webpage
    If (hyperLinkVal.SubAddress <> "") Then
        address = address & "#" & hyperLinkVal.SubAddress
    End If
    'To collect the location information traverse the selection character by character
    'This helps us to detect the presence of links that span over multiple rows
    'TODO: Optimise this process
    Selection.Collapse (wdCollapseStart)
    returnValue = Selection.Move(wdCharacter, 1)
    fontSize = Selection.Font.Size
    returnValue = Selection.Move(wdCharacter, -1)
    left = Selection.Information(wdHorizontalPositionRelativeToPage)
    top = Selection.Information(wdVerticalPositionRelativeToPage)
    For k = 1 To noOfChars
        prevLineNo = Selection.Information(wdVerticalPositionRelativeToPage)
        returnValue = Selection.Move(wdCharacter, 1)
        currLineNo = Selection.Information(wdVerticalPositionRelativeToPage)
        If (prevLineNo <> currLineNo) Then
            returnValue = Selection.Move(wdCharacter, -1)
            right = Selection.Information(wdHorizontalPositionRelativeToPage)
            bottom = fontSize + top
            pageNum = Selection.Information(wdActiveEndPageNumber)
            prevLineNo = currLineNo
            If ((pageHeight > 0) And (pageWidth > 0) And (top > 0) And (bottom > 0) And (left > 0) And (right > 0) And (pageNum > 0) And (address <> "")) Then
                noOfLinks = noOfLinks + 1
                tempStringVal = tempStringVal & pageHeight & dLim & pageWidth & dLim & top & dLim & bottom & dLim & left & dLim & right & dLim & pageNum & dLim & address & dLim
            End If
            returnValue = Selection.Move(wdCharacter, 1)
            left = Selection.Information(wdHorizontalPositionRelativeToPage)
            fontSize = Selection.Font.Size
            top = Selection.Information(wdVerticalPositionRelativeToPage)
        End If
    Next k
    right = Selection.Information(wdHorizontalPositionRelativeToPage)
    bottom = fontSize + top
    pageNum = Selection.Information(wdActiveEndPageNumber)
    If ((pageHeight > 0) And (pageWidth > 0) And (top > 0) And (bottom > 0) And (left > 0) And (right > 0) And (pageNum > 0) And (address <> "")) Then
        noOfLinks = noOfLinks + 1
        tempStringVal = tempStringVal & pageHeight & dLim & pageWidth & dLim & top & dLim & bottom & dLim & left & dLim & right & dLim & pageNum & dLim & address & dLim
    End If
End Function

Function insertHFLinkDetails(ByRef hyperLinkVal As Hyperlink, ByVal pageHeight As Long, ByVal pageWidth As Long, ByVal hfType As Long, ByVal secFirstPageNo As Long, ByVal secLastPageNo As Long, ByVal diffFirstPage As Boolean, ByVal diffOddAndEven As Boolean)
Dim prevLineNo, currLineNo, returnValue, noOfChars, left, right, top, bottom, fontSize As Long
Dim stepVal As Long
Dim address As String
On Error Resume Next:
address = hyperLinkVal.address
If (hyperLinkVal.SubAddress <> "") Then
    address = address & "#" & hyperLinkVal.SubAddress
End If
hyperLinkVal.Range.Select
noOfChars = Selection.Characters.count
Selection.Collapse (wdCollapseStart)
'To collect the location information traverse the selection character by character
'This helps us to detect the presence of links that span over multiple rows
'TODO: Optimise this process
left = Selection.Information(wdHorizontalPositionRelativeToPage)
fontSize = Selection.Font.Size
top = Selection.Information(wdVerticalPositionRelativeToPage)
For l = 1 To noOfChars
    prevLineNo = Selection.Information(wdVerticalPositionRelativeToPage)
    returnValue = Selection.Move(wdCharacter, 1)
    currLineNo = Selection.Information(wdVerticalPositionRelativeToPage)
    If (prevLineNo <> currLineNo) Then
        returnValue = Selection.Move(wdCharacter, -1)
        right = Selection.Information(wdHorizontalPositionRelativeToPage)
        bottom = fontSize + top
        prevLineNo = currLineNo
        'If header/footer type is wdHeaderFooterFirstPage (2) then add the link only to the first page of section
        If (hfType = 2) Then
            If ((pageHeight > 0) And (pageWidth > 0) And (top > 0) And (bottom > 0) And (left > 0) And (right > 0) And (secFirstPageNo > 0) And (address <> "")) Then
                tempStringVal = tempStringVal & pageHeight & dLim & pageWidth & dLim & top & dLim & bottom & dLim & left & dLim & right & dLim & secFirstPageNo & dLim & address & dLim
                noOfLinks = noOfLinks + 1
            End If
        Else
        stepVal = 1
        'If header/footer type is wdHeaderFooterEvenPages or wdHeaderFooterPrimary then add links to all or odd or even pages of the section
        ' depending on DifferentFirstPageHeaderFooter and OddAndEvenPagesHeaderFooter property of the document
        first = determineRange(hfType, secFirstPageNo, diffFirstPage, diffOddAndEven, stepVal)
        If ((pageHeight > 0) And (pageWidth > 0) And (top > 0) And (bottom > 0) And (left > 0) And (right > 0) And (first > 0) And (secLastPageNo > 0) And (address <> "")) Then
            For m = first To secLastPageNo Step stepVal
                noOfLinks = noOfLinks + 1
                tempStringVal = tempStringVal & pageHeight & dLim & pageWidth & dLim & top & dLim & bottom & dLim & left & dLim & right & dLim & m & dLim & address & dLim
            Next m
        End If
    End If
    returnValue = Selection.Move(wdCharacter, 1)
    left = Selection.Information(wdHorizontalPositionRelativeToPage)
    fontSize = Selection.Font.Size
    top = Selection.Information(wdVerticalPositionRelativeToPage)
    End If
Next l
right = Selection.Information(wdHorizontalPositionRelativeToPage)
bottom = fontSize + top
If (hfType = 2) Then
    If ((pageHeight > 0) And (pageWidth > 0) And (top > 0) And (bottom > 0) And (left > 0) And (right > 0) And (secFirstPageNo > 0) And (address <> "")) Then
        tempStringVal = tempStringVal & pageHeight & dLim & pageWidth & dLim & top & dLim & bottom & dLim & left & dLim & right & dLim & secFirstPageNo & dLim & address & dLim
        noOfLinks = noOfLinks + 1
    End If
Else
    stepVal = 1
    first = determineRange(hfType, secFirstPageNo, diffFirstPage, diffOddAndEven, stepVal)
    If ((pageHeight > 0) And (pageWidth > 0) And (top > 0) And (bottom > 0) And (left > 0) And (right > 0) And (first > 0) And (secLastPageNo > 0) And (address <> "")) Then
        For m = first To secLastPageNo Step stepVal
            noOfLinks = noOfLinks + 1
            tempStringVal = tempStringVal & pageHeight & dLim & pageWidth & dLim & top & dLim & bottom & dLim & left & dLim & right & dLim & m & dLim & address & dLim
        Next m
    End If
End If
End Function

'Update the stringVal value with information about weblinks
Function webLinksTerm()
If (noOfLinks > 0) Then
    link.stringVal = link.stringVal & noOfLinks & dLim & tempStringVal
Else
    link.stringVal = link.stringVal & noOfLinks & dLim
End If
End Function



INQUEST-PP=macro
