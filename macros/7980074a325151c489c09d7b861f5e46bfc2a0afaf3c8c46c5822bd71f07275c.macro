Attribute VB_Name = "Module1"
Attribute VB_Name = "Module2"
Attribute VB_Name = "Sheet4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub cmdUpdateLinks_Click()
On Error GoTo Err_Handler
Dim wk As Excel.Workbook
Dim avarLinks As Variant
Dim lngN As Long

    Set wk = ThisWorkbook
    avarLinks = wk.LinkSources(xlLinkTypeExcelLinks)
    If Not IsEmpty(avarLinks) Then
        '
        'Links to other Excel workbooks exist.
        'Iterate through all links and updating them,
        'such that this workbook reflects any changes
        'in the data.
        'Note! This only covers Excel links, and it is possible
        'to link other types of data.
        For lngN = 1 To UBound(avarLinks)
            wk.UpdateLink avarLinks(lngN), Excel.xlLinkTypeExcelLinks
        Next
    End If

Exit_Main:
    Exit Sub
Err_Handler:
    MsgBox "Could not update link:" & vbCrLf & _
        avarLinks(lngN)
    Resume Next

End Sub
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit
Public Function VChange(Cell As Range, Direction As Integer) As Long
'Vertical change function.
'Given a cell reference, the function searches the cell's column, beginning
'at the cell, moving in the direction specified, i.e., up or down, until
'a value change is detected, or the limits of the column are reached.
'If no change is detected, the cell's row number is returned.
'Note! If a change is detected, the row number where the change occurs
'is the value returned. To get the last position before the change, you
'will have to offset the return row number by one using the opposite
'direction to the one specified by the Direction argument.
'
'Direction: Should be -1 for up and +1 for down.
'   However, +1 is implied by Direction >= 0  and
'            -1 is implied by Direction < 0

Dim lngLimit As Long
Dim lngS As Long    'Start row.
Dim lngP As Long    'Current row.
Dim rngCol As Range 'Column being examined.
Dim intDirection As Integer 'The direction implied by the Direction argument.
Dim Result As Long
    
    intDirection = (Direction < 0) + Abs((Direction >= 0))
    
    If intDirection = -1 Then
        lngLimit = 1
    Else
        lngLimit = 65536
    End If
    
    'Check if the column limit has already been reached.
    If Cell.Row = lngLimit Then
        Result = lngLimit
        Exit Function
    End If
    
    'Move from start point in the specified direction
    'until:
    'a) Limit reached;
    'b) Value change detected.
    lngS = Cell.Row 'Start row.
    lngP = lngS     'Begin at start row.
    Set rngCol = Cell.Parent.Columns(Cell.Column)
    Do
        lngP = lngP + intDirection
    Loop Until lngP = lngLimit Or Cell(1, 1) <> rngCol.Rows(lngP)
    
    If Cell(1, 1) <> rngCol.Rows(lngP) Then
        Result = lngP
    Else
        Result = lngS
    End If
    
    VChange = Result
    
End Function

Public Sub VChangeRange(StartValue As Variant, ControlRange As Range)
On Error GoTo Err_Handler
Dim lngR As Long    'Control row
Dim rngControl As Range
Dim rngFound As Range
Dim rngFind As Range
Dim rngCell As Range
Dim strSheet As String
Dim strWorkbook As String
Dim strStartValueColumn As String
Dim strValueColumn As String
Dim lngFromRow As Long
Dim lngCalc As Long
    
    lngCalc = Application.Calculation
    Application.Calculation = xlCalculationManual
    'Iterate through the control range finding the change rows.
    For lngR = 1 To ControlRange.Rows.Count
        strWorkbook = ControlRange.Cells(lngR, 1)
        strSheet = ControlRange.Cells(lngR, 2)
        strStartValueColumn = ControlRange.Cells(lngR, 3)
        strValueColumn = ControlRange.Cells(lngR, 4)
        'If workbook is the empty string then assume the sheet
        'is within the current workbook.
        If strWorkbook = "" Then
            strWorkbook = ThisWorkbook.Name
        End If
        'Find the start row using the date column.
        On Error Resume Next
        Set rngFind = Workbooks(strWorkbook).Worksheets(strSheet).Range(strStartValueColumn & ":" & strStartValueColumn)
        If Err.Number <> 0 Then
            On Error GoTo Err_Handler
            MsgBox "Could not access a required worksheet." & vbCrLf & _
                   "Workbook: " & strWorkbook & vbCrLf & _
                   "Sheet: " & strSheet & vbCrLf & _
                   "Start Value Column: " & strStartValueColumn & vbCrLf & _
                   "Please check that all required worksheets are open.", vbExclamation, "VChangeRange Failed"
        Else
            Set rngFound = Nothing
            For Each rngCell In rngFind
                If rngCell = StartValue Then
                    Set rngFound = rngCell
                    Exit For
                End If
            Next
            If rngFound Is Nothing Then
                MsgBox "Could not find start value." & vbCrLf & _
                       "Workbook: " & strWorkbook & vbCrLf & _
                       "Sheet: " & strSheet & vbCrLf & _
                       "Start Value Column: " & strStartValueColumn, vbExclamation, "VChangeRange Failed"
                ControlRange.Cells(lngR, 5) = "#N/A"
                ControlRange.Cells(lngR, 6) = "#N/A"
            Else
                lngFromRow = rngFound.Row
                ControlRange.Cells(lngR, 5) = lngFromRow
                'Find the row at which the value in the value column changes.
                ControlRange.Cells(lngR, 6) = ThisWorkbook.VChange(Workbooks(strWorkbook).Worksheets(strSheet).Range(strValueColumn & lngFromRow), -1)
            End If
        End If
    Next

Exit_Main:
    Application.Calculation = lngCalc
    Exit Sub

Err_Handler:
    MsgBox "Error occurred while updating VChangeRange." & vbCrLf & _
           "Error number : " & Err.Number & vbCrLf & _
           "Description  : " & Err.Description, vbExclamation, "VChangeRange Error"
    Resume Exit_Main
    Resume 0
End Sub





INQUEST-PP=macro
