Attribute VB_Name = "Feuil1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "LblMessage"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "Label5, 90, 0, MSForms, Label"
Attribute VB_Control = "TextLoop, 89, 1, MSForms, TextBox"
Attribute VB_Control = "SpinLoop, 88, 2, MSForms, SpinButton"
Attribute VB_Control = "Label4, 87, 3, MSForms, Label"
Attribute VB_Control = "CheckContactless, 96, 4, MSForms, CheckBox"
Attribute VB_Control = "TestStop, 81, 6, MSForms, CommandButton"
Attribute VB_Control = "TestStart, 80, 7, MSForms, CommandButton"
Attribute VB_Control = "CheckSmart, 95, 8, MSForms, CheckBox"
Attribute VB_Control = "ComboEject, 77, 9, MSForms, ComboBox"
Attribute VB_Control = "ComboInsert, 76, 10, MSForms, ComboBox"
Attribute VB_Control = "Label2, 75, 11, MSForms, Label"
Attribute VB_Control = "Label1, 74, 12, MSForms, Label"
Attribute VB_Control = "ListPrinters, 72, 13, MSForms, ListBox"
Attribute VB_Control = "EnumPrinters, 71, 14, MSForms, CommandButton"
Attribute VB_Control = "CheckLive, 69, 15, MSForms, CheckBox"
Attribute VB_Control = "ResetCounter, 98, 16, MSForms, CommandButton"
Attribute VB_Control = "TestReaders, 65, 17, MSForms, CommandButton"
Attribute VB_Control = "SpinLoopCard, 91, 18, MSForms, SpinButton"
Attribute VB_Control = "TextLoopCard, 92, 19, MSForms, TextBox"
Attribute VB_Control = "TextCount, 93, 20, MSForms, TextBox"
Option Explicit


' Readers
Private Declare Function SCardEstablishContext Lib "WinScard" (ByVal dwScope As Long, ByVal pvReserved1 As Long, ByVal pvReserved2 As Long, ByRef phContext As Long) As Long
Private Declare Function SCardReleaseContext Lib "WinScard" (ByVal hContext As Long) As Long
Private Declare Function SCardCancel Lib "WinScard" (ByVal hContext As Long) As Long
Private Declare Function SCardListReaders Lib "WinScard" Alias "SCardListReadersA" (ByVal hContext As Long, ByVal mszGroups As String, ByVal mszReaders As String, ByRef phContext As Long) As Long
Private Declare Function SCardFreeMemory Lib "WinScard" (ByVal hContext As Long, ByVal mszReaders As String) As Long
Private Declare Function SCardConnect Lib "WinScard" Alias "SCardConnectA" (ByVal hContext As Long, ByVal mszReader As String, ByVal Mode As Long, ByVal dwProtocol As Long, ByRef phCard As Long, ByRef pdwProtocol As Long) As Long
Private Declare Function SCardDisconnect Lib "WinScard" (ByVal hCard As Long, ByVal Disposition As Long) As Long
Private Declare Function SCardBeginTransaction Lib "WinScard" (ByVal hCard As Long) As Long
Private Declare Function SCardEndTransaction Lib "WinScard" (ByVal hCard As Long, ByVal dwDisposition As Long) As Long
'Private Declare Function SCardStatus Lib "WinScard" Alias "SCardStatusA" (ByVal hCard As Long, ByVal szReaderName As String, ByRef pcchReaderLen As Long, ByRef pdwState As Long, ByRef pdwProtocol As Long, ByRef pbAttr() As Byte, ByRef pbcAtrLen As Long) As Long
Private Declare Function SCardStatus Lib "WinScard" Alias "SCardStatusA" (ByVal hCard As Long, ByVal szReaderName As String, ByRef pcchReaderLen As Long, ByRef pdwState As Long, ByRef pdwProtocol As Long, ByVal pbAttr As String, ByRef pbcAtrLen As Long) As Long

Const SCARD_SCOPE_USER = 0
Const SCARD_SCOPE_TERMINAL = 1
Const SCARD_SCOPE_SYSTEM = 2

Const SCARD_SHARE_EXCLUSIVE = 1
Const SCARD_SHARE_SHARED = 2
Const SCARD_SHARE_DIRECT = 3

Const SCARD_PROTOCOL_T0 = 1
Const SCARD_PROTOCOL_T1 = 2
Const SCARD_PROTOCOL_RAW = 4

Const SCARD_S_SUCCESS = 0
Const SCARD_W_WAIT_MSR = &H8010006A
Const SCARD_ATTR_ATR_STRING = &H90303
Const SCARD_ATTR_DEVICE_FRIENDLY_NAME = &H7FFF0003

Const SCARD_LEAVE_CARD = 0
Const SCARD_RESET_CARD = 1
Const SCARD_UNPOWER_CARD = 2
Const SCARD_EJECT_CARD = 3

' Printers
Private Declare Function OpenPebble Lib "iomem" Alias "_OpenPebble@4" (ByVal pPrinterName As String) As Long
Private Declare Function ClosePebble Lib "iomem" Alias "_ClosePebble@4" (ByVal hPrn As Long) As Boolean
Private Declare Function WritePebble Lib "iomem" Alias "_WritePebble@12" (ByVal hPrinter As Long, ByVal cde As String, ByVal cbNeeded As Long) As Boolean
Private Declare Function ReadPebble Lib "iomem" Alias "_ReadPebble@16" (ByVal hPrinter As Long, ByVal answer As String, ByVal cbAns As Long, cbRead As Long) As Boolean
Private Declare Function SetTimeout Lib "iomem" Alias "_SetTimeout@4" (ByVal time As Long) As Boolean

' Windows
Private Declare Function EnumPrintersA Lib "Winspool.drv" (ByVal flags As Long, ByVal name As String, ByVal Level As Long, pPrinterEnum As Long, ByVal cdBuf As Long, pcbNeeded As Long, pcReturned As Long) As Long
Private Declare Function lstrlenA Lib "kernel32" (ByVal lpString As Any) As Long
Private Declare Function lstrcpyA Lib "kernel32" (ByVal lpString1 As String, ByVal lpString2 As Long) As Long
Private Declare Sub Sleep Lib "kernel32" (ByVal dwMilliseconds As Long)

' Variables
Dim TestDone As Boolean
Dim ScardContext As Long

Private Declare Function GetExitCodeProcess Lib "kernel32" _
(ByVal hProcess As Long, lpExitCode As Long) As Long

Private Declare Function OpenProcess Lib "kernel32" (ByVal dwDesiredAccess As Long, ByVal bInheritHandle As Long, ByVal dwProcessId As Long) As Long
 
'Private Declare Sub Sleep Lib "kernel32" (ByVal dwMilliseconds As Long)
 
Private Declare Function WaitForSingleObject Lib "kernel32" _
(ByVal hHandle As Long, ByVal dwMilliseconds As Long) As Long
 
'Declare Function GetExitCodeProcess Lib "kernel32" _
'(ByVal hProcess As Long, lpExitCode As Long) As Long

'Declare Function OpenProcess Lib "kernel32" (ByVal dwDesiredAccess As Long, ByVal bInheritHandle As Long, ByVal dwProcessId As Long) As Long
 
'Declare Sub Sleep Lib "kernel32" (ByVal dwMilliseconds As Long)
 
'Declare Function WaitForSingleObject Lib "kernel32" _
'(ByVal hHandle As Long, ByVal dwMilliseconds As Long) As Long
 
Public Enum ShellTiming
    SH_IGNORE = 0 'Ignore signal
    SH_INFINITE = -1& 'Infinite timeout
    SH_PROCESS_QUERY_INFORMATION = &H400
    SH_STILL_ACTIVE = &H103
    SH_SYNCHRONIZE = &H100000
End Enum
 
Public Enum ShellWait
    SH_WAIT_ABANDONED = &H80&
    SH_WAIT_FAILED = -1& 'Error on call
    SH_WAIT_OBJECT_0 = 0 'Normal completion
    SH_WAIT_TIMEOUT = &H102& 'Timeout period elapsed
End Enum
 
Public Enum ShellWindow
    SH_HIDE = 0
    SH_SHOWNORMAL = 1 'normal with focus
    SH_SHOWMINIMIZED = 2 'minimized with focus (default in VB)
    SH_SHOWMAXIMIZED = 3 'maximized with focus
    SH_SHOWNOACTIVATE = 4 'normal without focus
    SH_SHOW = 5 'normal with focus
    SH_MINIMIZE = 6 'minimized without focus
    SH_SHOWMINNOACTIVE = 7 'minimized without focus
    SH_SHOWNA = 8 'normal without focus
    SH_RESTORE = 9 'normal with focus
End Enum
 
Function MySleep(ByVal time As Integer)
Dim i As Integer
    Do
        DoEvents
        Sleep (100)
        i = i + 1
    Loop While i < (time / 100)
End Function


 
Function Shell_AndLoop(ByVal CommandLine As String, _
    Optional ExecMode As ShellWindow = SH_SHOWNORMAL) As Boolean
     
    Dim ProcessID As Long
    Dim hProcess As Long
    Dim nRet As Long
     
     
    Const fdwAccess = SH_PROCESS_QUERY_INFORMATION
    If ExecMode < SH_HIDE Or ExecMode > SH_RESTORE Then
        ExecMode = SH_SHOWNORMAL
    End If
     
    ProcessID = Shell(CommandLine, CLng(ExecMode))
    hProcess = OpenProcess(fdwAccess, False, ProcessID)
    Do
        GetExitCodeProcess hProcess, nRet
        DoEvents
        Sleep 100
    Loop While nRet = SH_STILL_ACTIVE
    Shell_AndLoop = (nRet <> 0)
End Function

Function CheckReader()
    Dim lResult As Long
    Dim hCard As Long
    Dim i As Integer
    
    Dim Temps As Single 'ATH
    
    ' Connect
    lResult = SCardEstablishContext(SCARD_SCOPE_SYSTEM, 0, 0, ScardContext)
    If lResult <> SCARD_S_SUCCESS Then
        CheckLive.Value = False
        MsgBox "EstablishContext Failed (" & lResult & ")"
        For i = 0 To 10
            Worksheets(1).Cells(2 + i, 2).Value = ""
            Worksheets(1).Cells(2 + i, 4).Value = ""
            Worksheets(1).Cells(2 + i, 6).Value = ""
        Next i
        Exit Function
    End If

    ' Get Readers
    Dim nReaderCount As Long
    Dim szReaderLists As String * 512

    lResult = SCardListReaders(ScardContext, "", "", nReaderCount)
    If lResult <> SCARD_S_SUCCESS & nReaderCount > 512 Then
        CheckLive.Value = False
        MsgBox "ListReaders_1 Failed (" & lResult & ")"
        For i = 0 To 10
            Worksheets(1).Cells(2 + i, 2).Value = ""
            Worksheets(1).Cells(2 + i, 4).Value = ""
            Worksheets(1).Cells(2 + i, 6).Value = ""
        Next i
        GoTo ReleaseReaders
    End If
    
    lResult = SCardListReaders(ScardContext, "", szReaderLists, nReaderCount)
    If lResult <> SCARD_S_SUCCESS Then
        CheckLive.Value = False
        MsgBox "ListReaders_2 Failed (" & lResult & ")"
        For i = 0 To 10
            Worksheets(1).Cells(2 + i, 2).Value = ""
            Worksheets(1).Cells(2 + i, 4).Value = ""
            Worksheets(1).Cells(2 + i, 6).Value = ""
        Next i
        GoTo ReleaseReaders
    End If

    ' Convert String To Table and Print in ListBox
    Dim ReadersList() As String
    ReadersList = Split(szReaderLists, Chr(0))

    For i = 0 To 10

        'tempo 100 ms ATH
        Temps = Timer
            Do Until Timer >= Temps + 0.1
            Loop
        'MsgBox Timer - Temps 'mesure
        
        If ReadersList(i) <> "" Then
            DoEvents
            Worksheets(1).Cells(2 + i, 4).Value = "-------------------------"
            DoEvents
            Sleep (50)
        End If
        DoEvents
        
        If ReadersList(i) = "" Then
            Worksheets(1).Cells(2 + i, 2).Value = ""
            Worksheets(1).Cells(2 + i, 4).Value = ""
            Worksheets(1).Cells(2 + i, 6).Value = ""
            GoTo TestNextReader
        End If

        Worksheets(1).Cells(2 + i, 2).Value = ReadersList(i)

        ' Try to connect Card
        Dim ActiveProtocol As Long
        Dim mszCurrentReader As String

        mszCurrentReader = ReadersList(i)
        lResult = SCardConnect(ScardContext, mszCurrentReader, SCARD_SHARE_SHARED, SCARD_PROTOCOL_T0 + SCARD_PROTOCOL_T1, hCard, ActiveProtocol)
        If lResult <> SCARD_S_SUCCESS Then
            Worksheets(1).Cells(2 + i, 4).Value = "No Card"
            GoTo TestNextReader
        End If

        ' Begin Transaction
        lResult = SCardBeginTransaction(hCard)
        If lResult <> SCARD_S_SUCCESS Then
            Worksheets(1).Cells(2 + i, 4).Value = "BeginTransaction Failed..."
            GoTo DisconnectReader
        End If

        ' Read ATR
        Dim mszCurrentReader_length As Long
        Dim card_state As Long
        Dim card_protocol As Long
        Dim atr_array As String * 32
        Dim atr_array_length As Long
        Dim atr_str As String

        atr_array_length = 0
        mszCurrentReader_length = 255
        lResult = SCardStatus(hCard, mszCurrentReader, mszCurrentReader_length, card_state, card_protocol, atr_array, atr_array_length)
        If lResult <> SCARD_S_SUCCESS Then
            Worksheets(1).Cells(2 + i, 4).Value = "Status_1 Failed..."
            GoTo DisconnectReader
        End If

        lResult = SCardStatus(hCard, mszCurrentReader, mszCurrentReader_length, card_state, card_protocol, atr_array, atr_array_length)
        If lResult <> SCARD_S_SUCCESS Then
            Worksheets(1).Cells(2 + i, 4).Value = "Status_2 Failed..."
            GoTo DisconnectReader
        End If

        Dim j As Integer
        atr_str = ""
        For j = 1 To atr_array_length
            If Asc(Mid(atr_array, j, 1)) < 15 Then
                ' Add 0 if data < 0xF
                atr_str = atr_str & "0"
            End If
            atr_str = atr_str & Hex(Asc(Mid(atr_array, j, 1))) & " "
        Next j
        Worksheets(1).Cells(2 + i, 4).Value = "Status: " & card_state & ", Protocol: " & card_protocol & ", ATR: " & atr_str
        Worksheets(1).Cells(2 + i, 6).Value = Val(Worksheets(1).Cells(2 + i, 6).Value) + 1

        ' End Transaction
        lResult = SCardEndTransaction(hCard, SCARD_LEAVE_CARD)
        If lResult <> SCARD_S_SUCCESS Then
            Worksheets(1).Cells(2 + i, 4).Value = "EndTransaction Failed..."
        End If

DisconnectReader:
        lResult = SCardDisconnect(hCard, SCARD_LEAVE_CARD)

TestNextReader:
    Next i
    
    lResult = SCardCancel(ScardContext)
    lResult = SCardFreeMemory(ScardContext, szReaderLists)
ReleaseReaders:
    SCardReleaseContext (ScardContext)

End Function

Private Function WR(ByVal hPrinter As Long, ByVal cde As String, ByRef answer As String) As Long
    Dim str As String
    Dim str_test As String
    Dim lg  As Long
    Dim lread As Long

    lg = Len(cde) + 2
    str = Chr(27) + cde + Chr(13)
    lg = lg + Len("Pem;2") + 2
    str = Chr(27) + "Pem;2" + Chr(13) + str

    ' parametre retour egale a 0
    WR = 0
    If (hPrinter) Then
        If (WritePebble(hPrinter, str, lg)) Then
            lg = 512
            If (ReadPebble(hPrinter, answer, lg, lread)) Then
                WR = lread
            End If
        End If
    End If
End Function

Private Sub EnumPrinters_Click()

    ' Clear List
    ListPrinters.Clear
    ListPrinters.Enabled = False
  
    Dim PrinterEnum() As Long, Impr() As String
    Dim Needed As Long, Returned As Long, i As Integer

    EnumPrintersA 2, vbNullString, 5, 0, 0, Needed, 0
    ReDim PrinterEnum(Needed / 4)
    EnumPrintersA 2, vbNullString, 5, PrinterEnum(0), Needed, Needed, Returned

    ReDim Impr(1 To Returned)
    For i = 1 To Returned
        Impr(i) = Space$(lstrlenA(PrinterEnum(i * 5 - 5)))
        lstrcpyA Impr(i), PrinterEnum(i * 5 - 5)
    Next i

    ListPrinters.List = Impr
    ListPrinters.Enabled = True
    ListPrinters.Activate

    ComboInsert.Enabled = False
    ComboEject.Enabled = False
    TextLoop.Enabled = False
    SpinLoop.Enabled = False
    TextLoopCard.Enabled = False
    SpinLoopCard.Enabled = False
    CheckSmart.Enabled = False
    CheckSmart.Font.Bold = False
    CheckContactless.Enabled = False
    CheckContactless.Font.Bold = False

    TestStart.Enabled = True
    TestStop.Enabled = True

    TextCount.Value = "Compteur"
End Sub

Private Sub SpinLoop_Change()
    If SpinLoop.Value = 0 Then
        TextLoop.Value = "Infini"
    Else
        TextLoop.Value = SpinLoop.Value
    End If
End Sub
Private Sub SpinLoopCard_Change()
    If SpinLoopCard.Value = 0 Then
        TextLoopCard.Value = "Infini"
    Else
        TextLoopCard.Value = SpinLoopCard.Value
    End If
End Sub

Private Sub TestReaders_Click()
    CheckReader
    Worksheets(1).Cells(1, 6).Value = Val(Worksheets(1).Cells(1, 6).Value) + 1
End Sub
Private Sub ResetCounter_Click()
    Dim i As Integer

    Worksheets(1).Cells(1, 6).Value = ""
    For i = 2 To 12
        Worksheets(1).Cells(i, 6).Value = ""
    Next i
End Sub


Private Sub CheckLive_Click()
    While CheckLive.Value = True
        CheckReader
        Worksheets(1).Cells(1, 6).Value = Val(Worksheets(1).Cells(1, 6).Value) + 1
        DoEvents
    Wend
End Sub

Private Sub ListPrinters_Click()

    ComboInsert.List = Array("Feeder", "Manual", "Auto")
    ComboInsert.Value = ComboInsert.List(0)
    ComboInsert.Enabled = True
    ComboEject.List = Array("Standard", "Manual")
    ComboEject.Value = ComboEject.List(0)
    ComboEject.Enabled = True
    TextLoop.Enabled = True
    SpinLoop.Enabled = True
    TextLoopCard.Enabled = True
    SpinLoopCard.Enabled = True
    CheckSmart.Enabled = True
    CheckContactless.Enabled = True

    TestStart.Enabled = True
    TestStop.Enabled = False
End Sub

Function Shell_AndWait(ByVal CommandLine As String, Optional ExecMode As ShellWindow = SH_SHOWNORMAL, Optional Timeout As Long = SH_INFINITE) As Boolean
    Dim ProcessID As Long
    Dim hProcess As Long
    Dim nRet As Long
    
    
    Const fdwAccess = SH_SYNCHRONIZE
    If ExecMode < SH_HIDE Or ExecMode > SH_RESTORE Then ExecMode = SH_SHOWNORMAL
    ProcessID = Shell(CommandLine, 0)
     
    hProcess = OpenProcess(fdwAccess, False, ProcessID)
    nRet = WaitForSingleObject(hProcess, CLng(Timeout))
    Shell_AndWait = (nRet <> 0)
End Function

Private Sub TestStart_Click()
    Dim hPrinter As Long
    Dim answer As String * 512
    Dim cmd As String
    Dim NbLoop As Long
    Dim NbLoopCard As Long
    Dim TotalLoop As Long

    Dim RetVal


    NbLoop = 0
    NbLoopCard = 0
    TotalLoop = 0
    TestDone = False

    ' Disable Printer Test Options
    ComboInsert.Enabled = False
    ComboEject.Enabled = False
    CheckSmart.Enabled = True
    CheckContactless.Enabled = True
    TextLoop.Enabled = False
    SpinLoop.Enabled = False
    TextLoopCard.Enabled = False
    SpinLoopCard.Enabled = False

    ' Disable Readers Elements
    CheckLive.Value = False
    CheckLive.Enabled = True

    TestStop.Enabled = True
    TestStart.Enabled = True

    DoEvents

    ' Init Printer
    If ListPrinters.Value = "" Then
        TestDone = True
        MsgBox "Printer not selected"
        GoTo EndTest
    End If

    SetTimeout (30 * 1000)
'    hPrinter = OpenPebble(ListPrinters.Value)
'   If hPrinter = 0 Then
'        TestDone = True
'        MsgBox "Printer Init Failed"
'        GoTo EndTest
'    End If
    Select Case ComboInsert.Value
        Case "Manual"
            cmd = "Pcim;M"
        Case "Auto"
            cmd = "Pcim;B"
        Case Else
            cmd = "Pcim;F"
    End Select
'    If WR(hPrinter, cmd, answer) = 0 Then
'        TestDone = True
'        MsgBox "Printer Cde Failed"
'        GoTo EndTest
'    End If
    Select Case ComboEject.Value
        Case "Manual"
            cmd = "Pcem;M"
        Case Else
            cmd = "Pcem;D"
    End Select
'    If WR(hPrinter, cmd, answer) = 0 Then
'        TestDone = True
'        MsgBox "Printer Cde Failed"
'        GoTo EndTest
'    End If
            

    ' Run Test With Printer
    DoEvents
    While TestDone = False

        ' Insert Card in position Contacless
        If TestDone = True Then
            GoTo EndTest
        Else
            If CheckContactless.Value = True Then
                    CheckContactless.Font.Bold = True
                    DoEvents
                    Shell_AndWait ("C:\Tools\nisca\Si.exe")
                    cmd = "Sic"
'                    If WR(hPrinter, cmd, answer) = 0 Then
'                        TestDone = True
'                        MsgBox "Printer Cde Failed"
'                    End If
'                    If Left(answer, 2) <> "OK" Then
'                        TestDone = True
'                        MsgBox "Printer: " & answer
'                    End If
                    DoEvents
                    MySleep (1000)

                    ' Read Card ATR
                    If TestDone = True Then
                        GoTo EndTest
                    Else
                        CheckReader
                    End If
                    MySleep (1000)

                    CheckContactless.Font.Bold = False
            End If
        End If
        DoEvents
        Sleep (10)

        ' Insert Card in position Smart
        If TestDone = True Then
            GoTo EndTest
        Else
            If CheckSmart.Value = True Then
                    CheckSmart.Font.Bold = True
                    DoEvents

                    'RetVal = Shell("C:\Tools\nisca\Si.exe", 1)
                    Shell_AndWait ("C:\Tools\nisca\Si.exe")
                    'Shell_AndWait ("C:\Tools\nisca\Get.exe")
                    cmd = "Sis"
'                    If WR(hPrinter, cmd, answer) = 0 Then
'                        TestDone = True
'                        MsgBox "Printer Cde Failed"
'                    End If
 '                   If Left(answer, 2) <> "OK" Then
'                     TestDone = True
 '                       MsgBox "Printer: " & answer
 '                   End If
                    DoEvents
                    MySleep (1000)

                    ' Read Card ATR
                    If TestDone = True Then
                        GoTo EndTest
                    Else
                        CheckReader
                    End If
                    MySleep (1000)

                    CheckSmart.Font.Bold = False
            End If
        End If
        DoEvents
        Sleep (10)

        ' Eject Card / Position card in Insertion
        If TestDone = True Then
            GoTo EndTest
        Else
            NbLoopCard = NbLoopCard + 1
            If TextLoopCard.Value <> "Infini" And NbLoopCard >= TextLoopCard.Value Then
                cmd = "Se"
'                RetVal = Shell("C:\Tools\nisca\Se.exe", 1)
                Shell_AndWait ("C:\Tools\nisca\Se.exe")
                'Shell_AndWait ("C:\Tools\nisca\Get.exe")
              NbLoopCard = 0
            Else
                cmd = "Sib"
'                RetVal = Shell("C:\Tools\nisca\Sib.exe", 1)
                Shell_AndWait ("C:\Tools\nisca\Sib.exe")
                MySleep (1000)
               'Shell_AndWait ("C:\Tools\nisca\Get.exe")
            End If

'            If WR(hPrinter, cmd, answer) = 0 Then
'                TestDone = True
'                MsgBox "Printer Cde Failed"
'            End If
'            If Left(answer, 2) <> "OK" Then
'                TestDone = True
'                MsgBox "Printer: " & answer
'            End If
        End If

        If NbLoopCard = 0 Then
            ' Test Nb Loop
            NbLoop = NbLoop + 1
            If TextLoop.Value <> "Infini" And NbLoop >= TextLoop.Value Then
                TestDone = True
            End If
        End If

NewLoop:
        TotalLoop = TotalLoop + 1
        TextCount.Value = "C: " & NbLoopCard & " T: " & TotalLoop
        MySleep (1000)
    Wend

EndTest:
    If hPrinter Then
        ClosePebble (hPrinter)
    End If

    ' Enable Readers Elements
    CheckLive.Enabled = True

    ' Enable Printer Test Options
    ComboInsert.Enabled = True
    ComboEject.Enabled = True
    CheckSmart.Enabled = True
    CheckSmart.Font.Bold = False
    CheckContactless.Enabled = True
    CheckContactless.Font.Bold = False
    TextLoop.Enabled = True
    SpinLoop.Enabled = True
    TextLoopCard.Enabled = True
    SpinLoopCard.Enabled = True

    TestStop.Enabled = False
    TestStart.Enabled = True

    DoEvents

End Sub

Private Sub TestStop_Click()
    TestDone = True
End Sub

Private Sub TextCount_Change()

End Sub
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True


INQUEST-PP=macro
