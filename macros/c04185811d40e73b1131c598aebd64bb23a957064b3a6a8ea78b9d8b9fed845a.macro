Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "btnOpen, 8, 0, MSForms, CommandButton"
Attribute VB_Control = "btnSave, 9, 1, MSForms, CommandButton"
Option Explicit

Private Sub btnOpen_Click()

    Dim sFile As String

    sFile = Application.GetOpenFilename("BIN |fffd||13c||fffd|(*.fnt), *.fnt", , , , False)

    If sFile <> "False" Then

        Me.Cells(FILE_ROW, FILE_COL) = sFile

        Clearsh Me
        LoadFNT_GoG Me, sFile

    End If

End Sub

Private Sub btnSave_Click()

    Dim sFile As String

    sFile = Me.Cells(FILE_ROW, FILE_COL)
    sFile = Application.GetSaveAsFilename(sFile, "BIN |fffd||13c||fffd|(*.fnt), *.fnt")

    If sFile <> "False" Then

        SaveFNT_GoG Me, sFile

        Me.Cells(FILE_ROW, FILE_COL) = sFile
        MsgBox "|fffd||fffd||fffd|"

    End If

End Sub
Attribute VB_Name = "Sheet2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "btnOpen, 13, 0, MSForms, CommandButton"
Attribute VB_Control = "btnSave, 14, 1, MSForms, CommandButton"
Option Explicit

Private Sub btnOpen_Click()

    Dim sFile As String

    sFile = Application.GetOpenFilename("XML |fffd||13c||fffd|(*.fnt), *.fnt", , , , False)

    If sFile <> "False" Then

        Me.Cells(FILE_ROW, FILE_COL) = sFile

        LoadXML_BFG Me.Parent.Path & FILE_TMP, sFile
        Me.Parent.XmlMaps("chars_|4f3||fffd||fffd|").Import URL:=Me.Parent.Path & FILE_TMP

    End If

End Sub
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "mFunction"
Option Explicit
Public Const FILE_TMP = "\tmp.xml"

Public Const FILE_ROW = 1
Public Const FILE_COL = 3
Public Const NAME_ROW = 2
Public Const NAME_COL = 3
Public Const DATA_ROW = 3

Public Const NAME_MAX = 127
Public Const DATA_MAX = 32767
Public Const PROP_ROW = 3
Public Const PROP_COL = 1

Public Const ITEM_COL = 2

Public Const fi_CharNum = 1
Public Const fi_Size = 2

Public Const fc_ID = 1
Public Const fc_X = 2
Public Const fc_Y = 3
Public Const fc_W = 4
Public Const fc_H = 5
Public Const fc_RefX = 6
Public Const fc_RefY = 7
Public Const fc_XAdv = 8
Public Const fc_Page = 9

Public Sub Clearsh(ByRef sh As Worksheet)

    sh.Range(sh.Cells(DATA_ROW, NAME_COL), sh.Cells(DATA_MAX, NAME_MAX)).ClearContents
    sh.Range(sh.Cells(PROP_ROW, ITEM_COL), sh.Cells(DATA_MAX, ITEM_COL)).ClearContents

End Sub

Public Sub LoadFNT_GoG(ByRef sh As Worksheet, ByVal sFile As String)

    Dim nFile As Integer

    Dim fi As FNTINFO
    Dim fc() As FNTCHAR

    Dim i As Long
    Dim j As Long

    Dim lCount As Long

    nFile = FreeFile
    Open sFile For Binary As #nFile

    Get #nFile, , fi

        sh.Cells(PROP_ROW - 0 + fi_CharNum, ITEM_COL) = ByteToValue(fi.fiCharNum)
        sh.Cells(PROP_ROW - 0 + fi_Size, ITEM_COL) = ByteToValue(fi.fiSize)

        lCount = ByteToValue(fi.fiCharNum)
    If lCount > 0 Then

        ReDim fc(lCount - 1)
        Get #nFile, , fc

    For i = LBound(fc) To UBound(fc)
        sh.Cells(DATA_ROW - 0 + i, NAME_COL - 1 + fc_ID) = ByteToValue(fc(i).fcID)
        sh.Cells(DATA_ROW - 0 + i, NAME_COL - 1 + fc_X) = ByteToValue(fc(i).fcX)
        sh.Cells(DATA_ROW - 0 + i, NAME_COL - 1 + fc_Y) = ByteToValue(fc(i).fcY)
        sh.Cells(DATA_ROW - 0 + i, NAME_COL - 1 + fc_W) = ByteToValue(fc(i).fcW)
        sh.Cells(DATA_ROW - 0 + i, NAME_COL - 1 + fc_H) = ByteToValue(fc(i).fcH)
        sh.Cells(DATA_ROW - 0 + i, NAME_COL - 1 + fc_RefX) = ByteToValue(fc(i).fcRefX)
        sh.Cells(DATA_ROW - 0 + i, NAME_COL - 1 + fc_RefY) = ByteToValue(fc(i).fcRefY)
        sh.Cells(DATA_ROW - 0 + i, NAME_COL - 1 + fc_XAdv) = ByteToValue(fc(i).fcXAdv)
        sh.Cells(DATA_ROW - 0 + i, NAME_COL - 1 + fc_Page) = ByteToValue(fc(i).fcPage)
    Next

    End If

    Close #nFile

End Sub

Public Sub SaveFNT_GoG(ByRef sh As Worksheet, ByVal sFile As String)

    Dim nFile As Integer

    Dim fi As FNTINFO
    Dim fc() As FNTCHAR

    Dim i As Long
    Dim j As Long

    Dim lCount As Long

    nFile = FreeFile
    Open sFile For Binary As #nFile

        ValueToByteArray Val(sh.Cells(PROP_ROW - 0 + fi_Size, ITEM_COL).Text), fi.fiSize

        lCount = 0
        ReDim fc(lCount - 0)

    For i = DATA_ROW To DATA_MAX

        If sh.Cells(i, NAME_COL + fc_ID).Text = "" Then Exit For

        lCount = lCount + 1
        ReDim Preserve fc(lCount - 1)

        ValueToByteArray Val(sh.Cells(i, NAME_COL - 1 + fc_ID).Text), fc(lCount - 1).fcID
        ValueToByteArray Val(sh.Cells(i, NAME_COL - 1 + fc_X).Text), fc(lCount - 1).fcX
        ValueToByteArray Val(sh.Cells(i, NAME_COL - 1 + fc_Y).Text), fc(lCount - 1).fcY
        ValueToByteArray Val(sh.Cells(i, NAME_COL - 1 + fc_W).Text), fc(lCount - 1).fcW
        ValueToByteArray Val(sh.Cells(i, NAME_COL - 1 + fc_H).Text), fc(lCount - 1).fcH
        ValueToByteArray Val(sh.Cells(i, NAME_COL - 1 + fc_RefX).Text), fc(lCount - 1).fcRefX
        ValueToByteArray Val(sh.Cells(i, NAME_COL - 1 + fc_RefY).Text), fc(lCount - 1).fcRefY
        ValueToByteArray Val(sh.Cells(i, NAME_COL - 1 + fc_XAdv).Text), fc(lCount - 1).fcXAdv
        ValueToByteArray Val(sh.Cells(i, NAME_COL - 1 + fc_Page).Text), fc(lCount - 1).fcPage

    Next

        ValueToByteArray lCount, fi.fiCharNum

        Put #nFile, , fi

        lCount = ByteToValue(fi.fiCharNum)
    If lCount > 0 Then
        Put #nFile, , fc
    End If

    Close #nFile

End Sub

Public Sub LoadXML_BFG(ByVal sNone As String, ByVal sFile As String)

    Dim nFile As Integer
    Dim nNone As Integer

    Dim b As Boolean
    Dim sTemp As String

    nFile = FreeFile
    Open sFile For Input As #nFile

    nNone = FreeFile
    Open sNone For Output As #nNone

    b = False

    Do While Not EOF(nFile)

        Line Input #nFile, sTemp

        If b And (InStr(sTemp, "<chars") > 0) Then
            Print #nNone, "  <chars>"
        ElseIf b And (InStr(sTemp, "<char") > 0 Or InStr(sTemp, "</char") > 0) Then
            Print #nNone, sTemp
        ElseIf b Then
        Else
            Print #nNone, "<?xml version=""1.0"" encoding=""UTF-8""?>"
            b = True
        End If

    Loop

    Close #nNone

    Close #nFile

End Sub
Attribute VB_Name = "mTypeFnt"
Option Explicit

Public Type FNTINFO
    fiCharNum(3) As Byte
    fiSize(3) As Byte
End Type

Public Type FNTCHAR
    fcID(1) As Byte
    fcX(1) As Byte
    fcY(1) As Byte
    fcW(0) As Byte
    fcH(0) As Byte
    fcRefX(0) As Byte
    fcRefY(0) As Byte
    fcXAdv(0) As Byte
    fcPage(0) As Byte
End Type

Public Function ByteToValue(ByVal vByte)

    Dim n As Variant
    Dim i As Integer

    n = 0
    For i = LBound(vByte) To UBound(vByte)
        n = n + vByte(i) * 256 ^ i
    Next

    ByteToValue = n

End Function

Public Function ValueToByte(ByVal n As Variant, Optional ByVal nByte As Integer = 0)

    Dim v() As Byte
    Dim t As Double
    Dim m As Double
    Dim i As Integer

    If nByte >= 1 And nByte <= 4 Then
        ReDim v(nByte - 1)
    Else
        ReDim v(0)
    End If

    t = Int(Val(n))
    For i = LBound(v) To UBound(v)
        m = 256 ^ (i + 1)
        m = Int(t - Int(t / m) * m)
        m = Int(m / 256 ^ i)
        v(i) = CByte(m)
    Next

    ValueToByte = v

End Function

Public Function ValueToByteArray(ByVal n As Variant, ByRef v)

    Dim t As Double
    Dim m As Double
    Dim i As Integer

    t = Int(Val(n))
    For i = LBound(v) To UBound(v)
        m = 256 ^ (i + 1)
        m = Int(t - Int(t / m) * m)
        m = Int(m / 256 ^ i)
        v(i) = CByte(m)
    Next

End Function


INQUEST-PP=macro
