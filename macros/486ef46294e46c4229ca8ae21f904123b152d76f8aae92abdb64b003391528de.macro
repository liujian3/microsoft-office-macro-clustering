Attribute VB_Name = "GlobalVariables"

Public Const strWorkBookPassWord As String = "Financia1RetUrn"

Public Const strSubmitDataPassWord As String = "C0ntRo1"
Public Const strCheckSheetPassWord As String = "T0o1BoX"

Public Const strSBSTPassWord As String = "TwiNk1e"
Public Const strT1PassWord As String = "LitT1e"
Public Const strT1aYSPassWord As String = "St4R"
Public Const strT1aCELPassWord As String = "W0ndEr"
Public Const strT2PassWord As String = "W0r1D"
Public Const strT4PassWord As String = "Diam0Nd"
Public Const strEYPassWord As String = "Junk0"

Public Const strMsgTitle As String = "Children, Schools and Families Financial Data Collection (Budget) 2009-10"

Public gblnWorking As Boolean
Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "cmdValidate, 3, 0, MSForms, CommandButton"
Attribute VB_Control = "cmdExport, 4, 1, MSForms, CommandButton"
Attribute VB_Control = "cmdImport, 5, 2, MSForms, CommandButton"
Option Explicit

Private blnErrorFound As Boolean
Private blnWarningFound As Boolean
Private blnNoteFound As Boolean
Private blnBlankFound As Boolean
Private blnHeaderErrorFound As Boolean
Private blnHeaderWarningFound As Boolean

Private strData As String

Private Sub cmdExport_Click()
    frmExport.Show
End Sub

Private Sub cmdImport_Click()
    frmImport.Show
End Sub

Private Sub cmdValidate_Click()
    '+---------------------------------------------------------------+
    '| 1.  Looks for Blank Cells, Errors and Warnings in each sheet. |
    '| 2.  Looks for Header Errors and Warnings.                     |
    '| 3.  Sets the message for the sheet in the 'menu' depending on |
    '|     the flag settings (BlankCells, errors & warnings).        |
    '+---------------------------------------------------------------+
    Dim myCell As Range
    Dim MySheet As String
    Dim strNoteArea As String
    Dim lngSheetCount As Long
    On Error GoTo ErrorHandler

    ActiveWorkbook.Application.ScreenUpdating = False
    For lngSheetCount = 1 To 6
        MySheet = Switch(lngSheetCount = 1, "SBS Table", _
                         lngSheetCount = 2, "Table 1", _
                         lngSheetCount = 3, "CEL", _
                         lngSheetCount = 4, "Table 2", _
                         lngSheetCount = 5, "Early Years Table", _
                         lngSheetCount = 6, "Table 4")

        If lngSheetCount = 6 Then
            'Table 4 checking is separate
            Call CheckForT4Errors(MySheet)
        Else
            If Application.Worksheets(MySheet).Cells(1, 8) <> "*" Then
                Application.Worksheets(MySheet).Cells(1, 8) = "*"
            End If
            Application.Worksheets(MySheet).Calculate
            Call CheckForErrors(MySheet)
            If lngSheetCount < 4 Or lngSheetCount = 4 Then
                'Only need to check for note entries on these tables if
                'there is at least one warning (not header warning).
                If blnWarningFound Then
                    'Check the table has an associated note
                    strNoteArea = Switch(lngSheetCount = 1, "SBS", _
                                         lngSheetCount = 2, "T1", _
                                         lngSheetCount = 4, "T2")
                    Call CheckForNotes(strNoteArea)
                End If
            End If
        End If
        Call SetMenuMessage(MySheet)
    Next lngSheetCount
    Application.ScreenUpdating = True
    Exit Sub

ErrorHandler:
    MsgBox "Error " & Err.Number & " occurred in module cmdValidate_Click()." & _
           vbCrLf & vbCrLf & _
           Err.Description, vbExclamation, strMsgTitle
    Application.ScreenUpdating = True
End Sub

Sub ResetFlags(ByVal blnValue As Boolean)
    '+-------------------------------------------------------+
    '| Reset all of the private variables and set to true or |
    '| false depending on the value passed into the sub.     |
    '+-------------------------------------------------------+
    blnErrorFound = blnValue
    blnWarningFound = blnValue
    blnNoteFound = blnValue
    blnHeaderErrorFound = blnValue
    blnHeaderWarningFound = blnValue
    blnBlankFound = blnValue
End Sub

Sub CheckForErrors(ByVal CurrentSheetName As String)
    '+---------------------------------------------------+
    '| Checks for errors in the worksheet name which is  |
    '| passed into the sub.                              |
    '| Uses named ranges within each worksheet, and sets |
    '| the private variables accordingly.                |
    '+---------------------------------------------------+
    Dim strErrorRangeName As String
    Dim rngCell As Range
    On Error GoTo ErrorHandler

    '+-----------------------------------------------+
    '| Reset all the private variables prior to use. |
    '+-----------------------------------------------+
    Call ResetFlags(False)
    strErrorRangeName = Switch(CurrentSheetName = "SBS Table", "SBS", _
                               CurrentSheetName = "Table 1", "T1", _
                               CurrentSheetName = "CEL", "T1aCEL", _
                               CurrentSheetName = "Early Years Table", "EY", _
                               CurrentSheetName = "Table 2", "T2")
    strErrorRangeName = strErrorRangeName & "_Error_Range"

    For Each rngCell In Sheets(CurrentSheetName).Range(strErrorRangeName)
        If IsError(rngCell.Value) Then
            ' Formula Error within the worksheet (i.e. #REF!, #VALUE! etc.)
        Else
            If Left(rngCell.Value, 9) = "Error 1.1" Then
                blnBlankFound = True
                'blnErrorFound = True
            ElseIf Left(rngCell.Value, 7) = "Error H" Then
                blnHeaderErrorFound = True
            ElseIf Left(rngCell.Value, 9) = "Warning H" Then
                blnHeaderWarningFound = True
            ElseIf Left(rngCell.Value, 5) = "Error" Then
                blnErrorFound = True
            ElseIf Left(rngCell.Value, 7) = "Warning" Then
                blnWarningFound = True
            End If
        End If
    Next rngCell
    Exit Sub

ErrorHandler:
    MsgBox "Error " & Err.Number & " occurred in module CheckForErrors()." & _
           vbCrLf & vbCrLf & _
           Err.Description, vbExclamation, strMsgTitle
    Application.ScreenUpdating = True
End Sub

Sub CheckForT4Errors(ByVal CurrentSheetName As String)
    '+--------------------------------------------+
    '| Checks for errors in the Table 4 worksheet |
    '+--------------------------------------------+
    Dim strMasterRange As String
    Dim strFullRangeName As String
    Dim lngYear As Long
    Dim lngCounter As Long
    Dim lngColumn As Long
    On Error GoTo ErrorHandler

    Call ResetFlags(False)
    '+---------------------------------------------------------------+
    '| Check the header area for errors & warnings.                  |
    '+---------------------------------------------------------------+
    '| T5_LEA_Number    Error if blank - must be between 201 and 938 |
    '| T5_Contact       Error if blank                               |
    '| T5_Tel           Error if blank                               |
    '| T5_Email         Error if blank - must contain the '@' symbol |
    '| T5_Version       Warning if blank - must be > 0               |
    '| T5_Date          Warning if blank - must be <= now()          |
    '|                                                               |
    '+---------------------------------------------------------------+
    '| Check the following ranges for both Error 1.1 (blank) &       |
    '| Error 1.4 (<=0)                                               |
    '+---------------------------------------------------------------+
    '| s10gSY1c4     s10gSY1c11                                      |
    '| s10gSY2c4     s10gSY2c11                                      |
    '| s10gSY3c4     s10gSY3c11                                      |
    '| s10gSY4c4     s10gSY4c11                                      |
    '| s10gSY5c4     s10gSY5c11                                      |
    '| s10gSY6c4     s10gSY6c11                                      |
    '| s10gSY7c4     s10gSY7c11                                      |
    '| s10gSY8c4     s10gSY8c11                                      |
    '| s10gSY9c4     s10gSY9c11                                      |
    '| s10gSY10c4    s10gSY10c11                                     |
    '| s10gSY11c4    s10gSY11c11                                     |
    '| s10gPc5       s10gSc5                                         |
    '| s12gFTEc3                                                     |
    '+---------------------------------------------------------------+
    With Sheets(CurrentSheetName)
        'T4_LEA_Number [Error if blank - must be between 201 and 938]
        If .Range("T4_LEA_Number").Value = "" Then
            blnHeaderErrorFound = True
        ElseIf .Range("T4_LEA_Number").Value < 201 Or _
               .Range("T4_LEA_Number").Value > 938 Then
            blnHeaderErrorFound = True
        End If
        'T4_Contact [Error if blank]
        If .Range("T4_Contact").Value = "" Then
            blnHeaderErrorFound = True
        End If
        'T4_Tel [Error if blank]
        If .Range("T4_Tel").Value = "" Then
            blnHeaderErrorFound = True
        End If
        'T4_Email [Error if blank - must contain the '@' symbol]
        If .Range("T4_Email").Value = "" Then
            blnHeaderErrorFound = True
        ElseIf InStr(1, .Range("T4_Email").Value, "@") = 0 Then
            blnHeaderErrorFound = True
        End If
        'T4_Version [Warning if blank - must be > 0]
        If .Range("T4_Version").Value = "" Then
            blnHeaderWarningFound = True
        ElseIf .Range("T4_Version").Value < 1 Then
            blnHeaderWarningFound = True
        End If
        'T4_Date [Warning if blank - must be <= now()]
        If .Range("T4_Date").Value = "" Then
            blnHeaderWarningFound = True
        ElseIf .Range("T4_Date").Value > Now() Then
            blnHeaderWarningFound = True
        End If

        '+-----------------------------------------------+
        '| Now check the ranges s10gSY1c4 and s10gSY1c11 |
        '| remember that Y1 goes from Y1 to Y11 - so use |
        '| a loop to save programming.                   |
        '+-----------------------------------------------+
        'strMasterRange = "s10gSY"
        'For lngColumn = 4 To 11 Step 7   'This will force a step from c4 to c11
        '    For lngCounter = 1 To 11
        '        strFullRangeName = strMasterRange & lngCounter & "c" & lngColumn
        '        If .Range(strFullRangeName).Value = "" Then
        '            blnBlankFound = True
        '            blnErrorFound = True
        '        ElseIf .Range(strFullRangeName).Value <= 0 Then
        '            blnErrorFound = True
        '        End If
        '    Next lngCounter
        'Next lngColumn

        '+-------------------------------------------+
        '| Finally check the three additional ranges |
        '| s10gPc5, s10gSc5 and s12gFTEc3.           |
        '+-------------------------------------------+
        'For lngCounter = 1 To 3
        '    strFullRangeName = Switch(lngCounter = 1, "s10gPc5", _
        '                              lngCounter = 2, "s10gSc5", _
        '                              lngCounter = 3, "s12gFTEc3")
        '    If .Range(strFullRangeName).Value = "" Then
        '        blnBlankFound = True
        '        blnErrorFound = True
        '    ElseIf .Range(strFullRangeName).Value <= 0 Then
        '        blnErrorFound = True
        '    End If
        'Next lngCounter
    End With
    Exit Sub

ErrorHandler:
    MsgBox "Error " & Err.Number & " occurred in module CheckForT5Errors()." & _
           vbCrLf & vbCrLf & _
           Err.Description, vbExclamation, strMsgTitle
    Application.ScreenUpdating = True
End Sub

Sub CheckForNotes(ByVal CurrentSheetName As String)
    '+---------------------------------------------+
    '| finds out whether an entry has been put in  |
    '| the notes if a warning has been identified. |
    '+---------------------------------------------+
    Dim myRange As String
    Dim myCell As Range
    On Error GoTo ErrorHandler

    myRange = CurrentSheetName & "_Notes"
    For Each myCell In Application.Range(myRange)
        If Trim(myCell.Value) <> "" Then
            blnNoteFound = True
            Exit For
        End If
    Next myCell
    Exit Sub

ErrorHandler:
    MsgBox "Error " & Err.Number & " occurred in module CheckForNotes()." & _
           vbCrLf & vbCrLf & _
           Err.Description, vbExclamation, strMsgTitle
    Application.ScreenUpdating = True
End Sub

Sub SetMenuMessage(ByVal CurrentSheetName As String)
    '+---------------------------------------------------+
    '| This sets the error message that is output to the |
    '| Submit Data sheet depending upon the flags set.   |
    '+---------------------------------------------------+
    Dim myRange As String
    Dim strMessage As String
    Dim strErrorRangeName As String
    On Error GoTo ErrorHandler

    strMessage = ""
    If blnBlankFound Then
        strMessage = "Failed - Blank cells"
    End If

    If blnErrorFound Then
        If Len(strMessage) <> 0 Then
            strMessage = strMessage & " and Errors"
        Else
            strMessage = strMessage & "Failed - Errors"
        End If
    End If

    If blnHeaderErrorFound Then
        If Len(strMessage) <> 0 Then
            strMessage = strMessage & " and Header Errors"
        Else
            strMessage = strMessage & "Failed - Header Errors"
        End If
    End If

    If blnWarningFound Then
        '+--------------------------------------------------------------------+
        '| Two choices here - fail if no note, or pass if a note was entered. |
        '+--------------------------------------------------------------------+
        If blnNoteFound Then
            '+--------------------------------+
            '| A note has been entered - Pass |
            '+--------------------------------+
            If Len(strMessage) <> 0 Then
                '+-----------------------------------------------------+
                '| Already failed with other errors, so no need to say |
                '| anything about these warnings which have passed.    |
                '+-----------------------------------------------------+
            Else
                strMessage = strMessage & "Passed with Noted Warnings"
            End If
        Else
            '+---------------------------------+
            '| No note has been entered - Fail |
            '+---------------------------------+
            If Len(strMessage) <> 0 Then
                strMessage = strMessage & " and un-noted Warnings"
            Else
                strMessage = strMessage & "Failed - un-noted Warnings"
            End If
        End If
    End If

    If blnHeaderWarningFound Then
        If Len(strMessage) <> 0 Then
            strMessage = strMessage & " and Header Warnings"
        Else
            strMessage = strMessage & "Passed with Header Warnings"
        End If
    End If
    If strMessage = "" Then strMessage = "Passed all validation checks"
    strErrorRangeName = Switch(CurrentSheetName = "SBS Table", "SBS", _
                               CurrentSheetName = "Table 1", "T1", _
                               CurrentSheetName = "CEL", "T1aCEL", _
                               CurrentSheetName = "Table 2", "T2", _
                               CurrentSheetName = "Early Years Table", "EY", _
                               CurrentSheetName = "Table 4", "T4")
    strErrorRangeName = strErrorRangeName & "_Message"

    '+-----------------------------------------------------+
    '| Use the named ranges in the "Submit Data" worksheet |
    '| to assign the error checking results to the grid.   |
    '+-----------------------------------------------------+
    With Worksheets("Submit Data")
        .Activate
        .Unprotect Password:=strSubmitDataPassWord
        .Range(strErrorRangeName).Value = strMessage
        .Protect Password:=strSubmitDataPassWord
    End With
    Exit Sub

ErrorHandler:
    MsgBox "Error " & Err.Number & " occurred in module SetMenuMessage()." & _
           vbCrLf & vbCrLf & _
           Err.Description, vbExclamation, strMsgTitle
    Application.ScreenUpdating = True
End Sub

Private Sub Worksheet_SelectionChange(ByVal Target As Range)

End Sub
Attribute VB_Name = "Sheet10"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

Private Sub Worksheet_SelectionChange(ByVal Target As Range)

End Sub
Attribute VB_Name = "Sheet11"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_SelectionChange(ByVal Target As Range)

End Sub
Attribute VB_Name = "Sheet12"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet13"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "cmdEYShowBlanks, 85, 0, MSForms, CommandButton"

Option Explicit

Private Sub cmdEYShowBlanks_Click()
   Dim myCell As Range
    On Error GoTo ErrorHandler

    Application.Sheets("Early Years Table").Cells(1, 8) = "*"
    For Each myCell In Range("EY_Error_Range")
        'Check for Excel errors (#REF!, #NAME? etc..)
        If IsError(myCell) Then
            MsgBox "There is an Excel error in your worksheet, this is usually" & vbCrLf & _
                   "caused by using cut/paste instead of copy/paste and has" & vbCrLf & _
                   "corrupted the error-checking formula.", vbExclamation, "Section 52 Budget 2008-09"
            Exit For
        Else
            'Check for Error1 (Blank cells)
            If myCell.Value = "Error 1.1" Then
                MsgBox "You have left some cells blank. These are highlighted in blue. " & vbCrLf & _
                       "Please replace these with a zero or other number as appropriate", _
                       vbExclamation, "Section 52 Budget 2008-09"
                Exit For
            End If
        End If
    Next myCell
    Exit Sub

ErrorHandler:
    MsgBox "Error " & Err.Number & " occurred in module cmdT1ShowBlanks_Click()." & _
           vbCrLf & vbCrLf & _
           Err.Description, vbExclamation, "Section 52 Budget 2008-09"
    Application.ScreenUpdating = True
    Resume Next
End Sub

Private Sub Worksheet_SelectionChange(ByVal Target As Range)
    Dim strErrorWarning As String
    Dim strEWnumber As String
    Dim lngRow As Long
    Dim lngFirstDataRow As Long
    Dim lngErrRangeOffset As Long
    Dim lngColorIndexCF As Long
    Dim lngErrCol As Long
    Dim lngerrRow As Long

    If IsError(ActiveCell) Then Exit Sub

    lngFirstDataRow = 12
    lngErrRangeOffset = 13
    strErrorWarning = ""

    If ActiveCell.Row < lngFirstDataRow Then
        'Simpler check for the header cells.
        lngColorIndexCF = ColorIndexOfCF(Range(ActiveCell.AddressLocal))
        'Gets the conditional formatting applied to the cell if there is one.
        If lngColorIndexCF = 3 Or lngColorIndexCF = 6 Or lngColorIndexCF = 36 Then
            '3 is red, 6 is yellow and 36 is light yellow
            Select Case ActiveCell.AddressLocal
                Case "$A$7", "$B$7"
                    'A6/B6 = Contact = Error H1
                    MsgBox "Error H1" & vbCrLf & vbCrLf & _
                           "You must enter a contact name here", vbOKOnly, "Error Message"
                Case "$D$7", "$E$7"
                    'D6/E6 = Tel No. = Error H2
                    MsgBox "Error H2" & vbCrLf & vbCrLf & _
                           "You must enter a contact telephone number here", vbOKOnly, "Error Message"
                Case "$I$6", "$J$6"
                    'M5/P5 = Email = Error H3
                    MsgBox "Error H3" & vbCrLf & vbCrLf & _
                           "You must enter a contact email address here", vbOKOnly, "Error Message"
                Case "$G$7", "$H$7"
                    'H6/K6 = Version = Warning H1
                    MsgBox "Warning H1" & vbCrLf & vbCrLf & _
                           "You should enter the version number of this return here", vbOKOnly, "Warning Message"
                Case "$I$7", "$J$7"
                    'M6/P6 = Date = Warning H2
                    MsgBox "Warning H2" & vbCrLf & vbCrLf & _
                           "You should enter the date you completed this version of the return here. Date should be entered in the form 'dd/mm/yyyy' or 'dd month yyyy'", vbOKOnly, "Warning Message"
            End Select
        End If
        Exit Sub
    End If
    lngColorIndexCF = ColorIndexOfCF(Range(ActiveCell.AddressLocal))
    'Gets the conditional formatting applied to the cell if there is one.
    If lngColorIndexCF = 3 Or lngColorIndexCF = 6 Or lngColorIndexCF = 36 Then
        '3 is red, 6 is yellow and 36 is light yellow
        lngErrCol = ActiveCell.Column + lngErrRangeOffset
        lngerrRow = ActiveCell.Row
        If Left(ActiveWorkbook.ActiveSheet.Cells(lngerrRow, lngErrCol).Value, 5) = "Error" Then
            strErrorWarning = "E"
            strEWnumber = Trim(Mid(ActiveWorkbook.ActiveSheet.Cells(lngerrRow, lngErrCol).Value, 7))
        ElseIf Left(ActiveWorkbook.ActiveSheet.Cells(lngerrRow, lngErrCol).Value, 7) = "Warning" Then
            strErrorWarning = "W"
            strEWnumber = Trim(Mid(ActiveWorkbook.ActiveSheet.Cells(lngerrRow, lngErrCol).Value, 9))
        End If
    ElseIf Left(ActiveCell.Value, 9) = "Error 1.1" Then
        MsgBox "Value is missing. Do not leave any cell blank"
    ElseIf Left(ActiveCell.Value, 5) = "Error" Then
        strErrorWarning = "E"
        strEWnumber = Trim(Mid(ActiveCell.Value, 7))
    ElseIf Left(ActiveCell.Value, 7) = "Warning" Then
        strErrorWarning = "W"
        strEWnumber = Trim(Mid(ActiveCell.Value, 9))
    End If

    If strErrorWarning <> "" Then
        With ActiveWorkbook.Sheets("Error Codes")
            lngRow = 1
            Do While .Cells(lngRow, 1) <> ""
                If .Cells(lngRow, 1) = strErrorWarning And _
                   .Cells(lngRow, 2) = strEWnumber Then
                   MsgBox IIf(strErrorWarning = "E", "Error " & strEWnumber, "Warning " & strEWnumber) & _
                          vbCrLf & vbCrLf & _
                          .Cells(lngRow, 3), vbOKOnly, _
                            IIf(strErrorWarning = "E", "Error Message", "Warning Message")
                    Exit Do
                End If
                lngRow = lngRow + 1
            Loop
        End With
    End If
End Sub

Private Function ColorIndexOfCF(Rng As Range) As Integer
    Dim AC As Integer
    ColorIndexOfCF = 0
    AC = ActiveCondition(Rng)
    If AC <> 0 Then
        ColorIndexOfCF = Rng.FormatConditions(AC).Interior.ColorIndex
    End If
End Function

Private Function ActiveCondition(Rng As Range) As Integer
    Dim Ndx As Long
    Dim FC As FormatCondition
    If Rng.FormatConditions.Count <> 0 Then
        For Ndx = 1 To Rng.FormatConditions.Count
            Set FC = Rng.FormatConditions(Ndx)
            If Application.Evaluate(FC.Formula1) Then
                ActiveCondition = Ndx
                Exit Function
            End If
        Next Ndx
    End If
    ActiveCondition = 0
End Function


Attribute VB_Name = "Sheet14"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "cmdT1ShowBlanks, 1, 0, MSForms, CommandButton"
Option Explicit

Private Sub cmdT1ShowBlanks_Click()
   Dim myCell As Range
    On Error GoTo ErrorHandler

    Application.Sheets("Table 1").Cells(1, 8) = "*"
    For Each myCell In Range("T1_Error_Range")
        'Check for Excel errors (#REF!, #NAME? etc..)
        If IsError(myCell) Then
            MsgBox "There is an Excel error in your worksheet, this is usually" & vbCrLf & _
                   "caused by using cut/paste instead of copy/paste and has" & vbCrLf & _
                   "corrupted the error-checking formula.", vbExclamation, "Section 52 Budget 2008-09"
            Exit For
        Else
            'Check for Error1 (Blank cells)
            If myCell.Value = "Error 1.1" Then
                MsgBox "You have left some cells blank. These are highlighted in blue. " & vbCrLf & _
                       "Please replace these with a zero or other number as appropriate", _
                       vbExclamation, "Section 52 Budget 2008-09"
                Exit For
            End If
        End If
    Next myCell
    Exit Sub

ErrorHandler:
    MsgBox "Error " & Err.Number & " occurred in module cmdT1ShowBlanks_Click()." & _
           vbCrLf & vbCrLf & _
           Err.Description, vbExclamation, "Section 52 Budget 2008-09"
    Application.ScreenUpdating = True
    Resume Next
End Sub

Private Sub Worksheet_SelectionChange(ByVal Target As Range)
    Dim strErrorWarning As String
    Dim strEWnumber As String
    Dim lngRow As Long
    Dim lngFirstDataRow As Long
    Dim lngErrRangeOffset As Long
    Dim lngColorIndexCF As Long
    Dim lngErrCol As Long
    Dim lngerrRow As Long

    If IsError(ActiveCell) Then Exit Sub

    lngFirstDataRow = 12
    lngErrRangeOffset = 27
    strErrorWarning = ""

    'New code added 29/11/2006. Checks to see if you are on a data cell
    'in error, and if so, it displays the error message here too.
    If ActiveCell.Row < lngFirstDataRow Then
        'Simpler check for the header cells.
        lngColorIndexCF = ColorIndexOfCF(Range(ActiveCell.AddressLocal))
        'Gets the conditional formatting applied to the cell if there is one.
        If lngColorIndexCF = 3 Or lngColorIndexCF = 6 Or lngColorIndexCF = 36 Then
            '3 is red, 6 is yellow and 36 is light yellow
            Select Case ActiveCell.AddressLocal
                Case "$A$6", "$B$6"
                    'A6/B6 = Contact = Error H1
                    MsgBox "Error H1" & vbCrLf & vbCrLf & _
                           "You must enter a contact name here", vbOKOnly, "Error Message"
                Case "$D$6", "$E$6"
                    'D6/E6 = Tel No. = Error H2
                    MsgBox "Error H2" & vbCrLf & vbCrLf & _
                           "You must enter a contact telephone number here", vbOKOnly, "Error Message"
                Case "$M$5", "$P$5"
                    'M5/P5 = Email = Error H3
                    MsgBox "Error H3" & vbCrLf & vbCrLf & _
                           "You must enter a contact email address here", vbOKOnly, "Error Message"
                Case "$H$6", "$K$6"
                    'H6/K6 = Version = Warning H1
                    MsgBox "Warning H1" & vbCrLf & vbCrLf & _
                           "You should enter the version number of this return here", vbOKOnly, "Warning Message"
                Case "$M$6", "$P$6"
                    'M6/P6 = Date = Warning H2
                    MsgBox "Warning H2" & vbCrLf & vbCrLf & _
                           "You should enter the date you completed this version of the return here. Date should be entered in the form 'dd/mm/yyyy' or 'dd month yyyy'", vbOKOnly, "Warning Message"
            End Select
        End If
        Exit Sub
    End If
     lngColorIndexCF = ColorIndexOfCF(Range(ActiveCell.AddressLocal))
    'Gets the conditional formatting applied to the cell if there is one.
    If lngColorIndexCF = 3 Or lngColorIndexCF = 6 Or lngColorIndexCF = 36 Then
        '3 is red, 6 is yellow and 36 is light yellow
        lngErrCol = ActiveCell.Column + lngErrRangeOffset
        lngerrRow = ActiveCell.Row
        If Left(ActiveWorkbook.ActiveSheet.Cells(lngerrRow, lngErrCol).Value, 5) = "Error" Then
            strErrorWarning = "E"
            strEWnumber = Trim(Mid(ActiveWorkbook.ActiveSheet.Cells(lngerrRow, lngErrCol).Value, 7))
        ElseIf Left(ActiveWorkbook.ActiveSheet.Cells(lngerrRow, lngErrCol).Value, 7) = "Warning" Then
            strErrorWarning = "W"
            strEWnumber = Trim(Mid(ActiveWorkbook.ActiveSheet.Cells(lngerrRow, lngErrCol).Value, 9))
        End If
    ElseIf Left(ActiveCell.Value, 9) = "Error 1.1" Then
        MsgBox "Value is missing. Do not leave any cell blank"
    ElseIf Left(ActiveCell.Value, 5) = "Error" Then
        strErrorWarning = "E"
        strEWnumber = Trim(Mid(ActiveCell.Value, 7))
    ElseIf Left(ActiveCell.Value, 7) = "Warning" Then
        strErrorWarning = "W"
        strEWnumber = Trim(Mid(ActiveCell.Value, 9))
    End If

    If strErrorWarning <> "" Then
        With ActiveWorkbook.Sheets("Error Codes")
            lngRow = 1
            Do While .Cells(lngRow, 1) <> ""
                If .Cells(lngRow, 1) = strErrorWarning And _
                   .Cells(lngRow, 2) = strEWnumber Then
                   MsgBox IIf(strErrorWarning = "E", "Error " & strEWnumber, "Warning " & strEWnumber) & _
                          vbCrLf & vbCrLf & _
                          .Cells(lngRow, 3), vbOKOnly, _
                            IIf(strErrorWarning = "E", "Error Message", "Warning Message")
                    Exit Do
                End If
                lngRow = lngRow + 1
            Loop
        End With
    End If
End Sub

Private Function ColorIndexOfCF(Rng As Range) As Integer
    Dim AC As Integer
    ColorIndexOfCF = 0
    AC = ActiveCondition(Rng)
    If AC <> 0 Then
        ColorIndexOfCF = Rng.FormatConditions(AC).Interior.ColorIndex
    End If
End Function

Private Function ActiveCondition(Rng As Range) As Integer
    Dim Ndx As Long
    Dim FC As FormatCondition
    If Rng.FormatConditions.Count <> 0 Then
        For Ndx = 1 To Rng.FormatConditions.Count
            Set FC = Rng.FormatConditions(Ndx)
            If Application.Evaluate(FC.Formula1) Then
                ActiveCondition = Ndx
                Exit Function
            End If
        Next Ndx
    End If
    ActiveCondition = 0
End Function
Attribute VB_Name = "Sheet15"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "cmdSBSTshowBlanks, 1, 0, MSForms, CommandButton"
Option Explicit

Private Sub cmdSBSTshowBlanks_Click()
    Dim myCell As Range
    On Error GoTo ErrorHandler

    Application.Sheets("SBS Table").Cells(1, 8) = "*"
    For Each myCell In Range("SBS_Error_Range")
        'Check for Excel errors (#REF!, #NAME? etc..)
        If IsError(myCell) Then
            MsgBox "There is an Excel error in your worksheet, this is usually" & vbCrLf & _
                   "caused by using cut/paste instead of copy/paste and has" & vbCrLf & _
                   "corrupted the error-checking formula.", vbExclamation, "Section 52 Budget 2008-09"
            Exit For
        Else
            'Check for Error1 (Blank cells)
            If myCell.Value = "Error 1.1" Then
                MsgBox "You have left some cells blank. These are highlighted in blue. " & vbCrLf & _
                       "Please replace these with a zero or other number as appropriate", _
                       vbExclamation, "Section 52 Budget 2008-09"
                Exit For
            End If
        End If
    Next myCell
    Exit Sub

ErrorHandler:
    MsgBox "Error " & Err.Number & " occurred in module cmdT1ShowBlanks_Click()." & _
           vbCrLf & vbCrLf & _
           Err.Description, vbExclamation, "Section 52 Budget 2008-09"
    Application.ScreenUpdating = True
    Resume Next
End Sub

Private Sub Worksheet_SelectionChange(ByVal Target As Range)
    Dim strErrorWarning As String
    Dim strEWnumber As String
    Dim lngRow As Long
    Dim lngFirstDataRow As Long
    Dim lngErrRangeOffset As Long
    Dim lngColorIndexCF As Long
    Dim lngErrCol As Long
    Dim lngerrRow As Long

    If IsError(ActiveCell) Then Exit Sub

    lngFirstDataRow = 13
    lngErrRangeOffset = 16
    strErrorWarning = ""

    'New code added 29/11/2006. Checks to see if you are on a data cell
    'in error, and if so, it displays the error message here too.
    If ActiveCell.Row < lngFirstDataRow Then
        'Simpler check for the header cells.
        lngColorIndexCF = ColorIndexOfCF(Range(ActiveCell.AddressLocal))
        'Gets the conditional formatting applied to the cell if there is one.
        If lngColorIndexCF = 3 Or lngColorIndexCF = 6 Or lngColorIndexCF = 36 Then
            '3 is red, 6 is yellow and 36 is light yellow
            Select Case ActiveCell.AddressLocal
                Case "$A$5", "$B$5"
                    'A5/B5 = Contact = Error H1
                    MsgBox "Error H1" & vbCrLf & vbCrLf & _
                           "You must enter a contact name here", vbOKOnly, "Error Message"
                Case "$D$5", "$E$5"
                    'D5/E5 = Tel No. = Error H2
                    MsgBox "Error H2" & vbCrLf & vbCrLf & _
                           "You must enter a contact telephone number here", vbOKOnly, "Error Message"
                Case "$J$4", "$L$4"
                    'J4/L4 = Email = Error H3
                    MsgBox "Error H3" & vbCrLf & vbCrLf & _
                           "You must enter a contact email address here", vbOKOnly, "Error Message"
                Case "$H$5", "$I$5"
                    'H5/I5 = Version = Warning H1
                    MsgBox "Warning H1" & vbCrLf & vbCrLf & _
                           "You should enter the version number of this return here", vbOKOnly, "Warning Message"
                Case "$J$5", "$L$5"
                    'J5/L5 = Date = Warning H2
                    MsgBox "Warning H2" & vbCrLf & vbCrLf & _
                           "You should enter the date you completed this version of the return here. Date should be entered in the form 'dd/mm/yyyy' or 'dd month yyyy'", vbOKOnly, "Warning Message"
            End Select
        End If
        Exit Sub
    End If
    lngColorIndexCF = ColorIndexOfCF(Range(ActiveCell.AddressLocal))
    'Gets the conditional formatting applied to the cell if there is one.
    If lngColorIndexCF = 3 Or lngColorIndexCF = 6 Or lngColorIndexCF = 36 Then
        '3 is red, 6 is yellow and 36 is light yellow
        lngErrCol = ActiveCell.Column + lngErrRangeOffset
        lngerrRow = ActiveCell.Row
        If Left(ActiveWorkbook.ActiveSheet.Cells(lngerrRow, lngErrCol).Value, 5) = "Error" Then
            strErrorWarning = "E"
            strEWnumber = Trim(Mid(ActiveWorkbook.ActiveSheet.Cells(lngerrRow, lngErrCol).Value, 7))
        ElseIf Left(ActiveWorkbook.ActiveSheet.Cells(lngerrRow, lngErrCol).Value, 7) = "Warning" Then
            strErrorWarning = "W"
            strEWnumber = Trim(Mid(ActiveWorkbook.ActiveSheet.Cells(lngerrRow, lngErrCol).Value, 9))
        End If
    ElseIf Left(ActiveCell.Value, 9) = "Error 1.1" Then
        MsgBox "Value is missing. Do not leave any cell blank"
    ElseIf Left(ActiveCell.Value, 5) = "Error" Then
        strErrorWarning = "E"
        strEWnumber = Trim(Mid(ActiveCell.Value, 7))
    ElseIf Left(ActiveCell.Value, 7) = "Warning" Then
        strErrorWarning = "W"
        strEWnumber = Trim(Mid(ActiveCell.Value, 9))
    End If

    If strErrorWarning <> "" Then
        With ActiveWorkbook.Sheets("Error Codes")
            lngRow = 1
            Do While .Cells(lngRow, 1) <> ""
                If .Cells(lngRow, 1) = strErrorWarning And _
                   .Cells(lngRow, 2) = strEWnumber Then
                   MsgBox IIf(strErrorWarning = "E", "Error " & strEWnumber, "Warning " & strEWnumber) & _
                          vbCrLf & vbCrLf & _
                          .Cells(lngRow, 3), vbOKOnly, _
                            IIf(strErrorWarning = "E", "Error Message", "Warning Message")
                    Exit Do
                End If
                lngRow = lngRow + 1
            Loop
        End With
    End If



End Sub

Private Function ColorIndexOfCF(Rng As Range) As Integer
    Dim AC As Integer
    ColorIndexOfCF = 0
    AC = ActiveCondition(Rng)
    If AC <> 0 Then
        ColorIndexOfCF = Rng.FormatConditions(AC).Interior.ColorIndex
    End If
End Function

Private Function ActiveCondition(Rng As Range) As Integer
    Dim Ndx As Long
    Dim FC As FormatCondition
    If Rng.FormatConditions.Count <> 0 Then
        For Ndx = 1 To Rng.FormatConditions.Count
            Set FC = Rng.FormatConditions(Ndx)
            If Application.Evaluate(FC.Formula1) Then
                ActiveCondition = Ndx
                Exit Function
            End If
        Next Ndx
    End If
    ActiveCondition = 0
End Function
Attribute VB_Name = "Sheet4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "cmdT1aCELShowBlanks, 15, 1, MSForms, CommandButton"
Option Explicit

Private Sub cmdT1aCELShowBlanks_Click()
   Dim myCell As Range
    On Error GoTo ErrorHandler

    Application.Sheets("CEL").Cells(1, 8) = "*"
    For Each myCell In Range("T1aCEL_Error_Range")
        'Check for Excel errors (#REF!, #NAME? etc..)
        If IsError(myCell) Then
            MsgBox "There is an Excel error in your worksheet, this is usually" & vbCrLf & _
                   "caused by using cut/paste instead of copy/paste and has" & vbCrLf & _
                   "corrupted the error-checking formula.", vbExclamation, "Section 52 Budget 2008-09"
            Exit For
        Else
            'Check for Error1 (Blank cells)
            If myCell.Value = "Error 1.1" Then
                MsgBox "You have left some cells blank. These are highlighted in blue. " & vbCrLf & _
                       "Please replace these with a zero or other number as appropriate", _
                       vbExclamation, strMsgTitle
                Exit For
            End If
        End If
    Next myCell
    Exit Sub

ErrorHandler:
    MsgBox "Error " & Err.Number & " occurred in module cmdT1aCELShowBlanks_Click()." & _
           vbCrLf & vbCrLf & _
           Err.Description, vbExclamation, strMsgTitle
    Application.ScreenUpdating = True
    Resume Next
End Sub

Private Sub Worksheet_SelectionChange(ByVal Target As Range)
    Dim strErrorWarning As String
    Dim strEWnumber As String
    Dim lngRow As Long
    Dim lngFirstDataRow As Long
    Dim lngErrRangeOffset As Long
    Dim lngColorIndexCF As Long
    Dim lngErrCol As Long
    Dim lngerrRow As Long

    If IsError(ActiveCell) Then Exit Sub

    lngFirstDataRow = 15
    lngErrRangeOffset = 15
    strErrorWarning = ""

    'New code added 29/11/2006. Checks to see if you are on a data cell
    'in error, and if so, it displays the error message here too.
    If ActiveCell.Row < lngFirstDataRow Then
        'Simpler check for the header cells.
        lngColorIndexCF = ColorIndexOfCF(Range(ActiveCell.AddressLocal))
        'Gets the conditional formatting applied to the cell if there is one.
        If lngColorIndexCF = 3 Or lngColorIndexCF = 6 Or lngColorIndexCF = 36 Then
            '3 is red, 6 is yellow and 36 is light yellow
            Select Case ActiveCell.AddressLocal
                Case "$A$7", "$B$7"
                    'A6/B6 = Contact = Error H1
                    MsgBox "Error H1" & vbCrLf & vbCrLf & _
                           "You must enter a contact name here", vbOKOnly, "Error Message"
                    Case "$C$7", "$D$7"
                        'D6/E6 = Tel No. = Error H2
                        MsgBox "Error H2" & vbCrLf & vbCrLf & _
                               "You must enter a contact telephone number here", vbOKOnly, "Error Message"
                    Case "$H$6", "$J$6"
                    'K5/M5 = Email = Error H3
                    MsgBox "Error H3" & vbCrLf & vbCrLf & _
                           "You must enter a contact email address here", vbOKOnly, "Error Message"
                    Case "$F$7", "$G$7"
                        'I6/J6 = Version = Warning H1
                        MsgBox "Warning H1" & vbCrLf & vbCrLf & _
                               "You should enter the version number of this return here", vbOKOnly, "Warning Message"
                    Case "$H$7", "$J$7"
                        'K6/M6 = Date = Warning H2
                        MsgBox "Warning H2" & vbCrLf & vbCrLf & _
                               "You should enter the date you completed this version of the return here. Date should be entered in the form 'dd/mm/yyyy' or 'dd month yyyy'", vbOKOnly, "Warning Message"
            End Select
        End If
        Exit Sub
    End If
    lngColorIndexCF = ColorIndexOfCF(Range(ActiveCell.AddressLocal))
    'Gets the conditional formatting applied to the cell if there is one.
    If lngColorIndexCF = 3 Or lngColorIndexCF = 6 Or lngColorIndexCF = 36 Then
        '3 is red, 6 is yellow and 36 is light yellow
        lngErrCol = ActiveCell.Column + lngErrRangeOffset
        lngerrRow = ActiveCell.Row
        If Left(ActiveWorkbook.ActiveSheet.Cells(lngerrRow, lngErrCol).Value, 5) = "Error" Then
            strErrorWarning = "E"
            strEWnumber = Trim(Mid(ActiveWorkbook.ActiveSheet.Cells(lngerrRow, lngErrCol).Value, 7))
        ElseIf Left(ActiveWorkbook.ActiveSheet.Cells(lngerrRow, lngErrCol).Value, 7) = "Warning" Then
            strErrorWarning = "W"
            strEWnumber = Trim(Mid(ActiveWorkbook.ActiveSheet.Cells(lngerrRow, lngErrCol).Value, 9))
        ElseIf ActiveCell.Row = 11 And ActiveCell.Column = 12 Then
            'Trap for Cell L11 which gets the error 'fed' through from AA34. Only one check and this
            'is for error 1.4 (<=0).
            strErrorWarning = "E"
            strEWnumber = "1.4"
        ElseIf ActiveCell.Row = 27 And ActiveCell.Column = 12 Then
            'Trap for Cell L27 which gets the error 'fed' through from AA80. Only one check and this
            'is for warning 2.6 (i.e. breached limit and no notes)
            strErrorWarning = "W"
            strEWnumber = "2.6"
        End If
    ElseIf Left(ActiveCell.Value, 9) = "Error 1.1" Then
        MsgBox "Value is missing. Do not leave any cell blank"
    ElseIf Left(ActiveCell.Value, 5) = "Error" Then
        strErrorWarning = "E"
        strEWnumber = Trim(Mid(ActiveCell.Value, 7))
    ElseIf Left(ActiveCell.Value, 7) = "Warning" Then
        strErrorWarning = "W"
        strEWnumber = Trim(Mid(ActiveCell.Value, 9))
    End If

    If strErrorWarning <> "" Then
        With ActiveWorkbook.Sheets("Error Codes")
            lngRow = 1
            Do While .Cells(lngRow, 1) <> ""
                If .Cells(lngRow, 1) = strErrorWarning And _
                   .Cells(lngRow, 2) = strEWnumber Then
                   MsgBox IIf(strErrorWarning = "E", "Error " & strEWnumber, "Warning " & strEWnumber) & _
                          vbCrLf & vbCrLf & _
                          .Cells(lngRow, 3), vbOKOnly, _
                            IIf(strErrorWarning = "E", "Error Message", "Warning Message")
                    Exit Do
                End If
                lngRow = lngRow + 1
            Loop
        End With
    End If
End Sub

Private Function ColorIndexOfCF(Rng As Range) As Integer
    Dim AC As Integer
    ColorIndexOfCF = 0
    AC = ActiveCondition(Rng)
    If AC <> 0 Then
        ColorIndexOfCF = Rng.FormatConditions(AC).Interior.ColorIndex
    End If
End Function

Private Function ActiveCondition(Rng As Range) As Integer
    Dim Ndx As Long
    Dim FC As FormatCondition
    On Error GoTo ErrorHandler

    If Rng.FormatConditions.Count <> 0 Then
        For Ndx = 1 To Rng.FormatConditions.Count
            Set FC = Rng.FormatConditions(Ndx)
            If Application.Evaluate(FC.Formula1) Then
                ActiveCondition = Ndx
                Exit Function
            End If
ErrorRecovery:
        Next Ndx
    End If
    ActiveCondition = 0
    Exit Function
    
ErrorHandler:
    If Err.Number = 13 Then
        'Type mismatch
        Resume ErrorRecovery
    End If
End Function
Attribute VB_Name = "Sheet6"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "tglFilterOnOff, 14, 0, MSForms, ToggleButton"
Attribute VB_Control = "cmdT2ShowBlanks, 59, 1, MSForms, CommandButton"
Attribute VB_Control = "cmdSortLEAref, 61, 2, MSForms, CommandButton"
Attribute VB_Control = "cmdSortName, 62, 3, MSForms, CommandButton"
Attribute VB_Control = "cmdSortDfES, 63, 4, MSForms, CommandButton"
Option Explicit

Private Sub cmdSortDfES_Click()
    Call SortRoutine("DfES")
End Sub

Private Sub cmdSortLEAref_Click()
    Call SortRoutine("LEAref")
End Sub

Private Sub cmdSortName_Click()
    Call SortRoutine("Name")
End Sub

Private Sub cmdT2ShowBlanks_Click()
    Dim myCell As Range
    On Error GoTo ErrorHandler

    Application.Sheets("Table 2").Cells(1, 8) = "*"
    For Each myCell In Range("T2_Error_Range")
        'Check for Excel errors (#REF!, #NAME? etc..)
        If IsError(myCell) Then
            MsgBox "There is an Excel error in your worksheet, this is usually" & vbCrLf & _
                   "caused by using cut/paste instead of copy/paste and has" & vbCrLf & _
                   "corrupted the error-checking formula.", vbExclamation, "Section 52 Budget 2008-09"
            Exit For
        Else
            'Check for Error1 (Blank cells)
            If myCell.Value = "Error 1.1" Then
                MsgBox "You have left some cells blank. These are highlighted in blue. " & vbCrLf & _
                       "Please replace these with a zero or other number as appropriate", _
                       vbExclamation, strMsgTitle
                Exit For
            End If
        End If
    Next myCell
    Exit Sub

ErrorHandler:
    MsgBox "Error " & Err.Number & " occurred in module cmdT2ShowBlanks_Click()." & _
           vbCrLf & vbCrLf & _
           Err.Description, vbExclamation, strMsgTitle
    Application.ScreenUpdating = True
    Resume Next
End Sub

Private Sub tglFilterOnOff_Click()
    Dim strExcelVers As String

    If Not gblnWorking Then
        '+----------------------------------------------------------+
        '| AutoFilter is a pain to get working in older versions of |
        '| Excel, so to prevent many problems I've disabled it for  |
        '| any version below Excel 2000.                            |
        '+-----------------------------+----------------------------+
        '| Excel Versions              |
        '+-----------------------------+
        '| 8 Excel 97 (Office 97)      |
        '| 9 Excel 2000 (Office 2000)  |
        '| 10 Excel 2002 (Office XP)   |
        '| 11 Excel 2003 (Office 2003) |
        '+-----------------------------+
        If Val(Application.Version) < 9 Then
            MsgBox "This feature doesn't work on Excel versions below " & _
                   "Excel 2000 due to the protected worksheets.", _
                   vbOKOnly, strMsgTitle
        Else
            Call AutoFilterOnOff
        End If
    End If
End Sub

Sub SortRoutine(strKey As String)
    '+----------------------------------------------------------------+
    '| This routine will sort the school lists by the column on which |
    '| the 'Sort' button was pressed. The command buttons call this   |
    '| routine with one of the following parameters:                  |
    '|                                                                |
    '| "DfES"                                                         |
    '| "LEAref"                                                       |
    '| "Name"                                                         |
    '+----------------------------------------------------------------+
    Dim lngPhaseTop As Long
    Dim lngPhaseBottom As Long
    Dim strPhaseRange As String
    Dim strPhaseKey As String
    Dim strPhase As String
    Dim strPhaseBase As String
    Dim lngCounter As Long
    Dim lngCol23Cell As Long
    Dim lngCol23Counter As Long

    'Turn Screen refresh OFF and calculation OFF
    With Application
        .ScreenUpdating = False
        .Calculation = xlCalculationManual
        .MaxChange = 0.001
    End With


    'Turn Protection OFF
    ActiveWorkbook.Sheets("Table 2").Unprotect Password:=strT2PassWord


    'Turn the Auto-filter OFF on Table 2 if it is currently on.
    gblnWorking = True
    If ActiveSheet.AutoFilterMode Then
        With ActiveSheet
            .AutoFilterMode = False
            .Rows("18").EntireRow.Hidden = True
            .Cells(5, 2).Select
            .tglFilterOnOff.Caption = "Turn Filter On"
            .tglFilterOnOff.Value = False
        End With
    End If
    gblnWorking = False


    'Copy sort key column to column AD using Paste Special..Values
    'This will be used later to sort the "Memorandum Items" columns.
    For lngCounter = 1 To 6
        strPhase = Switch(lngCounter = 1, "T2_Nursery", _
                          lngCounter = 2, "T2_Primary", _
                          lngCounter = 3, "T2_PriMiddle", _
                          lngCounter = 4, "T2_Secondary", _
                          lngCounter = 5, "T2_SecMiddle", _
                          lngCounter = 6, "T2_Special")
        strPhaseBase = Switch(lngCounter = 1, "T2_TotalNursery", _
                              lngCounter = 2, "T2_PriMiddle", _
                              lngCounter = 3, "T2_TotalPrimary", _
                              lngCounter = 4, "T2_SecMiddle", _
                              lngCounter = 5, "T2_TotalSecondary", _
                              lngCounter = 6, "T2_TotalSpecial")
        lngPhaseTop = ActiveSheet.Range(strPhase).Row + 1
        lngPhaseBottom = ActiveSheet.Range(strPhaseBase).Row - 2
        If lngPhaseBottom > lngPhaseTop Then
            If strKey = "LEAref" Then
                strPhaseRange = "B" & lngPhaseTop & ":B" & lngPhaseBottom
            ElseIf strKey = "Name" Then
                strPhaseRange = "C" & lngPhaseTop & ":C" & lngPhaseBottom
            ElseIf strKey = "DfES" Then
                strPhaseRange = "D" & lngPhaseTop & ":D" & lngPhaseBottom
            End If
            ActiveSheet.Range(strPhaseRange).Select
            Selection.Copy
            ActiveSheet.Range("AQ" & lngPhaseTop).Select
            Selection.PasteSpecial Paste:=xlPasteValues
        End If
    Next lngCounter


    'Sort T3a
    ActiveWorkbook.Sheets("Table 3a").Activate
    For lngCounter = 1 To 5
        strPhase = Switch(lngCounter = 1, "T3_Nursery", _
                          lngCounter = 2, "T3_Primary", _
                          lngCounter = 3, "T3_PriMiddle", _
                          lngCounter = 4, "T3_Secondary", _
                          lngCounter = 5, "T3_SecMiddle")
        strPhaseBase = Switch(lngCounter = 1, "T3_TotalNursery", _
                              lngCounter = 2, "T3_PrimarySubTotal", _
                              lngCounter = 3, "T3_PriMiddleSubTotal", _
                              lngCounter = 4, "T3_SecondarySubTotal", _
                              lngCounter = 5, "T3_SecMiddleSubTotal")
        lngPhaseTop = ActiveSheet.Range(strPhase).Row + 1
        lngPhaseBottom = ActiveSheet.Range(strPhaseBase).Row - 2
        If lngPhaseBottom > lngPhaseTop Then
            Call SortByKeyColumn("T3a", strKey, lngPhaseTop, lngPhaseBottom)
        End If
    Next lngCounter


    'Sort T3b
    ActiveWorkbook.Sheets("Table 3b").Activate
    strPhase = "T3_Special"
    strPhaseBase = "T3_TotalSpecial"
    lngPhaseTop = ActiveSheet.Range(strPhase).Row + 1
    lngPhaseBottom = ActiveSheet.Range(strPhaseBase).Row - 2
    If lngPhaseBottom > lngPhaseTop Then
        Call SortByKeyColumn("T3b", strKey, lngPhaseTop, lngPhaseBottom)
    End If

    ActiveWorkbook.Sheets("Table 2").Activate
    'Sort T2 columns R:AK using AK as the key
    For lngCounter = 1 To 6
        strPhase = Switch(lngCounter = 1, "T2_Nursery", _
                          lngCounter = 2, "T2_Primary", _
                          lngCounter = 3, "T2_PriMiddle", _
                          lngCounter = 4, "T2_Secondary", _
                          lngCounter = 5, "T2_SecMiddle", _
                          lngCounter = 6, "T2_Special")
        strPhaseBase = Switch(lngCounter = 1, "T2_TotalNursery", _
                              lngCounter = 2, "T2_PriMiddle", _
                              lngCounter = 3, "T2_TotalPrimary", _
                              lngCounter = 4, "T2_SecMiddle", _
                              lngCounter = 5, "T2_TotalSecondary", _
                              lngCounter = 6, "T2_TotalSpecial")
        lngPhaseTop = ActiveSheet.Range(strPhase).Row + 1
        lngPhaseBottom = ActiveSheet.Range(strPhaseBase).Row - 2
        If lngPhaseBottom > lngPhaseTop Then
            strPhaseRange = "T" & lngPhaseTop & ":AQ" & lngPhaseBottom
            strPhaseKey = "AQ" & lngPhaseTop
            ActiveSheet.Range(strPhaseRange).Sort _
                key1:=ActiveSheet.Range(strPhaseKey), Order1:=xlAscending

            'New code added 23/02/2006
            If lngCounter = 4 Or lngCounter = 5 Then
                'Need to re-jig the formula in columm (23) since it refers to T3a
                'and this sort has messed it up. Excel won't allow multiple
                'selections to sort with a key column seperate from the data cells
                'otherwise we could have done this with a two-step sort.
                If lngCounter = 4 Then
                    lngCol23Cell = ActiveWorkbook.Sheets("Table 3a").Range("T3_Secondary").Row + 1
                Else
                    lngCol23Cell = ActiveWorkbook.Sheets("Table 3a").Range("T3_SecMiddle").Row + 1
                End If
                lngCol23Counter = lngPhaseTop
                Do While lngCol23Counter <= lngPhaseBottom
                    ActiveSheet.Cells(lngCol23Counter, 30).Formula = _
                        "=IF('Table 3a'!AA" & lngCol23Cell & "=" & Chr(34) & Chr(34) & "," & Chr(34) & Chr(34) & ",'Table 3a'!AA" & lngCol23Cell & ")"
                    lngCol23Cell = lngCol23Cell + 1
                    lngCol23Counter = lngCol23Counter + 1
                Loop
            End If

            strPhaseRange = "AQ" & lngPhaseTop & ":AQ" & lngPhaseBottom
            'Blank values from cells AD now the sort has been done
            ActiveSheet.Range(strPhaseRange).ClearContents
        End If
    Next lngCounter


    'Turn Screen refresh ON and calculation ON
    With Application
        .ScreenUpdating = True
        .Calculation = xlCalculationAutomatic
        .MaxChange = 0.001
    End With


    'Need to turn calculation back on BEFORE doing the AutoFit, otherwise it will
    'be performed on the school names in the original sort order and not the
    'new (recalculated) sort order!

    '+-------------------------------------------------------------------+
    '| New routine added 07/02/2007, to AutoFit the School Names column. |
    '+-------------------------------------------------------------------+
    '| After sorting, the height of the school names column may not be   |
    '| enough for text-wrapping of long school names, where they have    |
    '| moved from their original row. Due to worksheet protection, the   |
    '| AutoFit option is not available to LAs.                           |
    '+-------------------------------------------------------------------+
    ' Use the location of the ranges T2_Nursery and T2_TotalSecondary
    ActiveSheet.Rows(ActiveSheet.Range("T2_Nursery").Row + 1 & ":" & _
                     ActiveSheet.Range("T2_TotalSecondary").Row - 2).AutoFit
    'Don't autofit the lines between T2_TotalSecondary and T2_Special since
    'this will mess up the formatting of the special schools header row.
    'Use the location of the ranges T2_Special and T2_TotalSpecial
    ActiveSheet.Rows(ActiveSheet.Range("T2_Special").Row + 1 & ":" & _
                     ActiveSheet.Range("T2_TotalSpecial").Row - 2).AutoFit


    'Turn Protection ON
    ActiveWorkbook.Sheets("Table 2").Protect Password:=strT2PassWord
    Exit Sub

ErrorHandler:
    MsgBox "Error " & Err.Number & " occurred in module cmdSortLEAref_Click()." & _
           vbCrLf & vbCrLf & _
           Err.Description, vbExclamation, strMsgTitle
    ActiveWorkbook.Sheets("Table 2").Activate
    ActiveWorkbook.Sheets("Table 2").Protect Password:=strT2PassWord
    With Application
        .ScreenUpdating = True
        .Calculation = xlCalculationAutomatic
        .MaxChange = 0.001
    End With
End Sub

Sub SortByKeyColumn(strTableID As String, strKeyCol As String, _
                    lngPhaseTop As Long, lngPhaseBottom As Long)
    Dim strPhaseRange As String
    Dim strPhaseKey As String

    If strTableID = "T3a" Then
        'Table 3a
        strPhaseRange = "A" & lngPhaseTop & ":BW" & lngPhaseBottom
    Else
        'Table 3b
        strPhaseRange = "A" & lngPhaseTop & ":AZ" & lngPhaseBottom
    End If
    'Determine the key column (i.e. the one to sort by)
    If strKeyCol = "LEAref" Then
        strPhaseKey = IIf(strTableID = "T3b", "A", "B") & lngPhaseTop
    ElseIf strKeyCol = "Name" Then
        strPhaseKey = IIf(strTableID = "T3b", "B", "C") & lngPhaseTop
    ElseIf strKeyCol = "DfES" Then
        strPhaseKey = IIf(strTableID = "T3b", "C", "D") & lngPhaseTop
    End If
    ActiveSheet.Range(strPhaseRange).Sort key1:= _
            ActiveSheet.Range(strPhaseKey), Order1:=xlAscending
End Sub

Private Sub Worksheet_SelectionChange(ByVal Target As Range)
    Dim strErrorWarning As String
    Dim strEWnumber As String
    Dim lngRow As Long
    Dim lngFirstDataRow As Long
    Dim lngErrRangeOffset As Long
    Dim lngColorIndexCF As Long
    Dim lngErrCol As Long
    Dim lngerrRow As Long

    If IsError(ActiveCell) Then Exit Sub

    lngFirstDataRow = 20
    lngErrRangeOffset = 42
    strErrorWarning = ""

    'New code added 29/11/2006. Checks to see if you are on a data cell
    'in error, and if so, it displays the error message here too.
    If ActiveCell.Row < lngFirstDataRow Then
        'Simpler check for the header cells.
        lngColorIndexCF = ColorIndexOfCF(Range(ActiveCell.AddressLocal))
        'Gets the conditional formatting applied to the cell if there is one.
        If lngColorIndexCF = 3 Or lngColorIndexCF = 6 Or lngColorIndexCF = 36 Then
            '3 is red, 6 is yellow and 36 is light yellow
            Select Case ActiveCell.AddressLocal
                Case "$B$6", "$C$6"
                    'A6/B6 = Contact = Error H1
                    MsgBox "Error H1" & vbCrLf & vbCrLf & _
                           "You must enter a contact name here", vbOKOnly, "Error Message"
                Case "$D$6", "$E$6"
                    'D6/E6 = Tel No. = Error H2
                    MsgBox "Error H2" & vbCrLf & vbCrLf & _
                           "You must enter a contact telephone number here", vbOKOnly, "Error Message"
                Case "$J$5", "$M$5"
                    'J5/L5 = Email = Error H3
                    MsgBox "Error H3" & vbCrLf & vbCrLf & _
                           "You must enter a contact email address here", vbOKOnly, "Error Message"
                Case "$H$6", "$I$6"
                    'H6/I6 = Version = Warning H1
                    MsgBox "Warning H1" & vbCrLf & vbCrLf & _
                           "You should enter the version number of this return here", vbOKOnly, "Warning Message"
                Case "$L$6", "$M$6"
                    'J6/L6 = Date = Warning H2
                    MsgBox "Warning H2" & vbCrLf & vbCrLf & _
                           "You should enter the date you completed this version of the return here. Date should be entered in the form 'dd/mm/yyyy' or 'dd month yyyy'", vbOKOnly, "Warning Message"
                Case "$X$16", "$X$17"
                    'X16/X17 = Empty Notes Box  = Warning 2.6
                    MsgBox "Warning 2.6" & vbCrLf & vbCrLf & _
                           "Please enter further information concerning the variation in the notes area to this table below.", vbOKOnly, "Warning Message"
            End Select
        End If
        Exit Sub
    End If
    lngColorIndexCF = ColorIndexOfCF(Range(ActiveCell.AddressLocal))
    'Gets the conditional formatting applied to the cell if there is one.
    If lngColorIndexCF = 3 Or lngColorIndexCF = 6 Or lngColorIndexCF = 36 Then
        '3 is red, 6 is yellow and 36 is light yellow
        If ActiveCell.Column = 1 Then
            'Column A error checking is in column AG i.e. an offset of 32, not the default 31
            lngErrCol = ActiveCell.Column + lngErrRangeOffset + 1
        Else
            lngErrCol = ActiveCell.Column + lngErrRangeOffset
        End If
        lngerrRow = ActiveCell.Row
        If Left(ActiveWorkbook.ActiveSheet.Cells(lngerrRow, lngErrCol).Value, 5) = "Error" Then
            strErrorWarning = "E"
            strEWnumber = Trim(Mid(ActiveWorkbook.ActiveSheet.Cells(lngerrRow, lngErrCol).Value, 7))
        ElseIf Left(ActiveWorkbook.ActiveSheet.Cells(lngerrRow, lngErrCol).Value, 7) = "Warning" Then
            strErrorWarning = "W"
            strEWnumber = Trim(Mid(ActiveWorkbook.ActiveSheet.Cells(lngerrRow, lngErrCol).Value, 9))
        End If
    ElseIf Left(ActiveCell.Value, 9) = "Error 1.1" Then
        MsgBox "Value is missing. Do not leave any cell blank"
    ElseIf Left(ActiveCell.Value, 5) = "Error" Then
        strErrorWarning = "E"
        strEWnumber = Trim(Mid(ActiveCell.Value, 7))
    ElseIf Left(ActiveCell.Value, 7) = "Warning" Then
        strErrorWarning = "W"
        strEWnumber = Trim(Mid(ActiveCell.Value, 9))
    End If

    If strErrorWarning <> "" Then
        With ActiveWorkbook.Sheets("Error Codes")
            lngRow = 1
            Do While .Cells(lngRow, 1) <> ""
                If .Cells(lngRow, 1) = strErrorWarning And _
                   .Cells(lngRow, 2) = strEWnumber Then
                   MsgBox IIf(strErrorWarning = "E", "Error " & strEWnumber, "Warning " & strEWnumber) & _
                          vbCrLf & vbCrLf & _
                          .Cells(lngRow, 3), vbOKOnly, _
                            IIf(strErrorWarning = "E", "Error Message", "Warning Message")
                    Exit Do
                End If
                lngRow = lngRow + 1
            Loop
        End With
    End If
End Sub

Private Function ColorIndexOfCF(Rng As Range) As Integer
    Dim AC As Integer
    ColorIndexOfCF = 0
    AC = ActiveCondition(Rng)
     If AC <> 0 Then
        ColorIndexOfCF = Rng.FormatConditions(AC).Interior.ColorIndex
    End If
End Function

Private Function ActiveCondition(Rng As Range) As Integer
    Dim Ndx As Long
    Dim FC As FormatCondition
    If Rng.FormatConditions.Count <> 0 Then
        For Ndx = 1 To Rng.FormatConditions.Count
            Set FC = Rng.FormatConditions(Ndx)
            If Application.Evaluate(FC.Formula1) Then
                ActiveCondition = Ndx
                Exit Function
            End If
        Next Ndx
    End If
    ActiveCondition = 0
End Function
Attribute VB_Name = "Sheet7"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "cmdT3AddSchool, 18, 0, MSForms, CommandButton"
Option Explicit

Private Sub cmdT3AddSchool_Click()
    frmAddSchool.Show
End Sub

Private Sub Worksheet_SelectionChange(ByVal Target As Range)

End Sub
Attribute VB_Name = "Sheet8"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "cmdT3bAddSchool, 1, 0, MSForms, CommandButton"
Option Explicit

Private Sub cmdT3bAddSchool_Click()
    Call T3bSchoolAdd
End Sub
Attribute VB_Name = "Sheet9"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private Sub Workbook_BeforeSave(ByVal SaveAsUI As Boolean, Cancel As Boolean)
    Dim blnGotErrorWarning As Boolean
    On Error GoTo ErrorChecking
    'If this is a LEA workbook then insert the 'Blank Cells'
    'check (Error 1.1). If internal DfES server, then ignore!
    If Dir("G:\S52Budget0607\DSC.txt") = "" Then
        Application.Sheets("SBS Table").Cells(1, 8) = "*"
        Application.Sheets("Table 1").Cells(1, 8) = "*"
        Application.Sheets("CEL").Cells(1, 8) = "*"
       ' Application.Sheets("YS Annex").Cells(1, 8) = "*"
        Application.Sheets("Table 2").Cells(1, 8) = "*"

        blnGotErrorWarning = False
        'Check SBS Table
        If IsError(Application.Sheets("SBS Table").Cells(1, 31)) Then
            blnGotErrorWarning = True
        Else
            If Application.Sheets("SBS Table").Cells(1, 31) <> 0 Then
                blnGotErrorWarning = True
            End If
        End If
        'Check Table 1
        If IsError(Application.Sheets("Table 1").Cells(1, 47)) Then
            blnGotErrorWarning = True
        Else
            If Application.Sheets("Table 1").Cells(1, 47) <> 0 Then
                blnGotErrorWarning = True
            End If
        End If
        'Check CEL Calculator
        If IsError(Application.Sheets("CEL").Cells(1, 39)) Then
            blnGotErrorWarning = True
        Else
            If Application.Sheets("CEL").Cells(1, 39) <> 0 Then
                blnGotErrorWarning = True
            End If
        End If
        'Check YS Annex
'        If IsError(Application.Sheets("YS Annex").Cells(1, 29)) Then
'            blnGotErrorWarning = True
'        Else
'            If Application.Sheets("YS Annex").Cells(1, 29) <> 0 Then
'                blnGotErrorWarning = True
'            End If
'        End If
        'Check Table 2
        If IsError(Application.Sheets("Table 2").Cells(1, 65)) Then
            blnGotErrorWarning = True
        Else
            If Application.Sheets("Table 2").Cells(1, 65) <> 0 Then
                blnGotErrorWarning = True
            End If
        End If
        If blnGotErrorWarning Then
            MsgBox "The workbook that you are saving contains errors and/or" & vbCrLf & _
                   "queries on one or more of the tables. Before submission to" & vbCrLf & _
                   "the DCSF, please ensure that (1) any errors are cleared" & vbCrLf & _
                   "and (2) explanations are given in the notes and comments" & vbCrLf & _
                   "box for queries." & vbCrLf & vbCrLf & _
                   "This will help us to understand your data and should" & vbCrLf & _
                   "reduce any subsequent correspondence about the figures.", _
                   vbInformation, strMsgTitle
        End If
    End If
    Exit Sub

ErrorChecking:
    If Err.Number = 68 Then
        'Network path not found anyway
        Resume Next
    Else
        MsgBox "Error " & Err.Number & " occurred during Save operation." & _
               vbCrLf & vbCrLf & _
               Err.Description, vbExclamation, strMsgTitle
    End If
End Sub
Attribute VB_Name = "frmAddSchool"
Attribute VB_Base = "0{8ECC3685-83D0-46EB-A4B0-33770B0AB341}{C700F77C-5F89-4935-B913-DADDE36441A3}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Sub cmdCancel_Click()
    Me.Hide
End Sub

Private Sub cmdInsert_Click()
    Me.Hide
    If Me.optNursery.Value = True Then
        Call SchoolAdd("Nursery")
    ElseIf Me.optPrimary.Value = True Then
        Call SchoolAdd("Primary")
    ElseIf Me.optPriMiddle.Value = True Then
        Call SchoolAdd("PriMiddle")
    ElseIf Me.optSecondary.Value = True Then
        Call SchoolAdd("Secondary")
    ElseIf Me.optSecMiddle.Value = True Then
        Call SchoolAdd("SecMiddle")
    End If
End Sub

Private Sub UserForm_Activate()
    Me.optNursery.Value = True
End Sub
Attribute VB_Name = "frmExport"
Attribute VB_Base = "0{83385A48-FA90-443D-81FB-C0B2AEF4669D}{462877A3-3A6D-4108-9055-BA40DD3D6CDB}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Sub cmdCancel_Click()
    Me.Hide
End Sub

Private Sub cmdExport_Click()
    Me.Hide
    If Me.optTable1 Then
        Call ExportTable("1")
    ElseIf Me.optTable4 Then
        Call ExportTable("4")
    ElseIf Me.optSBST Then
        Call ExportTable("SBST")
    End If
End Sub
Attribute VB_Name = "frmImport"
Attribute VB_Base = "0{023CC8BF-0CEC-4E1B-BA30-F2B3ADA3B59D}{2CECB28A-8AEE-4503-9640-9418AB9A53D0}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Private Sub cmdCancel_Click()
    Me.Hide
End Sub

Private Sub cmdImport_Click()
    Me.Hide
    If Me.optTable1 Then
        Call ImportTable("1")
    ElseIf Me.optTable4 Then
        Call ImportTable("4")
    ElseIf Me.optSBST Then
        Call ImportTable("SBST")
    End If
End Sub
Attribute VB_Name = "modAddSchool"
Option Explicit

Sub SchoolAdd(strPhase As String)
    '+--------------------------------------+
    '| This adds schools to Tables 3a and 2 |
    '+--------------------------------------+
    Dim lngAnchor As Long
    Dim lngRow As Long
    Dim lngT2Row As Long
    Dim lngTempCol As Long
    Dim lngTempColumns As Long
    Dim strMsgText As String
    On Error GoTo ErrorHandler

    'Turn Screen Refresh OFF
    Application.ScreenUpdating = False

    'Turn the Auto-filter OFF on Table 2 if it is currently on.
    gblnWorking = True
    If Sheet6.AutoFilterMode Then
        ActiveWorkbook.Sheets("Table 2").Activate
        ActiveWorkbook.Sheets("Table 2").Unprotect Password:=strT2PassWord
        Sheet6.AutoFilterMode = False
        Sheet6.Rows("19").EntireRow.Hidden = True
        Sheet6.Cells(5, 2).Select
        Sheet6.tglFilterOnOff.Caption = "Turn Filter On"
        Sheet6.tglFilterOnOff.Value = False
        ActiveWorkbook.Sheets("Table 2").Protect Password:=strT2PassWord
        ActiveWorkbook.Sheets("Table 3a").Activate
    End If
    gblnWorking = False

    Range("T3_" & strPhase).Select
    lngAnchor = Selection.Row
    lngRow = lngAnchor + 1
    Do
        If ActiveSheet.Cells(lngRow, 3) <> "" Then
            lngRow = lngRow + 1
        Else
            strMsgText = Switch(strPhase = "Nursery", "Nursery", _
                                strPhase = "Primary", "Primary", _
                                strPhase = "PriMiddle", "Middle Deemed Primary", _
                                strPhase = "Secondary", "Secondary", _
                                strPhase = "SecMiddle", "Middle Deemed Secondary")
            If lngRow - lngAnchor = 1 Then
                MsgBox "There is already an unused blank line for the " & vbCrLf & _
                       strMsgText & " phase.", vbExclamation, _
                       strMsgTitle
            Else
                '+------------------------------------------------------------+
                '| Insert the necessary cells into table 3a, and copy the row |
                '| above it to get all the conditional formatting & formulae. |
                '+------------------------------------------------------------+
                Range("A" & lngRow & ":EZ" & lngRow).Insert shift:=xlDown
                Range("A" & lngRow - 1 & ":EZ" & lngRow - 1).Copy
                Range("A" & lngRow).PasteSpecial

                '+----------------------------------------------------+
                '| Now clear out the user data from the copied cells, |
                '| but leave any cells with formulae alone.           |
                '+----------------------------------------------------+
                lngTempCol = 2
                Cells(lngRow, lngTempCol).Select
                Do
                    If Cells(lngRow, lngTempCol).Formula <> "" Then
                        If Left(Cells(lngRow, lngTempCol).Formula, 1) = "=" Then
                            ' Ignore since this cells contains a formula
                        Else
                            Cells(lngRow, lngTempCol) = ""
                        End If
                    End If
                    lngTempCol = lngTempCol + 1
                    ' Only need to do this up to the first
                    ' column of the error range cells.
                    If lngTempCol >= Range("T3_Error_Range").Column Then
                        Exit Do
                    End If
                Loop

                '+-------------------------------------------------------------+
                '| Now insert the cells on table 2. Since the addition of      |
                '| Academy lines on T2/T3, the row numbering between T2 and    |
                '| T3a no longer matches all the way through. To determine the |
                '| row to use on T2 we need to take the difference between the |
                '| relevant named ranges and take this away from lngRow.       |
                '+-------------------------------------------------------------+
                ' Unprotect Worksheet 'Table 2' first
                ActiveWorkbook.Sheets("Table 2").Unprotect Password:=strT2PassWord

                ' Work out the T2 row number using the row numbers of the ranges
                lngT2Row = lngRow + _
                           (Range("T2_" & strPhase).Row - Range("T3_" & strPhase).Row)

                With ActiveWorkbook.Sheets("Table 2")
                    .Range("A" & lngT2Row & ":DQ" & lngT2Row).Insert shift:=xlDown
                    .Range("A" & lngT2Row - 1 & ":DQ" & lngT2Row - 1).Copy
                    .Range("A" & lngT2Row).PasteSpecial

                    '+-----------------------------------------------------+
                    '| Now clear out the memorandum items only, this is    |
                    '| columns (15) to (25) Excel columns S to AD (19-30). |
                    '| Also need to set MFG variation col (Excel col 18).  |
                    '| Additional comment 23/02/2006, need to leave the    |
                    '| formula in column (23) i.e. column 28 for Secondary |
                    '| schools only.                                       |
                    '+-----------------------------------------------------+
                    lngTempCol = 21
                    .Cells(lngT2Row, lngTempCol - 1) = ""
                    Do While lngTempCol <= 32
                        If lngTempCol = 30 Then
                            If strPhase = "Secondary" Or strPhase = "SecMiddle" Then
                                'Leave it alone
                            Else
                                .Cells(lngT2Row, lngTempCol) = ""
                            End If
                        Else
                            .Cells(lngT2Row, lngTempCol) = ""
                        End If
                        lngTempCol = lngTempCol + 1
                    Loop
                    'Finally remove the figure for the Budget 06-07 pre-populated value
                    .Cells(lngT2Row, 34) = ""
                    .Cells(lngT2Row, 35) = ""
                    .Cells(lngT2Row, 36) = ""
                    .Cells(lngT2Row, 40) = ""
                    
                End With
                ' Protect Worksheet 'Table 2' again
                Call WrkSheet2Protect
                'ActiveWorkbook.Sheets("Table 2").Protect Password:=strT2PassWord

                '+---------------------------------------------+
                '| Finally - copy the T3 error range again, to |
                '| refer to the newly inserted lines on T2.    |
                '+---------------------------------------------+
                lngTempCol = Range("T3_Error_Range").Column
                For lngTempColumns = 1 To Range("T3_Error_Range").Columns.Count
                    Cells(lngRow - 1, lngTempCol).Copy
                    Cells(lngRow, lngTempCol).PasteSpecial
                    lngTempCol = lngTempCol + 1
                Next lngTempColumns
                Application.CutCopyMode = False
                Cells(lngRow, 2).Select
                MsgBox "Blank School Line inserted into the " & vbCrLf & _
                       strMsgText & " phase.", vbInformation, _
                       strMsgTitle
            End If
            Exit Do
        End If
    Loop
    'Turn Screen Refresh ON
    Application.ScreenUpdating = True
    Exit Sub

ErrorHandler:
    MsgBox "Error " & Err.Number & " occurred in module SchoolAdd()." & _
           vbCrLf & vbCrLf & _
           Err.Description, vbExclamation, strMsgTitle
    Application.ScreenUpdating = True
End Sub

Sub T3bSchoolAdd()
    '+--------------------------------------+
    '| This adds schools to Tables 3b and 2 |
    '+--------------------------------------+
    Dim lngAnchor As Long
    Dim lngRow As Long
    Dim lngT2Row As Long
    Dim lngTempCol As Long
    Dim lngTempColumns As Long
    On Error GoTo ErrorHandler

    'Turn Screen Refresh OFF
    Application.ScreenUpdating = False

    'Turn the Auto-filter OFF on Table 2 if it is currently on.
    gblnWorking = True
    If Sheet6.AutoFilterMode Then
        ActiveWorkbook.Sheets("Table 2").Activate
        ActiveWorkbook.Sheets("Table 2").Unprotect Password:=strT2PassWord
        Sheet6.AutoFilterMode = False
        Sheet6.Rows("19").EntireRow.Hidden = True
        Sheet6.Cells(5, 2).Select
        Sheet6.tglFilterOnOff.Caption = "Turn Filter On"
        Sheet6.tglFilterOnOff.Value = False
        ActiveWorkbook.Sheets("Table 2").Protect Password:=strT2PassWord
        ActiveWorkbook.Sheets("Table 3a").Activate
    End If
    gblnWorking = False

    Range("T3_Special").Select
    lngAnchor = Selection.Row
    lngRow = lngAnchor + 1
    Do
        If ActiveSheet.Cells(lngRow, 2) <> "" Then
            lngRow = lngRow + 1
        Else
            If lngRow - lngAnchor = 1 Then
                MsgBox "There is already an unused blank line for the " & vbCrLf & _
                       "Special phase.", vbExclamation, _
                       strMsgTitle
            Else
                '+------------------------------------------------------------+
                '| Insert the necessary cells into table 3b, and copy the row |
                '| above it to get all the conditional formatting & formulae. |
                '+------------------------------------------------------------+
                Range("A" & lngRow & ":EA" & lngRow).Insert shift:=xlDown
                Range("A" & lngRow - 1 & ":EA" & lngRow - 1).Copy
                Range("A" & lngRow).PasteSpecial

                '+----------------------------------------------------+
                '| Now clear out the user data from the copied cells, |
                '| but leave any cells with formulae alone.           |
                '+----------------------------------------------------+
                lngTempCol = 2
                Cells(lngRow, lngTempCol).Select
                Do
                    If Cells(lngRow, lngTempCol).Formula <> "" Then
                        If Left(Cells(lngRow, lngTempCol).Formula, 1) = "=" Then
                            ' Ignore this cell, it contains a formula
                        Else
                            Cells(lngRow, lngTempCol) = ""
                        End If
                    End If
                    lngTempCol = lngTempCol + 1
                    ' Only need to do this up to the first
                    ' column of the error range cells.
                    If lngTempCol >= Range("T3b_Error_Range").Column Then
                        Exit Do
                    End If
                Loop

                '+----------------------------------------------------------+
                '| Now insert the cells on table 2.                         |
                '| With the addition of the new T3b worksheet, and then the |
                '| academies on T3a, this completely 'buggered' the row     |
                '| numbering.                                               |
                '| Solution is to use the two named ranges T2_Special and   |
                '| T3_Special, calculate the row difference between the two |
                '| and add it to lngRow.                                    |
                '+----------------------------------------------------------+
                ' Unprotect Worksheet 'Table 2' first
                ActiveWorkbook.Sheets("Table 2").Unprotect Password:=strT2PassWord

                ' Work out the T2 row number using the row numbers of the ranges
                lngT2Row = lngRow + _
                           (Range("T2_Special").Row - Range("T3_Special").Row)

                With ActiveWorkbook.Sheets("Table 2")
                    .Range("A" & lngT2Row & ":DQ" & lngT2Row).Insert shift:=xlDown
                    .Range("A" & lngT2Row - 1 & ":DQ" & lngT2Row - 1).Copy
                    .Range("A" & lngT2Row).PasteSpecial

                    '+----------------------------------------------------+
                    '| Now clear out the memorandum items only, this is   |
                    '| columns (15) to (25) Excel columns S to AD (19-30).|
                    '| Don't need to set MFG variation column (18) here   |
                    '| since there is no option for Special Schools.      |
                    '+----------------------------------------------------+
                    lngTempCol = 21
                    Do While lngTempCol <= 32
                        .Cells(lngT2Row, lngTempCol) = ""
                        lngTempCol = lngTempCol + 1
                    Loop
                    'Finally remove the figure for the Budget 06-07 pre-populated value
                    .Cells(lngT2Row, 34) = ""
                    .Cells(lngT2Row, 35) = ""
                    .Cells(lngT2Row, 36) = ""
                    .Cells(lngT2Row, 40) = ""
                End With
                ' Protect Worksheet 'Table 2'
                Call WrkSheet2Protect
                'ActiveWorkbook.Sheets("Table 2").Protect Password:=strT2PassWord

                '+---------------------------------------------+
                '| Finally - copy the T3 error range again, to |
                '| refer to the newly inserted lines on T2.    |
                '+---------------------------------------------+
                lngTempCol = Range("T3b_Error_Range").Column
                For lngTempColumns = 1 To Range("T3b_Error_Range").Columns.Count
                    Cells(lngRow - 1, lngTempCol).Copy
                    Cells(lngRow, lngTempCol).PasteSpecial
                    lngTempCol = lngTempCol + 1
                Next lngTempColumns
                Application.CutCopyMode = False
                Cells(lngRow, 2).Select
                MsgBox "Blank School Line inserted into the " & vbCrLf & _
                       "Special phase.", vbInformation, _
                       strMsgTitle
            End If
            Exit Do
        End If
    Loop
    'Turn Screen Refresh ON
    Application.ScreenUpdating = True
    Exit Sub

ErrorHandler:
    MsgBox "Error " & Err.Number & " occurred in module T3bSchoolAdd()." & _
           vbCrLf & vbCrLf & _
           Err.Description, vbExclamation, strMsgTitle
    Application.ScreenUpdating = True
End Sub
Attribute VB_Name = "modConditionalFormats"
'Option Explicit
'
'Private Function ColorIndexOfCF(Rng As Range) As Integer
'    Dim AC As Integer
'    ColorIndexOfCF = 0
'    AC = ActiveCondition(Rng)
'    If AC <> 0 Then
'        ColorIndexOfCF = Rng.FormatConditions(AC).Interior.ColorIndex
'    End If
'End Function
'
'Private Function ActiveCondition(Rng As Range) As Integer
'    Dim Ndx As Long
'    Dim FC As FormatCondition
'    If Rng.FormatConditions.Count <> 0 Then
'        For Ndx = 1 To Rng.FormatConditions.Count
'            Set FC = Rng.FormatConditions(Ndx)
'            If Application.Evaluate(FC.Formula1) Then
'                ActiveCondition = Ndx
'                Exit Function
'            End If
'        Next Ndx
'    End If
'    ActiveCondition = 0
'End Function
Attribute VB_Name = "modFilter"
Option Explicit

Sub AutoFilterOnOff()
    Dim strRef As String
    Dim lngRow As Long
    Dim lngCounter As Long

    'In Excel '97 we need to remove FOCUS from the toggle button
    'otherwise the unprotect command will crash. So we set the
    'focus to cell 5,2 which is the contact name.
    ActiveSheet.Cells(5, 2).Select
    ActiveSheet.Unprotect Password:=strT2PassWord

    Application.ScreenUpdating = False
    If ActiveSheet.AutoFilterMode Then
        ActiveSheet.AutoFilterMode = False
        ActiveSheet.Rows("18").EntireRow.Hidden = True
        Range("A18").Select
        Sheet6.tglFilterOnOff.Caption = "Turn Filter On"
    Else
        ActiveSheet.Rows("18").EntireRow.Hidden = False
        lngRow = Range("T2_TotalSpecial").Row - 2
        strRef = "A18:BV" & lngRow
        Range(strRef).Select
        Selection.AutoFilter
        Application.CutCopyMode = False
        Range("A18").Select
        Sheet6.tglFilterOnOff.Caption = "Turn Filter Off"

        Dim MyCells As Range
        For Each MyCells In Range(Cells(18, 1), Cells(18, 46))
            MyCells.AutoFilter Field:=MyCells.Column, VisibleDropDown:=False
        Next MyCells
    End If
    Application.ScreenUpdating = True
    Call WrkSheet2Protect
End Sub
Attribute VB_Name = "modImportExport"
Option Explicit

Sub ExportTable(strTableID As String)
    '+---------------------------------------------------------------+
    '| This command exports the worksheet of the selected table to a |
    '| separate Excel workbook, containing just the selected table.  |
    '+---------------------------------------------------------------+
    Dim strWorkBookPath As String
    Dim lngLEA As Long
    Dim xlOriginatingWorkbook As Excel.Workbook
    Dim xlApp As Excel.Application
    Dim xlResultingWorkbook As Excel.Workbook
    Dim lngCounter As Long
    Dim lngNoSheets As Long
    Dim strSheetName As String
    Dim strErrorCodes As String
    Dim strSaveFileName As String
    Dim strFormula As String
    On Error GoTo ErrorHandler

    strErrorCodes = "Error Codes"
    strSheetName = Switch(strTableID = "1", "Table 1", _
                          strTableID = "4", "Table 4", _
                          strTableID = "SBST", "SBS Table")
    Set xlOriginatingWorkbook = ActiveWorkbook
    xlOriginatingWorkbook.Sheets(strSheetName).Select

    Select Case strTableID
        Case "1"
            lngLEA = xlOriginatingWorkbook.Sheets(strSheetName).Cells(5, 11)
        Case "4"
            lngLEA = Range("T4_LEA_Number").Value
        Case "YS"
            lngLEA = xlOriginatingWorkbook.Sheets(strSheetName).Cells(5, 8)
        Case "SBST"
            lngLEA = xlOriginatingWorkbook.Sheets(strSheetName).Cells(4, 9)
    End Select
    If lngLEA = 0 Then
        MsgBox "Your LEA number is blank on " & strSheetName & ", please correct " & _
               "this prior to exporting it", vbExclamation, strMsgTitle
        Exit Sub
    End If
    strWorkBookPath = xlOriginatingWorkbook.Path
    If strWorkBookPath = "" Then
        MsgBox "You have not saved this workbook - Please save this workbook first", _
        vbExclamation, strMsgTitle
        Exit Sub
    End If

    strSaveFileName = Switch(strTableID = "1", "T1", _
                             strTableID = "4", "T4", _
                             strTableID = "SBST", "SBST")
    If Dir(strWorkBookPath & "\s5209-10b" & strSaveFileName & lngLEA & ".xls") <> "" Then
        Kill (strWorkBookPath & "\s5209-10b" & strSaveFileName & lngLEA & ".xls")
    End If
    Set xlResultingWorkbook = Excel.Workbooks.Add
    xlResultingWorkbook.SaveAs strWorkBookPath & "\s5209-10b" & strSaveFileName & lngLEA & ".xls"
    xlOriginatingWorkbook.Activate
    xlOriginatingWorkbook.Sheets(strSheetName).Select
    xlOriginatingWorkbook.Unprotect (strWorkBookPassWord)
    If strTableID <> "4" Then
        xlOriginatingWorkbook.Sheets(strErrorCodes).Copy Before:=xlResultingWorkbook.Sheets(1)
    End If
    xlOriginatingWorkbook.Sheets(strSheetName).Copy Before:=xlResultingWorkbook.Sheets(1)
    xlOriginatingWorkbook.Protect (strWorkBookPassWord)
    Application.DisplayAlerts = False
    xlResultingWorkbook.Activate
    lngNoSheets = IIf(strTableID = "4", 1, 2)
    lngCounter = xlResultingWorkbook.Sheets.Count
    Do While lngCounter > lngNoSheets
        xlResultingWorkbook.Sheets(lngCounter).Select
        xlResultingWorkbook.Sheets(lngCounter).Delete
        lngCounter = xlResultingWorkbook.Sheets.Count
    Loop
    xlResultingWorkbook.Sheets(strSheetName).Select
    '+--------------------------------------------------+
    '| Now we need to remove references to other tables |
    '| prior to saving the worksheet.                   |
    '+--------------------------------------------------+
    If strTableID = "SBST" Or strTableID = "1" Or strTableID = "YS" Then
        xlResultingWorkbook.Sheets(strSheetName).Select
        With xlResultingWorkbook.Sheets(strSheetName)
            Select Case strTableID
                Case "SBST"
                    .Unprotect (strSBSTPassWord)
                    .Cells(21, 25).Formula = BlankCellFormula("I21")
                    .Cells(23, 25).Formula = ZeroCellFormula("I23")
                    .Cells(25, 25).Formula = ZeroCellFormula("I25")
                    .Cells(27, 25).Formula = ZeroCellFormula("I27")
                    .Cells(29, 25).Formula = ZeroCellFormula("I29")
                    .Cells(31, 25).Formula = ZeroCellFormula("I31")
                    .Cells(33, 25).Formula = BlankCellFormula("I33")
                    'Now remove the references to T1 in lines 21 to 33.
                    'For lngCounter = 19 To 25 Step 2
                    '    .Cells(lngCounter, 9).Formula = ""
                    'Next lngCounter
                    Range("I21").Copy
                    Range("I21").PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, _
                                              SkipBlanks:=False, Transpose:=False
                    Range("I23").Copy
                    Range("I23").PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, _
                                              SkipBlanks:=False, Transpose:=False
                    Range("I25").Copy
                    Range("I25").PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, _
                                              SkipBlanks:=False, Transpose:=False
                                              
                    Range("I27").Copy
                    Range("I27").PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, _
                                              SkipBlanks:=False, Transpose:=False
                    Range("I29").Copy
                    Range("I29").PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, _
                                              SkipBlanks:=False, Transpose:=False
                    Range("I31").Copy
                    Range("I31").PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, _
                                              SkipBlanks:=False, Transpose:=False
                   ' Range("I33").Copy
                   ' Range("I33").PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, _
                                              SkipBlanks:=False, Transpose:=False
                                        
                                              
                                              
                                              
                Application.CutCopyMode = False
                    .Protect (strSBSTPassWord)
                Case "1"
                    .Unprotect (strT1PassWord)
                    '[AH12:AP12 - Links to T2 (Line 1.0.1)]
                    .Cells(12, 34).Formula = ZeroCellFormula("G12")
                    '+----------------------------------------------------------------------------+
                    '| In columns (b), (c), and (d) where the validation is >0, we have to change |
                    '| this to >=0 for LEAs 201 & 420 since they only have one school each.       |
                    '+----------------------------------------------------------------------------+
                    If lngLEA = 201 Or lngLEA = 420 Then
                        .Cells(12, 36).Formula = ZeroCellFormula("I12")
                        .Cells(12, 38).Formula = ZeroCellFormula("K12")
                        .Cells(12, 40).Formula = ZeroCellFormula("M12")
                    Else
                        .Cells(12, 36).Formula = EqualZeroCellFormula("I12")
                        .Cells(12, 38).Formula = EqualZeroCellFormula("K12")
                        .Cells(12, 40).Formula = EqualZeroCellFormula("M12")
                    End If
                    .Cells(12, 42).Formula = BlankCellFormula("O12")
                    '[AH13:AP13 - Links to T2 (Line 1.0.2)]
                    .Cells(13, 34).Formula = ZeroCellFormula("G13")
                    If lngLEA = 201 Or lngLEA = 420 Then
                        .Cells(13, 36).Formula = ZeroCellFormula("I13")
                        .Cells(13, 38).Formula = ZeroCellFormula("K13")
                        .Cells(13, 40).Formula = ZeroCellFormula("M13")
                    Else
                        .Cells(13, 36).Formula = EqualZeroCellFormula("I13")
                        .Cells(13, 38).Formula = EqualZeroCellFormula("K13")
                        .Cells(13, 40).Formula = EqualZeroCellFormula("M13")
                    End If
                    .Cells(13, 42).Formula = BlankCellFormula("O13")
                    '[AH15:AP15 - Links to T2 (Line 1.0.4)]
                    'REMOVED BRENDON 2008
                    '.Cells(15, 34).Formula = ZeroCellFormula("G15")
                    If lngLEA = 201 Or lngLEA = 420 Then
                        .Cells(15, 36).Formula = ZeroCellFormula("I15")
                        .Cells(15, 38).Formula = ZeroCellFormula("K15")
                        .Cells(15, 40).Formula = ZeroCellFormula("M15")
                    Else
                        .Cells(15, 36).Formula = EqualZeroCellFormula("I15")
                        .Cells(15, 38).Formula = EqualZeroCellFormula("K15")
                        .Cells(15, 40).Formula = EqualZeroCellFormula("M15")
                    End If
                    .Cells(15, 42).Formula = BlankCellFormula("O15")
                    '[AH17:AP17 - Links to T2 (Line 1.0.6)]
                    .Cells(17, 34).Formula = ZeroCellFormula("G17")
                
                        .Cells(17, 36).Formula = ZeroCellFormula("I17")
                        .Cells(17, 38).Formula = ZeroCellFormula("K17")
                        .Cells(17, 40).Formula = ZeroCellFormula("M17")
           
                    .Cells(17, 42).Formula = BlankCellFormula("O17")
                    '[AH18:AP18 - Links to T2 (Line 1.0.7)]
                    .Cells(18, 34).Formula = ZeroCellFormula("G18")
                    If lngLEA = 201 Or lngLEA = 420 Then
                        .Cells(18, 36).Formula = ZeroCellFormula("I18")
                        .Cells(18, 38).Formula = ZeroCellFormula("K18")
                        .Cells(18, 40).Formula = ZeroCellFormula("M18")
                    Else
                        .Cells(18, 36).Formula = EqualZeroCellFormula("I18")
                        .Cells(18, 38).Formula = EqualZeroCellFormula("K18")
                        .Cells(18, 40).Formula = EqualZeroCellFormula("M18")
                    End If
                    .Cells(18, 42).Formula = BlankCellFormula("O18")
                    '[AH19:AP19 - Links to T2 (Line 1.0.8)]
                    .Cells(19, 34).Formula = ZeroCellFormula("G19")
                    .Cells(19, 36).Formula = ZeroCellFormula("I19")
                    .Cells(19, 38).Formula = ZeroCellFormula("K19")
                    .Cells(19, 40).Formula = ZeroCellFormula("M19")
                    .Cells(19, 42).Formula = BlankCellFormula("O19")
                    '[AH21:AP21 - Links to T2 (Line 1.0.10)]
                    
                        '  removed 2008 Brendon
                  '  .Cells(21, 34).Formula = ZeroCellFormula("G21")
                   ' .Cells(21, 36).Formula = ZeroCellFormula("I21")
                  '  .Cells(21, 38).Formula = ZeroCellFormula("K21")
                  '  .Cells(21, 40).Formula = ZeroCellFormula("M21")
                 '   .Cells(21, 42).Formula = BlankCellFormula("O21")
                    '[AH22:AP22 - Links to T2 (Line 1.0.11)]
                    
              
                    .Cells(22, 34).Formula = ZeroCellFormula("G22")
                    .Cells(22, 36).Formula = ZeroCellFormula("I22")
                    .Cells(22, 38).Formula = ZeroCellFormula("K22")
                    .Cells(22, 40).Formula = ZeroCellFormula("M22")
                    .Cells(22, 42).Formula = BlankCellFormula("O22")
                    '[AH24:AP24 - Links to T2 (Line 1.1.1)]
                  '  removed 2008 Brendon
                   ' .Cells(24, 34).Formula = ZeroCellFormula("G24")
                   ' .Cells(24, 36).Formula = ZeroCellFormula("I24")
                   ' .Cells(24, 38).Formula = ZeroCellFormula("K24")
                   ' .Cells(24, 40).Formula = ZeroCellFormula("M24")
                  ' .Cells(24, 42).Formula = BlankCellFormula("O24")
             
             
             
             
             
                    'Remove the formulae from lines 1.0.2, 1.0.4, 1.0.8,
                    'and 1.1.1 as they also refer to cells on Table 2.
                    'For lngCounter = 7 To 13 Step 2
                        '.Cells(13, lngCounter).Formula = ""
                        '.Cells(15, lngCounter).Formula = ""
                        '.Cells(19, lngCounter).Formula = ""
                        '.Cells(24, lngCounter).Formula = ""
                    'Next lngCounter
                    Range("G13:M13").Copy
                    Range("G13").PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, _
                                              SkipBlanks:=False, Transpose:=False
                    Range("G15:M15").Copy
                    Range("G15").PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, _
                                              SkipBlanks:=False, Transpose:=False
                   ' Range("G19:M19").Copy
                  '  Range("G19").PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, _
                                              SkipBlanks:=False, Transpose:=False
                    Range("G22:M22").Copy
                    Range("G22").PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, _
                                              SkipBlanks:=False, Transpose:=False
                    Application.CutCopyMode = False
                    'Remove the linkages to the SBS  on lines 2.7.1 and 2.7.6
                    .Cells(64, 46).Formula = ZeroCellFormula("S64")
                    '.Cells(125, 46).Formula = ZeroCellFormula("S125")
                    'Remove the linkage to the YS Annex on line 3.0.1
                  '  .Cells(96, 46).Formula = ZeroCellFormula("S96")
                  '  .Cells(101, 46).Formula = ZeroCellFormula("S101")
                  
                  
                    .Cells(183, 42).Formula = ZeroCellFormula("O183")
                    .Cells(185, 42).Formula = ZeroCellFormula("O185")
                    .Cells(187, 42).Formula = ZeroCellFormula("O187")
                    .Cells(189, 42).Formula = ZeroCellFormula("O189")

                    
                    
                    
                    
                    
                    .Protect (strT1PassWord)
                
                
                
               ' Case "YS"
               '     .Unprotect (strT1aYSPassWord)
               '     .Cells(20, 27).Formula = BlankCellFormula("K20")
               '    .Cells(21, 27).Formula = BlankCellFormula("K21")
               '     .Protect (strT1aYSPassWord)
            End Select
        End With
    End If
    xlResultingWorkbook.Save
    xlResultingWorkbook.Close
    Application.DisplayAlerts = True
    xlOriginatingWorkbook.Activate
    xlOriginatingWorkbook.Sheets("Submit Data").Select
    MsgBox "The " & strSheetName & " worksheet has been exported to the following file:-" & _
           vbCrLf & vbCrLf & _
           strWorkBookPath & "\s5208-09b" & strSaveFileName & lngLEA & ".xls" & _
           vbCrLf & vbCrLf & _
           "Please do not rename this file if you wish to import it back into" & vbCrLf & _
           "this workbook at a later date, since the application expects an" & vbCrLf & _
           "import file of the same name.", vbInformation, strMsgTitle
    Exit Sub

ErrorHandler:
    MsgBox "Error " & Err.Number & " occurred in module ExportTable(" & strTableID & ")." & _
           vbCrLf & vbCrLf & _
           Err.Description, vbExclamation, strMsgTitle
    Application.ScreenUpdating = True
End Sub

Sub ImportTable(strTableID As String)
    '+----------------------------------------------------------+
    '| This command imports a worksheet containing the selected |
    '| table back in to the main Excel workbook.                |
    '+----------------------------------------------------------+
    Dim strWorkBookPath As String
    Dim lngLEA As Long
    Dim xlOriginalWorkbook As Excel.Workbook
    Dim xlApp As Excel.Application
    Dim xlImportingWorkbook As Excel.Workbook
    Dim lngCounter As Long
    Dim lngXrefCounter As Long
    Dim lngRowCounter As Long
    Dim strRange As String
    Dim lngSheetNo As Long
    Dim strSheetName As String
    Dim strInSheetName As String
    Dim strBeforeSheetName As String
    Dim myCell As Range
    Dim strXTableFormula(130) As String     'For the Cross-Table Validation Links
    Dim strCellFormula(60) As String        'For the formulae in the Checksheet
    Dim strImportFileName As String
    Dim strFormula As String
    Dim xlSheet As Excel.Worksheet
    Dim lngT2FormRow As Long
    Dim lngYearCol As Long
    Dim blnFailTest As Boolean
    Dim nName As Name
    On Error GoTo ErrorHandler

    strSheetName = Switch(strTableID = "1", "Table 1", _
                          strTableID = "4", "Table 4", _
                          strTableID = "SBST", "SBS Table")
    ' Set the original workbook as an object for future references
    Set xlOriginalWorkbook = ActiveWorkbook
    xlOriginalWorkbook.Sheets(strSheetName).Select
    ' Check we have an LEA number
    Select Case strTableID
        Case "1"
            lngLEA = xlOriginalWorkbook.Sheets(strSheetName).Cells(5, 11)
        Case "4"
            lngLEA = Range("T4_LEA_Number").Value
        Case "SBST"
            lngLEA = xlOriginalWorkbook.Sheets(strSheetName).Cells(4, 9)
    End Select
    If lngLEA = 0 Then
        MsgBox "Your LEA number is blank on " & strSheetName & ", please correct " & _
               "this prior to importing the new file", vbExclamation, strMsgTitle
        Exit Sub
    End If
    ' Check we have a valid file path
    strWorkBookPath = xlOriginalWorkbook.Path
    If strWorkBookPath = "" Then
        MsgBox "You have not saved this workbook - Please save this workbook first", _
        vbExclamation, strMsgTitle
        Exit Sub
    End If
    strImportFileName = Switch(strTableID = "1", "T1", _
                               strTableID = "4", "T4", _
                               strTableID = "SBST", "SBST")
    ' Check the import file exists
    If Dir(strWorkBookPath & "\s5209-10b" & strImportFileName & lngLEA & ".xls") = "" Then
        MsgBox "Cannot find the import file. Expected file:-" & vbCrLf & vbCrLf & _
               strWorkBookPath & "\s5209-10b" & strImportFileName & lngLEA & ".xls", _
               vbExclamation, strMsgTitle
        Exit Sub
    End If

    ' Open the import file - turn system alerts off in case the spreadsheet
    ' has already been opened, to disable the query message "are you sure
    ' you wish to reopen this blah blah blah..."
    Application.DisplayAlerts = False
    Set xlImportingWorkbook = _
        Excel.Workbooks.Open(strWorkBookPath & "\s5209-10b" & strImportFileName & _
        lngLEA & ".xls")
    Application.DisplayAlerts = True

    ' Find the correct worksheet to import
    strInSheetName = ""
    xlImportingWorkbook.Activate
    lngCounter = xlImportingWorkbook.Sheets.Count
    If lngCounter = 1 Then
        ' Import sheets(1) irrespective of name as long as it
        ' meets the validation criteria.
        strInSheetName = "Sheets(1)"
    Else
        ' More than one sheet in the import file, so see if you can find
        ' the correctly named sheet.
        For lngSheetNo = 1 To lngCounter
            If UCase(Trim(xlImportingWorkbook.Sheets(lngSheetNo).Name)) = UCase(strSheetName) Then
                strInSheetName = xlImportingWorkbook.Sheets(lngSheetNo).Name
                Exit For
            End If
        Next lngSheetNo
        If strInSheetName = "" Then
            MsgBox "Cannot find a worksheet named " & strSheetName & " in the import file." & vbCrLf & _
                   "Please check the import file and try again.", _
                   vbExclamation, strMsgTitle
            Exit Sub
        End If
    End If

    ' Ensure the worksheet to import has a consistent name
    If strInSheetName = "Sheets(1)" Then
        xlImportingWorkbook.Sheets(1).Select
        xlImportingWorkbook.Sheets(1).Name = "New " & strSheetName
    Else
        xlImportingWorkbook.Sheets(strInSheetName).Select
        xlImportingWorkbook.Sheets(strInSheetName).Name = "New " & strSheetName
    End If
    strInSheetName = "New " & strSheetName

    'Check protection
    If strTableID <> "4" Then
        If Not CheckProtection(strTableID) Then
            'Failed the protection check, either because the protection has been
            'removed, or it has been changed. In any case, a message will already
            'have been generated by the CheckProtection() function, so all we need
            'to do now is tidy up and cancel the import routine.
            Application.DisplayAlerts = False
            xlImportingWorkbook.Close
            Application.DisplayAlerts = True
            Exit Sub
        End If
    End If
    
    'Need to check 08-09 funding year 2, to make sure they're not trying to import
    'a non-2008-09 worksheet, or a 2008-09 worksheet from the first collection.
    blnFailTest = False
    With ActiveWorkbook.Sheets(strInSheetName)
        If strTableID = "1" Then
            If .Cells(5, 2) <> "2009-10" Then
                blnFailTest = True
            End If
        ElseIf strTableID = "4" Then
            If .Cells(5, 3) <> "2009-10" Then
                blnFailTest = True
            End If
        ElseIf strTableID = "SBST" Then
            'No SBST table in collection 1, so a simple year check is sufficient.
            If .Cells(4, 2) <> "2009-10 to 2010-11" Then
                blnFailTest = True
            End If
        End If
    End With

    If blnFailTest Then
        'Failed year check
        MsgBox "This table cannot be imported since it does not refer to budget year 2009-10" & _
               vbCrLf & vbCrLf & _
               "Please check your return and try again.", vbCritical, strMsgTitle
        Application.DisplayAlerts = True
        Application.ScreenUpdating = True
        Exit Sub
    End If

    For lngCounter = 1 To 130
        strXTableFormula(lngCounter) = ""
    Next lngCounter

    For lngCounter = 1 To 40
        strCellFormula(lngCounter) = ""
    Next lngCounter

    '+--------------------------------------------------------------------+
    '| During export, various formulae were removed from the tables prior |
    '| to saving as separate worksheets. We now need to store these       |
    '| formulae again to the array strXTableFormula() so we can re-insert |
    '| them in the imported file.                                         |
    '+--------------------------------------------------------------------+
    If strTableID = "SBST" Or strTableID = "1" Then
        With xlOriginalWorkbook.Sheets(strSheetName)
            Select Case strTableID
                Case "SBST"
                    .Unprotect (strSBSTPassWord)
                    strXTableFormula(1) = .Cells(21, 25).Formula
                    strXTableFormula(2) = .Cells(23, 25).Formula
                    strXTableFormula(3) = .Cells(25, 25).Formula
                    strXTableFormula(4) = .Cells(27, 25).Formula
                    strXTableFormula(5) = .Cells(29, 25).Formula
                    strXTableFormula(6) = .Cells(31, 25).Formula
                    strXTableFormula(7) = .Cells(33, 25).Formula
                    .Protect (strSBSTPassWord)
                    With xlOriginalWorkbook.Sheets("Table 1")
                        .Unprotect (strT1PassWord)
                        strXTableFormula(8) = .Cells(64, 46).Formula
                        .Protect (strT1PassWord)
                    End With
                    With xlOriginalWorkbook.Sheets("CEL")
                        .Unprotect (strT1aCELPassWord)
                        strXTableFormula(9) = .Cells(17, 21).Formula
                        strXTableFormula(10) = .Cells(17, 23).Formula

                        strXTableFormula(12) = .Cells(18, 21).Formula
                        strXTableFormula(13) = .Cells(18, 23).Formula

                        strXTableFormula(15) = .Cells(26, 21).Formula
                        strXTableFormula(16) = .Cells(26, 23).Formula

                        strXTableFormula(18) = .Cells(27, 21).Formula
                        strXTableFormula(19) = .Cells(27, 23).Formula

                        .Protect (strT1aCELPassWord)
                    End With
                Case "1"
                    .Unprotect (strT1PassWord)
                    'AH12 - AH24 (Excl. Line 14, 16, 20, and 23)
                    strXTableFormula(1) = .Cells(12, 34).Formula
                    strXTableFormula(2) = .Cells(13, 34).Formula
                    strXTableFormula(3) = .Cells(17, 34).Formula
                    strXTableFormula(4) = .Cells(18, 34).Formula
                    strXTableFormula(5) = .Cells(19, 34).Formula
                    strXTableFormula(6) = .Cells(22, 34).Formula
                    'AJ12 - AJ24 (Excl. Line 14, 16, 20, and 23)
                    strXTableFormula(7) = .Cells(12, 36).Formula
                    strXTableFormula(8) = .Cells(13, 36).Formula
                    strXTableFormula(9) = .Cells(15, 36).Formula
                    strXTableFormula(10) = .Cells(17, 36).Formula
                    strXTableFormula(11) = .Cells(18, 36).Formula
                    strXTableFormula(12) = .Cells(19, 36).Formula
                    strXTableFormula(13) = .Cells(22, 36).Formula
                    'AL12 - AL24 (Excl. Line 14, 16, 20, and 23)
                    strXTableFormula(14) = .Cells(12, 38).Formula
                    strXTableFormula(15) = .Cells(13, 38).Formula
                    strXTableFormula(16) = .Cells(15, 38).Formula
                    strXTableFormula(17) = .Cells(17, 38).Formula
                    strXTableFormula(18) = .Cells(18, 38).Formula
                    strXTableFormula(19) = .Cells(19, 38).Formula
                    strXTableFormula(20) = .Cells(22, 38).Formula
                    'AN12 - AN24 (Excl. Line 14, 16, 20, and 23)
                    strXTableFormula(21) = .Cells(12, 40).Formula
                    strXTableFormula(22) = .Cells(13, 40).Formula
                    strXTableFormula(23) = .Cells(15, 40).Formula
                    strXTableFormula(24) = .Cells(17, 40).Formula
                    strXTableFormula(25) = .Cells(18, 40).Formula
                    strXTableFormula(26) = .Cells(19, 40).Formula
                    strXTableFormula(27) = .Cells(22, 40).Formula
                    'AP12 - AP24 (Excl. Line 14, 16, 20, and 23)
                    strXTableFormula(28) = .Cells(12, 42).Formula
                    strXTableFormula(29) = .Cells(13, 42).Formula
                    strXTableFormula(30) = .Cells(15, 42).Formula
                    strXTableFormula(31) = .Cells(17, 42).Formula
                    strXTableFormula(32) = .Cells(18, 42).Formula
                    strXTableFormula(33) = .Cells(19, 42).Formula
                    strXTableFormula(34) = .Cells(22, 42).Formula
                    'Various T2 links to T1, line 18.1 COLUMN g
                    strXTableFormula(35) = .Cells(64, 46).Formula
                    
                    With xlOriginalWorkbook.Sheets("Table 2")
                        .Unprotect (strT2PassWord)
                        lngXrefCounter = 46
                        For lngCounter = 1 To 4
                            strRange = Switch(lngCounter = 1, "T2_TotalNursery", _
                                              lngCounter = 2, "T2_TotalPrimary", _
                                              lngCounter = 3, "T2_TotalSecondary", _
                                              lngCounter = 4, "T2_TotalSpecial")
                            lngT2FormRow = .Range(strRange).Row
                            strXTableFormula(lngXrefCounter) = .Cells(lngT2FormRow, 63).Formula
                            lngXrefCounter = lngXrefCounter + 1
                            strXTableFormula(lngXrefCounter) = .Cells(lngT2FormRow, 64).Formula
                            lngXrefCounter = lngXrefCounter + 1
                            strXTableFormula(lngXrefCounter) = .Cells(lngT2FormRow, 65).Formula
                            lngXrefCounter = lngXrefCounter + 1
                            strXTableFormula(lngXrefCounter) = .Cells(lngT2FormRow, 66).Formula
                            lngXrefCounter = lngXrefCounter + 1
                            strXTableFormula(lngXrefCounter) = .Cells(lngT2FormRow, 67).Formula
                            lngXrefCounter = lngXrefCounter + 1
                            strXTableFormula(lngXrefCounter) = .Cells(lngT2FormRow, 68).Formula
                            lngXrefCounter = lngXrefCounter + 1
                            strXTableFormula(lngXrefCounter) = .Cells(lngT2FormRow, 69).Formula
                            lngXrefCounter = lngXrefCounter + 1
                            strXTableFormula(lngXrefCounter) = .Cells(lngT2FormRow, 70).Formula
                            lngXrefCounter = lngXrefCounter + 1
                        Next
                        'Variable lngXrefCounter will now be at 54
                        lngT2FormRow = .Range("T2_TotalAllSchools").Row
                        strXTableFormula(78) = .Cells(lngT2FormRow, 63).Formula
                        strXTableFormula(79) = .Cells(lngT2FormRow, 64).Formula
                        strXTableFormula(80) = .Cells(lngT2FormRow + 6, 59).Formula
                        strXTableFormula(81) = .Cells(lngT2FormRow + 13, 66).Formula
                        strXTableFormula(82) = .Cells(lngT2FormRow + 13, 67).Formula
                        strXTableFormula(83) = .Cells(lngT2FormRow + 13, 68).Formula
                        strXTableFormula(84) = .Cells(lngT2FormRow + 17, 69).Formula
                        strXTableFormula(85) = .Cells(lngT2FormRow + 21, 70).Formula

                        'Line (39) Total ISB
                        'strXTableFormula(86) = .Cells(lngT2FormRow + 20, 49).Formula
                        .Protect (strT2PassWord)
                    End With
                    With xlOriginalWorkbook.Sheets("SBS Table")
                        .Unprotect (strSBSTPassWord)
                        strXTableFormula(87) = .Cells(21, 25).Formula
                        strXTableFormula(88) = .Cells(23, 25).Formula
                        strXTableFormula(89) = .Cells(25, 25).Formula
                        strXTableFormula(90) = .Cells(27, 25).Formula
                        strXTableFormula(91) = .Cells(29, 25).Formula
                        strXTableFormula(92) = .Cells(31, 25).Formula
                        strXTableFormula(93) = .Cells(33, 25).Formula
                        'Check lines 4, 5, 6, and 7 col (b). See if the T1
                        'links are there or if they've been overwritten. If they
                        'have been overwritten then we leave them alone, otherwise
                        're-insert the T1 formulae.
                        If InStr(1, .Cells(23, 9).Formula, "Table 1") > 0 Then
                            strXTableFormula(94) = .Cells(23, 9).Formula
                        End If
                        If InStr(1, .Cells(25, 9).Formula, "Table 1") > 0 Then
                            strXTableFormula(95) = .Cells(25, 9).Formula
                        End If
                        If InStr(1, .Cells(27, 9).Formula, "Table 1") > 0 Then
                            strXTableFormula(96) = .Cells(27, 9).Formula
                        End If
                        If InStr(1, .Cells(29, 9).Formula, "Table 1") > 0 Then
                            strXTableFormula(97) = .Cells(29, 9).Formula
                        End If
                          
                        .Protect (strSBSTPassWord)
                    End With
 '                   NO YS SHEET IN 2009 Brendon
 '
'                    With xlOriginalWorkbook.Sheets("YS Annex")
'                        .Unprotect (strT1aYSPassWord)
'                        strXTableFormula(98) = .Cells(20, 27).Formula
'                        strXTableFormula(99) = .Cells(21, 27).Formula
'                        .Protect (strT1aYSPassWord)
'                    End With
                    With xlOriginalWorkbook.Sheets("Early Years Table")
                        .Unprotect (strEYPassWord)
                        strXTableFormula(110) = .Cells(12, 22).Formula
                        strXTableFormula(111) = .Cells(14, 22).Formula
                        'new X table validation 2009 Brendon
                        strXTableFormula(112) = .Cells(33, 22).Formula
                        .Protect (strEYPassWord)
                    End With
                    'CEL calculator links to T1
                    With xlOriginalWorkbook.Sheets("CEL")
                        .Unprotect (strT1aCELPassWord)
                        'Error Checking Cells
                            strXTableFormula(100) = .Cells(15, 21).Formula
                            strXTableFormula(101) = .Cells(21, 21).Formula
                            strXTableFormula(102) = .Cells(25, 21).Formula
                            strXTableFormula(103) = .Cells(21, 6).Formula
                            strXTableFormula(104) = .Cells(25, 6).Formula
                        
                 
                    .Protect (strT1aCELPassWord)
                    End With
                    '[Line 1.8.1 col (g)] SBST link
                    strXTableFormula(123) = .Cells(64, 46).Formula
                    
                    '[Line 2.7.1 & 2.7.6 col (g)] YS Annex
                 '   strXTableFormula(124) = .Cells(120, 46).Formula
                 '   strXTableFormula(125) = .Cells(125, 46).Formula
                    .Protect (strT1PassWord)
               ' Case "YS"
               '     .Unprotect (strT1aYSPassWord)
               '     strXTableFormula(1) = .Cells(20, 27).Formula
               '    strXTableFormula(2) = .Cells(21, 27).Formula
               '    .Protect (strT1aYSPassWord)
               
               
               
                    With xlOriginalWorkbook.Sheets("Table 1")
                        .Unprotect (strT1PassWord)
          '              strXTableFormula(3) = .Cells(96, 46).Formula
          '              strXTableFormula(4) = .Cells(101, 46).Formula
          
        '   new T1 YS formula for 2009
          
                         strXTableFormula(115) = .Cells(183, 42).Formula
                         strXTableFormula(116) = .Cells(185, 42).Formula
                         strXTableFormula(117) = .Cells(187, 42).Formula
                         strXTableFormula(118) = .Cells(189, 42).Formula
          
             
                        .Protect (strT1PassWord)
                    End With
            End Select
        End With
    End If

    '+--------------------------------------------------------+
    '| The checksheet will need to be amended when importing, |
    '| so unprotect it and save the relevant formulae to      |
    '| array strCellFormula() for re-inserting later.         |
    '+--------------------------------------------------------+
    'Unprotect the checksheet
    xlOriginalWorkbook.Sheets("Checksheet").Unprotect (strCheckSheetPassWord)
    lngCounter = 1
    xlOriginalWorkbook.Activate
    xlOriginalWorkbook.Sheets("Checksheet").Select
    Set xlSheet = xlOriginalWorkbook.Sheets("Checksheet")
    Select Case strTableID


        Case "4"
            'T3 v T4
            For lngRowCounter = 11 To 70
                strCellFormula(lngCounter) = xlSheet.Cells(lngRowCounter, 14).Formula
                xlSheet.Cells(lngRowCounter, 14).Formula = ""
                lngCounter = lngCounter + 1
            Next lngRowCounter
    End Select

    '+-----------------------------------------------------------------------+
    '| Turn off the system alerts e.g. PC: Are you SURE you want to do this? |
    '| Me: Of course I am, why do you think I'm telling you to do it?        |
    '+-----------------------------------------------------------------------+
    Application.DisplayAlerts = False
    ' Unprotect the workbook and delete the old table
    xlOriginalWorkbook.Unprotect (strWorkBookPassWord)
    xlOriginalWorkbook.Sheets(strSheetName).Delete

    ' Bring in the new Table
    strBeforeSheetName = Switch(strTableID = "SBST", "Table 1", _
                                strTableID = "1", "CEL", _
                                strTableID = "4", "Checksheet")
    '                           strTableID = "YS", "Table 2")
    xlImportingWorkbook.Sheets(strInSheetName).Copy Before:=xlOriginalWorkbook.Sheets(strBeforeSheetName)
    xlImportingWorkbook.Close
    xlOriginalWorkbook.Activate
    ' Rename the 'New Table 4' as 'Table 4' and re-protect the workbook
    xlOriginalWorkbook.Sheets(strInSheetName).Select
    xlOriginalWorkbook.Sheets(strInSheetName).Name = strSheetName
    xlOriginalWorkbook.Protect (strWorkBookPassWord)
        
    '+--------------------------------------------------------------------+
    '| Now re-insert the X-table error-checking formula in the relevant   |
    '| sheets:-                                                           |
    '|                                                                    |
    '| SBST - References to T1                                            |
    '| Table 1 - References to T2, YS, SBST                               |
    '| YS Annex - References to T1                                        |
    '| Table 5 - None                                                     |
    '| CEL Annex - References to T1                                       |
    '+--------------------------------------------------------------------+
    If strTableID = "SBST" Or strTableID = "1" Or strTableID = "YS" Then
        With xlOriginalWorkbook.Sheets(strSheetName)
            Select Case strTableID
                Case "SBST"
                    .Unprotect (strSBSTPassWord)
                    .Cells(21, 25).Formula = strXTableFormula(1)
                    .Cells(23, 25).Formula = strXTableFormula(2)
                    .Cells(25, 25).Formula = strXTableFormula(3)
                    .Cells(27, 25).Formula = strXTableFormula(4)
                    .Cells(29, 25).Formula = strXTableFormula(5)
                    .Cells(31, 25).Formula = strXTableFormula(6)
                    .Cells(33, 25).Formula = strXTableFormula(7)

                    '+-----------------------------------------------------------+
                    '| New code to re-insert the SBS_Notes named range.          |
                    '+-----------------------------------------------------------+
                    For Each nName In Names
                        If nName.Name = "SBS_Notes" Then
                            nName.Delete
                        End If
                    Next nName
                    ActiveWorkbook.Names.Add Name:="SBS_Notes", RefersToR1C1:= _
                            "='SBS Table'!R38C2:R52C9"
                    '+-----------------------------------------------------------+
                    .Protect (strSBSTPassWord)

                    With xlOriginalWorkbook.Sheets("Table 1")
                        .Unprotect (strT1PassWord)
                        .Cells(64, 46).Formula = strXTableFormula(8)
                        .Protect (strT1PassWord)
                    End With
                     With xlOriginalWorkbook.Sheets("CEL")
                        .Unprotect (strT1aCELPassWord)
                        .Cells(17, 21).Formula = strXTableFormula(9)
                        .Cells(17, 23).Formula = strXTableFormula(10)
                    '   .Cells(17, 25).Formula = strXTableFormula(11)
                        .Cells(18, 21).Formula = strXTableFormula(12)
                        .Cells(18, 23).Formula = strXTableFormula(13)
                  '     .Cells(18, 25).Formula = strXTableFormula(14)
                        .Cells(26, 21).Formula = strXTableFormula(15)
                        .Cells(26, 23).Formula = strXTableFormula(16)
                 '      .Cells(26, 25).Formula = strXTableFormula(17)
                        .Cells(27, 21).Formula = strXTableFormula(18)
                        .Cells(27, 23).Formula = strXTableFormula(19)
                 '      .Cells(27, 25).Formula = strXTableFormula(20)
                         .Protect (strT1aCELPassWord)
                End With
                Case "1"
                    .Unprotect (strT1PassWord)
                    'AH12 - AH24 (Excl. Line 14, 16, 20, and 23)
                    .Cells(12, 34).Formula = strXTableFormula(1)
                    .Cells(13, 34).Formula = strXTableFormula(2)
                    .Cells(17, 34).Formula = strXTableFormula(3)
                    .Cells(18, 34).Formula = strXTableFormula(4)
                    .Cells(19, 34).Formula = strXTableFormula(5)
                    .Cells(22, 34).Formula = strXTableFormula(6)
                    'AJ12 - AJ24 (Excl. Line 14, 16, 20, and 23)
                    .Cells(12, 36).Formula = strXTableFormula(7)
                    .Cells(13, 36).Formula = strXTableFormula(8)
                    .Cells(15, 36).Formula = strXTableFormula(9)
                    .Cells(17, 36).Formula = strXTableFormula(10)
                    .Cells(18, 36).Formula = strXTableFormula(11)
                    .Cells(19, 36).Formula = strXTableFormula(12)
                    .Cells(22, 36).Formula = strXTableFormula(13)
                    'AL12 - AL24 (Excl. Line 14, 16, 20, and 23)
                    .Cells(12, 38).Formula = strXTableFormula(14)
                    .Cells(13, 38).Formula = strXTableFormula(15)
                    .Cells(15, 38).Formula = strXTableFormula(16)
                    .Cells(17, 38).Formula = strXTableFormula(17)
                    .Cells(18, 38).Formula = strXTableFormula(18)
                    .Cells(19, 38).Formula = strXTableFormula(19)
                    .Cells(22, 38).Formula = strXTableFormula(20)
                    'AN12 - AN24 (Excl. Line 14, 16, 20, and 23)
                    .Cells(12, 40).Formula = strXTableFormula(21)
                    .Cells(13, 40).Formula = strXTableFormula(22)
                    .Cells(15, 40).Formula = strXTableFormula(23)
                    .Cells(17, 40).Formula = strXTableFormula(24)
                    .Cells(18, 40).Formula = strXTableFormula(25)
                    .Cells(19, 40).Formula = strXTableFormula(26)
                    .Cells(22, 40).Formula = strXTableFormula(27)
                    'AP12 - AP24 (Excl. Line 14, 16, 20, and 23)
                    .Cells(12, 42).Formula = strXTableFormula(28)
                    .Cells(13, 42).Formula = strXTableFormula(29)
                    .Cells(15, 42).Formula = strXTableFormula(30)
                    .Cells(17, 42).Formula = strXTableFormula(31)
                    .Cells(18, 42).Formula = strXTableFormula(32)
                    .Cells(19, 42).Formula = strXTableFormula(33)
                    .Cells(22, 42).Formula = strXTableFormula(34)
                    
                     '[Line 1.8.1 col (g)] SBST link brendon 2008
                    .Cells(64, 46).Formula = strXTableFormula(35)
                    
                    
                    .Cells(183, 42).Formula = strXTableFormula(115)
                    .Cells(185, 42).Formula = strXTableFormula(116)
                    .Cells(187, 42).Formula = strXTableFormula(117)
                    .Cells(189, 42).Formula = strXTableFormula(118)
                    
                    
                    'Various formula on T2, lines (25)-(39)
                    With xlOriginalWorkbook.Sheets("Table 2")
                        .Unprotect (strT2PassWord)
                        lngXrefCounter = 46
                        For lngCounter = 1 To 4
                            strRange = Switch(lngCounter = 1, "T2_TotalNursery", _
                                              lngCounter = 2, "T2_TotalPrimary", _
                                              lngCounter = 3, "T2_TotalSecondary", _
                                              lngCounter = 4, "T2_TotalSpecial")
                            lngT2FormRow = .Range(strRange).Row
                            
                            .Cells(lngT2FormRow, 63).Formula = strXTableFormula(lngXrefCounter)
                            lngXrefCounter = lngXrefCounter + 1
                            .Cells(lngT2FormRow, 64).Formula = strXTableFormula(lngXrefCounter)
                            lngXrefCounter = lngXrefCounter + 1
                            .Cells(lngT2FormRow, 65).Formula = strXTableFormula(lngXrefCounter)
                            lngXrefCounter = lngXrefCounter + 1
                            .Cells(lngT2FormRow, 66).Formula = strXTableFormula(lngXrefCounter)
                            lngXrefCounter = lngXrefCounter + 1
                            .Cells(lngT2FormRow, 67).Formula = strXTableFormula(lngXrefCounter)
                            lngXrefCounter = lngXrefCounter + 1
                            .Cells(lngT2FormRow, 68).Formula = strXTableFormula(lngXrefCounter)
                            lngXrefCounter = lngXrefCounter + 1
                            .Cells(lngT2FormRow, 69).Formula = strXTableFormula(lngXrefCounter)
                            lngXrefCounter = lngXrefCounter + 1
                            .Cells(lngT2FormRow, 70).Formula = strXTableFormula(lngXrefCounter)
                            lngXrefCounter = lngXrefCounter + 1
                        Next
                        'Various T2 links to T1, lines (26)-(41)
                        lngT2FormRow = .Range("T2_TotalAllSchools").Row
                        .Cells(lngT2FormRow, 63).Formula = strXTableFormula(78)
                        .Cells(lngT2FormRow, 64).Formula = strXTableFormula(79)
                        .Cells(lngT2FormRow + 6, 59).Formula = strXTableFormula(80)
                        .Cells(lngT2FormRow + 13, 66).Formula = strXTableFormula(81)
                        .Cells(lngT2FormRow + 13, 67).Formula = strXTableFormula(82)
                        .Cells(lngT2FormRow + 13, 68).Formula = strXTableFormula(83)
                        .Cells(lngT2FormRow + 17, 69).Formula = strXTableFormula(84)
                        .Cells(lngT2FormRow + 21, 70).Formula = strXTableFormula(85)
                        'Line (39) Total ISB
                        .Protect (strT2PassWord)
                    End With
                    With xlOriginalWorkbook.Sheets("SBS Table")
                        .Unprotect (strSBSTPassWord)
                        .Cells(21, 25).Formula = strXTableFormula(87)
                        .Cells(23, 25).Formula = strXTableFormula(88)
                        .Cells(25, 25).Formula = strXTableFormula(89)
                        .Cells(27, 25).Formula = strXTableFormula(90)
                        .Cells(29, 25).Formula = strXTableFormula(91)
                        .Cells(31, 25).Formula = strXTableFormula(92)
                        .Cells(33, 25).Formula = strXTableFormula(93)
                        'Check cells H17, H19, H21 and H23. See if the T1
                        'link is there or if it's been overwritten. If it has
                        'been overwritten then we leave it alone, otherwise
                        're-insert the T1 formulae.
                        If strXTableFormula(94) <> "" Then
                            .Cells(23, 9).Formula = strXTableFormula(94)
                        End If
                        If strXTableFormula(95) <> "" Then
                            .Cells(25, 9).Formula = strXTableFormula(95)
                        End If
                        If strXTableFormula(96) <> "" Then
                            .Cells(27, 9).Formula = strXTableFormula(96)
                        End If
                        If strXTableFormula(97) <> "" Then
                            .Cells(29, 9).Formula = strXTableFormula(97)
                        End If
                        .Protect (strSBSTPassWord)
                    End With
'                    With xlOriginalWorkbook.Sheets("YS Annex")
'                        .Unprotect (strT1aYSPassWord)
'                        .Cells(20, 27).Formula = strXTableFormula(98)
'                        .Cells(21, 27).Formula = strXTableFormula(99)
'                        .Protect (strT1aYSPassWord)
'                    End With
                     'CEL calculator links to T1
                    With xlOriginalWorkbook.Sheets("CEL")
                        .Unprotect (strT1aCELPassWord)
                        'Error Checking Cells
                        .Cells(15, 21).Formula = strXTableFormula(100)
                        .Cells(21, 21).Formula = strXTableFormula(101)
                        .Cells(25, 21).Formula = strXTableFormula(102)
                        .Cells(21, 6).Formula = strXTableFormula(103)
                        .Cells(25, 6).Formula = strXTableFormula(104)
                        
                        


                        .Protect (strT1aCELPassWord)
                    End With
                    With xlOriginalWorkbook.Sheets("Early Years Table")
                        .Unprotect (strEYPassWord)
                        .Cells(12, 22).Formula = strXTableFormula(110)
                        .Cells(14, 22).Formula = strXTableFormula(111)
                        .Cells(33, 22).Formula = strXTableFormula(112)
                        .Protect (strEYPassWord)
                    End With
                    
                    '[Line 1.8.1 col (g)] SBST link
                    .Cells(64, 46).Formula = strXTableFormula(123)
                    '[Line 2.7.1 & 2.7.6 col (g)] YS Annex
                    .Cells(120, 46).Formula = strXTableFormula(124)
                    .Cells(125, 46).Formula = strXTableFormula(125)

                    '+-----------------------------------------------------------+
                    '| New code to re-insert the T1_Notes named range.           |
                    '+-----------------------------------------------------------+
                    For Each nName In Names
                        If nName.Name = "T1_Notes" Then
                            nName.Delete
                        End If
                    Next nName
                    ActiveWorkbook.Names.Add Name:="T1_Notes", RefersToR1C1:= _
                            "='Table 1'!R208C1:R240C13"
                    '+-----------------------------------------------------------+
                    .Protect (strT1PassWord)
'                Case "YS"
'                    .Unprotect (strT1aYSPassWord)
'                    .Cells(20, 27).Formula = strXTableFormula(1)
'                    .Cells(21, 27).Formula = strXTableFormula(2)
'                    .Protect (strT1aYSPassWord)
'                    With xlOriginalWorkbook.Sheets("Table 1")
'                        .Unprotect (strT1PassWord)
'                        .Cells(96, 46).Formula = strXTableFormula(3)
'                        .Cells(101, 46).Formula = strXTableFormula(4)
'                        .Protect (strT1PassWord)
'                    End With
            End Select
        End With
    End If

    '+-----------------------------------------------------------------+
    '| The checksheet will now need to be amended when importing SBST, |
    '| T1, T1aYS and T4, so unprotect it and re-insert the relevant    |
    '| formulae from array strCellFormula().                           |
    '+-----------------------------------------------------------------+
    'Unprotect the checksheet
    xlOriginalWorkbook.Sheets("Checksheet").Unprotect (strCheckSheetPassWord)
    lngCounter = 1
    xlOriginalWorkbook.Activate
    xlOriginalWorkbook.Sheets("Checksheet").Select
    Set xlSheet = xlOriginalWorkbook.Sheets("Checksheet")
    Select Case strTableID

'            lngRowCounter = 39
'            xlSheet.Cells(lngRowCounter, 14).Formula = strCellFormula(lngCounter)
'            lngCounter = lngCounter + 1
        Case "4"
            'T3 v T4
            For lngRowCounter = 11 To 70
                xlSheet.Cells(lngRowCounter, 14).Formula = strCellFormula(lngCounter)
                lngCounter = lngCounter + 1
            Next lngRowCounter
    End Select
    xlOriginalWorkbook.Sheets("Checksheet").Protect (strCheckSheetPassWord)
    xlOriginalWorkbook.Save
    ' Turn the system alerts back on
    Application.DisplayAlerts = True
    Exit Sub

ErrorHandler:
    MsgBox "Error " & Err.Number & " occurred in module ImportTable(" & strTableID & ")." & _
           vbCrLf & vbCrLf & _
           Err.Description, vbExclamation, strMsgTitle
    Application.ScreenUpdating = True
End Sub

Function BlankCellFormula(strCellRef As String)
    '+------------------------------------------------------------------+
    '| This function returns the formula needed to check for blanks and |
    '| numeric data in the Excel cell reference passed to it. It is     |
    '| used during the process to amend the cell references which have  |
    '| references to other tables in them, during the export process.   |
    '+------------------------------------------------------------------+
    BlankCellFormula = "=IF(AND(" & strCellRef & "=" & Chr(34) & Chr(34) & _
                       ",$H$1<>" & Chr(34) & "*" & Chr(34) & ")," & Chr(34) & _
                       Chr(34) & ",IF(AND(" & strCellRef & "=" & Chr(34) & _
                       Chr(34) & ",$H$1=" & Chr(34) & "*" & Chr(34) & ")," & _
                       Chr(34) & "Error 1.1" & Chr(34) & ",IF(ISNUMBER(" & _
                       strCellRef & ")=FALSE," & Chr(34) & "Error 1.2" & _
                       Chr(34) & "," & Chr(34) & Chr(34) & ")))"
End Function

Function ZeroCellFormula(strCellRef As String)
    '+-----------------------------------------------------------------+
    '| This function returns the formula needed to check for blanks,   |
    '| numeric data, less than zero and integer values in the Excel    |
    '| cell reference passed to it. It is used during the process to   |
    '| amend the cell references which have references to other tables |
    '| in them, during the export process.                             |
    '+-----------------------------------------------------------------+
    ZeroCellFormula = "=IF(AND(" & strCellRef & "=" & Chr(34) & Chr(34) & _
                      ",$H$1<>" & Chr(34) & "*" & Chr(34) & ")," & Chr(34) & _
                      Chr(34) & ",IF(AND(" & strCellRef & "=" & Chr(34) & _
                      Chr(34) & ",$H$1=" & Chr(34) & "*" & Chr(34) & ")," & _
                      Chr(34) & "Error 1.1" & Chr(34) & ",IF(ISNUMBER(" & _
                      strCellRef & ")=FALSE," & Chr(34) & "Error 1.2" & Chr(34) & _
                      ",IF(" & strCellRef & "<0," & Chr(34) & "Error 1.3" & _
                      Chr(34) & "," & Chr(34) & Chr(34) & "))))"
End Function

Function EqualZeroCellFormula(strCellRef As String)
    '+-----------------------------------------------------------------+
    '| This function returns the formula needed to check for blanks,   |
    '| numeric data, less than zero and integer values in the Excel    |
    '| cell reference passed to it. It is used during the process to   |
    '| amend the cell references which have references to other tables |
    '| in them, during the export process.                             |
    '+-----------------------------------------------------------------+
    EqualZeroCellFormula = "=IF(AND(" & strCellRef & "=" & Chr(34) & Chr(34) & _
                           ",$H$1<>" & Chr(34) & "*" & Chr(34) & ")," & Chr(34) & _
                           Chr(34) & ",IF(AND(" & strCellRef & "=" & Chr(34) & _
                           Chr(34) & ",$H$1=" & Chr(34) & "*" & Chr(34) & ")," & _
                           Chr(34) & "Error 1.1" & Chr(34) & ",IF(ISNUMBER(" & _
                           strCellRef & ")=FALSE," & Chr(34) & "Error 1.2" & Chr(34) & _
                           ",IF(" & strCellRef & "<=0," & Chr(34) & "Error 1.4" & _
                           Chr(34) & "," & Chr(34) & Chr(34) & "))))"
End Function

Function CheckProtection(strTableID As String)
    Dim strPassword As String
    Dim strSheetName As String
    Dim blnAcceptError As Boolean
    On Error GoTo ErrorTrap

    CheckProtection = False
    strPassword = Switch(strTableID = "SBST", strSBSTPassWord, _
                         strTableID = "1", strT1PassWord, _
                         strTableID = "CEL", strT1aCELPassWord, _
                         strTableID = "EY", strEYPassWord, _
                         strTableID = "YS", strT1aYSPassWord)
    strSheetName = Switch(strTableID = "SBST", "New SBS Table", _
                          strTableID = "1", "New Table 1", _
                          strTableID = "CEL", "New T1 Annex - CEL", _
                          strTableID = "YS", "New YS Annex")
    blnAcceptError = True
    ActiveWorkbook.Sheets(strSheetName).Unprotect ("TeSt")
    'Failed as the protection has been removed
    MsgBox "The worksheet you are trying to import has had the protection" & vbCrLf & _
           "removed, this indicates that it is not a standard DCSF template." & vbCrLf & vbCrLf & _
           "Please check the import file and try again", vbOKOnly, strMsgTitle
    Application.ScreenUpdating = True
    Exit Function

CorrectFailure:
    blnAcceptError = False
    'Check if the password has been changed
    ActiveWorkbook.Sheets(strSheetName).Unprotect (strPassword)
    'If it is successful then re-protect it.
    ActiveWorkbook.Sheets(strSheetName).Protect (strPassword)
    CheckProtection = True
    Exit Function

ErrorTrap:
    If Err.Number = 1004 Then
        If blnAcceptError Then
            Resume CorrectFailure
        Else
            MsgBox "The worksheet you are trying to import has had the protection" & vbCrLf & _
                   "changed, this indicates that it is not a standard DCSF template." & vbCrLf & vbCrLf & _
                   "Please check the import file and try again", vbOKOnly, strMsgTitle
        End If
    Else
        MsgBox "Error " & Err.Number & " occurred in module CheckProtection()." & _
               vbCrLf & vbCrLf & _
               Err.Description, vbExclamation, strMsgTitle
    End If
    Application.ScreenUpdating = True
End Function
Attribute VB_Name = "modVBreplace"
Option Explicit

'Function vbaReplace(Source As String, Find As String, ReplaceStr As String, _
'                    Optional ByVal Start As Long = 1, Optional Count As Long = -1, _
'                    Optional Compare As VbCompareMethod = vbBinaryCompare) As String
'    '+---------------------------------------------------------------------+
'    '| This is a clone of the VB6 'Replace' function to be used for all    |
'    '| replace exercises. The reason for this is because Excel 97 uses     |
'    '| VBA5, whilst Excel 2000/2002 & XP use VBA6. 'Replace' was not in    |
'    '| VBA5, so we have to have a work-around for LEAs using old software. |
'    '+---------------------------------------------------------------------+
'    Dim lngFindLen As Long
'    Dim lngReplaceLen As Long
'    Dim lngIndex As Long
'    Dim lngCounter As Long
'
'    lngFindLen = Len(Find)
'    lngReplaceLen = Len(ReplaceStr)
'
'    ' This prevents an endless loop
'    If lngFindLen = 0 Then Err.Raise 5
'
'    If Start < 1 Then Start = 1
'    lngIndex = Start
'
'    ' Start by assigning the source to the result
'    vbaReplace = Source
'
'    Do
'        lngIndex = InStr(lngIndex, vbaReplace, Find, Compare)
'        If lngIndex = 0 Then Exit Do
'        If lngFindLen = lngReplaceLen Then
'            ' If the find and vbaReplace strings have same length
'            ' we can use the faster Mid$ command
'            Mid$(vbaReplace, lngIndex, lngFindLen) = ReplaceStr
'        Else
'            ' Otherwise we must use concatenation
'            vbaReplace = Left$(vbaReplace, lngIndex - 1) & _
'                         ReplaceStr & Mid$(vbaReplace, _
'                         lngIndex + lngFindLen)
'        End If
'        ' Skip over the string just added
'        lngIndex = lngIndex + lngReplaceLen
'        lngCounter = lngCounter + 1
'        ' Note that the Loop Until test will always fail if Count = -1
'    Loop Until lngCounter = Count
'    If Start > 1 Then vbaReplace = Mid$(vbaReplace, Start)
'End Function

Public Sub WrkSheet2Protect()
    With ActiveWorkbook.Sheets("Table 2")
        If Val(Application.Version) < 10 Then
            .Protect Contents:=True, _
                     UserInterfaceOnly:=True, _
                     Password:=strT2PassWord
        Else
            .Protect DrawingObjects:=True, Contents:=True, _
                     Scenarios:=True, AllowFiltering:=True, _
                     Password:=strT2PassWord
        End If
    End With
End Sub


INQUEST-PP=macro
