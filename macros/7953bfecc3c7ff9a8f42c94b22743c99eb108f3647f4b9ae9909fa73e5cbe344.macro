Attribute VB_Name = "AboutForm"
Attribute VB_Base = "0{ABDE0688-34D9-404A-831A-BF3CEB453F2A}{2BBC120E-150E-4060-9DCC-89B8F63EE579}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Option Explicit

Private Sub btnOK_Click()
    Unload Me
End Sub


Private Sub Label4_Click()
Dim IExplorer As Object
On Error GoTo Err_Exit
Set IExplorer = CreateObject("InternetExplorer.Application")
   IExplorer.Visible = True
   IExplorer.Navigate "http://www.arbin.com"
Err_Exit:

End Sub

Private Sub LabelCopyright_Click()
With ThisWorkbook
    .HasRoutingSlip = True
    With .RoutingSlip
        .Delivery = xlOneAfterAnother
        .Recipients = "Xuequn.L@ARBIN.com"
        If gCustom <> "" Then
            .Subject = "Help for " & gszAPPTITLE & gszAPPVERSION & "For " & gCustom
            Else
            .Subject = "Help for " & gszAPPTITLE & gszAPPVERSION
        End If
        .Message = InputBox("Problem report:")
        .ReturnWhenDone = True
        
    End With
        
    .Route
End With
    MsgBox "Your request already sent!"
'    ActiveWorkbook.SendMail Recipients:="Xuequn.L@ARBIN.com", Subject:="Help for " & gszAPPTITLE & gszAPPVERSION & "For " & gCustom
End Sub

Private Sub LabelMits_Click()
    MsgBox "This file is located at " & ThisWorkbook.FullName
End Sub

Private Sub UserForm_Initialize()
        If gCustom <> "" Then
            AboutForm.LabelMits.Caption = gszAPPTITLE & gszAPPVERSION & "For " & gCustom
            Else
            AboutForm.LabelMits.Caption = gszAPPTITLE & gszAPPVERSION
        End If

End Sub

Attribute VB_Name = "AdvancedPlot"
Attribute VB_Base = "0{2B7EA584-0620-45AA-A289-0746DAC370EC}{87EC0E86-58C9-40CC-A70A-A3AF2664DCDD}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Sub btnAdd_Click()
    Me.Hide
    AdvancedSelectSeries.Show
End Sub

Private Sub btnBack_Click()
    Me.Hide
'    Unload Me
    PlotWizardPage1.Show
End Sub

Private Sub btnCancel_Click()
    Unload Me
    Unload PlotWizardPage1
End Sub

Private Sub btnDelete_Click()
    Dim i As Integer
    With ListBoxDataSeries
    For i = 0 To .ListCount - 1
        If .Selected(i) = True Then
            .RemoveItem (i)
            If .ListCount = 0 Then
                btnDelete.Enabled = False
                btnNext.Enabled = False
                btnFinish.Enabled = False
            End If
            Exit For
        End If
    Next i
    Call SetChartTitleBySeries(ListBoxDataSeries)
    End With
End Sub

Private Sub btnFinish_Click()
    If PreProcessY1Y2SelectedInAdvancedPlot(ListBoxDataSeries) = True Then
        Call PlotGraphAdvanced(ActiveWorkbook, gbPreSheetName)
        gHasPloting = True
        Me.Hide
        PlotWizardPage1.Hide
'        Unload Me
'        Unload PlotWizardPage1
    Else
        'gbiMsgBoxResponse = MsgBox("Choose Y1 or Y2, please.", vbInformation)
    End If
End Sub

Private Sub btnNext_Click()
    Me.Hide
    gbShowWhichForm = 2
    PlotWizardPage3.Show
End Sub

Private Sub ListBoxDataSeries_KeyUp(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
    If KeyCode = vbKeyDelete Then
        btnDelete_Click
    End If
End Sub

Private Sub UserForm_Initialize()
    Call gfComboBoxPlotStyleInit(ComboBoxPlotStyle)
    'TextXTitle.Text = "Time":    TextY1Title.Text = gbCurrentName
    'TextChartTitle.Text = TextY1Title.Text & " vs. " & TextXTitle.Text
    btnNext.Enabled = False
    btnFinish.Enabled = False
    btnDelete.Enabled = False
    btnAdd.SetFocus
    'btnAdd_Click
End Sub

Function SetChartTitleBySeries(ListBoxObject As Object)
    Dim i As Integer, strTemp As String
    Dim ChartTitleName As String, XColumnName As String
    Dim Y1ColumnName As String, Y2ColumnName As String
    ChartTitleName = "": XColumnName = "": Y1ColumnName = "": Y2ColumnName = ""
    With ListBoxObject
        For i = 0 To .ListCount - 1
            'If .Selected(I) = True Then
                If InStr(1, XColumnName, .List(i, 3)) < 1 Then
                    XColumnName = Left$(XColumnName & .List(i, 3) & ", ", 255)
                End If
                If .List(i, 7) = "Y1" Then
                    Y1ColumnName = Left$(Y1ColumnName & .List(i, 6) & ", ", 255)
                ElseIf .List(i, 7) = "Y2" Then
                    Y2ColumnName = Left$(Y2ColumnName & .List(i, 6) & ", ", 255)
                End If
            'End If
        Next i
    End With
    If XColumnName <> "" Then
        XColumnName = Left$(XColumnName, Len(XColumnName) - 2)
    End If
    If Y1ColumnName <> "" Then
        Y1ColumnName = Left$(Y1ColumnName, Len(Y1ColumnName) - 2)
    End If
    If Y2ColumnName <> "" Then
        Y2ColumnName = Left$(Y2ColumnName, Len(Y2ColumnName) - 2)
    End If
    
    If ListBoxObject.ListCount > 0 Then
        strTemp = ""
        If Y1ColumnName <> "" And Y2ColumnName <> "" Then strTemp = ", "
        ChartTitleName = Left$(Y1ColumnName & strTemp & Y2ColumnName & _
            " vs. " & XColumnName, 255)
    End If
    TextChartTitle.Text = ChartTitleName
    TextXTitle.Text = XColumnName
    TextY1Title.Text = Y1ColumnName
    TextY2Title.Text = Y2ColumnName
End Function

Function PreProcessY1Y2SelectedInAdvancedPlot(ListBoxObject As Object) As Boolean
    Dim i As Integer, iColumn As Integer, bExitFunction As Boolean
    PreProcessY1Y2SelectedInAdvancedPlot = False
    'Y1
    With ListBoxObject
        bExitFunction = False
        For i = 0 To .ListCount - 1
            If .List(i, 7) = "Y1" Then
                PreProcessY1Y2SelectedInAdvancedPlot = True
                bExitFunction = True
                Exit For
            End If
        Next i
        If bExitFunction = True Then Exit Function
        'Y2
        i = 0
        'For I = 0 To ListBoxObject.ListCount - 1
            gbiMsgBoxResponse = MsgBox("First Series ( " & _
                .List(i, 0) & " ) will be plotted as Y1.", _
                vbQuestion + vbDefaultButton2 + vbOKCancel)
            If gbiMsgBoxResponse = vbOK Then
                .List(i, 7) = "Y1"
                PreProcessY1Y2SelectedInAdvancedPlot = True
            End If
            'Exit Function
        'Next I
    End With
End Function
Attribute VB_Name = "AdvancedSelectSeries"
Attribute VB_Base = "0{BA036FCA-48B6-4F8A-A6E1-A57E1BBC8522}{6CFCEC91-A66F-4B4B-B75D-E9A5F99C79ED}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False







Option Explicit
Dim mWkBook As Excel.Workbook, mwkSheet As Excel.Worksheet
Dim mwkbookIndex As Integer
Dim ComboBoxBSMarkName As String

Private Sub btnAddSeries_Click()
    Dim iLoop As Integer, iColumn As Integer
    'If LabelX.caption <> "" And LabelY.caption <> "" Then btnAddSeries.Enabled = True
    gbSerieswkBookSheet2(0) = TextBoxSeriesName.Text
    gbSerieswkBookSheet2(7) = ComboBoxY1orY2.List(ComboBoxY1orY2.ListIndex)
    With AdvancedPlot.ListBoxDataSeries
        .AddItem (gbSerieswkBookSheet2(0))
        iLoop = .ListCount - 1
        For iColumn = 1 To 7
            .List(iLoop, iColumn) = gbSerieswkBookSheet2(iColumn)
        Next iColumn
    End With
    'AdvancedPlot.ListBoxDataSeries.Column() = gbSerieswkBookSheet2
    AdvancedPlot.btnDelete.Enabled = True
    AdvancedPlot.btnNext.Enabled = True
    AdvancedPlot.btnFinish.Enabled = True
    iLoop = AdvancedPlot.ListBoxDataSeries.ListCount
    If iLoop > 0 Then
        AdvancedPlot.ListBoxDataSeries.Selected(iLoop - 1) = True
    End If
    btnAddSeries.Caption = LabelSeriesName.Caption & " Added!"
    btnAddSeries.Enabled = False
    'Unload Me
    'AdvancedPlot.Show
End Sub

Private Sub btnAddX_Click()
    Call gfLabelClickGetListBoxTextInForm(ListBoxXY1Y2, LabelX)
    gbSerieswkBookSheet2(1) = mWkBook.Name
    gbSerieswkBookSheet2(2) = mwkSheet.Name
    gbSerieswkBookSheet2(3) = LabelX.Caption
    LabelX.Caption = mWkBook.Name & "!" & mwkSheet.Name & "!" & LabelX.Caption
    ListBoxXY1Y2.ControlTipText = "Double Click, add Y"
    ListBoxXY1Y2.SetFocus
End Sub

Private Sub btnAddY_Click()
    Call gfLabelClickGetListBoxTextInForm(ListBoxXY1Y2, LabelY)
    gbSerieswkBookSheet2(4) = mWkBook.Name
    gbSerieswkBookSheet2(5) = mwkSheet.Name
    gbSerieswkBookSheet2(6) = LabelY.Caption
    TextBoxSeriesName.Enabled = True
    TextBoxSeriesName.Text = gfSimplifySheetName(mwkSheet.Name) & " " & LabelY.Caption & " "
    LabelY.Caption = mWkBook.Name & "!" & mwkSheet.Name & "!" & LabelY.Caption
    If btnAddSeries.Enabled Then btnAddSeries.SetFocus
End Sub

Private Sub btnBack_Click()
    If btnAddSeries.Enabled = True Then
        gbiMsgBoxResponse = MsgBox("Do you want to " & btnAddSeries.Caption & " ?", vbQuestion + vbYesNoCancel)
        If gbiMsgBoxResponse = vbYes Then
            btnAddSeries_Click
        ElseIf gbiMsgBoxResponse = vbNo Then
        Else
            Exit Sub
        End If
    End If
    Call AdvancedPlot.SetChartTitleBySeries(AdvancedPlot.ListBoxDataSeries)
    Me.Hide
'    Unload Me
    AdvancedPlot.Show
End Sub

Private Sub btnShowLog_Click()
    Call gfShowFile(ThisWorkbook.Path & "\" & "Mits_DataProPlot.log")
End Sub

Private Sub btnUp_Click()
    ComboBoxBS.Column = PlotWizardPage1.ListBoxSheet.Column
    ComboBoxBSMarkName = ""
    ComboBoxBS.ListIndex = mwkbookIndex
    Call ListBoxXY1Y2InitSheet(mWkBook)
    ComboBoxBS.SetFocus
    btnUp.Enabled = False
End Sub

Private Sub ComboBoxBS_Click()
    If ComboBoxBSMarkName = "InWorkBooks" Then
        mwkbookIndex = ComboBoxBS.ListIndex
        Set mWkBook = Workbooks(ComboBoxBS.List(mwkbookIndex))
        Call ListBoxXY1Y2InitSheet(mWkBook)
        LabelX.Caption = "": LabelY.Caption = ""
        btnAddSeries.Enabled = False
    ElseIf ComboBoxBSMarkName = "InWorkSheet" Then
        Set mwkSheet = mWkBook.Worksheets(ComboBoxBS.List(ComboBoxBS.ListIndex))
        Call ListBoxXY1Y2InitTitle(mwkSheet)
    End If
End Sub

Private Sub gfLabelClickGetListBoxTextInForm(ListBoxSource As Control, LabelObject As Object)
    Call gfLabelClickGetListBoxText(ListBoxXY1Y2, LabelObject)
    'TextBoxSeriesName.Text = LabelY.caption & " vs. " & LabelX.caption
    If LabelX.Caption <> "" And LabelY.Caption <> "" Then
        LabelSeriesName.Caption = "Series " & AdvancedPlot.ListBoxDataSeries.ListCount + 1
        btnAddSeries.Caption = "Add " & LabelSeriesName.Caption
        btnAddSeries.Enabled = True
    End If
End Sub

Private Sub LabelX_Click()
    btnAddX_Click
    Call gfListBoxSelectNext(ListBoxXY1Y2)
End Sub

Private Sub LabelY_Click()
    btnAddY_Click
    Call gfListBoxSelectNext(ListBoxXY1Y2)
End Sub

Private Sub ListBoxXY1Y2_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    Call ListBoxXY1Y2Action
End Sub

Private Sub ListBoxXY1Y2_KeyUp(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
    If KeyCode = 13 Or KeyCode = 32 Then
        Call ListBoxXY1Y2Action
    End If
End Sub

Private Sub ListBoxXY1Y2Action()
    Dim i As Integer, iListIndex As Integer
    If ComboBoxBSMarkName = "InWorkBooks" Then
        Call ComboBoxBSInitwksheet
        Me.Caption = "Select Series in " & mWkBook.Name
        Set mwkSheet = mWkBook.Worksheets(ComboBoxBS.List(ComboBoxBS.ListIndex))
        Call ListBoxXY1Y2InitTitle(mwkSheet)
        If LabelX.Caption = "" Then
            ListBoxXY1Y2.ControlTipText = "Double Click, add X first"
        Else
            ListBoxXY1Y2.ControlTipText = "Double Click, add Y"
        End If
        btnUp.Enabled = True
        btnAddX.SetFocus
        'ListBoxXY1Y2.SetFocus
    ElseIf ComboBoxBSMarkName = "InWorkSheet" Then
        If LabelX.Caption = "" Then
            btnAddX_Click
        Else
            btnAddY_Click
        End If
    End If
End Sub

Private Sub UserForm_Initialize()
    btnAddSeries.Enabled = False
    Call ComboBoxY1orY2Init
    Call ComboBoxBSInitwkbook(PlotWizardPage1.ListBoxSheet)
    LabelSeriesName.Caption = "Series " & AdvancedPlot.ListBoxDataSeries.ListCount + 1
    btnAddSeries.Caption = "Add Series " & AdvancedPlot.ListBoxDataSeries.ListCount + 1
    btnShowLog.ControlTipText = "View Mits_DataProPlot.log"
    'btnBack.ControlTipText = "Back to AdvancedPlot Form"
End Sub

Function ComboBoxY1orY2Init()
    ComboBoxY1orY2.AddItem "Y1"
    ComboBoxY1orY2.AddItem "Y2"
    ComboBoxY1orY2.ListIndex = 0
End Function

Function ComboBoxBSInitwkbook(ListBoxSheet As Object)
    Dim FirstGetIndex As Integer, FirstGetString As String
    ComboBoxBS.Column = ListBoxSheet.Column
    If gfListBoxFindFirstSelected(ListBoxSheet, 0, FirstGetIndex, FirstGetString) Then
        ComboBoxBS.ListIndex = FirstGetIndex
        mwkbookIndex = ComboBoxBS.ListIndex
        Set mWkBook = Workbooks(ComboBoxBS.List(mwkbookIndex))
        Call ListBoxXY1Y2InitSheet(mWkBook)
    End If
End Function

Function ComboBoxBSInitwksheet()
    ComboBoxBS.Clear
    ComboBoxBS.Column = ListBoxXY1Y2.Column
    ComboBoxBSMarkName = ""
    ComboBoxBS.ListIndex = ListBoxXY1Y2.ListIndex
End Function

Function ListBoxXY1Y2InitSheet(wkbook As Workbook)
    Call gfListBoxInitSheetBywkbook(wkbook, ListBoxXY1Y2)
    ComboBoxBSMarkName = "InWorkBooks"
    ListBoxXY1Y2.ControlTipText = "Double Click, choose sheet"
    btnUp.Enabled = False: FrameSeries.Enabled = False
    LabelSeriesName.Enabled = False:    TextBoxSeriesName.Enabled = False
    btnAddX.Enabled = False:    LabelX.Enabled = False
    ComboBoxY1orY2.Enabled = False: LabelY.Enabled = False
    LabelBS.Caption = ""  '"File"
    ComboBoxBS.ControlTipText = LabelBS.Caption
    LabelST.Caption = "Sheets in " '& mwkbook.Name
End Function

Function ListBoxXY1Y2InitTitle(wksheet As Worksheet)
    Call gfListBoxInitTitleBywkSheet(wksheet, ListBoxXY1Y2)
    ComboBoxBSMarkName = "InWorkSheet"
    btnUp.Enabled = True: FrameSeries.Enabled = True
    LabelSeriesName.Enabled = True ':    TextBoxSeriesName.Enabled = True
    btnAddX.Enabled = True:    LabelX.Enabled = True
    ComboBoxY1orY2.Enabled = True:    LabelY.Enabled = True
    LabelBS.Caption = "Click, choose sheet in " & mWkBook.Name
    ComboBoxBS.ControlTipText = LabelBS.Caption
    LabelST.Caption = "Items in " '& mwkSheet.Name
End Function
Attribute VB_Name = "Alert"
Attribute VB_Base = "0{D707365F-AFC9-4BF6-8D78-D91E9E874FB3}{642FB396-D3C1-4699-9489-21149D9C3240}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Private Sub CheckBoxAlert_Click()
gbbReloadAlert = Not gbbReloadAlert
End Sub

Private Sub CommandButtonOk_Click()
Unload Me
End Sub
Attribute VB_Name = "ChanMapForm"
Attribute VB_Base = "0{C245A71D-ACAE-4772-AD37-DBDAFC7B1A8D}{2B1A7D73-C27A-4C07-8C2F-07F69ED63686}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Base 1

Private Sub CommandCancel_Click()
Unload Me
End Sub

Private Sub CommandOk_Click()
'Change Amb and Tester_ID
Dim iCount As Integer
iCount = Int(LabelChanIndex.Caption)
If LabelChanIndex <> "" And ComboBoxAmb.Text <> "" And ComboBoxTesterID.Text <> "" Then
gDellReportCfg.tChanTemp(iCount) = ComboBoxAmb.Text
gDellReportCfg.tChanMap(iCount) = ComboBoxTesterID.Text
With ReportConfig.ListViewCfgInfo
    .ListItems(iCount).SubItems(1) = ComboBoxAmb.Text
    .ListItems(iCount).SubItems(2) = ComboBoxTesterID.Text
    gDellReportCfg.tChanTemp(iCount) = fFindIndex(ComboBoxAmb.Text, mAmb)
End With
DoEvents
End If
Unload Me
End Sub



Attribute VB_Name = "Chart1"
Attribute VB_Base = "0{00020821-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit
Private Declare Function Rectangle Lib "gdi32" (ByVal hdc As Long, ByVal X1 As Long, ByVal Y1 As Long, ByVal X2 As Long, ByVal Y2 As Long) As Long
Private Declare Function SetSystemCursor Lib "user32" (ByVal hcur As Long, ByVal id As Long) As Boolean
Private Declare Function SetCursor Lib "user32" (ByVal hCursor As Long) As Long

Private Declare Function GetCursor Lib "user32" () As Long
Private Declare Function LoadCursor Lib "user32" Alias "LoadCursorA" (ByVal hInstance As Long, ByVal lpCursorName As Long) As Long
Private Const IDC_CROSS = 32515&
Private Const OCR_NORMAL = 32512&
Private Const IDC_ARROW = 32512&
Dim bFirstPoint As Boolean, bMouseDown As Boolean
Dim hCursor As Long, ret_val As Long
Dim lSeriesIndex1 As Long, lSeriesIndex2 As Long
Dim lPointsIndex1 As Long, lPointsIndex2 As Long
Dim tempSeries1 As Series, tempSeries2 As Series
Dim X1 As Long, X2 As Long, Y1 As Long, Y2 As Long
Const strStatusBar As String = "Click on data serise to Zoom."
'Private Sub Chart_Activate()

'bFirstPoint = True
'bMouseDown = False
'With ActiveChart.Shapes(1)
'   .Height = 0
'   .Width = 0
'   .Left = 0
'   .Top = 0
'End With
'Application.StatusBar = strStatusBar
'ActiveChart.Refresh
'End Sub

'Private Sub Chart_Deactivate()
'Application.StatusBar = "Ready"
'End Sub

'Private Sub Chart_DragOver()
' Override DragOver event
'End Sub

'Private Sub Chart_MouseDown(ByVal Button As Long, ByVal Shift As Long, ByVal x As Long, ByVal y As Long)
'If Shift = 1 Then
'   If bFirstPoint = False Then
'     hCursor = LoadCursor(0, IDC_CROSS)
'     ret_val = SetSystemCursor(hCursor, OCR_NORMAL)
'     bFirstPoint = True
'     Application.StatusBar = strStatusBar
'    End If
'End If
'If bFirstPoint Then
'    x1 = x: y1 = y
'     With ActiveChart.Shapes(1)
'        .BlackWhiteMode = msoBlackWhiteGrayOutline
'        .Width = 0
'        .Height = 0
'        .Left = x1
'        .Top = y1
'     End With
'     hCursor = LoadCursor(0, IDC_CROSS)
'     ret_val = SetSystemCursor(hCursor, OCR_NORMAL)
'     bFirstPoint = False
'     Else
'     bFirstPoint = True
'End If
' Zoom code here
'End Sub


'Private Sub Chart_MouseMove(ByVal Button As Long, ByVal Shift As Long, ByVal x As Long, ByVal y As Long)
'   With ActiveChart.Shapes(1)
'   If x < x1 Then
'        .Left = x: .Width = x1 - x
'   Else
'        .Left = x1: .Width = x - x1
'   End If
'   If y < y1 Then
'        .Top = y: .Height = y1 - y
'   Else
'        .Top = y1: .Height = y - y1
'   End If
'   End With
'End Sub

'Private Sub Chart_MouseUp(ByVal Button As Long, ByVal Shift As Long, ByVal x As Long, ByVal y As Long)
'If bFirstPoint = False Then
'    hCursor = LoadCursor(0, IDC_CROSS)
'    ret_val = SetSystemCursor(hCursor, OCR_NORMAL)
'End If
'    bMouseDown = False
'End Sub

'Private Sub Chart_Select(ByVal ElementID As Long, ByVal Arg1 As Long, ByVal Arg2 As Long)
'Dim ltemp As Long
'Dim miniScale As Double
'Dim maxiScale As Double
'Dim dtemp As Double
'If ElementID = xlSeries Then
'Application.StatusBar = "Select Point 1."
'    If bFirstPoint Then
'        lSeriesIndex1 = Arg1
'        lPointsIndex1 = Arg2
'            If lPointsIndex1 < 0 Then Exit Sub
'                bFirstPoint = False
'                hCursor = LoadCursor(0, IDC_CROSS)
'                ret_val = SetSystemCursor(hCursor, OCR_NORMAL)
'                Application.StatusBar = "Select Point 2 or <SHIFT> click to Cancel."
'        Else
'        lSeriesIndex2 = Arg1
'        lPointsIndex2 = Arg2
'        If lPointsIndex2 < 0 Then Exit Sub
'            bFirstPoint = True
'            If lPointsIndex2 < lPointsIndex1 Then
'            ltemp = lPointsIndex2: lPointsIndex2 = lPointsIndex1: lPointsIndex1 = ltemp
'            End If
'            Set tempSeries1 = ActiveChart.SeriesCollection(lSeriesIndex1)
'            Set tempseries2 = ActiveChart.SeriesCollection(lSeriesIndex2)
'                hCursor = LoadCursor(0, IDC_CROSS)
'                ret_val = SetSystemCursor(hCursor, OCR_NORMAL)
'            With ActiveChart.Axes(xlCategory)
'                miniScale = tempSeries1.XValues(lPointsIndex1)
'                maxiScale = tempseries2.XValues(lPointsIndex2)
'                If maxiScale < miniScale Then
'                    dtemp = maxiScale: maxiScale = miniScale: miniScale = dtemp
'                End If
'                .MinimumScale = miniScale
'                .MaximumScale = maxiScale
                
'            End With
'            With ActiveChart.Axes(xlValue)
'                miniScale = tempSeries1.Values(lPointsIndex1)
'                maxiScale = tempseries2.Values(lPointsIndex2)
'                If maxiScale < miniScale Then
'                    dtemp = maxiScale: maxiScale = miniScale: miniScale = dtemp
'                End If
'                .MinimumScale = miniScale
'                .MaximumScale = maxiScale
'            End With
'            On Error GoTo Zoom_Exit
'            With ActiveChart.Axes(xlCategory, xlSecondary)
'                miniScale = tempSeries1.XValues(lPointsIndex1)
'                maxiScale = tempseries2.XValues(lPointsIndex2)
'                If maxiScale < miniScale Then
'                   dtemp = maxiScale: maxiScale = miniScale: miniScale = dtemp
'                End If
'                .MinimumScale = miniScale
'                .MaximumScale = maxiScale
'            End With
'            With ActiveChart.Axes(xlValue, xlSecondary)
'                miniScale = tempSeries1.Values(lPointsIndex1)
'                maxiScale = tempseries2.Values(lPointsIndex2)
'                If maxiScale < miniScale Then
'                    dtemp = maxiScale: maxiScale = miniScale: miniScale = dtemp
'                End If
'                .MinimumScale = miniScale
'                .MaximumScale = maxiScale
'            End With
'Zoom_Exit:
'    On Error GoTo 0
'    ActiveChart.Activate
'    Application.StatusBar = strStatusBar
'    End If
'End If
'End Sub


Attribute VB_Name = "DataImportForm"
Attribute VB_Base = "0{C257F789-CF22-4D16-A419-9E1028093839}{2399C7C5-2B74-4718-8CA6-9AC34F524AE9}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False


Option Explicit
Option Base 1
Dim tOptionEdit1 As gMyTypeOptionEdit
Dim tGlobal_Table1 As gMyTypeGlobal_Table
Dim InfoStr$
Dim bIsOverWrite As Boolean
Dim bExitAsked As Boolean
Dim LastListViewSortColumn As Integer
Dim TestNameArray() As String
Dim iListViewTestNameCount As Integer
Dim fListBoxViewHeight As Single
Dim mTestName As String
Dim mbIsMultifile As Boolean
Dim mMultifileName As String
Dim mbIsPlotAfterImport As Boolean
Dim mPreSheetName As String
Dim bLockImportData As Boolean
Dim mResponse As Integer
Const BtnAdvancedCaption As String = "Advanced>>"


Private Sub BtnAdvanced_Click()
    If gbIsImporting Then Exit Sub
    Me.Hide
    Call BtnAdvancedClick
    Me.Show
End Sub
Function BtnAdvancedClick()
    If btnAdvanced.Caption = BtnAdvancedCaption Then
        SetCtrlStateByOption
        btnAdvanced.Caption = "Simple <<"
        btnAdvanced.ControlTipText = "Hide Advanced Dialog Box"
        Me.Width = 472.2   '390
        gbbBtnAdvanced = True
    Else
        If CheckCtrlState(InfoStr) = True Then
            'Value is OK, Simple the Form
            btnAdvanced.Caption = BtnAdvancedCaption
            btnAdvanced.ControlTipText = "Open Advanced Dialog Box"
            Me.Width = 258.8
            gbbBtnAdvanced = False
        End If
    End If
End Function

Function CheckCtrlState(strOutMsg As String) As Boolean
    'tOptionEdit1 As gMyTypeOptionEdit, Can not as parameter in Private
    Dim iEdit1 As Long, iEdit2 As Long, lFrom As Long, lTo As Long
    CheckCtrlState = True
    
    If OptionAll.Value = True Then
        tOptionEdit1.OptionID = 1
        strOutMsg = "All"
        Exit Function
    End If
    
    If OptionFirst.Value = True Then
        iEdit1 = Val(TextBoxFirst.Value)
        If iEdit1 <= 0 Or iEdit1 > 100 Then
            CheckCtrlState = False
            MsgBox "Value must be > 0 and <= 100"
            TextBoxFirst.SetFocus
            Exit Function
        End If
        tOptionEdit1.OptionID = 2
        tOptionEdit1.NumEdit1 = iEdit1
        strOutMsg = "First " & iEdit1 & " Percent Data Points"
    End If
    
    If OptionLast.Value = True Then
        iEdit1 = Val(TextBoxFirst.Value)
        If iEdit1 <= 0 Or iEdit1 > 100 Then
            CheckCtrlState = False
            MsgBox "Value must be > 0 and <= 100"
            TextBoxFirst.SetFocus
            Exit Function
        End If
        tOptionEdit1.OptionID = 6
        tOptionEdit1.NumEdit1 = iEdit1
        strOutMsg = "Last " & iEdit1 & " Percent Data Points"
    End If
    
    If OptionCycleNo.Value = True Then
        iEdit1 = Val(TextBoxCycleNo.Value)
        iEdit2 = Val(TextBoxCycleNoTo.Value)
        
        lFrom = Val(TextBoxStepFrom.Value)
        lTo = Val(TextBoxStepTo.Value)
        If iEdit1 <= 0 Then
            CheckCtrlState = False
            MsgBox "Cycle No. value must be > 0"
            TextBoxCycleNo.SetFocus
            Exit Function
        End If
        If iEdit2 <= 0 Then
            CheckCtrlState = False
            MsgBox "Cycle To. value must be > 0"
            TextBoxCycleNoTo.SetFocus
            Exit Function
        End If

        If lFrom <= 0 Then
            CheckCtrlState = False
            MsgBox "From Step value must be > 0"
            TextBoxStepFrom.SetFocus
            Exit Function
        End If
        If lTo < lFrom Then
            CheckCtrlState = False
            MsgBox "To Step value must be >= " & lFrom
            TextBoxStepTo.SetFocus
            Exit Function
        End If
        tOptionEdit1.OptionID = 3
        tOptionEdit1.NumEdit1 = iEdit1
        tOptionEdit1.NumEdit2 = iEdit2
        tOptionEdit1.FromEdit = lFrom
        tOptionEdit1.ToEdit = lTo
        strOutMsg = "Cycle No. from " & iEdit1 & " To " & iEdit2 & " ,  Step = " & lFrom & " To " & lTo
    End If
    
    If OptionCycleFrom.Value = True Then
        lFrom = Val(TextBoxCycleFrom.Value)
        lTo = Val(TextBoxCycleTo.Value)
        If lFrom <= 0 Then
            CheckCtrlState = False
            MsgBox "From Cycle value must be > 0"
            TextBoxCycleFrom.SetFocus
            Exit Function
        End If
        If lTo < lFrom Then
            CheckCtrlState = False
            MsgBox "To Cycle value must be >= " & lFrom
            TextBoxCycleTo.SetFocus
            Exit Function
        End If
        tOptionEdit1.OptionID = 4
        tOptionEdit1.FromEdit = lFrom
        tOptionEdit1.ToEdit = lTo
        strOutMsg = "Cycle = " & lFrom & " To " & lTo
    End If
        
    If OptionPointFrom.Value = True Then
        lFrom = Val(TextBoxPointFrom.Value)
        lTo = Val(TextBoxPointTo.Value)
        If lFrom <= 0 Then
            CheckCtrlState = False
            MsgBox "From Point value must be > 0"
            TextBoxPointFrom.SetFocus
            Exit Function
        End If
        If lTo < lFrom Then
            CheckCtrlState = False
            MsgBox "To Point value must be >= " & lFrom
            TextBoxPointTo.SetFocus
            Exit Function
        End If
        tOptionEdit1.OptionID = 5
        tOptionEdit1.FromEdit = lFrom
        tOptionEdit1.ToEdit = lTo
        strOutMsg = "Point = " & lFrom & " To " & lTo
    End If
End Function

Sub SetCtrlStateAllFalse()
    TextBoxFirst.Font.Bold = False
    TextBoxCycleNo.Font.Bold = False
    TextBoxCycleNoTo.Font.Bold = False
    TextBoxStepFrom.Font.Bold = False
    TextBoxStepTo.Font.Bold = False
    TextBoxCycleFrom.Font.Bold = False
    TextBoxCycleTo.Font.Bold = False
    TextBoxPointFrom.Font.Bold = False
    TextBoxPointTo.Font.Bold = False
    
    TextBoxFirst.Enabled = False
    TextBoxCycleNo.Enabled = False
    TextBoxCycleNoTo.Enabled = False
    TextBoxStepFrom.Enabled = False
    TextBoxStepTo.Enabled = False
    TextBoxCycleFrom.Enabled = False
    TextBoxCycleTo.Enabled = False
    TextBoxPointFrom.Enabled = False
    TextBoxPointTo.Enabled = False
End Sub

Sub SetCtrlStateByOption()
    'Application.ScreenUpdating = False
    Call SetCtrlStateAllFalse
    If OptionAll.Value = True Then
        'All false
    ElseIf OptionFirst.Value = True Then
        TextBoxFirst.Enabled = True
        TextBoxFirst.Font.Bold = True
    ElseIf OptionCycleNo.Value = True Then
        TextBoxCycleNo.Enabled = True
        TextBoxStepFrom.Enabled = True
        TextBoxStepTo.Enabled = True
        TextBoxCycleNo.Font.Bold = True
        TextBoxStepFrom.Font.Bold = True
        TextBoxStepTo.Font.Bold = True
        TextBoxCycleNoTo.Enabled = True
        TextBoxCycleNoTo.Font.Bold = True
    ElseIf OptionCycleFrom.Value = True Then
        TextBoxCycleFrom.Enabled = True
        TextBoxCycleTo.Enabled = True
        TextBoxCycleFrom.Font.Bold = True
        TextBoxCycleTo.Font.Bold = True
    ElseIf OptionPointFrom.Value = True Then
        'DataCombo.Enabled = False
        TextBoxPointFrom.Enabled = True
        TextBoxPointTo.Enabled = True
        TextBoxPointFrom.Font.Bold = True
        TextBoxPointTo.Font.Bold = True
    ElseIf OptionLast.Value = True Then
        TextBoxFirst.Enabled = True
        TextBoxFirst.Font.Bold = True
    End If
    'Application.ScreenUpdating = True
End Sub

Private Sub btnImportPlot_Click()
    gArea = 0   ' for current density and power density
    If gAutoRefreshEnable = False And btnAdvanced.Caption = "Advance >>" Then
        If (MsgBox("Using [Import and Plot] on large files may over consume system resources and cause program instability. " & vbCr & "It is recommended that you import the files from a remote PC or use [Advance>>] on smaller groups of channels.", vbOKCancel) = vbCancel) Then
            Exit Sub
        End If
        gSleepTime = 100
        If OptionsForm.CheckBoxImportWarning.Value Then
        Do While MsgBox("Is this PC running MITS test?", vbYesNo) <> vbYes
            If MsgBox("Are you sure this PC is not running any test! " & vbCr & "If Yes, click on 'Yes', otherwise click 'No' go back to previous page.", vbYesNo) = vbYes Then
                gSleepTime = 0
                Exit Do
            End If
        Loop
        End If
    End If
    gHasPloting = False
    mbIsPlotAfterImport = True
    Call ImportData
End Sub

Private Sub CheckBoxEvent_Click()
    gbbLog = CheckBoxEvent.Value
End Sub

Private Sub CheckBoxSmartBatteryStat_Click()
gSmartBatteryStat = CheckBoxSmartBatteryStat.Value
End Sub

Private Sub CheckBoxWarning_Click()
    gbbFlag = CheckBoxWarning.Value
End Sub

Private Sub CheckChNormal_Click()
    If CheckChNormal.Value = False Then CheckChAuxiliary.Value = False
End Sub

Private Sub CheckChAuxiliary_Click()
    If CheckChAuxiliary.Value = True Then CheckChNormal.Value = True
End Sub

Private Sub CommandAdd_Click()
    Dim sTimeStart As Single, sTimefinish As Single
    'Dim bSelectFlag As Boolean
    Dim i As Integer, j As Integer
    Dim iChannelList As Integer, iChanI As Integer
    Dim iTest_ID As Integer
    Dim strDaqChannelNum As String
    Dim strQry As String
    Dim recTemp1 As Recordset
    Dim strFilter As String
    Dim bNoTestID As Boolean

    'Dim wkSheetName As String
    'Dim iCellNum As Integer
    Dim iMaxCellNum As Integer
    Dim iDecimalPlacesBak As Integer
    
    
    If gbIsImporting Then Exit Sub
    If bLockImportData Then Exit Sub
    bLockImportData = True

    If Not CheckInterfaceValueValid Then GoTo UnLockImportData_Exit
    If Not CheckFileValid Then GoTo UnLockImportData_Exit
    Application.StatusBar = "Add Data to Current Workbook..."
    
    'If file is locked, when using network drive, give Error Message
    On Error GoTo UserForm_SaveAs_Error
    Application.DisplayAlerts = True
    
    gLastTestName = mTestName
    mbIsMultifile = False
    'If LCase(Right(gFileNameInput, 12)) = "arbinsys.res" Then
     If Right(gDirNameInput, 1) = "\" Then gDirNameInput = Left(gDirNameInput, Len(gDirNameInput) - 1)
        mMultifileName = gDirNameInput & "\" & mTestName & ".res"
        If gFileNameInput <> mMultifileName And Dir(mMultifileName) <> "" Then
            Call gDBClose
            If Not gDBOpen(mMultifileName) Then GoTo UnLockImportData_Exit
            LabelFileNameInput.Caption = mMultifileName
            mbIsMultifile = True
            DoEvents
        End If
    'End If
    
    '--Start time
    sTimeStart = Timer
    Call InterfaceMiscBegin
    
TryImportAgain:
    
    For i = 1 To 16
        gLastSelectedChannel(i) = ""
    Next i
    
    gptImportChannelCount = 0
    gbIsImporting = True
    bExitAsked = False
    iChanI = 1
    iMaxCellNum = 0
    
    '--Read selected files (Channel numbers and TestID in the ListBoxChannelIndex)
    If Me.MultiPage1.Value = 0 Then
        iChannelList = ListBoxChannelIndex.ListCount
        For i = 0 To iChannelList - 1
          If ListBoxChannelIndex.Selected(i) = True Then
            strDaqChannelNum = Left(ListBoxChannelIndex.List(i, 0), 5)  '8/15/2001 18 chars, 1/23/2002 change to 5
            If iChanI < 17 Then
                gLastSelectedChannel(iChanI) = strDaqChannelNum
                iChanI = iChanI + 1
            End If
            bNoTestID = False
            If mbIsMultifile = True Then
                strFilter = "[Test_Name] = '" & mTestName & "-0" & strDaqChannelNum & "'"
                strQry = "SELECT [Test_ID] FROM Global_Table Where " & strFilter
                Set recTemp1 = gDB.OpenRecordset(strQry, dbOpenForwardOnly, dbReadOnly)
                If recTemp1.EOF Then
                    bNoTestID = True
                Else
                    iTest_ID = recTemp1.Fields(0)
                End If
            Else
                iTest_ID = Int(ListBoxChannelIndex.List(i, 1))
            End If
            If bNoTestID = False Then
                iMaxCellNum = ListBoxChannelIndex.List(i, 2)
                'gptImportChannelCount = gptImportChannelCount + 1
                If Not ReadArbinSysDataBase(strDaqChannelNum, iTest_ID, iMaxCellNum) Then GoTo CommandAdd_Click_Cancel
            End If
          End If   '      If ListBoxChannelIndex.Selected(i) = True Then
        Next i
    Else
       For i = 1 To iListViewTestNameCount
          If ListViewTestName.ListItems.Item(i).Selected = True Then
            strDaqChannelNum = Left(ListViewTestName.ListItems.Item(i).SubItems(1), 5) '8/15/2001 18 chars, 1/23/2002 change to 5
            If iChanI < 17 Then
                gLastSelectedChannel(iChanI) = strDaqChannelNum
                iChanI = iChanI + 1
            End If
            bNoTestID = False
            If mbIsMultifile = True Then
                strFilter = "[Test_Name] = '" & mTestName & "-0" & strDaqChannelNum & "'"
                strQry = "SELECT [Test_ID] FROM Global_Table Where " & strFilter
                Set recTemp1 = gDB.OpenRecordset(strQry, dbOpenForwardOnly, dbReadOnly)
                If recTemp1.EOF Then
                    bNoTestID = True
                Else
                    iTest_ID = recTemp1.Fields(0)
                End If
            Else
                iTest_ID = Left(ListViewTestName.ListItems.Item(i).Key, _
                            Len(ListViewTestName.ListItems.Item(i).Key) - 4)
            End If
            If bNoTestID = False Then
                iMaxCellNum = Right(ListViewTestName.ListItems.Item(i).Key, 3)
                'gptImportChannelCount = gptImportChannelCount + 1
                If Not ReadArbinSysDataBase(strDaqChannelNum, iTest_ID, iMaxCellNum) Then GoTo CommandAdd_Click_Cancel
            End If
          End If   '      ListViewTestName.ListItems.item(i).Selected = True
       Next i
    End If

    Application.DisplayAlerts = False
    
    If ActiveWorkbook.Worksheets.Count <= 1 And mbIsMultifile = True Then
        Call gDBClose
        If Not gDBOpen(gFileNameInput) Then GoTo UnLockImportData_Exit
        LabelFileNameInput.Caption = gFileNameInput
        mbIsMultifile = False
        DoEvents
        If HasSheetOf(gbInfoSheetName) Then
            Sheets(gbInfoSheetName).Name = gbInfoSheetName & "1"
        End If
        Call MakeInfoSheetHead
        If HasSheetOf(gbInfoSheetName) And HasSheetOf(gbInfoSheetName & "1") Then
            Sheets(gbInfoSheetName & "1").Delete
        End If
        GoTo TryImportAgain
    End If
    
     'Call FormatDecimalPlacesTime
'    gbbHasHighPulseData = False
    Call ReverseI                   'Reverse Sign of Current
    Call ReverseV                   'Reverse sign of Voltage
    Call AddDayHourMinuteColumns    'Add minute, hour and day columns
    Call AddmAAndmVColumns          'Add mA and mV as unit columns
    Call AddPowerLoadColumns        'Add Power and Load columns
    Call AddIDColumns               'Add Current density columns
    Call AddPDColumns               'Add PowerDensity Columns
    Call AddCoulmColumns
    Call AddGroupCalcute            'Add Fuel Cell group calcute
    Call AddSmartBatteryStat        'Add Smartbattery Statistic Data
    Call AddWarning
    Call AddCapRate
    Call FormatwkBookCellsColor
    If gbbHasHighPulseData = True Then
        iDecimalPlacesBak = giDecimalPlaces(1)
        If giDecimalPlaces(1) < gbiTimeForHighPulseData And giDecimalPlaces(1) <> -1 Then
            giDecimalPlaces(1) = gbiTimeForHighPulseData  'TestTime
            giDecimalPlaces(2) = giDecimalPlaces(1)  'StepTime
        End If
    End If
    If gbbHasHighPulseData = True Then
        giDecimalPlaces(1) = iDecimalPlacesBak
        giDecimalPlaces(2) = giDecimalPlaces(1)
    End If
    Call FormatDecimalPlaces

gbExistDataSheetAfterImport = gfSelectChannelSheet(ActiveWorkbook, mPreSheetName)
    If gbExistDataSheetAfterImport = False Then
        If mPreSheetName = gbSmartBatteryName Then
            mPreSheetName = gbChannelName
            gbExistDataSheetAfterImport = gfSelectChannelSheet(ActiveWorkbook, mPreSheetName)
        End If
    End If
    'For PPG Begin
    If gbPPGOn Then
        Call PPGMain
    End If
    'For PPG End
    Application.DisplayAlerts = True
    
    sTimefinish = Timer
   
    If ActiveWorkbook.Worksheets.Count > 1 Then
        Application.StatusBar = "Save Data to " & gFileNameOutput & " file."
        ActiveWorkbook.Save
        Application.StatusBar = "Imported from " & LabelFileNameInput.Caption
        '& " " & _
        '    Format((sTimefinish - sTimeStart), "0.00") & "   " & InfoStr '/ 60
    gCommandHistory = True
    Else
        gbNeedRefreshImportDialog = True
        Call GiveSuggestMsg
    End If
    
CommandAdd_Click_Exit:
    Call InterfaceMiscEnd
    Call gDBClose
    ProcessingCommandBar
    CommandAdd.Enabled = True
    gbIsImporting = False
    On Error GoTo 0
    'DataImportForm.Hide
    gIsImportFormLoaded = False
    If mbIsPlotAfterImport = True Then
        If gbExistDataSheetAfterImport = True Then
'            DoEvents
            'SimplePlotDialog.Show
'            If gRefreshPrecess Or gAutoRefreshEnable Then
'               ActiveWorkbook.Worksheets(gwksActivePlotName).Activate
'            End If
            gbLastwkBookName = ActiveWorkbook.Name
            gbLastwkSheetName = ActiveSheet.Name
            mPreSheetName = Left$(gbLastwkSheetName, 7)
            
'            Call SimplePlotDialog.PlotGraphInWorkbook(ActiveWorkbook, mPreSheetName)
            Call PlotQuickGraph(ActiveWorkbook, mPreSheetName, iMaxCellNum)
'            DoEvents
            'Unload SimplePlotDialog
            'DoEvents
        End If
    End If
    
UnLockImportData_Exit:
    bLockImportData = False
 '    Unload Me
    Me.Hide
    'Debug.Print "Process time last:"; sTimefinish - sTimeStart; "s"
    Exit Sub
    
CommandAdd_Click_Cancel:
    MsgBox "Data Importing Canceled!"
'    gCommandHistory = False
    GoTo CommandAdd_Click_Exit

UserForm_SaveAs_Error:
    If Err.Number = 1004 Then
        MsgBox gFileNameOutput & " cann't save to read-only " _
            & "media device (like CD-ROM, read-only network drive )" _
            & "or the file has been locked by others. " _
            & "You should change the Output File Name. " _
            & "This problem may be caused by network drive. " _
            & "You'd better not to use network drive."
        Workbooks(ActiveSheet.Name).Close SaveChanges:=False
    End If
    gCommandHistory = False
    Resume CommandAdd_Click_Exit
End Sub


Private Sub LabelTestName_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    mbIsPlotAfterImport = True
    Call ImportData
End Sub

Private Sub ListBoxTestName_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    mbIsPlotAfterImport = True
    Call ImportData
End Sub

Private Sub ListViewTestName_Click()
   Dim i As Integer
   Dim strSelTest As String
   Dim bini As Boolean
   bini = True
   For i = 1 To iListViewTestNameCount
        If ListViewTestName.ListItems.Item(i).Selected = True Then
            If bini = True Then
                mTestName = ListViewTestName.ListItems.Item(i).Text
                strSelTest = mTestName
                bini = False
                gFileNameExt = strSelTest & ".xls"
    If Right(gDirNameOutput, 1) = "\" Then gDirNameOutput = Left(gDirNameOutput, Len(gDirNameOutput) - 1)
                gFileNameOutput = gDirNameOutput & "\" & gFileNameExt
                LabelFileNameOutput.Caption = gFileNameOutput
                LabelFileNameOutput.Enabled = True
                Call DisplayNewFileName(mTestName)
               
                TextBoxPrompt1.Text = ListViewTestName.ListItems.Item(i).ListSubItems(4) & _
                    " " & ListViewTestName.ListItems.Item(i).ListSubItems(5)
                btnChangeFileNameOutput.Enabled = True
                btnImport.Enabled = True
                btnImportPlot.Enabled = True
                Application.StatusBar = " 'Hold 'Ctrl' or 'Shift' key for Multi-selection."
            Else
                If ListViewTestName.ListItems.Item(i).Text <> strSelTest Then
                    ListViewTestName.ListItems.Item(i).Selected = False
                Else
                    TextBoxPrompt1.Text = " "
                End If
            End If
        End If
   Next i
   ' Debug.Print ListViewTestName.SelectedItem
End Sub

Private Sub ListViewTestName_ColumnClick(ByVal ColumnHeader As MSComctlLib.ColumnHeader)
    If LastListViewSortColumn = ColumnHeader.index Then
        If ListViewTestName.SortOrder = lvwDescending Then
            ListViewTestName.SortOrder = lvwAscending
        Else
            ListViewTestName.SortOrder = lvwDescending
        End If
    Else
        LastListViewSortColumn = ColumnHeader.index
        If InStr(1, ListViewTestName.ColumnHeaders(ColumnHeader.index), "Time") Then
            ListViewTestName.SortOrder = lvwDescending
        End If
    End If
    ListViewTestName.SortKey = ColumnHeader.index - 1
    ListViewTestName.Sorted = True
End Sub

Private Sub ListViewTestName_DblClick()
    mbIsPlotAfterImport = True
    Call ImportData
End Sub

Private Sub MultiPage1_Click(ByVal index As Long)
    Call FixListBoxViewSize
    'Me.Repaint
    If MultiPage1.Value = 1 Then
'        ListViewTestName.Refresh
        Application.StatusBar = "Click Title for Sorting."
        Call MapSelectedTestNameFromPage0To1
        'Call Page0ControlHide
    Else
        Application.StatusBar = "Ready"
        Call MapSelectedTestNameFromPage1To0
        'Call Page0ControlShow
    End If
End Sub

Private Sub Page0ControlHide()
    LabelTestName.Visible = False
    LabelChannelIndex.Visible = False
    ListBoxTestName.Visible = False
    ListBoxChannelIndex.Visible = False
End Sub

Private Sub Page0ControlShow()
    LabelTestName.Visible = True
    LabelChannelIndex.Visible = True
    ListBoxTestName.Visible = True
    ListBoxChannelIndex.Visible = True
End Sub

Private Sub MapSelectedTestNameFromPage0To1()
    Dim i As Integer, j As Integer, k As Integer
    Dim TestName As String
    k = 0
    If ListBoxTestName.ListIndex < 0 Then Exit Sub
    TestName = ListBoxTestName.List(ListBoxTestName.ListIndex)
    With ListViewTestName
        For i = 1 To iListViewTestNameCount
            If .ListItems.Item(i) = TestName Then
                j = gfGetListBoxIndex(ListBoxChannelIndex, .ListItems.Item(i).SubItems(1))
                .ListItems.Item(i).Selected = ListBoxChannelIndex.Selected(j)
                If .ListItems.Item(i).Selected = True Then
                    k = k + 1
                    If k = 1 Then
                        TextBoxPrompt1.Text = .ListItems.Item(i).ListSubItems(4)
                    Else
                        TextBoxPrompt1.Text = " "
                    End If
                End If
            Else
                .ListItems.Item(i).Selected = False
            End If
        Next i
    End With
End Sub

Private Sub MapSelectedTestNameFromPage1To0()
    Dim i As Integer, j As Integer, k As Integer
    Dim TestName As String, bExitSub As Boolean
    'Application.ScreenUpdating = False
    MultiPage1.Value = 1
    With ListViewTestName
        bExitSub = False
        For i = 1 To iListViewTestNameCount
            If .ListItems.Item(i).Selected Then
                TestName = .ListItems.Item(i)
                j = gfGetListBoxIndex(ListBoxTestName, TestName)
                If j < 0 Then
                    bExitSub = True
                    Exit For
                End If
                ListBoxTestName.Selected(j) = True
                Call ListBoxTestName_Click
                Call gfListBoxClearSelected(ListBoxChannelIndex)
                k = i
                Exit For
            End If
        Next i
        If bExitSub = True Then Exit Sub
        
        If i > iListViewTestNameCount Then GoTo Exit_MapSelectedTestNameFromPage1To0

        For i = k To iListViewTestNameCount
            If TestName = .ListItems.Item(i) Then
                If .ListItems.Item(i).Selected Then
                    j = gfGetListBoxIndex(ListBoxChannelIndex, .ListItems.Item(i).SubItems(1))
                    ListBoxChannelIndex.Selected(j) = True
                End If
            End If
        Next i
    End With
Exit_MapSelectedTestNameFromPage1To0:
    Call FixListBoxViewSize
    MultiPage1.Value = 0
    'Application.ScreenUpdating = True

End Sub

Private Sub OptionAll_Click()
    SetCtrlStateByOption
End Sub

Private Sub OptionChannel_Click()
    CheckCellAll.Enabled = False
    CheckCellAuxiliary.Enabled = False
    'GroupChannel.Enabled = True
    CheckChNormal.Enabled = True
    If gbExistAuxiliary = True Then
        CheckChAuxiliary.Enabled = True
    Else
        CheckChAuxiliary.Enabled = False
    End If
    If gbExistChStatistics = True Then
        CheckChStatistics.Enabled = True
    Else
        CheckChStatistics.Enabled = False
    End If
    If gbExistSmartBattery = True Then
        CheckChSmartBattery.Enabled = True
    Else
        CheckChSmartBattery.Enabled = False
    End If
End Sub

Private Sub OptionCell_Click()
    Call OptionCellClick
End Sub

Private Sub OptionCellClick()
    CheckCellAll.Enabled = True
    If gbExistAuxiliary = True Then
        CheckCellAuxiliary.Enabled = True
    Else
        CheckCellAuxiliary.Enabled = False
    End If
    'GroupChannel.Enabled = False
    CheckChNormal.Enabled = False
    CheckChAuxiliary.Enabled = False
    CheckChStatistics.Enabled = False
    CheckChSmartBattery.Enabled = False
End Sub

Private Sub OptionCycleNo_Click()
    SetCtrlStateByOption
End Sub

Private Sub OptionFirst_Click()
    SetCtrlStateByOption
End Sub

Private Sub OptionCycleFrom_Click()
    SetCtrlStateByOption
End Sub

Private Sub OptionLast_Click()
    SetCtrlStateByOption
End Sub

Private Sub OptionPointFrom_Click()
    SetCtrlStateByOption
End Sub
Private Sub TextBoxCycleNoTo_Change()
If TextBoxCycleNoTo.Value < TextBoxCycleNo.Value Then TextBoxCycleNoTo.Value = TextBoxCycleNo.Value
End Sub

Private Sub TextBoxPrompt0_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    Dim strMsg As String
    strMsg = "[Import + Plot] Tips:" & _
    Chr$(13) & Chr$(13) & "For one Channel:" & _
    Chr$(13) & "  double-click a Channel Index." & _
    Chr$(13) & Chr$(13) & "For more Channels:" & _
    Chr$(13) & "  1. Select a Test Name." & _
    Chr$(13) & "  2. Select Channel Indexes (Hold 'Shift' or " & _
    Chr$(13) & "      'Ctrl' Key when you click Channel Index)." & _
    Chr$(13) & "  3. Double-click Test Name or " & mTestName & _
    Chr$(13) & "      or click Import+Plot button." & _
    Chr$(13) & Chr$(13) & "The chart will show the X,Y1,Y2 axes you used last time." & _
    Chr$(13)
    gbiMsgBoxResponse = MsgBox(strMsg, vbInformation, "Arbin Data Pro")
End Sub



Private Sub UserForm_Activate()
'    gCommandHistory = False
    ProcessingCommandBar
    bLockImportData = False
    
    gRefreshPrecess = False
    gAutoRefreshEnable = False
    mbIsPlotAfterImport = False 'every time active import form means something changed
    bIsOverWrite = False
    gbIsImporting = False
End Sub

Private Sub UserForm_Initialize()
'    gCommandHistory = False

    If gCustom = "DELL" Then
        CheckBoxSMStretch.Enabled = True
        CheckBoxSmartBatteryStat.Enabled = True
        CheckBoxEvent.Enabled = True
        CheckBoxWarning.Enabled = True
    Else
        gbbLog = False
        gbbFlag = False
    End If
    
    ProcessingCommandBar
    MultiPage1.Value = 1
'    mbIsPlotAfterImport = False
    bLockImportData = False
    Me.Width = 258.8
    fListBoxViewHeight = 133  '135.3
    btnAdvanced.Caption = BtnAdvancedCaption
    btnAdvanced.ControlTipText = "Open Advanced Dialog Box"
    CheckBoxWarning = gbbFlag
    CheckBoxEvent = gbbLog
    If gbbBtnAdvanced = True Then
        Call BtnAdvancedClick
    End If
    bIsOverWrite = False       'True when MsgBox overwrite has been showed
    gbIsImporting = False
    Call QueryTestName(gFileNameInput)
    'ListBoxTestName.ControlTipText = "Choose a Test Name"
    'ListBoxChannelIndex.ControlTipText = "Hold 'Shift' or 'Ctrl' Key for Multi-selection"
    Call FixListBoxViewSize
    'ListBoxChannelIndex.Height = fListBoxViewHeight + 0.1
    
    CheckChNormal.Value = True
    'CheckChNormal.Value = gbCheckChNormal
    'CheckChAuxiliary.Value = gbCheckChAuxiliary
    'CheckChStatistics.Value = gbCheckChStatistics
    
    'Call CheckTableDataExist
    
 
    
    If gbbOpenFileDialogAuto = True Then
        Application.StatusBar = "To disable this Dialog, click Arbin Data\Options...\Options1 menu"
        Call btnChangeFileNameInput_Click
    End If
    Call SelectLastTestName
    If gbbOpenImportDataDialog And Application.Workbooks.Count < 1 Then
        Application.StatusBar = "To disable this Dialog, click Arbin Data\Options...\Options1 menu"
    End If
End Sub

Private Function SelectLastTestName()
    Dim i As Integer, bSelected As Boolean
    bSelected = False
    If ListBoxTestName.ListCount > 0 Then
        If gLastTestName <> "" Then
            For i = 0 To ListBoxTestName.ListCount - 1
                If ListBoxTestName.List(i) = gLastTestName Then
                    ListBoxTestName.Selected(i) = True
                    bSelected = True
                    Exit For
                End If
            Next i
        End If
        If bSelected = False Then
            gLastTestName = gLatestTestName
            For i = 0 To ListBoxTestName.ListCount - 1
                If ListBoxTestName.List(i) = gLastTestName Then
                    ListBoxTestName.Selected(i) = True
                    Exit For
                End If
            Next i
        End If
    End If
    
End Function

Private Function FixListBoxViewSize()
'    ListBoxTestName.Height = fListBoxViewHeight
'    ListBoxChannelIndex.Height = fListBoxViewHeight
'    ListViewTestName.Height = 8 + fListBoxViewHeight
'    ListViewTestName.Width = 226.2
End Function

Private Function CheckTableDataExist()
    Call CheckAuxiliaryExist
    Call CheckChStatisticsExist
    Call CheckSmartBatteryExist
    'Call CheckMultiCellExist
End Function

Private Function CheckSmartBatteryExist()
    If gbExistSmartBattery = True Or gfCheckDataBaseTableExist("Smart_Battery_Data_Table") Then
        gbExistSmartBattery = True
        CheckChSmartBattery.Enabled = True
        'CheckChSmartBattery.Value = gbCheckChSmartBattery    'Canceled caused by Multifile 06/99
        CheckChSmartBattery.Value = True
    Else
        gbExistSmartBattery = False
        CheckChSmartBattery.Enabled = False
        CheckChSmartBattery.Value = False
    End If
End Function

Private Function CheckMultiCellExist()
    If gbExistMultiCell = True Or gfCheckDataBaseTableExist("Cell_Normal_Table") Then
        gbExistMultiCell = True
        OptionCell.Enabled = True
        OptionCell.Value = True
        'CheckCellAll.Value = gbCheckCellAll   'Canceled caused by Multifile 06/99
        'CheckCellAuxiliary.Value = gbCheckCellAuxiliary   'Canceled caused by Multifile 06/99
        CheckCellAll.Value = True
        If gbExistAuxiliary = True Then
            CheckCellAuxiliary.Value = True
        Else
            CheckCellAuxiliary.Value = False
        End If
    Else
        gbExistMultiCell = False
        OptionCell.Enabled = False
        CheckCellAll.Enabled = False
        CheckCellAll.Value = False
        CheckCellAuxiliary.Enabled = False
        CheckCellAuxiliary.Value = False
        OptionChannel.Value = True
    End If
End Function

Private Function CheckAuxiliaryExist()
    If gbExistAuxiliary = True Or gfCheckDataBaseTableExist("Auxiliary_Table") Then
        gbExistAuxiliary = True
        CheckChAuxiliary.Enabled = True
        CheckChAuxiliary.Value = True
    Else
        gbExistAuxiliary = False
        CheckChAuxiliary.Enabled = False
        CheckChAuxiliary.Value = False
    End If
End Function

Private Function CheckChStatisticsExist()
    If gbExistChStatistics = True Or gfCheckDataBaseTableExist("Channel_Statistic_Table") Then
        gbExistChStatistics = True
        CheckChStatistics.Enabled = True
        CheckChStatistics.Value = True
    Else
        gbExistChStatistics = False
        CheckChStatistics.Enabled = False
        CheckChStatistics.Value = False
    End If
End Function

Private Function gDBOpen(DBFileName As String) As Boolean
    gDBOpen = False
    If gbDBIsOpen = False Then
        On Error GoTo gDBOpen_Error
        Set gDB = DBEngine.OpenDatabase(DBFileName, True, True)
            gbDBIsOpen = True
    End If
    gDBOpen = True
gDBOpen_Exit:
    On Error GoTo 0
    DoEvents
    Exit Function
gDBOpen_Error:
    Beep
    Select Case Err.Number
        Case 3050:
'        MsgBox "You should have the Change permission to the folder containing the result file " & _
            DBFileName
        mResponse = MsgBox("Are you import the result file from CD or Network drive?", vbYesNo)
        If mResponse = vbYes Then
            Set gDB = DBEngine.OpenDatabase(DBFileName, True, True)
            gbDBIsOpen = True
            gDBOpen = True
        Else
            MsgBox Err.Description & "you cann't import file " & DBFileName
            Set gDB = Nothing
            gbDBIsOpen = False
        End If
        Case 3356
        Set gDB = DBEngine.OpenDatabase(DBFileName, False, False)
            gDBOpen = True
        Case 429:
        MsgBox "Microsoft DAO 3.6 was missing by System, try install from Mits's CD! "
        Case 55:
        MsgBox Err.Description & Chr(13) & "Open DataBase " & DBFileName & " Error." & Err.Number & _
            "Probable was locked by other application, if you use network device, Map it as network drive and try again!"
            gDB.Close
            Set gDB = Nothing
            gbDBIsOpen = False
 
        Case 3343
        MsgBox Err.Description & Chr(13) & "Open DataBase " & DBFileName & " Error." & Err.Number
        Case Else
    End Select
    GoTo gDBOpen_Exit
End Function

Private Sub gDBClose()
On Error Resume Next
    If gbDBIsOpen = True Then
        gDB.Close
        Set gDB = Nothing
        gbDBIsOpen = False
    End If
End Sub

Private Sub btnChangeFileNameInput_Click()
    Dim fileToOpen As Variant
    If gbIsImporting Then Exit Sub
    On Error GoTo btnChangeFileNameInput_Error
    ChDir gDirNameInput
    On Error GoTo 0
    fileToOpen = Application.GetOpenFilename("MITS Pro/2000/97 Files (*.res), *.res", 5, "Open MITS Pro/2000/97 File")
    If fileToOpen <> False Then
        'gFileNameInput = gDirNameInput & "\ArbinSys.res"
        gDirNameInput = CurDir
        gFileNameInput = fileToOpen
        Call gfSaveMitsDataini
        Call gDBClose
        Call QueryTestName(gFileNameInput)
        
        Call SetCheckBoxValueInDataImportForm
        OptionChannel.Value = True
        'Call CheckTableDataExist
        Call SelectLastTestName
    
    End If
    Exit Sub

btnChangeFileNameInput_Error:
    gDirNameInput = ThisWorkbook.Path
    Resume
End Sub

Private Sub QueryTestName(DBFileName As String)
    Dim TestName As String, strQry As String, strLastName As String
    Dim fldTest As Field, fldTime As Field, fldSdu As Field, fldCom As Field
    Dim fldID As Field, fldCell As Field, fldItemID As Field
    Dim recTemp1 As Recordset
    Dim itmX As ListItem
    Dim i As Integer
    Dim fVerSchema As Single
    Dim tTime As Variant, tData_Type As Variant
    
    MultiPage1.Value = 1 'Force Page1 Select
    Me.MousePointer = fmMousePointerHourGlass
    Application.StatusBar = "Querying Test Name from " & DBFileName & " file."
    LabelFileNameInput.Caption = DBFileName
    LabelFileNameOutput.Enabled = False
    btnChangeFileNameOutput.Enabled = False
    btnImport.Enabled = False
    btnImportPlot.Enabled = False
    If gDBOpen(gFileNameInput) Then
       
        Call ReadResultVersionTable
        fVerSchema = gbfVerSchema
        'ListViewTestName
        strQry = "SELECT [Test_Name], " _
            & " Start_DateTime, Schedule_File_Name, Comments, Test_ID"
        'If fVerSchema < 1.11 Then strQry = strQry & ", Cell_Number"
        If fVerSchema >= 1.1 Then strQry = strQry & ", Item_ID"
        strQry = strQry & " FROM Global_Table ORDER BY [Test_Name];"
        
        Set recTemp1 = gDB.OpenRecordset(strQry, dbOpenForwardOnly, dbReadOnly)
        Set fldTest = recTemp1.Fields(0)
        Set fldTime = recTemp1.Fields(1)
        Set fldSdu = recTemp1.Fields(2)
        Set fldCom = recTemp1.Fields(3)
        Set fldID = recTemp1.Fields(4)
        'Set fldCell = recTemp1.Fields(5)
        'If fVerSchema >= 1.1 Then Set fldItemID = recTemp1.Fields(6)
        If fVerSchema >= 1.1 Then Set fldItemID = recTemp1.Fields(5)
        
        tTime = 0: gLatestTestName = ""
        ListBoxTestName.Clear:        ListBoxChannelIndex.Clear
        ListViewTestName.ListItems.Clear
        On Error Resume Next
        While Not recTemp1.EOF
            TestName = Left$(fldTest, Len(fldTest) - 7)
            Set itmX = ListViewTestName.ListItems.Add(, , TestName)
            'itmX.Key = CStr(fldID) & "-" & Format$(CStr(fldCell), "000")
            itmX.Key = CStr(fldID) & "-000"
            itmX.SubItems(1) = Right$(fldTest, 5)
            If Not IsNull(fldTime) Then
                'itmX.SubItems(1) = CStr(recTemp1!Start_DateTime)
                itmX.SubItems(2) = Format$(fldTime, "yyyy/mm/dd hh:mm:ss")
                If fldTime > tTime Then
                    tTime = fldTime
                    gLatestTestName = TestName
                End If
            Else
                itmX.SubItems(2) = ""
            End If
            If Not IsNull(fldSdu) Then
                itmX.SubItems(3) = CStr(fldSdu)
            Else
                itmX.SubItems(3) = ""
            End If
            If Not IsNull(fldCom) Then
                itmX.SubItems(4) = fldCom
            Else
                itmX.SubItems(4) = ""
            End If
            itmX.SubItems(5) = ""
            If fVerSchema >= 1.1 Then
                If Not IsNull(fldItemID) Then
                    itmX.SubItems(5) = fldItemID
                End If
            End If
            
            If ListBoxTestName.ListCount = 0 Then
                ListBoxTestName.AddItem (TestName)
            Else
                If TestName <> strLastName Then ListBoxTestName.AddItem (TestName)
            End If
            strLastName = TestName
            recTemp1.MoveNext
         Wend
         
         iListViewTestNameCount = ListViewTestName.ListItems.Count
         ReDim TestNameArray(iListViewTestNameCount, 4)
         For i = 1 To iListViewTestNameCount
            TestNameArray(i, 1) = ListViewTestName.ListItems.Item(i).Text
            TestNameArray(i, 2) = ListViewTestName.ListItems.Item(i).SubItems(1)
            TestNameArray(i, 3) = ListViewTestName.ListItems.Item(i).Key
            TestNameArray(i, 4) = ""
            If fVerSchema >= 1.1 Then
                TestNameArray(i, 4) = ListViewTestName.ListItems.Item(i).SubItems(5)
            End If
         Next i
        recTemp1.Close
        Set recTemp1 = Nothing
        
        If gbfVerSchema >= 1.41 Then
            strQry = "Select Data_Type,Unit FROM Aux_Global_Data_Table group by Data_Type,Unit ORDER BY Data_Type;"
            Set recTemp1 = gDB.OpenRecordset(strQry, dbOpenForwardOnly, dbReadOnly)
            While Not recTemp1.EOF
                tData_Type = recTemp1.Fields("Data_Type").Value
                If recTemp1.Fields("Unit").Value <> "" Then
                   gAuxiDataTypeUnit(tData_Type, 0) = "(" & recTemp1.Fields("Unit").Value & ")"
                   gAuxiDataTypeUnit(tData_Type, 1) = "(d" & Trim(recTemp1.Fields("Unit").Value) & "/dt)"
                End If
                recTemp1.MoveNext
            Wend
            recTemp1.Close
            Set recTemp1 = Nothing

        End If
        ListViewTestName.Refresh
        If iListViewTestNameCount >= 1 Then ListViewTestName.ListItems.Item(1).Selected = False
        On Error GoTo 0
    End If
    Me.MousePointer = fmMousePointerDefault
    'make simple view the active view
    MultiPage1.Value = 0
    TextBoxPrompt0.Text = "Please choose a Test Name"
 '   Me.Repaint
    Application.StatusBar = "Ready"
End Sub

Private Sub ListBoxTestName_Click()
    'TextBoxPrompt0.Text = "Please choose Channel Index"
    TextBoxPrompt0.Text = "Double-click Test Name for [Import+Plot] or this line for tips."
    mTestName = ListBoxTestName.List(ListBoxTestName.ListIndex)
    gFileNameExt = mTestName & ".xls"
    If Right(gDirNameOutput, 1) = "\" Then gDirNameOutput = Left(gDirNameOutput, Len(gDirNameOutput) - 1)
    gFileNameOutput = gDirNameOutput & "\" & gFileNameExt
    LabelFileNameOutput.Caption = gFileNameOutput
    Call PutListBoxChannelIndex
'    ListBoxChannelIndex.Height = fListBoxViewHeight
        
    'Call DisplayNewFileName(mTestName)
End Sub

Private Sub DisplayNewFileName(strTestName As String)
    Dim strMultifileName As String
    If Right(gDirNameInput, 1) = "\" Then gDirNameInput = Left(gDirNameInput, Len(gDirNameInput) - 1)
    
    strMultifileName = gDirNameInput & "\" & strTestName & ".res"
    If gFileNameInput <> strMultifileName And Dir(strMultifileName) <> "" Then
        LabelFileNameInput.Visible = False
        LabelFileNameInputAutoChange.Caption = "Map ---> " & strMultifileName
        LabelFileNameInputAutoChange.Visible = True
    Else
        LabelFileNameInputAutoChange.Caption = " "
        LabelFileNameInputAutoChange.Visible = False
        LabelFileNameInput.Visible = True
    End If
End Sub

Private Sub ListBoxChannelIndex_Enter()
    TextBoxPrompt0.Text = "Hold 'Shift' or 'Ctrl' Key for Channel Index Multi-selection"
'    ListBoxChannelIndex.Height = fListBoxViewHeight
End Sub

Private Sub ListBoxChannelIndex_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    mbIsPlotAfterImport = True
    Call ImportData
End Sub

Private Sub PutListBoxChannelIndex()
    Dim i As Integer, iSortOrder As Byte, isortindex As Byte
    Dim TestRec As Recordset
    Dim TestName As String, strQuery As String
    Dim iListCount As Integer
    Dim fldDAQ_Index As Field, fldChannel_Index As Field
    Dim fldCell_Number As Field, fldTest_ID As Field
    Dim strTempTestName As String
    Me.MousePointer = fmMousePointerHourGlass
    Application.StatusBar = "Querying Channel Info of the Selected Test Name"
    TestName = ListBoxTestName.List(ListBoxTestName.ListIndex)
        ListBoxChannelIndex.Clear
        For i = 1 To UBound(TestNameArray)
            If TestNameArray(i, 1) = TestName Then
              With ListBoxChannelIndex
                strTempTestName = TestNameArray(i, 2)
                If TestNameArray(i, 4) <> "" Then
                    strTempTestName = strTempTestName & " (" & TestNameArray(i, 4) & ")"
                End If
                .AddItem (strTempTestName)
                iListCount = .ListCount - 1
                .List(iListCount, 1) = Left(TestNameArray(i, 3), Len(TestNameArray(i, 3)) - 4)
                .List(iListCount, 2) = Right(TestNameArray(i, 3), 3)
              End With
            End If
        Next i
'            With ListBoxChannelIndex
'                 .AddItem (fldDAQ_Index.Value & "-" & fldChannel_Index.Value)
'                iListCount = .ListCount - 1
'                .List(iListCount, 1) = fldTest_ID.Value
'                .List(iListCount, 2) = fldCell_Number.Value
'            End With
'            TestRec.MoveNext
'        Wend
'        TestRec.Close
'        Set TestRec = Nothing
    Call CheckListBoxChannelListCount
'    End If
    DoEvents
    Me.MousePointer = fmMousePointerDefault
    Application.StatusBar = "Ready"
End Sub

Private Sub CheckListBoxChannelListCount()
    'AutoSelect the first one
    If ListBoxChannelIndex.ListCount > 0 Then
        Call AutoSelectChannelIndex
    '    FrameFileNameOutput.Enabled = True
        LabelFileNameOutput.Enabled = True
        btnChangeFileNameOutput.Enabled = True
        btnImport.Enabled = True
        btnImportPlot.Enabled = True
    Else
        LabelFileNameOutput.Enabled = False
        btnChangeFileNameOutput.Enabled = False
        btnImport.Enabled = False
        btnImportPlot.Enabled = False
    End If
End Sub

Private Sub AutoSelectChannelIndex()
    Dim j As Integer, iChanI As Integer, iChannelList As Integer
    Dim bSelected As Boolean
    bSelected = False
    iChanI = 1
    With ListBoxChannelIndex
        iChannelList = .ListCount
        Do While iChanI < 17 And gLastSelectedChannel(iChanI) <> "     "
            For j = 0 To iChannelList - 1
                If .List(j, 0) = gLastSelectedChannel(iChanI) Then
                    .Selected(j) = True
                    bSelected = True
                    If j > gbiChannelIndexOutLine Then LabelChannelIndex.Caption = "Channel Index *"
                    Exit For
                End If
            Next j
            iChanI = iChanI + 1
        Loop
        If bSelected = False And iChannelList > 0 Then .Selected(0) = True
    End With
End Sub

Private Sub btnCancel_Click()
    If gbIsImporting Then
        If MsgBox("Data will not be completely imported if you cancel the process now. Stop importing? ", _
            vbYesNo + vbQuestion + vbDefaultButton2) = vbNo Then
            Exit Sub
        Else
            gbIsImporting = False
        End If
    End If
    Call gDBClose
    'DataImportForm.Hide
    gIsImportFormLoaded = False
    Application.StatusBar = "Ready"
'    gCommandHistory = False
'    ProcessingCommandBar
    
'    Unload Me
    Me.Hide
End Sub

Private Sub btnChangeFileNameOutput_Click()
    Dim vbResponse As Integer, strTemp As String
    Dim TempFileName As Variant
    
    If gbIsImporting Then Exit Sub
    bIsOverWrite = False
    MsgBox "Please make sure output device should be writable!" & vbCrLf _
            & "Otherwise default path will go through to MITS_PRO/DATA fold!"
    On Error GoTo btnChangeFileNameOutput_Error
    ChDir gDirNameOutput
    On Error GoTo 0
    Do
       TempFileName = Application.GetSaveAsFilename(Initialfilename:=gFileNameExt, _
           fileFilter:="Excel Files (*.xls), *.xls")
       If TempFileName = False Then Exit Sub    'Pressing Cancel
       strTemp = TempFileName
       If Dir(strTemp) = "" Then Exit Do   'Brand new file
       vbResponse = MsgBox("Do you want to overwrite the existing file: " & strTemp & "? ", _
        vbYesNo + vbQuestion + vbDefaultButton2, gszALERTTITLE)
       '--Yes to overwrite, no to do loop again
       If vbResponse = vbYes Then bIsOverWrite = True
    Loop Until vbResponse = vbYes
    
    gDirNameOutput = CurDir(gDefaultWorkDrive)
    Call gfSaveMitsDataini
    gFileNameOutput = strTemp
'    gFileNameExt = Right$(gFileNameOutput, Len(gFileNameOutput) - Len(gDirNameOutput))
    gFileNameExt = gFileNameOutput
    LabelFileNameOutput.Caption = gFileNameOutput
    Exit Sub
 
btnChangeFileNameOutput_Error:
    gDirNameOutput = ThisWorkbook.Path
    Resume
End Sub

Private Sub btnImport_Click()
Dim title As String
    gArea = 0

    If gAutoRefreshEnable = False Then
'        gSleepTime = 100
'        If OptionsForm.CheckBoxImportWarning.Value Then
'        Do While MsgBox("Is this PC running MITS test?", vbYesNo) <> vbYes
'            If MsgBox("Are you sure this PC is not running any test! " & vbCr & "If Yes, click on 'Yes', otherwise click 'No' go back to previous page.", vbYesNo) = vbYes Then
'                gSleepTime = 0
'                Exit Do
'            End If
'        Loop
'        End If
        If IsMitsProRunning <> 0 Then
            gSleepTime = 100
            Else
            gSleepTime = 0
        End If
    Else
        gSleepTime = 100
    End If
    gHasPloting = False
    mbIsPlotAfterImport = False
    gDataFilter = CheckBoxDigitalFilter
       
    Call ImportData
    On Error Resume Next
    Unload SimplePlotDialog
End Sub

Sub ImportData()
    Dim wbNew As Workbook
    Dim sTimeStart As Single, sTimefinish As Single
    'Dim bSelectFlag As Boolean
    Dim i As Integer, j As Integer
    Dim iChannelList As Integer, iChanI As Integer
    Dim iTest_ID As Integer
    Dim strDaqChannelNum As String
    Dim strQry As String
    Dim recTemp1 As Recordset
    Dim strFilter As String
    Dim bNoTestID As Boolean

    'Dim wkSheetName As String
    'Dim iCellNum As Integer
    Dim iMaxCellNum As Integer
    Dim iDecimalPlacesBak As Integer
    
    
    If gbIsImporting Then Exit Sub
    If bLockImportData Then Exit Sub
    bLockImportData = True

    If Not CheckInterfaceValueValid Then GoTo UnLockImportData_Exit
    If Not CheckFileValid Then GoTo UnLockImportData_Exit
    If mbIsPlotAfterImport Then
        Application.StatusBar = "Importing & Plotting Data..."
    Else
        Application.StatusBar = "Importing Data..."
    End If
    
    'If file is locked, when using network drive, give Error Message
    On Error GoTo UserForm_SaveAs_Error
    Set wbNew = Workbooks.Add
    wbNew.SaveAs filename:=gFileNameOutput
    On Error GoTo 0
'    DoEvents
    Application.DisplayAlerts = True
    
    gLastTestName = mTestName
    mbIsMultifile = False
    'If LCase(Right(gFileNameInput, 12)) = "arbinsys.res" Then
     If Right(gDirNameInput, 1) = "\" Then gDirNameInput = Left(gDirNameInput, Len(gDirNameInput) - 1)
        mMultifileName = gDirNameInput & "\" & mTestName & ".res"
        If gFileNameInput <> mMultifileName And Dir(mMultifileName) <> "" Then
            Call gDBClose
            If Not gDBOpen(mMultifileName) Then GoTo UnLockImportData_Exit
            LabelFileNameInput.Caption = mMultifileName
            mbIsMultifile = True
            DoEvents
        End If
    'End If
    
    '--Start time
    sTimeStart = Timer
    Call InterfaceMiscBegin
    Call MakeInfoSheetHead
    
TryImportAgain:
    
    For i = 1 To 16
        gLastSelectedChannel(i) = ""
    Next i
    
    gptImportChannelCount = 0
    gbIsImporting = True
    bExitAsked = False
    iChanI = 1
    iMaxCellNum = 0
    
    '--Read selected files (Channel numbers and TestID in the ListBoxChannelIndex)
    If Me.MultiPage1.Value = 0 Then
        iChannelList = ListBoxChannelIndex.ListCount
        For i = 0 To iChannelList - 1
          If ListBoxChannelIndex.Selected(i) = True Then
            strDaqChannelNum = Left(ListBoxChannelIndex.List(i, 0), 5)  '8/15/2001 18 chars, 1/23/2002 change to 5
            If iChanI < 17 Then
                gLastSelectedChannel(iChanI) = strDaqChannelNum
                iChanI = iChanI + 1
            End If
            bNoTestID = False
            If mbIsMultifile = True Then
                strFilter = "[Test_Name] = '" & mTestName & "-0" & strDaqChannelNum & "'"
                strQry = "SELECT [Test_ID] FROM Global_Table Where " & strFilter
                Set recTemp1 = gDB.OpenRecordset(strQry, dbOpenForwardOnly, dbReadOnly)
                If recTemp1.EOF Then
                    bNoTestID = True
                Else
                    iTest_ID = recTemp1.Fields(0)
                End If
            Else
                iTest_ID = Int(ListBoxChannelIndex.List(i, 1))
            End If
            If bNoTestID = False Then
                iMaxCellNum = ListBoxChannelIndex.List(i, 2)
                'gptImportChannelCount = gptImportChannelCount + 1
                If Not ReadArbinSysDataBase(strDaqChannelNum, iTest_ID, iMaxCellNum) Then GoTo ImportData_Cancel
            End If
          End If   '      If ListBoxChannelIndex.Selected(i) = True Then
        Next i
    Else
       For i = 1 To iListViewTestNameCount
          If ListViewTestName.ListItems.Item(i).Selected = True Then
            strDaqChannelNum = Left(ListViewTestName.ListItems.Item(i).SubItems(1), 5) '8/15/2001 18 chars, 1/23/2002 change to 5
            If iChanI < 17 Then
                gLastSelectedChannel(iChanI) = strDaqChannelNum
                iChanI = iChanI + 1
            End If
            bNoTestID = False
            If mbIsMultifile = True Then
                strFilter = "[Test_Name] = '" & mTestName & "-0" & strDaqChannelNum & "'"
                strQry = "SELECT [Test_ID] FROM Global_Table Where " & strFilter
                Set recTemp1 = gDB.OpenRecordset(strQry, dbOpenForwardOnly, dbReadOnly)
                If recTemp1.EOF Then
                    bNoTestID = True
                Else
                    iTest_ID = recTemp1.Fields(0)
                End If
            Else
                iTest_ID = Left(ListViewTestName.ListItems.Item(i).Key, _
                            Len(ListViewTestName.ListItems.Item(i).Key) - 4)
            End If
            If bNoTestID = False Then
                iMaxCellNum = Right(ListViewTestName.ListItems.Item(i).Key, 3)
                'gptImportChannelCount = gptImportChannelCount + 1
                If Not ReadArbinSysDataBase(strDaqChannelNum, iTest_ID, iMaxCellNum) Then GoTo ImportData_Cancel
            End If
          End If   '      ListViewTestName.ListItems.item(i).Selected = True
       Next i
    End If

    Application.DisplayAlerts = False
    Call gfDeleteDefaultSheet123(ActiveWorkbook)
    
    If ActiveWorkbook.Worksheets.Count <= 1 And mbIsMultifile = True Then
        Call gDBClose
        If Not gDBOpen(gFileNameInput) Then GoTo UnLockImportData_Exit
        LabelFileNameInput.Caption = gFileNameInput
        mbIsMultifile = False
        DoEvents
        If HasSheetOf(gbInfoSheetName) Then
            Sheets(gbInfoSheetName).Name = gbInfoSheetName & "1"
        End If
        Call MakeInfoSheetHead
        If HasSheetOf(gbInfoSheetName) And HasSheetOf(gbInfoSheetName & "1") Then
            Sheets(gbInfoSheetName & "1").Delete
        End If
        GoTo TryImportAgain
    End If
     'Call FormatDecimalPlacesTime
'    gbbHasHighPulseData = False
    Call ReverseI                   'Reverse Sign of Current
    Call ReverseV                   'Reverse sign of Voltage
    Call AddDayHourMinuteColumns    'Add minute, hour and day columns
    Call AddmAAndmVColumns          'Add mA and mV as unit columns
    Call AddPowerLoadColumns        'Add Power and Load columns
    Call AddIDColumns               'Add Current density columns
    Call AddPDColumns               'Add PowerDensity Columns
    Call AddCoulmColumns
    Call AddGroupCalcute            'Add Fuel Cell group calcute
    Call AddSmartBatteryStat        'Add Smartbattery Statistic Data
    Call AddWarning
    Call AddCapRate
    Call FormatwkBookCellsColor
    If gbbHasHighPulseData = True Then
        iDecimalPlacesBak = giDecimalPlaces(1)
        If giDecimalPlaces(1) < gbiTimeForHighPulseData And giDecimalPlaces(1) <> -1 Then
            giDecimalPlaces(1) = gbiTimeForHighPulseData  'TestTime
            giDecimalPlaces(2) = giDecimalPlaces(1)  'StepTime
        End If
    End If
    If gbbHasHighPulseData = True Then
        giDecimalPlaces(1) = iDecimalPlacesBak
        giDecimalPlaces(2) = giDecimalPlaces(1)
    End If
    Call FormatDecimalPlaces

gbExistDataSheetAfterImport = gfSelectChannelSheet(ActiveWorkbook, mPreSheetName)
    If gbExistDataSheetAfterImport = False Then
        If mPreSheetName = gbSmartBatteryName Then
            mPreSheetName = gbChannelName
            gbExistDataSheetAfterImport = gfSelectChannelSheet(ActiveWorkbook, mPreSheetName)
        End If
    End If
    'For PPG Begin
    If gbPPGOn Then
        Call PPGMain
    End If
    'For PPG End
    Application.DisplayAlerts = True
    
    sTimefinish = Timer
   
    If ActiveWorkbook.Worksheets.Count > 1 Then
        Application.StatusBar = "Save Data to " & gFileNameOutput & " file."
        ActiveWorkbook.Save
        Application.StatusBar = "Imported from " & LabelFileNameInput.Caption
        '& " " & _
        '    Format((sTimefinish - sTimeStart), "0.00") & "   " & InfoStr '/ 60
    gCommandHistory = True
    Else
        gbNeedRefreshImportDialog = True
        Call GiveSuggestMsg
    End If
    
ImportData_Exit:
    Call InterfaceMiscEnd
    Call gDBClose
    ProcessingCommandBar
    CommandAdd.Enabled = True
    gbIsImporting = False
    Application.StatusBar = "Ready!"

    On Error GoTo 0
    'DataImportForm.Hide
    gIsImportFormLoaded = False
    If mbIsPlotAfterImport = True Then
        If gbExistDataSheetAfterImport = True Then
'            DoEvents
            'SimplePlotDialog.Show
'            If gRefreshPrecess Or gAutoRefreshEnable Then
'               ActiveWorkbook.Worksheets(gwksActivePlotName).Activate
'            End If
            gbLastwkBookName = ActiveWorkbook.Name
            gbLastwkSheetName = ActiveSheet.Name
            mPreSheetName = Left$(gbLastwkSheetName, 7)
            
'            Call SimplePlotDialog.PlotGraphInWorkbook(ActiveWorkbook, mPreSheetName)
            Call PlotQuickGraph(ActiveWorkbook, mPreSheetName, iMaxCellNum)
'            DoEvents
            'Unload SimplePlotDialog
            'DoEvents
        End If
    End If
    
UnLockImportData_Exit:
    bLockImportData = False
 '    Unload Me
    Me.Hide
    'Debug.Print "Process time last:"; sTimefinish - sTimeStart; "s"
    Exit Sub
    
ImportData_Cancel:
    MsgBox "Data Importing Canceled!"
'    gCommandHistory = False
    GoTo ImportData_Exit

UserForm_SaveAs_Error:
    If Err.Number = 1004 Then
        MsgBox gFileNameOutput & " cann't save to read-only " _
            & "media device (like CD-ROM, read-only network drive )" _
            & "or the file has been locked by others. " _
            & "You should change the Output File Name. " _
            & "This problem may be caused by network drive. " _
            & "You'd better not to use network drive."
        Workbooks(wbNew.Name).Close SaveChanges:=False
    End If
    gCommandHistory = False
    Resume ImportData_Exit

End Sub

Private Sub GiveSuggestMsg()
    Dim strMsg As String, strMsg1 As String
    Dim strMsg2 As String, strMsg3 As String
    
        strMsg = gFileNameInput
        If mbIsMultifile = True Then strMsg = mMultifileName
        strMsg1 = "Can not find the data you selected in " & _
            Chr$(13) & strMsg & " database."
        
'        If mbIsMultifile = True Then
'            strMsg1 = strMsg1 & Chr$(13) & Chr$(13) & _
'            "If you are NOT using MITS MULTIPLE RESULTS file to log data, please RENAME " & _
'            mMultifileName & " file, then try to import data again from " & _
'            Chr$(13) & gFileNameInput & " file."
'        End If
        
        strMsg2 = ""
        If OptionChannel.Value = True Then
            If OptionAll.Value <> True Or CheckChNormal.Value <> True Then
                strMsg2 = "1"
            End If
            If CheckChAuxiliary.Enabled = True And CheckChAuxiliary.Value <> True Then
                strMsg2 = "1"
            End If
            If CheckChStatistics.Enabled = True And CheckChStatistics.Value <> True Then
                strMsg2 = "1"
            End If
            If gbExistSmartBattery = True And CheckChSmartBattery.Value <> True Then
                strMsg2 = "1"
            End If
        ElseIf OptionCell.Value = True Then
            If CheckCellAll.Value <> True Or CheckCellAuxiliary.Value <> True Then
                strMsg2 = "1"
            End If
        End If
        If strMsg2 = "1" Then
            strMsg2 = Chr$(13) & _
            Chr$(13) & "Please try to " & _
            Chr$(13) & "1. Click [Advanced>>] button in [Import Data] Window" & _
            Chr$(13) & "2. Set options to All in [Apply Filter to Normal Channel Data] Frame" & _
            Chr$(13) & "3. Check all check boxes in [Import Data Options] Frame"
        End If
        
'        If LCase(Right(gFileNameInput, 12)) = "arbinsys.res" Then
'            If Dir(gDirNameInput & "\" & mTestName & ".res") <> "" Then
'                strMsg3 = Chr$(13) & _
'                Chr$(13) & "It seems you are using the MULTIPLE RESULTS file type in MITS'2000." & _
'                Chr$(13) & "Try to import " & _
'                Chr$(13) & gDirNameInput & "\" & mTestName & ".res database."
'                strMsg = strMsg1 & strMsg3
'            Else
'                'strMsg3 = Chr$(13) & _
'                Chr$(13) & "You may try to import " & _
'                Chr$(13) & gDirNameInput & "\" & mTestName & ".res " & _
'                Chr$(13) & "by clicking [Change...] button in [File to be Imported] Frame" & _
'                Chr$(13) & "if you are using the multiple results file type in MITS'2000."
'                If strMsg2 = "" Then
'                    strMsg = strMsg1
'                    'strMsg = strMsg1 & strMsg3
'                Else
'                    strMsg = strMsg1 & strMsg2
'                End If
'            End If
'        Else
'            strMsg = strMsg1 & strMsg2
'        End If
        strMsg = strMsg1 & strMsg2
        gbiMsgBoxResponse = MsgBox(strMsg, vbInformation)
        Application.StatusBar = "Ready"
End Sub

Function CheckInterfaceValueValid() As Boolean
    Dim vbResponse As Integer
    CheckInterfaceValueValid = False
    'If OptionChannel.Value = True Then
        If CheckChNormal.Value = False And CheckChAuxiliary.Value = False And _
            CheckChStatistics.Value = False And CheckChSmartBattery.Value = False Then
            MsgBox "At least one box in Import Data Options should be checked!"
            CheckChNormal.SetFocus
            Exit Function
        End If
'    ElseIf OptionCell.Value = True Then
'        If CheckCellAll.Value = False And CheckCellAuxiliary.Value = False Then
'            MsgBox "At least one box in Import Data Options should be checked!"
'            CheckCellAll.SetFocus
'            Exit Function
'        End If
'    Else
'        Exit Function
'    End If
    
    If btnAdvanced.Caption <> BtnAdvancedCaption Then
        'Check Value
        If CheckCtrlState(InfoStr) = False Then Exit Function
    End If
       
'    If gfListBoxSelectedAtLeastOne(ListBoxChannelIndex) = False Then
'        MsgBox ("Please select channels to import!")
'        Exit Function
'    End If
    
    '--check to see if this is a overwitten file
    If bIsOverWrite = False Then    'When False, Check overwrite.
        If gbbOverwriteFiles = False Then
            On Error GoTo CheckInterfaceValueValid_Error
            If Dir(gFileNameOutput) <> "" Then
                vbResponse = MsgBox("Do you want to overwrite the existing file: " & _
                    gFileNameOutput & "? " & _
                    vbCr & "Click Yes, overwrite it." & _
                    vbCr & "Click No, change the Output File Name before importing." & _
                    vbCr & "Click Cancel, overwrite files without reminding next time.", _
                    vbYesNoCancel + vbQuestion + vbDefaultButton1, gszALERTTITLE)
                If vbResponse = vbNo Then GoTo CheckInterfaceValueValid_Exit
                If vbResponse = vbCancel Then
                    vbResponse = MsgBox("Overwrite files without reminding next time." & _
                    vbCr & "To remind again, uncheck [Overwrite files without reminding" & _
                    " after clicking Import button] in Arbin Data\Options...\Options1 menu." _
                    , vbOKOnly + vbInformation)
                    gbbOverwriteFiles = True
                    Call gfSaveMitsDataini
                End If
            End If
        End If
    End If
    
    CheckInterfaceValueValid = True
    
CheckInterfaceValueValid_Exit:
    On Error GoTo 0
    Exit Function

CheckInterfaceValueValid_Error:
    vbResponse = MsgBox("Invalid output file path " & gDirNameOutput & ". You should change that path.", _
                    vbCritical, gszALERTTITLE)
    GoTo CheckInterfaceValueValid_Exit
End Function

Function CheckFileValid() As Boolean
    Dim wbTemp As Workbook
    CheckFileValid = False
    If Not gDBOpen(gFileNameInput) Then Exit Function
   
    'For PPG Begin
    If gbPPGOn Then
        PPGForm.Show
        If giPPGOptionValue = -1 Then Exit Function
    End If
    'For PPG End
    
    '--Close the existing workbook
    Application.DisplayAlerts = False
    For Each wbTemp In Workbooks
        If UCase(wbTemp.FullName) = UCase(gFileNameOutput) Then
            wbTemp.Close SaveChanges:=False
            Exit For
        End If
    Next wbTemp
    CheckFileValid = True
End Function

Sub InterfaceMiscBegin()
    Me.Caption = "Importing data from " & LabelFileNameInput.Caption
    Me.MousePointer = fmMousePointerHourGlass
    btnCancel.MousePointer = fmMousePointerArrow
    ListBoxTestName.Enabled = False
    btnAdvanced.Enabled = False
    btnChangeFileNameInput.Enabled = False
    btnChangeFileNameOutput.Enabled = False
    btnImport.Enabled = False
    btnImportPlot.Enabled = False
    Call TextBoxPromptSet1
    Application.ScreenUpdating = False
    DoEvents
End Sub

Private Sub TextBoxPromptSet1()
    TextBoxPrompt0.ForeColor = &H8000000E
    TextBoxPrompt0.BackColor = &H80000001
    TextBoxPrompt0.TextAlign = fmTextAlignCenter
    If mbIsPlotAfterImport = True Then
        TextBoxPrompt0.Text = "Importing & Plotting data now. Please wait..."
    Else
        TextBoxPrompt0.Text = "Importing data now. Please wait..."
    End If
    
    TextBoxPrompt1.ForeColor = &H8000000E
    TextBoxPrompt1.BackColor = &H80000001
    TextBoxPrompt1.TextAlign = fmTextAlignCenter
    TextBoxPrompt1.Text = TextBoxPrompt0.Text
End Sub

Private Sub TextBoxPromptSet2()
    TextBoxPrompt0.ForeColor = &H8000000D
    TextBoxPrompt0.BackColor = &H80000000
    TextBoxPrompt0.TextAlign = fmTextAlignLeft
    TextBoxPrompt0.Text = "Operating completed!" '"Mits DataPro"
    TextBoxPrompt1.ForeColor = &H8000000D
    TextBoxPrompt1.BackColor = &H80000005
    TextBoxPrompt1.TextAlign = fmTextAlignLeft
    TextBoxPrompt1.Text = "Operating completed!" '"Mits DataPro"
End Sub

Function ReadArbinSysDataBase(strDaqChannelNum As String, _
    iTest_ID As Integer, iMaxCellNum As Integer) As Boolean
    Dim wkSheetName As String
    Dim swkName As String
    
    ReadArbinSysDataBase = False
    Sleep gSleepTime
    DoEvents
    If gbIsImporting = False Then Exit Function
    
    'Get Infomation from Global_Table
If Not ReadGlobalTableInfo(iTest_ID) Then
        gbNeedRefreshImportDialog = True
        If bExitAsked = False Then
            gbiMsgBoxResponse = MsgBox("The Test Name in MITS database has been changed. " & _
            vbCr & "The Data Import Dialog will be refreshed automatically when you click " & _
           vbCr & "[Arbin Data/Import MITS Results Data...] menu next time. " & _
            vbCr & "Exit importing?", _
            vbYesNo + vbQuestion + vbDefaultButton1, gszALERTTITLE)
            If gbiMsgBoxResponse = vbYes Then
                Exit Function
            Else
                bExitAsked = True
            End If
        End If
    End If
    If gbIsImporting = False Then Exit Function
    mPreSheetName = gbChannelName
    'Read Channel
    If (OptionChannel.Value = True And CheckChNormal.Value = True) Then   'Or _
        '(OptionCell.Value = True And CheckCellAuxiliary.Value = True) Then
        'Application.StatusBar = "Read Channel Data, Channel " & strDaqChannelNum
        Call ReadChannelFile(iTest_ID, strDaqChannelNum)
        If gbfVerSchema >= 4.145 And DataImportForm.CheckBoxEvent Then
            Call ReadEventsFile(iTest_ID, strDaqChannelNum)
            If gbIsImporting = False Then Exit Function
        End If
    End If
    If gbIsImporting = False Then Exit Function
    
    'Read Channel Auxiliary
    If (OptionChannel.Value = True And CheckChAuxiliary.Value = True) Then 'Or _
        '(OptionCell.Value = True And CheckCellAuxiliary.Value = True) Then
        If tGlobal_Table1.Log_Data_Flag(3) = True Then  'Log_Aux_Data_Flag
            'Application.StatusBar = "Read Auxiliary Data, Channel " & strDaqChannelNum
            wkSheetName = gbChannelName & "_" & strDaqChannelNum
            Call ReadAuxiliaryFile(iTest_ID, strDaqChannelNum, -1, wkSheetName)
        End If
    End If
    If gbIsImporting = False Then Exit Function

    'Read Channel Statistic
    If OptionChannel.Value = True And CheckChStatistics.Value = True Then
        If tGlobal_Table1.Log_Data_Flag(0) = True Then  'Log_ChanStat_Data_Flag
            'Application.StatusBar = "Read Channel Statistical Data, Channel " & strDaqChannelNum
            Call ReadChannelStatisticFile(iTest_ID, strDaqChannelNum)
            swkName = gbStatisticName & "s_" & strDaqChannelNum
            If HasSheetOf(swkName) Then
                Call gfCellGradingFilling(swkName)
 'Add filter for here
 '           Call FilterSameCycle(swkName) 'disable
                
            End If
        End If
    End If
    If gbIsImporting = False Then Exit Function
    

    'Read SmartBattery
    If OptionChannel.Value = True And CheckChSmartBattery.Value = True Then
        If tGlobal_Table1.Log_Data_Flag(4) = True Then
            mPreSheetName = gbSmartBatteryName
            Call ReadSmartBatteryInfo(iTest_ID)
            Call ReadSmartBatteryFile(iTest_ID, strDaqChannelNum)
            If gbfVerSchema >= 1.44 And DataImportForm.CheckBoxSMStretch Then
                Call ReadSmartBatteryClockStrechFile(iTest_ID, strDaqChannelNum)
            End If
                
        End If
    End If
    gbInfoSheetNowRow = gbInfoSheetNowRow + 1

    'The following is for multicell data, to be improved later Sandra
    If iMaxCellNum > 0 Then '--if this channel has cells
      If OptionCell.Value = True And CheckCellAll.Value = True Then
        'Read Cell Normal Data
        mPreSheetName = gbMultiCellChannelName
        If tGlobal_Table1.Log_Data_Flag(1) = True Then  'Log_CellNormal_Data_Flag
            Call ReadCellFile(iTest_ID, strDaqChannelNum, iMaxCellNum)
        End If
        'Read Cell Statistical Data
        If tGlobal_Table1.Log_Data_Flag(2) = True Then  'Log_CellStat_Data_Flag
            Call ReadCellStatisticFile(iTest_ID, strDaqChannelNum, iMaxCellNum)
        End If
      End If
      If gbIsImporting = False Then Exit Function
    
    End If   'If iMaxCellNum > 0 Then
    
    If gbfVerSchema >= 1.3 Then   'Add Cell_ACI sheet
        Call ReadChannelMcellFile(iTest_ID, strDaqChannelNum)
        If gbIsImporting = False Then Exit Function
    End If
    
    ReadArbinSysDataBase = True
End Function

Sub InterfaceMiscEnd()
    Me.Caption = "Import Data"
    Me.MousePointer = fmMousePointerDefault
    'btnCancel.MousePointer = fmMousePointerArrow
    ListBoxTestName.Enabled = True
    btnAdvanced.Enabled = True
    btnChangeFileNameInput.Enabled = True
    btnChangeFileNameOutput.Enabled = True
    btnImport.Enabled = True
    btnImportPlot.Enabled = True
    Call TextBoxPromptSet2
    Application.ScreenUpdating = True
    If OptionChannel.Value = True Then
        gbCheckChNormal = CheckChNormal.Value
        gbCheckChAuxiliary = CheckChAuxiliary.Value
        gbCheckChStatistics = CheckChStatistics.Value
        gbCheckChSmartBattery = CheckChSmartBattery.Value
    End If
    If OptionCell.Value = True Then
        gbCheckCellAll = CheckCellAll.Value
        gbCheckCellAuxiliary = CheckCellAuxiliary.Value
    End If
End Sub

Function MakeInfoSheetHead()
    Dim i As Integer, j As Integer
    If Not HasSheetOf(gbInfoSheetName) Then
        Call MadeNewSheet(ActiveWorkbook, gbInfoSheetName)
        On Error Resume Next
        With Worksheets(gbInfoSheetName)
            If gbbIsPrinterExist = True Then
                '.PageSetup.LeftFooter = "&D &T"
                .PageSetup.Orientation = xlLandscape
                .PageSetup.BlackAndWhite = False
            End If
            '.Cells.ColumnWidth = 12.78
            .Columns("A:E").HorizontalAlignment = xlLeft
            .Columns("A").ColumnWidth = 7#
            .Columns("B").ColumnWidth = 15#
            .Columns("C:D").ColumnWidth = 18#
            .Columns("E").ColumnWidth = 19.33  '29#  '58#
            i = 1: j = 4
            .cells(i, j) = "TEST REPORT"
            .cells(i, j).HorizontalAlignment = xlCenter
            .cells(i, j).Font.Name = "Times New Roman"
            .cells(i, j).Font.Size = 14
            .cells(i, j).Font.Underline = xlUnderlineStyleSingle
            .cells(2, j).HorizontalAlignment = xlCenter
            .cells(2, 12) = LabelFileNameInput.Caption
            .cells(3, 4) = Date
            .cells(3, 4).HorizontalAlignment = xlCenter 'xlRight
            i = 4: .cells(i, 1) = "Channel"
            .cells(i, 2) = "Start_DateTime"
            .cells(i, 3) = "Schedule_File_Name"
            .cells(i, 4) = "Creator"
            .cells(i, 5) = "Comments"
            
            With .Rows("4:4")
                .WrapText = True
                .Interior.ColorIndex = 35
                .Borders(xlEdgeLeft).LineStyle = xlContinuous
                .Borders(xlEdgeTop).LineStyle = xlContinuous
                .Borders(xlEdgeBottom).LineStyle = xlContinuous
                .Borders(xlEdgeRight).LineStyle = xlContinuous
                .Borders(xlInsideVertical).LineStyle = xlContinuous
            End With
            
            .Columns("F:G").ColumnWidth = 9.22   'F:G
            Range("F4:F4").HorizontalAlignment = xlRight
            .cells(i, 6) = "Chan_Num"
            '.Cells(I, 7) = "Cell_Num"
            
            j = 8    '8
            .Columns("H:L").ColumnWidth = 4.67     'H:L
            Range("H3:L3").Interior.ColorIndex = 34
            Range("H4:L4").HorizontalAlignment = xlRight
            .cells(i - 1, j) = "         Mapped_Aux_Number"
            .cells(i, j) = "Volt"
            .cells(i, j + 1) = "Temp"
            .cells(i, j + 2) = "Pres"
            .cells(i, j + 3) = "PH"
            .cells(i, j + 4) = "FR"
            
            j = 13   '13
            .Columns("M:R").ColumnWidth = 8.11    'M:R
            Range("M3:R3").Interior.ColorIndex = 33
            Range("M4:R4").HorizontalAlignment = xlCenter
            '.Cells(I - 1, J) = "                                   Log_Data_Flag                         "
            .cells(i - 1, j) = "                    Log_Data_Flag                "
            .cells(i, j) = "ChanStat"
            '.Cells(I, J + 1) = "CellNorm"
            '.Cells(I, J + 2) = "CellStat"
            .cells(i, j + 1) = "Aux"
            .cells(i, j + 2) = "SmartBty"
            .cells(i, j + 3) = "Event"
            
            gbiCellGrading = j + 4
            Range("Q3:S3").Interior.ColorIndex = 40
            'Range("Q4:S4").HorizontalAlignment = xlCenter
            .cells(i - 1, gbiCellGrading) = "                   Cell Grading          "
            .cells(i - 1, gbiCellGrading).AddComment
            .cells(i - 1, gbiCellGrading).Comment.Visible = False
            .cells(i - 1, gbiCellGrading).Comment.Text Text:= _
            "For Cell Grading setting, click Arbin Data\Options... menu."
            .cells(i, gbiCellGrading) = "Grade"
            .cells(i, gbiCellGrading + 1) = gbsCellGrading1Name
            .cells(i, gbiCellGrading + 2) = gbsCellGrading2Name
            .cells(i, gbiCellGrading).AddComment
            .cells(i, gbiCellGrading).Comment.Visible = False
            .cells(i, gbiCellGrading).Comment.Text Text:= _
            "For Cell Grading data, check average value from statistical data sheets." & _
                " Grade A1 is the best cell."
                
            .Range("B5").Select
            'add Item_ID column
            j = 7 'Q
            .cells(i, j) = " Item_ID"
            .cells(i, j).HorizontalAlignment = xlCenter
            j = 20 'T
            .Range("T3").Interior.ColorIndex = 48
            .Columns("T").ColumnWidth = 11    'T
            .cells(i - 1, j) = "Concentration"
            .cells(i, j) = "Concentration"
            .cells(i, j).HorizontalAlignment = xlCenter
            
            j = 21 'U
            Range("U3:V3").Interior.ColorIndex = 38
            .Columns("U:V").ColumnWidth = 5.7     'U:V
            .cells(i - 1, j) = "   Digital I/O"
            .cells(i, j).HorizontalAlignment = xlCenter
            .cells(i, j) = "Digital Input"
            .cells(i, j + 1) = "Digital Output"
            .cells(i, j + 2) = "Related Humidity"
            ActiveWindow.FreezePanes = True
            
            
        End With
        gbInfoSheetNowRow = 5
        On Error GoTo 0
    End If

End Function

Function ReadResultVersionTable()
    Dim strQuery As String, TestRec As Recordset, i As Integer
    gbsVerSchema = ""
    gbfVerSchema = 0#
    strQuery = "SELECT * FROM Version_Table;"
    On Error GoTo ReadResultVersionTableError
    Set TestRec = gDB.OpenRecordset(strQuery, dbOpenForwardOnly, dbReadOnly)
    gbsVerSchema = TestRec.Fields(1).Value
    gbfVerSchema = Val(Right$(gbsVerSchema, 5))
    TestRec.Close
    Set TestRec = Nothing
ReadResultVersionTableError:
    On Error GoTo 0
    DoEvents
End Function

Function ReadGlobalTableInfo(TestID As Integer) As Boolean
    Dim strQuery As String, TestRec As Recordset
    Dim i As Integer, j As Integer
    ReadGlobalTableInfo = False
    strQuery = "SELECT * FROM Global_Table Where ( [Test_ID] = " & TestID & ");"
    Set TestRec = gDB.OpenRecordset(strQuery, dbOpenForwardOnly, dbReadOnly)
    If TestRec.RecordCount <= 0 Then Exit Function
    On Error Resume Next
    With tGlobal_Table1
        .Test_ID = TestRec.Fields("Test_ID").Value
        .Test_Name = TestRec.Fields("Test_Name").Value
        .Channel_Index = TestRec.Fields("Channel_Index").Value
        .Start_DateTime = TestRec.Fields("Start_DateTime").Value
        .DAQ_Index = TestRec.Fields("DAQ_Index").Value
        .Channel_Type = TestRec.Fields("Channel_Type").Value
        .Creator = TestRec.Fields("Creator").Value
        .Comments = TestRec.Fields("Comments").Value
        .Schedule_File_Name = TestRec.Fields("Schedule_File_Name").Value
        .Channel_Number = TestRec.Fields("Channel_Number").Value
        '.Cell_Number = TestRec.Fields("Cell_Number").Value
        .Mapped_Aux_Number(0) = TestRec.Fields("Mapped_Aux_Voltage_Number").Value
        .Mapped_Aux_Number(1) = TestRec.Fields("Mapped_Aux_Temperature_Number").Value
        .Mapped_Aux_Number(2) = TestRec.Fields("Mapped_Aux_Pressure_Number").Value
        .Mapped_Aux_Number(3) = TestRec.Fields("Mapped_Aux_PH_Number").Value
        .Mapped_Aux_Number(4) = TestRec.Fields("Mapped_Aux_Flow_Rate_CNumber").Value
        If gbfVerSchema >= 1.14 Then
            .Mapped_Aux_Number(5) = TestRec.Fields("Mapped_Aux_Conc_CNumber").Value
            .Mapped_Aux_Number(6) = TestRec.Fields("Mapped_Aux_DI_CNumber").Value
            .Mapped_Aux_Number(7) = TestRec.Fields("Mapped_Aux_DO_CNumber").Value
        End If
        If gbfVerSchema >= 5.142 Then
            .Mapped_Aux_Number(8) = TestRec.Fields("Mapped_Aux_Relative_Humidity_CNumber").Value
        End If
        
        .Applications_Path = TestRec.Fields("Applications_Path").Value
        .Log_Data_Flag(0) = TestRec.Fields("Log_ChanStat_Data_Flag").Value
        '.Log_Data_Flag(1) = TestRec.Fields("Log_CellNormal_Data_Flag").Value
        '.Log_Data_Flag(2) = TestRec.Fields("Log_CellStat_Data_Flag").Value
        .Log_Data_Flag(3) = TestRec.Fields("Log_Aux_Data_Flag").Value
        .Log_Data_Flag(4) = TestRec.Fields("Log_Smart_Battery_Data_Flag").Value
        .Log_Data_Flag(5) = TestRec.Fields("Log_Event_Data_Flag").Value
        
        If gbfVerSchema >= 1.1 Then
            .Item_ID = TestRec.Fields("Item_ID").Value
        End If
        
    End With
    TestRec.Close
    Set TestRec = Nothing
    
   Rem Query Mapped_Anx_Concentration_CNumber,Mapped_Aux_Digital_Input_CNumber,Mapped_Aux_Digital_Output_CNumber
'    strQuery = "SELECT * FROM Auxiliary_Table Where ( [Test_ID] = " & TestID & ");"
'    Set TestRec = gDB.OpenRecordset(strQuery, dbOpenForwardOnly, dbReadOnly)
'    If TestRec.RecordCount <= 0 Then Exit Function
'    On Error Resume Next
    
'    TestRec.Close
'    Set TestRec = Nothing
    
    With Worksheets(gbInfoSheetName)
        i = gbInfoSheetNowRow
        .cells(2, 4) = Left$(tGlobal_Table1.Test_Name, Len(tGlobal_Table1.Test_Name) - 7)
        .cells(i, 1).NumberFormat = "@"
        .cells(i, 1) = tGlobal_Table1.DAQ_Index & "-" & Format$(tGlobal_Table1.Channel_Index, "000")
        .cells(i, 2) = tGlobal_Table1.Start_DateTime
        .cells(i, 2).NumberFormat = "mm/dd/yy hh:mm:ss"
        .cells(i, 3) = tGlobal_Table1.Schedule_File_Name
        .cells(i, 4) = tGlobal_Table1.Creator
        .cells(i, 5) = tGlobal_Table1.Comments
        
        .cells(i, 6) = tGlobal_Table1.Channel_Number
        '.Cells(I, 7) = tGlobal_Table1.Cell_Number
        
        j = 8   '8
        .cells(i, j) = tGlobal_Table1.Mapped_Aux_Number(0)
        .cells(i, j + 1) = tGlobal_Table1.Mapped_Aux_Number(1)
        .cells(i, j + 2) = tGlobal_Table1.Mapped_Aux_Number(2)
        .cells(i, j + 3) = tGlobal_Table1.Mapped_Aux_Number(3)
        .cells(i, j + 4) = tGlobal_Table1.Mapped_Aux_Number(4)
        
        If gbfVerSchema >= 1.14 Then
            j = 20
            .cells(i, j) = tGlobal_Table1.Mapped_Aux_Number(5)
        
            j = 21
            .cells(i, j) = tGlobal_Table1.Mapped_Aux_Number(6)
            .cells(i, j + 1) = tGlobal_Table1.Mapped_Aux_Number(7)
        End If
        If gbfVerSchema >= 5.142 Then
            .cells(i, j + 2) = tGlobal_Table1.Mapped_Aux_Number(8)
        End If
        j = 13  '13
        .cells(i, j) = tGlobal_Table1.Log_Data_Flag(0)
        '.Cells(I, J + 1) = tGlobal_Table1.Log_Data_Flag(1)
        '.Cells(I, J + 2) = tGlobal_Table1.Log_Data_Flag(2)
        .cells(i, j + 1) = tGlobal_Table1.Log_Data_Flag(3)
        .cells(i, j + 2) = tGlobal_Table1.Log_Data_Flag(4)
        .cells(i, j + 3) = tGlobal_Table1.Log_Data_Flag(5)
        
        j = 7 'Q
        .cells(i, j) = tGlobal_Table1.Item_ID
        .cells(i, j).HorizontalAlignment = xlLeft

    End With
    
    On Error GoTo 0
    DoEvents
    ReadGlobalTableInfo = True
End Function

Function ReadChannelFile(TestID As Integer, ChannelNum As String) As Boolean
    Dim Query As String, tempRec As Recordset, SQLQry As String
    Dim lCount As Long, rCount, pCount As Long
    Query = "SELECT " & GetSQLTopPercent(tOptionEdit1)
    If gCustom = "SAMSUNG" Then
    Query = Query & _
        " Data_Point," & _
        " Test_Time as [" & gbTestTimeName & "]," & _
        " DateTime as [" & gbDateTimeName & "]," & _
        " Step_Time as [" & gbStepTimeName & "]," & _
        " Step_Index," & _
        " Cycle_Index," & _
        " Current as [" & gbCurrentName & "]," & _
        " Voltage as [" & gbVoltageName & "]," & _
        " Discharge_Capacity as [" & gbDischargeCapacityName & "]," & _
        " Discharge_Energy as [" & gbDischargeEnergyName & "]," & _
        " [dV/dt] as [" & gbDVdtName & "]"
    Else
    Query = Query & _
        " Data_Point," & _
        " Test_Time as [" & gbTestTimeName & "]," & _
        " DateTime as [" & gbDateTimeName & "]," & _
        " Step_Time as [" & gbStepTimeName & "]," & _
        " Step_Index," & _
        " Cycle_Index," & _
        " Current as [" & gbCurrentName & "]," & _
        " Voltage as [" & gbVoltageName & "]," & _
        " Charge_Capacity as [" & gbChargeCapacityName & "]," & _
        " Discharge_Capacity as [" & gbDischargeCapacityName & "]," & _
        " Charge_Energy as [" & gbChargeEnergyName & "]," & _
        " Discharge_Energy as [" & gbDischargeEnergyName & "]," & _
        " [dV/dt] as [" & gbDVdtName & "]"
    End If
    If gbfVerSchema >= 1.05 Then
        Query = Query & ", Internal_Resistance as [" & gbInternalResistanceName & "]"
        If gCustom <> "SAMSUNG" Then Query = Query & ", Is_FC_Data"   'If gbbHighlightPulseRow Then
    End If
    'End If
    If gbfVerSchema >= 1.12 Then
        Query = Query & ", AC_Impedance as [" & gbACImpedanceName & "]"
    End If
    If gbfVerSchema = 1.13 Then
        Query = Query & ", ACI_Phase as [" & gbACPhaseName & "]"
    End If
    If gbfVerSchema >= 1.14 Then
        Query = Query & ", ACI_Phase_Angle as [" & gbACPhaseName & "]"
    End If
    
    'Query = Query & ", DateTime"
'Query point number of data from data base for each channel, if more then gCount*x
    Query = Query & " FROM Channel_Normal_Table Where ( Test_ID =" & TestID
    ' PreQuery for point counts
'    SQLQry = "Select Count(Data_Point) as rCount FROM Channel_Normal_Table Where ( Test_ID =" & TestID & GetSQLConditionPart("", tOptionEdit1) & ");"
'    Set tempRec = gDB.OpenRecordset(SQLQry, dbOpenForwardOnly, dbReadOnly)
'    lCount = tempRec.Fields("rCount").Value
'    tempRec.Close
'    Set tempRec = Nothing
'    If tOptionEdit1.OptionID = 6 Then
'            pCount = lCount * tOptionEdit1.NumEdit1 / 100
'            lCount = lCount - pCount
'            Query = Query & " AND (" & gbDataPointName & ">" & lCount & ")"
'            lCount = pCount
'    End If
    Query = Query & GetSQLConditionPart("", tOptionEdit1, TestID)

'    If lCount > gCount And mbIsPlotAfterImport = True And OptionsForm.CheckBoxPlotWarning Then
'        MsgBox ("Data Point more than " & gCount & ". The Auto-ploting is disabled? " & vbCr _
'            & "You may need to use 'Advance>>' to plot the data piece by piece to reduce the waiting time.")
'            mbIsPlotAfterImport = False
'    End If
    If gbfVerSchema >= 1.11 Then
        Query = Query & " ) ORDER BY Data_Point;"
    Else
        Query = Query & " ) ORDER BY Test_Time;"
    End If
    ReadChannelFile = ReadRecordToSheetLoop(gbChannelName & "_" & ChannelNum, Query, 1)
End Function

Function ReadChannelStatisticFile(TestID As Integer, ChannelNum As String) As Boolean
    Dim Query As String, tempRec As Recordset, SQLQry As String
    Dim lCount As Long, rCount As Long, pCount As Long
    Query = "SELECT " & GetSQLTopPercent(tOptionEdit1)  ' Channel_Normal_Table.Test_ID, Channel_Normal_Table.Data_Point,"
    Query = Query & _
        " nn.Cycle_Index," & _
        " nn.Test_Time as [" & gbTestTimeName & "]," & _
        " nn.DateTime as [" & gbDateTimeName & "]," & _
        " nn.Current as [" & gbCurrentName & "]," & _
        " nn.Voltage as [" & gbVoltageName & "]," & _
        " nn.Charge_Capacity as [" & gbChargeCapacityName & "]," & _
        " nn.Discharge_Capacity as [" & gbDischargeCapacityName & "]," & _
        " nn.Charge_Energy as [" & gbChargeEnergyName & "]," & _
        " nn.Discharge_Energy as [" & gbDischargeEnergyName & "]"
        
        If gCustom = "SCTS" Then Query = Query & ", nn.Discharge_Capacity/nn.Charge_Capacity as [Cap_Efficiency], " & _
                        " nn.Discharge_Energy/nn.Charge_Energy as [Energy_Efficiency] "
        
    If gbfVerSchema >= 1.05 Then
        Query = Query & ", nn.Internal_Resistance as [" & gbInternalResistanceName & "]"
    End If
    If gbfVerSchema >= 1.12 Then '02-12-2001
        Query = Query & ", nn.AC_Impedance as [" & gbACImpedanceName & "]"
    End If
    If gbfVerSchema = 1.13 Then
        Query = Query & ", nn.ACI_Phase as [" & gbACPhaseName & "]"
    End If
    If gbfVerSchema >= 1.14 Then
        Query = Query & ", ACI_Phase_Angle as [" & gbACPhaseName & "]"
    End If
    If gbfVerSchema >= 1.44 Then
        Query = Query & ", Charge_Time as [Charge_Time(s)], DisCharge_Time as [DisCharge_Time(s)] "
    End If
   

    Query = Query & ", ss.Vmax_On_Cycle as [" & gbVmaxOnCycleName & "]"
    Query = Query & " FROM Channel_Normal_Table AS nn INNER JOIN Channel_Statistic_Table AS ss"
    Query = Query & " ON (nn.Data_Point = ss.Data_Point) AND (nn.Test_ID = ss.Test_ID)"
    Query = Query & " WHERE (nn.Test_ID = " & TestID & ")"
    Query = Query & GetSQLConditionPart("nn.", tOptionEdit1, TestID)

' Added for all option active
'    SQLQry = "Select Count(nn.Cycle_Index) as rCount FROM Channel_Normal_Table AS nn INNER JOIN Channel_Statistic_Table AS ss  ON (nn.Data_Point = ss.Data_Point) AND (nn.Test_ID = ss.Test_ID) WHERE (nn.Test_ID = " & TestID & ")"
'    Set tempRec = gDB.OpenRecordset(SQLQry, dbOpenForwardOnly, dbReadOnly)
'    lCount = tempRec.Fields("rCount").Value
'    tempRec.Close
'    Set tempRec = Nothing
'    If tOptionEdit1.OptionID = 6 Then
'            pCount = lCount * tOptionEdit1.NumEdit1 / 100
'            lCount = lCount - pCount
'            Query = Query & " AND (" & gbDataPointName & ">" & lCount & ")"
'            lCount = pCount
'    End If
''    Query = Query & GetSQLConditionPart("nn.", tOptionEdit1, TestID)
'    If lCount > gCount And mbIsPlotAfterImport = True And OptionsForm.CheckBoxPlotWarning Then
'        If (MsgBox("Data Point more than " & gCount & ". Do you want to disable ploting after Import? " & vbCr _
'            & "Otherwise, you can click 'Advance>>' button to select proper section for view!", vbYesNo) = vbYes) Then
'            mbIsPlotAfterImport = False
'        End If
'    End If
    Query = Query & " ORDER BY nn.Test_Time;"
    ReadChannelStatisticFile = ReadRecordToSheetLoop(gbStatisticName & "s_" & ChannelNum, Query, 1)
End Function

Function ReadAuxiliaryFile(TestID As Integer, ChannelNum As String, CellIndex As Integer, SheetName As String) As Boolean
    Dim iColumnCount As Integer, iNum As Integer, iDataType As Integer, iStartA As Integer
    Dim wksheet As Excel.Worksheet, strTemp As String
    Dim AuxiIndexNum As Integer, MaxCellNum As Integer
    Dim strQry As String, iStartCol As Integer
    Dim rec As Recordset, iCell As Integer, iAuxTypeCount As Integer
    
    ReadAuxiliaryFile = False
    iColumnCount = ActiveSheet.Range("A1").End(xlToRight).Column                'after normal data sheet
    '--Read auxiliary for channel or cell:
    If AVSheet.Value Then
        iStartA = 1
        strTemp = SheetName & "(AV)"
        If Not HasSheetOf(SheetName & "(AV)") Then
        '    Call MadeNewSheet(ActiveWorkbook, strTemp)
            Worksheets(SheetName).Copy after:=Worksheets(SheetName)
            ActiveSheet.Name = strTemp
        End If
        iNum = tGlobal_Table1.Mapped_Aux_Number(iDataType)
        If iNum > 0 Then
            For AuxiIndexNum = 0 To iNum - 1
                If iColumnCount >= giMaxColumnsNum - 1 - Abs(gAuxRate) Then
                    MsgBox "2nd Voltage number too much to handle by Excel," & vbCr _
                    & "Please disable dX/dt on Options page or the exceeding part will be truncated!", vbOKOnly
                    Exit For
                End If
                Application.StatusBar = "Read 2nd Voltage Data, Channel " & ChannelNum & _
                    ", " & Trim(gAuxiDataTypeTitle(iDataType, 0)) & "_" & AuxiIndexNum + 1
                If ReadAuxiliaryRecord(TestID, ChannelNum, CellIndex, _
                    AuxiIndexNum, iDataType, iColumnCount, strTemp) = True Then
                        If gAuxRate Then
                            iColumnCount = iColumnCount + 2
                            Else
                            iColumnCount = iColumnCount + 1
                        End If
                End If
            Next AuxiIndexNum
        End If
        Else
        iStartA = 0
    End If
    iColumnCount = ActiveSheet.Range("A1").End(xlToRight).Column                'after normal data sheet
    If gbfVerSchema >= 5.142 Then
        iAuxTypeCount = 8
    Else
        iAuxTypeCount = 7
    End If
    For iDataType = iStartA To iAuxTypeCount

        'Data_type:  0->2nd V; 1->T; 2->P; 3->Ph; 4->Flow Rate; 5->Concentration; 6->Digital Input; 7->Digital Output; 8->Relative Humidity
        'If iColumnCount = 0 Then iColumnCount = 1
        
        If gCustom <> "SAMSUNG" Or (gCustom = "SAMSUNG" And (iDataType = 0 Or iDataType = 1 Or iDataType = 2 Or iDataType = 4 Or iDataType = 8)) Then

        iNum = tGlobal_Table1.Mapped_Aux_Number(iDataType)
        If iNum > 0 Then
            For AuxiIndexNum = 0 To iNum - 1
                If iColumnCount >= giMaxColumnsNum - 1 - Abs(gAuxRate) Then Exit Function
                Application.StatusBar = "Read Auxiliary Data, Channel " & ChannelNum & _
                    ", " & Trim(gAuxiDataTypeTitle(iDataType, 0)) & "_" & AuxiIndexNum + 1
                If ReadAuxiliaryRecord(TestID, ChannelNum, CellIndex, _
                    AuxiIndexNum, iDataType, iColumnCount, SheetName) = True Then
                        If gAuxRate Then
                            iColumnCount = iColumnCount + 2
                            Else
                            iColumnCount = iColumnCount + 1
                        End If
                End If
            Next AuxiIndexNum
        End If
        End If
    Next iDataType
    iColumnCount = iColumnCount + 1
    If gToyota And gbfVerSchema >= 1.3 Then 'Add fuel cell ACI data here
        strQry = "SELECT Max([Cell_Index]) AS MaxCellNum FROM MCell_Aci_Data_Table Where Test_ID=" & TestID & ";"
        Set rec = gDB.OpenRecordset(strQry, dbOpenForwardOnly, dbReadOnly)
        On Error GoTo Err_Exit
        If rec.EOF Then GoTo Err_Exit
            MaxCellNum = rec.Fields("MaxCellNum").Value
        Set rec = Nothing
        For iCell = 0 To MaxCellNum
            strQry = "Select ACI_" & iCell + 1 & " from (SELECT Channel_Normal_Table.Data_Point, IIf(IsNull([ACI]),0,[ACI]) AS ACI_" & iCell + 1 & ",IIf(IsNull([Cell_Index])," & iCell & ",[Cell_Index]) as CellIndex FROM Channel_Normal_Table LEFT JOIN MCell_Aci_Data_Table ON Channel_Normal_Table.Data_Point =MCell_Aci_Data_Table.Data_Point ) "
            strQry = strQry & " WHERE CellIndex =" & iCell & " Order by Data_Point;"
            If ReadRecordToSheetLoop(SheetName, strQry, iColumnCount) Then
                iColumnCount = iColumnCount + 1
            End If
        Next iCell
    End If
Err_Exit: If Err.Number <> 0 Then
MsgBox "Data_Pro Error:" & Err.Number & vbCrLf & Err.Description
End If
End Function

Function ReadAuxiliaryRecord(TestID As Integer, ChannelNum As String, CellIndex As Integer, _
    AuxiIndexNum As Integer, iDataType As Integer, iColumnCount As Integer, SheetName As String) As Boolean
    Dim Query As String, Query2 As String
    Dim AuxQry As String
    Dim AuxQryRec As Recordset
    Dim ColumnName As String
    Dim iChannelNo As Integer
    Dim iLoopRead As Integer
    ReadAuxiliaryRecord = False
    
    iChannelNo = Val(Right$(ChannelNum, 3))
    If gbfVerSchema >= 1.4 And gAuxRate Then gAuxRate = False: MsgBox "No Auxiliary Rate was provided by further Versoin And Rate Enable was Disable", vbOKOnly

    '--Define a query
    AuxQry = "SELECT "
    If gAuxRate Then
        AuxQry = AuxQry & "Auxiliary_Table.Data_Point,Auxiliary_Table.X,Auxiliary_Table.[dX/dt]"
        Else
        AuxQry = AuxQry & "Auxiliary_Table.Data_Point,Auxiliary_Table.X"
    End If
    If gbfVerSchema >= 1.21 Then
        If gbfVerSchema >= 1.4 Then
             AuxQry = AuxQry & ",Aux_Global_Data_Table.Nickname,Channel_Index "
        Else
        AuxQry = AuxQry & ",Auxiliary_Table.Nickname"
        End If
    End If
    
    AuxQry = AuxQry & " FROM Auxiliary_Table"

    If gbfVerSchema >= 1.4 Then
        AuxQry = AuxQry & " Inner Join  Aux_Global_Data_Table ON (Aux_Global_Data_Table.Auxiliary_Index = Auxiliary_Table.Auxiliary_Index) AND (Aux_Global_Data_Table.Data_Type = Auxiliary_Table.Data_Type) "
     End If
        AuxQry = AuxQry & " WHERE ((Auxiliary_Table.Test_ID=" & TestID
        If gbfVerSchema >= 1.4 Then
            AuxQry = AuxQry & "AND (Channel_Index=" & Val(Right(ChannelNum, 3)) - 1 & ")"
        End If
        AuxQry = AuxQry & ") AND (Auxiliary_Table.Auxiliary_Index=" & AuxiIndexNum
    '   AuxQry = AuxQry & ") AND (Cell_Index = " & CellIndex
        AuxQry = AuxQry & ") AND (Auxiliary_Table.Data_Type=" & iDataType & ") And (Test_ID=" & TestID & "))"
    Query = "SELECT"
    If gbfVerSchema >= 1.21 Then
        If gAuxRate Then
            Query = Query & " cc.Data_Point,aa.X,aa.[dX/dt],aa.Nickname FROM Channel_Normal_Table AS cc LEFT JOIN (" & AuxQry & ") AS aa"
            Else
            Query = Query & " cc.Data_Point,aa.X,aa.Nickname FROM Channel_Normal_Table AS cc LEFT JOIN (" & AuxQry & ") AS aa"
        End If
        Else
        If gAuxRate Then
            Query = Query & " cc.Data_Point,aa.X,aa.[dX/dt] FROM Channel_Normal_Table AS cc LEFT JOIN (" & AuxQry & ") AS aa"
            Else
            Query = Query & " cc.Data_Point,aa.X FROM Channel_Normal_Table AS cc LEFT JOIN (" & AuxQry & ") AS aa"
        End If
    End If
    Query = Query & " ON cc.Data_Point=aa.Data_Point Where cc.Test_ID=" & TestID & " "
    Query = Query & GetSQLConditionPart("cc.", tOptionEdit1, TestID) & " ORDER BY cc.Data_Point;"
'    On Error Resume Next
'    Set AuxQryDef2 = gDB.CreateQueryDef("AuxQry")
'    On Error GoTo 0
'    gDB.QueryDefs("AuxQry").Sql = Query
    
'    Query2 = "SELECT " & GetSQLTopPercent(tOptionEdit1)
'    Query2 = Query2 & " AuxQry.X, AuxQry.[dX/dt]"
'    Query2 = Query2 & " FROM AuxQry RIGHT JOIN Channel_Normal_Table AS cc"
'    Query2 = Query2 & " ON (AuxQry.Data_Point = cc.Data_Point)"
'    Query2 = Query2 & " AND (AuxQry.Test_ID = cc.Test_ID)"
'    Query2 = Query2 & " WHERE ((cc.Test_ID = " & TestID & ") "
'    Query2 = Query2 & GetSQLConditionPart("cc.", tOptionEdit1)
'    Query2 = Query2 & " ) ORDER BY cc.Data_Point;"

'    If CellIndex = -1 Then
'      ColumnName = ""  ' Channel's Auxi.
'    Else
'      ColumnName = "Cell_" & CellIndex & "_"  ' Cell's Auxi.
'    End If
        
    For iLoopRead = 1 To 20
'        ReadAuxiliaryRecord = ReadAuxRecordToSheet(SheetName, Query2, iColumnCount + 1, AuxiIndexNum, iDataType, iLoopRead)
        ReadAuxiliaryRecord = ReadAuxRecordToSheet(SheetName, Query, iColumnCount + 1, AuxiIndexNum, iDataType, iLoopRead)
        If ReadAuxiliaryRecord = True Then Exit Function
        If gbIsImporting = False Then Exit Function
        DoEvents
        Sleep gSleepTime '12-03-2001 speed up
    Next iLoopRead

End Function

Function ReadSmartBatteryInfo(TestID As Integer)
    Dim strQuery As String, TestRec As Recordset, i As Integer
    Dim j As Integer, iColumn As Integer
    iColumn = gbiCellGrading + 6
    strQuery = "SELECT * FROM Smart_Battery_Info_Table Where ( [Test_ID] = " & TestID & ");"
    On Error GoTo ReadSmartBatteryInfo_Error
    Set TestRec = gDB.OpenRecordset(strQuery, dbOpenForwardOnly, dbReadOnly)
    On Error Resume Next
    With Worksheets(gbInfoSheetName)
        j = gbInfoSheetNowRow
        If j = 5 Then
            'SmartBattery Title
            .Range("W3:AI3").Interior.ColorIndex = 24
            .cells(j - 2, iColumn) = "Smart Battery ====>      "
            j = j - 1
            .Columns("S:AE").ColumnWidth = 11.11
            .cells(j, iColumn) = "Manufacturer Access"
            .cells(j, iColumn + 1) = "Manufacturer Name"
            .cells(j, iColumn + 2) = "Manufacturer Date"
            .cells(j, iColumn + 3) = "Manufacturer Data"
            .cells(j, iColumn + 4) = "Design Capacity(Ah or 10Wh)"
            .cells(j, iColumn + 5) = "Design Voltage(V)"
            .cells(j, iColumn + 6) = "Specification Info"
            .cells(j, iColumn + 7) = "Serial Number"
            .cells(j, iColumn + 8) = "Device Name"
            .cells(j, iColumn + 9) = "Device Chemistry"
            .cells(j, iColumn + 10) = "FullCharge Capacity(Ah or 10Wh)"
            .cells(j, iColumn + 11) = "Charging Current(A)"
            .cells(j, iColumn + 12) = "Charging Voltage(V)"
            '.Cells(J - 1, iColumn + 10) = Date
'            .Cells(j, iColumn + 13) = "Flash60"
'            .Cells(j, iColumn + 14) = "Flash61"
'            .Cells(j, iColumn + 15) = "Flash62"
'            .Cells(j, iColumn + 16) = "Flash63"
'            .Cells(j, iColumn + 17) = "Flash64"
'            .Cells(j, iColumn + 18) = "Flash65"
'            .Cells(j, iColumn + 19) = "Flash66"
'            .Cells(j, iColumn + 20) = "Flash67"
'            .Cells(j, iColumn + 21) = "Flash68"
'            .Cells(j, iColumn + 22) = "Flash69"
'            .Cells(j, iColumn + 23) = "Flash6A"
'            .Cells(j, iColumn + 24) = "Flash6B"
'            .Cells(j, iColumn + 25) = "Flash6C"
'            .Cells(j, iColumn + 26) = "Flash6D"
'            .Cells(j, iColumn + 27) = "Flash6E"
'            .Cells(j, iColumn + 28) = "Flash6F"
'            .Cells(j, iColumn + 29) = "Flash70"
            j = j + 1
        End If
            .cells(j, iColumn) = TestRec.Fields("ManufacturerAccess").Value
            .cells(j, iColumn + 1) = TestRec.Fields("ManufacturerName")
            .cells(j, iColumn + 2) = TestRec.Fields("ManufacturerDate")
            .cells(j, iColumn + 2).NumberFormat = "mm/dd/yy"
            .cells(j, iColumn + 3) = TestRec.Fields("ManufacturerData")
            .cells(j, iColumn + 4) = TestRec.Fields("DesignCapacity")
            .cells(j, iColumn + 5) = TestRec.Fields("DesignVoltage")
            .cells(j, iColumn + 6) = TestRec.Fields("SpecificationInfo")
            .cells(j, iColumn + 7) = TestRec.Fields("SerialNumber")
            .cells(j, iColumn + 8) = TestRec.Fields("DeviceName")
            .cells(j, iColumn + 9) = TestRec.Fields("DeviceChemistry")
            .cells(j, iColumn + 10) = TestRec.Fields("FullChargeCapacity")
            .cells(j, iColumn + 11) = TestRec.Fields("ChargingCurrent")
            .cells(j, iColumn + 12) = TestRec.Fields("ChargingVoltage")
'            .Cells(j, iColumn + 13) = TestRec.Fields("Flash60")
'            .Cells(j, iColumn + 14) = TestRec.Fields("Flash61")
'            .Cells(j, iColumn + 15) = TestRec.Fields("Flash62")
'            .Cells(j, iColumn + 16) = TestRec.Fields("Flash63")
'            .Cells(j, iColumn + 17) = TestRec.Fields("Flash64")
'            .Cells(j, iColumn + 18) = TestRec.Fields("Flash65")
'            .Cells(j, iColumn + 19) = TestRec.Fields("Flash66")
'            .Cells(j, iColumn + 20) = TestRec.Fields("Flash67")
'            .Cells(j, iColumn + 21) = TestRec.Fields("Flash68")
'            .Cells(j, iColumn + 22) = TestRec.Fields("Flash69")
'            .Cells(j, iColumn + 23) = TestRec.Fields("Flash6A")
'            .Cells(j, iColumn + 24) = TestRec.Fields("Flash6B")
'            .Cells(j, iColumn + 25) = TestRec.Fields("Flash6C")
'            .Cells(j, iColumn + 26) = TestRec.Fields("Flash6D")
'            .Cells(j, iColumn + 27) = TestRec.Fields("Flash6E")
'            .Cells(j, iColumn + 28) = TestRec.Fields("Flash6F")
'            .Cells(j, iColumn + 29) = TestRec.Fields("Flash70")
    End With
    TestRec.Close
    Set TestRec = Nothing

ReadSmartBatteryInfo_Error:
    On Error GoTo 0
End Function

Function ReadSmartBatteryFile(TestID As Integer, ChannelNum As String) As Boolean
    Dim Query As String
    Query = "SELECT " & GetSQLTopPercent(tOptionEdit1)
    Query = Query & _
        " sb.Data_Point," & _
        " cc.Test_Time as [" & gbTestTimeName & "]," & _
        " cc.Step_Time as [" & gbStepTimeName & "]," & _
        " sb.Current as [" & gbCurrentName & "]," & _
        " sb.Voltage as [" & gbVoltageName & "]," & _
        " sb.Temperature as [" & gbTemperatureName & "]," & _
        " sb.AverageCurrent as [AverageCurrent(A)]," & _
        " sb.CycleCount," & _
        " sb.RemainingCapacityAlarm as [RemainingCapacityAlarm(mWH or 10mWH)], " & _
        " sb.RemainingTimeAlarm as [RemainingTimeAlarm(s)]," & _
        " '0x' & hex(sb.BatteryMode) as BatteryMode,sb.AtRate as [AtRate(A or 10W)]," & _
        " sb.AtRateTimeToFull as [AtRateTimeToFull(s)]," & _
        " sb.AtRateTimeToEmpty as [AtRateTimeToEmpty(s)]," & _
        " sb.AtRateOK,sb.MaxError," & _
        " sb.RelativeStateOfCharge as [RelativeStateOfCharge(%)]," & _
        " sb.AbsoluteStateOfCharge as [AbsoluteStateOfCharge(%)]," & _
        " sb.RemainingCapacity as [RemainingCapacity(mWH or 10mWH)]," & _
        " sb.RunTimeToEmpty as [RunTimeToEmpty(s)]," & _
        " sb.AverageTimeToEmpty as [AverageTimeToEmpty(s)]," & _
        " sb.AverageTimeToFull as [AverageTimeToFull(s)]," & _
        " ('0x' & Hex([sb.BatteryStatus])) as [BatteryStatus]," & _
        " ('0x' & hex([sb.Pack_Status])) as Pack_Status,hex(sb.Pack_Configuration) as Pack_Configuration,sb.VCELL4,sb.VCELL3,sb.VCELL2,sb.VCELL1"
        If gbfVerSchema = 1.43 Then
            Query = Query & _
            ",sb.Flash60,sb.Flash61,sb.Flash62,sb.Flash63,sb.Flash64,sb.Flash65,sb.Flash66,sb.Flash67,sb.Flash67,sb.Flash68," & _
            " sb.Flash69,sb.Flash6A,sb.Flash6B,sb.Flash6C,sb.Flash6D,sb.Flash6E,sb.Flash6F,sb.Flash70 "
        End If
        If gbfVerSchema >= 1.44 Then Query = Query & ",sb.ManufacturerAccess,sb.FullChargeCapacity "
        If gbfVerSchema > 1.21 Then Query = Query & ",sb.BroadCast,sb.GPIO1,sb.GPIO2 "

    'BatteryMode, BatteryStatus
    Query = Query & " FROM Channel_Normal_Table AS cc"
    Query = Query & " INNER JOIN Smart_Battery_Data_Table AS sb"
    Query = Query & " ON (cc.Data_Point = sb.Data_Point) AND (cc.Test_ID = sb.Test_ID)"
    Query = Query & " Where ( sb.Test_ID =" & TestID
    Query = Query & ")" & GetSQLConditionPart("sb.", tOptionEdit1, TestID) & " ORDER BY sb.Data_Point;"

    
    'SELECT Smart_Battery_Data_Table.*, Channel_Normal_Table.Test_Time, Channel_Normal_Table.Step_Time
    'FROM Channel_Normal_Table INNER JOIN Smart_Battery_Data_Table ON (Channel_Normal_Table.Data_Point = Smart_Battery_Data_Table.Data_Point) AND (Channel_Normal_Table.Test_ID = Smart_Battery_Data_Table.Test_ID)
    'ORDER BY Smart_Battery_Data_Table.Data_Point;
    ReadSmartBatteryFile = ReadRecordToSheetLoop(gbSmartBatteryName & "_" & ChannelNum, Query, 1)
End Function

Function ReadSmartBatteryClockStrechFile(TestID As Integer, ChannelNum As String) As Boolean
    Dim Query As String
    Query = "SELECT " & GetSQLTopPercent(tOptionEdit1)
    Query = Query & _
        " sc.Data_Point,sc.ManufacturerAccess,sc.RemainingCapacityAlarm," & _
        " sc.RemainingTimeAlarm,sc.BatteryMode,sc.AtRate,sc.AtRateTimeToFull," & _
        " sc.AtRateTimeToEmpty,sc.AtRateOK,sc.Temperature,sc.Voltage," & _
        " sc.Current,sc.AverageCurrent,sc.MaxError,sc.RelativeStateOfCharge," & _
        " sc.AbsoluteStateOfCharge,sc.RemainingCapacity,sc.FullChargeCapacity," & _
        " sc.RunTimeToEmpty,sc.AverageTimeToEmpty,sc.AverageTimeToFull," & _
        " sc.ChargingCurrent,sc.ChargingVoltage,sc.BatteryStatus," & _
        " sc.CycleCount,sc.DesignCapacity,sc.DesignVoltage," & _
        " sc.SpecificationInfo,sc.ManufacturerDate,sc.SerialNumber," & _
        " sc.ManufacturerName,sc.DeviceName,sc.DeviceChemistry,sc.ManufacturerData," & _
        " sc.Pack_Status,sc.Pack_Configuration,sc.VCELL4,sc.VCELL3,sc.VCELL2,sc.VCELL1"
    Query = Query & " FROM Smart_Battery_Clock_Stretch_Table as sc "
    Query = Query & " Where ( sc.Test_ID =" & TestID
    Query = Query & " )" & GetSQLConditionPart("sc.", tOptionEdit1, TestID) & " ORDER BY sc.Data_Point;"

    
    'SELECT Smart_Battery_Data_Table.*, Channel_Normal_Table.Test_Time, Channel_Normal_Table.Step_Time
    'FROM Channel_Normal_Table INNER JOIN Smart_Battery_Data_Table ON (Channel_Normal_Table.Data_Point = Smart_Battery_Data_Table.Data_Point) AND (Channel_Normal_Table.Test_ID = Smart_Battery_Data_Table.Test_ID)
    'ORDER BY Smart_Battery_Data_Table.Data_Point;
    ReadSmartBatteryClockStrechFile = ReadRecordToSheetLoop("Clock_Stretch" & "_" & ChannelNum, Query, 1)
End Function
Function ReadCellFile(TestID As Integer, ChannelNum As String, iMaxCellNum As Integer) As Boolean
    Dim Query As String, i As Integer
    For i = 1 To iMaxCellNum    '--this channel's total cell number
        Query = "SELECT"
        'If I = 1 Then Query = Query & " nn.Data_Point, nn.Test_Time, nn.Step_Index, nn.Cycle_Index, cc.Data_Point , cc.Cycle_Index,"
        If i = 1 Then
            Query = Query & " nn.Data_Point, nn.Test_Time, nn.DateTime, nn.Step_Time,"
            Query = Query & " nn.Step_Index, nn.Cycle_Index, nn.Current,"
        End If
        Query = Query & " cc.Voltage,"
        Query = Query & " cc.Charge_Capacity, cc.Discharge_Capacity,"
        Query = Query & " cc.Charge_Energy, cc.Discharge_Energy, "
        Query = Query & " cc.Vpeak, cc.Vvalley"
        If gbfVerSchema >= 1.09 Then Query = Query & ", cc.Internal_Resistance"
        Query = Query & " FROM Channel_Normal_Table AS nn INNER JOIN Cell_Normal_Table AS cc"
        Query = Query & " ON (nn.Data_Point = cc.Data_Point) AND (nn.Test_ID = cc.Test_ID)"
        Query = Query & " WHERE (((cc.Test_ID) =" & TestID & ") AND ((cc.Cell_Index) =" & i - 1 & "))"
        Query = Query & " ORDER BY nn.Test_Time, nn.Cycle_Index;"
        Application.StatusBar = "Read Cell Normal Data, Channel " & ChannelNum & ", Cell = " & i '& ", MaxCell = " & iMaxCellNum
        ReadCellFile = ReadCellToSheetLoop(gbMultiCellChannelName & "_" & ChannelNum, Query, i, iMaxCellNum, 6)
    Next i
End Function

Function ReadCellStatisticFile(TestID As Integer, ChannelNum As String, iMaxCellNum As Integer) As Boolean
    Dim Query As String, i As Integer
    For i = 1 To iMaxCellNum    '--this channel's total cell number
        Query = "SELECT"
        If i = 1 Then
            Query = Query & " nn.Cycle_Index, nn.Test_Time, nn.Current, nn.Voltage,"
        End If
        Query = Query & " cc.Charge_Capacity, cc.Discharge_Capacity,"
        Query = Query & " cc.Charge_Energy, cc.Discharge_Energy,"
        Query = Query & " ss.Vmax_On_Cycle"
        Query = Query & " FROM Channel_Normal_Table as nn"
        Query = Query & " INNER JOIN (Cell_Normal_Table as cc"
        Query = Query & " INNER JOIN Cell_Statistic_Table as ss"
        Query = Query & " ON (cc.Cell_Index = ss.Cell_Index) AND (cc.Data_Point = ss.Data_Point)"
        Query = Query & " AND (cc.Test_ID = ss.Test_ID))"
        Query = Query & " ON (nn.Data_Point = cc.Data_Point) AND (nn.Test_ID = cc.Test_ID)"
        Query = Query & " WHERE (((cc.Test_ID) =" & TestID & ") AND ((cc.Cell_Index) =" & i - 1 & "))"
        Query = Query & " ORDER BY nn.Test_Time, nn.Cycle_Index;"
        Application.StatusBar = "Read Cell Statistical Data, Channel " & ChannelNum & ", Cell = " & i '& ", MaxCell = " & iMaxCellNum
        ReadCellStatisticFile = ReadCellToSheetLoop(gbMultiCellStatisticName & "_" & ChannelNum, Query, i, iMaxCellNum, 3)
    Next i
End Function

Function ReadCellToSheetLoop(SheetName As String, strQuery As String, CellNum As Integer, iMaxCellNum As Integer, ChannelColNum As Integer) As Boolean
    Dim iLoopRead As Integer
    For iLoopRead = 1 To 20
        ReadCellToSheetLoop = ReadCellToSheet(SheetName, strQuery, CellNum, iMaxCellNum, ChannelColNum, iLoopRead)
        If ReadCellToSheetLoop = True Then Exit Function
        If gbIsImporting = False Then Exit Function
        DoEvents
        Sleep gSleepTime
    Next iLoopRead
End Function

Function ReadCellToSheet(SheetName As String, strQuery As String, _
    CellNum As Integer, iMaxCellNum As Integer, ChannelColNum As Integer, _
    iLoopRead As Integer) As Boolean
    Dim wksheet As Excel.Worksheet
    Dim recTemp As Recordset
    Dim SheetNameFull As String, strTemp As String
    Dim iPageCount As Integer, iFieldsCount As Integer
    Dim iCols As Integer
    Dim iStartCol As Integer
    
    ReadCellToSheet = False
    iPageCount = 0
    On Error GoTo ReadCellToSheet_Error
    Set recTemp = gDB.OpenRecordset(strQuery, dbOpenForwardOnly, dbReadOnly)
    On Error Resume Next
    Do While Not recTemp.EOF
        Sleep gSleepTime
        DoEvents
        If gbIsImporting = False Then Exit Function
      
        iPageCount = iPageCount + 1
        If iPageCount >= 2 Then
            If iPageCount = 2 And iStartCol = 1 Then ActiveSheet.Name = SheetName & "_" & 1
            SheetNameFull = SheetName & "_" & iPageCount
        Else
            SheetNameFull = SheetName
        End If
        'Make a new sheet
        If Not HasSheetOf(SheetNameFull) Then
            Call MadeNewSheet(ActiveWorkbook, SheetNameFull)
        End If
        Set wksheet = Worksheets(SheetNameFull)
        
        '--The first line of active sheet is titles
        iFieldsCount = recTemp.Fields.Count
        With wksheet
            If CellNum = 1 Then
                .cells.ColumnWidth = 11.22
                .Rows("1:1").WrapText = True
                '.Rows("1:1").RowHeight = 21.6
                iStartCol = 1
                For iCols = 0 To iFieldsCount - 1
                    strTemp = "": If iCols > ChannelColNum Then strTemp = "Cell" & CellNum & "_"
                    .cells(1, iCols + iStartCol).Value = strTemp & recTemp.Fields(iCols).Name
                Next iCols
            ElseIf CellNum > 1 Then
                iStartCol = .Range("A1").End(xlToRight).Column + 1
                For iCols = 0 To iFieldsCount - 1
                    strTemp = "Cell" & CellNum & "_"
                    .cells(1, iCols + iStartCol).Value = strTemp & recTemp.Fields(iCols).Name
                Next iCols
            End If
            If CellNum >= 1 Then
                .cells(2, iStartCol).CopyFromRecordset Data:=recTemp, maxrows:=glMaxRowsNum, maxcolumns:=iFieldsCount
            End If
            If CellNum = iMaxCellNum Then
                Call FormatSheetColumnsNumber(wksheet)
                Call CreateSheetSomeColumns(wksheet, iPageCount)
                'Call FormatSheet1stRow(wkSheet)
                .Range("B2").Select
                ActiveWindow.FreezePanes = True
            End If
            ReadCellToSheet = True
        End With
    Loop
    recTemp.Close
    Set recTemp = Nothing
    
    If ReadCellToSheet = False Then
        If gbbLogReadNullCount Then
            Call WriteErrorLogFile("(ReadCellToS) Null", SheetName, CSng(CellNum))
        End If
        ReadCellToSheet = True
    End If
ReadCellToSheet_Exit:
    On Error GoTo 0
    Exit Function

ReadCellToSheet_Error:
    If gbbLogTryCount Then
        Call WriteErrorLogFile("(ReadCellToS) Try " & iLoopRead, SheetName, CSng(CellNum))
    End If
    GoTo ReadCellToSheet_Exit
    
    'set sheet's column's width:
    'ColumnCount = ActiveSheet.Range("A1").End(xlToRight).Column
    'For I = 3 To ColumnCount
    '  Columns(I).ColumnWidth = 18
    '  'Worksheets(CellSheetName).range("A1").End(xlToRight).ColumnWidth = 20
    'Next I
    '--close record and database

End Function
Function ReadChannelMcellFile(TestID As Integer, ChannelNum As String) As Boolean
    Dim Query As String, tempRec As Recordset, SQLQry As String
    Dim lCount As Long, rCount As Long, pCount As Long
    Query = "SELECT " ' Channel_Normal_Table.Test_ID, Channel_Normal_Table.Data_Point,"
    Query = Query & _
        " nn.Data_Point," & _
        " nn.Test_Time as [" & gbTestTimeName & "]," & _
        " nn.Step_Index," & _
        " nn.Cycle_Index"

    Query = Query & ", ss.Cell_Index+1 as [Cell_Index],ss.ACI,ss.Phase_Shift "
    Query = Query & " FROM Channel_Normal_Table AS nn INNER JOIN MCell_Aci_Data_Table AS ss"
    Query = Query & " ON (nn.Data_Point = ss.Data_Point) AND (nn.Test_ID = ss.Test_ID)"
    Query = Query & " WHERE (nn.Test_ID = " & TestID & ")"

'    Query = Query & ", ss.Cell_Index+1 as [Cell_Index],ss.ACI,ss.Phase_Shift,ss.Voltage,ss.Current "
'    Query = Query & " FROM Channel_Normal_Table AS nn INNER JOIN MCell_Aci_Data_Table AS ss"
'    Query = Query & " ON (nn.Data_Point = ss.Data_Point) AND (nn.Test_ID = ss.Test_ID)"
'    Query = Query & " WHERE (nn.Test_ID = " & TestID & ")"
' Added for all option active
'    SQLQry = "Select Count(nn.Cycle_Index) as rCount FROM Channel_Normal_Table AS nn INNER JOIN Channel_Statistic_Table AS ss  ON (nn.Data_Point = ss.Data_Point) AND (nn.Test_ID = ss.Test_ID) WHERE (nn.Test_ID = " & TestID & ")"
'    Set tempRec = gDB.OpenRecordset(SQLQry, dbOpenForwardOnly, dbReadOnly)
'    lCount = tempRec.Fields("rCount").Value
'    tempRec.Close
'    Set tempRec = Nothing
'    If tOptionEdit1.OptionID = 6 Then
'            pCount = lCount * tOptionEdit1.NumEdit1 / 100
'            lCount = lCount - pCount
'            Query = Query & " AND (" & gbDataPointName & ">" & lCount & ")"
'            lCount = pCount
'    End If
    Query = Query & GetSQLConditionPart("nn.", tOptionEdit1, TestID)
'    If lCount > gCount And mbIsPlotAfterImport = True And OptionsForm.CheckBoxPlotWarning Then
'        If (MsgBox("Data Point more than " & gCount & ". Do you want to disable ploting after Import? " & vbCr _
'            & "Otherwise, you can click 'Advance>>' button to select proper section for view!", vbYesNo) = vbYes) Then
'            mbIsPlotAfterImport = False
'        End If
'    End If
    Query = Query & " ORDER BY nn.Test_Time,[Cell_Index];"
    ReadChannelMcellFile = ReadRecordToSheetLoop("Cell_ACI_" & ChannelNum, Query, 1)
    If HasSheetOf("Cell_ACI_" & ChannelNum) Then
    With ActiveWorkbook.Worksheets("Cell_ACI_" & ChannelNum)
        .Columns("A:E").Select
        Selection.AutoFilter
        .cells(1, 5).Select
    End With
    End If
    
End Function

Public Sub NotPlotAfterImport()
        mbIsPlotAfterImport = False
End Sub

Public Sub UnlockFile()
        bLockImportData = False
End Sub
Function ReadEventsFile(TestID As Integer, ChannelNum As String) As Boolean
    Dim Query As String
    Query = "SELECT "
    Query = Query & _
        " [DateTime] ," & _
        " Test_Time, " & _
        " Event_Describe"
    Query = Query & " FROM Event_Table "
    Query = Query & " Where Test_ID =" & TestID

    ReadEventsFile = ReadRecordToSheetLoop("Events_Log_" & ChannelNum, Query, 1)
    If HasSheetOf("Events_Log_" & ChannelNum) Then
        With ActiveWorkbook.Worksheets("Events_Log_" & ChannelNum)
            .Columns(1).NumberFormat = "mm/dd/yy hh:mm:ss"
            .Columns(1).ColumnWidth = 18
            .Columns(3).ColumnWidth = 100
        End With
    End If

End Function


Attribute VB_Name = "DellMulti"
Attribute VB_Base = "0{5CF3AC68-93BB-44BA-B581-C41CEA87D67E}{8544F630-C4A2-4EA2-A4B3-9BEF7CB5F9C2}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Option Base 1
Dim tOptionEdit1 As gMyTypeOptionEdit
Dim tGlobal_Table1 As gMyTypeGlobal_Table
Dim InfoStr$
Dim bIsOverWrite As Boolean
Dim bExitAsked As Boolean
Dim LastListViewSortColumn As Integer
Dim TestNameArray() As String
Dim ListBoxTestNameArray() As String
Dim iListViewTestNameCount As Integer
Dim fListBoxViewHeight As Single
Dim mTestName As String
Dim mQueryTestName As String
Dim mbIsMultifile As Boolean
Dim mMultifileName As String
Dim mbIsPlotAfterImport As Boolean
Dim mPreSheetName As String
Dim bLockImportData As Boolean
Dim mResponse As Integer
Dim mTempSaveFileNameInput As String
Dim mTempSaveFileNameOutput As String
Const BtnAdvancedCaption As String = "Advanced>>"


Private Sub btnAddChan_Click()

If MultiPage1.Value = 0 And ListBoxChannelIndex.ListCount > 0 Then
    Call AddChanFromPage1
Else
    If MultiPage1.Value = 1 And ListViewTestName.ListItems.Count > 0 Then
        If ListViewTestName.SelectedItem.Selected = True Then
            Call AddChanFromPage2
        End If
    End If
End If
End Sub

Private Sub btnAddFile_Click()
Dim fs, iFileCount As Integer, DataFilePath As String
Dim iFileNameLen As Integer, iPathLen As Integer, i As Integer
Dim bFind As Boolean
Dim ListBoxTestNameArray0() As String
    Dim fileToOpen As Variant
    Dim strFileName As String
    Dim iCount0 As Integer
    
    If gbIsImporting Then Exit Sub
    On Error GoTo btnAddFile_Error
    
    With ListBoxTestName
        If .ListCount > 0 Then
            iCount0 = .ListCount
            ReDim ListBoxTestNameArray0(iCount0, 2) As String
            For i = 1 To iCount0
              ListBoxTestNameArray0(i, 1) = ListBoxTestNameArray(i, 1)
              ListBoxTestNameArray0(i, 2) = ListBoxTestNameArray(i, 2)
            Next i
        Else
            iCount0 = 0
        End If
    End With
    
ChDir ("C:\ArbinSoftware\MITS_PRO\Data")

fs = Application.GetOpenFilename("MITS Pro/2000/97 Files (*.res), *.res", 5, "Open MITS Pro/2000/97 File", , True)
On Error GoTo Err_Exit
'ListBoxSelectedFiles.Clear

If LBound(fs) Then
    With ListBoxTestName

    strFileName = fs(1)
    DataFilePath = fGetDataDir(strFileName)
    iPathLen = Len(DataFilePath) + 1
    gDirNameInput = DataFilePath
    
'        For i = 0 To ListBoxSelectedFiles.ListCount - 1
'                .Selected(i) = False
'                .SetFocus
'        Next i
    
    For iFileCount = 1 To UBound(fs)
        strFileName = fs(iFileCount)
        iFileNameLen = Len(strFileName)
        strFileName = Right(strFileName, iFileNameLen - iPathLen)
        strFileName = Left(strFileName, Len(strFileName) - 4)
        
        bFind = False
'       .MultiSelect = fmMultiSelectMulti
       
       If ListBoxTestName.ListCount > 0 Then
        For i = 0 To ListBoxTestName.ListCount - 1
            If ListBoxTestName.List(i) = strFileName Then
'                .Selected(i) = True
                bFind = True
'                .SetFocus
                Exit For
            End If
        Next i
        End If
        If bFind = False Then
            .AddItem strFileName
           .Selected(.ListCount - 1) = True
           .SetFocus
        End If
    Next iFileCount
    .Selected(.ListCount - 1) = True
    .SetFocus
       If ListBoxTestName.ListCount > 0 Then btnRemoveFile.Enabled = True
       
     ReDim ListBoxTestNameArray(.ListCount, 2) As String
        For i = 0 To iCount0 - 1
            ListBoxTestNameArray(i + 1, 1) = ListBoxTestNameArray0(i + 1, 1)
            ListBoxTestNameArray(i + 1, 2) = ListBoxTestNameArray0(i + 1, 2)
'Debug.Print i + 1 & "=" & ListBoxTestNameArray(i + 1, 1) & ";" & ListBoxTestNameArray(i + 1, 2)
            
        Next i
        For i = iCount0 To .ListCount - 1
            ListBoxTestNameArray(i + 1, 1) = .List(i)
            ListBoxTestNameArray(i + 1, 2) = DataFilePath
'Debug.Print i + 1 & "=" & ListBoxTestNameArray(i + 1, 1) & ";" & ListBoxTestNameArray(i + 1, 2)
        Next i
        
     
    End With
End If

       
'        Call gfSaveMitsDataini
'        Call gDBClose
'        Call QueryTestName(gFileNameInput)
        
'        Call SetCheckBoxValueInDataImportForm
'        OptionChannel.Value = True
        'Call CheckTableDataExist
'        Call SelectLastTestName
    
    


btnAddFile_Error:
    Resume
Err_Exit:
    
End Sub

Private Sub BtnAdvanced_Click()
    If gbIsImporting Then Exit Sub
    Me.Hide
    Call BtnAdvancedClick
    Me.Show
End Sub
Function BtnAdvancedClick()
    If btnAdvanced.Caption = BtnAdvancedCaption Then
        SetCtrlStateByOption
        btnAdvanced.Caption = "Simple <<"
        btnAdvanced.ControlTipText = "Hide Advanced Dialog Box"
        Me.Width = 472.2   '390
        gbbBtnAdvanced = True
    Else
        If CheckCtrlState(InfoStr) = True Then
            'Value is OK, Simple the Form
            btnAdvanced.Caption = BtnAdvancedCaption
            btnAdvanced.ControlTipText = "Open Advanced Dialog Box"
            Me.Width = 258.8
            gbbBtnAdvanced = False
        End If
    End If
End Function

Function CheckCtrlState(strOutMsg As String) As Boolean
    'tOptionEdit1 As gMyTypeOptionEdit, Can not as parameter in Private
    Dim iEdit1 As Long, iEdit2 As Long, lFrom As Long, lTo As Long
    CheckCtrlState = True
    
    If OptionAll.Value = True Then
        tOptionEdit1.OptionID = 1
        strOutMsg = "All"
        Exit Function
    End If
    
    If OptionFirst.Value = True Then
        iEdit1 = Val(TextBoxFirst.Value)
        If iEdit1 <= 0 Or iEdit1 > 100 Then
            CheckCtrlState = False
            MsgBox "Value must be > 0 and <= 100"
            TextBoxFirst.SetFocus
            Exit Function
        End If
        tOptionEdit1.OptionID = 2
        tOptionEdit1.NumEdit1 = iEdit1
        strOutMsg = "First " & iEdit1 & " Percent Data Points"
    End If
    
    If OptionLast.Value = True Then
        iEdit1 = Val(TextBoxFirst.Value)
        If iEdit1 <= 0 Or iEdit1 > 100 Then
            CheckCtrlState = False
            MsgBox "Value must be > 0 and <= 100"
            TextBoxFirst.SetFocus
            Exit Function
        End If
        tOptionEdit1.OptionID = 6
        tOptionEdit1.NumEdit1 = iEdit1
        strOutMsg = "Last " & iEdit1 & " Percent Data Points"
    End If
    
    If OptionCycleNo.Value = True Then
        iEdit1 = Val(TextBoxCycleNo.Value)
        iEdit2 = Val(TextBoxCycleNoTo.Value)
        
        lFrom = Val(TextBoxStepFrom.Value)
        lTo = Val(TextBoxStepTo.Value)
        If iEdit1 <= 0 Then
            CheckCtrlState = False
            MsgBox "Cycle No. value must be > 0"
            TextBoxCycleNo.SetFocus
            Exit Function
        End If
        If iEdit2 <= 0 Then
            CheckCtrlState = False
            MsgBox "Cycle To. value must be > 0"
            TextBoxCycleNoTo.SetFocus
            Exit Function
        End If

        If lFrom <= 0 Then
            CheckCtrlState = False
            MsgBox "From Step value must be > 0"
            TextBoxStepFrom.SetFocus
            Exit Function
        End If
        If lTo < lFrom Then
            CheckCtrlState = False
            MsgBox "To Step value must be >= " & lFrom
            TextBoxStepTo.SetFocus
            Exit Function
        End If
        tOptionEdit1.OptionID = 3
        tOptionEdit1.NumEdit1 = iEdit1
        tOptionEdit1.NumEdit2 = iEdit2
        tOptionEdit1.FromEdit = lFrom
        tOptionEdit1.ToEdit = lTo
        strOutMsg = "Cycle No. from " & iEdit1 & " To " & iEdit2 & " ,  Step = " & lFrom & " To " & lTo
    End If
    
    If OptionCycleFrom.Value = True Then
        lFrom = Val(TextBoxCycleFrom.Value)
        lTo = Val(TextBoxCycleTo.Value)
        If lFrom <= 0 Then
            CheckCtrlState = False
            MsgBox "From Cycle value must be > 0"
            TextBoxCycleFrom.SetFocus
            Exit Function
        End If
        If lTo < lFrom Then
            CheckCtrlState = False
            MsgBox "To Cycle value must be >= " & lFrom
            TextBoxCycleTo.SetFocus
            Exit Function
        End If
        tOptionEdit1.OptionID = 4
        tOptionEdit1.FromEdit = lFrom
        tOptionEdit1.ToEdit = lTo
        strOutMsg = "Cycle = " & lFrom & " To " & lTo
    End If
        
    If OptionPointFrom.Value = True Then
        lFrom = Val(TextBoxPointFrom.Value)
        lTo = Val(TextBoxPointTo.Value)
        If lFrom <= 0 Then
            CheckCtrlState = False
            MsgBox "From Point value must be > 0"
            TextBoxPointFrom.SetFocus
            Exit Function
        End If
        If lTo < lFrom Then
            CheckCtrlState = False
            MsgBox "To Point value must be >= " & lFrom
            TextBoxPointTo.SetFocus
            Exit Function
        End If
        tOptionEdit1.OptionID = 5
        tOptionEdit1.FromEdit = lFrom
        tOptionEdit1.ToEdit = lTo
        strOutMsg = "Point = " & lFrom & " To " & lTo
    End If
End Function

Sub SetCtrlStateAllFalse()
    TextBoxFirst.Font.Bold = False
    TextBoxCycleNo.Font.Bold = False
    TextBoxCycleNoTo.Font.Bold = False
    TextBoxStepFrom.Font.Bold = False
    TextBoxStepTo.Font.Bold = False
    TextBoxCycleFrom.Font.Bold = False
    TextBoxCycleTo.Font.Bold = False
    TextBoxPointFrom.Font.Bold = False
    TextBoxPointTo.Font.Bold = False
    
    TextBoxFirst.Enabled = False
    TextBoxCycleNo.Enabled = False
    TextBoxCycleNoTo.Enabled = False
    TextBoxStepFrom.Enabled = False
    TextBoxStepTo.Enabled = False
    TextBoxCycleFrom.Enabled = False
    TextBoxCycleTo.Enabled = False
    TextBoxPointFrom.Enabled = False
    TextBoxPointTo.Enabled = False
End Sub

Sub SetCtrlStateByOption()
    'Application.ScreenUpdating = False
    Call SetCtrlStateAllFalse
    If OptionAll.Value = True Then
        'All false
    ElseIf OptionFirst.Value = True Then
        TextBoxFirst.Enabled = True
        TextBoxFirst.Font.Bold = True
    ElseIf OptionCycleNo.Value = True Then
        TextBoxCycleNo.Enabled = True
        TextBoxStepFrom.Enabled = True
        TextBoxStepTo.Enabled = True
        TextBoxCycleNo.Font.Bold = True
        TextBoxStepFrom.Font.Bold = True
        TextBoxStepTo.Font.Bold = True
        TextBoxCycleNoTo.Enabled = True
        TextBoxCycleNoTo.Font.Bold = True
    ElseIf OptionCycleFrom.Value = True Then
        TextBoxCycleFrom.Enabled = True
        TextBoxCycleTo.Enabled = True
        TextBoxCycleFrom.Font.Bold = True
        TextBoxCycleTo.Font.Bold = True
    ElseIf OptionPointFrom.Value = True Then
        'DataCombo.Enabled = False
        TextBoxPointFrom.Enabled = True
        TextBoxPointTo.Enabled = True
        TextBoxPointFrom.Font.Bold = True
        TextBoxPointTo.Font.Bold = True
    ElseIf OptionLast.Value = True Then
        TextBoxFirst.Enabled = True
        TextBoxFirst.Font.Bold = True
    End If
    'Application.ScreenUpdating = True
End Sub

Private Sub btnImportPlot_Click()
    gArea = 0   ' for current density and power density
    If gAutoRefreshEnable = False And btnAdvanced.Caption = "Advance >>" Then
        If (MsgBox("Using [Import and Plot] on large files may over consume system resources and cause program instability. " & vbCr & "It is recommended that you import the files from a remote PC or use [Advance>>] on smaller groups of channels.", vbOKCancel) = vbCancel) Then
            Exit Sub
        End If
        gSleepTime = 100
        If OptionsForm.CheckBoxImportWarning.Value Then
        Do While MsgBox("Is this PC running MITS test?", vbYesNo) <> vbYes
            If MsgBox("Are you sure this PC is not running any test! " & vbCr & "If Yes, click on 'Yes', otherwise click 'No' go back to previous page.", vbYesNo) = vbYes Then
                gSleepTime = 0
                Exit Do
            End If
        Loop
        End If
    End If
    gHasPloting = False
    mbIsPlotAfterImport = True
    Call ImportData
End Sub



Private Sub btnRemoveChan_Click()
Dim iIndex As Integer
Dim i, j, iCount As Integer
With ListViewSelectChan
    On Error GoTo Err_Exit
    j = 0
    
    For i = 1 To .ListItems.Count
      If .ListItems(i).Selected = True Then
        j = j + 1
      End If
    Next i
    If j > 1 Then
        MsgBox "Choose only one channel to remove, Please."
        Exit Sub
    Else
        If j < 1 Then
            MsgBox "Choose One Channel First, then Click 'Remove' Botten."
            Exit Sub
        End If
    End If
        

    If .ListItems.Count > 0 And .SelectedItem.index > 0 Then
        If .ListItems(.SelectedItem.index).Selected = True Then
            iIndex = .SelectedItem.index
            .ListItems.Remove (.SelectedItem.index)
        End If
    End If
    If .ListItems.Count <= 0 Then
        btnRemoveChan.Enabled = False
        btnSaveChan.Enabled = False
        btnImport.Enabled = False
        btnChangeFileNameOutput.Enabled = False
        gFileNameOutput = ""
        LabelFileNameOutput.Caption = gFileNameOutput

    Else
        If iIndex <= .ListItems.Count Then
          .ListItems(iIndex).Selected = True
          .SetFocus
        Else
          .ListItems(iIndex - 1).Selected = True
          .SetFocus
        End If
        gFileNameOutput = gDirNameOutput & "\" & ListViewSelectChan.ListItems(1).SubItems(2) & ".xls"
        LabelFileNameOutput.Caption = gFileNameOutput

    End If
    
End With


Err_Exit:

End Sub

Private Sub btnRemoveFile_Click()
Dim i As Integer, iIndex As Integer, iCount As Integer
Dim strRemoveFile As String
Dim ListBoxTestNameArray0() As String
With ListBoxTestName
If .ListCount > 0 Then
    iCount = .ListCount
    ReDim ListBoxTestNameArray0(iCount, 2) As String
    For i = 1 To iCount
        ListBoxTestNameArray0(i, 1) = ListBoxTestNameArray(i, 1)
        ListBoxTestNameArray0(i, 2) = ListBoxTestNameArray(i, 2)
    Next i
    For i = 0 To iCount - 1
    If .Selected(i) = True Then
        iIndex = i
        strRemoveFile = .List(i)
        .RemoveItem (i)
         Exit For
    End If
    Next i
    
 'when removed file's channel info are displayed in ListBoxChannelIndex, remove them .
    If ListBoxChannelIndex.ListCount > 0 Then
     If strRemoveFile = TestNameArray(1, 1) Then
        ListBoxChannelIndex.Clear
        ListViewTestName.ListItems.Clear
     End If
    End If
        
 
 ' When remove a test_name file, selected channels from the file are removed.
With ListViewSelectChan
If .ListItems.Count > 0 Then
    iCount = .ListItems.Count
    i = 1
    Do While i <= iCount
'    If .ListItems(i).SubItems(2) = strRemoveFile Then
    If .ListItems(i).SubItems(3) = ListBoxTestNameArray0(iIndex + 1, 2) & "\" & ListBoxTestNameArray0(iIndex + 1, 1) & ".res" Then
        .ListItems.Remove (i)
        iCount = iCount - 1
    Else
        i = i + 1
    End If
    Loop
End If

If .ListItems.Count <= 0 Then
    btnRemoveChan.Enabled = False
    btnImport.Enabled = False
    btnSaveChan.Enabled = False
    btnChangeFileNameOutput.Enabled = False
    gFileNameOutput = ""
    LabelFileNameOutput.Caption = gFileNameOutput
Else
    gFileNameOutput = gDirNameOutput & "\" & ListViewSelectChan.ListItems(1).SubItems(2) & ".xls"
    LabelFileNameOutput.Caption = gFileNameOutput
End If

End With

 
 
 End If


If .ListCount <= 0 Then
    btnRemoveFile.Enabled = False
    ListBoxChannelIndex.Clear
    ListViewTestName.ListItems.Clear
    btnAddChan.Enabled = False
Else
   ReDim ListBoxTestNameArray(.ListCount, 2) As String
    For i = 0 To iIndex - 1
        ListBoxTestNameArray(i + 1, 1) = ListBoxTestNameArray0(i + 1, 1)
        ListBoxTestNameArray(i + 1, 2) = ListBoxTestNameArray0(i + 1, 2)
        .Selected(i) = False
    Next i
     For i = iIndex To .ListCount - 1
        ListBoxTestNameArray(i + 1, 1) = ListBoxTestNameArray0(i + 2, 1)
        ListBoxTestNameArray(i + 1, 2) = ListBoxTestNameArray0(i + 2, 2)
        .Selected(i) = False
    Next i

   
'        For i = 0 To .ListCount - 1
'            ListBoxTestNameArray(i + 1) = .List(i)
'            .Selected(i) = False
'        Next i
        
        If iIndex < .ListCount Then
          .Selected(iIndex) = True
          .SetFocus
        Else
           .Selected(iIndex - 1) = True
          .SetFocus
        End If
End If
End With


'Debug.Print "ListCount=" & ListBoxTestName.ListCount

Err_Exit:

End Sub

Private Sub btnSaveChan_Click()
Call mfSaveDellMultiIni
End Sub

Private Sub CheckBoxSmartBatteryStat_Click()
gSmartBatteryStat = CheckBoxSmartBatteryStat.Value
End Sub


Private Sub CheckChNormal_Click()
    If CheckChNormal.Value = False Then CheckChAuxiliary.Value = False
End Sub

Private Sub CheckChAuxiliary_Click()
    If CheckChAuxiliary.Value = True Then CheckChNormal.Value = True
End Sub

Private Sub CommandAdd_Click()
    Dim sTimeStart As Single, sTimefinish As Single
    'Dim bSelectFlag As Boolean
    Dim i As Integer, j As Integer
    Dim iChannelList As Integer, iChanI As Integer
    Dim iTest_ID As Integer
    Dim strDaqChannelNum As String
    Dim strQry As String
    Dim recTemp1 As Recordset
    Dim strFilter As String
    Dim bNoTestID As Boolean

    'Dim wkSheetName As String
    'Dim iCellNum As Integer
    Dim iMaxCellNum As Integer
    Dim iDecimalPlacesBak As Integer
    
    
    If gbIsImporting Then Exit Sub
    If bLockImportData Then Exit Sub
    bLockImportData = True

    If Not CheckInterfaceValueValid Then GoTo UnLockImportData_Exit
    If Not CheckFileValid Then GoTo UnLockImportData_Exit
    Application.StatusBar = "Add Data to Current Workbook..."
    
    'If file is locked, when using network drive, give Error Message
    On Error GoTo UserForm_SaveAs_Error
    Application.DisplayAlerts = True
    
    gLastTestName = mTestName
    mbIsMultifile = False
    'If LCase(Right(gFileNameInput, 12)) = "arbinsys.res" Then
     If Right(gDirNameInput, 1) = "\" Then gDirNameInput = Left(gDirNameInput, Len(gDirNameInput) - 1)
        mMultifileName = gDirNameInput & "\" & mTestName & ".res"
        If gFileNameInput <> mMultifileName And Dir(mMultifileName) <> "" Then
            Call gDBClose
            If Not gDBOpen(mMultifileName) Then GoTo UnLockImportData_Exit
'            LabelFileNameInput.Caption = mMultifileName
            mbIsMultifile = True
            DoEvents
        End If
    'End If
    
    '--Start time
    sTimeStart = Timer
    Call InterfaceMiscBegin
    
TryImportAgain:
    
    For i = 1 To 16
        gLastSelectedChannel(i) = ""
    Next i
    
    gptImportChannelCount = 0
    gbIsImporting = True
    bExitAsked = False
    iChanI = 1
    iMaxCellNum = 0
    
    '--Read selected files (Channel numbers and TestID in the ListBoxChannelIndex)
    If Me.MultiPage1.Value = 0 Then
        iChannelList = ListBoxChannelIndex.ListCount
        For i = 0 To iChannelList - 1
          If ListBoxChannelIndex.Selected(i) = True Then
            strDaqChannelNum = Left(ListBoxChannelIndex.List(i, 0), 5)  '8/15/2001 18 chars, 1/23/2002 change to 5
            If iChanI < 17 Then
                gLastSelectedChannel(iChanI) = strDaqChannelNum
                iChanI = iChanI + 1
            End If
            bNoTestID = False
            If mbIsMultifile = True Then
                strFilter = "[Test_Name] = '" & mTestName & "-0" & strDaqChannelNum & "'"
                strQry = "SELECT [Test_ID] FROM Global_Table Where " & strFilter
                Set recTemp1 = gDB.OpenRecordset(strQry, dbOpenForwardOnly, dbReadOnly)
                If recTemp1.EOF Then
                    bNoTestID = True
                Else
                    iTest_ID = recTemp1.Fields(0)
                End If
            Else
                iTest_ID = Int(ListBoxChannelIndex.List(i, 1))
            End If
            If bNoTestID = False Then
                iMaxCellNum = ListBoxChannelIndex.List(i, 2)
                'gptImportChannelCount = gptImportChannelCount + 1
                If Not ReadArbinSysDataBase(strDaqChannelNum, iTest_ID, iMaxCellNum) Then GoTo CommandAdd_Click_Cancel
            End If
          End If   '      If ListBoxChannelIndex.Selected(i) = True Then
        Next i
    Else
       For i = 1 To iListViewTestNameCount
          If ListViewTestName.ListItems.Item(i).Selected = True Then
            strDaqChannelNum = Left(ListViewTestName.ListItems.Item(i).SubItems(1), 5) '8/15/2001 18 chars, 1/23/2002 change to 5
            If iChanI < 17 Then
                gLastSelectedChannel(iChanI) = strDaqChannelNum
                iChanI = iChanI + 1
            End If
            bNoTestID = False
            If mbIsMultifile = True Then
                strFilter = "[Test_Name] = '" & mTestName & "-0" & strDaqChannelNum & "'"
                strQry = "SELECT [Test_ID] FROM Global_Table Where " & strFilter
                Set recTemp1 = gDB.OpenRecordset(strQry, dbOpenForwardOnly, dbReadOnly)
                If recTemp1.EOF Then
                    bNoTestID = True
                Else
                    iTest_ID = recTemp1.Fields(0)
                End If
            Else
                iTest_ID = Left(ListViewTestName.ListItems.Item(i).Key, _
                            Len(ListViewTestName.ListItems.Item(i).Key) - 4)
            End If
            If bNoTestID = False Then
                iMaxCellNum = Right(ListViewTestName.ListItems.Item(i).Key, 3)
                'gptImportChannelCount = gptImportChannelCount + 1
                If Not ReadArbinSysDataBase(strDaqChannelNum, iTest_ID, iMaxCellNum) Then GoTo CommandAdd_Click_Cancel
            End If
          End If   '      ListViewTestName.ListItems.item(i).Selected = True
       Next i
    End If

    Application.DisplayAlerts = False
    
    If ActiveWorkbook.Worksheets.Count <= 1 And mbIsMultifile = True Then
        Call gDBClose
        If Not gDBOpen(gFileNameInput) Then GoTo UnLockImportData_Exit
'        LabelFileNameInput.Caption = gFileNameInput
        mbIsMultifile = False
        DoEvents
        If HasSheetOf(gbInfoSheetName) Then
            Sheets(gbInfoSheetName).Name = gbInfoSheetName & "1"
        End If
        Call MakeInfoSheetHead
        If HasSheetOf(gbInfoSheetName) And HasSheetOf(gbInfoSheetName & "1") Then
            Sheets(gbInfoSheetName & "1").Delete
        End If
        GoTo TryImportAgain
    End If
    
     'Call FormatDecimalPlacesTime
'    gbbHasHighPulseData = False
    Call ReverseI                   'Reverse Sign of Current
    Call ReverseV                   'Reverse sign of Voltage
    Call AddDayHourMinuteColumns    'Add minute, hour and day columns
    Call AddmAAndmVColumns          'Add mA and mV as unit columns
    Call AddPowerLoadColumns        'Add Power and Load columns
    Call AddIDColumns               'Add Current density columns
    Call AddPDColumns               'Add PowerDensity Columns
    Call AddCoulmColumns
    Call AddGroupCalcute            'Add Fuel Cell group calcute
    Call AddSmartBatteryStat        'Add Smartbattery Statistic Data
    Call FormatwkBookCellsColor
    If gbbHasHighPulseData = True Then
        iDecimalPlacesBak = giDecimalPlaces(1)
        If giDecimalPlaces(1) < gbiTimeForHighPulseData And giDecimalPlaces(1) <> -1 Then
            giDecimalPlaces(1) = gbiTimeForHighPulseData  'TestTime
            giDecimalPlaces(2) = giDecimalPlaces(1)  'StepTime
        End If
    End If
    If gbbHasHighPulseData = True Then
        giDecimalPlaces(1) = iDecimalPlacesBak
        giDecimalPlaces(2) = giDecimalPlaces(1)
    End If
    Call FormatDecimalPlaces

gbExistDataSheetAfterImport = gfSelectChannelSheet(ActiveWorkbook, mPreSheetName)
    If gbExistDataSheetAfterImport = False Then
        If mPreSheetName = gbSmartBatteryName Then
            mPreSheetName = gbChannelName
            gbExistDataSheetAfterImport = gfSelectChannelSheet(ActiveWorkbook, mPreSheetName)
        End If
    End If
    'For PPG Begin
    If gbPPGOn Then
        Call PPGMain
    End If
    'For PPG End
    Application.DisplayAlerts = True
    
    sTimefinish = Timer
   
    If ActiveWorkbook.Worksheets.Count > 1 Then
        Application.StatusBar = "Save Data to " & gFileNameOutput & " file."
        ActiveWorkbook.Save
        Application.StatusBar = "Imported from " & mMultifileName
        '& " " & _
        '    Format((sTimefinish - sTimeStart), "0.00") & "   " & InfoStr '/ 60
    gCommandHistory = True
    Else
        gbNeedRefreshImportDialog = True
        Call GiveSuggestMsg
    End If
    
CommandAdd_Click_Exit:
    Call InterfaceMiscEnd
    Call gDBClose
    ProcessingCommandBar
'    CommandAdd.Enabled = True
    CommandAdd.Enabled = False
    gbIsImporting = False
    On Error GoTo 0
    'DataImportForm.Hide
    gIsImportFormLoaded = False
    If mbIsPlotAfterImport = True Then
        If gbExistDataSheetAfterImport = True Then
'            DoEvents
            'SimplePlotDialog.Show
'            If gRefreshPrecess Or gAutoRefreshEnable Then
'               ActiveWorkbook.Worksheets(gwksActivePlotName).Activate
'            End If
            gbLastwkBookName = ActiveWorkbook.Name
            gbLastwkSheetName = ActiveSheet.Name
            mPreSheetName = Left$(gbLastwkSheetName, 7)
            
'            Call SimplePlotDialog.PlotGraphInWorkbook(ActiveWorkbook, mPreSheetName)
            Call PlotQuickGraph(ActiveWorkbook, mPreSheetName, iMaxCellNum)
'            DoEvents
            'Unload SimplePlotDialog
            'DoEvents
        End If
    End If
    
UnLockImportData_Exit:
    bLockImportData = False
 '    Unload Me
    Me.Hide
    'Debug.Print "Process time last:"; sTimefinish - sTimeStart; "s"
    Exit Sub
    
CommandAdd_Click_Cancel:
    MsgBox "Data Importing Canceled!"
'    gCommandHistory = False
    GoTo CommandAdd_Click_Exit

UserForm_SaveAs_Error:
    If Err.Number = 1004 Then
        MsgBox gFileNameOutput & " cann't save to read-only " _
            & "media device (like CD-ROM, read-only network drive )" _
            & "or the file has been locked by others. " _
            & "You should change the Output File Name. " _
            & "This problem may be caused by network drive. " _
            & "You'd better not to use network drive."
        Workbooks(ActiveSheet.Name).Close SaveChanges:=False
    End If
    gCommandHistory = False
    Resume CommandAdd_Click_Exit
End Sub


Private Sub LabelTestName_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    mbIsPlotAfterImport = True
    Call ImportData
End Sub

Private Sub ListBoxTestName_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
 '   mbIsPlotAfterImport = True
 '   Call ImportData
 
    Dim strFileName As String, i As Integer
    With ListBoxTestName
    If .ListCount > 0 And .ListIndex >= 0 Then
'        For i = 0 To .ListCount - 1
'            .Selected(i) = False
'            .SetFocus
'        Next i
        mQueryTestName = .List(ListBoxTestName.ListIndex)
        strFileName = ListBoxTestNameArray(.ListIndex + 1, 2) & "\" & ListBoxTestNameArray(.ListIndex + 1, 1) & ".res"
 '       strFileName = gDirNameInput & "\" & mQueryTestName & ".res"
'Debug.Print "FileName=" & strFileName
        Call QueryTestName(strFileName)
'        .Selected(.ListIndex) = True
'        .SetFocus
'        .MultiSelect = fmMultiSelectMulti

    Call PutListBoxChannelIndex(strFileName)
    If ListBoxChannelIndex.ListCount > 0 Then
        btnAddChan.Enabled = True
    End If
    If ListViewSelectChan.ListItems.Count > 0 Then
        btnImport.Enabled = True
    Else
        btnImport.Enabled = False
    End If
    
    
    End If
    End With
    

End Sub

Private Sub ListViewSelectChan_ColumnClick(ByVal ColumnHeader As MSComctlLib.ColumnHeader)
   If ListViewSelectChan.ListItems.Count <= 0 Then Exit Sub
    If LastListViewSortColumn = ColumnHeader.index Then
        If ListViewSelectChan.SortOrder = lvwDescending Then
            ListViewSelectChan.SortOrder = lvwAscending
        Else
            ListViewSelectChan.SortOrder = lvwDescending
        End If
    Else
        LastListViewSortColumn = ColumnHeader.index
        If InStr(1, ListViewSelectChan.ColumnHeaders(ColumnHeader.index), "Ch#") Then
            ListViewSelectChan.SortOrder = lvwDescending
        End If
    End If
    ListViewSelectChan.SortKey = ColumnHeader.index - 1
    ListViewSelectChan.Sorted = True
    gFileNameOutput = gDirNameOutput & "\" & ListViewSelectChan.ListItems(1).SubItems(2) & ".xls"
    LabelFileNameOutput.Caption = gFileNameOutput

End Sub
Private Sub ListViewTestName_Click()
   Dim i As Integer
   Dim strSelTest As String
   Dim bini As Boolean
   If ListViewTestName.ListItems.Count <= 0 Then Exit Sub
   bini = True
   For i = 1 To iListViewTestNameCount
        If ListViewTestName.ListItems.Item(i).Selected = True Then
            If bini = True Then
                mTestName = ListViewTestName.ListItems.Item(i).Text
                strSelTest = mTestName
                bini = False
                gFileNameExt = strSelTest & ".xls"
    If Right(gDirNameOutput, 1) = "\" Then gDirNameOutput = Left(gDirNameOutput, Len(gDirNameOutput) - 1)
                gFileNameOutput = gDirNameOutput & "\" & gFileNameExt
                LabelFileNameOutput.Caption = gFileNameOutput
                LabelFileNameOutput.Enabled = True
                Call DisplayNewFileName(mTestName)
               
                TextBoxPrompt1.Text = ListViewTestName.ListItems.Item(i).ListSubItems(4) & _
                    " " & ListViewTestName.ListItems.Item(i).ListSubItems(5)
                btnChangeFileNameOutput.Enabled = True
                btnImport.Enabled = True
'                btnImportPlot.Enabled = True
                Application.StatusBar = " 'Hold 'Ctrl' or 'Shift' key for Multi-selection."
            Else
                If ListViewTestName.ListItems.Item(i).Text <> strSelTest Then
                    ListViewTestName.ListItems.Item(i).Selected = False
                Else
                    TextBoxPrompt1.Text = " "
                End If
            End If
        End If
   Next i
   ' Debug.Print ListViewTestName.SelectedItem
End Sub

Private Sub ListViewTestName_ColumnClick(ByVal ColumnHeader As MSComctlLib.ColumnHeader)
    If LastListViewSortColumn = ColumnHeader.index Then
        If ListViewTestName.SortOrder = lvwDescending Then
            ListViewTestName.SortOrder = lvwAscending
        Else
            ListViewTestName.SortOrder = lvwDescending
        End If
    Else
        LastListViewSortColumn = ColumnHeader.index
        If InStr(1, ListViewTestName.ColumnHeaders(ColumnHeader.index), "Time") Then
            ListViewTestName.SortOrder = lvwDescending
        End If
    End If
    ListViewTestName.SortKey = ColumnHeader.index - 1
    ListViewTestName.Sorted = True
End Sub

Private Sub ListViewTestName_DblClick()
'    mbIsPlotAfterImport = True
'    Call ImportData
Call AddChanFromPage2
End Sub

Private Sub AddChanFromPage2()
    Dim mAddChNo, mChanArray() As String, i, iCount As Integer
    Dim itmX As ListItem
    
    On Error GoTo Err_Exit
    With ListViewSelectChan
    mAddChNo = ListViewTestName.SelectedItem.SubItems(1)
    If .ListItems.Count > 0 Then
     For iCount = 1 To .ListItems.Count
       If .ListItems(iCount).Key = mAddChNo Then
            For i = 1 To .ListItems.Count
                .ListItems(i).Selected = False
            Next i
            .ListItems(iCount).Selected = True
            .SetFocus
            MsgBox (" Channel " & mAddChNo & " was chosen! ")
            Exit Sub
       End If
     Next iCount
    End If
        If ListViewTestName.ListItems.Count > 0 And ListViewTestName.SelectedItem.Selected Then
            Set itmX = .ListItems.Add(, , ListViewTestName.SelectedItem.SubItems(1))           'ChannelIndex (ex:1-001)
                itmX.Key = ListViewTestName.SelectedItem.SubItems(1)                            'ChannelIndex (ex:1-001)
                itmX.SubItems(1) = ListViewTestName.SelectedItem.SubItems(5)                    'Item_ID (ex: ddd)
                itmX.SubItems(2) = ListViewTestName.SelectedItem.Text                           'Test_Name (ex: Function_a)
                itmX.SubItems(3) = ListBoxChannelIndex.Tag                                      'File Name (ex: C:\ArbinSoftWare\Data\Function_A.res)
                
                itmX.Tag = TestNameArray(i, 3)                                                   'TestID (57)
            .ListItems(.ListItems.Count).Selected = True
            .SetFocus
        End If
    For i = 1 To .ListItems.Count
        .ListItems(i).Selected = False
    Next i
             
     For i = 1 To .ListItems.Count
     If .ListItems(i).Key = mAddChNo Then
        .ListItems(i).Selected = True
        .SetFocus
        Exit For
     End If
    Next i

     End With
    If ListViewSelectChan.ListItems.Count > 0 Then
        btnRemoveChan.Enabled = True
        btnSaveChan.Enabled = True
        btnImport.Enabled = True
        btnChangeFileNameOutput.Enabled = True
        gFileNameOutput = gDirNameOutput & "\" & ListViewSelectChan.ListItems(1).SubItems(2) & ".xls"
        LabelFileNameOutput.Caption = gFileNameOutput
    End If

Err_Exit:

End Sub
Private Sub MultiPage1_Click(ByVal index As Long)
    Call FixListBoxViewSize
    'Me.Repaint
    If MultiPage1.Value = 1 Then
'        ListViewTestName.Refresh
        Application.StatusBar = "Click Title for Sorting."
        Call MapSelectedTestNameFromPage0To1
        'Call Page0ControlHide
    Else
        Application.StatusBar = "Ready"
        Call MapSelectedTestNameFromPage1To0
        'Call Page0ControlShow
    End If
End Sub

Private Sub Page0ControlHide()
    LabelTestName.Visible = False
    LabelChannelIndex.Visible = False
    ListBoxTestName.Visible = False
    ListBoxChannelIndex.Visible = False
End Sub

Private Sub Page0ControlShow()
    LabelTestName.Visible = True
    LabelChannelIndex.Visible = True
    ListBoxTestName.Visible = True
    ListBoxChannelIndex.Visible = True
End Sub

Private Sub MapSelectedTestNameFromPage0To1()
    Dim i As Integer, j As Integer, k As Integer
    Dim TestName As String
    k = 0
    btnAddFile.Enabled = False
    btnRemoveFile.Enabled = False
    If ListBoxTestName.ListIndex < 0 Then Exit Sub
    If ListBoxChannelIndex.ListCount <= 0 Then Exit Sub
    TestName = ListBoxTestName.List(ListBoxTestName.ListIndex)
    With ListViewTestName
        For i = 1 To iListViewTestNameCount
            If .ListItems.Item(i) = TestName Then
                j = gfGetListBoxIndex(ListBoxChannelIndex, .ListItems.Item(i).SubItems(1))
                .ListItems.Item(i).Selected = ListBoxChannelIndex.Selected(j)
                If .ListItems.Item(i).Selected = True Then
                    k = k + 1
                    If k = 1 Then
                        TextBoxPrompt1.Text = .ListItems.Item(i).ListSubItems(4)
                    Else
                        TextBoxPrompt1.Text = " "
                    End If
                End If
            Else
                .ListItems.Item(i).Selected = False
            End If
        Next i
    End With
End Sub

Private Sub MapSelectedTestNameFromPage1To0()
    Dim i As Integer, j As Integer, k As Integer
    Dim TestName As String, bExitSub As Boolean
    
    If ListBoxTestName.ListCount > 0 Then btnRemoveFile.Enabled = True
    btnAddFile.Enabled = True
    'Application.ScreenUpdating = False
    If ListBoxChannelIndex.ListCount <= 0 Then Exit Sub
  ' MultiPage1.Value = 1

    With ListViewTestName
        bExitSub = False
        For i = 1 To iListViewTestNameCount
            If .ListItems.Item(i).Selected Then
                TestName = .ListItems.Item(i)
                j = gfGetListBoxIndex(ListBoxTestName, TestName)
                If j < 0 Then
                    bExitSub = True
                    Exit For
                End If
                ListBoxTestName.Selected(j) = True
'                Call ListBoxTestName_Click
                Call gfListBoxClearSelected(ListBoxChannelIndex)
                k = i
                Exit For
            End If
        Next i
        If bExitSub = True Then Exit Sub
        
        If i > iListViewTestNameCount Then GoTo Exit_MapSelectedTestNameFromPage1To0

        For i = k To iListViewTestNameCount
            If TestName = .ListItems.Item(i) Then
                If .ListItems.Item(i).Selected Then
                    j = gfGetListBoxIndex(ListBoxChannelIndex, .ListItems.Item(i).SubItems(1))
                    ListBoxChannelIndex.Selected(j) = True
                End If
            End If
        Next i
    End With
Exit_MapSelectedTestNameFromPage1To0:
    Call FixListBoxViewSize
    MultiPage1.Value = 0
'    If ListBoxTestName.ListCount > 0 Then btnRemoveFile.Enabled = True
'    btnAddFile.Enabled = True
    'Application.ScreenUpdating = True

End Sub

Private Sub OptionAll_Click()
    SetCtrlStateByOption
End Sub

Private Sub OptionChannel_Click()
    CheckCellAll.Enabled = False
    CheckCellAuxiliary.Enabled = False
    'GroupChannel.Enabled = True
    CheckChNormal.Enabled = True
    If gbExistAuxiliary = True Then
        CheckChAuxiliary.Enabled = True
    Else
        CheckChAuxiliary.Enabled = False
    End If
    If gbExistChStatistics = True Then
        CheckChStatistics.Enabled = True
    Else
        CheckChStatistics.Enabled = False
    End If
    If gbExistSmartBattery = True Then
        CheckChSmartBattery.Enabled = True
    Else
        CheckChSmartBattery.Enabled = False
    End If
End Sub

Private Sub OptionCell_Click()
    Call OptionCellClick
End Sub

Private Sub OptionCellClick()
    CheckCellAll.Enabled = True
    If gbExistAuxiliary = True Then
        CheckCellAuxiliary.Enabled = True
    Else
        CheckCellAuxiliary.Enabled = False
    End If
    'GroupChannel.Enabled = False
    CheckChNormal.Enabled = False
    CheckChAuxiliary.Enabled = False
    CheckChStatistics.Enabled = False
    CheckChSmartBattery.Enabled = False
End Sub

Private Sub OptionCycleNo_Click()
    SetCtrlStateByOption
End Sub

Private Sub OptionFirst_Click()
    SetCtrlStateByOption
End Sub

Private Sub OptionCycleFrom_Click()
    SetCtrlStateByOption
End Sub

Private Sub OptionLast_Click()
    SetCtrlStateByOption
End Sub

Private Sub OptionPointFrom_Click()
    SetCtrlStateByOption
End Sub


Private Sub TextBoxCycleNoTo_Change()
If TextBoxCycleNoTo.Value < TextBoxCycleNo.Value Then TextBoxCycleNoTo.Value = TextBoxCycleNo.Value
End Sub

Private Sub TextBoxPrompt0_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    Dim strMsg As String
    strMsg = "[Import + Plot] Tips:" & _
    Chr$(13) & Chr$(13) & "For one Channel:" & _
    Chr$(13) & "  double-click a Channel Index." & _
    Chr$(13) & Chr$(13) & "For more Channels:" & _
    Chr$(13) & "  1. Select a Test Name." & _
    Chr$(13) & "  2. Select Channel Indexes (Hold 'Shift' or " & _
    Chr$(13) & "      'Ctrl' Key when you click Channel Index)." & _
    Chr$(13) & "  3. Double-click Test Name or " & mTestName & _
    Chr$(13) & "      or click Import+Plot button." & _
    Chr$(13) & Chr$(13) & "The chart will show the X,Y1,Y2 axes you used last time." & _
    Chr$(13)
    gbiMsgBoxResponse = MsgBox(strMsg, vbInformation, "Arbin Data Pro")
End Sub



Private Sub UserForm_Activate()
   Dim i, iCount As Integer
'    gCommandHistory = False
    ProcessingCommandBar
    bLockImportData = False
    
    gRefreshPrecess = False
    gAutoRefreshEnable = False
    mbIsPlotAfterImport = False 'every time active import form means something changed
    bIsOverWrite = False
    gbIsImporting = False

End Sub

Private Sub UserForm_Initialize()
Dim i, iCount As Integer

    If gFileNameInput <> "" Then
        mTempSaveFileNameInput = gFileNameInput
    Else
        mTempSaveFileNameInput = ""
    End If

    If gFileNameOutput <> "" Then
        mTempSaveFileNameOutput = gFileNameOutput
    Else
        mTempSaveFileNameOutput = ""
    End If
'Debug.Print "gFileNameInput = " & gFileNameInput
'Debug.Print "mtempSaveFileNameInput= " & mTempSaveFileNameInput

'Debug.Print "gFileNameOutput = " & gFileNameOutput
'Debug.Print "mtempSaveFileNameOutput= " & mTempSaveFileNameOutput

'    gCommandHistory = False
    If gCustom = "DELL" Then
        CheckBoxSMStretch.Enabled = True
        CheckBoxSmartBatteryStat.Enabled = True
        CheckBoxEvent.Enabled = True
    End If
    ProcessingCommandBar
    MultiPage1.Value = 0
    
   If mfReadDellMultiIni = False Then
        Call mfCreatDellMultiIni
    End If

'    mbIsPlotAfterImport = False
    bLockImportData = False
    Me.Width = 258.9
    fListBoxViewHeight = 133  '135.3
    btnAdvanced.Caption = BtnAdvancedCaption
    btnAdvanced.ControlTipText = "Open Advanced Dialog Box"
    If gbbBtnAdvanced = True Then
        Call BtnAdvancedClick
    End If
    bIsOverWrite = False       'True when MsgBox overwrite has been showed
    gbIsImporting = False
    
    gDirNameOutput = ThisWorkbook.Path
    
    If ListBoxTestName.ListCount > 0 Then
        btnRemoveFile.Enabled = True
        ListBoxTestName.Selected(0) = True
        ListBoxTestName.SetFocus
    Else
        btnRemoveFile.Enabled = False
    End If
    
    If ListBoxChannelIndex.ListCount > 0 Then
        btnAddChan.Enabled = True
    Else
        btnAddChan.Enabled = False
    End If
    
    If ListViewSelectChan.ListItems.Count > 0 Then
        btnRemoveChan.Enabled = True
        btnImport.Enabled = True
        btnSaveChan.Enabled = True
        gFileNameOutput = gDirNameOutput & "\" & ListViewSelectChan.ListItems(1).SubItems(2) & ".xls"
       LabelFileNameOutput.Caption = gFileNameOutput
    Else
        btnRemoveChan.Enabled = False
        btnImport.Enabled = False
        btnSaveChan.Enabled = False
    End If
'    Call QueryTestName(gFileNameInput)
    'ListBoxTestName.ControlTipText = "Choose a Test Name"
    'ListBoxChannelIndex.ControlTipText = "Hold 'Shift' or 'Ctrl' Key for Multi-selection"
'    Call FixListBoxViewSize
    'ListBoxChannelIndex.Height = fListBoxViewHeight + 0.1
    
'    CheckChNormal.Value = True
    'CheckChNormal.Value = gbCheckChNormal
    'CheckChAuxiliary.Value = gbCheckChAuxiliary
    'CheckChStatistics.Value = gbCheckChStatistics
    
    'Call CheckTableDataExist
    
'    If gbbOpenFileDialogAuto = True Then
'        Application.StatusBar = "To disable this Dialog, click Arbin Data\Options...\Options1 menu"
'        Call btnChangeFileNameInput_Click
'    End If
'    Call SelectLastTestName
'    If ListViewSelectChan.ListItems.Count > 0 Then
'        gFileNameOutput = gDirNameOutput & "\" & ListViewSelectChan.ListItems(1).SubItems(2) & ".xls"
'       LabelFileNameOutput.Caption = gFileNameOutput
'    End If

    If gbbOpenImportDataDialog And Application.Workbooks.Count < 1 Then
        Application.StatusBar = "To disable this Dialog, click Arbin Data\Options...\Options1 menu"
    End If
End Sub

Private Function SelectLastTestName()
    Dim i As Integer, bSelected As Boolean
    bSelected = False
    If ListBoxTestName.ListCount > 0 Then
        If gLastTestName <> "" Then
            For i = 0 To ListBoxTestName.ListCount - 1
                If ListBoxTestName.List(i) = gLastTestName Then
                    ListBoxTestName.Selected(i) = True
                    bSelected = True
                    Exit For
                End If
            Next i
        End If
        If bSelected = False Then
            gLastTestName = gLatestTestName
            For i = 0 To ListBoxTestName.ListCount - 1
                If ListBoxTestName.List(i) = gLastTestName Then
                    ListBoxTestName.Selected(i) = True
                    Exit For
                End If
            Next i
        End If
    End If
    
End Function

Private Function FixListBoxViewSize()
'    ListBoxTestName.Height = fListBoxViewHeight
'    ListBoxChannelIndex.Height = fListBoxViewHeight
'    ListViewTestName.Height = 8 + fListBoxViewHeight
'    ListViewTestName.Width = 226.2
End Function

Private Function CheckTableDataExist()
    Call CheckAuxiliaryExist
    Call CheckChStatisticsExist
    Call CheckSmartBatteryExist
    'Call CheckMultiCellExist
End Function

Private Function CheckSmartBatteryExist()
    If gbExistSmartBattery = True Or gfCheckDataBaseTableExist("Smart_Battery_Data_Table") Then
        gbExistSmartBattery = True
        CheckChSmartBattery.Enabled = True
        'CheckChSmartBattery.Value = gbCheckChSmartBattery    'Canceled caused by Multifile 06/99
        CheckChSmartBattery.Value = True
    Else
        gbExistSmartBattery = False
        CheckChSmartBattery.Enabled = False
        CheckChSmartBattery.Value = False
    End If
End Function

Private Function CheckMultiCellExist()
    If gbExistMultiCell = True Or gfCheckDataBaseTableExist("Cell_Normal_Table") Then
        gbExistMultiCell = True
        OptionCell.Enabled = True
        OptionCell.Value = True
        'CheckCellAll.Value = gbCheckCellAll   'Canceled caused by Multifile 06/99
        'CheckCellAuxiliary.Value = gbCheckCellAuxiliary   'Canceled caused by Multifile 06/99
        CheckCellAll.Value = True
        If gbExistAuxiliary = True Then
            CheckCellAuxiliary.Value = True
        Else
            CheckCellAuxiliary.Value = False
        End If
    Else
        gbExistMultiCell = False
        OptionCell.Enabled = False
        CheckCellAll.Enabled = False
        CheckCellAll.Value = False
        CheckCellAuxiliary.Enabled = False
        CheckCellAuxiliary.Value = False
        OptionChannel.Value = True
    End If
End Function

Private Function CheckAuxiliaryExist()
    If gbExistAuxiliary = True Or gfCheckDataBaseTableExist("Auxiliary_Table") Then
        gbExistAuxiliary = True
        CheckChAuxiliary.Enabled = True
        CheckChAuxiliary.Value = True
    Else
        gbExistAuxiliary = False
        CheckChAuxiliary.Enabled = False
        CheckChAuxiliary.Value = False
    End If
End Function

Private Function CheckChStatisticsExist()
    If gbExistChStatistics = True Or gfCheckDataBaseTableExist("Channel_Statistic_Table") Then
        gbExistChStatistics = True
        CheckChStatistics.Enabled = True
        CheckChStatistics.Value = True
    Else
        gbExistChStatistics = False
        CheckChStatistics.Enabled = False
        CheckChStatistics.Value = False
    End If
End Function

Private Function gDBOpen(DBFileName As String) As Boolean
    gDBOpen = False
    If gbDBIsOpen = False Then
        On Error GoTo gDBOpen_Error
        Set gDB = DBEngine.OpenDatabase(DBFileName, True, True)
            gbDBIsOpen = True
    End If
    gDBOpen = True
gDBOpen_Exit:
    On Error GoTo 0
    DoEvents
    Exit Function
gDBOpen_Error:
    Beep
    Select Case Err.Number
        Case 3050:
'        MsgBox "You should have the Change permission to the folder containing the result file " & _
            DBFileName
        mResponse = MsgBox("Are you import the result file from CD or Network drive?", vbYesNo)
        If mResponse = vbYes Then
            Set gDB = DBEngine.OpenDatabase(DBFileName, True, True)
            gbDBIsOpen = True
            gDBOpen = True
        Else
            MsgBox Err.Description & "you cann't import file " & DBFileName
            Set gDB = Nothing
            gbDBIsOpen = False
        End If
        Case 3356
        Set gDB = DBEngine.OpenDatabase(DBFileName, False, False)
            gDBOpen = True
        Case 429:
        MsgBox "Microsoft DAO 3.6 was missing by System, try install from Mits's CD! "
        Case 55:
        MsgBox Err.Description & Chr(13) & "Open DataBase " & DBFileName & " Error." & Err.Number & _
            "Probable was locked by other application, if you use network device, Map it as network drive and try again!"
            gDB.Close
            Set gDB = Nothing
            gbDBIsOpen = False
 
        Case 3343
        MsgBox Err.Description & Chr(13) & "Open DataBase " & DBFileName & " Error." & Err.Number
        Case Else
    End Select
    GoTo gDBOpen_Exit
End Function

Private Sub gDBClose()
On Error Resume Next
    If gbDBIsOpen = True Then
        gDB.Close
        Set gDB = Nothing
        gbDBIsOpen = False
    End If
End Sub

Private Sub btnChangeFileNameInput_Click()
    Dim fileToOpen As Variant
    If gbIsImporting Then Exit Sub
    On Error GoTo btnChangeFileNameInput_Error
    ChDir gDirNameInput
    On Error GoTo 0
    fileToOpen = Application.GetOpenFilename("MITS Pro/2000/97 Files (*.res), *.res", 5, "Open MITS Pro/2000/97 File")
    If fileToOpen <> False Then
        'gFileNameInput = gDirNameInput & "\ArbinSys.res"
        gDirNameInput = CurDir
        gFileNameInput = fileToOpen
        Call gfSaveMitsDataini
        Call gDBClose
        Call QueryTestName(gFileNameInput)
        
        Call SetCheckBoxValueInDataImportForm
        OptionChannel.Value = True
        'Call CheckTableDataExist
        Call SelectLastTestName
    
    End If
    Exit Sub

btnChangeFileNameInput_Error:
    gDirNameInput = ThisWorkbook.Path
    Resume
End Sub

Private Sub QueryTestName(DBFileName As String)
    Dim TestName As String, strQry As String, strLastName As String
    Dim fldTest As Field, fldTime As Field, fldSdu As Field, fldCom As Field
    Dim fldID As Field, fldCell As Field, fldItemID As Field
    Dim recTemp1 As Recordset
    Dim itmX As ListItem
    Dim i As Integer
    Dim fVerSchema As Single
    Dim tTime As Variant, tData_Type As Variant
    
    MultiPage1.Value = 1 'Force Page1 Select
    Me.MousePointer = fmMousePointerHourGlass
    Application.StatusBar = "Querying Test Name from " & DBFileName & " file."
'    LabelFileNameInput.Caption = DBFileName
    LabelFileNameOutput.Enabled = False
    btnChangeFileNameOutput.Enabled = False
    btnImport.Enabled = False
'    btnImportPlot.Enabled = False
    Call gDBClose
    If gDBOpen(DBFileName) Then
       
        Call ReadResultVersionTable
        fVerSchema = gbfVerSchema
        'ListViewTestName
        strQry = "SELECT [Test_Name], " _
            & " Start_DateTime, Schedule_File_Name, Comments, Test_ID"
        'If fVerSchema < 1.11 Then strQry = strQry & ", Cell_Number"
        If fVerSchema >= 1.1 Then strQry = strQry & ", Item_ID"
        strQry = strQry & " FROM Global_Table ORDER BY [Test_Name];"
        
        Set recTemp1 = gDB.OpenRecordset(strQry, dbOpenForwardOnly, dbReadOnly)
        Set fldTest = recTemp1.Fields(0)
        Set fldTime = recTemp1.Fields(1)
        Set fldSdu = recTemp1.Fields(2)
        Set fldCom = recTemp1.Fields(3)
        Set fldID = recTemp1.Fields(4)
        'Set fldCell = recTemp1.Fields(5)
        'If fVerSchema >= 1.1 Then Set fldItemID = recTemp1.Fields(6)
        If fVerSchema >= 1.1 Then Set fldItemID = recTemp1.Fields(5)
        
        tTime = 0: gLatestTestName = ""
'        ListBoxTestName.Clear:        ListBoxChannelIndex.Clear
        ListViewTestName.ListItems.Clear
        On Error Resume Next
        While Not recTemp1.EOF
            TestName = Left$(fldTest, Len(fldTest) - 7)
            Set itmX = ListViewTestName.ListItems.Add(, , TestName)
            'itmX.Key = CStr(fldID) & "-" & Format$(CStr(fldCell), "000")
            itmX.Key = CStr(fldID)                  '& "-000"
            itmX.SubItems(1) = Right$(fldTest, 5)
            If Not IsNull(fldTime) Then
                'itmX.SubItems(1) = CStr(recTemp1!Start_DateTime)
                itmX.SubItems(2) = Format$(fldTime, "yyyy/mm/dd hh:mm:ss")
                If fldTime > tTime Then
                    tTime = fldTime
                    gLatestTestName = TestName
                End If
            Else
                itmX.SubItems(2) = ""
            End If
            If Not IsNull(fldSdu) Then
                itmX.SubItems(3) = CStr(fldSdu)
            Else
                itmX.SubItems(3) = ""
            End If
            If Not IsNull(fldCom) Then
                itmX.SubItems(4) = fldCom
            Else
                itmX.SubItems(4) = ""
            End If
            itmX.SubItems(5) = ""
            If fVerSchema >= 1.1 Then
                If Not IsNull(fldItemID) Then
                    itmX.SubItems(5) = fldItemID
                End If
            End If
            
'            If ListBoxTestName.ListCount = 0 Then
'                ListBoxTestName.AddItem (TestName)
'            Else
'                If TestName <> strLastName Then ListBoxTestName.AddItem (TestName)
'            End If
            strLastName = TestName
            recTemp1.MoveNext
         Wend
         
         iListViewTestNameCount = ListViewTestName.ListItems.Count
         ReDim TestNameArray(iListViewTestNameCount, 4)
         For i = 1 To iListViewTestNameCount
            TestNameArray(i, 1) = ListViewTestName.ListItems.Item(i).Text           'TestName (Function_A)
            TestNameArray(i, 2) = ListViewTestName.ListItems.Item(i).SubItems(1)    'ChannelIndex (1-001)
            TestNameArray(i, 3) = ListViewTestName.ListItems.Item(i).Key            'TestID  (57) For DataBase searching
            TestNameArray(i, 4) = ""
            If fVerSchema >= 1.1 Then
                TestNameArray(i, 4) = ListViewTestName.ListItems.Item(i).SubItems(5) ' ItemID (ddd)
            End If
'Debug.Print "TestNameArray" & i & "=" & TestNameArray(i, 1)
         Next i
'Debug.Print "TestNameArray=" & UBound(TestNameArray) & "-" & TestNameArray(1, 1)
        recTemp1.Close
        Set recTemp1 = Nothing
        
        If gbfVerSchema >= 1.41 Then
            strQry = "Select Data_Type,Unit FROM Aux_Global_Data_Table group by Data_Type,Unit ORDER BY Data_Type;"
            Set recTemp1 = gDB.OpenRecordset(strQry, dbOpenForwardOnly, dbReadOnly)
            While Not recTemp1.EOF
                tData_Type = recTemp1.Fields("Data_Type").Value
                If recTemp1.Fields("Unit").Value <> "" Then
                   gAuxiDataTypeUnit(tData_Type, 0) = "(" & recTemp1.Fields("Unit").Value & ")"
                   gAuxiDataTypeUnit(tData_Type, 1) = "(d" & Trim(recTemp1.Fields("Unit").Value) & "/dt)"
                End If
                recTemp1.MoveNext
            Wend
            recTemp1.Close
            Set recTemp1 = Nothing

        End If
        ListViewTestName.Refresh
        If iListViewTestNameCount >= 1 Then ListViewTestName.ListItems.Item(1).Selected = False
        On Error GoTo 0
    End If
    Call gDBClose
    Me.MousePointer = fmMousePointerDefault
    'make simple view the active view
    MultiPage1.Value = 0
    TextBoxPrompt0.Text = "You may choose another Test_Name "
 '   Me.Repaint
    Application.StatusBar = "Ready"
End Sub

Private Sub ListBoxTestName_Click()
Dim strShowTestName As String
Dim i As Integer
Dim iIndex As Integer
    'TextBoxPrompt0.Text = "Please choose Channel Index"
    If ListBoxTestName.ListCount <= 0 Then
        TextBoxPrompt0.Text = "Click 'Add File' button to choose data files "
    Else
       TextBoxPrompt0.Text = "Double-click a File Name to show its channel info"
    End If
    mTestName = ListBoxTestName.List(ListBoxTestName.ListIndex)
    gFileNameExt = mTestName & ".xls"
    If Right(gDirNameOutput, 1) = "\" Then gDirNameOutput = Left(gDirNameOutput, Len(gDirNameOutput) - 1)
'    gFileNameOutput = gDirNameOutput & "\" & gFileNameExt
'    LabelFileNameOutput.Caption = gFileNameOutput
    
    
    If ListViewSelectChan.ListItems.Count > 0 Then
        btnImport.Enabled = True
    Else
        btnImport.Enabled = False
    End If
    If ListBoxTestName.ListCount > 0 Then
      With ListBoxTestName
        If .Selected(.ListIndex) = True Then
            strShowTestName = .List(.ListIndex)
            iIndex = .ListIndex
        End If
      End With
        
        If ListBoxChannelIndex.ListCount > 0 Then
             If strShowTestName <> TestNameArray(1, 1) Then
                ListBoxChannelIndex.Clear
                ListViewTestName.ListItems.Clear
                btnAddChan.Enabled = False
             End If
        End If
        If ListViewSelectChan.ListItems.Count > 0 Then
        With ListViewSelectChan
           .MultiSelect = True
            For i = 1 To .ListItems.Count
                .ListItems(i).Selected = False
            Next i
'           .MultiSelect = fmMultiSelectMulti
             For i = 1 To .ListItems.Count
                If .ListItems(i).SubItems(2) = strShowTestName Then
                    .ListItems(i).Selected = True
                    .SetFocus
                End If
            Next i
        End With
        End If
    End If

'    Call PutListBoxChannelIndex
'    ListBoxChannelIndex.Height = fListBoxViewHeight
        
    'Call DisplayNewFileName(mTestName)
End Sub

Private Sub DisplayNewFileName(strTestName As String)
    Dim strMultifileName As String
    If Right(gDirNameInput, 1) = "\" Then gDirNameInput = Left(gDirNameInput, Len(gDirNameInput) - 1)
    
    strMultifileName = gDirNameInput & "\" & strTestName & ".res"
    If gFileNameInput <> strMultifileName And Dir(strMultifileName) <> "" Then
'        LabelFileNameInput.Visible = False
'        LabelFileNameInputAutoChange.Caption = "Map ---> " & strMultifileName
'        LabelFileNameInputAutoChange.Visible = True
    Else
'        LabelFileNameInputAutoChange.Caption = " "
'        LabelFileNameInputAutoChange.Visible = False
'        LabelFileNameInput.Visible = True
    End If
End Sub

Private Sub ListBoxChannelIndex_Enter()
    TextBoxPrompt0.Text = "Double Click a Chanenl_Index to Choose the Channel"
'    ListBoxChannelIndex.Height = fListBoxViewHeight
End Sub

Private Sub ListBoxChannelIndex_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
'    mbIsPlotAfterImport = True
'    Call ImportData
Call AddChanFromPage1

End Sub

Private Sub AddChanFromPage1()
    Dim mAddChNo, mChanArray() As String, iCount, i, iIndex As Integer
    Dim itmX As ListItem
    
    On Error GoTo Err_Exit
    
    If ListBoxChannelIndex.ListCount > 0 Then
    With ListViewSelectChan
    iIndex = ListBoxChannelIndex.ListIndex
    mAddChNo = Left(ListBoxChannelIndex.List(iIndex), 5)
    If .ListItems.Count > 0 Then
     For iCount = 1 To .ListItems.Count
       If .ListItems(iCount).Key = mAddChNo Then
            For i = 1 To .ListItems.Count
                .ListItems(i).Selected = False
            Next i
            .ListItems(iCount).Selected = True
            .SetFocus
            MsgBox (" Channel " & mAddChNo & " was chosen! ")
            Exit Sub
       End If
     Next iCount
    End If
          If ListBoxChannelIndex.Selected(iIndex) = True Then
                 Set itmX = .ListItems.Add(, , TestNameArray(iIndex + 1, 2))        'ChannelIndex (ex: 1-001)
                  itmX.Key = TestNameArray(iIndex + 1, 2)                           'ChannelIndex (ex: 1-001)
                   itmX.SubItems(1) = TestNameArray(iIndex + 1, 4)                  'Item_ID (ex: ddd)
                   itmX.SubItems(2) = TestNameArray(iIndex + 1, 1)                  'Test_Name (ex: function_a)
                   itmX.SubItems(3) = ListBoxChannelIndex.Tag                       'File Name (ex: C:\ArbinSoftWare\Data\Function_A.res)
                 
                   itmX.Tag = TestNameArray(iIndex + 1, 3)                          'Test_ID (ex: 57)
    '                .ListItems(.ListItems.Count).Selected = True
    '                .SetFocus
          End If
     For i = 1 To .ListItems.Count
        .ListItems(i).Selected = False
     Next i
          
    For i = 1 To .ListItems.Count
     If .ListItems(i).Key = mAddChNo Then
        .ListItems(i).Selected = True
        .SetFocus
        Exit For
     End If
    Next i
 End With
End If
    If ListViewSelectChan.ListItems.Count > 0 Then
        btnRemoveChan.Enabled = True
        btnSaveChan.Enabled = True
        btnImport.Enabled = True
        btnChangeFileNameOutput.Enabled = True
        gFileNameOutput = gDirNameOutput & "\" & ListViewSelectChan.ListItems(1).SubItems(2) & ".xls"
        LabelFileNameOutput.Caption = gFileNameOutput
    End If
     
    
Err_Exit:

End Sub
Private Sub PutListBoxChannelIndex(strFileName As String)
    Dim i As Integer, iSortOrder As Byte, isortindex As Byte
    Dim TestRec As Recordset
    Dim TestName As String, strQuery As String
    Dim iListCount As Integer
    Dim fldDAQ_Index As Field, fldChannel_Index As Field
    Dim fldCell_Number As Field, fldTest_ID As Field
    Dim strTempTestName As String
    Me.MousePointer = fmMousePointerHourGlass
    Application.StatusBar = "Querying Channel Info of the Selected Test Name"
'    TestName = ListBoxTestName.List(ListBoxTestName.ListIndex)
'    Debug.Print "TestName==" & TestName
        ListBoxChannelIndex.Clear
        For i = 1 To UBound(TestNameArray)
'            If TestNameArray(i, 1) = TestName Then
              With ListBoxChannelIndex
                strTempTestName = TestNameArray(i, 2)
                If TestNameArray(i, 4) <> "" Then
                    strTempTestName = strTempTestName & " (" & TestNameArray(i, 4) & ")"
                End If
                .AddItem (strTempTestName)
                iListCount = .ListCount - 1

'                .List(iListCount, 1) = Left(TestNameArray(i, 3), Len(TestNameArray(i, 3)) - 4)
'                .List(iListCount, 2) = Right(TestNameArray(i, 3), 3)
              End With
'            End If
        Next i
        ListBoxChannelIndex.Tag = strFileName
'Debug.Print "tag=" & ListBoxChannelIndex.Tag
'            With ListBoxChannelIndex
'                 .AddItem (fldDAQ_Index.Value & "-" & fldChannel_Index.Value)
'                iListCount = .ListCount - 1
'                .List(iListCount, 1) = fldTest_ID.Value
'                .List(iListCount, 2) = fldCell_Number.Value
'            End With
'            TestRec.MoveNext
'        Wend
'        TestRec.Close
'        Set TestRec = Nothing
'    Call CheckListBoxChannelListCount
'    End If
    DoEvents
    Me.MousePointer = fmMousePointerDefault
    Application.StatusBar = "Ready"
End Sub

Private Sub CheckListBoxChannelListCount()
    'AutoSelect the first one
    If ListBoxChannelIndex.ListCount > 0 Then
        Call AutoSelectChannelIndex
    '    FrameFileNameOutput.Enabled = True
        LabelFileNameOutput.Enabled = True
        btnChangeFileNameOutput.Enabled = True
        btnImport.Enabled = True
'        btnImportPlot.Enabled = True
    Else
        LabelFileNameOutput.Enabled = False
        btnChangeFileNameOutput.Enabled = False
        btnImport.Enabled = False
'        btnImportPlot.Enabled = False
    End If
End Sub

Private Sub AutoSelectChannelIndex()
    Dim j As Integer, iChanI As Integer, iChannelList As Integer
    Dim bSelected As Boolean
    bSelected = False
    iChanI = 1
    With ListBoxChannelIndex
        iChannelList = .ListCount
        Do While iChanI < 17 And gLastSelectedChannel(iChanI) <> "     "
            For j = 0 To iChannelList - 1
                If .List(j, 0) = gLastSelectedChannel(iChanI) Then
                    .Selected(j) = True
                    bSelected = True
                    If j > gbiChannelIndexOutLine Then LabelChannelIndex.Caption = "Channel Index *"
                    Exit For
                End If
            Next j
            iChanI = iChanI + 1
        Loop
        If bSelected = False And iChannelList > 0 Then .Selected(0) = True
    End With
End Sub

Private Sub btnCancel_Click()
    If gbIsImporting Then
        If MsgBox("Data will not be completely imported if you cancel the process now. Stop importing? ", _
            vbYesNo + vbQuestion + vbDefaultButton2) = vbNo Then
            Exit Sub
        Else
            gbIsImporting = False
        End If
    End If
    Call gDBClose
    'DataImportForm.Hide
    gIsImportFormLoaded = False
    Application.StatusBar = "Ready"
'    gCommandHistory = False
'    ProcessingCommandBar
    
'    Unload Me
    Me.Hide
End Sub

Private Sub btnChangeFileNameOutput_Click()
    Dim vbResponse As Integer, strTemp As String
    Dim TempFileName As Variant
    
    If gbIsImporting Then Exit Sub
    bIsOverWrite = False
'    MsgBox "Please make sure output device should be writable!" & vbCrLf _
            & "Otherwise default path will go through to MITS_PRO/DATA fold!"
    On Error GoTo btnChangeFileNameOutput_Error
    
    ChDir gDirNameOutput
    On Error GoTo 0
    Do
       TempFileName = Application.GetSaveAsFilename(Initialfilename:=gFileNameOutput, _
           fileFilter:="Excel Files (*.xls), *.xls")
       If TempFileName = False Then Exit Sub    'Pressing Cancel
       strTemp = TempFileName
       If Dir(strTemp) = "" Then Exit Do   'Brand new file
       vbResponse = MsgBox("Do you want to overwrite the existing file: " & strTemp & "? ", _
        vbYesNo + vbQuestion + vbDefaultButton2, gszALERTTITLE)
       '--Yes to overwrite, no to do loop again
       If vbResponse = vbYes Then bIsOverWrite = True
    Loop Until vbResponse = vbYes
    
    gDirNameOutput = CurDir(gDefaultWorkDrive)
'    Call mfSaveDellMultiIni
    gFileNameOutput = strTemp
'    gFileNameExt = Right$(gFileNameOutput, Len(gFileNameOutput) - Len(gDirNameOutput))
    gFileNameExt = gFileNameOutput
    LabelFileNameOutput.Caption = gFileNameOutput
    Exit Sub
 
btnChangeFileNameOutput_Error:
    gDirNameOutput = ThisWorkbook.Path
    Resume
End Sub

Private Sub btnImport_Click()
Dim title As String
Dim iResponse As Integer
    gArea = 0

    If gAutoRefreshEnable = False Then
'        gSleepTime = 100
'        If OptionsForm.CheckBoxImportWarning.Value Then
'        Do While MsgBox("Is this PC running MITS test?", vbYesNo) <> vbYes
'            If MsgBox("Are you sure this PC is not running any test! " & vbCr & "If Yes, click on 'Yes', otherwise click 'No' go back to previous page.", vbYesNo) = vbYes Then
'                gSleepTime = 0
'                Exit Do
'            End If
'        Loop
'        End If
        If IsMitsProRunning <> 0 Then
            gSleepTime = 100
            Else
            gSleepTime = 0
        End If
    Else
        gSleepTime = 100
    End If
    gHasPloting = False
    mbIsPlotAfterImport = False
    gDataFilter = CheckBoxDigitalFilter
    If gFileNameOutput = "" Then gFileNameOutput = gDirNameOutput & "\" & ListViewSelectChan.ListItems(1).Tag & ".xls"
    LabelFileNameOutput.Caption = gFileNameOutput
       
    iResponse = MsgBox("The output file name: " & gFileNameOutput & vbCr _
            & "Do you want to change the name? ", vbYesNoCancel)
    If iResponse = vbCancel Then Exit Sub
    If iResponse = vbYes Then
            If btnAdvanced.Caption = BtnAdvancedCaption Then BtnAdvancedClick
            Call btnChangeFileNameOutput_Click
    End If
    If btnAdvanced.Caption <> BtnAdvancedCaption Then BtnAdvancedClick

    btnAddFile.Enabled = False
    btnRemoveFile.Enabled = False
    btnAddChan.Enabled = False
    btnRemoveChan.Enabled = False
    btnSaveChan.Enabled = False
    Me.Width = 258.9
    Call ImportData
'    Call mfSaveDellMultiIni
    On Error Resume Next
    Unload SimplePlotDialog
    
    btnAddFile.Enabled = True
    btnRemoveFile.Enabled = True
    btnRemoveChan.Enabled = True
    btnSaveChan.Enabled = True
    If ListBoxChannelIndex.ListCount > 0 Then btnAddChan.Enabled = True
  
End Sub

Sub ImportData()
    Dim wbNew As Workbook
    Dim sTimeStart As Single, sTimefinish As Single
    'Dim bSelectFlag As Boolean
    Dim i As Integer, j As Integer
    Dim iChannelList As Integer, iChanI As Integer
    Dim iTest_ID As Integer
    Dim strTest_ID As String
    Dim strDaqChannelNum As String
    Dim strQry As String
    Dim recTemp1 As Recordset
    Dim strFilter As String
    Dim bNoTestID As Boolean
    Dim strTestName As String

    'Dim wkSheetName As String
    'Dim iCellNum As Integer
    Dim iMaxCellNum As Integer
    Dim iDecimalPlacesBak As Integer
    
     Call mfSaveDellMultiIni
   
    If gbIsImporting Then Exit Sub
    If bLockImportData Then Exit Sub
    bLockImportData = True

    If Not CheckInterfaceValueValid Then GoTo UnLockImportData_Exit
    If Not CheckFileValid Then GoTo UnLockImportData_Exit
    If mbIsPlotAfterImport Then
        Application.StatusBar = "Importing & Plotting Data..."
    Else
        Application.StatusBar = "Importing Data..."
    End If
    
    'If file is locked, when using network drive, give Error Message
    On Error GoTo UserForm_SaveAs_Error
    Set wbNew = Workbooks.Add
    wbNew.SaveAs filename:=gFileNameOutput
    On Error GoTo 0
'    DoEvents
    Application.DisplayAlerts = True
    
    
    gLastTestName = mTestName
    
    mbIsMultifile = False
    'If LCase(Right(gFileNameInput, 12)) = "arbinsys.res" Then
'     If Right(gDirNameInput, 1) = "\" Then gDirNameInput = Left(gDirNameInput, Len(gDirNameInput) - 1)
'        mMultifileName = gDirNameInput & "\" & mTestName & ".res"
'        If gFileNameInput <> mMultifileName And Dir(mMultifileName) <> "" Then
'            Call gDBClose
'            If Not gDBOpen(mMultifileName) Then GoTo UnLockImportData_Exit
'            LabelFileNameInput.Caption = mMultifileName
'            mbIsMultifile = True
'            DoEvents
'        End If
    'End If
    
    '--Start time
    sTimeStart = Timer
    Call InterfaceMiscBegin
    Call MakeInfoSheetHead
    Call MakeSmartBatteryInfoToHeadSheet
    
TryImportAgain:
    
'    For i = 1 To 16
'        gLastSelectedChannel(i) = ""
'    Next i
    
    gptImportChannelCount = 0
    gbIsImporting = True
    bExitAsked = False
    iChanI = 1
    iMaxCellNum = 0
    
    '--Read selected files (Channel numbers and TestID in the ListBoxChannelIndex)
'    If Me.MultiPage1.Value = 0 Then
        iChannelList = ListViewSelectChan.ListItems.Count
        For i = 1 To iChannelList
            mTestName = ListViewSelectChan.ListItems(i).SubItems(2)
            strTestName = ListViewSelectChan.ListItems(i).SubItems(3)

            
'Debug.Print "dataBase Name: " & strTestName
'            If Not gDBOpen(mTestName) Then
'      '          GoTo UnLockImportData_Exit
'                Call gDBClose
'            End If
            Call gDBClose
            Call gDBOpen(strTestName)
        
 '         If ListBoxChannelIndex.Selected(i) = True Then
            strDaqChannelNum = ListViewSelectChan.ListItems(i).Key     '8/15/2001 18 chars, 1/23/2002 change to 5
            If iChanI < 17 Then
                gLastSelectedChannel(iChanI) = strDaqChannelNum
                iChanI = iChanI + 1
            End If
'            bNoTestID = False
'            If mbIsMultifile = True Then
                strFilter = "[Test_Name] = '" & mTestName & "-0" & strDaqChannelNum & "');"
                strQry = "SELECT [Test_ID] FROM Global_Table Where (" & strFilter
'Debug.Print "StrQry = " & StrQry
                Set recTemp1 = gDB.OpenRecordset(strQry, dbOpenForwardOnly, dbReadOnly)
                If recTemp1.EOF Then
'                    bNoTestID = True
                     strTest_ID = ListViewSelectChan.ListItems(i).Tag
'  Debug.Print "full_Test_ID= " & strTest_ID
                     iTest_ID = Int(Left(strTest_ID, Len(strTest_ID) - 4))
'  Debug.Print "Test_ID = " & Int(Left(strTest_ID, Len(strTest_ID) - 4))
                Else
                    iTest_ID = recTemp1.Fields(0)
'Debug.Print "Test_ID from database: " & iTest_ID
                End If
'            Else
'                iTest_ID = Int(ListBoxChannelIndex.List(i, 1))
            
'           End If
            
 '           If bNoTestID = False Then
'                   iMaxCellNum = Int(Right(strTest_ID, 3))
                'gptImportChannelCount = gptImportChannelCount + 1
                If Not ReadArbinSysDataBase(strDaqChannelNum, iTest_ID, iMaxCellNum) Then GoTo ImportData_Cancel
 '            End If
 '         End If   '      If ListBoxChannelIndex.Selected(i) = True Then
        Next i

    Application.DisplayAlerts = False
    Call gfDeleteDefaultSheet123(ActiveWorkbook) '
    
    If ActiveWorkbook.Worksheets.Count <= 1 And mbIsMultifile = True Then
        Call gDBClose
        If Not gDBOpen(gFileNameInput) Then GoTo UnLockImportData_Exit
'        LabelFileNameInput.Caption = gFileNameInput
        mbIsMultifile = False
        DoEvents
        If HasSheetOf(gbInfoSheetName) Then
            Sheets(gbInfoSheetName).Name = gbInfoSheetName & "1"
        End If
        Call MakeInfoSheetHead
        If HasSheetOf(gbInfoSheetName) And HasSheetOf(gbInfoSheetName & "1") Then
            Sheets(gbInfoSheetName & "1").Delete
        End If
        GoTo TryImportAgain
    End If
     'Call FormatDecimalPlacesTime
'    gbbHasHighPulseData = False
    Call ReverseI                   'Reverse Sign of Current
    Call ReverseV                   'Reverse sign of Voltage
    Call AddDayHourMinuteColumns    'Add minute, hour and day columns
    Call AddmAAndmVColumns          'Add mA and mV as unit columns
    Call AddPowerLoadColumns        'Add Power and Load columns
    Call AddIDColumns               'Add Current density columns
    Call AddPDColumns               'Add PowerDensity Columns
    Call AddCoulmColumns
    Call AddGroupCalcute            'Add Fuel Cell group calcute
    Call AddSmartBatteryStat        'Add Smartbattery Statistic Data
    Call FormatwkBookCellsColor
    If gbbHasHighPulseData = True Then
        iDecimalPlacesBak = giDecimalPlaces(1)
        If giDecimalPlaces(1) < gbiTimeForHighPulseData And giDecimalPlaces(1) <> -1 Then
            giDecimalPlaces(1) = gbiTimeForHighPulseData  'TestTime
            giDecimalPlaces(2) = giDecimalPlaces(1)  'StepTime
        End If
    End If
    If gbbHasHighPulseData = True Then
        giDecimalPlaces(1) = iDecimalPlacesBak
        giDecimalPlaces(2) = giDecimalPlaces(1)
    End If
    Call FormatDecimalPlaces

gbExistDataSheetAfterImport = gfSelectChannelSheet(ActiveWorkbook, mPreSheetName)
    If gbExistDataSheetAfterImport = False Then
        If mPreSheetName = gbSmartBatteryName Then
            mPreSheetName = gbChannelName
            gbExistDataSheetAfterImport = gfSelectChannelSheet(ActiveWorkbook, mPreSheetName)
        End If
    End If
    'For PPG Begin
    If gbPPGOn Then
        Call PPGMain
    End If
    'For PPG End
    Application.DisplayAlerts = True
    
    sTimefinish = Timer
   
    If ActiveWorkbook.Worksheets.Count > 1 Then
        Application.StatusBar = "Save Data to " & gFileNameOutput & " file."
        ActiveWorkbook.Save
        Application.StatusBar = "Imported from " & mMultifileName
        '& " " & _
        '    Format((sTimefinish - sTimeStart), "0.00") & "   " & InfoStr '/ 60
    gCommandHistory = True
    Else
        gbNeedRefreshImportDialog = True
        Call GiveSuggestMsg
    End If
    
    
ImportData_Exit:
    Call InterfaceMiscEnd
    Call gDBClose
    ProcessingCommandBar
'    CommandAdd.Enabled = True
     CommandAdd.Enabled = False
    gbIsImporting = False
    Application.StatusBar = "Ready!"
    
'    gFileNameOutput = mTempSaveFileNameOutput
    
    On Error GoTo 0
    'DataImportForm.Hide
    gIsImportFormLoaded = False
    If mbIsPlotAfterImport = True Then
        If gbExistDataSheetAfterImport = True Then
'            DoEvents
            'SimplePlotDialog.Show
'            If gRefreshPrecess Or gAutoRefreshEnable Then
'               ActiveWorkbook.Worksheets(gwksActivePlotName).Activate
'            End If
            gbLastwkBookName = ActiveWorkbook.Name
            gbLastwkSheetName = ActiveSheet.Name
            mPreSheetName = Left$(gbLastwkSheetName, 7)
            
'            Call SimplePlotDialog.PlotGraphInWorkbook(ActiveWorkbook, mPreSheetName)
            Call PlotQuickGraph(ActiveWorkbook, mPreSheetName, iMaxCellNum)
'            DoEvents
            'Unload SimplePlotDialog
            'DoEvents
        End If
    End If
    
UnLockImportData_Exit:
    bLockImportData = False
     Unload Me
     Call UserForm_Terminate
 '   Me.Hide
    'Debug.Print "Process time last:"; sTimefinish - sTimeStart; "s"
    Exit Sub
    
ImportData_Cancel:
    MsgBox "Data Importing Canceled!"
'    gCommandHistory = False
    GoTo ImportData_Exit

UserForm_SaveAs_Error:
    If Err.Number = 1004 Then
        MsgBox gFileNameOutput & " cann't save to read-only " _
            & "media device (like CD-ROM, read-only network drive )" _
            & "or the file has been locked by others. " _
            & "You should change the Output File Name. " _
            & "This problem may be caused by network drive. " _
            & "You'd better not to use network drive."
        Workbooks(wbNew.Name).Close SaveChanges:=False
    End If
    gCommandHistory = False
    Resume ImportData_Exit

End Sub

Private Sub GiveSuggestMsg()
    Dim strMsg As String, strMsg1 As String
    Dim strMsg2 As String, strMsg3 As String
    
        strMsg = gFileNameInput
        If mbIsMultifile = True Then strMsg = mMultifileName
        strMsg1 = "Can not find the data you selected in " & _
            Chr$(13) & strMsg & " database."
        
'        If mbIsMultifile = True Then
'            strMsg1 = strMsg1 & Chr$(13) & Chr$(13) & _
'            "If you are NOT using MITS MULTIPLE RESULTS file to log data, please RENAME " & _
'            mMultifileName & " file, then try to import data again from " & _
'            Chr$(13) & gFileNameInput & " file."
'        End If
        
        strMsg2 = ""
        If OptionChannel.Value = True Then
            If OptionAll.Value <> True Or CheckChNormal.Value <> True Then
                strMsg2 = "1"
            End If
            If CheckChAuxiliary.Enabled = True And CheckChAuxiliary.Value <> True Then
                strMsg2 = "1"
            End If
            If CheckChStatistics.Enabled = True And CheckChStatistics.Value <> True Then
                strMsg2 = "1"
            End If
            If gbExistSmartBattery = True And CheckChSmartBattery.Value <> True Then
                strMsg2 = "1"
            End If
        ElseIf OptionCell.Value = True Then
            If CheckCellAll.Value <> True Or CheckCellAuxiliary.Value <> True Then
                strMsg2 = "1"
            End If
        End If
        If strMsg2 = "1" Then
            strMsg2 = Chr$(13) & _
            Chr$(13) & "Please try to " & _
            Chr$(13) & "1. Click [Advanced>>] button in [Import Data] Window" & _
            Chr$(13) & "2. Set options to All in [Apply Filter to Normal Channel Data] Frame" & _
            Chr$(13) & "3. Check all check boxes in [Import Data Options] Frame"
        End If
        
'        If LCase(Right(gFileNameInput, 12)) = "arbinsys.res" Then
'            If Dir(gDirNameInput & "\" & mTestName & ".res") <> "" Then
'                strMsg3 = Chr$(13) & _
'                Chr$(13) & "It seems you are using the MULTIPLE RESULTS file type in MITS'2000." & _
'                Chr$(13) & "Try to import " & _
'                Chr$(13) & gDirNameInput & "\" & mTestName & ".res database."
'                strMsg = strMsg1 & strMsg3
'            Else
'                'strMsg3 = Chr$(13) & _
'                Chr$(13) & "You may try to import " & _
'                Chr$(13) & gDirNameInput & "\" & mTestName & ".res " & _
'                Chr$(13) & "by clicking [Change...] button in [File to be Imported] Frame" & _
'                Chr$(13) & "if you are using the multiple results file type in MITS'2000."
'                If strMsg2 = "" Then
'                    strMsg = strMsg1
'                    'strMsg = strMsg1 & strMsg3
'                Else
'                    strMsg = strMsg1 & strMsg2
'                End If
'            End If
'        Else
'            strMsg = strMsg1 & strMsg2
'        End If
        strMsg = strMsg1 & strMsg2
        gbiMsgBoxResponse = MsgBox(strMsg, vbInformation)
        Application.StatusBar = "Ready"
End Sub

Function CheckInterfaceValueValid() As Boolean
    Dim vbResponse As Integer
    CheckInterfaceValueValid = False
    'If OptionChannel.Value = True Then
        If CheckChNormal.Value = False And CheckChAuxiliary.Value = False And _
            CheckChStatistics.Value = False And CheckChSmartBattery.Value = False Then
            MsgBox "At least one box in Import Data Options should be checked!"
            CheckChNormal.SetFocus
            Exit Function
        End If
'    ElseIf OptionCell.Value = True Then
'        If CheckCellAll.Value = False And CheckCellAuxiliary.Value = False Then
'            MsgBox "At least one box in Import Data Options should be checked!"
'            CheckCellAll.SetFocus
'            Exit Function
'        End If
'    Else
'        Exit Function
'    End If
    
    If btnAdvanced.Caption <> BtnAdvancedCaption Then
        'Check Value
        If CheckCtrlState(InfoStr) = False Then Exit Function
    End If
       
'    If gfListBoxSelectedAtLeastOne(ListBoxChannelIndex) = False Then
'        MsgBox ("Please select channels to import!")
'        Exit Function
'    End If
    
    '--check to see if this is a overwitten file
'    If bIsOverWrite = False Then    'When False, Check overwrite.
'        If gbbOverwriteFiles = False Then
'            On Error GoTo CheckInterfaceValueValid_Error
'            If Dir(gFileNameOutput) <> "" Then
'                vbResponse = MsgBox("Do you want to overwrite the existing file: " & _
'                    gFileNameOutput & "? " & _
'                    vbCr & "Click Yes, overwrite it." & _
'                    vbCr & "Click No, change the Output File Name before importing." & _
'                    vbCr & "Click Cancel, overwrite files without reminding next time.", _
'                    vbYesNoCancel + vbQuestion + vbDefaultButton1, gszALERTTITLE)
'                If vbResponse = vbNo Then GoTo CheckInterfaceValueValid_Exit
'                If vbResponse = vbCancel Then
'                    vbResponse = MsgBox("Overwrite files without reminding next time." & _
'                    vbCr & "To remind again, uncheck [Overwrite files without reminding" & _
'                    " after clicking Import button] in Arbin Data\Options...\Options1 menu." _
'                    , vbOKOnly + vbInformation)
'                    gbbOverwriteFiles = True
'                    Call gfSaveMitsDataini
'                End If
'            End If
'        End If
'    End If
    
    CheckInterfaceValueValid = True
    
CheckInterfaceValueValid_Exit:
    On Error GoTo 0
    Exit Function

CheckInterfaceValueValid_Error:
    vbResponse = MsgBox("Invalid output file path " & gDirNameOutput & ". You should change that path.", _
                    vbCritical, gszALERTTITLE)
    GoTo CheckInterfaceValueValid_Exit
End Function

Function CheckFileValid() As Boolean
    Dim wbTemp As Workbook
    CheckFileValid = False
    
 '   If Not gDBOpen(gFileNameInput) Then Exit Function
   
    'For PPG Begin
    If gbPPGOn Then
        PPGForm.Show
        If giPPGOptionValue = -1 Then Exit Function
    End If
    'For PPG End
    
    '--Close the existing workbook
    Application.DisplayAlerts = False
    For Each wbTemp In Workbooks
        If UCase(wbTemp.FullName) = UCase(gFileNameOutput) Then
            wbTemp.Close SaveChanges:=False
            Exit For
        End If
    Next wbTemp
    CheckFileValid = True
End Function

Sub InterfaceMiscBegin()
    Me.Caption = "Importing data from " & mMultifileName
    Me.MousePointer = fmMousePointerHourGlass
    btnCancel.MousePointer = fmMousePointerArrow
    ListBoxTestName.Enabled = False
    btnAdvanced.Enabled = False
'    btnChangeFileNameInput.Enabled = False
    btnChangeFileNameOutput.Enabled = False
    btnImport.Enabled = False
'    btnImportPlot.Enabled = False
    Call TextBoxPromptSet1
    Application.ScreenUpdating = False
    DoEvents
End Sub

Private Sub TextBoxPromptSet1()
    TextBoxPrompt0.ForeColor = &H8000000E
    TextBoxPrompt0.BackColor = &H80000001
    TextBoxPrompt0.TextAlign = fmTextAlignCenter
    If mbIsPlotAfterImport = True Then
        TextBoxPrompt0.Text = "Importing & Plotting data now. Please wait..."
    Else
        TextBoxPrompt0.Text = "Importing data now. Please wait..."
    End If
    
    TextBoxPrompt1.ForeColor = &H8000000E
    TextBoxPrompt1.BackColor = &H80000001
    TextBoxPrompt1.TextAlign = fmTextAlignCenter
    TextBoxPrompt1.Text = TextBoxPrompt0.Text
End Sub

Private Sub TextBoxPromptSet2()
    TextBoxPrompt0.ForeColor = &H8000000D
    TextBoxPrompt0.BackColor = &H80000000
    TextBoxPrompt0.TextAlign = fmTextAlignLeft
'    TextBoxPrompt0.Text = "Operating completed!" '"Mits DataPro"
    TextBoxPrompt0.Text = "Ready for next importing!"
    TextBoxPrompt1.ForeColor = &H8000000D
    TextBoxPrompt1.BackColor = &H80000005
    TextBoxPrompt1.TextAlign = fmTextAlignLeft
'    TextBoxPrompt1.Text = "Operating completed!" '"Mits DataPro"
    TextBoxPrompt1.Text = "Ready for next importing!"
End Sub

Function ReadArbinSysDataBase(strDaqChannelNum As String, _
    iTest_ID As Integer, iMaxCellNum As Integer) As Boolean
     Dim wkSheetName As String
    Dim swkName As String
    
    ReadArbinSysDataBase = False
    Sleep gSleepTime
    DoEvents
    If gbIsImporting = False Then Exit Function
    
    'Get Infomation from Global_Table
If Not ReadGlobalTableInfo(iTest_ID) Then
        gbNeedRefreshImportDialog = True
        If bExitAsked = False Then
            gbiMsgBoxResponse = MsgBox("The Test Name in MITS database has been changed. " & _
            vbCr & "The Data Import Dialog will be refreshed automatically when you click " & _
           vbCr & "[Arbin Data/Import MITS Results Data...] menu next time. " & _
            vbCr & "Exit importing?", _
            vbYesNo + vbQuestion + vbDefaultButton1, gszALERTTITLE)
            If gbiMsgBoxResponse = vbYes Then
                Exit Function
            Else
                bExitAsked = True
            End If
        End If
    End If
    If gbIsImporting = False Then Exit Function
    mPreSheetName = gbChannelName
    'Read Channel
    If (OptionChannel.Value = True And CheckChNormal.Value = True) Then   'Or _
        '(OptionCell.Value = True And CheckCellAuxiliary.Value = True) Then
        'Application.StatusBar = "Read Channel Data, Channel " & strDaqChannelNum
        Call ReadChannelFile(iTest_ID, strDaqChannelNum)
        If gbfVerSchema >= 4.145 And DellMulti.CheckBoxEvent Then
            Call ReadEventsFile(iTest_ID, strDaqChannelNum)
            If gbIsImporting = False Then Exit Function
        End If
    End If
    If gbIsImporting = False Then Exit Function
    
    'Read Channel Auxiliary
    If (OptionChannel.Value = True And CheckChAuxiliary.Value = True) Then 'Or _
        '(OptionCell.Value = True And CheckCellAuxiliary.Value = True) Then
        If tGlobal_Table1.Log_Data_Flag(3) = True Then  'Log_Aux_Data_Flag
            'Application.StatusBar = "Read Auxiliary Data, Channel " & strDaqChannelNum
            wkSheetName = gbChannelName & "_" & strDaqChannelNum
            Call ReadAuxiliaryFile(iTest_ID, strDaqChannelNum, -1, wkSheetName)
        End If
    End If
    If gbIsImporting = False Then Exit Function

    'Read Channel Statistic
    If OptionChannel.Value = True And CheckChStatistics.Value = True Then
        If tGlobal_Table1.Log_Data_Flag(0) = True Then  'Log_ChanStat_Data_Flag
            'Application.StatusBar = "Read Channel Statistical Data, Channel " & strDaqChannelNum
            Call ReadChannelStatisticFile(iTest_ID, strDaqChannelNum)
            swkName = gbStatisticName & "s_" & strDaqChannelNum
            If HasSheetOf(swkName) Then
                Call gfCellGradingFilling(swkName)
 'Add filter for here
 '           Call FilterSameCycle(swkName) 'disable
                
            End If
        End If
    End If
    If gbIsImporting = False Then Exit Function
    

    'Read SmartBattery
    If OptionChannel.Value = True And CheckChSmartBattery.Value = True Then
        If tGlobal_Table1.Log_Data_Flag(4) = True Then
            mPreSheetName = gbSmartBatteryName
            Call ReadSmartBatteryInfo(iTest_ID)
            Call ReadSmartBatteryFile(iTest_ID, strDaqChannelNum)
            If gbfVerSchema >= 1.44 And DellMulti.CheckBoxSMStretch Then
                Call ReadSmartBatteryClockStrechFile(iTest_ID, strDaqChannelNum)
            End If
                
        End If
    End If
    gbInfoSheetNowRow = gbInfoSheetNowRow + 1

    'The following is for multicell data, to be improved later Sandra
    If iMaxCellNum > 0 Then '--if this channel has cells
      If OptionCell.Value = True And CheckCellAll.Value = True Then
        'Read Cell Normal Data
        mPreSheetName = gbMultiCellChannelName
        If tGlobal_Table1.Log_Data_Flag(1) = True Then  'Log_CellNormal_Data_Flag
            Call ReadCellFile(iTest_ID, strDaqChannelNum, iMaxCellNum)
        End If
        'Read Cell Statistical Data
        If tGlobal_Table1.Log_Data_Flag(2) = True Then  'Log_CellStat_Data_Flag
            Call ReadCellStatisticFile(iTest_ID, strDaqChannelNum, iMaxCellNum)
        End If
      End If
      If gbIsImporting = False Then Exit Function
    
    End If   'If iMaxCellNum > 0 Then
    
    If gbfVerSchema >= 1.3 Then   'Add Cell_ACI sheet
        Call ReadChannelMcellFile(iTest_ID, strDaqChannelNum)
        If gbIsImporting = False Then Exit Function
    End If
    
    ReadArbinSysDataBase = True
End Function

Sub InterfaceMiscEnd()
    Me.Caption = "Import Data"
    Me.MousePointer = fmMousePointerDefault
    'btnCancel.MousePointer = fmMousePointerArrow
    ListBoxTestName.Enabled = True
    btnAdvanced.Enabled = True
'    btnChangeFileNameInput.Enabled = True
    btnChangeFileNameOutput.Enabled = True
    btnImport.Enabled = True
'    btnImportPlot.Enabled = True
    Call TextBoxPromptSet2
    Application.ScreenUpdating = True
    If OptionChannel.Value = True Then
        gbCheckChNormal = CheckChNormal.Value
        gbCheckChAuxiliary = CheckChAuxiliary.Value
        gbCheckChStatistics = CheckChStatistics.Value
        gbCheckChSmartBattery = CheckChSmartBattery.Value
    End If
    If OptionCell.Value = True Then
        gbCheckCellAll = CheckCellAll.Value
        gbCheckCellAuxiliary = CheckCellAuxiliary.Value
    End If
End Sub

Function MakeInfoSheetHead()
    Dim i As Integer, j As Integer
    If Not HasSheetOf(gbInfoSheetName) Then
        Call MadeNewSheet(ActiveWorkbook, gbInfoSheetName)
        On Error Resume Next
        With Worksheets(gbInfoSheetName)
            If gbbIsPrinterExist = True Then
                '.PageSetup.LeftFooter = "&D &T"
                .PageSetup.Orientation = xlLandscape
                .PageSetup.BlackAndWhite = False
            End If
            '.Cells.ColumnWidth = 12.78
            .Columns("A:E").HorizontalAlignment = xlLeft
            .Columns("A").ColumnWidth = 7#
            .Columns("B").ColumnWidth = 17#
            .Columns("C:D").ColumnWidth = 18#
            .Columns("E").ColumnWidth = 19.33  '29#  '58#
            i = 1: j = 4
            .cells(i, j) = "TEST REPORT"
            .cells(i, j).HorizontalAlignment = xlCenter
            .cells(i, j).Font.Name = "Times New Roman"
            .cells(i, j).Font.Size = 14
            .cells(i, j).Font.Underline = xlUnderlineStyleSingle
            .cells(2, j).HorizontalAlignment = xlCenter
'            .Cells(2, 12) = mMultifileName
'            .Cells(2, 12) = gFileNameOutput
            .cells(3, 4) = Date
            .cells(3, 4).HorizontalAlignment = xlCenter 'xlRight
            i = 4: .cells(i, 1) = "Channel"
            .cells(i, 2) = "Start_DateTime"
            .cells(i, 3) = "Schedule_File_Name"
'            .Cells(i, 4) = "Creator"
            .cells(i, 4) = "Test_File_Name"
            .cells(i, 5) = "Comments"
            
            With .Rows("4:4")
                .WrapText = True
                .Interior.ColorIndex = 35
                .Borders(xlEdgeLeft).LineStyle = xlContinuous
                .Borders(xlEdgeTop).LineStyle = xlContinuous
                .Borders(xlEdgeBottom).LineStyle = xlContinuous
                .Borders(xlEdgeRight).LineStyle = xlContinuous
                .Borders(xlInsideVertical).LineStyle = xlContinuous
            End With
            
            .Columns("F:G").ColumnWidth = 9.22   'F:G
            Range("F4:F4").HorizontalAlignment = xlRight
            .cells(i, 6) = "Chan_Num"
            '.Cells(I, 7) = "Cell_Num"
            
            j = 8    '8
            .Columns("H:L").ColumnWidth = 4.67     'H:L
            Range("H3:L3").Interior.ColorIndex = 34
            Range("H4:L4").HorizontalAlignment = xlRight
            .cells(i - 1, j) = "         Mapped_Aux_Number"
            .cells(i, j) = "Volt"
            .cells(i, j + 1) = "Temp"
            .cells(i, j + 2) = "Pres"
            .cells(i, j + 3) = "PH"
            .cells(i, j + 4) = "FR"
            
            j = 13   '13
            .Columns("M:R").ColumnWidth = 8.11    'M:R
            Range("M3:R3").Interior.ColorIndex = 33
            Range("M4:R4").HorizontalAlignment = xlCenter
            '.Cells(I - 1, J) = "                                   Log_Data_Flag                         "
            .cells(i - 1, j) = "                    Log_Data_Flag                "
            .cells(i, j) = "ChanStat"
            '.Cells(I, J + 1) = "CellNorm"
            '.Cells(I, J + 2) = "CellStat"
            .cells(i, j + 1) = "Aux"
            .cells(i, j + 2) = "SmartBty"
            .cells(i, j + 3) = "Event"
            
            gbiCellGrading = j + 4
            Range("Q3:S3").Interior.ColorIndex = 40
            'Range("Q4:S4").HorizontalAlignment = xlCenter
            .cells(i - 1, gbiCellGrading) = "               Cell Grading          "
            .cells(i - 1, gbiCellGrading).AddComment
            .cells(i - 1, gbiCellGrading).Comment.Visible = False
            .cells(i - 1, gbiCellGrading).Comment.Text Text:= _
            "For Cell Grading setting, click Arbin Data\Options... menu."
            .cells(i, gbiCellGrading) = "Grade"
            .cells(i, gbiCellGrading + 1) = gbsCellGrading1Name
            .cells(i, gbiCellGrading + 2) = gbsCellGrading2Name
            .cells(i, gbiCellGrading).AddComment
            .cells(i, gbiCellGrading).Comment.Visible = False
            .cells(i, gbiCellGrading).Comment.Text Text:= _
            "For Cell Grading data, check average value from statistical data sheets." & _
                " Grade A1 is the best cell."
                
            .Range("B5").Select
            'add Item_ID column
            j = 7 'Q
            .cells(i, j) = " Item_ID"
            .cells(i, j).HorizontalAlignment = xlCenter
            j = 20 'T
            .Range("T3").Interior.ColorIndex = 48
            .Columns("T").ColumnWidth = 11    'T
            .cells(i - 1, j) = "Concentration"
            .cells(i, j) = "Concentration"
            .cells(i, j).HorizontalAlignment = xlCenter
            
            j = 21 'U
            Range("U3:V3").Interior.ColorIndex = 38
            .Columns("U:V").ColumnWidth = 5.7     'U:V
            .cells(i - 1, j) = "   Digital I/O"
            .cells(i, j).HorizontalAlignment = xlCenter
            .cells(i, j) = "Digital Input"
            .cells(i, j + 1) = "Digital Output"
            .cells(i, j + 2) = "Related Humidity"
            ActiveWindow.FreezePanes = True
            
            
        End With
        gbInfoSheetNowRow = 5
        On Error GoTo 0
    End If

End Function

Function ReadResultVersionTable()
    Dim strQuery As String, TestRec As Recordset, i As Integer
    gbsVerSchema = ""
    gbfVerSchema = 0#
    strQuery = "SELECT * FROM Version_Table;"
    On Error GoTo ReadResultVersionTableError
    Set TestRec = gDB.OpenRecordset(strQuery, dbOpenForwardOnly, dbReadOnly)
    gbsVerSchema = TestRec.Fields(1).Value
    gbfVerSchema = Val(Right$(gbsVerSchema, 5))
    TestRec.Close
    Set TestRec = Nothing
ReadResultVersionTableError:
    On Error GoTo 0
    DoEvents
End Function

Function ReadGlobalTableInfo(TestID As Integer) As Boolean
    Dim strQuery As String, TestRec As Recordset
    Dim i As Integer, j As Integer
    Dim strTestNameTitle As String
    ReadGlobalTableInfo = False
    strQuery = "SELECT * FROM Global_Table Where ( [Test_ID] = " & TestID & ");"
    Set TestRec = gDB.OpenRecordset(strQuery, dbOpenForwardOnly, dbReadOnly)
    If TestRec.RecordCount <= 0 Then Exit Function
    On Error Resume Next
    With tGlobal_Table1
        .Test_ID = TestRec.Fields("Test_ID").Value
        .Test_Name = TestRec.Fields("Test_Name").Value
        .Channel_Index = TestRec.Fields("Channel_Index").Value
        .Start_DateTime = TestRec.Fields("Start_DateTime").Value
        .DAQ_Index = TestRec.Fields("DAQ_Index").Value
        .Channel_Type = TestRec.Fields("Channel_Type").Value
        .Creator = TestRec.Fields("Creator").Value
        .Comments = TestRec.Fields("Comments").Value
        .Schedule_File_Name = TestRec.Fields("Schedule_File_Name").Value
        .Channel_Number = TestRec.Fields("Channel_Number").Value
        '.Cell_Number = TestRec.Fields("Cell_Number").Value
        .Mapped_Aux_Number(0) = TestRec.Fields("Mapped_Aux_Voltage_Number").Value
        .Mapped_Aux_Number(1) = TestRec.Fields("Mapped_Aux_Temperature_Number").Value
        .Mapped_Aux_Number(2) = TestRec.Fields("Mapped_Aux_Pressure_Number").Value
        .Mapped_Aux_Number(3) = TestRec.Fields("Mapped_Aux_PH_Number").Value
        .Mapped_Aux_Number(4) = TestRec.Fields("Mapped_Aux_Flow_Rate_CNumber").Value
        If gbfVerSchema >= 1.14 Then
            .Mapped_Aux_Number(5) = TestRec.Fields("Mapped_Aux_Conc_CNumber").Value
            .Mapped_Aux_Number(6) = TestRec.Fields("Mapped_Aux_DI_CNumber").Value
            .Mapped_Aux_Number(7) = TestRec.Fields("Mapped_Aux_DO_CNumber").Value
        End If
        If gbfVerSchema >= 5.142 Then
            .Mapped_Aux_Number(8) = TestRec.Fields("Mapped_Aux_Relative_Humidity_CNumber").Value
        End If
        
        .Applications_Path = TestRec.Fields("Applications_Path").Value
        .Log_Data_Flag(0) = TestRec.Fields("Log_ChanStat_Data_Flag").Value
        '.Log_Data_Flag(1) = TestRec.Fields("Log_CellNormal_Data_Flag").Value
        '.Log_Data_Flag(2) = TestRec.Fields("Log_CellStat_Data_Flag").Value
        .Log_Data_Flag(3) = TestRec.Fields("Log_Aux_Data_Flag").Value
        .Log_Data_Flag(4) = TestRec.Fields("Log_Smart_Battery_Data_Flag").Value
        .Log_Data_Flag(5) = TestRec.Fields("Log_Event_Data_Flag").Value
        
        If gbfVerSchema >= 1.1 Then
            .Item_ID = TestRec.Fields("Item_ID").Value
        End If
        
    End With
    TestRec.Close
    Set TestRec = Nothing
    
   Rem Query Mapped_Anx_Concentration_CNumber,Mapped_Aux_Digital_Input_CNumber,Mapped_Aux_Digital_Output_CNumber
'    strQuery = "SELECT * FROM Auxiliary_Table Where ( [Test_ID] = " & TestID & ");"
'    Set TestRec = gDB.OpenRecordset(strQuery, dbOpenForwardOnly, dbReadOnly)
'    If TestRec.RecordCount <= 0 Then Exit Function
'    On Error Resume Next
    
'    TestRec.Close
'    Set TestRec = Nothing
    strTestNameTitle = Right(gFileNameOutput, Len(gFileNameOutput) - Len(gDirNameOutput) - 1)
    strTestNameTitle = Left(strTestNameTitle, Len(strTestNameTitle) - 4)
    
    
    With Worksheets(gbInfoSheetName)
        i = gbInfoSheetNowRow
'        .Cells(2, 4) = Left$(tGlobal_Table1.Test_Name, Len(tGlobal_Table1.Test_Name) - 7)
        .cells(2, 4) = strTestNameTitle
        .cells(i, 1).NumberFormat = "@"
        .cells(i, 1) = tGlobal_Table1.DAQ_Index & "-" & Format$(tGlobal_Table1.Channel_Index, "000")
        .cells(i, 2) = tGlobal_Table1.Start_DateTime
        .cells(i, 2).NumberFormat = "mm/dd/yy hh:mm:ss"
        .cells(i, 3) = tGlobal_Table1.Schedule_File_Name
'        .Cells(i, 4) = tGlobal_Table1.Creator
        .cells(i, 4) = mTestName
        .cells(i, 5) = tGlobal_Table1.Comments
        
        .cells(i, 6) = tGlobal_Table1.Channel_Number
        '.Cells(I, 7) = tGlobal_Table1.Cell_Number
        
        j = 8   '8
        .cells(i, j) = tGlobal_Table1.Mapped_Aux_Number(0)
        .cells(i, j + 1) = tGlobal_Table1.Mapped_Aux_Number(1)
        .cells(i, j + 2) = tGlobal_Table1.Mapped_Aux_Number(2)
        .cells(i, j + 3) = tGlobal_Table1.Mapped_Aux_Number(3)
        .cells(i, j + 4) = tGlobal_Table1.Mapped_Aux_Number(4)
        
        If gbfVerSchema >= 1.14 Then
            j = 20
            .cells(i, j) = tGlobal_Table1.Mapped_Aux_Number(5)
        
            j = 21
            .cells(i, j) = tGlobal_Table1.Mapped_Aux_Number(6)
            .cells(i, j + 1) = tGlobal_Table1.Mapped_Aux_Number(7)
        End If
        If gbfVerSchema >= 5.142 Then
            .cells(i, j + 2) = tGlobal_Table1.Mapped_Aux_Number(8)
        End If
        j = 13  '13
        .cells(i, j) = tGlobal_Table1.Log_Data_Flag(0)
        '.Cells(I, J + 1) = tGlobal_Table1.Log_Data_Flag(1)
        '.Cells(I, J + 2) = tGlobal_Table1.Log_Data_Flag(2)
        .cells(i, j + 1) = tGlobal_Table1.Log_Data_Flag(3)
        .cells(i, j + 2) = tGlobal_Table1.Log_Data_Flag(4)
        .cells(i, j + 3) = tGlobal_Table1.Log_Data_Flag(5)
        
        j = 7 'Q
        .cells(i, j) = tGlobal_Table1.Item_ID
        .cells(i, j).HorizontalAlignment = xlLeft

    End With
    
    On Error GoTo 0
    DoEvents
    ReadGlobalTableInfo = True
End Function

Function ReadChannelFile(TestID As Integer, ChannelNum As String) As Boolean
    Dim Query As String, tempRec As Recordset, SQLQry As String
    Dim lCount As Long, rCount, pCount As Long
    Query = "SELECT " & GetSQLTopPercent(tOptionEdit1)
    Query = Query & _
        " Data_Point," & _
        " Test_Time as [" & gbTestTimeName & "]," & _
        " DateTime as [" & gbDateTimeName & "]," & _
        " Step_Time as [" & gbStepTimeName & "]," & _
        " Step_Index," & _
        " Cycle_Index," & _
        " Current as [" & gbCurrentName & "]," & _
        " Voltage as [" & gbVoltageName & "]," & _
        " Charge_Capacity as [" & gbChargeCapacityName & "]," & _
        " Discharge_Capacity as [" & gbDischargeCapacityName & "]," & _
        " Charge_Energy as [" & gbChargeEnergyName & "]," & _
        " Discharge_Energy as [" & gbDischargeEnergyName & "]," & _
        " [dV/dt] as [" & gbDVdtName & "]"
    If gbfVerSchema >= 1.05 Then
        Query = Query & ", Internal_Resistance as [" & gbInternalResistanceName & "]"
        Query = Query & ", Is_FC_Data" 'If gbbHighlightPulseRow Then
    End If
    'End If
    If gbfVerSchema >= 1.12 Then
        Query = Query & ", AC_Impedance as [" & gbACImpedanceName & "]"
    End If
    If gbfVerSchema = 1.13 Then
        Query = Query & ", ACI_Phase as [" & gbACPhaseName & "]"
    End If
    If gbfVerSchema >= 1.14 Then
        Query = Query & ", ACI_Phase_Angle as [" & gbACPhaseName & "]"
    End If
    
    'Query = Query & ", DateTime"
'Query point number of data from data base for each channel, if more then gCount*x
    Query = Query & " FROM Channel_Normal_Table Where ( Test_ID =" & TestID
    ' PreQuery for point counts
'    SQLQry = "Select Count(Data_Point) as rCount FROM Channel_Normal_Table Where ( Test_ID =" & TestID & GetSQLConditionPart("", tOptionEdit1) & ");"
'    Set tempRec = gDB.OpenRecordset(SQLQry, dbOpenForwardOnly, dbReadOnly)
'    lCount = tempRec.Fields("rCount").Value
'    tempRec.Close
'    Set tempRec = Nothing
'    If tOptionEdit1.OptionID = 6 Then
'            pCount = lCount * tOptionEdit1.NumEdit1 / 100
'            lCount = lCount - pCount
'            Query = Query & " AND (" & gbDataPointName & ">" & lCount & ")"
'            lCount = pCount
'    End If
    Query = Query & GetSQLConditionPart("", tOptionEdit1, TestID)

'    If lCount > gCount And mbIsPlotAfterImport = True And OptionsForm.CheckBoxPlotWarning Then
'        MsgBox ("Data Point more than " & gCount & ". The Auto-ploting is disabled? " & vbCr _
'            & "You may need to use 'Advance>>' to plot the data piece by piece to reduce the waiting time.")
'            mbIsPlotAfterImport = False
'    End If
    If gbfVerSchema >= 1.11 Then
        Query = Query & " ) ORDER BY Data_Point;"
    Else
        Query = Query & " ) ORDER BY Test_Time;"
    End If
    ReadChannelFile = ReadRecordToSheetLoop(gbChannelName & "_" & ChannelNum, Query, 1)
End Function

Function ReadChannelStatisticFile(TestID As Integer, ChannelNum As String) As Boolean
    Dim Query As String, tempRec As Recordset, SQLQry As String
    Dim lCount As Long, rCount As Long, pCount As Long
    Query = "SELECT " & GetSQLTopPercent(tOptionEdit1)  ' Channel_Normal_Table.Test_ID, Channel_Normal_Table.Data_Point,"
    Query = Query & _
        " nn.Cycle_Index," & _
        " nn.Test_Time as [" & gbTestTimeName & "]," & _
        " nn.DateTime as [" & gbDateTimeName & "]," & _
        " nn.Current as [" & gbCurrentName & "]," & _
        " nn.Voltage as [" & gbVoltageName & "]," & _
        " nn.Charge_Capacity as [" & gbChargeCapacityName & "]," & _
        " nn.Discharge_Capacity as [" & gbDischargeCapacityName & "]," & _
        " nn.Charge_Energy as [" & gbChargeEnergyName & "]," & _
        " nn.Discharge_Energy as [" & gbDischargeEnergyName & "]"
    If gbfVerSchema >= 1.05 Then
        Query = Query & ", nn.Internal_Resistance as [" & gbInternalResistanceName & "]"
    End If
    If gbfVerSchema >= 1.12 Then '02-12-2001
        Query = Query & ", nn.AC_Impedance as [" & gbACImpedanceName & "]"
    End If
    If gbfVerSchema = 1.13 Then
        Query = Query & ", nn.ACI_Phase as [" & gbACPhaseName & "]"
    End If
    If gbfVerSchema >= 1.14 Then
        Query = Query & ", ACI_Phase_Angle as [" & gbACPhaseName & "]"
    End If
    If gbfVerSchema >= 1.44 Then
        Query = Query & ", Charge_Time as [Charge_Time(s)], DisCharge_Time as [DisCharge_Time(s)] "
    End If
   

    Query = Query & ", ss.Vmax_On_Cycle as [" & gbVmaxOnCycleName & "]"
    Query = Query & " FROM Channel_Normal_Table AS nn INNER JOIN Channel_Statistic_Table AS ss"
    Query = Query & " ON (nn.Data_Point = ss.Data_Point) AND (nn.Test_ID = ss.Test_ID)"
    Query = Query & " WHERE (nn.Test_ID = " & TestID & ")"
    Query = Query & GetSQLConditionPart("nn.", tOptionEdit1, TestID)

' Added for all option active
'    SQLQry = "Select Count(nn.Cycle_Index) as rCount FROM Channel_Normal_Table AS nn INNER JOIN Channel_Statistic_Table AS ss  ON (nn.Data_Point = ss.Data_Point) AND (nn.Test_ID = ss.Test_ID) WHERE (nn.Test_ID = " & TestID & ")"
'    Set tempRec = gDB.OpenRecordset(SQLQry, dbOpenForwardOnly, dbReadOnly)
'    lCount = tempRec.Fields("rCount").Value
'    tempRec.Close
'    Set tempRec = Nothing
'    If tOptionEdit1.OptionID = 6 Then
'            pCount = lCount * tOptionEdit1.NumEdit1 / 100
'            lCount = lCount - pCount
'            Query = Query & " AND (" & gbDataPointName & ">" & lCount & ")"
'            lCount = pCount
'    End If
''    Query = Query & GetSQLConditionPart("nn.", tOptionEdit1, TestID)
'    If lCount > gCount And mbIsPlotAfterImport = True And OptionsForm.CheckBoxPlotWarning Then
'        If (MsgBox("Data Point more than " & gCount & ". Do you want to disable ploting after Import? " & vbCr _
'            & "Otherwise, you can click 'Advance>>' button to select proper section for view!", vbYesNo) = vbYes) Then
'            mbIsPlotAfterImport = False
'        End If
'    End If
    Query = Query & " ORDER BY nn.Test_Time;"
    ReadChannelStatisticFile = ReadRecordToSheetLoop(gbStatisticName & "s_" & ChannelNum, Query, 1)
End Function

Function ReadAuxiliaryFile(TestID As Integer, ChannelNum As String, CellIndex As Integer, SheetName As String) As Boolean
    Dim iColumnCount As Integer, iNum As Integer, iDataType As Integer, iStartA As Integer
    Dim wksheet As Excel.Worksheet, strTemp As String
    Dim AuxiIndexNum As Integer, MaxCellNum As Integer
    Dim strQry As String, iStartCol As Integer
    Dim rec As Recordset, iCell As Integer, iAuxTypeCount As Integer
    
    ReadAuxiliaryFile = False
    iColumnCount = ActiveSheet.Range("A1").End(xlToRight).Column                'after normal data sheet
    '--Read auxiliary for channel or cell:
    If AVSheet.Value Then
        iStartA = 1
        strTemp = SheetName & "(AV)"
        If Not HasSheetOf(SheetName & "(AV)") Then
        '    Call MadeNewSheet(ActiveWorkbook, strTemp)
            Worksheets(SheetName).Copy after:=Worksheets(SheetName)
            ActiveSheet.Name = strTemp
        End If
        iNum = tGlobal_Table1.Mapped_Aux_Number(iDataType)
        If iNum > 0 Then
            For AuxiIndexNum = 0 To iNum - 1
                If iColumnCount >= giMaxColumnsNum - 1 - Abs(gAuxRate) Then
                    MsgBox "2nd Voltage number too much to handle by Excel," & vbCr _
                    & "Please disable dX/dt on Options page or the exceeding part will be truncated!", vbOKOnly
                    Exit For
                End If
                Application.StatusBar = "Read 2nd Voltage Data, Channel " & ChannelNum & _
                    ", " & Trim(gAuxiDataTypeTitle(iDataType, 0)) & "_" & AuxiIndexNum + 1
                If ReadAuxiliaryRecord(TestID, ChannelNum, CellIndex, _
                    AuxiIndexNum, iDataType, iColumnCount, strTemp) = True Then
                        If gAuxRate Then
                            iColumnCount = iColumnCount + 2
                            Else
                            iColumnCount = iColumnCount + 1
                        End If
                End If
            Next AuxiIndexNum
        End If
        Else
        iStartA = 0
    End If
    iColumnCount = ActiveSheet.Range("A1").End(xlToRight).Column                'after normal data sheet
    If gbfVerSchema >= 5.142 Then
        iAuxTypeCount = 8
    Else
        iAuxTypeCount = 7
    End If
    For iDataType = iStartA To iAuxTypeCount
        'Data_type:  0->2nd V; 1->T; 2->P; 3->Ph; 4->Flow Rate; 5->Concentration; 6->Digital Input; 7->Digital Output; 8->Relative Humidity
        'If iColumnCount = 0 Then iColumnCount = 1
        iNum = tGlobal_Table1.Mapped_Aux_Number(iDataType)
        If iNum > 0 Then
            For AuxiIndexNum = 0 To iNum - 1
                If iColumnCount >= giMaxColumnsNum - 1 - Abs(gAuxRate) Then Exit Function
                Application.StatusBar = "Read Auxiliary Data, Channel " & ChannelNum & _
                    ", " & Trim(gAuxiDataTypeTitle(iDataType, 0)) & "_" & AuxiIndexNum + 1
                If ReadAuxiliaryRecord(TestID, ChannelNum, CellIndex, _
                    AuxiIndexNum, iDataType, iColumnCount, SheetName) = True Then
                        If gAuxRate Then
                            iColumnCount = iColumnCount + 2
                            Else
                            iColumnCount = iColumnCount + 1
                        End If
                End If
            Next AuxiIndexNum
        End If
    Next iDataType
    iColumnCount = iColumnCount + 1
    If gToyota And gbfVerSchema >= 1.3 Then 'Add fuel cell ACI data here
        strQry = "SELECT Max([Cell_Index]) AS MaxCellNum FROM MCell_Aci_Data_Table Where Test_ID=" & TestID & ";"
        Set rec = gDB.OpenRecordset(strQry, dbOpenForwardOnly, dbReadOnly)
        On Error GoTo Err_Exit
        If rec.EOF Then GoTo Err_Exit
            MaxCellNum = rec.Fields("MaxCellNum").Value
        Set rec = Nothing
        For iCell = 0 To MaxCellNum
            strQry = "Select ACI_" & iCell + 1 & " from (SELECT Channel_Normal_Table.Data_Point, IIf(IsNull([ACI]),0,[ACI]) AS ACI_" & iCell + 1 & ",IIf(IsNull([Cell_Index])," & iCell & ",[Cell_Index]) as CellIndex FROM Channel_Normal_Table LEFT JOIN MCell_Aci_Data_Table ON Channel_Normal_Table.Data_Point =MCell_Aci_Data_Table.Data_Point ) "
            strQry = strQry & " WHERE CellIndex =" & iCell & " Order by Data_Point;"
            If ReadRecordToSheetLoop(SheetName, strQry, iColumnCount) Then
                iColumnCount = iColumnCount + 1
            End If
        Next iCell
    End If
Err_Exit: If Err.Number <> 0 Then
MsgBox "Data_Pro Error:" & Err.Number & vbCrLf & Err.Description
End If
End Function

Function ReadAuxiliaryRecord(TestID As Integer, ChannelNum As String, CellIndex As Integer, _
    AuxiIndexNum As Integer, iDataType As Integer, iColumnCount As Integer, SheetName As String) As Boolean
    Dim Query As String, Query2 As String
    Dim AuxQry As String
    Dim AuxQryRec As Recordset
    Dim ColumnName As String
    Dim iChannelNo As Integer
    Dim iLoopRead As Integer
    ReadAuxiliaryRecord = False
    
    iChannelNo = Val(Right$(ChannelNum, 3))
    If gbfVerSchema >= 1.4 And gAuxRate Then gAuxRate = False: MsgBox "No Auxiliary Rate was provided by further Versoin And Rate Enable was Disable", vbOKOnly

    '--Define a query
    AuxQry = "SELECT "
    If gAuxRate Then
        AuxQry = AuxQry & "Auxiliary_Table.Data_Point,Auxiliary_Table.X,Auxiliary_Table.[dX/dt]"
        Else
        AuxQry = AuxQry & "Auxiliary_Table.Data_Point,Auxiliary_Table.X"
    End If
    If gbfVerSchema >= 1.21 Then
        If gbfVerSchema >= 1.4 Then
             AuxQry = AuxQry & ",Aux_Global_Data_Table.Nickname,Channel_Index "
        Else
        AuxQry = AuxQry & ",Auxiliary_Table.Nickname"
        End If
    End If
    
    AuxQry = AuxQry & " FROM Auxiliary_Table"

    If gbfVerSchema >= 1.4 Then
        AuxQry = AuxQry & " Inner Join  Aux_Global_Data_Table ON (Aux_Global_Data_Table.Auxiliary_Index = Auxiliary_Table.Auxiliary_Index) AND (Aux_Global_Data_Table.Data_Type = Auxiliary_Table.Data_Type) "
    End If
        AuxQry = AuxQry & " WHERE ((Auxiliary_Table.Test_ID=" & TestID
        AuxQry = AuxQry & ") AND (Auxiliary_Table.Auxiliary_Index=" & AuxiIndexNum
    '   AuxQry = AuxQry & ") AND (Cell_Index = " & CellIndex
        AuxQry = AuxQry & ") AND (Auxiliary_Table.Data_Type=" & iDataType & ") And (Test_ID=" & TestID & "))"
    Query = "SELECT"
    If gbfVerSchema >= 1.21 Then
        If gAuxRate Then
            Query = Query & " cc.Data_Point,aa.X,aa.[dX/dt],aa.Nickname FROM Channel_Normal_Table AS cc LEFT JOIN (" & AuxQry & ") AS aa"
            Else
            Query = Query & " cc.Data_Point,aa.X,aa.Nickname FROM Channel_Normal_Table AS cc LEFT JOIN (" & AuxQry & ") AS aa"
        End If
        Else
        If gAuxRate Then
            Query = Query & " cc.Data_Point,aa.X,aa.[dX/dt] FROM Channel_Normal_Table AS cc LEFT JOIN (" & AuxQry & ") AS aa"
            Else
            Query = Query & " cc.Data_Point,aa.X FROM Channel_Normal_Table AS cc LEFT JOIN (" & AuxQry & ") AS aa"
        End If
    End If
    Query = Query & " ON cc.Data_Point=aa.Data_Point Where cc.Test_ID=" & TestID & " "
    Query = Query & GetSQLConditionPart("cc.", tOptionEdit1, TestID) & " ORDER BY cc.Data_Point;"
'    On Error Resume Next
'    Set AuxQryDef2 = gDB.CreateQueryDef("AuxQry")
'    On Error GoTo 0
'    gDB.QueryDefs("AuxQry").Sql = Query
    
'    Query2 = "SELECT " & GetSQLTopPercent(tOptionEdit1)
'    Query2 = Query2 & " AuxQry.X, AuxQry.[dX/dt]"
'    Query2 = Query2 & " FROM AuxQry RIGHT JOIN Channel_Normal_Table AS cc"
'    Query2 = Query2 & " ON (AuxQry.Data_Point = cc.Data_Point)"
'    Query2 = Query2 & " AND (AuxQry.Test_ID = cc.Test_ID)"
'    Query2 = Query2 & " WHERE ((cc.Test_ID = " & TestID & ") "
'    Query2 = Query2 & GetSQLConditionPart("cc.", tOptionEdit1)
'    Query2 = Query2 & " ) ORDER BY cc.Data_Point;"

'    If CellIndex = -1 Then
'      ColumnName = ""  ' Channel's Auxi.
'    Else
'      ColumnName = "Cell_" & CellIndex & "_"  ' Cell's Auxi.
'    End If
        
    For iLoopRead = 1 To 20
'        ReadAuxiliaryRecord = ReadAuxRecordToSheet(SheetName, Query2, iColumnCount + 1, AuxiIndexNum, iDataType, iLoopRead)
        ReadAuxiliaryRecord = ReadAuxRecordToSheet(SheetName, Query, iColumnCount + 1, AuxiIndexNum, iDataType, iLoopRead)
        If ReadAuxiliaryRecord = True Then Exit Function
        If gbIsImporting = False Then Exit Function
        DoEvents
        Sleep gSleepTime '12-03-2001 speed up
    Next iLoopRead

End Function

Function ReadSmartBatteryInfo(TestID As Integer)
    Dim strQuery As String, TestRec As Recordset, i As Integer
    Dim j As Integer, iColumn As Integer
    iColumn = gbiCellGrading + 6
    strQuery = "SELECT * FROM Smart_Battery_Info_Table Where ( [Test_ID] = " & TestID & ");"
    On Error GoTo ReadSmartBatteryInfo_Error
    Set TestRec = gDB.OpenRecordset(strQuery, dbOpenForwardOnly, dbReadOnly)
    On Error Resume Next
    With Worksheets(gbInfoSheetName)
        j = gbInfoSheetNowRow
'        If j = 5 Then
'            'SmartBattery Title
'            .Range("W3:AI3").Interior.ColorIndex = 24
'            .Cells(j - 2, iColumn) = "Smart Battery ====>      "
'            j = j - 1
'            .Columns("S:AE").ColumnWidth = 11.11
'            .Cells(j, iColumn) = "Manufacturer Access"
'            .Cells(j, iColumn + 1) = "Manufacturer Name"
'            .Cells(j, iColumn + 2) = "Manufacturer Date"
'            .Cells(j, iColumn + 3) = "Manufacturer Data"
'            .Cells(j, iColumn + 4) = "Design Capacity(Ah or 10Wh)"
'            .Cells(j, iColumn + 5) = "Design Voltage(V)"
'            .Cells(j, iColumn + 6) = "Specification Info"
'            .Cells(j, iColumn + 7) = "Serial Number"
'            .Cells(j, iColumn + 8) = "Device Name"
'            .Cells(j, iColumn + 9) = "Device Chemistry"
'            .Cells(j, iColumn + 10) = "FullCharge Capacity(Ah or 10Wh)"
'            .Cells(j, iColumn + 11) = "Charging Current(A)"
'            .Cells(j, iColumn + 12) = "Charging Voltage(V)"
'            '.Cells(J - 1, iColumn + 10) = Date
'            .Cells(j, iColumn + 13) = "Flash60"
''            .Cells(j, iColumn + 14) = "Flash61"
''            .Cells(j, iColumn + 15) = "Flash62"
''            .Cells(j, iColumn + 16) = "Flash63"
''            .Cells(j, iColumn + 17) = "Flash64"
''            .Cells(j, iColumn + 18) = "Flash65"
''            .Cells(j, iColumn + 19) = "Flash66"
''            .Cells(j, iColumn + 20) = "Flash67"
''            .Cells(j, iColumn + 21) = "Flash68"
''            .Cells(j, iColumn + 22) = "Flash69"
''            .Cells(j, iColumn + 23) = "Flash6A"
''            .Cells(j, iColumn + 24) = "Flash6B"
''            .Cells(j, iColumn + 25) = "Flash6C"
''            .Cells(j, iColumn + 26) = "Flash6D"
''            .Cells(j, iColumn + 27) = "Flash6E"
''            .Cells(j, iColumn + 28) = "Flash6F"
''            .Cells(j, iColumn + 29) = "Flash70"
'            j = j + 1
'        End If
            .cells(j, iColumn) = TestRec.Fields("ManufacturerAccess").Value
            .cells(j, iColumn + 1) = TestRec.Fields("ManufacturerName")
            .cells(j, iColumn + 2) = TestRec.Fields("ManufacturerDate")
            .cells(j, iColumn + 2).NumberFormat = "mm/dd/yy"
            .cells(j, iColumn + 3) = TestRec.Fields("ManufacturerData")
            .cells(j, iColumn + 4) = TestRec.Fields("DesignCapacity")
            .cells(j, iColumn + 5) = TestRec.Fields("DesignVoltage")
            .cells(j, iColumn + 6) = TestRec.Fields("SpecificationInfo")
            .cells(j, iColumn + 7) = TestRec.Fields("SerialNumber")
            .cells(j, iColumn + 8) = TestRec.Fields("DeviceName")
            .cells(j, iColumn + 9) = TestRec.Fields("DeviceChemistry")
            .cells(j, iColumn + 10) = TestRec.Fields("FullChargeCapacity")
            .cells(j, iColumn + 11) = TestRec.Fields("ChargingCurrent")
            .cells(j, iColumn + 12) = TestRec.Fields("ChargingVoltage")
'            .Cells(j, iColumn + 13) = TestRec.Fields("Flash60")
'            .Cells(j, iColumn + 14) = TestRec.Fields("Flash61")
'            .Cells(j, iColumn + 15) = TestRec.Fields("Flash62")
'            .Cells(j, iColumn + 16) = TestRec.Fields("Flash63")
'            .Cells(j, iColumn + 17) = TestRec.Fields("Flash64")
'            .Cells(j, iColumn + 18) = TestRec.Fields("Flash65")
'            .Cells(j, iColumn + 19) = TestRec.Fields("Flash66")
'            .Cells(j, iColumn + 20) = TestRec.Fields("Flash67")
'            .Cells(j, iColumn + 21) = TestRec.Fields("Flash68")
'            .Cells(j, iColumn + 22) = TestRec.Fields("Flash69")
'            .Cells(j, iColumn + 23) = TestRec.Fields("Flash6A")
'            .Cells(j, iColumn + 24) = TestRec.Fields("Flash6B")
'            .Cells(j, iColumn + 25) = TestRec.Fields("Flash6C")
'            .Cells(j, iColumn + 26) = TestRec.Fields("Flash6D")
'            .Cells(j, iColumn + 27) = TestRec.Fields("Flash6E")
'            .Cells(j, iColumn + 28) = TestRec.Fields("Flash6F")
'            .Cells(j, iColumn + 29) = TestRec.Fields("Flash70")
    End With
    TestRec.Close
    Set TestRec = Nothing

ReadSmartBatteryInfo_Error:
    On Error GoTo 0
End Function

Function MakeSmartBatteryInfoToHeadSheet()
    Dim strQuery As String, TestRec As Recordset, i As Integer
    Dim j As Integer, iColumn As Integer
    iColumn = gbiCellGrading + 6
'    strQuery = "SELECT * FROM Smart_Battery_Info_Table Where ( [Test_ID] = " & TestID & ");"
'    On Error GoTo ReadSmartBatteryInfo_Error
'    Set TestRec = gDB.OpenRecordset(strQuery, dbOpenForwardOnly, dbReadOnly)
    On Error Resume Next
    With Worksheets(gbInfoSheetName)
        j = gbInfoSheetNowRow
        If j = 5 Then
            'SmartBattery Title
            .Range("W3:AI3").Interior.ColorIndex = 24
            .cells(j - 2, iColumn) = "Smart Battery ====>      "
            j = j - 1
            .Columns("S:AE").ColumnWidth = 11.11
            .cells(j, iColumn) = "Manufacturer Access"
            .cells(j, iColumn + 1) = "Manufacturer Name"
            .cells(j, iColumn + 2) = "Manufacturer Date"
            .cells(j, iColumn + 3) = "Manufacturer Data"
            .cells(j, iColumn + 4) = "Design Capacity(Ah or 10Wh)"
            .cells(j, iColumn + 5) = "Design Voltage(V)"
            .cells(j, iColumn + 6) = "Specification Info"
            .cells(j, iColumn + 7) = "Serial Number"
            .cells(j, iColumn + 8) = "Device Name"
            .cells(j, iColumn + 9) = "Device Chemistry"
            .cells(j, iColumn + 10) = "FullCharge Capacity(Ah or 10Wh)"
            .cells(j, iColumn + 11) = "Charging Current(A)"
            .cells(j, iColumn + 12) = "Charging Voltage(V)"
'            .Cells(j - 1, iColumn + 10) = Date
'            .Cells(j, iColumn + 13) = "Flash60"
'            .Cells(j, iColumn + 14) = "Flash61"
'           .Cells(j, iColumn + 15) = "Flash62"
'            .Cells(j, iColumn + 16) = "Flash63"
'            .Cells(j, iColumn + 17) = "Flash64"
'            .Cells(j, iColumn + 18) = "Flash65"
'            .Cells(j, iColumn + 19) = "Flash66"
'            .Cells(j, iColumn + 20) = "Flash67"
'            .Cells(j, iColumn + 21) = "Flash68"
'            .Cells(j, iColumn + 22) = "Flash69"
'            .Cells(j, iColumn + 23) = "Flash6A"
'            .Cells(j, iColumn + 24) = "Flash6B"
'            .Cells(j, iColumn + 25) = "Flash6C"
'            .Cells(j, iColumn + 26) = "Flash6D"
'            .Cells(j, iColumn + 27) = "Flash6E"
'            .Cells(j, iColumn + 28) = "Flash6F"
'            .Cells(j, iColumn + 29) = "Flash70"
'            j = j + 1
        End If
'            .Cells(j, iColumn) = TestRec.Fields("ManufacturerAccess").Value
'            .Cells(j, iColumn + 1) = TestRec.Fields("ManufacturerName")
'            .Cells(j, iColumn + 2) = TestRec.Fields("ManufacturerDate")
'            .Cells(j, iColumn + 2).NumberFormat = "mm/dd/yy"
'            .Cells(j, iColumn + 3) = TestRec.Fields("ManufacturerData")
'            .Cells(j, iColumn + 4) = TestRec.Fields("DesignCapacity")
'            .Cells(j, iColumn + 5) = TestRec.Fields("DesignVoltage")
'            .Cells(j, iColumn + 6) = TestRec.Fields("SpecificationInfo")
'            .Cells(j, iColumn + 7) = TestRec.Fields("SerialNumber")
'            .Cells(j, iColumn + 8) = TestRec.Fields("DeviceName")
'            .Cells(j, iColumn + 9) = TestRec.Fields("DeviceChemistry")
'            .Cells(j, iColumn + 10) = TestRec.Fields("FullChargeCapacity")
'            .Cells(j, iColumn + 11) = TestRec.Fields("ChargingCurrent")
'            .Cells(j, iColumn + 12) = TestRec.Fields("ChargingVoltage")
''            .Cells(j, iColumn + 13) = TestRec.Fields("Flash60")
''            .Cells(j, iColumn + 14) = TestRec.Fields("Flash61")
''            .Cells(j, iColumn + 15) = TestRec.Fields("Flash62")
''            .Cells(j, iColumn + 16) = TestRec.Fields("Flash63")
''            .Cells(j, iColumn + 17) = TestRec.Fields("Flash64")
''            .Cells(j, iColumn + 18) = TestRec.Fields("Flash65")
' '           .Cells(j, iColumn + 19) = TestRec.Fields("Flash66")
' '           .Cells(j, iColumn + 20) = TestRec.Fields("Flash67")
' '           .Cells(j, iColumn + 21) = TestRec.Fields("Flash68")
' '           .Cells(j, iColumn + 22) = TestRec.Fields("Flash69")
' '           .Cells(j, iColumn + 23) = TestRec.Fields("Flash6A")
' '           .Cells(j, iColumn + 24) = TestRec.Fields("Flash6B")
' '           .Cells(j, iColumn + 25) = TestRec.Fields("Flash6C")
' '           .Cells(j, iColumn + 26) = TestRec.Fields("Flash6D")
' '           .Cells(j, iColumn + 27) = TestRec.Fields("Flash6E")
' '           .Cells(j, iColumn + 28) = TestRec.Fields("Flash6F")
' '           .Cells(j, iColumn + 29) = TestRec.Fields("Flash70")
    End With
'    TestRec.Close
'    Set TestRec = Nothing

ReadSmartBatteryInfo_Error:
    On Error GoTo 0
End Function


Function ReadSmartBatteryFile(TestID As Integer, ChannelNum As String) As Boolean
    Dim Query As String
    Dim strQuery As String, TestRec As Recordset, i As Integer

    Query = "SELECT " & GetSQLTopPercent(tOptionEdit1)
    Query = Query & _
        " sb.Data_Point," & _
        " cc.Test_Time as [" & gbTestTimeName & "]," & _
        " cc.Step_Time as [" & gbStepTimeName & "]," & _
        " sb.Current as [" & gbCurrentName & "]," & _
        " sb.Voltage as [" & gbVoltageName & "]," & _
        " sb.Temperature as [" & gbTemperatureName & "]," & _
        " sb.AverageCurrent as [AverageCurrent(A)]," & _
        " sb.CycleCount," & _
        " sb.RemainingCapacityAlarm as [RemainingCapacityAlarm(mWH or 10mWH)], " & _
        " sb.RemainingTimeAlarm as [RemainingTimeAlarm(s)]," & _
        " '0x' & hex(sb.BatteryMode) as BatteryMode,sb.AtRate as [AtRate(A or 10W)]," & _
        " sb.AtRateTimeToFull as [AtRateTimeToFull(s)]," & _
        " sb.AtRateTimeToEmpty as [AtRateTimeToEmpty(s)]," & _
        " sb.AtRateOK,sb.MaxError," & _
        " sb.RelativeStateOfCharge as [RelativeStateOfCharge(%)]," & _
        " sb.AbsoluteStateOfCharge as [AbsoluteStateOfCharge(%)]," & _
        " sb.RemainingCapacity as [RemainingCapacity(mWH or 10mWH)]," & _
        " sb.RunTimeToEmpty as [RunTimeToEmpty(s)]," & _
        " sb.AverageTimeToEmpty as [AverageTimeToEmpty(s)]," & _
        " sb.AverageTimeToFull as [AverageTimeToFull(s)]," & _
        " ('0x' & Hex([sb.BatteryStatus])) as [BatteryStatus]," & _
        " ('0x' & hex([sb.Pack_Status])) as Pack_Status,hex(sb.Pack_Configuration) as Pack_Configuration,sb.VCELL4,sb.VCELL3,sb.VCELL2,sb.VCELL1"
        If gbfVerSchema = 1.43 Then
            Query = Query & _
            ",sb.Flash60,sb.Flash61,sb.Flash62,sb.Flash63,sb.Flash64,sb.Flash65,sb.Flash66,sb.Flash67,sb.Flash67,sb.Flash68," & _
            " sb.Flash69,sb.Flash6A,sb.Flash6B,sb.Flash6C,sb.Flash6D,sb.Flash6E,sb.Flash6F,sb.Flash70 "
        End If
        If gbfVerSchema >= 1.44 Then Query = Query & ",sb.ManufacturerAccess,sb.FullChargeCapacity "
        If gbfVerSchema > 1.21 Then Query = Query & ",sb.BroadCast,sb.GPIO1,sb.GPIO2 "

    'BatteryMode, BatteryStatus
    Query = Query & " FROM Channel_Normal_Table AS cc"
    Query = Query & " INNER JOIN Smart_Battery_Data_Table AS sb"
    Query = Query & " ON (cc.Data_Point = sb.Data_Point) AND (cc.Test_ID = sb.Test_ID)"
    Query = Query & " Where ( sb.Test_ID =" & TestID
    Query = Query & ")" & GetSQLConditionPart("sb.", tOptionEdit1, TestID) & " ORDER BY sb.Data_Point;"

    
    'SELECT Smart_Battery_Data_Table.*, Channel_Normal_Table.Test_Time, Channel_Normal_Table.Step_Time
    'FROM Channel_Normal_Table INNER JOIN Smart_Battery_Data_Table ON (Channel_Normal_Table.Data_Point = Smart_Battery_Data_Table.Data_Point) AND (Channel_Normal_Table.Test_ID = Smart_Battery_Data_Table.Test_ID)
    'ORDER BY Smart_Battery_Data_Table.Data_Point;
    ReadSmartBatteryFile = ReadRecordToSheetLoop(gbSmartBatteryName & "_" & ChannelNum, Query, 1)
End Function

Function ReadSmartBatteryClockStrechFile(TestID As Integer, ChannelNum As String) As Boolean
    Dim Query As String
    Query = "SELECT " & GetSQLTopPercent(tOptionEdit1)
    Query = Query & _
        " sc.Data_Point,sc.ManufacturerAccess,sc.RemainingCapacityAlarm," & _
        " sc.RemainingTimeAlarm,sc.BatteryMode,sc.AtRate,sc.AtRateTimeToFull," & _
        " sc.AtRateTimeToEmpty,sc.AtRateOK,sc.Temperature,sc.Voltage," & _
        " sc.Current,sc.AverageCurrent,sc.MaxError,sc.RelativeStateOfCharge," & _
        " sc.AbsoluteStateOfCharge,sc.RemainingCapacity,sc.FullChargeCapacity," & _
        " sc.RunTimeToEmpty,sc.AverageTimeToEmpty,sc.AverageTimeToFull," & _
        " sc.ChargingCurrent,sc.ChargingVoltage,sc.BatteryStatus," & _
        " sc.CycleCount,sc.DesignCapacity,sc.DesignVoltage," & _
        " sc.SpecificationInfo,sc.ManufacturerDate,sc.SerialNumber," & _
        " sc.ManufacturerName,sc.DeviceName,sc.DeviceChemistry,sc.ManufacturerData," & _
        " sc.Pack_Status,sc.Pack_Configuration,sc.VCELL4,sc.VCELL3,sc.VCELL2,sc.VCELL1"
    Query = Query & " FROM Smart_Battery_Clock_Stretch_Table as sc "
    Query = Query & " Where ( sc.Test_ID =" & TestID
    Query = Query & " )" & GetSQLConditionPart("sc.", tOptionEdit1, TestID) & " ORDER BY sc.Data_Point;"

    
    'SELECT Smart_Battery_Data_Table.*, Channel_Normal_Table.Test_Time, Channel_Normal_Table.Step_Time
    'FROM Channel_Normal_Table INNER JOIN Smart_Battery_Data_Table ON (Channel_Normal_Table.Data_Point = Smart_Battery_Data_Table.Data_Point) AND (Channel_Normal_Table.Test_ID = Smart_Battery_Data_Table.Test_ID)
    'ORDER BY Smart_Battery_Data_Table.Data_Point;
    ReadSmartBatteryClockStrechFile = ReadRecordToSheetLoop("Clock_Stretch" & "_" & ChannelNum, Query, 1)
End Function
Function ReadCellFile(TestID As Integer, ChannelNum As String, iMaxCellNum As Integer) As Boolean
    Dim Query As String, i As Integer
    For i = 1 To iMaxCellNum    '--this channel's total cell number
        Query = "SELECT"
        'If I = 1 Then Query = Query & " nn.Data_Point, nn.Test_Time, nn.Step_Index, nn.Cycle_Index, cc.Data_Point , cc.Cycle_Index,"
        If i = 1 Then
            Query = Query & " nn.Data_Point, nn.Test_Time, nn.DateTime, nn.Step_Time,"
            Query = Query & " nn.Step_Index, nn.Cycle_Index, nn.Current,"
        End If
        Query = Query & " cc.Voltage,"
        Query = Query & " cc.Charge_Capacity, cc.Discharge_Capacity,"
        Query = Query & " cc.Charge_Energy, cc.Discharge_Energy, "
        Query = Query & " cc.Vpeak, cc.Vvalley"
        If gbfVerSchema >= 1.09 Then Query = Query & ", cc.Internal_Resistance"
        Query = Query & " FROM Channel_Normal_Table AS nn INNER JOIN Cell_Normal_Table AS cc"
        Query = Query & " ON (nn.Data_Point = cc.Data_Point) AND (nn.Test_ID = cc.Test_ID)"
        Query = Query & " WHERE (((cc.Test_ID) =" & TestID & ") AND ((cc.Cell_Index) =" & i - 1 & "))"
        Query = Query & " ORDER BY nn.Test_Time, nn.Cycle_Index;"
        Application.StatusBar = "Read Cell Normal Data, Channel " & ChannelNum & ", Cell = " & i '& ", MaxCell = " & iMaxCellNum
        ReadCellFile = ReadCellToSheetLoop(gbMultiCellChannelName & "_" & ChannelNum, Query, i, iMaxCellNum, 6)
    Next i
End Function

Function ReadCellStatisticFile(TestID As Integer, ChannelNum As String, iMaxCellNum As Integer) As Boolean
    Dim Query As String, i As Integer
    For i = 1 To iMaxCellNum    '--this channel's total cell number
        Query = "SELECT"
        If i = 1 Then
            Query = Query & " nn.Cycle_Index, nn.Test_Time, nn.Current, nn.Voltage,"
        End If
        Query = Query & " cc.Charge_Capacity, cc.Discharge_Capacity,"
        Query = Query & " cc.Charge_Energy, cc.Discharge_Energy,"
        Query = Query & " ss.Vmax_On_Cycle"
        Query = Query & " FROM Channel_Normal_Table as nn"
        Query = Query & " INNER JOIN (Cell_Normal_Table as cc"
        Query = Query & " INNER JOIN Cell_Statistic_Table as ss"
        Query = Query & " ON (cc.Cell_Index = ss.Cell_Index) AND (cc.Data_Point = ss.Data_Point)"
        Query = Query & " AND (cc.Test_ID = ss.Test_ID))"
        Query = Query & " ON (nn.Data_Point = cc.Data_Point) AND (nn.Test_ID = cc.Test_ID)"
        Query = Query & " WHERE (((cc.Test_ID) =" & TestID & ") AND ((cc.Cell_Index) =" & i - 1 & "))"
        Query = Query & " ORDER BY nn.Test_Time, nn.Cycle_Index;"
        Application.StatusBar = "Read Cell Statistical Data, Channel " & ChannelNum & ", Cell = " & i '& ", MaxCell = " & iMaxCellNum
        ReadCellStatisticFile = ReadCellToSheetLoop(gbMultiCellStatisticName & "_" & ChannelNum, Query, i, iMaxCellNum, 3)
    Next i
End Function

Function ReadCellToSheetLoop(SheetName As String, strQuery As String, CellNum As Integer, iMaxCellNum As Integer, ChannelColNum As Integer) As Boolean
    Dim iLoopRead As Integer
    For iLoopRead = 1 To 20
        ReadCellToSheetLoop = ReadCellToSheet(SheetName, strQuery, CellNum, iMaxCellNum, ChannelColNum, iLoopRead)
        If ReadCellToSheetLoop = True Then Exit Function
        If gbIsImporting = False Then Exit Function
        DoEvents
        Sleep gSleepTime
    Next iLoopRead
End Function

Function ReadCellToSheet(SheetName As String, strQuery As String, _
    CellNum As Integer, iMaxCellNum As Integer, ChannelColNum As Integer, _
    iLoopRead As Integer) As Boolean
    Dim wksheet As Excel.Worksheet
    Dim recTemp As Recordset
    Dim SheetNameFull As String, strTemp As String
    Dim iPageCount As Integer, iFieldsCount As Integer
    Dim iCols As Integer
    Dim iStartCol As Integer
    
    ReadCellToSheet = False
    iPageCount = 0
    On Error GoTo ReadCellToSheet_Error
    Set recTemp = gDB.OpenRecordset(strQuery, dbOpenForwardOnly, dbReadOnly)
    On Error Resume Next
    Do While Not recTemp.EOF
        Sleep gSleepTime
        DoEvents
        If gbIsImporting = False Then Exit Function
      
        iPageCount = iPageCount + 1
        If iPageCount >= 2 Then
            If iPageCount = 2 And iStartCol = 1 Then ActiveSheet.Name = SheetName & "_" & 1
            SheetNameFull = SheetName & "_" & iPageCount
        Else
            SheetNameFull = SheetName
        End If
        'Make a new sheet
        If Not HasSheetOf(SheetNameFull) Then
            Call MadeNewSheet(ActiveWorkbook, SheetNameFull)
        End If
        Set wksheet = Worksheets(SheetNameFull)
        
        '--The first line of active sheet is titles
        iFieldsCount = recTemp.Fields.Count
        With wksheet
            If CellNum = 1 Then
                .cells.ColumnWidth = 11.22
                .Rows("1:1").WrapText = True
                '.Rows("1:1").RowHeight = 21.6
                iStartCol = 1
                For iCols = 0 To iFieldsCount - 1
                    strTemp = "": If iCols > ChannelColNum Then strTemp = "Cell" & CellNum & "_"
                    .cells(1, iCols + iStartCol).Value = strTemp & recTemp.Fields(iCols).Name
                Next iCols
            ElseIf CellNum > 1 Then
                iStartCol = .Range("A1").End(xlToRight).Column + 1
                For iCols = 0 To iFieldsCount - 1
                    strTemp = "Cell" & CellNum & "_"
                    .cells(1, iCols + iStartCol).Value = strTemp & recTemp.Fields(iCols).Name
                Next iCols
            End If
            If CellNum >= 1 Then
                .cells(2, iStartCol).CopyFromRecordset Data:=recTemp, maxrows:=glMaxRowsNum, maxcolumns:=iFieldsCount
            End If
            If CellNum = iMaxCellNum Then
                Call FormatSheetColumnsNumber(wksheet)
                Call CreateSheetSomeColumns(wksheet, iPageCount)
                'Call FormatSheet1stRow(wkSheet)
                .Range("B2").Select
                ActiveWindow.FreezePanes = True
            End If
            ReadCellToSheet = True
        End With
    Loop
    recTemp.Close
    Set recTemp = Nothing
    
    If ReadCellToSheet = False Then
        If gbbLogReadNullCount Then
            Call WriteErrorLogFile("(ReadCellToS) Null", SheetName, CSng(CellNum))
        End If
        ReadCellToSheet = True
    End If
ReadCellToSheet_Exit:
    On Error GoTo 0
    Exit Function

ReadCellToSheet_Error:
    If gbbLogTryCount Then
        Call WriteErrorLogFile("(ReadCellToS) Try " & iLoopRead, SheetName, CSng(CellNum))
    End If
    GoTo ReadCellToSheet_Exit
    
    'set sheet's column's width:
    'ColumnCount = ActiveSheet.Range("A1").End(xlToRight).Column
    'For I = 3 To ColumnCount
    '  Columns(I).ColumnWidth = 18
    '  'Worksheets(CellSheetName).range("A1").End(xlToRight).ColumnWidth = 20
    'Next I
    '--close record and database

End Function
Function ReadChannelMcellFile(TestID As Integer, ChannelNum As String) As Boolean
    Dim Query As String, tempRec As Recordset, SQLQry As String
    Dim lCount As Long, rCount As Long, pCount As Long
    Query = "SELECT " ' Channel_Normal_Table.Test_ID, Channel_Normal_Table.Data_Point,"
    Query = Query & _
        " nn.Data_Point," & _
        " nn.Test_Time as [" & gbTestTimeName & "]," & _
        " nn.Step_Index," & _
        " nn.Cycle_Index"

    Query = Query & ", ss.Cell_Index+1 as [Cell_Index],ss.ACI,ss.Phase_Shift "
    Query = Query & " FROM Channel_Normal_Table AS nn INNER JOIN MCell_Aci_Data_Table AS ss"
    Query = Query & " ON (nn.Data_Point = ss.Data_Point) AND (nn.Test_ID = ss.Test_ID)"
    Query = Query & " WHERE (nn.Test_ID = " & TestID & ")"

'    Query = Query & ", ss.Cell_Index+1 as [Cell_Index],ss.ACI,ss.Phase_Shift,ss.Voltage,ss.Current "
'    Query = Query & " FROM Channel_Normal_Table AS nn INNER JOIN MCell_Aci_Data_Table AS ss"
'    Query = Query & " ON (nn.Data_Point = ss.Data_Point) AND (nn.Test_ID = ss.Test_ID)"
'    Query = Query & " WHERE (nn.Test_ID = " & TestID & ")"
' Added for all option active
'    SQLQry = "Select Count(nn.Cycle_Index) as rCount FROM Channel_Normal_Table AS nn INNER JOIN Channel_Statistic_Table AS ss  ON (nn.Data_Point = ss.Data_Point) AND (nn.Test_ID = ss.Test_ID) WHERE (nn.Test_ID = " & TestID & ")"
'    Set tempRec = gDB.OpenRecordset(SQLQry, dbOpenForwardOnly, dbReadOnly)
'    lCount = tempRec.Fields("rCount").Value
'    tempRec.Close
'    Set tempRec = Nothing
'    If tOptionEdit1.OptionID = 6 Then
'            pCount = lCount * tOptionEdit1.NumEdit1 / 100
'            lCount = lCount - pCount
'            Query = Query & " AND (" & gbDataPointName & ">" & lCount & ")"
'            lCount = pCount
'    End If
    Query = Query & GetSQLConditionPart("nn.", tOptionEdit1, TestID)
'    If lCount > gCount And mbIsPlotAfterImport = True And OptionsForm.CheckBoxPlotWarning Then
'        If (MsgBox("Data Point more than " & gCount & ". Do you want to disable ploting after Import? " & vbCr _
'            & "Otherwise, you can click 'Advance>>' button to select proper section for view!", vbYesNo) = vbYes) Then
'            mbIsPlotAfterImport = False
'        End If
'    End If
    Query = Query & " ORDER BY nn.Test_Time,[Cell_Index];"
    ReadChannelMcellFile = ReadRecordToSheetLoop("Cell_ACI_" & ChannelNum, Query, 1)
    If HasSheetOf("Cell_ACI_" & ChannelNum) Then
    With ActiveWorkbook.Worksheets("Cell_ACI_" & ChannelNum)
        .Columns("A:E").Select
        Selection.AutoFilter
        .cells(1, 5).Select
    End With
    End If
    
End Function

Public Sub NotPlotAfterImport()
        mbIsPlotAfterImport = False
End Sub
Function mfCreatDellMultiIni()
'Dim i As Integer
'Open ThisWorkbook.Path & "\" & "DellMultiFiles.ini" For Output As #4
    Dim i As Integer
    gbbTestTime2 = False
    gbbCycleTime = False
    gbbDayOfYear = False
    gDirNameInput = "C:\ARBINSOFTWARE\MITS_PRO\DATA"
    gFileNameInput = gDirNameInput & "\ArbinSys.res"
    gDirNameOutput = gDirNameInput
    gbbHighlightPulseRow = True
    gbbOpenImportDataDialog = False
    gbbOpenFileDialogAuto = False
    gbbOverwriteFiles = True
    gbbReloadAlert = True
    gbbTestMinute = False
    gbbTestHour = False
    gbbTestDay = False
    gbbCurrentmA = False
    gbbVoltagemV = False
    gbbLoad = False
    gbbPower = False
    gbbPrint = True
    gbbIPolarity = False
    gbbVPolarity = False
    gbbID = False
    gbbPD = False
    gbbCE = False
    gAuxRate = False
    
    giDecimalPlaces(1) = 3
    giDecimalPlaces(2) = 3
    For i = 3 To giDecimalPlacesAll
        giDecimalPlaces(i) = gbiRangeFormatDisable
    Next i
    gAuxRate = False
    Call mfSaveDellMultiIni
    End Function
    
Function mfReadDellMultiIni() As Boolean

    Dim i As Integer, iCount As Integer
    Dim j As Integer, strTemp As String
    Dim mTemp(5) As String
    Dim itemX As ListItem
    'Dim sReadData(8) As String
    On Error GoTo ReadMitsDatainiOpenError
Try_Again:
    Open ThisWorkbook.Path & "\" & "DellMultiFiles.ini" For Input As #4
    On Error Resume Next
    Input #4, iCount
    If iCount <> giCount Then GoTo ReadMitsDatainiOpenError
    'giCount
    Input #4, gDirNameInput
    Input #4, gFileNameInput
    Input #4, gDirNameOutput
    Input #4, i: gbbOpenImportDataDialog = CBool(i)
    Input #4, i: gbbOpenFileDialogAuto = CBool(i)
    Input #4, i: gbbOverwriteFiles = CBool(i)
    Input #4, i: gbbTestTime2 = CBool(i)
    Input #4, i: gbbCycleTime = CBool(i)
    Input #4, i: gbbDayOfYear = CBool(i)
    Input #4, i: gbbHighlightPulseRow = CBool(i)
    Input #4, i: gbbReloadAlert = CBool(i)
    Input #4, i: gbbTestMinute = CBool(i)
    Input #4, i: gbbTestHour = CBool(i)
    Input #4, i: gbbTestDay = CBool(i)
    Input #4, i: gbbCurrentmA = CBool(i)
    Input #4, i: gbbVoltagemV = CBool(i)
    Input #4, i: gbbLoad = CBool(i)
    Input #4, i: gbbPower = CBool(i)
    Input #4, i: gbbPrint = CBool(i)
    Input #4, i: gbbIPolarity = CBool(i)
    Input #4, i: gbbVPolarity = CBool(i)
    Input #4, i: gbbID = CBool(i)
    Input #4, i: gbbPD = CBool(i)
    Input #4, i: gbbCE = CBool(i)
    For j = 1 To giDecimalPlacesAll
        Input #4, i: giDecimalPlaces(j) = i
    Next j
    Input #4, i: gAuxRate = CBool(i)
    
    Input #4, i
    If i > 0 Then
      With ListViewSelectChan
         For iCount = 1 To i
         Input #4, mTemp(1)
         Input #4, mTemp(2)
         Input #4, mTemp(3)
         Input #4, mTemp(4)
         Input #4, mTemp(5)
          Set itemX = .ListItems.Add(, , mTemp(1))
            itemX.Key = mTemp(1)
            itemX.SubItems(1) = mTemp(2)
            itemX.SubItems(2) = mTemp(3)
            itemX.SubItems(3) = mTemp(4)
            itemX.Tag = mTemp(5)
        Next iCount
      End With
    End If
    Input #4, i
'    Debug.Print "i=" & i
    If i > 0 Then
        ReDim ListBoxTestNameArray(i, 2) As String
        With ListBoxTestName
            For iCount = 0 To i - 1
                .AddItem
                 Input #4, mTemp(1)
                 Input #4, mTemp(2)
                .List(iCount) = mTemp(1)
                 ListBoxTestNameArray(iCount + 1, 1) = mTemp(1)
                 ListBoxTestNameArray(iCount + 1, 2) = mTemp(2)
            Next iCount
        End With
    End If
     
    
    Close #4

ReadMitsDatainiExit:
    On Error GoTo 0
    Exit Function
    
ReadMitsDatainiOpenError:
    Close #4
    Call mfCreatDellMultiIni
    GoTo Try_Again




'Dim i, iCount As Integer
'Dim mTemp(3) As String
'Dim itemX As ListItem
'On Error GoTo ReadDellMultiIniError
'gfReadDellMultiIni = False
'TryAgain:
'Open ThisWorkbook.Path & "\" & "DellMultiFiles.ini" For Input As #4
'End If
         
'Close #4
'gfReadDellMultiIni = True
'Exit Function

'ReadDellMultiIniError:
'Close #4
'On Error GoTo 0
'Exit Function

'DellMultiIniError:
'Close #4
'Call gfCreatDellMultiIni
'GoTo TryAgain

            
End Function

Function mfSaveDellMultiIni() As Boolean
    Dim i, j As Integer, iCount As Integer
    On Error GoTo OpenErrorHandle
    Open ThisWorkbook.Path & "\" & "DellMultiFiles.ini" For Output As #4
    Print #4, giCount
    Print #4, gDirNameInput
    Print #4, gFileNameInput
    Print #4, gDirNameOutput
    Print #4, CInt(gbbOpenImportDataDialog)
    Print #4, CInt(gbbOpenFileDialogAuto)
    Print #4, CInt(gbbOverwriteFiles)
    Print #4, CInt(gbbTestTime2)
    Print #4, CInt(gbbCycleTime)
    Print #4, CInt(gbbDayOfYear)
    Print #4, CInt(gbbHighlightPulseRow)
    Print #4, CInt(gbbReloadAlert)
    Print #4, CInt(gbbTestMinute)
    Print #4, CInt(gbbTestHour)
    Print #4, CInt(gbbTestDay)
    Print #4, CInt(gbbCurrentmA)
    Print #4, CInt(gbbVoltagemV)
    Print #4, CInt(gbbLoad)
    Print #4, CInt(gbbPower)
    Print #4, CInt(gbbPrint)
    Print #4, CInt(gbbIPolarity)
    Print #4, CInt(gbbVPolarity)
    Print #4, CInt(gbbID)
    Print #4, CInt(gbbPD)
    Print #4, CInt(gbbCE)
    For i = 1 To giDecimalPlacesAll
        Print #4, giDecimalPlaces(i)
    Next i
    Print #4, CInt(gAuxRate)
    
    With ListViewSelectChan
        i = .ListItems.Count
        Print #4, i
        If i > 0 Then
            For iCount = 1 To i
                Print #4, .ListItems(iCount).Key                    'Channel_Index (1-001)
                Print #4, .ListItems(iCount).SubItems(1)            'Item_ID (ddd)
                Print #4, .ListItems(iCount).SubItems(2)            'Test_Name (Function_a)
                Print #4, .ListItems(iCount).SubItems(3)            'File_Name (C:\ArbinSoftware\MitsPro\Data\Function_a.res)
                Print #4, .ListItems(iCount).Tag
            Next iCount
        End If
    End With
    With ListBoxTestName
     j = .ListCount
       Print #4, j
        If j > 0 Then
             For iCount = 0 To j - 1
 '                  Print #4, ListBoxTestName.List(iCount)
                   Print #4, ListBoxTestNameArray(iCount + 1, 1)
                   Print #4, ListBoxTestNameArray(iCount + 1, 2)
'    Debug.Print "iCount=" & iCount & ": " & ListBoxTestNameArray(iCount + 1, 1) & ";" & ListBoxTestNameArray(iCount + 1, 2)
             Next iCount
        End If
    End With
    
    Close #4
Exit Function
OpenErrorHandle:
    If Err.Number = 75 Then
        On Error GoTo ReadOnlyFile
        SetAttr ThisWorkbook.Path & "\" & "DellMultiFiles.ini", vbNormal
        Resume
    End If
ReadOnlyFile:
        MsgBox "You have not enough right to write file or your work space located CD-ROM, ReadOnly Network drive."

'Dim i, iCount As Integer
'On Error GoTo OpenErrorHandle
'gfSaveDellMultiIni = False
'Open ThisWorkbook.Path & "\" & "DellMultiFiles.ini" For Output As #4
' i = ListViewSelectChan.ListItems.Count
'Debug.Print "ini: i=" & i

'Debug.Print "ini: " & .ListItems(i).Key

End Function



Public Sub UnlockFile()
        bLockImportData = False
End Sub
Function ReadEventsFile(TestID As Integer, ChannelNum As String) As Boolean
    Dim Query As String
    Query = "SELECT "
    Query = Query & _
        " [DateTime] ," & _
        " Test_Time, " & _
        " Event_Describe"
    Query = Query & " FROM Event_Table "
    Query = Query & " Where Test_ID =" & TestID

    ReadEventsFile = ReadRecordToSheetLoop("Events_Log_" & ChannelNum, Query, 1)
    If HasSheetOf("Events_Log_" & ChannelNum) Then
        With ActiveWorkbook.Worksheets("Events_Log_" & ChannelNum)
            .Columns(1).NumberFormat = "mm/dd/yy hh:mm:ss"
            .Columns(1).ColumnWidth = 18
            .Columns(3).ColumnWidth = 100
        End With
    End If

End Function

Private Sub UserForm_Terminate()
gFileNameInput = mTempSaveFileNameInput
gFileNameOutput = mTempSaveFileNameOutput
'Debug.Print "gFileNameInput = " & gFileNameInput
'Debug.Print "gFileNameOutput = " & gFileNameOutput

End Sub
Attribute VB_Name = "DellReportForm"
Attribute VB_Base = "0{DCBE8EF1-74D2-4A00-812B-A1D63CB5F25E}{F5D06D22-A859-4C3C-8674-8972C2127E06}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Dim xlsFile
Dim mChannel, mDatetime(3), mTime, mCountDate As Integer, mCount As Integer
Dim mStartDate As Date, mEndDate As Date
Dim mVariable(3, 2), iColumnCC As Integer, iColumnTime As Integer
Dim wsReportName As String
Dim lRowInReport As Long


Private Sub comCancel_Click()
Unload Me
End Sub


Private Sub comOK_Click()
    Dim wb As Excel.Workbook, wbReport As Excel.Workbook
    Dim wsReport As Worksheet, wsChannel As Worksheet, wsSmartBattery As Worksheet
    Dim sTimeStart As Single, sTimefinish As Single
    Dim i, j As Integer, mTime As String
    Dim lRowsInTest As Long, MaxRowsInTest As Long
    Dim iTCount As Integer
    Dim bFindSheet As Boolean
    Dim iCount As Integer, jCount As Integer
    Set wb = ActiveWorkbook
    If TextBoxTime.Value = Empty Then GoTo Err_Data
    mTime = TextBoxTime.Value
    mCount = 0: mCountDate = 0
    For i = 1 To ListBoxDate.ListCount
        If ListBoxDate.Selected(i - 1) Then
            mCountDate = mCountDate + 1
            mDatetime(mCountDate) = ListBoxDate.List(i - 1) & " " & mTime
        End If
        If mCountDate > 2 Then Exit For
    Next i
    For i = 1 To ListBoxParameters.ListCount
        If ListBoxParameters.Selected(i - 1) Then
            mCount = mCount + 1
            mVariable(mCount, 1) = ListBoxParameters.List(i - 1, 0)
            mVariable(mCount, 2) = ListBoxParameters.List(i - 1, 1)
        End If
        If mCount > 2 Then Exit For
    Next i
    
    If iColumnCC = 0 Then GoTo Err_Data
    Application.StatusBar = "Please waiting,Dell Report Sheet is being generated..."
    On Error GoTo CreateNewFile
    
    Workbooks.Open filename:="Dell_SB_Report.xls"
    GoTo Open_WorkBook
CreateNewFile:
    On Error GoTo UserForm_SaveAs_Error
    Set wbReport = Workbooks.Add
    wbReport.SaveAs filename:="Dell_SB_Report.xls"

    
Open_WorkBook:
    On Error GoTo 0
'    DoEvents
    Workbooks("Dell_SB_Report.xls").Activate
    wsReportName = "Daily_Report"
    With ActiveWorkbook
        bFindSheet = HasSheetOf(wsReportName)
        If bFindSheet = False Then
            bFindSheet = MadeNewSheet(ActiveWorkbook, wsReportName)
        End If
        .Worksheets(wsReportName).Activate
         Call ReportHead(ActiveSheet)

        With ActiveSheet
        For i = 1 To ListBoxChannel.ListCount
        If ListBoxChannel.Selected(i - 1) Then
            Set wsChannel = wb.Worksheets("Channel_" & ListBoxChannel.List(i - 1, 0))
            Set wsSmartBattery = wb.Worksheets("SmartBattery_" & ListBoxChannel.List(i - 1, 0))
            iColumnTime = FindRightNameColumn("Date_Time", wsChannel)
            With wsChannel
                MaxRowsInTest = .cells(1, 1).End(xlDown).Row - 1
                iTCount = 1: lRowsInTest = 2
                Do While lRowsInTest <= MaxRowsInTest
                        Do While iTCount <= mCountDate And lRowsInTest <= MaxRowsInTest
                        If DateValue(.cells(lRowsInTest, iColumnTime)) = DateValue(mDatetime(iTCount)) Then
                            If Abs(TimeValue(.cells(lRowsInTest, iColumnTime)) - TimeValue(mDatetime(iTCount))) < 6.94444444444442E-04 Then
                                ActiveSheet.cells(lRowInReport, 1) = ListBoxChannel.List(i - 1, 0)
                                ActiveSheet.cells(lRowInReport, 2) = ListBoxChannel.List(i - 1, 1)
                                ActiveSheet.cells(lRowInReport, 2 + mCountDate * (iTCount - 1) + iTCount) = wsSmartBattery.cells(lRowsInTest, iColumnCC)
                                For jCount = 1 To mCount
                                    ActiveSheet.cells(lRowInReport, 2 + mCountDate * (iTCount - 1) + iTCount + jCount) = wsSmartBattery.cells(lRowsInTest, Val(mVariable(jCount, 2))).Value
                                Next jCount
                                iTCount = iTCount + 1
                                lRowInReport = lRowInReport + 1
                                GoTo Next_Channel
                             End If
                        End If
                        lRowsInTest = lRowsInTest + 1
                        Loop
                Loop
Next_Channel:
            End With

        End If
        Next i
        End With
    End With
Get_Data_Exit:
    Set wsChannel = Nothing
    Set wsSmartBattery = Nothing
    Set wb = Nothing
    Set wbReport = Nothing
    Call FormatReportSheet

    Application.DisplayAlerts = False
    Workbooks("Dell_SB_Report.xls").Activate
    Call gfDeleteDefaultSheet123(ActiveWorkbook)
    Application.DisplayAlerts = True
    Application.StatusBar = "Ready"
    ActiveWorkbook.Save
    Me.Hide
    Exit Sub
Err_Data:
    MsgBox "Data Format wrong! Please check options page and import data again."
    Application.DisplayAlerts = True
    Application.StatusBar = "Ready"

    Exit Sub
UserForm_SaveAs_Error:
    If Err.Number = 1004 Then
        MsgBox gFileNameOutput & " cann't save to read-only " _
            & "media device (like CD-ROM, read-only network drive )" _
            & "or the file has been locked by others. " _
            & "You should change the Output File Name. " _
            & "This problem may be caused by network drive. " _
            & "You'd better not to use network drive."
        Workbooks(wb.Name).Close SaveChanges:=False
    End If

End Sub

Private Sub LabelOpenFile_Click()
xlsFile = Application.GetOpenFilename("Arbin Excel Data files (*.xls), *.xls", 5, "Open Arbin Excel Data file")
If xlsFile <> False Then
    LabelOpenFile.Caption = xlsFile
    Workbooks.Open xlsFile
    Else
    MsgBox "You have not select any Arbin Excel Data File!"
End If
Call UserForm_Activate
End Sub


Private Sub TextBoxTime_Enter()
On Error Resume Next
mTime = "12:00:00 AM"
mTime = TimeValue(TextBoxTime.Text)
TextBoxTime.Text = mTime
End Sub

Private Sub UserForm_Activate()
Dim wksheet As Excel.Worksheet, iRows As Long
Dim i As Long, iColumn As Integer, iMaxColumn As Integer
For Each wksheet In ActiveWorkbook.Worksheets
If wksheet.Name = "Info" Then
    With wksheet
        iRows = .cells(4, 1).End(xlDown).Row
        ListBoxChannel.Clear
        For i = 5 To iRows + 1
            ListBoxChannel.AddItem
            ListBoxChannel.List(ListBoxChannel.ListCount - 1, 0) = .cells(i, 1)
            ListBoxChannel.List(ListBoxChannel.ListCount - 1, 1) = .cells(i, 7)
        Next i
        GoTo GoToNext
    End With
End If
If Left(wksheet.Name, 8) = "Channel_" Then
    With wksheet
        iColumn = FindRightNameColumn("Date_Time", wksheet)
        If iColumn = 0 Then MsgBox "The opened file is not a valid result file!": Exit Sub
        mStartDate = .cells(3, iColumn).Value
        mEndDate = .cells(.cells(1, 1).End(xlDown).Row, iColumn).Value
        ListBoxDate.Clear
        For i = mStartDate To mEndDate
        ListBoxDate.AddItem FormatDateTime(i - 1, vbShortDate)
        Next i
        GoTo GoToNext
    End With
End If
If Left(wksheet.Name, 13) = "SmartBattery_" Then
    mCount = 0
    With wksheet
        ListBoxParameters.Clear
        iMaxColumn = .cells(1, 1).End(xlToRight).Column
        For i = 2 To iMaxColumn
        If .cells(1, i).Value = "CycleCount" Then
            iColumnCC = i
        Else
            mCount = mCount + 1
            ListBoxParameters.AddItem
            ListBoxParameters.List(ListBoxParameters.ListCount - 1, 0) = .cells(1, i).Value
            ListBoxParameters.List(ListBoxParameters.ListCount - 1, 1) = i
        End If
        Next i
        GoTo GoToNext
    End With
End If

GoToNext:
Next wksheet

End Sub


Private Sub UserForm_Initialize()
ListBoxChannel.Clear
ListBoxDate.Clear
ListBoxParameters.Clear
LabelOpenFile.Caption = ActiveWorkbook.FullName
End Sub
Private Sub ReportHead(wkReport As Excel.Worksheet)
Dim iCount As Integer, jCount As Integer
With wkReport
    lRowInReport = .cells(1, 1).End(xlDown).Row
    If lRowInReport = 65536 Or lRowInReport = 0 Then
        lRowInReport = 1
        Else
        lRowInReport = lRowInReport + 1
    End If
    .cells(lRowInReport, 1) = Now()
    lRowInReport = lRowInReport + 1
    .Rows(lRowInReport).WrapText = True
    .cells(lRowInReport, 1) = "Channel"
    .cells(lRowInReport, 2) = "ITEM_ID"
    For iCount = 1 To mCountDate
         .cells(lRowInReport - 1, 2 + mCountDate * (iCount - 1) + iCount) = mDatetime(iCount)
         .cells(lRowInReport, 2 + mCountDate * (iCount - 1) + iCount) = "CycleCount"
         For jCount = 1 To mCount
            .cells(lRowInReport, 2 + mCountDate * (iCount - 1) + iCount + jCount) = mVariable(jCount, 1)
         Next jCount
    Next iCount
    lRowInReport = lRowInReport + 1
End With
End Sub
Private Sub FormatReportSheet()
    Dim wksheet As Excel.Worksheet
    Dim lRows As Long, lMaxRows As Long, iColumn As Integer, iEndColumn As Integer
    Dim bColorFirst As Boolean
        With ActiveSheet
        .PageSetup.Orientation = xlLandscape
        lMaxRows = .cells(1, 1).End(xlDown).Row
        iEndColumn = 10
        If iEndColumn > 1 Then
        bColorFirst = False
            For iColumn = 1 To iEndColumn
                If iColumn = 1 Then
                .Columns(iColumn).ColumnWidth = 15
                Else
                .Columns(iColumn).ColumnWidth = 14
            End If
                    If bColorFirst Then
                        bColorFirst = False
                       With .Columns(iColumn).Interior
                            .ColorIndex = 0
                            .PatternColorIndex = xlAutomatic
                        End With
                    Else
                        With .Columns(iColumn).Interior
                            .ColorIndex = 20
                            .PatternColorIndex = xlAutomatic
                        End With
                        bColorFirst = True
                    End If
            Next iColumn
        End If
        End With
End Sub



Attribute VB_Name = "DellReportForm1"
Attribute VB_Base = "0{22030504-F44C-4402-B724-2C2BE876A9AF}{D9B2D655-4804-41DB-8851-4E5E47A79CC3}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Dim iColumnCI As Integer, iColumnCC As Integer, iColumnV1 As Integer, iColumnV2 As Integer
Dim iColumnV3 As Integer, iColumnT As Integer
Dim wsReportName As String
Dim mVariable(2, 2), mCount As Integer
Dim lRowInReport As Long


Private Sub CommandButtonCancel_Click()
Unload Me
End Sub

Private Sub CommandButtonClear_Click()
Dim ws As Worksheet, wb As Workbook
For Each wb In Workbooks
    If UCase(wb.Name) = "DELL_SB_REPORT" Or UCase(wb.Name) = "DELL_SB_REPORT.XLS" Then
        For Each ws In wb.Worksheets
            ws.Select
            Selection.Clear
        Next ws
    End If
Next wb
End Sub

Private Sub CommandButtonOk_Click()
    Dim wb As Workbook, wsReport As Worksheet, wsTest As Worksheet
    Dim sTimeStart As Single, sTimefinish As Single
    Dim i, j As Integer, mTemp As String
    Dim lRowsInTest As Long, MaxRowsInTest As Long
    Dim bFindSheet As Boolean
    Dim mDatetime, iChannel As Integer

    If TextBoxTemperature.Value = Empty Then GoTo Err_Data
    mTemp = Int(Val(TextBoxTemperature.Text))
    mCount = 0
    For i = 0 To ListBoxVariables.ListCount - 1
        If ListBoxVariables.Selected(i) Then
            mVariable(mCount, 0) = ListBoxVariables.List(i)
            mVariable(mCount, 1) = FindRightNameColumn(ListBoxVariables.List(i), ActiveSheet)
            mCount = mCount + 1
        End If
        If mCount > 2 Then Exit For
    Next i
    iColumnCC = FindRightNameColumn("CycleCount", ActiveSheet)
    If iColumnCC = 0 Then GoTo Err_Data
    iColumnT = FindRightNameColumn("Temperature (C) ", ActiveSheet)
    If iColumnT = 0 Then GoTo Err_Data
    
    Application.StatusBar = "Please waiting,Dell Report Sheet is being generated..."
    On Error GoTo CreateNewFile
    
    Workbooks.Open filename:="Dell_SB_Report.xls"
    GoTo Open_WorkBook
CreateNewFile:
    On Error GoTo UserForm_SaveAs_Error
    Set wb = Workbooks.Add
    wb.SaveAs filename:="Dell_SB_Report.xls"

    
Open_WorkBook:
    On Error GoTo 0
'    DoEvents
    Workbooks("Dell_SB_Report.xls").Activate
    wsReportName = TextBoxTemperature.Text & "C"
    With ActiveWorkbook
        bFindSheet = HasSheetOf(wsReportName)
        If bFindSheet = False Then
            bFindSheet = MadeNewSheet(ActiveWorkbook, wsReportName)
        End If
        .Worksheets(wsReportName).Activate
        With ActiveSheet
        Call ReportHead(ActiveSheet)
        For Each wb In Workbooks
        If UCase(wb.Name) <> "DELL_SB_REPORT" And UCase(wb.Name) <> "DELL_SB_REPORT.XLS" Then
        For Each wsTest In wb.Worksheets
        If Left(wsTest.Name, 13) = "SmartBattery_" Then
            MaxRowsInTest = wsTest.cells(1, 1).End(xlDown).Row
            For lRowsInTest = 2 To MaxRowsInTest - 1
                If Abs(mTemp - wsTest.cells(lRowsInTest, iColumnT)) <= 1 Then
                    lRowInReport = lRowInReport + 1
                    .cells(lRowInReport, 1).Value = Int(Val(Right(wsTest.Name, 3)))
                    .cells(lRowInReport, 2).Value = TextBoxBrand.Text
                    .cells(lRowInReport, 6).Value = wsTest.cells(lRowsInTest, iColumnCC)
                    For i = 0 To mCount - 1
                        .cells(lRowInReport, 7 + i).Value = wsTest.cells(lRowInReport, mVariable(i, 1))
                    Next i
                    
                    Exit For
                End If
            Next lRowsInTest
        End If
        Next wsTest
        End If
        Next wb
        End With
        Call FormatReportSheet
    End With
    Application.DisplayAlerts = False
    Workbooks("Dell_SB_Report.xls").Activate
    Call gfDeleteDefaultSheet123(ActiveWorkbook)
    Application.DisplayAlerts = True
    Application.StatusBar = "Ready"
    ActiveWorkbook.Save
    Me.Hide
    Exit Sub
Err_Data:
    MsgBox "Data Format wrong! Please check options page and import data again."
    Application.DisplayAlerts = True
    Application.StatusBar = "Ready"

    Exit Sub
UserForm_SaveAs_Error:
    If Err.Number = 1004 Then
        MsgBox gFileNameOutput & " cann't save to read-only " _
            & "media device (like CD-ROM, read-only network drive )" _
            & "or the file has been locked by others. " _
            & "You should change the Output File Name. " _
            & "This problem may be caused by network drive. " _
            & "You'd better not to use network drive."
        Workbooks(wb.Name).Close SaveChanges:=False
    End If
End Sub

Private Sub TextBoxBrand_Change()
CommandButtonOK.Enabled = True
End Sub

Private Sub TextBoxTemperature_Change()
CommandButtonOK.Enabled = True
End Sub


Private Sub cmdChangeFile_Click()
    Dim fileToOpen As Variant
    Dim DirOutput
    If gbIsImporting Then Exit Sub
    On Error GoTo cmdChangeFile_Error
    If gLatestTestName = "" Then MsgBox "You don't have any MITS_PRO Data for processing recently!" & vbCrLf & "Try import data again!": Exit Sub
    fileToOpen = Application.GetSaveAsFilename(Initialfilename:="Report_" & gLatestTestName, _
           fileFilter:="Excel Files (*.xls), *.xls")
    If fileToOpen <> False Then
        DirOutput = CurDir
        gReportFilename = fileToOpen
    End If
    Exit Sub

cmdChangeFile_Error:
    DirOutput = ThisWorkbook.Path
    Resume

End Sub


Private Sub FormatReportSheet()
    Dim wksheet As Excel.Worksheet
    Dim lRows As Long, lMaxRows As Long, iColumn As Integer, iEndColumn As Integer
    Dim bColorFirst As Boolean
        With ActiveSheet
        .PageSetup.Orientation = xlLandscape
        lMaxRows = .cells(1, 1).End(xlDown).Row
        iEndColumn = 10
        If iEndColumn > 1 Then
        bColorFirst = False
            For iColumn = 1 To iEndColumn
                If iColumn = 1 Then
                .Columns(iColumn).ColumnWidth = 15
                Else
                .Columns(iColumn).ColumnWidth = 14
            End If
                    If bColorFirst Then
                        bColorFirst = False
                       With .Columns(iColumn).Interior
                            .ColorIndex = 0
                            .PatternColorIndex = xlAutomatic
                        End With
                    Else
                        With .Columns(iColumn).Interior
                            .ColorIndex = 20
                            .PatternColorIndex = xlAutomatic
                        End With
                        bColorFirst = True
                    End If
            Next iColumn
        End If
        End With
End Sub

Private Sub UserForm_Initialize()
Dim MaxColumn As Integer, iColumn As Integer
    Me.Enabled = True
    If Left(ActiveSheet.Name, 13) = "SmartBattery_" Then
    With ActiveSheet
    MaxColumn = .cells(1, 1).End(xlToRight).Column
    iColumnCC = FindRightNameColumn("CycleCount", ActiveSheet)
    If iColumnCC = 0 Then GoTo Err_Exit
    For iColumn = 2 To MaxColumn
    If .cells(1, iColumn).Value <> "CycleCount" And .cells(1, iColumn).Value <> "Temperature (C) " Then
        ListBoxVariables.AddItem .cells(1, iColumn).Value
    End If
    Next iColumn
    End With
    End If
Exit Sub
Err_Exit:
    MsgBox "Please Choose Statistics sheet then Click report application!" & vbCrLf & "Select SmartBattery any sheet and try again!"
    
End Sub



Private Sub ReportHead(wkReport As Excel.Worksheet)
Dim iCount As Integer
With wkReport
    lRowInReport = .cells(1, 1).End(xlDown).Row
    If lRowInReport = 65536 Or lRowInReport = 0 Then
        lRowInReport = 1
        Else
        lRowInReport = lRowInReport + 1
    End If
    .cells(lRowInReport, 1) = Now()
    lRowInReport = lRowInReport + 1
    .Rows(lRowInReport).WrapText = True
    .cells(lRowInReport, 1) = "Channel"
    .cells(lRowInReport, 2) = "Supplier"
    .cells(lRowInReport, 3) = "Revision/Phase"
    .cells(lRowInReport, 4) = "Dell P/N"
    .cells(lRowInReport, 5) = "Battery #"
    .cells(lRowInReport, 6) = "CycleCount"
    For iCount = 0 To mCount - 1
        .cells(lRowInReport, 7 + iCount) = mVariable(iCount, 0)
    Next iCount
End With
End Sub
Attribute VB_Name = "DellReportForm2"
Attribute VB_Base = "0{4EF62A15-F6AA-4782-A1BB-71EDF64BAA19}{244F2917-184F-4202-8421-3F9A872F6B66}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Option Base 1
Dim tOptionEdit1 As gMyTypeOptionEdit
Dim tGlobal_Table1 As gMyTypeGlobal_Table
Dim InfoStr$
Dim bIsOverWrite As Boolean
Dim bExitAsked As Boolean
Dim LastListViewSortColumn As Integer
Dim TestNameArray() As String
Dim iListViewChanInfoCount As Integer
Dim fListBoxViewHeight As Single
Dim mTestName As String
Dim mbIsMultifile As Boolean
Dim mMultifileName As String
Dim mbIsPlotAfterImport As Boolean
Dim mPreSheetName As String
Dim bLockImportData As Boolean
Dim mResponse As Integer
Public mInputFileName As String
Public mOutputFileName As String
Public running As Boolean

Private Sub CmdCancel_Click()
Unload Me
End Sub

Private Sub CmdConfig_Click()
ReportConfig.Show
End Sub

Private Sub cmdfileAdd_Click()
Call LabelFolder_Click
End Sub

Private Sub cmdFileRemove_Click()
Dim i As Integer, iListCount As Integer

With ListBoxSelectedFiles
i = .ListCount
Do While i > 0

    If .Selected(i - 1) = True Then .RemoveItem (i - 1)
    i = i - 1
Loop

End With
Err_Exit:
End Sub

Private Sub CmdReport_Click()
    Dim wb As Excel.Workbook, wbReport As Excel.Workbook
    Dim wsReport As Worksheet
    Dim sTimeStart As Single, sTimefinish As Single
    Dim iAmb As Integer, j As Integer, mTime As String, mDate As String
    Dim lRowsInTest As Long, MaxRowsInTest As Long, iColumnStart As Integer
    Dim i As Integer, iRowNum As Integer
    Dim bFindSheet As Boolean, CycleNumber As Long
    Dim iCount As Integer, jCount As Integer, wsReportName As String
    Dim recSQL As Recordset, iChan As Integer, SQLQry As String
    Dim DefaultPath As String
    If ListViewSelectChan.ListItems.Count > 0 Then
    If gfSaveDellReportIni() = False Then GoTo UserForm_SaveAs_Error
    Set wb = ActiveWorkbook
    mDate = Date: mTime = Time()
'    Call gSaveSettings(ListBoxSelectedFiles)
    If gTest = False Then
       
        gReportTime = Now()
    
    End If
       
    Application.StatusBar = "Please waiting,Dell Report Sheet is being generated..."
    Me.MousePointer = fmMousePointerHourGlass

    On Error GoTo CreateNewFile
'    Application.DisplayAlerts = False
    Application.ScreenUpdating = False
    DefaultPath = ThisWorkbook.Path
    Workbooks.Open filename:=DefaultPath & "\Dell_SB_Report.xls"
    GoTo Open_WorkBook
CreateNewFile:
    On Error GoTo UserForm_SaveAs_Error
    
    Set wbReport = Workbooks.Add
    wbReport.SaveAs DefaultPath & "\Dell_SB_Report.xls"
 
Open_WorkBook:
    On Error GoTo 0
    DoEvents
    Workbooks("Dell_SB_Report.xls").Activate
    'Chamber
    For iAmb = 1 To 3
        wsReportName = Trim(mAmb(iAmb)) & "C"
        With ActiveWorkbook
            bFindSheet = HasSheetOf(wsReportName)
            If bFindSheet = False Then
                bFindSheet = MadeNewSheet(ActiveWorkbook, wsReportName)
            End If
            .Worksheets(wsReportName).Activate
            With ActiveSheet
            .Range("C3").Select
            ActiveWindow.FreezePanes = True
            .Range(.cells(3, 1), .cells(50, 2)).Select
                With Selection 'Unhighlight the data
                    .Interior.ColorIndex = xlNone
                    .Interior.PatternColorIndex = xlAutomatic
                End With

            End With
            iColumnStart = ReportHead(ActiveSheet, iAmb, False) ' Add new Date Log
            If iColumnStart = 0 Then Exit Sub
    'Channel
    
            iRowNum = 2
            For iChan = 1 To gMaxChan
                
                With ActiveSheet
               

'                DoEvents
                
                If gDellReportCfg.tChanTemp(iChan) = iAmb Then
                iRowNum = iRowNum + 1
                For i = 1 To ListViewSelectChan.ListItems.Count
                    If Int(Right(ListViewSelectChan.ListItems(i).Key, 3)) = iChan Then
                        Set gDellDataDB = DBEngine.OpenDatabase(ListViewSelectChan.ListItems(i).SubItems(2), False, True)
                        Application.StatusBar = "Collect Data from " & ListViewSelectChan.ListItems(i).SubItems(2)
                        For j = 1 To gVarNo
                            SQLQry = "SELECT "
                            Select Case gDellReportCfg.tType(j)
                                Case "Channel"
                                    SQLQry = SQLQry & "NN.DateTime as [DateTime],NN.Cycle_Index as [Cycle_Index],NN.[" & gDellReportCfg.tVars(j) & _
                                    "] FROM Global_Table as GG INNER JOIN Channel_Normal_Table as NN ON GG.Test_ID=NN.Test_ID" & _
                                    " WHERE GG.Channel_Index= " & iChan
                                Case "Statistics"
                                    If gDellReportCfg.tVars(j) = "SB_CycleCount" Or gDellReportCfg.tVars(j) = "SB_Max_ROSC" Or gDellReportCfg.tVars(j) = "SB_Cycle_FCC" Or gDellReportCfg.tVars(j) = "SB_Max_T(C)" Then
                                         Select Case gDellReportCfg.tVars(j)
                                                Case "SB_CycleCount"
                                                    SQLQry = "Select NN.DateTime as [DateTime],NN.Cycle_Index as [Cycle_Index],SB.CycleCount as [SB_CycleCount] " & _
                                                    " FROM (Global_Table as GG INNER JOIN Channel_Normal_Table as NN ON GG.Test_ID=NN.Test_ID) INNER JOIN Smart_Battery_Data_Table as SB ON (NN.Data_Point=SB.Data_Point) and (NN.Test_ID=SB.Test_ID) " & _
                                                    " WHERE GG.Channel_Index= " & iChan
                                                Case "SB_Max_ROSC"
                                                    SQLQry = "Select Max(SB.RelativeStateOfCharge) as [SB_Max_ROSC] " & _
                                                    " FROM (Global_Table as GG INNER JOIN Channel_Normal_Table as NN ON GG.Test_ID=NN.Test_ID) INNER JOIN Smart_Battery_Data_Table as SB ON (NN.Data_Point=SB.Data_Point) and (NN.Test_ID=SB.Test_ID) " & _
                                                    " WHERE GG.Channel_Index= " & iChan & " And NN.Cycle_Index= " & CycleNumber
                                                Case "SB_Cycle_FCC"
                                                    SQLQry = "Select SB.FullChargeCapacity as [SB_Cycle_FCC] " & _
                                                    " FROM (Global_Table as GG INNER JOIN Channel_Normal_Table as NN ON GG.Test_ID=NN.Test_ID) INNER JOIN Smart_Battery_Data_Table as SB ON (NN.Data_Point=SB.Data_Point) and (NN.Test_ID=SB.Test_ID) " & _
                                                    " WHERE GG.Channel_Index= " & iChan & " And NN.Cycle_Index= " & CycleNumber
                                                Case "SB_Max_T(C)"
                                                    SQLQry = "Select Max(SB.Temperature) as [SB_Max_T(C)] " & _
                                                    " FROM (Global_Table as GG INNER JOIN Channel_Normal_Table as NN ON GG.Test_ID=NN.Test_ID) INNER JOIN Smart_Battery_Data_Table as SB ON (NN.Data_Point=SB.Data_Point) and (NN.Test_ID=SB.Test_ID) " & _
                                                    " WHERE GG.Channel_Index= " & iChan & " And NN.Cycle_Index= " & CycleNumber
                                                End Select
                                     Else

                                          SQLQry = SQLQry & "NN.DateTime as [DateTime],NN.Cycle_Index as [Cycle_Index],"
                                          If gDellReportCfg.tVars(j) = "Data_Point" Or gDellReportCfg.tVars(j) = "Charge_Time" Or gDellReportCfg.tVars(j) = "Discharge_Time" Or gDellReportCfg.tVars(j) = "Vmax_On_Cycle" Then
                                                SQLQry = SQLQry & "SS.[" & gDellReportCfg.tVars(j) & "] "
                                                Else
                                                SQLQry = SQLQry & "NN.[" & gDellReportCfg.tVars(j) & "] "
                         
                                          End If
                                          SQLQry = SQLQry & "FROM (Global_Table as GG INNER JOIN Channel_Normal_Table as NN ON GG.Test_ID=NN.Test_ID) INNER JOIN Channel_Statistic_Table as SS ON (NN.Data_Point=SS.Data_Point) and (NN.Test_ID=SS.Test_ID) " & _
                                          " WHERE GG.Channel_Index= " & iChan
                                     End If
                                Case "SmartBattery"
                                    SQLQry = SQLQry & "NN.DateTime as [DateTime],NN.Cycle_Index as [Cycle_Index],"
                                    If gDellReportCfg.tVars(j) = "BatteryMode" Or gDellReportCfg.tVars(j) = "BatteryStatus" Or gDellReportCfg.tVars(j) = "Pack_Status" Or gDellReportCfg.tType(j) = "ManufacturerAccess" Then
                                        SQLQry = SQLQry & "HEX(SB.[" & gDellReportCfg.tVars(j) & "]) As [" & gDellReportCfg.tVars(j) & "]"
                                        Else
                                        SQLQry = SQLQry & " SB.[" & gDellReportCfg.tVars(j) & "] "
                                    End If
                                    SQLQry = SQLQry & " FROM (Global_Table as GG INNER JOIN Channel_Normal_Table as NN ON GG.Test_ID=NN.Test_ID) INNER JOIN Smart_Battery_Data_Table as SB ON (NN.Data_Point=SB.Data_Point) and (NN.Test_ID=SB.Test_ID) " & _
                                    " WHERE GG.Channel_Index= " & iChan
                            End Select
                            If gDellReportCfg.tVars(j) <> "SB_Max_ROSC" And gDellReportCfg.tVars(j) <> "SB_Cycle_FCC" And gDellReportCfg.tVars(j) <> "SB_Max_T(C)" Then
                                SQLQry = SQLQry & " AND DateTime <=CDate('" & gReportTime & "') "
                                SQLQry = SQLQry & " ORDER BY DateTime Desc;"
                            End If
                            Set recSQL = gDellDataDB.OpenRecordset(SQLQry, dbOpenForwardOnly, dbReadOnly)
                            If Not recSQL.EOF Then
                                If gDellReportCfg.tVars(j) <> "SB_CycleCount" And gDellReportCfg.tVars(j) <> "SB_Max_ROSC" And gDellReportCfg.tVars(j) <> "SB_Cycle_FCC" And gDellReportCfg.tVars(j) <> "SB_Max_T(C)" Then
                                    CycleNumber = recSQL.Fields("Cycle_Index")
                                End If
                                .cells(iRowNum, iColumnStart + j - 1) = recSQL.Fields(gDellReportCfg.tVars(j))
                                recSQL.Close
                            End If

                        Next j
                        .Range(.cells(iRowNum, 1), .cells(iRowNum, 1)).Select
                        Selection.Comment.Shape.Height = 45
                        Selection.Comment.Shape.Width = 60
                        Selection.Comment.Text "Latest Time is " & gReportTime
                        .Range(cells(iRowNum, 1), cells(iRowNum, 2)).Select
                        With Selection 'highlight the data
                            .Interior.ColorIndex = 6
                            .Interior.PatternColorIndex = xlAutomatic
                        End With
                        gDellDataDB.Close

                    End If
                DoEvents
                Next i
                End If
                
                End With    'Active Sheet

             Next iChan
        End With
    Call FormatReportSheet
    
    Next iAmb
'Get_Data_Exit:
'    Set wsChannel = Nothing
'    Set wsSmartBattery = Nothing
'    Set wb = Nothing
'    Set wbReport = Nothing
    Application.DisplayAlerts = False
'    Workbooks("Dell_SB_Report.xls").Activate
    Call gfDeleteDefaultSheet123(ActiveWorkbook)
    Me.MousePointer = fmMousePointerDefault
    Application.ScreenUpdating = True

    Application.DisplayAlerts = True
    Application.StatusBar = "Ready"
    ActiveWorkbook.Save
    Me.Hide
    Exit Sub
Err_Data:
    MsgBox "Data Format wrong! Please check options page and import data again."
    Application.DisplayAlerts = True
    Application.ScreenUpdating = True
    Me.MousePointer = fmMousePointerDefault
    Application.StatusBar = "Ready"
    End If
    Exit Sub
UserForm_SaveAs_Error:
    If Err.Number = 1004 Then
        MsgBox gFileNameOutput & " cann't save to read-only " _
            & "media device (like CD-ROM, read-only network drive )" _
            & "or the file has been locked by others. " _
            & "You should change the Output File Name. " _
            & "This problem may be caused by network drive. " _
            & "You'd better not to use network drive."
        Workbooks(wb.Name).Close SaveChanges:=False
    End If
End Sub

Private Sub CmdReportRedo_Click()
   Dim wb As Excel.Workbook, wbReport As Excel.Workbook
    Dim wsReport As Worksheet
    Dim sTimeStart As Single, sTimefinish As Single
    Dim iAmb As Integer, j As Integer, mTime As String, mDate As String
    Dim lRowsInTest As Long, MaxRowsInTest As Long, iColumnStart As Integer
    Dim i As Integer, iRowNum As Integer
    Dim bFindSheet As Boolean
    Dim DefaultPath As String
    Dim iCount As Integer, jCount As Integer, wsReportName As String
    Dim recSQL As Recordset, recSSSQL As Recordset, recSBSQL As Recordset
    Dim iChan As Integer, SQLQry As String
    Dim CycleNumber As Long
    If ListViewSelectChan.ListItems.Count > 0 Then
    If gfSaveDellReportIni() = False Then GoTo UserForm_SaveAs_Error
    Set wb = ActiveWorkbook
    mDate = Date: mTime = Time()
    gReportTime = Now()
    Application.StatusBar = "Please waiting,Dell Report Sheet is being generated..."
    Me.MousePointer = fmMousePointerHourGlass

    On Error GoTo CreateNewFile
    Application.DisplayAlerts = False
    Application.ScreenUpdating = False
    DefaultPath = ThisWorkbook.Path
    Workbooks.Open filename:=DefaultPath & "\Dell_SB_Report.xls"
    GoTo Open_WorkBook
CreateNewFile:
    On Error GoTo UserForm_SaveAs_Error
    Set wbReport = Workbooks.Add
    wbReport.SaveAs filename:=DefaultPath & "\Dell_SB_Report.xls"

    
Open_WorkBook:
    On Error GoTo 0
    DoEvents
    Workbooks("Dell_SB_Report.xls").Activate
    'Chamber
    For iAmb = 1 To 3
        wsReportName = Trim(mAmb(iAmb)) & "C"
        With ActiveWorkbook
            bFindSheet = HasSheetOf(wsReportName)
            If bFindSheet = False Then
                bFindSheet = MadeNewSheet(ActiveWorkbook, wsReportName)
            End If
            .Worksheets(wsReportName).Activate
            iColumnStart = ReportHead(ActiveSheet, iAmb, True) ' Add new Date Log
            If iColumnStart = 0 Then Exit Sub
            .Worksheets(wsReportName).Activate
            With ActiveSheet
            .Tab.ColorIndex = iAmb * 16
            .Range("C3").Select
            ActiveWindow.FreezePanes = True
            .Range(.cells(3, 1), .cells(50, 2)).Select
                With Selection 'Unhighlight the data
                    .Interior.ColorIndex = xlNone
                    .Interior.PatternColorIndex = xlAutomatic
                End With
            
            End With
    'Channel
    
            iRowNum = 2
            For iChan = 1 To gMaxChan
                
                With ActiveSheet
                
'                DoEvents
                
                If gDellReportCfg.tChanTemp(iChan) = iAmb Then
                iRowNum = iRowNum + 1
                For i = 1 To ListViewSelectChan.ListItems.Count
                    If Int(Right(ListViewSelectChan.ListItems(i).Key, 3)) = iChan Then
                        Set gDellDataDB = DBEngine.OpenDatabase(ListViewSelectChan.ListItems(i).SubItems(2), False, True)
                        Application.StatusBar = "Collect Data from " & ListViewSelectChan.ListItems(i).SubItems(2)
                        For j = 1 To gVarNo
                            SQLQry = "SELECT "
                            Select Case gDellReportCfg.tType(j)
                                Case "Channel"
                                    SQLQry = SQLQry & "NN.DateTime as [DateTime],NN.Cycle_Index as [Cycle_Index],NN.[" & gDellReportCfg.tVars(j) & _
                                    "] FROM Global_Table as GG INNER JOIN Channel_Normal_Table as NN ON GG.Test_ID=NN.Test_ID" & _
                                    " WHERE GG.Channel_Index= " & iChan
                                Case "Statistics"
                                    If gDellReportCfg.tVars(j) = "SB_CycleCount" Or gDellReportCfg.tVars(j) = "SB_Max_ROSC" Or gDellReportCfg.tVars(j) = "SB_Cycle_FCC" Or gDellReportCfg.tVars(j) = "SB_Max_T(C)" Then
                                         Select Case gDellReportCfg.tVars(j)
                                                Case "SB_CycleCount"
                                                    SQLQry = "Select NN.DateTime as [DateTime],NN.Cycle_Index as [Cycle_Index],SB.CycleCount as [SB_CycleCount] " & _
                                                    " FROM (Global_Table as GG INNER JOIN Channel_Normal_Table as NN ON GG.Test_ID=NN.Test_ID) INNER JOIN Smart_Battery_Data_Table as SB ON (NN.Data_Point=SB.Data_Point) and (NN.Test_ID=SB.Test_ID) " & _
                                                    " WHERE GG.Channel_Index= " & iChan
                                                Case "SB_Max_ROSC"
                                                    SQLQry = "Select Max(SB.RelativeStateOfCharge) as [SB_Max_ROSC] " & _
                                                    " FROM (Global_Table as GG INNER JOIN Channel_Normal_Table as NN ON GG.Test_ID=NN.Test_ID) INNER JOIN Smart_Battery_Data_Table as SB ON (NN.Data_Point=SB.Data_Point) and (NN.Test_ID=SB.Test_ID) " & _
                                                    " WHERE GG.Channel_Index= " & iChan & " And NN.Cycle_Index= " & CycleNumber
                                                Case "SB_Cycle_FCC"
                                                    SQLQry = "Select SB.FullChargeCapacity as [SB_Cycle_FCC] " & _
                                                    " FROM (Global_Table as GG INNER JOIN Channel_Normal_Table as NN ON GG.Test_ID=NN.Test_ID) INNER JOIN Smart_Battery_Data_Table as SB ON (NN.Data_Point=SB.Data_Point) and (NN.Test_ID=SB.Test_ID) " & _
                                                    " WHERE GG.Channel_Index= " & iChan & " And NN.Cycle_Index= " & CycleNumber
                                                Case "SB_Max_T(C)"
                                                    SQLQry = "Select Max(SB.Temperature) as [SB_Max_T(C)] " & _
                                                    " FROM (Global_Table as GG INNER JOIN Channel_Normal_Table as NN ON GG.Test_ID=NN.Test_ID) INNER JOIN Smart_Battery_Data_Table as SB ON (NN.Data_Point=SB.Data_Point) and (NN.Test_ID=SB.Test_ID) " & _
                                                    " WHERE GG.Channel_Index= " & iChan & " And NN.Cycle_Index= " & CycleNumber
                                                End Select
                                     Else

                                          SQLQry = SQLQry & "NN.DateTime as [DateTime],NN.Cycle_Index as [Cycle_Index],"
                                          If gDellReportCfg.tVars(j) = "Data_Point" Or gDellReportCfg.tVars(j) = "Charge_Time" Or gDellReportCfg.tVars(j) = "Discharge_Time" Or gDellReportCfg.tVars(j) = "Vmax_On_Cycle" Then
                                                SQLQry = SQLQry & "SS.[" & gDellReportCfg.tVars(j) & "] "
                                                Else
                                                SQLQry = SQLQry & "NN.[" & gDellReportCfg.tVars(j) & "] "
                         
                                          End If
                                          SQLQry = SQLQry & "FROM (Global_Table as GG INNER JOIN Channel_Normal_Table as NN ON GG.Test_ID=NN.Test_ID) INNER JOIN Channel_Statistic_Table as SS ON (NN.Data_Point=SS.Data_Point) and (NN.Test_ID=SS.Test_ID) " & _
                                          " WHERE GG.Channel_Index= " & iChan
                                     End If
                                Case "SmartBattery"
                                    SQLQry = SQLQry & "NN.DateTime as [DateTime],NN.Cycle_Index as [Cycle_Index],"
                                    If gDellReportCfg.tVars(j) = "BatteryMode" Or gDellReportCfg.tVars(j) = "BatteryStatus" Or gDellReportCfg.tVars(j) = "Pack_Status" Or gDellReportCfg.tType(j) = "ManufacturerAccess" Then
                                        SQLQry = SQLQry & "HEX(SB.[" & gDellReportCfg.tVars(j) & "]) As [" & gDellReportCfg.tVars(j) & "]"
                                        Else
                                        SQLQry = SQLQry & " SB.[" & gDellReportCfg.tVars(j) & "] "
                                    End If
                                    SQLQry = SQLQry & " FROM (Global_Table as GG INNER JOIN Channel_Normal_Table as NN ON GG.Test_ID=NN.Test_ID) INNER JOIN Smart_Battery_Data_Table as SB ON (NN.Data_Point=SB.Data_Point) and (NN.Test_ID=SB.Test_ID) " & _
                                    " WHERE GG.Channel_Index= " & iChan
                            End Select
                            If gDellReportCfg.tVars(j) <> "SB_Max_ROSC" And gDellReportCfg.tVars(j) <> "SB_Cycle_FCC" And gDellReportCfg.tVars(j) <> "SB_Max_T(C)" Then
                                SQLQry = SQLQry & " AND DateTime <=CDate('" & gReportTime & "') "
                                SQLQry = SQLQry & " ORDER BY DateTime Desc;"
                            End If
                            Set recSQL = gDellDataDB.OpenRecordset(SQLQry, dbOpenForwardOnly, dbReadOnly)
                            If Not recSQL.EOF Then
                                If gDellReportCfg.tVars(j) <> "SB_CycleCount" And gDellReportCfg.tVars(j) <> "SB_Max_ROSC" And gDellReportCfg.tVars(j) <> "SB_Cycle_FCC" And gDellReportCfg.tVars(j) <> "SB_Max_T(C)" Then
                                    CycleNumber = recSQL.Fields("Cycle_Index")
                                End If
                                .cells(iRowNum, iColumnStart + j - 1) = recSQL.Fields(gDellReportCfg.tVars(j))
                                recSQL.Close
                            End If

                        Next j
                        .Range(.cells(iRowNum, 1), .cells(iRowNum, 1)).Select
                        Selection.Comment.Shape.Height = 45
                        Selection.Comment.Shape.Width = 60
                        Selection.Comment.Text "Latest Time is " & gReportTime
                        .Range(cells(iRowNum, 1), cells(iRowNum, 2)).Select
                        With Selection 'highlight the data
                            .Interior.ColorIndex = 6
                            .Interior.PatternColorIndex = xlAutomatic
                        End With
                        gDellDataDB.Close

                    End If
                DoEvents
                Next i
                End If
                
                End With    'Active Sheet

             Next iChan
        End With
    Call FormatReportSheet
    
    Next iAmb
'Get_Data_Exit:
'    Set wsChannel = Nothing
'    Set wsSmartBattery = Nothing
'    Set wb = Nothing
'    Set wbReport = Nothing
    Application.DisplayAlerts = False
    Workbooks("Dell_SB_Report.xls").Activate
    Call gfDeleteDefaultSheet123(ActiveWorkbook)
    Me.MousePointer = fmMousePointerDefault
    Application.ScreenUpdating = True

    Application.DisplayAlerts = True
    Application.StatusBar = "Ready"
    ActiveWorkbook.Save
    Me.Hide
    Exit Sub
Err_Data:
    MsgBox "Data Format wrong! Please check options page and import data again."
    Application.DisplayAlerts = True
    Application.ScreenUpdating = True
    Me.MousePointer = fmMousePointerDefault
    Application.StatusBar = "Ready"
    End If
    Exit Sub
UserForm_SaveAs_Error:
    If Err.Number = 1004 Then
        MsgBox gFileNameOutput & " cann't save to read-only " _
            & "media device (like CD-ROM, read-only network drive )" _
            & "or the file has been locked by others. " _
            & "You should change the Output File Name. " _
            & "This problem may be caused by network drive. " _
            & "You'd better not to use network drive."
        Workbooks(wb.Name).Close SaveChanges:=False
    End If
End Sub



'Private Sub Label1_Click()
'Dim mDatetime
'gTest = True
'On Error Resume Next
'mDatetime = InputBox("Input what time stampe date you want?", "Input Date Time (MM-DD-YYYY HH:MM:SS)")
'gReportTime = CDate(mDatetime)
'End Sub

Private Sub LabelFolder_Click()
Dim fs, iFileCount As Integer, DataFilePath As String
Dim strFileName As String, iFileNameLen As Integer, iPathLen As Integer, i As Integer
Dim bFind As Boolean
fs = Application.GetOpenFilename("MITS Pro/2000/97 Files (*.res), *.res", 5, "Open MITS Pro/2000/97 File", , True)
On Error GoTo Err_Exit
'ListBoxSelectedFiles.Clear
If LBound(fs) Then
    With ListBoxSelectedFiles

    strFileName = fs(1)
    DataFilePath = fGetDataDir(strFileName)
    LabelFolder.Caption = DataFilePath
    iPathLen = Len(DataFilePath) + 1
        For i = 0 To ListBoxSelectedFiles.ListCount - 1
                .Selected(i) = False
                .SetFocus
        Next i
    
    For iFileCount = 1 To UBound(fs)
        strFileName = fs(iFileCount)
        iFileNameLen = Len(strFileName)
        
        bFind = False
        .MultiSelect = fmMultiSelectMulti
       
        If ListBoxSelectedFiles.ListCount > 0 Then
        For i = 0 To ListBoxSelectedFiles.ListCount - 1
            If ListBoxSelectedFiles.List(i) = strFileName Then
                .Selected(i) = True
                bFind = True
                .SetFocus
                Exit For
            End If
            
        Next i
        End If
        If bFind = False Then
            .AddItem strFileName
            .Selected(.ListCount - 1) = True
            .SetFocus
        End If
    Next iFileCount
    End With
End If
Err_Exit:
End Sub



Private Sub ListBoxSelectedFiles_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    Dim DateBaseName As String, i As Integer
    With ListBoxSelectedFiles
    If .ListCount > 0 And .ListIndex >= 0 Then
        For i = 0 To .ListCount - 1
            .Selected(i) = False
            .SetFocus
        Next i
        DateBaseName = .List(ListBoxSelectedFiles.ListIndex)
        Call QueryTestName(DateBaseName)
        .Selected(.ListIndex) = True
        .SetFocus
        .MultiSelect = fmMultiSelectMulti

    End If
    End With
'    Call PutListBoxChannelIndex
End Sub

Private Sub ListViewChanInfo_DblClick()
    Dim mChan(48), mCurrChNo As String, iCount As Integer
    Dim itmX As ListItem
    On Error GoTo Err_Exit
    With ListViewSelectChan
    mCurrChNo = ListViewChanInfo.SelectedItem.SubItems(1)
    For iCount = 1 To .ListItems.Count
        mChan(iCount) = .ListItems(iCount).Key
    Next iCount
    
    If fFindIndex(mCurrChNo, mChan) = 0 Then
        If ListViewChanInfo.ListItems.Count > 0 And ListViewChanInfo.SelectedItem.Selected Then
            Set itmX = .ListItems.Add(, , ListViewChanInfo.SelectedItem.SubItems(1))
                itmX.Key = ListViewChanInfo.SelectedItem.SubItems(1)
                itmX.SubItems(1) = ListViewChanInfo.SelectedItem.SubItems(5)
                itmX.SubItems(2) = ListViewChanInfo.SelectedItem.SubItems(6)
            .ListItems(.ListItems.Count).Selected = True
            .SetFocus
        End If
        Else
            MsgBox ("Please pay Attention for duplicated Channel Number!")
     End If
     End With
Err_Exit:

End Sub




Private Sub ListViewSelectChan_ColumnClick(ByVal ColumnHeader As MSComctlLib.ColumnHeader)
    If LastListViewSortColumn = ColumnHeader.index Then
        If ListViewSelectChan.SortOrder = lvwDescending Then
            ListViewSelectChan.SortOrder = lvwAscending
        Else
            ListViewSelectChan.SortOrder = lvwDescending
        End If
    Else
        LastListViewSortColumn = ColumnHeader.index
        If InStr(1, ListViewSelectChan.ColumnHeaders(ColumnHeader.index), "Ch#") Then
            ListViewSelectChan.SortOrder = lvwDescending
        End If
    End If
    ListViewSelectChan.SortKey = ColumnHeader.index - 1
    ListViewSelectChan.Sorted = True
End Sub


Private Sub ListViewSelectChan_DblClick()
With ListViewSelectChan
    On Error GoTo Err_Exit
    If .ListItems.Count > 0 And .SelectedItem.index > 0 Then
        If .ListItems(.SelectedItem.index).Selected = True Then
            .ListItems.Remove (.SelectedItem.index)
        End If
    End If
End With
Err_Exit:
End Sub



Private Sub UserForm_Activate()
On Error GoTo Err_Exit
    If ConfigFile = "" Then ReportConfig.Show
Exit Sub
Err_Exit:
MsgBox "Dell Report Error:" & Err.Number & " ; " & Err.Description
End Sub

Private Sub UserForm_Initialize()
    On Error GoTo Err_Exit
    ListBoxSelectedFiles.Clear
    ListViewSelectChan.ListItems.Clear
    If gfReadDellReportIni = False Then gfCreateDellReportIni
    Load ReportConfig
    If ConfigFile = "" Then ReportConfig.Show
    Exit Sub
Err_Exit:
    Unload Me
End Sub

Private Sub ListViewChanInfo_ColumnClick(ByVal ColumnHeader As MSComctlLib.ColumnHeader)
    If LastListViewSortColumn = ColumnHeader.index Then
        If ListViewChanInfo.SortOrder = lvwDescending Then
            ListViewChanInfo.SortOrder = lvwAscending
        Else
            ListViewChanInfo.SortOrder = lvwDescending
        End If
    Else
        LastListViewSortColumn = ColumnHeader.index
        If InStr(1, ListViewChanInfo.ColumnHeaders(ColumnHeader.index), "Time") Then
            ListViewChanInfo.SortOrder = lvwDescending
        End If
    End If
    ListViewChanInfo.SortKey = ColumnHeader.index - 1
    ListViewChanInfo.Sorted = True
End Sub


Private Sub PutListBoxChannelIndex()
    Dim i As Integer, iSortOrder As Byte, isortindex As Byte
    Dim TestRec As Recordset
    Dim TestName As String, strQuery As String
    Dim iListCount As Integer
    Dim fldDAQ_Index As Field, fldChannel_Index As Field
    Dim fldCell_Number As Field, fldTest_ID As Field
    Dim strTempTestName As String
    Me.MousePointer = fmMousePointerHourGlass
        ListViewChanInfo.ListItems.Clear
'        For i = 1 To UBound(TestNameArray)
'              With ListViewChanInfo
'                strTempTestName = TestNameArray(i, 2)
'                If TestNameArray(i, 4) <> "" Then
'                    strTempTestName = strTempTestName & " (" & TestNameArray(i, 4) & ")"
'                End If
'                .AddItem (strTempTestName)
'                iListCount = .ListCount - 1
'                .List(iListCount, 1) = Left(TestNameArray(i, 3), Len(TestNameArray(i, 3)) - 4)
'                .List(iListCount, 2) = Right(TestNameArray(i, 3), 3)
'              End With
'        Next i
'            With ListBoxChannelIndex
'                 .AddItem (fldDAQ_Index.Value & "-" & fldChannel_Index.Value)
'                iListCount = .ListCount - 1
'                .List(iListCount, 1) = fldTest_ID.Value
'                .List(iListCount, 2) = fldCell_Number.Value
'            End With
'            TestRec.MoveNext
'        Wend
'        TestRec.Close
'        Set TestRec = Nothing
'    End If
    DoEvents
    Me.MousePointer = fmMousePointerDefault
    Application.StatusBar = "Ready"
End Sub


Private Sub QueryTestName(DBFileName As String)
    Dim TestName As String, strQry As String, strLastName As String
    Dim fldTest As Field, fldTime As Field, fldSdu As Field, fldCom As Field
    Dim fldID As Field, fldCell As Field, fldItemID As Field
    Dim recTemp1 As Recordset
    Dim itmX As ListItem
    Dim i As Integer
    Dim fVerSchema As Single
    Dim tTime As Variant, tData_Type As Variant
    Dim strDaqChannelNum As String, iChanI As Integer, bNoTestID As Boolean
    Dim strFilter As String, iTest_ID As Integer, iMaxCellNum As Integer
    
    Me.MousePointer = fmMousePointerHourGlass
    Application.StatusBar = "Querying Test Name from " & DBFileName & " file."
    If gDBOpen(DBFileName) Then
       
        Call ReadResultVersionTable
        fVerSchema = gbfVerSchema
        'ListViewTestName
        strQry = "SELECT [Test_Name], " _
            & " Start_DateTime, Schedule_File_Name, Comments, Test_ID"
        'If fVerSchema < 1.11 Then strQry = strQry & ", Cell_Number"
        If fVerSchema >= 1.1 Then strQry = strQry & ", Item_ID"
        strQry = strQry & " FROM Global_Table ORDER BY [Test_Name];"
        
        Set recTemp1 = gDellDataDB.OpenRecordset(strQry, dbOpenForwardOnly, dbReadOnly)
        Set fldTest = recTemp1.Fields(0)
        Set fldTime = recTemp1.Fields(1)
        Set fldSdu = recTemp1.Fields(2)
        Set fldCom = recTemp1.Fields(3)
        Set fldID = recTemp1.Fields(4)
        'Set fldCell = recTemp1.Fields(5)
        'If fVerSchema >= 1.1 Then Set fldItemID = recTemp1.Fields(6)
        If fVerSchema >= 1.1 Then Set fldItemID = recTemp1.Fields(5)
        ListViewChanInfo.ListItems.Clear
        On Error Resume Next
        While Not recTemp1.EOF
            TestName = Left$(fldTest, Len(fldTest) - 7)
            Set itmX = ListViewChanInfo.ListItems.Add(, , TestName)
            'itmX.Key = CStr(fldID) & "-" & Format$(CStr(fldCell), "000")
            itmX.Key = CStr(fldID) & "-000"
            itmX.SubItems(1) = Right$(fldTest, 5)
            If Not IsNull(fldTime) Then
                'itmX.SubItems(1) = CStr(recTemp1!Start_DateTime)
                itmX.SubItems(2) = Format$(fldTime, "yyyy/mm/dd hh:mm:ss")
                If fldTime > tTime Then
                    tTime = fldTime
                End If
            Else
                itmX.SubItems(2) = ""
            End If
            If Not IsNull(fldSdu) Then
                itmX.SubItems(3) = CStr(fldSdu)
            Else
                itmX.SubItems(3) = ""
            End If
            If Not IsNull(fldCom) Then
                itmX.SubItems(4) = fldCom
            Else
                itmX.SubItems(4) = ""
            End If
            itmX.SubItems(5) = ""
            If fVerSchema >= 1.1 Then
                If Not IsNull(fldItemID) Then
                    itmX.SubItems(5) = fldItemID
                End If
            End If
            itmX.SubItems(6) = DBFileName
            strLastName = TestName
            recTemp1.MoveNext
         Wend
         
         iListViewChanInfoCount = ListViewChanInfo.ListItems.Count
         ReDim TestNameArray(iListViewChanInfoCount, 5)
         For i = 1 To iListViewChanInfoCount
            TestNameArray(i, 1) = ListViewChanInfo.ListItems.Item(i).Text
            TestNameArray(i, 2) = ListViewChanInfo.ListItems.Item(i).SubItems(1)
            TestNameArray(i, 3) = ListViewChanInfo.ListItems.Item(i).Key
            TestNameArray(i, 4) = ""
            If fVerSchema >= 1.1 Then
                TestNameArray(i, 4) = ListViewChanInfo.ListItems.Item(i).SubItems(5)
            End If
            TestNameArray(i, 5) = ListViewChanInfo.ListItems.Item(i).SubItems(6)
         Next i
        recTemp1.Close
        Set recTemp1 = Nothing
        
        ListViewChanInfo.Refresh
        If iListViewChanInfoCount >= 1 Then ListViewChanInfo.ListItems.Item(1).Selected = False
        On Error GoTo 0
    End If
    
    Me.MousePointer = fmMousePointerDefault
    'make simple view the active view
    Me.Repaint
    Application.StatusBar = "Ready"
End Sub

Private Function gDBOpen(DBFileName As String) As Boolean
    Call gDBClose
    gDBOpen = False
    On Error GoTo gDBOpen_Error
        Set gDellDataDB = DBEngine.OpenDatabase(DBFileName, False, True)
gDBOpen_Exit:
    gDBOpen = True
    On Error GoTo 0
    DoEvents
    Exit Function
gDBOpen_Error:
    Beep
    Select Case Err.Number
        Case 3050:
'        MsgBox "You should have the Change permission to the folder containing the result file " & _
            DBFileName
        mResponse = MsgBox("Are you import the result file from CD or Network drive?", vbYesNo)
        If mResponse = vbYes Then
            Set gDellDataDB = DBEngine.OpenDatabase(DBFileName, False, True)
        Else
            MsgBox Err.Description & "you cann't import file " & DBFileName
            Set gDellDataDB = Nothing
        End If
        Case 3356
        Set gDellDataDB = DBEngine.OpenDatabase(DBFileName, False, False)
        Case 429:
        MsgBox "Microsoft DAO 3.6 was missing by System, try install from Mits's CD! "
        Case 55:
        MsgBox Err.Description & Chr(13) & "Open DataBase " & DBFileName & " Error." & Err.Number & _
            "Probable was locked by other application, if you use network device, Map it as network drive and try again!"
            gDellDataDB.Close
            Set gDellDataDB = Nothing
 
        Case 3343
        MsgBox Err.Description & Chr(13) & "Open DataBase " & DBFileName & " Error." & Err.Number
        Case Else
    End Select
    GoTo gDBOpen_Exit
End Function

Function ReadResultVersionTable()
    Dim strQuery As String, TestRec As Recordset, i As Integer
    gbsVerSchema = ""
    gbfVerSchema = 0#
    strQuery = "SELECT * FROM Version_Table;"
    On Error GoTo ReadResultVersionTableError
    Set TestRec = gDellDataDB.OpenRecordset(strQuery, dbOpenForwardOnly, dbReadOnly)
    gbsVerSchema = TestRec.Fields(1).Value
    gbfVerSchema = Val(Right$(gbsVerSchema, 5))
    TestRec.Close
    Set TestRec = Nothing
ReadResultVersionTableError:
    On Error GoTo 0
    DoEvents
End Function
Function ReadGlobalTableInfo(TestID As Integer) As Boolean
    Dim strQuery As String, TestRec As Recordset
    Dim i As Integer, j As Integer
    ReadGlobalTableInfo = False
    strQuery = "SELECT * FROM Global_Table Where ( [Test_ID] = " & TestID & ");"
    Set TestRec = gDB.OpenRecordset(strQuery, dbOpenForwardOnly, dbReadOnly)
    If TestRec.RecordCount <= 0 Then Exit Function
    On Error Resume Next
    With tGlobal_Table1
        .Test_ID = TestRec.Fields("Test_ID").Value
        .Test_Name = TestRec.Fields("Test_Name").Value
        .Channel_Index = TestRec.Fields("Channel_Index").Value
        .Start_DateTime = TestRec.Fields("Start_DateTime").Value
        .DAQ_Index = TestRec.Fields("DAQ_Index").Value
        .Channel_Type = TestRec.Fields("Channel_Type").Value
        .Creator = TestRec.Fields("Creator").Value
        .Comments = TestRec.Fields("Comments").Value
        .Schedule_File_Name = TestRec.Fields("Schedule_File_Name").Value
        .Channel_Number = TestRec.Fields("Channel_Number").Value
        '.Cell_Number = TestRec.Fields("Cell_Number").Value
        .Mapped_Aux_Number(0) = TestRec.Fields("Mapped_Aux_Voltage_Number").Value
        .Mapped_Aux_Number(1) = TestRec.Fields("Mapped_Aux_Temperature_Number").Value
        .Mapped_Aux_Number(2) = TestRec.Fields("Mapped_Aux_Pressure_Number").Value
        .Mapped_Aux_Number(3) = TestRec.Fields("Mapped_Aux_PH_Number").Value
        .Mapped_Aux_Number(4) = TestRec.Fields("Mapped_Aux_Flow_Rate_CNumber").Value
        If gbfVerSchema >= 1.14 Then
            .Mapped_Aux_Number(5) = TestRec.Fields("Mapped_Aux_Conc_CNumber").Value
            .Mapped_Aux_Number(6) = TestRec.Fields("Mapped_Aux_DI_CNumber").Value
            .Mapped_Aux_Number(7) = TestRec.Fields("Mapped_Aux_DO_CNumber").Value
        End If
        If gbfVerSchema >= 5.142 Then
            .Mapped_Aux_Number(8) = TestRec.Fields("Mapped_Aux_Relative_Humidity_CNumber").Value
        End If
        .Applications_Path = TestRec.Fields("Applications_Path").Value
        .Log_Data_Flag(0) = TestRec.Fields("Log_ChanStat_Data_Flag").Value
        '.Log_Data_Flag(1) = TestRec.Fields("Log_CellNormal_Data_Flag").Value
        '.Log_Data_Flag(2) = TestRec.Fields("Log_CellStat_Data_Flag").Value
        .Log_Data_Flag(3) = TestRec.Fields("Log_Aux_Data_Flag").Value
        .Log_Data_Flag(4) = TestRec.Fields("Log_Smart_Battery_Data_Flag").Value
        .Log_Data_Flag(5) = TestRec.Fields("Log_Event_Data_Flag").Value
        
        If gbfVerSchema >= 1.1 Then
            .Item_ID = TestRec.Fields("Item_ID").Value
        End If
        
    End With
    TestRec.Close
    Set TestRec = Nothing
    
   Rem Query Mapped_Anx_Concentration_CNumber,Mapped_Aux_Digital_Input_CNumber,Mapped_Aux_Digital_Output_CNumber
'    strQuery = "SELECT * FROM Auxiliary_Table Where ( [Test_ID] = " & TestID & ");"
'    Set TestRec = gDB.OpenRecordset(strQuery, dbOpenForwardOnly, dbReadOnly)
'    If TestRec.RecordCount <= 0 Then Exit Function
'    On Error Resume Next
    
'    TestRec.Close
'    Set TestRec = Nothing
    
    With Worksheets(gbInfoSheetName)
        i = gbInfoSheetNowRow
        .cells(2, 4) = Left$(tGlobal_Table1.Test_Name, Len(tGlobal_Table1.Test_Name) - 7)
        .cells(i, 1).NumberFormat = "@"
        .cells(i, 1) = tGlobal_Table1.DAQ_Index & "-" & Format$(tGlobal_Table1.Channel_Index, "000")
        .cells(i, 2) = tGlobal_Table1.Start_DateTime
        .cells(i, 2).NumberFormat = "mm/dd/yy hh:mm:ss"
        .cells(i, 3) = tGlobal_Table1.Schedule_File_Name
        .cells(i, 4) = tGlobal_Table1.Creator
        .cells(i, 5) = tGlobal_Table1.Comments
        
        .cells(i, 6) = tGlobal_Table1.Channel_Number
        '.Cells(I, 7) = tGlobal_Table1.Cell_Number
        
        j = 8   '8
        .cells(i, j) = tGlobal_Table1.Mapped_Aux_Number(0)
        .cells(i, j + 1) = tGlobal_Table1.Mapped_Aux_Number(1)
        .cells(i, j + 2) = tGlobal_Table1.Mapped_Aux_Number(2)
        .cells(i, j + 3) = tGlobal_Table1.Mapped_Aux_Number(3)
        .cells(i, j + 4) = tGlobal_Table1.Mapped_Aux_Number(4)
        
        If gbfVerSchema >= 1.14 Then
            j = 20
            .cells(i, j) = tGlobal_Table1.Mapped_Aux_Number(5)
        
            j = 21
            .cells(i, j) = tGlobal_Table1.Mapped_Aux_Number(6)
            .cells(i, j + 1) = tGlobal_Table1.Mapped_Aux_Number(7)
        End If
    
        j = 13  '13
        .cells(i, j) = tGlobal_Table1.Log_Data_Flag(0)
        '.Cells(I, J + 1) = tGlobal_Table1.Log_Data_Flag(1)
        '.Cells(I, J + 2) = tGlobal_Table1.Log_Data_Flag(2)
        .cells(i, j + 1) = tGlobal_Table1.Log_Data_Flag(3)
        .cells(i, j + 2) = tGlobal_Table1.Log_Data_Flag(4)
        .cells(i, j + 3) = tGlobal_Table1.Log_Data_Flag(5)
        
        j = 7 'Q
        .cells(i, j) = tGlobal_Table1.Item_ID
        .cells(i, j).HorizontalAlignment = xlLeft

    End With
    
    On Error GoTo 0
    DoEvents
    ReadGlobalTableInfo = True
End Function

Private Sub gDBClose()
On Error Resume Next
    If gbDBIsOpen = True Then
        gDellDataDB.Close
        Set gDellDataDB = Nothing
        gbDBIsOpen = False
    End If
End Sub
Private Function ReportHead(wkReport As Excel.Worksheet, IndexChamb As Integer, NewColumn As Boolean) As Integer
Dim iCount As Integer, jCount As Integer, lRowInReport As Long, iChan As Integer
Dim mCountDate As Integer, mDatetime(3), mCount As Integer, iEndColumn As Integer
Dim iRowNum As Integer
With wkReport
    If Left(.cells(1, 1), 12) = "Create Time:" Then
        iEndColumn = .Range("A2").End(xlToRight).Column
        If NewColumn Then iEndColumn = iEndColumn - gVarNo
        If iEndColumn > 240 Then
            MsgBox "Too many daily log in one sheet, please save Dell_SB_Report.xls as another file!"
            iEndColumn = 0
            Exit Function
        End If
    Else
        iEndColumn = 6
        .cells(1, 1) = "Create Time:  " & Now()
        .Range("A1:F1").Select
        With Selection
            .HorizontalAlignment = xlGeneral
            .VerticalAlignment = xlBottom
            .WrapText = False
            .Orientation = 0
            .AddIndent = False
            .IndentLevel = 0
            .ShrinkToFit = False
            .ReadingOrder = xlContext
            .MergeCells = True
        End With

        .cells(2, 1) = "Tester ID": .cells(2, 2) = "Channel": .cells(2, 3) = "Battery Type"
        .cells(2, 4) = "Revision/Phase": .cells(2, 5) = "Dell P/N": .cells(2, 6) = "Battery #"
        iRowNum = 2
        For iChan = 1 To gMaxChan
            If gDellReportCfg.tChanTemp(iChan) = IndexChamb Then
                iRowNum = iRowNum + 1
                On Error Resume Next
                .cells(iRowNum, 1) = gDellReportCfg.tChanMap(iChan)
                .cells(iRowNum, 1).AddComment "No date yet!"
                .cells(iRowNum, 2) = iChan
            End If
        Next iChan

    End If
    iCount = 1
    On Error Resume Next
    Do
        .cells(2, iEndColumn + iCount) = gDellReportCfg.tType(iCount) & "_" & gDellReportCfg.tVars(iCount)
        .cells(2, iEndColumn + iCount).WrapText = True
        iCount = iCount + 1
    Loop Until gDellReportCfg.tType(iCount) = ""
    .cells(1, iEndColumn + 1) = gReportTime
    .Range(.cells(1, iEndColumn + 1), .cells(1, iEndColumn + iCount - 1)).Select
     With Selection
        .Interior.ColorIndex = iEndColumn
        .Interior.Pattern = xlSolid
        .Interior.PatternColorIndex = xlAutomatic
        .HorizontalAlignment = xlCenter
        .VerticalAlignment = xlBottom
        .WrapText = False
        .Orientation = 0
        .AddIndent = False
        .IndentLevel = 0
        .ShrinkToFit = False
        .ReadingOrder = xlContext
        .MergeCells = True
     End With
End With
ReportHead = iEndColumn + 1
End Function
Private Sub FormatReportSheet()
    Dim wksheet As Excel.Worksheet
    Dim lRows As Long, lMaxRows As Long, iColumn As Integer, iEndColumn As Integer
    Dim bColorFirst As Boolean
        With ActiveSheet
        .PageSetup.Orientation = xlLandscape
        lMaxRows = .cells(1, 1).End(xlDown).Row
        iEndColumn = .Range("A2").End(xlToRight).Column
        If iEndColumn > 1 Then
        bColorFirst = False
            For iColumn = 3 To iEndColumn
                If iColumn = 3 Then
                .Columns(iColumn).ColumnWidth = 15
                Else
                .Columns(iColumn).ColumnWidth = 14
            End If
                    If bColorFirst Then
                        bColorFirst = False
                       With .Columns(iColumn).Interior
                            .ColorIndex = 0
                            .PatternColorIndex = xlAutomatic
                        End With
                    Else
                        With .Columns(iColumn).Interior
                            .ColorIndex = 20
                            .PatternColorIndex = xlAutomatic
                        End With
                        bColorFirst = True
                    End If
            Next iColumn
        End If
        End With
End Sub
Function gfSaveDellReportIni() As Boolean
    Dim i As Integer, iCount As Integer
    On Error GoTo OpenErrorHandle
    gfSaveDellReportIni = False
    Open ThisWorkbook.Path & "\" & "DellReport.ini" For Output As #4
    i = gVarNo
    Print #4, i
    For iCount = 1 To i
        Print #4, gDellReportCfg.tType(iCount)
        Print #4, gDellReportCfg.tVars(iCount)
    Next iCount
    With ListViewSelectChan
        i = .ListItems.Count
        Print #4, i
        For iCount = 1 To i
            Print #4, .ListItems(iCount).Key           'Channel Number
            Print #4, .ListItems(iCount).SubItems(1)   'Item_ID
            Print #4, .ListItems(iCount).SubItems(2)   'DateBase Name
        Next iCount
    End With
    With ListBoxSelectedFiles
        i = .ListCount
        Print #4, i
        For iCount = 0 To i - 1
            Print #4, .List(iCount)  'Result files
        Next iCount
    End With
    Print #4, ConfigFile
    Print #4, gMaxChan
    Print #4, gDellSerial
    Close #4
    gfSaveDellReportIni = True
Exit Function
OpenErrorHandle:
    Close #4
    If Err.Number = 75 Then
        On Error GoTo ReadOnlyFile
        SetAttr ThisWorkbook.Path & "\" & "DellReport.ini", vbNormal
        Resume
    End If
ReadOnlyFile:
        MsgBox "You have not enough right to write file or your work space located CD-ROM, ReadOnly Network drive."
End Function

Function gfReadDellReportIni() As Boolean
    Dim i As Integer, iCount As Integer
    Dim j As Integer, mTemp(3) As String
    Dim itmX As ListItem
    On Error GoTo ReadDellReportIniError
    gfReadDellReportIni = False
Try_Again:
    Open ThisWorkbook.Path & "\" & "DellReport.ini" For Input As #4
    Input #4, gVarNo
    For iCount = 1 To gVarNo
        Input #4, gDellReportCfg.tType(iCount)
        Input #4, gDellReportCfg.tVars(iCount)
    Next iCount
    With ListViewSelectChan
        Input #4, i
        If i > 0 Then
        For iCount = 1 To i
            Input #4, mTemp(1)
            Input #4, mTemp(2)
            Input #4, mTemp(3)
            Set itmX = .ListItems.Add(, , mTemp(1))
            itmX.Key = mTemp(1)
            itmX.SubItems(1) = mTemp(2)
            itmX.SubItems(2) = mTemp(3)
        Next iCount
        End If
    End With
    With ListBoxSelectedFiles
        Input #4, i
        If i > 0 Then
        For iCount = 0 To i - 1
            .AddItem
            Input #4, mTemp(1)
            .List(.ListCount - 1) = mTemp(1)
        Next iCount
        End If
    End With
    Input #4, ConfigFile
    Input #4, gMaxChan
    Input #4, gDellSerial
    Close #4
    gfReadDellReportIni = True
Exit Function

ReadDellReportIniError:
    Close #4
    On Error GoTo 0
    Exit Function
    
DellReportIniError:
    Close #4
    Call gfCreateDellReportIni
    GoTo Try_Again
End Function
Function gfCreateDellReportIni()
    Dim i As Integer
    Open ThisWorkbook.Path & "\" & "DellReport.ini" For Output As #4
    i = 0
    Print #4, i
    Print #4, i
    Close #4
End Function
Attribute VB_Name = "DellUtility"
Option Explicit
Option Base 1
Public Type tDellReportCfg
    tChanMap(48) As String  'Tester_ID
    tChanTemp(48) As Integer
    tVars(8) As Variant
    tType(8) As String
End Type
Public ConfigFile As String
Public gDellReportCfg As tDellReportCfg
Public gDellReportCfgDB As DAO.Database
Public gDellSerial As Long
Public gDellDataDB As DAO.Database
Public gDellDataDBOpen As Boolean

Public mAmb(3), mTesterID(48) 'Amb Number and Tester_ID limitation
Public gChanFiles(48) As String, gVarNo As Integer
Public gReportTime
Public gTest As Boolean
Public gMaxChan As Integer

Function fFindIndex(mItem As Variant, mSerial As Variant) As Integer
Dim iIndex As Integer
fFindIndex = 0
For iIndex = 1 To UBound(mSerial)
    If Trim(mSerial(iIndex)) = Trim(mItem) Then
        fFindIndex = iIndex
        Exit Function
    End If
Next iIndex
End Function

Function fReadResultVersion()
    Dim strQuery As String, TestRec As Recordset, i As Integer
    fReadResultVersion = 0
    strQuery = "SELECT * FROM Version_Table;"
    On Error GoTo ReadResultVersionTableError
    Set TestRec = gDellDataDB.OpenRecordset(strQuery, dbOpenForwardOnly, dbReadOnly)
    fReadResultVersion = TestRec.Fields(1).Value
    TestRec.Close
    Set TestRec = Nothing
ReadResultVersionTableError:
    On Error GoTo 0
    DoEvents
End Function

Function ReadChannelFile(TestID As Integer, ChannelNum As String) As Boolean
    Dim Query As String, tempRec As Recordset, SQLQry As String
    Dim lCount As Long, rCount, pCount As Long
    Query = "SELECT "
    Query = Query & _
        " Data_Point," & _
        " Test_Time as [" & gbTestTimeName & "]," & _
        " DateTime as [" & gbDateTimeName & "]," & _
        " Step_Time as [" & gbStepTimeName & "]," & _
        " Step_Index," & _
        " Cycle_Index," & _
        " Current as [" & gbCurrentName & "]," & _
        " Voltage as [" & gbVoltageName & "]," & _
        " Charge_Capacity as [" & gbChargeCapacityName & "]," & _
        " Discharge_Capacity as [" & gbDischargeCapacityName & "]," & _
        " Charge_Energy as [" & gbChargeEnergyName & "]," & _
        " Discharge_Energy as [" & gbDischargeEnergyName & "]," & _
        " [dV/dt] as [" & gbDVdtName & "]"
    If gbfVerSchema >= 1.05 Then
        Query = Query & ", Internal_Resistance as [" & gbInternalResistanceName & "]"
        Query = Query & ", Is_FC_Data" 'If gbbHighlightPulseRow Then
    End If
    'End If
    If gbfVerSchema >= 1.12 Then
        Query = Query & ", AC_Impedance as [" & gbACImpedanceName & "]"
    End If
    If gbfVerSchema = 1.13 Then
        Query = Query & ", ACI_Phase as [" & gbACPhaseName & "]"
    End If
    If gbfVerSchema >= 1.14 Then
        Query = Query & ", ACI_Phase_Angle as [" & gbACPhaseName & "]"
    End If
    
    'Query = Query & ", DateTime"
'Query point number of data from data base for each channel, if more then gCount*x
    Query = Query & " FROM Channel_Normal_Table Where ( Test_ID =" & TestID
    ' PreQuery for point counts
'    SQLQry = "Select Count(Data_Point) as rCount FROM Channel_Normal_Table Where ( Test_ID =" & TestID & GetSQLConditionPart("", tOptionEdit1) & ");"
'    Set tempRec = gDB.OpenRecordset(SQLQry, dbOpenForwardOnly, dbReadOnly)
'    lCount = tempRec.Fields("rCount").Value
'    tempRec.Close
'    Set tempRec = Nothing
'    If tOptionEdit1.OptionID = 6 Then
'            pCount = lCount * tOptionEdit1.NumEdit1 / 100
'            lCount = lCount - pCount
'            Query = Query & " AND (" & gbDataPointName & ">" & lCount & ")"
'            lCount = pCount
'    End If
    Query = Query
'    If lCount > gCount And mbIsPlotAfterImport = True And OptionsForm.CheckBoxPlotWarning Then
'        MsgBox ("Data Point more than " & gCount & ". The Auto-ploting is disabled? " & vbCr _
'            & "You may need to use 'Advance>>' to plot the data piece by piece to reduce the waiting time.")
'            mbIsPlotAfterImport = False
'    End If
    If gbfVerSchema >= 1.11 Then
        Query = Query & " ) ORDER BY Data_Point;"
    Else
        Query = Query & " ) ORDER BY Test_Time;"
    End If
    ReadChannelFile = ReadRecordToSheetLoop(gbChannelName & "_" & ChannelNum, Query, 1)
End Function

Function ReadChannelStatisticFile(TestID As Integer, ChannelNum As String) As Boolean
    Dim Query As String, tempRec As Recordset, SQLQry As String
    Dim lCount As Long, rCount As Long, pCount As Long
    Query = "SELECT "  ' Channel_Normal_Table.Test_ID, Channel_Normal_Table.Data_Point,"
    Query = Query & _
        " nn.Cycle_Index," & _
        " nn.Test_Time as [" & gbTestTimeName & "]," & _
        " nn.DateTime as [" & gbDateTimeName & "]," & _
        " nn.Current as [" & gbCurrentName & "]," & _
        " nn.Voltage as [" & gbVoltageName & "]," & _
        " nn.Charge_Capacity as [" & gbChargeCapacityName & "]," & _
        " nn.Discharge_Capacity as [" & gbDischargeCapacityName & "]," & _
        " nn.Charge_Energy as [" & gbChargeEnergyName & "]," & _
        " nn.Discharge_Energy as [" & gbDischargeEnergyName & "]"
    If gbfVerSchema >= 1.05 Then
        Query = Query & ", nn.Internal_Resistance as [" & gbInternalResistanceName & "]"
    End If
    If gbfVerSchema >= 1.12 Then '02-12-2001
        Query = Query & ", nn.AC_Impedance as [" & gbACImpedanceName & "]"
    End If
    If gbfVerSchema = 1.13 Then
        Query = Query & ", nn.ACI_Phase as [" & gbACPhaseName & "]"
    End If
    If gbfVerSchema >= 1.14 Then
        Query = Query & ", ACI_Phase_Angle as [" & gbACPhaseName & "]"
    End If
    If gbfVerSchema >= 1.44 Then
        Query = Query & ", Charge_Time as [Charge_Time(s)], DisCharge_Time as [DisCharge_Time(s)] "
    End If
   

    Query = Query & ", ss.Vmax_On_Cycle as [" & gbVmaxOnCycleName & "]"
    Query = Query & " FROM Channel_Normal_Table AS nn INNER JOIN Channel_Statistic_Table AS ss"
    Query = Query & " ON (nn.Data_Point = ss.Data_Point) AND (nn.Test_ID = ss.Test_ID)"
    Query = Query & " WHERE (nn.Test_ID = " & TestID & ")"
' Added for all option active
'    SQLQry = "Select Count(nn.Cycle_Index) as rCount FROM Channel_Normal_Table AS nn INNER JOIN Channel_Statistic_Table AS ss  ON (nn.Data_Point = ss.Data_Point) AND (nn.Test_ID = ss.Test_ID) WHERE (nn.Test_ID = " & TestID & ")"
'    Set tempRec = gDB.OpenRecordset(SQLQry, dbOpenForwardOnly, dbReadOnly)
'    lCount = tempRec.Fields("rCount").Value
'    tempRec.Close
'    Set tempRec = Nothing
'    If tOptionEdit1.OptionID = 6 Then
'            pCount = lCount * tOptionEdit1.NumEdit1 / 100
'            lCount = lCount - pCount
'            Query = Query & " AND (" & gbDataPointName & ">" & lCount & ")"
'            lCount = pCount
'    End If
''    Query = Query & GetSQLConditionPart("nn.", tOptionEdit1, TestID)
'    If lCount > gCount And mbIsPlotAfterImport = True And OptionsForm.CheckBoxPlotWarning Then
'        If (MsgBox("Data Point more than " & gCount & ". Do you want to disable ploting after Import? " & vbCr _
'            & "Otherwise, you can click 'Advance>>' button to select proper section for view!", vbYesNo) = vbYes) Then
'            mbIsPlotAfterImport = False
'        End If
'    End If
    Query = Query & " ORDER BY nn.Test_Time;"
    ReadChannelStatisticFile = ReadRecordToSheetLoop(gbStatisticName & "s_" & ChannelNum, Query, 1)
End Function
Function ReadSmartBatteryInfo(TestID As Integer)
    Dim strQuery As String, TestRec As Recordset, i As Integer
    Dim j As Integer, iColumn As Integer
    iColumn = gbiCellGrading + 6
    strQuery = "SELECT * FROM Smart_Battery_Info_Table Where ( [Test_ID] = " & TestID & ");"
    On Error GoTo ReadSmartBatteryInfo_Error
    Set TestRec = gDB.OpenRecordset(strQuery, dbOpenForwardOnly, dbReadOnly)
    On Error Resume Next
    With Worksheets(gbInfoSheetName)
        j = gbInfoSheetNowRow
        If j = 5 Then
            'SmartBattery Title
            .Range("W3:AI3").Interior.ColorIndex = 24
            .cells(j - 2, iColumn) = "Smart Battery ====>      "
            j = j - 1
            .Columns("S:AE").ColumnWidth = 11.11
            .cells(j, iColumn) = "Manufacturer Access"
            .cells(j, iColumn + 1) = "Manufacturer Name"
            .cells(j, iColumn + 2) = "Manufacturer Date"
            .cells(j, iColumn + 3) = "Manufacturer Data"
            .cells(j, iColumn + 4) = "Design Capacity(Ah or 10Wh)"
            .cells(j, iColumn + 5) = "Design Voltage(V)"
            .cells(j, iColumn + 6) = "Specification Info"
            .cells(j, iColumn + 7) = "Serial Number"
            .cells(j, iColumn + 8) = "Device Name"
            .cells(j, iColumn + 9) = "Device Chemistry"
            .cells(j, iColumn + 10) = "FullCharge Capacity(Ah or 10Wh)"
            .cells(j, iColumn + 11) = "Charging Current(A)"
            .cells(j, iColumn + 12) = "Charging Voltage(V)"
            '.Cells(J - 1, iColumn + 10) = Date
'            .Cells(j, iColumn + 13) = "Flash60"
'            .Cells(j, iColumn + 14) = "Flash61"
'            .Cells(j, iColumn + 15) = "Flash62"
'            .Cells(j, iColumn + 16) = "Flash63"
'            .Cells(j, iColumn + 17) = "Flash64"
'            .Cells(j, iColumn + 18) = "Flash65"
'            .Cells(j, iColumn + 19) = "Flash66"
'            .Cells(j, iColumn + 20) = "Flash67"
'            .Cells(j, iColumn + 21) = "Flash68"
'            .Cells(j, iColumn + 22) = "Flash69"
'            .Cells(j, iColumn + 23) = "Flash6A"
'            .Cells(j, iColumn + 24) = "Flash6B"
'            .Cells(j, iColumn + 25) = "Flash6C"
'            .Cells(j, iColumn + 26) = "Flash6D"
'            .Cells(j, iColumn + 27) = "Flash6E"
'            .Cells(j, iColumn + 28) = "Flash6F"
'            .Cells(j, iColumn + 29) = "Flash70"
            j = j + 1
        End If
            .cells(j, iColumn) = TestRec.Fields("ManufacturerAccess").Value
            .cells(j, iColumn + 1) = TestRec.Fields("ManufacturerName")
            .cells(j, iColumn + 2) = TestRec.Fields("ManufacturerDate")
            .cells(j, iColumn + 2).NumberFormat = "mm/dd/yy"
            .cells(j, iColumn + 3) = TestRec.Fields("ManufacturerData")
            .cells(j, iColumn + 4) = TestRec.Fields("DesignCapacity")
            .cells(j, iColumn + 5) = TestRec.Fields("DesignVoltage")
            .cells(j, iColumn + 6) = TestRec.Fields("SpecificationInfo")
            .cells(j, iColumn + 7) = TestRec.Fields("SerialNumber")
            .cells(j, iColumn + 8) = TestRec.Fields("DeviceName")
            .cells(j, iColumn + 9) = TestRec.Fields("DeviceChemistry")
            .cells(j, iColumn + 10) = TestRec.Fields("FullChargeCapacity")
            .cells(j, iColumn + 11) = TestRec.Fields("ChargingCurrent")
            .cells(j, iColumn + 12) = TestRec.Fields("ChargingVoltage")
'            .Cells(j, iColumn + 13) = TestRec.Fields("Flash60")
'            .Cells(j, iColumn + 14) = TestRec.Fields("Flash61")
'            .Cells(j, iColumn + 15) = TestRec.Fields("Flash62")
'            .Cells(j, iColumn + 16) = TestRec.Fields("Flash63")
'            .Cells(j, iColumn + 17) = TestRec.Fields("Flash64")
'            .Cells(j, iColumn + 18) = TestRec.Fields("Flash65")
'            .Cells(j, iColumn + 19) = TestRec.Fields("Flash66")
'            .Cells(j, iColumn + 20) = TestRec.Fields("Flash67")
'            .Cells(j, iColumn + 21) = TestRec.Fields("Flash68")
'            .Cells(j, iColumn + 22) = TestRec.Fields("Flash69")
'            .Cells(j, iColumn + 23) = TestRec.Fields("Flash6A")
'            .Cells(j, iColumn + 24) = TestRec.Fields("Flash6B")
'            .Cells(j, iColumn + 25) = TestRec.Fields("Flash6C")
'            .Cells(j, iColumn + 26) = TestRec.Fields("Flash6D")
'            .Cells(j, iColumn + 27) = TestRec.Fields("Flash6E")
'            .Cells(j, iColumn + 28) = TestRec.Fields("Flash6F")
'            .Cells(j, iColumn + 29) = TestRec.Fields("Flash70")
    End With
    TestRec.Close
    Set TestRec = Nothing

ReadSmartBatteryInfo_Error:
    On Error GoTo 0
End Function

Function AlertDell() As Boolean
Dim Response
AlertDell = False
Response = MsgBox("This application could be interrupt your current test" & vbLf & vbCr _
 & "Do you want to continue anyway?", vbYesNo)
If Response = vbYes Then AlertDell = True
End Function

Function fHasReportOpen() As Boolean
Dim wk As Excel.Workbook
fHasReportOpen = False
Const reportName As String = "Dell_SB_Report"
For Each wk In Application.Workbooks
    If wk.Name = reportName Then
        fHasReportOpen = True
        Exit For
    End If
Next wk

End Function
Sub gSaveSettings(listBoxName As ListBox)
Dim iCount As Integer
For iCount = 0 To listBoxName.ListCount
SaveSetting "Mits", "Dell", listBoxName.List, listBoxName.Selected
Next iCount
End Sub
Sub gGetSettings(listBoxName As ListBox)
Dim iCount As Integer

End Sub
Attribute VB_Name = "ExDataImportForm"
Attribute VB_Base = "0{F4CC09B5-6203-400D-AAF5-0FEBB9E53B73}{30283BAC-76B7-48F3-A2AB-A67B05321C71}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Option Base 1
Dim tOptionEdit1 As gMyTypeOptionEdit
Dim tGlobal_Table1 As gMyTypeGlobal_Table
Dim InfoStr$
Dim bIsOverWrite As Boolean
Dim bExitAsked As Boolean
Dim LastListViewSortColumn As Integer
Dim TestNameArray() As String
Dim iListViewTestNameCount As Integer
Dim fListBoxViewHeight As Single
Dim mTestName As String
Dim mbIsMultifile As Boolean
Dim mMultifileName As String
Dim mbIsPlotAfterImport As Boolean
Dim mPreSheetName As String
Dim bLockImportData As Boolean
Dim mResponse As Integer
Public mInputFileName As String
Public mOutputFileName As String
Public running As Boolean

Sub SetCtrlStateAllFalse()
    TextBoxFirst.Font.Bold = False
    TextBoxCycleNo.Font.Bold = False
    TextBoxCycleNoTo.Font.Bold = False
    TextBoxStepFrom.Font.Bold = False
    TextBoxStepTo.Font.Bold = False
    TextBoxCycleFrom.Font.Bold = False
    TextBoxCycleTo.Font.Bold = False
    TextBoxPointFrom.Font.Bold = False
    TextBoxPointTo.Font.Bold = False
    
    TextBoxFirst.Enabled = False
    TextBoxCycleNo.Enabled = False
    TextBoxCycleNoTo.Enabled = False
    TextBoxStepFrom.Enabled = False
    TextBoxStepTo.Enabled = False
    TextBoxCycleFrom.Enabled = False
    TextBoxCycleTo.Enabled = False
    TextBoxPointFrom.Enabled = False
    TextBoxPointTo.Enabled = False
End Sub

Sub SetCtrlStateByOption()
    'Application.ScreenUpdating = False
    Call SetCtrlStateAllFalse
    If OptionAll.Value = True Then
        'All false
    ElseIf OptionFirst.Value = True Then
        TextBoxFirst.Enabled = True
        TextBoxFirst.Font.Bold = True
    ElseIf OptionCycleNo.Value = True Then
        TextBoxCycleNo.Enabled = True
        TextBoxStepFrom.Enabled = True
        TextBoxStepTo.Enabled = True
        TextBoxCycleNo.Font.Bold = True
        TextBoxStepFrom.Font.Bold = True
        TextBoxStepTo.Font.Bold = True
        TextBoxCycleNoTo.Enabled = True
        TextBoxCycleNoTo.Font.Bold = True
    ElseIf OptionCycleFrom.Value = True Then
        TextBoxCycleFrom.Enabled = True
        TextBoxCycleTo.Enabled = True
        TextBoxCycleFrom.Font.Bold = True
        TextBoxCycleTo.Font.Bold = True
    ElseIf OptionPointFrom.Value = True Then
        'DataCombo.Enabled = False
        TextBoxPointFrom.Enabled = True
        TextBoxPointTo.Enabled = True
        TextBoxPointFrom.Font.Bold = True
        TextBoxPointTo.Font.Bold = True
    ElseIf OptionLast.Value = True Then
        TextBoxFirst.Enabled = True
        TextBoxFirst.Font.Bold = True
    End If
    'Application.ScreenUpdating = True
End Sub

Private Sub CheckBoxSmartBatteryStat_Click()
gSmartBatteryStat = CheckBoxSmartBatteryStat.Value
End Sub

Private Sub CheckChNormal_Click()
    If CheckChNormal.Value = False Then CheckChAuxiliary.Value = False
End Sub

Private Sub CheckChAuxiliary_Click()
    If CheckChAuxiliary.Value = True Then CheckChNormal.Value = True
End Sub

Private Sub CommandButtonOk_Click()
Call gfSaveMitsDataini
Me.Hide
End Sub


Private Sub ListViewTestName_Click()
   Dim i As Integer
   Dim strSelTest As String
   Dim bini As Boolean
   bini = True
   For i = 1 To iListViewTestNameCount
        If ListViewTestName.ListItems.Item(i).Selected = True Then
            If bini = True Then
                mTestName = ListViewTestName.ListItems.Item(i).Text
                strSelTest = mTestName
                bini = False
                gFileNameExt = strSelTest & ".xls"
    If Right(gDirNameOutput, 1) = "\" Then gDirNameOutput = Left(gDirNameOutput, Len(gDirNameOutput) - 1)
                gFileNameOutput = gDirNameOutput & "\" & gFileNameExt
                LabelFileNameOutput.Caption = gFileNameOutput
                LabelFileNameOutput.Enabled = True
                Call DisplayNewFileName(mTestName)
               
                TextBoxPrompt1.Text = ListViewTestName.ListItems.Item(i).ListSubItems(4) & _
                    " " & ListViewTestName.ListItems.Item(i).ListSubItems(5)
                btnImport.Enabled = True
                Application.StatusBar = " 'Hold 'Ctrl' or 'Shift' key for Multi-selection."
            Else
                If ListViewTestName.ListItems.Item(i).Text <> strSelTest Then
                    ListViewTestName.ListItems.Item(i).Selected = False
                Else
                    TextBoxPrompt1.Text = " "
                End If
            End If
        End If
   Next i
   ' Debug.Print ListViewTestName.SelectedItem
End Sub

Private Sub ListViewTestName_ColumnClick(ByVal ColumnHeader As MSComctlLib.ColumnHeader)
    If LastListViewSortColumn = ColumnHeader.index Then
        If ListViewTestName.SortOrder = lvwDescending Then
            ListViewTestName.SortOrder = lvwAscending
        Else
            ListViewTestName.SortOrder = lvwDescending
        End If
    Else
        LastListViewSortColumn = ColumnHeader.index
        If InStr(1, ListViewTestName.ColumnHeaders(ColumnHeader.index), "Time") Then
            ListViewTestName.SortOrder = lvwDescending
        End If
    End If
    ListViewTestName.SortKey = ColumnHeader.index - 1
    ListViewTestName.Sorted = True
End Sub

Private Sub MultiPage1_Click(ByVal index As Long)
    Call FixListBoxViewSize
    'Me.Repaint
    If MultiPage1.Value = 1 Then
'        ListViewTestName.Refresh
        Application.StatusBar = "Click Title for Sorting."
        Call MapSelectedTestNameFromPage0To1
        'Call Page0ControlHide
    Else
        Application.StatusBar = "Ready"
        Call MapSelectedTestNameFromPage1To0
        'Call Page0ControlShow
    End If
End Sub

Private Sub Page0ControlHide()
    LabelTestName.Visible = False
    LabelChannelIndex.Visible = False
    ListBoxTestName.Visible = False
    ListBoxChannelIndex.Visible = False
End Sub

Private Sub Page0ControlShow()
    LabelTestName.Visible = True
    LabelChannelIndex.Visible = True
    ListBoxTestName.Visible = True
    ListBoxChannelIndex.Visible = True
End Sub

Private Sub MapSelectedTestNameFromPage0To1()
    Dim i As Integer, j As Integer, k As Integer
    Dim TestName As String
    k = 0
    If ListBoxTestName.ListIndex < 0 Then Exit Sub
    TestName = ListBoxTestName.List(ListBoxTestName.ListIndex)
    With ListViewTestName
        For i = 1 To iListViewTestNameCount
            If .ListItems.Item(i) = TestName Then
                j = gfGetListBoxIndex(ListBoxChannelIndex, .ListItems.Item(i).SubItems(1))
                .ListItems.Item(i).Selected = ListBoxChannelIndex.Selected(j)
                If .ListItems.Item(i).Selected = True Then
                    k = k + 1
                    If k = 1 Then
                        TextBoxPrompt1.Text = .ListItems.Item(i).ListSubItems(4)
                    Else
                        TextBoxPrompt1.Text = " "
                    End If
                End If
            Else
                .ListItems.Item(i).Selected = False
            End If
        Next i
    End With
End Sub

Private Sub MapSelectedTestNameFromPage1To0()
    Dim i As Integer, j As Integer, k As Integer
    Dim TestName As String, bExitSub As Boolean
    'Application.ScreenUpdating = False
    MultiPage1.Value = 1
    With ListViewTestName
        bExitSub = False
        For i = 1 To iListViewTestNameCount
            If .ListItems.Item(i).Selected Then
                TestName = .ListItems.Item(i)
                j = gfGetListBoxIndex(ListBoxTestName, TestName)
                If j < 0 Then
                    bExitSub = True
                    Exit For
                End If
                ListBoxTestName.Selected(j) = True
                Call ListBoxTestName_Click
                Call gfListBoxClearSelected(ListBoxChannelIndex)
                k = i
                Exit For
            End If
        Next i
        If bExitSub = True Then Exit Sub
        
        If i > iListViewTestNameCount Then GoTo Exit_MapSelectedTestNameFromPage1To0

        For i = k To iListViewTestNameCount
            If TestName = .ListItems.Item(i) Then
                If .ListItems.Item(i).Selected Then
                    j = gfGetListBoxIndex(ListBoxChannelIndex, .ListItems.Item(i).SubItems(1))
                    ListBoxChannelIndex.Selected(j) = True
                End If
            End If
        Next i
    End With
Exit_MapSelectedTestNameFromPage1To0:
    Call FixListBoxViewSize
    MultiPage1.Value = 0
    'Application.ScreenUpdating = True

End Sub

Private Sub OptionAll_Click()
    SetCtrlStateByOption
End Sub

Private Sub OptionChannel_Click()
    CheckCellAll.Enabled = False
    CheckCellAuxiliary.Enabled = False
    'GroupChannel.Enabled = True
    CheckChNormal.Enabled = True
    If gbExistAuxiliary = True Then
        CheckChAuxiliary.Enabled = True
    Else
        CheckChAuxiliary.Enabled = False
    End If
    If gbExistChStatistics = True Then
        CheckChStatistics.Enabled = True
    Else
        CheckChStatistics.Enabled = False
    End If
    If gbExistSmartBattery = True Then
        CheckChSmartBattery.Enabled = True
    Else
        CheckChSmartBattery.Enabled = False
    End If
End Sub

Private Sub OptionCell_Click()
    Call OptionCellClick
End Sub

Private Sub OptionCellClick()
    CheckCellAll.Enabled = True
    If gbExistAuxiliary = True Then
        CheckCellAuxiliary.Enabled = True
    Else
        CheckCellAuxiliary.Enabled = False
    End If
    'GroupChannel.Enabled = False
    CheckChNormal.Enabled = False
    CheckChAuxiliary.Enabled = False
    CheckChStatistics.Enabled = False
    CheckChSmartBattery.Enabled = False
End Sub

Private Sub OptionCycleNo_Click()
    SetCtrlStateByOption
End Sub

Private Sub OptionFirst_Click()
    SetCtrlStateByOption
End Sub

Private Sub OptionCycleFrom_Click()
    SetCtrlStateByOption
End Sub

Private Sub OptionLast_Click()
    SetCtrlStateByOption
End Sub

Private Sub OptionPointFrom_Click()
    SetCtrlStateByOption
End Sub


Private Sub TextBoxCycleNoTo_Change()
If TextBoxCycleNoTo.Value < TextBoxCycleNo.Value Then TextBoxCycleNoTo.Value = TextBoxCycleNo.Value
End Sub

Private Sub TextBoxPrompt0_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    Dim strMsg As String
    strMsg = "[Import + Plot] Tips:" & _
    Chr$(13) & Chr$(13) & "For one Channel:" & _
    Chr$(13) & "  double-click a Channel Index." & _
    Chr$(13) & Chr$(13) & "For more Channels:" & _
    Chr$(13) & "  1. Select a Test Name." & _
    Chr$(13) & "  2. Select Channel Indexes (Hold 'Shift' or " & _
    Chr$(13) & "      'Ctrl' Key when you click Channel Index)." & _
    Chr$(13) & "  3. Double-click Test Name or " & mTestName & _
    Chr$(13) & "      or click Import+Plot button." & _
    Chr$(13) & Chr$(13) & "The chart will show the X,Y1,Y2 axes you used last time." & _
    Chr$(13)
    gbiMsgBoxResponse = MsgBox(strMsg, vbInformation, "Arbin Data Pro")
End Sub


Private Sub UserForm_Activate()
'    gCommandHistory = False
    bLockImportData = False
    
    gRefreshPrecess = False
    gAutoRefreshEnable = False
    mbIsPlotAfterImport = False 'every time active import form means something changed
    bIsOverWrite = False
    gbIsImporting = False
    Call QueryTestName(gFileNameInput)
    Call FixListBoxViewSize
    CheckChNormal.Value = True
    Call SelectLastTestName
    gIsImportFormLoaded = True
End Sub

Private Sub UserForm_Initialize()
'    gCommandHistory = False
    If gCustom = "DELL" Then
        CheckBoxSMStretch.Enabled = True
        CheckBoxSmartBatteryStat.Enabled = True
    End If
    MultiPage1.Value = 1
'    mbIsPlotAfterImport = False
    bLockImportData = False
    Me.Width = 472.2
    fListBoxViewHeight = 133  '135.3
    bIsOverWrite = False       'True when MsgBox overwrite has been showed
    gbIsImporting = False
    Call QueryTestName(gFileNameInput)
    Call FixListBoxViewSize
    CheckChNormal.Value = True
    Call SelectLastTestName
    gIsImportFormLoaded = True
End Sub

Private Function SelectLastTestName()
    Dim i As Integer, bSelected As Boolean
    bSelected = False
    If ListBoxTestName.ListCount > 0 Then
        If gLastTestName <> "" Then
            For i = 0 To ListBoxTestName.ListCount - 1
                If ListBoxTestName.List(i) = gLastTestName Then
                    ListBoxTestName.Selected(i) = True
                    bSelected = True
                    Exit For
                End If
            Next i
        End If
        If bSelected = False Then
            gLastTestName = gLatestTestName
            For i = 0 To ListBoxTestName.ListCount - 1
                If ListBoxTestName.List(i) = gLastTestName Then
                    ListBoxTestName.Selected(i) = True
                    Exit For
                End If
            Next i
        End If
    End If
    
End Function

Private Function FixListBoxViewSize()
'    ListBoxTestName.Height = fListBoxViewHeight
'    ListBoxChannelIndex.Height = fListBoxViewHeight
'    ListViewTestName.Height = 8 + fListBoxViewHeight
'    ListViewTestName.Width = 226.2
End Function

Private Function CheckTableDataExist()
    Call CheckAuxiliaryExist
    Call CheckChStatisticsExist
    Call CheckSmartBatteryExist
    'Call CheckMultiCellExist
End Function

Private Function CheckSmartBatteryExist()
    If gbExistSmartBattery = True Or gfCheckDataBaseTableExist("Smart_Battery_Data_Table") Then
        gbExistSmartBattery = True
        CheckChSmartBattery.Enabled = True
        'CheckChSmartBattery.Value = gbCheckChSmartBattery    'Canceled caused by Multifile 06/99
        CheckChSmartBattery.Value = True
    Else
        gbExistSmartBattery = False
        CheckChSmartBattery.Enabled = False
        CheckChSmartBattery.Value = False
    End If
End Function

Private Function CheckMultiCellExist()
    If gbExistMultiCell = True Or gfCheckDataBaseTableExist("Cell_Normal_Table") Then
        gbExistMultiCell = True
        OptionCell.Enabled = True
        OptionCell.Value = True
        'CheckCellAll.Value = gbCheckCellAll   'Canceled caused by Multifile 06/99
        'CheckCellAuxiliary.Value = gbCheckCellAuxiliary   'Canceled caused by Multifile 06/99
        CheckCellAll.Value = True
        If gbExistAuxiliary = True Then
            CheckCellAuxiliary.Value = True
        Else
            CheckCellAuxiliary.Value = False
        End If
    Else
        gbExistMultiCell = False
        OptionCell.Enabled = False
        CheckCellAll.Enabled = False
        CheckCellAll.Value = False
        CheckCellAuxiliary.Enabled = False
        CheckCellAuxiliary.Value = False
        OptionChannel.Value = True
    End If
End Function

Private Function CheckAuxiliaryExist()
    If gbExistAuxiliary = True Or gfCheckDataBaseTableExist("Auxiliary_Table") Then
        gbExistAuxiliary = True
        CheckChAuxiliary.Enabled = True
        CheckChAuxiliary.Value = True
    Else
        gbExistAuxiliary = False
        CheckChAuxiliary.Enabled = False
        CheckChAuxiliary.Value = False
    End If
End Function

Private Function CheckChStatisticsExist()
    If gbExistChStatistics = True Or gfCheckDataBaseTableExist("Channel_Statistic_Table") Then
        gbExistChStatistics = True
        CheckChStatistics.Enabled = True
        CheckChStatistics.Value = True
    Else
        gbExistChStatistics = False
        CheckChStatistics.Enabled = False
        CheckChStatistics.Value = False
    End If
End Function

Private Function gDBOpen(DBFileName As String) As Boolean
    gDBOpen = False
    If gbDBIsOpen = False Then
        On Error GoTo gDBOpen_Error
        Set gDB = DBEngine.OpenDatabase(DBFileName, True, True)
            gbDBIsOpen = True
    End If
    gDBOpen = True
gDBOpen_Exit:
    On Error GoTo 0
    DoEvents
    Exit Function
gDBOpen_Error:
    Beep
    Select Case Err.Number
        Case 3050:
'        MsgBox "You should have the Change permission to the folder containing the result file " & _
            DBFileName
        mResponse = MsgBox("Are you import the result file from CD or Network drive?", vbYesNo)
        If mResponse = vbYes Then
            Set gDB = DBEngine.OpenDatabase(DBFileName, True, True)
            gbDBIsOpen = True
            gDBOpen = True
        Else
            MsgBox Err.Description & "you cann't import file " & DBFileName
            Set gDB = Nothing
            gbDBIsOpen = False
        End If
        Case 3356
        Set gDB = DBEngine.OpenDatabase(DBFileName, False, False)
            gDBOpen = True
        Case 429:
        MsgBox "Microsoft DAO 3.6 was missing by System, try install from Mits's CD! "
        Case 55:
        MsgBox Err.Description & Chr(13) & "Open DataBase " & DBFileName & " Error." & Err.Number & _
            "Probable was locked by other application, if you use network device, Map it as network drive and try again!"
            gDB.Close
            Set gDB = Nothing
            gbDBIsOpen = False
 
        Case 3343
        MsgBox Err.Description & Chr(13) & "Open DataBase " & DBFileName & " Error." & Err.Number
        Case Else
    End Select
    GoTo gDBOpen_Exit
End Function

Private Sub gDBClose()
On Error Resume Next
    If gbDBIsOpen = True Then
        gDB.Close
        Set gDB = Nothing
        gbDBIsOpen = False
    End If
End Sub

Private Sub btnChangeFileNameInput_Click()
    Dim fileToOpen As Variant
    If gbIsImporting Then Exit Sub
    On Error GoTo btnChangeFileNameInput_Error
    ChDir gDirNameInput
    On Error GoTo 0
    fileToOpen = Application.GetOpenFilename("MITS Pro/2000/97 Files (*.res), *.res", 5, "Open MITS Pro/2000/97 File")
    If fileToOpen <> False Then
        'gFileNameInput = gDirNameInput & "\ArbinSys.res"
        gDirNameInput = CurDir
        gFileNameInput = fileToOpen
        Call gfSaveMitsDataini
        Call gDBClose
        Call QueryTestName(gFileNameInput)
        
        Call SetCheckBoxValueInDataImportForm
        OptionChannel.Value = True
        'Call CheckTableDataExist
        Call SelectLastTestName
    
    End If
    Exit Sub

btnChangeFileNameInput_Error:
    gDirNameInput = ThisWorkbook.Path
    Resume
End Sub

Private Sub QueryTestName(DBFileName As String)
    Dim TestName As String, strQry As String, strLastName As String
    Dim fldTest As Field, fldTime As Field, fldSdu As Field, fldCom As Field
    Dim fldID As Field, fldCell As Field, fldItemID As Field
    Dim recTemp1 As Recordset
    Dim itmX As ListItem
    Dim i As Integer
    Dim fVerSchema As Single
    Dim tTime As Variant, tData_Type As Variant
    
    MultiPage1.Value = 1 'Force Page1 Select
    Me.MousePointer = fmMousePointerHourGlass
    Application.StatusBar = "Querying Test Name from " & DBFileName & " file."
    LabelFileNameInput.Caption = DBFileName
    LabelFileNameOutput.Enabled = True
    btnImport.Enabled = False
    If gDBOpen(gFileNameInput) Then
       
        Call ReadResultVersionTable
        fVerSchema = gbfVerSchema
        'ListViewTestName
        strQry = "SELECT [Test_Name], " _
            & " Start_DateTime, Schedule_File_Name, Comments, Test_ID"
        'If fVerSchema < 1.11 Then strQry = strQry & ", Cell_Number"
        If fVerSchema >= 1.1 Then strQry = strQry & ", Item_ID"
        strQry = strQry & " FROM Global_Table ORDER BY [Test_Name];"
        
        Set recTemp1 = gDB.OpenRecordset(strQry, dbOpenForwardOnly, dbReadOnly)
        Set fldTest = recTemp1.Fields(0)
        Set fldTime = recTemp1.Fields(1)
        Set fldSdu = recTemp1.Fields(2)
        Set fldCom = recTemp1.Fields(3)
        Set fldID = recTemp1.Fields(4)
        'Set fldCell = recTemp1.Fields(5)
        'If fVerSchema >= 1.1 Then Set fldItemID = recTemp1.Fields(6)
        If fVerSchema >= 1.1 Then Set fldItemID = recTemp1.Fields(5)
        
        tTime = 0: gLatestTestName = ""
        ListBoxTestName.Clear:        ListBoxChannelIndex.Clear
        ListViewTestName.ListItems.Clear
        On Error Resume Next
        While Not recTemp1.EOF
            TestName = Left$(fldTest, Len(fldTest) - 7)
            Set itmX = ListViewTestName.ListItems.Add(, , TestName)
            'itmX.Key = CStr(fldID) & "-" & Format$(CStr(fldCell), "000")
            itmX.Key = CStr(fldID) & "-000"
            itmX.SubItems(1) = Right$(fldTest, 5)
            If Not IsNull(fldTime) Then
                'itmX.SubItems(1) = CStr(recTemp1!Start_DateTime)
                itmX.SubItems(2) = Format$(fldTime, "yyyy/mm/dd hh:mm:ss")
                If fldTime > tTime Then
                    tTime = fldTime
                    gLatestTestName = TestName
                End If
            Else
                itmX.SubItems(2) = ""
            End If
            If Not IsNull(fldSdu) Then
                itmX.SubItems(3) = CStr(fldSdu)
            Else
                itmX.SubItems(3) = ""
            End If
            If Not IsNull(fldCom) Then
                itmX.SubItems(4) = fldCom
            Else
                itmX.SubItems(4) = ""
            End If
            itmX.SubItems(5) = ""
            If fVerSchema >= 1.1 Then
                If Not IsNull(fldItemID) Then
                    itmX.SubItems(5) = fldItemID
                End If
            End If
            
            If ListBoxTestName.ListCount = 0 Then
                ListBoxTestName.AddItem (TestName)
            Else
                If TestName <> strLastName Then ListBoxTestName.AddItem (TestName)
            End If
            strLastName = TestName
            recTemp1.MoveNext
         Wend
         
         iListViewTestNameCount = ListViewTestName.ListItems.Count
         ReDim TestNameArray(iListViewTestNameCount, 4)
         For i = 1 To iListViewTestNameCount
            TestNameArray(i, 1) = ListViewTestName.ListItems.Item(i).Text
            TestNameArray(i, 2) = ListViewTestName.ListItems.Item(i).SubItems(1)
            TestNameArray(i, 3) = ListViewTestName.ListItems.Item(i).Key
            TestNameArray(i, 4) = ""
            If fVerSchema >= 1.1 Then
                TestNameArray(i, 4) = ListViewTestName.ListItems.Item(i).SubItems(5)
            End If
         Next i
        recTemp1.Close
        Set recTemp1 = Nothing
        
        If gbfVerSchema >= 1.41 Then
            strQry = "Select Data_Type,Unit FROM Aux_Global_Data_Table group by Data_Type,Unit ORDER BY Data_Type;"
            Set recTemp1 = gDB.OpenRecordset(strQry, dbOpenForwardOnly, dbReadOnly)
            While Not recTemp1.EOF
                tData_Type = recTemp1.Fields("Data_Type").Value
                If recTemp1.Fields("Unit").Value <> "" Then
                   gAuxiDataTypeUnit(tData_Type, 0) = "(" & recTemp1.Fields("Unit").Value & ")"
                   gAuxiDataTypeUnit(tData_Type, 1) = "(d" & Trim(recTemp1.Fields("Unit").Value) & "/dt)"
                End If
                recTemp1.MoveNext
            Wend
            recTemp1.Close
            Set recTemp1 = Nothing

        End If
        ListViewTestName.Refresh
        If iListViewTestNameCount >= 1 Then ListViewTestName.ListItems.Item(1).Selected = False
        On Error GoTo 0
    End If
    Me.MousePointer = fmMousePointerDefault
    'make simple view the active view
    MultiPage1.Value = 0
    TextBoxPrompt0.Text = "Please choose a Test Name"
 '   Me.Repaint
    Application.StatusBar = "Ready"
End Sub

Private Sub ListBoxTestName_Click()
    'TextBoxPrompt0.Text = "Please choose Channel Index"
    TextBoxPrompt0.Text = "Double-click Test Name for [Import+Plot] or this line for tips."
    mTestName = ListBoxTestName.List(ListBoxTestName.ListIndex)
    gFileNameExt = mTestName & ".xls"
    If Right(gDirNameOutput, 1) = "\" Then gDirNameOutput = Left(gDirNameOutput, Len(gDirNameOutput) - 1)
    gFileNameOutput = gDirNameOutput & "\" & gFileNameExt
    LabelFileNameOutput.Caption = gFileNameOutput
    Call PutListBoxChannelIndex
'    ListBoxChannelIndex.Height = fListBoxViewHeight
        
    'Call DisplayNewFileName(mTestName)
End Sub

Private Sub DisplayNewFileName(strTestName As String)
    Dim strMultifileName As String
    If Right(gDirNameInput, 1) = "\" Then gDirNameInput = Left(gDirNameInput, Len(gDirNameInput) - 1)
    
    strMultifileName = gDirNameInput & "\" & strTestName & ".res"
    If gFileNameInput <> strMultifileName And Dir(strMultifileName) <> "" Then
        LabelFileNameInput.Visible = False
        LabelFileNameInputAutoChange.Caption = "Map ---> " & strMultifileName
        LabelFileNameInputAutoChange.Visible = True
    Else
        LabelFileNameInputAutoChange.Caption = " "
        LabelFileNameInputAutoChange.Visible = False
        LabelFileNameInput.Visible = True
    End If
End Sub

Private Sub ListBoxChannelIndex_Enter()
    TextBoxPrompt0.Text = "Hold 'Shift' or 'Ctrl' Key for Channel Index Multi-selection"
'    ListBoxChannelIndex.Height = fListBoxViewHeight
End Sub


Private Sub PutListBoxChannelIndex()
    Dim i As Integer, iSortOrder As Byte, isortindex As Byte
    Dim TestRec As Recordset
    Dim TestName As String, strQuery As String
    Dim iListCount As Integer
    Dim fldDAQ_Index As Field, fldChannel_Index As Field
    Dim fldCell_Number As Field, fldTest_ID As Field
    Dim strTempTestName As String
    Me.MousePointer = fmMousePointerHourGlass
    Application.StatusBar = "Querying Channel Info of the Selected Test Name"
    TestName = ListBoxTestName.List(ListBoxTestName.ListIndex)
        ListBoxChannelIndex.Clear
        For i = 1 To UBound(TestNameArray)
            If TestNameArray(i, 1) = TestName Then
              With ListBoxChannelIndex
                strTempTestName = TestNameArray(i, 2)
                If TestNameArray(i, 4) <> "" Then
                    strTempTestName = strTempTestName & " (" & TestNameArray(i, 4) & ")"
                End If
                .AddItem (strTempTestName)
                iListCount = .ListCount - 1
                .List(iListCount, 1) = Left(TestNameArray(i, 3), Len(TestNameArray(i, 3)) - 4)
                .List(iListCount, 2) = Right(TestNameArray(i, 3), 3)
              End With
            End If
        Next i
'            With ListBoxChannelIndex
'                 .AddItem (fldDAQ_Index.Value & "-" & fldChannel_Index.Value)
'                iListCount = .ListCount - 1
'                .List(iListCount, 1) = fldTest_ID.Value
'                .List(iListCount, 2) = fldCell_Number.Value
'            End With
'            TestRec.MoveNext
'        Wend
'        TestRec.Close
'        Set TestRec = Nothing
    Call CheckListBoxChannelListCount
'    End If
    DoEvents
    Me.MousePointer = fmMousePointerDefault
    Application.StatusBar = "Ready"
End Sub

Private Sub CheckListBoxChannelListCount()
    'AutoSelect the first one
    If ListBoxChannelIndex.ListCount > 0 Then
        Call AutoSelectChannelIndex
    '    FrameFileNameOutput.Enabled = True
        LabelFileNameOutput.Enabled = True
        btnImport.Enabled = True
    Else
        LabelFileNameOutput.Enabled = False
        btnImport.Enabled = False
    End If
End Sub

Private Sub AutoSelectChannelIndex()
    Dim j As Integer, iChanI As Integer, iChannelList As Integer
    Dim bSelected As Boolean
    bSelected = False
    iChanI = 1
    With ListBoxChannelIndex
        iChannelList = .ListCount
        Do While iChanI < 17 And gLastSelectedChannel(iChanI) <> "     "
            For j = 0 To iChannelList - 1
                If .List(j, 0) = gLastSelectedChannel(iChanI) Then
                    .Selected(j) = True
                    bSelected = True
                    If j > gbiChannelIndexOutLine Then LabelChannelIndex.Caption = "Channel Index *"
                    Exit For
                End If
            Next j
            iChanI = iChanI + 1
        Loop
        If bSelected = False And iChannelList > 0 Then .Selected(0) = True
    End With
End Sub

Private Sub btnCancel_Click()
    If gbIsImporting Then
        If MsgBox("Data will not be completely imported if you cancel the process now. Stop importing? ", _
            vbYesNo + vbQuestion + vbDefaultButton2) = vbNo Then
            Exit Sub
        Else
            gbIsImporting = False
        End If
    End If
    Call gDBClose
    'DataImportForm.Hide
    gIsImportFormLoaded = False
    Application.StatusBar = "Ready!"
'    gCommandHistory = False
'    ProcessingCommandBar
    
    Unload Me
End Sub

Private Sub btnChangeFileNameOutput_Click()
    Dim vbResponse As Integer, strTemp As String
    Dim TempFileName As Variant
    
    If gbIsImporting Then Exit Sub
    bIsOverWrite = False
    MsgBox "Please make sure output device should be writable!" & vbCrLf _
            & "Otherwise default path will go through to MITS_PRO/DATA fold!"
    On Error GoTo btnChangeFileNameOutput_Error
    ChDir gDirNameOutput
    On Error GoTo 0
    Do
       TempFileName = Application.GetSaveAsFilename(Initialfilename:=gFileNameExt, _
           fileFilter:="Excel Files (*.xls), *.xls")
       If TempFileName = False Then Exit Sub    'Pressing Cancel
       strTemp = TempFileName
       If Dir(strTemp) = "" Then Exit Do   'Brand new file
       vbResponse = MsgBox("Do you want to overwrite the existing file: " & strTemp & "? ", _
        vbYesNo + vbQuestion + vbDefaultButton2, gszALERTTITLE)
       '--Yes to overwrite, no to do loop again
       If vbResponse = vbYes Then bIsOverWrite = True
    Loop Until vbResponse = vbYes
    
    gDirNameOutput = CurDir(gDefaultWorkDrive)
    Call gfSaveMitsDataini
    gFileNameOutput = strTemp
'    gFileNameExt = Right$(gFileNameOutput, Len(gFileNameOutput) - Len(gDirNameOutput))
    gFileNameExt = gFileNameOutput
    LabelFileNameOutput.Caption = gFileNameOutput
    Exit Sub
 
btnChangeFileNameOutput_Error:
    gDirNameOutput = ThisWorkbook.Path
    Resume
End Sub


Sub ImportData(mInFile As String, mOutFile As String)
    Dim wbNew As Workbook
    Dim sTimeStart As Single, sTimefinish As Single
    'Dim bSelectFlag As Boolean
    Dim i As Integer, j As Integer
    Dim iChannelList As Integer, iChanI As Integer
    Dim iTest_ID As Integer
    Dim strDaqChannelNum As String
    Dim strQry As String
    Dim recTemp1 As Recordset
    Dim strFilter As String
    Dim bNoTestID As Boolean

    'Dim wkSheetName As String
    'Dim iCellNum As Integer
    Dim iMaxCellNum As Integer
    Dim iDecimalPlacesBak As Integer
    
    
    If gbIsImporting Then Exit Sub
    If bLockImportData Then Exit Sub
    bLockImportData = True

    If Not CheckInterfaceValueValid Then GoTo UnLockImportData_Exit
    If Not CheckFileValid Then GoTo UnLockImportData_Exit
    If mbIsPlotAfterImport Then
        Application.StatusBar = "Importing & Plotting Data..."
    Else
        Application.StatusBar = "Importing Data..."
    End If
    
    OptionChannel.Value = True

    
    'If file is locked, when using network drive, give Error Message
    On Error GoTo UserForm_SaveAs_Error
    Set wbNew = Workbooks.Add
    gFileNameOutput = mOutFile
    gDirNameOutput = fGetDataDir(mOutFile)
    If gDirNameOutput = "" Then
        gDirNameOutput = CurDir
        gFileNameOutput = CurDir & gFileNameOutput
    End If
    wbNew.SaveAs filename:=gFileNameOutput
    On Error GoTo 0
'    DoEvents
    Application.ScreenUpdating = False
    Application.DisplayAlerts = True
    btnCancel.Enabled = True
    gLastTestName = mTestName
    mbIsMultifile = False
    mMultifileName = mInFile
    If gFileNameInput <> mMultifileName Then
         Call gDBClose
         If Not gDBOpen(mMultifileName) Then GoTo UnLockImportData_Exit
            gDirNameInput = fGetDataDir(mInFile)
            gFileNameInput = mInFile
            Call gfSaveMitsDataini
            Call gDBClose
            Call QueryTestName(gFileNameInput)
        
            Call SetCheckBoxValueInDataImportForm
            OptionChannel.Value = True
            'Call CheckTableDataExist
            Call SelectLastTestName

            LabelFileNameInput.Caption = mMultifileName
            mbIsMultifile = True
            DoEvents
         End If
    'End If

    
    Call MakeInfoSheetHead
    
TryImportAgain:
    
    For i = 1 To 16
        gLastSelectedChannel(i) = ""
    Next i
    
    gptImportChannelCount = 0
    gbIsImporting = True
    bExitAsked = False
    iChanI = 1
    iMaxCellNum = 0
    
    '--Read selected files (Channel numbers and TestID in the ListBoxChannelIndex)
    If Me.MultiPage1.Value = 0 Then
        iChannelList = ListBoxChannelIndex.ListCount
        For i = 0 To iChannelList - 1
          If ListBoxChannelIndex.Selected(i) = True Then
            strDaqChannelNum = Left(ListBoxChannelIndex.List(i, 0), 5)  '8/15/2001 18 chars, 1/23/2002 change to 5
            If iChanI < 17 Then
                gLastSelectedChannel(iChanI) = strDaqChannelNum
                iChanI = iChanI + 1
            End If
            bNoTestID = False
            If mbIsMultifile = True Then
                strFilter = "[Test_Name] = '" & mTestName & "-0" & strDaqChannelNum & "'"
                strQry = "SELECT [Test_ID] FROM Global_Table Where " & strFilter
                Set recTemp1 = gDB.OpenRecordset(strQry, dbOpenForwardOnly, dbReadOnly)
                If recTemp1.EOF Then
                    bNoTestID = True
                Else
                    iTest_ID = recTemp1.Fields(0)
                End If
            Else
                iTest_ID = Int(ListBoxChannelIndex.List(i, 1))
            End If
            If bNoTestID = False Then
                iMaxCellNum = ListBoxChannelIndex.List(i, 2)
                'gptImportChannelCount = gptImportChannelCount + 1
                If Not ReadArbinSysDataBase(strDaqChannelNum, iTest_ID, iMaxCellNum) Then GoTo ImportData_Cancel
            End If
          End If   '      If ListBoxChannelIndex.Selected(i) = True Then
        Next i
    Else
       For i = 1 To iListViewTestNameCount
          If ListViewTestName.ListItems.Item(i).Selected = True Then
            strDaqChannelNum = Left(ListViewTestName.ListItems.Item(i).SubItems(1), 5) '8/15/2001 18 chars, 1/23/2002 change to 5
            If iChanI < 17 Then
                gLastSelectedChannel(iChanI) = strDaqChannelNum
                iChanI = iChanI + 1
            End If
            bNoTestID = False
            If mbIsMultifile = True Then
                strFilter = "[Test_Name] = '" & mTestName & "-0" & strDaqChannelNum & "'"
                strQry = "SELECT [Test_ID] FROM Global_Table Where " & strFilter
                Set recTemp1 = gDB.OpenRecordset(strQry, dbOpenForwardOnly, dbReadOnly)
                If recTemp1.EOF Then
                    bNoTestID = True
                Else
                    iTest_ID = recTemp1.Fields(0)
                End If
            Else
                iTest_ID = Left(ListViewTestName.ListItems.Item(i).Key, _
                            Len(ListViewTestName.ListItems.Item(i).Key) - 4)
            End If
            If bNoTestID = False Then
                iMaxCellNum = Right(ListViewTestName.ListItems.Item(i).Key, 3)
                'gptImportChannelCount = gptImportChannelCount + 1
                If Not ReadArbinSysDataBase(strDaqChannelNum, iTest_ID, iMaxCellNum) Then GoTo ImportData_Cancel
            End If
          End If   '      ListViewTestName.ListItems.item(i).Selected = True
       Next i
    End If

    Application.DisplayAlerts = False
    Call gfDeleteDefaultSheet123(ActiveWorkbook)
    
    If ActiveWorkbook.Worksheets.Count <= 1 And mbIsMultifile = True Then
        Call gDBClose
        If Not gDBOpen(gFileNameInput) Then GoTo UnLockImportData_Exit
        LabelFileNameInput.Caption = gFileNameInput
        mbIsMultifile = False
        DoEvents
        If HasSheetOf(gbInfoSheetName) Then
            Sheets(gbInfoSheetName).Name = gbInfoSheetName & "1"
        End If
        Call MakeInfoSheetHead
        If HasSheetOf(gbInfoSheetName) And HasSheetOf(gbInfoSheetName & "1") Then
            Sheets(gbInfoSheetName & "1").Delete
        End If
        GoTo TryImportAgain
    End If
    
     'Call FormatDecimalPlacesTime
'    gbbHasHighPulseData = False
    Call ReverseI                   'Reverse Sign of Current
    Call ReverseV                   'Reverse sign of Voltage
    Call AddDayHourMinuteColumns    'Add minute, hour and day columns
    Call AddmAAndmVColumns          'Add mA and mV as unit columns
    Call AddPowerLoadColumns        'Add Power and Load columns
    Call AddIDColumns               'Add Current density columns
    Call AddPDColumns               'Add PowerDensity Columns
    Call AddCoulmColumns
    Call AddGroupCalcute            'Add Fuel Cell group calcute
    Call AddSmartBatteryStat        'Add Smartbattery Statistic Data
    Call FormatwkBookCellsColor
    If gbbHasHighPulseData = True Then
        iDecimalPlacesBak = giDecimalPlaces(1)
        If giDecimalPlaces(1) < gbiTimeForHighPulseData And giDecimalPlaces(1) <> -1 Then
            giDecimalPlaces(1) = gbiTimeForHighPulseData  'TestTime
            giDecimalPlaces(2) = giDecimalPlaces(1)  'StepTime
        End If
    End If
    If gbbHasHighPulseData = True Then
        giDecimalPlaces(1) = iDecimalPlacesBak
        giDecimalPlaces(2) = giDecimalPlaces(1)
    End If
    Call FormatDecimalPlaces

gbExistDataSheetAfterImport = gfSelectChannelSheet(ActiveWorkbook, mPreSheetName)
    If gbExistDataSheetAfterImport = False Then
        If mPreSheetName = gbSmartBatteryName Then
            mPreSheetName = gbChannelName
            gbExistDataSheetAfterImport = gfSelectChannelSheet(ActiveWorkbook, mPreSheetName)
        End If
    End If
    'For PPG Begin
    If gbPPGOn Then
        Call PPGMain
    End If
    'For PPG End
    Application.DisplayAlerts = True
    
    sTimefinish = Timer
   
    If ActiveWorkbook.Worksheets.Count > 1 Then
        Application.StatusBar = "Save Data to " & gFileNameOutput & " file."
        ActiveWorkbook.Save
        ActiveWorkbook.Close
        Application.StatusBar = "Imported from " & LabelFileNameInput.Caption
        '& " " & _
        '    Format((sTimefinish - sTimeStart), "0.00") & "   " & InfoStr '/ 60
    gCommandHistory = True
    Else
        gbNeedRefreshImportDialog = True
        Call GiveSuggestMsg
    End If
    
ImportData_Exit:
    Call InterfaceMiscEnd
    Call gDBClose
    gbIsImporting = False
    Application.StatusBar = "Ready!"
    Application.ScreenUpdating = True
    On Error GoTo 0
    'DataImportForm.Hide
    gIsImportFormLoaded = False
UnLockImportData_Exit:
    bLockImportData = False
    Unload Me
    'Debug.Print "Process time last:"; sTimefinish - sTimeStart; "s"
    Exit Sub
    
ImportData_Cancel:
    MsgBox "Data Importing Canceled!"
'    gCommandHistory = False
    GoTo ImportData_Exit

UserForm_SaveAs_Error:
    If Err.Number = 1004 Then
        MsgBox gFileNameOutput & " cann't save to read-only " _
            & "media device (like CD-ROM, read-only network drive )" _
            & "or the file has been locked by others. " _
            & "You should change the Output File Name. " _
            & "This problem may be caused by network drive. " _
            & "You'd better not to use network drive."
        Workbooks(wbNew.Name).Close SaveChanges:=False
    End If
    gCommandHistory = False
    Resume ImportData_Exit

End Sub

Private Sub GiveSuggestMsg()
    Dim strMsg As String, strMsg1 As String
    Dim strMsg2 As String, strMsg3 As String
    
        strMsg = gFileNameInput
        If mbIsMultifile = True Then strMsg = mMultifileName
        strMsg1 = "Can not find the data you selected in " & _
            Chr$(13) & strMsg & " database."
        
'        If mbIsMultifile = True Then
'            strMsg1 = strMsg1 & Chr$(13) & Chr$(13) & _
'            "If you are NOT using MITS MULTIPLE RESULTS file to log data, please RENAME " & _
'            mMultifileName & " file, then try to import data again from " & _
'            Chr$(13) & gFileNameInput & " file."
'        End If
        
        strMsg2 = ""
        If OptionChannel.Value = True Then
            If OptionAll.Value <> True Or CheckChNormal.Value <> True Then
                strMsg2 = "1"
            End If
            If CheckChAuxiliary.Enabled = True And CheckChAuxiliary.Value <> True Then
                strMsg2 = "1"
            End If
            If CheckChStatistics.Enabled = True And CheckChStatistics.Value <> True Then
                strMsg2 = "1"
            End If
            If gbExistSmartBattery = True And CheckChSmartBattery.Value <> True Then
                strMsg2 = "1"
            End If
        ElseIf OptionCell.Value = True Then
            If CheckCellAll.Value <> True Or CheckCellAuxiliary.Value <> True Then
                strMsg2 = "1"
            End If
        End If
        If strMsg2 = "1" Then
            strMsg2 = Chr$(13) & _
            Chr$(13) & "Please try to " & _
            Chr$(13) & "1. Click [Advanced>>] button in [Import Data] Window" & _
            Chr$(13) & "2. Set options to All in [Apply Filter to Normal Channel Data] Frame" & _
            Chr$(13) & "3. Check all check boxes in [Import Data Options] Frame"
        End If
        
'        If LCase(Right(gFileNameInput, 12)) = "arbinsys.res" Then
'            If Dir(gDirNameInput & "\" & mTestName & ".res") <> "" Then
'                strMsg3 = Chr$(13) & _
'                Chr$(13) & "It seems you are using the MULTIPLE RESULTS file type in MITS'2000." & _
'                Chr$(13) & "Try to import " & _
'                Chr$(13) & gDirNameInput & "\" & mTestName & ".res database."
'                strMsg = strMsg1 & strMsg3
'            Else
'                'strMsg3 = Chr$(13) & _
'                Chr$(13) & "You may try to import " & _
'                Chr$(13) & gDirNameInput & "\" & mTestName & ".res " & _
'                Chr$(13) & "by clicking [Change...] button in [File to be Imported] Frame" & _
'                Chr$(13) & "if you are using the multiple results file type in MITS'2000."
'                If strMsg2 = "" Then
'                    strMsg = strMsg1
'                    'strMsg = strMsg1 & strMsg3
'                Else
'                    strMsg = strMsg1 & strMsg2
'                End If
'            End If
'        Else
'            strMsg = strMsg1 & strMsg2
'        End If
        strMsg = strMsg1 & strMsg2
        gbiMsgBoxResponse = MsgBox(strMsg, vbInformation)
        Application.StatusBar = "Ready"
End Sub

Function CheckInterfaceValueValid() As Boolean
    Dim vbResponse As Integer
    CheckInterfaceValueValid = False
    'If OptionChannel.Value = True Then
        If CheckChNormal.Value = False And CheckChAuxiliary.Value = False And _
            CheckChStatistics.Value = False And CheckChSmartBattery.Value = False Then
            MsgBox "At least one box in Import Data Options should be checked!"
            CheckChNormal.SetFocus
            Exit Function
        End If
'    ElseIf OptionCell.Value = True Then
'        If CheckCellAll.Value = False And CheckCellAuxiliary.Value = False Then
'            MsgBox "At least one box in Import Data Options should be checked!"
'            CheckCellAll.SetFocus
'            Exit Function
'        End If
'    Else
'        Exit Function
'    End If
    
       
'    If gfListBoxSelectedAtLeastOne(ListBoxChannelIndex) = False Then
'        MsgBox ("Please select channels to import!")
'        Exit Function
'    End If
    
    '--check to see if this is a overwitten file
    If bIsOverWrite = False Then    'When False, Check overwrite.
        If gbbOverwriteFiles = False Then
            On Error GoTo CheckInterfaceValueValid_Error
            If Dir(gFileNameOutput) <> "" Then
                vbResponse = MsgBox("Do you want to overwrite the existing file: " & _
                    gFileNameOutput & "? " & _
                    vbCr & "Click Yes, overwrite it." & _
                    vbCr & "Click No, change the Output File Name before importing." & _
                    vbCr & "Click Cancel, overwrite files without reminding next time.", _
                    vbYesNoCancel + vbQuestion + vbDefaultButton1, gszALERTTITLE)
                If vbResponse = vbNo Then GoTo CheckInterfaceValueValid_Exit
                If vbResponse = vbCancel Then
                    vbResponse = MsgBox("Overwrite files without reminding next time." & _
                    vbCr & "To remind again, uncheck [Overwrite files without reminding" & _
                    " after clicking Import button] in Arbin Data\Options...\Options1 menu." _
                    , vbOKOnly + vbInformation)
                    gbbOverwriteFiles = True
                    Call gfSaveMitsDataini
                End If
            End If
        End If
    End If
    
    CheckInterfaceValueValid = True
    
CheckInterfaceValueValid_Exit:
    On Error GoTo 0
    Exit Function

CheckInterfaceValueValid_Error:
    vbResponse = MsgBox("Invalid output file path " & gDirNameOutput & ". You should change that path.", _
                    vbCritical, gszALERTTITLE)
    GoTo CheckInterfaceValueValid_Exit
End Function

Function CheckFileValid() As Boolean
    Dim wbTemp As Workbook
    CheckFileValid = False
    If Not gDBOpen(gFileNameInput) Then Exit Function
   
    'For PPG Begin
    If gbPPGOn Then
        PPGForm.Show
        If giPPGOptionValue = -1 Then Exit Function
    End If
    'For PPG End
    
    '--Close the existing workbook
    Application.DisplayAlerts = False
    For Each wbTemp In Workbooks
        If UCase(wbTemp.FullName) = UCase(gFileNameOutput) Then
            wbTemp.Close SaveChanges:=False
            Exit For
        End If
    Next wbTemp
    CheckFileValid = True
End Function

Sub InterfaceMiscBegin()
    Me.Caption = "Importing data from " & LabelFileNameInput.Caption
    Me.MousePointer = fmMousePointerHourGlass
    ListBoxTestName.Enabled = False
    btnImport.Enabled = False
    Call TextBoxPromptSet1
    Application.ScreenUpdating = False
    DoEvents
End Sub

Private Sub TextBoxPromptSet1()
    TextBoxPrompt0.ForeColor = &H8000000E
    TextBoxPrompt0.BackColor = &H80000001
    TextBoxPrompt0.TextAlign = fmTextAlignCenter
    If mbIsPlotAfterImport = True Then
        TextBoxPrompt0.Text = "Importing & Plotting data now. Please wait..."
    Else
        TextBoxPrompt0.Text = "Importing data now. Please wait..."
    End If
    
    TextBoxPrompt1.ForeColor = &H8000000E
    TextBoxPrompt1.BackColor = &H80000001
    TextBoxPrompt1.TextAlign = fmTextAlignCenter
    TextBoxPrompt1.Text = TextBoxPrompt0.Text
End Sub

Private Sub TextBoxPromptSet2()
    TextBoxPrompt0.ForeColor = &H8000000D
    TextBoxPrompt0.BackColor = &H80000000
    TextBoxPrompt0.TextAlign = fmTextAlignLeft
    TextBoxPrompt0.Text = " " '"Mits DataPro"
    TextBoxPrompt1.ForeColor = &H8000000D
    TextBoxPrompt1.BackColor = &H80000005
    TextBoxPrompt1.TextAlign = fmTextAlignLeft
    TextBoxPrompt1.Text = " " '"Mits DataPro"
End Sub

Function ReadArbinSysDataBase(strDaqChannelNum As String, _
    iTest_ID As Integer, iMaxCellNum As Integer) As Boolean
    Dim wkSheetName As String
    Dim swkName As String
    
    ReadArbinSysDataBase = False
    Sleep gSleepTime
    DoEvents
    If gbIsImporting = False Then Exit Function
    
    'Get Infomation from Global_Table
If Not ReadGlobalTableInfo(iTest_ID) Then
        gbNeedRefreshImportDialog = True
        If bExitAsked = False Then
            gbiMsgBoxResponse = MsgBox("The Test Name in MITS database has been changed. " & _
            vbCr & "The Data Import Dialog will be refreshed automatically when you click " & _
           vbCr & "[Arbin Data/Import MITS Results Data...] menu next time. " & _
            vbCr & "Exit importing?", _
            vbYesNo + vbQuestion + vbDefaultButton1, gszALERTTITLE)
            If gbiMsgBoxResponse = vbYes Then
                Exit Function
            Else
                bExitAsked = True
            End If
        End If
    End If
    If gbIsImporting = False Then Exit Function
    mPreSheetName = gbChannelName
    'Read Channel
    If (OptionChannel.Value = True And CheckChNormal.Value = True) Then   'Or _
        '(OptionCell.Value = True And CheckCellAuxiliary.Value = True) Then
        'Application.StatusBar = "Read Channel Data, Channel " & strDaqChannelNum
        Call ReadChannelFile(iTest_ID, strDaqChannelNum)
    End If
    If gbIsImporting = False Then Exit Function
    
    'Read Channel Auxiliary
    If (OptionChannel.Value = True And CheckChAuxiliary.Value = True) Then 'Or _
        '(OptionCell.Value = True And CheckCellAuxiliary.Value = True) Then
        If tGlobal_Table1.Log_Data_Flag(3) = True Then  'Log_Aux_Data_Flag
            'Application.StatusBar = "Read Auxiliary Data, Channel " & strDaqChannelNum
            wkSheetName = gbChannelName & "_" & strDaqChannelNum
            Call ReadAuxiliaryFile(iTest_ID, strDaqChannelNum, -1, wkSheetName)
        End If
    End If
    If gbIsImporting = False Then Exit Function

    'Read Channel Statistic
    If OptionChannel.Value = True And CheckChStatistics.Value = True Then
        If tGlobal_Table1.Log_Data_Flag(0) = True Then  'Log_ChanStat_Data_Flag
            'Application.StatusBar = "Read Channel Statistical Data, Channel " & strDaqChannelNum
            Call ReadChannelStatisticFile(iTest_ID, strDaqChannelNum)
            swkName = gbStatisticName & "s_" & strDaqChannelNum
            If HasSheetOf(swkName) Then
                Call gfCellGradingFilling(swkName)
 'Add filter for here
 '           Call FilterSameCycle(swkName) 'disable
                
            End If
        End If
    End If
    If gbIsImporting = False Then Exit Function
    

    'Read SmartBattery
    If OptionChannel.Value = True And CheckChSmartBattery.Value = True Then
        If tGlobal_Table1.Log_Data_Flag(4) = True Then
            mPreSheetName = gbSmartBatteryName
            Call ReadSmartBatteryInfo(iTest_ID)
            Call ReadSmartBatteryFile(iTest_ID, strDaqChannelNum)
            If gbfVerSchema >= 1.44 And DataImportForm.CheckBoxSMStretch Then
                Call ReadSmartBatteryClockStrechFile(iTest_ID, strDaqChannelNum)
            End If
                
        End If
    End If
    gbInfoSheetNowRow = gbInfoSheetNowRow + 1

    'The following is for multicell data, to be improved later Sandra
    If iMaxCellNum > 0 Then '--if this channel has cells
      If OptionCell.Value = True And CheckCellAll.Value = True Then
        'Read Cell Normal Data
        mPreSheetName = gbMultiCellChannelName
        If tGlobal_Table1.Log_Data_Flag(1) = True Then  'Log_CellNormal_Data_Flag
            Call ReadCellFile(iTest_ID, strDaqChannelNum, iMaxCellNum)
        End If
        'Read Cell Statistical Data
        If tGlobal_Table1.Log_Data_Flag(2) = True Then  'Log_CellStat_Data_Flag
            Call ReadCellStatisticFile(iTest_ID, strDaqChannelNum, iMaxCellNum)
        End If
      End If
      If gbIsImporting = False Then Exit Function
    
    End If   'If iMaxCellNum > 0 Then
    
    If gbfVerSchema >= 1.3 Then   'Add Cell_ACI sheet
        Call ReadChannelMcellFile(iTest_ID, strDaqChannelNum)
        If gbIsImporting = False Then Exit Function
    End If
    
    ReadArbinSysDataBase = True
End Function

Sub InterfaceMiscEnd()
    Me.Caption = "Import Data"
    Me.MousePointer = fmMousePointerDefault
    btnCancel.MousePointer = fmMousePointerArrow
    ListBoxTestName.Enabled = True
    btnImport.Enabled = True
    Call TextBoxPromptSet2
    Application.ScreenUpdating = True
    If OptionChannel.Value = True Then
        gbCheckChNormal = CheckChNormal.Value
        gbCheckChAuxiliary = CheckChAuxiliary.Value
        gbCheckChStatistics = CheckChStatistics.Value
        gbCheckChSmartBattery = CheckChSmartBattery.Value
    End If
    If OptionCell.Value = True Then
        gbCheckCellAll = CheckCellAll.Value
        gbCheckCellAuxiliary = CheckCellAuxiliary.Value
    End If
End Sub

Function MakeInfoSheetHead()
    Dim i As Integer, j As Integer
    If Not HasSheetOf(gbInfoSheetName) Then
        Call MadeNewSheet(ActiveWorkbook, gbInfoSheetName)
        On Error Resume Next
        With Worksheets(gbInfoSheetName)
            If gbbIsPrinterExist = True Then
                '.PageSetup.LeftFooter = "&D &T"
                .PageSetup.Orientation = xlLandscape
                .PageSetup.BlackAndWhite = False
            End If
            '.Cells.ColumnWidth = 12.78
            .Columns("A:E").HorizontalAlignment = xlLeft
            .Columns("A").ColumnWidth = 7#
            .Columns("B").ColumnWidth = 15#
            .Columns("C:D").ColumnWidth = 18#
            .Columns("E").ColumnWidth = 19.33  '29#  '58#
            i = 1: j = 4
            .cells(i, j) = "TEST REPORT"
            .cells(i, j).HorizontalAlignment = xlCenter
            .cells(i, j).Font.Name = "Times New Roman"
            .cells(i, j).Font.Size = 14
            .cells(i, j).Font.Underline = xlUnderlineStyleSingle
            .cells(2, j).HorizontalAlignment = xlCenter
            .cells(2, 12) = LabelFileNameInput.Caption
            .cells(3, 4) = Date
            .cells(3, 4).HorizontalAlignment = xlCenter 'xlRight
            i = 4: .cells(i, 1) = "Channel"
            .cells(i, 2) = "Start_DateTime"
            .cells(i, 3) = "Schedule_File_Name"
            .cells(i, 4) = "Creator"
            .cells(i, 5) = "Comments"
            
            With .Rows("4:4")
                .WrapText = True
                .Interior.ColorIndex = 35
                .Borders(xlEdgeLeft).LineStyle = xlContinuous
                .Borders(xlEdgeTop).LineStyle = xlContinuous
                .Borders(xlEdgeBottom).LineStyle = xlContinuous
                .Borders(xlEdgeRight).LineStyle = xlContinuous
                .Borders(xlInsideVertical).LineStyle = xlContinuous
            End With
            
            .Columns("F:G").ColumnWidth = 9.22   'F:G
            Range("F4:F4").HorizontalAlignment = xlRight
            .cells(i, 6) = "Chan_Num"
            '.Cells(I, 7) = "Cell_Num"
            
            j = 8    '8
            .Columns("H:L").ColumnWidth = 4.67     'H:L
            Range("H3:L3").Interior.ColorIndex = 34
            Range("H4:L4").HorizontalAlignment = xlRight
            .cells(i - 1, j) = "         Mapped_Aux_Number"
            .cells(i, j) = "Volt"
            .cells(i, j + 1) = "Temp"
            .cells(i, j + 2) = "Pres"
            .cells(i, j + 3) = "PH"
            .cells(i, j + 4) = "FR"
            
            j = 13   '13
            .Columns("M:R").ColumnWidth = 8.11    'M:R
            Range("M3:R3").Interior.ColorIndex = 33
            Range("M4:R4").HorizontalAlignment = xlCenter
            '.Cells(I - 1, J) = "                                   Log_Data_Flag                         "
            .cells(i - 1, j) = "                    Log_Data_Flag                "
            .cells(i, j) = "ChanStat"
            '.Cells(I, J + 1) = "CellNorm"
            '.Cells(I, J + 2) = "CellStat"
            .cells(i, j + 1) = "Aux"
            .cells(i, j + 2) = "SmartBty"
            .cells(i, j + 3) = "Event"
            
            gbiCellGrading = j + 4
            Range("Q3:S3").Interior.ColorIndex = 40
            'Range("Q4:S4").HorizontalAlignment = xlCenter
            .cells(i - 1, gbiCellGrading) = "                   Cell Grading          "
            .cells(i - 1, gbiCellGrading).AddComment
            .cells(i - 1, gbiCellGrading).Comment.Visible = False
            .cells(i - 1, gbiCellGrading).Comment.Text Text:= _
            "For Cell Grading setting, click Arbin Data\Options... menu."
            .cells(i, gbiCellGrading) = "Grade"
            .cells(i, gbiCellGrading + 1) = gbsCellGrading1Name
            .cells(i, gbiCellGrading + 2) = gbsCellGrading2Name
            .cells(i, gbiCellGrading).AddComment
            .cells(i, gbiCellGrading).Comment.Visible = False
            .cells(i, gbiCellGrading).Comment.Text Text:= _
            "For Cell Grading data, check average value from statistical data sheets." & _
                " Grade A1 is the best cell."
                
            .Range("B5").Select
            'add Item_ID column
            j = 7 'Q
            .cells(i, j) = " Item_ID"
            .cells(i, j).HorizontalAlignment = xlCenter
            j = 20 'T
            .Range("T3").Interior.ColorIndex = 48
            .Columns("T").ColumnWidth = 11    'T
            .cells(i - 1, j) = "Concentration"
            .cells(i, j) = "Concentration"
            .cells(i, j).HorizontalAlignment = xlCenter
            
            j = 21 'U
            Range("U3:V3").Interior.ColorIndex = 38
            .Columns("U:V").ColumnWidth = 5.7     'U:V
            .cells(i - 1, j) = "   Digital I/O"
            .cells(i, j).HorizontalAlignment = xlCenter
            .cells(i, j) = "Digital Input"
            .cells(i, j + 1) = "Digital Output"
            
            ActiveWindow.FreezePanes = True
            
            
        End With
        gbInfoSheetNowRow = 5
        On Error GoTo 0
    End If

End Function

Function ReadResultVersionTable()
    Dim strQuery As String, TestRec As Recordset, i As Integer
    gbsVerSchema = ""
    gbfVerSchema = 0#
    strQuery = "SELECT * FROM Version_Table;"
    On Error GoTo ReadResultVersionTableError
    Set TestRec = gDB.OpenRecordset(strQuery, dbOpenForwardOnly, dbReadOnly)
    gbsVerSchema = TestRec.Fields(1).Value
    gbfVerSchema = Val(Right$(gbsVerSchema, 5))
    TestRec.Close
    Set TestRec = Nothing
ReadResultVersionTableError:
    On Error GoTo 0
    DoEvents
End Function

Function ReadGlobalTableInfo(TestID As Integer) As Boolean
    Dim strQuery As String, TestRec As Recordset
    Dim i As Integer, j As Integer
    ReadGlobalTableInfo = False
    strQuery = "SELECT * FROM Global_Table Where ( [Test_ID] = " & TestID & ");"
    Set TestRec = gDB.OpenRecordset(strQuery, dbOpenForwardOnly, dbReadOnly)
    If TestRec.RecordCount <= 0 Then Exit Function
    On Error Resume Next
    With tGlobal_Table1
        .Test_ID = TestRec.Fields("Test_ID").Value
        .Test_Name = TestRec.Fields("Test_Name").Value
        .Channel_Index = TestRec.Fields("Channel_Index").Value
        .Start_DateTime = TestRec.Fields("Start_DateTime").Value
        .DAQ_Index = TestRec.Fields("DAQ_Index").Value
        .Channel_Type = TestRec.Fields("Channel_Type").Value
        .Creator = TestRec.Fields("Creator").Value
        .Comments = TestRec.Fields("Comments").Value
        .Schedule_File_Name = TestRec.Fields("Schedule_File_Name").Value
        .Channel_Number = TestRec.Fields("Channel_Number").Value
        '.Cell_Number = TestRec.Fields("Cell_Number").Value
        .Mapped_Aux_Number(0) = TestRec.Fields("Mapped_Aux_Voltage_Number").Value
        .Mapped_Aux_Number(1) = TestRec.Fields("Mapped_Aux_Temperature_Number").Value
        .Mapped_Aux_Number(2) = TestRec.Fields("Mapped_Aux_Pressure_Number").Value
        .Mapped_Aux_Number(3) = TestRec.Fields("Mapped_Aux_PH_Number").Value
        .Mapped_Aux_Number(4) = TestRec.Fields("Mapped_Aux_Flow_Rate_CNumber").Value
        If gbfVerSchema >= 1.14 Then
            .Mapped_Aux_Number(5) = TestRec.Fields("Mapped_Aux_Conc_CNumber").Value
            .Mapped_Aux_Number(6) = TestRec.Fields("Mapped_Aux_DI_CNumber").Value
            .Mapped_Aux_Number(7) = TestRec.Fields("Mapped_Aux_DO_CNumber").Value
        End If
        If gbfVerSchema >= 5.142 Then
            .Mapped_Aux_Number(8) = TestRec.Fields("Mapped_Aux_Relative_Humidity_CNumber").Value
        End If

        .Applications_Path = TestRec.Fields("Applications_Path").Value
        .Log_Data_Flag(0) = TestRec.Fields("Log_ChanStat_Data_Flag").Value
        '.Log_Data_Flag(1) = TestRec.Fields("Log_CellNormal_Data_Flag").Value
        '.Log_Data_Flag(2) = TestRec.Fields("Log_CellStat_Data_Flag").Value
        .Log_Data_Flag(3) = TestRec.Fields("Log_Aux_Data_Flag").Value
        .Log_Data_Flag(4) = TestRec.Fields("Log_Smart_Battery_Data_Flag").Value
        .Log_Data_Flag(5) = TestRec.Fields("Log_Event_Data_Flag").Value
        
        If gbfVerSchema >= 1.1 Then
            .Item_ID = TestRec.Fields("Item_ID").Value
        End If
        
    End With
    TestRec.Close
    Set TestRec = Nothing
    
   Rem Query Mapped_Anx_Concentration_CNumber,Mapped_Aux_Digital_Input_CNumber,Mapped_Aux_Digital_Output_CNumber
'    strQuery = "SELECT * FROM Auxiliary_Table Where ( [Test_ID] = " & TestID & ");"
'    Set TestRec = gDB.OpenRecordset(strQuery, dbOpenForwardOnly, dbReadOnly)
'    If TestRec.RecordCount <= 0 Then Exit Function
'    On Error Resume Next
    
'    TestRec.Close
'    Set TestRec = Nothing
    
    With Worksheets(gbInfoSheetName)
        i = gbInfoSheetNowRow
        .cells(2, 4) = Left$(tGlobal_Table1.Test_Name, Len(tGlobal_Table1.Test_Name) - 7)
        .cells(i, 1).NumberFormat = "@"
        .cells(i, 1) = tGlobal_Table1.DAQ_Index & "-" & Format$(tGlobal_Table1.Channel_Index, "000")
        .cells(i, 2) = tGlobal_Table1.Start_DateTime
        .cells(i, 2).NumberFormat = "mm/dd/yy hh:mm:ss"
        .cells(i, 3) = tGlobal_Table1.Schedule_File_Name
        .cells(i, 4) = tGlobal_Table1.Creator
        .cells(i, 5) = tGlobal_Table1.Comments
        
        .cells(i, 6) = tGlobal_Table1.Channel_Number
        '.Cells(I, 7) = tGlobal_Table1.Cell_Number
        
        j = 8   '8
        .cells(i, j) = tGlobal_Table1.Mapped_Aux_Number(0)
        .cells(i, j + 1) = tGlobal_Table1.Mapped_Aux_Number(1)
        .cells(i, j + 2) = tGlobal_Table1.Mapped_Aux_Number(2)
        .cells(i, j + 3) = tGlobal_Table1.Mapped_Aux_Number(3)
        .cells(i, j + 4) = tGlobal_Table1.Mapped_Aux_Number(4)
        
        If gbfVerSchema >= 1.14 Then
            j = 20
            .cells(i, j) = tGlobal_Table1.Mapped_Aux_Number(5)
        
            j = 21
            .cells(i, j) = tGlobal_Table1.Mapped_Aux_Number(6)
            .cells(i, j + 1) = tGlobal_Table1.Mapped_Aux_Number(7)
        End If
    
        j = 13  '13
        .cells(i, j) = tGlobal_Table1.Log_Data_Flag(0)
        '.Cells(I, J + 1) = tGlobal_Table1.Log_Data_Flag(1)
        '.Cells(I, J + 2) = tGlobal_Table1.Log_Data_Flag(2)
        .cells(i, j + 1) = tGlobal_Table1.Log_Data_Flag(3)
        .cells(i, j + 2) = tGlobal_Table1.Log_Data_Flag(4)
        .cells(i, j + 3) = tGlobal_Table1.Log_Data_Flag(5)
        
        j = 7 'Q
        .cells(i, j) = tGlobal_Table1.Item_ID
        .cells(i, j).HorizontalAlignment = xlLeft

    End With
    
    On Error GoTo 0
    DoEvents
    ReadGlobalTableInfo = True
End Function

Function ReadChannelFile(TestID As Integer, ChannelNum As String) As Boolean
    Dim Query As String, tempRec As Recordset, SQLQry As String
    Dim lCount As Long, rCount, pCount As Long
    Query = "SELECT " & GetSQLTopPercent(tOptionEdit1)
    Query = Query & _
        " Data_Point," & _
        " Test_Time as [" & gbTestTimeName & "]," & _
        " DateTime as [" & gbDateTimeName & "]," & _
        " Step_Time as [" & gbStepTimeName & "]," & _
        " Step_Index," & _
        " Cycle_Index," & _
        " Current as [" & gbCurrentName & "]," & _
        " Voltage as [" & gbVoltageName & "]," & _
        " Charge_Capacity as [" & gbChargeCapacityName & "]," & _
        " Discharge_Capacity as [" & gbDischargeCapacityName & "]," & _
        " Charge_Energy as [" & gbChargeEnergyName & "]," & _
        " Discharge_Energy as [" & gbDischargeEnergyName & "]," & _
        " [dV/dt] as [" & gbDVdtName & "]"
    If gbfVerSchema >= 1.05 Then
        Query = Query & ", Internal_Resistance as [" & gbInternalResistanceName & "]"
        Query = Query & ", Is_FC_Data" 'If gbbHighlightPulseRow Then
    End If
    'End If
    If gbfVerSchema >= 1.12 Then
        Query = Query & ", AC_Impedance as [" & gbACImpedanceName & "]"
    End If
    If gbfVerSchema = 1.13 Then
        Query = Query & ", ACI_Phase as [" & gbACPhaseName & "]"
    End If
    If gbfVerSchema >= 1.14 Then
        Query = Query & ", ACI_Phase_Angle as [" & gbACPhaseName & "]"
    End If
    
    'Query = Query & ", DateTime"
'Query point number of data from data base for each channel, if more then gCount*x
    Query = Query & " FROM Channel_Normal_Table Where ( Test_ID =" & TestID
    ' PreQuery for point counts
'    SQLQry = "Select Count(Data_Point) as rCount FROM Channel_Normal_Table Where ( Test_ID =" & TestID & GetSQLConditionPart("", tOptionEdit1) & ");"
'    Set tempRec = gDB.OpenRecordset(SQLQry, dbOpenForwardOnly, dbReadOnly)
'    lCount = tempRec.Fields("rCount").Value
'    tempRec.Close
'    Set tempRec = Nothing
'    If tOptionEdit1.OptionID = 6 Then
'            pCount = lCount * tOptionEdit1.NumEdit1 / 100
'            lCount = lCount - pCount
'            Query = Query & " AND (" & gbDataPointName & ">" & lCount & ")"
'            lCount = pCount
'    End If
    Query = Query & GetSQLConditionPart("", tOptionEdit1, TestID)

'    If lCount > gCount And mbIsPlotAfterImport = True And OptionsForm.CheckBoxPlotWarning Then
'        MsgBox ("Data Point more than " & gCount & ". The Auto-ploting is disabled? " & vbCr _
'            & "You may need to use 'Advance>>' to plot the data piece by piece to reduce the waiting time.")
'            mbIsPlotAfterImport = False
'    End If
    If gbfVerSchema >= 1.11 Then
        Query = Query & " ) ORDER BY Data_Point;"
    Else
        Query = Query & " ) ORDER BY Test_Time;"
    End If
    ReadChannelFile = ReadRecordToSheetLoop(gbChannelName & "_" & ChannelNum, Query, 1)
End Function

Function ReadChannelStatisticFile(TestID As Integer, ChannelNum As String) As Boolean
    Dim Query As String, tempRec As Recordset, SQLQry As String
    Dim lCount As Long, rCount As Long, pCount As Long
    Query = "SELECT " & GetSQLTopPercent(tOptionEdit1)  ' Channel_Normal_Table.Test_ID, Channel_Normal_Table.Data_Point,"
    Query = Query & _
        " nn.Cycle_Index," & _
        " nn.Test_Time as [" & gbTestTimeName & "]," & _
        " nn.DateTime as [" & gbDateTimeName & "]," & _
        " nn.Current as [" & gbCurrentName & "]," & _
        " nn.Voltage as [" & gbVoltageName & "]," & _
        " nn.Charge_Capacity as [" & gbChargeCapacityName & "]," & _
        " nn.Discharge_Capacity as [" & gbDischargeCapacityName & "]," & _
        " nn.Charge_Energy as [" & gbChargeEnergyName & "]," & _
        " nn.Discharge_Energy as [" & gbDischargeEnergyName & "]"
    If gbfVerSchema >= 1.05 Then
        Query = Query & ", nn.Internal_Resistance as [" & gbInternalResistanceName & "]"
    End If
    If gbfVerSchema >= 1.12 Then '02-12-2001
        Query = Query & ", nn.AC_Impedance as [" & gbACImpedanceName & "]"
    End If
    If gbfVerSchema = 1.13 Then
        Query = Query & ", nn.ACI_Phase as [" & gbACPhaseName & "]"
    End If
    If gbfVerSchema >= 1.14 Then
        Query = Query & ", ACI_Phase_Angle as [" & gbACPhaseName & "]"
    End If
    If gbfVerSchema >= 1.44 Then
        Query = Query & ", Charge_Time as [Charge_Time(s)], DisCharge_Time as [DisCharge_Time(s)] "
    End If
   

    Query = Query & ", ss.Vmax_On_Cycle as [" & gbVmaxOnCycleName & "]"
    Query = Query & " FROM Channel_Normal_Table AS nn INNER JOIN Channel_Statistic_Table AS ss"
    Query = Query & " ON (nn.Data_Point = ss.Data_Point) AND (nn.Test_ID = ss.Test_ID)"
    Query = Query & " WHERE (nn.Test_ID = " & TestID & ")"
    Query = Query & GetSQLConditionPart("nn.", tOptionEdit1, TestID)

' Added for all option active
'    SQLQry = "Select Count(nn.Cycle_Index) as rCount FROM Channel_Normal_Table AS nn INNER JOIN Channel_Statistic_Table AS ss  ON (nn.Data_Point = ss.Data_Point) AND (nn.Test_ID = ss.Test_ID) WHERE (nn.Test_ID = " & TestID & ")"
'    Set tempRec = gDB.OpenRecordset(SQLQry, dbOpenForwardOnly, dbReadOnly)
'    lCount = tempRec.Fields("rCount").Value
'    tempRec.Close
'    Set tempRec = Nothing
'    If tOptionEdit1.OptionID = 6 Then
'            pCount = lCount * tOptionEdit1.NumEdit1 / 100
'            lCount = lCount - pCount
'            Query = Query & " AND (" & gbDataPointName & ">" & lCount & ")"
'            lCount = pCount
'    End If
''    Query = Query & GetSQLConditionPart("nn.", tOptionEdit1, TestID)
'    If lCount > gCount And mbIsPlotAfterImport = True And OptionsForm.CheckBoxPlotWarning Then
'        If (MsgBox("Data Point more than " & gCount & ". Do you want to disable ploting after Import? " & vbCr _
'            & "Otherwise, you can click 'Advance>>' button to select proper section for view!", vbYesNo) = vbYes) Then
'            mbIsPlotAfterImport = False
'        End If
'    End If
    Query = Query & " ORDER BY nn.Test_Time;"
    ReadChannelStatisticFile = ReadRecordToSheetLoop(gbStatisticName & "s_" & ChannelNum, Query, 1)
End Function

Function ReadAuxiliaryFile(TestID As Integer, ChannelNum As String, CellIndex As Integer, SheetName As String) As Boolean
    Dim iColumnCount As Integer, iNum As Integer, iDataType As Integer, iStartA As Integer
    Dim wksheet As Excel.Worksheet, strTemp As String
    Dim AuxiIndexNum As Integer, MaxCellNum As Integer
    Dim strQry As String, iStartCol As Integer
    Dim rec As Recordset, iCell As Integer
    
    ReadAuxiliaryFile = False
    iColumnCount = ActiveSheet.Range("A1").End(xlToRight).Column                'after normal data sheet
    '--Read auxiliary for channel or cell:
    If AVSheet.Value Then
        iStartA = 1
        strTemp = SheetName & "(AV)"
        If Not HasSheetOf(SheetName & "(AV)") Then
        '    Call MadeNewSheet(ActiveWorkbook, strTemp)
            Worksheets(SheetName).Copy after:=Worksheets(SheetName)
            ActiveSheet.Name = strTemp
        End If
        iNum = tGlobal_Table1.Mapped_Aux_Number(iDataType)
        If iNum > 0 Then
            For AuxiIndexNum = 0 To iNum - 1
                If iColumnCount >= giMaxColumnsNum - 1 - Abs(gAuxRate) Then
                    MsgBox "2nd Voltage number too much to handle by Excel," & vbCr _
                    & "Please disable dX/dt on Options page or the exceeding part will be truncated!", vbOKOnly
                    Exit For
                End If
                Application.StatusBar = "Read 2nd Voltage Data, Channel " & ChannelNum & _
                    ", " & Trim(gAuxiDataTypeTitle(iDataType, 0)) & "_" & AuxiIndexNum + 1
                If ReadAuxiliaryRecord(TestID, ChannelNum, CellIndex, _
                    AuxiIndexNum, iDataType, iColumnCount, strTemp) = True Then
                        If gAuxRate Then
                            iColumnCount = iColumnCount + 2
                            Else
                            iColumnCount = iColumnCount + 1
                        End If
                End If
            Next AuxiIndexNum
        End If
        Else
        iStartA = 0
    End If
    iColumnCount = ActiveSheet.Range("A1").End(xlToRight).Column                'after normal data sheet

    For iDataType = iStartA To 8
        'Data_type:  0->2nd V; 1->T; 2->P; 3->Ph; 4->Flow Rate; 5->Concentration; 6->Digital Input; 7->Digital Output; 8->Related Humidity
        'If iColumnCount = 0 Then iColumnCount = 1
        iNum = tGlobal_Table1.Mapped_Aux_Number(iDataType)
        If iNum > 0 Then
            For AuxiIndexNum = 0 To iNum - 1
                If iColumnCount >= giMaxColumnsNum - 1 - Abs(gAuxRate) Then Exit Function
                Application.StatusBar = "Read Auxiliary Data, Channel " & ChannelNum & _
                    ", " & Trim(gAuxiDataTypeTitle(iDataType, 0)) & "_" & AuxiIndexNum + 1
                If ReadAuxiliaryRecord(TestID, ChannelNum, CellIndex, _
                    AuxiIndexNum, iDataType, iColumnCount, SheetName) = True Then
                        If gAuxRate Then
                            iColumnCount = iColumnCount + 2
                            Else
                            iColumnCount = iColumnCount + 1
                        End If
                End If
            Next AuxiIndexNum
        End If
    Next iDataType
    iColumnCount = iColumnCount + 1
    If gToyota And gbfVerSchema >= 1.3 Then 'Add fuel cell ACI data here
        strQry = "SELECT Max([Cell_Index]) AS MaxCellNum FROM MCell_Aci_Data_Table Where Test_ID=" & TestID & ";"
        Set rec = gDB.OpenRecordset(strQry, dbOpenForwardOnly, dbReadOnly)
        On Error GoTo Err_Exit
        If rec.EOF Then GoTo Err_Exit
            MaxCellNum = rec.Fields("MaxCellNum").Value
        Set rec = Nothing
        For iCell = 0 To MaxCellNum
            strQry = "Select ACI_" & iCell + 1 & " from (SELECT Channel_Normal_Table.Data_Point, IIf(IsNull([ACI]),0,[ACI]) AS ACI_" & iCell + 1 & ",IIf(IsNull([Cell_Index])," & iCell & ",[Cell_Index]) as CellIndex FROM Channel_Normal_Table LEFT JOIN MCell_Aci_Data_Table ON Channel_Normal_Table.Data_Point =MCell_Aci_Data_Table.Data_Point ) "
            strQry = strQry & " WHERE CellIndex =" & iCell & " Order by Data_Point;"
            If ReadRecordToSheetLoop(SheetName, strQry, iColumnCount) Then
                iColumnCount = iColumnCount + 1
            End If
        Next iCell
    End If
Err_Exit: If Err.Number <> 0 Then
MsgBox "Data_Pro Error:" & Err.Number & vbCrLf & Err.Description
End If
End Function

Function ReadAuxiliaryRecord(TestID As Integer, ChannelNum As String, CellIndex As Integer, _
    AuxiIndexNum As Integer, iDataType As Integer, iColumnCount As Integer, SheetName As String) As Boolean
    Dim Query As String, Query2 As String
    Dim AuxQry As String
    Dim AuxQryRec As Recordset
    Dim ColumnName As String
    Dim iChannelNo As Integer
    Dim iLoopRead As Integer
    ReadAuxiliaryRecord = False
    
    iChannelNo = Val(Right$(ChannelNum, 3))
    If gbfVerSchema >= 1.4 And gAuxRate Then gAuxRate = False: MsgBox "No Auxiliary Rate was provided by further Versoin And Rate Enable was Disable", vbOKOnly

    '--Define a query
    AuxQry = "SELECT "
    If gAuxRate Then
        AuxQry = AuxQry & "Auxiliary_Table.Data_Point,Auxiliary_Table.X,Auxiliary_Table.[dX/dt]"
        Else
        AuxQry = AuxQry & "Auxiliary_Table.Data_Point,Auxiliary_Table.X"
    End If
    If gbfVerSchema >= 1.21 Then
        If gbfVerSchema >= 1.4 Then
             AuxQry = AuxQry & ",Aux_Global_Data_Table.Nickname,Channel_Index "
        Else
        AuxQry = AuxQry & ",Auxiliary_Table.Nickname"
        End If
    End If
    
    AuxQry = AuxQry & " FROM Auxiliary_Table"

    If gbfVerSchema >= 1.4 Then
        AuxQry = AuxQry & " Inner Join  Aux_Global_Data_Table ON (Aux_Global_Data_Table.Auxiliary_Index = Auxiliary_Table.Auxiliary_Index) AND (Aux_Global_Data_Table.Data_Type = Auxiliary_Table.Data_Type) "
    End If
        AuxQry = AuxQry & " WHERE ((Auxiliary_Table.Test_ID=" & TestID
        AuxQry = AuxQry & ") AND (Auxiliary_Table.Auxiliary_Index=" & AuxiIndexNum
    '   AuxQry = AuxQry & ") AND (Cell_Index = " & CellIndex
        AuxQry = AuxQry & ") AND (Auxiliary_Table.Data_Type=" & iDataType & ") and (Channel_Index=" & iChannelNo - 1 & "))"
    Query = "SELECT"
    If gbfVerSchema >= 1.21 Then
        If gAuxRate Then
            Query = Query & " cc.Data_Point,aa.X,aa.[dX/dt],aa.Nickname FROM Channel_Normal_Table AS cc LEFT JOIN (" & AuxQry & ") AS aa"
            Else
            Query = Query & " cc.Data_Point,aa.X,aa.Nickname FROM Channel_Normal_Table AS cc LEFT JOIN (" & AuxQry & ") AS aa"
        End If
        Else
        If gAuxRate Then
            Query = Query & " cc.Data_Point,aa.X,aa.[dX/dt] FROM Channel_Normal_Table AS cc LEFT JOIN (" & AuxQry & ") AS aa"
            Else
            Query = Query & " cc.Data_Point,aa.X FROM Channel_Normal_Table AS cc LEFT JOIN (" & AuxQry & ") AS aa"
        End If
    End If
    Query = Query & " ON cc.Data_Point=aa.Data_Point where cc.Test_ID=" & TestID & " "
    Query = Query & GetSQLConditionPart("cc.", tOptionEdit1, TestID) & " ORDER BY cc.Data_Point;"
'    On Error Resume Next
'    Set AuxQryDef2 = gDB.CreateQueryDef("AuxQry")
'    On Error GoTo 0
'    gDB.QueryDefs("AuxQry").Sql = Query
    
'    Query2 = "SELECT " & GetSQLTopPercent(tOptionEdit1)
'    Query2 = Query2 & " AuxQry.X, AuxQry.[dX/dt]"
'    Query2 = Query2 & " FROM AuxQry RIGHT JOIN Channel_Normal_Table AS cc"
'    Query2 = Query2 & " ON (AuxQry.Data_Point = cc.Data_Point)"
'    Query2 = Query2 & " AND (AuxQry.Test_ID = cc.Test_ID)"
'    Query2 = Query2 & " WHERE ((cc.Test_ID = " & TestID & ") "
'    Query2 = Query2 & GetSQLConditionPart("cc.", tOptionEdit1)
'    Query2 = Query2 & " ) ORDER BY cc.Data_Point;"

'    If CellIndex = -1 Then
'      ColumnName = ""  ' Channel's Auxi.
'    Else
'      ColumnName = "Cell_" & CellIndex & "_"  ' Cell's Auxi.
'    End If
        
    For iLoopRead = 1 To 20
'        ReadAuxiliaryRecord = ReadAuxRecordToSheet(SheetName, Query2, iColumnCount + 1, AuxiIndexNum, iDataType, iLoopRead)
        ReadAuxiliaryRecord = ReadAuxRecordToSheet(SheetName, Query, iColumnCount + 1, AuxiIndexNum, iDataType, iLoopRead)
        If ReadAuxiliaryRecord = True Then Exit Function
        If gbIsImporting = False Then Exit Function
        DoEvents
        Sleep gSleepTime '12-03-2001 speed up
    Next iLoopRead

End Function

Function ReadSmartBatteryInfo(TestID As Integer)
    Dim strQuery As String, TestRec As Recordset, i As Integer
    Dim j As Integer, iColumn As Integer
    iColumn = gbiCellGrading + 6
    strQuery = "SELECT * FROM Smart_Battery_Info_Table Where ( [Test_ID] = " & TestID & ");"
    On Error GoTo ReadSmartBatteryInfo_Error
    Set TestRec = gDB.OpenRecordset(strQuery, dbOpenForwardOnly, dbReadOnly)
    On Error Resume Next
    With Worksheets(gbInfoSheetName)
        j = gbInfoSheetNowRow
        If j = 5 Then
            'SmartBattery Title
            .Range("W3:AI3").Interior.ColorIndex = 24
            .cells(j - 2, iColumn) = "Smart Battery ====>      "
            j = j - 1
            .Columns("S:AE").ColumnWidth = 11.11
            .cells(j, iColumn) = "Manufacturer Access"
            .cells(j, iColumn + 1) = "Manufacturer Name"
            .cells(j, iColumn + 2) = "Manufacturer Date"
            .cells(j, iColumn + 3) = "Manufacturer Data"
            .cells(j, iColumn + 4) = "Design Capacity(Ah or 10Wh)"
            .cells(j, iColumn + 5) = "Design Voltage(V)"
            .cells(j, iColumn + 6) = "Specification Info"
            .cells(j, iColumn + 7) = "Serial Number"
            .cells(j, iColumn + 8) = "Device Name"
            .cells(j, iColumn + 9) = "Device Chemistry"
            .cells(j, iColumn + 10) = "FullCharge Capacity(Ah or 10Wh)"
            .cells(j, iColumn + 11) = "Charging Current(A)"
            .cells(j, iColumn + 12) = "Charging Voltage(V)"
            '.Cells(J - 1, iColumn + 10) = Date
'            .Cells(j, iColumn + 13) = "Flash60"
'            .Cells(j, iColumn + 14) = "Flash61"
'            .Cells(j, iColumn + 15) = "Flash62"
'            .Cells(j, iColumn + 16) = "Flash63"
'            .Cells(j, iColumn + 17) = "Flash64"
'            .Cells(j, iColumn + 18) = "Flash65"
'            .Cells(j, iColumn + 19) = "Flash66"
'            .Cells(j, iColumn + 20) = "Flash67"
'            .Cells(j, iColumn + 21) = "Flash68"
'            .Cells(j, iColumn + 22) = "Flash69"
'            .Cells(j, iColumn + 23) = "Flash6A"
'            .Cells(j, iColumn + 24) = "Flash6B"
'            .Cells(j, iColumn + 25) = "Flash6C"
'            .Cells(j, iColumn + 26) = "Flash6D"
'            .Cells(j, iColumn + 27) = "Flash6E"
'            .Cells(j, iColumn + 28) = "Flash6F"
'            .Cells(j, iColumn + 29) = "Flash70"
            j = j + 1
        End If
            .cells(j, iColumn) = TestRec.Fields("ManufacturerAccess").Value
            .cells(j, iColumn + 1) = TestRec.Fields("ManufacturerName")
            .cells(j, iColumn + 2) = TestRec.Fields("ManufacturerDate")
            .cells(j, iColumn + 2).NumberFormat = "mm/dd/yy"
            .cells(j, iColumn + 3) = TestRec.Fields("ManufacturerData")
            .cells(j, iColumn + 4) = TestRec.Fields("DesignCapacity")
            .cells(j, iColumn + 5) = TestRec.Fields("DesignVoltage")
            .cells(j, iColumn + 6) = TestRec.Fields("SpecificationInfo")
            .cells(j, iColumn + 7) = TestRec.Fields("SerialNumber")
            .cells(j, iColumn + 8) = TestRec.Fields("DeviceName")
            .cells(j, iColumn + 9) = TestRec.Fields("DeviceChemistry")
            .cells(j, iColumn + 10) = TestRec.Fields("FullChargeCapacity")
            .cells(j, iColumn + 11) = TestRec.Fields("ChargingCurrent")
            .cells(j, iColumn + 12) = TestRec.Fields("ChargingVoltage")
'            .Cells(j, iColumn + 13) = TestRec.Fields("Flash60")
'            .Cells(j, iColumn + 14) = TestRec.Fields("Flash61")
'            .Cells(j, iColumn + 15) = TestRec.Fields("Flash62")
'            .Cells(j, iColumn + 16) = TestRec.Fields("Flash63")
'            .Cells(j, iColumn + 17) = TestRec.Fields("Flash64")
'            .Cells(j, iColumn + 18) = TestRec.Fields("Flash65")
'            .Cells(j, iColumn + 19) = TestRec.Fields("Flash66")
'            .Cells(j, iColumn + 20) = TestRec.Fields("Flash67")
'            .Cells(j, iColumn + 21) = TestRec.Fields("Flash68")
'            .Cells(j, iColumn + 22) = TestRec.Fields("Flash69")
'            .Cells(j, iColumn + 23) = TestRec.Fields("Flash6A")
'            .Cells(j, iColumn + 24) = TestRec.Fields("Flash6B")
'            .Cells(j, iColumn + 25) = TestRec.Fields("Flash6C")
'            .Cells(j, iColumn + 26) = TestRec.Fields("Flash6D")
'            .Cells(j, iColumn + 27) = TestRec.Fields("Flash6E")
'            .Cells(j, iColumn + 28) = TestRec.Fields("Flash6F")
'            .Cells(j, iColumn + 29) = TestRec.Fields("Flash70")
    End With
    TestRec.Close
    Set TestRec = Nothing

ReadSmartBatteryInfo_Error:
    On Error GoTo 0
End Function

Function ReadSmartBatteryFile(TestID As Integer, ChannelNum As String) As Boolean
    Dim Query As String
    Query = "SELECT " & GetSQLTopPercent(tOptionEdit1)
    Query = Query & _
        " sb.Data_Point," & _
        " cc.Test_Time as [" & gbTestTimeName & "]," & _
        " cc.Step_Time as [" & gbStepTimeName & "]," & _
        " sb.Current as [" & gbCurrentName & "]," & _
        " sb.Voltage as [" & gbVoltageName & "]," & _
        " sb.Temperature as [" & gbTemperatureName & "]," & _
        " sb.AverageCurrent as [AverageCurrent(A)]," & _
        " sb.CycleCount," & _
        " sb.RemainingCapacityAlarm as [RemainingCapacityAlarm(mWH or 10mWH)], " & _
        " sb.RemainingTimeAlarm as [RemainingTimeAlarm(s)]," & _
        " '0x' & hex(sb.BatteryMode) as BatteryMode,sb.AtRate as [AtRate(A or 10W)]," & _
        " sb.AtRateTimeToFull as [AtRateTimeToFull(s)]," & _
        " sb.AtRateTimeToEmpty as [AtRateTimeToEmpty(s)]," & _
        " sb.AtRateOK,sb.MaxError," & _
        " sb.RelativeStateOfCharge as [RelativeStateOfCharge(%)]," & _
        " sb.AbsoluteStateOfCharge as [AbsoluteStateOfCharge(%)]," & _
        " sb.RemainingCapacity as [RemainingCapacity(mWH or 10mWH)]," & _
        " sb.RunTimeToEmpty as [RunTimeToEmpty(s)]," & _
        " sb.AverageTimeToEmpty as [AverageTimeToEmpty(s)]," & _
        " sb.AverageTimeToFull as [AverageTimeToFull(s)]," & _
        " ('0x' & Hex([sb.BatteryStatus])) as [BatteryStatus]," & _
        " ('0x' & hex([sb.Pack_Status])) as Pack_Status,hex(sb.Pack_Configuration) as Pack_Configuration,sb.VCELL4,sb.VCELL3,sb.VCELL2,sb.VCELL1"
        If gbfVerSchema = 1.43 Then
            Query = Query & _
            ",sb.Flash60,sb.Flash61,sb.Flash62,sb.Flash63,sb.Flash64,sb.Flash65,sb.Flash66,sb.Flash67,sb.Flash67,sb.Flash68," & _
            " sb.Flash69,sb.Flash6A,sb.Flash6B,sb.Flash6C,sb.Flash6D,sb.Flash6E,sb.Flash6F,sb.Flash70 "
        End If
        If gbfVerSchema >= 1.44 Then Query = Query & ",sb.ManufacturerAccess,sb.FullChargeCapacity "
            Query = Query & ",sb.BroadCast,sb.GPIO1,sb.GPIO2 "

    'BatteryMode, BatteryStatus
    Query = Query & " FROM Channel_Normal_Table AS cc"
    Query = Query & " INNER JOIN Smart_Battery_Data_Table AS sb"
    Query = Query & " ON (cc.Data_Point = sb.Data_Point) AND (cc.Test_ID = sb.Test_ID)"
    Query = Query & " Where ( sb.Test_ID =" & TestID
    Query = Query & ")" & GetSQLConditionPart("sb.", tOptionEdit1, TestID) & " ORDER BY sb.Data_Point;"

    
    'SELECT Smart_Battery_Data_Table.*, Channel_Normal_Table.Test_Time, Channel_Normal_Table.Step_Time
    'FROM Channel_Normal_Table INNER JOIN Smart_Battery_Data_Table ON (Channel_Normal_Table.Data_Point = Smart_Battery_Data_Table.Data_Point) AND (Channel_Normal_Table.Test_ID = Smart_Battery_Data_Table.Test_ID)
    'ORDER BY Smart_Battery_Data_Table.Data_Point;
    ReadSmartBatteryFile = ReadRecordToSheetLoop(gbSmartBatteryName & "_" & ChannelNum, Query, 1)
End Function

Function ReadSmartBatteryClockStrechFile(TestID As Integer, ChannelNum As String) As Boolean
    Dim Query As String
    Query = "SELECT " & GetSQLTopPercent(tOptionEdit1)
    Query = Query & _
        " sc.Data_Point,sc.ManufacturerAccess,sc.RemainingCapacityAlarm," & _
        " sc.RemainingTimeAlarm,sc.BatteryMode,sc.AtRate,sc.AtRateTimeToFull," & _
        " sc.AtRateTimeToEmpty,sc.AtRateOK,sc.Temperature,sc.Voltage," & _
        " sc.Current,sc.AverageCurrent,sc.MaxError,sc.RelativeStateOfCharge," & _
        " sc.AbsoluteStateOfCharge,sc.RemainingCapacity,sc.FullChargeCapacity," & _
        " sc.RunTimeToEmpty,sc.AverageTimeToEmpty,sc.AverageTimeToFull," & _
        " sc.ChargingCurrent,sc.ChargingVoltage,sc.BatteryStatus," & _
        " sc.CycleCount,sc.DesignCapacity,sc.DesignVoltage," & _
        " sc.SpecificationInfo,sc.ManufacturerDate,sc.SerialNumber," & _
        " sc.ManufacturerName,sc.DeviceName,sc.DeviceChemistry,sc.ManufacturerData," & _
        " sc.Pack_Status,sc.Pack_Configuration,sc.VCELL4,sc.VCELL3,sc.VCELL2,sc.VCELL1"
    Query = Query & " FROM Smart_Battery_Clock_Stretch_Table as sc "
    Query = Query & " Where ( sc.Test_ID =" & TestID
    Query = Query & " )" & GetSQLConditionPart("sc.", tOptionEdit1, TestID) & " ORDER BY sc.Data_Point;"

    
    'SELECT Smart_Battery_Data_Table.*, Channel_Normal_Table.Test_Time, Channel_Normal_Table.Step_Time
    'FROM Channel_Normal_Table INNER JOIN Smart_Battery_Data_Table ON (Channel_Normal_Table.Data_Point = Smart_Battery_Data_Table.Data_Point) AND (Channel_Normal_Table.Test_ID = Smart_Battery_Data_Table.Test_ID)
    'ORDER BY Smart_Battery_Data_Table.Data_Point;
    ReadSmartBatteryClockStrechFile = ReadRecordToSheetLoop("Clock_Stretch" & "_" & ChannelNum, Query, 1)
End Function
Function ReadCellFile(TestID As Integer, ChannelNum As String, iMaxCellNum As Integer) As Boolean
    Dim Query As String, i As Integer
    For i = 1 To iMaxCellNum    '--this channel's total cell number
        Query = "SELECT"
        'If I = 1 Then Query = Query & " nn.Data_Point, nn.Test_Time, nn.Step_Index, nn.Cycle_Index, cc.Data_Point , cc.Cycle_Index,"
        If i = 1 Then
            Query = Query & " nn.Data_Point, nn.Test_Time, nn.DateTime, nn.Step_Time,"
            Query = Query & " nn.Step_Index, nn.Cycle_Index, nn.Current,"
        End If
        Query = Query & " cc.Voltage,"
        Query = Query & " cc.Charge_Capacity, cc.Discharge_Capacity,"
        Query = Query & " cc.Charge_Energy, cc.Discharge_Energy, "
        Query = Query & " cc.Vpeak, cc.Vvalley"
        If gbfVerSchema >= 1.09 Then Query = Query & ", cc.Internal_Resistance"
        Query = Query & " FROM Channel_Normal_Table AS nn INNER JOIN Cell_Normal_Table AS cc"
        Query = Query & " ON (nn.Data_Point = cc.Data_Point) AND (nn.Test_ID = cc.Test_ID)"
        Query = Query & " WHERE (((cc.Test_ID) =" & TestID & ") AND ((cc.Cell_Index) =" & i - 1 & "))"
        Query = Query & " ORDER BY nn.Test_Time, nn.Cycle_Index;"
        Application.StatusBar = "Read Cell Normal Data, Channel " & ChannelNum & ", Cell = " & i '& ", MaxCell = " & iMaxCellNum
        ReadCellFile = ReadCellToSheetLoop(gbMultiCellChannelName & "_" & ChannelNum, Query, i, iMaxCellNum, 6)
    Next i
End Function

Function ReadCellStatisticFile(TestID As Integer, ChannelNum As String, iMaxCellNum As Integer) As Boolean
    Dim Query As String, i As Integer
    For i = 1 To iMaxCellNum    '--this channel's total cell number
        Query = "SELECT"
        If i = 1 Then
            Query = Query & " nn.Cycle_Index, nn.Test_Time, nn.Current, nn.Voltage,"
        End If
        Query = Query & " cc.Charge_Capacity, cc.Discharge_Capacity,"
        Query = Query & " cc.Charge_Energy, cc.Discharge_Energy,"
        Query = Query & " ss.Vmax_On_Cycle"
        Query = Query & " FROM Channel_Normal_Table as nn"
        Query = Query & " INNER JOIN (Cell_Normal_Table as cc"
        Query = Query & " INNER JOIN Cell_Statistic_Table as ss"
        Query = Query & " ON (cc.Cell_Index = ss.Cell_Index) AND (cc.Data_Point = ss.Data_Point)"
        Query = Query & " AND (cc.Test_ID = ss.Test_ID))"
        Query = Query & " ON (nn.Data_Point = cc.Data_Point) AND (nn.Test_ID = cc.Test_ID)"
        Query = Query & " WHERE (((cc.Test_ID) =" & TestID & ") AND ((cc.Cell_Index) =" & i - 1 & "))"
        Query = Query & " ORDER BY nn.Test_Time, nn.Cycle_Index;"
        Application.StatusBar = "Read Cell Statistical Data, Channel " & ChannelNum & ", Cell = " & i '& ", MaxCell = " & iMaxCellNum
        ReadCellStatisticFile = ReadCellToSheetLoop(gbMultiCellStatisticName & "_" & ChannelNum, Query, i, iMaxCellNum, 3)
    Next i
End Function

Function ReadCellToSheetLoop(SheetName As String, strQuery As String, CellNum As Integer, iMaxCellNum As Integer, ChannelColNum As Integer) As Boolean
    Dim iLoopRead As Integer
    For iLoopRead = 1 To 20
        ReadCellToSheetLoop = ReadCellToSheet(SheetName, strQuery, CellNum, iMaxCellNum, ChannelColNum, iLoopRead)
        If ReadCellToSheetLoop = True Then Exit Function
        If gbIsImporting = False Then Exit Function
        DoEvents
        Sleep gSleepTime
    Next iLoopRead
End Function

Function ReadCellToSheet(SheetName As String, strQuery As String, _
    CellNum As Integer, iMaxCellNum As Integer, ChannelColNum As Integer, _
    iLoopRead As Integer) As Boolean
    Dim wksheet As Excel.Worksheet
    Dim recTemp As Recordset
    Dim SheetNameFull As String, strTemp As String
    Dim iPageCount As Integer, iFieldsCount As Integer
    Dim iCols As Integer
    Dim iStartCol As Integer
    
    ReadCellToSheet = False
    iPageCount = 0
    On Error GoTo ReadCellToSheet_Error
    Set recTemp = gDB.OpenRecordset(strQuery, dbOpenForwardOnly, dbReadOnly)
    On Error Resume Next
    Do While Not recTemp.EOF
        Sleep gSleepTime
        DoEvents
        If gbIsImporting = False Then Exit Function
      
        iPageCount = iPageCount + 1
        If iPageCount >= 2 Then
            If iPageCount = 2 And iStartCol = 1 Then ActiveSheet.Name = SheetName & "_" & 1
            SheetNameFull = SheetName & "_" & iPageCount
        Else
            SheetNameFull = SheetName
        End If
        'Make a new sheet
        If Not HasSheetOf(SheetNameFull) Then
            Call MadeNewSheet(ActiveWorkbook, SheetNameFull)
        End If
        Set wksheet = Worksheets(SheetNameFull)
        
        '--The first line of active sheet is titles
        iFieldsCount = recTemp.Fields.Count
        With wksheet
            If CellNum = 1 Then
                .cells.ColumnWidth = 11.22
                .Rows("1:1").WrapText = True
                '.Rows("1:1").RowHeight = 21.6
                iStartCol = 1
                For iCols = 0 To iFieldsCount - 1
                    strTemp = "": If iCols > ChannelColNum Then strTemp = "Cell" & CellNum & "_"
                    .cells(1, iCols + iStartCol).Value = strTemp & recTemp.Fields(iCols).Name
                Next iCols
            ElseIf CellNum > 1 Then
                iStartCol = .Range("A1").End(xlToRight).Column + 1
                For iCols = 0 To iFieldsCount - 1
                    strTemp = "Cell" & CellNum & "_"
                    .cells(1, iCols + iStartCol).Value = strTemp & recTemp.Fields(iCols).Name
                Next iCols
            End If
            If CellNum >= 1 Then
                .cells(2, iStartCol).CopyFromRecordset Data:=recTemp, maxrows:=glMaxRowsNum, maxcolumns:=iFieldsCount
            End If
            If CellNum = iMaxCellNum Then
                Call FormatSheetColumnsNumber(wksheet)
                Call CreateSheetSomeColumns(wksheet, iPageCount)
                'Call FormatSheet1stRow(wkSheet)
                .Range("B2").Select
                ActiveWindow.FreezePanes = True
            End If
            ReadCellToSheet = True
        End With
    Loop
    recTemp.Close
    Set recTemp = Nothing
    
    If ReadCellToSheet = False Then
        If gbbLogReadNullCount Then
            Call WriteErrorLogFile("(ReadCellToS) Null", SheetName, CSng(CellNum))
        End If
        ReadCellToSheet = True
    End If
ReadCellToSheet_Exit:
    On Error GoTo 0
    Exit Function

ReadCellToSheet_Error:
    If gbbLogTryCount Then
        Call WriteErrorLogFile("(ReadCellToS) Try " & iLoopRead, SheetName, CSng(CellNum))
    End If
    GoTo ReadCellToSheet_Exit
    
    'set sheet's column's width:
    'ColumnCount = ActiveSheet.Range("A1").End(xlToRight).Column
    'For I = 3 To ColumnCount
    '  Columns(I).ColumnWidth = 18
    '  'Worksheets(CellSheetName).range("A1").End(xlToRight).ColumnWidth = 20
    'Next I
    '--close record and database

End Function
Function ReadChannelMcellFile(TestID As Integer, ChannelNum As String) As Boolean
    Dim Query As String, tempRec As Recordset, SQLQry As String
    Dim lCount As Long, rCount As Long, pCount As Long
    Query = "SELECT " ' Channel_Normal_Table.Test_ID, Channel_Normal_Table.Data_Point,"
    Query = Query & _
        " nn.Data_Point," & _
        " nn.Test_Time as [" & gbTestTimeName & "]," & _
        " nn.Step_Index," & _
        " nn.Cycle_Index"

    Query = Query & ", ss.Cell_Index+1 as [Cell_Index],ss.ACI,ss.Phase_Shift "
    Query = Query & " FROM Channel_Normal_Table AS nn INNER JOIN MCell_Aci_Data_Table AS ss"
    Query = Query & " ON (nn.Data_Point = ss.Data_Point) AND (nn.Test_ID = ss.Test_ID)"
    Query = Query & " WHERE (nn.Test_ID = " & TestID & ")"

'    Query = Query & ", ss.Cell_Index+1 as [Cell_Index],ss.ACI,ss.Phase_Shift,ss.Voltage,ss.Current "
'    Query = Query & " FROM Channel_Normal_Table AS nn INNER JOIN MCell_Aci_Data_Table AS ss"
'    Query = Query & " ON (nn.Data_Point = ss.Data_Point) AND (nn.Test_ID = ss.Test_ID)"
'    Query = Query & " WHERE (nn.Test_ID = " & TestID & ")"
' Added for all option active
'    SQLQry = "Select Count(nn.Cycle_Index) as rCount FROM Channel_Normal_Table AS nn INNER JOIN Channel_Statistic_Table AS ss  ON (nn.Data_Point = ss.Data_Point) AND (nn.Test_ID = ss.Test_ID) WHERE (nn.Test_ID = " & TestID & ")"
'    Set tempRec = gDB.OpenRecordset(SQLQry, dbOpenForwardOnly, dbReadOnly)
'    lCount = tempRec.Fields("rCount").Value
'    tempRec.Close
'    Set tempRec = Nothing
'    If tOptionEdit1.OptionID = 6 Then
'            pCount = lCount * tOptionEdit1.NumEdit1 / 100
'            lCount = lCount - pCount
'            Query = Query & " AND (" & gbDataPointName & ">" & lCount & ")"
'            lCount = pCount
'    End If
    Query = Query & GetSQLConditionPart("nn.", tOptionEdit1, TestID)
'    If lCount > gCount And mbIsPlotAfterImport = True And OptionsForm.CheckBoxPlotWarning Then
'        If (MsgBox("Data Point more than " & gCount & ". Do you want to disable ploting after Import? " & vbCr _
'            & "Otherwise, you can click 'Advance>>' button to select proper section for view!", vbYesNo) = vbYes) Then
'            mbIsPlotAfterImport = False
'        End If
'    End If
    Query = Query & " ORDER BY nn.Test_Time,[Cell_Index];"
    ReadChannelMcellFile = ReadRecordToSheetLoop("Cell_ACI_" & ChannelNum, Query, 1)
    If HasSheetOf("Cell_ACI_" & ChannelNum) Then
    With ActiveWorkbook.Worksheets("Cell_ACI_" & ChannelNum)
        .Columns("A:E").Select
        Selection.AutoFilter
        .cells(1, 5).Select
    End With
    End If
    
End Function

Public Sub UnlockFile()
        bLockImportData = False
End Sub
Public Sub SetInput(mFilename As String)
mInputFileName = mFilename
gFileNameInput = mInputFileName
LabelFileNameInput.Caption = gFileNameInput
Call gfReadMitsDataini
Call gDBClose
Call QueryTestName(gFileNameInput)
Call SetCheckBoxValueInDataImportForm
'Call SelectLastTestName
End Sub
Public Sub SetOutput(mFilename As String)
mOutputFileName = mFilename
gFileNameOutput = mOutputFileName
gDirNameOutput = fGetDataDir(mFilename)
LabelFileNameOutput.Caption = gFileNameOutput
End Sub
Attribute VB_Name = "ModuleApp1"

Option Explicit
'InAW means In ActiveWorkbook
Public gbiMinCycleInAW As Integer, gbiMaxCycleInAW As Integer
Public gbiMinChannelInAW As Integer, gbiMaxChannelInAW As Integer
Public gbiCycleFromInAW As Integer, gbiCycleToInAW As Integer
Public gbiChannelFromInAW As Integer, gbiChannelToInAW As Integer
Public gbPreSheetName As String
Public gbwkChartCount As Integer
Public gbiMsgBoxResponse As Integer, gbMsgBoxPrompt As String
'gbiMsgBoxResponse = MsgBox(gbMsgBoxPrompt, vbInformation)
Public gbsInputBoxResponse As String
Public gbsVerSchema As String
Public gbfVerSchema As Single

Public gFileNameOutput As String, gFileNameExt As String
'Options
Public Const giCount As Integer = 40
Public gDirNameInput As String, gFileNameInput As String
Public gDirNameOutput As String
Public gbbTestTime2 As Boolean, gbbCycleTime As Boolean
Public gbbDayOfYear As Boolean
Public gbbHighlightPulseRow As Boolean
Public gbbOpenImportDataDialog As Boolean
Public gbbOpenFileDialogAuto As Boolean
Public gbbOverwriteFiles As Boolean
Public gbbIsPrinterExist As Boolean
Public gbbReloadAlert As Boolean
Public gbbTestMinute As Boolean
Public gbbTestHour As Boolean
Public gbbTestDay As Boolean
Public gbbCurrentmA As Boolean
Public gbbVoltagemV As Boolean
Public gbbLoad As Boolean
Public gbbPower As Boolean
Public gbbPrint As Boolean
Public gbbIPolarity As Boolean
Public gbbVPolarity As Boolean
Public gbbID As Boolean
Public gbbPD As Boolean
Public gbbCE As Boolean
Public gbbFlag As Boolean
Public gbbLog As Boolean



Public Const giDecimalPlacesAll As Integer = 16
Public Const giDecimalPlacesNormal As Integer = 8
Public Const giDecimalPlacesAuxi As Integer = 8
Public giDecimalPlaces(16) As Integer
Public gstrDecimalPlacesNormal(8) As String
'gAuxiDataTypeTitle(0to5, 0)

'1=Current, 2=Voltage
'3=ChargeCapacity, 4=DischargeCapacity
'5=ChargeEnergy, 6=DischargeEnergy
'7=AuxVoltage, 8=Temperature, 9=Pressure
'10A=PH, 11=FlowRate

Public gbbTimeFormat As Boolean, gbbBtnAdvanced As Boolean

Public Const gbChannelName As String * 7 = "Channel"
Public Const gbStatisticName As String * 9 = "Statistic"
Public gbStatisticsName As String
Public Const gbSmartBatteryName As String * 12 = "SmartBattery"
Public Const gbInfoSheetName As String * 4 = "Info"
Public gbInfoSheetNowRow As Integer
Public Const gbMultiCellName As String * 9 = "MultiCell"
Public Const gbMultiCellChannelName As String * 16 = "MultiCellChannel"
Public Const gbMultiCellStatisticName As String * 19 = "MultiCellStatistics"

Public Const gbDataPointName As String * 10 = "Data_Point"
Public Const gbTestTimeName As String * 12 = "Test_Time(s)"
'Public Const gbDateTimeName As String * 8 = "DateTime"
Public Const gbDateTimeName As String * 9 = "Date_Time"
Public Const gbStepTimeName As String * 12 = "Step_Time(s)"
Public Const gbStepIndexName As String * 10 = "Step_Index"
Public Const gbCycleIndexName As String * 11 = "Cycle_Index"
Public Const gbCurrentName As String * 10 = "Current(A)"
Public Const gbVoltageName As String * 10 = "Voltage(V)"

Public Const gbChargeCapacityName  As String * 19 = "Charge_Capacity(Ah)"
Public Const gbDischargeCapacityName  As String * 22 = "Discharge_Capacity(Ah)"
Public Const gbChargeEnergyName  As String * 17 = "Charge_Energy(Wh)"
Public Const gbDischargeEnergyName  As String * 20 = "Discharge_Energy(Wh)"
Public Const gbDVdtName  As String * 10 = "dV/dt(V/s)"
Public Const gbInternalResistanceName  As String * 24 = "Internal_Resistance(Ohm)"
Public Const gbIsFCDataName  As String * 10 = "Is_FC_Data"
Public Const gbVmaxOnCycleName  As String * 16 = "Vmax_On_Cycle(V)"
Public Const gbTemperatureName  As String * 16 = "Temperature (C)"
Public Const gbACImpedanceName  As String * 17 = "AC_Impedance(Ohm)"
Public Const gbACPhaseName As String * 20 = "ACI_Phase_Angle(Deg)"

Public Const gbTestTime2Name As String * 10 = "Test_Time2"
Public Const gbCycleTimeName As String * 10 = "Cycle_Time"
Public Const gbDayOfYearName As String * 18 = "DayOfYear:hh:mm.ss"

Public gbLastPlotOn As Integer
Public gbLastXColumnName As String
Public gbLastY1ColumnName As String
Public gbLastY2ColumnName As String
Public gbFirstChooseY2 As Boolean
Public gbLastwkChartbookName As String
Public gbLastwkChartName As String
Public gbbHasLastwkChart As Boolean
Public gbLastwkSheetName As String
Public gbLastwkBookName As String
Public gbActiveChartName As String
Public gbPlotLogFileNum As Integer
Public gbErrorLogFileNum As Integer
Public gbbOpenFileAfterMaking As Boolean
Public Const gbiRangeFormatDisable  As Integer = -1
Public Const gbiRangeRestoreDefault  As Integer = -2
Public gbiCellGrading As Integer
Public Const gbbLogTryCount As Boolean = False
Public Const gbbLogReadNullCount As Boolean = True
Public gbbHasHighPulseData As Boolean
Public Const gbiTimeForHighPulseData As Integer = 6

'Public gbbChannelIndexOutLine As Boolean
Public Const gbiChannelIndexOutLine As Integer = 12
Public gbbY1OutLine As Boolean
Public Const gbiY1OutLine As Integer = 8
Public gbbY2OutLine As Boolean
Public Const gbiY2OutLine As Integer = 8

Public Const giCellGradingCount = 18
Public Const giCellGradingLoop = 6
Public gbsCellGrading1Name As String
Public gbbCellGrading1Enable As Boolean
Public gbbCellGrading1BadLarger As Boolean
Public gbfCellGrading1Value(6) As Double
Public gbsCellGrading2Name As String
Public gbbCellGrading2Enable As Boolean
Public gbbCellGrading2BadLarger As Boolean
Public gbfCellGrading2Value(6) As Double

'Report
Public gReportFilename As String
Public gPickVoltage As Single
Public gPickTolerance As Single


Sub gfDeleteDefaultSheet123(wkbook As Excel.Workbook)
    Dim wkSheetTemp As Worksheet
    'Delete Default Sheets, Such as Sheet1, Sheet2, Sheet3
    With wkbook
        For Each wkSheetTemp In .Worksheets
            If InStr(1, wkSheetTemp.Name, "Sheet") > 0 And .Worksheets.Count > 1 Then
                .Sheets(wkSheetTemp.Name).Delete
            End If
        Next wkSheetTemp
    End With
End Sub

Function gfSelectChannelSheet(wkbook As Excel.Workbook, PreSheetName As String) As Boolean
    Dim wkSheetTemp As Worksheet
    gfSelectChannelSheet = False
    With wkbook
        For Each wkSheetTemp In .Worksheets
            If InStr(1, wkSheetTemp.Name, PreSheetName) > 0 Then
                wkSheetTemp.Select
                gfSelectChannelSheet = True
                Exit For
            End If
        Next wkSheetTemp
    End With
End Function

Function gfGetMinMaxCycleInWorkbook(wkbook As Excel.Workbook, PreSheetName As String, _
                strCycle As String, iCycleMin As Integer, iCycleMax As Integer) As Boolean
    Dim wksheet As Excel.Worksheet
    Dim iColumn As Integer, j As Integer
    Dim fColumnMin As Single, fColumnMax As Single
    Dim bWarned As Boolean
    
    gfGetMinMaxCycleInWorkbook = False
    bWarned = False
    iCycleMin = 32767: iCycleMax = -32768
    With wkbook
        For Each wksheet In .Worksheets
            If InStr(1, wksheet.Name, PreSheetName) > 0 Then
                If gfGetMinMaxValueInColumn(wksheet, strCycle, fColumnMin, fColumnMax) Then
                    If iCycleMin > fColumnMin Then iCycleMin = fColumnMin
                    If iCycleMax < fColumnMax Then iCycleMax = fColumnMax
                    gfGetMinMaxCycleInWorkbook = True
                Else
                    If Not bWarned Then
                        gbMsgBoxPrompt = "Can not find " & strCycle & " column in" & Chr$(13) & Chr$(13) & _
                            wkbook.Name & "!" & wksheet.Name & " sheet. " & Chr$(13) & Chr$(13) & _
                            "Select " & strCycle & " menu may be invalid."
                        gbiMsgBoxResponse = MsgBox(gbMsgBoxPrompt, vbInformation)
                        bWarned = True
                    End If
                End If
            End If
        Next wksheet
    End With
    If gfGetMinMaxCycleInWorkbook = False Then iCycleMin = 0: iCycleMax = 0
End Function

Function gfAddABTS40Title(wkbook As Excel.Workbook, wksheet As Excel.Worksheet) As Boolean
    Dim iFileNumber As Integer, iCols As Integer
    Dim strTemp As String, PreSheetName1 As String
    gfAddABTS40Title = False
    
    gbMsgBoxPrompt = "Add ABTS 4.0 Title to the first row " & Chr$(13) & _
                            "in " & wkbook.Name & "!" & wksheet.Name & " sheet. " & Chr$(13) & _
                            "c = Channel Data Title" & Chr$(13) & _
                            "s = Statistical Data Title"
    gbsInputBoxResponse = LCase$(InputBox(gbMsgBoxPrompt, "Add ABTS 4.0 Title", gbsInputBoxResponse))
    
    If gbsInputBoxResponse = "c" Then
        PreSheetName1 = gbChannelName
    ElseIf gbsInputBoxResponse = "s" Then
        PreSheetName1 = gbStatisticName
    Else
        Exit Function
    End If
    
        With wksheet
            'iFileNumber = FreeFile
            iFileNumber = 2
            On Error GoTo SetABTS40TitleError
            Open ThisWorkbook.Path & "\" & "Mits_DataProABTS40Title.ini" For Input As #iFileNumber
                Do
                    Input #iFileNumber, strTemp
                Loop While InStr(1, strTemp, PreSheetName1) <= 0 Or InStr(1, strTemp, "[") <= 0 _
                            Or InStr(1, strTemp, "]") <= 0
                iCols = 1
                .Rows("1:1").Insert Shift:=xlDown
                Input #iFileNumber, strTemp
                Do While Not EOF(iFileNumber) And Trim(strTemp) <> "" _
                            And (InStr(1, strTemp, "[") <= 0 Or InStr(1, strTemp, "]") <= 0)
                    .cells(1, iCols).Value = strTemp
                    iCols = iCols + 1
                    Input #iFileNumber, strTemp
                Loop
            Close #iFileNumber
            'Call FormatSheet1stRow(wkSheet)
            Application.ScreenUpdating = False
            Call gfFormatCellBoard(wksheet)
            If gbbPrint Then Call FormatSheetEvenColumns(wksheet) ' 8-23-2001 options added for cosmetic formatting
            Application.ScreenUpdating = True
            .Range("B2").Select
            ActiveWindow.FreezePanes = True
        End With
        
        iCols = gfGetColumnNumber(wksheet, gbDateTimeName)
        If iCols > 0 Then
                wksheet.Columns(iCols).NumberFormat = "hh:mm:ss.000"
                wksheet.Columns(iCols).ColumnWidth = 20
        End If
            
        gfAddABTS40Title = True
SetABTS40TitleExit:
    On Error GoTo 0
    Exit Function
SetABTS40TitleError:
    MsgBox "Add ABTS 4.0 Title Error."
    Resume SetABTS40TitleExit
End Function

Function gfGetMinMaxChannelInWorkbook(wkbook As Excel.Workbook, PreSheetName As String, _
        iChannelMin As Integer, iChannelMax As Integer) As Boolean
    Dim wksheet As Excel.Worksheet, strName As String
    Dim i As Integer, j As Integer
    gfGetMinMaxChannelInWorkbook = False
    iChannelMin = 32767: iChannelMax = -32768
    With wkbook
        For Each wksheet In .Worksheets
            strName = wksheet.Name
            If InStr(1, strName, PreSheetName) = 1 Then
                i = InStr(1, strName, "-")
                If i = 0 Then
                    j = 0
                Else
                    j = Val(Right$(strName, Len(strName) - i))
                End If
                If iChannelMin > j Then iChannelMin = j
                If iChannelMax < j Then iChannelMax = j
                gfGetMinMaxChannelInWorkbook = True
            End If
        Next wksheet
    End With
End Function

Function gfGetMinMaxValueInColumn(wksheet As Excel.Worksheet, _
                ColumnName As String, fColumnMin As Variant, fColumnMax As Variant) As Boolean
    Dim iColumn, temp As Long
    gfGetMinMaxValueInColumn = False
    With wksheet
        iColumn = gfGetColumnNumber(wksheet, ColumnName)
        If iColumn <> -1 Then
            fColumnMin = Val(.cells(2, iColumn))
            temp = .cells(1, iColumn).End(xlDown).Row
            fColumnMax = Val(.cells(temp, iColumn))
            gfGetMinMaxValueInColumn = True
        End If
    End With
End Function

Function gfAddNewSeriesToChart( _
    wkbookXName As String, wkSheetX As Excel.Worksheet, XColumnName As String, _
    wkbookYName As String, wkSheetY As Excel.Worksheet, YColumnName As String, _
    lRowFromIn As Long, lRowToIn As Long, iAxisGroup As Integer, _
    wkChart As Excel.Chart, NewSeriesName As String) As Boolean
    Dim lRowFrom As Long, lRowTo As Long
    Dim strTemp0 As String  'Append to Series name
    Dim iLoop As Integer, iLoopEnd As Integer
    iLoopEnd = Int((lRowToIn - lRowFromIn) / glMaxSeriesRowsNum)
    For iLoop = 0 To iLoopEnd
        strTemp0 = gfGetRowFromToByMaxSeriesRowsNum(iLoop, iLoopEnd, _
            lRowFromIn, lRowToIn, lRowFrom, lRowTo)
        gfAddNewSeriesToChart = gfAddNewSeriesToChartLimit32000( _
            wkbookXName, wkSheetX, XColumnName, _
            wkbookYName, wkSheetY, YColumnName, _
            lRowFrom, lRowTo, iAxisGroup, _
            wkChart, NewSeriesName, strTemp0)
        DoEvents
    Next iLoop
End Function
    
Function gfGetRowFromToByMaxSeriesRowsNum(iLoop As Integer, iLoopEnd As Integer, _
    lRowFromIn As Long, lRowToIn As Long, _
    lRowFrom As Long, lRowTo As Long) As String
    If iLoop = 0 Then
        gfGetRowFromToByMaxSeriesRowsNum = ""
    Else
        gfGetRowFromToByMaxSeriesRowsNum = Str$(iLoop + 1) '2,3,4,...
    End If
    lRowFrom = lRowFromIn + iLoop * glMaxSeriesRowsNum
    If iLoop = iLoopEnd Then
        lRowTo = lRowToIn
    Else
        lRowTo = lRowFrom + glMaxSeriesRowsNum
    End If
End Function

Function gfAddNewSeriesToChartLimit32000( _
    wkbookXName As String, wkSheetX As Excel.Worksheet, XColumnName As String, _
    wkbookYName As String, wkSheetY As Excel.Worksheet, YColumnName As String, _
    lRowFromIn As Long, lRowToIn As Long, iAxisGroup As Integer, _
    wkChart As Excel.Chart, NewSeriesName As String, strTemp0 As String) As Boolean
    
    Dim lRowFrom As Long, lRowTo As Long
    Dim iColumn As Integer, iCycleIndex As Integer, sTemp1 As String
    Dim bSuccess As Boolean, bCycleTimeOn As Boolean
    Dim columnX As Integer, columnY As Integer
    Dim NewSeries As Series, strAxisGroup As String
    gfAddNewSeriesToChartLimit32000 = False
    columnX = gfGetColumnNumber(wkSheetX, XColumnName)
    
    If columnX < 0 Then
 '       MsgBox ("Can not find " & XColumnName & " in " & wkSheetX.Name & " sheet.")
        Exit Function
    End If
    
    columnY = gfGetColumnNumber(wkSheetY, YColumnName)
    If columnY < 0 Then
 '       MsgBox ("Can not find " & YColumnName & " in " & wkSheetY.Name & " sheet.")
        Exit Function
    End If
   
    If XColumnName = gbCycleTimeName And wkSheetX.Name = wkSheetY.Name Then
        'If InStr(1, wkSheetX.Name, gbStatisticName) <= 0 Then
            iColumn = gfGetColumnNumber(wkSheetX, gbCycleIndexName)
            If iColumn > 0 Then bCycleTimeOn = True
        'End If
    End If
    lRowFrom = lRowFromIn:  lRowTo = lRowToIn:  sTemp1 = " "
            
LabelCycleStartLoop:
    If bCycleTimeOn Then
        iCycleIndex = wkSheetX.cells(lRowFrom, iColumn)
        bSuccess = gfGetRowFromToByValueAndRowLimit(wkSheetX, _
                gbCycleIndexName, iCycleIndex, iCycleIndex, lRowFrom, lRowTo)
        sTemp1 = " Cycle" & iCycleIndex
    End If
    sTemp1 = sTemp1 & strTemp0
    'Application.ScreenUpdating = False
    Set NewSeries = wkChart.SeriesCollection.NewSeries
    
    If NewSeriesName = "" Then
        NewSeries.Name = gfSimplifySheetName(wkSheetY.Name) & " " & YColumnName & sTemp1
    Else
        NewSeries.Name = NewSeriesName & sTemp1
    End If
    If gptPlotType = xlXYScatterLinesNoMarkers Or gptPlotType = xlXYScatterSmoothNoMarkers Then
            NewSeries.MarkerStyle = xlMarkerStyleNone
    End If
    strAxisGroup = "Y1 = "
    If iAxisGroup = xlSecondary Then strAxisGroup = "Y2 = "
    Application.StatusBar = "Processing  " & strAxisGroup & NewSeries.Name
    
    On Error GoTo SetaxisGroupError
    NewSeries.AxisGroup = iAxisGroup
    On Error GoTo SetNewSeriesRangeError
    With wkSheetX
        NewSeries.XValues = .Range(.cells(lRowFrom, columnX), .cells(lRowTo, columnX))
    End With
    With wkSheetY
        NewSeries.Values = .Range(.cells(lRowFrom, columnY), .cells(lRowTo, columnY))
    End With
    
    If bCycleTimeOn And lRowTo < lRowToIn Then
        lRowFrom = lRowTo + 1:  lRowTo = lRowToIn
        DoEvents
        GoTo LabelCycleStartLoop
    End If
    
    gfAddNewSeriesToChartLimit32000 = True
    
    If gbPlotLogFileNum > 0 Then
        Print #gbPlotLogFileNum, "SeriesName = "; NewSeries.Name
        Print #gbPlotLogFileNum, "X  = "; wkbookXName & "!" & wkSheetX.Name & "!" & XColumnName
        Print #gbPlotLogFileNum, strAxisGroup; wkbookYName & "!" & wkSheetY.Name & "!" & YColumnName
        Print #gbPlotLogFileNum, " "
    End If
SetSeriesErrorExit:
    'Application.ScreenUpdating = True
    On Error GoTo 0
    Exit Function
    
SetaxisGroupError:
    gbMsgBoxPrompt = "Set Series axisGroup Error! Choose at least one Y1."
    gbiMsgBoxResponse = MsgBox(gbMsgBoxPrompt, vbInformation)
    Resume SetSeriesErrorExit
    
SetNewSeriesRangeError:
    gbMsgBoxPrompt = "Set New Series Range Error. " & Chr$(13) & _
        "Maybe the " & XColumnName & " or the " & YColumnName & _
        " in " & wkSheetX.Name & " sheet is blank."
    gbiMsgBoxResponse = MsgBox(gbMsgBoxPrompt, vbInformation)
    Resume SetSeriesErrorExit

End Function

Function gfGetPlotChart(wkbook As Excel.Workbook, ChartName As String) As Excel.Chart
    'Application.ScreenUpdating = False
    If gfHasChartOf(wkbook, ChartName) = False Then
        Set gfGetPlotChart = wkbook.Charts.Add
        gfGetPlotChart.Name = ChartName
        gfGetPlotChart.ChartType = xlXYScatterLinesNoMarkers
        Call gfDeleteSeries123InChart(gfGetPlotChart)
    Else
        Set gfGetPlotChart = wkbook.Charts(ChartName)
    End If
    'Application.ScreenUpdating = True
End Function

Function gfInitPlotChart(wkbook As Excel.Workbook, ChartName As String) As Excel.Chart
    Dim ctsr As Series
    '"CustomPlotChart"
    Application.ScreenUpdating = False
    If gfHasChartOf(wkbook, ChartName) = True Then
        Application.DisplayAlerts = False
        wkbook.Charts(ChartName).Delete
        Application.DisplayAlerts = True
    End If
'    Set gfInitPlotChart = wkbook.Charts.Add
    ThisWorkbook.Charts("ChartTemplate").Copy after:=wkbook.Sheets(1)
    Set gfInitPlotChart = wkbook.Charts("ChartTemplate")
    'wkbook.Charts.Add after:=ActiveWorkbook.Worksheets(Worksheets.Count)
    'Set gfInitPlotChart = ActiveWorkbook.ActiveChart
    If gptPlotType = 0 Then gptPlotType = xlXYScatterLinesNoMarkers
    With gfInitPlotChart
        .Name = ChartName
        .ChartType = gptPlotType
        Set ctsr = .SeriesCollection.NewSeries
        .PlotArea.Interior.ColorIndex = xlNone
        .PlotArea.Border.Weight = xlThin
        If .PlotArea.Border.LineStyle <> xlCustom Then
        .PlotArea.Border.LineStyle = xlAutomatic
        
        End If
        '.ChartArea.Font.Bold = True
    End With
    With gfInitPlotChart.Axes(xlValue).MajorGridlines.Border
        .ColorIndex = 16
        .Weight = xlHairline
        .LineStyle = xlDot
    End With
    Call gfDeleteSeries123InChart(gfInitPlotChart)
    'Application.ScreenUpdating = True
End Function

Function gfSetPlotChartXaxis(wkChart As Excel.Chart, wksheet As Excel.Worksheet, _
    XColumnName As String, lRowFrom As Long, lRowTo As Long)
    Dim columnX As Integer, myRange As Excel.Range
    Dim fMin As Single, fMax As Single
    columnX = gfGetColumnNumber(wksheet, XColumnName)
    With wksheet
        Set myRange = .Range(.cells(lRowFrom, columnX), .cells(lRowTo, columnX))
    End With
    With wkChart.Axes(xlCategory)
        If XColumnName = gbDateTimeName Then
            .MinimumScale = WorksheetFunction.Min(myRange)
            .MaximumScale = WorksheetFunction.Max(myRange)
        Else
            fMin = WorksheetFunction.Min(myRange)
            fMax = WorksheetFunction.Max(myRange)
            If fMax - fMin > 2 Then
                .MinimumScale = Int(fMin)
                .MaximumScale = Int(fMax) + 1
            Else
                .MinimumScale = fMin
                .MaximumScale = fMax
            End If
        End If
        If gbPWP3Option = 5 And gbbShowPlotWizard3 Then
             .MinimumScaleIsAuto = True
             .MaximumScaleIsAuto = True
             .MinorUnitIsAuto = True
             .MajorUnitIsAuto = True
             .Crosses = xlAutomatic
             .ReversePlotOrder = False
             .ScaleType = xlLinear
'            .DisplayUnit = xlNone  ' for office 8.0 compatiable
        End If
    End With
End Function

Function gfSetPlotChartTitle(wkChart As Excel.Chart, _
    MainTitle As String, XTitle As String, Y1Title As String, Y2Title As String)
        'Application.ScreenUpdating = False
        On Error GoTo LabelError_gfSetPlotChartTitle
        With wkChart
            If MainTitle = "" Then
                '.HasTitle = False
            Else
                .HasTitle = True
                .ChartTitle.Font.Bold = True
                .ChartTitle.Caption = MainTitle
            End If
            
            If XTitle = "" Then
                '.Axes(xlCategory, 1).HasTitle = False
            Else
                .Axes(xlCategory, 1).HasTitle = True
                .Axes(xlCategory, 1).AxisTitle.Characters.Text = XTitle
            End If
            
            If Y1Title = "" Then
                '.Axes(xlValue, 1).HasTitle = False
            Else
                .Axes(xlValue, 1).HasTitle = True
                .Axes(xlValue, 1).AxisTitle.Characters.Text = Y1Title
            End If
            
            If Y2Title = "" Then
                '.Axes(xlValue, 1).HasTitle = False
            Else
                .Axes(xlValue, 2).HasTitle = True
                .Axes(xlValue, 2).AxisTitle.Characters.Text = Y2Title
            End If
        End With
        'Application.ScreenUpdating = True

LabelExit_gfSetPlotChartTitle:
    On Error GoTo 0
    Exit Function
    
LabelError_gfSetPlotChartTitle:
    gbiMsgBoxResponse = MsgBox("Maybe you hide the columns [ " & XTitle & ", " & _
    Y1Title & ", " & Y2Title & " ] you want to plot, Unhide these columns and try again.", vbInformation, gszAPPVERSION)
    GoTo LabelExit_gfSetPlotChartTitle
End Function

Function gfDeleteSeries123InChart(wkChart As Excel.Chart)
    Dim ctsr As Series
    On Error GoTo LabelExitDeleteSeries123
            For Each ctsr In wkChart.SeriesCollection
                If InStr(1, ctsr.Name, "Series") Then
                    ctsr.Delete
                End If
            Next ctsr
LabelExitDeleteSeries123:
    On Error GoTo 0
End Function

Function gfAfterPlotChart(wkChart As Excel.Chart)
    'Dim ctsr As series
    On Error GoTo LabelExitgfAfterPlotChar
    Call gfDeleteSeries123InChart(wkChart)
    If gbbTimeFormat = True Then
        wkChart.Axes(xlCategory).TickLabels.NumberFormat = gptTimeUnit
    End If
LabelExitgfAfterPlotChar:
    On Error GoTo 0
    gbbTimeFormat = False
    Application.StatusBar = "Click on data series to Zoom."
    Application.ScreenUpdating = True
End Function

Function gfCellGradingFilling(SheetNameFull As String) As Boolean
    Dim iColumn As Integer, iColumn1 As Integer, iColumn2 As Integer
    Dim iGrade1 As Integer, iGrade2 As Integer, i As Integer
    Dim lRowLoop As Long, lRowFrom As Long, lRowTo As Long
    Dim fTotal1 As Double, fAverage1 As Double
    Dim fTotal2 As Double, fAverage2 As Double
    Dim sGrade12 As String, sGrade1 As String, sGrade2 As String
    Dim wksheet As Excel.Worksheet
    
    gfCellGradingFilling = False
    If gbbCellGrading1Enable = False And gbbCellGrading2Enable = False Then Exit Function
    iColumn1 = -1: iColumn2 = -1
    Set wksheet = Worksheets(SheetNameFull)
    
    If gbbCellGrading1Enable Then
        iColumn1 = gfGetColumnNumber(wksheet, gbsCellGrading1Name)
    End If
    If gbbCellGrading2Enable Then
        iColumn2 = gfGetColumnNumber(wksheet, gbsCellGrading2Name)
    End If
    If iColumn1 = -1 And iColumn2 = -1 Then Exit Function
    Application.StatusBar = "Cell Grading for " & SheetNameFull
    DoEvents
    
    sGrade1 = " ": sGrade2 = " "
    iGrade1 = 0: iGrade2 = 0
    On Error Resume Next
    With wksheet
        If iColumn1 > -1 Then
            lRowTo = .cells(1, iColumn1).End(xlDown).Row
            If lRowTo > 1 Then
                fTotal1 = 0
                For lRowLoop = 2 To lRowTo
                    fTotal1 = fTotal1 + .cells(lRowLoop, iColumn1).Value
                Next lRowLoop
                fAverage1 = fTotal1 / (lRowTo - 1#)
                iGrade1 = -1
                If gbbCellGrading1BadLarger = True Then
                    For i = 1 To giCellGradingLoop
                        If fAverage1 <= gbfCellGrading1Value(i) Then
                            iGrade1 = i
                            Exit For
                        End If
                    Next i
                Else
                    For i = 1 To giCellGradingLoop
                        If fAverage1 >= gbfCellGrading1Value(i) Then
                            iGrade1 = i
                            Exit For
                        End If
                    Next i
                End If
                If iGrade1 > -1 Then sGrade1 = Chr(64 + iGrade1)
            End If
        End If
    
        If iColumn2 > -1 Then
            lRowTo = .cells(1, iColumn2).End(xlDown).Row
            If lRowTo > 1 Then
                fTotal2 = 0
                For lRowLoop = 2 To lRowTo
                    fTotal2 = fTotal2 + .cells(lRowLoop, iColumn2).Value
                Next lRowLoop
                fAverage2 = fTotal2 / (lRowTo - 1#)
                iGrade2 = -1
                If gbbCellGrading2BadLarger = True Then
                    For i = 1 To giCellGradingLoop
                        If fAverage2 <= gbfCellGrading2Value(i) Then
                            iGrade2 = i
                            Exit For
                        End If
                    Next i
                Else
                    For i = 1 To giCellGradingLoop
                        If fAverage2 >= gbfCellGrading2Value(i) Then
                            iGrade2 = i
                            Exit For
                        End If
                    Next i
                End If
                If iGrade2 > -1 Then sGrade2 = Chr(48 + iGrade2)
            End If
        End If
    
    End With
    
    If iGrade1 <> 0 Or iGrade2 <> 0 Then
        If iGrade1 = -1 Or iGrade2 = -1 Then
            sGrade12 = "Bad Cell"
        Else
            sGrade12 = sGrade1 & sGrade2
        End If
        With Worksheets(gbInfoSheetName)
            .cells(gbInfoSheetNowRow, gbiCellGrading) = sGrade12
            If iColumn1 > -1 Then .cells(gbInfoSheetNowRow, gbiCellGrading + 1) = fAverage1
            If iColumn2 > -1 Then .cells(gbInfoSheetNowRow, gbiCellGrading + 2) = fAverage2
        End With
        gfCellGradingFilling = True
    End If
    On Error GoTo 0
    
End Function

Function gfGetRowFromToByValueAndRowLimit(wksheet As Excel.Worksheet, _
    ColumnName As String, InputValueFrom As Variant, InputValueTo As Variant, _
    lRowFrom As Long, lRowTo As Long) As Boolean
    'If return is True, you may use lRowFrom and lRowTo
    'The ColumnName value must be sorted ascending.
    Dim bSuccess As Boolean, iColumn As Integer
    Dim lLoop As Long, vLoop As Variant
    Dim lOutputRowFrom As Long, lOutputRowTo As Long
    
    gfGetRowFromToByValueAndRowLimit = False
    iColumn = gfGetColumnNumber(wksheet, ColumnName)
    If iColumn = -1 Then Exit Function
    If lRowFrom > lRowTo Then
        'Exit Function
        lLoop = lRowFrom: lRowFrom = lRowTo: lRowTo = lLoop
    End If
    If InputValueFrom > InputValueTo Then
        vLoop = InputValueFrom: InputValueFrom = InputValueTo: InputValueTo = vLoop
    End If
    
    'Excel search statement will be used later.
    With wksheet
        bSuccess = False
        For lLoop = lRowFrom To lRowTo
            If .cells(lLoop, iColumn).Value >= InputValueFrom Then
                lOutputRowFrom = lLoop: bSuccess = True
                Exit For
            End If
        Next lLoop
        If Not bSuccess Then Exit Function
        'Step -1 search is more accurate, may be faster for all range.
        bSuccess = False
        For lLoop = lRowTo To lRowFrom Step -1
            If .cells(lLoop, iColumn).Value <= InputValueTo Then
                lOutputRowTo = lLoop: bSuccess = True
                Exit For
            End If
        Next lLoop
        If Not bSuccess Then Exit Function
    End With
    lRowFrom = lOutputRowFrom:      lRowTo = lOutputRowTo
    gfGetRowFromToByValueAndRowLimit = True
    
End Function


Function gfGetRowFromToMinMax(wksheet As Excel.Worksheet, _
    ColumnName As String, lRowFrom As Long, lRowTo As Long) As Boolean
    Dim iColumn As Integer
    gfGetRowFromToMinMax = False
    iColumn = gfGetColumnNumber(wksheet, ColumnName)
    If iColumn = -1 Then
        'MsgBox ("Can not find " & ColumnName & " Column in " & wkSheet.Name & " sheet.")
        Exit Function
    End If
    lRowFrom = 2
    With wksheet
        lRowTo = .cells(1, iColumn).End(xlDown).Row
    End With
    If lRowTo < lRowFrom Then Exit Function
    gfGetRowFromToMinMax = True
End Function

Function gfGetRowFromToByValue(wksheet As Excel.Worksheet, _
    ColumnName As String, InputValueFrom As Variant, InputValueTo As Variant, _
    lRowFrom As Long, lRowTo As Long) As Boolean
    gfGetRowFromToByValue = False
    If gfGetRowFromToMinMax(wksheet, ColumnName, lRowFrom, lRowTo) Then
        gfGetRowFromToByValue = gfGetRowFromToByValueAndRowLimit(wksheet, _
            ColumnName, InputValueFrom, InputValueTo, lRowFrom, lRowTo)
    End If
End Function

Function gfCheck32000Value(wksheet As Excel.Worksheet, lRowFrom As Long, lRowTo As Long) As Boolean
    gfCheck32000Value = True
    'Check plot point not more than 32000
    If (lRowTo - lRowFrom) >= 32000 Then
        gbMsgBoxPrompt = "Data points are more than 32000 in " & _
             wksheet.Name & " sheet. Only the last 32000 points will be plotted."
        gbiMsgBoxResponse = MsgBox(gbMsgBoxPrompt, vbInformation)
        lRowFrom = lRowTo - 32000
        gfCheck32000Value = False
    End If
End Function

Function gfGetColumnNumberInstr(wksheet As Excel.Worksheet, ColumnName As String) As Integer
    Dim i As Integer, iEndColumn As Integer
    gfGetColumnNumberInstr = -1
    If ColumnName = "" Then Exit Function
    With wksheet
        iEndColumn = .Range("A1").End(xlToRight).Column
        If iEndColumn >= giMaxColumnsNum Then Exit Function
        For i = 1 To iEndColumn
            If InStr(1, .cells(1, i).Value, ColumnName) > 0 Then
                gfGetColumnNumberInstr = i
                Exit Function
            End If
        Next i
    End With
End Function

Function gfGetColumnNumber(wksheet As Excel.Worksheet, ColumnName As String) As Integer
    Dim i, j As Integer, iEndColumn As Integer
    Dim iColumn As Integer
    gfGetColumnNumber = -1
    If ColumnName = "" Then Exit Function
    With wksheet
        iEndColumn = .Range("A1").End(xlToRight).Column
        If iEndColumn >= giMaxColumnsNum Then Exit Function
        For i = 1 To iEndColumn
            If .cells(1, i).Value = ColumnName Then
                gfGetColumnNumber = i
                Exit Function
            End If
        Next i
    End With
End Function
Function gfGetSimColumnNumber(wksheet As Excel.Worksheet, ColumnName As String) As Integer
    Dim i, j As Integer, iEndColumn As Integer
    Dim iColumn As Integer
    gfGetSimColumnNumber = -1
    If ColumnName = "" Then Exit Function
    With wksheet
        iEndColumn = .Range("A1").End(xlToRight).Column
        If iEndColumn >= giMaxColumnsNum Then Exit Function
        For i = 1 To iEndColumn
            If InStr(1, .cells(1, i).Value, ColumnName) <> 0 Then
                gfGetSimColumnNumber = i
                Exit Function
            End If
        Next i
    End With
End Function

Function gfSimplifySheetName(strSheetName As String) As String
    Dim i As Integer, strName As String
    strName = strSheetName
    i = InStr(1, strName, gbChannelName)
    If i > 0 Then
        strName = Right$(strName, Len(strName) - i - Len(gbChannelName) + 1)
    End If
    i = InStr(1, strName, gbStatisticsName)
    If i > 0 Then
            strName = Right$(strName, Len(strName) - i - Len(gbStatisticsName) + 1)
    End If
    i = InStr(1, strName, "_")
    If i > 0 Then
        strName = Right$(strName, Len(strName) - i)
    End If
    gfSimplifySheetName = strName
End Function

Function gfSetLastwkChart(wkChartbookName As String, wkChartName As String, _
    wkChartbook As Excel.Workbook, wkChart As Excel.Chart) As Boolean
    Dim ctsr As Series, i As Integer
    gfSetLastwkChart = False
    'Try Workbook. If success, get wkChartbook
    If Not gfHasWorkbookOf(wkChartbookName, wkChartbook) Then Exit Function
    'Try Chart
    If Not gfHasChartOf(wkChartbook, wkChartName) Then Exit Function
    Set wkChart = wkChartbook.Charts(wkChartName)
    'Try Series
    i = 0
    For Each ctsr In wkChart.SeriesCollection
        i = i + 1
    Next ctsr
    If i = 0 Then Set ctsr = wkChart.SeriesCollection.NewSeries
    'Success
    wkChartbook.Activate
    wkChart.Select
    gfSetLastwkChart = True
End Function

Function gfReadMitsDataini()
    Dim i As Integer, iCount As Integer
    Dim j As Integer, strTemp As String
    'Dim sReadData(8) As String
    On Error GoTo ReadMitsDatainiOpenError
Try_Again:
    Open ThisWorkbook.Path & "\" & "Mits_DataPro.ini" For Input As #4
    On Error Resume Next
    Input #4, iCount
    If iCount <> giCount Then GoTo ReadMitsDatainiOpenError
    'giCount
    Input #4, gDirNameInput
    Input #4, gFileNameInput
    Input #4, gDirNameOutput
    Input #4, i: gbbOpenImportDataDialog = CBool(i)
    Input #4, i: gbbOpenFileDialogAuto = CBool(i)
    Input #4, i: gbbOverwriteFiles = CBool(i)
    Input #4, i: gbbTestTime2 = CBool(i)
    Input #4, i: gbbCycleTime = CBool(i)
    Input #4, i: gbbDayOfYear = CBool(i)
    Input #4, i: gbbHighlightPulseRow = CBool(i)
    Input #4, i: gbbReloadAlert = CBool(i)
    Input #4, i: gbbTestMinute = CBool(i)
    Input #4, i: gbbTestHour = CBool(i)
    Input #4, i: gbbTestDay = CBool(i)
    Input #4, i: gbbCurrentmA = CBool(i)
    Input #4, i: gbbVoltagemV = CBool(i)
    Input #4, i: gbbLoad = CBool(i)
    Input #4, i: gbbPower = CBool(i)
    Input #4, i: gbbPrint = CBool(i)
    Input #4, i: gbbIPolarity = CBool(i)
    Input #4, i: gbbVPolarity = CBool(i)
    Input #4, i: gbbID = CBool(i)
    Input #4, i: gbbPD = CBool(i)
    Input #4, i: gbbCE = CBool(i)
    Input #4, i: gbbFlag = CBool(i)
    Input #4, i: gbbLog = CBool(i)

    For j = 1 To giDecimalPlacesAll
        Input #4, i: giDecimalPlaces(j) = i
    Next j
    Input #4, i: gAuxRate = CBool(i)
    Close #4

ReadMitsDatainiExit:
    On Error GoTo 0
    Exit Function
    
ReadMitsDatainiOpenError:
    Close #4
    Call gfCreateMitsDataini
    GoTo Try_Again
End Function

Function gfSaveMitsDataini()
    Dim i As Integer, iCount As Integer
    On Error GoTo OpenErrorHandle
    Open ThisWorkbook.Path & "\" & "Mits_DataPro.ini" For Output As #4
    Print #4, giCount
    Print #4, gDirNameInput
    Print #4, gFileNameInput
    Print #4, gDirNameOutput
    Print #4, CInt(gbbOpenImportDataDialog)
    Print #4, CInt(gbbOpenFileDialogAuto)
    Print #4, CInt(gbbOverwriteFiles)
    Print #4, CInt(gbbTestTime2)
    Print #4, CInt(gbbCycleTime)
    Print #4, CInt(gbbDayOfYear)
    Print #4, CInt(gbbHighlightPulseRow)
    Print #4, CInt(gbbReloadAlert)
    Print #4, CInt(gbbTestMinute)
    Print #4, CInt(gbbTestHour)
    Print #4, CInt(gbbTestDay)
    Print #4, CInt(gbbCurrentmA)
    Print #4, CInt(gbbVoltagemV)
    Print #4, CInt(gbbLoad)
    Print #4, CInt(gbbPower)
    Print #4, CInt(gbbPrint)
    Print #4, CInt(gbbIPolarity)
    Print #4, CInt(gbbVPolarity)
    Print #4, CInt(gbbID)
    Print #4, CInt(gbbPD)
    Print #4, CInt(gbbCE)
    Print #4, CInt(gbbFlag)
    Print #4, CInt(gbbLog)
    For i = 1 To giDecimalPlacesAll
        Print #4, giDecimalPlaces(i)
    Next i
    Print #4, CInt(gAuxRate)
    Close #4
Exit Function
OpenErrorHandle:
    If Err.Number = 75 Then
        On Error GoTo ReadOnlyFile
        SetAttr ThisWorkbook.Path & "\" & "Mits_DataPro.ini", vbNormal
        Resume
    End If
ReadOnlyFile:
        MsgBox "You have not enough right to write file or your work space located CD-ROM, ReadOnly Network drive."
End Function

Function gfCreateMitsDataini()
    Dim i As Integer
    gbbTestTime2 = False
    gbbCycleTime = False
    gbbDayOfYear = False
    gDirNameInput = ThisWorkbook.Path
    gFileNameInput = gDirNameInput & "\ArbinSys.res"
    gDirNameOutput = gDirNameInput
    gbbHighlightPulseRow = True
    gbbOpenImportDataDialog = False
    gbbOpenFileDialogAuto = False
    gbbOverwriteFiles = True
    gbbReloadAlert = True
    gbbTestMinute = False
    gbbTestHour = False
    gbbTestDay = False
    gbbCurrentmA = False
    gbbVoltagemV = False
    gbbLoad = False
    gbbPower = False
    gbbPrint = True
    gbbIPolarity = False
    gbbVPolarity = False
    gbbID = False
    gbbPD = False
    gbbCE = False
    gbbFlag = False
    gbbLog = False

    
    giDecimalPlaces(1) = 3
    giDecimalPlaces(2) = 3
    For i = 1 To giDecimalPlacesAll
        giDecimalPlaces(i) = gbiRangeFormatDisable
    Next i
    gAuxRate = False
    Call gfSaveMitsDataini
End Function

Function gfShowFile(strFileName As String)
    Dim RetVal As Variant, strTemp As String
    strTemp = "NotePad.EXE " & strFileName
    On Error GoTo LabelError_gfShowFile
    'RetVal = Shell(strTemp, 3)
    RetVal = Shell(strTemp, 1)
    Exit Function
LabelError_gfShowFile:
    On Error GoTo 0
    gbiMsgBoxResponse = MsgBox("Can not find " & strFileName & " file.", vbInformation)
End Function

Function gfReadCellGradingFile()
    Dim i As Integer, iCount As Integer
    Dim j As Integer
    'Dim sReadData(8) As String
    On Error GoTo Error_ReadCellGradingFile
    Open ThisWorkbook.Path & "\" & "Mits_CellGrading.ini" For Input As #4
    On Error Resume Next
    Input #4, iCount
    If iCount <> giCellGradingCount Then GoTo Error_ReadCellGradingFile
    
    Input #4, gbsCellGrading1Name
    Input #4, i: gbbCellGrading1Enable = CBool(i)
    Input #4, i: gbbCellGrading1BadLarger = CBool(i)
    For j = 1 To giCellGradingLoop
        Input #4, gbfCellGrading1Value(j)
    Next j
    
    Input #4, gbsCellGrading2Name
    Input #4, i: gbbCellGrading2Enable = CBool(i)
    Input #4, i: gbbCellGrading2BadLarger = CBool(i)
    For j = 1 To giCellGradingLoop
        Input #4, gbfCellGrading2Value(j)
    Next j
    
    Close #4

Exit_ReadCellGradingFile:
    On Error GoTo 0
    Exit Function
    
Error_ReadCellGradingFile:
    Close #4
    Call gfCreateCellGradingFile
    GoTo Exit_ReadCellGradingFile

End Function

Function gfCreateCellGradingFile()
    Dim i As Integer
    
    gbsCellGrading1Name = gbInternalResistanceName
    gbbCellGrading1Enable = False
    gbbCellGrading1BadLarger = True
    For i = 1 To giCellGradingLoop
        gbfCellGrading1Value(i) = 0.01 * i
    Next i
    
    gbsCellGrading2Name = gbDischargeCapacityName
    gbbCellGrading2Enable = False
    gbbCellGrading2BadLarger = False
    For i = 1 To giCellGradingLoop
        gbfCellGrading2Value(i) = 100.01 * (giCellGradingLoop - i + 1)
    Next i
    
    Call gfSaveCellGradingFile
End Function

Function gfSaveCellGradingFile()
    Dim i As Integer, iCount As Integer
    Open ThisWorkbook.Path & "\" & "Mits_CellGrading.ini" For Output As #4
    Print #4, giCellGradingCount
    
    Print #4, gbsCellGrading1Name
    Print #4, CInt(gbbCellGrading1Enable)
    Print #4, CInt(gbbCellGrading1BadLarger)
    For i = 1 To giCellGradingLoop
        Print #4, gbfCellGrading1Value(i)
    Next i
    
    Print #4, gbsCellGrading2Name
    Print #4, CInt(gbbCellGrading2Enable)
    Print #4, CInt(gbbCellGrading2BadLarger)
    For i = 1 To giCellGradingLoop
        Print #4, gbfCellGrading2Value(i)
    Next i
    Close #4
End Function
Attribute VB_Name = "ModuleApp2"

Option Explicit
'DatePart("y", TheDate)

Function gfCheckDataBaseTableExist(DBTableName As String) As Boolean
    Dim strQuery As String, TestRec As Recordset
    gfCheckDataBaseTableExist = False
    strQuery = "SELECT * FROM " & DBTableName & ";"
    On Error GoTo CheckDataBaseTableExist_Error
    Set TestRec = gDB.OpenRecordset(strQuery, dbOpenForwardOnly, dbReadOnly)
    If TestRec.EOF = False Then
        gfCheckDataBaseTableExist = True
    End If
    TestRec.Close
    Set TestRec = Nothing
    
CheckDataBaseTableExist_Error:
    On Error GoTo 0
End Function

Function gfHasWorkbookValid() As Boolean
    gfHasWorkbookValid = False
    If Application.Workbooks.Count < 1 Then
        Call gfPrintMsgBox
        Exit Function
    End If
    If InStr(1, ActiveWorkbook.Name, "Mits_DataPro") > 0 Then
        MsgBox ("You should highlight other Excel Wookbook for plotting.")
        Exit Function
    End If
    gfHasWorkbookValid = True
End Function

Function gfPrintMsgBox()
        gbMsgBoxPrompt = _
            gszAPPTITLE & gszAPPVERSION & Chr$(13) & Chr$(13) & _
            "You may input data from ArbinSys.res file " & Chr$(13) & _
            "by clicking [Arbin data/Import Results Data...] menu, " & Chr$(13) & Chr$(13) & _
            "or from any Excel file you inputed before " & Chr$(13) & _
            "by clicking [File/Open...] menu," & Chr$(13) & Chr$(13) & _
            "then highlight the sheet you want to plot, " & Chr$(13) & _
            "and click [Arbin Plot/Simple Plot] menu." & Chr$(13) & Chr$(13) & _
            "If you input data from ABTS4.0 *.rtx file, " & Chr$(13) & _
            "add column name to the first row. "
        gbiMsgBoxResponse = MsgBox(gbMsgBoxPrompt, vbInformation)
End Function

Sub gfListBoxInitSheetBywkbook(wkbook As Excel.Workbook, ListBoxObject As Object)
    Dim wksheet As Excel.Worksheet, strName As String
    ListBoxObject.Clear
    With wkbook
        For Each wksheet In .Worksheets
            strName = wksheet.Name
            If gfHasChartOf(wkbook, strName) = False And InStr(1, strName, gbInfoSheetName) <= 0 Then
                 ListBoxObject.AddItem strName
            End If
        Next wksheet
    End With
    If ListBoxObject.ListCount > 0 Then ListBoxObject.Selected(0) = True
End Sub

Sub gfListBoxInitTitleBywkSheet(wksheet As Excel.Worksheet, ListBoxObject As Object)
    Dim i As Integer, iEndColumn  As Integer
    ListBoxObject.Clear
    With wksheet
        iEndColumn = .Range("A1").End(xlToRight).Column
        If iEndColumn >= giMaxColumnsNum Then Exit Sub
        For i = 1 To iEndColumn
             ListBoxObject.AddItem .cells(1, i)
        Next i
    End With
    If ListBoxObject.ListCount > 0 Then ListBoxObject.Selected(0) = True
End Sub

Sub gfListBoxRemoveItems(ListBoxObject As Control)
    Dim i As Integer
    With ListBoxObject
      For i = .ListCount - 1 To 0 Step -1
        If .Selected(i) Then
            .RemoveItem i
        End If
      Next i
    End With
End Sub

Function gfGetPreSheetName(wkSheetName As String) As String
        Dim i As Integer, strName As String
        strName = wkSheetName
        i = InStr(1, strName, "_")
        If i = 0 Then
            gfGetPreSheetName = strName   'Other sheet
        Else
            gfGetPreSheetName = Left$(strName, i - 1)
        End If
End Function

Sub gfListBoxX0Y1Y2Init(wksheet As Excel.Worksheet, LabelForm As Object, _
    ListBoxX0 As Object, ListBoxY1 As Control, ListBoxY2 As Control)
    Dim i As Integer, iEndColumn  As Integer
    Dim iColumnX As Integer
    Dim iColumnY1 As Integer, iColumnY2 As Integer
    ListBoxX0.Clear:    ListBoxY1.Clear:    ListBoxY2.Clear
    With wksheet
        'ListBoxX0.Column() = wkSheet.Range("A1", .Range("A1").End(xlToRight)).Text
        iEndColumn = .Range("A1").End(xlToRight).Column
        If iEndColumn >= giMaxColumnsNum Then Exit Sub
        For i = 1 To iEndColumn
             ListBoxX0.AddItem .cells(1, i)
        Next i
        ListBoxY1.Column() = ListBoxX0.Column()
        ListBoxY2.Column() = ListBoxX0.Column()
        
        iColumnX = gfGetColumnNumber(wksheet, gbLastXColumnName)
        iColumnY1 = gfGetColumnNumber(wksheet, gbLastY1ColumnName)
        iColumnY2 = gfGetColumnNumber(wksheet, gbLastY2ColumnName)
        
        If InStr(1, .Name, gbChannelName) > 0 Then
            If iColumnX = -1 Then iColumnX = gfGetColumnNumber(wksheet, gbTestTimeName)
            If iColumnX = -1 Then iColumnX = gfGetColumnNumberInstr(wksheet, "Time")   'X0
            If iColumnY1 = -1 Then iColumnY1 = gfGetColumnNumberInstr(wksheet, gbCurrentName)
        ElseIf InStr(1, .Name, gbStatisticsName) > 0 Then
            If iColumnX = -1 Then iColumnX = gfGetColumnNumber(wksheet, gbCycleIndexName)
            If iColumnX = -1 Then iColumnX = gfGetColumnNumberInstr(wksheet, "Cycle")
            If iColumnY1 = -1 Then iColumnY1 = gfGetColumnNumberInstr(wksheet, "Charge") '"Charge_Capacity"
        ElseIf InStr(1, .Name, gbSmartBatteryName) > 0 Then
            If iColumnX = -1 Then iColumnX = gfGetColumnNumber(wksheet, gbDataPointName)
            If iColumnX = -1 Then iColumnX = gfGetColumnNumberInstr(wksheet, "Point")
            If iColumnY1 = -1 Then iColumnY1 = gfGetColumnNumberInstr(wksheet, gbCurrentName)
        Else
            If iColumnX = -1 Then iColumnX = gfGetColumnNumberInstr(wksheet, "Time")   'X0
            If iColumnX = -1 Then iColumnX = gfGetColumnNumberInstr(wksheet, "Cycle")
            If iColumnY1 = -1 Then iColumnY1 = gfGetColumnNumberInstr(wksheet, gbCurrentName)
            If iColumnY1 = -1 Then iColumnY1 = gfGetColumnNumberInstr(wksheet, "Charge")
        End If
        If gbFirstChooseY2 Then
            iColumnY2 = gfGetColumnNumberInstr(wksheet, gbVoltageName)
            gbLastY2ColumnName = gbVoltageName
            gbFirstChooseY2 = False
        End If
        If iColumnX <> -1 Then
            ListBoxX0.Selected(iColumnX - 1) = True
        Else
            If iEndColumn >= 1 Then ListBoxX0.Selected(0) = True
        End If
        'If iColumnY1 <> -1 And iColumnY1 < 8 Then ListBoxY1.Selected(iColumnY1 - 1) = True
        'If iColumnY2 <> -1 And iColumnY2 < 8 Then ListBoxY2.Selected(iColumnY2 - 1) = True
        If iColumnY1 <> -1 Then
            ListBoxY1.Selected(iColumnY1 - 1) = True
        Else
            If iEndColumn >= 1 Then ListBoxY1.Selected(0) = True
        End If
        If iColumnY2 <> -1 Then
            ListBoxY2.Selected(iColumnY2 - 1) = True
        End If
        gbbY1OutLine = False
        gbbY2OutLine = False
        If iColumnY1 > gbiY1OutLine Then gbbY1OutLine = True
        If iColumnY2 > gbiY2OutLine Then gbbY2OutLine = True
    End With
End Sub

Function gfTextBoxCheckFromToValue(strMsg As String, TextBoxFrom As Object, TextBoxTo As Object, _
    lMinFrom As Long, lMaxTo As Long) As Boolean
        Dim iEdit1 As Integer, iEdit2 As Integer, lFrom As Long, lTo As Long
        gfTextBoxCheckFromToValue = False
        lFrom = Val(TextBoxFrom.Value):        lTo = Val(TextBoxTo.Value)
        If lFrom < lMinFrom Or lFrom > lMaxTo Then
            gbMsgBoxPrompt = "(From Value) in " & strMsg & " must be >=" & lMinFrom & " and <= " & lMaxTo
            gbiMsgBoxResponse = MsgBox(gbMsgBoxPrompt, vbInformation)
            TextBoxFrom.Value = lMinFrom
            TextBoxFrom.SetFocus
            Exit Function
        End If
        If lTo < lFrom Or lTo > lMaxTo Then
            gbMsgBoxPrompt = "(To Value) in " & strMsg & " must be >= " & lFrom & " and <= " & lMaxTo
            gbiMsgBoxResponse = MsgBox(gbMsgBoxPrompt, vbInformation)
            TextBoxTo.Value = lMaxTo
            TextBoxTo.SetFocus
            Exit Function
        End If
        gfTextBoxCheckFromToValue = True
End Function

Sub gfListBoxAddSelectedItems(ListBoxSource As Control, ListBoxObject As Control)
    Dim i As Integer
    For i = 0 To ListBoxSource.ListCount - 1
        If ListBoxSource.Selected(i) Then
            ListBoxObject.AddItem ListBoxSource.List(i)
            ListBoxObject.List(ListBoxObject.ListCount - 1, 1) = _
             ListBoxSource.List(i, 1)
        End If
    Next i
End Sub

Function gfComboBoxPlotStyleInit(ComboBoxPlotStyle As Control)
    With ComboBoxPlotStyle
        .Clear
        .AddItem "ScatterLinesNoMarkers"
        .AddItem "Scatter"
        .AddItem "ScatterLines"
        .AddItem "ScatterSmooth"
        .AddItem "ScatterSmoothNoMarkers"
        .Style = fmStyleDropDownList  'Use drop-down list
        .BoundColumn = 0            'Combo box values are ListIndex values
        .ListIndex = gptPlotTypeIndex              'Set combo box to first entry
    End With
End Function

Sub gfComboBoxPlotStyleClick(ComboBoxPlotStyle As Control)
    Select Case ComboBoxPlotStyle.ListIndex
        Case 0
            gptPlotType = xlXYScatterLinesNoMarkers
        Case 1
            gptPlotType = xlXYScatter
        Case 2
            gptPlotType = xlXYScatterLines
        Case 3
            gptPlotType = xlXYScatterSmooth
        Case 4
            gptPlotType = xlXYScatterSmoothNoMarkers
    End Select
    gptPlotTypeIndex = ComboBoxPlotStyle.ListIndex
End Sub

Function gfComboBoxTimeUnitInit(ComboBox1 As Control)
    With ComboBox1
        .Clear
        .AddItem "hh:mm:ss"
        .AddItem "Second"
        .AddItem "mm:ss"
        .AddItem "hh:mm"
        .AddItem "Day"
        '.BoundColumn = 0
        .ListIndex = gptTimeUnitIndex              'Set combo box to first entry
    End With
End Function

Sub gfComboBoxTimeUnitClick(ComboBox1 As Control)
    Select Case ComboBox1.ListIndex
        Case 0
            gptTimeUnit = "[h]:mm:ss"
        Case 1
            gptTimeUnit = "[s]"
        Case 2
            gptTimeUnit = "[m]:ss"
        Case 3
            gptTimeUnit = "[h]:mm"
        Case 4
            gptTimeUnit = "General"
    End Select
    gptTimeUnitIndex = ComboBox1.ListIndex
    gptTimeUnitTitle = ComboBox1.List(gptTimeUnitIndex)
End Sub

Function gfListBoxSelectedAtLeastOne(ListBoxObject As Object) As Boolean
    Dim i As Integer
    gfListBoxSelectedAtLeastOne = False
    For i = 0 To ListBoxObject.ListCount - 1
        If ListBoxObject.Selected(i) = True Then
            gfListBoxSelectedAtLeastOne = True
            Exit For
        End If
    Next i
End Function

Function gfListBoxFindFirstSelected(ListBoxObject As Object, FromIndex As Integer, _
    FindFirstIndex As Integer, FindFirstString As String) As Boolean
    Dim i As Integer
    gfListBoxFindFirstSelected = False
    For i = FromIndex To ListBoxObject.ListCount - 1
        If ListBoxObject.Selected(i) = True Then
            FindFirstIndex = i
            FindFirstString = ListBoxObject.List(i)
            gfListBoxFindFirstSelected = True
            Exit For
        End If
    Next i
End Function

Function gfListBoxClearSelected(ListBoxObject As Object)
    Dim i As Integer
    With ListBoxObject
        For i = 0 To .ListCount - 1
            If .Selected(i) Then
                .Selected(i) = False
            End If
        Next i
    End With
End Function

Function gfListBoxSelectNext(ListBoxObject As Object)
    With ListBoxObject
        If .ListIndex < .ListCount - 1 Then
            .Selected(.ListIndex + 1) = True
        ElseIf .ListCount > 0 Then
            .Selected(0) = True
        End If
    End With
End Function

Sub gfLabelBeforeDropOrPaste(ListBoxSource As Control, LabelObject As Object, _
    ByVal Cancel As MSForms.ReturnBoolean, ByVal Effect As MSForms.ReturnEffect)
    Dim i As Integer
    Cancel = True:    Effect = 1
    With ListBoxSource
        For i = 0 To .ListCount - 1
            If .Selected(i) Then
                LabelObject.Caption = .List(i):  Exit For
            End If
        Next i
    End With
End Sub

Sub gfLabelClickGetListBoxText(ListBoxSource As Control, LabelObject As Object)
    Dim i As Integer
    With ListBoxSource
        For i = 0 To .ListCount - 1
            If .Selected(i) Then
                LabelObject.Caption = .List(i)
                Exit For
            End If
        Next i
    End With
End Sub

Function gfGetListBoxIndex(ListBoxSource As Control, strName As String) As Integer
    Dim i As Integer
    gfGetListBoxIndex = -1
    For i = 0 To ListBoxSource.ListCount - 1
        If InStr(1, ListBoxSource.List(i), strName) > 0 Then
            gfGetListBoxIndex = i
            Exit For
        End If
    Next i
End Function

Function gfGetListBoxText(ListBoxSource As Control, strName As String) As String
    Dim i As Integer
    gfGetListBoxText = ""
    For i = 0 To ListBoxSource.ListCount - 1
        If InStr(1, ListBoxSource.List(i), strName) > 0 Then
            gfGetListBoxText = ListBoxSource.List(i)
            Exit For
        End If
    Next i
End Function

Function gfGetgbStatisticsNameBywkBook(wkbook As Excel.Workbook) As String
    Dim wksheet As Excel.Worksheet, strName As String
    'Compatible with Statistic name
    gfGetgbStatisticsNameBywkBook = gbStatisticName
    With wkbook
        For Each wksheet In .Worksheets
            strName = wksheet.Name
            If InStr(1, strName, gbStatisticName & "s") > 0 Then
                gfGetgbStatisticsNameBywkBook = gbStatisticName & "s"
                Exit For
            End If
        Next wksheet
    End With
End Function

Function Test111()
    Dim iColumn As Integer, lRowIndex As Long
    Dim sTimeFactor As Single, sTimeFactor1 As Single
    iColumn = 15: sTimeFactor = 1# / (3600# * 24#)
    With ActiveSheet
        For lRowIndex = 2 To .cells(1, 1).End(xlDown).Row
            .cells(lRowIndex, iColumn) = .cells(lRowIndex, 2) * sTimeFactor
        Next lRowIndex
    End With
End Function

Attribute VB_Name = "ModuleStartUp"
Option Explicit

Private Declare Function apiOpenProcess Lib "Kernel32" Alias "OpenProcess" _
(ByVal dwDesiredAccess As Long, ByVal bInheritHandle As Long, ByVal dwProcessId As Long) As Long

Private Declare Function apiGetActiveWindow Lib "user32" Alias "GetActiveWindow" () As Long

Private Declare Function apiSetPriorityClass Lib "Kernel32" Alias "SetPriorityClass" _
(ByVal hProcess As Long, ByVal dwPriorityClass As Long) As Long

Private Declare Function apiGetPriorityClass Lib "Kernel32" Alias "GetPriorityClass" (ByVal hProcess As Long) As Long

Private Declare Function apiGetWindowThreadProcessId Lib "user32" Alias "GetWindowThreadProcessId" (ByVal hWnd As Long, lpdwProcessId As Long) As Long

Private Declare Function apiCloseHandle Lib "Kernel32" Alias "CloseHandle" (ByVal hObject As Long) As Long

Private Declare Function GetVersion Lib "Kernel32" () As Long
Private Const PROCESS_QUERY_INFORMATION = &H400
Private Const PROCESS_SET_INFORMATION = &H200

Public Const BELOW_NORMAL_PRIORITY_CLASS = &H4000
Public Const ABOVE_NORMAL_PRIORITY_CLASS = &H8000
Public Const NORMAL_PRIORITY_CLASS = &H20
Public Const IDLE_PRIORITY_CLASS = &H40
Public Const HIGH_NORMAL_PRIORITY_CLASS = &H80
Public Const REALTIME_NORMAL_PRIORITY_CLASS = &H100

Public Const REG_SZ As Long = 1
Public Const REG_DWORD As Long = 4

Public Const HKEY_CLASSES_ROOT = &H80000000
Public Const HKEY_CURRENT_USER = &H80000001
Public Const HKEY_LOCAL_MACHINE = &H80000002
Public Const HKEY_USERS = &H80000003

Public Const ERROR_NONE = 0
Public Const ERROR_BADDB = 1
Public Const ERROR_BADKEY = 2
Public Const ERROR_CANTOPEN = 3
Public Const ERROR_CANTREAD = 4
Public Const ERROR_CANTWRITE = 5
Public Const ERROR_OUTOFMEMORY = 6
Public Const ERROR_INVALID_PARAMETER = 7
Public Const ERROR_ACCESS_DENIED = 8
Public Const ERROR_INVALID_PARAMETERS = 87
Public Const ERROR_NO_MORE_ITEMS = 259
Public Const KEY_QUERY_VALUE = &H1
Public Const KEY_ALL_ACCESS = &H3F
Public Const REG_OPTION_NON_VOLATILE = 0

Private Declare Function RegCloseKey Lib "advapi32.dll" _
    (ByVal hKey As Long) As Long

Private Declare Function RegCreateKeyEx Lib "advapi32.dll" Alias _
    "RegCreateKeyExA" (ByVal hKey As Long, ByVal lpSubKey As String, _
    ByVal Reserved As Long, ByVal lpClass As String, ByVal dwOptions _
    As Long, ByVal samDesired As Long, ByVal lpSecurityAttributes _
    As Long, phkResult As Long, lpdwDisposition As Long) As Long

Private Declare Function RegOpenKeyEx Lib "advapi32.dll" Alias _
    "RegOpenKeyExA" (ByVal hKey As Long, ByVal lpSubKey As String, _
    ByVal ulOptions As Long, ByVal samDesired As Long, phkResult As _
    Long) As Long

Private Declare Function RegQueryValueExString Lib "advapi32.dll" Alias _
    "RegQueryValueExA" (ByVal hKey As Long, ByVal lpValueName As _
    String, ByVal lpReserved As Long, lpType As Long, ByVal lpData _
    As String, lpcbData As Long) As Long

Private Declare Function RegQueryValueExLong Lib "advapi32.dll" Alias _
    "RegQueryValueExA" (ByVal hKey As Long, ByVal lpValueName As _
    String, ByVal lpReserved As Long, lpType As Long, lpData As _
    Long, lpcbData As Long) As Long

Private Declare Function RegQueryValueExNULL Lib "advapi32.dll" Alias _
    "RegQueryValueExA" (ByVal hKey As Long, ByVal lpValueName As _
    String, ByVal lpReserved As Long, lpType As Long, ByVal lpData _
    As Long, lpcbData As Long) As Long

Private Declare Function RegSetValueExString Lib "advapi32.dll" Alias _
    "RegSetValueExA" (ByVal hKey As Long, ByVal lpValueName As String, _
    ByVal Reserved As Long, ByVal dwType As Long, ByVal lpValue As _
    String, ByVal cbData As Long) As Long

Private Declare Function RegSetValueExLong Lib "advapi32.dll" Alias _
    "RegSetValueExA" (ByVal hKey As Long, ByVal lpValueName As String, _
    ByVal Reserved As Long, ByVal dwType As Long, lpValue As Long, _
    ByVal cbData As Long) As Long
Private Declare Function RegDeleteKey Lib "advapi32.dll" Alias "RegDeleteKeyA" (ByVal hKey As Long, ByVal lpSubKey As String) As Long
Private Declare Function RegDeleteValue Lib "advapi32.dll" Alias "RegDeleteValueA" (ByVal hKey As Long, ByVal lpValueName As String) As Long

Private Declare Function FindWindow Lib "user32" Alias _
"FindWindowA" (ByVal lpClassName As String, ByVal _
lpWindowName As String) As Long

Function IsMitsProRunning() As Long
Dim strClassName As String
Dim strCaption As String
Dim mHandle As Long
IsMitsProRunning = 0
strClassName = vbNullString
strCaption = "MITS Pro - Arbin Instruments"
IsMitsProRunning = FindWindow(strClassName, strCaption)
End Function

Function fIsW2KAbove() As Boolean
Dim VersionNum As Long
Dim nOSMajorVersion As Integer
fIsW2KAbove = False
VersionNum = GetVersion()
nOSMajorVersion = VersionNum And &HFF
If nOSMajorVersion >= 5 Then fIsW2KAbove = True
End Function

Function fChangeAccessPriority(lngPriority As Long) As Boolean
On Error GoTo ErrHandler
Dim lpProcessID As Long
Dim hProcess As Long
Dim lngRet As Long
Dim hWndExcelApp As Long

hWndExcelApp = apiGetActiveWindow()

Call apiGetWindowThreadProcessId(hWndExcelApp, lpProcessID)
hProcess = apiOpenProcess(PROCESS_QUERY_INFORMATION Or PROCESS_SET_INFORMATION, False, lpProcessID)
If Not hProcess = 0 Then
    lngRet = apiGetPriorityClass(hProcess)
    If Not lngRet = lngPriority Then
        lngRet = apiSetPriorityClass(hProcess, lngPriority)
        fChangeAccessPriority = Not (lngRet = 0)
        Else
        fChangeAccessPriority = True
    End If
End If
    Call apiCloseHandle(hProcess)
ExitHere:
    Exit Function
ErrHandler:
    fChangeAccessPriority = False
    Resume ExitHere
End Function

Function fGetExcelPriority() As Long
Dim lpProcessID As Long
Dim hProcess As Long
Dim hWndExcelApp As Long
hWndExcelApp = apiGetActiveWindow()
fGetExcelPriority = 0
Call apiGetWindowThreadProcessId(hWndExcelApp, lpProcessID)
hProcess = apiOpenProcess(PROCESS_QUERY_INFORMATION Or PROCESS_SET_INFORMATION, False, lpProcessID)
If Not hProcess = 0 Then
    fGetExcelPriority = apiGetPriorityClass(hProcess)
End If
End Function



Public Function SetValueEx(ByVal hKey As Long, sValueName As String, _
lType As Long, vValue As Variant) As Long
    Dim lValue As Long
    Dim sValue As String
    Select Case lType
        Case REG_SZ
            sValue = vValue
            SetValueEx = RegSetValueExString(hKey, sValueName, 0&, _
lType, sValue, Len(sValue))
        Case REG_DWORD
            lValue = vValue
            SetValueEx = RegSetValueExLong(hKey, sValueName, 0&, _
lType, lValue, 4)
        End Select
End Function

Function QueryValueEx(ByVal lhKey As Long, ByVal szValueName As _
String, vValue As Variant) As Long
    Dim cch As Long
    Dim lrc As Long
    Dim lType As Long
    Dim lValue As Long
    Dim sValue As String

    On Error GoTo QueryValueExError

    ' Determine the size and type of data to be read
    lrc = RegQueryValueExNULL(lhKey, szValueName, 0&, lType, 0&, cch)
    If lrc <> ERROR_NONE Then Error 5

    Select Case lType
        ' For strings
        Case REG_SZ:
            sValue = String(cch, 0)
            lrc = RegQueryValueExString(lhKey, szValueName, 0&, lType, _
                    sValue, cch)
            If lrc = ERROR_NONE Then
                vValue = Left$(sValue, cch - 1)
            Else
                vValue = Empty
            End If
        ' For DWORDS
        Case REG_DWORD:
            lrc = RegQueryValueExLong(lhKey, szValueName, 0&, lType, _
                    lValue, cch)
            If lrc = ERROR_NONE Then vValue = lValue
        Case Else
            'all other data types not supported
            lrc = -1
    End Select

QueryValueExExit:
    QueryValueEx = lrc
    Exit Function
QueryValueExError:
    Resume QueryValueExExit
End Function

Public Function QueryValue(ByVal hKey As Long, sKeyName As String, sValueName As String) As String
    Dim lRetVal As Long         'result of the API functions
    Dim vValue As Variant      'setting of queried value
    Dim hOpenKey As Long
    lRetVal = RegOpenKeyEx(hKey, sKeyName, 0, KEY_QUERY_VALUE, _
hOpenKey)
    lRetVal = QueryValueEx(hOpenKey, sValueName, vValue)
    RegCloseKey (hOpenKey)
    QueryValue = vValue
End Function

Public Sub SetKeyValue(ByVal hKey As Long, sKeyName As String, _
                sValueName As String, vValueSetting As Variant, _
lValueType As Long)
    Dim lRetVal As Long         'result of the SetValueEx function
    Dim hOpenKey As Long         'handle of open key

    'open the specified key
    lRetVal = RegOpenKeyEx(hKey, sKeyName, 0, KEY_ALL_ACCESS, hOpenKey)
    lRetVal = SetValueEx(hOpenKey, sValueName, lValueType, vValueSetting)
    RegCloseKey (hOpenKey)
End Sub

Public Sub DeleteOpenOption()
Dim lRetVal As Long, hOpenKey As Long
On Error Resume Next
lRetVal = RegOpenKeyEx(HKEY_CURRENT_USER, "Software\Microsoft\Office\9.0\Excel\Options", 0, KEY_ALL_ACCESS, hOpenKey)
lRetVal = RegDeleteValue(hOpenKey, "OPEN")
lRetVal = RegCloseKey(hOpenKey)
On Error Resume Next
lRetVal = RegOpenKeyEx(HKEY_CURRENT_USER, "Software\Microsoft\Office\8.0\Excel\Options", 0, KEY_ALL_ACCESS, hOpenKey)
lRetVal = RegDeleteValue(hOpenKey, "OPEN")
lRetVal = RegCloseKey(hOpenKey)
End Sub
Attribute VB_Name = "MultiImport"
Attribute VB_Base = "0{ED7A7CE8-8EE9-4C26-9936-F0ED3C4E6BED}{97B70CE4-64F7-4F94-AAB8-18D471283F91}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Option Base 1
Dim tOptionEdit1 As gMyTypeOptionEdit
Dim tGlobal_Table1 As gMyTypeGlobal_Table
Dim InfoStr$
Dim bIsOverWrite As Boolean
Dim bExitAsked As Boolean
Dim LastListViewSortColumn As Integer
Dim TestNameArray() As String
Dim iListViewChanInfoCount As Integer
Dim fListBoxViewHeight As Single
Dim mTestName As String
Dim mbIsMultifile As Boolean
Dim mMultifileName As String
Dim mbIsPlotAfterImport As Boolean
Dim mPreSheetName As String
Dim bLockImportData As Boolean
Dim mResponse As Integer
Dim IsRunning As Boolean

Private Sub CmdCancel_Click()
    IsRunning = False
    Unload Me
End Sub


Private Sub cmdfileAdd_Click()
Call lblFolder_Click
End Sub

Private Sub cmdFileRemove_Click()
Dim i As Integer, iListCount As Integer

With ListBoxSelectedFiles
i = .ListCount
Do While i > 0

    If .Selected(i - 1) = True Then .RemoveItem (i - 1)
    i = i - 1
Loop

End With
Err_Exit:
End Sub

Private Sub CmdImport_Click()
    Dim wbNew As Workbook
    Dim sTimeStart As Single, sTimefinish As Single
    'Dim bSelectFlag As Boolean
    Dim i As Integer, j As Integer
    Dim iChannelList As Integer, iChanI As Integer
    Dim iTest_ID As Integer
    Dim strDaqChannelNum As String
    Dim strQry As String
    Dim recTemp1 As Recordset, recSQL As Recordset
    Dim strFilter As String
    Dim bNoTestID As Boolean
    Dim iChan As Integer
    'Dim wkSheetName As String
    'Dim iCellNum As Integer
    Dim iMaxCellNum As Integer
    Dim iDecimalPlacesBak As Integer
    Dim SQLQry As String
    Dim TestID
    Dim Query
    Dim ChannelNum As String
    Dim mFileNameOutput As String
    Dim bSuccess As Boolean
    If gbIsImporting Then Exit Sub

    Application.StatusBar = "Importing Multi-file Data..."
    gbIsImporting = True
    mFileNameOutput = ThisWorkbook.Path & "\DellAllInOne.xls"
    'If file is locked, when using network drive, give Error Message
    
    On Error GoTo UserForm_SaveAs_Error
    Set wbNew = Workbooks.Add
    wbNew.SaveAs filename:=mFileNameOutput
    On Error GoTo 0
    DoEvents
    Application.DisplayAlerts = True
    Application.ScreenUpdating = False

    For i = 0 To ListBoxSelectChans.ListCount - 1
        With ActiveSheet

            ChannelNum = ListBoxSelectChans.List(i, 0)
            Set gDB = DBEngine.OpenDatabase(ListBoxSelectChans.List(i, 2), False, True)
            'SmartBattery
            SQLQry = "Select " & _
                " sb.Data_Point," & _
                " cc.Test_Time as [" & gbTestTimeName & "]," & _
                " cc.Step_Time as [" & gbStepTimeName & "]," & _
                " sb.Current as [" & gbCurrentName & "]," & _
                " sb.Voltage as [" & gbVoltageName & "]," & _
                " sb.Temperature as [" & gbTemperatureName & "]," & _
                " sb.AverageCurrent as [AverageCurrent(A)]," & _
                " sb.CycleCount," & _
                " sb.RemainingCapacityAlarm as [RemainingCapacityAlarm(mWH or 10mWH)], " & _
                " sb.RemainingTimeAlarm as [RemainingTimeAlarm(s)]," & _
                " '0x' & hex(sb.BatteryMode) as BatteryMode,sb.AtRate as [AtRate(A or 10W)]," & _
                " sb.AtRateTimeToFull as [AtRateTimeToFull(s)]," & _
                " sb.AtRateTimeToEmpty as [AtRateTimeToEmpty(s)]," & _
                " sb.AtRateOK,sb.MaxError," & _
                " sb.RelativeStateOfCharge as [RelativeStateOfCharge(%)]," & _
                " sb.AbsoluteStateOfCharge as [AbsoluteStateOfCharge(%)]," & _
                " sb.RemainingCapacity as [RemainingCapacity(mWH or 10mWH)]," & _
                " sb.RunTimeToEmpty as [RunTimeToEmpty(s)]," & _
                " sb.AverageTimeToEmpty as [AverageTimeToEmpty(s)]," & _
                " sb.AverageTimeToFull as [AverageTimeToFull(s)]," & _
                " ('0x' & Hex([sb.BatteryStatus])) as [BatteryStatus]," & _
                " ('0x' & hex([sb.Pack_Status])) as Pack_Status,hex(sb.Pack_Configuration) as Pack_Configuration,sb.VCELL4,sb.VCELL3,sb.VCELL2,sb.VCELL1"
            SQLQry = SQLQry & ",sb.ManufacturerAccess,sb.FullChargeCapacity "
            SQLQry = SQLQry & ",sb.BroadCast,sb.GPIO1,sb.GPIO2 "
            'BatteryMode, BatteryStatus
            SQLQry = SQLQry & " FROM (Global_Table as gg INNER JOIN Channel_Normal_Table as cc ON gg.Test_ID = cc.Test_ID) "
            SQLQry = SQLQry & " INNER JOIN Smart_Battery_Data_Table as sb ON (gg.Test_ID = sb.Test_ID)"
            SQLQry = SQLQry & " AND (cc.Data_Point = sb.Data_Point) AND (cc.Test_ID = sb.Test_ID)"
            SQLQry = SQLQry & " WHERE gg.Channel_Index= " & Val(Right(ChannelNum, 3))
            SQLQry = SQLQry & " ORDER BY sb.Data_Point;"
            bSuccess = ReadRecordToSheetLoop(gbSmartBatteryName & "_" & ChannelNum, SQLQry, 1)
            Set recSQL = Nothing
            gDB.Close
     End With

     DoEvents
     Next i
    gbIsImporting = False
            Application.ScreenUpdating = True
    Application.DisplayAlerts = False
   Call gfDeleteDefaultSheet123(ActiveWorkbook)
   Call FormatwkBookCellsColor
'   If ActiveWorkbook.Worksheets.Count <= 1 And mbIsMultifile = True Then
'       Call gDBClose
'       If Not gDBOpen(gFileNameInput) Then GoTo UnLockImportData_Exit
'       lblFolder.Caption = gFileNameInput
'       mbIsMultifile = False
'       DoEvents
'       If HasSheetOf(gbInfoSheetName) Then
'           Sheets(gbInfoSheetName).Name = gbInfoSheetName & "1"
'       End If
'       Call MakeInfoSheetHead
'       If HasSheetOf(gbInfoSheetName) And HasSheetOf(gbInfoSheetName & "1") Then
'           Sheets(gbInfoSheetName & "1").Delete
'       End If
'       GoTo TryImportAgain
'   End If
   gbbHasHighPulseData = False
   If gbbHasHighPulseData = True Then
       iDecimalPlacesBak = giDecimalPlaces(1)
       If giDecimalPlaces(1) < gbiTimeForHighPulseData And giDecimalPlaces(1) <> -1 Then
           giDecimalPlaces(1) = gbiTimeForHighPulseData  'TestTime
           giDecimalPlaces(2) = giDecimalPlaces(1)  'StepTime
       End If
   End If
   If gbbHasHighPulseData = True Then
       giDecimalPlaces(1) = iDecimalPlacesBak
       giDecimalPlaces(2) = giDecimalPlaces(1)
   End If
   Call FormatDecimalPlaces
   gbExistDataSheetAfterImport = gfSelectChannelSheet(ActiveWorkbook, mPreSheetName)
    If gbExistDataSheetAfterImport = False Then
        If mPreSheetName = gbSmartBatteryName Then
            mPreSheetName = gbChannelName
            gbExistDataSheetAfterImport = gfSelectChannelSheet(ActiveWorkbook, mPreSheetName)
        End If
    End If
   'For PPG Begin
    If gbPPGOn Then
        Call PPGMain
    End If
   'For PPG End
   Application.DisplayAlerts = True
    
    sTimefinish = Timer
   
    If ActiveWorkbook.Worksheets.Count > 1 Then
        Application.StatusBar = "Save Data to " & gFileNameOutput & " file."
        ActiveWorkbook.Save
        Application.StatusBar = "Imported from " & lblFolder.Caption
    Else
       gbNeedRefreshImportDialog = True
'       Call GiveSuggestMsg
   End If
    
ImportData_Exit:
'    Call InterfaceMiscEnd
    Call gDBClose
    gbIsImporting = False
    Application.StatusBar = "Ready!"
    Me.Hide
    On Error GoTo 0
    
    Exit Sub
    

UserForm_SaveAs_Error:
    If Err.Number = 1004 Then
        MsgBox mFileNameOutput & "already opened, please close or save as another file and try again "
        Workbooks(wbNew.Name).Close SaveChanges:=False
    End If
    Resume ImportData_Exit

End Sub

Private Sub lblFolder_Click()
Dim fs, iFileCount As Integer, DataFilePath As String
Dim strFileName As String, iFileNameLen As Integer, iPathLen As Integer, i As Integer
Dim bFind As Boolean
fs = Application.GetOpenFilename("MITS Pro/2000/97 Files (*.res), *.res", 5, "Open MITS Pro/2000/97 File", , True)
On Error GoTo Err_Exit
'ListBoxSelectedFiles.Clear
If LBound(fs) Then
    With ListBoxSelectedFiles

    strFileName = fs(1)
    DataFilePath = fGetDataDir(strFileName)
    lblFolder.Caption = DataFilePath
    iPathLen = Len(DataFilePath) + 1
        For i = 0 To ListBoxSelectedFiles.ListCount - 1
                .Selected(i) = False
                .SetFocus
        Next i
    
    For iFileCount = 1 To UBound(fs)
        strFileName = fs(iFileCount)
        iFileNameLen = Len(strFileName)
        
        bFind = False
        .MultiSelect = fmMultiSelectMulti
       
        If ListBoxSelectedFiles.ListCount > 0 Then
        For i = 0 To ListBoxSelectedFiles.ListCount - 1
            If ListBoxSelectedFiles.List(i) = strFileName Then
                .Selected(i) = True
                bFind = True
                .SetFocus
                Exit For
            End If
            
        Next i
        End If
        If bFind = False Then
            .AddItem strFileName
            .Selected(.ListCount - 1) = True
            .SetFocus
        End If
    Next iFileCount
    End With
End If
Err_Exit:
End Sub



Private Sub ListBoxSelectChans_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
If ListBoxSelectChans.ListCount > 0 Then
    ListBoxSelectChans.RemoveItem ListBoxSelectChans.ListIndex
End If

End Sub

Private Sub ListViewChanInfo_DblClick()
    Dim mChan(48), mCurrChNo As String, iCount As Integer
    With ListBoxSelectChans
    mCurrChNo = ListViewChanInfo.SelectedItem.SubItems(1)
    For iCount = 1 To .ListCount
        mChan(iCount) = .List(iCount - 1, 0)
    Next iCount
    If fFindIndex(mCurrChNo, mChan) = 0 Then
        If ListViewChanInfo.ListItems.Count > 0 Then
            .AddItem
            .List(.ListCount - 1, 0) = ListViewChanInfo.SelectedItem.SubItems(1)
            .List(.ListCount - 1, 1) = ListViewChanInfo.SelectedItem.SubItems(5)
            .List(.ListCount - 1, 2) = ListViewChanInfo.SelectedItem.SubItems(6)
        End If
        Else
            MsgBox ("Please pay Attention for duplicated Channel Number!")
    End If
    End With

End Sub

Private Sub UserForm_Initialize()
    ListBoxSelectedFiles.Clear
    ListBoxSelectChans.Clear
End Sub

Private Sub ListBoxSelectedFiles_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    Dim DateBaseName As String
    With ListBoxSelectedFiles
    If .ListCount > 0 Then
        DateBaseName = .List(ListBoxSelectedFiles.ListIndex)
        Call QueryTestName(DateBaseName)
    End If
    End With
'    Call PutListBoxChannelIndex
End Sub

Private Sub QueryTestName(DBFileName As String)
    Dim TestName As String, strQry As String, strLastName As String
    Dim fldTest As Field, fldTime As Field, fldSdu As Field, fldCom As Field
    Dim fldID As Field, fldCell As Field, fldItemID As Field
    Dim recTemp1 As Recordset
    Dim itmX As ListItem
    Dim i As Integer
    Dim fVerSchema As Single
    Dim tTime As Variant, tData_Type As Variant
    Dim strDaqChannelNum As String, iChanI As Integer, bNoTestID As Boolean
    Dim strFilter As String, iTest_ID As Integer, iMaxCellNum As Integer
    
    Me.MousePointer = fmMousePointerHourGlass
    Application.StatusBar = "Querying Test Name from " & DBFileName & " file."
    If gDBOpen(DBFileName) Then
       
        Call ReadResultVersionTable
        fVerSchema = gbfVerSchema
        'ListViewTestName
        strQry = "SELECT [Test_Name], " _
            & " Start_DateTime, Schedule_File_Name, Comments, Test_ID"
        'If fVerSchema < 1.11 Then strQry = strQry & ", Cell_Number"
        If fVerSchema >= 1.1 Then strQry = strQry & ", Item_ID"
        strQry = strQry & " FROM Global_Table ORDER BY [Test_Name];"
        
        Set recTemp1 = gDellDataDB.OpenRecordset(strQry, dbOpenForwardOnly, dbReadOnly)
        Set fldTest = recTemp1.Fields(0)
        Set fldTime = recTemp1.Fields(1)
        Set fldSdu = recTemp1.Fields(2)
        Set fldCom = recTemp1.Fields(3)
        Set fldID = recTemp1.Fields(4)
        'Set fldCell = recTemp1.Fields(5)
        'If fVerSchema >= 1.1 Then Set fldItemID = recTemp1.Fields(6)
        If fVerSchema >= 1.1 Then Set fldItemID = recTemp1.Fields(5)
        ListViewChanInfo.ListItems.Clear
        On Error Resume Next
        While Not recTemp1.EOF
            TestName = Left$(fldTest, Len(fldTest) - 7)
            Set itmX = ListViewChanInfo.ListItems.Add(, , TestName)
            'itmX.Key = CStr(fldID) & "-" & Format$(CStr(fldCell), "000")
            itmX.Key = CStr(fldID) & "-000"
            itmX.SubItems(1) = Right$(fldTest, 5)
            If Not IsNull(fldTime) Then
                'itmX.SubItems(1) = CStr(recTemp1!Start_DateTime)
                itmX.SubItems(2) = Format$(fldTime, "yyyy/mm/dd hh:mm:ss")
                If fldTime > tTime Then
                    tTime = fldTime
                End If
            Else
                itmX.SubItems(2) = ""
            End If
            If Not IsNull(fldSdu) Then
                itmX.SubItems(3) = CStr(fldSdu)
            Else
                itmX.SubItems(3) = ""
            End If
            If Not IsNull(fldCom) Then
                itmX.SubItems(4) = fldCom
            Else
                itmX.SubItems(4) = ""
            End If
            itmX.SubItems(5) = ""
            If fVerSchema >= 1.1 Then
                If Not IsNull(fldItemID) Then
                    itmX.SubItems(5) = fldItemID
                End If
            End If
            itmX.SubItems(6) = DBFileName
            strLastName = TestName
            recTemp1.MoveNext
         Wend
         
         iListViewChanInfoCount = ListViewChanInfo.ListItems.Count
         ReDim TestNameArray(iListViewChanInfoCount, 5)
         For i = 1 To iListViewChanInfoCount
            TestNameArray(i, 1) = ListViewChanInfo.ListItems.Item(i).Text
            TestNameArray(i, 2) = ListViewChanInfo.ListItems.Item(i).SubItems(1)
            TestNameArray(i, 3) = ListViewChanInfo.ListItems.Item(i).Key
            TestNameArray(i, 4) = ""
            If fVerSchema >= 1.1 Then
                TestNameArray(i, 4) = ListViewChanInfo.ListItems.Item(i).SubItems(5)
            End If
            TestNameArray(i, 5) = ListViewChanInfo.ListItems.Item(i).SubItems(6)
         Next i
        recTemp1.Close
        Set recTemp1 = Nothing
        
        ListViewChanInfo.Refresh
        If iListViewChanInfoCount >= 1 Then ListViewChanInfo.ListItems.Item(1).Selected = False
        On Error GoTo 0
    End If
    
    Me.MousePointer = fmMousePointerDefault
    'make simple view the active view
    Me.Repaint
    Application.StatusBar = "Ready"
End Sub

Private Function gDBOpen(DBFileName As String) As Boolean
    Call gDBClose
    gDBOpen = False
    On Error GoTo gDBOpen_Error
        Set gDellDataDB = DBEngine.OpenDatabase(DBFileName, False, True)
gDBOpen_Exit:
    gDBOpen = True
    On Error GoTo 0
    DoEvents
    Exit Function
gDBOpen_Error:
    Beep
    Select Case Err.Number
        Case 3050:
'        MsgBox "You should have the Change permission to the folder containing the result file " & _
            DBFileName
        mResponse = MsgBox("Are you import the result file from CD or Network drive?", vbYesNo)
        If mResponse = vbYes Then
            Set gDellDataDB = DBEngine.OpenDatabase(DBFileName, False, True)
        Else
            MsgBox Err.Description & "you cann't import file " & DBFileName
            Set gDellDataDB = Nothing
        End If
        Case 3356
        Set gDellDataDB = DBEngine.OpenDatabase(DBFileName, False, False)
        Case 429:
        MsgBox "Microsoft DAO 3.6 was missing by System, try install from Mits's CD! "
        Case 55:
        MsgBox Err.Description & Chr(13) & "Open DataBase " & DBFileName & " Error." & Err.Number & _
            "Probable was locked by other application, if you use network device, Map it as network drive and try again!"
            gDellDataDB.Close
            Set gDellDataDB = Nothing
 
        Case 3343
        MsgBox Err.Description & Chr(13) & "Open DataBase " & DBFileName & " Error." & Err.Number
        Case Else
    End Select
    GoTo gDBOpen_Exit
End Function

Function ReadResultVersionTable()
    Dim strQuery As String, TestRec As Recordset, i As Integer
    gbsVerSchema = ""
    gbfVerSchema = 0#
    strQuery = "SELECT * FROM Version_Table;"
    On Error GoTo ReadResultVersionTableError
    Set TestRec = gDellDataDB.OpenRecordset(strQuery, dbOpenForwardOnly, dbReadOnly)
    gbsVerSchema = TestRec.Fields(1).Value
    gbfVerSchema = Val(Right$(gbsVerSchema, 5))
    TestRec.Close
    Set TestRec = Nothing
ReadResultVersionTableError:
    On Error GoTo 0
    DoEvents
End Function
Private Sub gDBClose()
On Error Resume Next
    If gbDBIsOpen = True Then
        gDellDataDB.Close
        Set gDellDataDB = Nothing
        gbDBIsOpen = False
    End If
End Sub

Private Sub ListViewChanInfo_ColumnClick(ByVal ColumnHeader As MSComctlLib.ColumnHeader)
    If LastListViewSortColumn = ColumnHeader.index Then
        If ListViewChanInfo.SortOrder = lvwDescending Then
            ListViewChanInfo.SortOrder = lvwAscending
        Else
            ListViewChanInfo.SortOrder = lvwDescending
        End If
    Else
        LastListViewSortColumn = ColumnHeader.index
        If InStr(1, ListViewChanInfo.ColumnHeaders(ColumnHeader.index), "Time") Then
            ListViewChanInfo.SortOrder = lvwDescending
        End If
    End If
    ListViewChanInfo.SortKey = ColumnHeader.index - 1
    ListViewChanInfo.Sorted = True
End Sub


Attribute VB_Name = "OptionsForm"
Attribute VB_Base = "0{2A55E6DF-B181-4A8A-A448-E2F648ABE9E7}{41695E01-2304-4414-B560-64CC7D088A0E}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Dim bInitPageSimul As Boolean
Dim bClearPaint As Boolean
Dim mFilePath As String
Dim mFileNameOutput As String
Dim mFilterColumnName As String

Private Sub btnCancel_Click()
    Application.StatusBar = "Ready"
    Unload Me
End Sub

Private Sub CheckBox2ndV_Click()
CheckBox2ndV.Value = Not CheckBox2ndV.Value
End Sub

Private Sub CheckBoxGroupCalculate_Click()
gGroupCalculate = CheckBoxGroupCalculate.Value
End Sub


Private Sub CheckBoxPH_Click()
CheckBoxPH.Value = Not CheckBoxPH.Value
End Sub

Private Sub CheckBoxPressure_Click()
CheckBoxPressure.Value = Not CheckBoxPressure.Value
End Sub

Private Sub CheckBoxRateEnable_Click()
gAuxRate = CheckBoxRateEnable.Value
End Sub

Private Sub CheckBoxTemp_Click()
CheckBoxTemp.Value = Not CheckBoxTemp.Value
End Sub

Private Sub cmdDefaultSet_Click()
Call gfCreateMitsDataini
Call UserForm_Initialize
End Sub

Private Sub btnChangeFileNameOutput_Click()
    Dim vbResponse As Integer, strTemp As String
    Dim TempFileName As Variant
    
    On Error GoTo btnChangeFileNameOutput_Error
    ChDir mFilePath
    On Error GoTo 0
    Do
       TempFileName = Application.GetSaveAsFilename(Initialfilename:=mFileNameOutput, _
           fileFilter:="Simulation Files (*.txt), *.txt")
       If TempFileName = False Then Exit Sub    'Pressing Cancel
       strTemp = TempFileName
       If Dir(strTemp) = "" Then Exit Do   'Brand new file
       vbResponse = MsgBox("Do you want to overwrite the existing file: " & strTemp & "? ", _
        vbYesNo + vbQuestion + vbDefaultButton2, gszALERTTITLE)
       '--Yes to overwrite, no to do loop again
       'If vbResponse = vbYes Then bIsOverWrite = True
    Loop Until vbResponse = vbYes
    
    mFileNameOutput = strTemp
    LabelFileNameOutput.Caption = strTemp
    Exit Sub
 
btnChangeFileNameOutput_Error:
    'gDirNameOutput = ThisWorkbook.Path
    Resume

End Sub

Private Sub btnCreateNow_Click()
    Call LabelCreateNow_Click
End Sub

Private Sub btnCreatePPGChart_Click()
    Call LabelCreatePPGChart_Click
End Sub

Private Sub btnFormatNow_Click()
    'btnCancel.Enabled = False
    Call GetValueFromPageDecimalPlaces
    Call FormatDecimalPlacesSheet(ActiveSheet)
    Call SetTextBoxFromResToDis
End Sub

Private Sub btnHighlightPulseData_Click()
    Dim iCols As Integer
    CheckBoxHighlightPulseRow.Value = True
    iCols = gfGetColumnNumber(ActiveSheet, gbIsFCDataName)
    If iCols <= 0 Then
        gbMsgBoxPrompt = "Can not find " & gbIsFCDataName & " on " & ActiveSheet.Name & _
        " sheet for this function."
        gbiMsgBoxResponse = MsgBox(gbMsgBoxPrompt, vbInformation)
        Exit Sub
    End If
    If CheckBoxHighlightPulseRow.Value Then
        Application.StatusBar = "Processing Highlight"
        Me.MousePointer = fmMousePointerHourGlass
        Call FormatHighlightPulseRow(ActiveSheet)
        Me.MousePointer = fmMousePointerDefault
        'Call LabelPaint_Click
        Application.StatusBar = "Highlight Finished : " & ActiveSheet.Name
    End If
End Sub

Private Sub btnMake_Click()
    Dim wksheet As Excel.Worksheet, strName As String
    Dim XColumnName As String, Y1ColumnName As String
    Dim iX0 As Integer, iY1 As Integer
    Dim lRowFrom As Long, lRowTo As Long
    Dim bSuccess As Boolean
    Dim iCols As Integer, lLoop As Long
    Dim strMakeFileName As String
    Dim fBase0 As Single, fBase1 As Single, fBase2 As Single
    
    Set wksheet = ActiveSheet
    If Not gfListBoxFindFirstSelected(ListBoxX0, 0, iX0, XColumnName) Then
        MsgBox ("You should choose a X axes.")
        Exit Sub
    End If
    iX0 = gfGetColumnNumber(wksheet, XColumnName) - 1
    If Not gfListBoxFindFirstSelected(ListBoxY1, 0, iY1, Y1ColumnName) Then
        MsgBox ("You should choose a Y axes.")
        Exit Sub
    End If
    iX0 = iX0 + 1: iY1 = iY1 + 1
    
    Application.StatusBar = "Processing Simulation File"
    Me.MousePointer = fmMousePointerHourGlass
    DoEvents
    strName = ActiveSheet.Name
    
    gbPWP3Option = 2
    gbPWP3strColumnName = mFilterColumnName
    gbPWP3fColumnMin = TextFromPoint.Value
    gbPWP3fColumnMax = TextToPoint.Value
    gbPWP3fColumnMin = CSng(gbPWP3fColumnMin)
    gbPWP3fColumnMax = CSng(gbPWP3fColumnMax)
    bSuccess = gfGetRowFromToByValue(wksheet, gbPWP3strColumnName, _
        gbPWP3fColumnMin, gbPWP3fColumnMax, lRowFrom, lRowTo)
    
    strMakeFileName = mFileNameOutput
    gbErrorLogFileNum = 5
    Open strMakeFileName For Output As #gbErrorLogFileNum
    fBase0 = 0#
    fBase1 = -0.006  'Make sure to get first point
    With wksheet
        If lRowFrom > 2 Then fBase0 = -(.cells(lRowFrom - 1, iX0))
        If XColumnName = gbStepTimeName Then
            For lLoop = lRowFrom To lRowTo
                'fBase2 = CLng(.Cells(lLoop, iX0) * 1000)
                fBase2 = .cells(lLoop, iX0)
                If fBase2 < fBase1 Then
                    'New Cycle
                    fBase0 = fBase1 + fBase0
                    fBase1 = -0.006
                End If
                If fBase2 - fBase1 > 0.005 Then
                    Print #gbErrorLogFileNum, Trim(fBase2 + fBase0); Chr(9); Trim(CSng(.cells(lLoop, iY1)))
                    fBase1 = fBase2
                End If
            Next lLoop
        Else
            For lLoop = lRowFrom To lRowTo
                'fBase2 = CLng(.Cells(lLoop, iX0) * 1000)
                fBase2 = .cells(lLoop, iX0)
                If fBase2 - fBase1 > 0.005 Then
                    Print #gbErrorLogFileNum, Trim(fBase2 + fBase0); Chr(9); Trim(CSng(.cells(lLoop, iY1)))
                    fBase1 = fBase2
                End If
            Next lLoop
        End If
    End With
    Close #gbErrorLogFileNum
    Me.MousePointer = fmMousePointerDefault
    Application.StatusBar = "Make Simulation File Finished : " & strName
    If CheckBoxOpenAfterMaking.Value = True Then
        Call gfShowFile(strMakeFileName)
    End If
    gbbOpenFileAfterMaking = CheckBoxOpenAfterMaking.Value
    btnOK.SetFocus
    Application.StatusBar = "Ready"
    Me.Hide
'    Unload Me
End Sub

Private Sub btnOK_Click()
    Call GetValueFromPageOptions
    Call GetValueFromPageDecimalPlaces
    Call SetTextBoxFromResToDis
    Call gfSaveMitsDataini
    
    Call GetValueFromPageCellGrading
    Call gfSaveCellGradingFile
    Call ToggleButtonAutoRefreshOn_Click
    Me.Hide
    Call CheckIfAutoRefreshOn
    Application.StatusBar = "Ready"
'    Unload Me
End Sub

Private Sub SetTextBoxFromResToDis()
    Dim i As Integer
    For i = 1 To giDecimalPlacesAll
        If giDecimalPlaces(i) = gbiRangeRestoreDefault Then
            giDecimalPlaces(i) = gbiRangeFormatDisable
        End If
    Next i
    Call FillValueForPageDecimalPlaces
End Sub

Private Sub btnPaint_Click()
    Call LabelPaint_Click
End Sub

Private Sub CheckBoxBadLarger1_Click()
    If CheckBoxBadLarger1.Value = True Then
        Call SetCheckBoxBadLarger1("<=")
    Else
        Call SetCheckBoxBadLarger1(">=")
    End If
End Sub

Private Sub SetCheckBoxBadLarger1(strIn As String)
    LabelGradeA = "Grade A " & strIn
    LabelGradeB = "Grade B " & strIn
    LabelGradeC = "Grade C " & strIn
    LabelGradeD = "Grade D " & strIn
    LabelGradeE = "Grade E " & strIn
    LabelGradeF = "Grade F " & strIn
End Sub

Private Sub CheckBoxBadLarger2_Click()
    If CheckBoxBadLarger2.Value = True Then
        Call SetCheckBoxBadLarger2("<=")
    Else
        Call SetCheckBoxBadLarger2(">=")
    End If
End Sub

Private Sub SetCheckBoxBadLarger2(strIn As String)
    LabelGrade1 = "Grade 1 " & strIn
    LabelGrade2 = "Grade 2 " & strIn
    LabelGrade3 = "Grade 3 " & strIn
    LabelGrade4 = "Grade 4 " & strIn
    LabelGrade5 = "Grade 5 " & strIn
    LabelGrade6 = "Grade 6 " & strIn
End Sub


Private Sub CheckBoxEnableGrade1_Click()
    If CheckBoxEnableGrade1.Value = True Then
        Call SetTextBoxGradeAtoG(True, &H80000005)
    Else
        Call SetTextBoxGradeAtoG(False, &H80000000)
    End If
End Sub

Private Sub SetTextBoxGradeAtoG(bEnabled As Boolean, fBackColor As Variant)
        TextBoxName1.Enabled = bEnabled
        TextBoxName1.BackColor = fBackColor
        TextBoxGradeA.Enabled = bEnabled
        TextBoxGradeA.BackColor = fBackColor
        TextBoxGradeB.Enabled = bEnabled
        TextBoxGradeB.BackColor = fBackColor
        TextBoxGradeC.Enabled = bEnabled
        TextBoxGradeC.BackColor = fBackColor
        TextBoxGradeD.Enabled = bEnabled
        TextBoxGradeD.BackColor = fBackColor
        TextBoxGradeE.Enabled = bEnabled
        TextBoxGradeE.BackColor = fBackColor
        TextBoxGradeF.Enabled = bEnabled
        TextBoxGradeF.BackColor = fBackColor
        CheckBoxBadLarger1.Enabled = bEnabled
End Sub

Private Sub CheckBoxEnableGrade2_Click()
    If CheckBoxEnableGrade2.Value = True Then
        Call SetTextBoxGrade1to7(True, &H80000005)
    Else
        Call SetTextBoxGrade1to7(False, &H80000000)
    End If
End Sub

Private Sub SetTextBoxGrade1to7(bEnabled As Boolean, fBackColor As Variant)
        TextBoxName2.Enabled = bEnabled
        TextBoxName2.BackColor = fBackColor
        TextBoxGrade1.Enabled = bEnabled
        TextBoxGrade1.BackColor = fBackColor
        TextBoxGrade2.Enabled = bEnabled
        TextBoxGrade2.BackColor = fBackColor
        TextBoxGrade3.Enabled = bEnabled
        TextBoxGrade3.BackColor = fBackColor
        TextBoxGrade4.Enabled = bEnabled
        TextBoxGrade4.BackColor = fBackColor
        TextBoxGrade5.Enabled = bEnabled
        TextBoxGrade5.BackColor = fBackColor
        TextBoxGrade6.Enabled = bEnabled
        TextBoxGrade6.BackColor = fBackColor
        CheckBoxBadLarger2.Enabled = bEnabled
End Sub




Private Sub CommandButtonFormat_Click()
Dim wksheet As Excel.Worksheet
gbbPrint = CheckBoxPrint.Value
For Each wksheet In ActiveWorkbook.Worksheets
    If wksheet.Name = gbInfoSheetName And gbbPrint Then
        Call gfTestPrinterExist(ActiveSheet)
    End If
    Call gfFormatCellBoard(wksheet)
    If gbbPrint Then
        Call FormatSheetEvenColumns(wksheet)
    End If
Next wksheet
End Sub




Private Sub LabelCreateNow_Click()
    Dim wksheet As Excel.Worksheet, strName As String
    Dim iCols As Integer
    Dim iColsStepTime As Integer, iColsCycleIndex As Integer
        
'    If Application.Workbooks.Count < 1 Then
'        gbMsgBoxPrompt = "You should open an Excel file and highlight a data sheet for processing."
'        gbiMsgBoxResponse = MsgBox(gbMsgBoxPrompt, vbInformation)
'        Exit Sub
'    End If
    
    strName = ActiveSheet.Name
    If gfHasChartOf(ActiveWorkbook, strName) Then
        gbMsgBoxPrompt = "You should highlight a data sheet for processing."
        gbiMsgBoxResponse = MsgBox(gbMsgBoxPrompt, vbInformation)
        Exit Sub
    End If
    
    Me.MousePointer = fmMousePointerHourGlass
    Set wksheet = ActiveSheet
    'Create New Data
    iCols = gfGetColumnNumber(wksheet, gbTestTimeName)
    
    If CheckBoxCreateTestTime2.Value Then
        If iCols > 0 Then
            Call CalculateTestTimeDay(wksheet, iCols)
        Else
            gbMsgBoxPrompt = "Can not find " & gbTestTimeName & " on " & wksheet.Name & _
            " sheet for " & gbTestTime2Name & " calculation."
            gbiMsgBoxResponse = MsgBox(gbMsgBoxPrompt, vbInformation)
        End If
    End If
    
    If CheckBoxCreateCycleTime.Value Then
        If iCols > 0 Then
            iColsStepTime = gfGetColumnNumber(wksheet, gbStepTimeName)
            iColsCycleIndex = gfGetColumnNumber(wksheet, gbCycleIndexName)
            If iColsCycleIndex > 0 Then
                If iColsStepTime <= 0 Then
                    gbMsgBoxPrompt = "Can not find " & gbStepTimeName & " on " & wksheet.Name & _
                        " sheet for " & gbCycleTimeName & " calculation." & _
                        " The start time of each cycle will be set to zero."
                    'gbiMsgBoxResponse = MsgBox(gbMsgBoxPrompt, vbInformation)
                End If
                Call CalculateCycleTimeDay(wksheet, iCols, 1)
            Else
                gbMsgBoxPrompt = "Can not find " & gbCycleIndexName & " on " & wksheet.Name & _
                " sheet for " & gbCycleTimeName & " calculation."
                gbiMsgBoxResponse = MsgBox(gbMsgBoxPrompt, vbInformation)
            End If
        Else
            gbMsgBoxPrompt = "Can not find " & gbTestTimeName & " on " & wksheet.Name & _
            " sheet for " & gbCycleTimeName & " calculation."
            gbiMsgBoxResponse = MsgBox(gbMsgBoxPrompt, vbInformation)
        End If
    End If
        
    iCols = gfGetColumnNumber(wksheet, gbDateTimeName)
    If CheckBoxCreateDayOfYear.Value Then
        If iCols > 0 Then
            Call CalculateDayOfYear(wksheet, iCols)
        Else
            gbMsgBoxPrompt = "Can not find " & gbDateTimeName & " on " & wksheet.Name & _
            " sheet for " & gbDayOfYearName & " calculation."
            gbiMsgBoxResponse = MsgBox(gbMsgBoxPrompt, vbInformation)
        End If
    End If
    Me.MousePointer = fmMousePointerDefault
    Application.StatusBar = "Create Finished : " & strName
    btnOK.SetFocus
End Sub

Private Sub LabelCreatePPGChart_Click()
    PPGForm.Show
    If giPPGOptionValue = -1 Then Exit Sub
    Call PPGMain
    Unload Me
End Sub

Private Sub LabelPaint_Click()
    Dim wksheet As Excel.Worksheet
    Dim strName As String, strPrompt As String
        
    If Application.Workbooks.Count < 1 Then
        gbMsgBoxPrompt = "You should open an Excel file and highlight a data sheet for processing."
        gbiMsgBoxResponse = MsgBox(gbMsgBoxPrompt, vbInformation)
        Exit Sub
    End If
    
    strName = ActiveSheet.Name
    If gfHasChartOf(ActiveWorkbook, strName) Then
        gbMsgBoxPrompt = "You should highlight a data sheet for processing."
        gbiMsgBoxResponse = MsgBox(gbMsgBoxPrompt, vbInformation)
        Exit Sub
    End If
    
    strPrompt = "Paint"
    If bClearPaint = True Then strPrompt = "Clear"
    
    Set wksheet = ActiveSheet
    Application.StatusBar = "Processing " & strPrompt & " : " & strName
    Me.MousePointer = fmMousePointerHourGlass
    Application.ScreenUpdating = False
    Call gfFormatCellBoard(wksheet)
    If bClearPaint = True Then
        wksheet.cells.Interior.ColorIndex = xlNone
        bClearPaint = False
        LabelPaint.Caption = "Paint Activesheet"
        btnPaint.ControlTipText = "Fill colors for best view"
    Else
        If gbbPrint Then Call FormatSheetEvenColumns(wksheet)
        bClearPaint = True
        LabelPaint.Caption = "Clear Activesheet"
        btnPaint.ControlTipText = "Clear colors for sheet print"
    End If
    Application.ScreenUpdating = True
    wksheet.Range("B2").Select
    ActiveWindow.FreezePanes = True
    Me.MousePointer = fmMousePointerDefault
    Application.StatusBar = strPrompt & " Finished : " & strName
    btnOK.SetFocus
End Sub


Private Sub MultiPage1_Click(ByVal index As Long)
    If index <> 2 Then Exit Sub
    Call MultiPageSimulationFile(index)
End Sub

Private Sub MultiPageSimulationFile(ByVal index As Long)
    Dim wksheet As Excel.Worksheet, strName As String
    Dim fColumnMin As Variant, fColumnMax As Variant
    Dim TempCell As Variant
    Dim i As Integer, iX0End As Integer, iEndColumn As Integer
    Dim iColumnX As Integer, iColumnY1 As Integer
    
    If bInitPageSimul = True Then Exit Sub
    bInitPageSimul = True
    If Application.Workbooks.Count < 1 Then Exit Sub
    strName = ActiveSheet.Name
    If gfHasChartOf(ActiveWorkbook, strName) Then Exit Sub
    
    Set wksheet = ActiveWorkbook.ActiveSheet
    If gfGetMinMaxValueInColumn(wksheet, gbDataPointName, fColumnMin, fColumnMax) Then
        mFilterColumnName = gbDataPointName
        FramePoint.Caption = "Select " & gbDataPointName
        TextFromPoint.Value = fColumnMin:   TextToPoint.Value = fColumnMax
    ElseIf gfGetMinMaxValueInColumn(wksheet, gbTestTimeName, fColumnMin, fColumnMax) Then
        mFilterColumnName = gbTestTimeName
        FramePoint.Caption = "Select " & gbTestTimeName
        TextFromPoint.Value = fColumnMin:   TextToPoint.Value = fColumnMax
    Else
        Exit Sub
    End If
    ListBoxX0.Clear:    ListBoxY1.Clear
    With wksheet
        'ListBoxX0.Column() = wkSheet.Range("A1", .Range("A1").End(xlToRight)).Text
        iEndColumn = .Range("A1").End(xlToRight).Column
        If iEndColumn >= giMaxColumnsNum Then Exit Sub
        iX0End = 0
        For i = 1 To iEndColumn
            TempCell = .cells(1, i)
            If TempCell = gbTestTimeName Then iX0End = iX0End + 1: ListBoxX0.AddItem TempCell
            If TempCell = gbStepTimeName Then iX0End = iX0End + 1: ListBoxX0.AddItem TempCell
            ListBoxY1.AddItem TempCell
        Next i
        'ListBoxY1.Column() = ListBoxX0.Column()
        'If InStr(1, .Name, gbChannelName) > 0 Then
            'iColumnX = gfGetColumnNumber(wkSheet, gbTestTimeName)
            If iX0End > 0 Then ListBoxX0.Selected(0) = True
            iColumnY1 = gfGetColumnNumberInstr(wksheet, gbCurrentName)
            If iColumnY1 <> -1 Then ListBoxY1.Selected(iColumnY1 - 1) = True
        'End If
    End With
    CheckBoxOpenAfterMaking.Value = gbbOpenFileAfterMaking
    strName = ActiveWorkbook.Name
    If LCase(Right(strName, 4)) = ".xls" Then
        strName = Left(strName, Len(strName) - 4)
    End If
    mFileNameOutput = mFilePath & "\" & strName & "_" & ActiveSheet.Name & ".txt"
    LabelFileNameOutput.Caption = mFileNameOutput
    LabelAvailable.Visible = False
    If iX0End > 0 Then
        btnChangeFileNameOutput.Enabled = True
        btnMake.Enabled = True
        btnMake.SetFocus
    Else
        gbMsgBoxPrompt = "Can not find " & gbTestTimeName & " or " & gbStepTimeName & " for X selection."
        gbiMsgBoxResponse = MsgBox(gbMsgBoxPrompt, vbInformation)
    End If

End Sub

Private Sub ToggleButtonAutoRefreshOn_Click()
    Dim timeunit
    If Val(txtInterValofRefresh.Value) = 0 Or gCommandHistory = False Then
        CheckBoxAutoRefresh.Value = False
    Exit Sub
    End If
    
    If CheckBoxAutoRefresh.Value Then
    gAutoRefreshEnable = True
    Select Case ComboBoxTimeUnit.Value
         Case "sec."
            timeunit = 1
         Case "min."
            timeunit = 60
         Case "hour"
            timeunit = 3600
    End Select
    gsIntervalofRefresh = CLongToTime(Val(txtInterValofRefresh.Value) * timeunit)
    
    Else
    gAutoRefreshEnable = False
    End If
End Sub




Private Sub TextBoxZoom_AfterUpdate()
If TextBoxZoom.Value > 400 Or TextBoxZoom.Value < 10 Then TextBoxZoom.Value = 100
Application.ActiveWindow.Zoom = TextBoxZoom.Value
gbZoom = TextBoxZoom.Value
If gbZoom = 0 Then gbZoom = 100
End Sub

Private Sub UserForm_Activate()
    CheckBoxAutoRefresh.Value = gAutoRefreshEnable
    CheckBoxGroupCalculate.Value = gGroupCalculate
    CheckBoxRateEnable.Value = gAuxRate
    Call SetOptionsTitle
    Call FillValueForPageOptions
    Call FillValueForPageDecimalPlaces
    Call FillValueForPageCellGrading
'    Call FillValueForPageCust
    If gbPPGOn Then
        LabelCreatePPGChart.Visible = True
        btnCreatePPGChart.Visible = True
    End If
    
    If Application.Workbooks.Count > 0 Then
        If Not gfHasChartOf(ActiveWorkbook, ActiveSheet.Name) Then
            LabelO1Note.Visible = False
            LabelCreateNow.Enabled = True
            btnCreateNow.Enabled = True
            btnHighlightPulseData.Enabled = True
            LabelCreatePPGChart.Enabled = True
            btnCreatePPGChart.Enabled = True
            LabelPaint.Enabled = True
            btnPaint.Enabled = True
            btnFormatNow.Enabled = True
        End If
    End If
    mFilePath = ThisWorkbook.Path
End Sub

Private Sub UserForm_Initialize()
    CheckBoxAutoRefresh.Value = gAutoRefreshEnable
    CheckBoxGroupCalculate.Value = gGroupCalculate
    CheckBoxRateEnable.Value = gAuxRate
    Call SetOptionsTitle
    Call gfReadMitsDataini 'read data.ini parameters
    Call FillValueForPageOptions
    Call FillValueForPageDecimalPlaces
    Call FillValueForPageCellGrading
'    Call FillValueForPageCust
    
    If gbPPGOn Then
        LabelCreatePPGChart.Visible = True
        btnCreatePPGChart.Visible = True
    End If
    
    If Application.Workbooks.Count > 0 Then
        If Not gfHasChartOf(ActiveWorkbook, ActiveSheet.Name) Then
            LabelO1Note.Visible = False
            LabelCreateNow.Enabled = True
            btnCreateNow.Enabled = True
            btnHighlightPulseData.Enabled = True
            LabelCreatePPGChart.Enabled = True
            btnCreatePPGChart.Enabled = True
            LabelPaint.Enabled = True
            btnPaint.Enabled = True
            btnFormatNow.Enabled = True
        End If
    End If
    bInitPageSimul = False
    bClearPaint = False
    mFilePath = ThisWorkbook.Path
'   Auto Refresh
    ComboBoxTimeUnit.AddItem "sec."
    ComboBoxTimeUnit.AddItem "min."
    ComboBoxTimeUnit.AddItem "hour"
End Sub

Private Sub FillValueForPageOptions()
    CheckBoxCreateTestTime2.Value = gbbTestTime2
    CheckBoxCreateCycleTime.Value = gbbCycleTime
    CheckBoxCreateDayOfYear.Value = gbbDayOfYear
    CheckBoxHighlightPulseRow.Value = gbbHighlightPulseRow
    CheckBoxOpenImportDataDialog = gbbOpenImportDataDialog
    CheckBoxOpenFileDialogAuto.Value = gbbOpenFileDialogAuto
    CheckBoxOverwriteFiles.Value = gbbOverwriteFiles
    CheckBoxReloadAlert = gbbReloadAlert
    CheckBoxMinute = gbbTestMinute
    CheckBoxHour = gbbTestHour
    CheckBoxDay = gbbTestDay
    CheckBoxCurrent = gbbCurrentmA
    CheckBoxVoltage = gbbVoltagemV
    CheckBoxLoad = gbbLoad
    CheckBoxPower = gbbPower
    CheckBoxPrint = gbbPrint
    CheckBoxIPolarity = gbbIPolarity
    CheckBoxVPolarity = gbbVPolarity
    CheckBoxCurrentD = gbbID
    CheckBoxPowerD = gbbPD
    CheckBoxCoulombic = gbbCE
End Sub

Private Sub GetValueFromPageOptions()
    gbbTestTime2 = CheckBoxCreateTestTime2.Value
    gbbCycleTime = CheckBoxCreateCycleTime.Value
    gbbDayOfYear = CheckBoxCreateDayOfYear.Value
    gbbHighlightPulseRow = CheckBoxHighlightPulseRow.Value
    gbbOpenImportDataDialog = CheckBoxOpenImportDataDialog
    gbbOpenFileDialogAuto = CheckBoxOpenFileDialogAuto.Value
    gbbOverwriteFiles = CheckBoxOverwriteFiles.Value
    gbbReloadAlert = CheckBoxReloadAlert
    gbbTestMinute = CheckBoxMinute
    gbbTestHour = CheckBoxHour
    gbbTestDay = CheckBoxDay
    gbbCurrentmA = CheckBoxCurrent
    gbbVoltagemV = CheckBoxVoltage
    gbbLoad = CheckBoxLoad
    gbbPower = CheckBoxPower
    gbbPrint = CheckBoxPrint
    gbbIPolarity = CheckBoxIPolarity
    gbbVPolarity = CheckBoxVPolarity
    gbbID = CheckBoxCurrentD
    gbbPD = CheckBoxPowerD
    gbbCE = CheckBoxCoulombic
End Sub

Private Sub FillValueForPageDecimalPlaces()
    TextBoxTestTime.Value = giDecimalPlaces(1)
    'TextBoxStepTime.Value = giDecimalPlaces(2)
    TextBoxCurrent.Value = giDecimalPlaces(3)
    TextBoxVoltage.Value = giDecimalPlaces(4)
    TextBoxChargeCapacity.Value = giDecimalPlaces(5)
    'TextBoxDischargeCapacity.Value = giDecimalPlaces(6)
    TextBoxChargeEnergy.Value = giDecimalPlaces(7)
    'TextBoxDischargeEnergy.Value = giDecimalPlaces(8)
    TextBoxAuxVoltage.Value = giDecimalPlaces(giDecimalPlacesNormal + 1)
    TextBoxTemperature.Value = giDecimalPlaces(giDecimalPlacesNormal + 2)
    TextBoxPressure.Value = giDecimalPlaces(giDecimalPlacesNormal + 3)
    TextBoxPH.Value = giDecimalPlaces(giDecimalPlacesNormal + 4)
    TextBoxFlowRate.Value = giDecimalPlaces(giDecimalPlacesNormal + 5)
    TextBoxPower.Value = giDecimalPlaces(giDecimalPlacesNormal + 6)
    TextBoxLoad.Value = giDecimalPlaces(giDecimalPlacesNormal + 7)
    TextBoxACI.Value = giDecimalPlaces(giDecimalPlacesNormal + 8)
End Sub

Private Sub GetValueFromPageDecimalPlaces()
    Dim i As Integer
    giDecimalPlaces(1) = Val(TextBoxTestTime.Value)
    giDecimalPlaces(2) = giDecimalPlaces(1)
    giDecimalPlaces(3) = Val(TextBoxCurrent.Value)
    giDecimalPlaces(4) = Val(TextBoxVoltage.Value)
    giDecimalPlaces(5) = Val(TextBoxChargeCapacity.Value)
    giDecimalPlaces(6) = giDecimalPlaces(5)
    giDecimalPlaces(7) = Val(TextBoxChargeEnergy.Value)
    giDecimalPlaces(8) = giDecimalPlaces(7)
    
    giDecimalPlaces(giDecimalPlacesNormal + 1) = Val(TextBoxAuxVoltage.Value)
    giDecimalPlaces(giDecimalPlacesNormal + 2) = Val(TextBoxTemperature.Value)
    giDecimalPlaces(giDecimalPlacesNormal + 3) = Val(TextBoxPressure.Value)
    giDecimalPlaces(giDecimalPlacesNormal + 4) = Val(TextBoxPH.Value)
    giDecimalPlaces(giDecimalPlacesNormal + 5) = Val(TextBoxFlowRate.Value)
    giDecimalPlaces(giDecimalPlacesNormal + 6) = TextBoxPower.Value
    giDecimalPlaces(giDecimalPlacesNormal + 7) = TextBoxLoad.Value
    giDecimalPlaces(giDecimalPlacesNormal + 8) = TextBoxACI.Value

    For i = 1 To giDecimalPlacesAll
        giDecimalPlaces(i) = Int(giDecimalPlaces(i))
        If giDecimalPlaces(i) < -2 Then
            giDecimalPlaces(i) = -2
        End If
        If giDecimalPlaces(i) > 30 Then
            giDecimalPlaces(i) = 30
        End If
    Next i

End Sub

Private Sub FillValueForPageCellGrading()
    TextBoxName1 = gbsCellGrading1Name
    TextBoxGradeA = gbfCellGrading1Value(1)
    TextBoxGradeB = gbfCellGrading1Value(2)
    TextBoxGradeC = gbfCellGrading1Value(3)
    TextBoxGradeD = gbfCellGrading1Value(4)
    TextBoxGradeE = gbfCellGrading1Value(5)
    TextBoxGradeF = gbfCellGrading1Value(6)
    CheckBoxBadLarger1 = gbbCellGrading1BadLarger
    CheckBoxEnableGrade1 = gbbCellGrading1Enable
    
    TextBoxName2 = gbsCellGrading2Name
    TextBoxGrade1 = gbfCellGrading2Value(1)
    TextBoxGrade2 = gbfCellGrading2Value(2)
    TextBoxGrade3 = gbfCellGrading2Value(3)
    TextBoxGrade4 = gbfCellGrading2Value(4)
    TextBoxGrade5 = gbfCellGrading2Value(5)
    TextBoxGrade6 = gbfCellGrading2Value(6)
    CheckBoxBadLarger2 = gbbCellGrading2BadLarger
    CheckBoxEnableGrade2 = gbbCellGrading2Enable

    Call CheckBoxBadLarger1_Click
    Call CheckBoxBadLarger2_Click
    
    Call CheckBoxEnableGrade1_Click
    Call CheckBoxEnableGrade2_Click
End Sub

Private Sub GetValueFromPageCellGrading()
    gbsCellGrading1Name = TextBoxName1
    gbfCellGrading1Value(1) = Val(TextBoxGradeA)
    gbfCellGrading1Value(2) = Val(TextBoxGradeB)
    gbfCellGrading1Value(3) = Val(TextBoxGradeC)
    gbfCellGrading1Value(4) = Val(TextBoxGradeD)
    gbfCellGrading1Value(5) = Val(TextBoxGradeE)
    gbfCellGrading1Value(6) = Val(TextBoxGradeF)
    gbbCellGrading1BadLarger = CheckBoxBadLarger1
    gbbCellGrading1Enable = CheckBoxEnableGrade1
    
    gbsCellGrading2Name = TextBoxName2
    gbfCellGrading2Value(1) = Val(TextBoxGrade1)
    gbfCellGrading2Value(2) = Val(TextBoxGrade2)
    gbfCellGrading2Value(3) = Val(TextBoxGrade3)
    gbfCellGrading2Value(4) = Val(TextBoxGrade4)
    gbfCellGrading2Value(5) = Val(TextBoxGrade5)
    gbfCellGrading2Value(6) = Val(TextBoxGrade6)
    gbbCellGrading2BadLarger = CheckBoxBadLarger2
    gbbCellGrading2Enable = CheckBoxEnableGrade2
    
    Call CheckValueFromPageCellGrading

End Sub

Private Sub CheckValueFromPageCellGrading()
    Dim i As Integer, strWarning As String
    Dim bWarning1 As Boolean, bWarning2 As Boolean
    strWarning = ""
    bWarning1 = False
    bWarning2 = False
    If gbbCellGrading1Enable Then
        If gbbCellGrading1BadLarger Then
            For i = 2 To giCellGradingLoop
                If gbfCellGrading1Value(i - 1) > gbfCellGrading1Value(i) Then
                    bWarning1 = True
                    Exit For
                End If
            Next i
            If bWarning1 = True Then
                strWarning = strWarning & "Warning. Grade value should be: " & Chr(13) & _
                "Grade A <= Grade B <= Grade C <= Grade D <= Grade E <= Grade F" & _
                Chr(13) & Chr(13)
            End If
        Else
            For i = 2 To giCellGradingLoop
                If gbfCellGrading1Value(i - 1) < gbfCellGrading1Value(i) Then
                    bWarning1 = True
                    Exit For
                End If
            Next i
            If bWarning1 = True Then
                strWarning = strWarning & "Warning. Grade value should be: " & Chr(13) & _
                "Grade A >= Grade B >= Grade C >= Grade D >= Grade E >= Grade F" & _
                Chr(13) & Chr(13)
            End If
        End If
    End If
    If gbbCellGrading2Enable Then
        If gbbCellGrading2BadLarger Then
            For i = 2 To giCellGradingLoop
                If gbfCellGrading2Value(i - 1) > gbfCellGrading2Value(i) Then
                    bWarning2 = True
                    Exit For
                End If
            Next i
            If bWarning2 = True Then
                strWarning = strWarning & "Warning. Grade value should be: " & Chr(13) & _
                "Grade 1 <= Grade 2 <= Grade 3 <= Grade 4 <= Grade 5 <= Grade 6"
            End If
        Else
            For i = 2 To giCellGradingLoop
                If gbfCellGrading2Value(i - 1) < gbfCellGrading2Value(i) Then
                    bWarning2 = True
                    Exit For
                End If
            Next i
            If bWarning2 = True Then
                strWarning = strWarning & "Warning. Grade value should be: " & Chr(13) & _
                "Grade 1 >= Grade 2 >= Grade 3 >= Grade 4 >= Grade 5 >= Grade 6"
            End If
        End If
    End If
    If strWarning <> "" Then
        gbiMsgBoxResponse = MsgBox(strWarning, vbCritical)
    End If
End Sub
Private Sub FillValueForPageCust()

End Sub
Private Sub GetValueForPageCust()

End Sub
Attribute VB_Name = "PPG"

Option Explicit
Const gReportsPPGSheetName As String = "SquareWaveReport"
Dim glReportsRowIndex As Long
Dim giPPGArea As Integer

Function PPGMain()
        Call ChangeLabel
        Call ChangeLabel
        Call CaculatePPG(gbChannelName)
        If giPPGOptionValue = 1 Then
            'Call PreDrawGraphicPPGCyclicStep(gbChannelName)
            Call PreDrawGraphicPPGStep(gbChannelName, -5)
            Call PreDrawGraphicPPGCyclic(gbChannelName, 5)
        ElseIf giPPGOptionValue = 2 Then
            Call PreDrawGraphicPPGCyclic(gbChannelName, 0)
        ElseIf giPPGOptionValue = 3 Then
            Call PreDrawGraphicPPGStep(gbChannelName, 0)
        End If
End Function

'Change Aux_Voltage to Transmittance
Function ChangeLabel()
    Dim wksheet As Worksheet, tmp As Range
    If gAuxiDataTypeTitle(0, 0) = "" Then
        Call SetAuxiDataTypeTitle
    End If
    For Each wksheet In ActiveWorkbook.Worksheets
      If gfHasChartOf(ActiveWorkbook, wksheet.Name) = False Then
        wksheet.Range("A12", wksheet.cells(1, 1).End(xlToRight)).Replace _
            What:=gAuxiDataTypeTitle(0, 0), _
            Replacement:="Transmittance", _
            searchorder:=xlByRows, MatchCase:=False
        wksheet.Range("A12", wksheet.cells(1, 1).End(xlToRight)).Replace _
            What:=gAuxiDataTypeTitle(0, 1), _
            Replacement:="d(Transmittance)/dt", _
            searchorder:=xlByRows, MatchCase:=False
        Set tmp = wksheet.Range("A13").Find(What:=gAuxiDataTypeTitle(0, 0), LookIn:=xlValue, Lookat:=xlPart, _
                MatchCase:=False)
      End If
    Next wksheet
End Function

Function ReportsPPGData(PPGPreSheetName As String)
    Dim strName As String
    Dim wksheet As Excel.Worksheet
    Dim wkSheetPPG As Excel.Worksheet

    Application.StatusBar = "Processing PPG Square Wave Report Data"
    Call MadeNewSheet(ActiveWorkbook, gReportsPPGSheetName)
    Set wkSheetPPG = Worksheets(gReportsPPGSheetName)
    Call PPGSheetPageSetup(wkSheetPPG)
    Call PPGSheetTitle(wkSheetPPG)

    glReportsRowIndex = 2
    For Each wksheet In ActiveWorkbook.Worksheets
        strName = wksheet.Name
        If gfHasChartOf(ActiveWorkbook, strName) = False And InStr(1, strName, PPGPreSheetName) > 0 Then
            Call FillSWReportData(wksheet, wkSheetPPG)
        End If
    Next wksheet

End Function

Function FillSWReportData(wksheet As Excel.Worksheet, wkSheetPPG As Excel.Worksheet)
    Dim jCycleStartRow As Long, jCycleEndRow As Long, jCycleIndexNum As Long
    Dim jStep2Start As Long, jStep2End As Long 'Charge End Point
    Dim jStep3End As Long  'DisCharge End Point
    Dim jmaxRow As Long, i As Integer
    Dim strTd$, strTb$, strTf$, strFormula$
    Dim strTd1$, strTb1$
    Dim Time10 As Single, Time90 As Single
    Dim TimeStartIndex As Long, TimeEndIndex As Long
    Dim jTime As Long, jTimeTemp As Long
    Dim TIMECOL As Integer
    Dim STEPCOL As Integer
    Dim CYCLECOL As Integer

    giPPGArea = 20
    TIMECOL = gfGetColumnNumber(wksheet, gbTestTimeName)
    STEPCOL = gfGetColumnNumber(wksheet, gbStepIndexName)
    CYCLECOL = gfGetColumnNumber(wksheet, gbCycleIndexName)
    If TIMECOL = -1 Or STEPCOL = -1 Or CYCLECOL = -1 Then
        MsgBox "Can not find " & gbTestTimeName & " or " & gbStepIndexName & " or " & gbCycleIndexName
        Exit Function
    End If
    'The search order must be:
    'LOG DATA
    'Step   Cycle
    '  2      1
    '  3      1
    '  2      2
    '  3      2
    '  2      3
    '  3      3
    '  2      4
    '  3      4
    '  ...
    With wksheet
        jCycleEndRow = -1
        jCycleStartRow = 2 - 1 'start row, iLoopPos find next match value, so next match starts from row 2
        jCycleIndexNum = .cells(2, CYCLECOL) 'start cycle num
        jmaxRow = iLoopPos(wksheet, 1, STEPCOL, 5) - 1
        If jmaxRow = -2 Then jmaxRow = .cells(1, 1).End(xlDown).Row
        
        Do While jCycleEndRow <> jmaxRow + 1
            jCycleEndRow = iLoopPos(wksheet, jCycleStartRow, CYCLECOL, jCycleIndexNum + 1) 'search End Point
            If jCycleEndRow = -1 Or jCycleEndRow > jmaxRow Then
                If .cells(jmaxRow, CYCLECOL) = jCycleIndexNum Then
                    jCycleEndRow = jmaxRow + 1
                Else
                    gbiMsgBoxResponse = MsgBox("Doesn't exist the Cycle Number " & jCycleIndexNum + 1 _
                    & " in Worksheet = " & wksheet.Name, vbInformation)
                    Exit Function
                    'jCycleEndRow = jCycleStartRow
                End If
            End If
            wkSheetPPG.cells(glReportsRowIndex, 1) = wksheet.Name
            wkSheetPPG.cells(glReportsRowIndex, 2).NumberFormat = "General"
            wkSheetPPG.cells(glReportsRowIndex, 2) = jCycleIndexNum
            'Application.StatusBar = "Processing PPG Square Wave Report Data, " & wkSheet.Name & ", Cycle = " & jCycleIndexNum
        
            jStep2Start = iLoopPos(wksheet, jCycleStartRow, STEPCOL, 2)
            If jStep2Start <> -1 Then
                If .cells(jStep2Start, CYCLECOL) <> jCycleIndexNum Then jStep2Start = -1
            End If
        
            If jStep2Start = -1 Then
                jStep2End = -2
            Else
                jStep2End = iLoopPos(wksheet, jStep2Start, STEPCOL, 3) - 1
                If jStep2End <> -2 Then
                    If .cells(jStep2End, CYCLECOL) <> jCycleIndexNum Then jStep2End = -2
                End If
            End If
        
            If jStep2Start <> -1 And jStep2End <> -2 Then
                jStep3End = iLoopPos(wksheet, jStep2End + 1, STEPCOL, 2) 'Next 2 from jStep2End + 1 (Cycle=4)
                If jStep3End = -1 Then
                    jStep3End = jmaxRow  'In case no Step4
                Else
                    jStep3End = jStep3End - 1  'Previous row
                End If
                Do While .cells(jStep3End, STEPCOL) = 4
                    jStep3End = jStep3End - 1
                Loop
            
                i = gfGetColumnNumber(wksheet, "Voltage")
                wkSheetPPG.cells(glReportsRowIndex, 3) = .cells(jStep2End, i) 'Charge V  End Point
                wkSheetPPG.cells(glReportsRowIndex, 4) = .cells(jStep3End, i) 'DisCharge V End Point
                wkSheetPPG.cells(glReportsRowIndex, 5).NumberFormat = "General"
                wkSheetPPG.cells(glReportsRowIndex, 5) = giPPGArea
            
                i = gfGetColumnNumber(wksheet, "Current(mA)")
                If i > 0 Then
                    wkSheetPPG.cells(glReportsRowIndex, 9) = Application.Max(Range(.cells(jStep2Start, i), .cells(jStep2End, i)))   'Peak mA Charge
                    wkSheetPPG.cells(glReportsRowIndex, 10) = Application.Min(Range(.cells(jStep2End + 1, i), .cells(jStep3End, i)))  'Peak mA DisCharge
                End If
            
                i = gfGetColumnNumber(wksheet, "Charge(mQ)")
                If i > 0 Then
                    wkSheetPPG.cells(glReportsRowIndex, 15) = .cells(jStep2End, i)   'Q(mQ):Charge
                    wkSheetPPG.cells(glReportsRowIndex, 16) = .cells(jStep3End, i)   'Q(mQ):DisCharge
                End If
            
                i = gfGetColumnNumberInstr(wksheet, "Transmittance")
                If i > 0 Then
                    wkSheetPPG.cells(glReportsRowIndex, 6) = .cells(jStep2End, i)
                    wkSheetPPG.cells(glReportsRowIndex, 7) = .cells(jStep3End, i)
                    'DOD
                    strTd = wkSheetPPG.cells(glReportsRowIndex, 7).Address
                    strTb = wkSheetPPG.cells(glReportsRowIndex, 6).Address '(rowabsolute:=False)
                    strFormula = "=-LOG(" & strTb & "/" & strTd & ")"
                    wkSheetPPG.cells(glReportsRowIndex, 8).Formula = strFormula
                    'CE: Charge (cm2 / Q)
                    strTd = wkSheetPPG.cells(glReportsRowIndex, 5).Address
                    strTb = wkSheetPPG.cells(glReportsRowIndex, 15).Address
                    strFormula = wkSheetPPG.cells(glReportsRowIndex, 8).Address
                    strTf = "=" & strFormula & "/((" & strTb & "/1000.0)/" & strTd & ")"
                    wkSheetPPG.cells(glReportsRowIndex, 13) = strTf
                    'CE: DisCharge (cm2 / Q)
                    strTd = wkSheetPPG.cells(glReportsRowIndex, 5).Address
                    strTb = wkSheetPPG.cells(glReportsRowIndex, 16).Address
                    'strFormula = wkSheetPPG.Cells(glReportsRowIndex, 9).Address
                    strTf = "=" & strFormula & "/((" & strTb & "/1000.0)/" & strTd & ")"
                    wkSheetPPG.cells(glReportsRowIndex, 14) = strTf
             
                    Time10 = .cells(jStep2End, i) + (.cells(jStep3End, i) - .cells(jStep2End, i)) * 0.1
                    Time90 = .cells(jStep3End, i) - (.cells(jStep3End, i) - .cells(jStep2End, i)) * 0.1
                    'Charge Time 90/10 (sec.)
                    'strTb = Application.Address(jStep2Start, i, 4)
                    'strTd = .Cells(jStep2End, i).Address
                    'strTb1 = .Cells(jStep2Start, 2).Address
                    'strTd1 = .Cells(jStep2End, 2).Address
                    'TimeStartIndex = Application.Lookup(3, .range("A2:A5"),.range("B2:B5"))
                    'TimeStartIndex = Application.Lookup(Time10, strTb & ":" & strTd, strTb1 & ":" & strTd1)
                    'TimeEndIndex = Application.Lookup(Time90, strTb & ":" & strTd, strTb1 & ":" & strTd1)
                    'wkSheetPPG.Cells(glReportsRowIndex, 11) = TimeEndIndex - TimeStartIndex
                    'DisCharge Time 10/90 (sec.)
                    'strTb = .Cells(jStep2End + 1, i).Address
                    'strTd = .Cells(jStep3End, i).Address
                    'strTb1 = .Cells(jStep2End + 1, 2).Address
                    'strTd1 = .Cells(jStep3End, 2).Address
                    'TimeStartIndex = Application.Lookup(Time10, strTb & ":" & strTd, strTb1 & ":" & strTd1)
                    'TimeEndIndex = Application.Lookup(Time90, strTb & ":" & strTd, strTb1 & ":" & strTd1)
                    'wkSheetPPG.Cells(glReportsRowIndex, 12) = TimeEndIndex - TimeStartIndex

                    'Charge Time 90/10 (sec.)
                    TimeStartIndex = 0: TimeEndIndex = 0
                    For jTime = jStep2Start To jStep2End
                        If .cells(jTime, i) <= Time90 Then
                            TimeStartIndex = jTime
                            Exit For
                        End If
                    Next jTime
                    If TimeStartIndex = 0 Then
                        jTimeTemp = jStep2Start
                    Else
                        jTimeTemp = TimeStartIndex
                    End If
                    For jTime = jTimeTemp To jStep2End
                        If .cells(jTime, i) <= Time10 Then
                            TimeEndIndex = jTime
                            Exit For
                        End If
                    Next jTime
             
                    If TimeStartIndex <> 0 And TimeEndIndex <> 0 Then
                        wkSheetPPG.cells(glReportsRowIndex, 11) = _
                            .cells(TimeEndIndex, TIMECOL) - .cells(TimeStartIndex, TIMECOL)
                    End If
             
                    'DisCharge Time 10/90 (sec.)
                    TimeStartIndex = 0: TimeEndIndex = 0
                    For jTime = jStep2End + 1 To jStep3End
                        If .cells(jTime, i) >= Time10 Then
                            TimeStartIndex = jTime
                            Exit For
                        End If
                    Next jTime
                    If TimeStartIndex = 0 Then
                        jTimeTemp = jStep2End + 1
                    Else
                        jTimeTemp = TimeStartIndex
                    End If
                    For jTime = jTimeTemp To jStep3End
                        If .cells(jTime, i) >= Time90 Then
                            TimeEndIndex = jTime
                            Exit For
                        End If
                    Next jTime
                    If TimeStartIndex <> 0 And TimeEndIndex <> 0 Then
                        wkSheetPPG.cells(glReportsRowIndex, 12) = _
                            .cells(TimeEndIndex, TIMECOL) - .cells(TimeStartIndex, TIMECOL)
                    End If
                End If
            End If
          
            glReportsRowIndex = glReportsRowIndex + 1
            'If jCycleEndRow = jmaxRow + 1 Then Exit Do
            jCycleIndexNum = jCycleIndexNum + 1
            jCycleStartRow = jCycleEndRow   'new start row
        Loop  ' Cycle
    End With
End Function

Function CaculatePPG(PPGPreSheetName As String)
    Dim wksheet As Worksheet
    Dim i As Integer
    Dim jstart As Long, jEnd As Long, jcolumn As Integer
    Dim maxRow As Long, ColumnIndex As Integer
    Dim rg As Range
    Dim strTd$, strTb$, strFormula$, strName As String
    Dim STEPCOL As Integer
    Dim bNoColumn As Boolean, strCollectName As String

    bNoColumn = False: strCollectName = ""
    For Each wksheet In ActiveWorkbook.Worksheets
        strName = wksheet.Name
        If gfHasChartOf(ActiveWorkbook, strName) = False And InStr(1, strName, PPGPreSheetName) > 0 Then
            STEPCOL = gfGetColumnNumber(wksheet, gbStepIndexName)
            With wksheet
                maxRow = .cells(1, 1).End(xlDown).Row
                ColumnIndex = .Range("A1").End(xlToRight).Column
          
                'Current*1000.0   (A) ---> (mA)
                If gfGetColumnNumber(wksheet, "Current(mA)") <= 0 Then
                    ColumnIndex = ColumnIndex + 1
                    .cells(1, ColumnIndex).ColumnWidth = 13
                    .cells(1, ColumnIndex) = "Current(mA)"
                    Set rg = .Range(.cells(2, ColumnIndex), .cells(maxRow, ColumnIndex))
                    strTd$ = .cells(2, gfGetColumnNumber(wksheet, "Current")).Address(ColumnAbsolute:=False, RowAbsolute:=False)
                    rg = "=" & strTd$ & "*1000.0"
                End If
                
                'Charge (mQ)
                If gfGetColumnNumber(wksheet, "Charge(mQ)") <= 0 Then
                    ColumnIndex = ColumnIndex + 1
                    .cells(1, ColumnIndex).ColumnWidth = 13
                    .cells(1, ColumnIndex) = "Charge(mQ)"
                    Set rg = .Range(.cells(2, ColumnIndex), .cells(maxRow, ColumnIndex))
                    strTd$ = .cells(2, gfGetColumnNumber(wksheet, gbChargeCapacityName)).Address(ColumnAbsolute:=False, RowAbsolute:=False)
                    rg = "=" & strTd$ & "*3600000.0"
                    'rg = "=H2*3600000.0"
                End If
          
                'Optical Density
                i = gfGetColumnNumberInstr(wksheet, "Transmittance")
                If gfGetColumnNumber(wksheet, "Optical Density") <= 0 And i > 0 Then
                    ColumnIndex = ColumnIndex + 1
                    .cells(1, ColumnIndex).ColumnWidth = 13
                    .cells(1, ColumnIndex) = "Optical Density"
          
                    maxRow = iLoopPos(wksheet, 1, STEPCOL, 5) - 1
                    If maxRow = -2 Then maxRow = .cells(1, 1).End(xlDown).Row
                    jEnd = 2    'start row
                    jcolumn = gfGetColumnNumber(wksheet, gbStepIndexName)
                    Do While True
                        'Step Index = 2
                        jstart = iLoopPos(wksheet, jEnd, jcolumn, 2)   'search for 2
                        If jstart = -1 Then Exit Do
                        jEnd = iLoopPos(wksheet, jstart, jcolumn, 3)   'search for 3
                        If jEnd = -1 Then jEnd = maxRow + 1
            
                        Set rg = .Range(.cells(jstart, ColumnIndex), .cells(jEnd - 1, ColumnIndex))
                        strTd = .cells(jstart, i).Address
                        strTb = .cells(jstart, i).Address(RowAbsolute:=False)
                        strFormula = "=LOG(" & strTb & "/" & strTd & ")"
                        rg.Formula = strFormula
                        If jEnd = maxRow + 1 Then Exit Do
           
                        'Step Index = 3
                        jstart = jEnd
                        jEnd = iLoopPos(wksheet, jstart, jcolumn, 2)   'search for next 2
                        If jEnd = -1 Then jEnd = maxRow + 1
            
                        Set rg = .Range(.cells(jstart, ColumnIndex), .cells(jEnd - 1, ColumnIndex))
                        strTd = .cells(jstart, i).Address
                        strTb = .cells(jstart, i).Address(RowAbsolute:=False)
                        strFormula = "=LOG(" & strTb & "/" & strTd & ")"
                        rg.Formula = strFormula
                        If jEnd = maxRow + 1 Then Exit Do
                    Loop
                Else
                    bNoColumn = True
                    strCollectName = strCollectName + wksheet.Name + ", "
                End If
            End With
        End If
    Next wksheet

    If bNoColumn Then
        If giPPGOptionValue > 0 Then
            strCollectName = Left$(strCollectName, Len(strCollectName) - 2)
            gbMsgBoxPrompt = "Can not find Transmittance column in " & strCollectName & "  sheets. " & Chr$(13) & _
                "So, Optical Density column can not be created. " & Chr$(13) & _
                "The T(%) and OD of above sheets can not be calculated and plotted." & Chr$(13) & _
                "You should check: " & Chr$(13) & _
                "1. Data Import Dialog ----> Click Advanced>> button ----> check Auxiliary Channel box." & Chr$(13) & _
                "2. Log Auxiliary data in MITS schedule file."
            gbiMsgBoxResponse = MsgBox(gbMsgBoxPrompt, vbInformation)
        End If
    End If

End Function

Function PreDrawGraphicPPGCyclicStep(PPGPreSheetName As String)
    Dim channelName As String
    Dim i As Integer, j As Integer, strCCName As String
    Dim wksheet As Excel.Worksheet, strName As String
    Dim CustomChartName$(11), XAxis$(11), YAxis$(11)
    
    'Step
    CustomChartName$(1) = "V(V) vs. T": XAxis$(1) = "Test_Time": YAxis$(1) = "Voltage"
    CustomChartName$(2) = "I(mA) vs. T": XAxis$(2) = "Test_Time": YAxis$(2) = "Current(mA)"
    CustomChartName$(3) = "T(%) vs. T": XAxis$(3) = "Test_Time": YAxis$(3) = "Transmittance"
    CustomChartName$(4) = "C(mQ) vs. T": XAxis$(4) = "Test_Time": YAxis$(4) = "Charge(mQ)"
    CustomChartName$(5) = "OD vs. T": XAxis$(5) = "Test_Time": YAxis$(5) = "Optical Density"
    CustomChartName$(6) = "OD vs. C(mQ)": XAxis$(6) = "Charge(mQ)": YAxis$(6) = "Optical Density"
    
    'Cyclic
    CustomChartName$(7) = "V(V) vs. T": XAxis$(7) = "Test_Time": YAxis$(7) = "Voltage"
    CustomChartName$(8) = "I(mA) vs. T": XAxis$(8) = "Test_Time": YAxis$(8) = "Current(mA)"
    CustomChartName$(9) = "T(%) vs. T": XAxis$(9) = "Test_Time": YAxis$(9) = "Transmittance"
    CustomChartName$(10) = "I(mA) vs. V(V)": XAxis$(10) = "Voltage": YAxis$(10) = "Current(mA)"
    CustomChartName$(11) = "T(%) vs. V(V)": XAxis$(11) = "Voltage": YAxis$(11) = "Transmittance"
    
    On Error Resume Next
    Application.ScreenUpdating = False
    For j = 1 To 6
        strCCName = CustomChartName$(j)
        For Each wksheet In ActiveWorkbook.Worksheets
            strName = wksheet.Name
            If gfHasChartOf(ActiveWorkbook, strName) = False And InStr(1, strName, PPGPreSheetName) > 0 Then
                Application.StatusBar = "Processing PPG Cyclic and Step Graph, " & strCCName
                Call DrawGraphic(strCCName, strName, XAxis$(j), YAxis(j), 5)
            End If
        Next wksheet
        Call gfDeleteSeries123InChart(ActiveWorkbook.Charts(strCCName))
        ActiveWorkbook.Charts(strCCName).Deselect
    Next j
    Call ReportsPPGData(PPGPreSheetName)
    Application.ScreenUpdating = True
    On Error GoTo 0
End Function

Function PreDrawGraphicPPGCyclic(PPGPreSheetName As String, iSplit As Long)
    Dim channelName As String
    Dim i As Integer, j As Integer, strCCName As String
    Dim wksheet As Excel.Worksheet, strName As String
    Dim CustomChartName$(5), XAxis$(5), YAxis$(5)
    
    CustomChartName$(1) = "CV V(V) vs. T": XAxis$(1) = "Test_Time": YAxis$(1) = "Voltage"
    CustomChartName$(2) = "CV I(mA) vs. T": XAxis$(2) = "Test_Time": YAxis$(2) = "Current(mA)"
    CustomChartName$(3) = "CV T(%) vs. T": XAxis$(3) = "Test_Time": YAxis$(3) = "Transmittance"
    CustomChartName$(4) = "CV I(mA) vs. V(V)": XAxis$(4) = "Voltage": YAxis$(4) = "Current(mA)"
    CustomChartName$(5) = "CV T(%) vs. V(V)": XAxis$(5) = "Voltage": YAxis$(5) = "Transmittance"
    
    On Error Resume Next
    Application.ScreenUpdating = False
    For j = 1 To 5
        strCCName = CustomChartName$(j)
        For Each wksheet In ActiveWorkbook.Worksheets
            strName = wksheet.Name
            If gfHasChartOf(ActiveWorkbook, strName) = False And InStr(1, strName, PPGPreSheetName) > 0 Then
                Application.StatusBar = "Processing PPG Cyclic Graph, " & strCCName
                Call DrawGraphic(strCCName, strName, XAxis$(j), YAxis(j), iSplit)
            End If
        Next wksheet
        Call gfDeleteSeries123InChart(ActiveWorkbook.Charts(strCCName))
        ActiveWorkbook.Charts(strCCName).Deselect
    Next j
    Application.ScreenUpdating = True
    On Error GoTo 0
    
End Function

Function PreDrawGraphicPPGStep(PPGPreSheetName As String, iSplit As Long)
    Dim i As Integer, j As Integer
    Dim channelName As String, strCCName As String
    Dim wksheet As Excel.Worksheet, strName As String
    Dim CustomChartName$(6), XAxis$(6), YAxis$(6)
    
    CustomChartName$(1) = "V(V) vs. T": XAxis$(1) = "Test_Time": YAxis$(1) = "Voltage"
    CustomChartName$(2) = "I(mA) vs. T": XAxis$(2) = "Test_Time": YAxis$(2) = "Current(mA)"
    CustomChartName$(3) = "T(%) vs. T": XAxis$(3) = "Test_Time": YAxis$(3) = "Transmittance"
    CustomChartName$(4) = "C(mQ) vs. T": XAxis$(4) = "Test_Time": YAxis$(4) = "Charge(mQ)"
    CustomChartName$(5) = "OD vs. T": XAxis$(5) = "Test_Time": YAxis$(5) = "Optical Density"
    CustomChartName$(6) = "OD vs. C(mQ)": XAxis$(6) = "Charge(mQ)": YAxis$(6) = "Optical Density"
    
    On Error Resume Next
    Application.ScreenUpdating = False
    For j = 1 To 6
        strCCName = CustomChartName$(j)
        For Each wksheet In ActiveWorkbook.Worksheets
            strName = wksheet.Name
            If gfHasChartOf(ActiveWorkbook, strName) = False And InStr(1, strName, PPGPreSheetName) > 0 Then
                Application.StatusBar = "Processing PPG Step Graph, " & strCCName
                Call DrawGraphic(strCCName, strName, XAxis$(j), YAxis(j), iSplit)
            End If
        Next wksheet
        Call gfDeleteSeries123InChart(ActiveWorkbook.Charts(strCCName))
        ActiveWorkbook.Charts(strCCName).Deselect
    Next j
    Call ReportsPPGData(PPGPreSheetName)
    Application.ScreenUpdating = True
    On Error GoTo 0
End Function

Function PPGSheetPageSetup(wksheet As Excel.Worksheet)
    If gbbIsPrinterExist = True Then
      With wksheet.PageSetup
        .CenterHeader = "Custom Software for PPG Instrument"
        .LeftFooter = "&D &T"
        .CenterFooter = "PPG Industries Confidential Information"
        .RightFooter = "PCY" & Chr(10) & ""
        .LeftMargin = Application.InchesToPoints(0.5)
        .RightMargin = Application.InchesToPoints(0.5)
        .PrintGridlines = True
        .Orientation = xlLandscape
        .Zoom = 50
      End With
    End If
End Function

Function PPGSheetTitle(wksheet As Excel.Worksheet)
    With wksheet
        .cells.HorizontalAlignment = xlCenter
        .cells.NumberFormat = "0.00"
        .cells(1, 1) = "Channel No."
        .cells(1, 2) = "Cycle No."
        .cells(1, 3) = "Charge Volt. (V)"
        .cells(1, 4) = "Discharge Volt. (V)"
        .cells(1, 5) = "Area (cm2)"
        .cells(1, 6) = "T(%): Charge"
        .cells(1, 7) = "T(%): Discharge"
        .cells(1, 8) = "Optical Density"
        .cells(1, 9) = "Peak I(mA): Charge"
        .cells(1, 10) = "Peak I(mA): Discharge"
        .cells(1, 11) = "Time 90/10 (sec.)"
        .cells(1, 12) = "Time 10/90 (sec.)"
        .cells(1, 13) = "CE: Charge (cm2/Q)"
        .cells(1, 14) = "CE: Discharge (cm2/Q)"
        .cells(1, 15) = "Q(mQ): Charge"
        .cells(1, 16) = "Q(mQ): Discharge"
        .Rows(1).Font.FontStyle = "Bold"
        .Rows(1).Columns.AutoFit
    End With
End Function


Function DrawGraphic(ChartName As String, channelName As String, column1Name As String, _
    column2Name As String, iSplit As Long)
    Dim wkChart As Excel.Chart
    Dim column1 As Integer, column2 As Integer
    Dim NewSeries As Series
    Dim SheetName As String, range1 As String, range2 As String
    Dim StartLine As Long, EndLine As Long
    Dim wksheet As Excel.Worksheet, strTemp As String
    
    Dim lRowFromIn As Long, lRowToIn As Long
    Dim lRowFrom As Long, lRowTo As Long
    Dim strTemp0 As String  'Append to Series name
    Dim iLoop As Integer, iLoopEnd As Integer

On Error GoTo DrawGraphicErrorHandle
    Set wkChart = gfGetPlotChart(ActiveWorkbook, ChartName)
    SheetName = channelName
    
    For Each wksheet In ActiveWorkbook.Worksheets
        If InStr(1, wksheet.Name, SheetName) > 0 Then
            'If Not HasSheetOf(SheetName) Then SheetName = SheetName & "_1"
            'Set wkSheet = ActiveWorkbook.Worksheets(SheetName)
            'get X axis column number
            column1 = gfGetColumnNumberInstr(wksheet, column1Name)
            'get Y axis column number
            column2 = gfGetColumnNumberInstr(wksheet, column2Name)
            If column1 < 0 Or column2 < 0 Then
                Exit Function
            End If
            
            If GetStartEndLineByiSplit(wksheet, iSplit, _
                StartLine, EndLine) = False Then Exit Function
            
            'check plot point not over than 32000  glMaxSeriesRowsNum
            lRowFromIn = StartLine:    lRowToIn = EndLine
            iLoopEnd = Int((lRowToIn - lRowFromIn) / glMaxSeriesRowsNum)
            For iLoop = 0 To iLoopEnd
                strTemp0 = gfGetRowFromToByMaxSeriesRowsNum(iLoop, iLoopEnd, _
                    lRowFromIn, lRowToIn, lRowFrom, lRowTo)
                strTemp = gfSimplifySheetName(wksheet.Name) & " " & column2Name & " "
                'add a new series
                Set NewSeries = AddNewSeries(wkChart, strTemp & strTemp0, 1)
                With wksheet
                    NewSeries.XValues = .Range(.cells(lRowFrom, column1), .cells(lRowTo, column1))
                    NewSeries.Values = .Range(.cells(lRowFrom, column2), .cells(lRowTo, column2))
                End With
            Next iLoop
        End If
    Next wksheet
    
    With wkChart
    'With setPlotChart
        'set chart's axes title
        .HasTitle = True
        .ChartTitle.Font.Bold = True
        .ChartTitle.Caption = column2Name & " vs. " & column1Name

        'set Y1 axis title
        .Axes(xlValue, 1).HasTitle = True
        .Axes(xlValue, 1).AxisTitle.Characters.Text = column2Name
        .Axes(xlCategory, 1).HasTitle = True
        .Axes(xlCategory, 1).AxisTitle.Characters.Text = column1Name
    End With
    On Error GoTo 0
    Exit Function
    
DrawGraphicErrorHandle:
    MsgBox "Can not plot! " & Err.Description
    On Error GoTo 0
End Function

Function GetStartEndLineByiSplit(wksheet As Excel.Worksheet, iSplit As Long, _
        StartLine As Long, EndLine As Long) As Boolean
    Dim jcolumn As Integer
    GetStartEndLineByiSplit = False
    If iSplit = 0 Then
        StartLine = 2
        EndLine = wksheet.cells(1, 1).End(xlDown).Row
        'EndLine = wkSheet.Cells(1, column2).End(xlDown).Row
    ElseIf iSplit < 0 Then
        StartLine = 2
        jcolumn = gfGetColumnNumber(wksheet, gbStepIndexName)
        'search StepIndex=4EndLine
        EndLine = iLoopPos(wksheet, 2, jcolumn, Abs(iSplit)) - 1
        If EndLine < 2 Then EndLine = wksheet.cells(1, 1).End(xlDown).Row
    Else
        jcolumn = gfGetColumnNumber(wksheet, gbStepIndexName)
        'search StepIndex=5StartLine
        StartLine = iLoopPos(wksheet, 2, jcolumn, iSplit)
        If StartLine < 2 Then Exit Function
        EndLine = wksheet.cells(1, 1).End(xlDown).Row
    End If
    If EndLine < 2 Then Exit Function
    GetStartEndLineByiSplit = True
End Function

Function AddNewSeries(wkChart As Excel.Chart, SeriesName As String, axisType As Integer) As Series
    Dim ctsr As Series
    Dim sname As String
    Set ctsr = wkChart.SeriesCollection.NewSeries
    '--set axis's style and group
    ctsr.AxisGroup = axisType
    'ctsr.MarkerStyle = xlNone
    '--set series's name
    ctsr.Name = SeriesName
    '--return new series
    Set AddNewSeries = ctsr
End Function

Attribute VB_Name = "PPGForm"
Attribute VB_Base = "0{2348840F-19A1-4856-BE52-DACB5CB18164}{E3CF6297-BAAC-49EE-B6EE-7E60009B98D5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Sub btnCancel_Click()
    giPPGOptionValue = -1
    Me.Hide
End Sub

Private Sub btnOK_Click()
    giPPGOptionValue = 0
    'If OptionPPGNone.Value = True Then giPPGOptionValue = 0
    If OptionPPGCyclicStep.Value = True Then giPPGOptionValue = 1
    If OptionPPGCyclic.Value = True Then giPPGOptionValue = 2
    If OptionPPGStep.Value = True Then giPPGOptionValue = 3
    Me.Hide
End Sub

Attribute VB_Name = "PlotWizardModule"

Option Explicit
Public gbShowWhichForm As Integer
Public gbbShowPlotWizard3 As Boolean
Public gbPWP3Option As Integer
Public gbPWP3strColumnName As String, gbPWP3fColumnMin As Variant, gbPWP3fColumnMax As Variant
Public gbPWP3strColumnName1 As String, gbPWP3fColumnMin1 As Variant, gbPWP3fColumnMax1 As Variant
Public gbChartTitleDetail2 As String
Public gbSerieswkBookSheet2(8) As String


Function GetChartNameByPWP1Form(wkbook As Excel.Workbook, PreSheetName As String) As String
    Dim strName As String
    If PlotWizardPage1.CheckBoxNewChart.Value Then
        If wkbook.Name <> gbLastwkChartbookName Then gbwkChartCount = 0
        strName = PreSheetName & "_Chart_" & gbwkChartCount + 1
        Do While gfHasChartOf(wkbook, strName)
            gbwkChartCount = gbwkChartCount + 1
            strName = PreSheetName & "_Chart_" & gbwkChartCount + 1
        Loop
    Else
        strName = PreSheetName & "_Chart"
    End If
    gbLastwkChartbookName = wkbook.Name
    GetChartNameByPWP1Form = strName
End Function

Function GetRowFromToByPWP3Form(wksheet As Excel.Worksheet, _
    lRowFrom As Long, lRowTo As Long) As Boolean
    
    GetRowFromToByPWP3Form = False
    If gbbShowPlotWizard3 = False Then Exit Function
    
    GetRowFromToByPWP3Form = gfGetRowFromToByValue(wksheet, gbPWP3strColumnName, _
        gbPWP3fColumnMin, gbPWP3fColumnMax, lRowFrom, lRowTo)
    
    If GetRowFromToByPWP3Form And gbPWP3Option = 5 Then
        GetRowFromToByPWP3Form = gfGetRowFromToByValueAndRowLimit(wksheet, _
            gbPWP3strColumnName1, gbPWP3fColumnMin1, gbPWP3fColumnMax1, lRowFrom, lRowTo)
    End If

End Function

Function PlotGraphInWizard123(wkbook As Excel.Workbook, PreSheetName As String)
    Dim wkbookName As String, wksheet As Excel.Worksheet
    Dim wkChartbook As Excel.Workbook, wkChart As Excel.Chart
    Dim XColumnName As String, Y1ColumnName As String, Y2ColumnName As String
    Dim strName As String, strMsg As String
    Dim lRowFrom As Long, lRowTo As Long
    Dim bSuccess As Boolean, bTemp As Boolean, bSetXaxis As Boolean
    Dim bAddNewSeries1Success As Boolean, bAddNewSeries2Success As Boolean
    Dim iLoop As Integer
    Dim lCycleIndex As Long
    Dim strSerialName As String
            
    Call DeSelectRangeOnActivewkSheet
    wkbookName = wkbook.Name
    Set wkChartbook = wkbook
    strName = GetChartNameByPWP1Form(wkbook, gbPreSheetName)
    Set wkChart = gfInitPlotChart(wkbook, strName)
    
    gbLastwkChartbookName = wkChartbook.Name
    gbLastwkChartName = wkChart.Name
    gbbHasLastwkChart = True
    
    Application.ScreenUpdating = False
    strMsg = "": bSetXaxis = False
    bAddNewSeries1Success = False: bAddNewSeries2Success = False
    XColumnName = PlotWizardPage2.LabelX.Caption
    Y1ColumnName = PlotWizardPage2.LabelY1.Caption
    Y2ColumnName = PlotWizardPage2.LabelY2.Caption
    gbLastXColumnName = XColumnName
    gbLastY1ColumnName = Y1ColumnName
    gbLastY2ColumnName = Y2ColumnName
    
    For iLoop = 0 To PlotWizardPage1.ListBoxSheet.ListCount - 1
    
        If PlotWizardPage1.ListBoxSheet.Selected(iLoop) Then
                strName = PlotWizardPage1.ListBoxSheet.List(iLoop)
                Set wksheet = wkbook.Worksheets(strName)
                If gbbShowPlotWizard3 = True Then
                    bSuccess = GetRowFromToByPWP3Form(wksheet, lRowFrom, lRowTo)
                Else
                    bSuccess = gfGetRowFromToMinMax(wksheet, XColumnName, lRowFrom, lRowTo)
                End If
                If bSuccess Then
                    'bTemp = gfCheck32000Value(wkSheet, lRowFrom, lRowTo)
                    'Y1
                        If Y1ColumnName <> "" Then
                                If gbPWP3Option = 5 And gbbShowPlotWizard3 Then
                                For lCycleIndex = gbPWP3fColumnMin To gbPWP3fColumnMax
                                      bSuccess = gfGetRowFromToMinMax(wksheet, XColumnName, lRowFrom, lRowTo)
                                      bSuccess = gfGetRowFromToByValueAndRowLimit(wksheet, gbCycleIndexName, _
                                      lCycleIndex, lCycleIndex, lRowFrom, lRowTo)
                                     If gbPWP3fColumnMin1 <> 0 And gbPWP3fColumnMax1 <> 0 Then
                                        strSerialName = Right(wksheet.Name, 5) & Y1ColumnName & Str(gbPWP3fColumnMin1) & "-" & Str(gbPWP3fColumnMax1) & "@" & lCycleIndex
                                            If gfGetRowFromToByValueAndRowLimit(wksheet, gbStepIndexName, _
                                                gbPWP3fColumnMin1, gbPWP3fColumnMax1, lRowFrom, lRowTo) Then
                                                bTemp = gfAddNewSeriesToChart(wkbookName, wksheet, XColumnName, _
                                                wkbookName, wksheet, Y1ColumnName, lRowFrom, lRowTo, xlPrimary, wkChart, strSerialName)
                                            End If
                                     End If
                                     DoEvents
                                Next lCycleIndex
                                Else
                                bTemp = gfAddNewSeriesToChart(wkbookName, wksheet, XColumnName, _
                                wkbookName, wksheet, Y1ColumnName, lRowFrom, lRowTo, xlPrimary, wkChart, "")
                            End If
                            If bTemp = True Then bAddNewSeries1Success = True
                        End If
                    'Y2
                        If Y2ColumnName <> "" Then
                                If gbPWP3Option = 5 And gbbShowPlotWizard3 Then
                                For lCycleIndex = gbPWP3fColumnMin To gbPWP3fColumnMax
                                      strSerialName = Right(wksheet.Name, 5) & Y1ColumnName & Str(gbPWP3fColumnMin1) & "-" & Str(gbPWP3fColumnMax1) & "@" & lCycleIndex
                                      bSuccess = gfGetRowFromToMinMax(wksheet, XColumnName, lRowFrom, lRowTo)
                                      bSuccess = gfGetRowFromToByValueAndRowLimit(wksheet, gbCycleIndexName, _
                                      lCycleIndex, lCycleIndex, lRowFrom, lRowTo)
                                     If gbPWP3fColumnMin1 <> 0 And gbPWP3fColumnMax1 <> 0 Then
                                            If gfGetRowFromToByValueAndRowLimit(wksheet, gbStepIndexName, _
                                                gbPWP3fColumnMin1, gbPWP3fColumnMax1, lRowFrom, lRowTo) Then
                                                bTemp = gfAddNewSeriesToChart(wkbookName, wksheet, XColumnName, _
                                                wkbookName, wksheet, Y2ColumnName, lRowFrom, lRowTo, xlSecondary, wkChart, strSerialName)
                                            End If
                                     End If
                                     DoEvents
                                Next lCycleIndex
                                Else
                                bTemp = gfAddNewSeriesToChart(wkbookName, wksheet, XColumnName, _
                                wkbookName, wksheet, Y2ColumnName, lRowFrom, lRowTo, xlSecondary, wkChart, "")
                            End If
                            If bTemp = True Then bAddNewSeries2Success = True
                        End If
                Else
                    strMsg = strMsg & "Can not apply filter in " & wksheet.Name & " sheet.  " & Chr$(13)
                End If   'bSuccess
                'Adjust Xaxis
                If bSetXaxis = False And gbbShowPlotWizard3 = True Then
                    If bAddNewSeries1Success Or bAddNewSeries2Success Then
                        Call gfSetPlotChartXaxis(wkChart, wksheet, XColumnName, lRowFrom, lRowTo)
                        bSetXaxis = True
                    End If
                End If
        End If
    DoEvents  'a while for CPU
    Sleep gSleepTime
    Next iLoop
                    
    'Title
    If gbbTimeFormat = True Then
        XColumnName = XColumnName & "(" & gptTimeUnitTitle & ")"
    End If
    If bAddNewSeries1Success And bAddNewSeries2Success Then
        Call gfSetPlotChartTitle(wkChart, Y1ColumnName & ", " & Y2ColumnName & _
            " vs. " & XColumnName & gbChartTitleDetail2, _
            XColumnName, Y1ColumnName, Y2ColumnName)
    ElseIf bAddNewSeries1Success Then
        Call gfSetPlotChartTitle(wkChart, Y1ColumnName & _
            " vs. " & XColumnName & gbChartTitleDetail2, _
            XColumnName, Y1ColumnName, "")
    End If
    Call gfAfterPlotChart(wkChart)
    If strMsg <> "" Then
        gbiMsgBoxResponse = MsgBox(strMsg, vbInformation)
    End If
    wkChartbook.Activate
    wkChart.Deselect
'    Application.ScreenUpdating = True
End Function
 
Function PlotGraphAdvanced(wkbook As Excel.Workbook, PreSheetName As String)
    Dim wkSheetX As Excel.Worksheet, wkSheetY As Excel.Worksheet
    Dim wkChartbook As Excel.Workbook, wkChart As Excel.Chart
    Dim XColumnName As String, Y1ColumnName As String, Y2ColumnName As String
    Dim strName As String, strMsg As String
    Dim lRowFrom As Long, lRowTo As Long
    Dim bSuccess As Boolean, bTemp As Boolean, bSetXaxis As Boolean
    Dim bAddNewSeries1Success As Boolean, bAddNewSeries2Success As Boolean
    Dim iLoop As Integer, i As Integer
            
    Call DeSelectRangeOnActivewkSheet
    Set wkChartbook = wkbook
    strName = GetChartNameByPWP1Form(wkbook, "Multifile")
    Set wkChart = gfInitPlotChart(wkbook, strName)
    
    gbLastwkChartbookName = wkChartbook.Name
    gbLastwkChartName = wkChart.Name
    gbbHasLastwkChart = True
    'gbPlotLogFileNum = FreeFile   ' Get unused file number.
    gbPlotLogFileNum = 3
    Open ThisWorkbook.Path & "\" & "Mits_DataProPlot.log" For Append As #gbPlotLogFileNum
    Print #gbPlotLogFileNum, Date, Time
    Print #gbPlotLogFileNum, "MultifilePlotChart = "; gbLastwkChartbookName & "!" & gbLastwkChartName
    If gbChartTitleDetail2 <> "" Then Print #gbPlotLogFileNum, Right$(gbChartTitleDetail2, Len(gbChartTitleDetail2) - 1)
    Print #gbPlotLogFileNum, " "
    
    Application.ScreenUpdating = False
    strMsg = ""
    bAddNewSeries1Success = False: bAddNewSeries2Success = False
    With AdvancedPlot.ListBoxDataSeries
        'Y1
        For i = 0 To .ListCount - 1
            If .List(i, 7) = "Y1" Then
                Set wkSheetX = Workbooks(.List(i, 1)).Worksheets(.List(i, 2))
                Set wkSheetY = Workbooks(.List(i, 4)).Worksheets(.List(i, 5))
                XColumnName = .List(i, 3)
                If gbbShowPlotWizard3 = True Then
                    bSuccess = GetRowFromToByPWP3Form(wkSheetY, lRowFrom, lRowTo)
                Else
                    bSuccess = gfGetRowFromToMinMax(wkSheetY, XColumnName, lRowFrom, lRowTo)
                End If
                If bSuccess Then
                    'bTemp = gfCheck32000Value(wkSheetY, lRowFrom, lRowTo)
                    Y1ColumnName = .List(i, 6)
                    bTemp = gfAddNewSeriesToChart(.List(i, 1), wkSheetX, XColumnName, _
                    .List(i, 4), wkSheetY, Y1ColumnName, lRowFrom, lRowTo, xlPrimary, wkChart, .List(i, 0))
                    If bTemp = True Then bAddNewSeries1Success = True
                Else
                    strMsg = strMsg & "Can not apply filter in " & wkSheetY.Name & " sheet.  " & Chr$(13)
                End If
                'Adjust Xaxis
                If bSetXaxis = False And gbbShowPlotWizard3 = True Then
                    If bAddNewSeries1Success Or bAddNewSeries2Success Then
                        Call gfSetPlotChartXaxis(wkChart, wkSheetX, XColumnName, lRowFrom, lRowTo)
                        bSetXaxis = True
                    End If
                End If
            End If
        Next i
        'Y2
        For i = 0 To .ListCount - 1
            If .List(i, 7) = "Y2" Then
                Set wkSheetX = Workbooks(.List(i, 1)).Worksheets(.List(i, 2))
                Set wkSheetY = Workbooks(.List(i, 4)).Worksheets(.List(i, 5))
                XColumnName = .List(i, 3)
                If gbbShowPlotWizard3 = True Then
                    bSuccess = GetRowFromToByPWP3Form(wkSheetY, lRowFrom, lRowTo)
                Else
                    bSuccess = gfGetRowFromToMinMax(wkSheetY, XColumnName, lRowFrom, lRowTo)
                End If
                If bSuccess Then
                    'bTemp = gfCheck32000Value(wkSheetY, lRowFrom, lRowTo)
                            Y2ColumnName = .List(i, 6)
                            bTemp = gfAddNewSeriesToChart(.List(i, 1), wkSheetX, XColumnName, _
                            .List(i, 4), wkSheetY, Y2ColumnName, lRowFrom, lRowTo, xlSecondary, wkChart, .List(i, 0))
                            If bTemp = True Then bAddNewSeries2Success = True
                Else
                    strMsg = strMsg & "Can not apply filter in " & wkSheetY.Name & " sheet.  " & Chr$(13)
                End If
            End If
        Next i
        DoEvents
        Sleep gSleepTime
    End With
    Print #gbPlotLogFileNum, "":    Close #gbPlotLogFileNum
    gbPlotLogFileNum = -1
    
    'Title
    With AdvancedPlot
        strName = ""
        If bAddNewSeries2Success Then strName = .TextY2Title
        If bAddNewSeries1Success Then
            Call gfSetPlotChartTitle(wkChart, .TextChartTitle & gbChartTitleDetail2, _
                .TextXTitle, .TextY1Title, strName)
        End If
    End With
    Call gfAfterPlotChart(wkChart)
    If strMsg <> "" Then
        gbiMsgBoxResponse = MsgBox(strMsg, vbInformation)
    End If
    wkChartbook.Activate
    wkChart.Deselect
    'Application.ScreenUpdating = True
End Function

Function PlotQuickGraph(wkbook As Excel.Workbook, PreSheetName As String, iMaxCellNum As Integer)
    Dim wkbookName As String, wksheet As Excel.Worksheet
    Dim wkChartbook As Excel.Workbook, wkChart As Excel.Chart
    Dim XColumnName As String, Y1ColumnName As String, Y2ColumnName As String
    Dim strName As String, strMsg As String
    Dim lRowFrom As Long, lRowTo As Long
    Dim i As Integer, j As Integer, iColumn As Integer
    Dim iColumnX As Integer, iColumnY1 As Integer, iColumnY2 As Integer
    Dim bSuccess As Boolean, bTemp As Boolean, bSetXaxis As Boolean
    Dim bAddNewSeries1Success As Boolean, bAddNewSeries2Success As Boolean
    
    Dim bIsCell1Loop As Boolean, bIsCell2Loop As Boolean
    Dim iEndColumn As Integer
            
    Call DeSelectRangeOnActivewkSheet
    wkbookName = wkbook.Name
    Set wkChartbook = wkbook
    Set wkChart = gfInitPlotChart(wkbook, PreSheetName & "_Chart")
    
    gbLastwkChartbookName = wkChartbook.Name
    gbLastwkChartName = wkChart.Name
    gbbHasLastwkChart = True
    
    XColumnName = gbLastXColumnName
    If XColumnName = "" Then XColumnName = gbTestTimeName
    
    Y1ColumnName = gbLastY1ColumnName
    If Y1ColumnName = "" Then Y1ColumnName = gbCurrentName
    strName = Y1ColumnName
    Y1ColumnName = DeleteCellWord(strName)
    
    Y2ColumnName = gbLastY2ColumnName
    If Y2ColumnName = "" And gbLastY1ColumnName = "" Then
        Y2ColumnName = gbVoltageName
    End If
    strName = Y2ColumnName
    Y2ColumnName = DeleteCellWord(strName)
    
    Application.ScreenUpdating = False
    strMsg = "": bSetXaxis = False
    bAddNewSeries1Success = False: bAddNewSeries2Success = False
    
    For Each wksheet In wkbook.Worksheets
        strName = wksheet.Name
        If gfHasChartOf(wkbook, strName) = False And InStr(1, strName, PreSheetName) = 1 Then
                
                bSuccess = gfGetRowFromToMinMax(wksheet, XColumnName, lRowFrom, lRowTo)
                
                If bSuccess Then
'                    bIsCell1Loop = False: bIsCell2Loop = False
'                    If PreSheetName = gbMultiCellChannelName And iMaxCellNum > 0 Then
'                        iEndColumn = wkSheet.Range("A1").End(xlToRight).Column
'                        If iEndColumn < giMaxColumnsNum And iEndColumn > 0 Then
'                            With wkSheet
'                                For I = 1 To iEndColumn
'                                    If InStr(1, .Cells(1, I), Y1ColumnName) > 0 Then
'                                        If InStr(1, .Cells(1, I), "Cell") > 0 Then bIsCell1Loop = True
'                                        Exit For
'                                    End If
'                                Next I
'                                For I = 1 To iEndColumn
'                                    If InStr(1, .Cells(1, I), Y2ColumnName) > 0 Then
'                                        If InStr(1, .Cells(1, I), "Cell") > 0 Then bIsCell2Loop = True
'                                        Exit For
'                                    End If
'                                Next I
'                            End With
'                        End If
'                    End If
                    iColumnX = gfGetColumnNumber(wksheet, XColumnName)
                    If iColumnX > 0 Then
'                    If bIsCell1Loop = True Then
'                        For I = 1 To iMaxCellNum
'                            strMsg = "Cell" & I & "_" & Y1ColumnName
'                            bTemp = gfAddNewSeriesToChart(wkbookName, wkSheet, XColumnName, _
'                            wkbookName, wkSheet, strMsg, lRowFrom, lRowTo, xlPrimary, wkChart, "")
'                            If bTemp = True Then bAddNewSeries1Success = True
'                        Next I
'                    Else
                        iColumnY1 = gfGetColumnNumber(wksheet, Y1ColumnName)
                        If iColumnY1 > 0 Then
                            bTemp = gfAddNewSeriesToChart(wkbookName, wksheet, XColumnName, _
                            wkbookName, wksheet, Y1ColumnName, lRowFrom, lRowTo, xlPrimary, wkChart, "")
                            If bTemp = True Then bAddNewSeries1Success = True
                        End If
'                    End If
'                    If bIsCell2Loop = True Then
'                        For I = 1 To iMaxCellNum
'                            strMsg = "Cell" & I & "_" & Y2ColumnName
'                            bTemp = gfAddNewSeriesToChart(wkbookName, wkSheet, XColumnName, _
'                            wkbookName, wkSheet, strMsg, lRowFrom, lRowTo, xlSecondary, wkChart, "")
'                            If bTemp = True Then bAddNewSeries2Success = True
'                        Next I
'                    Else
                        iColumnY2 = gfGetColumnNumber(wksheet, Y2ColumnName)
                        If iColumnY2 > 0 And bAddNewSeries1Success = True Then
                            bTemp = gfAddNewSeriesToChart(wkbookName, wksheet, XColumnName, _
                            wkbookName, wksheet, Y2ColumnName, lRowFrom, lRowTo, xlSecondary, wkChart, "")
                            If bTemp = True Then bAddNewSeries2Success = True
                        End If
'                    End If
                    End If  'iColumnX > 0
                End If   'bSuccess
        End If
    Next wksheet
    'Title
    If bAddNewSeries1Success And bAddNewSeries2Success Then
        Call gfSetPlotChartTitle(wkChart, Left$(Y1ColumnName & ", " & Y2ColumnName & _
            " vs. " & XColumnName & gbChartTitleDetail2, 255), _
            XColumnName, Y1ColumnName, Y2ColumnName)
    ElseIf bAddNewSeries1Success Then
        Call gfSetPlotChartTitle(wkChart, Left$(Y1ColumnName & _
            " vs. " & XColumnName & gbChartTitleDetail2, 255), _
            XColumnName, Y1ColumnName, "")
    ElseIf bAddNewSeries2Success Then
        Call gfSetPlotChartTitle(wkChart, Left$(Y2ColumnName & _
            " vs. " & XColumnName & gbChartTitleDetail2, 255), _
            XColumnName, "", Y2ColumnName)
    Else
        strMsg = "Can't find Y1 axes (" & Y1ColumnName & ") or X axes (" & XColumnName & ")." _
            & Chr$(13) & gbCurrentName & " and " & gbTestTimeName & " will be used as default next time."
        gbLastY1ColumnName = gbCurrentName
        gbLastXColumnName = gbTestTimeName
        gbiMsgBoxResponse = MsgBox(strMsg, vbInformation)
    End If
    Call gfAfterPlotChart(wkChart)
    wkChartbook.Activate
    wkChart.Deselect
    'Application.ScreenUpdating = True
End Function

Function DeleteCellWord(strTemp As String) As String
    Dim j As Integer
    If InStr(1, strTemp, "Cell") > 0 Then
        j = InStr(1, strTemp, "_")
        DeleteCellWord = Right$(strTemp, Len(strTemp) - j)
    Else
        DeleteCellWord = strTemp
    End If
End Function

Attribute VB_Name = "PlotWizardPage1"
Attribute VB_Base = "0{767ED657-A0E9-4F21-92D2-BD9131478D8F}{730EEB9E-D958-409F-B5F1-E0D7BC308FB8}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False







Option Explicit

Private Sub btnCancel_Click()
    Unload Me
End Sub

Private Sub btnNext_Click()
    Dim FirstGetIndex As Integer, FirstGetString As String
    If gfListBoxFindFirstSelected(ListBoxSheet, 0, FirstGetIndex, FirstGetString) Then
        If OptionPlotOnSheet.Value = True Then
            If ListBoxSheet.ListCount > 0 Then
                Me.Hide
                PlotWizardPage2.Show
                Exit Sub
            End If
        End If
        If OptionPlotOnFile.Value = True Then
            Me.Hide
            AdvancedPlot.Show
            Exit Sub
        End If
    Else
        gbMsgBoxPrompt = "At least ONE sheet or file should be selected."
        gbiMsgBoxResponse = MsgBox(gbMsgBoxPrompt, vbInformation)
    End If
End Sub

Private Sub CheckBoxHoldCtrlShift_Click()
    If CheckBoxHoldCtrlShift.Value Then
        ListBoxSheet.MultiSelect = fmMultiSelectExtended
        ListBoxSheet.ControlTipText = "Hold 'Shift' Key for Multi-selection"
    Else
        ListBoxSheet.MultiSelect = fmMultiSelectMulti
        ListBoxSheet.ControlTipText = ""
    End If
    If ListBoxSheet.ListCount > 0 Then ListBoxSheet.Selected(0) = True
End Sub

Private Sub ListBoxSheet_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    If OptionPlotOnFile.Value = True Then
        btnNext_Click
    End If
End Sub

Private Sub OptionMultiCellNorm_Click()
    gbPreSheetName = gbMultiCellChannelName
    OptionPlotOnSheet.Value = True
    Call ListSheetsInWorkbook(ActiveWorkbook, gbPreSheetName)
End Sub

Private Sub OptionMultiCellStat_Click()
    gbPreSheetName = gbMultiCellStatisticName
    OptionPlotOnSheet.Value = True
    Call ListSheetsInWorkbook(ActiveWorkbook, gbPreSheetName)
End Sub

Private Sub OptionChannelNorm_Click()
    gbPreSheetName = gbChannelName
    OptionPlotOnSheet.Value = True
    Call ListSheetsInWorkbook(ActiveWorkbook, gbPreSheetName)
End Sub

Private Sub OptionChannelStat_Click()
    gbPreSheetName = gbStatisticsName
    OptionPlotOnSheet.Value = True
    Call ListSheetsInWorkbook(ActiveWorkbook, gbPreSheetName)
End Sub

Private Sub OptionSmartBattery_Click()
    gbPreSheetName = gbSmartBatteryName
    OptionPlotOnSheet.Value = True
    Call ListSheetsInWorkbook(ActiveWorkbook, gbPreSheetName)
End Sub

Private Sub OptionPlotOnFile_Click()
    Dim wkbook As Excel.Workbook, strName As String
    Call FrameSelectDataEnableFalse
    ListBoxSheet.Clear
    For Each wkbook In Excel.Workbooks
        strName = wkbook.Name
        If InStr(1, strName, "Mits_DataPro") < 1 Then
            ListBoxSheet.AddItem strName
        End If
    Next wkbook
    If ListBoxSheet.ListCount > 0 Then ListBoxSheet.Selected(0) = True
    FrameChannelData.Caption = "Plot Multifiles"
    btnNext.SetFocus
End Sub

Private Sub OptionPlotOnSheet_Click()
    Call FrameSelectDataEnableTrue
    If OptionChannelNorm.Value = True Then
        Call OptionChannelNorm_Click
    ElseIf OptionChannelStat.Value = True Then
        Call OptionChannelStat_Click
    ElseIf OptionMultiCellNorm.Value = True Then
        Call OptionMultiCellNorm_Click
    ElseIf OptionMultiCellStat.Value = True Then
        Call OptionMultiCellStat_Click
    ElseIf OptionSmartBattery.Value = True Then
        Call OptionSmartBattery_Click
    End If
    FrameChannelData.Caption = "Plot " & ActiveWorkbook.Name
End Sub

Private Sub FrameSelectDataEnableTrue()
    FrameSelectData.Enabled = True
    OptionChannelNorm.Enabled = True
    OptionChannelStat.Enabled = True
    OptionMultiCellNorm.Enabled = True
    OptionMultiCellStat.Enabled = True
    OptionSmartBattery.Enabled = True
    'LabelFromCell.Enabled = True: TextFromCell.Enabled = True
    'LabelToCell.Enabled = True: TextToCell.Enabled = True
End Sub

Private Sub FrameSelectDataEnableFalse()
    FrameSelectData.Enabled = False
    OptionChannelNorm.Enabled = False
    OptionChannelStat.Enabled = False
    OptionMultiCellNorm.Enabled = False
    OptionMultiCellStat.Enabled = False
    OptionSmartBattery.Enabled = False
End Sub

Private Sub UserForm_Initialize()
    gbChartTitleDetail2 = ""
    gbbShowPlotWizard3 = False
    gbStatisticsName = gfGetgbStatisticsNameBywkBook(ActiveWorkbook)  'Compatible Statistic+s
    FrameSelectData.Caption = "Select Data in " & ActiveWorkbook.Name
    OptionPlotOnSheet.Caption = "Plot " & ActiveWorkbook.Name
    'CheckBoxHoldCtrlShift.ControlTipText = "Pressing SHIFT and clicking the mouse, extends the selection of sheet"
    Call OptionPlotOnSheet_Click
    If ListBoxSheet.ListCount <= 0 Then
        'gbiMsgBoxResponse = MsgBox("Can not find " & gbPreSheetName & " sheets in " & _
            ActiveWorkbook.Name, vbInformation)
    End If
    CheckBoxHoldCtrlShift_Click
    btnNext.SetFocus
End Sub

Function ListSheetsInWorkbook(wkbook As Excel.Workbook, PreSheetName As String)
    Dim wksheet As Excel.Worksheet, strName As String
    ListBoxSheet.Clear
    With wkbook
        For Each wksheet In .Worksheets
            strName = wksheet.Name
            If InStr(1, strName, PreSheetName) = 1 Then
                ListBoxSheet.AddItem strName
            End If
        Next wksheet
    End With
    If ListBoxSheet.ListCount > 0 Then ListBoxSheet.Selected(0) = True
End Function
Attribute VB_Name = "PlotWizardPage2"
Attribute VB_Base = "0{2988CF42-AE71-4ACB-8F70-EB390DCB60CB}{068D5CF5-927A-4C36-BAEC-B826D73D0C46}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Sub btnBack_Click()
'    Unload Me
    Me.Hide
    PlotWizardPage1.Show
End Sub

Private Sub btnCancel_Click()
    Unload Me
    Unload PlotWizardPage1
End Sub

Private Sub btnFinish_Click()
    Call PlotGraphInWizard123(ActiveWorkbook, gbPreSheetName)
    gwksActivePlotName = ActiveWorkbook.ActiveSheet.Name
    gHasPloting = True
    Me.Hide
    PlotWizardPage1.Hide
'    Unload Me
'    Unload PlotWizardPage1
End Sub

Private Sub btnNext_Click()
    Me.Hide
    gbShowWhichForm = 1
    PlotWizardPage3.Show
End Sub

Private Sub btnXX_Click()
    Call gfGetListBoxTextInPWP2(LabelX)
End Sub

Private Sub btnYY1_Click()
    Call gfGetListBoxTextInPWP2(LabelY1)
End Sub

Private Sub btnYY2_Click()
    Call gfGetListBoxTextInPWP2(LabelY2)
End Sub

Private Sub ComboBoxPlotStyle_Click()
    Call gfComboBoxPlotStyleClick(ComboBoxPlotStyle)
End Sub

Private Sub LabelX_BeforeDragOver(ByVal Cancel As MSForms.ReturnBoolean, ByVal Data As MSForms.DataObject, ByVal x As Single, ByVal y As Single, ByVal DragState As Long, ByVal Effect As MSForms.ReturnEffect, ByVal Shift As Integer)
    Cancel = True:    Effect = 1
End Sub

Private Sub LabelX_BeforeDropOrPaste(ByVal Cancel As MSForms.ReturnBoolean, ByVal Action As Long, ByVal Data As MSForms.DataObject, ByVal x As Single, ByVal y As Single, ByVal Effect As MSForms.ReturnEffect, ByVal Shift As Integer)
    Call gfLabelBeforeDropOrPaste(ListBoxXY1Y2, LabelX, Cancel, Effect)
End Sub

Private Sub LabelX_Click()
    Call gfGetListBoxTextInPWP2(LabelX)
End Sub

Private Sub LabelXX_Click()
    Call gfGetListBoxTextInPWP2(LabelX)
End Sub

Private Sub LabelY1_BeforeDragOver(ByVal Cancel As MSForms.ReturnBoolean, ByVal Data As MSForms.DataObject, ByVal x As Single, ByVal y As Single, ByVal DragState As Long, ByVal Effect As MSForms.ReturnEffect, ByVal Shift As Integer)
    Cancel = True:    Effect = 1
End Sub

Private Sub LabelY1_BeforeDropOrPaste(ByVal Cancel As MSForms.ReturnBoolean, ByVal Action As Long, ByVal Data As MSForms.DataObject, ByVal x As Single, ByVal y As Single, ByVal Effect As MSForms.ReturnEffect, ByVal Shift As Integer)
    Call gfLabelBeforeDropOrPaste(ListBoxXY1Y2, LabelY1, Cancel, Effect)
End Sub

Private Sub LabelY1_Click()
    Call gfGetListBoxTextInPWP2(LabelY1)
End Sub

Private Sub LabelYY1_Click()
    Call gfGetListBoxTextInPWP2(LabelY1)
End Sub

Private Sub LabelY2_BeforeDragOver(ByVal Cancel As MSForms.ReturnBoolean, ByVal Data As MSForms.DataObject, ByVal x As Single, ByVal y As Single, ByVal DragState As Long, ByVal Effect As MSForms.ReturnEffect, ByVal Shift As Integer)
    Cancel = True:    Effect = 1
End Sub

Private Sub LabelY2_BeforeDropOrPaste(ByVal Cancel As MSForms.ReturnBoolean, ByVal Action As Long, ByVal Data As MSForms.DataObject, ByVal x As Single, ByVal y As Single, ByVal Effect As MSForms.ReturnEffect, ByVal Shift As Integer)
    Call gfLabelBeforeDropOrPaste(ListBoxXY1Y2, LabelY2, Cancel, Effect)
End Sub

Private Sub LabelY2_Click()
    Call gfGetListBoxTextInPWP2(LabelY2)
End Sub

Private Sub LabelYY2_Click()
    Call gfGetListBoxTextInPWP2(LabelY2)
End Sub

Private Sub LabelY2_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    LabelY2.Caption = ""
End Sub

Private Sub LabelYY2_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    LabelY2.Caption = ""
End Sub

Private Sub gfGetListBoxTextInPWP2(LabelObject As Object)
    Call gfLabelClickGetListBoxText(ListBoxXY1Y2, LabelObject)
    Call gfListBoxSelectNext(ListBoxXY1Y2)
End Sub

Private Sub ListBoxXY1Y2_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    Call gfLabelClickGetListBoxText(ListBoxXY1Y2, LabelY1)
End Sub

Private Sub ListBoxXY1Y2_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal y As Single)
    Dim MyDataObject As MSForms.DataObject
    If Button = 1 Then
        Set MyDataObject = New MSForms.DataObject
        Dim Effect As Integer
        ''MyDataObject.SetText ListBoxXY1Y2.Value
        Effect = MyDataObject.StartDrag
    End If
End Sub

Private Sub UserForm_Initialize()
    Dim wksheet As Excel.Worksheet, XColumnName As String
    Dim FirstGetIndex As Integer, FirstGetString As String
    Dim iColumnX As Integer
    
    If gfListBoxFindFirstSelected(PlotWizardPage1.ListBoxSheet, 0, FirstGetIndex, FirstGetString) Then
        Set wksheet = ActiveWorkbook.Worksheets(FirstGetString)
        Call gfListBoxInitTitleBywkSheet(wksheet, ListBoxXY1Y2)
    Else
        'btnBack_Click
    End If
    
    Call gfComboBoxPlotStyleInit(ComboBoxPlotStyle)
    LabelItems.Caption = ActiveWorkbook.Name & "!" & wksheet.Name
    LabelX.Caption = "":    LabelY1.Caption = "":    LabelY2.Caption = ""
    If ListBoxXY1Y2.ListCount > 0 Then ListBoxXY1Y2.Selected(0) = True
    
    XColumnName = gfGetListBoxText(ListBoxXY1Y2, gbLastXColumnName)
    If InStr(1, gbPreSheetName, gbChannelName) = 1 Then
        If XColumnName = "" Then XColumnName = gfGetListBoxText(ListBoxXY1Y2, "Time")
        LabelY1.Caption = gfGetListBoxText(ListBoxXY1Y2, gbCurrentName)
    ElseIf InStr(1, gbPreSheetName, gbStatisticsName) = 1 Then
        If XColumnName = "" Then XColumnName = gfGetListBoxText(ListBoxXY1Y2, "Cycle")
        LabelY1.Caption = gfGetListBoxText(ListBoxXY1Y2, "Charge")
    ElseIf InStr(1, gbPreSheetName, gbMultiCellChannelName) = 1 Then
        If XColumnName = "" Then XColumnName = gfGetListBoxText(ListBoxXY1Y2, "Time")
        LabelY1.Caption = gfGetListBoxText(ListBoxXY1Y2, gbCurrentName)
    ElseIf InStr(1, gbPreSheetName, gbMultiCellStatisticName) = 1 Then
        If XColumnName = "" Then XColumnName = gfGetListBoxText(ListBoxXY1Y2, "Cycle")
        LabelY1.Caption = gfGetListBoxText(ListBoxXY1Y2, gbCurrentName)
    ElseIf InStr(1, gbPreSheetName, gbSmartBatteryName) = 1 Then
        If XColumnName = "" Then XColumnName = gfGetListBoxText(ListBoxXY1Y2, gbDataPointName)
        LabelY1.Caption = gfGetListBoxText(ListBoxXY1Y2, gbCurrentName)
    Else
        XColumnName = ""
    End If
    LabelX.Caption = XColumnName
    btnNext.SetFocus
End Sub
Attribute VB_Name = "PlotWizardPage3"
Attribute VB_Base = "0{B338F096-9457-4F14-AFAD-8D2143098D44}{15C887A1-A9FF-408B-B6E2-CA1EDEC84D7E}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Sub btnBack_Click()
    gbbShowPlotWizard3 = False
    Unload Me
    If gbShowWhichForm = 0 Then
        SimplePlotDialog.Show
    ElseIf gbShowWhichForm = 1 Then
        PlotWizardPage2.Show
    ElseIf gbShowWhichForm = 2 Then
        AdvancedPlot.Show
    End If
End Sub

Private Sub btnCancel_Click()
    gbbShowPlotWizard3 = False
    Unload Me
    If gbShowWhichForm = 0 Then
        Unload SimplePlotDialog
    ElseIf gbShowWhichForm = 1 Then
        Unload PlotWizardPage2
        Unload PlotWizardPage1
    ElseIf gbShowWhichForm = 2 Then
        Unload AdvancedPlot
        Unload PlotWizardPage1
    End If
End Sub

Sub SetPWP3CtrlStateAllFalse()
    LabelFromPoint.Enabled = False: TextFromPoint.Enabled = False
    LabelToPoint.Enabled = False:   TextToPoint.Enabled = False
    
    LabelFromTime.Enabled = False:  TextFromTime.Enabled = False
    LabelToTime.Enabled = False:    TextToTime.Enabled = False
    
    LabelFromCycle.Enabled = False: TextFromCycle.Enabled = False
    LabelToCycle.Enabled = False:   TextToCycle.Enabled = False
    
    LabelCycleNoFrom.Enabled = False:   TextCycleNoFrom.Enabled = False
    LabelCycleNoTo.Enabled = False:   TextCycleNoTo.Enabled = False
    LabelFromStep.Enabled = False:  TextFromStep.Enabled = False
    LabelToStep.Enabled = False:    TextToStep.Enabled = False
End Sub

Sub SetPWP3CtrlState()
    Call SetPWP3CtrlStateAllFalse
    If OptionAll.Value = True Then
        'All false
    ElseIf OptionFromPoint.Value = True Then
        LabelFromPoint.Enabled = True:  TextFromPoint.Enabled = True
        LabelToPoint.Enabled = True:    TextToPoint.Enabled = True
    ElseIf OptionFromTime.Value = True Then
        LabelFromTime.Enabled = True:   TextFromTime.Enabled = True
        LabelToTime.Enabled = True:     TextToTime.Enabled = True
    ElseIf OptionFromCycle.Value = True Then
        LabelFromCycle.Enabled = True:  TextFromCycle.Enabled = True
        LabelToCycle.Enabled = True:    TextToCycle.Enabled = True
    ElseIf OptionCycleNo.Value = True Then
        LabelCycleNoFrom.Enabled = True:    TextCycleNoFrom.Enabled = True
        LabelCycleNoTo.Enabled = True:    TextCycleNoTo.Enabled = True
        LabelFromStep.Enabled = True:   TextFromStep.Enabled = True
        LabelToStep.Enabled = True:     TextToStep.Enabled = True
    End If
End Sub

Private Sub btnFinish_Click()
    Call SetValueByPWP3Form
    If gbShowWhichForm = 0 Then
        Call SimplePlotDialog.PlotGraphInWorkbook(ActiveWorkbook, gbPreSheetName)
    ElseIf gbShowWhichForm = 1 Then
        Call PlotGraphInWizard123(ActiveWorkbook, gbPreSheetName)
    ElseIf gbShowWhichForm = 2 Then
        Call PlotGraphAdvanced(ActiveWorkbook, gbPreSheetName)
    End If
    gwksActivePlotName = ActiveWorkbook.ActiveSheet.Name
    
    gbbShowPlotWizard3 = False
    Me.Hide

'    btnCancel_Click
End Sub

Private Sub ComboBoxTimeFormat_Click()
    Call gfComboBoxTimeUnitClick(ComboBoxTimeFormat)
End Sub

Private Sub OptionAll_Click()
    Call SetPWP3CtrlState
End Sub

Private Sub OptionCycleNo_Click()
    Call SetPWP3CtrlState
End Sub

Private Sub OptionFromCycle_Click()
    Call SetPWP3CtrlState
End Sub

Private Sub OptionFromPoint_Click()
    Call SetPWP3CtrlState
End Sub

Private Sub OptionFromTime_Click()
    Call SetPWP3CtrlState
End Sub

Private Sub UserForm_Activate()
    Call UserForm_Initialize
End Sub

Private Sub UserForm_Initialize()
    Dim wksheet As Excel.Worksheet
    Dim FirstGetIndex As Integer, FirstGetString As String
    Dim strDefaultValuePrompt As String
    'Dim fColumnMin As Single, fColumnMax As Single
    Dim fColumnMin As Variant, fColumnMax As Variant
    Dim lRowFrom As Long, lRowTo As Long, iColumn As Integer
    Dim i As Integer, bTemp As Boolean, XColumnName As String
    
    gbbShowPlotWizard3 = True
    LabelTimeFormat.ControlTipText = "Available when you choose " & gbTestTime2Name & _
                    " or " & gbCycleTimeName & " as X axis. You may create them from Arbin Data\Options... menu."
    'OptionFromPoint.ControlTipText = gbDataPointName
    'OptionFromTime.ControlTipText = gbTestTimeName
    'OptionFromCycle.ControlTipText = gbCycleIndexName
    'OptionCycleNo.ControlTipText = gbCycleIndexName
    'LabelFromStep.ControlTipText = gbStepIndexName
    
    If gbShowWhichForm = 0 Then
        'SimplePlotDialog
        Set wksheet = ActiveWorkbook.ActiveSheet
        'btnCancel.ControlTipText = "Back to SimplePlotDialog"
        strDefaultValuePrompt = "Default value based on " & _
            ActiveWorkbook.Name & "!" & wksheet.Name
        bTemp = gfListBoxFindFirstSelected(SimplePlotDialog.ListBoxX0, 0, i, XColumnName)
    ElseIf gbShowWhichForm = 1 Then
        If gfListBoxFindFirstSelected(PlotWizardPage1.ListBoxSheet, 0, FirstGetIndex, FirstGetString) Then
            Set wksheet = ActiveWorkbook.Worksheets(FirstGetString)
            strDefaultValuePrompt = "Default value based on " & _
                ActiveWorkbook.Name & "!" & wksheet.Name
            XColumnName = PlotWizardPage2.LabelX.Caption
        End If
    ElseIf gbShowWhichForm = 2 Then
        FirstGetString = AdvancedPlot.ListBoxDataSeries.List(0, 2)
        Set wksheet = Workbooks(AdvancedPlot.ListBoxDataSeries.List(0, 1)).Worksheets(FirstGetString)
        strDefaultValuePrompt = "Default value based on " & _
            AdvancedPlot.ListBoxDataSeries.List(0, 1) & "!" & FirstGetString & " (Series 1)"
    Else
        gbiMsgBoxResponse = MsgBox("Form Init Error.", vbInformation)
        Exit Sub
    End If
    FrameApplyFilter.Caption = strDefaultValuePrompt
    
    Call gfComboBoxTimeUnitInit(ComboBoxTimeFormat)
    If XColumnName = gbTestTime2Name Or XColumnName = gbCycleTimeName Then
        ComboBoxTimeFormat.Enabled = True
        gbbTimeFormat = True
    Else
        ComboBoxTimeFormat.Enabled = False
        gbbTimeFormat = False
    End If
    
    If gfGetMinMaxValueInColumn(wksheet, gbDataPointName, fColumnMin, fColumnMax) Then
        TextFromPoint.Value = fColumnMin:   TextToPoint.Value = fColumnMax
        'TextFromPoint.Text = fColumnMin:    TextToPoint.Text = fColumnMax
    Else
        OptionFromPoint.Enabled = False
    End If
    If gfGetMinMaxValueInColumn(wksheet, gbTestTimeName, fColumnMin, fColumnMax) Then
        TextFromTime.Text = fColumnMin:     TextToTime.Text = fColumnMax
    Else
        OptionFromTime.Enabled = False
    End If
    If gfGetMinMaxValueInColumn(wksheet, gbCycleIndexName, fColumnMin, fColumnMax) Then
        TextFromCycle.Text = fColumnMin:    TextToCycle.Text = fColumnMax
        TextCycleNoFrom.Text = fColumnMin: TextCycleNoTo.Text = fColumnMax
        If gfGetRowFromToByValue(wksheet, gbCycleIndexName, fColumnMin, fColumnMin, lRowFrom, lRowTo) Then
            iColumn = gfGetColumnNumber(wksheet, gbStepIndexName)
            If iColumn <> -1 Then
                TextFromStep.Text = wksheet.cells(lRowFrom, iColumn)
                TextToStep.Text = wksheet.cells(lRowTo, iColumn)
            Else
                OptionCycleNo.Enabled = False
                LabelFromStep.Enabled = False:  LabelToStep.Enabled = False
            End If
        End If
    Else
        OptionFromCycle.Enabled = False
        OptionCycleNo.Enabled = False
    End If
    
        'gbPWP3Option = 1
    If gbShowWhichForm = 0 Then
        If SimplePlotDialog.FrameCycle.Enabled = True Then
            OptionFromCycle.Value = True
            TextFromCycle.Text = SimplePlotDialog.TextBoxCycleFrom.Value
            TextToCycle.Text = SimplePlotDialog.TextBoxCycleTo.Value
        End If
    End If
    
    Call SetPWP3CtrlState
    btnFinish.SetFocus
End Sub

Function SetValueByPWP3Form()
    gbChartTitleDetail2 = ""
    gbPWP3Option = 1
    If OptionAll.Value Then
        gbbShowPlotWizard3 = False
        Exit Function
    ElseIf OptionFromPoint.Value Then
        gbPWP3Option = 2
        gbPWP3strColumnName = gbDataPointName
        gbPWP3fColumnMin = TextFromPoint.Value
        gbPWP3fColumnMax = TextToPoint.Value
    ElseIf OptionFromTime.Value Then
        gbPWP3Option = 3
        gbPWP3strColumnName = gbTestTimeName
        gbPWP3fColumnMin = TextFromTime.Value
        gbPWP3fColumnMax = TextToTime.Value
    ElseIf OptionFromCycle.Value Then
        gbPWP3Option = 4
        gbPWP3strColumnName = gbCycleIndexName
        gbPWP3fColumnMin = TextFromCycle.Value
        gbPWP3fColumnMax = TextToCycle.Value
        gbiCycleFromInAW = gbPWP3fColumnMin
        gbiCycleToInAW = gbPWP3fColumnMax
    ElseIf OptionCycleNo.Value Then
        gbPWP3Option = 5
        gbPWP3strColumnName = gbCycleIndexName
        gbPWP3fColumnMin = TextCycleNoFrom.Value
        gbPWP3fColumnMax = TextCycleNoTo.Value
        gbiCycleFromInAW = gbPWP3fColumnMin
        gbiCycleToInAW = gbPWP3fColumnMax
    End If
    gbPWP3fColumnMin = CSng(gbPWP3fColumnMin)
    gbPWP3fColumnMax = CSng(gbPWP3fColumnMax)
    gbChartTitleDetail2 = Chr$(13) & gbPreSheetName & " " & gbPWP3strColumnName & _
        " From " & gbPWP3fColumnMin & " To " & gbPWP3fColumnMax
    
    If gbPWP3Option = 5 Then
        gbPWP3strColumnName1 = gbStepIndexName
        gbPWP3fColumnMin1 = TextFromStep.Value
        gbPWP3fColumnMax1 = TextToStep.Value
        gbPWP3fColumnMin1 = CSng(gbPWP3fColumnMin1)
        gbPWP3fColumnMax1 = CSng(gbPWP3fColumnMax1)
        gbChartTitleDetail2 = gbChartTitleDetail2 & " " & gbPWP3strColumnName1 & _
           " From " & gbPWP3fColumnMin1 & " To " & gbPWP3fColumnMax1
    End If
End Function

Attribute VB_Name = "ReportBinder"
Attribute VB_Base = "0{D36F1E13-997D-4F24-97A3-D3EF6BEC89AD}{68D4F752-5BCB-42E1-9523-AF2602B0D09F}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Attribute VB_Name = "ReportConfig"
Attribute VB_Base = "0{D888BA99-2A50-42D7-8BD6-3EB108552E2D}{7F613CA6-6A73-4BDB-91E8-0FCDB8DBD5B7}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Base 1
Option Explicit
Dim LastListViewChanMapSortColumn As Integer
Dim LastListViewVarsSortColumn As Integer
Dim LastListViewCfgInfoSortColumn As Integer
Dim modifyForm As UserForm
Dim comAmb As ComboBox, comTesterID As ComboBox
Dim Channel(40), Statistics(40), SmartBattery(40)
Dim bChanMapChanged As Boolean
Dim NoSelectedItem As Integer


Private Sub CmdClose_Click()
On Error Resume Next
'gDellReportCfgDB.Close
'Call VarsUpdate
Unload Me
End Sub


Private Sub CmdSave_Click()
Dim SQLQry As String, iCount As Integer, mRespond, wbReport As Excel.Workbook
Dim mHasReportOpen As Boolean, fName As String
Dim BackupName As String
    If bChanMapChanged Then
        mRespond = MsgBox("You are going to change Channel Map?It will update Dell_Report.cfg and Start a new Dell_SB_Report.", vbYesNo)
        If mRespond = vbYes Then
            On Error GoTo Err_Exit
Try_Again:  gDellSerial = gDellSerial + 1

            BackupName = ThisWorkbook.Path & "\Dell_SB_Report." & Trim$(Right("000" & Trim$(Str$(gDellSerial)), 3))
            For Each wbReport In Workbooks
                If wbReport.Name = "Dell_SB_Report.xls" Or wbReport.Name = "Dell_SB_Report" Then wbReport.Close
            Next wbReport
            Name ThisWorkbook.Path & "\Dell_SB_Report.xls" As BackupName
            MsgBox "Dell_SB_Report.xls was changed into " & BackupName, vbOKOnly
            Else
            bChanMapChanged = False
            If GetConfig(ConfigFile) = False Then GoTo Err_Exit
            Exit Sub
        End If
    End If
Update_Cfg:
    On Error Resume Next
'        gDellReportCfgDB.Close
        Set gDellReportCfgDB = DBEngine.OpenDatabase(ConfigFile, True, False)

    With ListViewCfgInfo
        For iCount = 1 To .ListItems.Count
        SQLQry = "UPDATE TblChanMap SET Tester_ID ='" & gDellReportCfg.tChanMap(iCount) & "',Amb=" _
        & gDellReportCfg.tChanTemp(iCount) & " Where Channel= " & Int(.ListItems(iCount).Text) & ";"
        gDellReportCfgDB.Execute (SQLQry)
        Next iCount
    End With
        SQLQry = "Update TblVars Set VarType ='' , VarName='';"
        gDellReportCfgDB.Execute (SQLQry)

    With ListViewVars
        For iCount = 1 To .ListItems.Count
            SQLQry = "Update TblVars Set VarType ='" & gDellReportCfg.tType(iCount) & "' , VarName='" & gDellReportCfg.tVars(iCount) _
            & "' Where ID=" & iCount & ";"
        gDellReportCfgDB.Execute (SQLQry)
        Next iCount
     End With
     Call VarsUpdate
     gDellReportCfgDB.Close
     bChanMapChanged = False
     Exit Sub
Err_Exit:
    If Err.Number = 53 Then MsgBox "You don't have report yet, You will get a new Dell_SB_Report.xls file", vbOKOnly: Resume Update_Cfg
    If Err.Number = 58 Then Resume Try_Again
    MsgBox Err.Description
    Err.Clear
End Sub

Private Sub CmdSaveAs_Click()
Dim iCount As Integer, SQLQry As String
Dim ConfigFileAs As String
Dim strFileName As String
ConfigFileAs = InputBox("Please enter filename:", "Save Report Configuration file As ")
If Len(ConfigFileAs) > 0 Then
    If Right(UCase(ConfigFileAs), 4) <> ".CFG" Then
        ConfigFileAs = ConfigFileAs & ".cfg"
    End If
        On Error GoTo Err_Exit
        strFileName = ConfigFile
        ConfigFileAs = fGetDataDir(strFileName) & "\" & ConfigFileAs
        FileCopy ConfigFile, ConfigFileAs
        Sleep 100
        ConfigFile = ConfigFileAs
        On Error Resume Next
        gDellReportCfgDB.Close
        Set gDellReportCfgDB = DBEngine.OpenDatabase(ConfigFile, True, False)

    With ListViewCfgInfo
        For iCount = 1 To .ListItems.Count
        SQLQry = "UPDATE TblChanMap SET Tester_ID ='" & gDellReportCfg.tChanMap(iCount) & "',Amb=" _
        & gDellReportCfg.tChanTemp(iCount) & " Where Channel= " & Int(.ListItems(iCount).Text) & ";"
        gDellReportCfgDB.Execute (SQLQry)
        Next iCount

    End With
    With ListViewVars
        For iCount = 1 To .ListItems.Count
            SQLQry = "Update TblVars Set VarType ='" & gDellReportCfg.tType(iCount) & "' , VarName='" & gDellReportCfg.tVars(iCount) _
            & "' Where ID=" & iCount & ";"
        gDellReportCfgDB.Execute (SQLQry)
        Next iCount
     End With
     Call VarsUpdate
     comOpen.ControlTipText = ConfigFile
     gDellReportCfgDB.Close
End If
Exit Sub
Err_Exit:
MsgBox "File saving failure!" & vbCrLf & Err.Number & "  " & Err.Description
End Sub

Private Sub CmdVarAdd_Click()
Dim VarsList As ListItem
Dim iCount As Integer
On Error GoTo JustExit
If Not fHasVarsName(ComboBoxType.Text, ComboBoxVars.Text) And ListViewVars.ListItems.Count < 8 And ComboBoxType.Text <> "" And ComboBoxVars.Text <> "" Then
With ListViewVars
    Set VarsList = .ListItems.Add(, , .ListItems.Count + 1)
    VarsList.SubItems(1) = ComboBoxType.Text
    VarsList.SubItems(2) = ComboBoxVars.Text
'    .ListItems(.ListItems.Count).Selected = True
'    NoSelectedItem = .ListItems.Count
End With
End If

If fHasVarsName(ComboBoxType.Text, ComboBoxVars.Text) And ListViewVars.ListItems.Count <= 8 And ListViewVars.ListItems.Count > 0 And ComboBoxType.Text <> "" And ComboBoxVars.Text <> "" Then
With ListViewVars
    For iCount = 1 To .ListItems.Count
        If .ListItems(iCount).SubItems(1) = ComboBoxType.Text And .ListItems(iCount).SubItems(2) = ComboBoxVars.Text Then
            NoSelectedItem = iCount
        Exit For
        End If
    Next iCount
End With
Call VarsUpdate
End If



JustExit:
End Sub


Private Sub CmdVarsRemove_Click()
'Remove Current row
Dim iListIndex, iCount As Integer
On Error GoTo JustExit
With ListViewVars
    iListIndex = .SelectedItem.index
'    .ListItems.Remove (iListIndex)
    Do While iListIndex < .ListItems.Count
'        .ListItems(iListIndex).Key = .ListItems(iListIndex + 1).Key
        .ListItems(iListIndex).SubItems(1) = .ListItems(iListIndex + 1).SubItems(1)
        .ListItems(iListIndex).SubItems(2) = .ListItems(iListIndex + 1).SubItems(2)
        iListIndex = iListIndex + 1
    Loop
    .ListItems.Remove (iListIndex)
    NoSelectedItem = .SelectedItem.index
   
    For iCount = 1 To .ListItems.Count
        .ListItems(iCount).Text = iCount
    Next iCount
 '   .ListItems(.SelectedItem.index).Selected = True
 '   .SetFocus
  
End With
Call VarsUpdate
'Me.Repaint
ListViewVars.SetFocus
JustExit:
End Sub
Private Sub CmdVarsDown_Click()
Dim iListIndex, iCount As Integer, sType As String, sVars As String
On Error GoTo Just_Exit
With ListViewVars
    iListIndex = .SelectedItem.index
    If iListIndex < .ListItems.Count Then
        sType = .ListItems(iListIndex).SubItems(1)
        sVars = .ListItems(iListIndex).SubItems(2)
        .ListItems(iListIndex).SubItems(1) = .ListItems(iListIndex + 1).SubItems(1)
        .ListItems(iListIndex).SubItems(2) = .ListItems(iListIndex + 1).SubItems(2)
        .ListItems(iListIndex + 1).SubItems(1) = sType
        .ListItems(iListIndex + 1).SubItems(2) = sVars
      '  .ListItems(iListIndex).Selected = False
      '  .ListItems(iListIndex + 1).Selected = True
      '  .SetFocus
         NoSelectedItem = iListIndex + 1
    End If
'        For iCount = 1 To .ListItems.Count
'        .ListItems(iCount).Text = iCount
'        Next iCount
    
End With
Call VarsUpdate
Just_Exit:
End Sub

Private Sub CmdVarsUp_Click()
Dim iListIndex, iCount As Integer, sType As String, sVars As String
On Error GoTo JustExit
With ListViewVars
    iListIndex = .SelectedItem.index
    If iListIndex > 1 Then
        sType = .ListItems(iListIndex).SubItems(1)
        sVars = .ListItems(iListIndex).SubItems(2)
        .ListItems(iListIndex).SubItems(1) = .ListItems(iListIndex - 1).SubItems(1)
        .ListItems(iListIndex).SubItems(2) = .ListItems(iListIndex - 1).SubItems(2)
        .ListItems(iListIndex - 1).SubItems(1) = sType
        .ListItems(iListIndex - 1).SubItems(2) = sVars
        NoSelectedItem = iListIndex - 1
    End If
'    For iCount = 1 To .ListItems.Count
'        .ListItems(iCount).Text = iCount
'    Next iCount
    
End With
Call VarsUpdate
JustExit:
End Sub

Private Sub ComboBoxType_Change()
Dim iCount As Integer
    Select Case ComboBoxType.Text
        Case "Channel"
            iCount = 1
            ComboBoxVars.Clear
            Do While Channel(iCount) <> ""
                ComboBoxVars.AddItem Channel(iCount)
                iCount = iCount + 1
            Loop
        
        Case "Statistics"
            iCount = 1
            ComboBoxVars.Clear
            Do While Statistics(iCount) <> ""
                ComboBoxVars.AddItem Statistics(iCount)
                iCount = iCount + 1
            Loop
            ComboBoxVars.AddItem "SB_CycleCount"
            ComboBoxVars.AddItem "SB_Max_ROSC"
            ComboBoxVars.AddItem "SB_Cycle_FCC"
            ComboBoxVars.AddItem "SB_Max_T(C)"
        Case "SmartBattery"
            iCount = 1
            ComboBoxVars.Clear
            Do While SmartBattery(iCount) <> ""
                ComboBoxVars.AddItem SmartBattery(iCount)
                iCount = iCount + 1
            Loop
    End Select
End Sub

Private Sub ComboBoxVars_Change()
If ComboBoxType.Text <> "" And ComboBoxVars.Text <> "" Then
    Call CmdVarAdd_Click
End If
End Sub

Function GetConfig(filename As String) As Boolean
Dim ChanMapRec As Recordset, VarsRec As Recordset, tmpRec As Recordset
Dim SQLQry As String, itmX1 As ListItem, itmX2 As ListItem
Dim iCount As Integer, iChan As Integer, iVarIndex As Integer
On Error GoTo Err_Exit
    GetConfig = False
    Set gDellReportCfgDB = DBEngine.OpenDatabase(ConfigFile, True, False)
    SQLQry = "SELECT Temp,Amb FROM TblAmbInfo Where Amb<>0 ;"
    Set tmpRec = gDellReportCfgDB.OpenRecordset(SQLQry, dbReadOnly, dbForwardOnly)
    iCount = 1
    If Not tmpRec.EOF Then
        With tmpRec
            Do While Not .EOF
            mAmb(iCount) = .Fields("Temp")
            iCount = iCount + 1
            .MoveNext
            Loop
        End With
    End If
    Set tmpRec = Nothing
    SQLQry = "Select Tester_ID From TblChanMap Where Tester_ID<>'' group by Tester_ID;"
    Set tmpRec = gDellReportCfgDB.OpenRecordset(SQLQry, dbReadOnly, dbForwardOnly)
    iCount = 1
       If Not tmpRec.EOF Then
        With tmpRec
            Do While Not .EOF
            mTesterID(iCount) = .Fields("Tester_ID")
            iCount = iCount + 1
            .MoveNext
            Loop
        End With
    End If
    Set tmpRec = Nothing
    
    SQLQry = "SELECT tc.Channel, ta.Amb, tc.Tester_ID, ta.Temp FROM TblAmbInfo as ta INNER JOIN TblChanMap as tc ON ta.Amb = tc.Amb ORDER BY tc.Channel;"
    Set ChanMapRec = gDellReportCfgDB.OpenRecordset(SQLQry, dbReadOnly, dbForwardOnly)
    If Not ChanMapRec.EOF Then
        ListViewCfgInfo.ListItems.Clear
        With ChanMapRec
            
            iChan = 1
            Do While Not .EOF
                gDellReportCfg.tChanMap(iChan) = .Fields("Tester_ID").Value
                gDellReportCfg.tChanTemp(iChan) = .Fields("Amb").Value
                Set itmX1 = ListViewCfgInfo.ListItems.Add(, , Right$("000" & Trim$(iChan), 3))
                itmX1.SubItems(1) = .Fields("Temp").Value
                itmX1.SubItems(2) = .Fields("Tester_ID").Value
                .MoveNext
                iChan = iChan + 1
            Loop
        End With
        ListViewCfgInfo.SetFocus
    End If
    gMaxChan = iChan
    If gMaxChan > 48 Then gMaxChan = 48
    Set ChanMapRec = Nothing
    
    SQLQry = "SELECT * from TblVars order by ID;"
    Set VarsRec = gDellReportCfgDB.OpenRecordset(SQLQry, dbReadOnly, dbForwardOnly)
    If Not VarsRec.EOF Then
        ListViewVars.ListItems.Clear
        With VarsRec
            iVarIndex = 1
            Do While Not .EOF
                If .Fields("VarName").Value <> "" And .Fields("VarName").Value <> "" Then
                Set itmX2 = ListViewVars.ListItems.Add(, , Right$("0" & Trim$(iVarIndex), 1))
                itmX2.SubItems(1) = .Fields("VarType").Value
                itmX2.SubItems(2) = .Fields("VarName").Value
                iVarIndex = iVarIndex + 1
                End If
                .MoveNext
            Loop
        End With
    End If
    Set VarsRec = Nothing
    
    SQLQry = "Select Channel from TblVarsName;"
    Set VarsRec = gDellReportCfgDB.OpenRecordset(SQLQry, dbReadOnly, dbForwardOnly)
    If Not VarsRec.EOF Then
        iCount = 1
        With VarsRec
            Do While Not .EOF
                Channel(iCount) = .Fields("Channel").Value
                .MoveNext
                iCount = iCount + 1
            Loop
        End With
    End If
        
    Set VarsRec = Nothing
      
    SQLQry = "Select Statistics from TblVarsName;"
    Set VarsRec = gDellReportCfgDB.OpenRecordset(SQLQry, dbReadOnly, dbForwardOnly)
    If Not VarsRec.EOF Then
        iCount = 1
        With VarsRec
            Do While Not .EOF
                Statistics(iCount) = .Fields("statistics").Value
                .MoveNext
                iCount = iCount + 1
            Loop
        End With
    End If
    Set VarsRec = Nothing
        
    SQLQry = "Select SmartBattery from TblVarsName Order by SmartBattery;"
    Set VarsRec = gDellReportCfgDB.OpenRecordset(SQLQry, dbReadOnly, dbForwardOnly)
    If Not VarsRec.EOF Then
        iCount = 1
        With VarsRec
            Do While Not .EOF
                SmartBattery(iCount) = .Fields("SmartBattery").Value
                .MoveNext
                iCount = iCount + 1
            Loop
        End With
    End If
    Set VarsRec = Nothing
'    Call VarsUpdate
    Call ChanMapUpdate
    gDellReportCfgDB.Close
    comOpen.ControlTipText = ConfigFile
    ListViewVars.ListItems(ListViewVars.SelectedItem.index).Selected = True
    ListViewVars.SetFocus
'Set default Var Type
'    ComboBoxType.ListIndex = 0 ' Channel
'    ComboBoxVars.ListIndex = 5 ' Current(A)
    GetConfig = True
    Exit Function
Err_Exit:
    If Err.Number = 3343 Then
        MsgBox "The config file was damaged or cann't be recognized by Dell Auto Reporter, The previous config file will be using."
        Exit Function
    End If
    Set VarsRec = Nothing
    gDellReportCfgDB.Close
End Function




Private Sub ComboBoxVars_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
If ComboBoxType.Text <> "" And ComboBoxVars.Text <> "" Then
    Call CmdVarAdd_Click
End If

End Sub

Private Sub comOpen_Click()
Dim tempStr As String
tempStr = ConfigFile

ConfigFile = Application.GetOpenFilename("Configuration file (*.cfg), *.cfg", 5, "Open Dell Report Configuration File")
On Error GoTo Err_Exit
If ConfigFile = "False" Then ConfigFile = tempStr: Exit Sub
If ConfigFile <> "" Then
    If GetConfig(ConfigFile) = False Then
        ConfigFile = tempStr
        If ConfigFile = "" Then GoTo Err_Exit
        If GetConfig(ConfigFile) = False Then GoTo Err_Exit
    Else
        ComboBoxVars.Text = ""
    End If
End If
Exit Sub
Err_Exit:
    MsgBox "Your configuration file cann't be access," & vbLf & vbCr _
    & "Please close the application that is using configuration file and try again!"
    Err.Clear
End Sub

Private Sub ListViewCfgInfo_DblClick()
Dim iCount As Integer
Load ChanMapForm
With ChanMapForm
    .LabelChanIndex.Caption = ListViewCfgInfo.SelectedItem.index
    For iCount = 1 To 3
    .ComboBoxAmb.AddItem mAmb(iCount)
    Next iCount
    .ComboBoxAmb.Text = ListViewCfgInfo.SelectedItem.SubItems(1)
    For iCount = 1 To UBound(mTesterID)
        If mTesterID(iCount) <> "" Then .ComboBoxTesterID.AddItem mTesterID(iCount)
    Next iCount
    .ComboBoxTesterID.Text = ListViewCfgInfo.SelectedItem.SubItems(2)
End With
bChanMapChanged = True
ChanMapForm.Show
'ChanMapForm.Repaint

End Sub

'Private Sub ListViewCfgInfo_ItemClick(ByVal Item As MSComctlLib.ListItem)
'Dim iCount As Integer
'Load ChanMapForm
'With ChanMapForm
'    .LabelChanIndex.Caption = ListViewCfgInfo.SelectedItem.index
'    For iCount = 1 To 3
'    .ComboBoxAmb.AddItem mAmb(iCount)
'    Next iCount
'    .ComboBoxAmb.Text = ListViewCfgInfo.SelectedItem.SubItems(1)
'    For iCount = 1 To UBound(mTesterID)
'        If mTesterID(iCount) <> "" Then .ComboBoxTesterID.AddItem mTesterID(iCount)
'    Next iCount
'    .ComboBoxTesterID.Text = ListViewCfgInfo.SelectedItem.SubItems(2)
'End With
'bChanMapChanged = True
'ChanMapForm.Show
'ChanMapForm.Repaint
'End Sub


Private Sub ListViewVars_ColumnClick(ByVal ColumnHeader As MSComctlLib.ColumnHeader)
    If LastListViewVarsSortColumn = ColumnHeader.index Then
        If ListViewVars.SortOrder = lvwDescending Then
            ListViewVars.SortOrder = lvwAscending
        Else
            ListViewVars.SortOrder = lvwDescending
        End If
    Else
        LastListViewVarsSortColumn = ColumnHeader.index
        If InStr(1, ListViewVars.ColumnHeaders(ColumnHeader.index), "Index") Then
            ListViewVars.SortOrder = lvwDescending
        End If
    End If
    ListViewVars.SortKey = ColumnHeader.index - 1
    ListViewVars.Sorted = True
    
    Call ListViewVarsReorder
End Sub

Private Sub ListViewCfgInfo_ColumnClick(ByVal ColumnHeader As MSComctlLib.ColumnHeader)
    If LastListViewCfgInfoSortColumn = ColumnHeader.index Then
        If ListViewCfgInfo.SortOrder = lvwDescending Then
            ListViewCfgInfo.SortOrder = lvwAscending
        Else
            ListViewCfgInfo.SortOrder = lvwDescending
        End If
    Else
        LastListViewCfgInfoSortColumn = ColumnHeader.index
        If InStr(1, ListViewCfgInfo.ColumnHeaders(ColumnHeader.index), "Index") Then
            ListViewCfgInfo.SortOrder = lvwDescending
        End If
    End If
    ListViewCfgInfo.SortKey = ColumnHeader.index - 1
    ListViewCfgInfo.Sorted = True
End Sub


'Private Sub ListViewCfgInfo_OLESetData(Data As MSComctlLib.DataObject, DataFormat As Integer)
'    Debug.Print "change data"
'End Sub

'Private Sub ListViewVars_DblClick()
'Remove Row
'End Sub

Private Sub UserForm_Initialize()
On Error GoTo Err_Exit
ComboBoxType.Clear
ComboBoxVars.Clear

ComboBoxType.AddItem "Channel"
ComboBoxType.AddItem "Statistics"
ComboBoxType.AddItem "SmartBattery"
bChanMapChanged = False
ListViewVars.ListItems.Clear
If ConfigFile <> "" Then
 If GetConfig(ConfigFile) = False Then GoTo Err_Exit
 ComboBoxVars.Text = ""
End If
Exit Sub
Err_Exit:
    On Error Resume Next
    MsgBox "Your configuration file cann't be access," & vbLf & vbCr _
    & "Please close the application that is using configuration file and try again!"
End Sub

' Has var return ture
Function fHasVarsName(sType As String, sVarName As String) As Boolean
Dim iCount As Integer, jCount As Integer
    fHasVarsName = False
    With ListViewVars
    For iCount = 1 To .ListItems.Count
        If .ListItems(iCount).SubItems(1) = sType And .ListItems(iCount).SubItems(2) = sVarName Then
            fHasVarsName = True
            Exit Function
        End If
    Next iCount
    End With
End Function
Sub ListViewVarsReorder()
Dim iCount As Integer
With ReportConfig.ListViewVars
    For iCount = 1 To .ListItems.Count
        .ListItems(iCount).Text = iCount
    Next iCount
End With
End Sub


Sub VarsUpdate()
Dim iCount As Integer, itmX2 As ListItem
For iCount = 1 To 8
gDellReportCfg.tType(iCount) = ""
gDellReportCfg.tVars(iCount) = ""
Next iCount
With ListViewVars
    For iCount = 1 To ListViewVars.ListItems.Count
        gDellReportCfg.tType(iCount) = .ListItems(iCount).SubItems(1)
        gDellReportCfg.tVars(iCount) = .ListItems(iCount).SubItems(2)
    Next iCount
    gVarNo = .ListItems.Count
    
'    .ListItems.Clear
'    For iCount = 1 To gVarNo
'        Set itmX2 = ListViewVars.ListItems.Add(, , Right$("0" & Trim$(iCount), 1))
'        itmX2.SubItems(1) = gDellReportCfg.tType(iCount)
'        itmX2.SubItems(2) = gDellReportCfg.tVars(iCount)
'    Next iCount
    
    For iCount = 1 To .ListItems.Count
        .ListItems(iCount).Text = iCount
    Next iCount
    
    .ListItems(NoSelectedItem).Selected = True
    .SetFocus
End With
End Sub
Sub ChanMapUpdate()
Dim iCount As Integer
With ListViewCfgInfo
    For iCount = 1 To ListViewCfgInfo.ListItems.Count
        gDellReportCfg.tChanMap(iCount) = .ListItems(iCount).SubItems(2)
        gDellReportCfg.tChanTemp(iCount) = fFindIndex(.ListItems(iCount).SubItems(1), mAmb)
    Next iCount
End With
End Sub
Attribute VB_Name = "ReportForm"
Attribute VB_Base = "0{377FAC2A-1715-4197-B724-0946420F08E7}{4925AC88-E6C8-4DC4-B703-97DCEE529AB2}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Private Sub CmdCancel_Click()
Me.Hide
End Sub

Private Sub cmdChangeFile_Click()
    Dim fileToOpen As Variant
    Dim DirOutput
    If gbIsImporting Then Exit Sub
    On Error GoTo cmdChangeFile_Error
    If gLatestTestName = "" Then MsgBox "You don't have any MITS_PRO Data for processing recently!" & vbCrLf & "Try import data again!": Exit Sub
    fileToOpen = Application.GetSaveAsFilename(Initialfilename:="Report_" & gLatestTestName, _
           fileFilter:="Excel Files (*.xls), *.xls")
    If fileToOpen <> False Then
        DirOutput = CurDir
        gReportFilename = fileToOpen
    End If
        LabelReportFile.Caption = gReportFilename
    Exit Sub

cmdChangeFile_Error:
    DirOutput = ThisWorkbook.Path
    Resume

End Sub

Private Sub cmdExit_Click()
Unload Me
End Sub

Private Sub cmdOK_Click()
    Dim wbNew As Workbook, wsReport As Worksheet, wsTest As Worksheet
    Dim sTimeStart As Single, sTimefinish As Single
    Dim i As Integer, j As Integer
    Dim lRowInReport As Long, lRowsInTest As Long, MaxRowsInTest As Long
    Dim bFindSheet As Boolean
    Dim iColumnI As Integer, iColumnV As Integer, iColumnTime As Integer, iColumnCD As Integer
    Dim iColumnPD As Integer, iColumnPoint As Integer, iColumnIR As Integer
    Application.StatusBar = "Report Sheet is generating..."
    On Error GoTo CreateNewFile
    Workbooks.Open filename:=gReportFilename
    GoTo Open_WorkBook
CreateNewFile:
    On Error GoTo UserForm_SaveAs_Error
    Set wbNew = Workbooks.Add
    wbNew.SaveAs filename:=gReportFilename
    
Open_WorkBook:
    On Error GoTo 0
'    DoEvents
    gReportFilename = ActiveWorkbook.Name

    Workbooks(gLatestTestName & ".xls").Activate
    With ActiveWorkbook
        For Each wsTest In .Worksheets
            If Left(wsTest.Name, 7) = "Channel" Then
                iColumnI = gfGetColumnNumber(wsTest, gbCurrentName)
                If iColumnI <= 0 Then GoTo Err_Data
                iColumnV = gfGetColumnNumber(wsTest, gbVoltageName)
                If iColumnV <= 0 Then GoTo Err_Data
                iColumnPoint = gfGetColumnNumber(wsTest, gbDataPointName)
                If iColumnPoint <= 0 Then GoTo Err_Data
                iColumnTime = gfGetColumnNumber(wsTest, gbDateTimeName)
                If iColumnTime <= 0 Then GoTo Err_Data
                iColumnIR = gfGetColumnNumber(wsTest, gbInternalResistanceName)
                If iColumnIR <= 0 Then GoTo Err_Data
                iColumnCD = gfGetColumnNumber(wsTest, "Current Density(mA/cm^2)")
                If iColumnCD <= 0 Then GoTo Err_Data
                iColumnPD = gfGetColumnNumber(wsTest, "Power Density(mW/cm^2)")
                If iColumnPD <= 0 Then GoTo Err_Data
                bFindSheet = False
                With Workbooks(gReportFilename)
                        For Each wsReport In .Worksheets
                            If CheckBoxMutiSheet Then
                                If wsReport.Name = wsTest.Name Then
                                    bFindSheet = True
                                    Exit For
                                End If
                            Else
                                If wsReport.Name = "All_in_One_" & .Name Then
                                    bFindSheet = True
                                    Exit For
                                End If
                            End If
                        Next wsReport
                        If bFindSheet = False Then
                            If CheckBoxMutiSheet Then
                            Set wsReport = .Worksheets.Add
                            wsReport.Name = wsTest.Name
                            Else
                            Set wsReport = .Worksheets.Add
                            wsReport.Name = "All_in_One_" & .Name
                            End If
                        End If
                    lRowInReport = wsReport.cells(1, 1).End(xlDown).Row
                    If lRowInReport >= 65536 Then lRowInReport = 0
                    lRowInReport = lRowInReport + 1
                    If CheckBoxHead Then
                    'Head title
                    j = 1
                    wsReport.cells(lRowInReport, j).Value = "Test Name": j = j + 1
                    If CheckBoxPoint Then wsReport.cells(lRowInReport, j).Value = gbDataPointName: j = j + 1
                    If CheckBoxTime Then wsReport.cells(lRowInReport, j).Value = gbDateTimeName: j = j + 1
                    If CheckBoxI Then wsReport.cells(lRowInReport, j).Value = gbCurrentName: j = j + 1
                    If CheckBoxV Then wsReport.cells(lRowInReport, j).Value = gbVoltageName: j = j + 1
                    wsReport.cells(lRowInReport, j).Value = "Cell Resistance(Ohm)": j = j + 1
                    wsReport.cells(lRowInReport, j).Value = "Current Density(mA/cm^2)": j = j + 1
                    wsReport.cells(lRowInReport, j).Value = "Power Density(mW/cm^2)"
                    lRowInReport = lRowInReport + 1
                    End If
                    MaxRowsInTest = wsTest.cells(1, 1).End(xlDown).Row
                    For lRowsInTest = 2 To MaxRowsInTest
                        j = 1
                        If Abs(wsTest.cells(lRowsInTest, iColumnV).Value - Val(TextBoxVoltage.Value)) <= Val(TextBoxTolerance.Value) Then
                            wsReport.cells(lRowInReport, j) = gLatestTestName
                            If CheckBoxMutiSheet = False Then wsReport.cells(lRowInReport, j) = wsReport.cells(lRowInReport, j) & Right(wsTest.Name, 6)
                            j = j + 1
                            If CheckBoxPoint Then wsReport.cells(lRowInReport, j).Value = wsTest.cells(lRowsInTest, iColumnPoint): j = j + 1
                            If CheckBoxTime Then wsReport.cells(lRowInReport, j).Value = wsTest.cells(lRowsInTest, iColumnTime): j = j + 1
                            If CheckBoxI Then wsReport.cells(lRowInReport, j).Value = wsTest.cells(lRowsInTest, iColumnI): j = j + 1
                            If CheckBoxV Then wsReport.cells(lRowInReport, j).Value = wsTest.cells(lRowsInTest, iColumnV): j = j + 1
                            wsReport.cells(lRowInReport, j).Value = wsTest.cells(lRowsInTest, iColumnIR): j = j + 1
                            wsReport.cells(lRowInReport, j).Value = wsTest.cells(lRowsInTest, iColumnCD): j = j + 1
                            wsReport.cells(lRowInReport, j).Value = wsTest.cells(lRowsInTest, iColumnPD)
                            lRowInReport = lRowInReport + 1
                        End If
                    Next lRowsInTest
                End With
            End If
        Next wsTest
    End With
    Application.DisplayAlerts = False
    Workbooks(gReportFilename).Activate
    Call gfDeleteDefaultSheet123(ActiveWorkbook)
    Call FormatReportwkBook
    Application.DisplayAlerts = True
    Application.StatusBar = "Ready"
    ActiveWorkbook.Save
    Me.Hide
    Exit Sub
Err_Data:
    MsgBox "Data Format wrong! Please check options page and import data again."
    Exit Sub
UserForm_SaveAs_Error:
    If Err.Number = 1004 Then
        MsgBox gFileNameOutput & " cann't save to read-only " _
            & "media device (like CD-ROM, read-only network drive )" _
            & "or the file has been locked by others. " _
            & "You should change the Output File Name. " _
            & "This problem may be caused by network drive. " _
            & "You'd better not to use network drive."
        Workbooks(wbNew.Name).Close SaveChanges:=False
    End If
End Sub

Private Sub FormatReportwkBook()
    Dim wksheet As Excel.Worksheet
    Dim lRows As Long, lMaxRows As Long, iColumn As Integer, iEndColumn As Integer
    Dim bColorFirst As Boolean
    For Each wksheet In ActiveWorkbook.Worksheets
        With wksheet
        .PageSetup.Orientation = xlLandscape
        lMaxRows = .cells(1, 1).End(xlDown).Row
        iEndColumn = .cells(1, 1).End(xlToRight).Column
        If iEndColumn > 1 Then
        bColorFirst = False
            For iColumn = 1 To iEndColumn
                .Columns(iColumn).ColumnWidth = 14
                    If bColorFirst Then
                        bColorFirst = False
                       With .Columns(iColumn).Interior
                            .ColorIndex = 0
                            .PatternColorIndex = xlAutomatic
                        End With
                    Else
                        With .Columns(iColumn).Interior
                            .ColorIndex = 20
                            .PatternColorIndex = xlAutomatic
                        End With
                        bColorFirst = True
                    End If
            Next iColumn
        End If
            For lRows = 1 To lMaxRows
            If .cells(lRows, 1) = "Test Name" Then
                .Rows(lRows).WrapText = True
                .Rows(lRows).HorizontalAlignment = xlCenter
                .Rows(lRows).RowHeight = 24.5
                With .Rows(lRows).Interior
                    .ColorIndex = 19
                    .PatternColorIndex = xlAutomatic
                End With
            End If
            Next lRows
        End With
    Next wksheet
End Sub

Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "SimplePlotDialog"
Attribute VB_Base = "0{EAF0F5C8-8799-4B20-AB19-C71C0C473A14}{CC464B04-0180-47E2-A05A-E712873EF4CD}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Sub btnCancel_Click()
'    Unload Me
    Me.Hide
    Application.StatusBar = "Ready"
End Sub

Private Sub btnNext_Click()
    If Not TextBoxCheckFromToChCy Then Exit Sub
    If PreProcessY1Y2SelectedInSimplePlot = True Then
        Me.Hide
        gbShowWhichForm = 0
        PlotWizardPage3.Show
    Else
        gbiMsgBoxResponse = MsgBox("Choose Y1 or Y2 first, please.", vbInformation)
    End If
End Sub

Private Sub btnPlot_Click()
    gwksActivePlotName = ActiveWorkbook.ActiveSheet.Name
    Call PlotSimpleGraph
End Sub

Sub PlotSimpleGraph()
    If Not TextBoxCheckFromToChCy Then Exit Sub
    If PreProcessY1Y2SelectedInSimplePlot = True Then
        Call PlotGraphInWorkbook(ActiveWorkbook, gbPreSheetName)
'        Unload Me
    Me.Hide
    Else
        gbiMsgBoxResponse = MsgBox("Choose Y1 or Y2 first, please.", vbInformation)
    End If
    gHasPloting = True
'    gCommandHistory = True   ' add for refresh
    ProcessingCommandBar
End Sub

Function TextBoxCheckFromToChCy() As Boolean
    TextBoxCheckFromToChCy = False
    If gfTextBoxCheckFromToValue("Select Channel", TextBoxChannelFrom, TextBoxChannelTo, _
        CLng(gbiMinChannelInAW), CLng(gbiMaxChannelInAW)) = False Then Exit Function
    gbiChannelFromInAW = Val(TextBoxChannelFrom.Value)
    gbiChannelToInAW = Val(TextBoxChannelTo.Value)
    If gfTextBoxCheckFromToValue(FrameCycle.Caption, TextBoxCycleFrom, TextBoxCycleTo, _
        CLng(gbiMinCycleInAW), CLng(gbiMaxCycleInAW)) = False Then Exit Function
    gbiCycleFromInAW = Val(TextBoxCycleFrom.Value)
    gbiCycleToInAW = Val(TextBoxCycleTo.Value)
    TextBoxCheckFromToChCy = True
End Function

Sub CheckBoxAllCells(ListBoxSource As Control, bCheck As Boolean, strPrompt As String)
    Dim i As Integer, j As Integer
    Dim strTemp As String
    With ListBoxSource
        strTemp = ""
        For i = 0 To .ListCount - 1
            If .Selected(i) Then
                If InStr(1, .List(i), "Cell") > 0 Then
                    j = InStr(1, .List(i), "_")
                    strTemp = Right$(.List(i), Len(.List(i)) - j + 1)
                    Exit For
                End If
            End If
        Next i
        If strTemp = "" Then
            If bCheck = True Then
                strPrompt = "selected nothing"
            Else
                strPrompt = "cleared nothing"
            End If
            'gbiMsgBoxResponse = MsgBox("Please highlight a cell item first.", vbInformation)
        Else
            For i = 0 To .ListCount - 1
                If InStr(1, .List(i), strTemp) > 0 Then
                    If InStr(1, .List(i), "Cell") > 0 Then
                        .Selected(i) = bCheck
                    End If
                End If
            Next i
            If bCheck = True Then
                strPrompt = "selected Cell" & strTemp
            Else
                strPrompt = "cleared Cell" & strTemp
            End If
        End If
    End With
End Sub

Private Sub CheckBoxApplyToAllCells_Click()
    Dim strPromptY1 As String, strPromptY2 As String
    Call CheckBoxAllCells(ListBoxY1, CheckBoxApplyToAllCells.Value, strPromptY1)
    Call CheckBoxAllCells(ListBoxY2, CheckBoxApplyToAllCells.Value, strPromptY2)
    Application.StatusBar = "Apply to all cells: Y1 " & strPromptY1 & ", Y2 " & strPromptY2 & "."
End Sub

Private Sub ComboBoxPlotStyle_Click()
    Call gfComboBoxPlotStyleClick(ComboBoxPlotStyle)
End Sub

Private Sub LabelForm_Click()
    Call gfPrintMsgBox
End Sub

Private Sub OptionButtonChartChan_Click()
    btnPlot.ControlTipText = "Plot on A Chart for Each Channel"
End Sub

Private Sub OptionDefaultChart_Click()
    btnPlot.ControlTipText = "Plot on " & OptionDefaultChart.Caption
End Sub

Private Sub OptionLastChart_Click()
    btnPlot.ControlTipText = OptionLastChart.ControlTipText
End Sub

Private Sub OptionNewChart_Click()
    btnPlot.ControlTipText = "Plot on " & OptionNewChart.Caption
End Sub

Private Sub UserForm_Activate()
'    Call UserForm_Initialize
    If gbbHasLastwkChart Then OptionLastChart.Enabled = True
    If gRefreshPrecess Or gAutoRefreshEnable Then
    ActiveWorkbook.Worksheets(gwksActivePlotName).Activate
    End If
End Sub

Private Sub UserForm_Initialize()
    Dim bSuccess As Boolean
    Dim strName As String
    gbChartTitleDetail2 = ""
    gbStatisticsName = gbStatisticName
    If InStr(1, ActiveWorkbook.ActiveSheet.Name, gbStatisticName & "s") > 0 Then gbStatisticsName = gbStatisticName & "s"
    gbPreSheetName = gfGetPreSheetName(ActiveWorkbook.ActiveSheet.Name)
    bSuccess = gfGetMinMaxChannelInWorkbook(ActiveWorkbook, gbPreSheetName, gbiMinChannelInAW, gbiMaxChannelInAW)
    TextBoxChannelFrom.Text = gbiMinChannelInAW:    TextBoxChannelTo.Text = gbiMaxChannelInAW
    FrameChannel.ControlTipText = "Search Channel sheets within " & ActiveWorkbook.Name
    
    bSuccess = False
    If gbPreSheetName <> gbSmartBatteryName Then
        bSuccess = gfGetMinMaxCycleInWorkbook(ActiveWorkbook, gbPreSheetName, _
            gbCycleIndexName, gbiMinCycleInAW, gbiMaxCycleInAW)
    Else
        gbiMinCycleInAW = 0:    gbiMaxCycleInAW = 0
    End If
    
    If bSuccess Then
        FrameCycle.Caption = "Select " & gbCycleIndexName
        FrameCycle.ControlTipText = "Search " & gbCycleIndexName & " within " & _
            gbPreSheetName & " sheets of " & ActiveWorkbook.Name
        TextBoxCycleFrom.Text = gbiMinCycleInAW:    TextBoxCycleTo.Text = gbiMaxCycleInAW
    Else
        FrameCycle.Enabled = False
        LabelCycleFrom.Enabled = False: LabelCycleTo.Enabled = False
        TextBoxCycleFrom.Enabled = False: TextBoxCycleTo.Enabled = False
    End If
    
    LabelForm.Caption = gbPreSheetName & " Plot"
    OptionDefaultChart.Caption = "Default chart (" & gbPreSheetName & "_Chart" & ")"
    btnPlot.ControlTipText = "Plot on " & OptionDefaultChart.Caption
    
    If ActiveWorkbook.Name <> gbLastwkChartbookName Then gbwkChartCount = 0
    strName = gbPreSheetName & "_Chart_" & gbwkChartCount + 1
    Do While gfHasChartOf(ActiveWorkbook, strName)
        gbwkChartCount = gbwkChartCount + 1
        strName = gbPreSheetName & "_Chart_" & gbwkChartCount + 1
    Loop
    OptionNewChart.Caption = "New chart (" & strName & ")"
        
    If gbbHasLastwkChart = True Then
        OptionLastChart.Caption = "Add to the chart plotted last time"
        OptionLastChart.ControlTipText = "Add to " & gbLastwkChartbookName & "!" & gbLastwkChartName
    Else
        OptionLastChart.Enabled = False
    End If
    
    Call FramePlotOnInit
    
    Call gfListBoxX0Y1Y2Init(ActiveWorkbook.ActiveSheet, LabelForm, ListBoxX0, ListBoxY1, ListBoxY2)
    If gbbY1OutLine Then LabelY1.Caption = "Y1*"
    If gbbY2OutLine Then LabelY2.Caption = "Y2*"
    
    'If InStr(1, gbPreSheetName, gbMultiCellName) > 0 Then
    If gfGetColumnNumberInstr(ActiveWorkbook.ActiveSheet, "Cell") > 0 Then
        CheckBoxApplyToAllCells.Visible = True
        CheckBoxApplyToAllCells.ControlTipText = "The first cell?_? selected in Y1 and Y2 will be applied to all cells."
        CheckBoxApplyToAllCells.Value = True
        Call CheckBoxApplyToAllCells_Click
    Else
        CheckBoxApplyToAllCells.Visible = False
    End If
    
    Call gfComboBoxPlotStyleInit(ComboBoxPlotStyle)
    btnPlot.SetFocus
    gwksActivePlotName = ActiveWorkbook.ActiveSheet.Name
End Sub

Function FramePlotOnInit()
    OptionDefaultChart.Value = True
    If gbLastPlotOn = 1 Then
        OptionNewChart.Value = True
    ElseIf gbLastPlotOn = 2 Then
        OptionLastChart.Value = True
    ElseIf gbLastPlotOn = 3 Then
        OptionButtonChartChan.Value = True
    End If
End Function

Function PlotGraphInWorkbook(wkbook As Excel.Workbook, PreSheetName As String)
    Dim wkbookName As String, wksheet As Excel.Worksheet
    Dim wkChartbook As Excel.Workbook, wkChart As Excel.Chart
    Dim XColumnName As String, Y1ColumnName As String, Y2ColumnName As String
    Dim strName As String, strMsg As String
    Dim lRowFrom As Long, lRowTo As Long
    Dim i As Integer, j As Integer, iColumn As Integer
    Dim lCycleIndex As Long
    Dim strSerialName As String
    Dim bSuccess As Boolean, bTemp As Boolean, bSetXaxis As Boolean
    Dim bAddNewSeries1Success As Boolean, bAddNewSeries2Success As Boolean
    If Not gfListBoxFindFirstSelected(ListBoxX0, 0, i, XColumnName) Then
        MsgBox ("You should choose a X axes.")
        Exit Function
    End If

    gbLastXColumnName = XColumnName
    gbLastY1ColumnName = ""
    gbLastY2ColumnName = ""
    
    Call DeSelectRangeOnActivewkSheet
    wkbookName = wkbook.Name
    Set wkChartbook = wkbook
    gbLastPlotOn = 0
    If OptionDefaultChart.Value = True Then
        Set wkChart = gfInitPlotChart(wkbook, PreSheetName & "_Chart")
    ElseIf OptionNewChart.Value = True Then
        'Do
            gbwkChartCount = gbwkChartCount + 1
            strName = PreSheetName & "_Chart_" & gbwkChartCount
        'Loop While gfHasChartOf(wkbook, strName)     'Done when open form
        Set wkChart = gfInitPlotChart(wkbook, strName)
        gbLastPlotOn = 1
    ElseIf OptionLastChart.Value = True Then
        bSuccess = False
        If gbbHasLastwkChart Then
            bSuccess = gfSetLastwkChart(gbLastwkChartbookName, gbLastwkChartName, wkChartbook, wkChart)
        End If
        If Not bSuccess Then
            MsgBox ("Can not find last chart. Default chart will be used.")
            Set wkChartbook = wkbook
            Set wkChart = gfInitPlotChart(wkbook, PreSheetName & "_Chart")
        End If
        gbLastPlotOn = 2
    ElseIf OptionButtonChartChan = True Then
        bSuccess = False
        Set wkChartbook = wkbook
        ' Set wkChart = gfInitPlotChart(wkbook, PreSheetName & "_Chart")
        gbLastPlotOn = 3
    Else
        MsgBox ("Option choice error.")
        Exit Function
    End If
    
    gbLastwkChartbookName = wkChartbook.Name
    If gbLastPlotOn <> 3 Then gbLastwkChartName = wkChart.Name
    gbbHasLastwkChart = True
    
    Application.ScreenUpdating = False
    strMsg = "": bSetXaxis = False
    bAddNewSeries1Success = False: bAddNewSeries2Success = False
    For Each wksheet In wkbook.Worksheets
        strName = wksheet.Name
        If gfHasChartOf(wkbook, strName) = False And InStr(1, strName, PreSheetName) = 1 Then
            i = InStr(1, strName, "-")
            If i = 0 Then
                    j = 0   'Channel number
            Else
                    j = Val(Right$(strName, Len(strName) - i))
            End If
            If j >= gbiChannelFromInAW And j <= gbiChannelToInAW Then
                
                'Set wkSheet = wkbook.Worksheets(strName)
                If gbLastPlotOn = 3 Then
                    Set wkChart = gfInitPlotChart(wkbook, wksheet.Name & "_Chart")
                End If

                
                If gbbShowPlotWizard3 = True Then
                    bSuccess = GetRowFromToByPWP3Form(wksheet, lRowFrom, lRowTo)
                Else
                    'Cycle_Index
                    bSuccess = gfGetRowFromToByValue(wksheet, gbCycleIndexName, gbiCycleFromInAW, _
                        gbiCycleToInAW, lRowFrom, lRowTo)
                    If Not bSuccess And gfGetColumnNumber(wksheet, gbCycleIndexName) = -1 Then
                        bSuccess = gfGetRowFromToMinMax(wksheet, XColumnName, lRowFrom, lRowTo)
                    End If
                End If
                
                If bSuccess Then
                    'bTemp = gfCheck32000Value(wkSheet, lRowFrom, lRowTo)
                    'Y1
                    For i = 0 To ListBoxY1.ListCount - 1
                        If ListBoxY1.Selected(i) Then
                            Y1ColumnName = ListBoxY1.List(i)
                            gbLastY1ColumnName = Y1ColumnName
                            If gbPWP3Option = 5 And gbbShowPlotWizard3 Then
                                For lCycleIndex = gbPWP3fColumnMin To gbPWP3fColumnMax
                                      bSuccess = gfGetRowFromToMinMax(wksheet, XColumnName, lRowFrom, lRowTo)
                                      bSuccess = gfGetRowFromToByValueAndRowLimit(wksheet, gbCycleIndexName, _
                                      lCycleIndex, lCycleIndex, lRowFrom, lRowTo)
                                     If gbPWP3fColumnMin1 <> 0 And gbPWP3fColumnMax1 <> 0 Then
                                        strSerialName = Right(wksheet.Name, 5) & Y1ColumnName & Str(gbPWP3fColumnMin1) & "-" & Str(gbPWP3fColumnMax1) & "@" & lCycleIndex
                                            If gfGetRowFromToByValueAndRowLimit(wksheet, gbStepIndexName, _
                                                gbPWP3fColumnMin1, gbPWP3fColumnMax1, lRowFrom, lRowTo) Then
                                                bTemp = gfAddNewSeriesToChart(wkbookName, wksheet, XColumnName, _
                                                wkbookName, wksheet, Y1ColumnName, lRowFrom, lRowTo, xlPrimary, wkChart, strSerialName)
                                            End If
                                     End If
                                     DoEvents
                                Next lCycleIndex
                                Else
                                bTemp = gfAddNewSeriesToChart(wkbookName, wksheet, XColumnName, _
                                wkbookName, wksheet, Y1ColumnName, lRowFrom, lRowTo, xlPrimary, wkChart, "")
                            End If
                            If bTemp = True Then bAddNewSeries1Success = True
                        End If
                    Next i
                    'Y2
                     For i = 0 To ListBoxY2.ListCount - 1
                        If ListBoxY2.Selected(i) Then
                            Y2ColumnName = ListBoxY2.List(i)
                            gbLastY2ColumnName = Y2ColumnName
                            If gbPWP3Option = 5 And gbbShowPlotWizard3 Then
                                For lCycleIndex = gbPWP3fColumnMin To gbPWP3fColumnMax
                                      strSerialName = Right(wksheet.Name, 5) & Y1ColumnName & Str(gbPWP3fColumnMin1) & "-" & Str(gbPWP3fColumnMax1) & "@" & lCycleIndex
                                      bSuccess = gfGetRowFromToMinMax(wksheet, XColumnName, lRowFrom, lRowTo)
                                      bSuccess = gfGetRowFromToByValueAndRowLimit(wksheet, gbCycleIndexName, _
                                      lCycleIndex, lCycleIndex, lRowFrom, lRowTo)
                                     If gbPWP3fColumnMin1 <> 0 And gbPWP3fColumnMax1 <> 0 Then
                                            If gfGetRowFromToByValueAndRowLimit(wksheet, gbStepIndexName, _
                                                gbPWP3fColumnMin1, gbPWP3fColumnMax1, lRowFrom, lRowTo) Then
                                                bTemp = gfAddNewSeriesToChart(wkbookName, wksheet, XColumnName, _
                                                wkbookName, wksheet, Y2ColumnName, lRowFrom, lRowTo, xlSecondary, wkChart, strSerialName)
                                            End If
                                     End If
                                     DoEvents
                                Next lCycleIndex
                                Else
                                bTemp = gfAddNewSeriesToChart(wkbookName, wksheet, XColumnName, _
                                wkbookName, wksheet, Y2ColumnName, lRowFrom, lRowTo, xlSecondary, wkChart, "")
                            End If
                          End If
                          If bTemp = True Then bAddNewSeries2Success = True
                    Next i
               Else
                    'strMsg = strMsg & "Can not find " & gbCycleIndexName & " from " & gbiCycleFromInAW & _
                        " to " & gbiCycleToInAW & " in " & wkSheet.Name & " sheet. " & Chr$(13)
               End If   'bSuccess
               'Adjust Xaxis
               If bSetXaxis = False And gbbShowPlotWizard3 = True Then
                    If bAddNewSeries1Success Or bAddNewSeries2Success Then
                        Call gfSetPlotChartXaxis(wkChart, wksheet, XColumnName, lRowFrom, lRowTo)
                        bSetXaxis = True
                    End If
               End If
            End If
        End If
        DoEvents
        Sleep gSleepTime
    Next wksheet
    'Title
    Call CollectY1Y2ColumnNameInSimplePlot(Y1ColumnName, Y2ColumnName)
    If gbbTimeFormat = True Then
        XColumnName = XColumnName & "(" & gptTimeUnitTitle & ")"
    End If
    If bAddNewSeries1Success And bAddNewSeries2Success Then
        Call gfSetPlotChartTitle(wkChart, Left$(Y1ColumnName & ", " & Y2ColumnName & _
            " vs. " & XColumnName & gbChartTitleDetail2, 255), _
            XColumnName, Y1ColumnName, Y2ColumnName)
    ElseIf bAddNewSeries1Success Then
        Call gfSetPlotChartTitle(wkChart, Left$(Y1ColumnName & _
            " vs. " & XColumnName & gbChartTitleDetail2, 255), _
            XColumnName, Y1ColumnName, "")
    ElseIf bAddNewSeries2Success Then
        Call gfSetPlotChartTitle(wkChart, Left$(Y2ColumnName & _
            " vs. " & XColumnName & gbChartTitleDetail2, 255), _
            XColumnName, "", Y2ColumnName)
    End If
    Call gfAfterPlotChart(wkChart)
    If strMsg <> "" Then
        gbiMsgBoxResponse = MsgBox(strMsg, vbInformation)
    End If
    wkChartbook.Activate
    wkChart.Deselect
    'Application.ScreenUpdating = True

End Function

Function CollectY1Y2ColumnNameInSimplePlot(Y1ColumnName As String, Y2ColumnName As String)
    Dim i As Integer, j As Integer
    Dim strTemp As String, strTemp1 As String
    Y1ColumnName = "": Y2ColumnName = ""
    For i = 0 To ListBoxY1.ListCount - 1
        If ListBoxY1.Selected(i) Then
            strTemp = ListBoxY1.List(i)
            If InStr(1, strTemp, "Cell") = 1 Then
                j = InStr(1, strTemp, "_")
                strTemp1 = Right$(strTemp, Len(strTemp) - j)
                If InStr(1, Y1ColumnName, strTemp1) <= 0 Then
                    Y1ColumnName = Left$(Y1ColumnName & strTemp1 & ", ", 255)
                End If
            Else
                Y1ColumnName = Left$(Y1ColumnName & strTemp & ", ", 255)
            End If
        End If
    Next i
    If Y1ColumnName <> "" Then
        Y1ColumnName = Left$(Y1ColumnName, Len(Y1ColumnName) - 2)
        'Y1ColumnName = Left$(Y1ColumnName, 255)
    End If
    'Y2
     For i = 0 To ListBoxY2.ListCount - 1
        If ListBoxY2.Selected(i) Then
            strTemp = ListBoxY2.List(i)
            If InStr(1, strTemp, "Cell") = 1 Then
                j = InStr(1, strTemp, "_")
                strTemp1 = Right$(strTemp, Len(strTemp) - j)
                If InStr(1, Y2ColumnName, strTemp1) <= 0 Then
                    Y2ColumnName = Left$(Y2ColumnName & strTemp1 & ", ", 255)
                End If
            Else
                Y2ColumnName = Left$(Y2ColumnName & strTemp & ", ", 255)
            End If
        End If
    Next i
    If Y2ColumnName <> "" Then
        Y2ColumnName = Left$(Y2ColumnName, Len(Y2ColumnName) - 2)
        'Y2ColumnName = Left$(Y2ColumnName, 255)
    End If
End Function

Function PreProcessY1Y2SelectedInSimplePlot() As Boolean
    Dim i As Integer
    PreProcessY1Y2SelectedInSimplePlot = False
    If OptionLastChart.Value = True Then
        PreProcessY1Y2SelectedInSimplePlot = True
        Exit Function
    End If
    'Y1
    For i = 0 To ListBoxY1.ListCount - 1
        If ListBoxY1.Selected(i) Then
            PreProcessY1Y2SelectedInSimplePlot = True
            Exit Function
        End If
    Next i
    'Y2
    For i = 0 To ListBoxY2.ListCount - 1
        If ListBoxY2.Selected(i) Then
            gbiMsgBoxResponse = MsgBox("First selection ( " & _
                ListBoxY2.List(i) & " ) in Y2 will be plotted as Y1.", vbInformation)
            ListBoxY1.Selected(i) = True
            ListBoxY2.Selected(i) = False
            PreProcessY1Y2SelectedInSimplePlot = True
            Exit Function
        End If
    Next i
End Function

Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
'Option Explicit
'Private Declare Function Rectangle Lib "gdi32" (ByVal hdc As Long, ByVal x1 As Long, ByVal y1 As Long, ByVal x2 As Long, ByVal y2 As Long) As Long
'Private Declare Function SetSystemCursor Lib "user32" (ByVal hcur As Long, ByVal id As Long) As Boolean
'Private Declare Function SetCursor Lib "user32" (ByVal hCursor As Long) As Long

Private Sub Workbook_AddinInstall()
    On Error Resume Next
    Excel.Application.AddIns.Add filename:=ThisWorkbook.FullName
    Excel.Application.AddIns.Add(ThisWorkbook.FileFormat).Installed = ture
    MsgBox Version & " is installed! Excel needs to restart!"
    Exit Sub
Err_Exit:
    MsgBox Version & "Err: " & Err.Description
'    Application.Quit
End Sub

'Private Declare Function GetCursor Lib "user32" () As Long
'Private Declare Function LoadCursor Lib "user32" Alias "LoadCursorA" (ByVal hInstance As Long, ByVal lpCursorName As Long) As Long
'Private Const IDC_CROSS = 32515&
'Private Const OCR_NORMAL = 32512&
'Private Const IDC_ARROW = 32512&
'Dim bFirstPoint As Boolean, bMouseDown As Boolean
'Dim hCursor As Long, ret_val As Long
'Dim lSeriesIndex1 As Long, lSeriesIndex2 As Long
'Dim lPointsIndex1 As Long, lPointsIndex2 As Long
'Dim tempSeries1 As Series, tempseries2 As Series
'Dim x1 As Long, x2 As Long, y1 As Long, y2 As Long
'Const strStatusBar As String = "Click on data serise to Zoom."

'Private Sub Chart_Activate()

'bFirstPoint = True
'bMouseDown = False
'With ActiveChart.Shapes(1)
'   .Height = 0
'   .Width = 0
'   .Left = 0
'   .Top = 0
'End With
'Application.StatusBar = strStatusBar
'ActiveChart.Refresh
'End Sub

'Private Sub Chart_Deactivate()
'Application.StatusBar = "Ready"
'End Sub

'Private Sub Chart_DragOver()

' Override DragOver event
'End Sub

'Private Sub Chart_MouseDown(ByVal Button As Long, ByVal Shift As Long, ByVal x As Long, ByVal y As Long)

'If Shift = 1 Then
'   If bFirstPoint = False Then
'     hCursor = LoadCursor(0, IDC_CROSS)
'     ret_val = SetSystemCursor(hCursor, OCR_NORMAL)
'     bFirstPoint = True
'     Application.StatusBar = strStatusBar
'    End If
'End If
'If bFirstPoint Then
'    x1 = x: y1 = y
'     With ActiveChart.Shapes(1)
'        .BlackWhiteMode = msoBlackWhiteGrayOutline
'        .Width = 0
'        .Height = 0
'        .Left = x1
'        .Top = y1
'     End With
'     hCursor = LoadCursor(0, IDC_CROSS)
'     ret_val = SetSystemCursor(hCursor, OCR_NORMAL)
'     bFirstPoint = False
'     Else
'     bFirstPoint = True
'End If
' Zoom code here
'End Sub


'Private Sub Chart_MouseMove(ByVal Button As Long, ByVal Shift As Long, ByVal x As Long, ByVal y As Long)
'   With ActiveChart.Shapes(1)
'   If x < x1 Then
'        .Left = x: .Width = x1 - x
'   Else
'        .Left = x1: .Width = x - x1
'   End If
'   If y < y1 Then
'        .Top = y: .Height = y1 - y
'   Else
'        .Top = y1: .Height = y - y1
'   End If
'   End With
'End Sub

'Private Sub Chart_MouseUp(ByVal Button As Long, ByVal Shift As Long, ByVal x As Long, ByVal y As Long)
'If bFirstPoint = False Then
'    hCursor = LoadCursor(0, IDC_CROSS)
'    ret_val = SetSystemCursor(hCursor, OCR_NORMAL)
'End If
'    bMouseDown = False
'End Sub

'Private Sub Chart_Select(ByVal ElementID As Long, ByVal Arg1 As Long, ByVal Arg2 As Long)
'Dim ltemp As Long
'Dim miniScale As Double
'Dim maxiScale As Double
'Dim dtemp As Double
'If ElementID = xlSeries Then
'Application.StatusBar = "Select Point 1."
'    If bFirstPoint Then
'        lSeriesIndex1 = Arg1
'        lPointsIndex1 = Arg2
'            If lPointsIndex1 < 0 Then Exit Sub
'                bFirstPoint = False
'                hCursor = LoadCursor(0, IDC_CROSS)
'                ret_val = SetSystemCursor(hCursor, OCR_NORMAL)
'                Application.StatusBar = "Select Point 2 or <SHIFT> click to Cancel."
'        Else
'        lSeriesIndex2 = Arg1
'        lPointsIndex2 = Arg2
'        If lPointsIndex2 < 0 Then Exit Sub
'            bFirstPoint = True
'            If lPointsIndex2 < lPointsIndex1 Then
'            ltemp = lPointsIndex2: lPointsIndex2 = lPointsIndex1: lPointsIndex1 = ltemp
'            End If
'            Set tempSeries1 = ActiveChart.SeriesCollection(lSeriesIndex1)
'            Set tempseries2 = ActiveChart.SeriesCollection(lSeriesIndex2)
'                hCursor = LoadCursor(0, IDC_CROSS)
'                ret_val = SetSystemCursor(hCursor, OCR_NORMAL)
'            With ActiveChart.Axes(xlCategory)
'                miniScale = tempSeries1.XValues(lPointsIndex1)
'                maxiScale = tempseries2.XValues(lPointsIndex2)
'                If maxiScale < miniScale Then
'                    dtemp = maxiScale: maxiScale = miniScale: miniScale = dtemp
'                End If
'                .MinimumScale = miniScale
'                .MaximumScale = maxiScale
'
'            End With
'            With ActiveChart.Axes(xlValue)
'                miniScale = tempSeries1.Values(lPointsIndex1)
'                maxiScale = tempseries2.Values(lPointsIndex2)
'                If maxiScale < miniScale Then
'                    dtemp = maxiScale: maxiScale = miniScale: miniScale = dtemp
'                End If
'                .MinimumScale = miniScale
'                .MaximumScale = maxiScale
'            End With
'            On Error GoTo Zoom_Exit
'            With ActiveChart.Axes(xlCategory, xlSecondary)
'                miniScale = tempSeries1.XValues(lPointsIndex1)
'                maxiScale = tempseries2.XValues(lPointsIndex2)
'                If maxiScale < miniScale Then
'                   dtemp = maxiScale: maxiScale = miniScale: miniScale = dtemp
'                End If
'                .MinimumScale = miniScale
'                .MaximumScale = maxiScale
'            End With
'            With ActiveChart.Axes(xlValue, xlSecondary)
'                miniScale = tempSeries1.Values(lPointsIndex1)
'                maxiScale = tempseries2.Values(lPointsIndex2)
'                If maxiScale < miniScale Then
'                    dtemp = maxiScale: maxiScale = miniScale: miniScale = dtemp
'                End If
'                .MinimumScale = miniScale
'                .MaximumScale = maxiScale
'            End With
'Zoom_Exit:
'    On Error GoTo 0
'    ActiveChart.Activate
'    Application.StatusBar = strStatusBar
'    End If
'End If
'End Sub


Private Sub Workbook_Open()
On Error GoTo Err_Exit
Call DeleteOpenOption
On Error Resume Next
Application.AddIns.Add filename:=ThisWorkbook.FullName
Exit Sub
Err_Exit:
MsgBox "Mits_DataPro Err: " & Err.Description
End Sub
Attribute VB_Name = "Utility"

Option Explicit
Option Base 1
Declare Sub Sleep Lib "Kernel32" (ByVal dwMilliseconds As Long)
  
Function GetSQLTopPercent(tOEme As gMyTypeOptionEdit) As String
    If tOEme.OptionID = 2 Then
        GetSQLTopPercent = "TOP " & tOEme.NumEdit1 & " PERCENT "
    Else
        GetSQLTopPercent = ""
    End If
End Function
  
Function GetSQLConditionPart(TableName As String, tOEme As gMyTypeOptionEdit, TestID As Integer) As String
    ' TableName means ""=normal channel "sb."=smartbattery "nn."=Statistic channel "cc."=auxiliary "sc."=Clock
    Dim lFrom As Long, lTo As Long, lCycle As Long, lCycleTo As Long      '&
    Dim tempRec As Recordset, rCount As Long, pCount As Long, lCount As Long, SQLQry As String
    lFrom = Int(tOEme.FromEdit)
    lTo = Int(tOEme.ToEdit)
    lCycle = Int(tOEme.NumEdit1): lCycleTo = Int(tOEme.NumEdit2)
    Select Case tOEme.OptionID
        Case 3
            Select Case TableName
                Case "nn."
                     GetSQLConditionPart = _
                     " AND (" & TableName & gbCycleIndexName & " BETWEEN " & lCycle & " AND " & lCycleTo & ") "
                Case ""
                    GetSQLConditionPart = " AND ( " & TableName & gbStepIndexName & _
                    " BETWEEN " & lFrom & " AND " & lTo & " )"
                     GetSQLConditionPart = GetSQLConditionPart & _
                     " AND (" & TableName & gbCycleIndexName & " BETWEEN " & lCycle & " AND " & lCycleTo & ") "
                Case "sb."
                     GetSQLConditionPart = _
                     " AND (" & TableName & "CycleCount" & " BETWEEN " & lCycle & " AND " & lCycleTo & ") "
                
            End Select
        Case 4
            Select Case TableName
                Case "sb."
                     GetSQLConditionPart = _
                     " AND (" & TableName & "CycleCount" & " BETWEEN " & lFrom & " AND " & lTo & ") "
                
                Case Else
                    GetSQLConditionPart = " AND ( " & TableName & gbCycleIndexName & _
                    " BETWEEN " & lFrom & " AND " & lTo & ") "
            End Select
        Case 5
            GetSQLConditionPart = " AND ( " & TableName & gbDataPointName & _
                " BETWEEN " & lFrom & " AND " & lTo & ") "
        Case 6
            Select Case TableName
            Case "sb."
                SQLQry = "Select Count(Data_Point) as rCount FROM Smart_Battery_Data_Table Where Test_ID =" & TestID
            Case "sc."
                SQLQry = "Select Count(Data_Point) as rCount FROM Smart_Battery_Clock_Stretch_Table Where Test_ID =" & TestID
            Case "nn."
                SQLQry = "Select Count(Data_Point) as rCount FROM Channel_Statistic_Table Where Test_ID =" & TestID
            Case Else
                SQLQry = "Select Count(Data_Point) as rCount FROM Channel_Normal_Table Where Test_ID =" & TestID
            End Select
            Set tempRec = gDB.OpenRecordset(SQLQry, dbOpenForwardOnly, dbReadOnly)
            lCount = tempRec.Fields("rCount").Value
            tempRec.Close
            Set tempRec = Nothing
            pCount = lCount * tOEme.NumEdit1 / 100
            lCount = lCount - pCount
            GetSQLConditionPart = " AND (" & TableName & gbDataPointName & ">=" & lCount & ")"
        Case Else
            GetSQLConditionPart = ""
    End Select
End Function

Function ReadRecordToSheetLoop(SheetName As String, strQuery As String, iStartCol As Integer) As Boolean
    Dim iLoopRead As Integer
    For iLoopRead = 1 To 20
        ReadRecordToSheetLoop = ReadRecordToSheet(SheetName, strQuery, iStartCol, iLoopRead)
        If ReadRecordToSheetLoop = True Then Exit Function
        If gbIsImporting = False Then Exit Function
        DoEvents
        Sleep gSleepTime '  12/03/2001
    Next iLoopRead
End Function

'Read records from the database and make a new sheet name to contain the records
Function ReadRecordToSheet(SheetName As String, strQuery As String, iStartCol As Integer, iLoopRead As Integer) As Boolean
    'If iStartCol>1 Call ReadAuxRecordToSheet                   James   05-18-98
    Dim wksheet As Excel.Worksheet
    Dim recTemp As Recordset
    Dim SheetNameFull As String
    Dim iPageCount As Integer, iFieldsCount As Integer
    Dim iCols As Integer
    
    ReadRecordToSheet = False
    iPageCount = 0
    On Error GoTo ReadRecordToSheet_Error
    Set recTemp = gDB.OpenRecordset(strQuery, dbOpenForwardOnly, dbReadOnly)
    On Error Resume Next
    Do While Not recTemp.EOF
        If gbIsImporting = False Then Exit Function
      
        iPageCount = iPageCount + 1
        If iPageCount >= 2 Then
                If iPageCount = 2 And iStartCol = 1 Then ActiveSheet.Name = SheetName & "_" & 1
                SheetNameFull = SheetName & "_" & iPageCount
        Else
                SheetNameFull = SheetName
        End If
        'Make a new sheet
        If Not HasSheetOf(SheetNameFull) Then
            Call MadeNewSheet(ActiveWorkbook, SheetNameFull)
        End If
        Set wksheet = Worksheets(SheetNameFull)
        
        '--The first line of active sheet is titles
        iFieldsCount = recTemp.Fields.Count
        With wksheet
            For iCols = 0 To iFieldsCount - 1
                .cells(1, iCols + iStartCol).Value = recTemp.Fields(iCols).Name
                .cells(1, iCols + iStartCol).AddComment recTemp.Fields(iCols).Name
            Next iCols
            '--Write record data to worksheet
            'With .Range(.Cells(1, iStartCol), .Cells(1, iStartCol).End(xlToRight))
            Application.StatusBar = "Read Data to " & SheetNameFull
            .cells(2, iStartCol).CopyFromRecordset Data:=recTemp, maxrows:=glMaxRowsNum, maxcolumns:=iFieldsCount
            'End With
            Sleep 200   'Wait copy finished
            DoEvents
            
            If iStartCol = 1 Then
                 Call FormatSheetColumnsNumber(wksheet)
                 Call CreateSheetSomeColumns(wksheet, iPageCount)
                'Call FormatSheet1stRow(wkSheet)
                .Range("B2").Select
                ActiveWindow.FreezePanes = True
            End If
            ReadRecordToSheet = True
        End With
    Loop
    recTemp.Close
    Set recTemp = Nothing
    
    If ReadRecordToSheet = False Then
        If gbbLogReadNullCount Then
            Call WriteErrorLogFile("(ReadRToS) Null", SheetName, CSng(iStartCol))
        End If
        ReadRecordToSheet = True
    End If
ReadRecordToSheet_Exit:
    On Error GoTo 0
    Exit Function

ReadRecordToSheet_Error:
    If gbbLogTryCount Then
        Call WriteErrorLogFile("(ReadRToS) Try " & iLoopRead, SheetName, CSng(iStartCol))
    End If
    'gbiMsgBoxResponse = MsgBox("Read Database Error. " & SheetName & " (ReadRToS).", vbInformation)
    GoTo ReadRecordToSheet_Exit
End Function

Sub DeSelectRangeOnActivewkSheet()
    Dim rg As Range
    If TypeName(Selection) = "Range" Then
        Set rg = Selection
        If rg.Count > 1 Then
            cells(rg.Row, rg.Column).Select
        End If
    End If
End Sub

Sub FormatDecimalPlacesTime()
    Dim wksheet As Excel.Worksheet
    Dim j As Integer, iEndColumn As Integer, strName As String
    Dim iCols As Integer, strFormat As String
    strFormat = "0.000"
    For Each wksheet In ActiveWorkbook.Worksheets
        If wksheet.Name <> gbInfoSheetName Then
            With wksheet
                iEndColumn = .Range("A1").End(xlToRight).Column
                If iEndColumn >= giMaxColumnsNum Then Exit Sub
                For j = 1 To iEndColumn
                    iCols = InStr(1, .cells(1, j).Value, gbTestTimeName)
                    If iCols > 0 Then
                        wksheet.Columns(j).NumberFormat = strFormat
                        Exit For
                    End If
                Next j
                For j = 1 To iEndColumn
                    iCols = InStr(1, .cells(1, j).Value, gbStepTimeName)
                    If iCols > 0 Then
                        wksheet.Columns(j).NumberFormat = strFormat
                        Exit For
                    End If
                Next j
            End With
        End If
    Next wksheet
End Sub
Sub AddDayHourMinuteColumns()
    Dim wksheet As Excel.Worksheet
    For Each wksheet In ActiveWorkbook.Worksheets
        If wksheet.Name <> gbInfoSheetName Then
            Call AddDayHourMinuteColumnsToSheet(wksheet)
        End If
    Next wksheet
End Sub
Sub AddDayHourMinuteColumnsToSheet(wksheet As Excel.Worksheet)
Dim iTestColumn As Integer
Dim insColumn As Integer
Dim lLoopEnd As Long
Dim i As Long, iCount As Integer
iCount = 0
iTestColumn = gfGetColumnNumber(wksheet, "Test_Time(s)")
If iTestColumn = -1 Then Exit Sub
With wksheet
lLoopEnd = .cells(1, 1).End(xlDown).Row
If gbbTestMinute Then
    insColumn = iTestColumn + 1
    .Columns(insColumn).Insert Shift:=xlToRight
    .Columns(insColumn).ColumnWidth = 0.1
    Application.StatusBar = "Calculate " & "Test_Time(m)" & wksheet.Name & "(" & lLoopEnd & "rows)"
    For i = 2 To lLoopEnd
    .cells(i, insColumn).Value = .cells(i, iTestColumn).Value / 60#
    Next i
    .cells(1, insColumn).Value = "Test_Time(m)"
    iCount = iCount + 1
    If iCount > gCount Then
        Sleep gSleepTime
        iCount = 0
    End If
End If
If gbbTestHour Then
    insColumn = iTestColumn + 1
    .Columns(insColumn).Insert Shift:=xlToRight
    .Columns(insColumn).ColumnWidth = 0.1
    Application.StatusBar = "Calculate " & "Test_Time(h)" & wksheet.Name & "(" & lLoopEnd & "rows)"
    For i = 2 To lLoopEnd
    .cells(i, insColumn).Value = .cells(i, iTestColumn).Value / 3600#
    Next i
    .cells(1, insColumn).Value = "Test_Time(h)"
    iCount = iCount + 1
    If iCount > gCount Then
        Sleep gSleepTime
        iCount = 0
    End If
End If
If gbbTestDay Then
    insColumn = iTestColumn + 1
    .Columns(insColumn).Insert Shift:=xlToRight
    .Columns(insColumn).ColumnWidth = 0.1
    Application.StatusBar = "Calculate " & "Test_Time(d)" & wksheet.Name & "(" & lLoopEnd & "rows)"
    For i = 2 To lLoopEnd
    .cells(i, insColumn).Value = .cells(i, iTestColumn).Value / (3600# * 24#)
    Next i
    .cells(1, insColumn).Value = "Test_Time(d)"
    iCount = iCount + 1
    If iCount > gCount Then
        Sleep gSleepTime
        iCount = 0
    End If
End If
'.Columns(insColumn).EntireColumn.Hidden = True
'.Columns(insColumn + 1).EntireColumn.Hidden = True
'.Columns(insColumn + 2).EntireColumn.Hidden = True
End With
End Sub
Sub AddmAAndmVColumns()
    Dim wksheet As Excel.Worksheet
    For Each wksheet In ActiveWorkbook.Worksheets
        If wksheet.Name <> gbInfoSheetName Then
            Call AddAAndmVColumnsToSheet(wksheet)
        End If
'        wksheet.Rows("1:1").RowHeight = 24.5
    Next wksheet
End Sub

Sub AddAAndmVColumnsToSheet(wksheet As Excel.Worksheet)
Dim iTestColumn As Integer
Dim insColumn As Integer
Dim lLoopEnd As Long
Dim i As Long, iCount As Integer
If gbbCurrentmA Then
iTestColumn = gfGetColumnNumber(wksheet, "Current(A)")
If iTestColumn = -1 Then Exit Sub
With wksheet
lLoopEnd = .cells(1, 1).End(xlDown).Row
    insColumn = iTestColumn + 1
    .Columns(insColumn).Insert Shift:=xlToRight

    Application.StatusBar = "Calculate " & "Current(mA)" & wksheet.Name & "(" & lLoopEnd & "rows)"
    For i = 2 To lLoopEnd
    .cells(i, insColumn).Value = .cells(i, iTestColumn).Value * 1000#
    Next i
    .cells(1, insColumn).Value = "Current(mA)"
    .Columns(insColumn).ColumnWidth = 0.1 'Hide column
'.Columns(insColumn).EntireColumn.Hidden = True
    iCount = iCount + 1
    If iCount > gCount Then
        Sleep gSleepTime
        iCount = 0
    End If
End With
End If
If gbbVoltagemV Then
iTestColumn = gfGetColumnNumber(wksheet, "Voltage(V)")
If iTestColumn = -1 Then Exit Sub
With wksheet
lLoopEnd = .cells(1, 1).End(xlDown).Row
insColumn = iTestColumn + 1
.Columns(insColumn).Insert Shift:=xlToRight

Application.StatusBar = "Calculate " & "Voltage(mV)" & wksheet.Name & "(" & lLoopEnd & "rows)"
For i = 2 To lLoopEnd
    .cells(i, insColumn).Value = .cells(i, iTestColumn).Value * 1000#
Next i
.cells(1, insColumn).Value = "Voltage(mV)"
.Columns(insColumn).ColumnWidth = 0.1
'.Columns(insColumn).EntireColumn.Hidden = True
    iCount = iCount + 1
    If iCount > gCount Then
        Sleep gSleepTime
        iCount = 0
    End If
End With
End If
End Sub

Sub AddPowerLoadColumns()
    Dim wksheet As Excel.Worksheet
    For Each wksheet In ActiveWorkbook.Worksheets
        If wksheet.Name <> gbInfoSheetName Then
            Call AddPowerLoadColumnsToSheet(wksheet)
        End If
    Next wksheet
End Sub

Sub AddPowerLoadColumnsToSheet(wksheet As Excel.Worksheet)
Dim iCurrColumn As Integer
Dim iVolColumn As Integer
Dim insColumn As Integer
Dim lLoopEnd As Long
Dim i As Long, iCount As Integer

iCurrColumn = gfGetColumnNumber(wksheet, "Current(A)")
If iCurrColumn = -1 Then Exit Sub
iVolColumn = gfGetColumnNumber(wksheet, "Voltage(V)")
If iVolColumn = -1 Then Exit Sub
With wksheet
lLoopEnd = .cells(1, 1).End(xlDown).Row
insColumn = Abs(iCurrColumn * (iCurrColumn > iVolColumn) + iVolColumn * (iVolColumn > iCurrColumn)) + 1
If gbbLoad Then
insColumn = insColumn + 1
.Columns(insColumn).Insert Shift:=xlToRight
Application.StatusBar = "Calculate Load(ohm) " & wksheet.Name & "(" & lLoopEnd & "rows)"
For i = 2 To lLoopEnd
'    .Cells(i, insColumn).Interior.ColorIndex = 0
    If .cells(i, iCurrColumn).Value = 0 Then
        .cells(i, insColumn).Value = 0
    Else
        .cells(i, insColumn).Value = Abs(.cells(i, iVolColumn).Value / .cells(i, iCurrColumn).Value)
    End If
Next i
.Columns(insColumn).ColumnWidth = 12
.cells(1, insColumn).Value = "Load(ohm)"
    iCount = iCount + 1
    If iCount > gCount Then
        Sleep gSleepTime
        iCount = 0
    End If
End If
If gbbPower Then
insColumn = insColumn + 1
.Columns(insColumn).Insert Shift:=xlToRight
Application.StatusBar = "Calculate Power(w) " & wksheet.Name & "(" & lLoopEnd & "rows)"
For i = 2 To lLoopEnd
    .cells(i, insColumn).Value = .cells(i, iVolColumn).Value * .cells(i, iCurrColumn).Value
Next i
.Columns(insColumn).ColumnWidth = 12
.cells(1, insColumn).Value = "Power(W)"
    iCount = iCount + 1
    If iCount > gCount Then
        Sleep gSleepTime
        iCount = 0
    End If
End If
End With
End Sub
Sub ReverseI()
If gbbIPolarity Then gfReverseI
End Sub
Sub ReverseV()
If gbbVPolarity Then gfReverseV
End Sub
Sub AddIDColumns()
If gbbID Then gfCurrentDensity
End Sub

Sub AddPDColumns()
If gbbPD Then gfPowerDensity
End Sub
Sub AddCoulmColumns()
If gbbCE Then gfCoulombicEfficiency
End Sub
Sub AddGroupCalcute()
If gGroupCalculate Then gfGroupCalculate
End Sub
Sub AddSmartBatteryStat()
If gSmartBatteryStat Then gfSmartBatteryStat
End Sub
Sub AddWarning()
If gbbFlag Then gfWarning
End Sub
Sub AddCapRate()
If gCustom = "SCTS" Then gfCapRate
End Sub

Sub FormatDecimalPlaces()
    Dim wksheet As Excel.Worksheet
    For Each wksheet In ActiveWorkbook.Worksheets
        If wksheet.Name <> gbInfoSheetName Then
            Call FormatDecimalPlacesSheet(wksheet)
        End If
    Next wksheet
End Sub

Sub FormatDecimalPlacesSheet(wksheet As Excel.Worksheet)
    Dim i As Integer
    Application.StatusBar = "Format Decimal Places in " & wksheet.Name & " sheet"
    For i = 1 To giDecimalPlacesAll
        If giDecimalPlaces(i) >= 0 Or giDecimalPlaces(i) = -2 Then
            If InStr(1, wksheet.Name, "MultiCell", 1) > 0 Then
                Call FormatDecimalPlacesNormalwkSheetI(wksheet, i, 0)
            Else
                Call FormatDecimalPlacesNormalwkSheetI(wksheet, i, 1)
            End If
        End If
    Next i
    Application.StatusBar = "Finished: Format Decimal Places in " & wksheet.Name & " sheet"
End Sub

Sub FormatDecimalPlacesNormalwkSheetI(wksheet As Excel.Worksheet, i As Integer, iMode As Integer)
    Dim j As Integer, iEndColumn As Integer, strTitle As String
    Dim iCols As Integer, strFormat As String
    With wksheet
        iEndColumn = .Range("A1").End(xlToRight).Column
        If iEndColumn >= giMaxColumnsNum Then Exit Sub
        For iCols = 2 To iEndColumn
                strTitle = .cells(1, iCols).Comment.Text
                If gTitleCategory(strTitle, i) Then
                    If giDecimalPlaces(i) >= 0 Then strFormat = "0"
                    If giDecimalPlaces(i) > 0 Then strFormat = "0." & String(giDecimalPlaces(i), "0")
                    If giDecimalPlaces(i) = gbiRangeRestoreDefault Then strFormat = "General"
                        wksheet.Columns(iCols).NumberFormat = strFormat
                        'If i <= giDecimalPlacesNormal And iMode = 1 Then Exit For
                End If
       Next iCols
    End With
End Sub

Sub FormatwkBookCellsColor()
    Dim wksheet As Excel.Worksheet
    For Each wksheet In ActiveWorkbook.Worksheets
        If gbbHighlightPulseRow Then
            If InStr(1, wksheet.Name, gbChannelName) > 0 Then
                Call FormatHighlightPulseRow(wksheet)
            End If
        End If
        If gbbPrint Then Call FormatSheetEvenColumns(wksheet)
    Next wksheet
End Sub

Sub FormatSheetEvenColumns(wksheet As Excel.Worksheet)
    Dim i As Integer, iEndColumn As Integer
    Dim IColorIndexRow As Integer, IColorIndexColumn As Integer
    Dim bWrapText As Boolean
    Dim bLandscape As Boolean
    Dim bColorFirst As Boolean
    If InStr(1, wksheet.Name, gbInfoSheetName) > 0 Then Exit Sub
    bWrapText = True    'False
    bLandscape = True   'False
    '19=Light Yellow,  20=Light Blue, 24=Light Purple, 35=Light Green
    If InStr(1, wksheet.Name, gbMultiCellName) > 0 Then
        If InStr(1, wksheet.Name, gbStatisticName) > 0 Then
            IColorIndexRow = 35
            IColorIndexColumn = 19
        Else
            IColorIndexRow = 35
            IColorIndexColumn = 20
        End If
    ElseIf InStr(1, wksheet.Name, gbSmartBatteryName) > 0 Then
        'bWrapText = True
        If InStr(1, wksheet.Name, gbStatisticName) > 0 Then
            'bLandscape = True
            IColorIndexRow = 24
            IColorIndexColumn = 19
        Else
            IColorIndexRow = 24
            IColorIndexColumn = 20
        End If
    Else
        If InStr(1, wksheet.Name, gbStatisticName) > 0 Then
            'bWrapText = True
            'bLandscape = True
            IColorIndexRow = 20
            IColorIndexColumn = 19
        Else
            'bWrapText = True
            IColorIndexRow = 19
            IColorIndexColumn = 20
        End If
    End If
    With wksheet
        If bWrapText = True Then .Rows("1:1").WrapText = True
        If bLandscape = True And gbbIsPrinterExist = True Then
            .PageSetup.Orientation = xlLandscape
        End If
        iEndColumn = .Range("A1").End(xlToRight).Column
        If iEndColumn >= giMaxColumnsNum Then Exit Sub
        .Columns("A:A").HorizontalAlignment = xlCenter
        .Rows("1:1").HorizontalAlignment = xlCenter
        .Rows("1:1").RowHeight = 24.5
        If iEndColumn > 1 Then
        bColorFirst = False
            For i = 2 To iEndColumn
                If .Columns(i).ColumnWidth > 0.13 Then
                    If bColorFirst Then
                        bColorFirst = False
                       With .Columns(i).Interior
                            .ColorIndex = 0
                            .Pattern = xlSolid
                            .PatternColorIndex = xlAutomatic
                        End With
                    Else
                        With .Columns(i).Interior
                            .ColorIndex = IColorIndexColumn
                            .Pattern = xlSolid
                            .PatternColorIndex = xlAutomatic
                        End With
                        bColorFirst = True
                    End If
                End If
            Next i
        End If
        With .Rows("1:1").Interior
            .ColorIndex = IColorIndexRow
            .Pattern = xlSolid
            .PatternColorIndex = xlAutomatic
        End With
    End With
End Sub

Function FormatSheet1stRow(wksheet As Excel.Worksheet)
    With wksheet
        .Columns("A:A").HorizontalAlignment = xlCenter
        .Rows("1:1").Interior.ColorIndex = 34
        .Rows("1:1").Borders(xlInsideVertical).LineStyle = xlContinuous
        .Rows("1:1").Borders(xlInsideVertical).ColorIndex = 15
        .Rows("1:1").HorizontalAlignment = xlCenter
        '.Rows("1:1").VerticalAlignment = xlTop
        .Rows("1:1").WrapText = True
        .Rows("1:1").RowHeight = Rows("2:2").RowHeight
    End With
End Function

Function FormatSheetColumnsNumber(wksheet As Excel.Worksheet)
    Dim iCols As Integer
    With wksheet
        iCols = gfGetColumnNumber(wksheet, gbTemperatureName)
        If iCols > 0 Then
            .Columns(iCols).NumberFormat = "0.00"
            '.Columns(iCols).ColumnWidth = 10.78
        End If
        iCols = gfGetColumnNumber(wksheet, "RemainingCapacityAlarm(s)")
        If iCols > 0 Then
            .Columns(iCols).NumberFormat = "0.0000"
            '.Columns(iCols).ColumnWidth = 11#
        End If
        iCols = gfGetColumnNumber(wksheet, "RemainingCapacity(mWH or 10mWH)")
        If iCols > 0 Then
            .Columns(iCols).NumberFormat = "0.0000"
        End If
        iCols = gfGetColumnNumber(wksheet, "RelativeStateOfCharge(%)")
        If iCols > 0 Then
            .Columns(iCols).ColumnWidth = 11.56
        End If
        iCols = gfGetColumnNumber(wksheet, "AbsoluteStateOfCharge(%)")
        If iCols > 0 Then
            .Columns(iCols).ColumnWidth = 11.56
        End If
    End With
End Function

Function CreateSheetSomeColumns(wksheet As Excel.Worksheet, iPageCount As Integer)
    Dim iCols As Integer
    With wksheet
        'Create New Data
        iCols = gfGetColumnNumber(wksheet, gbTestTimeName)
        If iCols > 0 Then
            If gbbCycleTime And InStr(1, wksheet.Name, gbStatisticName) <= 0 Then
                Call CalculateCycleTimeDay(wksheet, iCols, iPageCount)
            End If
            If gbbTestTime2 Then
                Call CalculateTestTimeDay(wksheet, iCols)
            End If
        End If
            
        iCols = gfGetColumnNumber(wksheet, gbDateTimeName)
        If iCols > 0 Then
            'For Customs
            If gbbDayOfYear Then
                Call CalculateDayOfYear(wksheet, iCols)
            End If
            .Columns(iCols).NumberFormat = "mm/dd/yy hh:mm:ss"
            .Columns(iCols).ColumnWidth = 18
        End If
    End With
End Function

Function CalculateTestTimeDay(wksheet As Excel.Worksheet, iCols As Integer)
    Dim lLoop As Long, lLoopEnd As Long
    Dim fTimeFactor As Single, iCols2 As Integer
    Dim sTimeStart As Single, sTimeEnd As Single
    Dim sBuffer1() As Single
    If gfGetColumnNumber(wksheet, gbTestTime2Name) <= 0 Then
        With wksheet
            iCols2 = .Range("A1").End(xlToRight).Column + 1
            If iCols2 >= giMaxColumnsNum Then Exit Function
            .Columns(iCols2).NumberFormat = "[h]:mm:ss.000"
            .Columns(iCols2).ColumnWidth = 12
            fTimeFactor = 1# / (3600# * 24#)
            lLoopEnd = .cells(1, iCols).End(xlDown).Row
            Application.StatusBar = "Calculate Test_Time2 : " & _
                 wksheet.Name & " (" & lLoopEnd & " rows)"
            ReDim sBuffer1(lLoopEnd, 1)
            sTimeStart = Timer
                '.Cells(lLoop, iCols2) = .Cells(lLoop, iCols) * fTimeFactor
            For lLoop = 2 To lLoopEnd
                sBuffer1(lLoop, 1) = .cells(lLoop, iCols) * fTimeFactor
            Next lLoop
            .Range(cells(1, iCols2), cells(lLoopEnd, iCols2)) = sBuffer1
            .cells(1, iCols2) = gbTestTime2Name
            sTimeEnd = Timer
            'MsgBox "CalculateTestTimeDay: " & Format((sTimeEnd - sTimeStart), "0.00")
        End With
        DoEvents
    End If
End Function

Function CalculateCycleTimeDay(wksheet As Excel.Worksheet, iCols As Integer, iPageCount As Integer)
    Dim lLoop As Long, lLoopEnd As Long
    Dim fTimeFactor As Single, iCols2 As Integer
    Dim fTimeFactor0Base As Single
    Dim iColsStepTime As Integer, iColsCycleIndex As Integer
    Dim iNowCycleIndex As Integer
    Dim sTemp1 As Single
    Dim sTimeStart As Single, sTimeEnd As Single
    Dim sBuffer1() As Single
    'iCols is Test_Time column
    If gfGetColumnNumber(wksheet, gbCycleTimeName) <= 0 Then
        With wksheet
            iColsStepTime = gfGetColumnNumber(wksheet, gbStepTimeName)
            iColsCycleIndex = gfGetColumnNumber(wksheet, gbCycleIndexName)
            If iColsCycleIndex > 0 Then
                iCols2 = .Range("A1").End(xlToRight).Column + 1
                If iCols2 >= giMaxColumnsNum Then Exit Function
                .Columns(iCols2).NumberFormat = "[h]:mm:ss.000"
                .Columns(iCols2).ColumnWidth = 12
                fTimeFactor = 1# / (3600# * 24#)
                lLoopEnd = .cells(1, iCols).End(xlDown).Row
                Application.StatusBar = "Calculate Cycle_Time : " & _
                    wksheet.Name & " (" & lLoopEnd & " rows)"
                ReDim sBuffer1(lLoopEnd, 1)
                If iPageCount > 1 Then
                    iNowCycleIndex = .cells(2, iColsCycleIndex)
                    fTimeFactor0Base = gfLastCycleTimeDayValue
                Else
                    iNowCycleIndex = -1
                End If
                sTimeStart = Timer
                    '.Cells(lLoop, iCols2) = .Cells(lLoop, iCols) - fTimeFactor0Base
                For lLoop = 2 To lLoopEnd
                    If iNowCycleIndex = .cells(lLoop, iColsCycleIndex) Then
                        sTemp1 = .cells(lLoop, iCols) - fTimeFactor0Base
                    Else
                        If iColsStepTime > 0 Then
                            fTimeFactor0Base = .cells(lLoop, iCols) - .cells(lLoop, iColsStepTime)
                        Else
                            fTimeFactor0Base = .cells(lLoop, iCols)
                        End If
                        sTemp1 = .cells(lLoop, iCols) - fTimeFactor0Base
                        If sTemp1 < 0.00001 Then sTemp1 = 0#
                        iNowCycleIndex = .cells(lLoop, iColsCycleIndex)
                    End If
                    sBuffer1(lLoop, 1) = sTemp1 * fTimeFactor
                Next lLoop
                gfLastCycleTimeDayValue = fTimeFactor0Base
                .Range(cells(1, iCols2), cells(lLoopEnd, iCols2)) = sBuffer1
                .cells(1, iCols2) = gbCycleTimeName
                sTimeEnd = Timer
                'MsgBox "CalculateCycleTimeDay: " & Format((sTimeEnd - sTimeStart), "0.00")
            End If
            DoEvents
        End With
    End If
End Function

Function CalculateDayOfYear(wksheet As Excel.Worksheet, iCols As Integer)
    Dim lLoop As Long, lLoopEnd As Long
    Dim fTimeFactor As Single, iCols2 As Integer
    Dim fTemp As Date, iday As Integer
    Dim iTempDay As Integer, iTempHour As Integer
    Dim fTime00 As Single
    Dim sTimeStart As Single, sTimeEnd As Single
    Dim sBuffer1() As Double
    fTime00 = 0.00000011574   '0.01s
    If gfGetColumnNumber(wksheet, gbDayOfYearName) <= 0 Then
        With wksheet
            iCols2 = .Range("A1").End(xlToRight).Column + 1
            If iCols2 >= giMaxColumnsNum Then Exit Function
            .Columns(iCols2).NumberFormat = "[h]:mm:ss.00"
            .Columns(iCols2).ColumnWidth = 12
            lLoopEnd = .cells(1, iCols).End(xlDown).Row
            Application.StatusBar = "Calculate DayOfYear : " & _
                 wksheet.Name & " (" & lLoopEnd & " rows)"
            ReDim sBuffer1(lLoopEnd, 1)
            sTimeStart = Timer
            For lLoop = 2 To lLoopEnd
                fTemp = .cells(lLoop, iCols)
                iday = DatePart("y", fTemp)
                iTempDay = Int(iday / 24)
                iTempHour = iday - iTempDay * 24
                sBuffer1(lLoop, 1) = CDbl(iTempDay + TimeSerial(iTempHour, Hour(fTemp), Minute(fTemp)) + fTime00 * Second(fTemp))
            Next lLoop
                '.Cells(lLoop, iCols2) = Format(.Cells(lLoop, iCols), " y:hh:mm:ss")    'Can not plot as axis
            .Range(cells(1, iCols2), cells(lLoopEnd, iCols2)) = sBuffer1
            .cells(1, iCols2) = gbDayOfYearName
            sTimeEnd = Timer
            'MsgBox "CalculateDayOfYear: " & Format((sTimeEnd - sTimeStart), "0.00")
            DoEvents
        End With
    End If
End Function

Function FormatHighlightPulseRow(wksheet As Excel.Worksheet)
    Dim iCols As Integer, lLoop As Long
    Dim jstart As Long, jEnd As Long
    Dim maxRow As Long, MaxColumn As Integer
    Dim rg As Range
    'If Not gbbHighlightPulseRow Then Exit Function
    'If InStr(1, wkSheet.Name, gbChannelName) <= 0 Then Exit Function
    iCols = gfGetColumnNumber(wksheet, gbIsFCDataName)
    If iCols <= 0 Then Exit Function
    Application.StatusBar = "Highlight Pulse Data : " & wksheet.Name
    With wksheet
        maxRow = .cells(1, iCols).End(xlDown).Row
        'maxColumn = .Range("A1").End(xlToRight).Column
        MaxColumn = 1
        If maxRow < 2 Then Exit Function
        lLoop = 2
        Do While gfGetRowFromToByOneValueAndRowLimit(wksheet, iCols, _
            lLoop, maxRow, 1, jstart, jEnd)
            gbbHasHighPulseData = True
            Set rg = .Range(.cells(jstart, 1), .cells(jEnd, MaxColumn))
            With rg.Interior
                .ColorIndex = 35
                .Pattern = xlSolid
                .PatternColorIndex = xlAutomatic
            End With
            lLoop = jEnd + 1
            If lLoop > maxRow Then Exit Do
        Loop
    End With
    'Application.StatusBar = "End"
End Function

Function gfGetRowFromToByOneValueAndRowLimit(wksheet As Excel.Worksheet, _
        iColumn As Integer, _
        lRowFrom As Long, lRowTo As Long, iValue As Integer, _
        lOutputRowFrom As Long, lOutputRowTo As Long) As Boolean
    Dim lLoop As Long, ltemp As Long
    gfGetRowFromToByOneValueAndRowLimit = False
    If lRowFrom > lRowTo Then Exit Function
    With wksheet
        For lLoop = lRowFrom To lRowTo
            If .cells(lLoop, iColumn).Value = iValue Then
                lOutputRowFrom = lLoop: lOutputRowTo = lLoop
                gfGetRowFromToByOneValueAndRowLimit = True
                Exit For
            End If
        Next lLoop
        If lLoop > lRowTo Then Exit Function
        ltemp = lLoop
        For lLoop = ltemp To lRowTo
            If .cells(lLoop, iColumn).Value <> iValue Then
                lOutputRowTo = lLoop - 1
                Exit For
            End If
        Next lLoop
    End With
End Function

Function ReadAuxRecordToSheet(SheetName As String, strQuery As String, iStartCol As Integer, _
    AuxiIndexNum As Integer, iDataType As Integer, iLoopRead As Integer) As Boolean
    'iStartCol>1
    Dim rec As Recordset
    Dim SheetNameFull As String
    Dim iPageCount As Integer, iFieldsCount As Integer
    Dim wksheetofAux As Worksheet 'for insert data
    Dim i, j, k As Long, fRate As Single
    ReadAuxRecordToSheet = False
    iPageCount = 0
    On Error GoTo ReadAuxRecordToSheet_Error
    Set rec = gDB.OpenRecordset(strQuery, dbOpenForwardOnly, dbReadOnly)
    On Error Resume Next
    ActiveWorkbook.Sheets.Add after:=Worksheets(Worksheets.Count)
    Worksheets(Worksheets.Count).Name = "Aux"
    Do While Not rec.EOF
        DoEvents
        If gbIsImporting = False Then Exit Function
      
        iPageCount = iPageCount + 1
        If HasSheetOf(SheetName & "_" & iPageCount) Then
            SheetNameFull = SheetName & "_" & iPageCount
        Else
            SheetNameFull = SheetName
        End If
        Application.StatusBar = "Read Auxiliary Data to " & SheetNameFull
        iFieldsCount = rec.Fields.Count              '=2
        With Worksheets("Aux")
            .cells(1, 1).Value = "Data_Point"
            .cells(2, 1).CopyFromRecordset Data:=rec, maxrows:=glMaxRowsNum, maxcolumns:=iFieldsCount
            Sleep 200   'Wait copy finished
            DoEvents
            If .cells(2, 3 + Abs(gAuxRate)) = Empty Then
                .cells(1, 2).Value = Trim(gAuxiDataTypeTitle(iDataType, 0)) & "_" & AuxiIndexNum + 1
                If gAuxRate Then
                    .cells(1, 3).Value = Trim(gAuxiDataTypeTitle(iDataType, 1)) & "_" & AuxiIndexNum + 1
                End If
            Else
                gAuxiDataTypeTitle(iDataType, 0) = .cells(2, 3 + Abs(gAuxRate)).Value & gAuxiDataTypeUnit(iDataType, 0)
                If (iDataType = 4) And (InStr(1, UCase(gAuxiDataTypeTitle(iDataType, 0)), "SCCM") > 0) Then
                    fRate = 1000
                    gAuxiDataTypeTitle(iDataType, 0) = .cells(2, 3 + Abs(gAuxRate)).Value & "(sccm)"
                    Else
                    fRate = 1
                End If
                If gAuxRate Then
                    gAuxiDataTypeTitle(iDataType, 1) = "d" & .cells(2, 3 + Abs(gAuxRate)).Value & "/dt" & gAuxiDataTypeUnit(iDataType, 1)
                End If
            End If
        End With
        With Worksheets(SheetNameFull)
        
            .cells(1, iStartCol).Value = Trim(gAuxiDataTypeTitle(iDataType, 0)) & "_" & AuxiIndexNum + 1
            .cells(1, iStartCol).AddComment gfNormalTitle(iDataType)
            .Columns(iStartCol).ColumnWidth = 11        '14
            If gAuxRate Then
                .cells(1, iStartCol + 1).Value = Trim(gAuxiDataTypeTitle(iDataType, 1)) & "_" & AuxiIndexNum + 1
                .cells(1, iStartCol + 1).AddComment "d" & gfNormalTitle(iDataType) & "/dt"
                .Columns(iStartCol + 1).ColumnWidth = 11    '14
            End If
            
            j = 2
            For i = 2 To .cells(1, 1).End(xlDown).Row
'                If .Cells(i, 1).Value = Worksheets("Aux").Cells(J, 1).Value Then 'Compare Data_Point
                    If Worksheets("Aux").cells(j, 2) <> Empty Then
                        If iDataType = 4 Then   'Flowrate unit process
                            .cells(i, iStartCol) = Worksheets("Aux").cells(j, 2) * fRate
                        Else
                            .cells(i, iStartCol) = Worksheets("Aux").cells(j, 2)
                        End If
                        If gAuxRate Then
                            .cells(i, iStartCol + 1) = Worksheets("Aux").cells(j, 3)
                        End If
                    Else
                        If i > 2 And gDataFilter Then
                            .cells(i, iStartCol) = .cells(i - 1, iStartCol)
                        Else
                            .cells(i, iStartCol) = 0
                        End If
                        If gAuxRate Then
                            .cells(i, iStartCol + 1) = 0
                        End If
                    End If
                    j = j + 1
'                Else
'                    If i > 2 Then
'                        .Cells(i, iStartCol) = .Cells(i - 1, iStartCol)
'                    Else
'                        .Cells(i, iStartCol) = 0
'                    End If
'                    .Cells(i, iStartCol + 1) = 0
'                End If
            Next i
        End With
    Loop
    rec.Close
    Set rec = Nothing
        ReadAuxRecordToSheet = True
    Set wksheetofAux = Nothing
    
        
    If ReadAuxRecordToSheet = False Then
        If gbbLogReadNullCount Then
            Call WriteErrorLogFile("(ReadAuxRToS) Null", SheetName, CSng(iStartCol))
        End If
        ReadAuxRecordToSheet = True
    End If
ReadAuxRecordToSheet_Exit:
    Err.Clear
    Application.DisplayAlerts = False
    ActiveWorkbook.Sheets("Aux").Delete
    Application.DisplayAlerts = True
Exit Function
ReadAuxRecordToSheet_Error:
    If gbbLogTryCount Then
        Call WriteErrorLogFile("(ReadAuxRToS) Try " & iLoopRead, SheetName, CSng(iStartCol))
    End If
    'gbiMsgBoxResponse = MsgBox("Read Database Error. " & SheetName & " (ReadRToS).", vbInformation)
'    GoTo ReadAuxRecordToSheet_Exit
End Function
'New function for ReadAuxRecordToSheet
Function ReadAuxRecordToSheetBak(SheetName As String, strQuery As String, iStartCol As Integer, _
    AuxiIndexNum As Integer, iDataType As Integer, iLoopRead As Integer) As Boolean
    'iStartCol>1
    Dim rec As Recordset
    Dim SheetNameFull As String
    Dim iPageCount As Integer, iFieldsCount As Integer
    Dim wksheetofAux As Worksheet 'for insert data
    Dim lRowCount As Long
    ReadAuxRecordToSheetBak = False
    iPageCount = 1
    On Error GoTo ReadAuxRecordToSheetBak_Error
    Set rec = gDB.OpenRecordset(strQuery, dbOpenForwardOnly, dbReadOnly)
    On Error Resume Next
    If Not rec.EOF Then rec.MoveFirst
    If HasSheetOf(SheetName & "_" & iPageCount) Then
            SheetNameFull = SheetName & "_" & iPageCount
        Else
            SheetNameFull = SheetName
    End If
    If gbfVerSchema >= 1.4 Then gAuxRate = False: MsgBox "No Auxiliary Rate was provided by further Versoin And Rate Enable was Disable", vbOKOnly
    
    If gbfVerSchema >= 1.21 Then
        gAuxiDataTypeTitle(iDataType, 0) = rec.Fields("NickName").Value & gAuxiDataTypeUnit(iDataType, 0)
        If gAuxRate Then
            gAuxiDataTypeTitle(iDataType, 1) = "d" & rec.Fields("NickName").Value & "/dt" & gAuxiDataTypeUnit(iDataType, 1)
        End If
    End If
    
    Do While Not rec.EOF
        If gbIsImporting = False Then Exit Function
        With Worksheets(SheetNameFull)
        For lRowCount = 1 To glMaxRowsNum
        If lRowCount = 1 Then
            .cells(1, iStartCol).Value = Trim(gAuxiDataTypeTitle(iDataType, 0)) & "_" & AuxiIndexNum + 1
            .cells(1, iStartCol + 1).Value = Trim(gAuxiDataTypeTitle(iDataType, 1)) & "_" & AuxiIndexNum + 1
            .Columns(iStartCol).ColumnWidth = 11        '14
            .Columns(iStartCol + 1).ColumnWidth = 11    '14
        End If
            If rec.Fields("Data_Point").Value = lRowCount Then  'Compare Data_Point
                    .cells(lRowCount, iStartCol) = rec.Fields("X").Value
                    .cells(lRowCount, iStartCol + 1) = rec.Fields("dX/dt").Value
                    rec.MoveNext

            Else
                    If lRowCount > 2 Then
                        .cells(lRowCount, iStartCol) = .cells(lRowCount - 1, iStartCol)
                    Else
                        .cells(lRowCount, iStartCol) = 0
                    End If
                    .cells(lRowCount, iStartCol + 1) = 0
             End If
         Next lRowCount
         End With
         iPageCount = iPageCount + 1
    Loop
    rec.Close
    Set rec = Nothing
        ReadAuxRecordToSheetBak = True
    Set wksheetofAux = Nothing
    
        
    If ReadAuxRecordToSheetBak = False Then
        If gbbLogReadNullCount Then
            Call WriteErrorLogFile("(ReadAuxRToS) Null", SheetName, CSng(iStartCol))
        End If
        ReadAuxRecordToSheetBak = True
    End If
ReadAuxRecordToSheetBak_Exit:
    On Error GoTo 0
    Application.DisplayAlerts = False
    ActiveWorkbook.Sheets("Aux").Delete
    Application.DisplayAlerts = True
Exit Function
ReadAuxRecordToSheetBak_Error:
    If gbbLogTryCount Then
        Call WriteErrorLogFile("(ReadAuxRToS) Try " & iLoopRead, SheetName, CSng(iStartCol))
    End If
    'gbiMsgBoxResponse = MsgBox("Read Database Error. " & SheetName & " (ReadRToS).", vbInformation)
    GoTo ReadAuxRecordToSheetBak_Exit
End Function

Function MadeNewSheet(wkbook As Excel.Workbook, wkSheetName As String)
    'Dim wkSheet As Excel.Worksheet
    wkbook.Activate
    wkbook.Worksheets.Add after:=wkbook.Worksheets(Worksheets.Count)
    ActiveSheet.Name = wkSheetName
    ActiveSheet.cells.ColumnWidth = 11#
    If wkSheetName = gbInfoSheetName And gbbPrint Then
        Call gfTestPrinterExist(ActiveSheet)
    End If
    Call gfFormatCellBoard(ActiveSheet)
    If gbZoom = 0 Then gbZoom = 100
    ActiveWindow.Zoom = gbZoom
    DoEvents
End Function

Sub gfTestPrinterExist(wksheet As Excel.Worksheet)
    gbbIsPrinterExist = False
    On Error GoTo LabelNoPrinter
    wksheet.PageSetup.PrintTitleRows = "$1:$1"
    gbbIsPrinterExist = True
LabelNoPrinter:
    On Error GoTo 0
End Sub

Sub gfFormatCellBoard(wksheet As Excel.Worksheet)
    If gbbIsPrinterExist = True Then
        With wksheet.PageSetup
            .PrintTitleRows = "$1:$1"
            .PrintHeadings = True
            '.Order = xlOverThenDown
            .BlackAndWhite = True
        End With
    End If
    With wksheet.cells.Borders
'        .Borders(xlDiagonalDown).LineStyle = xlNone
'        .Borders(xlDiagonalUp).LineStyle = xlNone
'        .LineStyle = xlContinuous
'        .Weight = xlThin
        .ColorIndex = 15
    End With
End Sub

Function gfHasWorkbookOf(WorkbookName As String, wkbookOut As Excel.Workbook) As Boolean
    Dim ws As Excel.Workbook
    gfHasWorkbookOf = False
    For Each ws In Application.Workbooks
        If UCase$(ws.Name) = UCase$(WorkbookName) Then
            gfHasWorkbookOf = True
            Set wkbookOut = ws
            Exit For
        End If
    Next ws
End Function

Function gfHasChartOf(wkbook As Excel.Workbook, ChartName As String) As Boolean
    Dim ws As Excel.Chart
    gfHasChartOf = False
On Error GoTo HasChart_Error
    Set ws = wkbook.Charts(ChartName)
    gfHasChartOf = True
HasChart_Error:
    On Error GoTo 0
End Function

Function HasSheetOf(SheetName As String) As Boolean
    Dim ws As Excel.Worksheet
    HasSheetOf = False
On Error GoTo HasSheet_Error
    Set ws = ActiveWorkbook.Worksheets(SheetName)
    HasSheetOf = True
HasSheet_Error:
    On Error GoTo 0
End Function

Function iLoopPos(wksheet As Excel.Worksheet, AfterRow As Long, StartColumn As Integer, iLoopNo As Long) As Long
    Dim tmp As Range, rgLoop As Range
    iLoopPos = -1
On Error GoTo iLoopPos_Err
    With wksheet
        Set rgLoop = .Range(.cells(AfterRow, StartColumn), .cells(AfterRow, StartColumn).End(xlDown))
        Set tmp = rgLoop.Find(What:=iLoopNo, LookIn:=xlValue, Lookat:=xlWhole, _
                MatchCase:=False)
        If Not tmp Is Nothing Then
            iLoopPos = Val(Right$(tmp.Address, Len(tmp.Address) - 3))
        End If
    End With
iLoopPos_Err:
    On Error GoTo 0
End Function

''Application technique
Function CalculateLogItem(strChannelName As String, ColumnName As String)
    Dim wksheet As Excel.Worksheet
    Dim wkSheetName As String
    Dim iMaxColumn As Integer, iColNum As Integer
    Dim lMaxRow As Long, lLoop As Long

    wkSheetName = gbChannelName & strChannelName   '& "_1"
    If Not HasSheetOf(wkSheetName) Then Exit Function

    Set wksheet = ActiveWorkbook.Sheets(wkSheetName)
    iColNum = gfGetColumnNumber(wksheet, ColumnName)
    '--Add new column
    With wksheet
        iMaxColumn = .Range("A1").End(xlToRight).Column + 1
        If iMaxColumn >= giMaxColumnsNum Then Exit Function
        lMaxRow = .Range("A1").End(xlDown).Row
        
        If ColumnName = gbCurrentName Then
            .cells(1, iMaxColumn).Value = "Log(I)"
        ElseIf ColumnName = gbVoltageName Then
            .cells(1, iMaxColumn).Value = "Log(E)"
        Else
            .cells(1, iMaxColumn).Value = "Log(" & ColumnName & ")"
        End If
        
        For lLoop = 2 To lMaxRow
                .cells(lLoop, iMaxColumn).Value = Log(Abs(.cells(lLoop, iColNum).Value))
        Next lLoop
    End With
End Function



Public Sub FilterSameCycle(swksheet As String)
Dim iCycle1, iCycle2 As Long
Dim index As Long
index = 2
Worksheets(swksheet).Activate
With ActiveSheet

Do
iCycle1 = .cells(index, 1)
iCycle2 = .cells(index + 1, 1)
    If iCycle1 = iCycle2 Then
    .Rows(index).Delete
    Else
    index = index + 1
    End If
Loop While iCycle2 <> Empty
End With
End Sub

Public Function CLongToTime(cTime As Long) As String
Dim ihour, imin, isec As Integer
    ihour = Int((cTime / 3600))
    imin = Int((cTime - ihour * 3600#) / 60)
    isec = Int((cTime - ihour * 3600# - imin * 60))
    CLongToTime = Right$(ihour, 2) & ":" & Right$(imin, 2) & ":" & Right$(isec, 2)
'    Debug.Print CLongToTime
End Function

Public Function FindRightNameColumn(ColumnName As String, wksheet As Worksheet) As Integer
Dim i As Integer
Dim iMaxValidColumn As Integer
With wksheet
    iMaxValidColumn = .cells(1, 1).End(xlToRight).Column
    For i = 1 To iMaxValidColumn
        If .cells(1, i).Value = ColumnName Then
            FindRightNameColumn = i
            Exit Function
        End If
    Next i
End With
FindRightNameColumn = 0
End Function
Public Function gfPowerDensity() As Boolean
Dim iRow, iColumnD, iColumnC, iColumnE As Integer, Area As String
Dim iMaxValidRow
Dim wksheet As Worksheet
gfPowerDensity = False

Do While gArea <= 0
    gArea = Val(InputBox("Unit(cm^2) (Not Zero or negative, Only one time set,Please exit application if you want to change!): ", "Fuel Cell Surface for All Channels"))
Loop
On Error GoTo Err_Exit
For Each wksheet In ActiveWorkbook.Worksheets
    If Left(wksheet.Name, 7) = "Channel" Then
        With wksheet
            .Activate
            iColumnC = FindRightNameColumn(gbCurrentName, wksheet)
            If iColumnC = 0 Then GoTo Err_Exit
            iColumnD = FindRightNameColumn(gbVoltageName, wksheet)
            If iColumnD = 0 Then GoTo Err_Exit
            iMaxValidRow = .cells(1, 1).End(xlDown).Row
            iColumnE = FindRightNameColumn("Power Density(mW/cm^2)", wksheet)
            If iColumnE <> 0 Then GoTo Skip_InsertColumn
            iColumnE = .cells(1, 1).End(xlToRight).Column + 1
            .Columns(iColumnE).Insert Shift:=xlShiftToRight
Skip_InsertColumn:
            .cells(1, iColumnE).Value = "Power Density(mW/cm^2)"
            For iRow = 2 To iMaxValidRow
                 .cells(iRow, iColumnE).Value = 1000# * .cells(iRow, iColumnD) * .cells(iRow, iColumnC) / gArea
            Next iRow
        End With
    End If
Next wksheet
gfPowerDensity = True
Exit Function
Err_Exit:
    MsgBox Err.Description
End Function
Public Function gfCurrentDensity() As Boolean
Dim iRow, iColumnC, iColumnE As Integer, Area As Single
Dim iMaxValidRow
Dim wksheet As Worksheet
gfCurrentDensity = False
Do While gArea <= 0
    gArea = Val(InputBox("Unit(cm^2) (Not Zero or negative, Only one time set,Please exit application if you want to change!): ", "Fuel Cell Surface for All Channels"))
Loop
On Error GoTo Err_Exit
For Each wksheet In ActiveWorkbook.Worksheets
    If Left(wksheet.Name, 7) = "Channel" Then
        With wksheet
            .Activate
            iColumnC = FindRightNameColumn(gbCurrentName, wksheet)
            If iColumnC = 0 Then GoTo Err_Exit
            iMaxValidRow = .cells(1, 1).End(xlDown).Row
            iColumnE = FindRightNameColumn("Current Density(mA/cm^2)", wksheet)
            If iColumnE <> 0 Then GoTo Skip_InsertColumn
            iColumnE = .cells(1, 1).End(xlToRight).Column + 1
            .Columns(iColumnE).Insert Shift:=xlShiftToRight
Skip_InsertColumn:
            .cells(1, iColumnE).Value = "Current Density(mA/cm^2)"
            .cells(1, iColumnE).AddComment "Current Density(mA/cm^2)"
            For iRow = 2 To iMaxValidRow
                .cells(iRow, iColumnE) = 1000# * .cells(iRow, iColumnC) / gArea
            Next iRow
        End With
    End If
Next wksheet
gfCurrentDensity = True
Exit Function
Err_Exit:
    MsgBox Err.Description
End Function
Public Function gfReverseI() As Boolean
Dim iRow, iColumnC
Dim iMaxValidRow
Dim wksheet As Worksheet
gfReverseI = False
On Error GoTo Err_Exit
For Each wksheet In ActiveWorkbook.Worksheets
    If Left(wksheet.Name, 7) = "Channel" Or Left(wksheet.Name, 9) = "Statistics" Then
        With wksheet
            .Activate
            iColumnC = FindRightNameColumn(gbCurrentName, wksheet)
            If iColumnC = 0 Then GoTo Err_Exit
            iMaxValidRow = .cells(1, 1).End(xlDown).Row
            For iRow = 2 To iMaxValidRow
                .cells(iRow, iColumnC).Value = .cells(iRow, iColumnC).Value * (-1)
            Next iRow
        End With
    End If
Next wksheet
gfReverseI = True
Exit Function
Err_Exit:
    MsgBox Err.Description
End Function
Public Function gfReverseV() As Boolean
Dim iRow, iColumnC
Dim iMaxValidRow
Dim wksheet As Worksheet
gfReverseV = False
On Error GoTo Err_Exit
For Each wksheet In ActiveWorkbook.Worksheets
    If Left(wksheet.Name, 7) = "Channel" Or Left(wksheet.Name, 9) = "Statistics" Then
        With wksheet
            .Activate
            iColumnC = FindRightNameColumn(gbVoltageName, wksheet)
            If iColumnC = 0 Then GoTo Err_Exit
            iMaxValidRow = .cells(1, 1).End(xlDown).Row
            For iRow = 2 To iMaxValidRow
                .cells(iRow, iColumnC).Value = .cells(iRow, iColumnC).Value * (-1)
            Next iRow
        End With
    End If
Next wksheet
gfReverseV = True
Exit Function
Err_Exit:
    MsgBox Err.Description
End Function

Public Function gfCoulombicEfficiency() As Boolean
Dim iRow, iColumnD, iColumnC, iColumnE As Integer
Dim iMaxValidRow
Dim wksheet As Worksheet
gfCoulombicEfficiency = False
On Error GoTo Err_Exit
For Each wksheet In ActiveWorkbook.Worksheets
    If Left(wksheet.Name, 10) = "Statistics" Then
        With wksheet
            .Activate
            iColumnC = FindRightNameColumn("Charge_Capacity(Ah)", wksheet)
            If iColumnC = 0 Then GoTo Err_Exit
            iColumnD = FindRightNameColumn("Discharge_Capacity(Ah)", wksheet)
            If iColumnD = 0 Then GoTo Err_Exit
            iMaxValidRow = .cells(1, 1).End(xlDown).Row
            iColumnE = FindRightNameColumn("Coulombic_Efficiency", wksheet)
            If iColumnE <> 0 Then GoTo Skip_InsertColumn
            iColumnE = .cells(1, 1).End(xlToRight).Column + 1
            .Columns(iColumnE).Insert Shift:=xlShiftToRight
Skip_InsertColumn:
            .cells(1, iColumnE).Value = "Coulombic_Efficiency"
            .cells(1, iColumnE).AddComment "Coulombic Efficiency" 'Add by 3.20.22
            For iRow = 2 To iMaxValidRow
                With .cells(iRow, iColumnE)
                    .Formula = "=RC" & Trim(Str(iColumnD)) & "/RC" & Trim(Str(iColumnC))
                End With
            Next iRow
            .Columns(iColumnE).Select
            With Selection.Interior
                .ColorIndex = 22
                .Pattern = xlSolid
                .PatternColorIndex = xlAutomatic
            End With
        End With
    End If
Next wksheet
gfCoulombicEfficiency = True
Exit Function
Err_Exit:
    MsgBox Err.Description
    MsgBox " No Arbin Data sheet was select or Data wrong, please import first and try again!"
End Function

Public Function gfGroupCalculate() As Boolean
Dim iColumn As Integer, vColumn As Integer, strPage As String
Dim ChannelSheets(256, 10) As String, SheetName As String
Dim lenOfName As Integer, iMaxPage As Integer, iMaxSheet As Integer
Dim wksheet As Worksheet
Dim strGroupSheetName As String, strFormula As String
Dim iPageCount As Integer, iSheetCount As Integer
Dim iMaxValidRow, iCount As Integer
gfGroupCalculate = False
strGroupSheetName = "GroupChannel"
strPage = "": iMaxPage = 0: iMaxSheet = 0
strFormula = "": iCount = 0
iColumn = 0: vColumn = 0
On Error GoTo Err_Exit
For Each wksheet In ActiveWorkbook.Worksheets
    If Left(wksheet.Name, 7) = gbChannelName Then
           iSheetCount = Val(Mid(wksheet.Name, 11, 3))
           If iSheetCount > iMaxSheet Then iMaxSheet = iSheetCount
           lenOfName = Len(wksheet.Name)
           If lenOfName > 14 Then
                strPage = Mid(wksheet.Name, 15, lenOfName - 14)
                iPageCount = Val(strPage)
                If iPageCount > iMaxPage Then iMaxPage = iPageCount
           Else
                iPageCount = 1: iMaxPage = 1
           End If
           If iColumn = 0 Then
                iColumn = FindRightNameColumn("Current(A)", wksheet): iMaxValidRow = wksheet.cells(1, 1).End(xlDown).Row
                vColumn = FindRightNameColumn("Voltage(V)", wksheet)
           End If
           ChannelSheets(iSheetCount, iPageCount) = wksheet.Name
    End If
Next wksheet
For iPageCount = 1 To iMaxPage
    If iMaxPage = 1 Then
        strPage = ""
        Else
        strPage = Str(iPageCount)
    End If
    If Not HasSheetOf(strGroupSheetName & strPage) Then
        Call MadeNewSheet(ActiveWorkbook, strGroupSheetName & strPage)
    End If
    strFormula = "="
    For iSheetCount = 1 To iMaxSheet
        If ChannelSheets(iSheetCount, iPageCount) <> "" Then
             strFormula = strFormula & "+'" & ChannelSheets(iSheetCount, iPageCount) & "'!R[0]C[" & Trim(Str(iColumn - 1)) & "]"
             iCount = iCount + 1
        End If
    Next iSheetCount
    With ActiveSheet
    .Range("A1").Select
    ActiveCell.FormulaR1C1 = strFormula
    Selection.AutoFill Destination:=.Range("A1:A" & Trim(Str(iMaxValidRow))), Type:=xlFillDefault
    .cells(1, 1).Value = "Group Current(A)"
    .cells(1, 1).AddComment "Group Current(A)"
    .Range("B1").Select
    ActiveCell.FormulaR1C1 = Left(strFormula, 26)
    Selection.AutoFill Destination:=.Range("B1:B" & Trim(Str(iMaxValidRow))), Type:=xlFillDefault
    .cells(1, 2).Value = "Voltage(V)"
    .cells(1, 2).AddComment "Voltage(V)"

    End With
Next iPageCount

gfGroupCalculate = True
Exit Function
Err_Exit:
    MsgBox Err.Description
    MsgBox " No Arbin Data sheet was select or Data wrong, please import first and try again!"
End Function
Public Function gfSmartBatteryStat() As Boolean
Dim iColumnCC As Integer, iColumnCI As Integer, iColumnRSOC As Integer
Dim ssColumn As Integer, sbColumn As Integer, iPage As Integer
Dim iColumnFCC As Integer, iColumnT As Integer, iColumnTT As Integer
Dim sbSheetName As String, CycleCount As Long, CycleIndex As Long
Dim wksheet As Worksheet, sbwksheet As Worksheet
Dim iRows As Long, sbRows As Long, ssRows As Long
Dim ssMaxValidRow As Long, sbMaxValidRow As Long
Dim MaxRSOC, MaxT, FirstFCC, TestTime, CC
Dim SMrec As Recordset, Qry As String, Qry1 As String
Dim iChannel As Integer, iCount As Long, jCount As Long
gfSmartBatteryStat = False
iColumnCI = 0: iPage = 0
iColumnCC = 0: iColumnRSOC = 0
iColumnFCC = 0: iColumnT = 0
On Error GoTo Err_Exit
For Each wksheet In ActiveWorkbook.Worksheets
    If Left(wksheet.Name, 9) = gbStatisticName Then
    With wksheet
            .Activate
            iChannel = Val(Mid(wksheet.Name, 14, 3))
            ssColumn = FindRightNameColumn("Cycle_Index", wksheet)
            If ssColumn = 0 Then GoTo Err_Exit
            ssMaxValidRow = .cells(1, 1).End(xlDown).Row
            sbRows = 2: ssRows = 2
            sbColumn = .cells(1, 1).End(xlToRight).Column + 1
            .Columns(sbColumn).Insert Shift:=xlShiftToRight
            .cells(1, sbColumn).Value = "SB_CycleCount"
            .cells(1, sbColumn + 1).Value = "SB_Max_ROSC"
            .cells(1, sbColumn + 2).Value = "SB_Cycle_FCC"
            .cells(1, sbColumn + 3).Value = "SB_Max_T(C)"
            .cells(1, sbColumn).AddComment
            .cells(1, sbColumn).Comment.Text = "SB_CycleCount"
            .cells(1, sbColumn + 1).AddComment
            .cells(1, sbColumn + 1).Comment.Text = "SB_Max_ROSC"
            .cells(1, sbColumn + 2).AddComment
            .cells(1, sbColumn + 2).Comment.Text = "SB_Cycle_FCC"
            .cells(1, sbColumn + 3).AddComment
            .cells(1, sbColumn + 3).Comment.Text = "SB_Max_T(C)"
            
            Qry1 = "SELECT sb.Temperature, nn.Test_Time,sb.CycleCount,sb.RelativeStateOfCharge,sb.FullChargeCapacity FROM (Global_Table as gt INNER JOIN Channel_Normal_Table as nn On gt.Test_ID = nn.Test_ID) INNER JOIN Smart_Battery_Data_Table as sb ON "
            Qry1 = Qry1 & "(gt.Test_ID =sb.Test_ID) AND (nn.Data_Point=sb.Data_Point) AND (nn.Test_ID=sb.Test_ID) "
            
            For iCount = 2 To ssMaxValidRow
                CycleIndex = .cells(iCount, ssColumn)
                Qry = Qry1 & "WHERE ((gt.Channel_Index = " & iChannel & ") AND (nn.Cycle_Index=" & CycleIndex & "));"
                Set SMrec = gDB.OpenRecordset(Qry, dbOpenForwardOnly, dbReadOnly)
                MaxRSOC = 0: MaxT = 0
                Do While Not SMrec.EOF
'                        CC = SMrec.Fields("CycleCount").Value
'                        FirstFCC = SMrec.Fields("FullChargeCapacity").Value
                        If SMrec.Fields("Test_Time").Value = .cells(iCount, 2).Value Then
                            CC = SMrec.Fields("CycleCount").Value
                            FirstFCC = SMrec.Fields("FullChargeCapacity").Value
                        End If
                        If SMrec.Fields("RelativeStateOfCharge").Value > MaxRSOC Then
                            MaxRSOC = SMrec.Fields("RelativeStateOfCharge").Value
                        End If
                        If SMrec.Fields("Temperature").Value > MaxT Then
                            MaxT = SMrec.Fields("Temperature").Value
                        End If
                        SMrec.MoveNext
                Loop
                    .cells(iCount, sbColumn).Value = CC
                    .cells(iCount, sbColumn + 1).Value = MaxRSOC
                    .cells(iCount, sbColumn + 2).Value = FirstFCC
                    .cells(iCount, sbColumn + 3).Value = MaxT
'                    SMrec.Close
'                    Set SMrec = Nothing
                
            Next iCount
            SMrec.Close
            Set SMrec = Nothing
    End With
    End If
    DoEvents
    Sleep 100
Next wksheet
Exit_Normal:
gfSmartBatteryStat = True
Exit Function
Err_Exit:
    MsgBox Err.Description
    MsgBox " No Arbin Data sheet was select or Data wrong, please import first and try again!"
End Function

Public Function gfMinuteXA() As Boolean
Dim iRow, iColumnC, iColumnE As Integer
Dim iMaxValidRow As Integer
Dim specialA As String
Dim wksheet As Worksheet
gfMinuteXA = False
specialA = InputBox("Enter Special Current Unit(Default as 75A)")
If specialA = "" Or Val(specialA) = 0 Then specialA = 75
On Error GoTo Err_Exit
For Each wksheet In ActiveWorkbook.Worksheets
    If Left(wksheet.Name, 7) = "Channel" Then
        With wksheet
            .Activate
            iColumnC = FindRightNameColumn("Discharge_Capacity(Ah)", wksheet)
            If iColumnC = 0 Then GoTo Err_Exit
            iMaxValidRow = .cells(1, 1).End(xlDown).Row
            iColumnE = FindRightNameColumn("Minute@" & specialA & "A", wksheet)
            If iColumnE <> 0 Then GoTo Skip_InsertColumn
            iColumnE = iColumnC + 1
            .Columns(iColumnE).Insert Shift:=xlShiftToRight
Skip_InsertColumn:
            .cells(1, iColumnE).Value = "Minute@" & specialA & "A"
            .cells(1, iColumnE).AddComment
            .cells(1, iColumnE).Comment.Text = "Minute@" & specialA & "A"
            For iRow = 2 To iMaxValidRow
                .cells(iRow, iColumnE) = .cells(iRow, iColumnC) / specialA * 60#
            Next iRow
        End With
    End If
Next wksheet
gfMinuteXA = True
Exit Function
Err_Exit:
    MsgBox "Couldn't find Arbin Data in worksheet,please reload and try again!" & Err.Description
End Function
Public Function gfWarning() As Boolean
 Dim ssColumn As Integer, sbColumn As Integer
Dim CycleIndex As Long
Dim wksheet As Worksheet
Dim iRows As Long, sbRows As Long, ssRows As Long
Dim ssMaxValidRow As Long, sbMaxValidRow As Long
Dim iChannel As Integer, mTestTimeMax, mTestTimeMin
Dim rec As Recordset, Qry As String

gfWarning = False
On Error GoTo Err_Exit
For Each wksheet In ActiveWorkbook.Worksheets
    If Left(wksheet.Name, 9) = gbStatisticName Then
    With wksheet
            .Activate
            iChannel = Val(Mid(wksheet.Name, 14, 3))
            ssColumn = FindRightNameColumn("Cycle_Index", wksheet)
            If ssColumn = 0 Then GoTo Err_Exit
            sbColumn = .cells(1, 1).End(xlToRight).Column + 1
            .Columns(sbColumn).Insert Shift:=xlShiftToRight
            .cells(1, sbColumn).Value = "Warning_Flag"
            .cells(1, sbColumn).AddComment
            .cells(1, sbColumn).Comment.Text = "Warning Flag"
            ssMaxValidRow = .cells(1, 1).End(xlDown).Row
            For iRows = 2 To ssMaxValidRow
                CycleIndex = .cells(iRows, ssColumn)
                Qry = "Select Max(nn.Test_Time) as MaxTestTime " & _
                    "FROM (Global_Table as gt INNER JOIN Channel_Normal_Table as nn On gt.Test_ID = nn.Test_ID) "
                Qry = Qry & "WHERE ((gt.Channel_Index = " & iChannel & ") AND (nn.Cycle_Index=" & CycleIndex & "));"
                Set rec = gDB.OpenRecordset(Qry, dbOpenForwardOnly, dbReadOnly)
                If Not rec.EOF Then
                    mTestTimeMax = rec.Fields("MaxTestTime").Value
                End If
                Set rec = Nothing
                Qry = "Select Min(nn.Test_Time) as MinTestTime " & _
                    "FROM (Global_Table as gt INNER JOIN Channel_Normal_Table as nn On gt.Test_ID = nn.Test_ID) "
                Qry = Qry & "WHERE ((gt.Channel_Index = " & iChannel & ") AND (nn.Cycle_Index=" & CycleIndex & "));"
                Set rec = gDB.OpenRecordset(Qry, dbOpenForwardOnly, dbReadOnly)
                If Not rec.EOF Then
                    mTestTimeMin = rec.Fields("MinTestTime").Value
                End If
                Set rec = Nothing
                Qry = "Select ev.Event_Type as flag " & _
                    "FROM (Global_Table as gt INNER JOIN Event_Table as ev On gt.Test_ID = ev.Test_ID) "
                Qry = Qry & "WHERE ((gt.Channel_Index = " & iChannel & ") AND (ev.Event_Type=7 And ev.Test_Time> " & mTestTimeMin & ") And (ev.Test_Time< " & mTestTimeMax & "));"
                Set rec = gDB.OpenRecordset(Qry, dbOpenForwardOnly, dbReadOnly)
                .cells(iRows, sbColumn) = Abs(Not rec.EOF)
                Set rec = Nothing
            Next iRows
    End With
    End If
    DoEvents
    Sleep 100
Next wksheet
Exit_Normal:
gfWarning = True
Exit Function
Err_Exit:
    MsgBox Err.Description
    MsgBox " No Arbin Data sheet was select or Data wrong, please import first and try again!"
End Function

Public Function gfCapRate() As Boolean
Dim iRow, iColumnA, iColumnB, iColumnD, iColumnC, iColumnE, iColumnF As Integer, Area As String
Dim iMaxValidRow
Dim wksheet As Worksheet
gfCapRate = False

On Error GoTo Err_Exit
For Each wksheet In ActiveWorkbook.Worksheets
    If Left(wksheet.Name, 7) = "Channel" Then
        With wksheet
            .Activate
            iColumnC = FindRightNameColumn(gbChargeCapacityName, wksheet)
            If iColumnC = 0 Then GoTo Err_Exit
            iColumnD = FindRightNameColumn(gbDischargeCapacityName, wksheet)
            If iColumnD = 0 Then GoTo Err_Exit
            iColumnA = FindRightNameColumn(gbChargeEnergyName, wksheet)
            If iColumnA = 0 Then GoTo Err_Exit
            iColumnB = FindRightNameColumn(gbDischargeEnergyName, wksheet)
            If iColumnB = 0 Then GoTo Err_Exit
            iMaxValidRow = .cells(1, 1).End(xlDown).Row
            iColumnE = FindRightNameColumn("Cap Efficiency", wksheet)
            If iColumnE <> 0 Then GoTo Skip_InsertColumn
            iColumnE = .cells(1, 1).End(xlToRight).Column + 1
            iColumnF = FindRightNameColumn("Energy Efficiency", wksheet)
            If iColumnF <> 0 Then GoTo Skip_InsertColumn
            iColumnF = iColumnE + 1
            .Columns(iColumnE).Insert Shift:=xlShiftToRight
Skip_InsertColumn:
            .cells(1, iColumnE).Value = "Cap Efficiency"
            .cells(1, iColumnE).AddComment "Cap Efficiency"
            .cells(1, iColumnF).Value = "Energy Efficiency"
            .cells(1, iColumnF).AddComment "Energy Efficiency"
            
            For iRow = 2 To iMaxValidRow
                If .cells(iRow, iColumnC) = 0 Then
                     .cells(iRow, iColumnE).Value = 0
                    Else
                     .cells(iRow, iColumnE).Value = .cells(iRow, iColumnD) / .cells(iRow, iColumnC)
                End If
                 If .cells(iRow, iColumnA) = 0 Then
                     .cells(iRow, iColumnF).Value = 0
                    Else
                     .cells(iRow, iColumnF).Value = .cells(iRow, iColumnB) / .cells(iRow, iColumnA)
                End If
           Next iRow
        End With
    End If
Next wksheet
gfCapRate = True
Exit Function
Err_Exit:
    MsgBox Err.Description
End Function

Function fGetDataDir(strFile As String)
fGetDataDir = strFile
Do While InStr(strFile, "\")
    strFile = Mid(strFile, InStr(strFile, "\") + 1, Len(strFile))
Loop
fGetDataDir = Left(fGetDataDir, Len(fGetDataDir) - Len(strFile) - 1)
End Function


Function gTitleCategory(title As String, i As Integer) As Boolean
gTitleCategory = False
If (i <= 8) Then
    If gstrDecimalPlacesNormal(i) = title Then gTitleCategory = True
    Else: If (i = 9 And title = "Aux_Voltage") Or (i = 10 And title = "Temperature") _
   Or (i = 11 And title = "Pressure") Or (i = 12 And title = "PH") _
   Or (i = 13 And title = "Flow Rate") Or (i = 14 And title = "Power") _
   Or (i = 15 And title = "Load") Or (i = 16 And title = "AC Impedence") Then gTitleCategory = True
End If
End Function

Function gfNormalTitle(i As Integer) As String
gfNormalTitle = ""
Select Case i
    Case 0
        gfNormalTitle = "Aux_Voltage"
    Case 1
        gfNormalTitle = "Temperature"
    Case 2
        gfNormalTitle = "Pressure"
    Case 3
        gfNormalTitle = "PH"
    Case 4
        gfNormalTitle = "Flow Rate"
    Case 5
        gfNormalTitle = "Density"
    Case 6
        gfNormalTitle = "Digital In"
    Case 7
        gfNormalTitle = "Digital Out"
    Case 8
        gfNormalTitle = "Relative Humidity"
End Select
End Function
Attribute VB_Name = "ZoomForm"
Attribute VB_Base = "0{02AE0670-7D1F-4E6B-A3D8-3F49AFE45568}{FEEBA761-F913-430C-B957-E65846D6D45E}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Option Explicit
Dim bY2Exist As Boolean

Private Sub btnAutoZoom_Click()
    Application.ScreenUpdating = False
    With ActiveWorkbook.Charts(gbActiveChartName)
        .Axes(xlCategory).MinimumScaleIsAuto = True
        .Axes(xlCategory).MaximumScaleIsAuto = True
        .Axes(xlValue).MinimumScaleIsAuto = True
        .Axes(xlValue).MaximumScaleIsAuto = True
        If bY2Exist Then
            .Axes(xlValue, xlSecondary).MinimumScaleIsAuto = True
            .Axes(xlValue, xlSecondary).MaximumScaleIsAuto = True
        End If
    End With
    Application.ScreenUpdating = True
    Unload Me
End Sub

Private Sub btnCancel_Click()
    Unload Me
End Sub

Private Sub btnOK_Click()
    Application.ScreenUpdating = False
    With ActiveWorkbook.Charts(gbActiveChartName)
        .Axes(xlCategory).MinimumScale = Val(TextBoxXMin.Value)
        .Axes(xlCategory).MaximumScale = Val(TextBoxXMax.Value)
        .Axes(xlValue).MinimumScale = Val(TextBoxYMin.Value)
        .Axes(xlValue).MaximumScale = Val(TextBoxYMax.Value)
        If bY2Exist Then
            .Axes(xlValue, xlSecondary).MinimumScale = Val(TextBoxY2Min.Value)
            .Axes(xlValue, xlSecondary).MaximumScale = Val(TextBoxY2Max.Value)
        End If
    End With
    Application.ScreenUpdating = True
    Me.Hide
'    Unload Me
End Sub

Private Sub SpinButtonXMax_SpinDown()
    TextBoxXMax.Value = Val(TextBoxXMax.Value) - (Val(TextBoxXMax.Value) - Val(TextBoxXMin.Value)) / 2#
End Sub

Private Sub SpinButtonXMax_SpinUp()
    TextBoxXMax.Value = Val(TextBoxXMax.Value) + (Val(TextBoxXMax.Value) - Val(TextBoxXMin.Value))
End Sub

Private Sub SpinButtonXMin_SpinDown()
    TextBoxXMin.Value = Val(TextBoxXMin.Value) - (Val(TextBoxXMax.Value) - Val(TextBoxXMin.Value))
End Sub

Private Sub SpinButtonXMin_SpinUp()
    TextBoxXMin.Value = Val(TextBoxXMin.Value) + (Val(TextBoxXMax.Value) - Val(TextBoxXMin.Value)) / 2#
End Sub

Private Sub SpinButtonY2Max_SpinDown()
    TextBoxY2Max.Value = Val(TextBoxY2Max.Value) - (Val(TextBoxY2Max.Value) - Val(TextBoxY2Min.Value)) / 2#
End Sub

Private Sub SpinButtonY2Max_SpinUp()
    TextBoxY2Max.Value = Val(TextBoxY2Max.Value) + (Val(TextBoxY2Max.Value) - Val(TextBoxY2Min.Value))
End Sub

Private Sub SpinButtonY2Min_SpinDown()
    TextBoxY2Min.Value = Val(TextBoxY2Min.Value) - (Val(TextBoxY2Max.Value) - Val(TextBoxY2Min.Value))
End Sub

Private Sub SpinButtonY2Min_SpinUp()
    TextBoxY2Min.Value = Val(TextBoxY2Min.Value) + (Val(TextBoxY2Max.Value) - Val(TextBoxY2Min.Value)) / 2#
End Sub

Private Sub SpinButtonYMax_SpinDown()
    TextBoxYMax.Value = Val(TextBoxYMax.Value) - (Val(TextBoxYMax.Value) - Val(TextBoxYMin.Value)) / 2#
End Sub

Private Sub SpinButtonYMax_SpinUp()
    TextBoxYMax.Value = Val(TextBoxYMax.Value) + (Val(TextBoxYMax.Value) - Val(TextBoxYMin.Value))
End Sub

Private Sub SpinButtonYMin_SpinDown()
    TextBoxYMin.Value = Val(TextBoxYMin.Value) - (Val(TextBoxYMax.Value) - Val(TextBoxYMin.Value))
End Sub

Private Sub SpinButtonYMin_SpinUp()
    TextBoxYMin.Value = Val(TextBoxYMin.Value) + (Val(TextBoxYMax.Value) - Val(TextBoxYMin.Value)) / 2#
End Sub

Private Sub UserForm_Initialize()
    bY2Exist = False
    'With ActiveChart
    With ActiveWorkbook.Charts(gbActiveChartName)
        TextBoxXMin.Value = .Axes(xlCategory).MinimumScale
        TextBoxXMax.Value = .Axes(xlCategory).MaximumScale
        TextBoxYMin.Value = .Axes(xlValue).MinimumScale
        TextBoxYMax.Value = .Axes(xlValue).MaximumScale
        On Error GoTo ZoomForm_Exit
        TextBoxY2Min.Value = .Axes(xlValue, xlSecondary).MinimumScale
        TextBoxY2Max.Value = .Axes(xlValue, xlSecondary).MaximumScale
        bY2Exist = True
        LabelY2.Visible = True
        TextBoxY2Min.Visible = True
        TextBoxY2Max.Visible = True
        SpinButtonY2Min.Visible = True
        SpinButtonY2Max.Visible = True
    End With
ZoomForm_Exit:
        On Error GoTo 0
End Sub
Attribute VB_Name = "mAPPMain"
''' Module:         mAPPMain
'''
''' Description:    This module contains the startup and shutdown code.
''' Date            Developer           Action
''' -------------------------------------------------------------------------
''' 2/12/97         Sandra Wang
''' 12/12/97        Jijun Wu
''' 5/12/98         James  Qi
''' 10/12/2000      Shell Liu

Option Explicit
Dim bFirstRun As Boolean
Sub CompileNow()    ''' used to force compile
End Sub
Function Version() As String
    Version = gszAPPVERSION
End Function
Sub Auto_Open()
    ''' Comments:    This routine is run every time the application is opened.
    '''                         It should handle the initialization of the application.
    'check if is xla format then not open
    'If ThisWorkbook.FileFormat = xlAddIn Then
    '    If Not IsInstalled Then
    '        MsgBox "Arbin Mits DataPro is not installed."
    '        Exit Sub
    '    End If
    'End If
Dim Item As AddIn
Dim bInstalled As Boolean
    bInstalled = False
    'check for minversion as 8.0
    If Not Left$(Application.Version, 2) >= gszMINBUILD_VERSION Then
        MsgBox "This Mits Data Pro application requires Microsoft Excel version 8.0(97) or higher. " & _
            "Mits Data Pro add-in is not loaded successfully!"
            Beep
        Exit Sub
    End If
'    Call DeleteOpenOption
    If fIsW2KAbove Then
        If IsMitsProRunning Then
            If Not fChangeAccessPriority(BELOW_NORMAL_PRIORITY_CLASS) Then
                MsgBox "Application could not be initilazation this time, try again!"
                Exit Sub
            End If
        End If
        Else
        MsgBox gszAPPTITLE & gszAPPVERSION & " supports Windows 2000 or above only!"
        Exit Sub
    End If
    On Error GoTo Dao36NotInstalled
    If DBEngine.Version < 3.6 Then GoTo Dao36NotInstalled
    Call InitGlobalVars
    On Error GoTo 0
    For Each Item In Application.AddIns
        If UCase(Left((Item.Name), 12)) = UCase("Mits_DataPro") Then
                bInstalled = True
        End If
    Next Item
    If bInstalled = False Then
'        On Error Resume Next
        Application.AddIns.Add(ThisWorkbook.FullName).Installed = True
        Beep
        MsgBox Version & " is installed! Excel needs to restart!"
        Application.Quit
    End If
    On Error Resume Next
    CommandBars("Worksheet Menu Bar").Reset
    gCommandHistory = False
    Call ProcessingCommandBar
    On Error Resume Next
    If Left(ActiveWorkbook.Name, 4) <> "Book" Then
        Unload DataImportForm
        Unload SimplePlotDialog
        Unload AdvancedPlot
        Unload OptionsForm
        Unload ZoomForm
        Unload PlotWizardPage1
        Unload PlotWizardPage2
        Unload PlotWizardPage3
        Unload PPGForm
        Unload AdvancedSelectSeries
    End If
    If gbbOpenImportDataDialog = False Then Exit Sub
    Call MenuImportResultData
    Exit Sub
Dao36NotInstalled:
    MsgBox Err.Number & Err.Description
    Err.Clear
    Application.Quit
End Sub

Sub ProcessingCommandBar()
    Dim cbarwkSheetMenu As CommandBar
    Dim cbarChartMenu As CommandBar
    Dim cbarArbin As CommandBar
    Dim cbarPopArbinPlot As CommandBarPopup
    Dim cbarPopMenuItem As CommandBarPopup
    Dim cbarPopMenuItem2 As CommandBarPopup
    Dim cbarPopMenuItem3 As CommandBarPopup
    Dim cbarbtnNew As CommandBarButton
    Dim cbarbtnMenuItem As CommandBarButton
    Dim bHasWkbar As Boolean, i As Integer
    
    bHasWkbar = False
   'Create a new menu item on built in wksheet menu and adds menu items
    On Error Resume Next
    For Each cbarArbin In CommandBars
        If cbarArbin.Name = ("Worksheet Menu Bar") Then
            bHasWkbar = True
            Exit For
        End If
    Next cbarArbin
    If bHasWkbar = False Then CommandBars("Worksheet menu bar").Reset
    Set cbarwkSheetMenu = CommandBars("worksheet menu bar")
    Set cbarChartMenu = CommandBars("Chart menu bar")
    
    cbarwkSheetMenu.Visible = True
   
    With cbarwkSheetMenu
        .Controls(gMenuNameArbin_Data).Delete
        Set cbarPopMenuItem = .Controls.Add(Type:=msoControlPopup)
        With cbarPopMenuItem
            .Caption = gMenuNameArbin_Data
            .OnAction = "MenuAdjustToolBar"
            If gCustom <> "" Then
                .TooltipText = gszAPPTITLE & gszAPPVERSION & "For " & gCustom
                Else
                .TooltipText = gszAPPTITLE & gszAPPVERSION
            End If
            .BeginGroup = True
        End With
    End With
        CommandBars("Arbin Utility").Visible = True
    Set cbarArbin = CommandBars("Arbin Utility")

    Set cbarPopArbinPlot = cbarArbin.Controls("Arbin Plot")
    cbarArbin.Controls("Arbin Plot").Caption = "Arbin &Plot"
    With cbarPopArbinPlot
       .BeginGroup = True
       .Controls(1).Caption = "&Simple Plot"
       .Controls(1).OnAction = "MenuSimplePlot"
       .Controls(2).Caption = "Plot &Wizard"
       .Controls(2).OnAction = "MenuAdvancedPlot"
       .Controls(3).Caption = "&Zoom..."
       .Controls(3).OnAction = "MenuZoom"
    End With

    With cbarPopMenuItem
        Set cbarbtnMenuItem = .CommandBar.Controls.Add(Type:=msoControlButton)
            cbarbtnMenuItem.Caption = "Import &MITS Results Data..."
            cbarbtnMenuItem.OnAction = "MenuImportResultData"
        Set cbarbtnMenuItem = .CommandBar.Controls.Add(Type:=msoControlButton)
            cbarbtnMenuItem.Caption = "Import ABTS&4.0 Results Data..."
            cbarbtnMenuItem.OnAction = "MenuImportABTS40ResultsData"
        Set cbarbtnMenuItem = .CommandBar.Controls.Add(Type:=msoControlButton)
            cbarbtnMenuItem.Caption = "Import Gamery Results Data..."
            cbarbtnMenuItem.OnAction = "MenuImportGameryResultsData"
        Set cbarbtnMenuItem = .CommandBar.Controls.Add(Type:=msoControlButton)
            cbarbtnMenuItem.Caption = "&Options..."
            cbarbtnMenuItem.OnAction = "MenuOptions"
        Set cbarPopMenuItem2 = .CommandBar.Controls.Add(Type:=msoControlPopup)
            cbarPopMenuItem2.Caption = "Arbin &Plot"
            cbarPopMenuItem2.BeginGroup = True
            With cbarPopMenuItem2
                Set cbarbtnMenuItem = .Controls.Add(Type:=msoControlButton)
                    cbarbtnMenuItem.Caption = "&Simple Plot"
                    cbarbtnMenuItem.OnAction = "MenuSimplePlot"
                Set cbarbtnMenuItem = .Controls.Add(Type:=msoControlButton)
                    cbarbtnMenuItem.Caption = "Plot &Wizard"
                    cbarbtnMenuItem.OnAction = "MenuAdvancedPlot"
                Set cbarbtnMenuItem = .Controls.Add(Type:=msoControlButton)
                    cbarbtnMenuItem.Caption = "&Zoom..."
                    cbarbtnMenuItem.OnAction = "MenuZoom"
            End With
        Set cbarPopMenuItem2 = .CommandBar.Controls.Add(Type:=msoControlPopup)
            cbarPopMenuItem2.Caption = "App&lications"
            With cbarPopMenuItem2
                Set cbarbtnMenuItem = .Controls.Add(Type:=msoControlButton)
                    cbarbtnMenuItem.Caption = "Coulombic Efficiency"
                    cbarbtnMenuItem.OnAction = "MenuCoulombicEfficiency"
                Set cbarbtnMenuItem = .Controls.Add(Type:=msoControlButton)
                    cbarbtnMenuItem.Caption = "Power Density"
                    cbarbtnMenuItem.OnAction = "MenuPowerDensity"
                Set cbarbtnMenuItem = .Controls.Add(Type:=msoControlButton)
                    cbarbtnMenuItem.Caption = "Minute@XA"
                    cbarbtnMenuItem.OnAction = "MenuXAM"
                    cbarbtnMenuItem.TooltipText = "Calculate Capacity with Minute@XA"
                Set cbarbtnMenuItem = .Controls.Add(Type:=msoControlButton)
                    cbarbtnMenuItem.Caption = "ACI_Cell"
                    cbarbtnMenuItem.OnAction = "MenuACICell"
                    cbarbtnMenuItem.DescriptionText = "ACI Cell Sheet process for Toyota"
                    cbarbtnMenuItem.TooltipText = "ACI Cell Sheet process for Toyota"
                    cbarbtnMenuItem.Visible = CBool(gCustom = "TOYOTA")
                    
                Set cbarbtnMenuItem = .Controls.Add(Type:=msoControlButton)
                    cbarbtnMenuItem.Caption = "Sheet Report for Dupont"
                    cbarbtnMenuItem.TooltipText = "This is specially design for Dupont Canada Inc."
                    cbarbtnMenuItem.OnAction = "MenuSheetReportDupont"
                    cbarbtnMenuItem.Visible = CBool(gCustom = "DUPONT")    'it should enable for Dupont
                
                Set cbarPopMenuItem3 = .CommandBar.Controls.Add(Type:=msoControlPopup)
                cbarPopMenuItem3.Caption = "Dell Report"
                cbarPopMenuItem3.Visible = CBool(gCustom = "DELL")
                'cbarPopMenuItem3.OnAction = "MenuSheetReportDell"
                With cbarPopMenuItem3
                    Set cbarbtnMenuItem = .Controls.Add(Type:=msoControlButton)
                        cbarbtnMenuItem.Caption = "Report Configuration"
                        cbarbtnMenuItem.TooltipText = "This is specially design for Dell Inc."
                        cbarbtnMenuItem.OnAction = "MenuConfigReportDell"
                        cbarbtnMenuItem.Visible = CBool(gCustom = "DELL")  'True    'it should enable for Dell
                    Set cbarbtnMenuItem = .Controls.Add(Type:=msoControlButton)
                        cbarbtnMenuItem.Caption = "Daily Report"
                        cbarbtnMenuItem.TooltipText = "This is specially design for Dell Inc."
                        cbarbtnMenuItem.OnAction = "MenuSheetReportDell"
                        cbarbtnMenuItem.Visible = CBool(gCustom = "DELL")   'it should enable for Dell
                    Set cbarbtnMenuItem = .Controls.Add(Type:=msoControlButton)
                        cbarbtnMenuItem.Caption = "Multi-File Import"
                        cbarbtnMenuItem.TooltipText = "This is specially design for Dell Inc."
                        cbarbtnMenuItem.OnAction = "MenuMultiImport"
                        cbarbtnMenuItem.Visible = CBool(gCustom = "DELL")    'it should enable for Dell
                End With
            End With
        Set cbarbtnMenuItem = .CommandBar.Controls.Add(Type:=msoControlButton)
            cbarbtnMenuItem.Caption = "Arbin &ToolBar"
            cbarbtnMenuItem.BeginGroup = True
            cbarbtnMenuItem.OnAction = "MenuHideToolBar"
            cbarbtnMenuItem.State = msoButtonDown
        Set cbarbtnMenuItem = .CommandBar.Controls.Add(Type:=msoControlButton)
            cbarbtnMenuItem.Caption = "Uninstall Mits Data Pro"
            cbarbtnMenuItem.OnAction = "MenuUninstall"
        Set cbarbtnMenuItem = .CommandBar.Controls.Add(Type:=msoControlButton)
            cbarbtnMenuItem.Caption = "Split Active workbook"
            cbarbtnMenuItem.TooltipText = "Split ActivateWorkbook to separate workbooks"
            cbarbtnMenuItem.OnAction = "MenuSplit"
            
        Set cbarbtnMenuItem = .CommandBar.Controls.Add(Type:=msoControlButton)
            cbarbtnMenuItem.Caption = "About Mits Data Pro"
            cbarbtnMenuItem.OnAction = "MenuShowAboutForm"
    End With
   
    With cbarChartMenu
        .Controls(gMenuNameArbin_Data).Delete
        Set cbarPopMenuItem = .Controls.Add(Type:=msoControlPopup)
        With cbarPopMenuItem
            .Caption = gMenuNameArbin_Data
            .OnAction = "MenuAdjustToolBar"
            If gCustom <> "" Then
                .TooltipText = gszAPPTITLE & gszAPPVERSION & "For " & gCustom
                Else
                .TooltipText = gszAPPTITLE & gszAPPVERSION
            End If
            .BeginGroup = True
        End With
    End With
    
    With cbarPopMenuItem
        Set cbarbtnMenuItem = .CommandBar.Controls.Add(Type:=msoControlButton)
            cbarbtnMenuItem.Caption = "Import &MITS Results Data..."
            cbarbtnMenuItem.OnAction = "MenuImportResultData"
        Set cbarbtnMenuItem = .CommandBar.Controls.Add(Type:=msoControlButton)
            cbarbtnMenuItem.Caption = "Import ABTS&4.0 Results Data..."
            cbarbtnMenuItem.OnAction = "MenuImportABTS40ResultsData"
        Set cbarbtnMenuItem = .CommandBar.Controls.Add(Type:=msoControlButton)
            cbarbtnMenuItem.Caption = "Import Gamery Results Data..."
            cbarbtnMenuItem.OnAction = "MenuImportGameryResultsData"
        Set cbarbtnMenuItem = .CommandBar.Controls.Add(Type:=msoControlButton)
            cbarbtnMenuItem.Caption = "&Options..."
            cbarbtnMenuItem.OnAction = "MenuOptions"
        Set cbarPopMenuItem2 = .CommandBar.Controls.Add(Type:=msoControlPopup)
            cbarPopMenuItem2.Caption = "Arbin &Plot"
            cbarPopMenuItem2.BeginGroup = True
            With cbarPopMenuItem2
                Set cbarbtnMenuItem = .Controls.Add(Type:=msoControlButton)
                    cbarbtnMenuItem.Caption = "&Simple Plot"
                    cbarbtnMenuItem.OnAction = "MenuSimplePlot"
                Set cbarbtnMenuItem = .Controls.Add(Type:=msoControlButton)
                    cbarbtnMenuItem.Caption = "Plot &Wizard"
                    cbarbtnMenuItem.OnAction = "MenuAdvancedPlot"
                Set cbarbtnMenuItem = .Controls.Add(Type:=msoControlButton)
                    cbarbtnMenuItem.Caption = "&Zoom..."
                    cbarbtnMenuItem.OnAction = "MenuZoom"
            End With
        Set cbarPopMenuItem2 = .CommandBar.Controls.Add(Type:=msoControlPopup)
            cbarPopMenuItem2.Caption = "App&lications"
            With cbarPopMenuItem2
                Set cbarbtnMenuItem = .Controls.Add(Type:=msoControlButton)
                    cbarbtnMenuItem.Caption = "Coulombic Efficiency"
                    cbarbtnMenuItem.OnAction = "MenuCoulombicEfficiency"
                Set cbarbtnMenuItem = .Controls.Add(Type:=msoControlButton)
                    cbarbtnMenuItem.Caption = "Power Density"
                    cbarbtnMenuItem.OnAction = "MenuPowerDensity"
                Set cbarbtnMenuItem = .Controls.Add(Type:=msoControlButton)
                    cbarbtnMenuItem.Caption = "Minute@XA"
                    cbarbtnMenuItem.OnAction = "MenuXAM"
                    cbarbtnMenuItem.TooltipText = "Calculate Capacity with Minute@XA"
                Set cbarbtnMenuItem = .Controls.Add(Type:=msoControlButton)
                    cbarbtnMenuItem.Caption = "ACI_Cell"
                    cbarbtnMenuItem.OnAction = "MenuACICell"
                    cbarbtnMenuItem.TooltipText = "ACI Cell Sheet process for Toyota"
                    cbarbtnMenuItem.Visible = CBool(gCustom = "TOYOTA")
                    
                Set cbarbtnMenuItem = .Controls.Add(Type:=msoControlButton)
                    cbarbtnMenuItem.Caption = "Sheet Report for Dupont"
                    cbarbtnMenuItem.TooltipText = "This is specially design for Dupont Canada Inc."
                    cbarbtnMenuItem.OnAction = "MenuSheetReportDupont"
                    cbarbtnMenuItem.Visible = CBool(gCustom = "DUPONT")  'it should enable for Dupont

                Set cbarPopMenuItem3 = .CommandBar.Controls.Add(Type:=msoControlPopup)
                cbarPopMenuItem3.Caption = "Dell Report"
                cbarPopMenuItem3.Visible = CBool(gCustom = "DELL")
                'cbarPopMenuItem3.OnAction = "MenuSheetReportDell"
                With cbarPopMenuItem3
                    Set cbarbtnMenuItem = .Controls.Add(Type:=msoControlButton)
                        cbarbtnMenuItem.Caption = "Report Configuration"
                        cbarbtnMenuItem.TooltipText = "This is specially design for Dell Inc."
                        cbarbtnMenuItem.OnAction = "MenuConfigReportDell"
                        cbarbtnMenuItem.Visible = CBool(gCustom = "DELL")    'it should enable for Dell
                    Set cbarbtnMenuItem = .Controls.Add(Type:=msoControlButton)
                        cbarbtnMenuItem.Caption = "Daily Report"
                        cbarbtnMenuItem.TooltipText = "This is specially design for Dell Inc."
                        cbarbtnMenuItem.OnAction = "MenuSheetReportDell"
                        cbarbtnMenuItem.Visible = CBool(gCustom = "DELL")    'it should enable for Dell
                    Set cbarbtnMenuItem = .Controls.Add(Type:=msoControlButton)
                        cbarbtnMenuItem.Caption = "Multi-File Import"
                        cbarbtnMenuItem.TooltipText = "This is specially design for Dell Inc."
                        cbarbtnMenuItem.OnAction = "MenuMultiImport"
                        cbarbtnMenuItem.Visible = CBool(gCustom = "DELL")    'it should enable for Dell
                End With
            End With
        Set cbarbtnMenuItem = .CommandBar.Controls.Add(Type:=msoControlButton)
            cbarbtnMenuItem.Caption = "Arbi&n ToolBar"
            cbarbtnMenuItem.BeginGroup = True
            cbarbtnMenuItem.OnAction = "MenuHideToolBar"
            cbarbtnMenuItem.State = msoButtonDown
        Set cbarbtnMenuItem = .CommandBar.Controls.Add(Type:=msoControlButton)
            cbarbtnMenuItem.Caption = "Uninstall Mits Data Pro"
            cbarbtnMenuItem.OnAction = "MenuUninstall"
        Set cbarbtnMenuItem = .CommandBar.Controls.Add(Type:=msoControlButton)
            cbarbtnMenuItem.Caption = "Split Active workbook"
            cbarbtnMenuItem.TooltipText = "Split ActivateWorkbook to separate workbooks"
            cbarbtnMenuItem.OnAction = "MenuSplit"
        Set cbarbtnMenuItem = .CommandBar.Controls.Add(Type:=msoControlButton)
            cbarbtnMenuItem.Caption = "About Mits Data Pro"
            cbarbtnMenuItem.OnAction = "MenuShowAboutForm"
    End With
    
        Application.CommandBars("Dell Report").Visible = CBool(gCustom = "DELL")
        cbarArbin.Controls("Import Data").Move before:=1
        cbarArbin.Controls("Reload").Visible = gCommandHistory
End Sub

Sub InitGlobalVars()
''' Comments:   This routine is run on startup and is used to set some generic
'''             global variables on startup.

    ''' Get the OS Path Separator
    Dim i As Integer
    gszPathSeparator = Application.PathSeparator
    
    ''' Get the platform that we are running on
    'gszPlatform = Left$(Application.OperatingSystem, 3)
    ''' Append to the platform the API set if running under Windows
    'If InStr(1, Application.OperatingSystem, "32-bit") = 0 Then
    '    gszPlatform = gszPlatform & "16"
    'ElseIf gszPlatform = "Win" Then
    '    gszPlatform = gszPlatform & "32"
    'End If
     
    'gbDataImported = False
'    gDirNameInput = ThisWorkbook.Path
'    gFileNameInput = gDirNameInput & "\ArbinSys.res"
'    gDirNameOutput = gDirNameInput
    gExternCall = False     'Default value as no extern call
    gptPlotType = xlXYScatterLinesNoMarkers
    gptPlotTypeIndex = 0
    gptTimeUnitIndex = 0
    gbbTimeFormat = False
    gbbBtnAdvanced = False
    gbPWP3Option = 1   'All
    gbLastPlotOn = 0    'Default
    gbZoom = 100 'default
    gAddToWorkBook = False
    gArea = 0
    gSmartBatteryStat = False ''Smart battery status FCC,CT,DT,CI,CC,Max RSOC,Max Temperature

    Call SetAuxiDataTypeTitle
    Call SetOptionsTitle
    gbPlotLogFileNum = -1
    gbsInputBoxResponse = "c"    'ABTS 4.0 Title, c means Channel sheet
    gbStatisticsName = "Statistics"
    gbLastXColumnName = gbTestTimeName
    gbFirstChooseY2 = True
    gbLastY1ColumnName = ""
    gbLastY2ColumnName = ""
    gbIsInitGlobalVars = True  'The globals have been set.
    gbDBIsOpen = False
    gIsImportFormLoaded = False
    gbNeedRefreshImportDialog = False
    Call WriteErrorLogBegin
    Call gfReadMitsDataini
    Call gfReadCellGradingFile
    Call SetCheckBoxValueInDataImportForm
    gLastTestName = ""
    For i = 1 To 17
        gLastSelectedChannel(i) = ""
    Next i
    gbExistDataSheetAfterImport = False
    gbbIsPrinterExist = False
    gRefreshPrecess = False
    gMenuRefresh = False
    
    gDefaultWorkDrive = Left(ThisWorkbook.Path, 1)
'    Debug.Print "Work Drive as:", gDefaultWorkDrive
End Sub

Sub SetCheckBoxValueInDataImportForm()
    gbExistAuxiliary = False
    gbExistChStatistics = False
    gbExistMultiCell = False
    gbExistSmartBattery = False
    gbCheckChNormal = True
    gbCheckChAuxiliary = True
    gbCheckChStatistics = True
    gbCheckChSmartBattery = True
    gbCheckCellAll = True
    gbCheckCellAuxiliary = True
    gbbOpenFileAfterMaking = True
End Sub

Sub WriteErrorLogBegin()
    Dim fEvent
    gbErrorLogFileNum = 5
    On Error GoTo ErrorHandler
    fEvent = ThisWorkbook.Path & "\" & "Mits_DataProEvent.Log"
    Open fEvent For Append As #gbErrorLogFileNum
    Print #gbErrorLogFileNum, Date, Time, "Open Mits_DataPro"
    Close #gbErrorLogFileNum
Exit Sub
ErrorHandler:
    If Err.Number = 75 Then
    SetAttr fEvent, vbNormal
    Resume
    End If
End Sub


Sub WriteErrorLogFile(strID As String, strVar1 As String, fVar1 As Single)
    gbErrorLogFileNum = 5
    Open ThisWorkbook.Path & "\" & "Mits_DataProEvent.Log" For Append As #gbErrorLogFileNum
    Print #gbErrorLogFileNum, Date, Time, strID, strVar1, fVar1
    Close #gbErrorLogFileNum
End Sub

Sub SetAuxiDataTypeTitle()
    'Define Auxiliary Data_type title for X and dX/dt:
    gAuxiDataTypeTitle(0, 0) = "Aux_Voltage (V)"
    gAuxiDataTypeTitle(0, 1) = "dAuxV/dt (V/s)"
    gAuxiDataTypeTitle(1, 0) = "Temperature (C)"
    gAuxiDataTypeTitle(1, 1) = "dT/dt (C/s)"
    gAuxiDataTypeTitle(2, 0) = "Pressure (psi)"
    gAuxiDataTypeTitle(2, 1) = "dP/dt (psi/s)"
    gAuxiDataTypeTitle(3, 0) = "PH"
    gAuxiDataTypeTitle(3, 1) = "dPH/dt"
    gAuxiDataTypeTitle(4, 0) = "Flow Rate"
    gAuxiDataTypeTitle(4, 1) = "dFR/dt"
    gAuxiDataTypeTitle(5, 0) = "Density(%)"
    gAuxiDataTypeTitle(5, 1) = "dDensity/dt"
    gAuxiDataTypeTitle(6, 0) = "Digital Input"
    gAuxiDataTypeTitle(6, 1) = "dDI/dt"
    gAuxiDataTypeTitle(7, 0) = "Digital Output"
    gAuxiDataTypeTitle(7, 1) = "dDO/dt"
    gAuxiDataTypeTitle(8, 0) = "Relative Humidity"
    gAuxiDataTypeTitle(8, 1) = "Relative Humidity"
        
    gAuxiDataTypeUnit(0, 0) = "(V)"
    gAuxiDataTypeUnit(0, 1) = "(V/s)"
    gAuxiDataTypeUnit(1, 0) = "(C)"
    gAuxiDataTypeUnit(1, 1) = "(C/s)"
    gAuxiDataTypeUnit(2, 0) = "(psi)"
    gAuxiDataTypeUnit(2, 1) = "(psi/s)"
    gAuxiDataTypeUnit(3, 0) = ""
    gAuxiDataTypeUnit(3, 1) = ""
    gAuxiDataTypeUnit(4, 0) = ""
    gAuxiDataTypeUnit(4, 1) = ""
    gAuxiDataTypeUnit(5, 0) = "(%)"
    gAuxiDataTypeUnit(5, 1) = "(%/s)"
    gAuxiDataTypeUnit(6, 0) = ""
    gAuxiDataTypeUnit(6, 1) = ""
    gAuxiDataTypeUnit(7, 0) = ""
    gAuxiDataTypeUnit(7, 1) = ""
    gAuxiDataTypeUnit(8, 0) = "(%)"
    gAuxiDataTypeUnit(8, 0) = "(%/s)"
End Sub

Sub SetOptionsTitle()
    gstrDecimalPlacesNormal(1) = gbTestTimeName
    gstrDecimalPlacesNormal(2) = gbStepTimeName
    gstrDecimalPlacesNormal(3) = gbCurrentName
    gstrDecimalPlacesNormal(4) = gbVoltageName
    gstrDecimalPlacesNormal(5) = gbChargeCapacityName
    gstrDecimalPlacesNormal(6) = gbDischargeCapacityName
    gstrDecimalPlacesNormal(7) = gbChargeEnergyName
    gstrDecimalPlacesNormal(8) = gbDischargeEnergyName
End Sub

Sub MenuImportResultData()
    If gDirNameInput = "" Or gFileNameInput = "" Then
        'gbiMsgBoxResponse = MsgBox("Call InitGlobalVars again.", vbInformation)  'For Debug
        Call MenuRefreshResultData
        Call InitGlobalVars
    End If
    If gbNeedRefreshImportDialog = True Then
        Call MenuRefreshResultData
    End If
    gIsImportFormLoaded = True
    DataImportForm.Show
    gCommandHistory = True
End Sub

Sub MenuRefreshResultData()
    If gIsImportFormLoaded = True Then
        Unload DataImportForm
        gIsImportFormLoaded = False
        gbNeedRefreshImportDialog = False
    End If
End Sub

Sub MenuOptions()
    OptionsForm.Show
End Sub

Sub MenuImportABTS40ResultsData()
    Call ImportABTS40ResultsDataDialog
End Sub

Sub MenuImportGameryResultsData()
    Call ImportGameryResultsDataDialog
End Sub

Sub MenuShowAboutForm()
    AboutForm.Show
End Sub

Sub MenuHideToolBar()
    With CommandBars("WorkSheet Menu Bar").Controls(gMenuNameArbin_Data).Controls("Arbin ToolBar")
        If .State = msoButtonUp Then
            .State = msoButtonDown
            CommandBars("Arbin Utility").Visible = True
        Else
            .State = msoButtonUp
            CommandBars("Arbin Utility").Visible = False
        End If
    End With
    
    With CommandBars("Chart Menu Bar").Controls(gMenuNameArbin_Data).Controls("Arbin ToolBar")
        If .State = msoButtonUp Then
            .State = msoButtonDown
            CommandBars("Arbin Utility").Visible = True
        Else
            .State = msoButtonUp
            CommandBars("Arbin Utility").Visible = False
        End If
    End With
End Sub

Sub MenuAdjustToolBar()
    With CommandBars("WorkSheet Menu Bar").Controls(gMenuNameArbin_Data).Controls("Arbin ToolBar")
        If CommandBars("Arbin Utility").Visible = True Then
            .State = msoButtonDown
        Else
            .State = msoButtonUp
        End If
    End With
    With CommandBars("Chart Menu Bar").Controls(gMenuNameArbin_Data).Controls("Arbin ToolBar")
        If CommandBars("Arbin Utility").Visible = True Then
            .State = msoButtonDown
        Else
            .State = msoButtonUp
        End If
    End With
End Sub
Sub MenuCoulombicEfficiency()
If gfCoulombicEfficiency = False Then
    MsgBox "No Arbin Statistics Data sheet was select or Data wrong, please import first and try again!"
End If
End Sub
Sub MenuPowerDensity()
    gArea = 0
If gfPowerDensity = False Then
    MsgBox "Area size should be greater than Zero!" & vbCrLf & "No Arbin Data sheet was select or Data wrong, please import first and try again!"
End If
End Sub
Sub MenuBatteryTesting()
    gbiMsgBoxResponse = MsgBox("Sorry, the function of Battery Testing is not available now.", vbInformation)
End Sub

Sub MenuCorrosionMeasurements()
    gbiMsgBoxResponse = MsgBox("Sorry, the function of Corrosion Measurements is not available now.", vbInformation)
End Sub

Sub MenuElectrochemicalTechniques()
    gbiMsgBoxResponse = MsgBox("Sorry, the function of Electrochemical Techniques is not available now.", vbInformation)
End Sub

Sub MenuSupercapcitorTesting()
    gbiMsgBoxResponse = MsgBox("Sorry, the function of Supercapcitor Testing is not available now.", vbInformation)
End Sub

Function MenuSimplePlot()
    Dim strName As String
    Dim iColumn As Integer, bWarned As Boolean

    If Not gfHasWorkbookValid Then Exit Function
    If gbLastwkBookName <> ActiveWorkbook.Name Or gbLastwkSheetName <> ActiveSheet.Name Then
        On Error Resume Next
        Unload SimplePlotDialog
    End If
    
    'With ActiveWorkbook
        strName = ActiveSheet.Name
        If gfHasChartOf(ActiveWorkbook, strName) Then
            If gbLastwkSheetName <> "" And HasSheetOf(gbLastwkSheetName) Then
                Sheets(gbLastwkSheetName).Select
            Else
                gbMsgBoxPrompt = "You should choose a data sheet for plotting."
                gbiMsgBoxResponse = MsgBox(gbMsgBoxPrompt, vbInformation)
                Exit Function
            End If
        End If
        gbLastwkBookName = ActiveWorkbook.Name
        gbLastwkSheetName = ActiveSheet.Name
    'End With
    
    If ActiveSheet.cells(1, 1) = "" Or Val(ActiveSheet.cells(1, 1)) <> 0 Then
        bWarned = True
        'Special for ABTS 4.0
        If gbABTS40TitleOn Then
        'If True Then
            bWarned = gfAddABTS40Title(ActiveWorkbook, ActiveSheet)
            If bWarned = False Then Exit Function
        Else
            gbMsgBoxPrompt = "Unable to get infomation for plotting. " & Chr$(13) & "You should choose a Data sheet for Plotting."
            gbiMsgBoxResponse = MsgBox(gbMsgBoxPrompt, vbInformation, gszAPPVERSION)
            Call gfPrintMsgBox
            Exit Function
        End If
    End If
   
    SimplePlotDialog.Show
End Function

Function MenuAdvancedPlot()
    If Not gfHasWorkbookValid Then Exit Function
    PlotWizardPage1.Show
End Function

Sub MenuZoom()
    Dim ctsr As Series, i As Integer
    If Not gfHasWorkbookValid Then Exit Sub
    If Not gfHasChartOf(ActiveWorkbook, ActiveSheet.Name) Then
        If gbLastwkChartName <> "" And gfHasChartOf(ActiveWorkbook, gbLastwkChartName) Then
            Sheets(gbLastwkChartName).Select
        Else
            gbMsgBoxPrompt = "You should choose a chart sheet for zooming."
            gbiMsgBoxResponse = MsgBox(gbMsgBoxPrompt, vbInformation)
            Exit Sub
        End If
    End If
    gbActiveChartName = ActiveWorkbook.ActiveChart.Name
    'Try Series
    i = 0
    For Each ctsr In ActiveWorkbook.ActiveChart.SeriesCollection
        i = i + 1
    Next ctsr
    If i = 0 Then Exit Sub
    'Success
    ZoomForm.Show
End Sub

Sub CustomChart()
    'Keep Sub CustomChart for Mits DataPro Version 1.0 compatible
    Call gfPrintMsgBox
    'PlotCustomForm.Show
End Sub

Sub MenuRefresh()
    gRefreshPrecess = True
    If Excel.Workbooks.Count > 1 And gbbReloadAlert Then
        Alert.Show
    End If
    If gHasPloting Then
        DataImportForm.NotPlotAfterImport
    End If
    gbIsImporting = False
    DataImportForm.ImportData
    If gbShowWhichForm = 0 And gHasPloting Then
        Call SimplePlotDialog.PlotGraphInWorkbook(ActiveWorkbook, gbPreSheetName)
    ElseIf gbShowWhichForm = 1 And gHasPloting Then
        Call PlotGraphInWizard123(ActiveWorkbook, gbPreSheetName)
    ElseIf gbShowWhichForm = 2 And gHasPloting Then
        Call PlotGraphAdvanced(ActiveWorkbook, gbPreSheetName)
    End If
    
    gRefreshPrecess = False
    gMenuRefresh = True
    CheckIfAutoRefreshOn
    Exit Sub
getObjectReady:
    If Err.Number = 9 And gHasPloting Then
        MsgBox gszAPPVERSION & " supports simple ploting for reload"
        DataImportForm.UnlockFile
        Resume
    End If
End Sub
Sub CheckIfAutoRefreshOn()
    If gAutoRefreshEnable And gMenuRefresh And gCommandHistory Then
        gbbOverwriteFiles = True
        gCountRefresh = 0
        AutoRefresh
    End If
End Sub
Function AutoRefresh()
    gbIsImporting = False
    If gHasPloting Then
        DataImportForm.NotPlotAfterImport
    End If
    DataImportForm.ImportData
    If gbShowWhichForm = 0 And gHasPloting Then
        Call SimplePlotDialog.PlotGraphInWorkbook(ActiveWorkbook, gbPreSheetName)
    ElseIf gbShowWhichForm = 1 And gHasPloting Then
        Call PlotGraphInWizard123(ActiveWorkbook, gbPreSheetName)
    ElseIf gbShowWhichForm = 2 And gHasPloting Then
        Call PlotGraphAdvanced(ActiveWorkbook, gbPreSheetName)
    End If
    gCountRefresh = gCountRefresh + 1
    'Debug.Print gCountRefresh
    If gAutoRefreshEnable Then
        'Debug.Print Now + TimeValue(gsIntervalofRefresh)
        Application.OnTime Now + TimeValue(gsIntervalofRefresh), "AutoRefresh", , True
        DoEvents
    End If
End Function
Sub MenuUninstall()
Dim iCount As Integer
Dim combar As CommandBar
Dim Item As AddIn
Dim strPath As String
Dim strIniFile As String
On Error Resume Next
For Each combar In CommandBars
    If combar.Name = "Arbin Utility" Then combar.Delete
    If combar.Name = "Reload" Then combar.Delete
    If combar.Name = "Import Data" Then combar.Delete
    If combar.Name = "Worksheet Menu Bar" Then combar.Reset
    If combar.Name = "worksheet Menu Bar" Then combar.Reset
    If combar.Name = "Dell Report" Then combar.Delete
Next combar

For Each Item In Excel.AddIns
      If UCase(Item.Name) = UCase("Mits_DataPro.xla") Or UCase(Item.Name) = UCase("Mits_DataPro") Then
        strPath = Left(ThisWorkbook.FullName, Len(ThisWorkbook.FullName) - 16)
        strIniFile = strPath & "Mits_DataPro.ini"
        Kill strIniFile
        MsgBox ThisWorkbook.FullName & " " & Version & " was removed!"
        Beep
        Item.Installed = False
      End If
Next Item
'        MsgBox ThisWorkbook.FullName & " was removed!"
'        Beep
On Error Resume Next
Excel.AddIns(ThisWorkbook.FullName).Installed = False
Application.Quit
End Sub
Sub MenuSplit()
Dim wb As Workbook, wksheet As Worksheet
Dim iFileCount As Integer
Set wb = ActiveWorkbook
iFileCount = 0
For Each wksheet In wb.Worksheets
    wksheet.Copy
    ActiveWorkbook.SaveAs filename:=wb.Name & wksheet.Name
    ActiveWorkbook.Close
    iFileCount = iFileCount + 1
Next wksheet
    MsgBox wb.Name & " has been separated to " & iFileCount & " excel file, please check them!"
End Sub

Sub MenuSheetReportDupont()
If gCustom = "DUPONT" Then
MsgBox "This is specially design for Dupont Canada Inc." & vbCrLf & "It is going to be testing now!"
ReportForm.Show
End If
End Sub
Sub MenuSheetReportDell()
On Error GoTo Err_Exit
If gCustom = "DELL" And AlertDell Then DellReportForm2.Show
Exit Sub
Err_Exit:
Err.Clear
Kill ThisWorkbook.Path & "\DellReport.ini"
Set DellReportForm2 = Nothing
DellReportForm2.Show
End Sub
Sub MenuConfigReportDell()
If gCustom = "DELL" Then ReportConfig.Show
End Sub
Sub MenuMultiImport()
If gCustom = "DELL" Then DellMulti.Show
End Sub

Sub MenuBinderReportDell()
If gCustom = "DELL" Then ReportBinder.Show
End Sub
Sub MenuXAM()
If MsgBox("This function will generate the columns for capacity unit as Minute@XA", vbYesNo) Then gfMinuteXA
End Sub

Sub MenuACICell()
If gCustom = "TOYOTA" Then
If gToyota = False Then
    gToyota = True
    MsgBox "Toyota flag was set, The Fuel Cell data will put in Channel data sheet while importing!"
End If
End If
End Sub

Attribute VB_Name = "mAbts40"

Option Explicit
Option Base 0
Const VERSIONABLE_SCHEMA As Long = &H80000000
'res schema
Const RESULTS_ARC_SCHEMA_1 As Byte = 1
Const RESULTS_ARC_SCHEMA_2 As Byte = 2
Const RESULTS_ARC_SCHEMA_3 As Byte = 3
Const ARC_SCHEMA_INVALID As Byte = 255
'eff schema
Const EFF_ARC_SCHEMA_1 As Byte = 1
Const EFF_ARC_SCHEMA_2 As Byte = 2
Const EFF_ARC_SCHEMA_CELL As Byte = 3
Const IMPORT_BUFFER_SIZE As Integer = 1422
Const IMPORT_RECORD_PER_SHEET As Long = 63990 '28440 '
Public gABTS40DirNameInput As String
Public gABTS40DirNameOutput As String

Type RESULTS_HEADER_VARS_NEW
     StartTime As Long
     EndTime  As Long
     Tester As String
     ScheduleName As String
     NumPoints As Long
     NumCells As Long
     b2ndVoltUsed As Byte
     bTempUsed As Byte
     bPresUsed As Byte
     ChannelNum As Integer
'1     m_bRsltTime As Byte
'2     m_bRsltTimeHms As Byte
'3     m_bRsltCurrent As Byte
'4     m_bRsltVoltage As Byte
'5     m_bRsltVolt2 As Byte
'6     m_bRsltVolt3 As Byte
'7     m_bRsltTemp As Byte
'8     m_bRsltPres As Byte
'9     m_bRsltCapacity As Byte
'10     m_bRsltEnergy As Byte
'11     m_bRsltPower As Byte
'12     m_bRsltLoad As Byte
'13     m_bRsltCycle As Byte
'14     m_bRsltStep As Byte
'15     m_bRsltDvDt As Byte
'16     m_bRsltD2vDt2 As Byte
'17     m_bRsltDv2Dt As Byte
'18     m_bRsltDTDt As Byte
'19     m_bRsltDPDt As Byte
'20     m_bRsltDiDt As Byte
'21     m_bRsltDnDt As Byte
'22     m_bRsltPulseV As Integer
'23     m_bRsltPulseI As Integer
'24     m_bRsltMultiCell As Integer
'     xRslt_Title As String
'     xRslt_Label1 As String
'     xRslt_Label2 As String
'     xRslt_Label3 As String
'     xRslt_Label4 As String
'     xRslt_Label5 As String
'     xRslt_Label6 As String
'     xRslt_Label7 As String
'     xRslt_Label8 As String
'     xRslt_Label9 As String
'     xRslt_Label10 As String
'     xRslt_Label11 As String
'     xRslt_Label12 As String
'     xRslt_Label13 As String
'     xRslt_Label14 As String
'     xRslt_Label15 As String
'     xRslt_Label16 As String
'     xRslt_Custm1 As String
'     xRslt_Custm2 As String
'     xRslt_Custm3 As String
'     xRslt_Custm4 As String
'     xRslt_Custm5 As String
'     xRslt_Custm6 As String
'     xRslt_Custm7 As String
'     xRslt_Custm8 As String
'     xRslt_Custm9 As String
'     xRslt_Custm10 As String
'     xRslt_Custm11 As String
'     xRslt_Custm12 As String
'     xRslt_Custm13 As String
'     xRslt_Custm14 As String
'     xRslt_Custm15 As String
'     xRslt_Custm16 As String
''33 CString s
End Type

Type RESULTS_TYPE_VARS
     fTime As Single
     fCurrent As Single
     fVoltage As Single
     fVolt2 As Single
     fVolt3 As Single
     fTemp As Single
     fCapacity As Single
     fEnergy As Single
     CycleNum As Integer
     Step As Integer
     fVoltageRate As Single
     fVoltageRate2 As Single
     fTempRate As Single
     nNumCells As Integer
End Type

Type RESULTS_TYPE_VARS_NEW
     fTime As Single
     fCurrent As Single
     fVoltage As Single
     fVolt2 As Single
     fVolt3 As Single
     fTemp As Single
     fPres As Single
     fCapacity As Single
     fEnergy As Single
     '9 single
     CycleNum As Integer
     Step As Integer
     '2 integer
     fPulseVoltage As Single
     fPulseCurrent As Single
     fVoltageRate As Single
     fVoltageRate2 As Single
     fVoltage2Rate As Single
     fTempRate As Single
     fPresRate As Single
     fCurrentRate As Single
     fPowerRate As Single
     '9 single
     nNumCells As Integer
End Type

Type CELL_RESULTS_VARS
     fVoltage As Single
     bCellBypassed As Byte
End Type

Type CELL_RESULTS_VARS_NEW1
     fVoltage As Single
     bCellBypassed As Byte
     fTemperature As Single
     fPressure As Single
End Type

'eff file
Type EFFICIENTCY_TYPE_VAR
    m_nCycleNum As Integer
    m_fCharge As Single
    m_fDischarge As Single
    m_fVBegin As Single
    m_fVEnd As Single
    m_fMaxVolt As Single
    m_fChargeEnery As Single
    m_fDischargeEng As Single
End Type

Type EFFICIENTCY_TYPE_VAR_NEW
    m_nNumCells As Integer
    m_nCycleNum As Integer
    m_fCharge As Single
    m_fDischarge As Single
    m_fVBegin As Single
    m_fVEnd As Single
    m_fMaxVolt As Single
    m_fChargeEnery As Single
    m_fDischargeEng As Single
End Type

Type CELL_EFFICIENTCY_TYPE_VAR
    m_nCycleNum As Integer
    m_fCharge As Single
    m_fDischarge As Single
    m_fVBegin As Single
    m_fVEnd As Single
    m_fMaxVolt As Single
    m_fChargeEnery As Single
    m_fDischargeEng As Single
    m_bCellByPassed As Boolean
End Type

Dim m_nCurHeaderLen As Integer
Dim m_nCurVerSchema As Byte
Dim m_bIsCurNoCell As Boolean
Dim m_CurHeaderNew As RESULTS_HEADER_VARS_NEW
Dim m_nCurRecordSize As Long
Dim mFileToOpenXLSArray As Variant
Dim mFileSaveXLSArray As Variant
Dim miEndSaveXLSArray As Integer
Dim m_strImportSheetArray As Variant
Dim miOverWriteSaveXLSArray As Variant
Dim mStrABTS40Title(25) As String * 20
Dim mABTS40TitleEnd As Integer
Dim bIsInitedMyVars As Boolean
Dim iFileFilterIndex As Integer
Dim bNotGiveSorryMsg As Boolean

'eff header
Dim m_nEffChanNum As Long
Dim m_nEffNumCells As Long
Dim m_nNumOfPoints As Long
'01/05/99

Sub ImportABTS40ResultsDataDialog()
    Dim fileToOpen As Variant
    Dim iEnd As Integer
    Dim iLoop As Integer, jLoop As Integer
    Dim strSheetChName As String
    Dim strFileName As String, strwkBookName As String
    Dim wkbook As Excel.Workbook, wksheet As Excel.Worksheet
    
    If gbIsImporting Then Exit Sub
    If bIsInitedMyVars = False Then
        Call InitedMyVarsABTS40
    End If
    bNotGiveSorryMsg = False
    If ABTS40GetFileToOpenNameArray(fileToOpen, iEnd) = False Then Exit Sub
    If ABTS40AnalyseFileNameArray(fileToOpen, iEnd) = False Then Exit Sub
    Application.ScreenUpdating = False
    Application.DisplayAlerts = False
    
    For jLoop = 1 To miEndSaveXLSArray
        Set wkbook = Workbooks(mFileSaveXLSArray(jLoop) & ".xls")
        wkbook.Activate
        With wkbook
          For iLoop = 1 To iEnd
            If mFileSaveXLSArray(jLoop) = mFileToOpenXLSArray(iLoop) Then
                strFileName = fileToOpen(iLoop)
                If IsResultsFile(strFileName) Then
                    GetResultsFile (strFileName)
                Else
                    GetEffFile (strFileName)
                End If
                'Debug.Print mFileToOpenXLSArray(iLoop), strSheetChName
            End If
          Next iLoop
        End With
        'Delete sheet1,2,3
        Call gfDeleteDefaultSheet123(wkbook)
        'Save
        Application.StatusBar = "Save Data to " & wkbook.Name & " file."
        wkbook.Save
    Next jLoop
    Application.DisplayAlerts = True
    Application.ScreenUpdating = True
    Application.StatusBar = "ABTS 4.0 Files Imported."
End Sub

Private Sub InitedMyVarsABTS40()
    iFileFilterIndex = 1
    gABTS40DirNameInput = "C:\users\2adc"
    gABTS40DirNameOutput = "C:\users\2adc"
    'Add new vars here
    bIsInitedMyVars = True
End Sub

Function IsResultsFile(strFile As String) As Boolean
    If LCase(Right(strFile, 3)) = "res" Then
        IsResultsFile = True
    Else
        IsResultsFile = False
    End If
End Function

Function IsEffFile(strFile As String) As Boolean
    If LCase(Right(strFile, 3)) = "eff" Then
        IsEffFile = True
    Else
        IsEffFile = False
    End If
End Function

Sub GetResultsFile(strFileName As String)
    Dim strString As String * 4, fTmp As Single
    Dim nFileNum As Integer
    Dim nVersion As Long, nPos As Integer
    Dim strTester As String, strSduName As String
    Dim strSheetChName As String
    Dim nSheetNum As Byte
    
    Application.StatusBar = "Importing " & strFileName & " file."
    'open file to get info
    strString = ""
    'nFileNum = FreeFile
    nFileNum = 2
    Open strFileName For Binary Access Read Shared As #nFileNum
    Get #nFileNum, , nVersion
    Get #nFileNum, , strString
    m_nCurVerSchema = GetVersion(nVersion)
    If m_nCurVerSchema = ARC_SCHEMA_INVALID Then
        MsgBox ("Invalid results file: " & strFileName)
        GoTo Exit_GetResultsFile
    End If
    Call GetResHeader(nFileNum)
    If CanGetResultsInfo(nFileNum) = False Then
        MsgBox ("Can not get Results Info: " & strFileName)
        GoTo Exit_GetResultsFile
    End If
    'Debug.Print ThisWorkbook.IsAddin
'    If m_CurHeaderNew.NumCells > 0 Then
'        Call GiveSorryMsgMultiCell(CStr(m_nCurVerSchema))
'        GoTo Exit_GetResultsFile
'    End If
    
    strSheetChName = ABTS40GetSheetName(strFileName, m_nCurVerSchema)
    nSheetNum = CreateSheets(strSheetChName)
    ' start importing
    Call ImportResultsData(nFileNum, nSheetNum)
    
Exit_GetResultsFile:
    Close #nFileNum
    Application.StatusBar = "Ready"
End Sub

Sub GetEffFile(strFileName As String)
    Dim strString As String * 4, fTmp As Single
    Dim nFileNum As Integer
    Dim nVersion As Long, nPos As Integer
    Dim strTester As String, strSduName As String
    Dim strSheetChName As String
    Dim nSheetNum As Byte
    
    Application.StatusBar = "Importing " & strFileName & " file."
    'open file to get info
    strString = ""
    'nFileNum = FreeFile
    nFileNum = 2
    Open strFileName For Binary Access Read Shared As #nFileNum
    Get #nFileNum, , nVersion
'    Get #nFileNum, , strString
    m_nCurVerSchema = GetVersion(nVersion)
    If m_nCurVerSchema = ARC_SCHEMA_INVALID Then
        MsgBox ("Invalid efficiency file: " & strFileName)
        GoTo Exit_GetEffsFile
    End If
    Call GetEffHeader(nFileNum)
    If CanGetEffInfo(nFileNum) = False Then
        MsgBox ("Can not get efficiency Info: " & strFileName)
        GoTo Exit_GetEffsFile
    End If
    'Debug.Print ThisWorkbook.IsAddin
    If m_nEffNumCells > 0 Then
        Call GiveSorryMsgMultiCell(CStr(m_nCurVerSchema))
        GoTo Exit_GetEffsFile
    End If
    
    strSheetChName = ABTS40GetSheetName(strFileName, m_nCurVerSchema)
    nSheetNum = CreateSheets(strSheetChName)
    ' start importing
    Call ImportEffsData(nFileNum, nSheetNum)
    
Exit_GetEffsFile:
    Close #nFileNum
    Application.StatusBar = "Ready"
End Sub


Function CreateSheets(strSheetChName As String) As Byte
    Dim i As Byte
  '  Dim wkbook As Workbook
    Dim wksheet As Worksheet
    Dim strStName As String
    If ActiveWorkbook.Worksheets.Count <= 1 Then
       ActiveWorkbook.Worksheets.Add after:=ActiveWorkbook.Worksheets(Worksheets.Count)
    End If
    
    CreateSheets = Int(m_CurHeaderNew.NumPoints / IMPORT_RECORD_PER_SHEET) + 1
    If HasSheetOf(strSheetChName) Then
       ActiveWorkbook.Sheets(strSheetChName).Delete
    End If
    ReDim m_strImportSheetArray(CreateSheets)
    i = 1
    If CreateSheets = 1 Then
        strStName = strSheetChName
    Else
        strStName = strSheetChName & "_0" & i
    End If
    
    For i = 1 To CreateSheets
        m_strImportSheetArray(i - 1) = strStName
        If HasSheetOf(strStName) Then
           ActiveWorkbook.Sheets(strStName).Delete
        End If
        Call MadeNewSheet(ActiveWorkbook, strStName)   'wkbook active
        strStName = strSheetChName & "_0" & i + 1
    Next i
    End Function
    
Function ABTS40GetFileToOpenNameArray(fileToOpen As Variant, iEnd As Integer) As Boolean
    ABTS40GetFileToOpenNameArray = False
    On Error GoTo ABTS40GetfileToOpenArray_Error
    ChDir gABTS40DirNameInput
    On Error GoTo 0
    fileToOpen = Application.GetOpenFilename( _
        "ABTS 4.0 Results File (*.res),*.res,ABTS 4.0 Efficiency File (*.eff), *.eff,ABTS 4.0 File (*.res;*.eff), *.res;*.eff", _
         iFileFilterIndex, "Open ABTS 4.0 File(s)", , True)
    On Error GoTo ABTS40ImportTestUBound_Error:
    iEnd = UBound(fileToOpen)
    On Error GoTo 0
    gABTS40DirNameInput = CurDir
    gABTS40DirNameOutput = CurDir
    ABTS40GetFileToOpenNameArray = True

ABTS40ImportTestUBound_Error:
    Exit Function

ABTS40GetfileToOpenArray_Error:
    gABTS40DirNameInput = ThisWorkbook.Path
    Resume
End Function

Function ABTS40AnalyseFileNameArray(fileToOpen As Variant, iEnd As Integer) As Boolean
    Dim jEnd As Integer, jLoop As Integer
    ReDim strTemp(iEnd) As String
    'MsgBox "Open Button " & iEnd
    'Fill unique file name in strTemp()
    Call ABTS40FillUniqueFilename(fileToOpen, iEnd, strTemp, jEnd)
    
    'Test File Exist and Set three Module Vars
    ABTS40AnalyseFileNameArray = ABTS40TestXLSFileExist(strTemp, jEnd)
    
    If ABTS40AnalyseFileNameArray = True Then
        '--Close the existing workbook and open a new one
        Call ABTS40NewOrOpenExistingWorkbook
    End If
End Function

Sub ABTS40FillUniqueFilename(fileToOpen As Variant, iEnd As Integer, strTemp() As String, jEnd As Integer)
    Dim iLoop As Integer, iTemp As Integer
    Dim jLoop As Integer
    Dim strPathFilename As String
    Dim strFileName As String
    Dim strForeName As String
    Dim bj As Boolean
    Dim iResFilter As Integer, iEffFilter As Integer
    
    ReDim mFileToOpenXLSArray(iEnd)
    jEnd = 0
    For iLoop = 1 To iEnd
        strPathFilename = fileToOpen(iLoop)
        strFileName = Right$(strPathFilename, Len(strPathFilename) - Len(gABTS40DirNameOutput) - 1)
        iTemp = Len(strFileName) - 7
        If iTemp >= 0 Then
            strForeName = "Default"
            If iTemp > 0 Then
                strForeName = Left$(strFileName, iTemp)
            End If
            mFileToOpenXLSArray(iLoop) = strForeName
            If jEnd = 0 Then
                jEnd = jEnd + 1
                strTemp(jEnd) = strForeName
            Else
                bj = False
                For jLoop = 1 To jEnd
                    If strTemp(jLoop) = strForeName Then
                        bj = True
                        Exit For
                    End If
                Next jLoop
                If bj = False Then
                    jEnd = jEnd + 1
                    strTemp(jEnd) = strForeName
                End If
            End If
            'Debug.Print strFileName, strForeName, strTemp(jEnd)
        End If
        If LCase(Right(strFileName, 3)) = "res" Then
            iResFilter = 1
        ElseIf LCase(Right(strFileName, 3)) = "eff" Then
            iEffFilter = 2
        End If
    Next iLoop
    iFileFilterIndex = iResFilter + iEffFilter
    If iFileFilterIndex < 1 Then iFileFilterIndex = 1
End Sub

Function ABTS40TestXLSFileExist(strTemp() As String, jEnd As Integer) As Boolean
    Dim strFileNameCollect As String
    Dim jLoop As Integer
    ReDim mFileSaveXLSArray(jEnd) As String
    ReDim miOverWriteSaveXLSArray(jEnd) As Boolean
    
    ABTS40TestXLSFileExist = False
    strFileNameCollect = ""
    miEndSaveXLSArray = jEnd
    For jLoop = 1 To jEnd
        mFileSaveXLSArray(jLoop) = strTemp(jLoop)
        miOverWriteSaveXLSArray(jLoop) = False
        If Dir(gABTS40DirNameOutput & "\" & strTemp(jLoop) & ".xls") <> "" Then
            miOverWriteSaveXLSArray(jLoop) = True
            strFileNameCollect = strFileNameCollect & strTemp(jLoop) & ".xls " & vbCrLf
        End If
    Next jLoop
    If strFileNameCollect <> "" Then
        gbiMsgBoxResponse = MsgBox("Do you want to overwrite the existing sheets in file(s): " _
        & vbCrLf & strFileNameCollect _
        & "in " & gABTS40DirNameOutput & " directory? ", _
        vbYesNo + vbQuestion + vbDefaultButton2, gszALERTTITLE)
        '--Yes to overwrite, no to do loop again
        If gbiMsgBoxResponse = vbYes Then ABTS40TestXLSFileExist = True
    Else
        ABTS40TestXLSFileExist = True
    End If
End Function

Sub ABTS40NewOrOpenExistingWorkbook()
    Dim wbTemp As Workbook
    Dim jLoop As Integer
    Dim strPathFilename As String
    Application.DisplayAlerts = False
    On Error GoTo ABTS40NewOrOpenExistingWorkbook_SaveAsError
    For jLoop = 1 To miEndSaveXLSArray
        If Right(gABTS40DirNameOutput, 1) <> "\" Then gABTS40DirNameOutput = gABTS40DirNameOutput & "\"
        strPathFilename = gABTS40DirNameOutput & mFileSaveXLSArray(jLoop) & ".xls"
        If miOverWriteSaveXLSArray(jLoop) Then
            'Old one must close for path may be not the same one
            For Each wbTemp In Workbooks
                If UCase(wbTemp.FullName) = UCase(strPathFilename) Then
                    Application.StatusBar = "Save to " & wbTemp.FullName & " file."
                    wbTemp.Close SaveChanges:=True
                    Exit For
                End If
            Next wbTemp
            'open again
            Workbooks.Open strPathFilename
        Else
            'New one
            Set wbTemp = Workbooks.Add
            wbTemp.SaveAs filename:=strPathFilename
        End If
    Next jLoop
    'If file is locked, when using network drive, give Error Message
    On Error GoTo 0
    Application.DisplayAlerts = True
    Exit Sub

ABTS40NewOrOpenExistingWorkbook_SaveAsError:
    If Err.Number = 1004 Then
        MsgBox strPathFilename & " has been locked by others. " _
            & "You should change the Output File Name. " _
            & "This problem may be caused by network drive. " _
            & "You'd better not to use network drive."
        Workbooks(wbTemp.Name).Close SaveChanges:=False
    End If
    Resume Next
End Sub

Function ABTS40GetSheetName(strPathFilename As String, byVer As Byte) As String
    Dim strSheetChName As String, strTemp As String
    Dim strExt As String
    'SheetName
    strTemp = LCase(Right$(strPathFilename, 3))
    strExt = "Default"
    If strTemp = "res" Then
        strExt = gbChannelName
    ElseIf strTemp = "eff" Then
        strExt = gbStatisticName & "s"
    End If
    'Ch
    strTemp = Right$(strPathFilename, 7)
    If Len(strTemp) <= 4 Then
        strSheetChName = "000"
    Else
        strSheetChName = Left$(strTemp, Len(strTemp) - 4)
    End If
    ABTS40GetSheetName = strExt & "_" & Chr(96 + byVer) & "-" & strSheetChName
End Function

Sub GetResHeader(nFileNum As Integer)
    Dim strString As String
    Dim nPos As Integer, i As Byte
    m_nCurHeaderLen = 0
    'all versions in abts4.0
    'skip time for later tuning, each time has 12 byte
    m_CurHeaderNew.Tester = GetString(nFileNum, 29)
    m_CurHeaderNew.ScheduleName = GetString(nFileNum, -1)
    Get #nFileNum, , m_CurHeaderNew.NumPoints
    Get #nFileNum, , m_CurHeaderNew.NumCells
    Get #nFileNum, , m_CurHeaderNew.b2ndVoltUsed
    Get #nFileNum, , m_CurHeaderNew.bTempUsed
    If (m_nCurVerSchema >= RESULTS_ARC_SCHEMA_2) Then
        Get #nFileNum, , m_CurHeaderNew.bPresUsed
    End If
    Get #nFileNum, , m_CurHeaderNew.ChannelNum
    If (m_nCurVerSchema >= RESULTS_ARC_SCHEMA_2) Then
       'skip 24 useless boolean
       nPos = Seek(nFileNum) + 24
       'skip 33 strings
       strString = GetString(nFileNum, nPos)
       For i = 0 To 31
          strString = GetString(nFileNum, -1)
       Next i
    End If
    m_nCurHeaderLen = Loc(nFileNum)
End Sub

Function CanGetResultsInfo(nFileNum) As Boolean
    Dim RES_NEW As RESULTS_TYPE_VARS_NEW
    Dim res As RESULTS_TYPE_VARS
    Dim nPos As Long, nType As Integer, fTmp As Single
    nPos = m_nCurHeaderLen + 1
    CanGetResultsInfo = False
    
    Select Case m_nCurVerSchema
        Case RESULTS_ARC_SCHEMA_1:
            Get #nFileNum, nPos, res
            m_CurHeaderNew.NumCells = res.nNumCells
            m_bIsCurNoCell = (res.nNumCells = 0)
            If (m_bIsCurNoCell = True) Then
                m_nCurRecordSize = Len(res)
            Else
                m_nCurRecordSize = Len(res) + 5 * m_CurHeaderNew.NumCells
            End If
            m_CurHeaderNew.NumPoints = _
                (LOF(nFileNum) - m_nCurHeaderLen) / m_nCurRecordSize
        Case RESULTS_ARC_SCHEMA_2:
            Get #nFileNum, nPos, RES_NEW
            m_CurHeaderNew.NumCells = RES_NEW.nNumCells
            m_bIsCurNoCell = (RES_NEW.nNumCells = 0)
            If (m_bIsCurNoCell = True) Then
                m_nCurRecordSize = Len(RES_NEW)
            Else
                m_nCurRecordSize = Len(RES_NEW) + 5 * m_CurHeaderNew.NumCells
            End If
            m_CurHeaderNew.NumPoints = _
                (LOF(nFileNum) - m_nCurHeaderLen) / m_nCurRecordSize
        Case RESULTS_ARC_SCHEMA_3:
            Get #nFileNum, nPos, RES_NEW
            m_CurHeaderNew.NumCells = RES_NEW.nNumCells
            m_bIsCurNoCell = (RES_NEW.nNumCells = 0)
            If (m_bIsCurNoCell = True) Then
                m_nCurRecordSize = Len(RES_NEW)
            Else
                m_nCurRecordSize = Len(RES_NEW) + 13 * m_CurHeaderNew.NumCells
            End If
            m_CurHeaderNew.NumPoints = _
                (LOF(nFileNum) - m_nCurHeaderLen) / m_nCurRecordSize
        Case Else:
            Exit Function
    End Select
   
    CanGetResultsInfo = True
End Function

Sub GetEffHeader(nFileNum As Integer)
    Dim strString As String
    Dim nPos As Integer, i As Byte
    m_nCurHeaderLen = 0
    Dim nTmp As Integer
    'all versions in abts4.0
    'skip time for later tuning, each time has 12 byte
    Select Case m_nCurVerSchema
        Case EFF_ARC_SCHEMA_1:
            Get #nFileNum, , nTmp
            m_nEffChanNum = CLng(nTmp)
            m_nEffNumCells = 0
        Case EFF_ARC_SCHEMA_2:
            Get #nFileNum, , m_nEffChanNum
            m_nEffNumCells = 0
        Case EFF_ARC_SCHEMA_CELL:
            Get #nFileNum, , m_nEffChanNum
            Get #nFileNum, , m_nEffNumCells
    
    End Select
    m_nCurHeaderLen = Loc(nFileNum)
End Sub

Function CanGetEffInfo(nFileNum) As Boolean
    CanGetEffInfo = False
    Dim nPos As Long, nType As Integer, fTmp As Single
    nPos = m_nCurHeaderLen + 1
    
    Select Case m_nCurVerSchema
        Case EFF_ARC_SCHEMA_1:
            m_nCurRecordSize = 30
            m_nNumOfPoints = _
                (LOF(nFileNum) - m_nCurHeaderLen) / m_nCurRecordSize
        Case EFF_ARC_SCHEMA_2:
            m_nCurRecordSize = 30
            m_nNumOfPoints = _
                (LOF(nFileNum) - m_nCurHeaderLen) / m_nCurRecordSize
        Case EFF_ARC_SCHEMA_CELL:
            m_nCurRecordSize = 32
            m_nNumOfPoints = _
                (LOF(nFileNum) - m_nCurHeaderLen) / m_nCurRecordSize
        Case Else:
            Exit Function
    End Select
   
    CanGetEffInfo = True
End Function

Sub GiveSorryMsg(strMsg As String)
    If bNotGiveSorryMsg = False Then
        gbiMsgBoxResponse = MsgBox("Sorry, the importing function from the " & _
        strMsg & " version of ABTS4.0 file is not available now.", vbInformation)
        bNotGiveSorryMsg = True
    End If
End Sub

Sub GiveSorryMsgMultiCell(strMsg As String)
    If bNotGiveSorryMsg = False Then
        gbiMsgBoxResponse = MsgBox("Sorry, the importing function from the " & _
        strMsg & " version of ABTS4.0 MULTICELL file is not available now.", vbInformation)
        bNotGiveSorryMsg = True
    End If
End Sub

Sub ImportEffsData(nFileNum As Integer, nSheetNum As Byte)
    Dim i As Long
    i = Timer
    Application.ScreenUpdating = False
    Select Case m_nCurVerSchema
        Case EFF_ARC_SCHEMA_1:
            Call Import_EFF_ARC_SCHEMA_CELL(1, nFileNum, nSheetNum)
        Case EFF_ARC_SCHEMA_2:
            Call Import_EFF_ARC_SCHEMA_CELL(2, nFileNum, nSheetNum)
        Case EFF_ARC_SCHEMA_CELL:
            Call Import_EFF_ARC_SCHEMA_CELL(3, nFileNum, nSheetNum)
        Case Else:
            'Exit Sub
    End Select
    Application.ScreenUpdating = True
    'MsgBox Timer - I
End Sub

Sub ImportResultsData(nFileNum As Integer, nSheetNum As Byte)
    Dim i As Long
    i = Timer
    Application.ScreenUpdating = False
    Select Case m_nCurVerSchema
        Case RESULTS_ARC_SCHEMA_1:
            'Call GiveSorryMsg(RESULTS_ARC_SCHEMA_1)
            Call Import_RESULTS_ARC_SCHEMA_1(nFileNum, nSheetNum)
        Case RESULTS_ARC_SCHEMA_2:
            Call GiveSorryMsg(RESULTS_ARC_SCHEMA_2)
            'Call Import_RESULTS_ARC_SCHEMA_3(nFileNum, nSheetNum)
        Case RESULTS_ARC_SCHEMA_3:
            If m_CurHeaderNew.NumCells = 0 Then
                Call Import_RESULTS_ARC_SCHEMA_3(nFileNum, nSheetNum)
            Else
                Call Import_RESULTS_ARC_SCHEMA_3_CELL(nFileNum, nSheetNum)
            End If
        Case Else:
            'Exit Sub
    End Select
    Application.ScreenUpdating = True
    'MsgBox Timer - I
End Sub

Sub Import_RESULTS_ARC_SCHEMA_1(nFileNum As Integer, nSheetNum As Byte)
    Dim nPos As Long, i As Integer
    Dim nCount As Long, nOffset As Integer
    Dim nIntAry() As Long 'point, cycle,step
    Dim sArray() As Single
    Dim RES_NEW As RESULTS_TYPE_VARS
    Dim nRowOffset As Long
    Dim nTmpAry As Variant
    Dim nSheetIdx As Integer 'Byte
    Dim nBlockIdx As Integer, nBlockIdxEnd As Integer
    Dim nArrayIdx As Integer, nArrayIdxEnd As Integer
    Dim nPoint As Long
    Dim wksheet As Excel.Worksheet
    Dim strName As String
    Dim iEndnIntAry As Integer, iEndsArray As Integer
    
    iEndnIntAry = 2
    iEndsArray = 10
    ReDim nIntAry(IMPORT_BUFFER_SIZE - 1, iEndnIntAry)
    ReDim sArray(IMPORT_BUFFER_SIZE - 1, iEndsArray)
    nPos = m_nCurHeaderLen + 1
    'nCount = 0
    nArrayIdx = 0
    nPoint = 0
    nBlockIdxEnd = Int((IMPORT_RECORD_PER_SHEET - 1) / IMPORT_BUFFER_SIZE) + 1
    nArrayIdxEnd = IMPORT_BUFFER_SIZE - 1
    For nSheetIdx = 1 To nSheetNum
        nCount = 0
        strName = m_strImportSheetArray(nSheetIdx - 1)
        ActiveWorkbook.Worksheets(strName).Activate
        'Set wkSheet = ActiveWorkbook.Worksheets(strName)
        Set wksheet = ActiveSheet
        Call SetTitleChannelVer1
        With wksheet
            For i = 1 To mABTS40TitleEnd
                cells(1, i) = Trim(mStrABTS40Title(i))
            Next i
        End With
        
        If nSheetIdx = nSheetNum Then
            nBlockIdxEnd = Int((m_CurHeaderNew.NumPoints - nPoint - 1) / IMPORT_BUFFER_SIZE) + 1
        End If
        For nBlockIdx = 1 To nBlockIdxEnd
            If nSheetIdx = nSheetNum And nBlockIdx = nBlockIdxEnd Then
                nArrayIdxEnd = m_CurHeaderNew.NumPoints - nPoint - 1
                ReDim nIntAry(nArrayIdxEnd, iEndnIntAry)
                ReDim sArray(nArrayIdxEnd, iEndsArray)
            End If
            For nArrayIdx = 0 To nArrayIdxEnd
                Get #nFileNum, nPos, RES_NEW
                If m_CurHeaderNew.NumCells > 0 Then
                    'import cells data here
                End If
                 nPos = nPos + m_nCurRecordSize
                'fill arrays
                 nIntAry(nArrayIdx, 0) = nArrayIdx + 1 + Int(nPoint / IMPORT_BUFFER_SIZE) * IMPORT_BUFFER_SIZE
                 nIntAry(nArrayIdx, 1) = RES_NEW.CycleNum
                 nIntAry(nArrayIdx, 2) = RES_NEW.Step
                 sArray(nArrayIdx, 0) = RES_NEW.fTime
                 sArray(nArrayIdx, 1) = RES_NEW.fCurrent
                 sArray(nArrayIdx, 2) = RES_NEW.fVoltage
                 sArray(nArrayIdx, 3) = RES_NEW.fVolt2
                 sArray(nArrayIdx, 4) = RES_NEW.fVolt3
                 sArray(nArrayIdx, 5) = RES_NEW.fTemp
                 'sArray(nArrayIdx, 6) = RES_NEW.fPres
                 sArray(nArrayIdx, 6) = RES_NEW.fCapacity
                 sArray(nArrayIdx, 7) = RES_NEW.fEnergy
                 sArray(nArrayIdx, 8) = RES_NEW.fVoltageRate
                 'sArray(nArrayIdx, 10) = RES_NEW.fVoltage2Rate
                 sArray(nArrayIdx, 9) = RES_NEW.fVoltageRate2
                 sArray(nArrayIdx, 10) = RES_NEW.fTempRate
                 'sArray(nArrayIdx, 13) = RES_NEW.fPresRate
                 'sArray(nArrayIdx, 14) = RES_NEW.fCurrentRate
                 'sArray(nArrayIdx, 15) = RES_NEW.fPowerRate
            Next nArrayIdx
            'If nArrayIdx = IMPORT_BUFFER_SIZE - 1 Or nPoint = m_CurHeaderNew.NumPoints - 1 Then
            'nArrayIdx = 0
            'With wkSheet
            With wksheet
                nRowOffset = 2 + Int(nBlockIdx - 1) * IMPORT_BUFFER_SIZE
                .Range(cells(nRowOffset, 1), cells(nRowOffset + nArrayIdxEnd, iEndnIntAry + 1)) = nIntAry
                .Range(cells(nRowOffset, iEndnIntAry + 2), cells(nRowOffset + nArrayIdxEnd, iEndnIntAry + 2 + iEndsArray)) = sArray '18?
            End With
            'nCount = nCount + 1
            nPoint = nPoint + nArrayIdx
        Next nBlockIdx
        'Call FormatSheetColumnsNumber(wkSheet)
        wksheet.Range("B2").Select
        ActiveWindow.FreezePanes = True
        If gbbPrint Then Call FormatSheetEvenColumns(wksheet)
    Next nSheetIdx

End Sub

Sub Import_RESULTS_ARC_SCHEMA_3(nFileNum As Integer, nSheetNum As Byte)
    Dim nPos As Long, i As Integer
    Dim nCount As Long, nOffset As Integer
    Dim nIntAry() As Long 'point, cycle,step
    Dim sArray() As Single '13 or 15?
    Dim RES_NEW As RESULTS_TYPE_VARS_NEW
    Dim nRowOffset As Long
    Dim nTmpAry As Variant
    Dim nSheetIdx As Integer 'Byte
    Dim nBlockIdx As Integer, nBlockIdxEnd As Integer
    Dim nArrayIdx As Integer, nArrayIdxEnd As Integer
    Dim nPoint As Long
    Dim wksheet As Excel.Worksheet
    Dim strName As String
    Dim iEndnIntAry As Integer, iEndsArray As Integer
    
    iEndnIntAry = 2
    iEndsArray = 15
    ReDim nIntAry(IMPORT_BUFFER_SIZE - 1, iEndnIntAry)
    ReDim sArray(IMPORT_BUFFER_SIZE - 1, iEndsArray)
    nPos = m_nCurHeaderLen + 1
    'nCount = 0
    nArrayIdx = 0
    nPoint = 0
    nBlockIdxEnd = Int((IMPORT_RECORD_PER_SHEET - 1) / IMPORT_BUFFER_SIZE) + 1
    nArrayIdxEnd = IMPORT_BUFFER_SIZE - 1
    For nSheetIdx = 1 To nSheetNum
        nCount = 0
        strName = m_strImportSheetArray(nSheetIdx - 1)
        ActiveWorkbook.Worksheets(strName).Activate
        'Set wkSheet = ActiveWorkbook.Worksheets(strName)
        Set wksheet = ActiveSheet
        Call SetTitleChannel
        With wksheet
            For i = 1 To mABTS40TitleEnd
                cells(1, i) = Trim(mStrABTS40Title(i))
            Next i
        End With
        
        If nSheetIdx = nSheetNum Then
            nBlockIdxEnd = Int((m_CurHeaderNew.NumPoints - nPoint - 1) / IMPORT_BUFFER_SIZE) + 1
        End If
        For nBlockIdx = 1 To nBlockIdxEnd
            If nSheetIdx = nSheetNum And nBlockIdx = nBlockIdxEnd Then
                nArrayIdxEnd = m_CurHeaderNew.NumPoints - nPoint - 1
                ReDim nIntAry(nArrayIdxEnd, iEndnIntAry)
                ReDim sArray(nArrayIdxEnd, iEndsArray)
            End If
            For nArrayIdx = 0 To nArrayIdxEnd
                Get #nFileNum, nPos, RES_NEW
                If m_CurHeaderNew.NumCells > 0 Then
                    'import cells data here
                End If
                 nPos = nPos + m_nCurRecordSize
                'fill arrays
                 nIntAry(nArrayIdx, 0) = nArrayIdx + 1 + Int(nPoint / IMPORT_BUFFER_SIZE) * IMPORT_BUFFER_SIZE
                 nIntAry(nArrayIdx, 1) = RES_NEW.CycleNum
                 nIntAry(nArrayIdx, 2) = RES_NEW.Step
                 sArray(nArrayIdx, 0) = RES_NEW.fTime
                 sArray(nArrayIdx, 1) = RES_NEW.fCurrent
                 sArray(nArrayIdx, 2) = RES_NEW.fVoltage
                 sArray(nArrayIdx, 3) = RES_NEW.fVolt2
                 sArray(nArrayIdx, 4) = RES_NEW.fVolt3
                 sArray(nArrayIdx, 5) = RES_NEW.fTemp
                 sArray(nArrayIdx, 6) = RES_NEW.fPres
                 sArray(nArrayIdx, 7) = RES_NEW.fCapacity
                 sArray(nArrayIdx, 8) = RES_NEW.fEnergy
                 sArray(nArrayIdx, 9) = RES_NEW.fVoltageRate
                 sArray(nArrayIdx, 10) = RES_NEW.fVoltage2Rate
                 sArray(nArrayIdx, 11) = RES_NEW.fVoltageRate2
                 sArray(nArrayIdx, 12) = RES_NEW.fTempRate
                 sArray(nArrayIdx, 13) = RES_NEW.fPresRate
                 sArray(nArrayIdx, 14) = RES_NEW.fCurrentRate
                 sArray(nArrayIdx, 15) = RES_NEW.fPowerRate
            Next nArrayIdx
            'If nArrayIdx = IMPORT_BUFFER_SIZE - 1 Or nPoint = m_CurHeaderNew.NumPoints - 1 Then
            'nArrayIdx = 0
            'With wkSheet
            With wksheet
                nRowOffset = 2 + Int(nBlockIdx - 1) * IMPORT_BUFFER_SIZE
                .Range(cells(nRowOffset, 1), cells(nRowOffset + nArrayIdxEnd, iEndnIntAry + 1)) = nIntAry
                .Range(cells(nRowOffset, iEndnIntAry + 2), cells(nRowOffset + nArrayIdxEnd, iEndnIntAry + 2 + iEndsArray)) = sArray '18?
            End With
            'nCount = nCount + 1
            nPoint = nPoint + nArrayIdx
        Next nBlockIdx
        'Call FormatSheetColumnsNumber(wkSheet)
        wksheet.Range("B2").Select
        ActiveWindow.FreezePanes = True
        If gbbPrint Then Call FormatSheetEvenColumns(wksheet)
    Next nSheetIdx
End Sub

Sub Import_RESULTS_ARC_SCHEMA_3_CELL(nFileNum As Integer, nSheetNum As Byte)
    Dim nPos As Long, i As Integer
    Dim nCount As Long, nOffset As Integer
    Dim nIntAry() As Long 'point, cycle,step
    Dim sArray() As Single '13 or 15?
    Dim sCellArray() As Single
    Dim iNumCells As Integer, iCellLoop As Integer
    Dim iCellLoop3 As Integer, iCellFromCol As Integer
    Dim nCurRecordSizeNoCell As Long, iEndsCellArray As Integer
    Dim RES_NEW As RESULTS_TYPE_VARS_NEW
    Dim CELL_NEW1 As CELL_RESULTS_VARS_NEW1
    Dim nRowOffset As Long
    Dim nTmpAry As Variant
    Dim nSheetIdx As Integer 'Byte
    Dim nBlockIdx As Integer, nBlockIdxEnd As Integer
    Dim nArrayIdx As Integer, nArrayIdxEnd As Integer
    Dim nPoint As Long
    Dim wksheet As Excel.Worksheet
    Dim strName As String
    Dim iEndnIntAry As Integer, iEndsArray As Integer
    
    iEndnIntAry = 2
    iEndsArray = 15
    iNumCells = m_CurHeaderNew.NumCells
    iEndsCellArray = iNumCells * 3 - 1
    nCurRecordSizeNoCell = m_nCurRecordSize - 13 * iNumCells
    ReDim nIntAry(IMPORT_BUFFER_SIZE - 1, iEndnIntAry)
    ReDim sArray(IMPORT_BUFFER_SIZE - 1, iEndsArray)
    ReDim sCellArray(IMPORT_BUFFER_SIZE - 1, iEndsCellArray)
    nPos = m_nCurHeaderLen + 1
    'nCount = 0
    nArrayIdx = 0
    nPoint = 0
    nBlockIdxEnd = Int((IMPORT_RECORD_PER_SHEET - 1) / IMPORT_BUFFER_SIZE) + 1
    nArrayIdxEnd = IMPORT_BUFFER_SIZE - 1
    For nSheetIdx = 1 To nSheetNum
        nCount = 0
        strName = m_strImportSheetArray(nSheetIdx - 1)
        ActiveWorkbook.Worksheets(strName).Activate
        'Set wkSheet = ActiveWorkbook.Worksheets(strName)
        Set wksheet = ActiveSheet
        Call SetTitleChannel
        With wksheet
            For i = 1 To mABTS40TitleEnd
                cells(1, i) = Trim(mStrABTS40Title(i))
            Next i
            If iNumCells > 0 Then
                For iCellLoop = 1 To iNumCells
                    i = mABTS40TitleEnd + 1 + (iCellLoop - 1) * 3
                    cells(1, i) = "Cell" & iCellLoop & "_Volt"
                    cells(1, i + 1) = "Cell" & iCellLoop & "_Temp"
                    cells(1, i + 2) = "Cell" & iCellLoop & "_Pres"
                Next iCellLoop
            End If
        End With
        
        If nSheetIdx = nSheetNum Then
            nBlockIdxEnd = Int((m_CurHeaderNew.NumPoints - nPoint - 1) / IMPORT_BUFFER_SIZE) + 1
        End If
        For nBlockIdx = 1 To nBlockIdxEnd
            If nSheetIdx = nSheetNum And nBlockIdx = nBlockIdxEnd Then
                nArrayIdxEnd = m_CurHeaderNew.NumPoints - nPoint - 1
                ReDim nIntAry(nArrayIdxEnd, iEndnIntAry)
                ReDim sArray(nArrayIdxEnd, iEndsArray)
            End If
            For nArrayIdx = 0 To nArrayIdxEnd
                Get #nFileNum, nPos, RES_NEW
                nPos = nPos + nCurRecordSizeNoCell
                If iNumCells > 0 Then
                    'import cells data here
                    For iCellLoop = 1 To iNumCells
                        Get #nFileNum, nPos, CELL_NEW1
                        iCellLoop3 = (iCellLoop - 1) * 3
                        sCellArray(nArrayIdx, iCellLoop3) = CELL_NEW1.fVoltage
                        sCellArray(nArrayIdx, iCellLoop3 + 1) = CELL_NEW1.fTemperature
                        sCellArray(nArrayIdx, iCellLoop3 + 2) = CELL_NEW1.fPressure
                        nPos = nPos + 13
                    Next iCellLoop
                End If
                 'nPos = nPos + m_nCurRecordSize
                'fill arrays
                 nIntAry(nArrayIdx, 0) = nArrayIdx + 1 + Int(nPoint / IMPORT_BUFFER_SIZE) * IMPORT_BUFFER_SIZE
                 nIntAry(nArrayIdx, 1) = RES_NEW.CycleNum
                 nIntAry(nArrayIdx, 2) = RES_NEW.Step
                 sArray(nArrayIdx, 0) = RES_NEW.fTime
                 sArray(nArrayIdx, 1) = RES_NEW.fCurrent
                 sArray(nArrayIdx, 2) = RES_NEW.fVoltage
                 sArray(nArrayIdx, 3) = RES_NEW.fVolt2
                 sArray(nArrayIdx, 4) = RES_NEW.fVolt3
                 sArray(nArrayIdx, 5) = RES_NEW.fTemp
                 sArray(nArrayIdx, 6) = RES_NEW.fPres
                 sArray(nArrayIdx, 7) = RES_NEW.fCapacity
                 sArray(nArrayIdx, 8) = RES_NEW.fEnergy
                 sArray(nArrayIdx, 9) = RES_NEW.fVoltageRate
                 sArray(nArrayIdx, 10) = RES_NEW.fVoltage2Rate
                 sArray(nArrayIdx, 11) = RES_NEW.fVoltageRate2
                 sArray(nArrayIdx, 12) = RES_NEW.fTempRate
                 sArray(nArrayIdx, 13) = RES_NEW.fPresRate
                 sArray(nArrayIdx, 14) = RES_NEW.fCurrentRate
                 sArray(nArrayIdx, 15) = RES_NEW.fPowerRate
            Next nArrayIdx
            'If nArrayIdx = IMPORT_BUFFER_SIZE - 1 Or nPoint = m_CurHeaderNew.NumPoints - 1 Then
            'nArrayIdx = 0
            'With wkSheet
            With wksheet
                nRowOffset = 2 + Int(nBlockIdx - 1) * IMPORT_BUFFER_SIZE
                .Range(cells(nRowOffset, 1), cells(nRowOffset + nArrayIdxEnd, iEndnIntAry + 1)) = nIntAry
                .Range(cells(nRowOffset, iEndnIntAry + 2), cells(nRowOffset + nArrayIdxEnd, iEndnIntAry + 2 + iEndsArray)) = sArray '18?
                If iNumCells > 0 Then
                    iCellFromCol = iEndnIntAry + 2 + iEndsArray + 1
                    .Range(cells(nRowOffset, iCellFromCol), cells(nRowOffset + nArrayIdxEnd, iCellFromCol + iEndsCellArray)) = sCellArray
                End If
            End With
            'nCount = nCount + 1
            nPoint = nPoint + nArrayIdx
        Next nBlockIdx
        'Call FormatSheetColumnsNumber(wkSheet)
        wksheet.Range("B2").Select
        ActiveWindow.FreezePanes = True
        If gbbPrint Then Call FormatSheetEvenColumns(wksheet)
    Next nSheetIdx

End Sub

Sub Import_EFF_ARC_SCHEMA_CELL(byVer As Byte, nFileNum As Integer, nSheetNum As Byte)
    Dim nPos As Long, i As Integer
    Dim nCount As Long, nOffset As Integer
    Dim nIntAry() As Long
    Dim sArray() As Single
    Dim EFF_VAR As EFFICIENTCY_TYPE_VAR
    Dim EFF_NEW As EFFICIENTCY_TYPE_VAR_NEW
    Dim nRowOffset As Long
    Dim nTmpAry As Variant
    Dim nSheetIdx As Integer 'Byte
    Dim nBlockIdx As Integer, nBlockIdxEnd As Integer
    Dim nArrayIdx As Integer, nArrayIdxEnd As Integer
    Dim nPoint As Long
    Dim wksheet As Excel.Worksheet
    Dim strName As String
    Dim iEndnIntAry As Integer, iEndsArray As Integer
    
    iEndnIntAry = 0
    iEndsArray = 6
    ReDim nIntAry(IMPORT_BUFFER_SIZE - 1, iEndnIntAry)
    ReDim sArray(IMPORT_BUFFER_SIZE - 1, iEndsArray)
    nPos = m_nCurHeaderLen + 1
    'nCount = 0
    nArrayIdx = 0
    nPoint = 0
    nBlockIdxEnd = Int((IMPORT_RECORD_PER_SHEET - 1) / IMPORT_BUFFER_SIZE) + 1
    nArrayIdxEnd = IMPORT_BUFFER_SIZE - 1
    For nSheetIdx = 1 To nSheetNum
        nCount = 0
        strName = m_strImportSheetArray(nSheetIdx - 1)
        ActiveWorkbook.Worksheets(strName).Activate
        'Set wkSheet = ActiveWorkbook.Worksheets(strName)
        Set wksheet = ActiveSheet
        Call SetTitleStatistic
        With wksheet
            For i = 1 To mABTS40TitleEnd
                cells(1, i) = Trim(mStrABTS40Title(i))
            Next i
        End With
        
        If nSheetIdx = nSheetNum Then
            nBlockIdxEnd = Int((m_nNumOfPoints - nPoint - 1) / IMPORT_BUFFER_SIZE) + 1
        End If
        For nBlockIdx = 1 To nBlockIdxEnd
            If nSheetIdx = nSheetNum And nBlockIdx = nBlockIdxEnd Then
                nArrayIdxEnd = m_nNumOfPoints - nPoint - 1
                ReDim nIntAry(nArrayIdxEnd, iEndnIntAry)
                ReDim sArray(nArrayIdxEnd, iEndsArray)
            End If
            If byVer = 1 Or byVer = 2 Then
                For nArrayIdx = 0 To nArrayIdxEnd
                    Get #nFileNum, nPos, EFF_VAR
                    If m_nEffNumCells > 0 Then
                        'import cells data here
                    End If
                     nPos = nPos + m_nCurRecordSize
                    'fill arrays
                     'nIntAry(nArrayIdx, 0) = nArrayIdx + 1 + Int(nPoint / IMPORT_BUFFER_SIZE) * IMPORT_BUFFER_SIZE
                     nIntAry(nArrayIdx, 0) = EFF_VAR.m_nCycleNum
                     sArray(nArrayIdx, 0) = EFF_VAR.m_fCharge
                     sArray(nArrayIdx, 1) = EFF_VAR.m_fDischarge
                     sArray(nArrayIdx, 2) = EFF_VAR.m_fChargeEnery
                     sArray(nArrayIdx, 3) = EFF_VAR.m_fDischargeEng
                     sArray(nArrayIdx, 4) = EFF_VAR.m_fMaxVolt
                     sArray(nArrayIdx, 5) = EFF_VAR.m_fVBegin
                     sArray(nArrayIdx, 6) = EFF_VAR.m_fVEnd
                Next nArrayIdx
            ElseIf byVer = 3 Then
                For nArrayIdx = 0 To nArrayIdxEnd
                    Get #nFileNum, nPos, EFF_NEW
                    If m_nEffNumCells > 0 Then
                        'import cells data here
                    End If
                     nPos = nPos + m_nCurRecordSize
                    'fill arrays
                     'nIntAry(nArrayIdx, 0) = nArrayIdx + 1 + Int(nPoint / IMPORT_BUFFER_SIZE) * IMPORT_BUFFER_SIZE
                     nIntAry(nArrayIdx, 0) = EFF_NEW.m_nCycleNum
                     sArray(nArrayIdx, 0) = EFF_NEW.m_fCharge
                     sArray(nArrayIdx, 1) = EFF_NEW.m_fDischarge
                     sArray(nArrayIdx, 2) = EFF_NEW.m_fChargeEnery
                     sArray(nArrayIdx, 3) = EFF_NEW.m_fDischargeEng
                     sArray(nArrayIdx, 4) = EFF_NEW.m_fMaxVolt
                     sArray(nArrayIdx, 5) = EFF_NEW.m_fVBegin
                     sArray(nArrayIdx, 6) = EFF_NEW.m_fVEnd
                Next nArrayIdx
            End If
            'If nArrayIdx = IMPORT_BUFFER_SIZE - 1 Or nPoint = m_CurHeaderNew.NumPoints - 1 Then
            'nArrayIdx = 0
            'With wkSheet
            With wksheet
                nRowOffset = 2 + Int(nBlockIdx - 1) * IMPORT_BUFFER_SIZE
                .Range(cells(nRowOffset, 1), cells(nRowOffset + nArrayIdxEnd, iEndnIntAry + 1)) = nIntAry
                .Range(cells(nRowOffset, iEndnIntAry + 2), cells(nRowOffset + nArrayIdxEnd, iEndnIntAry + 2 + iEndsArray)) = sArray '18?
            End With
            'nCount = nCount + 1
            nPoint = nPoint + nArrayIdx
        Next nBlockIdx
        'Call FormatSheetColumnsNumber(wkSheet)
        wksheet.Range("B2").Select
        ActiveWindow.FreezePanes = True
        If gbbPrint Then Call FormatSheetEvenColumns(wksheet)
        wksheet.Rows("1:1").HorizontalAlignment = xlLeft
    Next nSheetIdx
    
End Sub

Function GetString(nFileNum, nPos As Integer) As String
    Dim nByte As Byte
    Dim nWord As Integer
    Dim nLen As Long
    Dim strString As String
    If nPos = -1 Then
        nPos = Seek(nFileNum)
    End If
    Get #nFileNum, nPos, nByte
    'nLen = Loc(nFileNum)
    If (nByte < 255) Then
        strString = String(nByte, " ")
    Else
        Get #nFileNum, , nWord
        If (nWord < 65534) Then
            strString = String(nWord, " ")
        Else
            Get #nFileNum, , nLen
            strString = String(nLen, " ")
        End If
    End If
    Get #nFileNum, , strString
    GetString = strString
End Function

Function GetVersion(nVer As Long) As Byte
    GetVersion = ARC_SCHEMA_INVALID
    If (nVer And VERSIONABLE_SCHEMA) = 0 Then
        GetVersion = ARC_SCHEMA_INVALID
    Else
        GetVersion = nVer Xor VERSIONABLE_SCHEMA
    End If
End Function

Sub TestIsAddin()
    ThisWorkbook.IsAddin = False
End Sub

Sub SetTitleChannelVer1()
    Dim i As Integer
    i = 0
    i = i + 1: mStrABTS40Title(i) = gbDataPointName
    i = i + 1: mStrABTS40Title(i) = gbCycleIndexName
    i = i + 1: mStrABTS40Title(i) = gbStepIndexName
    i = i + 1: mStrABTS40Title(i) = gbTestTimeName
    'I = I + 1: mStrABTS40Title(I) = gbDateTimeName
    i = i + 1: mStrABTS40Title(i) = gbCurrentName
    i = i + 1: mStrABTS40Title(i) = gbVoltageName
    i = i + 1: mStrABTS40Title(i) = "2nd_Volt(V)"
    i = i + 1: mStrABTS40Title(i) = "3rd_Volt(V)"
    i = i + 1: mStrABTS40Title(i) = "gbTemperatureName"
    'I = I + 1: mStrABTS40Title(I) = "Pressure"
    i = i + 1: mStrABTS40Title(i) = "Capacity(Ah)"
    i = i + 1: mStrABTS40Title(i) = "Energy(Wh)"
    'I = I + 1: mStrABTS40Title(I) = "Power"
    'I = I + 1: mStrABTS40Title(I) = "Load"
    i = i + 1: mStrABTS40Title(i) = "Volt_Rate"
    'I = I + 1: mStrABTS40Title(I) = "2ndV_Rate"
    i = i + 1: mStrABTS40Title(i) = "Volt_Rate2"
    i = i + 1: mStrABTS40Title(i) = "Temp_Rate"
    'I = I + 1: mStrABTS40Title(I) = "Pres_Rate"
    'I = I + 1: mStrABTS40Title(I) = "Current_Rate"
    'I = I + 1: mStrABTS40Title(I) = "Power_Rate"
    'I = I + 1: mStrABTS40Title(I) = "Pulse_V"
    'I = I + 1: mStrABTS40Title(I) = "Pulse_I"
    mABTS40TitleEnd = i

End Sub

Sub SetTitleChannel()
    Dim i As Integer
    i = 0
    i = i + 1: mStrABTS40Title(i) = gbDataPointName
    i = i + 1: mStrABTS40Title(i) = gbCycleIndexName
    i = i + 1: mStrABTS40Title(i) = gbStepIndexName
    i = i + 1: mStrABTS40Title(i) = gbTestTimeName
    'I = I + 1: mStrABTS40Title(I) = gbDateTimeName
    i = i + 1: mStrABTS40Title(i) = gbCurrentName
    i = i + 1: mStrABTS40Title(i) = gbVoltageName
    i = i + 1: mStrABTS40Title(i) = "2nd_Volt(V)"
    i = i + 1: mStrABTS40Title(i) = "3rd_Volt(V)"
    i = i + 1: mStrABTS40Title(i) = gbTemperatureName
    i = i + 1: mStrABTS40Title(i) = "Pressure (PSI)"
    i = i + 1: mStrABTS40Title(i) = "Capacity(Ah)"
    i = i + 1: mStrABTS40Title(i) = "Energy(Wh)"
    'I = I + 1: mStrABTS40Title(I) = "Power"
    'I = I + 1: mStrABTS40Title(I) = "Load"
    i = i + 1: mStrABTS40Title(i) = "Volt_Rate"
    i = i + 1: mStrABTS40Title(i) = "2ndV_Rate"
    i = i + 1: mStrABTS40Title(i) = "Volt_Rate2"
    i = i + 1: mStrABTS40Title(i) = "Temp_Rate"
    i = i + 1: mStrABTS40Title(i) = "Pres_Rate"
    i = i + 1: mStrABTS40Title(i) = "Current_Rate"
    i = i + 1: mStrABTS40Title(i) = "Power_Rate"
    'I = I + 1: mStrABTS40Title(I) = "Pulse_V"
    'I = I + 1: mStrABTS40Title(I) = "Pulse_I"
    mABTS40TitleEnd = i
End Sub

Sub SetTitleStatistic()
    Dim i As Integer
    i = 0
    i = i + 1: mStrABTS40Title(i) = gbCycleIndexName
    i = i + 1: mStrABTS40Title(i) = gbChargeCapacityName
    i = i + 1: mStrABTS40Title(i) = gbDischargeCapacityName
    i = i + 1: mStrABTS40Title(i) = gbChargeEnergyName
    i = i + 1: mStrABTS40Title(i) = gbDischargeEnergyName
    i = i + 1: mStrABTS40Title(i) = gbVmaxOnCycleName
    i = i + 1: mStrABTS40Title(i) = "BeginVoltage(V)"
    i = i + 1: mStrABTS40Title(i) = "EndVoltage(V)"
    'I = I + 1: mStrABTS40Title(I) = "Coulomb Efficiency"
    'I = I + 1: mStrABTS40Title(I) = "Energy Efficiency"
    'I = I + 1: mStrABTS40Title(I) = "Delivered Capacity"
    'I = I + 1: mStrABTS40Title(I) = "Delivered Energy"
    mABTS40TitleEnd = i
End Sub

Sub SetTitle360Channel()
    Dim i As Integer
    i = 0
    i = i + 1: mStrABTS40Title(i) = gbDataPointName
    i = i + 1: mStrABTS40Title(i) = gbTestTimeName
    i = i + 1: mStrABTS40Title(i) = gbCurrentName
    i = i + 1: mStrABTS40Title(i) = gbVoltageName
    i = i + 1: mStrABTS40Title(i) = "Capacity(Ah)"
    i = i + 1: mStrABTS40Title(i) = gbCycleIndexName
    i = i + 1: mStrABTS40Title(i) = gbStepIndexName
    i = i + 1: mStrABTS40Title(i) = "Power(W)"
    i = i + 1: mStrABTS40Title(i) = "Load(Ohm)"
    i = i + 1: mStrABTS40Title(i) = "Volt_Rate (V/s)"
    i = i + 1: mStrABTS40Title(i) = "Volt_Rate2 (V/s)"
    mABTS40TitleEnd = i
End Sub

Sub SetTitle360Statistic()
    Call SetTitleStatistic
End Sub

Attribute VB_Name = "mAppGlobals"
'Option Private Module
Option Explicit

''Define global constants here.  These are used throughout the application.
''Public Const gDell As Boolean = True 'Disable if not for Dell
Public Const gCustom As String = ""  'Customer ID String Added 3.21.01 after
Public gExternCall As Boolean
Public Const gszAPPVERSION As String = "3.21.09 "             ''' Version used in About box
Public Const gszAPPTITLE As String = "Arbin Mits Data Pro "            ''' Title for application

Public Const gszALERTTITLE As String = "Arbin Data Pro Alert"          ''' Title for all alerts
Public Const gszMINBUILD_VERSION As Byte = 8          ''' Minimum build version to show users
Public Const gMenuNameArbin_Data As String = "&Arbin Data"
''Public Const gfDEBUGMODE As Boolean = True                    ''' Debug Flag
Public Const gCount As Integer = 3000   ''' sleep 10 ms process this rows (2-15-2002)
Public gszPlatform As String            ''' Left three characters of Application.OS
Public gszPathSeparator As String * 1     ''' Path separator of the OS
Public gbIsInitGlobalVars As Boolean
Public gbNeedRefreshImportDialog As Boolean
Public gbIsImporting As Boolean
'Global gbDataImported As Boolean

Public gDefaultWorkDrive As String   ' Default Work Drive that can be writable

Public gDB As DAO.Database, gbDBIsOpen As Boolean

Public gAuxiDataTypeTitle(8, 1) As String ' Auxiliary Data type title for X and dX/dt
Public gAuxiDataTypeUnit(8, 1) As String


Public Const glMaxSeriesRowsNum As Long = 31995   '31999
Public Const glMaxRowsNum As Long = 63990   '65535  '--max rows in one sheet
Public Const giMaxColumnsNum As Integer = 256
Public gfLastCycleTimeDayValue As Single

Public gptImportChannelCount As Integer
Public gptPlotType As Integer, gptPlotTypeIndex As Integer
Public gptTimeUnit As String, gptTimeUnitTitle As String, gptTimeUnitIndex As Integer
Public giCell_Number As Integer
'test technique flag
Public gptTechnique As String
Public gLastTestName As String
Public gLastSelectedChannel(17) As String * 5
Public gLatestTestName As String
Public gbExistDataSheetAfterImport As String

Public gbCheckChNormal As Boolean
Public gbCheckChAuxiliary As Boolean
Public gbCheckChStatistics As Boolean
Public gbCheckChSmartBattery As Boolean
Public gbCheckCellAll As Boolean
Public gbCheckCellAuxiliary As Boolean

Public gDataFilter As Boolean

Public gbExistAuxiliary As Boolean
Public gbExistChStatistics As Boolean
Public gbExistMultiCell As Boolean
Public gbExistSmartBattery As Boolean

Public gbZoom As Single

Public Type gMyTypeOptionEdit
    OptionID As Byte
    NumEdit1 As Long
    NumEdit2 As Long
    FromEdit As Long
    ToEdit As Long
End Type

Public Type gMyTypeGlobal_Table
    Test_ID As Long
    Test_Name As String
    Channel_Index As Integer
    Start_DateTime As Double
    DAQ_Index As Integer
    Channel_Type As Integer
    Creator As String
    Comments As String
    Schedule_File_Name As String
    Channel_Number As Integer
    Cell_Number As Integer
    Mapped_Aux_Number(8) As Integer
     '0=Mapped_Aux_Voltage_Number
     '1=Mapped_Aux_Temperature_Number
     '2=Mapped_Aux_Pressure_Number
     '3=Mapped_Aux_PH_Number
     '4=Mapped_Aux_Flow_Rate_CNumber
     '5=Mapped_Aux_Concentration_CNumber
     '6=Mapped_Aux_Digital_Input_CNumber
     '7=Mapped_Aux_Digital_Output_CNumber
     '8=Mapped_Aux_Relative_Humidity_CNumber
    Applications_Path As String
    Log_Data_Flag(5) As Boolean
     '0=Log_ChanStat_Data_Flag
     '1=Log_CellNormal_Data_Flag
     '2=Log_CellStat_Data_Flag
     '3=Log_Aux_Data_Flag
     '4=Log_Event_Data_Flag
     '5=Log_Smart_Battery_Data_Flag
'     Grade As Integer
     Item_ID As String
End Type

'-----------------------------------Custom Package-------------------------------
Public Const gbABTS40TitleOn As Boolean = False
Public Const gbPPGOn As Boolean = False
Public giPPGOptionValue As Integer
Public gIsImportFormLoaded As Boolean

Public gCommandHistory As Boolean
Public gRefreshPrecess As Boolean
Public gAutoRefreshEnable As Boolean
Public gCountRefresh As Integer
Public gsIntervalofRefresh As String
Public gwksActivePlotName As String
Public gMenuRefresh As Boolean
Public gHasPloting As Boolean
Public gSleepTime As Long 'sleep time for import process while running Mits Pro

Public gArea As Single
Public gGroupCalculate As Boolean
Public gstrGroupCurrent As String

Public gSmartBatteryStat As Boolean

Public gAuxRate As Boolean
Public gToyota As Boolean
Public gAddToWorkBook As Boolean
Attribute VB_Name = "mExtern"
Option Explicit
Function ExImportData(InputFileName As String, OutputFileName As String) As Boolean
ExImportData = False
Call InitGlobalVars
Call ExDataImportForm.ImportData(InputFileName, OutputFileName)
Sleep 1000
On Error GoTo Err_Exit
ExImportData = True
Exit Function
Err_Exit:
MsgBox "Arbin Data Pro Error:" & Err.Number & vbCrLf & Err.Description
End Function

Sub ExImportForm(InputFileName As String, OutputFileName As String)
Call InitGlobalVars
ExDataImportForm.SetInput (InputFileName)
ExDataImportForm.SetOutput (OutputFileName)
ExDataImportForm.Show
End Sub

Attribute VB_Name = "mGamery"
Option Explicit

Sub ImportGameryResultsDataDialog()
    Dim fileToOpen As Variant
    Dim iEnd As Integer
    Dim iLoop As Integer, jLoop As Integer
    Dim strSheetChName As String
    Dim strFileName As String, strwkBookName As String
    Dim wkbook As Excel.Workbook, wksheet As Excel.Worksheet, newWS As Excel.Worksheet
    
    If gbIsImporting Then Exit Sub
    On Error GoTo 0
    fileToOpen = Application.GetOpenFilename("Gamery Files (*.dta), *.dta", , "Open Gamery Result File")
    If fileToOpen <> False Then
    Workbooks.Open (fileToOpen)
    Application.ScreenUpdating = False
    Application.DisplayAlerts = False
        'Delete sheet1,2,3
        Call gfDeleteDefaultSheet123(ActiveWorkbook)
        Set wksheet = ActiveSheet
        wksheet.Range("A1:M43").Copy
        Set newWS = Worksheets.Add
        newWS.Name = "Info"
        wksheet.Paste Destination:=newWS.Range("A1:M43")
        wksheet.Range("A1:M43").Delete
        wksheet.Columns("A:A").Delete
        'Save
        fileToOpen = Left(ActiveWorkbook.Name, Len(ActiveWorkbook.Name) - 3) & "xls"
        On Error GoTo ImportGameryResultsDataDialog_Err
        Application.StatusBar = "Save Data to " & fileToOpen & " file."
        ActiveWorkbook.SaveAs filename:=fileToOpen, FileFormat:=xlNormal

    Application.DisplayAlerts = True
    Application.ScreenUpdating = True
    Application.StatusBar = fileToOpen & " Gamry Files Imported."
    End If
Exit Sub
ImportGameryResultsDataDialog_Err:
MsgBox Err.Description
Err.Clear
End Sub

' InQuest injected base64 decoded content
' -.+-V'
' zR'u
' )^J)
' +-jw
' zR'u
' zR'Z
' nxZ+=
' nxZ+=
' Zr+r
' YEj[
' -.+-V'
' wfT*%
' M.4E
' @'j\

INQUEST-PP=macro
