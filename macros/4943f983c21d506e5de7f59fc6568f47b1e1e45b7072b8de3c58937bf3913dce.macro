Attribute VB_Name = "DGLink"
Option Explicit
'PLEASE DON'T MODIFY THIS MODULE -- IT IS REDUNDANTLY SHARED IN MULTIPLE PROJECTS
'AND WE WOULD WANT TO AVOID DIVERGENCE OF CONTENT
'TO MODIFY:  Modify shared\core\SSUtils\coshSSI\DGLink.bas and then update in all spreadsheets, after seeking team/mgmt approval

'This is the DGLink spreadsheet module - some utilities needed to load DG spreadsheet environment
Private Const HKEY_CURRENT_USER = &H80000001
Private Const HKEY_LOCAL_MACHINE = &H80000002
 
Private Const KEY_READ = &H20019
Private Const REG_SZ = 1

Private Const SSIOBJ = "coshSSI.SSI"

#If Win64 Then
Private Const bOffice64 As Boolean = True
Private Const sLoaderDLL As String = "coshSSLoader64.dll"
Private Const sLoaderDebugPath As String = "..\..\..\coshSSLoader\bin\x64\Release\"
#Else
Private Const bOffice64 As Boolean = False
Private Const sLoaderDLL As String = "coshSSLoader32.dll"
Private Const sLoaderDebugPath As String = "..\..\..\coshSSLoader\bin\x86\Release\"
#End If


#If VBA7 Then

#If Win64 Then
'Added C-Style function import from coshSSLoader module as a different way to load SSI object in .NET 4
Private Declare PtrSafe Sub SSLibGetAppDomain Lib "coshSSLoader64.dll" Alias "GetAppDomain" (ByRef ad As Object)
#Else
Private Declare PtrSafe Sub SSLibGetAppDomain Lib "coshSSLoader32.dll" Alias "GetAppDomain" (ByRef ad As Object)
#End If

Private Declare PtrSafe Function RegOpenKeyEx Lib "advapi32.dll" Alias "RegOpenKeyExA" ( _
    ByVal hKey As LongPtr, _
    ByVal lpSubKey As String, _
    ByVal ulOptions As Long, _
    ByVal samDesired As Long, _
    phkResult As LongPtr) As Long

' Note with RegQueryValueEx that if you declare the lpData parameter as String, you must pass it By Value.
Private Declare PtrSafe Function RegQueryValueEx Lib "advapi32.dll" Alias "RegQueryValueExA" ( _
    ByVal hKey As LongPtr, _
    ByVal lpValueName As String, _
    ByVal lpReserved As LongPtr, _
    lpType As Long, _
    lpData As Any, _
    lpcbData As Long) As Long
 
Private Declare PtrSafe Function RegCloseKey Lib "advapi32.dll" ( _
    ByVal hKey As LongPtr) As Long
    
Private Sub ReadRegistry( _
  hKey As LongPtr, _
  subkey As String, _
  ValueVar As String, _
  DataVar As String)
        
  Dim datatype As Long  ' receives data type of read value
  Dim DataLen As Long  ' receives length of returned data
  Dim retval As Long  ' return value
        
  ' hKey: receives a handle to the newly created or opened registry key
  ' subkey: name of the subkey to open
  ' DataVar: receives data read from the registry
  ' datatype: receives data type of read value
  ' DataLen: receives length of returned data
  ' retval: return value
 
  ' Open the registry key.
  retval = RegOpenKeyEx(hKey, subkey, 0, KEY_READ, hKey)
  If retval = 0 Then
    ' Create buffer to receive the incoming data.
    DataLen = 255
    DataVar = Space(DataLen)
    ' Read the value from the registry key.
    retval = RegQueryValueEx(hKey, ValueVar, 0, datatype, ByVal DataVar, DataLen)
    ' Only attempt to display the data if it is in fact a string.
    If datatype = REG_SZ Then
      ' Remove zero termination and empty space from the buffer.
      DataVar = Left(DataVar, DataLen - 1)
    End If
  End If
 
  ' Close the registry key.
  retval = RegCloseKey(hKey)
  
End Sub
 
#Else
'Note:  Ignore the "Compile error" warnings about this section if you edit this file
'using a 64-bit version of Office
'http://support.microsoft.com/kb/983043
#If Win64 Then
'Added C-Style function import from coshSSI Loader module as a different way to load SSI object in .NET 4
Private Declare Sub SSLibGetAppDomain Lib "coshSSLoader64.dll" Alias "GetAppDomain" (ByRef ad As Object)
#Else
Private Declare Sub SSLibGetAppDomain Lib "coshSSLoader32.dll" Alias "GetAppDomain" (ByRef ad As Object)
#End If


Private Declare Function RegOpenKeyEx Lib "advapi32.dll" Alias "RegOpenKeyExA" ( _
    ByVal hKey As Long, _
    ByVal lpSubKey As String, _
    ByVal ulOptions As Long, _
    ByVal samDesired As Long, _
    phkResult As Long) As Long
    
' Note with RegQueryValueEx that if you declare the lpData parameter as String, you must pass it By Value.
Private Declare Function RegQueryValueEx Lib "advapi32.dll" Alias "RegQueryValueExA" ( _
    ByVal hKey As Long, _
    ByVal lpValueName As String, _
    ByVal lpReserved As Long, _
    lpType As Long, _
    lpData As Any, _
    lpcbData As Long) As Long
    
Declare Function RegCloseKey Lib "advapi32.dll" ( _
    ByVal hKey As Long) As Long

Private Sub ReadRegistry( _
  hKey As Long, _
  subkey As String, _
  ValueVar As String, _
  DataVar As String)
        
  Dim datatype As Long  ' receives data type of read value
  Dim DataLen As Long  ' receives length of returned data
  Dim retval As Long  ' return value
        
  ' hKey: receives a handle to the newly created or opened registry key
  ' subkey: name of the subkey to open
  ' DataVar: receives data read from the registry
  ' datatype: receives data type of read value
  ' DataLen: receives length of returned data
  ' retval: return value
 
  ' Open the registry key.
  retval = RegOpenKeyEx(hKey, subkey, 0, KEY_READ, hKey)
  If retval = 0 Then
    ' Create buffer to receive the incoming data.
    DataLen = 255
    DataVar = Space(DataLen)
    ' Read the value from the registry key.
    retval = RegQueryValueEx(hKey, ValueVar, 0, datatype, ByVal DataVar, DataLen)
    ' Only attempt to display the data if it is in fact a string.
    If datatype = REG_SZ Then
      ' Remove zero termination and empty space from the buffer.
      DataVar = Left(DataVar, DataLen - 1)
    End If
  End If
 
  ' Close the registry key.
  retval = RegCloseKey(hKey)
  
End Sub
#End If


Private Function GetLocationSSI() As String
    'Find coshSSI on this machine if possible
   
    Dim PathVar   As String
    Dim ValueVar  As String
    Dim DataVar   As String
    Dim sEAPath As String
    Dim sPath As String
    
    sPath = GetSSIPathFromFile
    If (Len(sPath) > 0) And Dir(sPath) <> "" Then
        GetLocationSSI = sPath
        Exit Function
    End If
    
    PathVar = "Software\Digital Gateway Inc\NET\e-automate\Application Settings"
    ValueVar = "ExePath"
    
    Call ReadRegistry(HKEY_CURRENT_USER, PathVar, ValueVar, DataVar)
    sEAPath = DataVar
    
    sPath = sEAPath & "\Utilities\coshSSI.dll"
    
    If Dir(sPath) <> "" Then
        GetLocationSSI = sPath
        Exit Function
    End If
    
    sPath = sEAPath & "\coshSSI.dll"
    
    If Dir(sPath) <> "" Then
        GetLocationSSI = sPath
        Exit Function
    End If
    
    sPath = "C:\Program Files (x86)\ECi\e-automate" & "\coshSSI.dll"
    
    If Dir(sPath) <> "" Then
        GetLocationSSI = sPath
        Exit Function
    End If
    
    sPath = ThisWorkbook.Path & "\coshSSI.dll"
    
    If Dir(sPath) <> "" Then
        GetLocationSSI = sPath
        Exit Function
    End If
    
    sPath = sEAPath & "\..\..\..\..\shared\SSUtils\coshSSI\bin\Debug\coshSSI.dll"
    
    If Dir(sPath) <> "" Then
        GetLocationSSI = sPath
        Exit Function
    End If
End Function

Private Function GetSSIPathFromFile() As String

On Error GoTo e

    Dim sPath As String
    
    Open ThisWorkbook.Path & "\SSIPath.dat" For Input As #1
    Line Input #1, sPath
    Close #1
    
    If UCase(sPath) = "LOCAL" Then
        GetSSIPathFromFile = ThisWorkbook.Path & "\coshSSI.dll"
    ElseIf Replace(UCase(sPath), " ", "") = "LOCALUTILITIES" Then
        GetSSIPathFromFile = ThisWorkbook.Path & "\Utilities\coshSSI.dll"
    ElseIf Replace(UCase(sPath), " ", "") = "DEBUG" Then
        GetSSIPathFromFile = ThisWorkbook.Path & "\..\..\..\..\shared\core\SSUtils\coshSSI\bin\Debug\coshSSI.dll"
    Else
        GetSSIPathFromFile = sPath
    End If
    
    Exit Function
e:
    GetSSIPathFromFile = ""
    
End Function

'Load and initialize the SSI object
Public Function LoadSSI() As Object
On Error GoTo NetLoadFailure
    
    Dim sLocationSSI As String
    sLocationSSI = GetLocationSSI()
    
    If Len(sLocationSSI) = 0 Then
        Err.Raise 5555, "Refresh", "DGI SSI not found."
    End If
    
    Set LoadSSI = LoadNETSSI(sLocationSSI)
    
    LoadSSI.ExcelAppInit Application
    
    Exit Function
'----------------------------------------------
NetLoadFailure:
    Dim sErr1 As String
    sErr1 = Err.Description
On Error GoTo COMLoadFailure
    'attempt to load from COM interop
    Set LoadSSI = CreateObject(SSIOBJ)
    LoadSSI.ExcelAppInit Application
    Exit Function
COMLoadFailure:
    Err.Raise 5555, "Refresh", "The spreadsheet interface could not be loaded.  NET:" & sErr1 & "-:- COM:" & Err.Description
End Function


'this version was an attempt at using manifest file.  It never worked.
'Private Function LoadNETSSI(ByVal sLocationSSI as String) As Object
'    Dim actCtx As New Microsoft.Windows.actCtx
'    actCtx.Manifest = "C:\Path\to\Some.manifest"
'    LoadNETSSI = actCtx.CreateObject("coshSSI.VBA")
'End Function

'This was an approach that worked fine for .NET 2.0, but due to API changes did not work with .NET 4
'Public Function LoadNETSSI(ByVal sLocationSSI As String) As Object
'On Error GoTo NetLoadFailure
'    'attempt to load .NET code
'    Dim rt As mscoree.CorRuntimeHost
'    Dim unk As IUnknown
'    Dim ad As mscorlib.AppDomain
'
'    Set rt = New mscoree.CorRuntimeHost
'    rt.Start
'    rt.GetDefaultDomain unk
'    Set ad = unk
'
'    Set LoadNETSSI = ad.CreateInstanceFrom(sLocationSSI, SSIOBJ).Unwrap
'End Function

'Load .NET object from the specified location
'this version uses a DLLImport approach, accessing a C-style export from coshSSI.dll.  It was tested to work with .NET 4 to overcome issues with the API changes
Private Function LoadNETSSI(ByVal sLocationSSI As String) As Object
    
    Dim sPrevDir As String
    sPrevDir = CurDir
    Dim sAppDir As String
    
    sAppDir = Replace(sLocationSSI, "coshSSI.dll", "")
    
    If Dir(sAppDir & sLoaderDLL) = "" Then
        If Dir(sAppDir & sLoaderDebugPath & sLoaderDLL) <> "" Then
            sAppDir = sAppDir & sLoaderDebugPath
        End If
    End If
    
    Dim ad As mscorlib.AppDomain
    Dim bSuccess As Boolean
    bSuccess = False
On Error GoTo cleanup
    
    ChDir sAppDir
    ChDrive Left(sAppDir, 1)
    
    SSLibGetAppDomain ad
    
    Set LoadNETSSI = ad.CreateInstanceFrom(sLocationSSI, SSIOBJ).Unwrap
    bSuccess = True
cleanup:
    On Error Resume Next
    ChDir sPrevDir
    ChDrive Left(sPrevDir, 1)
    
    On Error GoTo 0
    If Not bSuccess Then
        Err.Raise Err.Number, Err.Source, Err.Description
    End If
End Function













Attribute VB_Name = "Module1"
Option Explicit

Public Sub Refresh(ByRef oSheet As Object)
On Error GoTo Ex
    Dim ssi As Object
    Set ssi = LoadSSI()
    ssi.ExcelRefresh Application, oSheet
    Exit Sub
'----------------------------------------------
Ex:
    MsgBox Err.Description
End Sub












Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "cmdRefresh, 2, 0, MSForms, CommandButton"
Private Sub cmdRefresh_Click()
    Refresh Me
End Sub


Attribute VB_Name = "Sheet2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True


INQUEST-PP=macro
