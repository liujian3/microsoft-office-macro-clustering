Attribute VB_Name = "Feuil1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Feuil11"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Feuil12"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Feuil13"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Feuil2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
'Private Sub Worksheet_Change(ByVal Target As Range)
'If Not IsEmpty(Target.Value) Then
 '   If Target.Value = "n" Then
  '      Range(Target.Address).Value = Replace(Target.Value, "n", 0)
   '     Range(Target.Address).Font.Color = 255
  '  End If
'End If
't = Target.Address
'End Sub

Attribute VB_Name = "Feuil3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Feuil4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Feuil5"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Feuil6"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Feuil7"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Feuil8"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Module1"
Sub FormeCancelGreen()
Attribute FormeCancelGreen.VB_ProcData.VB_Invoke_Func = "|fffd|\n14"
'
' Macro1 Macro
'
' Touche de raccourci du clavier: Ctrl+|fffd|
'
    ActiveCell.Select
    Selection.FormatConditions.Delete
    With Selection.Interior
        .Pattern = xlSolid
        .PatternColorIndex = xlAutomatic
        .Color = 5296274
        .TintAndShade = 0
        .PatternTintAndShade = 0
    End With
    With Selection.Font
        .Color = -16776961
        .TintAndShade = 0
    End With
End Sub
Sub FormeCancelOrange()
ActiveCell.Select
Selection.FormatConditions.Delete
    With Selection.Interior
        .Pattern = xlSolid
        .PatternColorIndex = xlAutomatic
        .Color = 49407
        .TintAndShade = 0
        .PatternTintAndShade = 0
    End With
    With Selection.Font
        .Color = -16776961
        .TintAndShade = 0
    End With
End Sub
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Workbook_BeforeClose(Cancel As Boolean)

    RemoveToolbar TB_NAME, TB_NAME_SAP

End Sub

Private Sub Workbook_Open()
    RemoveToolbar TB_NAME
    CreateToolBar TB_NAME

'    If UCase(Left(ActiveSheet.Name, 12)) = UCase("DATA Semaine") Then
'        CreateToolBar TB_NAME
'    ElseIf UCase(Left(ActiveSheet.Name, Len("Sommaire Semaine"))) = UCase("Sommaire Semaine") Then
'        CreateToolBar TB_NAME_SAP
'    End If
End Sub

Private Sub Workbook_SheetActivate(ByVal Sh As Object)
    
    RemoveToolbar TB_NAME

    CreateToolBar TB_NAME

'    If UCase(Left(Sh.Name, 12)) = UCase("DATA Semaine") Then
'        CreateToolBar TB_NAME
'    ElseIf UCase(Left(Sh.Name, Len("Sommaire Semaine"))) = UCase("Sommaire Semaine") Then
'        CreateToolBar TB_NAME_SAP
'    End If

End Sub



Attribute VB_Name = "frmSelectDate"
Attribute VB_Base = "0{35E59BB0-0C3E-4F10-A2F6-791D4A3B86BC}{45E31BDD-15AF-4686-833A-A29BD805768C}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False







Option Explicit

Private Sub cmdAnnuler_Click()
    Me.Hide
End Sub

Private Sub cmdOK_Click()
    Me.txtOK = vbOK
    Me.Hide
End Sub

Private Sub UserForm_Activate()
    Me.dtEnCours.Value = Now
End Sub

Attribute VB_Name = "modDeclaration"
Option Explicit

Public Const DSN_PLANIFICATION_MS = "ODBC;Provider=MSDASQL.1;Driver=SQL Server;Server=sthsqlprd;Database=PlanificationMS;Trusted_Connection=Yes"


Public gsToolBarName As String
Public gcmbToolbar As CommandBar
Public gbtnExp As CommandBarButton
Public gbtnInv As CommandBarButton
Public gbtnAdd As CommandBarButton
Public gbtnExcel As CommandBarButton

Public Const CODE_DATE_PLUS_1 = 2


Public Const TB_NAME = "SAP"

'Public Const SHEET_NAME_DATA1 = "DATA Semaine 1"
'Public Const SHEET_NAME_DATA2 = "DATA Semaine 2"
'Public Const SHEET_NAME_DATA3 = "DATA Semaine 3"
'Public Const SHEET_NAME_DATA4 = "DATA Semaine 4"

'Public Const SHEET_NAME_1 = "Hrs travaill|fffd|es - Semaine 1"
'Public Const SHEET_NAME_2 = "Hrs travaill|fffd|es - Semaine 2"
'Public Const SHEET_NAME_3 = "Hrs travaill|fffd|es - Semaine 3"
'Public Const SHEET_NAME_4 = "Hrs travaill|fffd|es - Semaine 4"

Public Const COL_HEADER_DATA = 3


Public DoNotUpdate As Boolean

Public gbRefresh As Boolean

Public garySheet(20) As Boolean


Public aryHeure() As Data

Public Type Data
    ID As Long
    Date As Date
    Heures As Date
    HeuresSoir As String
    Repas As Boolean
    RepasSoir As Boolean
End Type



Attribute VB_Name = "modGeneral"
Option Explicit


Public Function CalculEmballage(ByVal Inv As Range, _
    ByVal ReelA As Range, ByVal MaisA As Range, ByVal ExpA As Range, _
    ByVal ReelF As Range, ByVal MaisF As Range, ByVal ExpF As Range, _
    Optional ByVal ReelF2 As Range, Optional ByVal MaisF2 As Range, Optional ByVal ExpF2 As Range, _
    Optional ByVal ReelF3 As Range, Optional ByVal MaisF3 As Range, Optional ByVal ExpF3 As Range, _
    Optional ByVal Plafond As Range, Optional ByVal Plancher As Range)
    

    On Error Resume Next
    
    Dim dDemande As Double
    If Not ReelF3 Is Nothing And Not MaisF3 Is Nothing And Not ExpF3 Is Nothing Then
            dDemande = (WorksheetFunction.Max(ReelA.Value, MaisA.Value) + ExpA.Value) + ((WorksheetFunction.Max(ReelF.Value, MaisF.Value) + ExpF.Value) + (WorksheetFunction.Max(ReelF2.Value, MaisF2.Value) + ExpF2.Value) + (WorksheetFunction.Max(ReelF3.Value, MaisF3.Value) + ExpF3.Value) - Inv.Value)
        Else
        If Not ReelF2 Is Nothing And Not MaisF2 Is Nothing And Not ExpF2 Is Nothing Then
            dDemande = (WorksheetFunction.Max(ReelA.Value, MaisA.Value) + ExpA.Value) + ((WorksheetFunction.Max(ReelF.Value, MaisF.Value) + ExpF.Value) + (WorksheetFunction.Max(ReelF2.Value, MaisF2.Value) + ExpF2.Value) - Inv.Value)
        Else
            dDemande = (WorksheetFunction.Max(ReelA.Value, MaisA.Value) + ExpA.Value) + ((WorksheetFunction.Max(ReelF.Value, MaisF.Value) + ExpF.Value) - Inv.Value)
        End If
    End If
    
    If dDemande < 0 Then
        CalculEmballage = 0
    Else
        If Not Plancher Is Nothing Then
            CalculEmballage = WorksheetFunction.RoundDown((dDemande \ Plancher), 0) * Plancher
        ElseIf Not Plafond Is Nothing Then
            CalculEmballage = WorksheetFunction.Ceiling(dDemande, Plafond)
        Else
            CalculEmballage = dDemande
        End If
    End If
    
    Exit Function
    
Err_CalculEmballage:
    MsgBox Err.Description, vbCritical, "Erreur"
End Function


Public Function CalculNbrArticle(ByVal psSheetName As String, ByVal plDebut As Long) As Long

    On Error GoTo Err_CalculNbrArticle
    
    Dim shtData As Worksheet
    Dim lDebutRow As Long
    Dim sDate As String
    Dim lNbrArticle As Long
    Dim lRow As Long
    
    Set shtData = ThisWorkbook.Worksheets(psSheetName)
'    sDate = Format(shtData.Rows.Cells(plDebut, "C"), "yyyymmdd")
    lNbrArticle = 0
    
    For lRow = plDebut To shtData.UsedRange.Rows.Count
        'If Format(shtData.Rows.Cells(lRow, "C"), "yyyymmdd") <> sDate Then
        If Len(Trim(shtData.Rows.Cells(lRow, "A"))) = 0 Then
            Exit For
        Else
            lNbrArticle = lNbrArticle + 1
        End If
    Next
    
    CalculNbrArticle = lNbrArticle
    
    Exit Function
    Resume
Err_CalculNbrArticle:
    MsgBox Err.Description, vbExclamation, "Erreur - CalculNbrArticle"
End Function

Public Sub CreationExport()

    On Error GoTo Err_CreationExport
    
    Dim shtExport As Worksheet
    Dim shtData As Worksheet
    Dim Col As Long
    Dim Ok As Boolean
    Dim row As Long
    Dim RowExport As Long
    Dim NbrJour As Integer
    Dim NbrArr As Integer
    Dim Try As Integer
    
    'On d|fffd|sactive le calcul, plus rapide
    Application.ScreenUpdating = False
    Application.Calculation = xlManual
     
    NbrJour = InputBox("Combien de jour voulez-vous avoir?", "Nombre de jour", 33)
    NbrArr = InputBox("Combien de jour arriere voulez-vous avoir?", "Nombre de jour", 5)
    
    '----------------------------------------------------------------------------------------------------------------
    'PRODUCTION
    '----------------------------------------------------------------------------------------------------------------
    Set shtExport = ThisWorkbook.Worksheets("Export")
    Set shtData = ThisWorkbook.Worksheets("Production")
    Ok = False
    RowExport = 2
    
    'On efface les donn|fffd|es, on garde seulement jour-5 jusqu'a NbrJour
    shtExport.Range("A2" & ":C" & shtExport.UsedRange.Rows.Count).ClearContents
    
    Try = 0
    Ok = False
    While Ok = False Or Try = 10
        'On recherche la date du jour - 5
        For Col = 2 To shtData.Columns.Count
            If Format(shtData.Rows.Cells(1, Col), "yyyymmdd") = Format(Now - NbrArr + Try, "yyyymmdd") Then
                 Ok = True
                 Exit For
             End If
        Next
        Try = Try + 1
    Wend
    
    If Ok = True Then
        For Col = Col To shtData.Columns.Count Step 7 'Col + ((33 * 6)) Step 6  'entre deux dates 6 cases
            If Format(shtData.Cells(1, Col).Value, "yyyyMMdd") <= Format(Now + NbrJour + Try, "yyyyMMdd") Then
                For row = 3 To shtData.UsedRange.Rows.Count
                    If Len(Trim(shtData.Cells(row, "A").Value)) > 0 And shtData.Cells(row, Col).Value > 0 Then
                        shtExport.Cells(RowExport, "A").Value = shtData.Cells(row, "A").Value
                        shtExport.Cells(RowExport, "B").Value = shtData.Cells(1, Col).Value
                        shtExport.Cells(RowExport, "C").Value = shtData.Cells(row, Col).Value
                        
                        RowExport = RowExport + 1
                    End If
                Next
            Else
                Exit For
            End If
        Next
        
        '----------------------------------------------------------------------------------------------------------------
        'MTO
        'On recherche la date du jour - 5
        '----------------------------------------------------------------------------------------------------------------
        Set shtData = ThisWorkbook.Worksheets("MTO")
        Ok = False
    
        Try = 0
        Ok = False
        While Ok = False Or Try = 10
            For Col = 2 To shtData.Columns.Count
                If Format(shtData.Rows.Cells(1, Col), "yyyymmdd") = Format(Now - NbrArr + Try, "yyyymmdd") Then
                     Ok = True
                     Exit For
                 End If
            Next
            Try = Try + 1
        Wend
        
        For Col = Col To shtData.Columns.Count Step 5
            If Format(shtData.Cells(1, Col).Value, "yyyyMMdd") <= Format(Now + NbrJour + Try, "yyyyMMdd") Then
                For row = 3 To shtData.UsedRange.Rows.Count
                    If Len(Trim(shtData.Cells(row, "A").Value)) > 0 And shtData.Cells(row, Col).Value > 0 Then
                        shtExport.Cells(RowExport, "A").Value = shtData.Cells(row, "A").Value
                        shtExport.Cells(RowExport, "B").Value = shtData.Cells(1, Col).Value
                        shtExport.Cells(RowExport, "C").Value = shtData.Cells(row, Col).Value
                        
                        RowExport = RowExport + 1
                    End If
                Next
            Else
                Exit For
            End If
        Next
        
        If Ok = True Then
            '----------------------------------------------------------------------------------------------------------------
            'SF
            'On recherche la date du jour - 5
            '----------------------------------------------------------------------------------------------------------------
            Set shtData = ThisWorkbook.Worksheets("SF")
            Ok = False
        
            Try = 0
            Ok = False
            While Ok = False Or Try = 10
                For Col = 2 To shtData.Columns.Count
                    If Format(shtData.Rows.Cells(1, Col), "yyyymmdd") = Format(Now - NbrArr + Try, "yyyymmdd") Then
                         Ok = True
                         Exit For
                     End If
                Next
                Try = Try + 1
            Wend
            
            For Col = Col To shtData.Columns.Count Step 5
                If Format(shtData.Cells(1, Col).Value, "yyyyMMdd") <= Format(Now + NbrJour + Try, "yyyyMMdd") Then
                    For row = 3 To shtData.UsedRange.Rows.Count
                        If shtData.Application.WorksheetFunction.IsNA(shtData.Cells(row, Col).Value) = False Then
                            If Len(Trim(shtData.Cells(row, "A").Value)) > 0 And shtData.Cells(row, Col).Value > 0 Then
                                shtExport.Cells(RowExport, "A").Value = shtData.Cells(row, "A").Value
                                shtExport.Cells(RowExport, "B").Value = shtData.Cells(1, Col).Value
                                shtExport.Cells(RowExport, "C").Value = shtData.Cells(row, Col).Value
                                
                                RowExport = RowExport + 1
                            End If
                        End If
                    Next
                Else
                    Exit For
                End If
            Next
            
            If Ok = True Then
                MsgBox "Cr|fffd|ation de l'onglet export termin|fffd|! le syst|fffd|me va exporter maintenant vers la base Pre-SAP", vbExclamation, "Succ|fffd|s"
            Else
                MsgBox "Impossible de trouver la colonne d'inventaire, v|fffd|rifier la date dans la ligne 2, elle doit si trouver!", vbCritical, "Erreur"
            End If
            
            If Ok = True Then
                'AjoutInfoExportDansBd
                AjoutInfoExportDansBd_MS_Planification_Production
                MsgBox "Export compl|fffd|t|fffd| vers la base Pre-SAP", vbExclamation, "Succ|fffd|s"
            Else
                MsgBox "Impossible de trouver la colonne d'inventaire, v|fffd|rifier la date dans la ligne 2, elle doit si trouver!", vbCritical, "Erreur"
            End If
        Else
            MsgBox "Impossible de trouver la colonne d'inventaire, v|fffd|rifier la date dans la ligne 2, elle doit si trouver!", vbCritical, "Erreur"
        End If
    Else
        MsgBox "Impossible de trouver la colonne d'inventaire, v|fffd|rifier la date dans la ligne 1, elle doit si trouver!", vbCritical, "Erreur"
    End If
    
Resume_CreationExport:
    Application.ScreenUpdating = True
    Application.Calculation = xlAutomatic
    
    Exit Sub
    Resume
Err_CreationExport:
    MsgBox Err.Description, vbExclamation, "Erreur - CreationExport"
    Resume Resume_CreationExport
End Sub
Private Sub AjoutInfoExportDansBd_MS_Planification_Production()

    Dim sConnec As String
    Dim cn As New ADODB.Connection
    Dim r As New ADODB.Recordset
    Dim shtData As Worksheet
    Dim row As Integer
    Dim SQL As String
    Dim vAuj As Date
    Dim Date_J_1 As Date
    Dim Date_J_2 As Date
    Dim Date_J_3 As Date
    Dim Date_Planif As Date
    Dim Date_Planif_1 As Date
    
    
    vAuj = CDate(Year(Now()) & "-" & Month(Now()) & "-" & Day(Now()))
    
    If Weekday(CDate(vAuj), vbMonday) = 3 Then
        Date_J_1 = CDate(vAuj) + 1
        Date_J_2 = CDate(vAuj) + 2
        Date_J_3 = CDate(vAuj) + 5
    ElseIf Weekday(CDate(vAuj), vbMonday) = 4 Then
        Date_J_1 = CDate(vAuj) + 1
        Date_J_2 = CDate(vAuj) + 4
        Date_J_3 = CDate(vAuj) + 5
    
    ElseIf Weekday(CDate(vAuj), vbMonday) = 5 Then
        Date_J_1 = CDate(vAuj) + 3
        Date_J_2 = CDate(vAuj) + 4
        Date_J_3 = CDate(vAuj) + 5
    Else
        Date_J_1 = CDate(vAuj) + 1
        Date_J_2 = CDate(vAuj) + 2
        Date_J_3 = CDate(vAuj) + 3
    End If
    
    Date_Planif = CDate(InputBox("Valider la date du plan de production |fffd| cr|fffd|er", "Date production |fffd| cr|fffd|er", Date_J_3))

    If Weekday(CDate(Date_Planif), vbMonday) = 1 Then
        Date_Planif_1 = CDate(Date_Planif) - 3
    Else
        Date_Planif_1 = CDate(Date_Planif) - 1
    End If

    sConnec = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" & ActiveWorkbook.Path & "\SAP\MS_Pre_SAP.accdb;Persist Security Info=False;"
    Set shtData = ThisWorkbook.Worksheets("Export")
    
    'cn.Open sConnec
    'r.Open "Cedule_Ligne_Pate_Comas", cn, adOpenDynamic, adLockOptimistic, adCmdTable
    'cn.Execute "DELETE * FROM Cedule_Ligne_Pate_Comas where Date_Theorique >= #" & Date_Planif_1 & "#"
    'cn.Close
    
    cn.Open sConnec
    r.Open "Update_SAP", cn, adOpenDynamic, adLockOptimistic, adCmdTable
    
    cn.Execute "DELETE * FROM Update_SAP where Date_SAP >= #" & Date_Planif & "#"
    
    
    
    With shtData
        For row = 2 To .UsedRange.Rows.Count
            If Len(Trim(shtData.Cells(row, 1))) > 0 Then
                If .Cells(row, 2) >= Date_Planif Then
                    r.AddNew
                    r("Code").Value = .Cells(row, 1)
                    r("Date_SAP").Value = .Cells(row, 2)
                    r("Quantite").Value = .Cells(row, 3)
                    r("User").Value = "Interface"
                    r("Date_Ajout").Value = vAuj
                    r.Update
                End If
            End If
        Next
    End With
    
    r.Close
    cn.Close
    
End Sub
Private Sub AjoutInfoExportDansBd()

    Dim sConnec As String
    Dim cn As New ADODB.Connection
    Dim r As New ADODB.Recordset
    Dim shtData As Worksheet
    Dim row As Integer
    Dim SQL As String
    
    sConnec = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" & ActiveWorkbook.Path & "\Production6.accdb;Persist Security Info=False;"
    Set shtData = ThisWorkbook.Worksheets("Export")
    
    cn.Open sConnec
    r.Open "ExportSAP", cn, adOpenDynamic, adLockOptimistic, adCmdTable
    
    cn.Execute "DELETE * FROM ExportSAP"
    
    With shtData
        For row = 2 To .UsedRange.Rows.Count
            If Len(Trim(shtData.Cells(row, 1))) > 0 Then
                r.AddNew
                r("Code").Value = .Cells(row, 1)
                r("DateInventaire").Value = .Cells(row, 2)
                r("Quantite").Value = .Cells(row, 3)
                r.Update
            End If
        Next
    End With
    
    r.Close
    cn.Close
    
End Sub



Public Sub ImportInventaireSAP(ByVal psSheetName As String, ByVal psNomTable As String, ByVal pdDateImport As Date, ByVal pdDateLundi As Date, ByVal psColData As String, ByVal piDebutLigne As Integer, ByVal plColor As Long, ByVal psColBO As String, ByVal piColAjust As Integer, ByVal piInterval As Integer)

    On Error GoTo Err_ImportInventaireSAP
    
    Dim cn As New ADODB.Connection
    Dim sConnec As String
    Dim r As New ADODB.Recordset
    Dim sSQL As String
    Dim lRow As Long
    Dim shtData As Worksheet
    Dim lNbrArticle As Long
    
    sConnec = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" & ActiveWorkbook.Path & "\SAP.accdb;Persist Security Info=False;"
    Set shtData = ThisWorkbook.Worksheets(psSheetName)
    Application.ScreenUpdating = False
     Application.Calculation = xlManual
     
    cn.Open sConnec
    
    If cn.State = adStateOpen Then
        sSQL = "SELECT * FROM " & psNomTable & " WHERE Format(DateInventaire, 'yyyymmdd') = '" & Format(pdDateImport, "yyyymmdd") & "' "
        If r.State = adStateOpen Then r.Close
        r.Open sSQL, cn, adOpenForwardOnly, adLockReadOnly, adCmdText
            

        
        'lNbrArticle = shtData.UsedRange.Rows.Count '
        lNbrArticle = CalculNbrArticle(psSheetName, piDebutLigne)
         
        
        If r.EOF = False Then
            
            shtData.Range(psColData & piDebutLigne & ":" & psColData & piDebutLigne & lNbrArticle + piDebutLigne - 1).ClearContents
            
            Do While Not r.EOF
                For lRow = piDebutLigne To lNbrArticle + piDebutLigne
                    If Trim(shtData.Rows.Cells(lRow, "A")) = Trim(r("CodeSAP")) Then
                        If r("EstManquant") = 1 Then
                            'MsgBox "L'article " & r("CodeSAP") & " est manquant dans la table < DUREE_VIE > il faut extraire les requis clients!", vbExclamation, "Erreur"
                        End If
                        shtData.Rows.Cells(lRow, psColData).Value = r("QteMain")
                        shtData.Rows.Cells(lRow, piColAjust).Value = r("QteMainJour")
                        shtData.Rows.Cells(lRow, piColAjust + piInterval).Value = r("QteMainJourPlus1")
                        shtData.Rows.Cells(lRow, piColAjust + (piInterval * 2)).Value = r("QteMainJourPlus2")
                        shtData.Rows.Cells(lRow, psColData).NumberFormat = "General"
                        Exit For
                    End If
                Next
                r.MoveNext
            Loop
            
            shtData.Range(psColData & piDebutLigne & ":" & psColData & piDebutLigne + lNbrArticle - 1).Interior.Color = plColor
            shtData.Range(psColData & piDebutLigne & ":" & psColData & piDebutLigne + lNbrArticle - 1).Font.Color = vbWhite
            
        Else
            MsgBox "Aucun inventaire en date du " & Format(pdDateImport, "yyyy-mm-dd"), vbExclamation, "Inventaire vide"
        End If
        
        r.Close
    End If

    Application.ScreenUpdating = True
    cn.Close
     Application.Calculation = xlCalculationAutomatic
    
    Exit Sub
    Resume
Err_ImportInventaireSAP:
    Application.ScreenUpdating = True
    Application.Calculation = xlCalculationAutomatic
    MsgBox Err.Description, vbExclamation, "Erreur"
End Sub

Public Sub ImportLivraisonMoinsCommande(ByVal psSheetName As String, ByVal pdDateImport As Date, ByVal pdDateLundi As Date, ByVal psColData As String, ByVal piDebutLigne As Integer, ByVal plColor As Long, ByVal psColBO As String)

    On Error GoTo Err_ImportLivraisonMoinsCommande
    
    Dim cn As New ADODB.Connection
    Dim sConnec As String
    Dim r As New ADODB.Recordset
    Dim sSQL As String
    Dim lRow As Long
    Dim shtData As Worksheet
    Dim lNbrArticle As Long
    Dim dtImport As Date
    
    Set shtData = ThisWorkbook.Worksheets(psSheetName)
    Application.ScreenUpdating = False
    cn.Open DSN_PLANIFICATION_MS
    
    If DatePart("w", pdDateImport) = vbMonday Then
        dtImport = DateAdd("d", -3, pdDateImport)
    Else
        dtImport = DateAdd("d", -1, pdDateImport)
    End If
    
    If cn.State = adStateOpen Then
        sSQL = "SELECT * FROM vwLivraisonMoinsCommande WHERE CONVERT(varchar(10), DateImportation, 112) = '" & Format(dtImport, "yyyymmdd") & "' "
        If r.State = adStateOpen Then r.Close
        r.Open sSQL, cn, adOpenForwardOnly, adLockReadOnly, adCmdText
            

        
        lNbrArticle = CalculNbrArticle(psSheetName, piDebutLigne)
         
        
        If r.EOF = False Then
            
            shtData.Range(psColData & piDebutLigne & ":" & psColData & piDebutLigne + lNbrArticle - 1).ClearContents
            
            Do While Not r.EOF
                For lRow = piDebutLigne To piDebutLigne + lNbrArticle
                    If Trim(shtData.Rows.Cells(lRow, "D")) = Trim(r("CodeProduit")) Then
        
                        shtData.Rows.Cells(lRow, psColData).Value = r("Quantite")
                        
                        Exit For
                    End If
                Next
                r.MoveNext
            Loop
            
            shtData.Range(psColData & piDebutLigne & ":" & psColData & piDebutLigne + lNbrArticle - 1).Interior.Color = plColor
            shtData.Range(psColData & piDebutLigne & ":" & psColData & piDebutLigne + lNbrArticle - 1).Font.Color = vbBlack
           
        Else
            MsgBox "Aucun information en date du " & Format(dtImport, "yyyy-mm-dd"), vbExclamation, "Vide"
        End If
        
        r.Close
    End If

    Application.ScreenUpdating = True
    cn.Close
    
    
    Exit Sub
    Resume
Err_ImportLivraisonMoinsCommande:
    Application.ScreenUpdating = True
    MsgBox Err.Description, vbExclamation, "Erreur"
End Sub






Attribute VB_Name = "modToolBar"
Option Explicit

'-----------------------------------------------------------------------------------------------------
'Permet de cr|fffd|er la toolbar pour dupliquer la ligne courrante, masquer les lignes avec un X
'dans la colonne A et pour masquer les lignes |fffd| 0.
'-----------------------------------------------------------------------------------------------------
'
'   IN :
'       psToolbarName = Nom de la barre d'outils
'
'   OUT :
'       N/A
'-----------------------------------------------------------------------------------------------------
Public Sub CreateToolBar(ByVal psToolbarName As String)
'-----------------------------------------------------------------------------------------------------

    On Error GoTo Err_CreateToolBar
    
    Select Case psToolbarName
        Case TB_NAME
            Set gcmbToolbar = CommandBars.Add(TB_NAME, msoBarTop, , True) '(Name:=psToolbarName, Position:=msoBarTop, Temporary:=True)
            
            With gcmbToolbar
                gsToolBarName = TB_NAME '.Name
                .Visible = True
                .Protection = msoBarNoChangeVisible
            End With
            Set gbtnInv = gcmbToolbar.Controls.Add(Type:=msoControlButton, ID:=1)
            With gbtnInv
                .Caption = "Inventaire"
                .TooltipText = "Importer inventaire"
                .Style = msoButtonIconAndCaption
                .FaceId = 126 '462
                .OnAction = "ImportInventaire"
            End With
'
            'Set gbtnAdd = gcmbToolbar.Controls.Add(Type:=msoControlButton, ID:=2)
            'With gbtnAdd
             '   .Caption = "LivraisonMoinsCommande"
              '  .TooltipText = "Importer"
               ' .Style = msoButtonIconAndCaption
                '.FaceId = 126 '462
                '.OnAction = "mnuLivraisonMoinsCommande"
            'End With
'
'
            Set gbtnExcel = gcmbToolbar.Controls.Add(Type:=msoControlButton, ID:=3)
            With gbtnExcel
                .Caption = "Export"
                .TooltipText = "Export"
                .Style = msoButtonIconAndCaption
                .FaceId = 462 '462
                .OnAction = "CreationExport"
            End With
          
    End Select
    
    Exit Sub
    Resume
Err_CreateToolBar:
    MsgBox Err.Description, vbCritical, "CreateToolBar : Error"
End Sub

'-----------------------------------------------------------------------------------------------------
'Permet de supprimer une barre d'outils
'-----------------------------------------------------------------------------------------------------
'
'   IN :
'       psToolbarName = Nom de la barre d'outils
'
'   OUT :
'       N/A
'-----------------------------------------------------------------------------------------------------
Public Function RemoveToolbar(ParamArray args() As Variant) As String
'-----------------------------------------------------------------------------------------------------

    On Error GoTo Err_ToolbarExist
    
    Dim iIndex As Integer
    Dim sToolbarName As Variant
    
    For Each sToolbarName In args()
        sToolbarName = sToolbarName
        
        For iIndex = 1 To CommandBars.Count
            If UCase(CommandBars.Item(iIndex).Name) = UCase(sToolbarName) Then
                CommandBars.Item(iIndex).Delete
                Exit For
            End If
        Next
    Next
    

    Exit Function
    Resume
Err_ToolbarExist:
    MsgBox Err.Description, vbCritical, "RemoveToolbar : Error"
End Function


Function ConvertToLetter(iCol As Integer) As String
   Dim iAlpha As Integer
   Dim iRemainder As Integer
   iAlpha = Int(iCol / 27)
   iRemainder = iCol - (iAlpha * 26)
   If iAlpha > 0 Then
      ConvertToLetter = Chr(iAlpha + 64)
   End If
   If iRemainder > 0 Then
      ConvertToLetter = ConvertToLetter & Chr(iRemainder + 64)
   End If
End Function

Public Sub ImportInventaire()
    
    On Error GoTo Err_ImportInventaire
    
    Dim sFile As String
    Dim dDateLundi As Date
    Dim sColData As String
    Dim dDateImport As Date
    Dim shtData As Worksheet
    Dim lRow As Long
    Dim lDebutRow As Long
    Dim bOK As Boolean
    Dim LastDate As Date
    
    If MsgBox("Voulez-vous importer l'inventaire?", vbQuestion + vbYesNo, "Question") = vbYes Then
        frmSelectDate.Caption = "Importer l'inventaire"
        frmSelectDate.Show vbModal
        
        lDebutRow = 2
        
        If frmSelectDate.txtOK = vbOK Then
            dDateImport = frmSelectDate.dtEnCours
            
            '-----------------------------------------------------------------------------------------------
            'PRODUCTION
            '-----------------------------------------------------------------------------------------------
            
            Set shtData = ThisWorkbook.Worksheets("production")
            shtData.Select
            bOK = False
            
            For lRow = 1 To shtData.UsedRange.Columns.Count
                If shtData.Rows.Cells(2, lRow) <> "" Then
                    'If Format(shtData.Rows.Cells(2, lRow), "yyyymmdd") <= Format(dDateImport, "yyyymmdd") And (Format(LastDate, "yyyymmdd") = Format(shtData.Rows.Cells(2, lRow), "yyyymmdd") Or LastDate = "00:00:00") Then
                    If Format(shtData.Rows.Cells(2, lRow), "yyyymmdd") = Format(dDateImport, "yyyymmdd") Then
                        bOK = True
                        LastDate = dDateImport
                        Exit For
                    End If
                End If
            Next
            
            If bOK = True Then
                sColData = shtData.Cells(3, lRow).Address
                sColData = Replace(Mid(sColData, 1, InStrRev(sColData, "$")), "$", "")
                
                Call ImportInventaireSAP("Production", "vwInventaireSapDureeVie", dDateImport, dDateLundi, sColData, 3, 12611584, "", shtData.Cells(lDebutRow, sColData).Column + 1, 7)
                
                'Copie en valeur com |fffd| m
                sColData = shtData.Cells(3, lRow + 2).Address
                sColData = Replace(Mid(sColData, 1, InStrRev(sColData, "$")), "$", "")
                shtData.Range(sColData & "3:" & sColData & shtData.UsedRange.Rows.Count).Copy
                sColData = shtData.Cells(3, lRow + 3).Address
                sColData = Replace(Mid(sColData, 1, InStrRev(sColData, "$")), "$", "")
                shtData.Range(sColData & "3:" & sColData & shtData.UsedRange.Rows.Count).PasteSpecial xlPasteValues

                shtData.Cells(lDebutRow, sColData).Select
                
                Application.CutCopyMode = False
                
                '-----------------------------------------------------------------------------------------------
                'MTO
                '-----------------------------------------------------------------------------------------------
                Set shtData = ThisWorkbook.Worksheets("MTO")
                shtData.Select
                bOK = False
                LastDate = "00:00:00"
                
                For lRow = 1 To shtData.UsedRange.Columns.Count
                    If shtData.Rows.Cells(2, lRow) <> "" Then
                        If Format(shtData.Rows.Cells(2, lRow), "yyyymmdd") = Format(dDateImport, "yyyymmdd") Then
                            bOK = True
                            LastDate = dDateImport
                            Exit For
                        End If
                    End If
                Next
                
                If bOK = True Then
                    sColData = shtData.Cells(3, lRow).Address
                    sColData = Replace(Mid(sColData, 1, InStrRev(sColData, "$")), "$", "")
                    
                    Call ImportInventaireSAP("MTO", "vwInventaireSapDureeVie", dDateImport, dDateLundi, sColData, 3, 12611584, "", shtData.Cells(lDebutRow, sColData).Column + 1, 5)
                    
                    '-----------------------------------------------------------------------------------------------
                    'SF
                    '-----------------------------------------------------------------------------------------------
                    Set shtData = ThisWorkbook.Worksheets("SF")
                    shtData.Select
                    bOK = False
                    LastDate = "00:00:00"
                    
                    For lRow = 1 To shtData.UsedRange.Columns.Count
                        If shtData.Rows.Cells(2, lRow) <> "" Then
                            If Format(shtData.Rows.Cells(2, lRow), "yyyymmdd") = Format(dDateImport, "yyyymmdd") Then
                                bOK = True
                                LastDate = dDateImport
                                Exit For
                            End If
                        End If
                    Next
                    
                    If bOK = True Then
                        sColData = shtData.Cells(3, lRow).Address
                        sColData = Replace(Mid(sColData, 1, InStrRev(sColData, "$")), "$", "")
                        
                        Call ImportInventaireSAP("SF", "vwInventaireSapDureeVie", dDateImport, dDateLundi, sColData, 3, 12611584, "", shtData.Cells(lDebutRow, sColData).Column + 1, 5)
                        
                        MsgBox "Importation termin|fffd|e!", vbInformation, "Succ|fffd|s"
                    Else
                        MsgBox "Impossible de trouver la colonne d'inventaire FO, v|fffd|rifier la date dans la ligne 2, elle doit si trouver!", vbCritical, "Erreur"
                    End If
                
                
                Else
                    MsgBox "Impossible de trouver la colonne d'inventaire MTO, v|fffd|rifier la date dans la ligne 2, elle doit si trouver!", vbCritical, "Erreur"
                End If
            Else
                MsgBox "Impossible de trouver la colonne d'inventaire, v|fffd|rifier la date dans la ligne 2, elle doit si trouver!", vbCritical, "Erreur"
            End If
        End If
         
        Unload frmSelectDate
        
        
    End If
   


    Exit Sub
    Resume
Err_ImportInventaire:
    MsgBox Err.Description, vbCritical, "Erreur"

End Sub

Private Sub mnuLivraisonMoinsCommande()

 On Error GoTo Err_LivraisonMoinsCommande
    
    Dim sFile As String
    Dim dDateLundi As Date
    Dim sColData As String
    Dim dDateImport As Date
    Dim shtData As Worksheet
    Dim lRow As Long
    Dim lDebutRow As Long
    Dim bOK As Boolean
    Dim LastDate As Date
    
    If MsgBox("Voulez-vous importer les commandes moins les livraisons?", vbQuestion + vbYesNo, "Question") = vbYes Then
        frmSelectDate.Caption = "Importer"
        frmSelectDate.Show vbModal
        
        If frmSelectDate.txtOK = vbOK Then
            dDateImport = frmSelectDate.dtEnCours
            
            Set shtData = ThisWorkbook.Worksheets("production")
            shtData.Select
            bOK = False
            
            For lRow = shtData.UsedRange.Rows.Count To 2 Step -1
                If shtData.Rows.Cells(lRow, "C") <> "" Then
                    If Format(shtData.Rows.Cells(lRow, "C"), "yyyymmdd") <= Format(dDateImport, "yyyymmdd") And (Format(LastDate, "yyyymmdd") = Format(shtData.Rows.Cells(lRow, "C"), "yyyymmdd") Or LastDate = "00:00:00") Then
                        bOK = True
                        LastDate = shtData.Rows.Cells(lRow, "C")
                    ElseIf bOK = True Then
                        lDebutRow = lRow + 2
                        Exit For
                    End If
                End If
            Next
        
            dDateLundi = shtData.Cells(lDebutRow, "C").Value
            
            sColData = shtData.Cells(lDebutRow, (8 + (6 * DateDiff("d", dDateLundi, dDateImport)))).Address
            sColData = Replace(Mid(sColData, 1, InStrRev(sColData, "$")), "$", "")
            
            Call ImportLivraisonMoinsCommande("Production", dDateImport, dDateLundi, sColData, lDebutRow, 65535, "")
            shtData.Cells(lDebutRow, sColData).Select
            
            'MTO
            Set shtData = ThisWorkbook.Worksheets("MTO")
            shtData.Select
            bOK = False
            LastDate = "00:00:00"
            
            For lRow = shtData.UsedRange.Rows.Count To 2 Step -1
                If shtData.Rows.Cells(lRow, "C") <> "" Then
                    If Format(shtData.Rows.Cells(lRow, "C"), "yyyymmdd") <= Format(dDateImport, "yyyymmdd") And (Format(LastDate, "yyyymmdd") = Format(shtData.Rows.Cells(lRow, "C"), "yyyymmdd") Or LastDate = "00:00:00") Then
                        bOK = True
                        LastDate = shtData.Rows.Cells(lRow, "C")
                        'lDebutRow = lRow - IIf(lRow = 2, 0, 1) 'Pour le premier de la liste l faut pas soustraire
                        'Exit For
                    ElseIf bOK = True Then
                        lDebutRow = lRow + 2
                        Exit For
                    End If
                End If
            Next
            
            
            sColData = shtData.Cells(lDebutRow, (11 + (4 * DateDiff("d", dDateLundi, dDateImport)))).Address
            sColData = Replace(Mid(sColData, 1, InStrRev(sColData, "$")), "$", "")
            
            Call ImportLivraisonMoinsCommande("MTO", dDateImport, dDateLundi, sColData, lDebutRow, 65535, "")
            
            
             
            MsgBox "Importation termin|fffd|e!", vbInformation, "Succ|fffd|s"
        End If
         
        Unload frmSelectDate
        
        
    End If
    
     Exit Sub
Err_LivraisonMoinsCommande:
    MsgBox Err.Description, vbCritical, "Erreur"
End Sub






INQUEST-PP=macro
