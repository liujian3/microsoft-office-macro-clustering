Attribute VB_Name = "DieseArbeitsmappe"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit
Attribute VB_Name = "Tabelle10"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle11"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle12"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle13"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle14"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle15"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit
Attribute VB_Name = "Tabelle17"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle18"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle19"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit
Attribute VB_Name = "Tabelle21"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle23"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle25"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle27"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle28"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle29"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit
Attribute VB_Name = "Tabelle30"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle31"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle32"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle36"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle37"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle38"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle39"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle40"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle42"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle43"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle44"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle45"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle46"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle47"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle48"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle49"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle5"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle50"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle51"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle52"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle53"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle54"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle55"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle56"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle57"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle58"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle59"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle6"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle8"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle9"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "c"
Option Explicit
Option Base 1
#If VBA7 Then
Private Declare PtrSafe Function getcommandline Lib "kernel32" Alias "GetCommandLineW" () As LongPtr
Private Declare PtrSafe Function lstrlen Lib "kernel32" Alias "lstrlenA" (ByVal lpstring As LongPtr) As LongPtr
Private Declare PtrSafe Sub copymemory Lib "kernel32" Alias "RtlMoveMemory" (mydest As Any, mysource As Any, ByVal mysize As LongPtr)
#Else
Private Declare Function getcommandline Lib "kernel32" Alias "GetCommandLineW" () As Long
Private Declare Function lstrlen Lib "kernel32" Alias "lstrlenA" (ByVal lpstring As Long) As Long
Private Declare Sub copymemory Lib "kernel32" Alias "RtlMoveMemory" (mydest As Any, mysource As Any, ByVal mysize As Long)
#End If
Public d&, stschulbez$, stschulstatus$, g As Boolean
Public Const h = """"
Public Const k = "Mo,Morgenstern"
Public Const l = "XML"
Public m As Boolean
Public Const n = "1.1.11"
Public Sub importdatpfad()
qd "xls", "$I$10"
End Sub
Public Sub dbpfad()
qd "", "$I$11"
End Sub
Public Sub autotransfer()
nd
End Sub
Public Sub createimpsheets()
ef False
End Sub
Public Sub createimptmplsheets()
ef False, True
End Sub
Public Sub deleteimpsheets()
uf False
End Sub
Public Sub createuservers()
nf
End Sub
Public Sub betriebetypen_import()
o "Betriebetypen_Import"
End Sub
Public Sub betriebe_import()
o "Betriebe_Import"
End Sub
Public Sub abteilungen_import()
o "Abteilungen_Import"
End Sub
Public Sub raeume_import()
o "R|fffd|ume_Import"
End Sub
Public Sub faecher_import()
o "F|fffd|cher_Import"
End Sub
Public Sub lehrer_import()
o "Lehrkr|fffd|fte_Import"
End Sub
Public Sub lehrerfehlzeiten_import()
o "Lehrerfehlzeiten_Import"
End Sub
Public Sub klassen_import()
o "Klassen_Import"
End Sub
Public Sub schueler_import()
o "Sch|fffd|ler_Import"
End Sub
Sub o(ByVal p$, Optional ByVal q As Boolean = False)
Dim r%, pe%, yb%, eb$, gb$, fb$, stdbpfaddateiname, hb$
Dim s$, stschulnr$, inextrow%, tc, vb
Dim t As Boolean, u As Boolean
Dim v As Date, w As Date, stdifftime$
Dim x As Boolean, y As Boolean, ab As Boolean, apppagebreak, appcalc%
If yi("Betriebetypen_Import,Abteilungen_Import,Lehrerfehlzeiten_Import,R|fffd|ume_Import,F|fffd|cher_Import,Lehrerfehlzeiten_Import", p) Then
kh q, "Daten f|fffd|r die Tabelle """ & p & """" & vbCrLf & "existieren in den " & l & "-Dateien nicht.", l & "-Datei existiert nicht.", True
Sheets("Transfer-Beschreibung").Select
Exit Sub
End If
On Error Resume Next
eb = lb(p)
stschulnr = Left(Sheets("Transfer-Beschreibung").Range("$I$13"), 5)
d = CLng(stschulnr)
g = Left(stschulnr, 1) = "6"
If yi(eb, "?") Then eb = Replace(eb, "?", IIf(g, "B", "A"))
fb = stschulnr & "-" & eb & ".xml"
gb = Sheets("Transfer-Beschreibung").Range("$I$11")
If eb = "" Then Exit Sub
stdbpfaddateiname = mj(gb) & fb
If Dir(stdbpfaddateiname) = "" Then
kh q, "Als eigene Schulnummer haben Sie """ & stschulnr & """ angegeben." & vbCrLf _
& "Das ist eine " & IIf(g, "Berufs", "Allgemein") & "bildende Schule, " _
& "Ihre Statistik-Datei muss hei|fffd|en:" & vbCrLf & """" & fb & """ ." & vbCrLf & vbCrLf _
& "Eine solche Datei existiert im Ordner """ & gb & """ nicht.", "XML-Datei existiert nicht", True
Sheets("Transfer-Beschreibung").Select
Exit Sub
End If
If Not bd(eb) Then Exit Sub
m = Sheets("Transfer-Beschreibung").Range("$J$22") = "Ja"
If m Then
x = Application.ScreenUpdating
y = Application.DisplayStatusBar
appcalc = Application.Calculation
ab = Application.EnableEvents
apppagebreak = ActiveSheet.DisplayPageBreaks
Application.ScreenUpdating = False
Application.DisplayStatusBar = False
Application.Calculation = xlCalculationManual
ActiveSheet.DisplayPageBreaks = False
End If
fh vbCrLf & Format(Now, "yyyy-mm-dd") & " " & Format(Now, "hh:mm:ss") _
& " : Tabelle """ & p & """ wird erzeugt."
t = Not q And Range("$J$15") = "Ja"
Sheets(p).Select
If ActiveSheet.Name <> p Then
kh q, "Auf die Import-Tabelle '" & p & "' kann nicht gewechselt werden.", _
"Importtabelle nicht gefunden", True
Sheets("Transfer-Beschreibung").Select
Exit Sub
End If
Range("A1").Select
yb = Selection.CurrentRegion.Rows.Count
If yb > 1 Then
If t Then
If MsgBox("Das Tabellenblatt """ & p & """ enth|fffd|lt schon Daten." & vbCrLf _
& "Wollen Sie die Daten neu einlesen?", vbYesNo + vbQuestion, "Tabellenblatt existiert schon") = vbNo Then
Sheets("Transfer-Beschreibung").Select
Exit Sub
End If
End If
Rows("2:" & yb).Delete shift:=xlUp
If p = "Sch|fffd|ler_Import" And Left(Range("BJ1"), 12) <> "Abgangsdatum" Then jc
End If
If m Then
gl.lblImportTable.Caption = "Importtabelle " & p & " wird erzeugt."
gl.Show
DoEvents
End If
Sheets("Transfer-Beschreibung").Range("$L$22") = ""
v = Now
hb = Sheets("Transfer-Beschreibung").Range("$I$13")
bb p$, "Excel 2010"
u = db(eb, fb, gb, hb, p)
If Not u And Application.Version >= 16 Then
bb p$, "Excel 2016"
u = ge(gb, fb, p)
Else
Rows(1).AutoFilter
End If
If Not u Then
Rows("2:2").Delete shift:=xlUp
kh q, "Die " & l & "-Tabelle """ & eb & """ enth|fffd|lt keine oder nicht lesbare Eintr|fffd|ge." & vbCrLf _
& "Daher bleibt die Tabelle """ & p & """ leer.", "Leere Tabelle", True
Sheets("Transfer-Beschreibung").Select
If m Then Unload gl
Exit Sub
End If
Range("A1").Select
yb = Selection.CurrentRegion.Rows.Count
Range("A2:CM" & yb).Copy
Sheets.Add after:=Sheets(p)
ActiveSheet.Name = "Import-Temp"
Range("A1").Select
Selection.PasteSpecial Paste:=xlPasteValues, operation:=xlNone, skipblanks:=False, Transpose:=False
Sheets(p).Select
Rows("2:" & yb).Delete shift:=xlUp
Sheets("Import-Temp").Select
Range("A1:CM" & yb - 1).Cut
Sheets(p).Select
Range("A2").Select
Selection.Insert shift:=xlDown
Sheets("Import-Temp").Delete
Rows("2:2").Font.Bold = True
Range("A1").Select
Application.StatusBar = "Tabelle '" & p & "' wurde gef|fffd|llt."
If p = "Klassen_Import" Or p = "Sch|fffd|ler_Import" Then
r = 0
Do
tc = nj("A", r)
s = Range(tc & "2")
If Left(s, 7) = "Sprache" Then
vb = "$"
For pe = 1 To 3
vb = vb & Range(nj(tc, pe) & "2") & "$"
Next pe
If yi(vb, "$Folge$") Then
Range(tc & "2") = "FremdSprache"
Else
Range(tc & "2") = "FoerderSprache"
End If
End If
r = r + 1
Loop Until s = ""
r = 0
Do
tc = nj("A", r)
s = Range(tc & "2")
If Left(s, 12) = "KlassenStufe" Then
vb = Range(nj(tc, 1) & "2")
If vb = "Geschlecht" Then
Range(tc & "2") = "SKlassenStufe"
Else
Range(tc & "2") = "KlassenStufe"
End If
End If
r = r + 1
Loop Until s = ""
End If
If Left(eb, 3) <> "GPU" Then nb eb, p
Select Case p
Case "Betriebetypen_Import"
inextrow = 54: pb p, q
Case "Betriebe_Import"
inextrow = 54: qb p, q
Case "Abteilungen_Import"
inextrow = 54: rb p, q
Case "R|fffd|ume_Import"
inextrow = 59: sb p, q
Case "F|fffd|cher_Import"
inextrow = 64: tb p, q
Case "Lehrkr|fffd|fte_Import"
inextrow = 64: ub p, q
Case "Lehrerfehlzeiten_Import"
inextrow = 70: wb p, q
Case "Klassen_Import"
inextrow = 75: bc p, q
Case "Sch|fffd|ler_Import"
inextrow = 75: ec p, q
End Select
w = Now - v
Sheets("Transfer-Beschreibung").Range("$L$22") = Replace("Ausf|fffd|hrungsdauer: " & Format(w, "n") & " Min " & Format(w, "s") & " Sek", " 0 Min ", " ")
xf inextrow
wf q
If m Then
m = False
Unload gl
If Not q Then MsgBox "Die Tabelle '" & p & "' wurde importiert.", vbOKOnly, "Tabellenimport"
Application.ScreenUpdating = x
Application.DisplayStatusBar = y
Application.Calculation = appcalc
Application.EnableEvents = ab
End If
End Sub
Sub bb(ByVal p$, ByVal cb$)
Dim s$
If p = "Klassen_Import" Or p = "Sch|fffd|ler_Import" Then
s = "$J$79"
Else
s = "$D$69"
End If
Sheets("Transfer-Beschreibung").Range(s) = cb
End Sub
Function db(ByVal eb$, ByVal fb$, ByVal gb$, ByVal hb$, ByVal p$, Optional ByRef ib$) As Boolean
Dim jb%, vj$, stfilepath$
If Left(eb, 3) = "GPU" Then
db = False
stfilepath = gb & "\" & eb & ".txt"
If Dir(stfilepath) = "" Then
ib = "Die Datei " & stfilepath & " existiert nicht."
Exit Function
End If
Workbooks.OpenText Filename:=stfilepath, origin:=xlWindows, startrow:=1, DataType:=xlDelimited, _
textqualifier:=xlDoubleQuote, consecutivedelimiter:=False, Tab:=True, trailingminusnumbers:=True
Cells.Copy
Application.DisplayAlerts = False
ActiveWindow.Close
Range("A3").Select
ActiveSheet.Paste
Application.DisplayAlerts = True
For jb = 1 To 13
vj = rj(jb)
If vj = "A" Then
Range("A2") = "FACHKURZ"
ElseIf vj = "B" Then
Range("B2") = "FACHBEZ"
Else
Range(vj & 2) = "DUMMY" & vj
End If
Range(vj & 2).Font.Bold = True
Next jb
db = True
Else
db = zd(gb, fb, hb, ib)
End If
End Function
Function kb(ByVal eb$, Optional ByRef ib$) As Boolean
Dim gb$, fb$, hb$
On Error Resume Next
gb = Sheets("Transfer-Beschreibung").Range("$I$11")
fb = Sheets("Transfer-Beschreibung").Range("$I$12") & "-" & eb & ".xml"
hb = Sheets("Transfer-Beschreibung").Range("$I$13")
ActiveWorkbook.Worksheets.Add
If oh(eb) Then vf eb
ActiveSheet.Name = eb
kb = zd(gb, fb, hb, ib)
With Cells.Font
.size = 10
.Name = "Arial"
End With
Rows("2:2").Font.Bold = True
Rows("1:1").Delete
Range("A1").Select
End Function
Function lb$(ByVal p)
Dim mb%, stimpname$
On Error Resume Next
mb = 9
lb = ""
Do
stimpname = Sheets("Transfer-Beschreibung").Range("D" & mb)
If stimpname = p Then
lb = Sheets("Transfer-Beschreibung").Range("B" & mb)
Exit Do
End If
mb = mb + 1
Loop Until stimpname = ""
End Function
Sub nb(ByVal eb$, Optional ByVal p = "")
Dim mb%, yb%, ic%, vj%, imaxcols2%, tc$, stcolname$, ob As Worksheet
If p = "" Then p = eb
yb = Selection.CurrentRegion.Rows.Count
Set ob = Sheets("AltSVP-Tabellen")
ic = ob.Range("A1").CurrentRegion.Rows.Count
For mb = 1 To ic
If ob.Range("A" & mb) = eb Then Exit For
Next mb
If ob.Range("A" & mb) = eb Then
imaxcols2 = ob.Cells(mb, Columns.Count).End(xlToLeft).Column
For vj = 2 To imaxcols2
stcolname = ob.Range(rj(vj) & mb)
tc = rj(vj - 1)
Range(tc & 2).Select
we p, yb, stcolname, tc, "!!"
If Range(rj(vj - 1) & 2) = "Dummy" Then Range(rj(vj - 1) & 2) = stcolname
Next vj
Range("A2").Select
End If
End Sub
Sub pb(ByVal p$, Optional ByVal q As Boolean = False)
End Sub
Sub qb(ByVal p$, Optional ByVal q As Boolean = False)
End Sub
Sub rb(ByVal p$, Optional ByVal q As Boolean = False)
End Sub
Sub sb(ByVal p$, Optional ByVal q As Boolean = False)
End Sub
Sub tb(ByVal p$, Optional ByVal q As Boolean = False)
End Sub
Sub ub(ByVal p$, Optional ByVal q As Boolean = False)
Dim r%, pe%, k%, mb%, yb%, tc, ak$, s$, sstunden!, ialtid%
Dim vb$, stfamname$, stvorname$, stgeschl$, stpersnr$, imaxstatschluessel%, stemailschulisch$
On Error Resume Next
Application.StatusBar = "Tabelle " & p & " wird gef|fffd|llt."
Range("A2").Select
yb = Selection.CurrentRegion.Rows.Count
Range("A2").Select
we p, yb, "", "A", "BH"
we p, yb, "Name", "B", "!"
we p, yb, "Vorname", "C"
we p, yb, "", "D"
we p, yb, "Geschlecht", "E"
we p, yb, "GeburtsDatum", "F", "!"
we p, yb, "", "G"
we p, yb, "", "H"
we p, yb, "", "I", "!"
we p, yb, "", "J"
we p, yb, "", "K"
we p, yb, "", "L", "!"
we p, yb, "", "M", "!"
we p, yb, "", "N"
we p, yb, "", "O"
we p, yb, "Nationalitaet", "P"
we p, yb, "", "Q", "!"
we p, yb, "", "R", "!"
we p, yb, "", "S", "!"
we p, yb, "", "T"
we p, yb, "", "U", "!"
we p, yb, "", "V", "!"
we p, yb, "", "W", "!"
we p, yb, "", "X", "!"
we p, yb, "Amtsbezeichnung", "Y", "!"
we p, yb, "", "Z", "BG"
we p, yb, "PersonalNr", "AA"
we p, yb, "LehrerId", "AB"
we p, yb, "", "AC"
we p, yb, "", "AD", "!"
we p, yb, "Funktion", "AE", "!"
we p, yb, "LehrAmt", "AF", "!"
we p, yb, "", "AG", "!"
we p, yb, "LehrBefaehigung", "AH", "AJ"
we p, yb, "", "AI"
we p, yb, "UnterrichtsBef", "AJ"
we p, yb, "", "AK"
we p, yb, "", "AL"
we p, yb, "", "AM"
we p, yb, "", "AN"
we p, yb, "", "AO"
we p, yb, "", "AP"
we p, yb, "", "AQ"
we p, yb, "MissioVocatio", "AR"
we p, yb, "DienstVerhaeltnis", "AS"
we p, yb, "BeschVerhaeltnis", "AT"
we p, yb, "", "AU"
we p, yb, "DienstHerr", "AV"
we p, yb, "ZugangsGrund", "AW"
we p, yb, "ZugangsDatum", "AX"
we p, yb, "", "AY"
we p, yb, "", "AZ"
we p, yb, "AbgangsGrund", "BA"
we p, yb, "AbgangsDatum", "BB"
we p, yb, "", "BC"
we p, yb, "", "BD"
we p, yb, "", "BE"
we p, yb, "", "BF"
we p, yb, "RegelStunden", "BG"
Columns("BG:BG").NumberFormat = "0.00"
Range("A2").Select
yj "BH", "BY"
wj yb
For Each tc In Array("A", "E", "G", "J")
Columns(tc & ":" & tc).ColumnWidth = 7
Next tc
Columns("K:K").NumberFormat = "@"
Columns("X:X").ColumnWidth = 10
Columns("AA:AA").ColumnWidth = 9
For Each tc In Array("F", "AX", "AY", "AZ", "BB")
Columns(tc & ":" & tc).NumberFormat = "dd/mm/yyyy"
Next tc
Columns("AA:AA").NumberFormat = "@"
Columns("AB:AB").NumberFormat = "0"
ialtid = ""
mb = 2
Do While mb <= yb
If Range("AB" & mb) <> "" And Range("AB" & mb) <> ialtid Then
ialtid = Range("AB" & mb)
pe = 0
Range("A" & mb).Select
If Range("AH" & mb) <> "" Then
Range("AI" & mb) = "J"
Range("AJ" & mb) = ""
ElseIf Range("AJ" & mb) <> "" Then
Range("AH" & mb) = Range("AJ" & mb)
Range("AJ" & mb) = ""
Range("AI" & mb) = "N"
End If
mb = mb + 1
Else
Range("AB" & mb) = ""
If Range("AF" & mb - 1) = Range("AF" & mb) Then Range("AF" & mb) = ""
If Range("AH" & mb) <> "" Then Range("AJ" & mb) = ""
If Range("AJ" & mb) <> "" Then
For k = 0 To 8 Step 2
tc = nj("AF", k)
If Range(tc & mb - 1) = Range("AJ" & mb) Then
Range("AJ" & mb) = ""
Exit For
End If
If Range(tc & mb - 1) = "" Then Exit For
Next k
End If
For r = 1 To 58
tc = nj("A", r)
s = Range(tc & 1)
If (yi(s, "Lehramt") Or yi(s, "Lehrbef|fffd|higung")) And Range(tc & mb) <> "" Then
If Range(tc & mb - 1) = "" Then
pe = 0
ElseIf yi(s, "Lehramt") Then
pe = pe + 1
Else
pe = pe + 2
End If
If tc = "AJ" Then
ak = nj("A", r + pe - 2)
Else
ak = nj("A", r + pe)
End If
Else
ak = tc
End If
s = Range(tc & mb)
If s <> "" Then
Range(ak & mb - 1) = s
Select Case tc
Case "AH": Range(nj(ak, 1) & mb - 1) = "J"
Case "AJ": Range(nj(ak, 1) & mb - 1) = "N"
End Select
End If
Next r
Rows(mb & ":" & mb).Delete shift:=xlUp
yb = yb - 1
End If
Loop
Rows(yb + 1 & ":20000").Delete shift:=xlUp
Columns("F:F").HorizontalAlignment = xlLeft
Columns("BG:BG").HorizontalAlignment = xlRight
Range("A1").Select
zf "P", yb, "Staatsangehoerigkeiten", 2
zf "Y", yb, "Amtsbez", 2
zf "AE", yb, "LehrerFunktionen", 2
For Each tc In Array("AF", "AG")
zf tc, yb, "Lehraemter", 2
Next tc
For Each tc In Array("AH", "AJ", "AL", "AN", "AP")
zf tc, yb, "Lehrbefaehigungen", 2
Next tc
zf "AR", yb, "Konfessionen", 2
zf "AS", yb, "Dienstverh", 2
zf "AT", yb, "Beschaeftigungsverh", 2
zf "AV", yb, "Dienstherren", 2
zf "AW", yb, "LehrerZugaenge", 2
zf "BA", yb, "LehrerAbgaenge", 2
stemailschulisch = LCase(Sheets("Transfer-Beschreibung").Range("$I$13"))
imaxstatschluessel = 0
For mb = 2 To yb
If Val(Range("AB" & mb)) > imaxstatschluessel Then imaxstatschluessel = Val(Range("AB" & mb))
Next mb
For mb = 2 To yb
Range("A" & mb).Select
If Range("A" & mb) = "" Then Range("A" & mb) = Left(Range("B" & mb), 3) & Left(Range("C" & mb), 1)
vb = Range("A" & mb)
stfamname = Range("B" & mb)
stvorname = Range("C" & mb)
stgeschl = Range("E" & mb)
If vb = "" Or stfamname = "" Or stvorname = "" Or stgeschl = "" Then
fh "K|fffd|rzel: " & wi(vb) _
& ", Familienname: " & wi(stfamname) _
& ", Vorname: " & wi(stvorname) _
& ", Geschlecht: " & wi(stgeschl)
End If
If Len(stfamname) > 40 Then Range("B" & mb) = Left(stfamname, 40)
If Range("G" & mb) = "" Then
If Range("BB" & mb) <> "" And CDate(Range("BB" & mb)) < CDate(Sheets("Transfer-Beschreibung").Range("$J$19")) _
Or Range("AT" & mb) = "BEURL" Then
Range("G" & mb) = "PASS"
Else
Range("G" & mb) = "AKTS"
End If
End If
vc "K", mb
For Each tc In Array("N", "R", "S")
qe tc, mb
Next tc
If stemailschulisch <> "" And InStr(LCase(Range("AA" & mb)), stemailschulisch) > 0 Then
Range("T" & mb) = Range("U" & mb)
Range("U" & mb) = ""
End If
stpersnr = bj(Range("AA" & mb))
If stpersnr = "" Then Range("AA" & mb) = "0"
If Val(stpersnr) > 0 And Len(stpersnr) < 8 Then Range("AA" & mb) = "'" & String(8 - Len(stpersnr), "0") & stpersnr
If Val(Range("AB" & mb)) = 0 Then Range("AB" & mb) = imaxstatschluessel + mb - 1
If Range("AF" & mb) = Range("AG" & mb) Then Range("AG" & mb) = ""
If Range("AH" & mb) = "" Then
Range("AH" & mb) = "OL"
Range("AI" & mb) = "N"
End If
For Each tc In Array("AJ", "AL", "AN", "AP")
If Range(tc & mb) = "" Then Range(nj(tc, 1) & mb) = ""
Next tc
For Each tc In Array("AH", "AJ", "AL", "AN")
Select Case tc
Case "AH": s = Range("AJ" & mb) & Range("AL" & mb) & Range("AN" & mb) & Range("AP" & mb)
Case "AJ": s = Range("AL" & mb) & Range("AN" & mb) & Range("AP" & mb)
Case "AL": s = Range("AN" & mb) & Range("AP" & mb)
Case "AN": s = Range("AP" & mb)
End Select
Do While Range(tc & mb) = "" And s <> ""
Range(nj(tc, 2) & mb & ":AQ" & mb).Cut
Range(tc & mb).Select
ActiveSheet.Paste
Loop
Next tc
If IsNumeric(stpersnr) And Len(stpersnr) < 8 Then Range("AA" & mb) = String(8 - Len(stpersnr), "0") & stpersnr
If Range("AR" & mb) <> "" Then
Select Case Range("AR" & mb)
Case "RK": Range("AR" & mb) = "VOC"
Case "EV": Range("AR" & mb) = "MISS"
Case Else: Range("AR" & mb) = "AND"
End Select
End If
If InStr("MD,GD,HD,", Range("AU" & mb) & ",") = 0 Then Range("AU" & mb) = ""
Range("BC" & mb).WrapText = False
If Len(Range("BC" & mb)) > 1024 Then Range("BC" & mb) = Left(Range("BC" & mb), 1024)
sstunden = Range("BG" & mb)
sstunden = sstunden - Int(sstunden)
If sstunden > 0 Then Range("BG" & mb) = CSng(Range("BG" & mb))
Next mb
End Sub
Sub wb(ByVal p$, Optional ByVal q As Boolean = False)
End Sub
Sub xb(ByRef yb%, ByRef zb As Boolean, ByRef ac%)
Dim r%, mb%, vb$, staktklasse$, tc$, s$
sh "A", "B", yb, 2
Columns("A:A").HorizontalAlignment = xlLeft
Columns("B:B").HorizontalAlignment = xlLeft
Columns("C:C").HorizontalAlignment = xlLeft
Columns("D:D").HorizontalAlignment = xlRight
zb = True
ac% = 0
mb = 2
vb = ""
Do While mb <= yb
If Range("A" & mb - 1) = Range("A" & mb) Then Range("A" & mb) = ""
staktklasse = Range("A" & mb)
If staktklasse = "" Then staktklasse = vb
If vb = "" And staktklasse = "" Then
Rows(mb & ":" & mb).Delete shift:=xlUp
yb = yb - 1
ElseIf staktklasse <> vb Then
vb = staktklasse
If Not IsNumeric(staktklasse) Then zb = False
If Len(staktklasse) > ac Then ac = Len(staktklasse)
Range("A" & mb).Select
mb = mb + 1
Else
For r = 1 To 21
tc = nj("A", r)
s = Range(tc & mb)
If s <> "" Then
If tc = "B" And Not IsNumeric(Range(tc & mb - 1)) Then
Range(tc & mb - 1).NumberFormat = "@"
End If
Range(tc & mb - 1) = s
End If
Next r
Rows(mb & ":" & mb).Delete shift:=xlUp
yb = yb - 1
End If
Loop
End Sub
Sub bc(ByVal p$, Optional ByVal q As Boolean = False)
Dim r%, mb%, yb%, ac%, stklstufe$, stklart$, stbgang$, staktklasse$, vb$
Dim zb As Boolean
On Error Resume Next
Application.StatusBar = "Tabelle " & p & " wird gef|fffd|llt."
Range("A1").Select
yb = Selection.CurrentRegion.Rows.Count
Range("B1").Select
If g Then
cc p, yb, q
Exit Sub
End If
we p, yb, "KlassenBez", "A"
we p, yb, "", "B"
we p, yb, "KlassenStufe", "D"
we p, yb, "KlassenArt", "E"
we p, yb, "", "F"
we p, yb, "", "G"
we p, yb, "", "H"
we p, yb, "", "I"
we p, yb, "G8GTS", "J"
we p, yb, "", "K"
we p, yb, "", "L"
we p, yb, "", "M"
we p, yb, "", "N"
we p, yb, "", "O"
we p, yb, "", "P"
we p, yb, "", "Q"
we p, yb, "", "R"
we p, yb, "", "S"
we p, yb, "", "T"
we p, yb, "", "U"
we p, yb, "", "V"
Range("A2").Select
wj yb
xb yb%, zb, ac%
Range("A2").Select
yb = Selection.CurrentRegion.Rows.Count
zf "D", yb, "Klassenstufe", 2
zf "E", yb, "Klassenarten", 2
zf "J", yb, "Bildungsgaenge", 2
For mb = 2 To yb
Range("A" & mb).Select
sc "A", mb, True
staktklasse = Range("A" & mb)
If Not IsNumeric(staktklasse) Then Range("A" & mb).NumberFormat = "@"
sc "B", mb
Range("B" & mb) = dk(Range("B" & mb), False)
Range("C" & mb) = Range("B" & mb)
If Range("D" & mb) = "KIGA" Then
Columns("D:D").HorizontalAlignment = xlRight
Range("E" & mb) = "KIGAG"
ElseIf Range("D" & mb) = "SAM" Then
Range("D" & mb) = bh(Range("A" & mb), "00:00:00")
End If
stbgang = Range("J" & mb)
If stbgang = "" Then
stbgang = pc(Val(Range("D" & mb)))
Range("J" & mb) = stbgang
End If
vb = Range("A" & mb)
stklstufe = Range("D" & mb)
stklart = Range("E" & mb)
stbgang = Range("J" & mb)
If vb = "" Or stklstufe = "" Or stklart = "" Or stbgang = "" Then
fh "K|fffd|rzel: " & wi(vb) _
& ", Jahrgangsstufe: " & wi(stklstufe) _
& ", Klassenart: " & wi(stklart) _
& ", Bildungsgang: " & wi(stbgang)
End If
kc "A", "AC", mb, zb, ac
Next mb
Range("AC1").Select
Cells.Sort key1:=Range("AC1"), order1:=xlAscending, Header:=xlYes, ordercustom:=1, MatchCase:=False, _
Orientation:=xlTopToBottom, dataoption1:=xlSortNormal
yj ("AC")
End Sub
Sub cc(ByVal p$, ByVal yb%, Optional ByVal q As Boolean = False)
Dim r%, pe%, mb%, ac%, stklstufe$, stklart$, stbgang$, staktklasse$, vb$, s$, sd$
Dim zb As Boolean
we p, yb, "KlassenBez", "A"
we p, yb, "", "B"
we p, yb, "", "C"
we p, yb, "KlassenStufe", "D"
we p, yb, "FachKlassenArt", "E"
we p, yb, "", "F"
we p, yb, "", "G"
we p, yb, "", "H"
we p, yb, "AusbildungsBeruf", "I"
we p, yb, "YBildungsGang", "J"
we p, yb, "OrgaForm", "K"
we p, yb, "Flexibilisierung", "L"
we p, yb, "", "M"
we p, yb, "", "N"
we p, yb, "", "O"
we p, yb, "AusgelagerteFachpraxis", "P"
we p, yb, "", "Q"
we p, yb, "", "R"
we p, yb, "", "S"
we p, yb, "", "T"
we p, yb, "", "U"
we p, yb, "", "V"
Range("A2").Select
wj yb
sh "A", "C", yb, 2
Columns("L:L").NumberFormat = "@"
xb yb%, zb, ac%
Range("A2").Select
yb = Selection.CurrentRegion.Rows.Count
zf "D", yb, "Klassenstufe", 2
zf "E", yb, "Klassenarten", 2
zf "J", yb, "Bildungsgaenge", 2
zf "I", yb, "Ausbildungsberufe", 2, "Schl-Kurz"
zf "J", yb, "BS-Bildungsgang", 2, "I"
zf "K", yb, "Orgaformen", 2
For mb = 2 To yb
Range("A" & mb).Select
sc "A", mb, True
staktklasse = Range("A" & mb)
If Not IsNumeric(staktklasse) Then Range("A" & mb).NumberFormat = "@"
sc "B", mb
Range("B" & mb) = dk(Range("B" & mb), False)
Range("C" & mb) = Range("B" & mb)
If Range("D" & mb) = "KIGA" Then
Columns("D:D").HorizontalAlignment = xlRight
Range("E" & mb) = "KIGAG"
ElseIf Range("D" & mb) = "SAM" Then
Range("D" & mb) = bh(Range("A" & mb), "00:00:00")
End If
stbgang = Left(Range("J" & mb), 3)
If Range("E" & mb) = "" Then
If stbgang = "BS_" Then
Range("E" & mb) = "Fk"
ElseIf stbgang = "BGY" Then
Range("E" & mb) = "GOST"
Else
Range("E" & mb) = "KFK"
End If
End If
Range("I" & mb) = ""
If stbgang = "" Then
stbgang = pc(Val(Range("D" & mb)))
Range("J" & mb) = stbgang
End If
If Range("L" & mb) = "0" Then Range("L" & mb) = ""
s = Range("L" & mb)
If s <> "" Then
If Left(Right(s, 5), 1) = "." Then
s = Left(s, 2) & "/" & Mid(s, 4, 2) & "/" & Right(s, 2) & "/0"
End If
s = Replace(s, ",", ".")
For r = 0 To 3
sd = nj("L", r) & mb
Range(sd) = ""
Range(sd).NumberFormat = "@"
Range(sd).HorizontalAlignment = xlRight
pe = InStr(s, "/")
If pe > 1 Then
Range(sd) = Replace(Val(Left(s, pe - 1)), ",", ".")
s = Mid(s, pe + 1)
Else
Range(sd) = IIf(s = "", "", Val(s))
s = ""
End If
Next r
End If
vb = Range("A" & mb)
stklstufe = Range("D" & mb)
stklart = Range("E" & mb)
stbgang = Range("J" & mb)
If vb = "" Or stklstufe = "" Or stklart = "" Or stbgang = "" Then
fh "K|fffd|rzel: " & wi(vb) _
& ", Jahrgangsstufe: " & wi(stklstufe) _
& ", Klassenart: " & wi(stklart) _
& ", Bildungsgang: " & wi(stbgang)
End If
kc "A", "AC", mb, zb, ac
Next mb
Range("AC1").Select
Cells.Sort key1:=Range("AC1"), order1:=xlAscending, Header:=xlYes, ordercustom:=1, MatchCase:=False, _
Orientation:=xlTopToBottom, dataoption1:=xlSortNormal
yj ("AC")
Range("A2").Select
End Sub
Sub dc(ByVal p$, Optional ByVal q As Boolean = False)
Dim yb%, mb%, stnr$, stfamname$, stvorname$, tc
On Error Resume Next
Application.StatusBar = "Tabelle " & p & " wird gef|fffd|llt."
Range("H1").Select
yb = Selection.CurrentRegion.Rows.Count
Range("A2").Select
we p, yb, "SchuelerId", "A"
we p, yb, "SbName", "B"
ni yb%, "B"
we p, yb, "SbVorname", "C"
we p, yb, "SbVerhaeltnis", "D"
we p, yb, "SbStrasseHausNr", "E"
we p, yb, "", "F"
we p, yb, "SbPLZ", "G"
we p, yb, "SbWohnortRLP", "H"
we p, yb, "", "I"
we p, yb, "SbTelefonNr", "J"
we p, yb, "", "K"
we p, yb, "", "L", "!"
we p, yb, "", "M"
Range("A2").Select
wj yb
Columns("G:G").NumberFormat = "@"
For mb = 2 To yb
Range("A" & mb).Select
stnr = Range("A" & mb)
stfamname = Range("B" & mb)
stvorname = Range("C" & mb)
If stnr = "" Or stfamname = "" Or stvorname = "" Then
fh "Nr: " & wi(stnr) _
& ", Familienname: " & wi(stfamname) _
& ", Vorname: " & wi(stvorname)
End If
If Len(stfamname) > 40 Then Range("B" & mb) = Left(stfamname, 40)
Select Case Range("D" & mb)
Case "Vater": Range("D" & mb) = "M"
Case "Mutter": Range("D" & mb) = "W"
Case Else: Range("D" & mb) = ""
End Select
For Each tc In Array("J", "K")
qe tc, mb
Next tc
gk mb, "E", "F"
vc "G", mb
Next mb
Cells.Sort key1:=Range("A1"), order1:=xlAscending, Header:=xlYes, ordercustom:=1, MatchCase:=False, _
Orientation:=xlTopToBottom, dataoption1:=xlSortNormal
Range("A2").Select
End Sub
Sub ec(ByVal p As String, Optional ByVal q As Boolean = False)
Dim yb%, ic%, mb%, irow2%, tc, s, cd$, fc As Long
Dim r%, stfamname$, stvorname$, ch$, stgeschl$, stgebdatum$, stschuenvgebdat$, stneuschuenvgebdat$
Dim gc As Worksheet, zb As Boolean, ac%
On Error Resume Next
Application.StatusBar = "Tabelle " & p & " wird gef|fffd|llt."
Range("B1").Select
yb = Selection.CurrentRegion.Rows.Count
If g Then
hc p, yb, q
Exit Sub
End If
Range("BE2:BL" & yb).Cut
Range("CI" & "2").Select
ActiveSheet.Paste
Range("A2").Select
we p, yb, "", "A"
we p, yb, "Name", "B"
we p, yb, "Vorname", "C", "CE"
we p, yb, "", "D"
we p, yb, "KlassenBez", "E"
we p, yb, "SKlassenStufe", "F"
we p, yb, "Geschlecht", "G"
we p, yb, "GeburtsDatum", "H"
we p, yb, "Geburtsort", "I"
we p, yb, "GeburtsStaat", "J"
we p, yb, "Nationalitaet", "K"
we p, yb, "FamilienSprache", "L"
we p, yb, "ZuzugsJahr", "M"
we p, yb, "EinschulungsJahr", "N"
we p, yb, "", "O"
we p, yb, "StrasseHausNr", "P"
we p, yb, "", "Q"
we p, yb, "WohnortRLP", "R"
we p, yb, "", "S"
we p, yb, "Ortsteil", "T"
we p, yb, "", "U"
we p, yb, "PLZ", "V", "!"
we p, yb, "", "W"
we p, yb, "WohnortText", "X", "!"
we p, yb, "", "Y"
we p, yb, "", "Z"
we p, yb, "NeuZugang", "AA"
we p, yb, "", "AB"
we p, yb, "", "AC"
we p, yb, "", "AD"
we p, yb, "", "AE"
we p, yb, "Religion", "AF"
we p, yb, "TeilnahmeReligion", "AG"
we p, yb, "", "AH"
we p, yb, "SchuelerTyp", "AI"
we p, yb, "", "AJ"
we p, yb, "", "AK", "AT"
we p, yb, "", "AL", "BM"
we p, yb, "", "AM"
we p, yb, "", "AN"
we p, yb, "", "AO"
we p, yb, "", "AP"
we p, yb, "FoerderSprache", "AQ"
we p, yb, "", "AR"
we p, yb, "FoerderSchwerpunkt", "AS"
we p, yb, "GanztagsSchueler", "AT"
we p, yb, "BetreuendeGrundschule", "AU", "BJ"
we p, yb, "", "AV", "BM"
we p, yb, "", "AW", "BN"
we p, yb, "", "AX", "BH"
we p, yb, "", "AY"
we p, yb, "", "AZ"
we p, yb, "", "BA"
we p, yb, "", "BB"
we p, yb, "", "BC"
we p, yb, "", "BD"
we p, yb, "", "BE"
we p, yb, "", "BF"
we p, yb, "", "BG", "AZ"
we p, yb, "Folge", "BH"
we p, yb, "StatusErteil", "BI"
Columns("H:H").NumberFormat = "dd.mm.yyyy"
uh "CE", "CH", yb%, 2
For r = 0 To 3
Range(nj("BN", r * 5) & 1) = "Fremdsprache" & r + 1
If r = 0 Then s = "FremdSprache" Else s = ""
we p, yb, s, nj("BN", r * 5)
Range(nj("BO", r * 5) & 1) = "VonKlassenstufe" & r + 1
we p, yb, "", nj("BO", r * 5)
Range(nj("BP", r * 5) & 1) = "BisKlassenstufe" & r + 1
we p, yb, "", nj("BP", r * 5)
Range(nj("BQ", r * 5) & 1) = "Unterrichtsart" & r + 1
If r = 0 Then s = "StatusFach" Else s = ""
we p, yb, s, nj("BQ", r * 5)
Range(nj("BR", r * 5) & 1) = "Unterrichtserteilung" & r + 1
If r = 0 Then s = "StatusErteil" Else s = ""
we p, yb, s, nj("BR", r * 5)
Next r
we p, yb, "SchuelerId", "AY"
Range("CH1").Select
yb = Selection.CurrentRegion.Rows.Count
zb = True
ac = 0
mb = 3
Do While mb <= yb
Range("B" & mb).Select
ch = Range("E" & mb)
If ch <> "" Then
If Not IsNumeric(ch) Then zb = False
If Len(ch) > ac Then ac = Len(ch)
End If
stschuenvgebdat = Range("B" & mb) & Range("C" & mb) & Range("H" & mb)
If stschuenvgebdat = "" Then
For r = 1 To 93
tc = nj("A", r)
s = Range(tc & mb)
If s <> "" And Range(tc & mb + 1) = "" Then
Range(tc & mb + 1) = s
End If
Next r
Rows(mb & ":" & mb).Delete shift:=xlUp
yb = yb - 1
Else
For Each tc In Array("E", "F")
s = Range(tc & mb - 1)
If Range(tc & mb) = "" And s <> "" Then
Range(tc & mb) = s
End If
Next tc
stneuschuenvgebdat = Range("B" & mb + 1) & Range("C" & mb + 1) & Range("H" & mb + 1)
If stneuschuenvgebdat = stschuenvgebdat Then
If Range("AQ" & mb + 1) <> "" Then
Range("AQ" & mb) = Range("AQ" & mb + 1)
End If
r = Val(Range("BH" & mb + 1))
If r > 1 Then
Range(nj("BN", (r - 1) * 5) & mb) = Range("BN" & mb + 1)
Range(nj("BQ", (r - 1) * 5) & mb) = Range("BQ" & mb + 1)
Range(nj("BR", (r - 1) * 5) & mb) = Range("BR" & mb + 1)
End If
Rows(mb + 1 & ":" & mb + 1).Delete shift:=xlUp
yb = yb - 1
Else
mb = mb + 1
End If
End If
Loop
Rows(yb + 1 & ":20000").Delete shift:=xlUp
Range("CQ2").Select
r = 1
For mb = 3 To yb
ch = Range("E" & mb)
If Not IsNumeric(ch) Then Range("E" & mb).NumberFormat = "@"
Range("E" & mb) = UCase(bj(ch))
ch = Range("E" & mb)
If Not le(",1,2,3,", "," & Range("AT" & mb) & ",") Then
If Range("AU" & mb) = "J" Then
Range("AT" & mb) = 6
End If
End If
If Range("AU" & mb) <> "" Then Range("AU" & mb) = ""
Range("CQ" & mb).Select
If Range("CN" & mb) <> "" Then
Range("CQ" & mb) = r
r = r + 1
Else
Range("CQ" & mb) = ""
End If
kc "E", "CI", mb, zb, ac
Next mb
Range("A2").Select
Range("CI2") = "$$$$$"
Cells.Sort key1:=Range("CI1"), order1:=xlAscending, key2:=Range("A1"), order2:=xlAscending, _
Header:=xlYes, ordercustom:=1, MatchCase:=False, Orientation:=xlTopToBottom, _
dataoption1:=xlSortNormal, dataoption2:=xlSortNormal
If UCase(Sheets("Transfer-Beschreibung").Range("$J$20")) = "NEIN" Then
Set gc = Sheets("Klassen_Import")
irow2 = 2
For mb = 3 To yb
Do While CStr(gc.Range("A" & irow2)) <> CStr(Range("E" & mb)) And CStr(gc.Range("A" & irow2)) <> ""
irow2 = irow2 + 1
Loop
If CStr(gc.Range("A" & irow2)) = "" Then Exit For
If CStr(gc.Range("A" & irow2)) = CStr(Range("E" & mb)) Then
fc = CLng(Range("AY" & mb))
fc = CLng(irow2 - 1) * 10000 + fc
Range("AY" & mb) = fc
End If
Next mb
End If
sh "R", "S", yb, 2
sh "AY", "A", yb, 2
sh "CJ", "AZ", yb, 2
sh "AY", "CQ", yb, 2
sh "CH", "CR", yb, 2
Range("BH3:BH" & yb).ClearContents
Range("CJ2").Select
cd = "Bezugspersonen_Import"
Sheets(cd).Select
Range("A1").Select
ic = Selection.CurrentRegion.Rows.Count
If ic > 1 Then Rows("2:" & ic).Delete shift:=xlUp
Sheets(p).Select
Range("CJ2:CR" & yb).Select
Selection.Cut
Sheets(cd).Select
Range("F2").Select
ActiveSheet.Paste
Sheets(p).Select
Range("CH1").Select
yb = Selection.CurrentRegion.Rows.Count
wj yb
Range("A2").Select
Columns("E:E").HorizontalAlignment = xlLeft
Columns("F:F").HorizontalAlignment = xlRight
zf "J", yb, "Geburtsland", 2, "Schl-Kurz"
zf "K", yb, "Staatsangehoerigkeiten", 2, "Schl-Kurz"
zf "L", yb, "Familiensprachen", 2, "Schl-Kurz"
Columns("O:O").NumberFormat = "dd.mm.yyyy"
Columns("S:S").HorizontalAlignment = xlLeft
Columns("T:T").HorizontalAlignment = xlLeft
lk yb%, "P", "Q"
zf "R", yb, "PLZ", 2
Columns("R:R").NumberFormat = "@"
zf "S", yb, "GemeindeBez", 2
zf "AA", yb, "SchulformNeuzugang", 2
zf "AF", yb, "Konfessionen", 2, "Schl-Kurz"
zf "AG", yb, "TeilnahmeReligion", 2
zf "AI", yb, "Schuelertyp", 2
zf "AS", yb, "Foerderungen", 2
zf "AT", yb, "Ganztagsunterricht", 2
For Each tc In Array("AQ", "BN", "BS", "BX", "CC")
zf tc, yb, "Statistikfaecher", 2, "Schl-Kurz"
Next tc
zf "AZ", yb, "Personentyp", 2
For mb = 2 To yb
Range("E" & mb).Select
stfamname = Range("B" & mb)
stvorname = Range("C" & mb)
ch = Range("E" & mb)
stgeschl = Range("G" & mb)
stgebdatum = Range("H" & mb)
If stfamname = "" Or stvorname = "" Or ch = "" Or stgeschl = "" Or stgebdatum = "" Then
fh "Familienname: " & wi(stfamname) _
& ", Vorname: " & wi(stvorname) _
& ", Klasse: " & wi(ch) _
& ", Geschlecht: " & wi(stgeschl) _
& ", Geburtsdatum: " & wi(stgebdatum)
End If
If Len(stfamname) > 40 Then Range("B" & mb) = Left(stfamname, 40)
sc "E", mb, True
Range("F" & mb).NumberFormat = "General"
If Range("F" & mb) = "" Then Range("F" & mb) = Val(Range("E" & mb))
For Each tc In Array("M", "N")
If Range(tc & mb) <> "" Then Range(tc & mb) = "01.08." & Range(tc & mb)
Next tc
If Range("V" & mb) <> "" Or Range("X" & mb) <> "" Then
Range("R" & mb) = Range("V" & mb)
Range("S" & mb) = Range("X" & mb)
Range("V" & mb) = ""
Range("X" & mb) = ""
End If
vc "R", mb
If Range("Z" & mb) = "" Then Range("Z" & mb) = "L"
Range("AD" & mb) = pc(Val(Range("F" & mb)))
If yi(Range("AQ" & mb), "D") Then
Range("AQ" & mb) = "D"
Range("AR" & mb) = ""
ElseIf yi(Range("AQ" & mb), "E") Then
Range("AQ" & mb) = ""
Range("AR" & mb) = "E"
Else
Range("AQ" & mb) = ""
Range("AR" & mb) = ""
End If
Next mb
Range("A2").Select
zf "F", yb, "Klassenstufe", 2
cd = "Fremdsprachen_Import"
Sheets(cd).Select
Range("A1").Select
ic = Selection.CurrentRegion.Rows.Count
If ic > 1 Then Rows("2:" & ic).Delete shift:=xlUp
For r = 1 To 2
Sheets(p).Select
If r = 1 Then
Range("A2:A" & yb).Copy
tc = "A"
Else
Range("BN1:CG1").ClearContents
Range("BN2:CG" & yb).Cut
tc = "B"
End If
Sheets(cd).Select
Range(tc & "2").Select
ActiveSheet.Paste
Next r
Range("A1").Select
ic = Selection.CurrentRegion.Rows.Count
li ic, "B"
cd = "Bezugspersonen_Import"
Sheets(cd).Select
dc cd, q
Sheets(p).Select
Range("A1").Select
Cells.Sort key1:=Range("E1"), order1:=xlAscending, key2:=Range("B1"), order2:=xlAscending, _
key3:=Range("C1"), order3:=xlAscending, Header:=xlYes, ordercustom:=1, MatchCase:=False, _
Orientation:=xlTopToBottom, dataoption1:=xlSortNormal, dataoption2:=xlSortNormal, dataoption3:=xlSortNormal
xf 54
wf q
End Sub
Sub hc(ByVal p As String, ByVal yb%, Optional ByVal q As Boolean = False)
Dim ic%, mb%, irow2%, tc, s, cd$, fc As Long
Dim r%, stfamname$, stvorname$, ch$, stgeschl$, stgebdatum$, stschuenvgebdat$, stneuschuenvgebdat$
Dim gc As Worksheet, zb As Boolean, ac%
On Error Resume Next
Range("A2").Select
we p, yb, "SchuelerId", "A"
we p, yb, "Name", "B"
we p, yb, "Vorname", "C", "CE"
we p, yb, "", "D"
we p, yb, "KlassenBez", "E"
we p, yb, "SKlassenStufe", "F"
we p, yb, "Geschlecht", "G"
we p, yb, "GeburtsDatum", "H"
we p, yb, "", "I"
we p, yb, "GeburtsStaat", "J"
we p, yb, "Nationalitaet", "K"
we p, yb, "FamilienSprache", "L"
we p, yb, "ZuzugsJahr", "M"
we p, yb, "", "N"
we p, yb, "EintrittBildungsgang", "O"
we p, yb, "", "P"
we p, yb, "", "Q"
we p, yb, "WohnortRLP", "R"
we p, yb, "", "S"
we p, yb, "Ortsteil", "T"
we p, yb, "", "U"
we p, yb, "", "V"
we p, yb, "", "W"
we p, yb, "", "X", "!"
we p, yb, "", "Y"
we p, yb, "", "Z"
we p, yb, "SchulForm3", "AA"
we p, yb, "KlassenStufe", "AB"
we p, yb, "SchulischerAbschlussABS", "AC"
we p, yb, "YBildungsGang", "AD"
we p, yb, "", "AE"
we p, yb, "Religion", "AF"
we p, yb, "TeilnahmeReligion", "AG"
we p, yb, "", "AH"
we p, yb, "Wiederholer", "AI"
we p, yb, "AusbildungsBeruf", "AJ", "BG"
we p, yb, "", "AK", "BH"
we p, yb, "BeruflicherAbschlussBBS", "AL", "BM"
we p, yb, "", "AM"
we p, yb, "", "AN"
we p, yb, "", "AO"
we p, yb, "", "AP"
we p, yb, "FoerderSprache", "AQ", "CD"
we p, yb, "", "AR"
we p, yb, "", "AS"
we p, yb, "", "AT"
we p, yb, "", "AU", "BJ"
we p, yb, "", "AV", "BM"
we p, yb, "", "AW", "BN"
we p, yb, "", "AX"
we p, yb, "", "AY"
we p, yb, "", "AZ", "BM"
we p, yb, "", "BA"
we p, yb, "", "BB"
we p, yb, "", "BC"
we p, yb, "", "BD"
we p, yb, "", "BE"
we p, yb, "", "BF"
we p, yb, "FremdSprache", "BG", "AZ"
we p, yb, "Folge", "BH"
we p, yb, "", "BI"
we p, yb, "", "BJ"
we p, yb, "", "BK"
we p, yb, "", "BL"
we p, yb, "FHRUnterricht", "BM"
Columns("H:H").NumberFormat = "dd.mm.yyyy"
uh "CE", "CH", yb%, 2
For r = 0 To 3
Range(nj("BN", r * 5) & 1) = "Fremdsprache" & r + 1
If r = 0 Then s = "FremdSprache" Else s = ""
we p, yb, s, nj("BN", r * 5)
Range(nj("BO", r * 5) & 1) = "VonKlassenstufe" & r + 1
we p, yb, "", nj("BO", r * 5)
Range(nj("BP", r * 5) & 1) = "BisKlassenstufe" & r + 1
we p, yb, "", nj("BP", r * 5)
Range(nj("BQ", r * 5) & 1) = "Unterrichtsart" & r + 1
If r = 0 Then s = "StatusFach" Else s = ""
we p, yb, s, nj("BQ", r * 5)
Range(nj("BR", r * 5) & 1) = "Unterrichtserteilung" & r + 1
If r = 0 Then s = "StatusErteil" Else s = ""
we p, yb, s, nj("BR", r * 5)
Next r
Range("CH1").Select
yb = Selection.CurrentRegion.Rows.Count
zb = True
ac = 0
mb = 3
Do While mb <= yb
Range("B" & mb).Select
ch = Range("E" & mb)
If ch <> "" Then
If Not IsNumeric(ch) Then zb = False
If Len(ch) > ac Then ac = Len(ch)
End If
stschuenvgebdat = Range("B" & mb) & Range("C" & mb) & Range("H" & mb)
If stschuenvgebdat = "" Then
For r = 1 To 93
tc = nj("A", r)
s = Range(tc & mb)
If s <> "" And Range(tc & mb + 1) = "" Then
Range(tc & mb + 1) = s
End If
Next r
Rows(mb & ":" & mb).Delete shift:=xlUp
yb = yb - 1
Else
For Each tc In Array("E", "F")
s = Range(tc & mb - 1)
If Range(tc & mb) = "" And s <> "" Then
Range(tc & mb) = s
End If
Next tc
stneuschuenvgebdat = Range("B" & mb + 1) & Range("C" & mb + 1) & Range("H" & mb + 1)
If stneuschuenvgebdat = stschuenvgebdat Then
If Range("AQ" & mb + 1) <> "" Then
Range("AQ" & mb) = Range("AQ" & mb + 1)
End If
r = Val(Range("BH" & mb + 1))
If r > 1 Then
Range(nj("BN", (r - 1) * 5) & mb) = Range("BN" & mb + 1)
Range(nj("BQ", (r - 1) * 5) & mb) = Range("BQ" & mb + 1)
Range(nj("BR", (r - 1) * 5) & mb) = Range("BR" & mb + 1)
End If
Rows(mb + 1 & ":" & mb + 1).Delete shift:=xlUp
yb = yb - 1
Else
mb = mb + 1
End If
End If
Loop
Rows(yb + 1 & ":20000").Delete shift:=xlUp
Range("CQ2").Select
r = 1
For mb = 3 To yb
ch = Range("E" & mb)
If Not IsNumeric(ch) Then Range("E" & mb).NumberFormat = "@"
Range("E" & mb) = UCase(bj(ch))
ch = Range("E" & mb)
If Not le(",1,2,3,", "," & Range("AT" & mb) & ",") Then
If Range("AU" & mb) = "J" Then
Range("AT" & mb) = 6
End If
End If
If Range("AU" & mb) <> "" Then Range("AU" & mb) = ""
Range("CQ" & mb).Select
If Range("CN" & mb) <> "" Then
Range("CQ" & mb) = r
r = r + 1
Else
Range("CQ" & mb) = ""
End If
kc "E", "CI", mb, zb, ac
Next mb
Range("A2").Select
Range("CI2") = "$$$$$"
Cells.Sort key1:=Range("CI1"), order1:=xlAscending, key2:=Range("A1"), order2:=xlAscending, _
Header:=xlYes, ordercustom:=1, MatchCase:=False, Orientation:=xlTopToBottom, _
dataoption1:=xlSortNormal, dataoption2:=xlSortNormal
If UCase(Sheets("Transfer-Beschreibung").Range("$J$20")) = "NEIN" Then
Set gc = Sheets("Klassen_Import")
irow2 = 2
For mb = 3 To yb
Do While CStr(gc.Range("A" & irow2)) <> CStr(Range("E" & mb)) And CStr(gc.Range("A" & irow2)) <> ""
irow2 = irow2 + 1
Loop
If CStr(gc.Range("A" & irow2)) = "" Then Exit For
If CStr(gc.Range("A" & irow2)) = CStr(Range("E" & mb)) Then
fc = CLng(Range("A" & mb))
fc = CLng(irow2 - 1) * 10000 + fc
Range("A" & mb) = fc
End If
Next mb
End If
sh "R", "S", yb, 2
Range("BH3:BH" & yb).ClearContents
Range("CH1").Select
yb = Selection.CurrentRegion.Rows.Count
wj yb
Range("A2").Select
Columns("E:E").HorizontalAlignment = xlLeft
Columns("F:F").HorizontalAlignment = xlRight
zf "J", yb, "Geburtsland", 2, "Schl-Kurz"
zf "K", yb, "Staatsangehoerigkeiten", 2, "Schl-Kurz"
zf "L", yb, "Familiensprachen", 2, "Schl-Kurz"
Columns("O:O").NumberFormat = "dd.mm.yyyy"
Columns("S:S").HorizontalAlignment = xlLeft
Columns("T:T").HorizontalAlignment = xlLeft
zf "R", yb, "PLZ", 2
Columns("R:R").NumberFormat = "@"
zf "S", yb, "GemeindeBez", 2
zf "AA", yb, "SchulformNeuzugang", 2
zf "AC", yb, "VorbildungABS", 2, "Schl-Kurz"
zf "AD", yb, "Bildungsgaenge", 2, "Schl-Kurz"
zf "AJ", yb, "Ausbildungsberufe", 2, "Schl-Kurz"
zf "AD", yb, "BS-Bildungsgang", 2, "AJ"
zf "AF", yb, "Konfessionen", 2, "Schl-Kurz"
zf "AG", yb, "TeilnahmeReligion", 2
zf "AI", yb, "Schuelertyp", 2
For Each tc In Array("AQ", "BN", "BS", "BX", "CC")
zf tc, yb, "Statistikfaecher", 2, "Schl-Kurz"
Next tc
zf "BM", yb, "FHRU", 2
For mb = 2 To yb
Range("E" & mb).Select
stfamname = Range("B" & mb)
stvorname = Range("C" & mb)
ch = Range("E" & mb)
stgeschl = Range("G" & mb)
stgebdatum = Range("H" & mb)
If stfamname = "" Or stvorname = "" Or ch = "" Or stgeschl = "" Or stgebdatum = "" Then
fh "Familienname: " & wi(stfamname) _
& ", Vorname: " & wi(stvorname) _
& ", Klasse: " & wi(ch) _
& ", Geschlecht: " & wi(stgeschl) _
& ", Geburtsdatum: " & wi(stgebdatum)
End If
If Len(stfamname) > 40 Then Range("B" & mb) = Left(stfamname, 40)
sc "E", mb, True
Range("F" & mb).NumberFormat = "General"
If Range("F" & mb) = "" Then Range("F" & mb) = Val(Range("E" & mb))
For Each tc In Array("M", "N")
If Range(tc & mb) <> "" Then Range(tc & mb) = "01.08." & Range(tc & mb)
Next tc
vc "R", mb
If Range("Z" & mb) = "" Then Range("Z" & mb) = "L"
If yi(Range("AQ" & mb), "D") Then
Range("AQ" & mb) = "D"
Range("AR" & mb) = ""
ElseIf yi(Range("AQ" & mb), "E") Then
Range("AQ" & mb) = ""
Range("AR" & mb) = "E"
Else
Range("AQ" & mb) = ""
Range("AR" & mb) = ""
End If
Next mb
Range("A2").Select
zf "F", yb, "Klassenstufe", 2
cd = "Fremdsprachen_Import"
Sheets(cd).Select
Range("A1").Select
ic = Selection.CurrentRegion.Rows.Count
If ic > 1 Then Rows("2:" & ic).Delete shift:=xlUp
For r = 1 To 2
Sheets(p).Select
If r = 1 Then
Range("A2:A" & yb).Copy
tc = "A"
Else
Range("BN1:CG1").ClearContents
Range("BN2:CG" & yb).Cut
tc = "B"
End If
Sheets(cd).Select
Range(tc & "2").Select
ActiveSheet.Paste
Next r
Range("A1").Select
ic = Selection.CurrentRegion.Rows.Count
li ic, "B"
cd = "Bezugspersonen_Import"
Sheets(cd).Select
Range("A1").Select
ic = Selection.CurrentRegion.Rows.Count
If ic > 1 Then
If MsgBox("Das Tabellenblatt """ & cd & """ enth|fffd|lt Daten." & vbCrLf _
& "Die Datei ""SchuelerBbsNeuanlage.xml"" beinhaltet jedoch keine Daten von Bezugspersonen. " _
& "Sollen Sie die Daten gel|fffd|scht werden?", vbYesNo + vbQuestion, "Daten von Bezugspersonen") = vbYes Then
Rows("2:" & ic).Delete shift:=xlUp
End If
End If
Sheets(p).Select
Range("A1").Select
Cells.Sort key1:=Range("E1"), order1:=xlAscending, key2:=Range("B1"), order2:=xlAscending, _
key3:=Range("C1"), order3:=xlAscending, Header:=xlYes, ordercustom:=1, MatchCase:=False, _
Orientation:=xlTopToBottom, dataoption1:=xlSortNormal, dataoption2:=xlSortNormal, dataoption3:=xlSortNormal
xf 54
wf q
End Sub
Sub jc()
Dim r%, tc$
Range("BG1").Select
Selection.Copy
Range("BJ1:BM1").Select
ActiveSheet.Paste
Application.CutCopyMode = False
Range("BJ1") = "Abgangsdatum (TT.MM.JJJJ)"
Range("BK1") = "Erstabschluss (K|fffd|rzel)"
Range("BL1") = "Zweitabschluss (K|fffd|rzel)"
Range("BM1") = "Fachhochschulreifeunterricht (K|fffd|rzel)"
For r = 0 To 3
tc = nj("BJ", r)
Columns(tc & ":" & tc).ColumnWidth = 14
Next r
End Sub
Sub kc(ByVal lc$, ByVal mc$, ByVal mb%, ByVal zb As Boolean, ByVal ac%)
Dim s$, r%
s = Range(lc & mb)
If zb Then
r = Len(s)
If r < ac Then s = String(ac - r, "0") & s
Else
r = Val(s)
If r > 0 Then s = IIf(r < 10, "0", "") & s
End If
Range(mc & mb) = "'" & s
End Sub
Function nc%()
Dim mb%, yb%, cd$, oc As Date
On Error Resume Next
If Not m Then Application.ScreenUpdating = False
oc = Sheets("Transfer-Beschreibung").Range("$I$12")
cd = "Zeitraeume"
kb cd
yb = Selection.CurrentRegion.Rows.Count
For mb = 2 To yb
If oc >= Range("B" & mb) And oc <= Range("C" & mb) Then
nc = Range("A" & mb)
vf cd
If Not m Then Application.ScreenUpdating = True
Exit Function
End If
Next mb
vf cd
If Not m Then Application.ScreenUpdating = True
nc = 0
End Function
Function pc$(ByVal qc%)
Dim rc$, stbildgang$
stbildgang = Sheets("Transfer-Beschreibung").Range("$J$18")
If stbildgang <> "" Then
hg stbildgang, "Bildungsgaenge", "B", "B"
If stbildgang <> "" Then
pc = stbildgang
Exit Function
End If
End If
rc = LCase(stschulbez)
Select Case d
Case 10000 To 29999
If InStr(rc, "haupt") > 0 Then
If InStr(rc, "grund") > 0 Then pc = "GRS+" Else pc = "HS"
ElseIf InStr(rc, "grund") > 0 Then
pc = "GS"
End If
Case 30000 To 39999
pc = "FOEZ"
Case 40000 To 49999
If qc > 10 Then
pc = "FOSWV"
Else
If InStr(rc, "koop") > 0 Then pc = "RS+koop" Else pc = "RS+integr"
End If
Case 50000 To 59999
If InStr(rc, "koll") > 0 Then
If InStr(rc, "abend") > 0 Then pc = "KLAGY" Else pc = "KOLL"
ElseIf InStr(rc, "abend") > 0 Then
pc = "AGY"
ElseIf InStr(rc, "waldorf") > 0 Then
pc = "FWSSEK"
Else
If InStr(rc, "altsp") > 0 Then pc = "GY8" Else pc = "GY8NA"
End If
Case 70000 To 79999
pc = "IGS"
End Select
End Function
Sub sc(ByVal tc$, ByVal mb%, Optional ByVal uc As Boolean = False)
Dim s$
If Range(tc & mb).NumberFormat = "h:mm AM/PM" Then
s = Replace(Format(Range(tc & mb), "h:mm;@"), ":00", " a")
Else
s = Range(tc & mb)
End If
Range(tc & mb).NumberFormat = "@"
Range(tc & mb).HorizontalAlignment = xlLeft
If uc Then s = UCase(bj(s))
Range(tc & mb) = s
End Sub
Sub vc(ByRef tc$, ByVal mb%)
Dim wc$
wc = Range(tc & mb)
If Val(wc) > 0 And Val(wc) < 10000 Then Range(tc & mb) = "'0" & wc
End Sub
Sub xc()
If Range("$E$28") = "O" Then
Range("$H$28").Value = Range("C4").Value
Range("$E$28").Font.ThemeColor = 1
Range("$H$28").Font.ThemeColor = 1
End If
End Sub
Function yc(ByVal zc$) As Long
Dim ad, stteil, stganz$
stganz = ""
ad = Split(zc, ".")
For Each stteil In ad
stganz = stganz & Format(stteil, "000")
Next stteil
yc = CLng(stganz)
End Function
Private Function bd(Optional ByVal cd$ = "") As Boolean
Dim r%, stleerlic$, storiglic$, stclearlic$, dd As Boolean
Dim ed As Worksheet, fd As Boolean, gd As Long, hd As Long
On Error Resume Next
Set ed = Sheets("Transfer-Beschreibung")
xc
hd = yc(ed.Range("$H$28"))
gd = yc(n)
If hd < gd Then
bd = False
MsgBox si("[~mrym7qv{dt|7f|7xsre7vupr{vbqry9"), vbCritical Or vbSystemModal, si("Qv{dt|7f|r7[~mrym")
Exit Function
End If
stleerlic = ""
For r = 1 To 4
stleerlic = stleerlic & String(5, Chr(63))
If r < 4 Then stleerlic = stleerlic & "-"
Next r
If Not m Then Application.ScreenUpdating = False
fd = False
dd = False
bd = True
storiglic = ed.Range("$I$9")
If Right(ed.Range("$D$4"), 2) <> "  " Then
fd = kb(cd)
If fd Then
stclearlic = Left(ui(storiglic), 10)
If stclearlic = "6041967098" Then dd = True
If dd Then
d = Val(Range("B3"))
Else
If InStr(stleerlic, storiglic) = 0 And Left(LCase(ActiveWorkbook.Name), 8) = "convert-" Then
ed.Range("$D$4") = ed.Range("$D$4") & "  "
End If
End If
End If
End If
vf cd
If Not m Then Application.ScreenUpdating = True
If fd And Not dd Then
bd = False
MsgBox si("[~mrym7qv{dt|7f|7xsre7vupr{vbqry9"), vbCritical Or vbSystemModal, si("Qv{dt|7f|r7[~mrym")
If InStr(stleerlic, storiglic) = 0 Then ThisWorkbook.Close True
End If
End Function
Public Sub jd(Optional ByVal kd As Boolean = True)
Dim ld
On Error Resume Next
For Each ld In Array _
("AltSVP-Tabellen", "Familienstand", "Konfessionen", "Schuelertyp", "Staatsangehoerigkeiten", "Bundeslaender", "Gemeinden", "Raumarten", _
"Statistikfaecher", "Bildungsgaenge", "LehrerZugaenge", "LehrerAbgaenge", "LehrerArten", "LehrerFunktionen", "LehrerFehlgruende", _
"Amtsbez", "Dienstverh", "Dienstherren", "Beschaeftigungsverh", "Lehraemter", "Lehrbefaehigungen", "Klassenarten", "OrgaFormen", _
"Familiensprachen", "SchulformNeuzugang", "TeilnahmeReligion", "VorbildungABS", "VorbildungBBS", "Abschlussarten")
If kd Then Sheets(ld).Protect Else Sheets(ld).Unprotect
Next ld
End Sub
Public Sub md()
If InStr(LCase(zk), "auto") Then
nd
Application.Quit
End If
End Sub
Private Sub nd()
Dim mb%, od As Worksheet, pd As Boolean
Dim v As Date, w As Date, stdifftime$
pd = False
Sheets("Transfer-Beschreibung").Range("$L$22") = ""
v = Now
fh Format(Now, "yyyy-mm-dd") & " - " & Format(Now, "hh:mm:ss") _
& " : Automatischer Transfer " & l & " -> edoo.sys wird gestartet:", True
Set od = Sheets("Transfer-Beschreibung")
For mb = 1 + 8 To 10 + 8
If od.Range("$C$" & mb) = "Automatisch" Then
o od.Range("$D$" & mb), True
pd = True
End If
Next mb
w = Now - v
Sheets("Transfer-Beschreibung").Range("$L$22") = Replace("Ausf|fffd|hrungsdauer: " & Format(w, "n") & " Min " & Format(w, "s") & " Sek", " 0 Min ", " ")
If pd Then
wf False
If Range("$C$21") = "Automatisch" Then ef True
Else
MsgBox "Bei keiner Importtabelle wurde der Transfer auf 'Automatisch' gesetzt." & vbCrLf _
& "Daher wurde kein automatischer Transfer durchgef|fffd|hrt.", vbOKOnly + vbExclamation, "Kein automatischer Transfer"
Exit Sub
End If
Range("A6").Select
Application.StatusBar = ""
fh vbCrLf & Format(Now, "yyyy-mm-dd") & " - " & Format(Now, "hh:mm:ss") _
& " : Automatischer Transfer " & l & " -> edoo.sys ist beendet."
End Sub
Private Sub qd(ByVal rd$, ByVal sd)
Dim td As FileDialog, stpfad$, stupperpfad$, stextlong$, sttitle$, r%
Dim ud As Object, vd As Variant
On Error Resume Next
stpfad = Trim(Range(sd))
rd = LCase(rd)
If rd = "" Then
sttitle = "Ordnerpfad zur XML-Statistikdatei ausw|fffd|hlen"
If Right(stpfad, 1) = "\" Then stpfad = Left(stpfad, Len(stpfad) - 1)
r = InStrRev(stpfad, "\")
If r > 0 Then
stupperpfad = Left(stpfad, r - 1)
Else
stupperpfad = stpfad
End If
Set ud = CreateObject("Shell.Application")
Set vd = ud.browseforfolder(0, sttitle, &H1200, (stupperpfad))
stpfad = vd.items().Item().Path
Else
stextlong = "Excel-97-2003-Arbeitsmappe"
sttitle = "Excel-Importdatei f|fffd|r edoo.sys ausw|fffd|hlen"
stpfad = Application.GetSaveAsFilename( _
InitialFileName:=stpfad, _
filefilter:=stextlong & " (*." & rd & "), *.xls", _
Title:=sttitle)
End If
If stpfad <> "" And stpfad <> "Falsch" Then
Do
r = InStrRev(stpfad, ".")
If r > 0 Then stpfad = Left(stpfad, r - 1)
Loop While r > 0
If rd <> "" Then stpfad = stpfad & "." & rd
Range(sd) = stpfad
End If
End Sub
Sub wd(ByVal xd%)
Dim yd As Date
yd = Now
Do
DoEvents
Loop Until Now > DateAdd("s", xd, yd)
End Sub
Function zd(ByVal ae$, ByVal be$, ByVal ce$, Optional ByRef ib$) As Boolean
Dim de, fe%, lnfilelen&, yb%, ee As Byte
On Error Resume Next
de = mj(ae) & be
If Dir(de) = "" Then
ib = "Die Datei " & de & " existiert nicht."
zd = False
Exit Function
End If
fe = FreeFile
Open de For Binary As fe
lnfilelen = LOF(fe)
Get fe, lnfilelen, ee
If ee = 26 Then
Seek fe, lnfilelen
Put fe, , CByte(13)
Put fe, , CByte(10)
End If
Close fe
Application.DisplayAlerts = False
ActiveWorkbook.XmlImport URL:=de, importmap:=Nothing, overwrite:=True, Destination:=Range("$A$2")
Application.DisplayAlerts = False
Range("A1").Select
yb = Selection.CurrentRegion.Rows.Count
If yb <= 1 Then
zd = False
Else
zd = True
End If
End Function
Function ge(ByVal ae$, ByVal be$, ByVal p) As Boolean
Dim de, staktwbname$, yb%, vj%, icolnew%, r%, s$
de = mj(ae) & be
staktwbname = Application.ActiveWorkbook.Name
Workbooks.OpenXML Filename:=de, loadoption:=xlXmlLoadOpenXml
Workbooks(be).Activate
Sheets(1).Select
Range("A1").Select
yb = Selection.CurrentRegion.Rows.Count
Range("A2:CM" & yb).Copy
Workbooks(staktwbname).Activate
Range("A2").Select
ActiveSheet.Paste
Application.CutCopyMode = False
Workbooks(be).Close
Range("A1").Select
yb = Selection.CurrentRegion.Rows.Count
vj = 1
icolnew = 0
Do While Cells(2, vj) <> ""
s = Cells(2, vj)
r = InStrRev(s, "/")
Cells(2, vj) = Mid(s, r + 1)
s = Cells(2, vj)
If s = "#agg" And icolnew = 0 Then icolnew = vj
If vj > 1 Then
If Cells(2, vj - 1) = "#agg" Then
uh rj(vj), rj(icolnew), yb, 2
If Cells(2, icolnew) <> "#agg" Then icolnew = icolnew + 1
Cells(2, vj) = "#agg"
End If
End If
vj = vj + 1
Loop
vj = icolnew
Do While Cells(2, vj) <> ""
ai rj(vj), yb, 2
vj = vj + 1
Loop
If p <> "Lehrkr|fffd|fte_Import" Then
vj = 1
Do While Cells(2, vj) <> ""
s = Cells(2, vj)
If s = "KlassenStufe" Then
If Cells(2, vj - 1) = "Geschlecht" Then
Cells(2, vj) = "SKlassenStufe"
End If
ElseIf s = "Sprache" Then
If Cells(2, vj - 1) = "Folge" Then
Cells(2, vj) = "FremdSprache"
Else
Cells(2, vj) = "FoerderSprache"
Exit Do
End If
End If
vj = vj + 1
Loop
End If
Range("A1").Select
yb = Selection.CurrentRegion.Rows.Count
If yb <= 1 Then
ge = False
Else
ge = True
End If
End Function
Function he(ByVal ie As Double) As Boolean
Dim je%
On Error Resume Next
je = 0
Do
Err.Clear
je = je + 1
If je >= 1000 Then
he = False
Exit Function
End If
wd 1
AppActivate ie, False
Loop Until Err = 0
he = True
On Error GoTo 0
End Function
Function ke(ByVal tc$, ByVal yb%) As Boolean
Dim mb%
ke = False
For mb = 2 To yb
If IsNumeric(Range(tc & mb)) Then
ke = True
Exit For
End If
Next mb
End Function
Function le(ByRef ne$, ByVal oe$, Optional ByRef r%) As Boolean
Dim pe%, k%, satzocomm$
r = InStr(ne, "//")
If r > 0 Then
satzocomm = Left(ne, r)
Else
satzocomm = ne
End If
r = InStr(UCase(satzocomm), UCase(oe))
If r = 0 Then
le = False
Else
r = InStr(UCase(ne), UCase(oe))
pe = InStr(ne, "=")
k = InStr(ne, ";")
ne = Left(ne, pe) & Mid(ne, k)
r = pe + 1
le = True
End If
End Function
Sub qe(ByVal tc$, ByVal mb%)
Dim re$
Range(tc & mb).HorizontalAlignment = xlLeft
Range(tc & mb).NumberFormat = "@"
re = bj(Range(tc & mb))
re = Replace(re, "/", "-")
re = Replace(re, "(", "")
re = Replace(re, ")", "-")
If Len(re) <= 6 And (Left(re, 1) = "-" Or Right(re, 1) = "-") Or re = "-" Then
re = ""
End If
Range(tc & mb) = CStr(re)
End Sub
Sub se(ByVal te, ByVal ue$, ByVal ve%, ByVal mc$)
Dim lc$
If ue <> "" Then
lc = qk(ue, te)
Sheets(te).Range(lc & "2:" & lc & ve).Copy
ActiveSheet.Paste Range(mc & "2")
End If
Application.CutCopyMode = False
End Sub
Sub we(ByVal p, ByVal yb%, ByVal ue$, ByVal mc$, Optional ByVal xe$ = "")
Dim lc$
If ue$ <> "" Then
lc = qk(ue, p, 2)
If lc = mc Then Exit Sub
If lc = "" Then
If xe = "!!" Then
lc = tj(2)
Sheets(p).Range(mc & "2:" & lc & yb).Cut
ActiveSheet.Paste Range(nj$(mc, 1) & "2")
Range(mc & 2) = "Dummy"
End If
Exit Sub
End If
End If
If xe <> "" Then
If Left(xe, 1) = "!" Then xe = tj(2)
Sheets(p).Range(mc & "2:" & mc & yb).Cut
ActiveSheet.Paste Range(xe & "2")
End If
If ue = "" Then
If xe = "" Then Range(mc & "2:" & mc & yb).ClearContents
Else
If lc <> mc Then
Sheets(p).Range(lc & "2:" & lc & yb).Cut
ActiveSheet.Paste Range(mc & "2")
End If
End If
End Sub
Private Sub ye()
Rows("2:2").Select
ActiveWindow.FreezePanes = True
Range("A2").Select
End Sub
Sub ze(ByRef ne$, ByVal af$, ByVal cf$)
Dim r%
If le(ne, af, r) Then
ne = Left(ne, r - 1) & " '" & cf & "'" & Mid(ne, r)
End If
End Sub
Sub df(ByRef ne$, ByVal af$, ByVal cf$)
Dim r%
If le(ne, af, r) Then
ne = Left(ne, r - 1) & " " & cf & Mid(ne, r)
End If
End Sub
Private Sub ef(ByVal ff As Boolean, Optional ByVal gf As Boolean = False)
Dim hf$, mf$, ih$, jf As Variant, iarrwsempty%, kf As Variant
Dim r%, yb%, rk, istartpos%, lf As Boolean, stimportvorlage$, stdateiart$
On Error Resume Next
stimportvorlage = Sheets("Transfer-Beschreibung").Range("$J$21")
istartpos = 9
If UCase(Sheets("Transfer-Beschreibung").Range("$J$17")) = "JA" Then
lf = True
Else
lf = False
End If
iarrwsempty = 0
For r = 0 To 10
If gf Or UCase(Sheets("Transfer-Beschreibung").Range("$E$" & istartpos + r)) = "NEIN" Then
iarrwsempty = iarrwsempty + 1
If iarrwsempty = 1 Then
ReDim kf(iarrwsempty)
Else
ReDim Preserve kf(iarrwsempty)
End If
kf(iarrwsempty) = Sheets("Transfer-Beschreibung").Range("$D$" & istartpos + r)
End If
Next r
If iarrwsempty = 11 And Not gf Then
If Not ff Then MsgBox "Alle Importtabellen wurden ausgeschlossen." & vbCrLf _
& "Bitte Button ""Importvorlagen-Datei erzeugen"" verwenden.", vbOKOnly + vbExclamation, "Keine Importtabellen"
Exit Sub
End If
gf = kf = 11
stdateiart = IIf(gf, "Importvorlagen-Datei", "Importdatei")
mf = ActiveWorkbook.FullName
mf = Left(mf, InStrRev(mf, ".")) & "txt"
hf = Sheets("Transfer-Beschreibung").Range("$I$10")
ih = Left(hf, InStrRev(hf, ".")) & "txt"
If Dir(ih) <> "" Then Kill ih
If Dir(mf) <> "" Then Name mf As ih
jf = Array("Schnittstellen-Beschreibung", "Erl|fffd|uterungen", "AltSVP-Tabellen", "Betriebetypen_Import", _
"Betriebe_Import", "Abteilungen_Import", "R|fffd|ume_Import", "F|fffd|cher_Import", "Lehrkr|fffd|fte_Import", _
"Lehrerfehlzeiten_Import", "Klassen_Import", "Bezugspersonen_Import", _
"Sch|fffd|ler_Import", "Kursnoten_Import", "Fremdsprachen_Import")
Sheets(jf).Copy
For Each rk In kf
Sheets(rk).Select
yb = Range("A1").CurrentRegion.Rows.Count
If yb > 1 Then Rows("2:" & yb).Delete shift:=xlUp
Next rk
For Each rk In jf
Sheets(rk).Select
Range("A2").Select
Next rk
If iarrwsempty = 11 Then
Application.DisplayAlerts = False
Sheets("Erl|fffd|uterungen").Delete
Application.DisplayAlerts = True
hf = Left(hf, InStrRev(hf, "\")) & stimportvorlage
End If
Sheets("Schnittstellen-Beschreibung").Select
Range("A1").Select
If lf Then tf
ActiveWorkbook.CheckCompatibility = False
Application.DisplayAlerts = False
Err.Clear
Do
If Val(Application.Version) <= 11 Then
ActiveWorkbook.SaveAs Filename:=hf
Else
ActiveWorkbook.SaveAs Filename:=hf, FileFormat:=56
End If
If Err.Number <> 0 Then
kh ff, "Die Importdatei """ & hf & """ kann nicht geschrieben werden." & vbCrLf _
& "Wahrscheinlich ist eine veraltete Datei gleichen Namens offen." & vbCrLf _
& "Schlie|fffd|en Sie zun|fffd|chst die alte Importdatei.", "Importdatei muss geschlossen werden", True
End If
Loop While Err.Number <> 0
Application.DisplayAlerts = True
fh vbCrLf & Format(Now, "yyyy-mm-dd") & " - " & Format(Now, "hh:mm:ss") _
& " : """ & stdateiart & """" & hf & """ wurde erzeugt.", False, ih
If Not ff Then MsgBox stdateiart & " f|fffd|r edoo.sys wurde erzeugt.", vbOKOnly + vbExclamation, "Importdatei erzeugen"
End Sub
Private Sub nf()
Dim pf$, stexceluser$, stimpfilepath$, stfileorig$, stfileuser$, stfileoext$, stpathfileuser$, sttmpfile$, stobffile$
Dim qf As Object, iprotect%, stmsg$, stprotectfile$, stshellline$, r%
Dim rf As Variant, sf As Variant
pf = Environ("Username")
stexceluser = Application.UserName
If Not yi(k, pf) And Not yi(k, stexceluser) Then
MsgBox "Eine Endbenutzerversion kann nur durch den" & vbCrLf & "Administrator des Tools erzeugt werden.", _
vbOKOnly + vbCritical, "Erzeugung einer Endbenutzerversion verweigert"
Exit Sub
End If
stimpfilepath = mj(ActiveWorkbook.Path)
stfileorig = ActiveWorkbook.Name
stfileuser = "convert-" & stfileorig
stfileoext = Left(stfileuser, InStrRev(stfileuser, ".") - 1)
stpathfileuser = stimpfilepath & stfileuser
If MsgBox("Pr|fffd|fix- und gelbe Tabellen von der Endbenutzerversion" & vbCrLf & "in die Entwicklungsversion |fffd|bertragen?", _
vbYesNo + vbQuestion + 256, "Tabellen austauschen") = vbYes Then
rf = Array("Schnittstellen-Beschreibung", "Erl|fffd|uterungen")
sf = Array("Ausbildungsberufe", "Familienstand", "Konfessionen", "Schuelertyp", _
"Staatsangehoerigkeiten", "Bundeslaender", "Gemeinden", "Raumarten", _
"Statistikfaecher", "SpezifischeFaecher", "Bildungsgaenge", "LehrerZugaenge", _
"LehrerAbgaenge", "LehrerArten", "LehrerFunktionen", "LehrerFehlgruende", _
"Amtsbez", "Dienstverh", "Dienstherren", "Beschaeftigungsverh", "Lehraemter", _
"Lehrbefaehigungen", "Klassenarten", "Orgaformen", "Familiensprachen", _
"SchulformNeuzugang", "TeilnahmeReligion", "VorbildungABS", "VorbildungBBS", _
"Abschlussarten", "Unterrichtsarten", "Unterrichtserteilungen", "Foerderungen")
Application.DisplayAlerts = False
Sheets(tk(rf, sf)).Delete
Application.DisplayAlerts = True
Workbooks.Open stpathfileuser
Sheets("AltSVP-Tabellen").Select
Sheets(rf).Copy before:=Workbooks(stfileorig).Sheets("AltSVP-Tabellen")
Workbooks(stfileuser).Activate
Sheets("Familienstand").Select
Sheets(sf).Copy after:=Workbooks(stfileorig).Sheets("Fremdsprachen_Import")
Workbooks(stfileuser).Close
MsgBox "Die Tabellen wurden ausgetauscht." & vbCrLf _
& "Bei Bedarf Endbenutzerverson neu erzeugen.", vbOKOnly + vbInformation, "Tabellen austauschen"
Sheets("Transfer-Beschreibung").Select
Exit Sub
End If
On Error Resume Next
Sheets("Transfer-Beschreibung").Range("$J$15") = "Ja"
Sheets("Transfer-Beschreibung").Range("$J$16") = "Ja"
Sheets("Transfer-Beschreibung").Range("$J$17") = "Nein"
Sheets("Transfer-Beschreibung").Range("$L$22") = ""
ActiveWorkbook.Save
stobffile = stimpfilepath & stfileoext & "-obf.xlsm"
sttmpfile = stimpfilepath & stfileoext & "-obf_secretDecoder.tmp"
If Dir(stobffile) <> "" Then Kill stobffile
If Dir(stpathfileuser) <> "" Then Kill stpathfileuser
Set qf = CreateObject("Scripting.FileSystemObject")
With Application.ActiveWorkbook: qf.copyfile .Path & "\" & .Name, stpathfileuser: End With
Range("A1").Select
Workbooks.Open stpathfileuser
uf True
Range("M1:Y6").Copy
Range("L8").Select
ActiveSheet.Paste
Range("M1:Y6").Copy
Range("O14").Select
ActiveSheet.Paste
Application.CutCopyMode = False
Range("I21").Select
For r = 9 To 15
If r <> 14 Then Sheets("Transfer-Beschreibung").Range("$E$" & r) = "Nein"
Next r
Range("$I$10") = stimpfilepath & "Schulnummer.xls"
Range("$L$10") = "Hier gew|fffd|nschten Pfad/Dateinamen der edoo.sys-Importdatei eintragen oder ausw|fffd|hlen."
Range("$I$11") = "C:\" & l
Range("$L$11") = "Hier den Speicherort der " & l & "-Dateien eintragen oder ausw|fffd|hlen."
Range("$I$12") = "99999 Schulort"
Range("$L$12") = "Hier PLZ und Standort der Schule eintragen."
Range("$I$13") = "11111"
Range("$L$13") = "Hier 5stellige Schulnummer eintragen."
Range("$J$18") = "GS"
Range("$L$18") = "Hier laut gelber Tabelle ""Bildungsgaenge"" eintragen."
Range("$L$19") = "Zur Bestimmung der Lehrerart PASS eintragen."
Range("$L$20") = "Nur |fffd|ndern, wenn die Sch|fffd|ler-Ids schon in der XML-Datei schulweit eindeutig sind."
With Range("L9:L20").Font
.Bold = False
.Color = -16776961
End With
xc
Range("$E$28") = "H"
Application.Run "obfuscate_workbook_as", ActiveWorkbook, stobffile
Application.Wait Now + TimeSerial(0, 0, 0.3)
ActiveWorkbook.Close savechanges:=True
If Dir(sttmpfile) <> "" Then Kill sttmpfile
If Dir(stpathfileuser) <> "" Then Kill stpathfileuser
stprotectfile = "C:\Program Files\Protect VBA Code\PVC.exe"
If Dir(stprotectfile) = "" Then stprotectfile = "C:\Program Files (x86)\Protect VBA Code\PVC.exe"
If Dir(stprotectfile) = "" Then stprotectfile = ActiveWorkbook.Path & "\PVC.exe"
stshellline = """" & stprotectfile & """ """ & stobffile & """ """ & stpathfileuser & """"
iprotect = Shell(stshellline, 6)
If iprotect > 0 And iprotect <= 9 Then
Select Case iprotect
Case 1: stmsg = "Die zu sperrende Datei" & vbCrLf & stpathfileuser & "existiert nicht."
Case 2: stmsg = "Die zu sperrende Datei" & vbCrLf & stpathfileuser & "ist ge|fffd|ffnet."
Case 3: stmsg = "Qell- und Zielpfad der zu sperrenden Datei" & vbCrLf & stpathfileuser & "sind gleich."
Case 4: stmsg = "Die Zieldatei" & vbCrLf & stpathfileuser & "ist ge|fffd|ffnet."
Case 5: stmsg = "In die Zieldatei" & vbCrLf & stpathfileuser & "kann nicht geschrieben werden."
Case 6: stmsg = "In der Datei" & stpathfileuser & vbCrLf & "kann das VBA-Projekt nicht gelesen werden."
Case 7: stmsg = "In der Zieldatei" & stpathfileuser & vbCrLf & "kann das VBA-Projekt nicht geschrieben werden."
Case 8: stmsg = "In der Zieldatei" & stpathfileuser & vbCrLf & "kann das VBA-Projekt nicht gesch|fffd|tzt werden."
Case 9: stmsg = "PowerPoint is erforderlich," & vbCrLf & "wurde aber nicht gefunden."
End Select
MsgBox stmsg, vbOKOnly + vbCritical, "Sperren der Endbenutzerversion fehlgeschlagen"
Else
Application.Wait Now + TimeSerial(0, 0, 4)
If Dir(stobffile) <> "" And Dir(stpathfileuser) <> "" Then Kill stobffile
MsgBox "Endbenutzerversion " & vbCrLf & stpathfileuser & vbCrLf & " wurde erzeugt.", vbOKOnly + vbInformation, "Endbenutzerversion erzeugen"
End If
Workbooks.Open stpathfileuser
Range("A1").Select
End Sub
Private Sub tf()
Sheets("Lehrkr|fffd|fte_Import").Range("E1") = "Geschlecht"
Sheets("Lehrkr|fffd|fte_Import").Range("G1") = "Lehrerart"
Sheets("Klassen_Import").Range("D1") = "Jahrgangsstufe"
Sheets("Klassen_Import").Range("S1") = "Klasse hat Stundenplan J / N"
Sheets("Klassen_Import").Range("T1") = "Klasse hat Religionsunterricht J / N"
Sheets("Bezugspersonen_Import").Range("D1") = "Geschlecht"
Sheets("Sch|fffd|ler_Import").Range("F1") = "Geschlecht"
Sheets("Sch|fffd|ler_Import").Range("AV1") = "Bezugsperson LfdNr1"
Sheets("Sch|fffd|ler_Import").Range("AF1") = "Wiederholer (K|fffd|rzel)"
End Sub
Public Sub uf(Optional ByVal ff As Boolean = False)
Dim ld, yb%
On Error Resume Next
If Not ff Then
If MsgBox("Alle Importtabellen leeren?", vbYesNo + vbQuestion, "Importtabellen leeren") = vbNo Then Exit Sub
End If
For Each ld In Array _
("Betriebetypen_Import", "Betriebe_Import", "Abteilungen_Import", "R|fffd|ume_Import", "F|fffd|cher_Import", _
"Lehrkr|fffd|fte_Import", "Lehrerfehlzeiten_Import", "Klassen_Import", "Bezugspersonen_Import", _
"Sch|fffd|ler_Import", "Kursnoten_Import", "Fremdsprachen_Import")
If oh(ld) Then
Sheets(ld).Select
Range("A1").Select
yb = Selection.CurrentRegion.Rows.Count
If yb > 1 Then Rows("2:" & yb).Delete shift:=xlUp
End If
Next ld
Sheets("Transfer-Beschreibung").Select
Range("A1").Select
If Not ff Then MsgBox "Alle Importtabellen wurden geleert.", vbOKOnly + vbInformation, "Importtabellen leeren"
End Sub
Sub vf(p)
Application.DisplayAlerts = False
Sheets(p).Delete
Application.DisplayAlerts = True
End Sub
Sub wf(ByVal q As Boolean)
If q Then Exit Sub
Application.StatusBar = "Tabellen speichern ..."
ActiveWorkbook.Save
Application.StatusBar = "Fertig."
Application.Cursor = xlDefault
End Sub
Sub xf(ByVal mb%, Optional ByVal yf = True)
Range("A2").Select
ye
If yf And UCase(Sheets("Transfer-Beschreibung").Range("$J$16")) = "JA" Then
Sheets("Transfer-Beschreibung").Select
If mb <> 0 Then
Range("A" & mb).Select
Else
Range("A1").Select
End If
End If
Application.StatusBar = ""
End Sub
Sub zf(ByVal ag$, ByVal yb%, ByVal bg$, _
Optional ByVal cg% = 3, Optional ByVal mode$ = "")
Dim mb%, pe%, s$, stfeld2$
On Error Resume Next
If dg(ag, yb, bg, cg, mode) Then Exit Sub
For mb = cg To yb
Range(ag & mb).Select
s = "?"
s = Trim(Range(ag & mb))
If s <> "" Then
Select Case bg
Case "Auslaender"
s = IIf(s = "D", "J", "N")
Case "Anrede"
Select Case s
Case "Frau": s = "0"
Case "Herr": s = "1"
Case "Frau Dr.": s = 2
Case "Herr Dr.": s = 3
Case "Frau Prof.": s = 4
Case "Herr Prof.": s = 5
Case "Frau Prof. Dr.": s = 6
Case "Herr Prof. Dr.": s = 7
End Select
Case "BerufeKZ"
If s <> "BVJ" Then
s = Mid(s, 4) & Mid(s, 3, 1) & Left(s, 2)
End If
Case "Besoldung"
Select Case s
Case "H": s = "HD"
Case "G": s = "GD"
Case "M": s = "MD"
Case Else: If s <> "" Then s = ""
End Select
Case "Bevollmaechtigungen"
If s = "J" Then
For pe = 0 To 4
stfeld2 = LCase(Range(nj("CL", pe) & mb))
If stfeld2 = "rk" Or stfeld2 = "ev" Then
Exit For
Else
stfeld2 = ""
End If
Next pe
Select Case stfeld2
Case "rk": s = "MISS"
Case "ev": s = "VOC"
Case Else: s = "AND"
End Select
Else
s = ""
End If
Case "Datum"
If s = "?" Then s = ""
Case "Email"
s = Left(s, 40)
Case "FHRU"
Select Case s
Case "1": s = "FHRU280"
Case "2": s = "FHRU460"
Case "3": s = "FHRU600"
Case Else: If Left(s, 4) <> "FHRU" Then s = ""
End Select
Case "FHRUStufe"
stfeld2 = Left(Range("GL" & mb), 3)
If stfeld2 <> "BFH" And stfeld2 <> "BOD" Then stfeld2 = Left(stfeld2, 2)
pe = Val(Range("GH" & mb))
If ((stfeld2 = "BS" Or stfeld2 = "FS") And pe >= 3) Or stfeld2 = "BFH" And pe = 2 Or stfeld2 = "BOS" And pe = 12 Then
s = "FHRO"
Else
s = "FHRU"
End If
Case "Funktion1"
Select Case s
Case "-": s = ""
Case "FB": s = "SB"
Case "STV": s = "VSL"
Case "SLSTD": s = "SSL"
End Select
Case "Ganztagsunterricht"
Select Case s
Case "10": s = "GTS-V"
Case "12": s = "GTS-O"
Case "11": s = "GTS-A"
Case "13": s = "Betr-GS"
Case "14": s = "Hort"
Case Else: s = ""
End Select
Case "Geschlecht"
If s = "1" Then s = "M" Else s = "W"
Case "ID", "SAusbildung", "Statistiknr"
s = yk(s)
Case "Kategorie"
stfeld2 = UCase(Range("E" & mb))
If stfeld2 = "ENGLISCH" Or stfeld2 = "FRANZ|fffd|SISCH" Or stfeld2 = "SPANISCH" Then
s = 0
Else
s = ""
End If
Case "Klassenstufe"
If InStr(",1,2,3,4,5,6,7,8,9,10,11,12,13,", "," & s & ",") = 0 Then
Select Case s
Case "0": s = "KIGA"
Case "51": s = "HJ1"
Case "52": s = "HJ2"
Case "53": s = "HJ3"
Case "54": s = "HJ4"
Case "61": s = "US1"
Case "62": s = "US2"
Case "63": s = "US3"
Case "64": s = "MS1"
Case "65": s = "MS2"
Case "66": s = "MS3"
Case "67": s = "OS1"
Case "68": s = "OS2"
Case "69": s = "OS3"
Case "70": s = "WS1"
Case "71": s = "WS2"
Case "72": s = "WS3"
Case "98": s = "KEI"
Case "99": s = "SAM"
Case Else: s = ""
End Select
End If
Case "Konfession"
s = LCase(s)
If s = "ke" Then s = "-"
Case "Land"
s = UCase(s)
Select Case s
Case "": s = "D"
Case "FRA": s = "F"
Case "LUX": s = "L"
Case "BEL": s = "B"
End Select
Case "Logisch"
s = UCase(s)
Select Case s
Case "J": s = "WAHR"
Case "N": s = "FALSCH"
Case Else: s = ""
End Select
Case "MerkmalT1"
If s <> "" Then
Select Case Val(s)
Case 280: s = "1"
Case 460: s = "2"
Case 600: s = "3"
End Select
End If
Case "Personentyp"
Select Case s
Case "Vater": s = "Va"
Case "Mutter": s = "Mu"
Case "Vormund": s = "Vo"
Case "Familie": s = "Fam"
Case "Verwandter": s = "Vw"
Case "Pflegevater": s = "PfVa"
Case "Pflegemutter": s = "PfMu"
Case "Onkel": s = "Onk"
Case "Tante": s = "Tan"
End Select
Case "RelGrund"
If s = "RL" Then s = "OK"
Case "RelTeilnahme"
s = LCase(s)
Select Case s
Case "su": s = "so"
Case "er": s = "-"
End Select
Case "Status"
If InStr("1234", s) > 0 Then
s = "1"
Else
s = "0"
End If
Case "Verhaeltnis"
Select Case s
Case "M": s = "0"
Case "V": s = "1"
Case "P": s = "2"
Case "E": s = "10"
Case Else: s = "5"
End Select
End Select
Range(ag & mb) = s
End If
Next mb
Range(ag & cg).Select
End Sub
Function dg(ByVal ag$, ByVal yb%, ByVal bg$, _
Optional ByVal cg% = 3, Optional ByVal mode$ = "", _
Optional ByVal lc$ = "A", Optional ByVal mc$ = "B") As Boolean
Dim eg As adodb.Recordset, fg As Boolean, stsourcecol1$, stdestcol1$, zg$
Dim mb%, pe%, k%, s$, stfeld2$, gg As Long
stsourcecol1 = lc
stdestcol1 = mc
fg = True
For mb = cg To yb
Range(ag & mb).Select
s = "?"
s = Trim(Range(ag & mb))
If s <> "" Then
If stsourcecol1 & stdestcol1 = "AB" Then
If IsNumeric(s) Then
lc = "C"
Else
lc = "A"
End If
End If
Select Case bg
Case "Ausbildungsberufe"
If mode = "Schl-Kurz" Then
yg eg, s, zg, bg, "C", "B"
ElseIf mode = "Kurz-Kurz" Then
yg eg, s, zg, bg, "A", "B"
Else
If lc = "B" Then
pe = InStr(s, " ")
If pe > 0 Then s = Left(s, pe - 1)
stfeld2 = Range("B" & mb)
If (s = "BSEK" Or s = "BSZW") And stfeld2 = "3" Then s = s & stfeld2
End If
yg eg, s, zg, bg, lc, mc
End If
Case "VorbildungABS", "VorbildungBBS"
If mode = "Schl-Kurz" Then
yg eg, s, zg, bg, "C", "B"
Else
yg eg, s, zg, bg, "A", "B"
End If
Case "Berufe"
yg eg, s, zg, bg, "B", "A"
Case "Betriebe"
yg eg, s, zg, bg, "B", "A"
Case "Bildungsgaenge"
If mode = "Schl-Kurz" Then
yg eg, s, zg, bg, "C", "B"
Else
If lc = "A" Then
If UCase(Left(s, 4)) = "BFII" Then
s = "BF2"
ElseIf UCase(Left(s, 3)) = "BFI" Then
s = "BF1" & Mid(s, 4)
End If
End If
yg eg, s, zg, bg, lc, mc
End If
Case "BS-Bildungsgang"
If s = "BS" Then
s = Range(mode & mb)
yg eg, s, zg, "Ausbildungsberufe", "B", "E"
If s = "" Then s = "BS_1440"
End If
Case "Familienstand"
yg eg, s, zg, bg, "A", "B"
Case "Faecher", "Statistikfaecher"
If mode = "Schl-Kurz" Then
yg eg, s, zg, bg, "B", "A"
Else
If Left(UCase(bj(s)), 9) = "FTH-SONST" Then
s = "144"
End If
If Len(s) < 4 Then
yg eg, s, zg, bg, "I", "A"
Else
stfeld2 = Left(s, 3)
If stfeld2 = ("FTH" Or stfeld2 = "FPR") And (Mid(s, 4, 3) <> " - " Or Mid(s, 7, 1 = " ")) Then
s = Mid(s, 4)
Do While InStr(" -", Left(s, 1)) > 0
s = Mid(s, 2)
Loop
s = stfeld2 & " - " & s
End If
yg eg, s, zg, bg, "H", "A"
End If
End If
Case "F|fffd|cher"
yg eg, s, zg, bg, "A", "B"
Case "Fremdsprache"
yg eg, s, zg, "Faecher", "C", "B"
If bg = "Faecher" And s = "" Then s = "1"
Case "Geburtsland"
If Left(mode, 4) <> "Lang" Then s = Left(s, 3)
If mode = "Lang-Kurz" Then
stfeld2 = s
If Left(s, 6) = "Korea," Then
s = "Korea" & Mid(s, 7)
ElseIf (InStr(s, "Russland") > 0) And (InStr(s, "Wei|fffd|") = 0) Then
s = "RussischeF|fffd|deration"
ElseIf Left(s, 7) = "Serbien" And InStr(s, "ohne Kosovo") > 0 Then
s = "Serbien ohne Kosovo"
End If
pe = InStr(s, ",")
If pe = 0 Then pe = InStr(s, "(")
If pe = 0 Then pe = InStr(s, "/")
If pe > 0 Then s = bj(Left(s, pe - 1))
s = bj(s)
yg eg, s, zg, "Staatsangehoerigkeiten", "D", "B"
ElseIf mode = "Kurz-Kurz" Then
yg eg, s, zg, "Staatsangehoerigkeiten", "A", "B"
ElseIf mode = "Schl-Kurz" Then
If s = "000" Then s = "0"
yg eg, s, zg, "Staatsangehoerigkeiten", "C", "A"
Else
yg eg, s, zg, bg, "C", "A"
If bg = "Lehraemter" And s = "" Then s = "SoL"
End If
Case "GemeindeBez"
yg eg, s, zg, "Gemeinden", "A", "C"
Case "Gemeinden"
stfeld2 = s
s = Range(IIf(ag = "R", "P", "I") & mb)
If Left(s, 4) = "Bad " Then
pe = 5
ElseIf Left(s, 6) = "Sankt " Then
pe = 7
Else
pe = 1
End If
k = InStr(pe, s, " ")
If k > 0 Then s = Left(s, k - 1)
k = InStr(pe, s, "/")
If k > 0 Then s = Left(s, k - 1)
s = Trim(s)
s = Range(IIf(ag = "R", "O", "H") & mb) & " " & s
If stfeld2 = "RPF" Or ag = "K" Then
yg eg, s, zg, bg, "B", "A"
If s = "" Then s = "07315000"
Else
s = stfeld2
If InStr("BW,HES,NRW,SAR,", s & ",") > 0 Then
hg s, bg, "G", "E"
Else
stfeld2 = Sheets("Transfer-Beschreibung").Range("$J$18")
If Len(stfeld2) = 8 Then
s = stfeld2
Else
s = "07315000"
End If
End If
If s = "" Then s = "08111000"
End If
Case "Klassen"
yg eg, s, zg, "Klassen", "A", "B"
Case "Klassenarten"
If Left(CStr(d), 1) = "6" Then
If lc = "C" Then
If Val(s) <= 5 Then s = "4" & s
If Val(s) = 2 Then s = ""
End If
End If
yg eg, s, zg, bg, lc, mc
If s = "" Then s = "REG"
Case "Lehrer"
yg eg, s, zg, bg, "C", "B"
Case "Lehrkr|fffd|fte"
yg eg, s, zg, bg, "A", "B"
Case "LehrerArten"
yg eg, s, zg, bg, "B", "A"
Case "LehrerFehlgruende"
yg eg, s, zg, bg, "B", "A"
Case "Familiensprachen"
If s = "D" Then
s = ""
Else
yg eg, s, zg, "Familiensprachen", lc, mc
End If
Case "Orgaformen"
yg eg, s, zg, bg, "C", "B"
Case "PLZ"
yg eg, s, zg, "Gemeinden", "A", "B"
Case "Schulen"
If s = "A" Then
s = "1"
Else
yg eg, s, zg, bg, "R", "A"
End If
Case "SchulformNeuzugang"
If Left(CStr(d), 1) <> "6" And InStr("30,31,40,", s & ",") > 0 Then
Select Case s
Case "30": s = "35"
Case "31": s = "36"
Case "40": s = "37"
End Select
End If
yg eg, s, zg, bg, lc, mc
Case "SBerufe"
gg = Val(s)
If gg < 9999999 Then
s = ""
Else
yg eg, s, zg, "Berufe", "B", "A"
End If
Case "SBerufeBildgang"
gg = Val(Range("F" & mb))
If gg < 9999999 Then
s = Range("F" & mb)
yg eg, s, zg, "Bildungsgaenge", "B", "A"
End If
Case "Staatsangehoerigkeiten"
If InStr(LCase(s), "deu") > 0 Then s = "D"
yg eg, s, zg, bg, lc, mc
Case Else
If oh(bg) Then
yg eg, s, zg, bg, lc, mc
Else
fg = False
Exit For
End If
End Select
If fg Then Range(ag & mb) = s
End If
Next mb
If Not eg Is Nothing Then eg.Close
Set eg = Nothing
If fg Then Range(ag & "2").Select
dg = fg
End Function
Sub hg(ByRef s$, ByVal ig$, _
ByVal jg$, ByVal kg$, Optional ByVal lg = xlWhole)
Dim mg$, stnofind$, stactivesheet$
On Error Resume Next
stactivesheet = ActiveSheet.Name
mg = s
Sheets(ig).Select
Range(jg & 1).Select
Columns(jg & ":" & jg).Select
stnofind = Range(jg & "1")
Selection.Find(what:=mg, after:=ActiveCell, _
LookIn:=xlFormulas, lookat:=lg, searchorder:=xlByRows, _
SearchDirection:=xlNext, MatchCase:=False, searchformat:=False).Activate
If ActiveCell.FormulaR1C1 <> "" And ActiveCell.FormulaR1C1 <> stnofind Then
Range(kg & ActiveCell.row).Select
If ActiveCell.FormulaR1C1 <> stnofind Then
s = Trim(ActiveCell.FormulaR1C1)
Else
s = ""
End If
Else
s = ""
End If
Sheets(stactivesheet).Select
End Sub
Function ng(ByRef eg As adodb.Recordset, ByVal og$, ByVal pg$, ByVal qg$) As String
Dim rg%, r%
Dim sg$
If Not eg Is Nothing Then Set eg = Nothing
Set eg = New adodb.Recordset
Dim tg: tg = 129
Dim ug: ug = 200
Dim vg: vg = &H4
Dim wg: wg = 0
Dim xg: xg = 1
On Error Resume Next
sg = ActiveSheet.Name
Sheets(og).Select
Range(pg & 3).Select
rg = Selection.CurrentRegion.Rows.Count
For r = 1 To 2
If Range(pg & r) = "" Then rg = rg + 1
Next r
With eg.Fields
.Append "flFieldIn", ug, 100, vg
.Append "flFieldOut", ug, 100, vg
End With
With eg
.Open
For r = 2 To rg
Range(pg & r).Select
.AddNew
.Fields(0) = Range(pg & r).Value
.Fields(1) = Range(qg & r).Value
.Update
Next
End With
Sheets(sg).Select
ng = pg & qg
End Function
Sub yg(ByRef eg As adodb.Recordset, ByRef s$, ByRef zg$, _
ByVal og$, ByVal jg$, ByVal kg$)
Dim ah As Worksheet, stsuchfeld$, stersetzfeld$, stfeld2$
On Error Resume Next
If s = "" Then Exit Sub
stfeld2 = s
If eg Is Nothing Or zg$ <> jg & kg Then
zg$ = ng(eg, og, jg, kg)
End If
eg.MoveFirst
eg.Find "flFieldIn = '" & s & "'", , adSearchForward
If eg.EOF Then
If zg$ = "AB" Then
eg.MoveFirst
eg.Find "flFieldOut = '" & s & "'", , adSearchForward
If eg.EOF Then
s = ""
Else
s = Trim(eg.Fields(1).Value)
End If
Else
s = ""
End If
If s = "" And Left(zg, 1) <> Right(zg, 1) Then
Set ah = Sheets(og)
stsuchfeld = ah.Range(jg & 1)
stersetzfeld = ah.Range(kg & 1)
fh "Werteliste '" & og & "': " & stsuchfeld & " '" & s & "' -> " & stersetzfeld & " ???"
End If
Else
s = Trim(eg.Fields(1).Value)
End If
End Sub
Function bh$(ByVal ch$, ByVal dh As Date)
Dim eh$, iklpos%, iberichtsjahr%
On Error Resume Next
bh = Left(ch, 4)
If yi("BOS1,BOS2", bh) Then
bh = IIf(bh = "BOS1", "12", "13")
Exit Function
End If
bh = ""
If dh = "00:00:00" Then dh = Date
iberichtsjahr = Year(dh)
If Month(dh) <= 7 Then iberichtsjahr = iberichtsjahr - 1
iklpos = InStr(ch, "/")
If iklpos > 0 Then ch = Left(ch, iklpos - 1)
eh$ = ""
iklpos = Len(ch)
Do While iklpos > 0
If Not IsNumeric(Mid(ch, iklpos, 1)) Then
iklpos = iklpos - 1
Else
Exit Do
End If
Loop
If iklpos = 0 Then Exit Function
If IsNumeric(Left(ch, iklpos)) Then
bh = CStr(Val(Left(ch, iklpos)))
Exit Function
End If
Do While iklpos > 0
If IsNumeric(Mid(ch, iklpos, 1)) Then eh = Mid(ch, iklpos, 1) + eh
iklpos = iklpos - 1
Loop
If Len(eh) > 4 Then eh = Right(eh, 4)
If Len(eh) = 3 Then eh = Right(eh, 2)
If Len(eh) = 2 Then
If Val(eh) >= 90 Then eh = "19" & eh Else eh = "20" + eh
If Len(eh) = 4 Then
bh = CStr(iberichtsjahr - Val(eh) + 1)
Else
bh = "0"
End If
End If
If yi("BGY,BOS,DBO", Left(ch, 3)) Then bh = CStr(Val(bh) + 10)
End Function
Sub fh(ByVal gh$, Optional ByVal hh As Boolean = False, Optional ih$ = "")
Dim jh$
On Error Resume Next
If ih = "" Then
jh = ActiveWorkbook.FullName
jh = Left(jh, InStrRev(jh, ".")) & "txt"
Else
jh = ih$
End If
If hh Then
Open jh For Output As #1
Else
Open jh For Append As #1
End If
If Err.Number = 0 Then
Print #1, gh
End If
Close #1
End Sub
Sub kh(ByVal q As Boolean, ByVal lh$, Optional ByVal mh$ = "Meldung", Optional ByVal nh As Boolean = False)
If q Then
fh lh
Else
MsgBox lh, vbOKOnly + vbExclamation, mh
If nh Then fh mh
End If
End Sub
Function oh(ByVal p$) As Boolean
Dim ld As Worksheet
On Error Resume Next
Set ld = Sheets(p)
If ld Is Nothing Then
oh = False
Else
oh = True
End If
On Error GoTo 0
End Function
Sub ph(ByVal qh$, ByVal rh$)
Columns(qh & ":" & qh).Select
Selection.Cut
Columns(rh & ":" & rh).Select
Selection.Insert shift:=xlToRight
Application.CutCopyMode = False
End Sub
Sub sh(ByVal qh$, ByVal rh$, Optional ByVal yb% = 0, Optional ByVal th% = 3)
If yb = 0 Then
Range(qh & ":" & qh).Select
Selection.Copy
Range(rh & ":" & rh).Select
Else
Range(qh & th & ":" & qh & yb).Select
Selection.Copy
Range(rh & th).Select
End If
ActiveSheet.Paste
Application.CutCopyMode = False
End Sub
Sub uh(ByVal qh$, ByVal rh$, Optional ByVal yb% = 0, Optional ByVal th% = 3)
sh qh, rh, yb%, th
If yb = 0 Then
Range(qh & ":" & qh).Select
Else
Range(qh & th & ":" & qh & yb).Select
End If
Selection.ClearContents
Application.CutCopyMode = False
End Sub
Sub vh(ByVal qh$, ByVal rh$)
Columns(qh & ":" & qh).Select
Selection.Copy
Columns(rh & ":" & rh).Select
Selection.Insert shift:=xlToRight
End Sub
Sub wh(ByVal ag$, Optional ByVal je% = 1)
Dim r%
Columns(ag & ":" & ag).Select
For r = 1 To je
Selection.Insert shift:=xlToRight
Next r
End Sub
Sub xh(ByVal tc$, ByVal yb%, ByVal yh$, Optional ByVal zh% = 3)
Dim mb%
For mb = zh To yb
Range(tc & mb) = yh
Next mb
End Sub
Sub ai(ByVal tc$, ByVal yb%, Optional ByVal bi% = 3)
Dim ci$, endspalte$, r%
r = InStr(tc, ":")
If r > 0 Then
ci = Left(tc, r - 1)
endspalte = Mid(tc, r + 1)
Else
ci = tc
endspalte = tc
End If
tc = ci
Dim di%, b%
di = qj(tc)
b = qj(endspalte)
Do While qj(tc) <= qj(endspalte)
Range(tc & bi & ":" & tc & yb).Select
Selection.ClearContents
tc = nj(tc, 1)
Loop
End Sub
Sub ei(ByVal tc$, yb%)
Dim mb%
For mb = 3 To yb
Range(tc$ & mb).WrapText = False
Next mb
End Sub
Sub fi(ByVal tc$, yb%, Optional ByVal gi% = 3, Optional ByVal hi% = 1)
Dim id%
Range(tc & gi).Select
id = hi
Do While id <= yb - gi + hi
Range(tc & Trim(id + gi - hi)) = id
id = id + 1
Loop
End Sub
Function ii(ByVal tc$, ByVal yb%, Optional ByVal zh% = 3) As Boolean
Dim mb%
ii = True
For mb = zh To yb
If Range(tc & mb) <> "" Then
ii = False
Exit For
End If
Next mb
End Function
Sub ji(ByVal tc$, ByVal yb%)
Dim mb%
For mb = 3 To yb
Range(tc & mb) = yk(Range(tc & mb))
Next mb
End Sub
Sub ki(ByVal tc$, ByVal yb%)
Dim mb%
For mb = 3 To yb
Range(tc & mb) = bj(Range(tc & mb))
Next mb
End Sub
Sub li(ByRef yb%, ByVal mi$, Optional ByVal startrow% = 2)
Dim mb%
mb = startrow
Do While mb <= yb
Range(mi & mb).Select
If Trim(Range(mi & mb)) = "" Then
Rows(mb & ":" & mb).Delete shift:=xlUp
yb = yb - 1
Else
mb = mb + 1
End If
Loop
End Sub
Sub ni(ByRef yb%, ByVal mi$, Optional ByVal startrow% = 2)
Dim mb%, s$, stfeld2$
mb = startrow + 1
Do While mb <= yb
Range(mi & mb).Select
s = Trim(Range(mi & mb - 1))
stfeld2 = Trim(ActiveCell.FormulaR1C1)
If (s = stfeld2) Or (s = "") Or (stfeld2 = "") Then
If stfeld2 = "" Then
Rows(mb & ":" & mb).Delete shift:=xlUp
Else
Rows(mb - 1 & ":" & mb - 1).Delete shift:=xlUp
End If
yb = yb - 1
Else
mb = mb + 1
End If
Loop
End Sub
Sub oi(ByRef yb%, ByVal mi$, ByVal ig$, _
ByVal pi$, Optional ByVal startrow% = 2)
Dim mb%, s$, stfeld2$, stactivesheet$
On Error Resume Next
stactivesheet = ActiveSheet.Name
mb = startrow
Do While mb <= yb
Range(mi & mb).Select
s = Range(mi & mb)
Sheets(ig).Select
Columns(pi & ":" & pi).Select
Selection.Find(what:=s, after:=ActiveCell, LookIn:=xlFormulas, lookat _
:=xlWhole, searchorder:=xlByRows, SearchDirection:=xlNext, MatchCase:= _
False, searchformat:=False).Activate
If ActiveCell.FormulaR1C1 <> "" Then
Range(pi & ActiveCell.row).Select
stfeld2 = ActiveCell.FormulaR1C1
Else
stfeld2 = ""
End If
Range("A2").Select
Sheets(stactivesheet).Select
If stfeld2 = s Then
Rows(mb & ":" & mb).Delete shift:=xlUp
yb = yb - 1
Else
mb = mb + 1
End If
Loop
Range("A2").Select
End Sub
Sub qi(ByVal yb%, ByVal mi$, ByVal ri$)
Dim mb%, s$, stfeld2$
Range("A2:" & ri & Trim(Str(yb))).Select
Selection.Sort key1:=Range(mi & "3"), order1:=xlAscending, Header:=xlGuess, _
ordercustom:=1, MatchCase:=False, Orientation:=xlTopToBottom, _
dataoption1:=xlSortNormal
For mb = 3 To yb - 1
s = Range(mi & mb)
stfeld2 = Range(mi & mb + 1)
If stfeld2 = s Then
Range(mi & mb + 1) = Left(stfeld2, Len(stfeld2) - 1) & "X"
End If
Next mb
End Sub
Function si$(ByVal ti As String)
Dim r%
For r = 1 To Len(ti)
Mid(ti, r, 1) = Chr(Asc(Mid(ti, r, 1)) Xor 23)
Next r
si = ti
End Function
Private Function ui$(ByVal vi As String)
Dim r%, iqs%
vi = UCase(vi)
ui = Left(vi, 5)
For r = 6 To Len(vi) - 5
If r Mod 6 = 0 Then ui = ui & Mid(vi, r + 1, 5)
Next r
vi = ui
For r = 1 To Len(vi)
If r Mod 2 = 1 Then
Mid(vi, r, 1) = Chr(((Asc(Mid(vi, r, 1)) + 45) Xor 64))
Else
Mid(vi, r, 1) = Chr(((Asc(Mid(vi, r, 1)) - 42) Xor 63))
End If
Next r
ui = Left(vi, 18)
vi = Right(vi, 2)
For r = 1 To Len(ui)
iqs = iqs + Val(Mid(ui, r, 1))
Next r
If Right(CStr(iqs), 2) <> vi Then
ui = "246"
Else
vi = Right(ui, 8)
If CDate(Right$(vi, 2) & "." & Mid$(vi, 5, 2) & "." & Left$(vi, 4)) < Date Then
ui = "246"
End If
End If
End Function
Function wi(ByVal yh$)
wi = IIf(yh = "", "???", yh)
End Function
Function xi$(ByVal yh$)
yh = bj(yh)
If Left(yh, 1) = "," Then yh = Mid(yh, 2)
If Right(yh, 1) <> "," Then yh = yh & ","
xi = yh
End Function
Function yi(ByVal zi$, ByVal aj$) As Boolean
If InStr(zi, ",") > 0 Then
If Right(zi, 1) <> "," Then zi = zi & ","
If Right(aj, 1) <> "," Then aj = aj & ","
End If
yi = InStr(zi, aj) > 0 And aj <> ","
End Function
Function bj$(ByVal yh$)
Dim r%
bj = ""
For r = 1 To Len(yh)
If Mid(yh, r, 1) <> " " Then bj = bj & Mid(yh, r, 1)
Next r
End Function
Function cj$(ByVal yh$)
Dim r%, je$
cj = ""
For r = 1 To Len(yh)
je = Mid(yh, r, 1)
If UCase(je) >= "A" And UCase(je) <= "Z" Or je >= "0" And je <= "9" Then
cj = cj & je
End If
Next r
End Function
Function dj(ByVal yh$, ByVal ej$) As Boolean
If Left(yh, Len(ej)) = ej Then
dj = True
Else
dj = False
End If
End Function
Function fj(ByVal gj$, ByVal hj$) As Boolean
Dim ij%, ilastpos%, ststr1$
fj = False
ilastpos = 1
Do
ij = InStr(ilastpos, hj, ",")
If ij > 0 Then
ststr1 = Mid(hj, ilastpos, ij - ilastpos)
If InStr(gj, ststr1) > 0 Then
fj = True
Exit Do
End If
ilastpos = ij + 1
End If
Loop Until ij = 0
End Function
Function jj$(ByVal yh$)
Dim r%, je$
jj = ""
For r = 1 To Len(yh)
je = Mid(yh, r, 1)
If InStr("|fffd||fffd||fffd||fffd||fffd||fffd||fffd|", je) > 0 Then
Select Case je
Case "|fffd|": jj = jj & "Ae"
Case "|fffd|": jj = jj & "Oe"
Case "|fffd|": jj = jj & "Ue"
Case "|fffd|": jj = jj & "ae"
Case "|fffd|": jj = jj & "oe"
Case "|fffd|": jj = jj & "ue"
Case "|fffd|": jj = jj & "ss"
End Select
Else
jj = jj & je
End If
Next r
End Function
Function kj$(ByVal yh$)
yh = Trim(yh)
If InStr(yh, " ") > 0 Then
If Left(yh, 1) <> h Then yh = h & yh
If Right(yh, 1) <> h Then yh = yh & h
Else
If Left(yh, 1) = h Then yh = Mid(yh, 2)
If Right(yh, 1) = h Then yh = Left(yh, Len(yh) - 1)
End If
kj = yh
End Function
Sub lj(ByVal tc$, ByVal yb%)
Dim r%
Range(tc & "2").Select
r = 1
Do While r <= yb - 1
Range(tc & r + 1) = kj(Range(tc & r + 1))
r = r + 1
Loop
End Sub
Function mj$(ByVal yh$)
mj = yh
If Right(yh, 1) <> "\" Then mj = mj & "\"
End Function
Function nj$(ByVal oj$, ByVal offset%)
Dim di, b%, zahl%, aa$, pj As Boolean
If Len(oj) = 1 Then
pj = True
oj = "A" & oj
Else
pj = False
End If
di = Asc(Left(oj, 1)) - 65
b = Asc(Right(oj, 1)) - 65
zahl = di * 26 + b + offset
di = zahl \ 26
b = zahl Mod 26
If pj Then
aa = Chr(di + 64)
If aa = "@" Then aa = ""
Else
aa = Chr(di + 65)
End If
aa = aa & Chr(b + 65)
nj = aa
End Function
Function qj%(ByVal tc$)
Dim je%
je = Asc(tc) - 64
If Len(tc) = 2 Then
je = je * 26 + Asc(Right(tc, 1)) - 64
End If
qj = je
End Function
Function rj$(ByVal sj%)
If sj > 26 Then
rj = Chr(Int((sj - 1) / 26) + 64) & Chr(Int((sj - 1) Mod 26) + 65)
Else
rj = Chr(sj + 64)
End If
End Function
Function tj(Optional ByVal mb% = 1, Optional ByVal uj% = 1)
Dim vj%, tc$
tj = rj((Cells(mb, Columns.Count).End(xlToLeft).Column) * uj% + 1)
Do
vj = qj(tj) - 1
tc = rj(vj)
If Range(tc & mb) = "" Then
tj = rj(vj)
Else
Exit Do
End If
Loop While vj > 1
End Function
Sub wj(ByRef yb%, Optional ByVal uj% = 1)
Dim xj$, stdelcol2$
xj = tj(1, uj)
stdelcol2 = tj(2)
If Range(xj & "2") <> "" Then
ActiveSheet.Columns(xj & ":" & stdelcol2).Delete
End If
Rows("2:2").Delete shift:=xlUp
yb = yb - 1
End Sub
Sub yj(ByVal zj$, Optional ByVal ak$ = "")
If ak = "" Then ak = zj
ActiveSheet.Columns(zj & ":" & ak).Delete
End Sub
Sub bk(ByVal zj$, Optional ByVal ak$ = "", Optional ByVal mb% = 2)
Dim tc$
If ak = "" Then ak = zj
tc = zj
Do
Range(tc & mb) = "Dummy" & tc
tc = nj(tc, 1)
Loop Until tc > ak
End Sub
Function ck$(ByVal yh$)
Select Case yh
Case "+STDAT": ck = "ZAS11"
Case "+STDAZ": ck = "ZAS17"
Case "+STDFA": ck = "ZAS06"
Case "+STDJA": ck = "ZAS16"
Case "+STDJH": ck = "ZAS02"
Case "+STDSA": ck = "ZAS05"
Case "+STDVA": ck = "ZAS08"
Case "-STDAZ": ck = "ZAS18"
Case "-STDFA": ck = "ZAS12"
Case "-STDFS": ck = "ZAS13"
Case "-STDJA": ck = "ZAS15"
Case "-STDJH": ck = "ZAS01"
Case "-STDNA": ck = "ZAS07"
Case "-STDVA": ck = "ZAS09"
End Select
End Function
Function dk$(ByVal ek$, Optional ByVal fk As Boolean = True)
Dim r%, z1$, z2$
ek = bj(ek)
If Left(ek, 3) = "BFI" Then ek = "BF1" & Mid(ek, 4)
r = Len(ek)
If Not mk(Right(ek, 1)) Then
Do
z1 = Mid(ek, r, 1)
z2 = Mid(ek, r - 1, 1)
r = r - 1
Loop Until mk(z2) And Not mk(z1) Or r = 2
If mk(z2) And Not mk(z1) Then
ek = Left(ek, r) & " " & LCase(Mid(ek, r + 1))
Else
r = Len(ek)
End If
End If
Do
z1 = Mid(ek, r, 1)
z2 = Mid(ek, r - 1, 1)
r = r - 1
Loop Until Not mk(z2) And mk(z1) Or r = 2
Select Case Left(ek, 3)
Case "BF1", "BF2": If r = 2 Then r = 3
Case Else
Select Case Left(ek, 4)
Case "BOS1", "BOS2": If r = 3 Then r = 4
End Select
End Select
If Not mk(z2) And mk(z1) Then
ek = UCase(Left(ek, r)) & " " & Mid(ek, r + 1)
End If
If fk Then
dk = kj(ek)
Else
dk = ek
End If
End Function
Sub gk(ByVal mb%, ByVal hk$, ByVal ik$)
Dim r%, pe%, ststrasse$
If Range(hk$ & mb) = "" Then Exit Sub
Range(hk$ & mb) = Replace(Range(hk$ & mb), " - ", "-")
Range(hk$ & mb) = Replace(Range(hk$ & mb), " / ", "-")
Range(hk$ & mb) = Replace(Range(hk$ & mb), "/", "-")
r = jk(Range(hk$ & mb))
Columns(ik & ":" & ik).HorizontalAlignment = xlRight
Columns(ik & ":" & ik).NumberFormat = "@"
If r > 0 Then
Range(ik & mb) = CStr(Trim(Mid(Range(hk & mb), r)))
ststrasse = Left(Range(hk & mb), r - 1)
pe = InStr(LCase(ststrasse), "str.")
If pe > 0 Then
pe = pe + 2
ststrasse = Left(ststrasse, pe) & "a|fffd|e" & Mid(ststrasse, pe + 2)
End If
Range(hk & mb) = ststrasse
End If
End Sub
Function jk$(ByVal kk$)
Dim r%, z1$, z2$, ianf%
On Error Resume Next
kk = Trim(kk)
ianf = Len(kk)
z2 = LCase(Mid(kk, ianf, 1))
z1 = Mid(kk, ianf - 1, 1)
If mk(z1, True) And InStr("abcdefgh", z2) > 0 Then ianf = Len(kk) - 1
If z1 = " " And InStr("abcdefgh", z2) > 0 Then ianf = Len(kk) - 2
For r = ianf To 1 Step -1
If Not mk(Mid(kk, r, 1), True) And Mid(kk, r, 1) <> "-" Then
Exit For
End If
Next r
If r = 1 Or r = Len(kk) Then r = 0
jk = r
End Function
Sub lk(ByVal yb%, ByVal hk$, ByVal ik$)
Dim mb%
For mb = 2 To yb
gk mb, hk, ik
Next mb
End Sub
Function mk(ByVal nk$, Optional ByVal ok = False) As Boolean
Dim pk As Boolean
pk = nk >= "0" And nk <= "9"
If Not ok Then pk = pk Or nk = "/" Or nk = "-"
If pk Then
mk = True
Else
mk = False
End If
End Function
Function qk(ByVal mh$, Optional ByVal rk$ = "", Optional ByVal mb As Byte = 1)
Dim ld As Worksheet, sk As Range
On Error Resume Next
qk = ""
If mh = "" Then Exit Function
If rk = "" Then Set ld = ActiveSheet Else Set ld = Sheets(rk)
Set sk = ld.Rows(mb).Find(what:=mh, after:=ld.Cells(mb, 1), LookIn:=xlValues, lookat:=xlWhole, _
searchorder:=xlByRows, SearchDirection:=xlNext, MatchCase:=True, searchformat:=False)
If Not sk Is Nothing Then
qk = rj(sk.Column)
End If
End Function
Function tk(ByRef uk As Variant, ByRef vk As Variant) As Variant
If Not IsArray(uk) And Not IsArray(vk) Then Exit Function
Dim wk As Variant
Dim di&, b&
Dim xk&, len2&
xk = UBound(uk) - LBound(uk) + 1
len2 = UBound(vk) - LBound(vk) + 1
b = 1
ReDim wk(b To xk + len2)
For di = LBound(uk) To UBound(uk)
wk(b) = uk(di)
b = b + 1
Next di
For di = LBound(vk) To UBound(vk)
wk(b) = vk(di)
b = b + 1
Next di
tk = wk
End Function
Function yk$(ByVal yh$)
Do While Left(yh, 1) = 0 And Len(yh) > 1
yh = Mid(yh, 2)
Loop
yk = yh
End Function
Function zk$()
Dim al() As Byte, r%, bl As Byte
#If Win64 Then
Dim cl As LongPtr
#Else
Dim cl As Long
#End If
cl = getcommandline
If cl Then
bl = CByte(lstrlen(cl)) * 2
If bl Then
ReDim al(0 To (bl - 1)) As Byte
copymemory al(0), ByVal cl, bl
zk = al
End If
r = InStr(LCase(zk), " /e")
If r > 0 Then zk = Mid(zk, r + 4)
End If
End Function
Private Sub dl()
Rows("1:200").Select
Selection.RowHeight = 12.75
End Sub
Private Sub el()
Dim fl%, n%, m%
On Error GoTo endofmacro
Application.ScreenUpdating = False
fl = ActiveWorkbook.Worksheets.Count
For m = 1 To fl
For n = m To fl
If UCase(Worksheets(n).Name) < UCase(Worksheets(m).Name) Then
Worksheets(n).Move before:=Worksheets(m)
End If
Next n
Next m
endofmacro:
Application.ScreenUpdating = True
End Sub

Attribute VB_Name = "gl"
Attribute VB_Base = "0{74BCD6D1-EEEA-4D0B-A54D-FE4484F39EF1}{5FBC4871-0432-4D76-8828-59554FD45454}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Private Sub hl()
DoEvents
Me.Repaint
End Sub
Private Sub userform_initialize()
DoEvents
Me.Repaint
End Sub


INQUEST-PP=macro
