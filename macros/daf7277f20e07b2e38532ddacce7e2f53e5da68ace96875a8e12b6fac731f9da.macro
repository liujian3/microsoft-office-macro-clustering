Attribute VB_Name = "Sheet12"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "complete_results_data"
Sub complete_result_data()
'
' Written 05/21/2001 by Mark Wiersma and Okan Aslaner
'

    Application.ScreenUpdating = False
    Application.DisplayAlerts = False


' Find the last row of the incoming data

    lastrow = Range("B1").Value

' Erase the previous data

    Range("G3:G3,K3:M3,O3:T3,G4:U2000").Select
    Selection.ClearContents
    
' Write formulas for columns F,G,H,I,J,K,L,M,N,O,P,Q,R,S

    'Range("F4").Select
    'ActiveCell.FormulaR1C1 = "=HOUR(RC[-4])"

    Range("G4").Select
    ActiveCell.FormulaR1C1 = _
        "=IF(ISERROR(SEARCH(""M"",RC[-6])),IF(ISERROR(RC[-6]-0),RC[11],RC[-6]-0),IF(ISERROR(RC[-6]-0),RC[11],RC[-6]-0)&""M"")"
    
    Range("H4").Select
    ActiveCell.FormulaR1C1 = "=RC[-6]"
    
    Range("I4").Select
    ActiveCell.FormulaR1C1 = _
        "=IF(ISERROR(IF(RC[9]<>"""",RC[10],VLOOKUP(RC[11],Activities!R3C2:R101C3,2,FALSE))),"""",IF(RC[9]<>"""",RC[10],VLOOKUP(RC[11],Activities!R3C2:R101C3,2,FALSE)))"
    
    'Rounds it 5 decimal places
    Range("J4").Select
    ActiveCell.FormulaR1C1 = "=RC[-8]"
    
    Range("K4").Select
    ActiveCell.FormulaR1C1 = _
        "=IF(AND(RC[5]=""P"",RC[6]<>""""),RC[-1]/RC[6],RC[-1])"
        
    Range("L4").Select
    ActiveCell.FormulaR1C1 = _
        "=IF(RC[-8]<>"""",RC[-1]*RC[-8]/100)"
    
    Range("M4").Select
    ActiveCell.FormulaR1C1 = "=IF(RC[-3]="""","""",SUM(R3C10:RC[-3]))"
    
    Range("N4").Select
    ActiveCell.FormulaR1C1 = _
        "=IF(RC[-13]="""","""",IF(RC[1]="""",VLOOKUP(RC[-13]-0,Activities!R7C2:R105C4,3),VLOOKUP(RC[1]-0,Activities!R7C2:R105C4,3)))"
    
    Range("O4").Select
    ActiveCell.FormulaR1C1 = _
        "=IF(ISERROR(LEFT(RC[-14],SEARCH(""M"",RC[-14])-1)),(IF(ISERROR(LEFT(RC[-14],SEARCH(""P"",RC[-14])-1)),(IF(ISERROR(LEFT(RC[-14],SEARCH(""F"",RC[-14])-1)),"""",LEFT(RC[-14],SEARCH(""F"",RC[-14])-1))),LEFT(RC[-14],SEARCH(""P"",RC[-14])-1))),LEFT(RC[-14],SEARCH(""M"",RC[-14])-1))"

    Range("P4").Select
    ActiveCell.FormulaR1C1 = _
        "=IF(ISERROR(SEARCH(""M"",RC[-15])),(IF(ISERROR(SEARCH(""P"",RC[-15])),(IF(ISERROR(SEARCH(""F"",RC[-15])),"""",""F"")),""P"")),""M"")"

    Range("Q4").Select
    ActiveCell.FormulaR1C1 = _
        "=IF(ISERROR(RIGHT(RC[-16],LEN(RC[-16])-SEARCH(""M"",RC[-16]))),(IF(ISERROR(RIGHT(RC[-16],LEN(RC[-16])-SEARCH(""P"",RC[-16]))),(IF(ISERROR(RIGHT(RC[-16],LEN(RC[-16])-SEARCH(""F"",RC[-16]))),"""",RIGHT(RC[-16],LEN(RC[-16])-SEARCH(""F"",RC[-16])))),RIGHT(RC[-16],LEN(RC[-16])-SEARCH(""P"",RC[-16])))),RIGHT(RC[-16],LEN(RC[-16])-SEARCH(""M"",RC[-16]))) "
    
    Range("R4").Select
    ActiveCell.FormulaR1C1 = "=IF(ISERROR(RC[-3]-0),"""",(RC[-3]-0))"
    
    Range("S4").Select
    ActiveCell.FormulaR1C1 = _
        "=IF(RC[-1]="""","""",VLOOKUP(RC[-1],ElementDescription!R2C1:R200C3,3))"
    
    Range("T4").Select
    ActiveCell.FormulaR1C1 = "=IF(ISERROR(RC[-19]-0),RC[-2],RC[-19]-0)"

    
    Range("U4").Select
    ActiveCell.FormulaR1C1 = _
    "=IF(RC[-9]-INT(RC[-9])<(Gap/2),INT(RC[-9]),IF(RC[-9]-INT(RC[-9])<Gap,(INT(RC[-9])+Gap), IF(RC[-9]-INT(RC[-9])<(Gap*1.5),(INT(RC[-9])+Gap), IF(RC[-9]-INT(RC[-9])<(Gap*2),(INT(RC[-9])+(Gap*2)), IF(RC[-9]-INT(RC[-9])<(Gap*2.5),(INT(RC[-9])+(Gap*2)),  IF(RC[-9]-INT(RC[-9])<(Gap*3),(INT(RC[-9])+(Gap*3)), IF(RC[-9]-INT(RC[-9])<(Gap*3.5),(INT(RC[-9])+(Gap*3)),(INT(RC[-9])+1))))))))"

    Range("F4").Select

' Copy cell as applicable
    
    Range("G4:G4").Select
    Selection.AutoFill Destination:=Range("G3:G4"), Type:=xlFillDefault

    Range("K4:M4").Select
    Selection.AutoFill Destination:=Range("K3:M4"), Type:=xlFillDefault
    
    Range("O4:T4").Select
    Selection.AutoFill Destination:=Range("O3:T4"), Type:=xlFillDefault
    
    Range("G4:U4").Select
    Selection.AutoFill Destination:=Range("G4:U" & lastrow), Type:=xlFillDefault

' Copy selection and repaste

    'Range("G3:U" & lastrow).Select
    'Selection.Copy
    'Range("G3").Select
    'Selection.PasteSpecial Paste:=xlValues, Operation:=xlNone, SkipBlanks:= _
    '    False, Transpose:=False
    'Application.CutCopyMode = False
    'Range("G2").Select
    
    Application.ScreenUpdating = True
    Application.DisplayAlerts = True

' Select, and clear borders and color fill
    
    Range("A3:U2000").Select
    Selection.Interior.ColorIndex = xlNone
    Selection.Borders(xlDiagonalDown).LineStyle = xlNone
    Selection.Borders(xlDiagonalUp).LineStyle = xlNone
    Selection.Borders(xlEdgeLeft).LineStyle = xlNone
    Selection.Borders(xlEdgeTop).LineStyle = xlNone
    Selection.Borders(xlEdgeBottom).LineStyle = xlNone
    Selection.Borders(xlEdgeRight).LineStyle = xlNone
    Selection.Borders(xlInsideVertical).LineStyle = xlNone
    Selection.Borders(xlInsideHorizontal).LineStyle = xlNone
    
' Select, and border and color fill
    
    Range("A3:U" & lastrow).Select
    Selection.Borders(xlDiagonalDown).LineStyle = xlNone
    Selection.Borders(xlDiagonalUp).LineStyle = xlNone
    With Selection.Borders(xlEdgeLeft)
        .LineStyle = xlContinuous
        .Weight = xlThin
        .ColorIndex = xlAutomatic
    End With
    With Selection.Borders(xlEdgeTop)
        .LineStyle = xlContinuous
        .Weight = xlThin
        .ColorIndex = xlAutomatic
    End With
    With Selection.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .Weight = xlThin
        .ColorIndex = xlAutomatic
    End With
    With Selection.Borders(xlEdgeRight)
        .LineStyle = xlContinuous
        .Weight = xlThin
        .ColorIndex = xlAutomatic
    End With
    With Selection.Borders(xlInsideVertical)
        .LineStyle = xlContinuous
        .Weight = xlThin
        .ColorIndex = xlAutomatic
    End With
    With Selection.Borders(xlInsideHorizontal)
        .LineStyle = xlContinuous
        .Weight = xlThin
        .ColorIndex = xlAutomatic
    End With
    
' Color fill
    
    Range("A3:U" & lastrow).Select
    Selection.Interior.ColorIndex = 35
    Range("A1").Select

End Sub

Attribute VB_Name = "Sheet4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True


Private Sub CommandButton1_Click()
 ActiveSheet.PivotTables("PivotTable1").PivotSelect "", xlDataAndLabel
    ActiveSheet.PivotTables("PivotTable1").RefreshTable
End Sub


Attribute VB_Name = "Sheet6"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Module1"
Sub Macro1()
Attribute Macro1.VB_Description = "Macro recorded 12/3/2002 by Okan Aslaner"
Attribute Macro1.VB_ProcData.VB_Invoke_Func = " \n14"
'
' Macro1 Macro
' Macro recorded 12/3/2002 by Okan Aslaner
'

'
    Range("F3:N21").Select
    Selection.Copy
    Range("F3").Select
    Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks _
        :=False, Transpose:=False
    Range("F3").Select
    Application.CutCopyMode = False
End Sub
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet7"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Calcul"
Const msResultSheet = "Result"
Const msOriginalSheet = "HITSTIME_DESKTOP"
Const msF = "F"
Const msC = "C"
Const miOriginalCElement = 1
Const miOriginalCTime = 10
Const miOriginalCPeriod = 6
Const miResultCElement = 1
Const miResultCTime = 2
Const miResultCPeriod = 6
Const miOriginalRow = 3
Const miResultRow = 3

Sub Calcul()
Dim i As Integer, lbFind As Boolean, j As Integer
Dim liLigne As Integer, lsValue As String, liLigneResult As Integer
Dim lsOriginal As String

On Error GoTo EtiqErr

lastrow = Range("B1").Value

Range("A3:F" & lastrow).Select
Selection.ClearContents
liLigne = miOriginalRow
liLigneResult = miResultRow
'in this we loop on all the ligne in the original
Do Until Sheets(msOriginalSheet).Cells(liLigne, miOriginalCElement) = ""
    lbFind = False
    lsOriginal = UCase(Sheets(msOriginalSheet).Cells(liLigne, miOriginalCElement))
    ' Analyse if we find a F
    If InStr(1, lsOriginal, msF) <> 0 Then
        ' in this loop we are looking before in the result sheet if we find the same elememt number
        ' if we find it we add the result
        ' if we don't find it -> problem
        lsValue = Mid(lsOriginal, 1, InStr(1, lsOriginal, msF) - 1)
        j = liLigneResult - 1
        If j <> miResultRow - 1 Then
            Do Until lsValue = Sheets(msResultSheet).Cells(j, miResultCElement)
                j = j - 1
                If j = miResultRow - 1 Then
                    Exit Do
                End If
            Loop
            If j <> miResultRow - 1 Then
                ' we add result
                Sheets(msResultSheet).Cells(j, miResultCTime) = Sheets(msResultSheet).Cells(j, miResultCTime) + Sheets(msOriginalSheet).Cells(liLigne, miOriginalCTime)
                lbFind = True
            End If
        End If
        If Not lbFind Then
            MsgBox "The beginning of the element cannot be found in the line " & liLigne & "."
            Exit Sub
        End If
    ' End Analyse if we find a F
    Else
        ' Analyse if we find a C
        If InStr(1, lsOriginal, msC) <> 0 Then
            ' in this loop we are looking before if we find the same element number + C
            ' if we find it, we don't have to do analyse this ligne because we have
            ' already analyse this ligne in the next loop in a previous ligne
            j = liLigne - 1
            If j <> miOriginalRow - 1 Then
                Do Until lsOriginal = UCase(Sheets(msOriginalSheet).Cells(j, miOriginalCElement))
                    'We find the element without C, so we analyse this ligne
                    If Mid(lsOriginal, 1, Len(lsOriginal) - 1) = UCase(Sheets(msOriginalSheet).Cells(j, miOriginalCElement)) Then
                        j = miOriginalRow - 1
                        Exit Do
                    End If
                    j = j - 1
                    If j = miOriginalRow - 1 Then
                        Exit Do
                    End If
                Loop
                If j <> miOriginalRow - 1 Then
                    lbFind = True
                End If
            End If
            ' in this loop we are adding all the ligne we find after with the same element number
            ' we stop when we have find the element number without C
            If Not lbFind Then
                lsValue = Mid(lsOriginal, 1, InStr(1, lsOriginal, msC) - 1)
                Sheets(msResultSheet).Cells(liLigneResult, miResultCElement) = lsValue
                Sheets(msResultSheet).Cells(liLigneResult, miResultCTime) = Sheets(msOriginalSheet).Cells(liLigne, miOriginalCTime)
                Sheets(msResultSheet).Cells(liLigneResult, miResultCPeriod) = Sheets(msOriginalSheet).Cells(liLigne, miOriginalCPeriod)
                j = liLigne + 1
                Do Until Sheets(msOriginalSheet).Cells(j, miOriginalCElement) = ""
                    If InStr(1, Sheets(msOriginalSheet).Cells(j, miOriginalCElement), lsValue) <> 0 Then
                    
                        'we add result
                        Sheets(msResultSheet).Cells(liLigneResult, miResultCTime) = Sheets(msResultSheet).Cells(liLigneResult, miResultCTime) + Sheets(msOriginalSheet).Cells(j, miOriginalCTime)
                        If Sheets(msOriginalSheet).Cells(j, miOriginalCElement) = lsValue Then
                            Exit Do
                        End If
                    End If
                    j = j + 1
                Loop
                liLigneResult = liLigneResult + 1
                lbFind = True
            End If
        End If
        ' End Analyse if we find a C
    End If
    If Not lbFind Then
        'Common case we don't have find a C or a F
    
    
        ' in this loop we are looking before in we find the same element number + C
        ' if we find it, we don't have to do analyse this ligne because we have
        ' already analyse this ligne in the previous loop in a previous ligne
        j = liLigne - 1
        If j <> miOriginalRow - 1 Then
            Do Until UCase(Sheets(msOriginalSheet).Cells(liLigne, miOriginalCElement)) & msC = UCase(Sheets(msOriginalSheet).Cells(j, miOriginalCElement))
                'We find the element so we analyse this ligne
                If lsOriginal = UCase(Sheets(msOriginalSheet).Cells(j, miOriginalCElement)) Then
                    j = miOriginalRow - 1
                    Exit Do
                End If
                j = j - 1
                If j = miOriginalRow - 1 Then
                    Exit Do
                End If
            Loop
            If j <> miOriginalRow - 1 Then
                lbFind = True
            End If
        End If
        'in this we paste all the value
        If Not lbFind Then
            Sheets(msResultSheet).Cells(liLigneResult, miResultCElement) = Sheets(msOriginalSheet).Cells(liLigne, miOriginalCElement)
            Sheets(msResultSheet).Cells(liLigneResult, miResultCTime) = Sheets(msOriginalSheet).Cells(liLigne, miOriginalCTime)
            Sheets(msResultSheet).Cells(liLigneResult, miResultCPeriod) = Sheets(msOriginalSheet).Cells(liLigne, miOriginalCPeriod)
            liLigneResult = liLigneResult + 1
        End If
    End If
    liLigne = liLigne + 1
Loop

MsgBox "Continued element calculation complete."

Application.Run "complete_result_data"

Exit Sub
EtiqErr:
    MsgBox Err.Number & " : " & Err.Description
End Sub

Attribute VB_Name = "Sheet5"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet8"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet11"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

Private Sub Worksheet_SelectionChange(ByVal Target As Excel.Range)

End Sub
Attribute VB_Name = "Sheet9"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "complete_observation_data"
Dim wshElementalTime As Worksheet
Dim pvtElementalPivot As PivotTable
Dim intIniRow, intEndRow, intIniCol, intEndCol, intCurRow As Integer
Dim dblMin, dbMax, dblStep, dblCount As Double
Dim rngElementalFormulas As Range
Dim rngChartValuesFormula As Range
Dim bolRound As Boolean

Sub complete_observation_data()
'
' Written 05/21/2001 by Okan Aslaner
'

' Finding blank cells
    range_count = Range("C1").Value
    
    blank_count = 0
    For i = 3 To range_count
        Range("A" & i).Select
        If Selection = "" Then
            blank_cell = ActiveCell.Row
            blank_count = blank_count + 1
            If blank_count = 1 Then
                blank_cells = blank_cell
            Else
                blank_cells = blank_cells & ", " & blank_cell
            End If
            
        End If
    Next
    
    If blank_count > 0 And blank_count <= 1 Then
        MsgBox "Analysis cannot be completed.  There is " & blank_count & " entry without an element number at row " & blank_cells & _
        " . Please assign a value or delete the row.", vbCritical, "Missing Element Numbers"
        Exit Sub
    ElseIf blank_count > 1 Then
        MsgBox "Analysis cannot be completed.  There are " & blank_count & " entries without any element numbers at rows " & blank_cells & _
        " . Please assign values or delete the rows.", vbCritical, "Missing Element Numbers"
        Exit Sub
    End If

    Application.ScreenUpdating = False
    Application.DisplayAlerts = False


' Find the last row of the incoming data

    lastrow = Range("B1").Value

' Erase the previous data

    Range("F3:G3,K3:M3,O3:T3,F4:U2000").Select
    Selection.ClearContents
    
' Write formulas for columns D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S

    Range("F4").Select
    ActiveCell.FormulaR1C1 = "=HOUR(RC[-4])"

    Range("G4").Select
    ActiveCell.FormulaR1C1 = _
        "=IF(ISERROR(SEARCH(""M"",RC[-6])),IF(ISERROR(RC[-6]-0),RC[11],RC[-6]-0),IF(ISERROR(RC[-6]-0),RC[11],RC[-6]-0)&""M"")"
    
    Range("H4").Select
    ActiveCell.FormulaR1C1 = "=IF(RC[-6]="""","""",IF(HOUR(RC[-6])<HOUR(R[-1]C[-6]),(RC[-6]+""24:00:00"")-R[-1]C[-6],RC[-6]-R[-1]C[-6]))"
    
    Range("I4").Select
    ActiveCell.FormulaR1C1 = _
        "=IF(ISERROR(IF(RC[9]<>"""",RC[10],VLOOKUP(RC[11],Activities!R3C2:R101C3,2,FALSE))),"""",IF(RC[9]<>"""",RC[10],VLOOKUP(RC[11],Activities!R3C2:R101C3,2,FALSE)))"
    
    'Rounds it 5 decimal places
    Range("J4").Select
    ActiveCell.FormulaR1C1 = "=IF(RC[-9]="""","""",ROUND(RC[-2]*1440*100,5))"
    
    Range("K4").Select
    ActiveCell.FormulaR1C1 = _
        "=IF(AND(RC[5]=""P"",RC[6]<>""""),RC[-1]/RC[6],RC[-1])"
        
    Range("L4").Select
    ActiveCell.FormulaR1C1 = _
        "=IF(RC[-8]<>"""",RC[-1]*RC[-8]/100)"
    
    Range("M4").Select
    ActiveCell.FormulaR1C1 = "=IF(RC[-3]="""","""",SUM(R3C10:RC[-3]))"
    
    Range("N4").Select
    ActiveCell.FormulaR1C1 = _
        "=IF(RC[-13]="""","""",IF(RC[1]="""",VLOOKUP(RC[-13]-0,Activities!R7C2:R105C4,3),VLOOKUP(RC[1]-0,Activities!R7C2:R105C4,3)))"
    
    Range("O4").Select
    ActiveCell.FormulaR1C1 = _
        "=IF(ISERROR(LEFT(RC[-14],SEARCH(""M"",RC[-14])-1)),(IF(ISERROR(LEFT(RC[-14],SEARCH(""P"",RC[-14])-1)),(IF(ISERROR(LEFT(RC[-14],SEARCH(""C"",RC[-14])-1)),"""",LEFT(RC[-14],SEARCH(""C"",RC[-14])-1))),LEFT(RC[-14],SEARCH(""P"",RC[-14])-1))),LEFT(RC[-14],SEARCH(""M"",RC[-14])-1))"
    
    Range("P4").Select
    ActiveCell.FormulaR1C1 = _
        "=IF(ISERROR(SEARCH(""M"",RC[-15])),(IF(ISERROR(SEARCH(""P"",RC[-15])),(IF(ISERROR(SEARCH(""C"",RC[-15])),"""",""C"")),""P"")),""M"")"

    Range("Q4").Select
    ActiveCell.FormulaR1C1 = _
        "=IF(ISERROR(RIGHT(RC[-16],LEN(RC[-16])-SEARCH(""M"",RC[-16]))),(IF(ISERROR(RIGHT(RC[-16],LEN(RC[-16])-SEARCH(""P"",RC[-16]))),(IF(ISERROR(RIGHT(RC[-16],LEN(RC[-16])-SEARCH(""C"",RC[-16]))),"""",RIGHT(RC[-16],LEN(RC[-16])-SEARCH(""C"",RC[-16])))),RIGHT(RC[-16],LEN(RC[-16])-SEARCH(""P"",RC[-16])))),RIGHT(RC[-16],LEN(RC[-16])-SEARCH(""M"",RC[-16]))) "
    
    Range("R4").Select
    ActiveCell.FormulaR1C1 = "=IF(ISERROR(RC[-3]-0),"""",(RC[-3]-0))"
    
    Range("S4").Select
    ActiveCell.FormulaR1C1 = _
        "=IF(RC[-1]="""","""",VLOOKUP(RC[-1],ElementDescription!R2C1:R200C3,3))"
    
    Range("T4").Select
    ActiveCell.FormulaR1C1 = "=IF(ISERROR(RC[-19]-0),RC[-2],RC[-19]-0)"
'////
    
    Range("U4").Select
    ActiveCell.FormulaR1C1 = _
    "=IF(RC[-9]-INT(RC[-9])<(Gap/2),INT(RC[-9]),IF(RC[-9]-INT(RC[-9])<Gap,(INT(RC[-9])+Gap), IF(RC[-9]-INT(RC[-9])<(Gap*1.5),(INT(RC[-9])+Gap), IF(RC[-9]-INT(RC[-9])<(Gap*2),(INT(RC[-9])+(Gap*2)), IF(RC[-9]-INT(RC[-9])<(Gap*2.5),(INT(RC[-9])+(Gap*2)),  IF(RC[-9]-INT(RC[-9])<(Gap*3),(INT(RC[-9])+(Gap*3)), IF(RC[-9]-INT(RC[-9])<(Gap*3.5),(INT(RC[-9])+(Gap*3)),(INT(RC[-9])+1))))))))"
    Range("F4").Select

' Copy cell as applicable
    
    Range("F4:G4").Select
    Selection.AutoFill Destination:=Range("F3:G4"), Type:=xlFillDefault

    Range("K4:M4").Select
    Selection.AutoFill Destination:=Range("K3:M4"), Type:=xlFillDefault
    
    Range("O4:T4").Select
    Selection.AutoFill Destination:=Range("O3:T4"), Type:=xlFillDefault
    
    Range("F4:U4").Select
    Selection.AutoFill Destination:=Range("F4:U" & lastrow), Type:=xlFillDefault

' Copy selection and repaste

    'Range("F3:U" & lastrow).Select
    'Selection.Copy
    'Range("F3").Select
    'Selection.PasteSpecial Paste:=xlValues, Operation:=xlNone, SkipBlanks:= _
    '   False, Transpose:=False
    'Application.CutCopyMode = False
    'Range("F2").Select
   '
    Range("F3:N21").Select
    Selection.Copy
    Range("F3").Select
    Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks _
        :=False, Transpose:=False
    Range("F3").Select
    Application.CutCopyMode = False
   
   
   Application.ScreenUpdating = True
   Application.DisplayAlerts = True

' Select, and clear borders and color fill
    
    Range("F3:U2000").Select
    Selection.Interior.ColorIndex = xlNone
    Selection.Borders(xlDiagonalDown).LineStyle = xlNone
    Selection.Borders(xlDiagonalUp).LineStyle = xlNone
    Selection.Borders(xlEdgeLeft).LineStyle = xlNone
    Selection.Borders(xlEdgeTop).LineStyle = xlNone
    Selection.Borders(xlEdgeBottom).LineStyle = xlNone
    Selection.Borders(xlEdgeRight).LineStyle = xlNone
    Selection.Borders(xlInsideVertical).LineStyle = xlNone
    Selection.Borders(xlInsideHorizontal).LineStyle = xlNone
    
' Select, and border and color fill
    
    Range("A3:U" & lastrow).Select
    Selection.Borders(xlDiagonalDown).LineStyle = xlNone
    Selection.Borders(xlDiagonalUp).LineStyle = xlNone
    With Selection.Borders(xlEdgeLeft)
        .LineStyle = xlContinuous
        .Weight = xlThin
        .ColorIndex = xlAutomatic
    End With
    With Selection.Borders(xlEdgeTop)
        .LineStyle = xlContinuous
        .Weight = xlThin
        .ColorIndex = xlAutomatic
    End With
    With Selection.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .Weight = xlThin
        .ColorIndex = xlAutomatic
    End With
    With Selection.Borders(xlEdgeRight)
        .LineStyle = xlContinuous
        .Weight = xlThin
        .ColorIndex = xlAutomatic
    End With
    With Selection.Borders(xlInsideVertical)
        .LineStyle = xlContinuous
        .Weight = xlThin
        .ColorIndex = xlAutomatic
    End With
    With Selection.Borders(xlInsideHorizontal)
        .LineStyle = xlContinuous
        .Weight = xlThin
        .ColorIndex = xlAutomatic
    End With
    
' Color fill
    
    Range("F3:U" & lastrow).Select
    Selection.Interior.ColorIndex = 35
    Range("A1").Select
    
End Sub

Sub ETcalculation()
' calculates the elemental time for time study

    ActiveWorkbook.Worksheets("HITSTIME_DESKTOP").Select
    lastrow = Range("B1").Value
    
    'Erase the previous data
    Range("U4:U2000").Select
    Selection.ClearContents
    
    ' Write formulas for columns S
    Range("U4").Select
    ActiveCell.FormulaR1C1 = "=ROUND(RC[-9]/Gap,0)*Gap"
    '"=IF(RC[-9]-INT(RC[-9])<(Gap/2),INT(RC[-9]),IF(RC[-9]-INT(RC[-9])<Gap,(INT(RC[-9])+Gap), IF(RC[-9]-INT(RC[-9])<(Gap*1.5),(INT(RC[-9])+Gap), IF(RC[-9]-INT(RC[-9])<(Gap*2),(INT(RC[-9])+(Gap*2)), IF(RC[-9]-INT(RC[-9])<(Gap*2.5),(INT(RC[-9])+(Gap*2)),  IF(RC[-9]-INT(RC[-9])<(Gap*3),(INT(RC[-9])+(Gap*3)), IF(RC[-9]-INT(RC[-9])<(Gap*3.5),(INT(RC[-9])+(Gap*3)),(INT(RC[-9])+1))))))))"
    
    ' Copy cell as applicable
    Range("U4:U4").Select
    Selection.AutoFill Destination:=Range("U4:U" & lastrow), Type:=xlFillDefault

    ' Copy selection and repaste
    Range("U4:U" & lastrow).Select
    Selection.Copy
    Range("U4").Select
    Selection.PasteSpecial Paste:=xlValues, Operation:=xlNone, SkipBlanks:= _
        False, Transpose:=False
    Application.CutCopyMode = False
    Range("A1").Select
    
    'check and correct integer rounds (alternates roundup & rounddown)
    For dblCount = 4 To lastrow
        If Range("U" & dblCount) - Range("L" & dblCount) = (Range("Gap") / 2) Then
            If bolRound Then
                bolRound = False
                Range("U" & dblCount) = Range("U" & dblCount) - Range("Gap")
            Else
                bolRound = True
            End If
        End If
    Next dblCount

    ' calculates the deviation from the mode
    ActiveWorkbook.Worksheets("Elemental Time").Select
    Set wshElementalTime = ActiveWorkbook.Worksheets("Elemental Time")
    With wshElementalTime
        Set pvtElementalPivot = .PivotTables(1)
        With pvtElementalPivot
            .RefreshTable
            intIniRow = .DataBodyRange.Row
            intEndRow = intIniRow + .DataBodyRange.Rows.Count - 1
            intIniCol = .DataBodyRange.Column - 1
            intEndCol = .DataBodyRange.Column
        End With
        
        .Range(.Cells(intIniRow, intEndCol + 1), .Cells(200, intEndCol + 3)).Clear
        
        Range("C9").Select
        ActiveCell.FormulaR1C1 = "=ROUND(RC2/MAX(R9C2:R2000C2),2)"
        Range("D9").Select
        ActiveCell.FormulaR1C1 = "=VLOOKUP(RC[-1],Correction!R6C2:R105C3,2)"
        Range("E9").Select
        ActiveCell.FormulaR1C1 = "=IF(RC1=0,0,(RC1-R8C5)*RC[-1])"
        
        'Formats the right 3 columns in the table
        
        Range("C9:C9").Select
        Selection.NumberFormat = "0.00"
        Range("D9:D9").Select
        Selection.NumberFormat = "0.000000000"
        Range("E9:E9").Select
        Selection.NumberFormat = "0.00"
        
        ETlastrow = Range("Z3").Value
        Range("C9:E9").Select
        Selection.AutoFill Destination:=Range("C9:E" & ETlastrow), Type:=xlFillDefault
    
        'draw lines to the right 3 columns in the table
        
        .Range(.Cells(intIniRow, intEndCol + 1), .Cells(intEndRow, intEndCol + 3)).Select

        Selection.Borders(xlDiagonalDown).LineStyle = xlNone
        Selection.Borders(xlDiagonalUp).LineStyle = xlNone
        With Selection.Borders(xlEdgeLeft)
            .LineStyle = xlContinuous
            .Weight = xlThin
            .ColorIndex = xlAutomatic
        End With
        With Selection.Borders(xlEdgeTop)
            .LineStyle = xlContinuous
            .Weight = xlThin
            .ColorIndex = xlAutomatic
        End With
        With Selection.Borders(xlEdgeBottom)
            .LineStyle = xlContinuous
            .Weight = xlThin
            .ColorIndex = xlAutomatic
        End With
        With Selection.Borders(xlEdgeRight)
            .LineStyle = xlContinuous
            .Weight = xlThin
            .ColorIndex = xlAutomatic
        End With
        With Selection.Borders(xlInsideVertical)
            .LineStyle = xlContinuous
            .Weight = xlThin
            .ColorIndex = xlAutomatic
        End With
        With Selection.Borders(xlInsideHorizontal)
            .LineStyle = xlContinuous
            .Weight = xlThin
            .ColorIndex = xlAutomatic
        End With
 
        ' updates the chart range
        
        .Range("ChartRange").ClearContents
        intIniRow = 1
        intIniCol = .Range("ChartRange").Column
        intEndCol = .Range("ChartRange").Column + 1
        dblMin = .Range("MinScale")
        dblmax = .Range("MaxScale")
        dblStep = .Range("Gap")
        intCurRow = intIniRow
        For dblCount = dblMin To dblmax Step dblStep
            .Cells(intCurRow, intIniCol) = dblCount
            intCurRow = intCurRow + 1
        Next dblCount
        intEndRow = intCurRow - 1
        
        .Range("ChartValuesFormula").Copy
        .Range(.Cells(intIniRow, intEndCol + 1), .Cells(intEndRow, intEndCol + 1)).Select
        Selection.PasteSpecial Paste:=xlFormulas
        Selection.Copy
        .Range(.Cells(intIniRow, intEndCol), .Cells(intEndRow, intEndCol)).Select
        Selection.PasteSpecial Paste:=xlValues
        .Range(.Cells(intIniRow, intEndCol + 1), .Cells(intEndRow, intEndCol + 1)).Select
        Selection.ClearContents
        .ChartObjects("Chart 10").Activate
        ActiveChart.SeriesCollection(1).Select
        ActiveChart.SeriesCollection(1).Values = .Range(.Cells(intIniRow, intEndCol), .Cells(intEndRow, intEndCol))
        ActiveChart.SeriesCollection(1).XValues = .Range(.Cells(intIniRow, intIniCol), .Cells(intEndRow, intIniCol))
        .Range("A1").Select
    End With
    

End Sub

Attribute VB_Name = "refresh_elemental_chart"
Sub refresh_elemental_chart()
Attribute refresh_elemental_chart.VB_Description = "Macro recorded 05/28/2001 by ISIS Project"
Attribute refresh_elemental_chart.VB_ProcData.VB_Invoke_Func = " \n14"
'
' refresh_elemental_chart Macro
' Macro recorded 05/28/2001 by Okan Aslaner
'

'
    lastrow = Sheets("HITSTIME_DESKTOP").Range("B1").Value
    ActiveChart.SeriesCollection(1).Select
    ActiveChart.SetSourceData Source:=Sheets("HITSTIME_DESKTOP").Range("J2:J" & lastrow), _
        PlotBy:=xlColumns
    ActiveChart.Deselect
    ActiveWindow.Zoom = True
End Sub
Attribute VB_Name = "Sheet2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "refresh_analysis"
Sub refresh_analysis()
'
' Macro1 Macro
' Macro recorded 5/23/01 by Okan Aslaner
'

'
    ActiveSheet.PivotTables("PivotTable1").PivotSelect "", xlDataAndLabel
    ActiveSheet.PivotTables("PivotTable1").RefreshTable
    ActiveSheet.PivotTables("PivotTable2").PivotSelect "", xlDataAndLabel
    ActiveSheet.PivotTables("PivotTable2").RefreshTable
    ActiveSheet.PivotTables("PivotTable3").PivotSelect "", xlDataAndLabel
    ActiveSheet.PivotTables("PivotTable3").RefreshTable
    
    Range("A1").Select
End Sub
Attribute VB_Name = "Sheet3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "group_breakdown_by_period"
Sub group_breakdown_by_period()
'
' Group Breakdown by Period Macro
' Macro recorded 5/23/01 by Okan Aslaner
'

'
    ActiveSheet.PivotTables("PivotTable1").PivotSelect "", xlDataAndLabel
    ActiveSheet.PivotTables("PivotTable1").RefreshTable
    Range("A1").Select
End Sub
Attribute VB_Name = "Module2"
Sub refresh_charts()
Attribute refresh_charts.VB_Description = "Macro recorded 2/10/2005 by Okan Aslaner"
Attribute refresh_charts.VB_ProcData.VB_Invoke_Func = " \n14"
'
' refresh_charts Macro
' Macro recorded 2/10/2005 by Okan Aslaner
'

'
    ActiveSheet.PivotTables("DetailedTaskCategoryPivot").PivotSelect "", _
        xlDataAndLabel, True
    ActiveSheet.PivotTables("DetailedTaskCategoryPivot").PivotCache.Refresh
    ActiveSheet.PivotTables("SummaryTaskCategoryPivot").PivotSelect "", _
        xlDataAndLabel, True
    ActiveSheet.PivotTables("SummaryTaskCategoryPivot").PivotCache.Refresh
    
' Format Detailed Categories Chart
    ActiveSheet.ChartObjects("Chart 3").Activate
    ActiveChart.SeriesCollection(1).Select
    ActiveChart.SeriesCollection(1).AxisGroup = 2
    ActiveChart.SeriesCollection(1).ApplyDataLabels AutoText:=True, LegendKey:= _
        False, ShowSeriesName:=False, ShowCategoryName:=False, ShowValue:=False, _
        ShowPercentage:=False, ShowBubbleSize:=False
    ActiveChart.SeriesCollection(2).DataLabels.Select
    With Selection
        .HorizontalAlignment = xlCenter
        .VerticalAlignment = xlCenter
        .ReadingOrder = xlContext
        .Position = xlLabelPositionOutsideEnd
        .Orientation = xlUpward
    End With
    ActiveChart.Axes(xlValue, xlSecondary).Select
    Selection.TickLabels.NumberFormat = "#,##0"
    
    Range("A1").Select
End Sub


INQUEST-PP=macro
