Attribute VB_Name = "Module1"
    Const XML_NAMESPACE_ATTR As String = "xmlns:zinojumi"
    Const XML_NAMESPACE_VALUE As String = "https://zinojumi.fid.gov.lv"
Dim firstRow As Integer
'generate xml module
Private Function LoadXmlFile(Path As String) As MSXML2.DOMDocument60
    Set LoadXmlFile = New MSXML2.DOMDocument60

    With LoadXmlFile
        .async = False
        .validateOnParse = False
        .resolveExternals = False
        .Load Path
    End With
End Function
Sub GenerateXML()

    Dim exitSub As Boolean
    exitSub = False

    firstRow = ActiveCell.row()
    
    If ActiveCell.Column() <> Range("tech_numurs_gada").Column Or ActiveCell.row() < 6 Or ActiveCell.value = "" Then
      MsgBox ("Wrong Cells")
      exitSub = True
    End If
    
    Dim i As Integer
    Max = 100
    For i = ActiveCell.row() To Max
        If isNotStatedTrnId(i) Then
            MsgBox ("Transaction data stated but transaction id is not specified. Row : " & i)
            Exit For
        End If
    Next
    
    If Not (validation(firstRow)) Then
        exitSub = True
    End If
    
    If (exitSub) Then
        Exit Sub
    End If
    
    
    ' Constant values for XML namespace code and value
    ''Const XML_NAMESPACE_ATTR As String = "xmlns"
    ''Const XML_NAMESPACE_VALUE As String = "https://zinojumi.fid.gov.lv"
    Const QUOTE_MARK As Integer = 34        ' ASCII code for double quote mark
    
    Dim xmlDom As MSXML2.DOMDocument60          ' Represents the DOM document
    Dim xmlRootNode As MSXML2.IXMLDOMElement     ' Represents the XML root node
    
    Dim xmlVersion As MSXML2.IXMLDOMProcessingInstruction   ' This will become the <xml version="1.0"?> processing instruction
    Dim xslStylesheet As MSXML2.IXMLDOMProcessingInstruction ' Optional XSL Stylesheet processing instruction
    
    Dim objSchemaCache As New XMLSchemaCache60
    Dim objErr As MSXML2.IXMLDOMParseError

    objSchemaCache.Add XML_NAMESPACE_VALUE, LoadXmlFile(Sheets("Parameters").Cells(Range("SchemaFilePath").row, Range("SchemaFilePath").Column).value & Sheets("Parameters").Cells(Range("SchemaFileName").row, Range("SchemaFileName").Column).value)

    Set xmlDom = New MSXML2.DOMDocument60
    
    Set xmlDom.Schemas = objSchemaCache
    
    xmlDom.preserveWhiteSpace = False
    
    i = firstRow
    
    ' Create the <?xml version="1.0"?> processing instruction header at the top of the file.
    Set xmlVersion = xmlDom.createProcessingInstruction("xml", "version=" & Chr(QUOTE_MARK) & "1.0" & Chr(QUOTE_MARK) & " encoding=" & Chr(QUOTE_MARK) & "UTF-8" & Chr(QUOTE_MARK))
    xmlDom.appendChild xmlVersion
    
    ' Create the <?xml-stylesheet type="text/xsl" href="stylesheet.xsl" version="1.0" ?> processing instruction. Uncomment the following lines to activate the XSL stylesheet reference (the XSL must exist in the specified folder)
    'Set xslStylesheet = xmlDom.createProcessingInstruction("xml-stylesheet", "type=" & Chr(QUOTE_MARK) & "text/xsl" & Chr(QUOTE_MARK) & " href=" & Chr(QUOTE_MARK) & "stylesheet.xsl" & Chr(QUOTE_MARK) & " version=" & Chr(QUOTE_MARK) & "1.0" & Chr(QUOTE_MARK))
    'xmlDom.appendChild xslStylesheet
    
    ' Define the Database root node and append to Dom
    ''Set xmlRootNode = xmlDom.createElement("suspicious_report")
    Set xmlRootNode = xmlDom.createNode(1, "suspicious_report", XML_NAMESPACE_VALUE)
    xmlDom.appendChild xmlRootNode
    ''xmlDom.DocumentElement.setAttribute XML_NAMESPACE_ATTR, XML_NAMESPACE_VALUE
    
    ''Set xmlInfTypeNode = xmlDom.createElement("information_type")
    Set xmlInfTypeNode = xmlDom.createNode(1, "information_type", XML_NAMESPACE_VALUE)
    xmlInfTypeNode.Text = Cells(i, Range("information_type").Column).value
    xmlRootNode.appendChild xmlInfTypeNode
    
    ''Set xmlRepDataNode = xmlDom.createNode(1, "reporting_data")
    Set xmlRepDataNode = xmlDom.createNode(1, "reporting_data", XML_NAMESPACE_VALUE)
    xmlRootNode.appendChild xmlRepDataNode
    
    ''Set xmlRepDataYearNode = xmlDom.createNode(1, "reporting_year")
    Set xmlRepDataYearNode = xmlDom.createNode(1, "reporting_year", XML_NAMESPACE_VALUE)
    xmlRepDataYearNode.Text = Cells(i, Range("reporting_year").Column).value
    xmlRepDataNode.appendChild xmlRepDataYearNode
    
    ''Set xmlRepDataDateNode = xmlDom.createNode(1, "reporting_date")
    Set xmlRepDataDateNode = xmlDom.createNode(1, "reporting_date", XML_NAMESPACE_VALUE)
    xmlRepDataDateNode.Text = Format(Cells(i, Range("reporting_date").Column).value, "yyyy-mm-dd")
    xmlRepDataNode.appendChild xmlRepDataDateNode
    
    ''Set xmlRepGroupNode = xmlDom.createNode(1, "reporter_group")
    Set xmlRepGroupNode = xmlDom.createNode(1, "reporter_group", XML_NAMESPACE_VALUE)
    xmlRepGroupNode.Text = Cells(i, Range("reporter_group").Column).value
    xmlRootNode.appendChild xmlRepGroupNode
    
    ''Set xmlRepCodeNode = xmlDom.createNode(1, "reporter_code")
    Set xmlRepCodeNode = xmlDom.createNode(1, "reporter_code", XML_NAMESPACE_VALUE)
    xmlRepCodeNode.Text = Cells(i, Range("reporter_code").Column).value
    xmlRootNode.appendChild xmlRepCodeNode
    
    
    ''Set xmlReporterNode = xmlDom.createNode(1, "reporter")
    Set xmlReporterNode = xmlDom.createNode(1, "reporter", XML_NAMESPACE_VALUE)
    xmlRootNode.appendChild xmlReporterNode
    
    ''Set xmlReporterLegalNode = xmlDom.createNode(1, "reporter_legal")
    Set xmlReporterLegalNode = xmlDom.createNode(1, "reporter_legal", XML_NAMESPACE_VALUE)
    xmlReporterNode.appendChild xmlReporterLegalNode
    
    ''Set xmlReporterLegalNameNode = xmlDom.createNode(1, "legal_name")
    Set xmlReporterLegalNameNode = xmlDom.createNode(1, "legal_name", XML_NAMESPACE_VALUE)
    xmlReporterLegalNameNode.Text = Cells(i, Range("reporter_liksubj_jp_name").Column).value
    xmlReporterLegalNode.appendChild xmlReporterLegalNameNode
    
    ''Set xmlReporterLegalLegalFormNode = xmlDom.createNode(1, "legal_form")
    Set xmlReporterLegalLegalFormNode = xmlDom.createNode(1, "legal_form", XML_NAMESPACE_VALUE)
    xmlReporterLegalLegalFormNode.Text = Cells(i, Range("reporter_liksubj_jp_legal_form").Column).value
    xmlReporterLegalNode.appendChild xmlReporterLegalLegalFormNode
    
    ''Set xmlReporterLegalRegNumberNode = xmlDom.createNode(1, "registration_number")
    Set xmlReporterLegalRegNumberNode = xmlDom.createNode(1, "registration_number", XML_NAMESPACE_VALUE)
    xmlReporterLegalRegNumberNode.Text = Cells(i, Range("reporter_liksubj_jp_registration_number").Column).value
    xmlReporterLegalNode.appendChild xmlReporterLegalRegNumberNode
    
    ''Set xmlReporterLegalCountryNode = xmlDom.createNode(1, "country")
    Set xmlReporterLegalCountryNode = xmlDom.createNode(1, "country", XML_NAMESPACE_VALUE)
    xmlReporterLegalCountryNode.Text = Cells(i, Range("reporter_liksubj_jp_country").Column).value
    xmlReporterLegalNode.appendChild xmlReporterLegalCountryNode
    
    ''Set xmlReporterLegalSwiftCodeNode = xmlDom.createNode(1, "swift_code")
    Set xmlReporterLegalSwiftCodeNode = xmlDom.createNode(1, "swift_code", XML_NAMESPACE_VALUE)
    xmlReporterLegalSwiftCodeNode.Text = Cells(i, Range("reporter_liksubj_jp_swift_code").Column).value
    xmlReporterLegalNode.appendChild xmlReporterLegalSwiftCodeNode
    
    ' Create report
    ''Set xmlReportListNode = xmlDom.createNode(1, "report_list")
    Set xmlReportListNode = xmlDom.createNode(1, "report_list", XML_NAMESPACE_VALUE)
    xmlRootNode.appendChild xmlReportListNode
    
    ''Set xmlReportNode = xmlDom.createNode(1, "report")
    Set xmlReportNode = xmlDom.createNode(1, "report", XML_NAMESPACE_VALUE)
    xmlReportListNode.appendChild xmlReportNode
    
    ''Set xmlReportNumber = xmlDom.createNode(1, "report_number")
    Set xmlReportNumber = xmlDom.createNode(1, "report_number", XML_NAMESPACE_VALUE)
    xmlReportNumber.Text = Cells(i, Range("report_number").Column).value
    xmlReportNode.appendChild xmlReportNumber
    
    'Indication
    ''Set xmlIndicationNode = xmlDom.createNode(1, "indication")
    Set xmlIndicationNode = xmlDom.createNode(1, "indication", XML_NAMESPACE_VALUE)
    xmlReportNode.appendChild xmlIndicationNode
    
    ''Set indicationCodeNode = xmlDom.createNode(1, "code")
    Set indicationCodeNode = xmlDom.createNode(1, "code", XML_NAMESPACE_VALUE)
    indicationCodeNode.Text = Cells(i, Range("code").Column).value
    xmlIndicationNode.appendChild indicationCodeNode
    
    ''Set indicationOffenseGroupCode = xmlDom.createNode(1, "offense_group_code")
    Set indicationOffenseGroupCode = xmlDom.createNode(1, "offense_group_code", XML_NAMESPACE_VALUE)
    indicationOffenseGroupCode.Text = Cells(i, Range("offense_group_code").Column).value
    xmlIndicationNode.appendChild indicationOffenseGroupCode
    
    ''Set indicationPossibleOffenseCodeList = xmlDom.createNode(1, "possible_offense_code_list")
    Set indicationPossibleOffenseCodeList = xmlDom.createNode(1, "possible_offense_code_list", XML_NAMESPACE_VALUE)
    xmlIndicationNode.appendChild indicationPossibleOffenseCodeList
    
    ''Set indicationPossibleOffenseCode = xmlDom.createNode(1, "possible_offense_code")
    Set indicationPossibleOffenseCode = xmlDom.createNode(1, "possible_offense_code", XML_NAMESPACE_VALUE)
    indicationPossibleOffenseCode.Text = Cells(i, Range("possible_offense_code").Column).value
    indicationPossibleOffenseCodeList.appendChild indicationPossibleOffenseCode
    
    ''Set indicationTypologoyCodeList = xmlDom.createNode(1, "typology_code_list")
    Set indicationTypologoyCodeList = xmlDom.createNode(1, "typology_code_list", XML_NAMESPACE_VALUE)
    xmlIndicationNode.appendChild indicationTypologoyCodeList

    ''Set indicationTypologyCode = xmlDom.createNode(1, "typology_code")
    Set indicationTypologyCode = xmlDom.createNode(1, "typology_code", XML_NAMESPACE_VALUE)
    indicationTypologyCode.Text = Cells(i, Range("typology_code").Column).value
    indicationTypologoyCodeList.appendChild indicationTypologyCode
    
    ''Set indicationTypologyCode2 = xmlDom.createNode(1, "typology_code")
    Set indicationTypologyCode2 = xmlDom.createNode(1, "typology_code", XML_NAMESPACE_VALUE)
    indicationTypologyCode2.Text = Cells(i, Range("typology_code2").Column).value
    indicationTypologoyCodeList.appendChild indicationTypologyCode2
    
    ''Set indicationTypologyCode3 = xmlDom.createNode(1, "typology_code")
    Set indicationTypologyCode3 = xmlDom.createNode(1, "typology_code", XML_NAMESPACE_VALUE)
    indicationTypologyCode3.Text = Cells(i, Range("typology_code3").Column).value
    indicationTypologoyCodeList.appendChild indicationTypologyCode3

    ''Set indicationTypologyDescriptionFirst = xmlDom.createNode(1, "typology_description_first")
    Set indicationTypologyDescriptionFirst = xmlDom.createNode(1, "typology_description_first", XML_NAMESPACE_VALUE)
    indicationTypologyDescriptionFirst.Text = Cells(i, Range("typology_description_first").Column).value
    xmlIndicationNode.appendChild indicationTypologyDescriptionFirst

    ''Set indicationTypologyDescriptionSecond = xmlDom.createNode(1, "typology_description_second")
    Set indicationTypologyDescriptionSecond = xmlDom.createNode(1, "typology_description_second", XML_NAMESPACE_VALUE)
    indicationTypologyDescriptionSecond.Text = Cells(i, Range("typology_description_second").Column).value
    xmlIndicationNode.appendChild indicationTypologyDescriptionSecond
    
    ''Set indicationDescription = xmlDom.createNode(1, "indication_description")
    Set indicationDescription = xmlDom.createNode(1, "indication_description", XML_NAMESPACE_VALUE)
    indicationDescription.Text = Cells(i, Range("indication_description").Column).value
    xmlIndicationNode.appendChild indicationDescription
    
    ' Transaction list
    Dim reportTransactionListNode As MSXML2.IXMLDOMElement
    ''Set reportTransactionListNode = xmlDom.createNode(1, "transaction_list")
    Set reportTransactionListNode = xmlDom.createNode(1, "transaction_list", XML_NAMESPACE_VALUE)
    xmlReportNode.appendChild reportTransactionListNode
    
    ' Transaction
    Dim startRow As Integer
    Dim startColumn As Integer
    Dim prevTrnId As String
    
    startColumn = 42
    prevTrnId = "None"
    numberInReport = -1
    Do While Not IsEmpty(Cells(i, 2))
        If (Cells(i, 2) <> prevTrnId) Then
            numberInReport = numberInReport + 1
            Cells(i, Range("number_in_report").Column).value = numberInReport
            Cells(i, Range("transaction_or_activity").Column).value = "T"
            startRow = i
            ''Set reportTransactionNode = xmlDom.createNode(1, "transaction", XML_NAMESPACE_VALUE)
            ''reportTransactionListNode.appendChild reportTransactionNode

            createTransaction reportTransactionListNode, xmlDom, startRow, startColumn
        End If
        prevTrnId = Cells(i, 2)
        i = i + 1
    Loop
    
    i = firstRow
    
    Set reportAttachmentsNode = xmlDom.createNode(1, "attachments", XML_NAMESPACE_VALUE)
    xmlReportNode.appendChild reportAttachmentsNode
    
    Set attachmentAccountStatement = xmlDom.createNode(1, "account_statement", XML_NAMESPACE_VALUE)
    attachmentAccountStatement.Text = Cells(i, Range("addendumns_account_statement").Column).value
    reportAttachmentsNode.appendChild attachmentAccountStatement
    
    Set attachmentKycInformation = xmlDom.createNode(1, "kyc_information", XML_NAMESPACE_VALUE)
    attachmentKycInformation.Text = Cells(i, Range("addendumns_kyc_information").Column).value
    reportAttachmentsNode.appendChild attachmentKycInformation
    
    Set attachmentTransactionTnformation = xmlDom.createNode(1, "transaction_information", XML_NAMESPACE_VALUE)
    attachmentTransactionTnformation.Text = Cells(i, Range("addendumns_transaction_information").Column).value
    reportAttachmentsNode.appendChild attachmentTransactionTnformation
    
    Set attachmentIpAddress = xmlDom.createNode(1, "ip_address", XML_NAMESPACE_VALUE)
    attachmentIpAddress.Text = Cells(i, Range("addendumns_ip_address").Column).value
    reportAttachmentsNode.appendChild attachmentIpAddress
    
    Set reportAttachmentList = xmlDom.createNode(1, "attachment_list", XML_NAMESPACE_VALUE)
    reportAttachmentsNode.appendChild reportAttachmentList
    
    Set attachmentNode = xmlDom.createNode(1, "attachment", XML_NAMESPACE_VALUE)
    attachmentNode.Text = Cells(i, Range("addendumns_attachment").Column).value
    reportAttachmentList.appendChild attachmentNode
    
    ' set the root node namespace attribute
    ' this adds the "http://www.example.com/ns/1.0/" attribute to the main root node
    ' so that it is not running in open space
    ''xmlDom.DocumentElement.setAttribute XML_NAMESPACE_ATTR, XML_NAMESPACE_VALUE

    ' Put your code in here to expand the document to your own requirements
    ' 1. Create an element, eg
    ' Dim xmlElement As MSXML2.IXMLDOMElement
    ' Set xmlElement = xmlDom.createNode(1, "YourElementName")
    ' 2. Assign it a value
    ' xmlElement.Text = "Hello XML World"
    ' 3. Now append it to the root node
    ' xmlRootNode.appendChild xmlElement
    ' now save the data to the specified path on disk
    'Call validateXDoc(xmlDom)
    Set objErr = xmlDom.Validate()
    If objErr.ErrorCode = 0 Then
        Debug.Print "No errors found"
    Else
        MsgBox ("Validation Error: " & objErr.ErrorCode & "; " & objErr.reason)
    End If
    
    xmlDom.Save (Sheets("Parameters").Cells(Range("ResultFilePath").row, Range("ResultFilePath").Column).value & Sheets("Parameters").Cells(Range("ResultFileName").row, Range("ResultFileName").Column).value)
    'GenerateXML = xmlRootNode.ChildNodes.Length  ' return number of direct child nodes off the root
End Sub
Sub createTransaction(ByRef reportTransactionListNode As MSXML2.IXMLDOMElement, ByRef xmlDom As MSXML2.DOMDocument60, i As Integer, startColumn As Integer)
    ''xmlDom.createNode(1, "transaction_list", XML_NAMESPACE_VALUE)
    ''Set reportTransactionNode = xmlDom.createNode(1, "transaction")
    Set reportTransactionNode = xmlDom.createNode(1, "transaction", XML_NAMESPACE_VALUE)
    reportTransactionListNode.appendChild reportTransactionNode
    
    ''Set transactionNumberInReportNode = xmlDom.createNode(1, "number_in_report")
    Set transactionNumberInReportNode = xmlDom.createNode(1, "number_in_report", XML_NAMESPACE_VALUE)
    transactionNumberInReportNode.Text = Cells(i, Range("number_in_report").Column).value
    reportTransactionNode.appendChild transactionNumberInReportNode

    Set transactionTransactionOrActivityNode = xmlDom.createNode(1, "transaction_or_activity", XML_NAMESPACE_VALUE)
    transactionTransactionOrActivityNode.Text = Cells(i, Range("transaction_or_activity").Column).value
    reportTransactionNode.appendChild transactionTransactionOrActivityNode

    Set transactionTransactionPlaceTypeNode = xmlDom.createNode(1, "transaction_place_type", XML_NAMESPACE_VALUE)
    transactionTransactionPlaceTypeNode.Text = Cells(i, Range("transaction_place_type").Column).value
    reportTransactionNode.appendChild transactionTransactionPlaceTypeNode

    Set transactionTransactionPlaceNode = xmlDom.createNode(1, "transaction_place", XML_NAMESPACE_VALUE)
    reportTransactionNode.appendChild transactionTransactionPlaceNode

    If Not IsEmpty(Cells(i, Range("institution_swift").Column).value) Then
        Set institutionSwiftNode = xmlDom.createNode(1, "institution_swift", XML_NAMESPACE_VALUE)
        institutionSwiftNode.Text = Cells(i, Range("institution_swift").Column).value
        transactionTransactionPlaceNode.appendChild institutionSwiftNode
    Else
        Set institutionOtherNode = xmlDom.createNode(1, "institution_other", XML_NAMESPACE_VALUE)
        transactionTransactionPlaceNode.appendChild institutionOtherNode

        Set institutionRegistrationCountryNode = xmlDom.createNode(1, "registration_country", XML_NAMESPACE_VALUE)
        institutionRegistrationCountryNode.Text = Cells(i, Range("registration_country").Column).value
        institutionOtherNode.appendChild institutionRegistrationCountryNode

        Set institutionRegistrationNumberNode = xmlDom.createNode(1, "registration_number", XML_NAMESPACE_VALUE)
        institutionRegistrationNumberNode.Text = Cells(i, Range("registration_number").Column).value
        institutionOtherNode.appendChild institutionRegistrationNumberNode
    End If

    Set transactionTransactionStatus = xmlDom.createNode(1, "transaction_status", XML_NAMESPACE_VALUE)
    transactionTransactionStatus.Text = Cells(i, Range("transaction_status").Column).value
    reportTransactionNode.appendChild transactionTransactionStatus

    Set transactionTransactionDate = xmlDom.createNode(1, "transaction_date", XML_NAMESPACE_VALUE)
    transactionTransactionDate.Text = Format(Cells(i, Range("transaction_date").Column).value, "yyyy-mm-dd")
    reportTransactionNode.appendChild transactionTransactionDate


    If Not Cells(i, Range("transaction_end_date").Column) Is Nothing Then
        If Not IsEmpty(Cells(i, Range("transaction_end_date").Column).Text) And Cells(i, Range("transaction_end_date").Column).Text <> "" Then
            Set transactionTransactionEndDate = xmlDom.createNode(1, "transaction_end_date", XML_NAMESPACE_VALUE)
            transactionTransactionEndDate.Text = Format(Cells(i, Range("transaction_end_date").Column).value, "yyyy-mm-dd")
            reportTransactionNode.appendChild transactionTransactionEndDate
        End If
    End If

    Set transactionTransactionTypeCode = xmlDom.createNode(1, "transaction_type_code", XML_NAMESPACE_VALUE)
    transactionTransactionTypeCode.Text = Cells(i, Range("transaction_type_code").Column).value
    reportTransactionNode.appendChild transactionTransactionTypeCode

    Set transactionReportedSrs = xmlDom.createNode(1, "reported_srs", XML_NAMESPACE_VALUE)
    transactionReportedSrs.Text = Cells(i, Range("reported_srs").Column).value
    reportTransactionNode.appendChild transactionReportedSrs

    Set transactionTransactionCurrency = xmlDom.createNode(1, "transaction_currency", XML_NAMESPACE_VALUE)
    transactionTransactionCurrency.Text = Cells(i, Range("transaction_currency").Column).value
    reportTransactionNode.appendChild transactionTransactionCurrency

    Set transactionTransactionAmount = xmlDom.createNode(1, "transaction_amount", XML_NAMESPACE_VALUE)
    transactionTransactionAmount.Text = Cells(i, Range("transaction_amount").Column).value
    reportTransactionNode.appendChild transactionTransactionAmount

' Sender list
    Dim transactionSenderParticipantListNode As MSXML2.IXMLDOMElement
    Set transactionSenderParticipantListNode = xmlDom.createNode(1, "sender_participant", XML_NAMESPACE_VALUE)
    reportTransactionNode.appendChild transactionSenderParticipantListNode

' Sender
    Dim startRow As Integer
    'Dim startColumn As Integer
    startRow = i
    startColumn = Range("sutitajs_is_my_client").Column
    createSender transactionSenderParticipantListNode, xmlDom, startRow, startColumn
' Signatory
    Set transactionSignatoryList = xmlDom.createNode(1, "signatory_list", XML_NAMESPACE_VALUE)
    transactionSenderParticipantListNode.appendChild transactionSignatoryList
    
    doLoop = True
    j = i
    Do While doLoop
        If (Cells(j, Range("sutitajs_pilnvarota_jp_name").Column).value <> "" Or Cells(j, Range("sutitajs_pilnvarota_fp_name").Column).value <> "") Then
            Set transactionSignatory = xmlDom.createNode(1, "signatory", XML_NAMESPACE_VALUE)
            transactionSignatoryList.appendChild transactionSignatory
    
            If (Cells(j, Range("sutitajs_pilnvarota_jp_name").Column).value <> "") Then
' Signatory business person
                Dim participantLegalPerson As MSXML2.IXMLDOMElement
                Set participantLegalPerson = xmlDom.createNode(1, "legal_person", XML_NAMESPACE_VALUE)
                transactionSignatory.appendChild participantLegalPerson
    
                'Dim startRow As Integer
                'Dim startColumn As Integer
                startRow = j
                startColumn = Range("sutitajs_pilnvarota_jp_name").Column
                createBusiness participantLegalPerson, xmlDom, startRow, startColumn
            Else
' Signatory private person
                Dim participantIndividual As MSXML2.IXMLDOMElement
                Set participantIndividual = xmlDom.createNode(1, "individual", XML_NAMESPACE_VALUE)
                transactionSignatory.appendChild participantIndividual
    
                startRow = j
                startColumn = Range("sutitajs_pilnvarota_fp_name").Column
                createPrivate participantIndividual, xmlDom, startRow, startColumn
            End If
        End If
        j = j + 1
        doLoop = (Cells(j, 2).value = Cells(j - 1, 2).value)
    Loop
    
' Ubo
    Set transactionUboList = xmlDom.createNode(1, "ubo_list", XML_NAMESPACE_VALUE)
    transactionSenderParticipantListNode.appendChild transactionUboList
    
    doLoop = True
    j = i
    Do While doLoop
        If (Cells(j, Range("sutitajs_plg_name").Column).value <> "") Then
            Dim transactionUbo As MSXML2.IXMLDOMElement
            Set transactionUbo = xmlDom.createNode(1, "ubo", XML_NAMESPACE_VALUE)
            transactionUboList.appendChild transactionUbo
' Ubo private person
            Set uboUboType = xmlDom.createNode(1, "ubo_type", XML_NAMESPACE_VALUE)
            uboUboType.Text = Cells(i, Range("sutitajs_plg_ubo_type").Column).value
            transactionUbo.appendChild uboUboType

            startRow = j
            startColumn = Range("sutitajs_plg_name").Column
            createPrivate transactionUbo, xmlDom, startRow, startColumn
        End If
        j = j + 1
        doLoop = (Cells(j, 2).value = Cells(j - 1, 2).value)
    Loop
' Pep
    Set transactionPepList = xmlDom.createNode(1, "pep_list", XML_NAMESPACE_VALUE)
    transactionSenderParticipantListNode.appendChild transactionPepList
    
    Dim transactionPep As MSXML2.IXMLDOMElement
    
    doLoop = True
    j = i
    Do While doLoop
        If (Cells(j, Range("sutitajs_pep_name").Column).value <> "") Then
            Set transactionPep = xmlDom.createNode(1, "pep", XML_NAMESPACE_VALUE)
            transactionPepList.appendChild transactionPep
' Pep private person
            Set pepPepType = xmlDom.createNode(1, "pep_type", XML_NAMESPACE_VALUE)
            pepPepType.Text = Cells(j, Range("sutitajs_pep_pep_type").Column).value
            transactionPep.appendChild pepPepType

            startRow = j
            startColumn = Range("sutitajs_pep_name").Column
            createPrivate transactionPep, xmlDom, startRow, startColumn
        End If
        j = j + 1
        doLoop = (Cells(j, 2).value = Cells(j - 1, 2).value)
    Loop

' Related person
    Set transactionRelatedList = xmlDom.createNode(1, "related_list", XML_NAMESPACE_VALUE)
    transactionSenderParticipantListNode.appendChild transactionRelatedList
    
    Dim transactionRelated As MSXML2.IXMLDOMElement
    doLoop = True
    j = i
    Do While doLoop
        If (Cells(j, Range("sutitajs_saistpers_jp_name").Column).value <> "" Or Cells(j, Range("sutitajs_saistpers_fp_name").Column).value <> "") Then
            Set transactionRelated = xmlDom.createNode(1, "related", XML_NAMESPACE_VALUE)
            transactionRelatedList.appendChild transactionRelated

            Set relatedGroupType = xmlDom.createNode(1, "related_group_type", XML_NAMESPACE_VALUE)
            relatedGroupType.Text = Cells(j, Range("sutitajs_saistpers_related_group_type").Column).value
            transactionRelated.appendChild relatedGroupType

            Dim transactionIdentification As MSXML2.IXMLDOMElement
            Set transactionIdentification = xmlDom.createNode(1, "related_identification", XML_NAMESPACE_VALUE)
            transactionRelated.appendChild transactionIdentification

            If (Cells(j, Range("sutitajs_saistpers_jp_name").Column).value <> "") Then
' Related business person
                'Dim participantLegalPerson As MSXML2.IXMLDOMElement
                Set participantLegalPerson = xmlDom.createNode(1, "legal_person", XML_NAMESPACE_VALUE)
                transactionIdentification.appendChild participantLegalPerson
    
                'Dim startRow As Integer
                'Dim startColumn As Integer
                startRow = j
                startColumn = Range("sutitajs_saistpers_jp_name").Column
                createBusiness participantLegalPerson, xmlDom, startRow, startColumn
            Else
' Related private person
                ''Dim participantIndividual As MSXML2.IXMLDOMElement
                Set participantIndividual = xmlDom.createNode(1, "individual", XML_NAMESPACE_VALUE)
                transactionIdentification.appendChild participantIndividual
    
                startRow = j
                startColumn = Range("sutitajs_saistpers_fp_name").Column
                createPrivate participantIndividual, xmlDom, startRow, startColumn
            End If
        End If
        j = j + 1
        doLoop = (Cells(j, 2).value = Cells(j - 1, 2).value)
    Loop
' Introducer
    Set transactionIntroducerList = xmlDom.createNode(1, "introducer_list", XML_NAMESPACE_VALUE)
    transactionSenderParticipantListNode.appendChild transactionIntroducerList
    
    Dim transactionIntroducer As MSXML2.IXMLDOMElement
    doLoop = True
    j = i
    Do While doLoop
        If (Cells(j, Range("sutitajs_piesaistitajs_jp_name").Column).value <> "" Or Cells(j, Range("sutitajs_piesaistitajs_fp_name").Column).value <> "") Then
            Set transactionIntroducer = xmlDom.createNode(1, "introducer", XML_NAMESPACE_VALUE)
            transactionIntroducerList.appendChild transactionIntroducer

            ''Set introducerIsOutsorced = xmlDom.createNode(1, "is_outsorced")
            ''introducerIsOutsorced.Text = Cells(i, 176).Value
            ''transactionIntroducer.appendChild introducerIsOutsorced

            ''Dim introducerIdentification As MSXML2.IXMLDOMElement
            ''Set introducerIdentification = xmlDom.createNode(1, "introducer_identification")
            ''transactionIntroducer.appendChild introducerIdentification

            If (Cells(j, Range("sutitajs_piesaistitajs_jp_name").Column).value <> "") Then
' Introducer business person
                ''Dim participantLegalPerson As MSXML2.IXMLDOMElement
                Set participantLegalPerson = xmlDom.createNode(1, "legal_person", XML_NAMESPACE_VALUE)
                transactionIntroducer.appendChild participantLegalPerson
    
                'Dim startRow As Integer
                'Dim startColumn As Integer
                startRow = j
                startColumn = Range("sutitajs_piesaistitajs_jp_name").Column
                createBusiness participantLegalPerson, xmlDom, startRow, startColumn
            Else
' Introducer private person
                ''Dim participantIndividual As MSXML2.IXMLDOMElement
                Set participantIndividual = xmlDom.createNode(1, "individual", XML_NAMESPACE_VALUE)
                transactionIntroducer.appendChild participantIndividual
    
                startRow = j
                startColumn = Range("sutitajs_piesaistitajs_fp_name").Column
                createPrivate participantIndividual, xmlDom, startRow, startColumn
            End If
        End If
        j = j + 1
        doLoop = (Cells(j, 2).value = Cells(j - 1, 2).value)
    Loop
    
' Owner
    Set transactionOwnerList = xmlDom.createNode(1, "owner_list", XML_NAMESPACE_VALUE)
    transactionSenderParticipantListNode.appendChild transactionOwnerList
    
    Dim transactionOwner As MSXML2.IXMLDOMElement
    doLoop = True
    j = i
    Do While doLoop
        If (Cells(j, Range("sutitajs_ipasnieks_jp_name").Column).value <> "" Or Cells(j, Range("sutitajs_ipasnieks_fp_name").Column).value <> "") Then
            Set transactionOwner = xmlDom.createNode(1, "owner", XML_NAMESPACE_VALUE)
            transactionOwnerList.appendChild transactionOwner
            ''If (Cells(j, Range("sutitajs_ipasnieks_appointing_date").Column).Value <> "") Then
            Set ownerAppointingDate = xmlDom.createNode(1, "appointing_date", XML_NAMESPACE_VALUE)
            ownerAppointingDate.Text = Format(Cells(j, Range("sutitajs_ipasnieks_appointing_date").Column).value, "yyyy-mm-dd")
            transactionOwner.appendChild ownerAppointingDate
            ''End If

            Set ownerShares = xmlDom.createNode(1, "shares", XML_NAMESPACE_VALUE)
            ownerShares.Text = Cells(j, Range("sutitajs_ipasnieks_shares").Column).value
            transactionOwner.appendChild ownerShares

            Dim ownerIdentification As MSXML2.IXMLDOMElement
            Set ownerdentification = xmlDom.createNode(1, "owner_identification", XML_NAMESPACE_VALUE)
            transactionOwner.appendChild ownerdentification
            If (Cells(j, Range("sutitajs_ipasnieks_jp_name").Column).value <> "") Then
' Owner business person
                ''Dim participantLegalPerson As MSXML2.IXMLDOMElement
                Set participantLegalPerson = xmlDom.createNode(1, "legal_person", XML_NAMESPACE_VALUE)
                ownerdentification.appendChild participantLegalPerson
    
                'Dim startRow As Integer
                'Dim startColumn As Integer
                startRow = j
                startColumn = Range("sutitajs_ipasnieks_jp_name").Column
                createBusiness participantLegalPerson, xmlDom, startRow, startColumn
            Else
' Owner private person
                ''Dim participantIndividual As MSXML2.IXMLDOMElement
                Set participantIndividual = xmlDom.createNode(1, "individual", XML_NAMESPACE_VALUE)
                ownerdentification.appendChild participantIndividual
    
                startRow = j
                startColumn = Range("sutitajs_ipasnieks_fp_name").Column
                createPrivate participantIndividual, xmlDom, startRow, startColumn
            End If
        End If
        j = j + 1
        doLoop = (Cells(j, 2).value = Cells(j - 1, 2).value)
    Loop
    
    
    
    ' Receiver list
    Dim transactionReceiverParticipantListNode As MSXML2.IXMLDOMElement
    Set transactionReceiverParticipantListNode = xmlDom.createNode(1, "receiver_participant", XML_NAMESPACE_VALUE)
    reportTransactionNode.appendChild transactionReceiverParticipantListNode

' Receiver
    ''Dim startRow As Integer
    'Dim startColumn As Integer
    startRow = i
    startColumn = Range("sanemejs_is_my_client").Column
    createReceiver transactionReceiverParticipantListNode, xmlDom, startRow, startColumn
' Signatory
    Set transactionSignatoryList = xmlDom.createNode(1, "signatory_list", XML_NAMESPACE_VALUE)
    transactionReceiverParticipantListNode.appendChild transactionSignatoryList
    
    doLoop = True
    j = i
    Do While doLoop
        If (Cells(j, Range("sanemejs_pilnvarota_jp_name").Column).value <> "" Or Cells(j, Range("sanemejs_pilnvarota_fp_name").Column).value <> "") Then
            Set transactionSignatory = xmlDom.createNode(1, "signatory", XML_NAMESPACE_VALUE)
            transactionSignatoryList.appendChild transactionSignatory
    
            If (Cells(j, Range("sanemejs_pilnvarota_jp_name").Column).value <> "") Then
' Signatory business person
                ''Dim participantLegalPerson As MSXML2.IXMLDOMElement
                Set participantLegalPerson = xmlDom.createNode(1, "legal_person", XML_NAMESPACE_VALUE)
                transactionSignatory.appendChild participantLegalPerson
    
                'Dim startRow As Integer
                'Dim startColumn As Integer
                startRow = j
                startColumn = Range("sanemejs_pilnvarota_jp_name").Column
                createBusiness participantLegalPerson, xmlDom, startRow, startColumn
            Else
' Signatory private person
                ''Dim participantIndividual As MSXML2.IXMLDOMElement
                Set participantIndividual = xmlDom.createNode(1, "individual", XML_NAMESPACE_VALUE)
                transactionSignatory.appendChild participantIndividual
    
                startRow = j
                startColumn = Range("sanemejs_pilnvarota_fp_name").Column
                createPrivate participantIndividual, xmlDom, startRow, startColumn
            End If
        End If
        j = j + 1
        doLoop = (Cells(j, 2).value = Cells(j - 1, 2).value)
    Loop
    
' Ubo
    Set transactionUboList = xmlDom.createNode(1, "ubo_list", XML_NAMESPACE_VALUE)
    transactionReceiverParticipantListNode.appendChild transactionUboList
    
    doLoop = True
    j = i
    Do While doLoop
        If (Cells(j, Range("sanemejs_plg_name").Column).value <> "") Then
            ''Dim transactionUbo As MSXML2.IXMLDOMElement
            Set transactionUbo = xmlDom.createNode(1, "ubo", XML_NAMESPACE_VALUE)
            transactionUboList.appendChild transactionUbo
    
' Ubo private person
            Set uboUboType = xmlDom.createNode(1, "ubo_type", XML_NAMESPACE_VALUE)
            uboUboType.Text = Cells(j, Range("sanemejs_plg_ubo_type").Column).value
            transactionUbo.appendChild uboUboType

            startRow = j
            startColumn = Range("sanemejs_plg_name").Column
            createPrivate transactionUbo, xmlDom, startRow, startColumn
        End If
        j = j + 1
        doLoop = (Cells(j, 2).value = Cells(j - 1, 2).value)
    Loop
    
' Pep
    Set transactionPepList = xmlDom.createNode(1, "pep_list", XML_NAMESPACE_VALUE)
    transactionReceiverParticipantListNode.appendChild transactionPepList
    
    doLoop = True
    j = i
    Do While doLoop
        If (Cells(j, Range("sanemejs_pep_name").Column).value <> "") Then
            ''Dim transactionPep As MSXML2.IXMLDOMElement
            Set transactionPep = xmlDom.createNode(1, "pep", XML_NAMESPACE_VALUE)
            transactionPepList.appendChild transactionPep
' Pep private person
            Set pepPepType = xmlDom.createNode(1, "pep_type", XML_NAMESPACE_VALUE)
            pepPepType.Text = Cells(j, Range("sanemejs_pep_pep_type").Column).value
            transactionPep.appendChild pepPepType

            startRow = j
            startColumn = Range("sanemejs_pep_name").Column
            createPrivate transactionPep, xmlDom, startRow, startColumn
        End If
        j = j + 1
        doLoop = (Cells(j, 2).value = Cells(j - 1, 2).value)
    Loop

' Related person
    Set transactionRelatedList = xmlDom.createNode(1, "related_list", XML_NAMESPACE_VALUE)
    transactionReceiverParticipantListNode.appendChild transactionRelatedList
    
    doLoop = True
    j = i
    Do While doLoop
        If (Cells(j, Range("sanemejs_saistpers_jp_name").Column).value <> "" Or Cells(j, Range("sanemejs_saistpers_fp_name").Column).value <> "") Then
            ''Dim transactionRelated As MSXML2.IXMLDOMElement
            Set transactionRelated = xmlDom.createNode(1, "related", XML_NAMESPACE_VALUE)
            transactionRelatedList.appendChild transactionRelated

            Set relatedGroupType = xmlDom.createNode(1, "related_group_type", XML_NAMESPACE_VALUE)
            relatedGroupType.Text = Cells(j, Range("sanemejs_saistpers_related_group_type").Column).value
            transactionRelated.appendChild relatedGroupType

            ''Dim transactionIdentification As MSXML2.IXMLDOMElement
            Set transactionIdentification = xmlDom.createNode(1, "related_identification", XML_NAMESPACE_VALUE)
            transactionRelated.appendChild transactionIdentification

            If (Cells(j, Range("sanemejs_saistpers_jp_name").Column).value <> "") Then
' Related business person
                'Dim participantLegalPerson As MSXML2.IXMLDOMElement
                Set participantLegalPerson = xmlDom.createNode(1, "legal_person", XML_NAMESPACE_VALUE)
                transactionIdentification.appendChild participantLegalPerson
    
                'Dim startRow As Integer
                'Dim startColumn As Integer
                startRow = j
                startColumn = Range("sanemejs_saistpers_jp_name").Column
                createBusiness participantLegalPerson, xmlDom, startRow, startColumn
            Else
' Related private person
                ''Dim participantIndividual As MSXML2.IXMLDOMElement
                Set participantIndividual = xmlDom.createNode(1, "individual", XML_NAMESPACE_VALUE)
                transactionIdentification.appendChild participantIndividual
    
                startRow = j
                startColumn = Range("sanemejs_saistpers_fp_name").Column
                createPrivate participantIndividual, xmlDom, startRow, startColumn
            End If
        End If
        j = j + 1
        doLoop = (Cells(j, 2).value = Cells(j - 1, 2).value)
    Loop
    
' Introducer
    Set transactionIntroducerList = xmlDom.createNode(1, "introducer_list", XML_NAMESPACE_VALUE)
    transactionReceiverParticipantListNode.appendChild transactionIntroducerList
    
    doLoop = True
    j = i
    Do While doLoop
        If (Cells(j, Range("sanemejs_piesaistitajs_jp_name").Column).value <> "" Or Cells(j, Range("sanemejs_piesaistitajs_fp_name").Column).value <> "") Then
            ''Dim transactionIntroducer As MSXML2.IXMLDOMElement
            Set transactionIntroducer = xmlDom.createNode(1, "introducer", XML_NAMESPACE_VALUE)
            transactionIntroducerList.appendChild transactionIntroducer

            ''Set introducerIsOutsorced = xmlDom.createNode(1, "is_outsorced")
            ''introducerIsOutsorced.Text = Cells(i, 176).Value
            ''transactionIntroducer.appendChild introducerIsOutsorced

            ''Dim introducerIdentification As MSXML2.IXMLDOMElement
            ''Set introducerIdentification = xmlDom.createNode(1, "introducer_identification")
            ''transactionIntroducer.appendChild introducerIdentification

            If (Cells(j, Range("sanemejs_piesaistitajs_jp_name").Column).value <> "") Then
' Introducer business person
                ''Dim participantLegalPerson As MSXML2.IXMLDOMElement
                Set participantLegalPerson = xmlDom.createNode(1, "legal_person", XML_NAMESPACE_VALUE)
                transactionIntroducer.appendChild participantLegalPerson
    
                'Dim startRow As Integer
                'Dim startColumn As Integer
                startRow = j
                startColumn = Range("sanemejs_piesaistitajs_jp_name").Column
                createBusiness participantLegalPerson, xmlDom, startRow, startColumn
            Else
' Introducer private person
                ''Dim participantIndividual As MSXML2.IXMLDOMElement
                Set participantIndividual = xmlDom.createNode(1, "individual", XML_NAMESPACE_VALUE)
                transactionIntroducer.appendChild participantIndividual
    
                startRow = j
                startColumn = Range("sanemejs_piesaistitajs_fp_name").Column
                createPrivate participantIndividual, xmlDom, startRow, startColumn
            End If
        End If
        j = j + 1
        doLoop = (Cells(j, 2).value = Cells(j - 1, 2).value)
    Loop
' Owner
    Set transactionOwnerList = xmlDom.createNode(1, "owner_list", XML_NAMESPACE_VALUE)
    transactionReceiverParticipantListNode.appendChild transactionOwnerList
    
    doLoop = True
    j = i
    Do While doLoop
        If (Cells(j, Range("sanemejs_ipasnieks_jp_name").Column).value <> "" Or Cells(j, Range("sanemejs_ipasnieks_fp_name").Column).value <> "") Then
            ''Dim transactionOwner As MSXML2.IXMLDOMElement
            Set transactionOwner = xmlDom.createNode(1, "owner", XML_NAMESPACE_VALUE)
            transactionOwnerList.appendChild transactionOwner

            If (Cells(j, Range("sanemejs_ipasnieks_appointing_date").Column).value <> "") Then
                Set ownerAppointingDate = xmlDom.createNode(1, "appointing_date", XML_NAMESPACE_VALUE)
                ownerAppointingDate.Text = Format(Cells(j, Range("sanemejs_ipasnieks_appointing_date").Column).value, "yyyy-mm-dd")
                transactionOwner.appendChild ownerAppointingDate
            End If
            Set ownerShares = xmlDom.createNode(1, "shares", XML_NAMESPACE_VALUE)
            ownerShares.Text = Cells(j, Range("sanemejs_ipasnieks_shares").Column).value
            transactionOwner.appendChild ownerShares

            ''Dim ownerIdentification As MSXML2.IXMLDOMElement
            Set ownerdentification = xmlDom.createNode(1, "owner_identification", XML_NAMESPACE_VALUE)
            transactionOwner.appendChild ownerdentification
            If (Cells(j, Range("sanemejs_ipasnieks_jp_name").Column).value <> "") Then
' Owner business person
                ''Dim participantLegalPerson As MSXML2.IXMLDOMElement
                Set participantLegalPerson = xmlDom.createNode(1, "legal_person", XML_NAMESPACE_VALUE)
                ownerdentification.appendChild participantLegalPerson
    
                'Dim startRow As Integer
                'Dim startColumn As Integer
                startRow = j
                startColumn = Range("sanemejs_ipasnieks_jp_name").Column
                createBusiness participantLegalPerson, xmlDom, startRow, startColumn
            Else
' Owner private person
                ''Dim participantIndividual As MSXML2.IXMLDOMElement
                Set participantIndividual = xmlDom.createNode(1, "individual", XML_NAMESPACE_VALUE)
                ownerdentification.appendChild participantIndividual
    
                startRow = j
                startColumn = Range("sanemejs_ipasnieks_fp_name").Column
                createPrivate participantIndividual, xmlDom, startRow, startColumn
            End If
        End If
        j = j + 1
        doLoop = (Cells(j, 2).value = Cells(j - 1, 2).value)
    Loop

If (Cells(i, Range("aktivpers_swift_code").Column).value <> "") Then
    ' Activity person list
    Dim transactionActivityParticipantListNode As MSXML2.IXMLDOMElement
    Set transactionActivityParticipantListNode = xmlDom.createNode(1, "activity_person_list", XML_NAMESPACE_VALUE)
    reportTransactionNode.appendChild transactionActivityParticipantListNode

    
' Activity person
    ''Dim startRow As Integer
    'Dim startColumn As Integer
    startRow = i
    startColumn = Range("aktivpers_role").Column
    createActivity transactionActivityParticipantListNode, xmlDom, startRow, startColumn
' Signatory
    Set transactionSignatoryList = xmlDom.createNode(1, "signatory_list", XML_NAMESPACE_VALUE)
    transactionActivityParticipantListNode.appendChild transactionSignatoryList
    
    doLoop = True
    j = i
    Do While doLoop
        If (Cells(j, Range("aktivpers_pilnvarota_jp_name").Column).value <> "" Or Cells(j, Range("aktivpers_pilnvarota_fp_name").Column).value <> "") Then
            Set transactionSignatory = xmlDom.createNode(1, "signatory", XML_NAMESPACE_VALUE)
            transactionSignatoryList.appendChild transactionSignatory
    
            If (Cells(j, Range("aktivpers_pilnvarota_jp_name").Column).value <> "") Then
' Signatory business person
                ''Dim participantLegalPerson As MSXML2.IXMLDOMElement
                Set participantLegalPerson = xmlDom.createNode(1, "legal_person", XML_NAMESPACE_VALUE)
                transactionSignatory.appendChild participantLegalPerson
    
                'Dim startRow As Integer
                'Dim startColumn As Integer
                startRow = j
                startColumn = Range("aktivpers_pilnvarota_jp_name").Column
                createBusiness participantLegalPerson, xmlDom, startRow, startColumn
            Else
' Signatory private person
                ''Dim participantIndividual As MSXML2.IXMLDOMElement
                Set participantIndividual = xmlDom.createNode(1, "individual", XML_NAMESPACE_VALUE)
                transactionSignatory.appendChild participantIndividual
    
                startRow = j
                startColumn = Range("aktivpers_pilnvarota_fp_name").Column
                createPrivate participantIndividual, xmlDom, startRow, startColumn
            End If
    End If
    j = j + 1
    doLoop = (Cells(j, 2).value = Cells(j - 1, 2).value)
    Loop
    
' Ubo
    Set transactionUboList = xmlDom.createNode(1, "ubo_list", XML_NAMESPACE_VALUE)
    transactionActivityParticipantListNode.appendChild transactionUboList
    
    doLoop = True
    j = i
    Do While doLoop
        If (Cells(j, Range("aktivpers_plg_name").Column).value <> "") Then
            ''Dim transactionUbo As MSXML2.IXMLDOMElement
            Set transactionUbo = xmlDom.createNode(1, "ubo", XML_NAMESPACE_VALUE)
            transactionUboList.appendChild transactionUbo
    
' Ubo private person
            Set uboUboType = xmlDom.createNode(1, "ubo_type", XML_NAMESPACE_VALUE)
            uboUboType.Text = Cells(i, Range("aktivpers_plg_ubo_type").Column).value
            transactionUbo.appendChild uboUboType

            startRow = j
            startColumn = Range("aktivpers_plg_name").Column
            createPrivate transactionUbo, xmlDom, startRow, startColumn
        End If
        j = j + 1
        doLoop = (Cells(j, 2).value = Cells(j - 1, 2).value)
    Loop

' Pep
    Set transactionPepList = xmlDom.createNode(1, "pep_list", XML_NAMESPACE_VALUE)
    transactionActivityParticipantListNode.appendChild transactionPepList
    
    doLoop = True
    j = i
    Do While doLoop
        If (Cells(j, Range("aktivpers_pep_name").Column).value <> "") Then
            ''Dim transactionPep As MSXML2.IXMLDOMElement
            Set transactionPep = xmlDom.createNode(1, "pep", XML_NAMESPACE_VALUE)
            transactionPepList.appendChild transactionPep
' Pep private person
            Set pepPepType = xmlDom.createNode(1, "pep_type", XML_NAMESPACE_VALUE)
            pepPepType.Text = Cells(i, Range("aktivpers_pep_pep_type").Column).value
            transactionPep.appendChild pepPepType

            startRow = j
            startColumn = Range("aktivpers_pep_name").Column
            createPrivate transactionPep, xmlDom, startRow, startColumn
        End If
        j = j + 1
        doLoop = (Cells(j, 2).value = Cells(j - 1, 2).value)
    Loop
    
' Related person
    Set transactionRelatedList = xmlDom.createNode(1, "related_list", XML_NAMESPACE_VALUE)
    transactionActivityParticipantListNode.appendChild transactionRelatedList
    doLoop = True
    j = i
    Do While doLoop
        If (Cells(j, Range("aktivpers_saistpers_jp_name").Column).value <> "" Or Cells(j, Range("aktivpers_saistpers_fp_name").Column).value <> "") Then
            ''Dim transactionRelated As MSXML2.IXMLDOMElement
            Set transactionRelated = xmlDom.createNode(1, "related", XML_NAMESPACE_VALUE)
            transactionRelatedList.appendChild transactionRelated

            Set relatedGroupType = xmlDom.createNode(1, "related_group_type", XML_NAMESPACE_VALUE)
            relatedGroupType.Text = Cells(j, Range("aktivpers_saistpers_related_group_type").Column).value
            transactionRelated.appendChild relatedGroupType

            ''Dim transactionIdentification As MSXML2.IXMLDOMElement
            Set transactionIdentification = xmlDom.createNode(1, "related_identification", XML_NAMESPACE_VALUE)
            transactionRelated.appendChild transactionIdentification

            If (Cells(j, Range("aktivpers_saistpers_jp_name").Column).value <> "") Then
' Related business person
                'Dim participantLegalPerson As MSXML2.IXMLDOMElement
                Set participantLegalPerson = xmlDom.createNode(1, "legal_person", XML_NAMESPACE_VALUE)
                transactionIdentification.appendChild participantLegalPerson
    
                'Dim startRow As Integer
                'Dim startColumn As Integer
                startRow = j
                startColumn = Range("aktivpers_saistpers_jp_name").Column
                createBusiness participantLegalPerson, xmlDom, startRow, startColumn
            Else
' Related private person
                ''Dim participantIndividual As MSXML2.IXMLDOMElement
                Set participantIndividual = xmlDom.createNode(1, "individual", XML_NAMESPACE_VALUE)
                transactionIdentification.appendChild participantIndividual
    
                startRow = j
                startColumn = Range("aktivpers_saistpers_fp_name").Column
                createPrivate participantIndividual, xmlDom, startRow, startColumn
            End If
        End If
        j = j + 1
        doLoop = (Cells(j, 2).value = Cells(j - 1, 2).value)
    Loop

' Introducer
    Set transactionIntroducerList = xmlDom.createNode(1, "introducer_list", XML_NAMESPACE_VALUE)
    transactionActivityParticipantListNode.appendChild transactionIntroducerList
    
    doLoop = True
    j = i
    Do While doLoop
        If (Cells(j, Range("aktivpers_piesaistitajs_jp_name").Column).value <> "" Or Cells(j, Range("aktivpers_piesaistitajs_fp_name").Column).value <> "") Then
            ''Dim transactionIntroducer As MSXML2.IXMLDOMElement
            Set transactionIntroducer = xmlDom.createNode(1, "introducer", XML_NAMESPACE_VALUE)
            transactionIntroducerList.appendChild transactionIntroducer

            ''Set introducerIsOutsorced = xmlDom.createNode(1, "is_outsorced", XML_NAMESPACE_VALUE)
            ''introducerIsOutsorced.Text = Cells(i, 176).Value
            ''transactionIntroducer.appendChild introducerIsOutsorced

            ''Dim introducerIdentification As MSXML2.IXMLDOMElement
            ''Set introducerIdentification = xmlDom.createNode(1, "introducer_identification", XML_NAMESPACE_VALUE)
            ''transactionIntroducer.appendChild introducerIdentification

            If (Cells(j, Range("aktivpers_piesaistitajs_jp_name").Column).value <> "") Then
' Introducer business person
                ''Dim participantLegalPerson As MSXML2.IXMLDOMElement
                Set participantLegalPerson = xmlDom.createNode(1, "legal_person", XML_NAMESPACE_VALUE)
                transactionIntroducer.appendChild participantLegalPerson
    
                'Dim startRow As Integer
                'Dim startColumn As Integer
                startRow = j
                startColumn = Range("aktivpers_piesaistitajs_jp_name").Column
                createBusiness participantLegalPerson, xmlDom, startRow, startColumn
            Else
' Introducer private person
                ''Dim participantIndividual As MSXML2.IXMLDOMElement
                Set participantIndividual = xmlDom.createNode(1, "individual", XML_NAMESPACE_VALUE)
                transactionIntroducer.appendChild participantIndividual
    
                startRow = j
                startColumn = Range("aktivpers_piesaistitajs_fp_name").Column
                createPrivate participantIndividual, xmlDom, startRow, startColumn
            End If
        End If
        j = j + 1
        doLoop = (Cells(j, 2).value = Cells(j - 1, 2).value)
    Loop

' Owner
    Set transactionOwnerList = xmlDom.createNode(1, "owner_list", XML_NAMESPACE_VALUE)
    transactionActivityParticipantListNode.appendChild transactionOwnerList
    
    doLoop = True
    j = i
    Do While doLoop
        If (Cells(j, Range("aktivpers_ipasnieks_jp_name").Column).value <> "" Or Cells(j, Range("aktivpers_ipasnieks_fp_name").Column).value <> "") Then
            ''Dim transactionOwner As MSXML2.IXMLDOMElement
            Set transactionOwner = xmlDom.createNode(1, "owner", XML_NAMESPACE_VALUE)
            transactionOwnerList.appendChild transactionOwner

            Set ownerAppointingDate = xmlDom.createNode(1, "appointing_date", XML_NAMESPACE_VALUE)
            ownerAppointingDate.Text = Format(Cells(j, Range("aktivpers_ipasnieks_appointing_date").Column).value, "yyyy-mm-dd")
            transactionOwner.appendChild ownerAppointingDate

            Set ownerShares = xmlDom.createNode(1, "shares", XML_NAMESPACE_VALUE)
            ownerShares.Text = Cells(j, Range("aktivpers_ipasnieks_shares").Column).value
            transactionOwner.appendChild ownerShares

            ''Dim ownerIdentification As MSXML2.IXMLDOMElement
            Set ownerdentification = xmlDom.createNode(1, "owner_identification", XML_NAMESPACE_VALUE)
            transactionOwner.appendChild ownerdentification
            If (Cells(j, Range("aktivpers_ipasnieks_jp_name").Column).value <> "") Then
' Owner business person
                ''Dim participantLegalPerson As MSXML2.IXMLDOMElement
                Set participantLegalPerson = xmlDom.createNode(1, "legal_person", XML_NAMESPACE_VALUE)
                ownerdentification.appendChild participantLegalPerson
    
                'Dim startRow As Integer
                'Dim startColumn As Integer
                startRow = j
                startColumn = Range("aktivpers_ipasnieks_jp_name").Column
                createBusiness participantLegalPerson, xmlDom, startRow, startColumn
            Else
' Owner private person
                ''Dim participantIndividual As MSXML2.IXMLDOMElement
                Set participantIndividual = xmlDom.createNode(1, "individual", XML_NAMESPACE_VALUE)
                ownerdentification.appendChild participantIndividual
    
                startRow = j
                startColumn = Range("aktivpers_ipasnieks_fp_name").Column
                createPrivate participantIndividual, xmlDom, startRow, startColumn
            End If
        End If
        j = j + 1
        doLoop = (Cells(j, 2).value = Cells(j - 1, 2).value)
    Loop
End If
End Sub
Sub createReceiver(ByRef transactionSenderParticipantListNode As MSXML2.IXMLDOMElement, ByRef xmlDom As MSXML2.DOMDocument60, i As Integer, startColumn As Integer)

    Set senderNode = xmlDom.createNode(1, "receiver", XML_NAMESPACE_VALUE)
    transactionSenderParticipantListNode.appendChild senderNode
    
    Set senderIsMyClient = xmlDom.createNode(1, "is_my_client", XML_NAMESPACE_VALUE)
    senderIsMyClient.Text = Cells(i, Range("sanemejs_is_my_client").Column).value
    senderNode.appendChild senderIsMyClient
 
    Set senderAccountInfo = xmlDom.createNode(1, "account_info", XML_NAMESPACE_VALUE)
    senderNode.appendChild senderAccountInfo
 
    Set accountSwiftCode = xmlDom.createNode(1, "swift_code", XML_NAMESPACE_VALUE)
    accountSwiftCode.Text = Cells(i, Range("sanemejs_swift_code").Column).value
    senderAccountInfo.appendChild accountSwiftCode
 
    Set accountBankAccount = xmlDom.createNode(1, "bank_account", XML_NAMESPACE_VALUE)
    accountBankAccount.Text = Cells(i, Range("sanemejs_bank_account").Column).value
    senderAccountInfo.appendChild accountBankAccount
 
' Participant info
    Set participantInfo = xmlDom.createNode(1, "participant_info", XML_NAMESPACE_VALUE)
    senderNode.appendChild participantInfo

    If (Cells(i, Range("sanemejs_jp_name").Column).value <> "") Then
' Business person
        Dim participantLegalPerson As MSXML2.IXMLDOMElement
        Set participantLegalPerson = xmlDom.createNode(1, "legal_person", XML_NAMESPACE_VALUE)
        participantInfo.appendChild participantLegalPerson
    
        Set personRelatedWithPep = xmlDom.createNode(1, "related_with_pep", XML_NAMESPACE_VALUE)
        personRelatedWithPep.Text = Cells(i, Range("sanemejs_jp_related_with_pep").Column).value
        participantLegalPerson.appendChild personRelatedWithPep

        Dim startRow As Integer
        'Dim startColumn As Integer
        startRow = i
        startColumn = Range("sanemejs_jp_name").Column
        createBusiness participantLegalPerson, xmlDom, startRow, startColumn
    Else
' Private person
        Dim participantIndividual As MSXML2.IXMLDOMElement
        Set participantIndividual = xmlDom.createNode(1, "individual", XML_NAMESPACE_VALUE)
        participantInfo.appendChild participantIndividual
    
        Set personIndividualIsPep = xmlDom.createNode(1, "is_pep", XML_NAMESPACE_VALUE)
        personIndividualIsPep.Text = Cells(i, Range("sanemejs_is_pep").Column).value
        participantIndividual.appendChild personIndividualIsPep

        Set personRelatedWithPep = xmlDom.createNode(1, "related_with_pep", XML_NAMESPACE_VALUE)
        personRelatedWithPep.Text = Cells(i, Range("sanemejs_fp_related_with_pep").Column).value
        participantIndividual.appendChild personRelatedWithPep

        startRow = i
        startColumn = Range("sanemejs_fp_name").Column
        createPrivate participantIndividual, xmlDom, startRow, startColumn
    End If
    ' Additional info
    Set additionalAccountInfo = xmlDom.createNode(1, "additional_account_info", XML_NAMESPACE_VALUE)
    senderNode.appendChild additionalAccountInfo
    
    Set additionalAccountType = xmlDom.createNode(1, "account_type", XML_NAMESPACE_VALUE)
    additionalAccountType.Text = Cells(i, Range("sanemejs_account_account_type").Column).value
    additionalAccountInfo.appendChild additionalAccountType
    
    Set additionalSubAccount = xmlDom.createNode(1, "subaccount", XML_NAMESPACE_VALUE)
    additionalSubAccount.Text = Cells(i, Range("sanemejs_account_subaccount").Column).value
    additionalAccountInfo.appendChild additionalSubAccount
    
    If Not (IsEmpty(Cells(i, Range("sanemejs_account_account_opened").Column).value)) Then
        Set additionalAccountOpened = xmlDom.createNode(1, "account_opened", XML_NAMESPACE_VALUE)
        additionalAccountOpened.Text = Format(Cells(i, Range("sanemejs_account_account_opened").Column).value, "yyyy-mm-dd")
        additionalAccountInfo.appendChild additionalAccountOpened
    End If
    
    If Not (IsEmpty(Cells(i, Range("sanemejs_account_account_closed").Column).value)) Then
        Set additionalAccountClosed = xmlDom.createNode(1, "account_closed", XML_NAMESPACE_VALUE)
        additionalAccountClosed.Text = Format(Cells(i, Range("sanemejs_account_account_closed").Column).value, "yyyy-mm-dd")
        additionalAccountInfo.appendChild additionalAccountClosed
    End If
    
    Set additionalAccountMainCyy = xmlDom.createNode(1, "account_main_currency", XML_NAMESPACE_VALUE)
    additionalAccountMainCyy.Text = Cells(i, Range("sanemejs_account_account_main_currency").Column).value
    additionalAccountInfo.appendChild additionalAccountMainCyy
    
    Set additionalAccountOpenType = xmlDom.createNode(1, "account_open_type", XML_NAMESPACE_VALUE)
    additionalAccountOpenType.Text = Cells(i, Range("sanemejs_account_account_open_type").Column).value
    additionalAccountInfo.appendChild additionalAccountOpenType
    
    If Not (IsEmpty(Cells(i, Range("sanemejs_account_total_balance").Column).value)) Then
        Set additionalTotalBalance = xmlDom.createNode(1, "total_balance", XML_NAMESPACE_VALUE)
        additionalTotalBalance.Text = Cells(i, Range("sanemejs_account_total_balance").Column).value
        additionalAccountInfo.appendChild additionalTotalBalance
    End If
    
    Set additionalBalanceDescription = xmlDom.createNode(1, "balance_description", XML_NAMESPACE_VALUE)
    additionalBalanceDescription.Text = Cells(i, Range("sanemejs_account_balance_description").Column).value
    additionalAccountInfo.appendChild additionalBalanceDescription
    
    Set senderIsClientHighRisk = xmlDom.createNode(1, "is_client_high_risk", XML_NAMESPACE_VALUE)
    senderIsClientHighRisk.Text = Cells(i, Range("sanemejs_is_client_high_risk").Column).value
    senderNode.appendChild senderIsClientHighRisk
    
    Set senderEconomicalActivityList = xmlDom.createNode(1, "economical_activity_list", XML_NAMESPACE_VALUE)
    senderNode.appendChild senderEconomicalActivityList
    
    Set economicalActivityCode = xmlDom.createNode(1, "activity_code", XML_NAMESPACE_VALUE)
    economicalActivityCode.Text = Cells(i, Range("sanemejs_activity_code").Column).value
    senderEconomicalActivityList.appendChild economicalActivityCode
    
    Set economicalActivityCode2 = xmlDom.createNode(1, "activity_code", XML_NAMESPACE_VALUE)
    economicalActivityCode2.Text = Cells(i, Range("sanemejs_activity_code2").Column).value
    senderEconomicalActivityList.appendChild economicalActivityCode2
    
    Set economicalActivityCode3 = xmlDom.createNode(1, "activity_code", XML_NAMESPACE_VALUE)
    economicalActivityCode3.Text = Cells(i, Range("sanemejs_activity_code3").Column).value
    senderEconomicalActivityList.appendChild economicalActivityCode3
    
    Set senderEconomicalActivityDescription = xmlDom.createNode(1, "economical_activity_description", XML_NAMESPACE_VALUE)
    senderEconomicalActivityDescription.Text = Cells(i, Range("sanemejs_economical_activity_description").Column).value
    senderNode.appendChild senderEconomicalActivityDescription
    
    Set senderIsConnectedWithLv = xmlDom.createNode(1, "is_connected_with_lv", XML_NAMESPACE_VALUE)
    senderIsConnectedWithLv.Text = Cells(i, Range("sanemejs_is_connected_with_lv").Column).value
    senderNode.appendChild senderIsConnectedWithLv
    
    Set senderInitialIdentificationCountry = xmlDom.createNode(1, "initial_identification_country", XML_NAMESPACE_VALUE)
    senderInitialIdentificationCountry.Text = Cells(i, Range("sanemejs_initial_identification_country").Column).value
    senderNode.appendChild senderInitialIdentificationCountry
    
    Set senderIsOutsourced = xmlDom.createNode(1, "is_outsourced", XML_NAMESPACE_VALUE)
    senderIsOutsourced.Text = Cells(i, Range("sanemejs_piesaistitajs_is_outsourced").Column).value
    senderNode.appendChild senderIsOutsourced
    
End Sub
Sub createSender(ByRef transactionReceiverParticipantListNode As MSXML2.IXMLDOMElement, ByRef xmlDom As MSXML2.DOMDocument60, i As Integer, startColumn As Integer)

    Set senderNode = xmlDom.createNode(1, "sender", XML_NAMESPACE_VALUE)
    transactionReceiverParticipantListNode.appendChild senderNode
    
    Set senderIsMyClient = xmlDom.createNode(1, "is_my_client", XML_NAMESPACE_VALUE)
    senderIsMyClient.Text = Cells(i, Range("sutitajs_is_my_client").Column).value
    senderNode.appendChild senderIsMyClient
 
    Set senderAccountInfo = xmlDom.createNode(1, "account_info", XML_NAMESPACE_VALUE)
    senderNode.appendChild senderAccountInfo
 
    Set accountSwiftCode = xmlDom.createNode(1, "swift_code", XML_NAMESPACE_VALUE)
    accountSwiftCode.Text = Cells(i, Range("sutitajs_swift_code").Column).value
    senderAccountInfo.appendChild accountSwiftCode
 
    Set accountBankAccount = xmlDom.createNode(1, "bank_account", XML_NAMESPACE_VALUE)
    accountBankAccount.Text = Cells(i, Range("sutitajs_bank_account").Column).value
    senderAccountInfo.appendChild accountBankAccount
 
' Participant info
    Set participantInfo = xmlDom.createNode(1, "participant_info", XML_NAMESPACE_VALUE)
    senderNode.appendChild participantInfo

    If (Cells(i, Range("sutitajs_jp_name").Column).value <> "") Then
' Business person
        Dim participantLegalPerson As MSXML2.IXMLDOMElement
        Set participantLegalPerson = xmlDom.createNode(1, "legal_person", XML_NAMESPACE_VALUE)
        participantInfo.appendChild participantLegalPerson
    
        Set personRelatedWithPep = xmlDom.createNode(1, "related_with_pep", XML_NAMESPACE_VALUE)
        personRelatedWithPep.Text = Cells(i, Range("sutitajs_jp_related_with_pep").Column).value
        participantLegalPerson.appendChild personRelatedWithPep

        Dim startRow As Integer
        'Dim startColumn As Integer
        startRow = i
        startColumn = Range("sutitajs_jp_name").Column
        createBusiness participantLegalPerson, xmlDom, startRow, startColumn
    Else
' Private person
        Dim participantIndividual As MSXML2.IXMLDOMElement
        Set participantIndividual = xmlDom.createNode(1, "individual", XML_NAMESPACE_VALUE)
        participantInfo.appendChild participantIndividual
    
        Set personIndividualIsPep = xmlDom.createNode(1, "is_pep", XML_NAMESPACE_VALUE)
        personIndividualIsPep.Text = Cells(i, Range("sutitajs_is_pep").Column).value
        participantIndividual.appendChild personIndividualIsPep

        Set personRelatedWithPep = xmlDom.createNode(1, "related_with_pep", XML_NAMESPACE_VALUE)
        personRelatedWithPep.Text = Cells(i, Range("sutitajs_fp_related_with_pep").Column).value
        participantIndividual.appendChild personRelatedWithPep

        startRow = i
        startColumn = Range("sutitajs_fp_name").Column
        createPrivate participantIndividual, xmlDom, startRow, startColumn
    End If
    ' Additional info
    Set additionalAccountInfo = xmlDom.createNode(1, "additional_account_info", XML_NAMESPACE_VALUE)
    senderNode.appendChild additionalAccountInfo
    
    Set additionalAccountType = xmlDom.createNode(1, "account_type", XML_NAMESPACE_VALUE)
    additionalAccountType.Text = Cells(i, Range("sutitajs_account_account_type").Column).value
    additionalAccountInfo.appendChild additionalAccountType
    
    Set additionalSubAccount = xmlDom.createNode(1, "subaccount", XML_NAMESPACE_VALUE)
    additionalSubAccount.Text = Cells(i, Range("sutitajs_account_subaccount").Column).value
    additionalAccountInfo.appendChild additionalSubAccount
    
    If Not (IsEmpty(Cells(i, Range("sutitajs_account_account_opened").Column).value)) Then
        Set additionalAccountOpened = xmlDom.createNode(1, "account_opened", XML_NAMESPACE_VALUE)
        additionalAccountOpened.Text = Format(Cells(i, Range("sutitajs_account_account_opened").Column).value, "yyyy-mm-dd")
        additionalAccountInfo.appendChild additionalAccountOpened
    End If
    
    If Not (IsEmpty(Cells(i, Range("sutitajs_account_account_closed").Column).value)) Then
        Set additionalAccountClosed = xmlDom.createNode(1, "account_closed", XML_NAMESPACE_VALUE)
        additionalAccountClosed.Text = Format(Cells(i, Range("sutitajs_account_account_closed").Column).value, "yyyy-mm-dd")
        additionalAccountInfo.appendChild additionalAccountClosed
    End If
    
    Set additionalAccountMainCyy = xmlDom.createNode(1, "account_main_currency", XML_NAMESPACE_VALUE)
    additionalAccountMainCyy.Text = Cells(i, Range("sutitajs_account_account_main_currency").Column).value
    additionalAccountInfo.appendChild additionalAccountMainCyy
    
    Set additionalAccountOpenType = xmlDom.createNode(1, "account_open_type", XML_NAMESPACE_VALUE)
    additionalAccountOpenType.Text = Cells(i, Range("sutitajs_account_account_open_type").Column).value
    additionalAccountInfo.appendChild additionalAccountOpenType
    
    If Not (IsEmpty(Cells(i, Range("sutitajs_account_total_balance").Column).value)) Then
        Set additionalTotalBalance = xmlDom.createNode(1, "total_balance", XML_NAMESPACE_VALUE)
        additionalTotalBalance.Text = Cells(i, Range("sutitajs_account_total_balance").Column).value
        additionalAccountInfo.appendChild additionalTotalBalance
    End If
    
    Set additionalBalanceDescription = xmlDom.createNode(1, "balance_description", XML_NAMESPACE_VALUE)
    additionalBalanceDescription.Text = Cells(i, Range("sutitajs_account_balance_description").Column).value
    additionalAccountInfo.appendChild additionalBalanceDescription
    
    Set senderIsClientHighRisk = xmlDom.createNode(1, "is_client_high_risk", XML_NAMESPACE_VALUE)
    senderIsClientHighRisk.Text = Cells(i, Range("sutitajs_is_client_high_risk").Column).value
    senderNode.appendChild senderIsClientHighRisk
    
    Set senderEconomicalActivityList = xmlDom.createNode(1, "economical_activity_list", XML_NAMESPACE_VALUE)
    senderNode.appendChild senderEconomicalActivityList
    
    Set economicalActivityCode = xmlDom.createNode(1, "activity_code", XML_NAMESPACE_VALUE)
    economicalActivityCode.Text = Cells(i, Range("sutitajs_activity_code").Column).value
    senderEconomicalActivityList.appendChild economicalActivityCode
    
    Set economicalActivityCode2 = xmlDom.createNode(1, "activity_code", XML_NAMESPACE_VALUE)
    economicalActivityCode2.Text = Cells(i, Range("sutitajs_activity_code2").Column).value
    senderEconomicalActivityList.appendChild economicalActivityCode2
    
    Set economicalActivityCode3 = xmlDom.createNode(1, "activity_code", XML_NAMESPACE_VALUE)
    economicalActivityCode3.Text = Cells(i, Range("sutitajs_activity_code3").Column).value
    senderEconomicalActivityList.appendChild economicalActivityCode3
    
    Set senderEconomicalActivityDescription = xmlDom.createNode(1, "economical_activity_description", XML_NAMESPACE_VALUE)
    senderEconomicalActivityDescription.Text = Cells(i, Range("sutitajs_economical_activity_description").Column).value
    senderNode.appendChild senderEconomicalActivityDescription
    
    Set senderIsConnectedWithLv = xmlDom.createNode(1, "is_connected_with_lv", XML_NAMESPACE_VALUE)
    senderIsConnectedWithLv.Text = Cells(i, Range("sutitajs_is_connected_with_lv").Column).value
    senderNode.appendChild senderIsConnectedWithLv
    
    Set senderInitialIdentificationCountry = xmlDom.createNode(1, "initial_identification_country", XML_NAMESPACE_VALUE)
    senderInitialIdentificationCountry.Text = Cells(i, Range("sutitajs_initial_identification_country").Column).value
    senderNode.appendChild senderInitialIdentificationCountry
    
    Set senderIsOutsourced = xmlDom.createNode(1, "is_outsourced", XML_NAMESPACE_VALUE)
    senderIsOutsourced.Text = Cells(i, Range("sutitajs_piesaistitajs_is_outsourced").Column).value
    senderNode.appendChild senderIsOutsourced
    
End Sub
Sub createActivity(ByRef transactionActivityParticipantListNode As MSXML2.IXMLDOMElement, ByRef xmlDom As MSXML2.DOMDocument60, i As Integer, startColumn As Integer)

    ''Cells(i, Range("transaction_or_activity").Column).value = "A"

    Set senderNode = xmlDom.createNode(1, "activity_person", XML_NAMESPACE_VALUE)
    transactionActivityParticipantListNode.appendChild senderNode
    
    Set activityRole = xmlDom.createNode(1, "role", XML_NAMESPACE_VALUE)
    activityRole.Text = Cells(i, Range("aktivpers_role").Column).value
    senderNode.appendChild activityRole
       
    Set senderIsMyClient = xmlDom.createNode(1, "is_my_client", XML_NAMESPACE_VALUE)
    senderIsMyClient.Text = Cells(i, Range("aktivpers_is_my_client").Column).value
    senderNode.appendChild senderIsMyClient
 
    Set senderAccountInfo = xmlDom.createNode(1, "account_info", XML_NAMESPACE_VALUE)
    senderNode.appendChild senderAccountInfo
 
    Set accountSwiftCode = xmlDom.createNode(1, "swift_code", XML_NAMESPACE_VALUE)
    accountSwiftCode.Text = Cells(i, Range("aktivpers_swift_code").Column).value
    senderAccountInfo.appendChild accountSwiftCode
 
    Set accountBankAccount = xmlDom.createNode(1, "bank_account", XML_NAMESPACE_VALUE)
    accountBankAccount.Text = Cells(i, Range("aktivpers_bank_account").Column).value
    senderAccountInfo.appendChild accountBankAccount
 
' Participant info
    Set participantInfo = xmlDom.createNode(1, "participant_info", XML_NAMESPACE_VALUE)
    senderNode.appendChild participantInfo

    If (Cells(i, Range("aktivpers_jp_name").Column).value <> "") Then
' Business person
        Dim participantLegalPerson As MSXML2.IXMLDOMElement
        Set participantLegalPerson = xmlDom.createNode(1, "legal_person", XML_NAMESPACE_VALUE)
        participantInfo.appendChild participantLegalPerson
    
        Set personRelatedWithPep = xmlDom.createNode(1, "related_with_pep", XML_NAMESPACE_VALUE)
        personRelatedWithPep.Text = Cells(i, Range("aktivpers_jp_related_with_pep").Column).value
        participantLegalPerson.appendChild personRelatedWithPep

        Dim startRow As Integer
        'Dim startColumn As Integer
        startRow = i
        startColumn = Range("aktivpers_jp_name").Column
        createBusiness participantLegalPerson, xmlDom, startRow, startColumn
    Else
' Private person
        Dim participantIndividual As MSXML2.IXMLDOMElement
        Set participantIndividual = xmlDom.createNode(1, "individual", XML_NAMESPACE_VALUE)
        participantInfo.appendChild participantIndividual
    
        Set personIndividualIsPep = xmlDom.createNode(1, "is_pep", XML_NAMESPACE_VALUE)
        personIndividualIsPep.Text = Cells(i, Range("aktivpers_is_pep").Column).value
        participantIndividual.appendChild personIndividualIsPep

        Set personRelatedWithPep = xmlDom.createNode(1, "related_with_pep", XML_NAMESPACE_VALUE)
        personRelatedWithPep.Text = Cells(i, Range("aktivpers_fp_related_with_pep").Column).value
        participantIndividual.appendChild personRelatedWithPep

        startRow = i
        startColumn = Range("aktivpers_fp_name").Column
        createPrivate participantIndividual, xmlDom, startRow, startColumn
    End If
    ' Additional info
    Set additionalAccountInfo = xmlDom.createNode(1, "additional_account_info", XML_NAMESPACE_VALUE)
    senderNode.appendChild additionalAccountInfo
    
    Set additionalAccountType = xmlDom.createNode(1, "account_type", XML_NAMESPACE_VALUE)
    additionalAccountType.Text = Cells(i, Range("aktivpers_account_account_type").Column).value
    additionalAccountInfo.appendChild additionalAccountType
    
    Set additionalSubAccount = xmlDom.createNode(1, "subaccount", XML_NAMESPACE_VALUE)
    additionalSubAccount.Text = Cells(i, Range("aktivpers_account_subaccount").Column).value
    additionalAccountInfo.appendChild additionalSubAccount
    
    If Not (IsEmpty(Cells(i, Range("aktivpers_account_account_opened").Column).value)) Then
        Set additionalAccountOpened = xmlDom.createNode(1, "account_opened", XML_NAMESPACE_VALUE)
        additionalAccountOpened.Text = Format(Cells(i, Range("aktivpers_account_account_opened").Column).value, "yyyy-mm-dd")
        additionalAccountInfo.appendChild additionalAccountOpened
    End If
    
    If Not (IsEmpty(Cells(i, Range("aktivpers_account_account_closed").Column).value)) Then
        Set additionalAccountClosed = xmlDom.createNode(1, "account_closed", XML_NAMESPACE_VALUE)
        additionalAccountClosed.Text = Format(Cells(i, Range("aktivpers_account_account_closed").Column).value, "yyyy-mm-dd")
        additionalAccountInfo.appendChild additionalAccountClosed
    End If
    
    Set additionalAccountMainCyy = xmlDom.createNode(1, "account_main_currency", XML_NAMESPACE_VALUE)
    additionalAccountMainCyy.Text = Cells(i, Range("aktivpers_account_account_main_currency").Colum).value
    additionalAccountInfo.appendChild additionalAccountMainCyy
    
    Set additionalAccountOpenType = xmlDom.createNode(1, "account_open_type", XML_NAMESPACE_VALUE)
    additionalAccountOpenType.Text = Cells(i, Range("aktivpers_account_account_open_type").Column).value
    additionalAccountInfo.appendChild additionalAccountOpenType
    
    If Not (IsEmpty(Cells(i, Range("aktivpers_account_total_balance").Column).value)) Then
        Set additionalTotalBalance = xmlDom.createNode(1, "total_balance", XML_NAMESPACE_VALUE)
        additionalTotalBalance.Text = Cells(i, Range("aktivpers_account_total_balance").Column).value
        additionalAccountInfo.appendChild additionalTotalBalance
    End If
    
    Set additionalBalanceDescription = xmlDom.createNode(1, "balance_description", XML_NAMESPACE_VALUE)
    additionalBalanceDescription.Text = Cells(i, Range("aktivpers_account_balance_description").Column).value
    additionalAccountInfo.appendChild additionalBalanceDescription
    
    Set senderIsClientHighRisk = xmlDom.createNode(1, "is_client_high_risk", XML_NAMESPACE_VALUE)
    senderIsClientHighRisk.Text = Cells(i, Range("aktivpers_is_client_high_risk").Column).value
    senderNode.appendChild senderIsClientHighRisk
    
    Set senderEconomicalActivityList = xmlDom.createNode(1, "economical_activity_list", XML_NAMESPACE_VALUE)
    senderNode.appendChild senderEconomicalActivityList
    
    Set economicalActivityCode = xmlDom.createNode(1, "activity_code", XML_NAMESPACE_VALUE)
    economicalActivityCode.Text = Cells(i, Range("aktivpers_activity_code").Column).value
    senderEconomicalActivityList.appendChild economicalActivityCode
    
    Set economicalActivityCode2 = xmlDom.createNode(1, "activity_code", XML_NAMESPACE_VALUE)
    economicalActivityCode2.Text = Cells(i, Range("aktivpers_activity_code2").Column).value
    senderEconomicalActivityList.appendChild economicalActivityCode2
    
    Set economicalActivityCode3 = xmlDom.createNode(1, "activity_code", XML_NAMESPACE_VALUE)
    economicalActivityCode3.Text = Cells(i, Range("aktivpers_activity_code3").Column).value
    senderEconomicalActivityList.appendChild economicalActivityCode3
    
    Set senderEconomicalActivityDescription = xmlDom.createNode(1, "economical_activity_description", XML_NAMESPACE_VALUE)
    senderEconomicalActivityDescription.Text = Cells(i, Range("aktivpers_economical_activity_description").Column).value
    senderNode.appendChild senderEconomicalActivityDescription
    
    Set senderIsConnectedWithLv = xmlDom.createNode(1, "is_connected_with_lv", XML_NAMESPACE_VALUE)
    senderIsConnectedWithLv.Text = Cells(i, Range("aktivpers_is_connected_with_lv").Column).value
    senderNode.appendChild senderIsConnectedWithLv
    
    Set senderInitialIdentificationCountry = xmlDom.createNode(1, "initial_identification_country", XML_NAMESPACE_VALUE)
    senderInitialIdentificationCountry.Text = Cells(i, Range("aktivpers_initial_identification_country").Column).value
    senderNode.appendChild senderInitialIdentificationCountry
    
    Set senderIsOutsourced = xmlDom.createNode(1, "is_outsourced", XML_NAMESPACE_VALUE)
    senderIsOutsourced.Text = Cells(i, Range("aktivpers_piesaistitajs_is_outsourced").Column).value
    senderNode.appendChild senderIsOutsourced
End Sub
Sub createBusiness(ByRef personNode As MSXML2.IXMLDOMElement, xmlDom As MSXML2.DOMDocument60, i As Integer, startColumn As Integer)
    If (Cells(i, startColumn).value <> "") Then
        Set personName = xmlDom.createNode(1, "legal_name", XML_NAMESPACE_VALUE)
        personName.Text = Cells(i, startColumn).value
        personNode.appendChild personName
    End If
    If (Cells(i, startColumn + 1).value <> "") Then
        Set personLegalForm = xmlDom.createNode(1, "legal_form", XML_NAMESPACE_VALUE)
        personLegalForm.Text = Cells(i, startColumn + 1).value
        personNode.appendChild personLegalForm
    End If
    If (Cells(i, startColumn + 2).value <> "") Then
        Set personRegistrationCountry = xmlDom.createNode(1, "registration_country", XML_NAMESPACE_VALUE)
        personRegistrationCountry.Text = Cells(i, startColumn + 2).value
        personNode.appendChild personRegistrationCountry
    End If
    If (Cells(i, startColumn + 3).value <> "") Then
        Set personRegistrationNumber = xmlDom.createNode(1, "registration_number", XML_NAMESPACE_VALUE)
        personRegistrationNumber.Text = Cells(i, startColumn + 3).value
        personNode.appendChild personRegistrationNumber
    End If
    If (Cells(i, startColumn + 4).value <> "") Then
        Set personAddressCountry = xmlDom.createNode(1, "address_country", XML_NAMESPACE_VALUE)
        personAddressCountry.Text = Cells(i, startColumn + 4).value
        personNode.appendChild personAddressCountry
    End If
    If (Cells(i, startColumn + 5).value <> "") Then
        Set personAddress = xmlDom.createNode(1, "address", XML_NAMESPACE_VALUE)
        personAddress.Text = Cells(i, startColumn + 5).value
        personNode.appendChild personAddress
    End If
    If (Cells(i, startColumn + 6).value <> "") Then
        Set personSecondAddressCountry = xmlDom.createNode(1, "second_address_country", XML_NAMESPACE_VALUE)
        personSecondAddressCountry.Text = Cells(i, startColumn + 6).value
        personNode.appendChild personSecondAddressCountry
    End If
    If (Cells(i, startColumn + 7).value <> "") Then
        Set personSecondAddress = xmlDom.createNode(1, "second_address", XML_NAMESPACE_VALUE)
        personSecondAddress.Text = Cells(i, startColumn + 7).value
        personNode.appendChild personSecondAddress
    End If
    If (Cells(i, startColumn + 8).value <> "") Then
        Set personComments = xmlDom.createNode(1, "comments", XML_NAMESPACE_VALUE)
        personComments.Text = Cells(i, startColumn + 8).value
        personNode.appendChild personComments
    End If

End Sub

Sub createPrivate(ByRef personNode As MSXML2.IXMLDOMElement, xmlDom As MSXML2.DOMDocument60, i As Integer, startColumn As Integer)

    If (Cells(i, startColumn).value <> "") Then
        Set personName = xmlDom.createNode(1, "individual_name", XML_NAMESPACE_VALUE)
        personName.Text = Cells(i, startColumn).value
        personNode.appendChild personName
    End If
    If (Cells(i, startColumn + 1).value <> "") Then
        Set personSurname = xmlDom.createNode(1, "surname", XML_NAMESPACE_VALUE)
        personSurname.Text = Cells(i, startColumn + 1).value
        personNode.appendChild personSurname
    End If
    If (Cells(i, startColumn + 2).value <> "") Then
        Set personIdCodeLatvia = xmlDom.createNode(1, "id_code_latvia", XML_NAMESPACE_VALUE)
        personIdCodeLatvia.Text = Cells(i, startColumn + 2).value
        personNode.appendChild personIdCodeLatvia
    End If
    If (Cells(i, startColumn + 3).value <> "") Then
        Set personDateOfBirth = xmlDom.createNode(1, "date_of_birth", XML_NAMESPACE_VALUE)
        personDateOfBirth.Text = Format(Cells(i, startColumn + 3).value, "yyyy-mm-dd")
        personNode.appendChild personDateOfBirth
    End If
    If (Cells(i, startColumn + 4).value <> "") Then
        Set personForeignId = xmlDom.createNode(1, "foreign_id", XML_NAMESPACE_VALUE)
        personForeignId.Text = Cells(i, startColumn + 4).value
        personNode.appendChild personForeignId
    End If
    If (Cells(i, startColumn + 5).value <> "") Then
        Set personForeignIdCountry = xmlDom.createNode(1, "foreign_id_country", XML_NAMESPACE_VALUE)
        personForeignIdCountry.Text = Cells(i, startColumn + 5).value
        personNode.appendChild personForeignIdCountry
    End If
    If (Cells(i, startColumn + 6).value <> "") Then
        Set personPassportOrIdNumber = xmlDom.createNode(1, "passport_or_id_number", XML_NAMESPACE_VALUE)
        personPassportOrIdNumber.Text = Cells(i, startColumn + 6).value
        personNode.appendChild personPassportOrIdNumber
    End If
    If (Cells(i, startColumn + 7).value <> "") Then
        Set personPassportOrIdCountry = xmlDom.createNode(1, "passport_or_id_country", XML_NAMESPACE_VALUE)
        personPassportOrIdCountry.Text = Cells(i, startColumn + 7).value
        personNode.appendChild personPassportOrIdCountry
    End If
    If (Cells(i, startColumn + 8).value <> "") Then
        Set personAddressCountry = xmlDom.createNode(1, "address_country", XML_NAMESPACE_VALUE)
        personAddressCountry.Text = Cells(i, startColumn + 8).value
        personNode.appendChild personAddressCountry
    End If
    If (Cells(i, startColumn + 9).value <> "") Then
        Set personAddress = xmlDom.createNode(1, "address", XML_NAMESPACE_VALUE)
        personAddress.Text = Cells(i, startColumn + 9).value
        personNode.appendChild personAddress
    End If
    If (Cells(i, startColumn + 10).value <> "") Then
        Set personSecondAddressCountry = xmlDom.createNode(1, "second_address_country", XML_NAMESPACE_VALUE)
        personSecondAddressCountry.Text = Cells(i, startColumn + 10).value
        personNode.appendChild personSecondAddressCountry
    End If
    If (Cells(i, startColumn + 11).value <> "") Then
        Set personSecondAddress = xmlDom.createNode(1, "second_address", XML_NAMESPACE_VALUE)
        personSecondAddress.Text = Cells(i, startColumn + 11).value
        personNode.appendChild personSecondAddress
    End If
    If (Cells(i, startColumn + 12).value <> "") Then
        Set personComments = xmlDom.createNode(1, "comments", XML_NAMESPACE_VALUE)
        personComments.Text = Cells(i, startColumn + 12).value
        personNode.appendChild personComments
    End If
End Sub

Function isNotStatedTrnId(i As Integer) As Boolean
    isNotStatedTrnId = False
    Set startCellAddress = Cells(i, Range("information_type").Column)
    Set endCellAddress = Cells(i, Range("addendumns_attachment").Column)
    
    startRange = startCellAddress.Address()
    endRange = endCellAddress.Address()
    If WorksheetFunction.CountA(Range(startRange & ":" & endRange)) <> 0 And (Cells(i, Range("tech_deal_number").Column).value = "") Then
        isNotStatedTrnId = True
    End If
End Function

Function validation(i As Integer)
    validation = True
    typologyCode = Cells(i, Range("typology_code").Column).value
    typologyCode2 = Cells(i, Range("typology_code2").Column).value
    typologyCode3 = Cells(i, Range("typology_code3").Column).value
    descriptionFirst = Cells(i, Range("typology_description_first").Column).value
    descriptionSecond = Cells(i, Range("typology_description_second").Column).value
    
    Dim typologyTotal As Integer
    typologyTotal = 0
    
    If Not IsEmpty(typologyCode) Then
        typologyTotal = typologyTotal + 1
    End If
    
    If Not IsEmpty(typologyCode2) Then
        typologyTotal = typologyTotal + 1
    End If
    
    If Not IsEmpty(typologyCode3) Then
        typologyTotal = typologyTotal + 1
    End If

    ''If typologyTotal > 0 And typologyTotal <> 3 And (IsEmpty(descriptionFirst) Or IsEmpty(descriptionSecond)) Then
    If typologyTotal = 0 Then
        MsgBox ("Lauks 'Tipolo|fffd|ijas apraksts (teksts)' ir oblig|fffd|ts")
        Range("AL" & i).Select
        validation = False
    End If
    
End Function
Attribute VB_Name = "Module2"
'Module to fill all customer/relations data

Sub FillSutitajs()
 Call FillOneSide("sutitajs")
End Sub

Sub FillSanemejs()
 Call FillOneSide("sanemejs")
End Sub

Sub FillAktivPers()
 Call FillOneSide("aktivpers")
End Sub

Sub FillSutitajsPilnvPersona()
 Call FillPilvarota("sutitajs")
End Sub

Sub FillSanemejsPilnvPersona()
 Call FillPilvarota("sanemejs")
End Sub

Sub FillAktivPersPilnvPersona()
 Call FillPilvarota("aktivpers")
End Sub

Sub FillSutitajsUBO()
 Call FillUBO("sutitajs")
End Sub

Sub FillSanemejsUBO()
 Call FillUBO("sanemejs")
End Sub

Sub FillAktivPersUBO()
 Call FillUBO("aktivpers")
End Sub

Sub FillSutitajsPEP()
 Call FillPEP("sutitajs")
End Sub

Sub FillSanemejsPEP()
 Call FillPEP("sanemejs")
End Sub

Sub FillAktivPersPEP()
 Call FillPEP("aktivpers")
End Sub

Sub FillSutitajsSaistPers()
 Call FillSaistPers("sutitajs")
End Sub

Sub FillSanemejsSaistPers()
 Call FillSaistPers("sanemejs")
End Sub

Sub FillAktivPersSaistPers()
 Call FillSaistPers("aktivpers")
End Sub

Sub FillSutitajsPiesaist()
 Call FillPiesaistitajs("sutitajs")
End Sub

Sub FillSanemejsPiesaist()
 Call FillPiesaistitajs("sanemejs")
End Sub

Sub FillAktivPersPiesaist()
 Call FillPiesaistitajs("aktivpers")
End Sub

Sub FillSutitajsIpasnieks()
 Call FillIpasnieks("sutitajs")
End Sub

Sub FillSanemejsIpasnieks()
 Call FillIpasnieks("sanemejs")
End Sub

Sub FillAktivPersIpasnieks()
 Call FillIpasnieks("aktivpers")
End Sub

Function check_or_open_file(FileNameStart As String) As String
    
Dim oFSO As Object
Dim oFolder As Object
Dim oFile As Object
Dim i As Integer
Dim wbk As Workbook
    
Set oFSO = CreateObject("Scripting.FileSystemObject")
 
Set oFolder = oFSO.GetFolder(Sheets("Parameters").Cells(Range("DWHFilesPath").row, Range("DWHFilesPath").Column).value)
 
For Each oFile In oFolder.Files
 

    If InStr(1, oFile.Name, FileNameStart, 1) = 1 Then
        check_or_open_file = oFile.Name
        For Each wbk In Workbooks
         If wbk.Name = oFile.Name Then
             Exit Function
         End If
        Next
     
        Workbooks.Open (Sheets("Parameters").Cells(Range("DWHFilesPath").row, Range("DWHFilesPath").Column).value & oFile.Name)
        Exit Function
    End If
 
Next oFile
    
End Function
Sub fill_person(ByVal columnt_to_start As Long, ByVal row_number As Long, ByVal client_id As Long, ByVal pers_type As String)
    Call fill_person_abstract(columnt_to_start, row_number, client_id, pers_type, "")
End Sub

Sub fill_person_abstract(ByVal columnt_to_start As Long, ByVal row_number As Long, ByVal client_id As Long, ByVal pers_type As String, ByVal customerType As String)

  If (Cells(row_number, Range("tech_deal_number").Column).value = "") Then
      Cells(row_number, Range("tech_deal_number").Column).value = Cells((row_number - 1), Range("tech_deal_number").Column).value
  Else
    ''If (Cells(row_number, Range("tech_deal_number").column).value <> Cells((row_number - 1), Range("tech_deal_number").column).value) Then
     ''   MsgBox ("Row is already reserved ")
      ''  Exit Sub
    ''End If
  End If
  
  client_wbk_name = check_or_open_file(Sheets("Parameters").Cells(Range("DWHKlientiMask").row, Range("DWHKlientiMask").Column).value)
  Set my_kl_dwh = Workbooks(client_wbk_name).ActiveSheet.Range("A:A").Find(client_id, LookIn:=xlValues)
  If my_kl_dwh Is Nothing Then
     Exit Sub
  End If
  
  If Not IsEmpty(customerType) Then
    ' defaulting
    ' PLG UBO
    If (InStr(customerType, "_plg") > 0) Then
        If (Workbooks(client_wbk_name).ActiveSheet.Cells(my_kl_dwh.row, 4).value = pers_type) Then
            If IsEmpty(Cells(row_number, Range(customerType & "_ubo_type").Column).value) Then
                Cells(row_number, Range(customerType & "_ubo_type").Column).value = "noskaidrots"
            End If
        End If
    End If
    'PEP
    If (InStr(customerType, "_pep") > 0) Then
        If (Workbooks(client_wbk_name).ActiveSheet.Cells(my_kl_dwh.row, 4).value = pers_type) Then
            If IsEmpty(Cells(row_number, Range(customerType & "_pep_type").Column).value) Then
                Cells(row_number, Range(customerType & "_pep_type").Column).value = "amatpersona"
            End If
        End If
    End If
    ' customer - sender/receiver/activity
     If (InStr(customerType, "related") > 0) Then
        If (Workbooks(client_wbk_name).ActiveSheet.Cells(my_kl_dwh.row, 4).value = pers_type) Then
            If IsEmpty(Cells(row_number, Range(customerType & "_with_pep").Column).value) Then
                Cells(row_number, Range(customerType & "_with_pep").Column).value = "ne"
            End If
        End If
        
        If IsEmpty(Cells(row_number, Range(Split(customerType, "_")(0) & "_piesaistitajs_is_outsourced").Column).value) Then
            Cells(row_number, Range(Split(customerType, "_")(0) & "_piesaistitajs_is_outsourced").Column).value = "ne"
        End If
    End If
    'Related person saistpers
     If (InStr(customerType, "saistpers") > 0) Then
        ''If (Workbooks(client_wbk_name).ActiveSheet.Cells(my_kl_dwh.row, 4).value = pers_type) Then
            If IsEmpty(Cells(row_number, Range(customerType & "_related_group_type").Column).value) Then
                Cells(row_number, Range(customerType & "_related_group_type").Column).value = "STRUK"
            End If
        ''End If
    End If
  End If
  
  mycurr_clmn = columnt_to_start
  If Workbooks(client_wbk_name).ActiveSheet.Cells(my_kl_dwh.row, 4).value = "J" And pers_type = "J" Then
       'name
       Cells(row_number, mycurr_clmn).value = Workbooks(client_wbk_name).ActiveSheet.Cells(my_kl_dwh.row, 5).value
       mycurr_clmn = mycurr_clmn + 1
       'legalform
       Cells(row_number, mycurr_clmn).value = Workbooks(client_wbk_name).ActiveSheet.Cells(my_kl_dwh.row, 6).value
       mycurr_clmn = mycurr_clmn + 1
       'reg_country
       Cells(row_number, mycurr_clmn).value = Workbooks(client_wbk_name).ActiveSheet.Cells(my_kl_dwh.row, 7).value
       mycurr_clmn = mycurr_clmn + 1
       'reg_number
       Cells(row_number, mycurr_clmn).value = Workbooks(client_wbk_name).ActiveSheet.Cells(my_kl_dwh.row, 8).value
       mycurr_clmn = mycurr_clmn + 1
       'addr_country
       Cells(row_number, mycurr_clmn).value = Workbooks(client_wbk_name).ActiveSheet.Cells(my_kl_dwh.row, 9).value
       mycurr_clmn = mycurr_clmn + 1
       'address
       Cells(row_number, mycurr_clmn).value = Workbooks(client_wbk_name).ActiveSheet.Cells(my_kl_dwh.row, 10).value
       mycurr_clmn = mycurr_clmn + 1
       'second_addr_country
       Cells(row_number, mycurr_clmn).value = Workbooks(client_wbk_name).ActiveSheet.Cells(my_kl_dwh.row, 11).value
       mycurr_clmn = mycurr_clmn + 1
       'second_address
       Cells(row_number, mycurr_clmn).value = Workbooks(client_wbk_name).ActiveSheet.Cells(my_kl_dwh.row, 12).value
       mycurr_clmn = mycurr_clmn + 1
       'comments
       Cells(row_number, mycurr_clmn).value = Workbooks(client_wbk_name).ActiveSheet.Cells(my_kl_dwh.row, 13).value
    End If

  If Workbooks(client_wbk_name).ActiveSheet.Cells(my_kl_dwh.row, 4).value = "P" And pers_type = "P" Then
       
        'name
       Cells(row_number, mycurr_clmn).value = Workbooks(client_wbk_name).ActiveSheet.Cells(my_kl_dwh.row, 14).value
       mycurr_clmn = mycurr_clmn + 1
       'surname
       Cells(row_number, mycurr_clmn).value = Workbooks(client_wbk_name).ActiveSheet.Cells(my_kl_dwh.row, 15).value
       mycurr_clmn = mycurr_clmn + 1
       'idcodelatvia
       Cells(row_number, mycurr_clmn).value = ActiveSheet.Cells(my_kl_dwh.row, 15).value
       mycurr_clmn = mycurr_clmn + 1
       'dateofbirth
       Cells(row_number, mycurr_clmn).value = Workbooks(client_wbk_name).ActiveSheet.Cells(my_kl_dwh.row, 17).value
       mycurr_clmn = mycurr_clmn + 1
       'foreign_id
       Cells(row_number, mycurr_clmn).value = Workbooks(client_wbk_name).ActiveSheet.Cells(my_kl_dwh.row, 18).value
       mycurr_clmn = mycurr_clmn + 1
       'foreignidcountry
       Cells(row_number, mycurr_clmn).value = Workbooks(client_wbk_name).ActiveSheet.Cells(my_kl_dwh.row, 19).value
       mycurr_clmn = mycurr_clmn + 1
       'pass_or_id_number
       Cells(row_number, mycurr_clmn).value = Workbooks(client_wbk_name).ActiveSheet.Cells(my_kl_dwh.row, 20).value
       mycurr_clmn = mycurr_clmn + 1
       'pass_or_id_country
       Cells(row_number, mycurr_clmn).value = Workbooks(client_wbk_name).ActiveSheet.Cells(my_kl_dwh.row, 21).value
       mycurr_clmn = mycurr_clmn + 1
       'addr_country
       Cells(row_number, mycurr_clmn).value = Workbooks(client_wbk_name).ActiveSheet.Cells(my_kl_dwh.row, 22).value
       mycurr_clmn = mycurr_clmn + 1
       'sut_fp_address
       Cells(row_number, mycurr_clmn).value = Workbooks(client_wbk_name).ActiveSheet.Cells(my_kl_dwh.row, 23).value
       mycurr_clmn = mycurr_clmn + 1
       'secaddrcountry
       Cells(row_number, mycurr_clmn).value = Workbooks(client_wbk_name).ActiveSheet.Cells(my_kl_dwh.row, 24).value
       mycurr_clmn = mycurr_clmn + 1
       'secaddr
       Cells(row_number, mycurr_clmn).value = Workbooks(client_wbk_name).ActiveSheet.Cells(my_kl_dwh.row, 25).value
       mycurr_clmn = mycurr_clmn + 1
       'comm
       Cells(row_number, mycurr_clmn).value = Workbooks(client_wbk_name).ActiveSheet.Cells(my_kl_dwh.row, 26).value
    End If


End Sub

Function ChooseOrCreateLine(ByVal actualrow As Long, ByVal chkcolumn As Long) As Long

   'find deal start row
    MAX_ROW = 6
    deal_start_row = actualrow
    While deal_start_row > MAX_ROW And Cells(deal_start_row, Range("tech_deal_number").Column).value = Cells(deal_start_row - 1, Range("tech_deal_number").Column).value
     deal_start_row = deal_start_row - 1
    Wend
    
   'find deal end row
    deal_end_row = actualrow
    While Cells(deal_end_row + 1, Range("tech_deal_number").Column).value <> "" And Cells(deal_end_row, Range("tech_deal_number").Column).value = Cells(deal_end_row + 1, Range("tech_deal_number").Column).value
     deal_end_row = deal_end_row + 1
    Wend
    
    For i = deal_start_row To deal_end_row
        If Cells(i, chkcolumn).value = "" Then
          ChooseOrCreateLine = i
          Exit Function
        End If
    Next i
     
    'all rows for our deal are busy, we need to create new one
    Cells(deal_end_row + 1, 1).EntireRow.Insert Shift:=xlShiftDown
    Cells(deal_end_row + 1, Range("tech_deal_number").Column).value = Cells(deal_end_row, Range("tech_deal_number").Column).value
    Cells(deal_end_row + 1, Range("tech_numurs_gada").Column).value = Cells(deal_end_row, Range("tech_numurs_gada").Column).value
    Cells(deal_end_row + 1, Range("report_number").Column).value = Cells(deal_end_row, Range("report_number").Column).value
    ChooseOrCreateLine = deal_end_row + 1
    Exit Function

    
    
End Function

Sub clearOneSideData(ByVal actualrow As Long, ByVal PersType As String)
    deal_start_row = actualrow
    
   'find deal end row
    deal_end_row = actualrow
    While Cells(deal_end_row + 1, Range("tech_deal_number").Column).value <> "" And Cells(deal_end_row, Range("tech_deal_number").Column).value = Cells(deal_end_row + 1, Range("tech_deal_number").Column).value
     deal_end_row = deal_end_row + 1
    Wend


    Cells.Range(Cells(deal_start_row, Range(PersType & "_is_my_client").Column), Cells(deal_end_row, Range(PersType & "_ipasnieks_fp_comments").Column)).ClearContents

End Sub
Sub FillPilvarota(ByVal PersType As String)
    If ActiveCell.Column() <> Range(PersType & "_pilnvarota_pers_klienta_id").Column Or ActiveCell.row() < 6 Or ActiveCell.value = "" Then
      MsgBox ("Wrong Cells")
      Exit Sub
    End If
    FillPilvarotaAbstract PersType, ActiveCell.row(), ActiveCell.value
End Sub
Sub FillPilvarotaAbstract(ByVal PersType As String, ByVal row As Integer, ByVal customerId As Long)
        
    Call fill_person(Range(PersType & "_pilnvarota_jp_name").Column, row, customerId, "J")
    Call fill_person(Range(PersType & "_pilnvarota_fp_name").Column, row, customerId, "P")

End Sub
Sub FillUBO(ByVal PersType As String)
        If ActiveCell.Column() <> Range(PersType & "_plg_klienta_id").Column Or ActiveCell.row() < 6 Or ActiveCell.value = "" Then
      MsgBox ("Wrong Cells")
      Exit Sub
    End If
    Call FillUBOAbstract(PersType, ActiveCell.row(), ActiveCell.value)
End Sub
Sub FillUBOAbstract(ByVal PersType As String, ByVal row As Integer, ByVal customerId As Long)
        
    ''If IsEmpty(Cells(row, Range(PersType & "_plg_ubo_type").column).value) Then
    ''    Cells(row, Range(PersType & "_plg_ubo_type").column).value = "noskaidrots"
    ''End If
    
    Call fill_person_abstract(Range(PersType & "_plg_name").Column, row, customerId, "P", PersType & "_plg")
End Sub

Sub FillPEP(ByVal PersType)
    If ActiveCell.Column() <> Range(PersType & "_pep_klienta_id").Column Or ActiveCell.row() < 6 Or ActiveCell.value = "" Then
      MsgBox ("Wrong Cells")
      Exit Sub
    End If
    ''If IsEmpty(Cells(row, Range(PersType & "_pep_pep_type").column).value) Then
    ''    Cells(row, Range(PersType & "_pep_pep_type").column).value = "amatpersona"
    ''End If
    FillPEPAbstract PersType, ActiveCell.row(), ActiveCell.value
    
End Sub
Sub FillPEPAbstract(ByVal PersType As String, ByVal row As Integer, ByVal value As Long)
    Call fill_person_abstract(Range(PersType & "_pep_name").Column, row, value, "P", PersType & "_pep")
End Sub
Sub FillPiesaistitajs(ByVal PersType As String)
    If ActiveCell.Column() <> Range(PersType & "_piesaistitajs_klienta_id").Column Or ActiveCell.row() < 6 Or ActiveCell.value = "" Then
      MsgBox ("Wrong Cells")
      Exit Sub
    End If
    Call FillPiesaistitajsAbstract(PersType, ActiveCell.row(), ActiveCell.value)
End Sub
Sub FillPiesaistitajsAbstract(ByVal PersType As String, ByVal row As Integer, ByVal customerId As Long)
        
    Call fill_person(Range(PersType & "_piesaistitajs_jp_name").Column, row, customerId, "J")
    Call fill_person(Range(PersType & "_piesaistitajs_fp_name").Column, row, customerId, "P")
    
End Sub
Sub FillSaistPers(ByVal PersType As String)
    If ActiveCell.Column() <> Range(PersType & "_saist_pers_klienta_id").Column Or ActiveCell.row() < 6 Or ActiveCell.value = "" Then
      MsgBox ("Wrong Cells")
      Exit Sub
    End If
    Call FillSaistPersAbstract(PersType, ActiveCell.row(), ActiveCell.value)
End Sub
Sub FillSaistPersAbstract(ByVal PersType As String, ByVal row As Integer, customerId As Long)
        
    Call fill_person_abstract(Range(PersType & "_saistpers_jp_name").Column, row, customerId, "J", PersType & "_saistpers")
    Call fill_person_abstract(Range(PersType & "_saistpers_fp_name").Column, row, customerId, "P", "")
    
End Sub

Sub FillIpasnieks(ByVal PersType)
    If ActiveCell.Column() <> Range(PersType & "_ipasnieks_klienta_id").Column Or ActiveCell.row() < 6 Or ActiveCell.value = "" Then
      MsgBox ("Wrong Cells")
      Exit Sub
    End If
    Call FillIpasnieksAbstract(PersType, ActiveCell.row(), ActiveCell.value)
End Sub

Sub FillIpasnieksAbstract(ByVal PersType As String, ByVal row As Integer, ByVal value As Long)
    Call fill_person(Range(PersType & "_ipasnieks_jp_name").Column, row, value, "J")
    Call fill_person(Range(PersType & "_ipasnieks_fp_name").Column, row, value, "P")
End Sub

Sub FillOneSide(ByVal PersType As String)
  If ActiveCell.Column() <> Range(PersType & "_kl_id").Column Or ActiveCell.row() < 6 Or ActiveCell.value = "" Then
      MsgBox ("Wrong Cells")
      Exit Sub
  End If

  If Cells(ActiveCell.row(), Range("tech_deal_number").Column).value = "" Then
      MsgBox ("Deal number is missing")
      Exit Sub
  End If
  i = ActiveCell.row()
  Call FillOneSideAbstract(PersType, i)
End Sub

Sub FillOneSideAbstract(ByVal PersType As String, ByVal i As Integer)

  ''If ActiveCell.Column() <> Range(PersType & "_kl_id").Column Or ActiveCell.Row() < 6 Or ActiveCell.Value = "" Then
  ''    MsgBox ("Wrong Cells")
  ''    Exit Sub
  ''End If

  ''If Cells(ActiveCell.Row(), Range("tech_deal_number").Column).Value = "" Then
  ''    MsgBox ("Deal number is missing")
  ''    Exit Sub
  ''End If

  mywbk = ThisWorkbook.Name

  ''i = ActiveCell.Row()

 If Cells(i, Range(PersType & "_kl_id").Column).value <> "" Then
    OneSide_kl_id = Cells(i, Range(PersType & "_kl_id").Column).value
    
    Call clearOneSideData(i, PersType)
    
    client_wbk_name = check_or_open_file(Sheets("Parameters").Cells(Range("DWHKlientiMask").row, Range("DWHKlientiMask").Column).value)
    Set side_kl_dwh = Workbooks(client_wbk_name).ActiveSheet.Range("A:A").Find(OneSide_kl_id, LookIn:=xlValues)
    If side_kl_dwh Is Nothing Then
     MsgBox ("Klients, " & OneSide_kl_id & "nav atrasts")
     Exit Sub
    End If
    Workbooks(mywbk).Activate
    Cells(i, Range(PersType & "_is_my_client").Column).value = "ja"
    Cells(i, Range(PersType & "_swift_code").Column).value = ""
    
    If Workbooks(client_wbk_name).ActiveSheet.Cells(side_kl_dwh.row, 2).value <> "" Then
        Cells(i, Range(PersType & "_is_pep").Column).value = "ja"
    End If
    

    If Workbooks(client_wbk_name).ActiveSheet.Cells(side_kl_dwh.row, 4).value = "P" Then
       If Workbooks(client_wbk_name).ActiveSheet.Cells(side_kl_dwh.row, 3).value <> "" Then
         Cells(i, Range(PersType & "_fp_related_with_pep").Column).value = "ja"
       End If
       
       
       Call fill_person_abstract(Range(PersType & "_fp_name").Column, i, OneSide_kl_id, "P", PersType & "_fp_related")

    End If
    
    If Workbooks(client_wbk_name).ActiveSheet.Cells(side_kl_dwh.row, 4).value = "J" Then
       If Workbooks(client_wbk_name).ActiveSheet.Cells(side_kl_dwh.row, 3).value <> "" Then
          Cells(i, Range(PersType & "_jp_related_with_pep").Column).value = "ja"
       End If
       Call fill_person_abstract(Range(PersType & "_jp_name").Column, i, OneSide_kl_id, "J", PersType & "_jp_related")
    End If
    
    If Workbooks(client_wbk_name).ActiveSheet.Cells(side_kl_dwh.row, 27).value = "Y" Then
       Cells(i, Range(PersType & "_is_client_high_risk").Column).value = "ja"
    End If
    
    Cells(i, Range(PersType & "_activity_code").Column).value = Workbooks(client_wbk_name).ActiveSheet.Cells(side_kl_dwh.row, 28).value
    Cells(i, Range(PersType & "_economical_activity_description").Column).value = Workbooks(client_wbk_name).ActiveSheet.Cells(side_kl_dwh.row, 29).value
    Cells(i, Range(PersType & "_is_connected_with_lv").Column).value = Workbooks(client_wbk_name).ActiveSheet.Cells(side_kl_dwh.row, 30).value
    Cells(i, Range(PersType & "_initial_identification_country").Column).value = Workbooks(client_wbk_name).ActiveSheet.Cells(side_kl_dwh.row, 31).value

     
    account_wbk_name = check_or_open_file(Sheets("Parameters").Cells(Range("DWHKontiMask").row, Range("DWHKontiMask").Column).value)
    Workbooks(mywbk).Activate
    Set side_acc_dwh = Workbooks(account_wbk_name).ActiveSheet.Range("D:D").Find(OneSide_kl_id, LookIn:=xlValues)
    If Not side_acc_dwh Is Nothing Then
       'ETO ODNO POLE V NAALE BLOKA
       Cells(i, Range(PersType & "_bank_account").Column).value = Workbooks(account_wbk_name).ActiveSheet.Cells(side_acc_dwh.row, 3).value
       Cells(i, Range(PersType & "_account_account_type").Column).value = Workbooks(account_wbk_name).ActiveSheet.Cells(side_acc_dwh.row, 5).value
       Cells(i, Range(PersType & "_account_subaccount").Column).value = ""
       Cells(i, Range(PersType & "_account_account_opened").Column).value = Workbooks(account_wbk_name).ActiveSheet.Cells(side_acc_dwh.row, 6).value
       If Format(Workbooks(account_wbk_name).ActiveSheet.Cells(side_acc_dwh.row, 7), "yyyy-mm-dd") <> "1899-12-31" Then
           Cells(i, Range(PersType & "_account_account_closed").Column).value = Workbooks(account_wbk_name).ActiveSheet.Cells(side_acc_dwh.row, 7).value
       End If
       Cells(i, Range(PersType & "_account_account_main_currency").Column).value = Workbooks(account_wbk_name).ActiveSheet.Cells(side_acc_dwh.row, 8).value
       If (Workbooks(account_wbk_name).ActiveSheet.Cells(side_acc_dwh.row, 1).value <> "") Then
         If Left(Workbooks(account_wbk_name).ActiveSheet.Cells(side_acc_dwh.row, 1).value, 2) = "kl" Then
           Cells(i, Range(PersType & "_account_account_open_type").Column).value = "IN"
         Else
           Cells(i, Range(PersType & "_account_account_open_type").Column).value = Workbooks(account_wbk_name).ActiveSheet.Cells(side_acc_dwh.row, 1).value
         End If
       End If
       Cells(i, Range(PersType & "_account_total_balance").Column).value = Workbooks(account_wbk_name).ActiveSheet.Cells(side_acc_dwh.row, 9).value
       Cells(i, Range(PersType & "_account_balance_description").Column).value = ""
       Cells(i, Range(PersType & "_account_id").Column).value = Cells(i, Range(PersType & "_bank_account").Column).value
    End If
    



    'find all relations
    rel_count = 0
    Dim relationrows() As Long
    relations_wbk_name = check_or_open_file(Sheets("Parameters").Cells(Range("DWHRelationsMask").row, Range("DWHRelationsMask").Column).value)
    Workbooks(mywbk).Activate
    With Workbooks(relations_wbk_name).ActiveSheet.Range("A:A")
        Set c = .Find(OneSide_kl_id, LookIn:=xlValues)
            If Not c Is Nothing Then
              mylastrow = 0
              Do
                If c.row <= mylastrow Then
                 Exit Do
                End If
                mylastrow = c.row
                ReDim Preserve relationrows(0 To rel_count) As Long
                relationrows(rel_count) = c.row
                rel_count = rel_count + 1
                Set c = .FindNext(c)
             Loop While Not c Is Nothing
          End If
    End With
                    

  
    'process all linked persons
    If rel_count > 0 Then
      For Each element In relationrows
                mycustno = Workbooks(relations_wbk_name).ActiveSheet.Cells(element, 4).value
                myshare = Workbooks(relations_wbk_name).ActiveSheet.Cells(element, 3).value
                
                Select Case Workbooks(relations_wbk_name).ActiveSheet.Cells(element, 2).value
                 'PILNVAROTA PERSONA
                 Case "AUT"
                   i = ChooseOrCreateLine(i, Range(PersType & "_pilnvarota_pers_klienta_id").Column)
                   Cells(i, Range(PersType & "_pilnvarota_pers_klienta_id").Column).value = mycustno
                   Call fill_person(Range(PersType & "_pilnvarota_jp_name").Column, i, mycustno, "J")
                   Call fill_person(Range(PersType & "_pilnvarota_fp_name").Column, i, mycustno, "P")
                 'UBO
                 Case "BNF", "CON"
                   i = ChooseOrCreateLine(i, Range(PersType & "_plg_klienta_id").Column)
                   Cells(i, Range(PersType & "_plg_klienta_id").Column).value = mycustno
                   ''Call fill_person(Range(PersType & "_plg_name").Column, i, mycustno, "P")
                   Call fill_person_abstract(Range(PersType & "_plg_name").Column, i, mycustno, "P", PersType & "_plg")
                 'PEP
 '                Case "PRT"
 '                 i = ChooseOrCreateLine(i, Range(PersType & "_pep_klienta_id").column)
 '                 Cells(i, Range(PersType & "_pep_klienta_id").column).value = mycustno
 '                 Call fill_person(Range(PersType & "_pep_name").column, i, mycustno, "P")
 '               'PIESAISTITAJS
 '                Case "CRD"
 '                 i = ChooseOrCreateLine(i, Range(PersType & "_piesaistitajs_klienta_id").column)
 '                 Cells(i, Range(PersType & "_piesaistitajs_klienta_id").column).value = mycustno
 '                 Call fill_person(Range(PersType & "_piesaistitajs_jp_name").column, i, mycustno, "J")
 '                 Call fill_person(Range(PersType & "_piesaistitajs_fp_name").column, i, mycustno, "P")
                 'BENEFICIARY
                 Case "OWN"
                   i = ChooseOrCreateLine(i, Range(PersType & "_ipasnieks_klienta_id").Column)
                   Cells(i, Range(PersType & "_ipasnieks_klienta_id").Column).value = mycustno
                   Cells(i, Range(PersType & "_ipasnieks_shares").Column).value = myshare
                   Call fill_person(Range(PersType & "_ipasnieks_jp_name").Column, i, mycustno, "J")
                   Call fill_person(Range(PersType & "_ipasnieks_fp_name").Column, i, mycustno, "P")
                 Case Else
                   i = ChooseOrCreateLine(i, Range(PersType & "_saist_pers_klienta_id").Column)
                   Cells(i, Range(PersType & "_saist_pers_klienta_id").Column).value = mycustno
                   ''Call fill_person(Range(PersType & "_saistpers_jp_name").Column, i, mycustno, "J")
                   Call fill_person_abstract(Range(PersType & "_saistpers_jp_name").Column, i, mycustno, "J", PersType & "_saistpers")
                   Call fill_person(Range(PersType & "_saistpers_fp_name").Column, i, mycustno, "P")
                End Select

                
                '' old
                
                ''Select Case Workbooks(relations_wbk_name).ActiveSheet.Cells(element, 2).value
                 'PILNVAROTA PERSONA
                 ''Case "AUT"
                   ''i = ChooseOrCreateLine(i, Range(PersType & "_pilnvarota_pers_klienta_id").Column)
                   ''Cells(i, Range(PersType & "_pilnvarota_pers_klienta_id").Column).value = mycustno
                   ''Call fill_person(Range(PersType & "_pilnvarota_jp_name").Column, i, mycustno, "J")
                   ''Call fill_person(Range(PersType & "_pilnvarota_fp_name").Column, i, mycustno, "P")
                 'UBO
                 ''Case "UBO"
                   ''i = ChooseOrCreateLine(i, Range(PersType & "_plg_klienta_id").Column)
                   ''Cells(i, Range(PersType & "_plg_klienta_id").Column).value = mycustno
                   ''Call fill_person_abstract(Range(PersType & "_plg_name").Column, i, mycustno, "P", PersType & "_plg")
                 'PEP
                 ''Case "PRT"
                   ''i = ChooseOrCreateLine(i, Range(PersType & "_pep_klienta_id").Column)
                   ''Cells(i, Range(PersType & "_pep_klienta_id").Column).value = mycustno
                   ''Call fill_person_abstract(Range(PersType & "_pep_name").Column, i, mycustno, "P", PersType & "_pep")
                 'PIESAISTITAJS
                 ''Case "CRD"
                   ''i = ChooseOrCreateLine(i, Range(PersType & "_piesaistitajs_klienta_id").Column)
                   ''Cells(i, Range(PersType & "_piesaistitajs_klienta_id").Column).value = mycustno
                   ''Call fill_person(Range(PersType & "_piesaistitajs_jp_name").Column, i, mycustno, "J")
                   ''Call fill_person(Range(PersType & "_piesaistitajs_fp_name").Column, i, mycustno, "P")
                 'BENEFICIARY
                 ''Case "BNF"
                   ''i = ChooseOrCreateLine(i, Range(PersType & "_ipasnieks_klienta_id").Column)
                   ''Cells(i, Range(PersType & "_ipasnieks_klienta_id").Column).value = mycustno
                   ''Cells(i, Range(PersType & "_ipasnieks_shares").Column).value = myshare
                   ''Call fill_person(Range(PersType & "_ipasnieks_jp_name").Column, i, mycustno, "J")
                   ''Call fill_person(Range(PersType & "_ipasnieks_fp_name").Column, i, mycustno, "P")
                 ''Case Else
                   ''i = ChooseOrCreateLine(i, Range(PersType & "_saist_pers_klienta_id").Column)
                   ''Cells(i, Range(PersType & "_saist_pers_klienta_id").Column).value = mycustno
                   ''Call fill_person_abstract(Range(PersType & "_saistpers_jp_name").Column, i, mycustno, "J", PersType & "_saistpers")
                   ''Call fill_person(Range(PersType & "_saistpers_fp_name").Column, i, mycustno, "P")
                ''End Select'
     Next element
   End If

 End If
 
End Sub
Attribute VB_Name = "Module3"
'read Phoenix file module

Sub ClearAllData()
  ''ActiveSheet.Cells.Locked = False
  ' Lock some cells here
    Rows("6:1048576").ClearContents

End Sub

Private Function LoadXmlFile(Path As String) As MSXML2.DOMDocument60
    Set LoadXmlFile = New MSXML2.DOMDocument60

    With LoadXmlFile
        .async = False
        .validateOnParse = False
        .resolveExternals = False
        .Load Path
    End With
End Function

Sub ReadPhoenixXML()
  
    If ActiveCell.Column() <> Range("tech_numurs_gada").Column Or ActiveCell.row() < 6 Or ActiveCell.value <> "" Then
      MsgBox ("Wrong Cells")
      Exit Sub
    End If
    
  mywbk = ThisWorkbook.Name
  
  Dim i As Integer
  Dim xml As Object
  Set xml = New MSXML2.DOMDocument60

    XmlNamespaces = "xmlns:ns='http://zinojumi.kd.gov.lv'"
    xml.SetProperty "SelectionNamespaces", XmlNamespaces
    
    xml.Load (Sheets("Parameters").Cells(Range("PhoenixFilePath").row, Range("PhoenixFilePath").Column).value & Sheets("Parameters").Cells(Range("PhoenixFileName").row, Range("PhoenixFileName").Column).value)
     
     
  i = ActiveCell.row()
    
  'veids, gada, datums, grupa
  Cells(i, Range("information_type").Column).value = xml.SelectSingleNode("/ns:informacija/ns:zinojuma_veids").Text
  Cells(i, Range("reporting_year").Column).value = xml.SelectSingleNode("/ns:informacija/ns:zinotaja_gads").Text
  Cells(i, Range("reporting_date").Column).value = xml.SelectSingleNode("/ns:informacija/ns:zinotaja_datums").Text
  Cells(i, Range("reporter_group").Column).value = xml.SelectSingleNode("/ns:informacija/ns:zinotaja_grupa").Text
  
  'kods, bankas dati
  Cells(i, Range("reporter_code").Column).value = xml.SelectSingleNode("/ns:informacija/ns:zinotajs/ns:regularais_zinotajs/ns:zinotaja_kods").Text
  Cells(i, Range("reporter_liksubj_jp_name").Column).value = xml.SelectSingleNode("/ns:informacija/ns:zinotajs/ns:regularais_zinotajs/ns:zinotaja_identifikacija/ns:juridiska_persona/ns:jp_nosaukums").Text
  Cells(i, Range("reporter_liksubj_jp_legal_form").Column).value = xml.SelectSingleNode("/ns:informacija/ns:zinotajs/ns:regularais_zinotajs/ns:zinotaja_identifikacija/ns:juridiska_persona/ns:jp_forma").Text
  Cells(i, Range("reporter_liksubj_jp_registration_number").Column).value = xml.SelectSingleNode("/ns:informacija/ns:zinotajs/ns:regularais_zinotajs/ns:zinotaja_identifikacija/ns:juridiska_persona/ns:jp_reg_nr").Text
  Cells(i, Range("reporter_liksubj_jp_country").Column).value = xml.SelectSingleNode("/ns:informacija/ns:zinotajs/ns:regularais_zinotajs/ns:zinotaja_identifikacija/ns:juridiska_persona/ns:reg_valsts").Text
  Cells(i, Range("reporter_liksubj_jp_swift_code").Column).value = xml.SelectSingleNode("/ns:informacija/ns:zinotajs/ns:regularais_zinotajs/ns:zinotaja_identifikacija/ns:juridiska_persona/ns:swift").Text
  
  'n+1
  Set deals = xml.SelectNodes("/ns:informacija/ns:zinojumi/ns:darijuma_zinojumi/ns:darijuma_zinojums/ns:darijumi/ns:darijums")
  'MsgBox ("deals" & deals.Length)
  Dim tagName As String
  ''Dim Node As IXMLDOMElement
  
  For j = 0 To deals.Length - 1
     ''For k = 0 To deals(j).ChildNodes.Length - 1
  'constants
  Cells(i, Range("number_in_report").Column).value = j
  Cells(i, Range("transaction_or_activity").Column).value = "T"
  
  'numurs gada
  Cells(i, Range("report_number").Column).value = xml.SelectSingleNode("/ns:informacija/ns:zinojumi/ns:darijuma_zinojumi/ns:darijuma_zinojums/ns:darijuma_zinojuma_reg_dati/ns:registracijas_numurs/ns:zinotaja_nr_gada").Text
  Cells(i, Range("tech_numurs_gada").Column).value = xml.SelectSingleNode("/ns:informacija/ns:zinojumi/ns:darijuma_zinojumi/ns:darijuma_zinojums/ns:darijuma_zinojuma_reg_dati/ns:registracijas_numurs/ns:zinotaja_nr_gada").Text
  'Cells(i, Range("tech_deal_number").Column).Value = xml.SelectSingleNode("/ns:informacija/ns:zinojumi/ns:darijuma_zinojumi/ns:darijuma_zinojums/ns:darijuma_zinojuma_reg_dati/ns:registracijas_numurs/ns:zinotaja_nr_gada").Text
  Cells(i, Range("tech_deal_number").Column).value = j
  
  'darijuma iestade swift
  Cells(i, Range("institution_swift").Column).value = deals(j).SelectSingleNode("./ns:darijuma_iestade/ns:darijuma_iestade_swift").Text
  
  'darijuma stavoklis
  Cells(i, Range("transaction_status").Column).value = deals(j).SelectSingleNode("./ns:darijuma_stavoklis").Text
  
  'darijuma_datums
  Cells(i, Range("transaction_date").Column).value = deals(j).SelectSingleNode("./ns:darijuma_datums").Text
  
  Set transactionEndDate = deals(j).SelectSingleNode("./ns:darijuma_beigu_datums")
  If Not transactionEndDate Is Nothing Then
    Cells(i, Range("transaction_end_date").Column).value = transactionEndDate.Text
  End If
  
 'darijuma_veida_kods
 Cells(i, Range("transaction_type_code").Column).value = deals(j).SelectSingleNode("./ns:darijuma_veida_kods").Text
  
 'zinots_vid
 Cells(i, Range("reported_srs").Column).value = deals(j).SelectSingleNode("./ns:zinots_vid").Text
  
 'darijuma_valuta
 Cells(i, Range("transaction_currency").Column).value = deals(j).SelectSingleNode("./ns:darijuma_valuta").Text

 'darijuma_summa
 Cells(i, Range("transaction_amount").Column).value = deals(j).SelectSingleNode("./ns:darijuma_summa").Text

 'sutitajs
 Set sutitajs_klients_banka = deals(j).SelectSingleNode("./ns:sutitajs_klients/ns:sutitajs_klients_banka/ns:sutitajs_swift_kods")
 If Not sutitajs_klients_banka Is Nothing Then
     'sutitaja banka
     Cells(i, Range("sutitajs_swift_code").Column).value = deals(j).SelectSingleNode("./ns:sutitajs_klients/ns:sutitajs_klients_banka/ns:sutitajs_swift_kods").Text
     'sutitaja iban
     Cells(i, Range("sutitajs_bank_account").Column).value = deals(j).SelectSingleNode("./ns:sutitajs_klients/ns:sutitajs_klients_banka/ns:sutitajs_konts").Text
     Cells(i, Range("sutitajs_account_id").Column).value = deals(j).SelectSingleNode("./ns:sutitajs_klients/ns:sutitajs_klients_banka/ns:sutitajs_konts").Text
     'sutitaja konts atverts - datums
     If Not deals(j).SelectSingleNode("./ns:sutitajs_klients/ns:sutitajs_klients_banka/ns:sutitajs_konts_atverts") Is Nothing Then
        Cells(i, Range("sutitajs_account_account_opened").Column).value = deals(j).SelectSingleNode("./ns:sutitajs_klients/ns:sutitajs_klients_banka/ns:sutitajs_konts_atverts").Text
     End If
 End If
 
 'esli jur lico
 Set jp_identifikacija = deals(j).SelectSingleNode("./ns:sutitajs_klients/ns:sutitajs_klients_identifikacija/ns:jp_identifikacija")
 If Not jp_identifikacija Is Nothing Then
    'name, surname, dokuments, adrese
    Cells(i, Range("sutitajs_jp_name").Column).value = deals(j).SelectSingleNode("./ns:sutitajs_klients/ns:sutitajs_klients_identifikacija/ns:jp_identifikacija/ns:sutitajs_jp_nosaukums").Text
    Cells(i, Range("sutitajs_jp_legal_form").Column).value = deals(j).SelectSingleNode("./ns:sutitajs_klients/ns:sutitajs_klients_identifikacija/ns:jp_identifikacija/ns:sutitajs_jp_forma").Text
    Cells(i, Range("sutitajs_jp_registration_country").Column).value = deals(j).SelectSingleNode("./ns:sutitajs_klients/ns:sutitajs_klients_identifikacija/ns:jp_identifikacija/ns:sutitajs_jp_reg_valsts").Text
    Cells(i, Range("sutitajs_jp_registration_number").Column).value = deals(j).SelectSingleNode("./ns:sutitajs_klients/ns:sutitajs_klients_identifikacija/ns:jp_identifikacija/ns:sutitajs_jp_reg_nr").Text
    Cells(i, Range("sutitajs_jp_address_country").Column).value = deals(j).SelectSingleNode("./ns:sutitajs_klients/ns:sutitajs_klients_identifikacija/ns:jp_identifikacija/ns:sutitajs_jp_adr_valsts").Text
    Cells(i, Range("sutitajs_jp_address").Column).value = deals(j).SelectSingleNode("./ns:sutitajs_klients/ns:sutitajs_klients_identifikacija/ns:jp_identifikacija/ns:sutitajs_jp_adr").Text
 End If
  
 'esli fiz lico
 Set fp_identifikacija = deals(j).SelectSingleNode("./ns:sutitajs_klients/ns:sutitajs_klients_identifikacija/ns:fp_identifikacija")
 If Not fp_identifikacija Is Nothing Then
    'name, surname, dokuments, adrese
    Cells(i, Range("sutitajs_fp_name").Column).value = deals(j).SelectSingleNode("./ns:sutitajs_klients/ns:sutitajs_klients_identifikacija/ns:fp_identifikacija/ns:sutitajs_fp_vards").Text
    Set fpSurname = deals(j).SelectSingleNode("./ns:darijums/ns:sutitajs_klients/ns:sutitajs_klients_identifikacija/ns:fp_identifikacija/ns:sutitajs_fp_uzvards")
    If Not fpSurname Is Nothing Then
        Cells(i, Range("sutitajs_fp_surname").Column).value = deals(j).SelectSingleNode("./ns:darijums/ns:sutitajs_klients/ns:sutitajs_klients_identifikacija/ns:fp_identifikacija/ns:sutitajs_fp_uzvards").Text
    End If
    Set fpIdCodeLatvia = deals(j).SelectSingleNode("./ns:sutitajs_klients/ns:sutitajs_klients_identifikacija/ns:fp_identifikacija/ns:sutitajs_fp_dzim_dati/ns:sutitajs_fp_pers_kods_lv")
    If Not fpIdCodeLatvia Is Nothing Then
        Cells(i, Range("sutitajs_fp_id_code_latvia").Column).value = deals(j).SelectSingleNode("./ns:sutitajs_klients/ns:sutitajs_klients_identifikacija/ns:fp_identifikacija/ns:sutitajs_fp_dzim_dati/ns:sutitajs_fp_pers_kods_lv").Text
    End If
    Set passportOrIdNumber = deals(j).SelectSingleNode("./ns:darijums/ns:sutitajs_klients/ns:sutitajs_klients_identifikacija/ns:fp_identifikacija/ns:sutitajs_fp_dok_nr")
    If Not passportOrIdNumber Is Nothing Then
        Cells(i, Range("sutitajs_fp_passport_or_id_number").Column).value = deals(j).SelectSingleNode("./ns:darijums/ns:sutitajs_klients/ns:sutitajs_klients_identifikacija/ns:fp_identifikacija/ns:sutitajs_fp_dok_nr").Text
    End If
    Cells(i, Range("sutitajs_fp_passport_or_id_country").Column).value = deals(j).SelectSingleNode("./ns:sutitajs_klients/ns:sutitajs_klients_identifikacija/ns:fp_identifikacija/ns:sutitajs_fp_dok_valsts").Text
    Cells(i, Range("sutitajs_fp_address_country").Column).value = deals(j).SelectSingleNode("./ns:sutitajs_klients/ns:sutitajs_klients_identifikacija/ns:fp_identifikacija/ns:sutitajs_fp_adr_valsts").Text
    Cells(i, Range("sutitajs_fp_address").Column).value = deals(j).SelectSingleNode("./ns:sutitajs_klients/ns:sutitajs_klients_identifikacija/ns:fp_identifikacija/ns:sutitajs_fp_adr").Text
 End If
  
 'sanemejs
 'sanemeje banka
  If Not deals(j).SelectSingleNode("./ns:sanemejs/ns:sanemejs_banka/ns:sanemejs_swift_kods") Is Nothing Then
    Cells(i, Range("sanemejs_swift_code").Column).value = deals(j).SelectSingleNode("./ns:sanemejs/ns:sanemejs_banka/ns:sanemejs_swift_kods").Text
  End If
  
  'sanemeja iban
   If Not deals(j).SelectSingleNode("./ns:sanemejs/ns:sanemejs_banka/ns:sanemejs_konts") Is Nothing Then
    Cells(i, Range("sanemejs_bank_account").Column).value = deals(j).SelectSingleNode("./ns:sanemejs/ns:sanemejs_banka/ns:sanemejs_konts").Text
    Cells(i, Range("sanemejs_account_id").Column).value = deals(j).SelectSingleNode("./ns:sanemejs/ns:sanemejs_banka/ns:sanemejs_konts").Text
   End If
   
   'sanemeja konts atverts - datums
   If Not deals(j).SelectSingleNode("./ns:sanemejs/ns:sanemejs_banka/ns:sanemejs_konts_atverts") Is Nothing Then
      Cells(i, Range("sanemejs_account_account_opened").Column).value = deals(j).SelectSingleNode("./ns:sanemejs/ns:sanemejs_banka/ns:sanemejs_konts_atverts").Text
   End If

 'esli jur lico
 Set jp_identifikacija = deals(j).SelectSingleNode("./ns:sanemejs/ns:sanemejs_identifikacija/ns:jp_identifikacija")
 If Not jp_identifikacija Is Nothing Then
    'name, surname, dokuments, adrese
    Cells(i, Range("sanemejs_jp_name").Column).value = deals(j).SelectSingleNode("./ns:sanemejs/ns:sanemejs_identifikacija/ns:jp_identifikacija/ns:sanemejs_jp_nosaukums").Text
    Cells(i, Range("sanemejs_jp_legal_form").Column).value = deals(j).SelectSingleNode("./ns:sanemejs/ns:sanemejs_identifikacija/ns:jp_identifikacija/ns:sanemejs_jp_forma").Text
    Cells(i, Range("sanemejs_jp_registration_country").Column).value = deals(j).SelectSingleNode("./ns:sanemejs/ns:sanemejs_identifikacija/ns:jp_identifikacija/ns:sanemejs_jp_reg_valsts").Text
    Cells(i, Range("sanemejs_jp_registration_number").Column).value = deals(j).SelectSingleNode("./ns:sanemejs/ns:sanemejs_identifikacija/ns:jp_identifikacija/ns:sanemejs_jp_reg_nr").Text
    Cells(i, Range("sanemejs_jp_address_country").Column).value = deals(j).SelectSingleNode("./ns:sanemejs/ns:sanemejs_identifikacija/ns:jp_identifikacija/ns:sanemejs_jp_adr_valsts").Text
    Cells(i, Range("sanemejs_jp_address").Column).value = deals(j).SelectSingleNode("./ns:sanemejs/ns:sanemejs_identifikacija/ns:jp_identifikacija/ns:sanemejs_jp_adr").Text
    Set jp_second_address = deals(j).SelectSingleNode("./ns:sanemejs/ns:sanemejs_identifikacija/ns:jp_identifikacija/ns:sanemejs_jp_citas_adreses")
    If Not jp_second_address Is Nothing Then
        Cells(i, Range("sanemejs_jp_second_address_country").Column).value = deals(j).SelectSingleNode("./ns:sanemejs/ns:sanemejs_identifikacija/ns:jp_identifikacija/ns:sanemejs_jp_citas_adreses/ns:sanemejs_jp_sec_adr/ns:sanemejs_jp_sec_adr_valsts").Text
        Cells(i, Range("sanemejs_jp_second_address").Column).value = deals(j).SelectSingleNode("./ns:sanemejs/ns:sanemejs_identifikacija/ns:jp_identifikacija/ns:sanemejs_jp_citas_adreses/ns:sanemejs_jp_sec_adr/ns:sanemejs_jp_sec_adrese").Text
    End If
 End If
 
 'esli fiz lico
 Set fp_identifikacija = deals(j).SelectSingleNode("./ns:sanemejs/ns:sanemejs_identifikacija/ns:fp_identifikacija")
 If Not fp_identifikacija Is Nothing Then
    'name, surname, dokuments, adrese
    Cells(i, Range("sanemejs_fp_name").Column).value = deals(j).SelectSingleNode("./ns:sanemejs/ns:sanemejs_identifikacija/ns:fp_identifikacija/ns:sanemejs_fp_vards").Text
    Cells(i, Range("sanemejs_fp_surname").Column).value = deals(j).SelectSingleNode("./ns:sanemejs/ns:sanemejs_identifikacija/ns:fp_identifikacija/ns:sanemejs_fp_uzvards").Text
    Set idCodeLatvia = deals(j).SelectSingleNode("./ns:sanemejs/ns:sanemejs_identifikacija/ns:fp_identifikacija/ns:sanemejs_fp_dzim_dati/ns:sanemejs_fp_pers_kods_lv")
    If Not idCodeLatvia Is Nothing Then
        Cells(i, Range("sanemejs_fp_id_code_latvia").Column).value = deals(j).SelectSingleNode("./ns:sanemejs/ns:sanemejs_identifikacija/ns:fp_identifikacija/ns:sanemejs_fp_dzim_dati/ns:sanemejs_fp_pers_kods_lv").Text
    End If
    Cells(i, Range("sanemejs_fp_passport_or_id_number").Column).value = deals(j).SelectSingleNode("./ns:sanemejs/ns:sanemejs_identifikacija/ns:fp_identifikacija/ns:sanemejs_fp_dok_nr").Text
    Cells(i, Range("sanemejs_fp_passport_or_id_country").Column).value = deals(j).SelectSingleNode("./ns:sanemejs/ns:sanemejs_identifikacija/ns:fp_identifikacija/ns:sanemejs_fp_dok_valsts").Text
    Cells(i, Range("sanemejs_fp_address_country").Column).value = deals(j).SelectSingleNode("./ns:sanemejs/ns:sanemejs_identifikacija/ns:fp_identifikacija/ns:sanemejs_fp_adr_valsts").Text
    Cells(i, Range("sanemejs_fp_address").Column).value = deals(j).SelectSingleNode("./ns:sanemejs/ns:sanemejs_identifikacija/ns:fp_identifikacija/ns:sanemejs_fp_adr").Text
 End If

 'activity
 'role
 Set activityPersonLoma = deals(j).SelectSingleNode("./ns:cits_dalibnieks/ns:cits_dalibas_loma")
 If Not activityPersonLoma Is Nothing Then
    Cells(i, Range("aktivpers_role").Column).value = deals(j).SelectSingleNode("./ns:cits_dalibnieks/ns:cits_dalibas_loma").Text
 End If
 'activity banka
  ''If Not deals(j).SelectSingleNode("./ns:sanemejs/ns:sanemejs_banka/ns:sanemejs_swift_kods") Is Nothing Then
  ''  Cells(i, Range("sanemejs_swift_code").Column).Value = deals(j).SelectSingleNode("./ns:sanemejs/ns:sanemejs_banka/ns:sanemejs_swift_kods").Text
  ''End If
  
  'activity iban
  '' If Not deals(j).SelectSingleNode("./ns:sanemejs/ns:sanemejs_banka/ns:sanemejs_konts") Is Nothing Then
   '' Cells(i, Range("sanemejs_bank_account").Column).Value = deals(j).SelectSingleNode("./ns:sanemejs/ns:sanemejs_banka/ns:sanemejs_konts").Text
   ''End If
   
   'activity konts atverts - datums
   ''If Not deals(j).SelectSingleNode("./ns:sanemejs/ns:sanemejs_banka/ns:sanemejs_konts_atverts") Is Nothing Then
   ''   Cells(i, Range("sanemejs_account_account_opened").Column).Value = deals(j).SelectSingleNode("./ns:sanemejs/ns:sanemejs_banka/ns:sanemejs_konts_atverts").Text
   ''End If

 'esli jur lico
 Set jp_identifikacija = deals(j).SelectSingleNode("./ns:cits_dalibnieks/ns:cits_dalibn_identifikacija/ns:cits_jp_identifikacija")
 If Not jp_identifikacija Is Nothing Then
    'name, surname, dokuments, adrese
    Cells(i, Range("aktivpers_jp_name").Column).value = deals(j).SelectSingleNode("./ns:cits_dalibnieks/ns:cits_dalibn_identifikacija/ns:cits_jp_identifikacija/ns:cits_jp_nosaukums").Text
    Cells(i, Range("aktivpers_jp_legal_form").Column).value = deals(j).SelectSingleNode("./ns:cits_dalibnieks/ns:cits_dalibn_identifikacija/ns:cits_jp_identifikacija/ns:cits_jp_forma").Text
    Cells(i, Range("aktivpers_jp_registration_country").Column).value = deals(j).SelectSingleNode("./ns:cits_dalibnieks/ns:cits_dalibn_identifikacija/ns:cits_jp_identifikacija/ns:cits_jp_reg_valsts").Text
    Cells(i, Range("aktivpers_jp_registration_number").Column).value = deals(j).SelectSingleNode("./ns:cits_dalibnieks/ns:cits_dalibn_identifikacija/ns:cits_jp_identifikacija/ns:cits_jp_reg_nr").Text
    Cells(i, Range("aktivpers_jp_address_country").Column).value = deals(j).SelectSingleNode("./ns:cits_dalibnieks/ns:cits_dalibn_identifikacija/ns:cits_jp_identifikacija/ns:cits_jp_adr_valsts").Text
    Cells(i, Range("aktivpers_jp_address").Column).value = deals(j).SelectSingleNode("./ns:cits_dalibnieks/ns:cits_dalibn_identifikacija/ns:cits_jp_identifikacija/ns:cits_jp_adr").Text
    Set aktivpers_jp_second_address = deals(j).SelectSingleNode("./ns:cits_dalibnieks/ns:cits_dalibn_identifikacija/ns:cits_jp_identifikacija/ns:cits_jp_citas_adreses")
    If Not aktivpers_jp_second_address Is Nothing Then
        Cells(i, Range("aktivpers_jp_second_address_country").Column).value = deals(j).SelectSingleNode("./ns:cits_dalibnieks/ns:cits_dalibn_identifikacija/ns:cits_jp_identifikacija/ns:cits_jp_citas_adreses/ns:cits_jp_sec_adr/ns:cits_jp_sec_adr_valsts").Text
        Cells(i, Range("aktivpers_jp_second_address").Column).value = deals(j).SelectSingleNode("./ns:cits_dalibnieks/ns:cits_dalibn_identifikacija/ns:cits_jp_identifikacija/ns:cits_jp_citas_adreses/ns:cits_jp_sec_adr/ns:cits_jp_sec_adrese").Text
    End If
 End If
 
 'esli fiz lico
 Set fp_identifikacija = deals(j).SelectSingleNode("./ns:cits_dalibnieks/ns:cits_dalibn_identifikacija/ns:cits_fp_identifikacija")
 If Not fp_identifikacija Is Nothing Then
    'name, surname, dokuments, adrese
    Cells(i, Range("aktivpers_fp_name").Column).value = deals(j).SelectSingleNode("./ns:cits_dalibnieks/ns:cits_dalibn_identifikacija/ns:cits_fp_identifikacija/ns:cits_fp_vards").Text
    Cells(i, Range("aktivpers_fp_surname").Column).value = deals(j).SelectSingleNode("./ns:cits_dalibnieks/ns:cits_dalibn_identifikacija/ns:cits_fp_identifikacija/ns:cits_fp_uzvards").Text
    Set codeLatvia = deals(j).SelectSingleNode("./ns:cits_dalibnieks/ns:cits_dalibn_identifikacija/ns:cits_fp_identifikacija/ns:cits_fp_dzim_dati/ns:cits_fp_pers_kods_lv")
    If Not codeLatvia Is Nothing Then
        Cells(i, Range("aktivpers_fp_id_code_latvia").Column).value = deals(j).SelectSingleNode("./ns:cits_dalibnieks/ns:cits_dalibn_identifikacija/ns:cits_fp_identifikacija/ns:cits_fp_dzim_dati/ns:cits_fp_pers_kods_lv").Text
    End If
    Cells(i, Range("aktivpers_fp_passport_or_id_number").Column).value = deals(j).SelectSingleNode("./ns:cits_dalibnieks/ns:cits_dalibn_identifikacija/ns:cits_fp_identifikacija/ns:cits_fp_dok_nr").Text
    Cells(i, Range("aktivpers_fp_passport_or_id_country").Column).value = deals(j).SelectSingleNode("./ns:cits_dalibnieks/ns:cits_dalibn_identifikacija/ns:cits_fp_identifikacija/ns:cits_fp_dok_valsts").Text
    Cells(i, Range("aktivpers_fp_address_country").Column).value = deals(j).SelectSingleNode("./ns:cits_dalibnieks/ns:cits_dalibn_identifikacija/ns:cits_fp_identifikacija/ns:cits_fp_adr_valsts").Text
    Cells(i, Range("aktivpers_fp_address").Column).value = deals(j).SelectSingleNode("./ns:cits_dalibnieks/ns:cits_dalibn_identifikacija/ns:cits_fp_identifikacija/ns:cits_fp_adr").Text
    Set aktivpers_fp_second_address = deals(j).SelectSingleNode("./ns:cits_dalibnieks/ns:cits_dalibn_identifikacija/ns:cits_fp_identifikacija/ns:cits_fp_citas_adreses")
    If Not aktivpers_fp_second_address Is Nothing Then
        Cells(i, Range("aktivpers_fp_second_address_country").Column).value = deals(j).SelectSingleNode("./ns:cits_dalibnieks/ns:cits_dalibn_identifikacija/ns:cits_fp_identifikacija/ns:cits_fp_citas_adreses/ns:cits_fp_sec_adr/ns:cits_fp_sec_adr_valsts").Text
        Cells(i, Range("aktivpers_fp_second_address").Column).value = deals(j).SelectSingleNode("./ns:cits_dalibnieks/ns:cits_dalibn_identifikacija/ns:cits_fp_identifikacija/ns:cits_fp_citas_adreses/ns:cits_fp_sec_adr/ns:cits_fp_sec_adrese").Text
    End If
 End If
 
    Dim REIBAN As String
    Dim SEIBAN As String
    Dim customerId As Long
    
    REIBAN = Cells(i, Range("sanemejs_account_id").Column).value
    If REIBAN <> "" Then
      customerId = getCustomerByIBAN(REIBAN)
      If Not IsError(customerId) And customerId > 0 Then
        Workbooks(mywbk).Activate
        Cells(i, Range("sanemejs_kl_id").Column).value = customerId
        Call FillOneSideAbstract("sanemejs", i)
      End If
      ''Call updateAccount(IBAN, Range("sanemejs_account_account_type").Column, i)
    End If
  
    SEIBAN = Cells(i, Range("sutitajs_account_id").Column).value
    If SEIBAN <> "" Then
      customerId = getCustomerByIBAN(SEIBAN)
      If Not IsError(customerId) And customerId > 0 Then
        Workbooks(mywbk).Activate
        Cells(i, Range("sutitajs_kl_id").Column).value = customerId
        Call FillOneSideAbstract("sutitajs", i)
      End If
      ''Call updateAccount(IBAN, Range("sutitajs_account_account_type").Column, i)
    End If
    
    If REIBAN <> "" Then
        ''Call updateAccount(REIBAN, Range("sanemejs_account_account_type").Column, i)
    End If
    
    If SEIBAN <> "" Then
        ''Call updateAccount(SEIBAN, Range("sutitajs_account_account_type").Column, i)
    End If
    
    'PLG defaulting
    ''If IsEmpty(Cells(i, Range("sanemejs" & "_plg_ubo_type").Column).value) Then
    ''    Cells(i, Range("sanemejs" & "_plg_ubo_type").Column).value = "noskaidrots"
    ''End If
     
    ''If IsEmpty(Cells(i, Range("sutitajs" & "_plg_ubo_type").Column).value) Then
    ''    Cells(i, Range("sutitajs" & "_plg_ubo_type").Column).value = "noskaidrots"
    ''End If
     
    'PEP defaulting
    ''If IsEmpty(Cells(i, Range("sanemejs_pep_pep_type").Column).value) Then
    ''    Cells(i, Range("sanemejs_pep_pep_type").Column).value = "amatpersona"
    ''End If
     
    ''If IsEmpty(Cells(i, Range("sutitajs_pep_pep_type").Column).value) Then
    ''    Cells(i, Range("sutitajs_pep_pep_type").Column).value = "amatpersona"
    ''End If
    
    'Related with PEP defaulting
    ''If IsEmpty(Cells(i, Range("sutitajs_jp_related_with_pep").column).value) Then
    ''    Cells(i, Range("sutitajs_jp_related_with_pep").column).value = "ne"
    ''End If
    
    ''If IsEmpty(Cells(i, Range("sutitajs_fp_related_with_pep").column).value) Then
    ''    Cells(i, Range("sutitajs_fp_related_with_pep").column).value = "ne"
    ''End If
    
    ''If IsEmpty(Cells(i, Range("sanemejs_jp_related_with_pep").column).value) Then
    ''    Cells(i, Range("sanemejs_jp_related_with_pep").column).value = "ne"
    ''End If
    
    ''If IsEmpty(Cells(i, Range("sanemejs_fp_related_with_pep").column).value) Then
    ''    Cells(i, Range("sanemejs_fp_related_with_pep").column).value = "ne"
    ''End If
     
    ''If IsEmpty(Cells(i, Range("sanemejs_fp_related_with_pep").column).value) Then
    ''    Cells(i, Range("sanemejs_fp_related_with_pep").column).value = "ne"
    ''End If
     
    i = i + 1
  Next
End Sub

Attribute VB_Name = "Module4"
'common routines and servicing routines

Sub fillRanges()

 'bil ispolzovan odin raz dla sozdanij ranges
 For i = 1 To 568
 ThisWorkbook.Names.Add Name:=Cells(1, i).value, RefersTo:=ThisWorkbook.Worksheets("Deal").Cells(i).EntireColumn

Next i
End Sub

Attribute VB_Name = "Module5"
Sub DropDown28_Change()
    If Sheets("Deal").DropDowns(1).ListIndex = 1 Then Range("BE6").Select
    If Sheets("Deal").DropDowns(1).ListIndex = 2 Then Range("CY6").Select
    If Sheets("Deal").DropDowns(1).ListIndex = 3 Then Range("DV6").Select
    If Sheets("Deal").DropDowns(1).ListIndex = 4 Then Range("EK6").Select
    If Sheets("Deal").DropDowns(1).ListIndex = 5 Then Range("EZ6").Select
    If Sheets("Deal").DropDowns(1).ListIndex = 6 Then Range("FX6").Select
    If Sheets("Deal").DropDowns(1).ListIndex = 7 Then Range("GV6").Select
    If Sheets("Deal").DropDowns(1).ListIndex = 8 Then Range("HU6").Select
    If Sheets("Deal").DropDowns(1).ListIndex = 9 Then Range("JO6").Select
    If Sheets("Deal").DropDowns(1).ListIndex = 10 Then Range("KL6").Select
    If Sheets("Deal").DropDowns(1).ListIndex = 11 Then Range("LA6").Select
    If Sheets("Deal").DropDowns(1).ListIndex = 12 Then Range("LP6").Select
    If Sheets("Deal").DropDowns(1).ListIndex = 13 Then Range("MN6").Select
    If Sheets("Deal").DropDowns(1).ListIndex = 14 Then Range("NL6").Select
    
    Sheets("Deal").DropDowns(1).value = 0
End Sub
Attribute VB_Name = "Module6"
Sub updateAccount(ByVal IBAN As String, ByVal columnt_to_start As Long, ByVal row_number As Long)
  If (Cells(ActiveCell.row(), Range("tech_deal_number").Column).value = "") Then
      Cells(ActiveCell.row(), Range("tech_deal_number").Column).value = Cells((ActiveCell.row() - 1), Range("tech_deal_number").Column).value
  Else
    ''If (Cells(ActiveCell.row(), Range("tech_deal_number").column).value <> Cells((ActiveCell.row() - 1), Range("tech_deal_number").column).value) Then
    ''    MsgBox ("Row is already reserved for another transaction.")
    ''    Exit Sub
    ''End If
  End If

  account_wbk_name = check_or_open_file(Sheets("Parameters").Cells(Range("DWHKontiMask").row, Range("DWHKontiMask").Column).value)
  Set my_account_dwh = Workbooks(account_wbk_name).ActiveSheet.Range("C:C").Find(IBAN, LookIn:=xlValues)
  If my_account_dwh Is Nothing Then
     Exit Sub
  End If
  
  mycurr_clmn = columnt_to_start
  customerId = Workbooks(account_wbk_name).ActiveSheet.Cells(my_account_dwh.row, 4).value
  typeAccount = Workbooks(account_wbk_name).ActiveSheet.Cells(my_account_dwh.row, 5).value
  dateStart = Workbooks(account_wbk_name).ActiveSheet.Cells(my_account_dwh.row, 6).value
  dateEnd = Workbooks(account_wbk_name).ActiveSheet.Cells(my_account_dwh.row, 7).value
  accountCurrency = Workbooks(account_wbk_name).ActiveSheet.Cells(my_account_dwh.row, 8).value
  totalBalance = Workbooks(account_wbk_name).ActiveSheet.Cells(my_account_dwh.row, 9).value
  
  Cells(row_number, mycurr_clmn).value = typeAccount
  
  mycurr_clmn = mycurr_clmn + 1
  'skip sub account
  
  mycurr_clmn = mycurr_clmn + 1
  Cells(row_number, mycurr_clmn).value = dateStart
  
  mycurr_clmn = mycurr_clmn + 1
  Cells(row_number, mycurr_clmn).value = dateEnd
  
  mycurr_clmn = mycurr_clmn + 1
  Cells(row_number, mycurr_clmn).value = accountCurrency
  
  mycurr_clmn = mycurr_clmn + 1
  ' skip account open type
  
  mycurr_clmn = mycurr_clmn + 1
  Cells(row_number, mycurr_clmn).value = totalBalance
  
End Sub

Sub updateAccountProxy(ByVal PersType As String)
    
    If ActiveCell.Column() <> Range(PersType & "_account_id").Column Or ActiveCell.row() < 6 Or ActiveCell.value = "" Then
      MsgBox ("Wrong Cells")
      Exit Sub
    End If
    
    Call updateAccount(ActiveCell.value, Range(PersType & "_account_account_type").Column, ActiveCell.row())
    
End Sub

Sub SenderAccount()
 Call updateAccountProxy("sutitajs")
End Sub

Sub ReceiverAccount()
 Call updateAccountProxy("sanemejs")
End Sub
Function getCustomerByIBAN(IBAN As String) As Long
    Dim result As Long
    account_wbk_name = check_or_open_file(Sheets("Parameters").Cells(Range("DWHKontiMask").row, Range("DWHKontiMask").Column).value)
    Set account_set = Workbooks(account_wbk_name).ActiveSheet.Range("C:C").Find(IBAN, LookIn:=xlValues)
    If Not account_set Is Nothing Then
        If Not IsError(Workbooks(account_wbk_name).ActiveSheet.Cells(account_set.row, 4).value) Then
            result = Workbooks(account_wbk_name).ActiveSheet.Cells(account_set.row, 4).value
        End If
        getCustomerByIBAN = result
     End If
    ''End If
End Function
Attribute VB_Name = "Module7"
Sub DropDown35_Change()
    Dim dd As DropDown
    Set dd = Sheets("Deal").DropDowns(2)
    Set r = Sheets("List").Range(dd.ListFillRange)
    
    i = ActiveCell.row()
    If (i < 6) Then
        dd.value = 0
        Exit Sub
    End If
    
    c = ActiveCell.Column()
    active_column = Range("code").Column

    If (c <> active_column) Then
        dd.value = 0
        Exit Sub
    End If
    
    ActiveCell.value = r(dd.value)
    Cells(i, Range("offense_group_code").Column).value = ""
    Cells(i, Range("possible_offense_code").Column).value = ""
    
    If (ActiveCell.value = "A00") Then
        Cells(i, Range("offense_group_code").Column).value = ActiveCell.value
        Cells(i, Range("possible_offense_code").Column).value = "A000"
    End If

    If (ActiveCell.value = "D00") Then
        Cells(i, Range("offense_group_code").Column).value = ActiveCell.value
        Cells(i, Range("possible_offense_code").Column).value = "D000"
    End If
    dd.value = 0
End Sub

'offense_group_code
Sub DropDown36_Change()
    Dim dd As DropDown
    Set dd = Sheets("Deal").DropDowns(3)
    ''Set r = Sheets("List").Range(dd.ListFillRange)
    
    i = ActiveCell.row()
    
    If (i < 6) Then
        dd.value = 0
        Exit Sub
    End If
    
    c = ActiveCell.Column()
    active_column = Range("offense_group_code").Column

    If (c <> active_column) Then
        dd.value = 0
        Exit Sub
    End If
    
    Position = Sheets("Deal").DropDowns(3).ListIndex
    ActiveCell.value = Sheets("List").Cells(Position, 4)
    
    ''ActiveCell.value = r(dd.value)
    
    i = ActiveCell.row()
    
    If (Cells(i, Range("code").Column).value = "A00" Or Cells(i, Range("code").Column).value = "D00") Then
        ActiveCell.value = Cells(i, Range("code").Column).value
    End If
   
    If (ActiveCell.value = "ZZZ") Or (ActiveCell.value = "VVV") Then
        Cells(i, Range("possible_offense_code").Column).value = ActiveCell.value & Left(ActiveCell.value, 1)
    End If
    
    dd.value = 0
    
End Sub
'<possible_offense_code>
Sub DropDown37_Change()
    Dim dd As DropDown
    Set dd = Sheets("Deal").DropDowns(4)
    i = ActiveCell.row()
    
    If (i < 6) Then
        dd.value = 0
        Exit Sub
    End If
    
    c = ActiveCell.Column()
    active_column = Range("possible_offense_code").Column

    If (c <> active_column) Then
        dd.value = 0
        Exit Sub
    End If
    Position = dd.ListIndex
    ActiveCell.value = Sheets("List").Cells(Position, 5)
    ''Set r = Sheets("List").Range(dd.ListFillRange)
    ''ActiveCell.value = r(dd.value)
    i = ActiveCell.row()

    offenceGroupCode = Cells(i, Range("offense_group_code").Column).value
    template = "ZVAD"
    For j = 1 To 4
        If (Left(ActiveCell.value, 1) = Mid(template, j, 1) And Left(offenceGroupCode, 1) <> Mid(template, j, 1)) Then
            ActiveCell.value = ""
        End If
    Next
    dd.value = 0
End Sub
' Typology code
Sub DropDown38_Change()
    Dim dd As DropDown
    Set dd = Sheets("Deal").DropDowns(5)
    i = ActiveCell.row()
    
    If (i < 6) Then
        dd.value = 0
        Exit Sub
    End If
    
    c = ActiveCell.Column()
    active_column = Range("typology_code").Column

    If (c <> active_column And c <> Range("typology_code2").Column And c <> Range("typology_code3").Column) Then
        dd.value = 0
        Exit Sub
    End If
    
    Position = dd.ListIndex
    ActiveCell.value = Sheets("List").Cells(Position, 6)
    ''Set r = Sheets("List").Range(dd.ListFillRange)
    ''ActiveCell.value = r(dd.value)
    i = ActiveCell.row()
    dd.value = 0
End Sub
' Role
Sub DropDown41_Change()
    Dim dd As DropDown
    Set dd = Sheets("Deal").DropDowns(6)
    i = ActiveCell.row()
    
    If (i < 6) Then
        dd.value = 0
        Exit Sub
    End If
    
    c = ActiveCell.Column()
    active_column = Range("role").Column

    If (c <> active_column) Then
        dd.value = 0
        Exit Sub
    End If
    
    Set r = Sheets("ListValue").Range(dd.ListFillRange)
    Position = Sheets("Deal").DropDowns(6).ListIndex
    ActiveCell.value = Sheets("List").Cells(Position, 7)
    i = ActiveCell.row()
    dd.value = 0
End Sub
'is_pep
Sub DropDown42_Change()
    Dim dd As DropDown
    Set dd = Sheets("Deal").DropDowns(7)
    i = ActiveCell.row()
    
    If (i < 6) Then
        dd.value = 0
        Exit Sub
    End If
    
    c = ActiveCell.Column()
    active_column = Range("sutitajs_is_pep").Column

    If (c <> active_column) Then
        dd.value = 0
        Exit Sub
    End If
    
    Set r = Sheets("List").Range(dd.ListFillRange)
    ActiveCell.value = r(dd.value)
    i = ActiveCell.row()
    dd.value = 0
End Sub

Sub DropDown43_Change()
    Dim dd As DropDown
    Set dd = Sheets("Deal").DropDowns(8)
    i = ActiveCell.row()
    
    If (i < 6) Then
        dd.value = 0
        Exit Sub
    End If
    
    c = ActiveCell.Column()
    active_column = Range("sanemejs_is_pep").Column

    If (c <> active_column) Then
        dd.value = 0
        Exit Sub
    End If
    
    Set r = Sheets("List").Range(dd.ListFillRange)
    ActiveCell.value = r(dd.value)
    i = ActiveCell.row()
    dd.value = 0
End Sub

Sub DropDown44_Change()
    Dim dd As DropDown
    Set dd = Sheets("Deal").DropDowns(9)
    i = ActiveCell.row()
    
    If (i < 6) Then
        dd.value = 0
        Exit Sub
    End If
    
    c = ActiveCell.Column()
    active_column = Range("aktivpers_is_pep").Column

    If (c <> active_column) Then
        dd.value = 0
        Exit Sub
    End If
    
    Set r = Sheets("List").Range(dd.ListFillRange)
    ActiveCell.value = r(dd.value)
    i = ActiveCell.row
    dd.value = 0
End Sub
' account_type
Sub DropDown45_Change()
    Dim dd As DropDown
    Set dd = Sheets("Deal").DropDowns(10)
    i = ActiveCell.row()
    
    If (i < 6) Then
        dd.value = 0
        Exit Sub
    End If
    
    c = ActiveCell.Column()
    active_column = Range("sutitajs_account_account_type").Column

    If (c <> active_column) Then
        dd.value = 0
        Exit Sub
    End If

    
    Set r = Sheets("List").Range(dd.ListFillRange)
    ActiveCell.value = r(dd.value)
    i = ActiveCell.row
    dd.value = 0
End Sub

' account_type
Sub DropDown46_Change()
    Dim dd As DropDown
    Set dd = Sheets("Deal").DropDowns(11)
    i = ActiveCell.row()
    
    If (i < 6) Then
        dd.value = 0
        Exit Sub
    End If
    
    c = ActiveCell.Column()
    active_column = Range("sanemejs_account_account_type").Column

    If (c <> active_column) Then
        dd.value = 0
        Exit Sub
    End If
    
    Set r = Sheets("List").Range(dd.ListFillRange)
    ActiveCell.value = r(dd.value)
    i = ActiveCell.row
    dd.value = 0
End Sub

' account_type
Sub DropDown47_Change()
    Dim dd As DropDown
    Set dd = Sheets("Deal").DropDowns(12)
    i = ActiveCell.row()
    
    If (i < 6) Then
        dd.value = 0
        Exit Sub
    End If
    
    c = ActiveCell.Column()
    active_column = Range("aktivpers_account_account_type").Column

    If (c <> active_column) Then
        dd.value = 0
        Exit Sub
    End If
    
    Set r = Sheets("List").Range(dd.ListFillRange)
    ActiveCell.value = r(dd.value)
    i = ActiveCell.row
    dd.value = 0
End Sub
' account_open_type
Sub DropDown50_Change()
    Dim dd As DropDown
    Set dd = Sheets("Deal").DropDowns(13)
    i = ActiveCell.row()
    
    If (i < 6) Then
        dd.value = 0
        Exit Sub
    End If
    
    c = ActiveCell.Column()
    active_column = Range("sutitajs_account_account_open_type").Column

    If (c <> active_column) Then
        dd.value = 0
        Exit Sub
    End If
    
    Set r = Sheets("List").Range(dd.ListFillRange)
    ActiveCell.value = r(dd.value)
    i = ActiveCell.row
    dd.value = 0
End Sub
' account_open_type
Sub DropDown51_Change()
    Dim dd As DropDown
    Set dd = Sheets("Deal").DropDowns(14)
    i = ActiveCell.row()
    
    If (i < 6) Then
        dd.value = 0
        Exit Sub
    End If
    
    c = ActiveCell.Column()
    active_column = Range("sanemejs_account_account_open_type").Column

    If (c <> active_column) Then
        dd.value = 0
        Exit Sub
    End If
    
    Set r = Sheets("List").Range(dd.ListFillRange)
    ActiveCell.value = r(dd.value)
    i = ActiveCell.row
    dd.value = 0
End Sub
' account_open_type
Sub DropDown52_Change()
    Dim dd As DropDown
    Set dd = Sheets("Deal").DropDowns(15)
    i = ActiveCell.row()
    
    If (i < 6) Then
        dd.value = 0
        Exit Sub
    End If
    
    c = ActiveCell.Column()
    active_column = Range("aktivpers_account_account_open_type").Column

    If (c <> active_column) Then
        dd.value = 0
        Exit Sub
    End If
    
    Set r = Sheets("List").Range(dd.ListFillRange)
    ActiveCell.value = r(dd.value)
    i = ActiveCell.row
    dd.value = 0
End Sub
'activity_code
Sub DropDown54_Change()
    Dim dd As DropDown
    Set dd = Sheets("Deal").DropDowns(16)
    i = ActiveCell.row()
    
    If (i < 6) Then
        dd.value = 0
        Exit Sub
    End If
    
    c = ActiveCell.Column()
    active_column = Range("sutitajs_activity_code").Column

    If (c <> active_column And c <> Range("sutitajs_activity_code2").Column And c <> Range("sutitajs_activity_code3").Column) Then
        dd.value = 0
        Exit Sub
    End If
    
    Position = dd.ListIndex
    ActiveCell.value = Sheets("List").Cells(Position, 11)
    ''Set r = Sheets("List").Range(dd.ListFillRange)
    ''ActiveCell.value = r(dd.value)
    i = ActiveCell.row
    dd.value = 0
End Sub
'activity_code
Sub DropDown55_Change()
    Dim dd As DropDown
    Set dd = Sheets("Deal").DropDowns(17)
    i = ActiveCell.row()
    
    If (i < 6) Then
        dd.value = 0
        Exit Sub
    End If
    
    c = ActiveCell.Column()
    active_column = Range("sanemejs_activity_code").Column

    If (c <> active_column And c <> Range("sanemejs_activity_code2").Column And c <> Range("sanemejs_activity_code3").Column) Then
        dd.value = 0
        Exit Sub
    End If
    
    Position = dd.ListIndex
    ActiveCell.value = Sheets("List").Cells(Position, 11)
    ''Set dd = Sheets("Deal").DropDowns(17)
    ''Set r = Sheets("List").Range(dd.ListFillRange)
    ''ActiveCell.value = r(dd.value)
    i = ActiveCell.row
    dd.value = 0
End Sub
'activity_code
Sub DropDown56_Change()
    Dim dd As DropDown
    Set dd = Sheets("Deal").DropDowns(18)
    i = ActiveCell.row()
    
    If (i < 6) Then
        dd.value = 0
        Exit Sub
    End If
    
    c = ActiveCell.Column()
    active_column = Range("aktivpers_activity_code").Column

    If (c <> active_column And c <> Range("aktivpers_activity_code2").Column And c <> Range("aktivpers_activity_code3").Column) Then
        dd.value = 0
        Exit Sub
    End If
    
    Position = dd.ListIndex
    ActiveCell.value = Sheets("List").Cells(Position, 11)
    ''Set r = Sheets("List").Range(dd.ListFillRange)
    ''ActiveCell.value = r(dd.value)
    i = ActiveCell.row
    dd.value = 0
End Sub
'is_connected_with_lv
Sub DropDown58_Change()
    Dim dd As DropDown
    Set dd = Sheets("Deal").DropDowns(19)
    i = ActiveCell.row()
    
    If (i < 6) Then
        dd.value = 0
        Exit Sub
    End If
    
    c = ActiveCell.Column()
    active_column = Range("sutitajs_is_connected_with_lv").Column

    If (c <> active_column) Then
        dd.value = 0
        Exit Sub
    End If
    
    Set r = Sheets("List").Range(dd.ListFillRange)
    ActiveCell.value = r(dd.value)
    i = ActiveCell.row
    dd.value = 0
End Sub
'is_connected_with_lv
Sub DropDown59_Change()
    Dim dd As DropDown
    Set dd = Sheets("Deal").DropDowns(20)
    i = ActiveCell.row()
    
    If (i < 6) Then
        dd.value = 0
        Exit Sub
    End If
    
    c = ActiveCell.Column()
    active_column = Range("sanemejs_is_connected_with_lv").Column

    If (c <> active_column) Then
        dd.value = 0
        Exit Sub
    End If
    
    Set r = Sheets("List").Range(dd.ListFillRange)
    ActiveCell.value = r(dd.value)
    i = ActiveCell.row
    dd.value = 0
End Sub
'is_connected_with_lv
Sub DropDown60_Change()
    Dim dd As DropDown
    Set dd = Sheets("Deal").DropDowns(21)
    i = ActiveCell.row()
    
    If (i < 6) Then
        dd.value = 0
        Exit Sub
    End If
    
    c = ActiveCell.Column()
    active_column = Range("aktivpers_is_connected_with_lv").Column

    If (c <> active_column) Then
        dd.value = 0
        Exit Sub
    End If
    
    Set r = Sheets("List").Range(dd.ListFillRange)
    ActiveCell.value = r(dd.value)
    i = ActiveCell.row
    dd.value = 0
End Sub
' ubo type
Sub DropDown62_Change()
        Dim dd As DropDown
    Set dd = Sheets("Deal").DropDowns(22)
    i = ActiveCell.row()
    
    If (i < 6) Then
        dd.value = 0
        Exit Sub
    End If
    
    c = ActiveCell.Column()
    active_column = Range("sutitajs_plg_ubo_type").Column

    If (c <> active_column) Then
        dd.value = 0
        Exit Sub
    End If
    
    Set r = Sheets("List").Range(dd.ListFillRange)
    ActiveCell.value = r(dd.value)
    i = ActiveCell.row
    dd.value = 0
End Sub
' ubo type
Sub DropDown63_Change()
        Dim dd As DropDown
    Set dd = Sheets("Deal").DropDowns(23)
    i = ActiveCell.row()
    
    If (i < 6) Then
        dd.value = 0
        Exit Sub
    End If
    
    c = ActiveCell.Column()
    active_column = Range("sanemejs_plg_ubo_type").Column

    If (c <> active_column) Then
        dd.value = 0
        Exit Sub
    End If
    
    Set r = Sheets("List").Range(dd.ListFillRange)
    ActiveCell.value = r(dd.value)
    i = ActiveCell.row
    dd.value = 0
End Sub
' ubo type
Sub DropDown64_Change()
    Dim dd As DropDown
    Set dd = Sheets("Deal").DropDowns(24)
    i = ActiveCell.row()
    
    If (i < 6) Then
        dd.value = 0
        Exit Sub
    End If
    
    c = ActiveCell.Column()
    active_column = Range("aktivpers_plg_ubo_type").Column

    If (c <> active_column) Then
        dd.value = 0
        Exit Sub
    End If
    
    Set r = Sheets("List").Range(dd.ListFillRange)
    ActiveCell.value = r(dd.value)
    i = ActiveCell.row
    dd.value = 0
End Sub
'related_group_type
Sub DropDown65_Change()
    Dim dd As DropDown
    Set dd = Sheets("Deal").DropDowns(25)
    i = ActiveCell.row()
    
    If (i < 6) Then
        dd.value = 0
        Exit Sub
    End If
    
    c = ActiveCell.Column()
    active_column = Range("sutitajs_saistpers_related_group_type").Column

    If (c <> active_column) Then
        dd.value = 0
        Exit Sub
    End If
    
    Position = dd.ListIndex
    ActiveCell.value = Sheets("List").Cells(Position, 14)
    
    ''Set r = Sheets("List").Range(dd.ListFillRange)
    ''ActiveCell.value = r(dd.value)
    i = ActiveCell.row
    dd.value = 0
End Sub
'related_group_type
Sub DropDown66_Change()
    Dim dd As DropDown
    Set dd = Sheets("Deal").DropDowns(26)
    i = ActiveCell.row()
    
    If (i < 6) Then
        dd.value = 0
        Exit Sub
    End If
    
    c = ActiveCell.Column()
    active_column = Range("sanemejs_saistpers_related_group_type").Column

    If (c <> active_column) Then
        dd.value = 0
        Exit Sub
    End If
    
    Position = dd.ListIndex
    ActiveCell.value = Sheets("List").Cells(Position, 14)
    
    ''Set r = Sheets("List").Range(dd.ListFillRange)
    ''ActiveCell.value = r(dd.value)
    i = ActiveCell.row
    dd.value = 0
End Sub
'related_group_type
Sub DropDown67_Change()
    Dim dd As DropDown
    Set dd = Sheets("Deal").DropDowns(27)
    i = ActiveCell.row()
    
    If (i < 6) Then
        dd.value = 0
        Exit Sub
    End If
    
    c = ActiveCell.Column()
    active_column = Range("aktivpers_saistpers_related_group_type").Column

    If (c <> active_column) Then
        dd.value = 0
        Exit Sub
    End If
    
    Position = dd.ListIndex
    ActiveCell.value = Sheets("List").Cells(Position, 14)
    
    ''Set r = Sheets("List").Range(dd.ListFillRange)
    ''ActiveCell.value = r(dd.value)
    i = ActiveCell.row
    dd.value = 0
End Sub
'is_outsourced
Sub DropDown69_Change()
    Dim dd As DropDown
    Set dd = Sheets("Deal").DropDowns(28)
    i = ActiveCell.row()
    
    If (i < 6) Then
        dd.value = 0
        Exit Sub
    End If
    
    c = ActiveCell.Column()
    active_column = Range("sutitajs_piesaistitajs_is_outsourced").Column

    If (c <> active_column) Then
        dd.value = 0
        Exit Sub
    End If
    
    Set r = Sheets("List").Range(dd.ListFillRange)
    ActiveCell.value = r(dd.value)
    i = ActiveCell.row
    dd.value = 0
End Sub
'is_outsourced
Sub DropDown70_Change()
    Dim dd As DropDown
    Set dd = Sheets("Deal").DropDowns(29)
    i = ActiveCell.row()
    
    If (i < 6) Then
        dd.value = 0
        Exit Sub
    End If
    
    c = ActiveCell.Column()
    active_column = Range("sanemejs_piesaistitajs_is_outsourced").Column

    If (c <> active_column) Then
        dd.value = 0
        Exit Sub
    End If
    
    Set r = Sheets("List").Range(dd.ListFillRange)
    ActiveCell.value = r(dd.value)
    i = ActiveCell.row
    dd.value = 0
End Sub
'is_outsourced
Sub DropDown71_Change()
    Dim dd As DropDown
    Set dd = Sheets("Deal").DropDowns(30)
    i = ActiveCell.row()
    
    If (i < 6) Then
        dd.value = 0
        Exit Sub
    End If
    
    c = ActiveCell.Column()
    active_column = Range("aktivpers_piesaistitajs_is_outsourced").Column

    If (c <> active_column) Then
        dd.value = 0
        Exit Sub
    End If
    
    Set r = Sheets("List").Range(dd.ListFillRange)
    ActiveCell.value = r(dd.value)
    i = ActiveCell.row
    dd.value = 0
End Sub
'is_client_high_risk
Sub DropDown72_Change()
    Dim dd As DropDown
    Set dd = Sheets("Deal").DropDowns(31)
    i = ActiveCell.row()
    
    If (i < 6) Then
        dd.value = 0
        Exit Sub
    End If
    
    c = ActiveCell.Column()
    active_column = Range("sutitajs_is_client_high_risk").Column

    If (c <> active_column) Then
        dd.value = 0
        Exit Sub
    End If
    
    Set r = Sheets("List").Range(dd.ListFillRange)
    ActiveCell.value = r(dd.value)
    i = ActiveCell.row
    dd.value = 0
End Sub
Sub DropDown73_Change()
    Dim dd As DropDown
    Set dd = Sheets("Deal").DropDowns(32)
    i = ActiveCell.row()
    
    If (i < 6) Then
        dd.value = 0
        Exit Sub
    End If
    
    c = ActiveCell.Column()
    active_column = Range("sanemejs_is_client_high_risk").Column

    If (c <> active_column) Then
        dd.value = 0
        Exit Sub
    End If
    
    Set r = Sheets("List").Range(dd.ListFillRange)
    ActiveCell.value = r(dd.value)
    i = ActiveCell.row
    dd.value = 0
End Sub
Sub DropDown74_Change()
    Dim dd As DropDown
    Set dd = Sheets("Deal").DropDowns(33)
    i = ActiveCell.row()
    
    If (i < 6) Then
        dd.value = 0
        Exit Sub
    End If
    
    c = ActiveCell.Column()
    active_column = Range("aktivpers_is_client_high_risk").Column

    If (c <> active_column) Then
        dd.value = 0
        Exit Sub
    End If
    
    Set r = Sheets("List").Range(dd.ListFillRange)
    ActiveCell.value = r(dd.value)
    i = ActiveCell.row
    dd.value = 0
End Sub
'is_my_client
Sub DropDown75_Change()
    Dim dd As DropDown
    Set dd = Sheets("Deal").DropDowns(34)
    i = ActiveCell.row()
    
    If (i < 6) Then
        dd.value = 0
        Exit Sub
    End If
    
    c = ActiveCell.Column()
    active_column = Range("sutitajs_is_my_client").Column

    If (c <> active_column) Then
        dd.value = 0
        Exit Sub
    End If
    
    Set r = Sheets("List").Range(dd.ListFillRange)
    ActiveCell.value = r(dd.value)
    i = ActiveCell.row
    dd.value = 0
End Sub
Sub DropDown76_Change()
    Dim dd As DropDown
    Set dd = Sheets("Deal").DropDowns(35)
    i = ActiveCell.row()
    
    If (i < 6) Then
        dd.value = 0
        Exit Sub
    End If
    
    c = ActiveCell.Column()
    active_column = Range("sanemejs_is_my_client").Column

    If (c <> active_column) Then
        dd.value = 0
        Exit Sub
    End If
    
    Set r = Sheets("List").Range(dd.ListFillRange)
    ActiveCell.value = r(dd.value)
    i = ActiveCell.row
    dd.value = 0
End Sub
Sub DropDown77_Change()
    Dim dd As DropDown
    Set dd = Sheets("Deal").DropDowns(36)
    i = ActiveCell.row()
    
    If (i < 6) Then
        dd.value = 0
        Exit Sub
    End If
    Set r = Sheets("List").Range(dd.ListFillRange)
    ActiveCell.value = r(dd.value)
    i = ActiveCell.row
End Sub
Sub DropDown78_Change()
    Dim dd As DropDown
    Set dd = Sheets("Deal").DropDowns(37)
    i = ActiveCell.row()
    
    If (i < 6) Then
        dd.value = 0
        Exit Sub
    End If
    
    c = ActiveCell.Column()
    active_column = Range("transaction_place_type").Column

    If (c <> active_column) Then
        dd.value = 0
        Exit Sub
    End If
    
    Set r = Sheets("List").Range(dd.ListFillRange)
    ActiveCell.value = r(dd.value)
    i = ActiveCell.row
    dd.value = 0
End Sub
Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

' InQuest injected base64 decoded content
' .+-6
' j{Kz
' z{b~'
' br*Z
' br*Z
' *'jP
' *'jP
' *'jP
' *'jT
' *'jPZ
' +r.+-

INQUEST-PP=macro
