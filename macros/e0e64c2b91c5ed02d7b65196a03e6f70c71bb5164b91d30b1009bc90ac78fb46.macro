Attribute VB_Name = "NewMacros"
Dim CodigoErro As Long
Dim SalvarLocal As Boolean
Global permissao As Boolean
Global FecharAposSalvar As Boolean
Dim errorCount As Integer

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
''' C|fffd|digos de erro tratados pela macrio
Const ERRO_MyMkDir                      As Long = 1
Const ERRO_ExtractPathname              As Long = 2
Const ERRO_ExtractFilename              As Long = 3
Const ERRO_ExtractFilenameNoExt         As Long = 4
Const ERRO_ExtractExtension             As Long = 5
Const ERRO_SalvarDocumentoLocalmente    As Long = 6
Const ERRO_GetFileBytes                 As Long = 7
Const ERRO_SaveBinaryData               As Long = 8
Const ERRO_EnviarPorFtp                 As Long = 9
Const ERRO_EnviarPorFtp_NaoSalvou       As Long = 10
Const ERRO_EnviarPorFtp_NaoConectou     As Long = 11
Const ERRO_EnviarPorFtp_Desconhecido    As Long = 12
Const ERRO_EnvioPorFtp                  As Long = 13
Const ERRO_ArquivoDigital               As Long = 14
Const ERRO_LogarNoServidor              As Long = 15
Const ERRO_LogarNaRede                  As Long = 16
Const ERRO_EnviarDocumento              As Long = 17
Const ERRO_EnviarDocumento_Resultado    As Long = 18
Const Erro_AnalisarResultadoWS          As Long = 19
Const ERRO_SalvarNoWord                 As Long = 20
Const ERRO_SemPermissaoParaEnviar       As Long = 21

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
''' Estrutura da GUID utilizada por esta macro
Private Type GUID
    Data1 As Long
    Data2 As Integer
    Data3 As Integer
    Data4(7) As Byte
End Type

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
''' Utilizada pelo m|fffd|todo sleep
#If VBA7 Then
    Declare PtrSafe Sub Sleep Lib "kernel32" (ByVal dwMilliseconds As Long)
#Else
    Declare Sub Sleep Lib "kernel32" (ByVal dwMilliseconds As Long)
#End If

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
''' Utilizada para cria|fffd||fffd|o de guids
#If VBA7 Then
    Private Declare PtrSafe Function CoCreateGuid Lib "OLE32.DLL" (pGuid As GUID) As Long
#Else
    Private Declare Function CoCreateGuid Lib "OLE32.DLL" (pGuid As GUID) As Long
#End If

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
''' As fun|fffd||fffd|es InternetOpen, InternetConnect, FtpGetFile, FtpPutFile, InternetCloseHandle
''' s|fffd|o utilizadas para poder enviar um arquivo via FTP sem criar um .bat para invocar o
''' "ftp" do Windows
'Open the Internet object
#If VBA7 Then
 Private Declare PtrSafe Function InternetOpen _
   Lib "wininet.dll" _
     Alias "InternetOpenA" _
       (ByVal sAgent As String, _
        ByVal lAccessType As Long, _
        ByVal sProxyName As String, _
        ByVal sProxyBypass As String, _
        ByVal lFlags As Long) As Long
#Else
 Private Declare Function InternetOpen _
   Lib "wininet.dll" _
     Alias "InternetOpenA" _
       (ByVal sAgent As String, _
        ByVal lAccessType As Long, _
        ByVal sProxyName As String, _
        ByVal sProxyBypass As String, _
        ByVal lFlags As Long) As Long
#End If

'Connect to the network
#If VBA7 Then
 Private Declare PtrSafe Function InternetConnect _
   Lib "wininet.dll" _
     Alias "InternetConnectA" _
       (ByVal hInternetSession As Long, _
        ByVal sServerName As String, _
        ByVal nServerPort As Integer, _
        ByVal sUsername As String, _
        ByVal sPassword As String, _
        ByVal lService As Long, _
        ByVal lFlags As Long, _
        ByVal lContext As Long) As Long
#Else
 Private Declare Function InternetConnect _
   Lib "wininet.dll" _
     Alias "InternetConnectA" _
       (ByVal hInternetSession As Long, _
        ByVal sServerName As String, _
        ByVal nServerPort As Integer, _
        ByVal sUsername As String, _
        ByVal sPassword As String, _
        ByVal lService As Long, _
        ByVal lFlags As Long, _
        ByVal lContext As Long) As Long
#End If

'Get a file using FTP
#If VBA7 Then
 Private Declare PtrSafe Function FtpGetFile _
   Lib "wininet.dll" _
     Alias "FtpGetFileA" _
       (ByVal hFtpSession As Long, _
        ByVal lpszRemoteFile As String, _
        ByVal lpszNewFile As String, _
        ByVal fFailIfExists As Boolean, _
        ByVal dwFlagsAndAttributes As Long, _
        ByVal dwFlags As Long, _
        ByVal dwContext As Long) As Boolean
#Else
 Private Declare Function FtpGetFile _
   Lib "wininet.dll" _
     Alias "FtpGetFileA" _
       (ByVal hFtpSession As Long, _
        ByVal lpszRemoteFile As String, _
        ByVal lpszNewFile As String, _
        ByVal fFailIfExists As Boolean, _
        ByVal dwFlagsAndAttributes As Long, _
        ByVal dwFlags As Long, _
        ByVal dwContext As Long) As Boolean
#End If

'Send a file using FTP
#If VBA7 Then
 Private Declare PtrSafe Function FtpPutFile _
   Lib "wininet.dll" _
     Alias "FtpPutFileA" _
       (ByVal hFtpSession As Long, _
        ByVal lpszLocalFile As String, _
        ByVal lpszRemoteFile As String, _
        ByVal dwFlags As Long, _
        ByVal dwContext As Long) As Boolean
#Else
 Private Declare Function FtpPutFile _
   Lib "wininet.dll" _
     Alias "FtpPutFileA" _
       (ByVal hFtpSession As Long, _
        ByVal lpszLocalFile As String, _
        ByVal lpszRemoteFile As String, _
        ByVal dwFlags As Long, _
        ByVal dwContext As Long) As Boolean
#End If

'Close the Internet object
#If VBA7 Then
 Private Declare PtrSafe Function InternetCloseHandle _
   Lib "wininet.dll" _
     (ByVal hInet As Long) As Integer
#Else
 Private Declare Function InternetCloseHandle _
   Lib "wininet.dll" _
     (ByVal hInet As Long) As Integer
#End If

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
''' Fun|fffd||fffd|o do sistema operacional utilizado para efetuar a c|fffd|pia de arquivos
#If VBA7 Then
Declare PtrSafe Function apiCopyFile Lib "kernel32" Alias "CopyFileA" _
      (ByVal lpExistingFileName As String, _
      ByVal lpNewFileName As String, _
      ByVal bFailIfExists As Long) As Long
#Else
Declare Function apiCopyFile Lib "kernel32" Alias "CopyFileA" _
      (ByVal lpExistingFileName As String, _
      ByVal lpNewFileName As String, _
      ByVal bFailIfExists As Long) As Long
#End If
      
'Public Sub AutoExec()
    'MsgBox "AutoExec"
    'Set oAppClass.oApp = Word.Application
    'oldNoOfOpenDocs = 0
    'FirstNewDoc = True
'End Sub

      
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
''' Copia o arquivo informado para o local passado mesmo que o arquivo j|fffd| esteja em
''' uso pelo sistema operacional
Sub CopyFile(SourceFile As String, DestFile As String)
  Dim Result As Long
   If Dir(SourceFile) = "" Then
      MsgBox Chr(34) & SourceFile & Chr(34) & _
         " is not valid file name."
   Else
      Result = apiCopyFile(SourceFile, DestFile, False)
   End If
End Sub

Const ERRO_MyMkDir                      As Long = 1
Const ERRO_ExtractPathname              As Long = 2
Const ERRO_ExtractFilename              As Long = 3
Const ERRO_ExtractFilenameNoExt         As Long = 4
Const ERRO_ExtractExtension             As Long = 5
Const ERRO_SalvarDocumentoLocalmente    As Long = 6
Const ERRO_GetFileBytes                 As Long = 7
Const ERRO_SaveBinaryData               As Long = 8
Const ERRO_EnviarPorFtp                 As Long = 9
Const ERRO_EnviarPorFtp_NaoSalvou       As Long = 10
Const ERRO_EnviarPorFtp_NaoConectou     As Long = 11
Const ERRO_EnviarPorFtp_Desconhecido    As Long = 12
Const ERRO_EnvioPorFtp                  As Long = 13
Const ERRO_ArquivoDigital               As Long = 14
Const ERRO_LogarNoServidor              As Long = 15
Const ERRO_LogarNaRede                  As Long = 16
Const ERRO_EnviarDocumento              As Long = 17
Const ERRO_EnviarDocumento_Resultado    As Long = 18
Const Erro_AnalisarResultadoWS          As Long = 19
Const ERRO_SalvarNoWord                 As Long = 20

Function ObterMensagemErro(CodigoErro As Long) As String
    Select Case CodigoErro
        Case 1:
            ObterMensagemErro = "Falha ao criar diret|fffd|rio no computador do usu|fffd|rio"
        Case 2:
            ObterMensagemErro = "Falha ao obter caminho do arquivo"
        Case 3:
            ObterMensagemErro = "Falha ao obter nome do arquivo"
        Case 4:
            ObterMensagemErro = "Falha ao obter nome do arquivo sem sua extens|fffd|o"
        Case 5:
            ObterMensagemErro = "Falha ao obter extens|fffd|o do arquivo"
        Case 6:
            ObterMensagemErro = "Falha ao tentar salvar o documento no computador do usu|fffd|rio"
        Case 7:
            ObterMensagemErro = "Falha ao ler o documento manipulado"
        Case 8:
            ObterMensagemErro = "Falha ao salvar dados de m|fffd|quina do documento"
        Case 9:
            ObterMensagemErro = "Falha ao enviar o documento pelo protocolo de transfer|fffd|ncia de arquivos (FTP)"
        Case 10:
            ObterMensagemErro = "Falha ao enviar o documento pelo protocolo de transfer|fffd|ncia de arquivos (FTP): Arquivo n|fffd|o foi salvo ou n|fffd|o foi encontrado na m|fffd|quina do usu|fffd|rio"
        Case 11:
            ObterMensagemErro = "Falha ao enviar o documento pelo protocolo de transfer|fffd|ncia de arquivos (FTP): N|fffd|o foi poss|fffd|vel se conectar ao servidor"
        Case 12:
            ObterMensagemErro = "Falha ao enviar o documento pelo protocolo de transfer|fffd|ncia de arquivos (FTP): Erro desconhecido"
        Case 13:
            ObterMensagemErro = "Falha[2] ao enviar o documento pelo protocolo de transfer|fffd|ncia de arquivos (FTP)"
        Case 14:
            ObterMensagemErro = "Falha ao criar o arquivo digital"
        Case 15:
            ObterMensagemErro = "Falha ao tentar gravar mensagem de erro no servidor"
        Case 16:
            ObterMensagemErro = "Falha ao tentar gravar mensagem de erro pela rede"
        Case 17:
            ObterMensagemErro = "Falha ao tentar enviar o documento para o servi|fffd|o da rede (webservice)"
        Case 18:
            ObterMensagemErro = "Falha ao obter a resposta do servi|fffd|o da rede (webservice): Resposta inesperada"
        Case 19:
            ObterMensagemErro = "Erro ao fazer a an|fffd|lise da resposta enviada pelo servi|fffd|o da rede (webservice)"
        Case 20:
            ObterMensagemErro = "Erro ao tentar salvar as modifica|fffd||fffd|es feitas no documento"
        Case 21:
            ObterMensagemErro = "N|fffd|o foi poss|fffd|vel enviar o documento pois voc|fffd| n|fffd|o tem permiss|fffd|o para faz|fffd|-lo. Por favor baixe novamente o documento atrav|fffd|s do e-TCE e salve-o novamente."
    End Select
End Function

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
''' Salva o array de bytes passado no caminho especificado
Function SaveBinaryData(fileName, ByteArray)
    On Error GoTo SaveBinaryDataError
    
    Const adTypeBinary = 1
    Const adSaveCreateOverWrite = 2
  
    'Create Stream object
    Dim BinaryStream
    Set BinaryStream = CreateObject("ADODB.Stream")
  
    'Specify stream type - we want To save binary data.
    BinaryStream.Type = adTypeBinary
  
    'Open the stream And write binary data To the object
    BinaryStream.Open
    BinaryStream.Write ByteArray
  
    'Save binary data To disk
    BinaryStream.SaveToFile fileName, adSaveCreateOverWrite
    
    Exit Function
    
SaveBinaryDataError:
    CodigoErro = IIf(CodigoErro = 0, ERRO_SaveBinaryData, CodigoErro)
    LancarExcecao CodigoErro, Err.Source, Err.Description, Err.HelpFile, Err.HelpContext
End Function

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
''' Adiciona o texto passado no final do documento
Sub Notificar(MyText As String)
    frmProcessando.SetMessage MyText
    DoEvents
End Sub

Sub LancarExcecao(CodigoErro As Long, Source As String, Description As String, Optional HelpFile As String = "", Optional HelpContext As String = "")
    Err.Raise ObterCodigoErro(CodigoErro), Source, Description, HelpFile, HelpContext
End Sub


Function DownloadFile(ByVal vWebFile As String, ByVal vLocalFile As String) As Boolean
    Dim oXMLHTTP As Object, i As Long, vFF As Long, oResp() As Byte
    
    'You can also set a ref. to Microsoft XML, and Dim oXMLHTTP as MSXML2.XMLHTTP
    Set oXMLHTTP = CreateObject("MSXML2.XMLHTTP")
    'Set WS_REQUEST = CreateObject("WinHttp.WinHttpRequest.5.1")
    oXMLHTTP.Open "GET", vWebFile, False 'Open socket to get the website
    oXMLHTTP.Send 'send request
    
    'Wait for request to finish
    Do While oXMLHTTP.readyState <> 4
        DoEvents
    Loop
    
    oResp = oXMLHTTP.responseBody 'Returns the results as a byte array
    
    'Create local file and save results to it
    vFF = FreeFile
    If Dir(vLocalFile) <> "" Then Kill vLocalFile
    Open vLocalFile For Binary As #vFF
    Put #vFF, , oResp
    Close #vFF
    
    'Clear memory
    Set oXMLHTTP = Nothing
End Function


''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
''' Retorna os bytes do arquivo apontado pelo caminho informado
Function GetFileBytes(ByVal path As String) As Byte()
    On Error GoTo GetFileBytesError
    
    Dim lngFileNum As Long
    Dim bytRtnVal() As Byte
    lngFileNum = FreeFile
    If LenB(Dir(path)) Then ''// Does file exist?
        Open path For Binary Access Read As lngFileNum
        ReDim bytRtnVal(LOF(lngFileNum) - 1&) As Byte
        Get lngFileNum, , bytRtnVal
        Close lngFileNum
    Else
        Err.Raise 53
    End If
    GetFileBytes = bytRtnVal
    Erase bytRtnVal
    
    Exit Function
    
GetFileBytesError:
    CodigoErro = IIf(CodigoErro = 0, ERRO_GetFileBytes, CodigoErro)
    LancarExcecao CodigoErro, Err.Source, Err.Description, Err.HelpFile, Err.HelpContext
End Function

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
''' Codifica os bytes passado em uma string no formato Base64
Function EncodeBase64(ByRef arrData() As Byte) As String
    Set objXML = CreateObject("MSXML2.DOMDocument")
    Set objNode = objXML.createElement("b64")
    
    objNode.DataType = "bin.base64"
    objNode.nodeTypedValue = arrData
    
    EncodeBase64 = objNode.text
 
    Set objNode = Nothing
    Set objXML = Nothing
End Function

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
''' Remove todo o texto do documento passado
Sub LimparTexto(Doc As Document)
    Dim curCharIndex As Integer
    Dim charCount As Integer
    curCharIndex = 1
    charCount = Doc.Characters.Count

    'Apaga todo o texto do documento para exibir os textos de "debug"
    While curCharIndex <= charCount
        Doc.Characters(curCharIndex).Select
        If Selection.Type = wdSelectionNormal Then
            Selection.Delete
            charCount = charCount - 1
        Else
            'Skip it
            curCharIndex = curCharIndex + 1
        End If
    Wend
End Sub

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
''' Lista todas as vari|fffd|veis criadas no documento passado
Sub ListarVariaveis(Doc As Document)
    Dim msg As String
    msg = "Vari|fffd|veis encontradas no documento..." & vbCrLf
    For i = 1 To Doc.Variables.Count
        msg = msg & Doc.Variables(i).Name & ": " & Doc.Variables(i).Value & vbCrLf
        On Error Resume Next
    Next
    
    '''
    'Notificar msg
    '''
End Sub

Function LerVariavel(Doc As Document, nome As String)
    LerVariavel = ThisDocument.CarregarVariavel(nome)
    'For i = 1 To Doc.Variables.Count
    '    If Doc.Variables(i).Name = nome Then
    '        LerVariavel = Doc.Variables(i).Value
    '        Exit Function
    '    End If
    '    On Error Resume Next
    'Next
    'LerVariavel = ""
End Function

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
''' Lista todas as propriedades personalizadas criadas no documento passado
Sub ListarPropriedades(Doc As Document)
    Dim msg As String
    msg = "Propriedades personalizadas encontradas no documento..." & vbCrLf
    For i = 1 To Doc.BuiltInDocumentProperties.Count
        msg = msg & Doc.CustomDocumentProperties(i).Name & ": " & Doc.CustomDocumentProperties(i).Value & vbCrLf
        On Error Resume Next
    Next
    
    '''
    'Notificar msg
    '''
End Sub

Function URLEncode(StringVal As String, Optional SpaceAsPlus As Boolean = False) As String
    'N|fffd|o faz nada
    URLEncode = StringVal
    
    'Dim StringLen As Long: StringLen = Len(StringVal)
    
    'If StringLen > 0 Then
    '    ReDim Result(StringLen) As String
    '    Dim i As Long, CharCode As Integer
    '    Dim Char As String, Space As String
    '
    '    If SpaceAsPlus Then Space = "+" Else Space = "%20"
    '
    '    For i = 1 To StringLen
    '        Char = Mid$(StringVal, i, 1)
    '        CharCode = Asc(Char)
    '        Select Case CharCode
    '            Case 97 To 122, 65 To 90, 48 To 57, 45, 46, 95, 126
    '                Result(i) = Char
    '            Case 32
    '                Result(i) = Space
    '            Case 0 To 15
    '                Result(i) = "%0" & Hex(CharCode)
    '            Case Else
    '                Result(i) = "%" & Hex(CharCode)
    '        End Select
    '    Next i
    '    URLEncode = Join(Result, "")
    'End If
End Function

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
''' Faz um get na URL informada com os par|fffd|metros passados
Function DoGet(eTCEDadosCookie As String, ASPXAuthCookie As String, url As String, codigoAto As String, codigoProtocolo As String, codigoWorkflow As String, anoAto As String, numeroAto As String, tipoAto As String, codigoSituacao As String) As String
    On Error GoTo DoGetError
    
    Dim WS_RESPONSE_TEXT As String
    Dim WS_REQUEST As New WinHttp.WinHttpRequest
    
    Call WS_REQUEST.Open("GET", url & "?codigoAto=" & codigoAto & "&codigoSituacao=" & codigoSituacao & "&anoAto=" & anoAto & "&numeroAto=" & numeroAto & "&tipoAto=" & tipoAto & "&codigoProtocolo=" & codigoProtocolo & "&codigoWorkflow=" & codigoWorkflow, False)
    'WS_REQUEST.SetRequestHeader "Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8"
    'WS_REQUEST.SetRequestHeader "Content-Type", "application/json; charset=utf-8"
    'WS_REQUEST.SetRequestHeader "Cookie", ASPXAuthCookie & "; " & eTCEDadosCookie
    'WS_REQUEST.SetProxy HTTPREQUEST_PROXYSETTING_PROXY, "127.0.0.1:8888"
    WS_REQUEST.Send
    WS_RESPONSE_TEXT = WS_REQUEST.ResponseText
    
    DoGet = WS_RESPONSE_TEXT
    
    Exit Function
    
DoGetError:
    CodigoErro = IIf(CodigoErro = 0, ERRO_EnviarDocumento, CodigoErro)
    LancarExcecao CodigoErro, Err.Source, Err.Description, Err.HelpFile, Err.HelpContext
End Function

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
''' Envia o documento gerado para um webservice
Function EnviarDocumento(eTCEDadosCookie As String, ASPXAuthCookie As String, WS_URL As String, WS_ENVELOPE As String, WS_RESPONSE_TAG As String) As String
    On Error GoTo EnviarDocumentoError
    
    Dim WS_RESPONSE_TEXT As String
    Set WS_REQUEST = CreateObject("WinHttp.WinHttpRequest.5.1")
    'Set WS_RESPONSE_XML = CreateObject("MSXML.DOMDocument")
    Dim WS_DATA As String
    
    Call WS_REQUEST.Open("POST", WS_URL)
    WS_REQUEST.SetRequestHeader "Content-Type", "application/json; charset=utf-8"
    WS_REQUEST.SetRequestHeader "Cookie", eTCEDadosCookie
    WS_REQUEST.SetRequestHeader "Cookie", ASPXAuthCookie
    WS_REQUEST.Send WS_ENVELOPE
    WS_RESPONSE_TEXT = WS_REQUEST.ResponseText
    
    EnviarDocumento = WS_RESPONSE_TEXT
    'WS_RESPONSE_XML.LoadXML WS_RESPONSE_TEXT
    'Set Nodes = WS_RESPONSE_XML.getElementsByTagName(WS_RESPONSE_TAG)
    
    'If Nodes.Length > 0 Then
        'EnviarDocumento = Nodes(0).text
    'Else
        'CodigoErro = IIf(CodigoErro = 0, ERRO_EnviarDocumento_Resultado, CodigoErro)
        'LancarExcecao CodigoErro, "EnviarDocumento", "Resultado inesperado recebido do servidor"
    'End If
    
    Exit Function
    
EnviarDocumentoError:
    CodigoErro = IIf(CodigoErro = 0, ERRO_EnviarDocumento, CodigoErro)
    LancarExcecao CodigoErro, Err.Source, Err.Description, Err.HelpFile, Err.HelpContext
End Function

Function ExtractPathname(fullFileName As String) As String
'"C:\Document\DigitalBooks\Fiction\Filename.doc" returns
'"C:\Document\DigitalBooks\Fiction\"
    On Error GoTo ExtractPathNameError
    ExtractPathname = Left(fullFileName, InStrRev(fullFileName, "\"))
    Exit Function
ExtractPathNameError:
    CodigoErro = IIf(CodigoErro = 0, ERRO_ExtractPathname, CodigoErro)
    Err.Raise ObterCodigoErro(CodigoErro), Err.Source, Err.Description, Err.HelpFile, Err.HelpContext
End Function

Function ExtractFilename(fullFileName As String) As String
'"C:\Document\DigitalBooks\Fiction\Filename.doc" returns "Filename.doc"
    On Error GoTo ExtractFilenameError
    Dim lastBS As Integer
    lastBS = InStrRev(fullFileName, "\")
    ExtractFilename = Right(fullFileName, Len(fullFileName) - lastBS)
    Exit Function
ExtractFilenameError:
    CodigoErro = IIf(CodigoErro = 0, ERRO_ExtractFilename, CodigoErro)
    Err.Raise ObterCodigoErro(CodigoErro), Err.Source, Err.Description, Err.HelpFile, Err.HelpContext
End Function

Function ExtractFilenameNoExt(fullFileName As String) As String
'"C:\Document\DigitalBooks\Fiction\Filename.doc" returns "Filename"
    On Error GoTo ExtractFilenameNoExtError
    Dim lastDot As Integer
    fileName = ExtractFilename(fullFileName)
    lastDot = InStrRev(fileName, ".")
    If lastDot <> 0 Then
        ExtractFilenameNoExt = Left(fileName, lastDot - 1)
    Else
        ExtractFilenameNoExt = fileName
    End If
    Exit Function
ExtractFilenameNoExtError:
    CodigoErro = IIf(CodigoErro = 0, ERRO_ExtractFilenameNoExt, CodigoErro)
    Err.Raise ObterCodigoErro(CodigoErro), Err.Source, Err.Description, Err.HelpFile, Err.HelpContext
End Function

Function ExtractExtension(fullFileName As String) As String
'"C:\Document\DigitalBooks\Fiction\Filename.doc" returns "doc"
    On Error GoTo ExtractExtensionError
    Dim lastDot As Integer
    lastDot = InStrRev(fullFileName, ".")
    If lastDot <> 0 Then
        ExtractExtension = Right(fullFileName, Len(fullFileName) - lastDot)
    Else
        ExtractExtension = ""
    End If
    Exit Function
ExtractExtensionError:
    CodigoErro = IIf(CodigoErro = 0, ERRO_ExtractExtension, CodigoErro)
    Err.Raise ObterCodigoErro(CodigoErro), Err.Source, Err.Description, Err.HelpFile, Err.HelpContext
End Function

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
''' Salva o documento no caminho indicado e cria os diret|fffd|rios que n|fffd|o existirem
Public Sub MyMkDir(sPath As String)
    On Error GoTo MyMkDirError
    Dim iStart As Integer
    Dim aDirs As Variant
    Dim sCurDir As String
    Dim i As Integer
    
    If sPath <> "" Then
        aDirs = Split(sPath, "\")
        If Left(sPath, 2) = "\\" Then
            iStart = 3
        Else
            iStart = 1
        End If
        sCurDir = Left(sPath, InStr(iStart, sPath, "\"))
        For i = iStart To UBound(aDirs)
            sCurDir = sCurDir & aDirs(i) & "\"
            If Dir(sCurDir, vbDirectory) = vbNullString Then
                MkDir sCurDir
            End If
        Next i
    End If
    
    Exit Sub
    
MyMkDirError:
    CodigoErro = IIf(CodigoErro = 0, ERRO_MyMkDir, CodigoErro)
    Err.Raise ObterCodigoErro(CodigoErro), Err.Source, Err.Description, Err.HelpFile, Err.HelpContext
End Sub

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
''' Copia o documento passado para o caminho informado
Function SalvarDocumentoLocalmente(Doc As Document, destino As String) As String
    On Error GoTo SalvarDocumentoLocalmenteError
    
    MyMkDir (ExtractPathname(destino))
        
    Dim newDestino As String
    newDestino = destino
    If Dir(destino) <> "" Then
        Dim caminhoDestino As String
        Dim nomeArquivo As String
        Dim extensaoArquivo As String
        Dim pathPDF As String
        
        caminhoDestino = ExtractPathname(destino)
        nomeArquivo = ExtractFilenameNoExt(destino)
        extensaoArquivo = ExtractExtension(destino)
        
        Dim counter As Integer
        counter = 1
        newDestino = caminhoDestino & "\" & nomeArquivo & " (" & counter & ")." & extensaoArquivo
        pathPDF = caminhoDestino & "\" & nomeArquivo & " (" & counter & ").pdf"
        
        Do While Dir(newDestino) <> ""
           counter = counter + 1
           newDestino = caminhoDestino & "\" & nomeArquivo & " (" & counter & ")." & extensaoArquivo
           pathPDF = caminhoDestino & "\" & nomeArquivo & " (" & counter & ").pdf"
        Loop
    End If
    
    Dim urlPart As String, url As String, urlTranslated As Variant, temp As Variant, nFile As String, pathToSave As String
    url = Doc.FullName
    urlPart = Mid(url, 1, 4)
    
    If urlPart = "http" Then
        nFile = Environ("TEMP") & "\file.docm"
        DownloadFile url, newDestino

        ActiveDocument.SaveAs2 newDestino
        'SaveBinaryData newDestino, GetFileBytes(newDestino)
    Else
        SaveBinaryData newDestino, GetFileBytes(Doc.FullName)
    End If
    
    permissao = True 'indica que n|fffd|s estamos tentando salvar, para n|fffd|o exibir o aviso
    ActiveDocument.SaveAs2 pathPDF, WdSaveFormat.wdFormatPDF
    permissao = False
    SalvarDocumentoLocalmente = newDestino
    
    Exit Function
    
SalvarDocumentoLocalmenteError:
    CodigoErro = IIf(CodigoErro = 0, ERRO_SalvarDocumentoLocalmente, CodigoErro)
    Err.Raise ObterCodigoErro(CodigoErro), Err.Source, Err.Description, Err.HelpFile, Err.HelpContext
End Function

Public Function GetGUID() As String
    Dim udtGUID As GUID

    If (CoCreateGuid(udtGUID) = 0) Then
        GetGUID = _
            String(8 - Len(Hex$(udtGUID.Data1)), "0") & Hex$(udtGUID.Data1) & _
            String(4 - Len(Hex$(udtGUID.Data2)), "0") & Hex$(udtGUID.Data2) & _
            String(4 - Len(Hex$(udtGUID.Data3)), "0") & Hex$(udtGUID.Data3) & _
            IIf((udtGUID.Data4(0) < &H10), "0", "") & Hex$(udtGUID.Data4(0)) & _
            IIf((udtGUID.Data4(1) < &H10), "0", "") & Hex$(udtGUID.Data4(1)) & _
            IIf((udtGUID.Data4(2) < &H10), "0", "") & Hex$(udtGUID.Data4(2)) & _
            IIf((udtGUID.Data4(3) < &H10), "0", "") & Hex$(udtGUID.Data4(3)) & _
            IIf((udtGUID.Data4(4) < &H10), "0", "") & Hex$(udtGUID.Data4(4)) & _
            IIf((udtGUID.Data4(5) < &H10), "0", "") & Hex$(udtGUID.Data4(5)) & _
            IIf((udtGUID.Data4(6) < &H10), "0", "") & Hex$(udtGUID.Data4(6)) & _
            IIf((udtGUID.Data4(7) < &H10), "0", "") & Hex$(udtGUID.Data4(7))
    End If

End Function

Function EnviarPorFtp(Doc As Document, caminhoArquivo As String, caminhoArquivoFTP As String, ServerName As String, UserName As String, Password As String) As String
    On Error GoTo EnviarPorFtpError
    
    Dim INet As Long
    Dim INetConn As Long
    Dim hostFile As String
    Dim localFile As String
    Dim retVal As Long
    Dim Success As Long
    Dim currentFileAndPath As String

    Const ASCII_TRANSFER = 1
    Const BINARY_TRANSFER = 2

    localFile = caminhoArquivo
    hostFile = caminhoArquivoFTP
    
    If Len(Doc.path) = 0 Then
        Err.Raise ERRO_EnviarPorFtp_NaoSalvou, "EnviarPorFtp", "|fffd| preciso salvar o arquivo localmente antes de enviar por FTP"
    End If

    retVal = False
    INet = InternetOpen("eTCE Word to FTP Control", 1&, vbNullString, vbNullString, 0&)
    If INet > 0 Then
        INetConn = InternetConnect(INet, ServerName, 0&, UserName, Password, 1&, 0&, 0&)
        If INetConn > 0 Then
            Success = FtpPutFile(INetConn, Replace(Replace(localFile, ".docm", ".pdf"), ".docx", ".pdf"), Replace(hostFile, ".docm", ".pdf"), BINARY_TRANSFER, 0&)
            Success = FtpPutFile(INetConn, localFile, hostFile, BINARY_TRANSFER, 0&)
            retVal = InternetCloseHandle(INetConn)
        End If
        retVal = InternetCloseHandle(INet)
    Else
        Err.Raise ERRO_EnviarPorFtp_NaoConectou, "EnviarPorFtp", "N|fffd|o foi poss|fffd|vel se conectar ao servidor"
    End If
    
    If Success <> 0 Then
        EnviarPorFtp = hostFile
        Exit Function
    Else
        Err.Raise ERRO_EnviarPorFtp_Desconhecido, "EnviarPorFtp", "Erro desconhecido ao enviar"
    End If
    
    Exit Function
    
EnviarPorFtpError:
    CodigoErro = IIf(CodigoErro = 0, ERRO_EnviarPorFtp, CodigoErro)
    LancarExcecao CodigoErro, Err.Source, Err.Description, Err.HelpFile, Err.HelpContext
End Function

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
''' M|fffd|todo invocado sempre que o usu|fffd|rio clica em salvar ou pressiona CTRL+B (ou CTRL+S)
Sub FileSave()
    frmProcessando.Show vbModal
    Notificar "Iniciando..."
End Sub

Function ObterCodigoErro(code As Long)
    ObterCodigoErro = vbObjectError + 512 + code
End Function

Public Sub ApagarDocumento(path As String)
    Dim retVal
    Dim cmd As String
    cmd = "c:\windows\system32\cmd.exe /C ping 127.0.0.1 -n 3 > nul & DEL /F /Q """ & path & """"
    retVal = Shell(cmd, vbHide)
End Sub

Function SalvarDocumento()
reprocessar:
    CodigoErro = ERRO_SalvarNoWord 'sup|fffd|e que vai haver erro
    On Error GoTo TratarErro
    
    ''Verifica se pode enviar o documento
    Notificar "Verificando permiss|fffd|o para enviar o documento..."
    Dim WS_eTCEDadosCookie As String
    Dim WS_ASPXAuthCookie As String
    Dim WS_URL As String
    Dim GET_RESULT As String
    Dim codigoAto As String
    Dim codigoProtocolo As String
    Dim codigoWorkflow As String
    Dim anoAto As String
    Dim numeroAto As String
    Dim tipoAto As String
    Dim codigoSituacao As String
    codigoAto = LerVariavel(ActiveDocument, "CodigoAto")
    anoAto = LerVariavel(ActiveDocument, "AnoAto")
    numeroAto = LerVariavel(ActiveDocument, "NumeroAto")
    tipoAto = LerVariavel(ActiveDocument, "TipoAto")
    codigoSituacao = LerVariavel(ActiveDocument, "CodigoSituacao")
    codigoProtocolo = LerVariavel(ActiveDocument, "CodigoProtocolo")
    codigoWorkflow = LerVariavel(ActiveDocument, "CodigoWorkflow")
    WS_URL = LerVariavel(ActiveDocument, "UrlService")
    WS_ASPXAuthCookie = LerVariavel(ActiveDocument, "ASPXAuthCookie")
    WS_eTCEDadosCookie = LerVariavel(ActiveDocument, "eTCEDadosCookie")
    GET_RESULT = DoGet(WS_eTCEDadosCookie, WS_ASPXAuthCookie, WS_URL, codigoAto, codigoProtocolo, codigoWorkflow, anoAto, numeroAto, tipoAto, codigoSituacao)
    
    If GET_RESULT <> "true" Then
        Notificar "Erro: Voc|fffd| n|fffd|o tem permiss|fffd|o para enviar o documento. Baixe-o novamente atrav|fffd|s do e-TCE."
        frmProcessando.Habilitar
        Exit Function
    End If
   
    ''Se puder salvar continua
    If Not ActiveDocument.ReadOnly Then
        ActiveDocument.Save
    Else
        ActiveDocument.Saved = True
    End If
    CodigoErro = 0 'n|fffd|o ocorreu erro, limpa
    
    Dim WS_CodigoProtocolo As String
    Dim WS_CodigoAto As String
    
    WS_CodigoAto = LerVariavel(ActiveDocument, "CodigoAto")
    WS_CodigoProtocolo = LerVariavel(ActiveDocument, "CodigoProtocolo")
    
    Dim CAMINHO_LOCAL As String
    CAMINHO_LOCAL = LerVariavel(ActiveDocument, "CaminhoLocal")
    Dim ARQUIVO_LOCAL As String
    ARQUIVO_LOCAL = CAMINHO_LOCAL & WS_CodigoProtocolo & "\Ato.docm"
        
    'Salva o arquivo em um caminho pr|fffd| determinado
    Notificar "Salvando documento localmente..."
    ARQUIVO_LOCAL = SalvarDocumentoLocalmente(ActiveDocument, ARQUIVO_LOCAL)
    ActiveDocument.Saved = True

    Notificar "Documento salvo!"
        
    Dim CAMINHO_FTP As String
    Dim SERVIDOR_FTP As String
    Dim USUARIO_FTP As String
    Dim SENHA_FTP As String
    Dim RESULTADO_FTP As String
    
    CAMINHO_FTP = LerVariavel(ActiveDocument, "CaminhoFTP")
    SERVIDOR_FTP = LerVariavel(ActiveDocument, "ServidorFTP")
    USUARIO_FTP = LerVariavel(ActiveDocument, "UsuarioFTP")
    SENHA_FTP = LerVariavel(ActiveDocument, "SenhaFTP")

    'Envia o documento para o FTP
    Notificar "Enviando documento para o servidor..."
    RESULTADO_FTP = EnviarPorFtp(ActiveDocument, _
        ARQUIVO_LOCAL, _
        CAMINHO_FTP, _
        SERVIDOR_FTP, _
        USUARIO_FTP, _
        SENHA_FTP)
    If RESULTADO_FTP <> "" Then
        Notificar "Envio conclu|fffd|do!"
    Else
        LancarExcecao ERRO_EnvioPorFtp, "Envio por FTP", RESULTADO_FTP
    End If
    
    ''Envia o documento para um webservice
    'Dim WS_FormName As String
    'Dim WS_MethodName As String
    'Dim WS_Role As String
    
    'Dim WS_CodigoWorkflow As String
    'Dim WS_IdentificadorUsuario As String
    
    'Dim WS_eTCEDadosCookie As String
    'Dim WS_ASPXAuthCookie As String
    
    'WS_ASPXAuthCookie = LerVariavel(ActiveDocument, "eTCEDadosCookie")
    'WS_eTCEDadosCookie = LerVariavel(ActiveDocument, "ASPXAuthCookie")
    'WS_FormName = LerVariavel(ActiveDocument, "_FormName")
    'WS_MethodName = LerVariavel(ActiveDocument, "_MethodName")
    'WS_Role = LerVariavel(ActiveDocument, "_Role")
    'WS_CodigoWorkflow = LerVariavel(ActiveDocument, "CodigoWorkflow")
    'WS_IdentificadorUsuario = LerVariavel(ActiveDocument, "IdentificadorUsuario")
    
    'Dim WS_JSON As String
    'WS_JSON = LerVariavel(ActiveDocument, "JsonString")
    'WS_JSON = Replace(WS_JSON, "{COD_PROTOCOLO}", WS_CodigoProtocolo)
    'WS_JSON = Replace(WS_JSON, "{COD_ATO}", WS_CodigoAto)
    'WS_JSON = Replace(WS_JSON, "{CAMINHO_ARQUIVO}", RESULTADO_FTP)
    'WS_JSON = Replace(WS_JSON, "{CODIGO_USUARIO}", WS_IdentificadorUsuario)
    'WS_JSON = Replace(WS_JSON, "{COD_WORKFLOW}", WS_CodigoWorkflow)
    
    'Dim WS_URL As String
    'Dim WS_ENVELOPE As String
    'Dim WS_RESULTNODE As String

    'WS_URL = LerVariavel(ActiveDocument, "UrlService")
    'WS_ENVELOPE = LerVariavel(ActiveDocument, "EnvelopeService")
    'WS_RESULTNODE = LerVariavel(ActiveDocument, "NoResultadoService")
    
    'WS_ENVELOPE = Replace(WS_ENVELOPE, "{0}", WS_JSON)
    'WS_ENVELOPE = Replace(WS_ENVELOPE, "{1}", WS_IdentificadorUsuario)
    'WS_ENVELOPE = Replace(WS_ENVELOPE, "{2}", RESULTADO_FTP)
    
    'Dim WS_RESPOSTA As String
    'Notificar "Criando documento no banco..."
    'WS_RESPOSTA = EnviarDocumento(WS_eTCEDadosCookie, WS_ASPXAuthCookie, WS_URL, WS_ENVELOPE, WS_RESULTNODE)
        
    'Faz o parse do json enviado pelo webservice
    'CodigoErro = Erro_AnalisarResultadoWS 'define um c|fffd|digo de erro supondo que vai ocorrer algo
    'Dim ScriptEngine As Object
    'Set ScriptEngine = CreateObject("ScriptControl")
    'ScriptEngine.Language = "JScript"
    'ScriptEngine.AddCode "function getErros(jsonObj) { " & _
        '"var msg = '';" & _
        '"for ( var i = 0; i < jsonObj.Fields.length; ++i ) { " & _
            '"var field = jsonObj.Fields[i];" & _
            '"if (!field.Valid) { " & _
                '"msg += field.id + ': ' + field.msg + '\n';" & _
            '"}" & _
        '"}" & _
        '"return msg;" & _
    '"} "
    
    'Dim JsonObject As Object
    'Set JsonObject = ScriptEngine.Eval("(" + WS_RESPOSTA + ")")
    CodigoErro = 0 'limpa o c|fffd|digo de erro foi executou ok
    
    Dim FieldsCount As Integer
    Dim erro As String
    'erro = ScriptEngine.Run("getErros", JsonObject)
    If erro <> "" Then
        Err.Raise ObterCodigoErro(ERRO_ArquivoDigital), "Cria|fffd||fffd|o de Arquivo Digital", erro
    End If
    
    'Notificar "Pronto"
    Notificar "Conclu|fffd|do!"
    frmProcessando.Finalizar
    
    If FecharAposSalvar Then
        Application.Run "ApagarDocumento", ActiveDocument.FullName
        ActiveDocument.Saved = True
        If Application.Documents.Count > 1 Then
            ActiveDocument.Close (False)
        Else
            Application.Quit (False)
        End If
    Else
        Exit Function
    End If

TratarErro:
    If errorCount < 50 Then
        errorCount = errorCount + 1
        GoTo reprocessar
    End If
    errorCount = 0

    frmProcessando.Finalizar
    Notificar "Ocorreu um erro ao enviar o documento. Mensagem de erro: " & ObterMensagemErro(CodigoErro)
    LogarErroNoServidor ActiveDocument, Err.Description, Err.number, Err.Source
    Exit Function
End Function

Function GetProperty(ByVal JsonObject As Object, ByVal propertyName As String) As Variant
    GetProperty = ScriptEngine.Run("getProperty", JsonObject, propertyName)
End Function

Function GetObjectProperty(ByVal JsonObject As Object, ByVal propertyName As String) As Object
    Set GetObjectProperty = ScriptEngine.Run("getProperty", JsonObject, propertyName)
End Function

Function GetKeys(ByVal JsonObject As Object) As String()
    Dim Length As Integer
    Dim KeysArray() As String
    Dim KeysObject As Object
    Dim Index As Integer
    Dim key As Variant

    Set KeysObject = ScriptEngine.Run("getKeys", JsonObject)
    Length = GetProperty(KeysObject, "length")
    ReDim KeysArray(Length - 1)
    Index = 0
    For Each key In KeysObject
        KeysArray(Index) = key
        Index = Index + 1
    Next
    GetKeys = KeysArray
End Function

Sub LogarErroNoServidor(Doc As Document, Description As String, number As Long, Source As String)
    On Error GoTo TentarNaRede
    'Envia o documento para um webservice
    Dim WS_URL As String
    Dim WS_ENVELOPE As String
    Dim WS_RESULTNODE As String
    Dim WS_eTCEDadosCookie As String
    Dim WS_ASPXAuthCookie As String
    
    WS_ASPXAuthCookie = LerVariavel(Doc, "eTCEDadosCookie")
    WS_eTCEDadosCookie = LerVariavel(Doc, "ASPXAuthCookie")

    Dim MSG_ERRO As String
    MSG_ERRO = GerarTextoExcecao(Description, number, Source, Doc, True)
    WS_URL = LerVariavel(ActiveDocument, "UrlService")
    WS_ENVELOPE = "<soap:Envelope xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xmlns:xsd=""http://www.w3.org/2001/XMLSchema"" xmlns:soap=""http://schemas.xmlsoap.org/soap/envelope/""><soap:Body><NotificarErroDoWord xmlns=""http://tempuri.org/""><valor>{0}</valor></NotificarErroDoWord></soap:Body></soap:Envelope>"
    WS_RESULTNODE = "NotificarErroDoWordResult"
    
    WS_ENVELOPE = Replace(WS_ENVELOPE, "{0}", MSG_ERRO)
    
    Dim WS_RESPOSTA As String
    Dim WS_RESPONSE_TEXT As String
    Set WS_REQUEST = CreateObject("WinHttp.WinHttpRequest.5.1")
    Set WS_RESPONSE_XML = CreateObject("MSXML.DOMDocument")
    Dim WS_DATA As String
    
    Call WS_REQUEST.Open("POST", WS_URL)
    WS_REQUEST.SetRequestHeader "Content-Type", "text/xml; charset=utf-8"
    WS_REQUEST.SetRequestHeader "Cookie", WS_eTCEDadosCookie
    WS_REQUEST.SetRequestHeader "Cookie", WS_ASPXAuthCookie
    WS_REQUEST.Send WS_ENVELOPE
    WS_RESPONSE_TEXT = WS_REQUEST.ResponseText
    
    WS_RESPONSE_XML.LoadXML WS_RESPONSE_TEXT
    Set Nodes = WS_RESPONSE_XML.getElementsByTagName(WS_RESPONSE_TAG)
    
    If Nodes(0).text <> "" Then
        Err.Raise ObterCodigoErro(ERRO_LogarNoServidor), "Logar Erro no Servidor - " & Nodes(0).text, GerarTextoExcecao(Description, number, Source, Doc)
    Else
        Exit Sub
    End If
TentarNaRede:
    LogarErroNaRede ActiveDocument, Err.Description, Err.number, Err.Source
    Exit Sub
End Sub

Sub LogarErroNaRede(Doc As Document, Description As String, number As Long, Source As String)
    On Error GoTo TentarLocal
    'Err.Raise ObterCodigoErro(LogarNaRedeErro), "Logar Erro na Rede", GerarTextoExcecao(description, number, source, doc)
    
    Dim CaminhoParaSalvar As String
    CaminhoParaSalvar = LerVariavel(Doc, "ExCaminhoRedeParaSalvar")
    CaminhoParaSalvar = Replace(CaminhoParaSalvar, "{0}", GetGUID())
    
    Dim fso As Object
    Set fso = CreateObject("Scripting.FileSystemObject")
    Dim oFile As Object
    Set oFile = fso.CreateTextFile(CaminhoParaSalvar)
    oFile.Write GerarTextoExcecao(Description, number, Source, Doc, True)
    oFile.Close
    Set fso = Nothing
    Set oFile = Nothing
    
    Exit Sub
    
TentarLocal:
    LogarErroLocal ActiveDocument, Err.Description, Err.number, Err.Source
    Exit Sub
End Sub

Sub LogarErroLocal(Doc As Document, Description As String, number As Long, Source As String)
    'On Error GoTo Fim
    Dim CaminhoParaSalvar As String
    CaminhoParaSalvar = LerVariavel(Doc, "ExCaminhoLocalParaSalvar")
    CaminhoParaSalvar = CaminhoParaSalvar & "\" & GetGUID() & ".log"
    
    Dim fso As Object
    Set fso = CreateObject("Scripting.FileSystemObject")
    Dim oFile As Object
    Set oFile = fso.CreateTextFile(CaminhoParaSalvar)
    oFile.Write GerarTextoExcecao(Description, number, Source, Doc, True)
    oFile.Close
    Set fso = Nothing
    Set oFile = Nothing
    
    frmProcessando.SetArquivoErro (CaminhoParaSalvar)
    
    Exit Sub
    
'Fim:
    'MsgBox "Erro: '" & erro.Description & "'. Codigo: '" & erro.Number & "'"
End Sub

Function GerarTextoExcecao(Description As String, number As Long, Source As String, Doc As Document, Optional detalhes As Boolean = False) As String
    Dim Texto As String
    Texto = Texto & "------------------------------------------------------------------------" & vbCrLf
    Texto = Texto & "Detalhes do Erro:" & vbCrLf
    Texto = Texto & "------------------------------------------------------------------------" & vbCrLf
    Texto = Texto & "Description: " & Description & vbCrLf
    Texto = Texto & "Number: " & number & vbCrLf
    If Source <> "" Then
        Texto = Texto & "------------------------------------------------------------------------" & vbCrLf
        Texto = Texto & "Detalhes do Erro Interno:" & vbCrLf
        Texto = Texto & Source & vbCrLf
    End If
    If detalhes Then
        Texto = Texto & "------------------------------------------------------------------------" & vbCrLf
        Texto = Texto & "Snapshot do Documento:" & vbCrLf
        Texto = Texto & "------------------------------------------------------------------------" & vbCrLf
        Texto = Texto & "Caminho onde o documento foi salvo: " & LerVariavel(Doc, "CaminhoLocal") & vbCrLf
        Texto = Texto & "Caminho para salvar no FTP: " & LerVariavel(Doc, "CaminhoFTP") & vbCrLf
        Texto = Texto & "Endere|fffd|o do Servidor FTP: " & LerVariavel(Doc, "ServidorFTP") & vbCrLf
        Texto = Texto & "Usu|fffd|rio do FTP: " & LerVariavel(Doc, "UsuarioFTP") & vbCrLf
        Texto = Texto & "Senha do FTP: " & LerVariavel(Doc, "SenhaFTP") & vbCrLf
        Texto = Texto & "Cookie eTCEDADOS: " & LerVariavel(Doc, "eTCEDadosCookie") & vbCrLf
        Texto = Texto & "Cookie ASPXAuth: " & LerVariavel(Doc, "ASPXAuthCookie") & vbCrLf
        Texto = Texto & "Form Name: " & LerVariavel(Doc, "_FormName") & vbCrLf
        Texto = Texto & "Method Name: " & LerVariavel(Doc, "_MethodName") & vbCrLf
        Texto = Texto & "Role: " & LerVariavel(Doc, "_Role") & vbCrLf
        Texto = Texto & "C|fffd|digo do Protocolo: " & LerVariavel(Doc, "CodigoProtocolo") & vbCrLf
        Texto = Texto & "C|fffd|digo do Ato: " & LerVariavel(Doc, "CodigoAto") & vbCrLf
        Texto = Texto & "C|fffd|digo do Workflow: " & LerVariavel(Doc, "CodigoWorkflow") & vbCrLf
        Texto = Texto & "Identificador do Usu|fffd|rio: " & LerVariavel(Doc, "IdentificadorUsuario") & vbCrLf
        Texto = Texto & "String JSON: " & LerVariavel(Doc, "JsonString") & vbCrLf
        Texto = Texto & "Url do Webservice: " & LerVariavel(Doc, "UrlService") & vbCrLf
        Texto = Texto & "Envelope do Webservice: " & LerVariavel(Doc, "EnvelopeService") & vbCrLf
        Texto = Texto & "No de Resultado do Webservice: " & LerVariavel(Doc, "NoResultadoService") & vbCrLf
        Texto = Texto & "------------------------------------------------------------------------" & vbCrLf
        Texto = Texto & "Configura|fffd||fffd|es de Exce|fffd||fffd|es:" & vbCrLf
        Texto = Texto & "------------------------------------------------------------------------" & vbCrLf
        Texto = Texto & "Caminho local para salvar: " & LerVariavel(Doc, "ExCaminhoLocalParaSalvar") & vbCrLf
        Texto = Texto & "Caminho na rede para salvar: " & LerVariavel(Doc, "ExCaminhoRedeParaSalvar")
    End If
    
    GerarTextoExcecao = Texto
End Function
Attribute VB_Name = "ThisDocument"
Attribute VB_Base = "1Normal.ThisDocument"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = True
Attribute VB_Customizable = True
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
''' Utilizada pelo m|fffd|todo sleep
#If VBA7 Then
    Private Declare PtrSafe Sub Sleep Lib "kernel32" (ByVal dwMilliseconds As Long)
#Else
    Private Declare Sub Sleep Lib "kernel32" (ByVal dwMilliseconds As Long)
#End If


Dim Variaveis
Dim oAppClass As New oAppClass

Public Function CarregarVariavel(nome As String)
    If Variaveis Is Nothing Then
        CarregarVariavel = ""
        Exit Function
    End If
    
    If Variaveis.Exists(LCase(nome)) Then
        CarregarVariavel = Variaveis.Item(LCase(nome))
    Else
        CarregarVariavel = ""
    End If
End Function

Private Function LerVariavelDoDocumento(Doc As Document, nome As String)
    For i = 1 To Doc.Variables.Count
        If Doc.Variables(i).Name = nome Then
            LerVariavelDoDocumento = Doc.Variables(i).Value
            Exit Function
        End If
        On Error Resume Next
    Next
    LerVariavelDoDocumento = ""
End Function

Private Sub ArmazenarVariavel(nome As String, valor As String)
    If Variaveis.Exists(LCase(nome)) Then
        Variaveis.Remove (LCase(nome))
    End If
    
    Variaveis.Add LCase(nome), valor
End Sub

Private Sub SalvarVariaveis(Doc As Document)
    ArmazenarVariavel "WS_CodigoAto", LerVariavelDoDocumento(Doc, "CodigoAto")
    ArmazenarVariavel "CodigoAto", LerVariavelDoDocumento(Doc, "CodigoAto")
    ArmazenarVariavel "AnoAto", LerVariavelDoDocumento(Doc, "AnoAto")
    ArmazenarVariavel "CodigoSituacao", LerVariavelDoDocumento(Doc, "CodigoSituacao")
    ArmazenarVariavel "TipoAto", LerVariavelDoDocumento(Doc, "TipoAto")
    ArmazenarVariavel "NumeroAto", LerVariavelDoDocumento(Doc, "NumeroAto")
    ArmazenarVariavel "WS_CodigoProtocolo", LerVariavelDoDocumento(Doc, "CodigoProtocolo")
    ArmazenarVariavel "CodigoProtocolo", LerVariavelDoDocumento(Doc, "CodigoProtocolo")
    ArmazenarVariavel "CAMINHO_LOCAL", LerVariavelDoDocumento(Doc, "CaminhoLocal")
    ArmazenarVariavel "CaminhoLocal", LerVariavelDoDocumento(Doc, "CaminhoLocal")
    ArmazenarVariavel "CAMINHO_FTP", LerVariavelDoDocumento(Doc, "CaminhoFTP")
    ArmazenarVariavel "CaminhoFTP", LerVariavelDoDocumento(Doc, "CaminhoFTP")
    ArmazenarVariavel "SERVIDOR_FTP", LerVariavelDoDocumento(Doc, "ServidorFTP")
    ArmazenarVariavel "ServidorFTP", LerVariavelDoDocumento(Doc, "ServidorFTP")
    ArmazenarVariavel "USUARIO_FTP", LerVariavelDoDocumento(Doc, "UsuarioFTP")
    ArmazenarVariavel "UsuarioFTP", LerVariavelDoDocumento(Doc, "UsuarioFTP")
    ArmazenarVariavel "SENHA_FTP", LerVariavelDoDocumento(Doc, "SenhaFTP")
    ArmazenarVariavel "SenhaFTP", LerVariavelDoDocumento(Doc, "SenhaFTP")
    ArmazenarVariavel "WS_ASPXAuthCookie", LerVariavelDoDocumento(Doc, "eTCEDadosCookie")
    ArmazenarVariavel "eTCEDadosCookie", LerVariavelDoDocumento(Doc, "eTCEDadosCookie")
    ArmazenarVariavel "WS_eTCEDadosCookie", LerVariavelDoDocumento(Doc, "ASPXAuthCookie")
    ArmazenarVariavel "ASPXAuthCookie", LerVariavelDoDocumento(Doc, "ASPXAuthCookie")
    ArmazenarVariavel "WS_FormName", LerVariavelDoDocumento(Doc, "_FormName")
    ArmazenarVariavel "_FormName", LerVariavelDoDocumento(Doc, "_FormName")
    ArmazenarVariavel "WS_MethodName", LerVariavelDoDocumento(Doc, "_MethodName")
    ArmazenarVariavel "_MethodName", LerVariavelDoDocumento(Doc, "_MethodName")
    ArmazenarVariavel "WS_Role", LerVariavelDoDocumento(Doc, "_Role")
    ArmazenarVariavel "_Role", LerVariavelDoDocumento(Doc, "_Role")
    ArmazenarVariavel "WS_CodigoWorkflow", LerVariavelDoDocumento(Doc, "CodigoWorkflow")
    ArmazenarVariavel "CodigoWorkflow", LerVariavelDoDocumento(Doc, "CodigoWorkflow")
    ArmazenarVariavel "WS_IdentificadorUsuario", LerVariavelDoDocumento(Doc, "IdentificadorUsuario")
    ArmazenarVariavel "IdentificadorUsuario", LerVariavelDoDocumento(Doc, "IdentificadorUsuario")
    ArmazenarVariavel "WS_JSON", LerVariavelDoDocumento(Doc, "JsonString")
    ArmazenarVariavel "JsonString", LerVariavelDoDocumento(Doc, "JsonString")
    ArmazenarVariavel "WS_URL", LerVariavelDoDocumento(Doc, "UrlService")
    ArmazenarVariavel "UrlService", LerVariavelDoDocumento(Doc, "UrlService")
    ArmazenarVariavel "WS_RESULTNODE", LerVariavelDoDocumento(Doc, "NoResultadoService")
    ArmazenarVariavel "NoResultadoService", LerVariavelDoDocumento(Doc, "NoResultadoService")
    ArmazenarVariavel "WS_ENVELOPE", LerVariavelDoDocumento(Doc, "EnvelopeService")
    ArmazenarVariavel "EnvelopeService", LerVariavelDoDocumento(Doc, "EnvelopeService")
    ArmazenarVariavel "CaminhoParaSalvarRede", LerVariavelDoDocumento(Doc, "ExCaminhoRedeParaSalvar")
    ArmazenarVariavel "ExCaminhoRedeParaSalvar", LerVariavelDoDocumento(Doc, "ExCaminhoRedeParaSalvar")
    ArmazenarVariavel "CaminhoParaSalvarLocal", LerVariavelDoDocumento(Doc, "ExCaminhoLocalParaSalvar")
    ArmazenarVariavel "ExCaminhoLocalParaSalvar", LerVariavelDoDocumento(Doc, "ExCaminhoLocalParaSalvar")
End Sub

Private Sub EscreverVariavel(Doc As Document, nome As String, valor As String)
    For i = 1 To Doc.Variables.Count
        If Doc.Variables(i).Name = nome Then
            Doc.Variables(i).Value = valor
            Exit Sub
        End If
        On Error Resume Next
    Next
End Sub

Private Sub LimparVariaveis(Doc As Document)
    EscreverVariavel Doc, "CodigoAto", ""
    EscreverVariavel Doc, "CodigoProtocolo", ""
    EscreverVariavel Doc, "CaminhoLocal", ""
    EscreverVariavel Doc, "CaminhoFTP", ""
    EscreverVariavel Doc, "ServidorFTP", ""
    EscreverVariavel Doc, "UsuarioFTP", ""
    EscreverVariavel Doc, "SenhaFTP", ""
    EscreverVariavel Doc, "eTCEDadosCookie", ""
    EscreverVariavel Doc, "ASPXAuthCookie", ""
    EscreverVariavel Doc, "_FormName", ""
    EscreverVariavel Doc, "_MethodName", ""
    EscreverVariavel Doc, "_Role", ""
    EscreverVariavel Doc, "CodigoWorkflow", ""
    EscreverVariavel Doc, "IdentificadorUsuario", ""
    EscreverVariavel Doc, "JsonString", ""
    EscreverVariavel Doc, "UrlService", ""
    EscreverVariavel Doc, "EnvelopeService", ""
    EscreverVariavel Doc, "NoResultadoService", ""
    EscreverVariavel Doc, "UrlService", ""
    EscreverVariavel Doc, "ExCaminhoRedeParaSalvar", ""
    EscreverVariavel Doc, "ExCaminhoLocalParaSalvar", ""
    
    EscreverVariavel Doc, "AnoAto", ""
    EscreverVariavel Doc, "TipoAto", ""
    EscreverVariavel Doc, "NumeroAto", ""
    EscreverVariavel Doc, "CodigoSituacao", ""
End Sub

Private Sub Document_New()

End Sub

Private Sub Document_Open()
    Sleep 500
    
    Set Variaveis = CreateObject("Scripting.Dictionary")
    SalvarVariaveis ActiveDocument
    LimparVariaveis ActiveDocument
    
    FecharAposSalvar = False
    SalvarLocal = (CarregarVariavel("DeveSalvar") = "true") 'SalvarLocal = (LerVariavel(ActiveDocument, "DeveSalvar") = "true")
    
    On Error GoTo ErrHandler
    
    ActiveDocument.Saved = False

    Dim url As String, urlPart As String
    Dim lastBS As Integer, fileName As String
    Dim arrayUrl As Variant, urlLimpa As String
    Set oAppClass.oApp = Word.Application
    
    url = ActiveDocument.FullName
    urlPart = Mid$(url, 1, 4)
        
    If urlPart = "http" Then
        permissao = True
        
        arrayUrl = Split(url, "?")
        urlLimpa = arrayUrl(0)
        lastBS = InStrRev(urlLimpa, "/")
        fileName = Right(urlLimpa, Len(urlLimpa) - lastBS)
       
        ActiveDocument.SaveAs2 Environ("TEMP") & "\" & fileName
    End If
    
ErrHandler:
    If Err <> 0 Then
        Sleep 2000
        Err.Clear
        Resume
    End If
    
    'Dim x As Variant
    'x = Shell("c:\Windows\System32\regsvr32.exe c:\Windows\SysWOW64\msscript.ocx", vbHide)
    
    'MsgBox "Document_Open"
End Sub
Attribute VB_Name = "frmProcessando"
Attribute VB_Base = "0{AB97C85A-D5D6-476E-8700-66E1F767991A}{CE4F9701-B0E1-4516-9EF3-98B33CFC0D8F}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private ArquivoErro As String

Private Sub btnFechar_Click()
    Me.Hide
End Sub

Private Sub lblViewFile_Click()
    Dim retorno As Integer
    If ArquivoErro <> "" Then
        retorno = Shell("C:\WINDOWS\notepad.exe " & ArquivoErro, vbNormalFocus)
    End If
End Sub

Private Sub UserForm_Activate()
    Me.MousePointer = fmMousePointerHourGlass
    Me.btnFechar.Enabled = False
    Me.lblViewFile.Visible = False
    Call SalvarDocumento
End Sub

Public Sub SetArquivoErro(arquivo As String)
    ArquivoErro = arquivo
    Me.lblViewFile.Visible = True
End Sub

Public Sub SetMessage(msg As String)
    Me.lblStatus.Caption = msg
End Sub

Public Sub Habilitar()
    Me.btnFechar.Enabled = True
    Me.MousePointer = 0
End Sub

Public Sub Finalizar()
    Me.Habilitar
    Me.Hide
End Sub
Attribute VB_Name = "oAppClass"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Public WithEvents oApp As Word.Application
Attribute oApp.VB_VarHelpID = -1

Private Function LerVariavel(Doc As Document, nome As String)
    For i = 1 To Doc.Variables.Count
        If Doc.Variables(i).Name = nome Then
            LerVariavel = Doc.Variables(i).Value
            Exit Function
        End If
        On Error Resume Next
    Next
    LerVariavel = ""
End Function

Private Sub oApp_DocumentBeforeClose(ByVal Doc As Document, Cancel As Boolean)
    On Error GoTo oApp_DocumentBeforeCloseError
    If Me.oApp.MacroContainer.Name = Doc.Name Then
        If Not Doc.Saved Then
            Cancel = True
            If SalvarLocal Then
                MsgBox "Por favor salve o documento antes de fech|fffd|-lo."
            Else
                Select Case MsgBox("Deseja salvar as altera|fffd||fffd|es no arquivo?", vbYesNoCancel, "Microsoft Word")
                    Case vbYes
                        FecharAposSalvar = True
                        frmProcessando.Show vbModal
                        Notificar "Iniciando..."
                        SalvarDocumento
                    Case vbNo
                        Application.Run "ApagarDocumento", Doc.FullName
                        Doc.Saved = True
                        If Application.Documents.Count > 1 Then
                            Doc.Close (False)
                        Else
                            Application.Quit (False)
                        End If
                    Case 3
                        'Faz nada
                End Select
            End If
        Else
            Application.Run "ApagarDocumento", Doc.FullName
        End If
    End If
oApp_DocumentBeforeCloseError:
End Sub

Private Sub oApp_DocumentBeforeSave(ByVal Doc As Document, SaveAsUI As Boolean, Cancel As Boolean)
    If Me.oApp.MacroContainer.Name = Doc.Name Then
        If SaveAsUI And permissao = False And SalvarLocal Then
            MsgBox "Por favor salve o documento clicando em 'Salvar'"
            Cancel = True
        End If
    End If
End Sub


INQUEST-PP=macro
