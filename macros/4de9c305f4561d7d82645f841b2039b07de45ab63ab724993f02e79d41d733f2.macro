Attribute VB_Name = "ASN"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
' code written by Mateusz Milewski
'
' mateusz.milewski@ gm.com
' FireFlakeHybrid
'
'
' ClassModule ASN
' ===============
'
' class for transit electronic document
' most of are O'Sea vessels
' have interaface from ITransit only as well as PUS type

Implements ITransit

Private route As String
Private iNAME As String
Private QTY As Long
Private DELIVERY_DATE As Date
Private DELIVERY_TIME As Date
Private SDATE As Date
Private kontener As String
Private st As String


Private not_yet_received As Boolean
Private out_of_scope As Boolean
Private on_pop As Boolean
Private on_prosl As Boolean



Sub Class_Initialize()
    not_yet_received = True
    out_of_scope = False
End Sub

Private Property Let ITransit_mDeliveryDate(RHS As Date)
    DELIVERY_DATE = RHS
End Property

Private Property Get ITransit_mDeliveryDate() As Date
    ITransit_mDeliveryDate = DELIVERY_DATE
End Property

Private Property Let ITransit_mDeliveryTime(RHS As Date)
    DELIVERY_TIME = RHS
End Property

Private Property Get ITransit_mDeliveryTime() As Date
    ITransit_mDeliveryTime = DELIVERY_TIME
End Property

Private Property Let ITransit_mName(RHS As String)
    iNAME = CStr(RHS)
End Property

Private Property Get ITransit_mName() As String
    ITransit_mName = iNAME
End Property

Private Property Let ITransit_mNotYetReceived(RHS As Boolean)
    not_yet_received = RHS
End Property

Private Property Get ITransit_mNotYetReceived() As Boolean
    ITransit_mNotYetReceived = not_yet_received
End Property

Private Property Let ITransit_mOnPop(RHS As Boolean)
    on_pop = RHS
End Property

Private Property Get ITransit_mOnPop() As Boolean
    ITransit_mOnPop = on_pop
End Property

Private Property Let ITransit_mOnProsl(RHS As Boolean)
    on_prosl = RHS
End Property

Private Property Get ITransit_mOnProsl() As Boolean
    ITransit_mOnProsl = on_prosl
End Property

Private Property Let ITransit_mOutOfScope(RHS As Boolean)
    out_of_scope = RHS
End Property

Private Property Get ITransit_mOutOfScope() As Boolean
    ITransit_mOutOfScope = out_of_scope
End Property

Private Property Let ITransit_mPickupDate(RHS As Date)
    SDATE = RHS
End Property

Private Property Get ITransit_mPickupDate() As Date
    ITransit_mPickupDate = SDATE
End Property

Private Property Let ITransit_mPickupTime(RHS As Date)
    
End Property

Private Property Get ITransit_mPickupTime() As Date
    ITransit_mPickupTime = CDate("00:00")
End Property

Private Property Let ITransit_mQty(RHS As Long)
    QTY = RHS
End Property

Private Property Get ITransit_mQty() As Long
    ITransit_mQty = QTY
End Property

Private Property Let ITransit_mRoute(RHS As String)
    route = RHS
End Property

Private Property Get ITransit_mRoute() As String
    ITransit_mRoute = route
End Property

Private Property Let ITransit_mST(RHS As String)
    st = CStr(RHS)
End Property

Private Property Get ITransit_mST() As String
    ITransit_mST = CStr(st)
End Property

Private Property Let ITransit_mTRLR(RHS As String)
    kontener = CStr(RHS)
End Property

Private Property Get ITransit_mTRLR() As String
    ITransit_mTRLR = CStr(kontener)
End Property

Private Property Let ITransit_mTTLessThan24h(RHS As Boolean)
    ITransit_mTTLessThan24h = RHS
End Property

Private Property Get ITransit_mTTLessThan24h() As Boolean
    ITransit_mTTLessThan24h = False
End Property
Attribute VB_Name = "Arkusz1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "CheckBox1, 3, 0, MSForms, CheckBox"
Sub CheckBox1_Click()

End Sub
Attribute VB_Name = "Coverage"
Global Sessions As Object
Global System As Object
Global Sess0 As Object

' delay time
Declare Sub Sleep Lib "kernel32" (ByVal dwMilliseconds As Long)

Sub mgoInit()
    Set System = CreateObject("EXTRA.System")   ' Gets the system object
    Set Sessions = System.Sessions
    Set Sess0 = System.activeSession
End Sub
Sub waitForMgo()
    Do
        DoEvents
    Loop Until Sess0.screen.OIA.XStatus = 0
End Sub

Function MgoMonth(CurrDate) As Integer
    Select Case CurrDate
        Case "JA"
            MgoMonth = 1
        Case "FE"
            MgoMonth = 2
        Case "MR"
            MgoMonth = 3
        Case "AP"
            MgoMonth = 4
        Case "MY"
            MgoMonth = 5
        Case "JN"
            MgoMonth = 6
        Case "JL"
            MgoMonth = 7
        Case "AU"
            MgoMonth = 8
        Case "SE"
            MgoMonth = 9
        Case "OC"
            MgoMonth = 10
        Case "NO"
            MgoMonth = 11
        Case "DE"
            MgoMonth = 12
    End Select
End Function

Sub ProgressIncrease()
        If StatusBox.ProgressBar.Value = StatusBox.ProgressBar.max Then
            StatusBox.ProgressBar.max = StatusBox.ProgressBar.max + 1
        End If
        StatusBox.ProgressBar.Value = StatusBox.ProgressBar.Value + 1
End Sub
Attribute VB_Name = "ListMaker"
Sub ListMaker()
    ' MsgBox "make list test procedure"
    MakeListForm.show
End Sub

Sub clearlist()
    inner_clearlist
End Sub

Sub inner_clearlist()


    If Sheets("Parts").FilterMode = True Then
        Sheets("Parts").ShowAllData
    End If
    Sheets("Parts").Range("A2:F1048576").Clear
    Sheets("Parts").Range("A2:F1048576").ClearComments
End Sub
Function makelistaftershow(m As MGO, pop As MS9POP00, Optional ByRef start As Range, Optional fu As String, Optional a As String, Optional plt As String) As Range

    Dim i As Integer
    i = 0

    
    m.sendKeys "<Clear>"
    m.sendKeys "ms9pop00 <Enter>"
    
    
    pop.DS = MakeListForm.TextBoxDS
    If fu <> "" Then
        pop.F_U = fu
    End If
    
    If MakeListForm.TextBoxDUNS <> "" Then
        pop.DUNS = MakeListForm.TextBoxDUNS
    End If
    
    If a <> "" Then
        pop.a = a
    End If
    pop.firstDOH = MakeListForm.TextBoxDOH1
    pop.secDOH = MakeListForm.TextBoxDOH2
    If plt = "" Then
        m.putString ThisWorkbook.Sheets("register").Range("makelistregion").Value, 3, 5
    Else
        m.putString CStr(plt), 3, 13
    End If
    m.sendKeys "<Enter>"
    
    Do
        
        
        If Trim(pop.plt) <> "" Then
            start = pop.plt
            start.Offset(0, 1) = pop.pn
            If pop.transQTY(0) <> "" Then
                cmnt_string = "First PUS/ASN on MS9POP00: " & Chr(10) & _
                "QTY: " & CStr(pop.transQTY(0)) & Chr(10) & _
                "CONTAINER: " & CStr(pop.transCONT(0)) & Chr(10) & _
                "SDATE: " & CStr(pop.transSDATE(0)) & Chr(10) & _
                "EDA: " & CStr(pop.transEDA(0)) & Chr(10) & _
                "ETA: " & CStr(pop.transETA(0)) & Chr(10) & _
                "CMNT: " & CStr(pop.transCMNT(0)) & Chr(10) & _
                "ETA: " & CStr(pop.transETA(0)) & Chr(10) & _
                "DUNS: " & CStr(pop.transDUNS(0)) & Chr(10) & _
                "ROUTE: " & CStr(pop.transROUTE(0)) & Chr(10)
                
            End If

            i = 0
        Else
            start = "null"
            start.Offset(0, 1) = "null"
        End If
        
        MakeListStatusForm.LabelStatus = "PN: " & CStr(start.Value) & ", PLT: " & CStr(start.Offset(0, 1).Value)
        
        m.sendKeys "<pf8>"
        
        If m.getString(23, 2, 5) = "I4028" Then
            i = i + 1
        End If
        
        If m.getString(23, 2, 5) = "I4265" Then
            Set start = start.Offset(1, 0)
            Exit Do
        End If
        
        If i > MAKE_LIST_TIMES_F8 Then
            Set start = start.Offset(1, 0)
            Exit Do
        End If
        
        Set start = start.Offset(1, 0)
        
    Loop While True
    
    
    Set makelistaftershow = start
    
    
End Function

Function check_is_the_end(ByRef i As Integer)

    If i < 5 Then
        
    Else
        check_is_the_end = False
    End If
End Function


Attribute VB_Name = "MGO"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sessions As Object
Private System As Object
Private Sess0 As Object


Private screens_collection As Collection

Private scr_ms9pop00 As MS9POP00
Private scr_ms9po400 As MS9PO400
Private scr_zk7pwrqm As ZK7PWRQM
Private scr_zk7pdrqm As ZK7PDRQM
Private scr_zk7ppus0 As ZK7PPUS0
Private scr_ms9ph100 As MS9PH100
Private scr_ms7p5200 As MS7P5200
Private scr_zk7ppum0 As ZK7PPUM0
Private scr_zk7pprul As ZK7PPRUL
Private scr_zk7pprhr As ZK7PPRHR
Private scr_zk7ppud0 As ZK7PPUD0
Private scr_zk7prosl As ZK7PROSL

Public Sub refresh()
    
    Set System = CreateObject("EXTRA.System")   ' Gets the system object
    Set Sessions = System.Sessions
    Set Sess0 = System.activeSession
End Sub

Sub Class_Initialize()
    Set System = CreateObject("EXTRA.System")   ' Gets the system object
    Set Sessions = System.Sessions
    Set Sess0 = System.activeSession
    
    Set scr_ms9pop00 = New MS9POP00
    scr_ms9pop00.sesja = Sess0
    waitForMgo
    
    Set scr_ms9po400 = New MS9PO400
    scr_ms9po400.sesja = Sess0
    waitForMgo
    
    Set scr_zk7pwrqm = New ZK7PWRQM
    scr_zk7pwrqm.sesja = Sess0
    waitForMgo
    
    Set scr_zk7pdrqm = New ZK7PDRQM
    scr_zk7pdrqm.sesja = Sess0
    waitForMgo
    
    Set scr_zk7ppus0 = New ZK7PPUS0
    scr_zk7ppus0.sesja = Sess0
    waitForMgo
    
    Set scr_ms9ph100 = New MS9PH100
    scr_ms9ph100.sesja = Sess0
    waitForMgo
    
    Set scr_ms7p5200 = New MS7P5200
    scr_ms7p5200.sesja = Sess0
    waitForMgo
    
    Set scr_zk7ppum0 = New ZK7PPUM0
    scr_zk7ppum0.sesja = Sess0
    waitForMgo
    
    Set scr_zk7pprul = New ZK7PPRUL
    scr_zk7pprul.sesja = Sess0
    waitForMgo
    
    Set scr_zk7pprhr = New ZK7PPRHR
    scr_zk7pprhr.sesja = Sess0
    waitForMgo
    
    Set scr_zk7ppud0 = New ZK7PPUD0
    scr_zk7ppud0.sesja = Sess0
    waitForMgo
    
    Set scr_zk7prosl = New ZK7PROSL
    scr_zk7prosl.sesja = Sess0
    waitForMgo
    
End Sub

Sub Class_Terminate()
    Set System = Nothing
    Set Sessions = Nothing
    Set Sess0 = Nothing
End Sub


Public Property Let actualScreen(RHS As String)

End Property

Public Property Get actualScreen() As String
    actualScreen = Sess0.screen.getString(1, 2, 8)
End Property

Public Function convertToDateFromMgoLongDate(long_date As String) As Date

End Function

Public Function convertToDateFromMgoShortDate(short_date As String) As Date
    
End Function

Public Function convertToDateFromMS9PO400Date(ms9po400_date As String) As Date

    ' format daty dla scr MS9PO400 -    ' 27MR12
    ' -----------------------------------------------------------YEAR----------------------------------------MONTH-------------------------------------------------------YEAR-------------------------------
    convertToDateFromMS9PO400Date = CDate(CStr(2000 + Int(Right(ms9po400_date, 2))) & "-" & CStr(FromMGOMonth(Right(Left(ms9po400_date, 4), 2))) & "-" & CStr(Int(Left(ms9po400_date, 2))))
End Function

Public Function convertToDateFromMS9POP00Date(ms9pop00_date As String) As Date

End Function

Public Function convertToDateFromZK7PDRQMDate(zk7pdrqm_date As String) As Date

' instrukcja warunkowa wynika z powodu braku roku na ekranie zk7pdrqm i przez to program musi sam sie domyslec
' ze faktycznie nastapila zmiana roku- sam rozwiazalem to tak ze zazwyczaj dzieje sie tak nie dobrze, gdy chcemy
' stworzyc teardown nachodzi to na nowy rok, ale my jako ludzie zobaczymy tylko i wylacznie ze zaczynamy z powrotem
' od stycznia... postanowi|fffd|em zatem zostawic na stale ten sam rok i w przyapdku gdy przejdziemy do stycznia
' i sprawdzimy warunkiem to tak jakbysmy sie cofneli w czasie- cofniecie w czasie algorytm potraktuje jako co|fffd| osobliwego
' zgodnie z trywialnym zalozeniem doda plus jeden do aktualnego roku
'
'
'
' na dzien 4 maja 2012


    'Debug.Print CStr(Format(Now, "yyyy"))
    'Debug.Print CStr(FromMGOMonth(Right(zk7pdrqm_date, 2)))
    'Debug.Print CStr(Left(zk7pdrqm_date, 2))
    '
    '
    'Debug.Print CStr(CDate(CStr(Format(Now, "yyyy")) & "-" & CStr(FromMGOMonth(Right(zk7pdrqm_date, 2))) & "-" & CStr(Left(zk7pdrqm_date, 2))))
 
    ' tutaj mamy troche malo pieknie gdzie zasieg ff jest na tyle maly ze 100 dni jest out of scope dzieki czemu wie ze przeskakujemy na nastepny dzien
    ' jesli miedzy poszczegolnymi dniami iteracji jest az taka rozbieznosc moze sie zdarzyc ze bedzie 200 down days to wtedy fireflake
    ' sie wysypie faktycznie :P
    Dim tmp_date As Date
    tmp_date = CDate(Format(Now, "yyyy-mm-dd")) - 100

    If tmp_date <= CDate(CStr(Format(Now, "yyyy")) & "-" & CStr(FromMGOMonth(Right(zk7pdrqm_date, 2))) & "-" & CStr(Left(zk7pdrqm_date, 2))) Then
        'Debug.Print CStr(Format(Now, "yyyy"))
        'Debug.Print CStr(FromMGOMonth(Right(zk7pdrqm_date, 2)))
        'Debug.Print CStr(Left(zk7pdrqm_date, 2))
        
        '--------------------------------------------------YEAR-------------------------------------MONTH-------------------------------------DAY--------------
        convertToDateFromZK7PDRQMDate = CDate(CStr(Format(Now, "yyyy")) & "-" & CStr(FromMGOMonth(Right(zk7pdrqm_date, 2))) & "-" & CStr(Left(zk7pdrqm_date, 2)))
    Else
        '--------------------------------------------------YEAR-------------------------------------MONTH---------------------------------------------DAY--------------
        convertToDateFromZK7PDRQMDate = CDate(CStr(Int(Format(Now, "yyyy") + 1)) & "-" & CStr(FromMGOMonth(Right(zk7pdrqm_date, 2))) & "-" & CStr(Left(zk7pdrqm_date, 2)))
    End If
End Function

Public Function convertToDateFromZK7PPUS0Date(zk7ppus0_date As String) As Date
    Dim d As String
    d = Right(CStr(zk7ppus0_date), 4) & "-" & CStr(FromMGOMonth(Right(Left(CStr(zk7ppus0_date), 5), 2))) & "-" & Left(CStr(zk7ppus0_date), 2)
    convertToDateFromZK7PPUS0Date = CDate(Format(d, "yyyy-mm-dd"))
End Function

Public Function convertToDateFromZK7PPUM0Date(zk7ppum0_date As String) As Date
    Dim d As String
    d = CStr(Left(CStr(Format(Now, "yyyy")), 2)) & Right(CStr(zk7ppum0_date), 2) & "-" & CStr(FromMGOMonth(Right(Left(CStr(zk7ppum0_date), 5), 2))) & "-" & Left(CStr(zk7ppum0_date), 2)
    convertToDateFromZK7PPUM0Date = CDate(Format(d, "yyyy-mm-dd"))
End Function

Public Function convertToDateFromZK7PROSLDate(zk7prosl_date As String) As Date
    Dim d As String
    
    ' dd.mm.yy to  =>
    
    d = _
        CStr(Left(CStr(Format(Now, "yyyy")), 2)) & Right(CStr(zk7prosl_date), 2) & _
        "-" & _
            CStr(FromMGOMonth(Right(Left(CStr(zk7prosl_date), 5), 2))) & _
                "-" & _
                    Left(CStr(zk7prosl_date), 2)
                    
    convertToDateFromZK7PROSLDate = CDate(Format(d, "yyyy-mm-dd"))
End Function

Public Function convertToMgoLongDate(n_date As Date) As String
    convertToMgoLongDate = Format(n_date, "dd") + "." + MgoMonth(n_date) + "." + Format(n_date, "yyyy")
End Function

Public Function convertToMgoShortDate(n_date As Date) As String
    convertToMgoShortDate = Format(n_date, "dd") + "." + MgoMonth(n_date) + "." + Format(n_date, "yy")
End Function

Public Function FromMGOMonth(mgo_month As String)

    Select Case mgo_month
        Case "JA"
            FromMGOMonth = 1
        Case "FE"
            FromMGOMonth = 2
        Case "MR"
            FromMGOMonth = 3
        Case "AP"
            FromMGOMonth = 4
        Case "MY"
            FromMGOMonth = 5
        Case "JN"
            FromMGOMonth = 6
        Case "JL"
            FromMGOMonth = 7
        Case "AU"
            FromMGOMonth = 8
        Case "SE"
            FromMGOMonth = 9
        Case "OC"
            FromMGOMonth = 10
        Case "NO"
            FromMGOMonth = 11
        Case "DE"
            FromMGOMonth = 12
    End Select
End Function

Public Function getString(x As Integer, y As Integer, size As Integer) As String
    getString = Sess0.screen.getString(x, y, size)
    waitForMgo
End Function

Public Sub mgoInit()
    Set System = CreateObject("EXTRA.System")   ' Gets the system object
    Set Sessions = System.Sessions
    Set Sess0 = System.activeSession
    
    waitForMgo
End Sub

Public Function MgoMonth(n_date As Date) As String
    Select Case Format(n_date, "m") - 1
        Case 0
            MgoMonth = "JA"
        Case 1
            MgoMonth = "FE"
        Case 2
            MgoMonth = "MR"
        Case 3
            MgoMonth = "AP"
        Case 4
            MgoMonth = "MY"
        Case 5
            MgoMonth = "JN"
        Case 6
            MgoMonth = "JL"
        Case 7
            MgoMonth = "AU"
        Case 8
            MgoMonth = "SE"
        Case 9
            MgoMonth = "OC"
        Case 10
            MgoMonth = "NO"
        Case 11
            MgoMonth = "DE"
    End Select
End Function

Public Property Let pMS7P5200(RHS As MS7P5200)
    Set scr_ms7p5200 = RHS
End Property

Public Property Get pMS7P5200() As MS7P5200
    Set pMS7P5200 = scr_ms7p5200
End Property

Public Property Let pMS9PH100(RHS As MS9PH100)
    Set scr_ms9ph100 = RHS
End Property

Public Property Get pMS9PH100() As MS9PH100
    Set pMS9PH100 = scr_ms9ph100
End Property

Public Property Let pMS9PO400(RHS As MS9PO400)
    Set scr_ms9po400 = RHS
End Property

Public Property Get pMS9PO400() As MS9PO400
    Set pMS9PO400 = scr_ms9po400
End Property

Public Property Let pMS9POP00(RHS As MS9POP00)
    Set scr_ms9pop00 = RHS
End Property

Public Property Get pMS9POP00() As MS9POP00
    Set pMS9POP00 = scr_ms9pop00
End Property

Public Sub putString(str As String, x As Integer, y As Integer)
    Sess0.screen.putString str, x, y
    waitForMgo
End Sub

Public Property Let pZK7PDRQM(RHS As ZK7PDRQM)
    Set scr_zk7pdrqm = RHS
End Property

Public Property Get pZK7PDRQM() As ZK7PDRQM
    Set pZK7PDRQM = scr_zk7pdrqm
End Property

Public Property Let pZK7PPUS0(RHS As ZK7PPUS0)
    Set scr_zk7ppus0 = RHS
End Property

Public Property Get pZK7PPUS0() As ZK7PPUS0
    Set pZK7PPUS0 = scr_zk7ppus0
End Property

Public Property Let pZK7PWRQM(RHS As ZK7PWRQM)
    Set scr_zk7pwrqm = RHS
End Property

Public Property Get pZK7PWRQM() As ZK7PWRQM
    Set pZK7PWRQM = scr_zk7pwrqm
End Property

Public Property Let pZK7PPUM0(RHS As ZK7PPUM0)
    Set scr_zk7ppum0 = RHS
End Property

Public Property Get pZK7PPUM0() As ZK7PPUM0
    Set pZK7PPUM0 = scr_zk7ppum0
End Property

Public Property Let pZK7PPRUL(RHS As ZK7PPRUL)
    Set scr_zk7pprul = RHS
End Property

Public Property Get pZK7PPRUL() As ZK7PPRUL
    Set pZK7PPRUL = scr_zk7pprul
End Property

Public Property Let pZK7PPRHR(RHS As ZK7PPRHR)
    Set scr_zk7pprhr = RHS
End Property

Public Property Get pZK7PPRHR() As ZK7PPRHR
    Set pZK7PPRHR = scr_zk7pprhr
End Property


Public Property Let pZK7PPUD0(RHS As ZK7PPUD0)
    Set scr_zk7ppud0 = RHS
End Property

Public Property Get pZK7PPUD0() As ZK7PPUD0
    Set pZK7PPUD0 = scr_zk7ppud0
End Property


Public Property Let pZK7PROSL(RHS As ZK7PROSL)
    Set scr_zk7prosl = RHS
End Property

Public Property Get pZK7PROSL() As ZK7PROSL
    Set pZK7PROSL = scr_zk7prosl
End Property



Public Sub sendKeys(str As String)
    Sess0.screen.sendKeys (CStr(str))
    waitForMgo
End Sub

Public Sub waitForMgo()
    Do
        DoEvents
    Loop Until Sess0.screen.OIA.XStatus = 0
End Sub
Attribute VB_Name = "MGOScreen"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Implements IMGOScreen



Private Property Get IMGOScreen_screenName() As Date

End Property

Private Property Let IMGOScreen_screenName(RHS As Date)

End Property
Attribute VB_Name = "MS7P5200"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sess0 As Object

Public Property Let sesja(ByRef arg As Object)
    Set Sess0 = arg
End Property

Public Property Get sesja() As Object
    Set sesja = Sess0
End Property



Public Property Get plt() As String
    plt = Trim(Sess0.screen.getString(1, 16, 2))
End Property

Public Property Let plt(arg As String)
    Sess0.screen.putString CStr(arg), 1, 16
End Property

Public Property Get pn() As String
    pn = Trim(Sess0.screen.getString(5, 14, 8))
End Property

Public Property Let pn(arg As String)
    Sess0.screen.putString CStr(arg), 5, 14
End Property

Public Property Get RECV_TYPE() As String
    RECV_TYPE = Trim(Sess0.screen.getString(13, 31, 3))
End Property

Public Property Let RECV_TYPE(arg As String)
    Sess0.screen.putString CStr(arg), 13, 31
End Property

Public Property Get STD_PACK() As String
    STD_PACK = Trim(Sess0.screen.getString(8, 67, 9))
End Property

Public Property Get Name() As String
    Name = Trim(Sess0.screen.getString(6, 45, 35))
End Property

Public Property Get DESC() As String
    DUNS = Trim(Sess0.screen.getString(6, 7, 20))
End Property



Public Property Get KANBAN() As String
    KANBAN = Trim(Sess0.screen.getString(5, 34, 4))
End Property

Public Property Let KANBAN(arg As String)
    Sess0.screen.putString CStr(arg), 5, 34
End Property

Public Property Get DUNS() As String
    DUNS = Trim(Sess0.screen.getString(5, 50, 9))
End Property

Public Property Let DUNS(arg As String)
    Sess0.screen.putString CStr(arg), 5, 50
End Property


Attribute VB_Name = "MS9PH100"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sess0 As Object

Public Property Let sesja(ByRef arg As Object)
    Set Sess0 = arg
End Property

Public Property Get sesja() As Object
    Set sesja = Sess0
End Property

Public Property Get plt() As String
  plt = Trim(Sess0.screen.getString(4, 6, 2))
End Property

Public Property Let plt(arg As String)
  Sess0.screen.putString CStr(arg), 4, 6
End Property

Public Property Get pn() As String
  pn = Trim(Sess0.screen.getString(4, 17, 8))
End Property

Public Property Let pn(arg As String)
  ' Sess0.screen.putString "00000000", 4, 17
  Sess0.screen.putString CStr(arg), 4, 17
End Property

Public Property Get DATE_FROM() As String
  DATE_FROM = Trim(Sess0.screen.getString(6, 8, 8))
End Property

Public Property Let DATE_FROM(arg As String)
  Sess0.screen.putString CStr(arg), 6, 8
End Property

Public Function fDTYP() As String
  DTYP = Trim(Sess0.screen.getString(7, 8, 11))
End Function

Public Sub setDTYP(arg1 As String, arg2 As String)
  Sess0.screen.putString CStr(arg1), 7, 8
  Sess0.screen.putString CStr(arg2), 7, 15
End Sub



Public Function SID(i As Integer) As String
    SID = Trim(Sess0.screen.getString(11 + 1 * i, 55, 9))
End Function

Public Function DUNS(i As Integer) As String
    DUNS = Trim(Sess0.screen.getString(11 + 1 * i, 65, 9))
End Function

Public Function QTY(i As Integer) As String
    QTY = Trim(Sess0.screen.getString(11 + 1 * i, 35, 10))
End Function
Attribute VB_Name = "MS9PO400"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sess0 As Object

Public Property Let sesja(ByRef arg As Object)
    Set Sess0 = arg
End Property

Public Property Get sesja() As Object
    Set sesja = Sess0
End Property

Public Property Get pn() As String
  pn = Trim(Sess0.screen.getString(3, 19, 8))
End Property

Public Property Let pn(arg As String)
  Sess0.screen.putString CStr(arg), 3, 19
End Property

Public Property Get plt() As String
  pn = Trim(Sess0.screen.getString(3, 7, 2))
End Property

Public Property Let plt(arg As String)
  Sess0.screen.putString CStr(arg), 3, 7
End Property

Public Property Get KANBAN() As String
  KANBAN = Trim(Sess0.screen.getString(3, 35, 4))
End Property

Public Property Let KANBAN(arg As String)
  Sess0.screen.putString CStr(arg), 3, 35
End Property



Public Function QTY(i As Integer) As String
    QTY = Trim(Sess0.screen.getString(6 + 2 * i, 5, 8))
End Function
Public Function SDATE(i As Integer) As String
    SDATE = Trim(Sess0.screen.getString(6 + 2 * i, 14, 6))
End Function
Public Function PCS(i As Integer) As String
    PCS = Trim(Sess0.screen.getString(6 + 2 * i, 23, 3))
End Function
Public Function WGT(i As Integer) As String
    WGT = Trim(Sess0.screen.getString(6 + 2 * i, 27, 6))
End Function
Public Function MODE(i As Integer) As String
    MODE = Trim(Sess0.screen.getString(6 + 2 * i, 35, 2))
End Function
Public Function CD(i As Integer) As String
    CD = Trim(Sess0.screen.getString(6 + 2 * i, 42, 1))
End Function
Public Function EDA(i As Integer) As String
    EDA = Trim(Sess0.screen.getString(6 + 2 * i, 46, 6))
End Function
Public Function ETA(i As Integer) As String
    ETA = Trim(Sess0.screen.getString(6 + 2 * i, 53, 4))
End Function
Public Function st(i As Integer) As String
    st = Trim(Sess0.screen.getString(6 + 2 * i, 58, 1))
End Function
Public Function SID(i As Integer) As String
    SID = Trim(Sess0.screen.getString(6 + 2 * i, 61, 9))
End Function
Public Function route(i As Integer) As String
    route = Trim(Sess0.screen.getString(6 + 2 * i, 71, 7))
End Function
Public Function DOCK(i As Integer) As String
    DOCK = Trim(Sess0.screen.getString(7 + 2 * i, 71, 7))
End Function
Public Function SHIP_CMNT(i As Integer) As String
    SHIP_CMNT = Trim(Sess0.screen.getString(7 + 2 * i, 38, 32))
End Function
Public Function CARR(i As Integer) As String
    CARR = Trim(Sess0.screen.getString(7 + 2 * i, 21, 16))
End Function
Public Function TRLR(i As Integer) As String
    TRLR = Trim(Sess0.screen.getString(7 + 2 * i, 25, 11))
End Function
Public Function SUPPLIER(i As Integer) As String
    SUPPLIER = Trim(Sess0.screen.getString(7 + 2 * i, 5, 15))
End Function
Public Function s(i As Integer) As String
    s = Trim(Sess0.screen.getString(6 + 2 * i, 3, 1))
End Function

Public Sub C_SHIP_CMNT(str As String)
    Sess0.screen.putString CStr(str), 7, 38
End Sub
Attribute VB_Name = "MS9POP00"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sess0 As Object

Public Property Let sesja(ByRef arg As Object)
    Set Sess0 = arg
End Property

Public Property Get sesja() As Object
    Set sesja = Sess0
End Property

Public Property Let pn(arg As String)
    Sess0.screen.putString CStr(arg), 3, 22
End Property

Public Property Get pn() As String
    pn = Trim(Sess0.screen.getString(4, 22, 8))
End Property

Public Property Let plt(arg As String)
    Sess0.screen.putString CStr(arg), 3, 13
End Property

Public Property Get plt() As String
    plt = Trim(Sess0.screen.getString(4, 13, 2))
End Property

Public Property Let DS(arg As String)
    Sess0.screen.putString CStr(arg), 2, 18
End Property

Public Property Get DS() As String
    DS = Trim(Sess0.screen.getString(2, 18, 1))
End Property

Public Property Let DUNS(arg As String)
    Sess0.screen.putString CStr(arg), 3, 62
End Property

Public Property Get DUNS() As String
    DUNS = Trim(Sess0.screen.getString(7, 7, 9))
End Property

Public Property Get SUPPLIER() As String
    SUPPLIER = Trim(Sess0.screen.getString(7, 17, 20))
End Property

Public Property Let F_U(arg As String)
    Sess0.screen.putString CStr(arg), 3, 35
End Property

Public Property Get F_U() As String
    F_U = Trim(Sess0.screen.getString(4, 35, 2))
End Property

Public Property Let a(arg As String)
    Sess0.screen.putString CStr(arg), 3, 53
End Property

Public Property Get a() As String
    a = Trim(Sess0.screen.getString(4, 53, 2))
End Property


' pierwszy doh
Public Property Let firstDOH(arg As String)
    Sess0.screen.putString CStr(arg), 3, 43
End Property

Public Property Get firstDOH() As String
    firstDOH = Trim(Sess0.screen.getString(4, 43, 3))
End Property

' drugi doh
Public Property Let secDOH(arg As String)
    Sess0.screen.putString CStr(arg), 3, 47
End Property

Public Property Get secDOH() As String
    secDOH = Trim(Sess0.screen.getString(3, 47, 3))
End Property

Public Property Get MISC() As String
    MISC = Trim(Sess0.screen.getString(5, 73, 7))
End Property

Public Property Get OS() As String
    OS = Trim(Sess0.screen.getString(6, 67, 7))
End Property

Public Property Get Bank() As String
    Bank = Trim(Sess0.screen.getString(6, 54, 7))
End Property


Public Property Get BBAL() As String
    If Trim(Sess0.screen.getString(5, 15, 1)) = "-" Then
        BBAL = "-" & Trim(Sess0.screen.getString(5, 7, 8))
    Else
        BBAL = Trim(Sess0.screen.getString(5, 7, 8))
    End If
End Property


Public Property Get CBAL() As String
    If Trim(Sess0.screen.getString(5, 30, 1)) = "-" Then
        CBAL = "-" & Trim(Sess0.screen.getString(5, 22, 8))
    Else
        CBAL = Trim(Sess0.screen.getString(5, 22, 8))
    End If
End Property


Public Property Get PCS_TO_GO() As String
    PCS_TO_GO = Trim(Sess0.screen.getString(6, 23, 7))
End Property

Public Property Get DK() As String
    DK = Trim(Sess0.screen.getString(8, 6, 8))
End Property

Public Property Get MODE() As String
    MODE = Trim(Sess0.screen.getString(8, 21, 2))
End Property

Public Property Get TT() As String
    TT = Trim(Sess0.screen.getString(8, 31, 8))
End Property

Public Property Get MNPC() As String
    MNPC = Trim(Sess0.screen.getString(9, 7, 7))
End Property

Public Property Get NCX() As String
    NCX = Trim(Sess0.screen.getString(10, 6, 1))
End Property

Public Property Get OBS() As String
    OBS = Trim(Sess0.screen.getString(10, 14, 1))
End Property

Public Property Get STD_PACK() As String
    STD_PACK = Trim(Sess0.screen.getString(10, 30, 9))
End Property

Public Property Get oneJOB() As String
    oneJOB = Trim(Sess0.screen.getString(12, 7, 11))
End Property

Public Property Get ip() As String
    ip = Trim(Sess0.screen.getString(12, 27, 5))
End Property

Public Property Get COUNT() As String
    COUNT = Trim(Sess0.screen.getString(14, 8, 45))
End Property

Public Property Get PART_NAME() As String
    PART_NAME = Trim(Sess0.screen.getString(6, 2, 10))
End Property

Public Property Get QHD() As String
    QHD = Trim(Sess0.screen.getString(5, 48, 7))
End Property

Public Property Get O() As String
    O = Trim(Sess0.screen.getString(15, 4, 25))
End Property


Public Property Get infocode() As String
    infocode = Trim(Sess0.screen.getString(23, 2, 5))
End Property



Public Function transQTY(i As Integer) As String
    transQTY = Trim(Sess0.screen.getString(17 + (Int(i) * 2), 2, 9))
End Function

Public Function transSDATE(i As Integer) As String
    transSDATE = Trim(Sess0.screen.getString(17 + (Int(i) * 2), 18, 8))
End Function

Public Function transPCS(i As Integer) As String
    transPCS = Trim(Sess0.screen.getString(17 + (Int(i) * 2), 27, 3))
End Function

Public Function transWGT(i As Integer) As String
    transWGT = Trim(Sess0.screen.getString(17 + (Int(i) * 2), 31, 6))
End Function

Public Function transMD(i As Integer) As String
    transMD = Trim(Sess0.screen.getString(17 + (Int(i) * 2), 38, 2))
End Function

Public Function transCD(i As Integer) As String
    transCD = Trim(Sess0.screen.getString(17 + (Int(i) * 2), 41, 1))
End Function

Public Function transEDA(i As Integer) As String
    transEDA = Trim(Sess0.screen.getString(17 + (Int(i) * 2), 45, 8))
End Function

Public Function transETA(i As Integer) As String
    transETA = Trim(Sess0.screen.getString(17 + (Int(i) * 2), 54, 2)) & ":" & Trim(Sess0.screen.getString(17 + (Int(i) * 2), 56, 2))
End Function

Public Function transST(i As Integer) As String
    transST = Trim(Sess0.screen.getString(17 + (Int(i) * 2), 60, 1))
End Function

Public Function transBL(i As Integer) As String
    transBL = Trim(Sess0.screen.getString(17 + (Int(i) * 2), 63, 9))
End Function

Public Function transROUTE(i As Integer) As String
    transROUTE = Trim(Sess0.screen.getString(17 + (Int(i) * 2), 73, 7))
End Function

Public Function transCMNT(i As Integer) As String
    transCMNT = Trim(Sess0.screen.getString(18 + (Int(i) * 2), 39, 30))
End Function

Public Function transDUNS(i As Integer) As String
    transDUNS = Trim(Sess0.screen.getString(18 + (Int(i) * 2), 71, 9))
End Function

Public Function transCONT(i As Integer) As String
    transCONT = Trim(Sess0.screen.getString(18 + (Int(i) * 2), 2, 35))
End Function

' -------------------------- rqms on pop ----------------------------------------------------------
Public Function balance_on_pop_data(wiersz As Integer, col As Integer) As String
    'row 8 - 12
    'col 40, 46, 55, 65, 73, size 8
    Dim kolumna As Integer
    Select Case col
        Case 1
            kolumna = 40
        Case 2
            kolumna = 46
        Case 3
            kolumna = 55
        Case 4
            kolumna = 65
        Case 5
            kolumna = 73
    End Select
    
    balance_on_pop_data = Trim(Sess0.screen.getString(7 + wiersz, kolumna, 8))
End Function

Attribute VB_Name = "MakeList"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Attribute VB_Name = "MakeListForm"
Attribute VB_Base = "0{CBEA8689-F0FC-4320-9574-CCDDBAF7FD3A}{09A1F468-3AF0-4223-B647-A63F4E138CCB}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False


Sub SubmitMakeListButton_Click()
    hide
    MakeListStatusForm.show vbModeless
    
    
    ThisWorkbook.Sheets("register").Range("makelistregion").Value = Left(CStr(MakeListForm.ComboBox1.Value), 3)
    
    Application.EnableEvents = False
    
    If ThisWorkbook.Sheets("Parts").FilterMode = True Then
        ThisWorkbook.Sheets("Parts").ShowAllData
    End If
    
    inner_clearlist
    
    Dim arr() As String
    Dim plt_arr() As String
    Dim start As Range
    
    Dim m As MGO
    Set m = New MGO
    
    Dim pop As MS9POP00
    Set pop = m.pMS9POP00
    
    
    Set start = ThisWorkbook.Sheets("Parts").Range("a2")
    arr = Split(MakeListForm.TextBoxFU, " ")
    plt_arr = Split(MakeListForm.TextBoxPLT, " ")
    
    
    ' arr reprezentuje tablice F/U
    If UBound(arr) <> -1 Then
        For i = LBound(arr) To UBound(arr)
            If MakeListForm.TextBoxPLT.Text = "" Then
                start = makelistaftershow(m, pop, start, CStr(arr(i)), CStr(TextBoxA.Text))
            Else
                If UBound(plt_arr) <> -1 Then
                    For x = LBound(plt_arr) To UBound(plt_arr)
                        start = makelistaftershow(m, pop, start, CStr(arr(i)), CStr(TextBoxA.Text), CStr(plt_arr(x)))
                    Next x
                Else
                    start = makelistaftershow(m, pop, start, CStr(arr(i)), CStr(TextBoxA.Text), "")
                End If
            End If
        Next i
    Else
        If MakeListForm.TextBoxPLT.Text = "" Then
            start = makelistaftershow(m, pop, start, "", CStr(TextBoxA.Text))
        Else
            If UBound(plt_arr) <> -1 Then
                For x = LBound(plt_arr) To UBound(plt_arr)
                    start = makelistaftershow(m, pop, start, "", CStr(TextBoxA.Text), CStr(plt_arr(x)))
                Next x
            Else
                start = makelistaftershow(m, pop, start, "", CStr(TextBoxA.Text), "")
            End If
        End If
    End If
    
    Dim rng As Range
    Dim tmp As Range
    Set rng = ThisWorkbook.ActiveSheet.Range("a2")
    
    Do
        If Trim(rng) = "null" Then
            Set tmp = rng.Offset(1, 0)
            Rows(CStr(rng.row) & ":" & CStr(rng.row)).Delete Shift:=xlUp
            Set rng = tmp
        Else
            Set rng = rng.Offset(1, 0)
        End If
    Loop While rng <> ""
    
    MakeListStatusForm.LabelStatus = ""
    MakeListStatusForm.hide
    
    Application.EnableEvents = True
    
        ActiveWorkbook.Worksheets("Parts").Sort.SortFields.Clear
    ActiveWorkbook.Worksheets("Parts").Sort.SortFields.Add Key:=Range("A:A"), _
        SortOn:=xlSortOnValues, Order:=xlAscending, DataOption:=xlSortNormal
    ActiveWorkbook.Worksheets("Parts").Sort.SortFields.Add Key:=Range("B:B"), _
        SortOn:=xlSortOnValues, Order:=xlAscending, DataOption:=xlSortNormal
    With ActiveWorkbook.Worksheets("Parts").Sort
        .SetRange Range("A1:F1048576")
        .Header = xlYes
        .MatchCase = False
        .Orientation = xlTopToBottom
        .SortMethod = xlPinYin
        .Apply
    End With
    
    Range("A2:B1048576").HorizontalAlignment = xlLeft
    
    'update - Paulina 28-07-2017
    MsgBox "Check Results - Make List Completed!"
End Sub

Sub TextBoxDOH1_Change()
    If Len(Me.TextBoxDOH1.Text) > 3 Then
        MsgBox "Only 3 digits max can be provided in this box!"
        Me.TextBoxDOH1.Text = Left(Me.TextBoxDOH1.Text, 3)
    End If
End Sub

Sub TextBoxDOH2_Change()
    If Len(Me.TextBoxDOH2.Text) > 3 Then
        MsgBox "Only 3 digits max can be provided in this box!"
        Me.TextBoxDOH2.Text = Left(Me.TextBoxDOH2.Text, 3)
    End If
End Sub

Sub TextBoxDUNS_Change()
    If Len(Me.TextBoxDUNS.Text) > 9 Then
        MsgBox "DUNS requires 9 digits!"
        Me.TextBoxDUNS.Text = Left(Me.TextBoxDUNS.Text, 9)
    End If
    
    If Me.TextBoxDS.Text <> "8" Then
        MsgBox "I see that you want to make list by DUNS, so I put DS = 8 for you..."
        Me.TextBoxDS.Text = 8
    End If
    
    If Me.TextBoxDUNS.Text = "" Then
        If Me.TextBoxDS.Text = "8" Then
            MsgBox "I am removing 8 from DS"
            Me.TextBoxDS.Text = ""
        End If
    End If
End Sub

Sub UserForm_Initialize()
    ComboBox1.AddItem "MGO - for NA"
    ComboBox1.AddItem "GME - for Europe"
    ComboBox1.Value = "MGO - for NA"
End Sub
Attribute VB_Name = "MakeListStatusForm"
Attribute VB_Base = "0{41264DB3-485C-487D-9218-9B5FACD6193E}{DE44A58F-8CD1-42E0-9420-596E98186A98}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Sub LabelStatus_Click()
    End
End Sub
Attribute VB_Name = "Module1"
Function OstatniaNiedziela(Data)
    OstatniaNiedziela = Data - Weekday(Data) + 1
End Function

Public Function IsoWeekNumber(InDate As Date) As Integer
    Dim d As Long
    d = DateSerial(Year(InDate - Weekday(InDate - 1) + 4), 1, 3)
    IsoWeekNumber = Int((InDate - d + Weekday(d) + 5) / 7)
End Function

Sub MakeCoverage(rrow, inPLT, inPRT, Comment, kolor, Component, partkolor, partdesc)
    Dim CommentHeader As String
    
    CoverCols = 21
    
    Cells(rrow, 1).Value = "PLT"
    Cells(rrow, 9).Value = "Past due"
    
    Cells(rrow + 1, 1).Value = inPLT
    Cells(rrow + 1, 2).Value = inPRT
    Cells(rrow + 4, 2).Value = Comment
    Cells(rrow + 4, 2).Interior.Color = kolor
    
    For x = 0 To 4
        Cells(rrow + x, 3) = partkolor
        Cells(rrow + x, 4) = partdesc
    Next x
    
    Cells(rrow + 1, 8).Value = "req"
    Cells(rrow + 2, 8).Value = "Shipments"
    'Cells(RRow + 3, 8).Value = "AIR"
    Cells(rrow + 4, 8).Value = "manual"
    Cells(rrow + 5, 8).Value = "coverage"
    
    Cells(rrow + 1, 5).Value = "CBAL"
    Cells(rrow + 2, 5).Value = "DOH"
    Cells(rrow + 3, 5).Value = "QHD"
    Cells(rrow + 4, 5).Value = "STD PACK"
    Cells(rrow + 5, 5).Value = "BACKLOG"

    ' Najpierw wpisz daty
    For x = 0 To CoverCols - 1
        Cells(rrow, x + 10).Value = Date + x
        'DodajKomentarz RRow, x + 10, Format(Round(OstatniaNiedziela(Date)) + x * 7 + 1, "dd-mm-yyyy") + " - " + Format(Round(OstatniaNiedziela(Date)) + x * 7 + 7, "dd-mm-yyyy"), 120
    Next x
    ' teraz formu|fffd|y
    Cells(rrow + 5, 10).FormulaR1C1 = "=R[-4]C[-4]+R[-3]C[-1]+R[-2]C[-1]-R[-4]C+R[-3]C+R[-2]C+R[-1]C"
    For x = 1 To CoverCols - 1
        Cells(rrow + 5, 10 + x).FormulaR1C1 = "=RC[-1]-R[-4]C+R[-3]C+R[-2]C+R[-1]C"
    Next x
    
    ' wypiswanie begining balance
    StatusBox.Description.Caption = "Begining balance " + CStr(inPLT) + " " + CStr(inPRT)
    Sess0.screen.sendKeys ("<Clear>")
    waitForMgo
    Sess0.screen.sendKeys ("ms9pop00 <Enter>")
    waitForMgo
      
    Sess0.screen.putString "6", 2, 18

    ProgressIncrease
        
    Sess0.screen.putString "  ", 3, 13
    Sess0.screen.putString "        ", 3, 22
    Sess0.screen.putString inPLT, 3, 13
    Sess0.screen.putString inPRT, 3, 22
    
    Sess0.screen.sendKeys ("<Enter>")
    waitForMgo
    
    If Sess0.screen.getString(5, 30, 1) = "-" Then
        CBAL = "-" + Sess0.screen.getString(5, 22, 8)
    Else
        CBAL = Sess0.screen.getString(5, 22, 8)
    End If
            
    If Sess0.screen.getString(6, 73, 1) = "-" Then
        OS = "-" + Sess0.screen.getString(6, 67, 6)
    Else
        OS = Sess0.screen.getString(6, 67, 6)
    End If
            
    Rkod = Sess0.screen.getString(23, 2, 5)
    If Rkod <> "     " And Rkod <> "I4767" Then MsgBox CStr(PlantCode) + " " + CStr(PartNumber) + " " + Sess0.screen.getString(23, 2, 80)
            
    Cells(rrow + 1, 6).Value = CBAL
    Cells(rrow + 2, 2).Value = Sess0.screen.getString(7, 17, 15)
    Cells(rrow + 3, 2).Value = Sess0.screen.getString(7, 7, 9)
    Cells(rrow + 2, 6).Value = Sess0.screen.getString(4, 43, 3)
    Cells(rrow + 3, 6).Value = Sess0.screen.getString(5, 48, 7)
    Cells(rrow + 4, 6).Value = Sess0.screen.getString(10, 30, 9)
    Cells(rrow + 5, 6).Value = OS

    ' wypisanie daily reqs
    StatusBox.Description.Caption = "Daily requirements " + CStr(inPLT) + " " + CStr(inPRT)
    ProgressIncrease
    
    If Component = "C" Then
        For y = 0 To 4
            MDay = Val(Sess0.screen.getString(8 + y, 42, 2))
            MMonth = MgoMonth(Sess0.screen.getString(8 + y, 40, 2))
            If Month(Now) = 12 And MMonth = 1 Then
                MYear = Year(Now) + 1
            Else
                MYear = Year(Now)
            End If
            mDate = DateSerial(MYear, MMonth, MDay)
            For q = 0 To CoverCols
                If mDate = Cells(rrow, 10 + q).Value Then
                    Cells(rrow + 1, 10 + q).Value = Val(Sess0.screen.getString(8 + y, 45, 10))
                    Cells(rrow + 2, 10 + q).Value = 0
                End If
            Next q
        Next y
        Sess0.screen.sendKeys ("<Pf11>")
        waitForMgo
        For y = 0 To 4
            MDay = Val(Sess0.screen.getString(8 + y, 42, 2))
            MMonth = MgoMonth(Sess0.screen.getString(8 + y, 40, 2))
            MYear = Year(Now)
            mDate = DateSerial(MYear, MMonth, MDay)
            For q = 0 To CoverCols
                If mDate = Cells(rrow, 10 + q).Value Then
                    Cells(rrow + 1, 10 + q).Value = Val(Sess0.screen.getString(8 + y, 45, 10))
                    Cells(rrow + 2, 10 + q).Value = 0
                End If
            Next q
        Next y
    Else
        Sess0.screen.sendKeys ("<Clear>")
        waitForMgo
        Sess0.screen.sendKeys ("ZK7PDRQM <Enter>")
        waitForMgo
          
        Sess0.screen.putString "  ", 3, 8
        Sess0.screen.putString "        ", 4, 8
        Sess0.screen.putString "    ", 5, 10
        
        Sess0.screen.putString inPLT, 3, 8
        Sess0.screen.putString inPRT, 4, 8
        
        Sess0.screen.sendKeys ("<Enter>")
        waitForMgo
        
        wez_wszystkie_total_rqm Sess0, rrow, CoverCols
    End If

    ' pokoloruj dni bez produkcji
    For x = 0 To CoverCols - 1
        If Cells(rrow + 1, x + 10).Value = "" Then
            For l = 1 To 5
                Cells(rrow + l, x + 10).Interior.Color = RGB(200, 200, 200)
            Next l
        End If
        'DodajKomentarz RRow, x + 10, Format(Round(OstatniaNiedziela(Date)) + x * 7 + 1, "dd-mm-yyyy") + " - " + Format(Round(OstatniaNiedziela(Date)) + x * 7 + 7, "dd-mm-yyyy"), 120
    Next x
            
   
    
    ' wypiswanie pickup|fffd|w w tranzycie
    
    StatusBox.Description.Caption = "Pickups in transit " + CStr(inPLT) + " " + CStr(inPRT)
    Sess0.screen.sendKeys ("<Clear>")
    waitForMgo
    Sess0.screen.sendKeys ("ms9po400 <Enter>")
    waitForMgo
    
    ProgressIncrease
        
    For x = 9 To 9 + CoverCols
        'Cells(RRow + 2, x).Value = 0
        'Cells(RRow + 3, x).Value = 0
    Next x
        
    Sess0.screen.putString "  ", 3, 7
    Sess0.screen.putString "        ", 3, 19
    Sess0.screen.putString "    ", 3, 35
    
    Sess0.screen.putString inPLT, 3, 7
    Sess0.screen.putString inPRT, 3, 19
    
    Sess0.screen.sendKeys ("<Enter>")
    waitForMgo
    
    Do
        For y = 0 To 7
            If Sess0.screen.getString(6 + y * 2, 12, 1) <> " " Then
                MDay = Val(Sess0.screen.getString(6 + y * 2, 46, 2))
                MMonth = MgoMonth(Sess0.screen.getString(6 + y * 2, 48, 2))
                MYear = 2000 + Val(Sess0.screen.getString(6 + y * 2, 50, 2))
                Pdate = DateSerial(MYear, MMonth, MDay)
                PTime = Sess0.screen.getString(6 + y * 2, 53, 2) + ":" + Sess0.screen.getString(6 + y * 2, 55, 2)
                MDay = Val(Sess0.screen.getString(6 + y * 2, 14, 2))
                MMonth = MgoMonth(Sess0.screen.getString(6 + y * 2, 16, 2))
                MYear = 2000 + Val(Sess0.screen.getString(6 + y * 2, 18, 2))
                SDATE = DateSerial(MYear, MMonth, MDay)
                Pval = Val(Sess0.screen.getString(6 + y * 2, 5, 8))
                TrMode = Sess0.screen.getString(6 + y * 2, 35, 2)
                st = Sess0.screen.getString(6 + y * 2, 58, 1)
                SID = Sess0.screen.getString(6 + y * 2, 61, 9)
                CommentLine = Format(Pval, "00000") + " " + Format(SDATE, "dd.mm.yy") + " " + Format(Pdate, "dd.mm.yy") + " " + PTime + " " + st + "  " + SID + " " + TrMode
                CommentHeader = "QTY   sdate    edate    etime st inv       md"
                If Pdate = SDATE Then
                    Cells(rrow + 4, 9).Value = Cells(rrow + 4, 9).Value + Pval
                    DodajKomentarz rrow + 4, 9, CommentLine, 250, CommentHeader
                Else
                    If Pdate < Date Then
                        Cells(rrow + 2, 9).Value = Cells(rrow + 2, 9).Value + Pval
                        DodajKomentarz rrow + 2, 9, CommentLine, 250, CommentHeader
                    Else
                        For x = 10 To 10 + CoverCols
                            If Pdate = Cells(rrow, x).Value Then
                                Cells(rrow + 2, x).Value = Cells(rrow + 2, x).Value + Pval
                                DodajKomentarz rrow + 2, x, CommentLine, 250, CommentHeader
                            End If
                        Next x
                    End If
                End If
            End If
        Next y
    
        RetCode = Sess0.screen.getString(22, 2, 5)
        If RetCode = "I4300" Then
            Sess0.screen.sendKeys ("<Pf8>")
            waitForMgo
        End If
    
    Loop Until RetCode <> "I4300"
    
    If (RetCode <> "I5487") And (RetCode <> "R6101") And (RetCode <> "I6155") Then MsgBox CStr(PlantCode) + " " + CStr(PartNumber) + " " + Sess0.screen.getString(22, 2, 80)
            
End Sub

Sub wez_wszystkie_total_rqm(ByRef Sess0, ByRef rrow, ByRef CoverCols)

    
    ' potrzebna jest petlaze zmienna pomocnicza wlasciwie dobrze by bylo napisac kod od nowa
    ' czyli za kazdym razem zaczynamy screen od samego poczatku inaczej gubia sie dane na screenie MGO
    
    na_ktorym_jestem_screenie = 0
    
    Do
    
        ' czesci bez danych
        If (Sess0.screen.getString(22, 2, 5) Like "*R6017*") Or (Sess0.screen.getString(22, 2, 5) Like "*R6117*") Then
            Exit Do
        End If
        
        ' tutaj oklipowane restrykcjami od g|fffd|ry i do|fffd|u je|fffd|li chodzi o prace w tej petli
        
        
        If na_ktorym_jestem_screenie > 0 Then
        
            Sess0.screen.sendKeys ("<Enter>")
            waitForMgo
        
            For x = 1 To na_ktorym_jestem_screenie
                
                Sess0.screen.sendKeys ("<pf11>")
                waitForMgo
            Next x
        End If
        
    
        ' tutaj iteracja piekna do samego do|fffd|u ekranu
        While (Sess0.screen.getString(22, 2, 5) = "R6693") Or ((na_ktorym_jestem_screenie) = 3 And (Sess0.screen.getString(22, 2, 5) = "R6102"))
            Sess0.screen.sendKeys ("<pf8>")
            waitForMgo
        Wend
        
        PltTotLine = 9
        For q = 9 To 20
            If Sess0.screen.getString(q, 2, 9) = "PLT TOTAL" Then
                PltTotLine = q
                Exit For
            End If
        Next q
        
        
        For y = 0 To 4
            MDay = Val(Sess0.screen.getString(8, 24 + 8 * y, 2))
            MMonth = MgoMonth(Sess0.screen.getString(8, 27 + 8 * y, 2))
            If ((Month(Now) = 12) Or (Month(Now) = 11) Or (Month(Now) = 10)) And MMonth = 1 Then
                MYear = Year(Now) + 1
            Else
                MYear = Year(Now)
            End If
            mDate = DateSerial(MYear, MMonth, MDay)
            For q = 0 To CoverCols
                If mDate = Cells(rrow, 10 + q).Value Then
                    Cells(rrow + 1, 10 + q).Value = Val(Sess0.screen.getString(PltTotLine, 22 + 8 * y, 8))
                    Cells(rrow + 2, 10 + q).Value = 0
                    Exit For
                End If
            Next q
        Next y
        
        If (Sess0.screen.getString(22, 2, 5) Like "*R6120*") Or (Sess0.screen.getString(22, 2, 5) Like "*R6123*") Or (Sess0.screen.getString(22, 2, 5) Like "*R6017*") Then
            Exit Do
        End If
        
        na_ktorym_jestem_screenie = na_ktorym_jestem_screenie + 1
    Loop While na_ktorym_jestem_screenie < 4
End Sub

Sub MakeFullCoverage()

    Application.Calculation = xlCalculationAutomatic
    Dim Plants(20) As String
    RowStart = 2
    OstatniWiersz = Sheets("Parts").Range("A1048576").End(xlUp).row
    mgoInit
    StatusBox.show
    Application.ScreenUpdating = False
    StatusBox.ProgressBar.Value = 0
    StatusBox.ProgressBar.max = 3 * (OstatniWiersz - 1)
    Sheets.Add After:=Sheets(Sheets.COUNT)
    
    For x = 2 To OstatniWiersz
        If Sheets("Parts").Cells(x, 1).Value = "GME" Then
            ' scan GME to get part numbers
            QQ = 0
            inPRT = Sheets("Parts").Cells(x, 2).Value
            StatusBox.Description.Caption = "Scan GME to get plants for " + CStr(inPRT)
            ProgressIncrease
            Sess0.screen.sendKeys ("<Clear>")
            waitForMgo
            Sess0.screen.sendKeys ("ms9pop00 <Enter>")
            waitForMgo
            Sess0.screen.putString "6", 2, 18
            Sess0.screen.putString "GME", 3, 5
            Sess0.screen.putString inPRT, 3, 22
            Sess0.screen.sendKeys ("<Enter>")
            waitForMgo
            Do
                Plants(QQ) = Sess0.screen.getString(4, 13, 2)
                If Plants(QQ) <> "  " Then
                    QQ = QQ + 1
                End If
                Sess0.screen.sendKeys ("<Pf8>")
                waitForMgo
            Loop Until Sess0.screen.getString(23, 2, 5) = "I4265"
            StatusBox.ProgressBar.max = StatusBox.ProgressBar.max + 3 * (QQ - 1)
            For Z = 0 To QQ - 1
                Cells(RowStart, 1).Select
                FormatCoverRecord2
                If Arkusz1.CheckBox1.Value Then Autoformatowanie
                MakeCoverage RowStart, Plants(Z), inPRT, Sheets("Parts").Cells(x, 3).Value, Sheets("Parts").Cells(x, 3).Interior.Color, Sheets("Parts").Cells(x, 4).Value, Sheets("Parts").Cells(x, 5).Value, Sheets("Parts").Cells(x, 6).Value
                RowStart = RowStart + 7
            Next Z
        
        Else
            Cells(RowStart, 1).Select
            FormatCoverRecord2
            If Arkusz1.CheckBox1.Value Then Autoformatowanie
            MakeCoverage RowStart, Sheets("Parts").Cells(x, 1).Value, Sheets("Parts").Cells(x, 2).Value, Sheets("Parts").Cells(x, 3).Value, Sheets("Parts").Cells(x, 3).Interior.Color, Sheets("Parts").Cells(x, 4).Value, Sheets("Parts").Cells(x, 5).Value, Sheets("Parts").Cells(x, 6).Value
            RowStart = RowStart + 7
        End If
    Next x
    Columns("A:AD").EntireColumn.AutoFit
    Columns("C:D").Select
    Selection.EntireColumn.Hidden = True
    Columns("G:G").Select
    Selection.EntireColumn.Hidden = True
    StatusBox.hide
    
    'this section added by Sean Doody (sean.doody@gm.com)
    
    'automatically apply conditional formatting to column F to highlight backlogs
        Columns("F:F").Select
    Selection.FormatConditions.Add Type:=xlCellValue, Operator:=xlLess, _
        Formula1:="=0"
    Selection.FormatConditions(Selection.FormatConditions.COUNT).SetFirstPriority
    With Selection.FormatConditions(1).Font
        .Color = -16383844
        .TintAndShade = 0
    End With
    With Selection.FormatConditions(1).Interior
        .PatternColorIndex = xlAutomatic
        .Color = 13551615
        .TintAndShade = 0
    End With
    Selection.FormatConditions(1).StopIfTrue = False
    
    'rename sheet to reflect current date and time
    On Error Resume Next
    ActiveSheet.Name = Replace(Format(Now, "mm-dd hh:mm"), ":", "")
    
    'end of Sean Doody's code
    
    Range("A1").Select
    Application.ScreenUpdating = True
    Application.Calculation = xlCalculationAutomatic
    Application.Calculate
End Sub

Sub DeleteOldSheets()
    ret = MsgBox("Are you sure?", vbQuestion + vbYesNo)
    If ret = vbYes Then
        Application.DisplayAlerts = False
        x = 1
        Do
            If Sheets(x).Name <> "Parts" Then
                Sheets(x).Delete
            Else
                x = x + 1
            End If
        Loop Until x > Sheets.COUNT
        Application.DisplayAlerts = True
    End If
End Sub

Sub DodajKomentarz(rrow, RCol, komentarz, Szerokosc, Optional CHeader As String)
    If Cells(rrow, RCol).Comment Is Nothing Then
        Cells(rrow, RCol).AddComment
        If CHeader > "" Then
            Cells(rrow, RCol).Comment.Text Text:=CHeader + Chr(10)
        End If
    End If
    
    With Cells(rrow, RCol).Comment.Shape.TextFrame.Characters.Font
      .Name = "Lucida Console"
      .size = 8
    End With
    
    Cells(rrow, RCol).Comment.Text Text:=Cells(rrow, RCol).Comment.Text + komentarz + Chr(10)
    Cells(rrow, RCol).Comment.Shape.Width = Szerokosc
    Tr = Cells(rrow, RCol).Comment.Text
    Cells(rrow, RCol).Comment.Shape.Height = CountLines(Tr) * 12
End Sub

Function CountLines(Txt)
    lr = Split(Txt, Chr(10))
    CountLines = UBound(lr)
End Function


Attribute VB_Name = "Module2"
Sub FormatCoverRecord2()
Attribute FormatCoverRecord2.VB_ProcData.VB_Invoke_Func = " \n14"

    ActiveCell.Range("A1:A6").Select
    With Selection.Interior
        .Pattern = xlSolid
        .PatternColorIndex = xlAutomatic
        .ThemeColor = xlThemeColorDark1
        .TintAndShade = -0.249977111117893
        .PatternTintAndShade = 0
    End With
    ActiveCell.Offset(0, 1).Range("A1").Select
    ActiveCell.Range("A1:AC1").Select
    With Selection.Interior
        .Pattern = xlSolid
        .PatternColorIndex = xlAutomatic
        .ThemeColor = xlThemeColorDark1
        .TintAndShade = -0.249977111117893
        .PatternTintAndShade = 0
    End With
    Selection.Font.Bold = True
    ActiveCell.Offset(0, -1).Range("A1").Select
    Selection.Font.Bold = True
    ActiveCell.Offset(0, 8).Range("A1").Select
    ActiveCell.Range("A1:V1").Select
    Selection.Borders(xlDiagonalDown).LineStyle = xlNone
    Selection.Borders(xlDiagonalUp).LineStyle = xlNone
    With Selection.Borders(xlEdgeLeft)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .TintAndShade = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlEdgeTop)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .TintAndShade = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .TintAndShade = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlEdgeRight)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .TintAndShade = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlInsideVertical)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .TintAndShade = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlInsideHorizontal)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .TintAndShade = 0
        .Weight = xlThin
    End With
    ActiveCell.Select
    With Selection.Font
        .Color = -16776961
        .TintAndShade = 0
    End With
    ActiveCell.Offset(0, 1).Range("A1").Select
    ActiveCell.Range("A1:U1").Select
    Selection.NumberFormat = "dd/mm"
    ActiveCell.Offset(1, -2).Range("A1").Select
    ActiveCell.Range("A1:W1").Select
    Selection.Font.Bold = True
    With Selection.Interior
        .Pattern = xlSolid
        .PatternColorIndex = xlAutomatic
        .ThemeColor = xlThemeColorAccent3
        .TintAndShade = 0.799981688894314
        .PatternTintAndShade = 0
    End With
    ActiveCell.Offset(4, 0).Range("A1").Select
    ActiveCell.Range("A1:W1").Select
    Selection.Font.Bold = True
    With Selection.Interior
        .Pattern = xlSolid
        .PatternColorIndex = xlAutomatic
        .Color = 10482675
        .TintAndShade = 0
        .PatternTintAndShade = 0
    End With
    ActiveCell.Offset(-5, -7).Range("A1").Select
    Selection.Borders(xlDiagonalDown).LineStyle = xlNone
    Selection.Borders(xlDiagonalUp).LineStyle = xlNone
    With Selection.Borders(xlEdgeLeft)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .TintAndShade = 0
        .Weight = xlMedium
    End With
    With Selection.Borders(xlEdgeTop)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .TintAndShade = 0
        .Weight = xlMedium
    End With
    With Selection.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .TintAndShade = 0
        .Weight = xlMedium
    End With
    With Selection.Borders(xlEdgeRight)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .TintAndShade = 0
        .Weight = xlMedium
    End With
    Selection.Borders(xlInsideVertical).LineStyle = xlNone
    Selection.Borders(xlInsideHorizontal).LineStyle = xlNone
    ActiveCell.Offset(1, 0).Range("A1:A5").Select
    Selection.Borders(xlDiagonalDown).LineStyle = xlNone
    Selection.Borders(xlDiagonalUp).LineStyle = xlNone
    With Selection.Borders(xlEdgeLeft)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .TintAndShade = 0
        .Weight = xlMedium
    End With
    With Selection.Borders(xlEdgeTop)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .TintAndShade = 0
        .Weight = xlMedium
    End With
    With Selection.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .TintAndShade = 0
        .Weight = xlMedium
    End With
    With Selection.Borders(xlEdgeRight)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .TintAndShade = 0
        .Weight = xlMedium
    End With
    Selection.Borders(xlInsideVertical).LineStyle = xlNone
    Selection.Borders(xlInsideHorizontal).LineStyle = xlNone
    With Selection
        .HorizontalAlignment = xlCenter
        .VerticalAlignment = xlBottom
        .WrapText = False
        .Orientation = 0
        .AddIndent = False
        .IndentLevel = 0
        .ShrinkToFit = False
        .ReadingOrder = xlContext
        .MergeCells = False
    End With
    Selection.Merge
    With Selection
        .HorizontalAlignment = xlCenter
        .VerticalAlignment = xlBottom
        .WrapText = False
        .Orientation = 90
        .AddIndent = False
        .IndentLevel = 0
        .ShrinkToFit = False
        .ReadingOrder = xlContext
        .MergeCells = True
    End With
    With Selection
        .HorizontalAlignment = xlCenter
        .VerticalAlignment = xlCenter
        .WrapText = False
        .Orientation = 90
        .AddIndent = False
        .IndentLevel = 0
        .ShrinkToFit = False
        .ReadingOrder = xlContext
        .MergeCells = True
    End With
    ActiveCell.Offset(0, 1).Range("A1").Select
    Selection.Borders(xlDiagonalDown).LineStyle = xlNone
    Selection.Borders(xlDiagonalUp).LineStyle = xlNone
    With Selection.Borders(xlEdgeLeft)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .TintAndShade = 0
        .Weight = xlMedium
    End With
    With Selection.Borders(xlEdgeTop)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .TintAndShade = 0
        .Weight = xlMedium
    End With
    With Selection.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .TintAndShade = 0
        .Weight = xlMedium
    End With
    With Selection.Borders(xlEdgeRight)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .TintAndShade = 0
        .Weight = xlMedium
    End With
    Selection.Borders(xlInsideVertical).LineStyle = xlNone
    Selection.Borders(xlInsideHorizontal).LineStyle = xlNone
    ActiveCell.Offset(1, 0).Range("A1:A2").Select
    Selection.Borders(xlDiagonalDown).LineStyle = xlNone
    Selection.Borders(xlDiagonalUp).LineStyle = xlNone
    With Selection.Borders(xlEdgeLeft)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .TintAndShade = 0
        .Weight = xlMedium
    End With
    With Selection.Borders(xlEdgeTop)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .TintAndShade = 0
        .Weight = xlMedium
    End With
    With Selection.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .TintAndShade = 0
        .Weight = xlMedium
    End With
    With Selection.Borders(xlEdgeRight)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .TintAndShade = 0
        .Weight = xlMedium
    End With
    Selection.Borders(xlInsideVertical).LineStyle = xlNone
    Selection.Borders(xlInsideHorizontal).LineStyle = xlNone
    ActiveCell.Offset(2, 0).Range("A1").Select
    Selection.Borders(xlDiagonalDown).LineStyle = xlNone
    Selection.Borders(xlDiagonalUp).LineStyle = xlNone
    With Selection.Borders(xlEdgeLeft)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .TintAndShade = 0
        .Weight = xlMedium
    End With
    With Selection.Borders(xlEdgeTop)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .TintAndShade = 0
        .Weight = xlMedium
    End With
    With Selection.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .TintAndShade = 0
        .Weight = xlMedium
    End With
    With Selection.Borders(xlEdgeRight)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .TintAndShade = 0
        .Weight = xlMedium
    End With
    Selection.Borders(xlInsideVertical).LineStyle = xlNone
    Selection.Borders(xlInsideHorizontal).LineStyle = xlNone
    ActiveCell.Offset(-3, 3).Range("A1:B1").Select
    Selection.Borders(xlDiagonalDown).LineStyle = xlNone
    Selection.Borders(xlDiagonalUp).LineStyle = xlNone
    With Selection.Borders(xlEdgeLeft)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .TintAndShade = 0
        .Weight = xlMedium
    End With
    With Selection.Borders(xlEdgeTop)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .TintAndShade = 0
        .Weight = xlMedium
    End With
    With Selection.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .TintAndShade = 0
        .Weight = xlMedium
    End With
    With Selection.Borders(xlEdgeRight)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .TintAndShade = 0
        .Weight = xlMedium
    End With
    Selection.Borders(xlInsideVertical).LineStyle = xlNone
    Selection.Borders(xlInsideHorizontal).LineStyle = xlNone
    ActiveCell.Offset(1, 0).Range("A1:B1").Select
    Selection.Borders(xlDiagonalDown).LineStyle = xlNone
    Selection.Borders(xlDiagonalUp).LineStyle = xlNone
    With Selection.Borders(xlEdgeLeft)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .TintAndShade = 0
        .Weight = xlMedium
    End With
    With Selection.Borders(xlEdgeTop)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .TintAndShade = 0
        .Weight = xlMedium
    End With
    With Selection.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .TintAndShade = 0
        .Weight = xlMedium
    End With
    With Selection.Borders(xlEdgeRight)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .TintAndShade = 0
        .Weight = xlMedium
    End With
    Selection.Borders(xlInsideVertical).LineStyle = xlNone
    Selection.Borders(xlInsideHorizontal).LineStyle = xlNone
    ActiveCell.Offset(1, 0).Range("A1:B1").Select
    Selection.Borders(xlDiagonalDown).LineStyle = xlNone
    Selection.Borders(xlDiagonalUp).LineStyle = xlNone
    With Selection.Borders(xlEdgeLeft)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .TintAndShade = 0
        .Weight = xlMedium
    End With
    With Selection.Borders(xlEdgeTop)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .TintAndShade = 0
        .Weight = xlMedium
    End With
    With Selection.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .TintAndShade = 0
        .Weight = xlMedium
    End With
    With Selection.Borders(xlEdgeRight)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .TintAndShade = 0
        .Weight = xlMedium
    End With
    Selection.Borders(xlInsideVertical).LineStyle = xlNone
    Selection.Borders(xlInsideHorizontal).LineStyle = xlNone
    ActiveCell.Offset(2, 0).Range("A1:B1").Select
    Selection.Borders(xlDiagonalDown).LineStyle = xlNone
    Selection.Borders(xlDiagonalUp).LineStyle = xlNone
    With Selection.Borders(xlEdgeLeft)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .TintAndShade = 0
        .Weight = xlMedium
    End With
    With Selection.Borders(xlEdgeTop)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .TintAndShade = 0
        .Weight = xlMedium
    End With
    With Selection.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .TintAndShade = 0
        .Weight = xlMedium
    End With
    With Selection.Borders(xlEdgeRight)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .TintAndShade = 0
        .Weight = xlMedium
    End With
    Selection.Borders(xlInsideVertical).LineStyle = xlNone
    Selection.Borders(xlInsideHorizontal).LineStyle = xlNone
    ActiveCell.Offset(-4, -3).Range("A1:E5").Select
    Selection.Borders(xlDiagonalDown).LineStyle = xlNone
    Selection.Borders(xlDiagonalUp).LineStyle = xlNone
    With Selection.Borders(xlEdgeLeft)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .TintAndShade = 0
        .Weight = xlMedium
    End With
    With Selection.Borders(xlEdgeTop)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .TintAndShade = 0
        .Weight = xlMedium
    End With
    With Selection.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .TintAndShade = 0
        .Weight = xlMedium
    End With
    With Selection.Borders(xlEdgeRight)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .TintAndShade = 0
        .Weight = xlMedium
    End With
    ActiveCell.Offset(-1, -1).Range("A1").Select
    ActiveCell.Offset(5, 9).Range("A1:U1").Select
    Selection.NumberFormat = "0_ ;[Red]-0 "
    ActiveWindow.ScrollColumn = 2
    ActiveWindow.ScrollColumn = 1
    ActiveCell.Offset(-5, -9).Range("A1").Select
End Sub

Sub Autoformatowanie()

    ActiveCell.Offset(5, 9).Range("A1:T1").Select
    'Selection.FormatConditions.Add Type:=xlExpression, Formula1:="=J14<K10"
    Selection.FormatConditions.Add Type:=xlExpression, Formula1:="=WK<W[-4]K[1]"
    Selection.FormatConditions(Selection.FormatConditions.COUNT).SetFirstPriority
    With Selection.FormatConditions(1).Interior
        .PatternColorIndex = xlAutomatic
        .ThemeColor = xlThemeColorAccent2
        .TintAndShade = 0.399945066682943
    End With
    Selection.FormatConditions(1).StopIfTrue = False
    ActiveCell.Offset(-5, -9).Range("A1").Select
End Sub


Attribute VB_Name = "Module3"
Sub ListLinks()
'Updateby20140529
Dim wb As Workbook
Set wb = Application.ActiveWorkbook
If Not IsEmpty(wb.LinkSources(xlExcelLinks)) Then
    wb.Sheets.Add
    xIndex = 1
    For Each link In wb.LinkSources(xlExcelLinks)
        Application.ActiveSheet.Cells(xIndex, 1).Value = link
        xIndex = xIndex + 1
    Next link
End If
End Sub
Attribute VB_Name = "PUS"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Implements ITransit

Private route As String
Private iNAME As String
Private QTY As Long
Private DELIVERY_DATE As Date
Private DELIVERY_TIME As Date
Private pickup_date As Date
Private pickup_time As Date
Private kontener As String
Private st As String


Private not_yet_received As Boolean
Private out_of_scope As Boolean
Private on_pop As Boolean
Private on_prosl As Boolean
Private tt_less_than_24h As Boolean



Sub Class_Initialize()
    not_yet_received = True
    out_of_scope = False
    on_prosl = False
End Sub

Private Property Let ITransit_mDeliveryDate(RHS As Date)
    DELIVERY_DATE = RHS
End Property

Private Property Get ITransit_mDeliveryDate() As Date
    ITransit_mDeliveryDate = DELIVERY_DATE
End Property

Private Property Let ITransit_mDeliveryTime(RHS As Date)
    DELIVERY_TIME = RHS
End Property

Private Property Get ITransit_mDeliveryTime() As Date
    ITransit_mDeliveryTime = DELIVERY_TIME
End Property

Private Property Let ITransit_mName(RHS As String)
    iNAME = CStr(RHS)
End Property

Private Property Get ITransit_mName() As String
    ITransit_mName = iNAME
End Property

Private Property Let ITransit_mNotYetReceived(RHS As Boolean)
    not_yet_received = RHS
End Property

Private Property Get ITransit_mNotYetReceived() As Boolean
    ITransit_mNotYetReceived = not_yet_received
End Property

Private Property Let ITransit_mOnPop(RHS As Boolean)
    on_pop = RHS
End Property

Private Property Get ITransit_mOnPop() As Boolean
    ITransit_mOnPop = on_pop
End Property

Private Property Let ITransit_mOnProsl(RHS As Boolean)
    on_prosl = RHS
End Property

Private Property Get ITransit_mOnProsl() As Boolean
    ITransit_mOnProsl = on_prosl
End Property

Private Property Let ITransit_mOutOfScope(RHS As Boolean)
    out_of_scope = RHS
End Property

Private Property Get ITransit_mOutOfScope() As Boolean
    ITransit_mOutOfScope = out_of_scope
End Property

Private Property Let ITransit_mPickupDate(RHS As Date)
    pickup_date = RHS
End Property

Private Property Get ITransit_mPickupDate() As Date
    ITransit_mPickupDate = pickup_date
End Property

Private Property Let ITransit_mPickupTime(RHS As Date)
    pickup_time = RHS
End Property

Private Property Get ITransit_mPickupTime() As Date
    ITransit_mPickupTime = pickup_time
End Property

Private Property Let ITransit_mQty(RHS As Long)
    QTY = RHS
End Property

Private Property Get ITransit_mQty() As Long
    ITransit_mQty = QTY
End Property

Private Property Let ITransit_mRoute(RHS As String)
    route = RHS
End Property

Private Property Get ITransit_mRoute() As String
    ITransit_mRoute = route
End Property

Private Property Let ITransit_mST(RHS As String)
    st = CStr(RHS)
End Property

Private Property Get ITransit_mST() As String
    ITransit_mST = CStr(st)
End Property

Private Property Let ITransit_mTRLR(RHS As String)
    kontener = CStr(RHS)
End Property

Private Property Get ITransit_mTRLR() As String
    ITransit_mTRLR = CStr(kontener)
End Property

Private Property Let ITransit_mTTLessThan24h(RHS As Boolean)
    tt_less_than_24h = RHS
End Property

Private Property Get ITransit_mTTLessThan24h() As Boolean
    ITransit_mTTLessThan24h = tt_less_than_24h
End Property


Attribute VB_Name = "ShippingPlan"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Attribute VB_Name = "StatusBox"
Attribute VB_Base = "0{B1B670F3-9CE0-46D2-965A-32D18E8235D1}{C59B8DE9-C5CB-424D-A769-5D7BEA42531C}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False



Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Sub Workbook_Open()
    Sleep 100
    
    Application.WindowState = xlNormal
    Sleep 100
    Application.WindowState = xlMaximized
End Sub
Attribute VB_Name = "ZK7PDRQM"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sess0 As Object
' zmienna przechowujaca reszte danych z zk7pdrqm
Private daily_matrix As ZK7PDRQMDailyMatrix

Public Property Let sesja(ByRef arg As Object)
    Set Sess0 = arg
End Property

Public Property Get sesja() As Object
    Set sesja = Sess0
End Property

Public Property Get infocode() As String
    infocode = Trim(Sess0.screen.getString(22, 2, 5))
End Property

Public Property Get plt() As String
    plt = Trim(Sess0.screen.getString(3, 8, 2))
End Property

Public Property Let plt(arg As String)
    Sess0.screen.putString CStr(arg), 3, 8
End Property

Public Property Get pn() As String
    pn = Trim(Sess0.screen.getString(4, 8, 8))
End Property

Public Property Let pn(arg As String)
    Sess0.screen.putString CStr(arg), 4, 8
End Property

Public Property Get KANBAN() As String
    KANBAN = Trim(Sess0.screen.getString(5, 10, 4))
End Property

Public Property Let KANBAN(arg As String)
    Sess0.screen.putString CStr(arg), 5, 10
End Property

Public Property Get PART_DESC() As String
    PART_DESC = Trim(Sess0.screen.getString(4, 41, 10))
End Property


Public Property Get p_daily_matrix() As ZK7PDRQMDailyMatrix
    Set p_daily_matrix = daily_matrix
End Property

Public Property Let p_daily_matrix(arg As ZK7PDRQMDailyMatrix)
    Set p_daily_matrix = arg
End Property



Public Function dates(SCREEN_COLUMN As Integer) As String
    dates = Trim(Sess0.screen.getString(8, 24 + 8 * SCREEN_COLUMN, 5))
End Function

Public Function PLT_TOTAL(SCREEN_COLUMN As Integer, ByRef pf8_pressed As Boolean) As String
    
    ' zmienna pomocnicza dla ustawienia kolejnych element|fffd|w PLT TOTAL
    ' troche |fffd|le poniewa|fffd| za ka|fffd|dym razem gdy uruchamiam t|fffd| procedure
    ' wszystkie przeliczenia ciagle sie powtarzaja...
    Dim plttotalrow As Integer
    plttotalrow = fooplttotalrow(pf8_pressed)
    
    
    Dim misc_value As Long
    misc_value = 0
    
    
    If Int(ThisWorkbook.Sheets("register").Range("miscFromDailyRqm")) = 1 Then
    
        For x = 1 To 12
        
        
            If Trim(Sess0.screen.getString(plttotalrow - 1, 1, 10)) Like "*MISC*OTHR*" Then
                misc_value = CLng(Trim(Sess0.screen.getString(plttotalrow - 1, 22 + 8 * SCREEN_COLUMN, 12)))
                Exit For
            End If
            
        Next x
    
    End If
    
    

    PLT_TOTAL = _
        CLng(Trim(Sess0.screen.getString(plttotalrow, 22 + 8 * SCREEN_COLUMN, 7))) - CLng(misc_value)
            

    
    
End Function



Private Function fooplttotalrow(ByRef pf8_pressed As Boolean) As Integer

    ' While ((Trim(Sess0.screen.getString(22, 2, 5)) <> "R6101") And (Trim(Sess0.screen.getString(22, 2, 5)) <> "R6123"))
    While (Trim(Sess0.screen.getString(22, 2, 5)) = "R6693") Or ((Trim(Sess0.screen.getString(22, 2, 5)) = "R6102"))
        Sess0.screen.sendKeys ("<pf8>")
        pf8_pressed = True
        Do
            DoEvents
        Loop Until Sess0.screen.OIA.XStatus = 0
        
    Wend

    For x = 9 To 21
        If Trim(Sess0.screen.getString(x, 2, 9)) Like "*PLT TOTAL*" Then
        
            fooplttotalrow = x
            Exit For
        End If
    Next x
End Function
Attribute VB_Name = "ZK7PDRQMDailyMatrix"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Attribute VB_Name = "ZK7PPRHR"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sess0 As Object
' zmienna przechowujaca reszte danych z zk7pdrqm

Public Property Let sesja(ByRef arg As Object)
    Set Sess0 = arg
End Property

Public Property Get sesja() As Object
    Set sesja = Sess0
End Property

Public Property Get plt() As String
    plt = Trim(Sess0.screen.getString(3, 8, 2))
End Property

Public Property Let plt(arg As String)
    Sess0.screen.putString CStr(arg), 3, 8
End Property

Public Property Get pn() As String
    pn = Trim(Sess0.screen.getString(4, 8, 8))
End Property

Public Property Let pn(arg As String)
    Sess0.screen.putString CStr(arg), 4, 8
End Property

Public Property Get KANBAN() As String
    KANBAN = Trim(Sess0.screen.getString(5, 10, 4))
End Property

Public Property Let KANBAN(arg As String)
    Sess0.screen.putString CStr(arg), 5, 10
End Property

Public Property Get ULOC() As String
    ULOC = Trim(Sess0.screen.getString(4, 23, 8))
End Property

Public Property Let ULOC(arg As String)
    Sess0.screen.putString CStr(arg), 4, 23
End Property

Public Function HRQMDATE(r As Integer, c As Integer) As String
    HRQMDATE = Trim(Sess0.screen.getString(6 + 4 * r, 9 + 7 * c, 5))
End Function

Public Function HRQMTIME(r As Integer, c As Integer) As String
    HRQMTIME = Trim(Sess0.screen.getString(7 + 4 * r, 9 + 7 * c, 5))
End Function

Public Function HQTY(r As Integer, c As Integer) As String
    HQTY = Trim(Sess0.screen.getString(8 + 4 * r, 9 + 7 * c, 5))
End Function





Attribute VB_Name = "ZK7PPRUL"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sess0 As Object
' zmienna przechowujaca reszte danych z zk7pdrqm
Private ULOC As Collection

Public Property Let sesja(ByRef arg As Object)
    Set Sess0 = arg
End Property

Public Property Get sesja() As Object
    Set sesja = Sess0
End Property


Public Property Let p_uloc(ByRef arg As Object)
    Set ULOC = arg
End Property

Public Property Get p_uloc() As Object
    Set p_uloc = ULOC
End Property

Sub Class_Initialize()
    Set ULOC = New Collection
End Sub

Sub Class_Terminate()
    Set ULOC = Nothing
End Sub




Public Property Get plt() As String
    plt = Trim(Sess0.screen.getString(3, 8, 2))
End Property

Public Property Let plt(arg As String)
    Sess0.screen.putString CStr(arg), 3, 8
End Property

Public Property Get pn() As String
    pn = Trim(Sess0.screen.getString(4, 8, 8))
End Property

Public Property Let pn(arg As String)
    Sess0.screen.putString CStr(arg), 4, 8
End Property

Public Property Get KANBAN() As String
    KANBAN = Trim(Sess0.screen.getString(4, 26, 4))
End Property

Public Property Let KANBAN(arg As String)
    Sess0.screen.putString CStr(arg), 4, 26
End Property

Public Sub fill_uloc_collection(i_mgo As MGO)

    Do
        For x = 8 To 21
            If (Trim(Sess0.screen.getString(x, 6, 4)) <> "MISC") And (Sess0.screen.getString(x, 6, 4) <> "    ") Then
                ULOC.Add Trim(Sess0.screen.getString(x, 6, 8))
            End If
        Next x
        
        If Sess0.screen.getString(22, 2, 5) = "R6086" Then
            Exit Do
        End If
        
        If Sess0.screen.getString(22, 2, 5) = "R6017" Then
            Exit Do
        End If
        
        If Sess0.screen.getString(22, 2, 5) = "R6102" Then
            i_mgo.sendKeys "<pf8>"
            i_mgo.waitForMgo
        End If
        
    Loop While True
    
    ' MsgBox ULOC.COUNT
End Sub





Attribute VB_Name = "ZK7PPUD0"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sess0 As Object

Public Property Let sesja(ByRef arg As Object)
    Set Sess0 = arg
End Property

Public Property Get sesja() As Object
    Set sesja = Sess0
End Property

Public Property Let PUS(arg As String)
    Sess0.screen.putString CStr(arg), 4, 39
End Property

Public Property Get PUS() As String
    PUS = Trim(Sess0.screen.getString(4, 39, 9))
End Property

Public Property Let plt(arg As String)
    Sess0.screen.putString CStr(arg), 4, 7
End Property



' musisz tutaj mateuszek pamietac ze mamy tutaj surowe cztery liczby bez znaku ":"
Public Property Get fst_pickup_time_window() As String
    fst_pickup_time_window = Trim(Sess0.screen.getString(6, 39, 4))
End Property





Attribute VB_Name = "ZK7PPUM0"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sess0 As Object

Public Property Let sesja(ByRef arg As Object)
    Set Sess0 = arg
End Property

Public Property Get sesja() As Object
    Set sesja = Sess0
End Property

Public Property Get REC() As String
  REC = Trim(Sess0.screen.getString(3, 65, 5))
End Property

Public Property Get OF() As String
  OF = Trim(Sess0.screen.getString(3, 75, 5))
End Property



Public Function plt(i As Integer) As String
    plt = Trim(Sess0.screen.getString(7 + 1 * i, 5, 2))
End Function

Public Function SUPPLIER(i As Integer) As String
    SUPPLIER = Trim(Sess0.screen.getString(7 + 1 * i, 12, 9))
End Function
Public Function PU_DATE(i As Integer) As String
    PU_DATE = Trim(Sess0.screen.getString(7 + 1 * i, 23, 8))
End Function

Public Function PUS_NBR(i As Integer) As String
    PUS_NBR = Trim(Sess0.screen.getString(7 + 1 * i, 33, 9))
End Function

Public Function route(i As Integer) As String
    route = Trim(Sess0.screen.getString(7 + 1 * i, 44, 6))
End Function

Public Function DEL_DATE(i As Integer) As String
    DEL_DATE = Trim(Sess0.screen.getString(7 + 1 * i, 52, 8))
End Function

Public Function DEL_WINDW(i As Integer) As String
    DEL_WINDW = Trim(Sess0.screen.getString(7 + 1 * i, 62, 9))
End Function

Public Function BEGIN_DEL(i As Integer) As String
    BEGIN_DEL = Trim(Sess0.screen.getString(7 + 1 * i, 62, 4))
End Function
Public Function END_DEL(i As Integer) As String
    END_DEL = Trim(Sess0.screen.getString(7 + 1 * i, 67, 4))
End Function

Public Function PART_QTY(i As Integer) As String
    PART_QTY = Trim(Sess0.screen.getString(7 + 1 * i, 72, 9))
End Function
Attribute VB_Name = "ZK7PPUS0"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sess0 As Object

Public Property Let sesja(ByRef arg As Object)
    Set Sess0 = arg
End Property

Public Property Get sesja() As Object
    Set sesja = Sess0
End Property

Public Property Get plt() As String
  plt = Trim(Sess0.screen.getString(4, 6, 2))
End Property

Public Property Let plt(arg As String)
  Sess0.screen.putString CStr(arg), 4, 6
End Property

Public Property Get pn() As String
  pn = Trim(Sess0.screen.getString(11, 27, 8))
End Property

Public Property Let pn(arg As String)
  Sess0.screen.putString CStr(arg), 11, 27
End Property

Public Property Get KANBAN_NUMBER() As String
  KANBAN_NUMBER = Trim(Sess0.screen.getString(13, 27, 4))
End Property

Public Property Let KANBAN_NUMBER(arg As String)
  Sess0.screen.putString CStr(arg), 13, 27
End Property

Public Property Get DELIVERY_DATE_FROM() As String
  DELIVERY_DATE_FROM = Trim(Sess0.screen.getString(15, 35, 10))
End Property

Public Property Let DELIVERY_DATE_FROM(arg As String)
  Sess0.screen.putString CStr(arg), 15, 35
End Property

Public Property Get RDC_DATE_FROM() As String
  RDC_DATE_FROM = Trim(Sess0.screen.getString(17, 35, 10))
End Property

Public Property Let RDC_DATE_FROM(arg As String)
  Sess0.screen.putString CStr(arg), 17, 35
End Property

Public Property Get PICKUP_DATE_FROM() As String
  PICKUP_DATE_FROM = Trim(Sess0.screen.getString(19, 35, 10))
End Property

Public Property Let PICKUP_DATE_FROM(arg As String)
  Sess0.screen.putString CStr(arg), 19, 35
End Property

Public Property Get DELIVERY_DATE_TO() As String
  DELIVERY_DATE_TO = Trim(Sess0.screen.getString(15, 54, 10))
End Property

Public Property Let DELIVERY_DATE_TO(arg As String)
  Sess0.screen.putString CStr(arg), 15, 54
End Property

Public Property Get RDC_DATE_TO() As String
  RDC_DATE_TO = Trim(Sess0.screen.getString(17, 54, 10))
End Property

Public Property Let RDC_DATE_TO(arg As String)
  Sess0.screen.putString CStr(arg), 17, 54
End Property

Public Property Get PICKUP_DATE_TO() As String
  PICKUP_DATE_TO = Trim(Sess0.screen.getString(19, 54, 10))
End Property

Public Property Let PICKUP_DATE_TO(arg As String)
  Sess0.screen.putString CStr(arg), 19, 54
End Property

Public Property Get COUNTRY_CODE() As String
  COUNTRY_CODE = Trim(Sess0.screen.getString(7, 67, 3))
End Property

Public Property Get STATE_PROVINCE() As String
  STATE_PROVINCE = Trim(Sess0.screen.getString(9, 67, 2))
End Property

Public Property Get PICKUP_CARRIER() As String
  PICKUP_CARRIER = Trim(Sess0.screen.getString(11, 67, 4))
End Property

Public Property Get RDC() As String
  RDC = Trim(Sess0.screen.getString(13, 67, 4))
End Property

Public Property Get fu() As String
  fu = Trim(Sess0.screen.getString(4, 36, 2))
End Property

Public Property Get ROUTE_SUFFIX() As String
  ROUTE_SUFFIX = Trim(Sess0.screen.getString(7, 27, 3))
End Property

Public Property Get SUPPLIER_ALIAS() As String
  SUPPLIER_ALIAS = Trim(Sess0.screen.getString(9, 27, 9))
End Property
Attribute VB_Name = "ZK7PROSL"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sess0 As Object

Public Property Let sesja(ByRef arg As Object)
    Set Sess0 = arg
End Property

Public Property Get sesja() As Object
    Set sesja = Sess0
End Property

Public Property Get plt() As String
  plt = Trim(Sess0.screen.getString(4, 7, 2))
End Property

Public Property Let plt(arg As String)
  Sess0.screen.putString CStr(arg), 4, 7
End Property

Public Property Get pn() As String
  pn = Trim(Sess0.screen.getString(4, 18, 8))
End Property

Public Property Let pn(arg As String)
  Sess0.screen.putString CStr(arg), 4, 18
End Property

Public Property Get KANBAN_NUMBER() As String
  KANBAN_NUMBER = Trim(Sess0.screen.getString(4, 38, 4))
End Property

Public Property Let KANBAN_NUMBER(arg As String)
  Sess0.screen.putString CStr(arg), 4, 38
End Property



Public Property Get SUPPLIER_DUNS() As String
  SUPPLIER_DUNS = Trim(Sess0.screen.getString(4, 65, 9))
End Property

Public Property Let SUPPLIER_DUNS(arg As String)
  Sess0.screen.putString CStr(arg), 4, 65
End Property






Public Function FUNC(i As Integer) As String
    FUNC = Trim(Sess0.screen.getString(10 + 1 * i, 20, 6))
End Function

Public Function QTY(i As Integer) As String
    QTY = Trim(Sess0.screen.getString(10 + 1 * i, 10, 6))
End Function

Public Function SHIP_DATE(i As Integer) As String
    SHIP_DATE = Trim(Sess0.screen.getString(10 + 1 * i, 18, 8))
End Function

Public Function SHIP_TIME(i As Integer) As String
    SHIP_TIME = Trim(Sess0.screen.getString(10 + 1 * i, 29, 5))
End Function

Public Function DELIVERY_DATE(i As Integer) As String
    DELIVERY_DATE = Trim(Sess0.screen.getString(10 + 1 * i, 39, 8))
End Function

Public Function DELIVERY_TIME(i As Integer) As String
    DELIVERY_TIME = Trim(Sess0.screen.getString(10 + 1 * i, 53, 5))
End Function



Public Function PUS_NUMBER(i As Integer) As String
    PUS_NUMBER = Trim(Sess0.screen.getString(10 + 1 * i, 63, 14))
End Function




Attribute VB_Name = "ZK7PWRQM"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sess0 As Object

Public Property Let sesja(ByRef arg As Object)
    Set Sess0 = arg
End Property

Public Property Get sesja() As Object
    Set sesja = Sess0
End Property

Public Property Get infocode() As String
    infocode = Trim(Sess0.screen.getString(22, 2, 5))
End Property


Public Property Get plt() As String
    plt = Trim(Sess0.screen.getString(3, 8, 2))
End Property

Public Property Let plt(arg As String)
    Sess0.screen.putString CStr(arg), 3, 8
End Property

Public Property Get pn() As String
    pn = Trim(Sess0.screen.getString(4, 11, 8))
End Property

Public Property Let pn(arg As String)
    Sess0.screen.putString CStr(arg), 4, 11
End Property

Public Property Get KANBAN() As String
    KANBAN = Trim(Sess0.screen.getString(5, 10, 4))
End Property

Public Property Let KANBAN(arg As String)
    Sess0.screen.putString CStr(arg), 5, 10
End Property

Public Property Get PART_DESC() As String
    PART_DESC = Trim(Sess0.screen.getString(4, 41, 10))
End Property



Public Function weeks(SCREEN_COLUMN As Integer) As String
    weeks = Trim(Sess0.screen.getString(8, 22 + 8 * SCREEN_COLUMN, 7))
End Function

Public Function day_from_cw(cw As Integer, which_day As Integer) As Date
    
    Dim wn As Range, wd As Range, tf As Range
    Set wn = ThisWorkbook.Sheets("register").Range("weekNum")
    Set wd = ThisWorkbook.Sheets("register").Range("weekDay")
    Set tf = ThisWorkbook.Sheets("register").Range("todayFormula")
    ' swn - string on week num
    ' swd - string on week day
    Dim swn As String, swd As String, stf As String
    stf = Replace(tf.formula, "=", "")
    swn = Replace(wn.formula, "-1", stf)
    swd = Replace(wd.formula, "-1", stf)
    
    current_cw = Evaluate(swn)
    current_weekday = Evaluate(swd)
    
    diff = cw - current_cw
    ' pamietaj ze jesli chodzi o formuly weekday to 1 - sunday, 2 - monday i tak dalej
    ' 8 dlatego, ze liczymy poniedzialek od 2 stad musimy kawalek dalej pojsc - to jest jakis obsolete
    
    ' zatem wrocilem do 7 + which_day - current_weekday
    If diff >= 0 Then
        day_from_cw = Date + diff * 7 - 7 + (7 + which_day - current_weekday)
    Else
        ' tj wskakujemy w nowy rok
        ' i niestsety diff musi przejsc bardziej skomplikowana droge
        poniedzialek = CDate(Date - current_weekday + 1)
        
        offset_poniedzialku_pod_okreslenie_diffu = 0
        Do
            poniedzialek = poniedzialek + 7
            
            offset_poniedzialku_pod_okreslenie_diffu = offset_poniedzialku_pod_okreslenie_diffu + 1
        Loop Until Int(Application.WorksheetFunction.IsoWeekNum(CDbl(poniedzialek))) = Int(cw)
        
        diff = offset_poniedzialku_pod_okreslenie_diffu
        day_from_cw = Date + diff * 7 - 7 + (7 + which_day - current_weekday)
    End If
    
End Function

Public Function monday_from_cw(cw As Integer) As Date
    
    monday_from_cw = day_from_cw(cw, 1)
End Function

Public Function sunday_from_cw(cw As Integer) As Date
    
    sunday_from_cw = day_from_cw(cw, 7)
End Function

Public Function PLT_TOTAL(SCREEN_COLUMN As Integer, ByRef pf8_pressed As Boolean) As String
    
    ' zmienna pomocnicza dla ustawienia kolejnych element|fffd|w PLT TOTAL
    ' troche |fffd|le poniewa|fffd| za ka|fffd|dym razem gdy uruchamiam t|fffd| procedure
    ' wszystkie przeliczenia ciagle sie powtarzaja...
    Dim plttotalrow As Integer
    plttotalrow = fooplttotalrow(pf8_pressed)
    
    PLT_TOTAL = Trim(Sess0.screen.getString(plttotalrow, 22 + 8 * SCREEN_COLUMN, 7))
    
    
End Function



Private Function fooplttotalrow(ByRef pf8_pressed As Boolean) As Integer

    ' While ((Trim(Sess0.screen.getString(22, 2, 5)) <> "R6101") And (Trim(Sess0.screen.getString(22, 2, 5)) <> "R6123"))
    While (Trim(Sess0.screen.getString(22, 2, 5)) = "R6693") Or ((Trim(Sess0.screen.getString(22, 2, 5)) = "R6102"))
        Sess0.screen.sendKeys ("<pf8>")
        pf8_pressed = True
        Do
            DoEvents
        Loop Until Sess0.screen.OIA.XStatus = 0
        
    Wend

    For x = 10 To 21
        If Trim(Sess0.screen.getString(x, 8, 3)) Like "*TOT*" Then
            fooplttotalrow = x
            Exit For
        End If
    Next x
End Function



INQUEST-PP=macro
