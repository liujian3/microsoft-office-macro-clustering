Attribute VB_Name = "Module1"
Public StateArray(54) As Boolean
Dim Activity As String
Dim EntityID As String
Dim EntityCol As Integer
Dim EntityName As String
Dim FieldMapRange As Range
Dim Identifier As String
Dim MapRow As Integer
Dim MapSheet As String
Dim ViewType As String
Dim WorkSheetSectionName As String
Dim NodeLevel As Integer    ' For debugging only

Sub ExpandShrink()
Attribute ExpandShrink.VB_ProcData.VB_Invoke_Func = " \n14"
    Dim ActiveCol As Long
    Dim ActiveRow As Long
    
    ActiveCol = ActiveCell.Column
    ActiveRow = ActiveCell.Row
    
    Range("A2").Select
    If ActiveCell.RowHeight > 15.8 Then
        Rows("2:2").EntireRow.RowHeight = 15.7
    Else
        Rows("2:2").EntireRow.AutoFit
    End If
    Cells(ActiveRow, ActiveCol).Select
End Sub

Sub DisplayHideStateForm()
    Dim i As Integer
    Application.ScreenUpdating = False
    For i = 1 To UBound(StateArray)
        StateArray(i) = Worksheets("States").Cells(i + 1, 3).Value
    Next i
    StateSelectForm.Show
    DisplayHideState
    ApplicationScreenUpdating = True
End Sub

Sub DisplayHideState()
    Dim i As Integer
    Dim stateRow As Integer

    For i = 1 To UBound(StateArray)
        stateRow = i + 1
        Worksheets("States").Cells(stateRow, 3).Value = StateArray(i)
        Worksheets("Workpaper").Rows(Worksheets("States").Cells(stateRow, 4).Value & ":" & Worksheets("States").Cells(stateRow, 5).Value).Select
        If StateArray(i) Then
            Selection.EntireRow.Hidden = False
            If i = 1 Then
                ' Hide rows intended for states in Federal section
                Rows(Worksheets("States").Cells(stateRow, 4) + 2 & ":" & Worksheets("States").Cells(stateRow, 4) + 6).Select
                Selection.EntireRow.Hidden = True
            End If
            
            ' Hide Class code and  Group number except in Federal
            If i <> 1 Then
                Rows(Worksheets("States").Cells(stateRow, 4) & ":" & Worksheets("States").Cells(stateRow, 4) + 1).Select
                Selection.EntireRow.Hidden = True
            End If
            
            If i <> 34 Then
                ' Hide New York rows
                Rows(Worksheets("States").Cells(stateRow, 4) + 18 & ":" & Worksheets("States").Cells(stateRow, 4) + 37).Select
                Selection.EntireRow.Hidden = True
                
                Rows(Worksheets("States").Cells(stateRow, 4) + 40 & ":" & Worksheets("States").Cells(stateRow, 4) + 59).Select
                Selection.EntireRow.Hidden = True
            End If
        Else
            Selection.EntireRow.Hidden = True
        End If
    Next i
End Sub

Sub UnhideStatesInUse(CommaDelimitedStateList As String)
    Dim i As Integer
    Dim SelectedState As String
    
    ApplicationScreenUpdating = False
    Workbooks(ThisWorkbook.Name).Activate
    TempArray = Split(CommaDelimitedStateList, ",")
    If UBound(TempArray) > 0 Then
        For i = 1 To UBound(StateArray)
            StateArray(i) = False
        Next i
        
        Worksheets("States").Activate
        Worksheets("States").Cells(1, 1).Select
        Set FieldMapRange = Range("luState")
        For i = 0 To UBound(TempArray)
            SelectedState = TempArray(i)
            If FindState(SelectedState) Then
                StateArray(MapRow) = True
            End If
        Next i
        Worksheets("Workpaper").Select
        DisplayHideState
        ActiveSheet.Outline.ShowLevels RowLevels:=1
    End If
    ApplicationScreenUpdating = True
End Sub

Sub Test()
    Dim StateList As String
    StateList = "FD,CA,CT,DE,MA,NJ,NY"
    
    ApplicationScreenUpdating = False
    Workbooks(ThisWorkbook.Name).Activate
    Worksheets("States").Select
    UnhideStatesInUse (StateList)
End Sub

Private Function FindState(StateID As String) As Boolean
    On Error GoTo FindStateHandler
    MapRow = Application.WorksheetFunction.VLookup(StateID, FieldMapRange, 6, False)
    FindState = True
    Exit Function
FindStateHandler:
    On Error GoTo 0
    FindState = False
End Function


Attribute VB_Name = "Module2"
Sub CopyFederalToEacState()
Attribute CopyFederalToEacState.VB_ProcData.VB_Invoke_Func = " \n14"
    Dim i As Integer
    Dim TotalFormula As String
    
    Application.ScreenUpdating = False
    Worksheets("Workpaper").Cells(6, 1).Select
    Cells.Select
    Selection.EntireRow.Hidden = False
    
    On Error Resume Next
    Selection.Rows.Ungroup
    Selection.Rows.Ungroup
    
    For i = 2 To UBound(StateArray) + 1
        If i <= UBound(StateArray) Then
            ' Select Federal to be copied to states
            Range("A" & Worksheets("States").Cells(i, 4) & ":CD" & Worksheets("States").Cells(i, 5)).Select
            Selection.Copy
            Range("A" & Worksheets("States").Cells(i + 1, 4)).Select
            ActiveSheet.Paste
            Application.CutCopyMode = False
            ' Copy state abbreviation
            Worksheets("Workpaper").Cells(Worksheets("States").Cells(i + 1, 4), 1).Value = Worksheets("States").Cells(i + 1, 1)
            Range("A" & Worksheets("States").Cells(i + 1, 4)).Select
            Selection.Copy
            Range("A" & Worksheets("States").Cells(i + 1, 4) & ":A" & Worksheets("States").Cells(i + 1, 5)).Select
            Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks:=False, Transpose:=False
            ' Copy state name
            Worksheets("Workpaper").Cells(Worksheets("States").Cells(i + 1, 5), 2).Value = Worksheets("States").Cells(i + 1, 2)
            If i = 2 Then
                ' If not Federal, remove gray highlight on state fields
                Range("B" & Worksheets("States").Cells(i + 1, 4) + 2 & ":CD" & Worksheets("States").Cells(i + 1, 4) + 6).Select
                With Selection.Interior
                    .Pattern = xlNone
                    .TintAndShade = 0
                    .PatternTintAndShade = 0
                End With
                Range("D" & Worksheets("States").Cells(i + 1, 4) + 2 & ":D" & Worksheets("States").Cells(i + 1, 4) + 6).Select
                With Selection.Interior
                    .PatternColorIndex = xlAutomatic
                    .ThemeColor = xlThemeColorDark1
                    .TintAndShade = -0.149998474074526
                    .PatternTintAndShade = 0
                End With
            Else
                If i = 34 Then  ' If New York, remove gray highlight on New York state fields
                    Range("B" & Worksheets("States").Cells(i + 1, 4) + 18 & ":CD" & Worksheets("States").Cells(i + 1, 4) + 37).Select
                    With Selection.Interior
                        .Pattern = xlNone
                        .TintAndShade = 0
                        .PatternTintAndShade = 0
                    End With
                    Range("D" & Worksheets("States").Cells(i + 1, 4) + 18 & ":D" & Worksheets("States").Cells(i + 1, 4) + 37).Select
                    With Selection.Interior
                        .PatternColorIndex = xlAutomatic
                        .ThemeColor = xlThemeColorDark1
                        .TintAndShade = -0.149998474074526
                        .PatternTintAndShade = 0
                    End With
    
                    Range("B" & Worksheets("States").Cells(i + 1, 4) + 40 & ":CD" & Worksheets("States").Cells(i + 1, 4) + 59).Select
                    With Selection.Interior
                        .Pattern = xlNone
                        .TintAndShade = 0
                        .PatternTintAndShade = 0
                    End With
                    Range("D" & Worksheets("States").Cells(i + 1, 4) + 40 & ":D" & Worksheets("States").Cells(i + 1, 4) + 59).Select
                    With Selection.Interior
                        .PatternColorIndex = xlAutomatic
                        .ThemeColor = xlThemeColorDark1
                        .TintAndShade = -0.149998474074526
                        .PatternTintAndShade = 0
                    End With
                Else
                    If i > 34 Then
                        Range("B" & Worksheets("States").Cells(i + 1, 4) + 18 & ":CD" & Worksheets("States").Cells(i + 1, 4) + 37).Select
                        With Selection.Interior
                            .PatternColorIndex = xlAutomatic
                            .ThemeColor = xlThemeColorDark1
                            .TintAndShade = -0.149998474074526
                            .PatternTintAndShade = 0
                        End With
                    
                        Range("B" & Worksheets("States").Cells(i + 1, 4) + 40 & ":CD" & Worksheets("States").Cells(i + 1, 4) + 59).Select
                        With Selection.Interior
                            .PatternColorIndex = xlAutomatic
                            .ThemeColor = xlThemeColorDark1
                            .TintAndShade = -0.149998474074526
                            .PatternTintAndShade = 0
                        End With
                    Else
                    End If
                End If
            End If
        End If
        If i = 2 Then
            ' Hide rows intended for states in Federal section
            Rows(Worksheets("States").Cells(i, 4) + 2 & ":" & Worksheets("States").Cells(i, 4) + 6).Select
            Selection.EntireRow.Hidden = True
        End If
        
        ' Hide Class code and Group number in state sections
        If i <> 2 Then
            Rows(Worksheets("States").Cells(i, 4) & ":" & Worksheets("States").Cells(i, 4) + 1).Select
            Selection.EntireRow.Hidden = True
        End If
        
        If i <> 35 Then
            ' Hide New York rows
            Rows(Worksheets("States").Cells(i, 4) + 18 & ":" & Worksheets("States").Cells(i, 4) + 37).Select
            Selection.EntireRow.Hidden = True
            
            Rows(Worksheets("States").Cells(i, 4) + 40 & ":" & Worksheets("States").Cells(i, 4) + 59).Select
            Selection.EntireRow.Hidden = True
        End If
    Next i
    TotalFormula = "="
    For i = 2 To UBound(StateArray) + 1
        If i = 2 Then
            TotalFormula = TotalFormula + "D" & Worksheets("States").Cells(i, 5).Value
        Else
            TotalFormula = TotalFormula + "+D" & Worksheets("States").Cells(i, 5).Value
        End If
    Next i
    Worksheets("Workpaper").Cells(5, 4).Value = TotalFormula
    Range("Workpaper!D5").Select
    Selection.Copy
    Range("Workpaper!E5:CD5").Select
    ActiveSheet.Paste
    Application.CutCopyMode = False
    Range("Workpaper!A6").Select
    Application.ScreenUpdating = True
End Sub

' Code below is not used

Public Sub ImportXML()
    ' Select Tools | References and then add Microsoft XML, v6.0
    ' Set objParser = Server.CreateObject("Microsoft.XMLDOM")
    
    Dim xDoc As MSXML2.DOMDocument
    Set xDoc = New MSXML2.DOMDocument
    
    MapSheet = "iMap"
    EntityCol = 4   ' Will increment when Entity Name is found
    
    Set FieldMapRange = Range("luFieldName")
    If xDoc.Load("C:\Users\clark.willey\Documents\Customers\~National Accounts\2017\PwC\2016I_IANTEST.001_V2_FieldIDs.xml") Then
        Worksheets("Workpaper").Activate
        NodeLevel = 0
        ViewType = ""
        Identifier = ""
        WorkSheetSectionName = ""
        EntityID = ""
        Activity = ""
        GetNode xDoc.ChildNodes
    Else
        MsgBox ("XML did not load")
    End If
    
    Set xDoc = Nothing
End Sub

Sub GetNode(ByRef Nodes As MSXML2.IXMLDOMNodeList)
    Dim xNode As MSXML2.IXMLDOMNode
    Dim i As Integer
    
    NodeLevel = NodeLevel + 1
    For Each xNode In Nodes
        Select Case xNode.NodeType
            Case NODE_PROCESSING_INSTRUCTION    ' xNode.nodeType = 7
            Case NODE_ELEMENT                   ' xNode.nodeType = 1
                Select Case xNode.NodeName
                    Case "Payload"
                        If xNode.HasChildNodes Then
                            GetNode xNode.ChildNodes
                        End If
                    Case "TaxReturn"
                        If xNode.HasChildNodes Then
                            GetNode xNode.ChildNodes
                        End If
                    Case "ReturnHeader"
                        If xNode.Attributes.Length > 0 Then
                            GetAttr xNode.Attributes, xNode.NodeName
                        End If
                    Case "TaxPayerDetails"
                    Case "View"
                        ViewType = GetName(xNode.Attributes)
                        If xNode.HasChildNodes Then
                            GetNode xNode.ChildNodes
                        End If
                    Case "Identifier"
                        GetAttr xNode.Attributes, xNode.NodeName
                    Case "Controls"
                        GetNode xNode.ChildNodes
                    Case "Entity"
                        GetAttr xNode.Attributes, xNode.NodeName
                    Case "WorkSheetSection"
                        WorkSheetSectionName = GetName(xNode.Attributes)
                        If xNode.HasChildNodes Then
                            Select Case Identifier
                                Case "Federal\Income\Fiduciary Passthrough (K-1 1041)"
                                    GetNode xNode.ChildNodes
                                Case "Federal\Income\Partnership Passthrough (K-1 1065)"
                                    GetNode xNode.ChildNodes
                            End Select
                        End If
                    Case "FieldData"
                        GetAttr xNode.Attributes, xNode.NodeName
                    Case "GridData"
                        GetNode xNode.ChildNodes
                    Case "Fields"
                        GetNode xNode.ChildNodes
                    Case "FieldHeader"
                        Exit For
                    Case "Row"
                        GetNode xNode.ChildNodes
                    Case "RowValue"
                        GetAttr xNode.Attributes, xNode.NodeName
                End Select
            Case NODE_ATTRIBUTE
                x = 1
        End Select
    Next xNode
    NodeLevel = NodeLevel - 1
End Sub

Function GetName(ByRef Attr As MSXML2.IXMLDOMNamedNodeMap) As String
    Dim xAttr As MSXML2.IXMLDOMNode
    Dim Result As MSXML2.IXMLDOMNode
    
    For Each xAttr In Attr
        GetName = xAttr.NodeValue
    Next xAttr
End Function

Sub GetAttr(ByRef Attr As MSXML2.IXMLDOMNamedNodeMap, ByRef ParentNodeName As String)
    Dim xAttr As MSXML2.IXMLDOMNode
    Dim ReturnID As String
    Dim ClientID As String
    Dim TaxYear As String
    Dim ReturnType As String
    Dim ReturnVersion As String
    Dim Result As Boolean
    Dim MapFieldName As String
    Dim MapSystem As String
    Dim MapFedState As String
    Dim MapFieldPrompt As String
    Dim MapOffset As Integer
    
    Select Case ParentNodeName
        Case "ReturnHeader"
            For Each xAttr In Attr
                Select Case xAttr.BaseName
                    Case "ClientID"
                        ClientID = xAttr.NodeValue
                    Case "TaxYear"
                        TaxYear = xAttr.NodeValue
                    Case "ReturnType"
                        ReturnType = xAttr.NodeValue
                    Case "ReturnVersion"
                        ReturnVersion = ":V" & xAttr.NodeValue
                End Select
            Next xAttr
            Worksheets("Workpaper").Cells(1, 2).Value = TaxYear & ReturnType & ":" & ClientID & ReturnVersion
        Case "Identifier"
            For Each xAttr In Attr
                Select Case xAttr.NodeValue
                    Case Else
                        Identifier = xAttr.NodeValue
                End Select
            Next xAttr
        Case "Entity"
            For Each xAttr In Attr
                Select Case xAttr.BaseName
                    Case "ID"
                        EntityID = xAttr.NodeValue
                End Select
            Next xAttr
        Case "FieldData"
            For Each xAttr In Attr
                Select Case xAttr.BaseName
                    Case "Location"
                        If LookupField(xAttr.NodeValue) Then
                            MapFieldName = Worksheets(MapSheet).Cells(MapRow, 1)
                            MapSystem = Worksheets(MapSheet).Cells(MapRow, 3)
                            MapFedState = Worksheets(MapSheet).Cells(MapRow, 4)
                            MapFieldPrompt = Worksheets(MapSheet).Cells(MapRow, 7)
                            MapOffset = Worksheets(MapSheet).Cells(MapRow, 8)
                            If MapFieldPrompt = "Entity name" Or MapFieldPrompt = "State" Then
                                EntityCol = EntityCol + 1
                            Else
                                x = 2
                            End If
                        Else
                            Exit For
                        End If
                    Case "Value"
                        If xAttr.BaseName = "Value" And MapFieldPrompt = "Entity name" Then
                            EntityName = xAttr.NodeValue
                            SetEntityName EntityCol, EntityName, EntityID
                        Else
                            x = 3
                        End If
                End Select
            Next xAttr
        Case "GridData"
            x = 4
        Case "RowValue"
            For Each xAttr In Attr
                x = 5
            Next xAttr
    End Select
End Sub

Private Function LookupField(FieldName As String) As Boolean
    On Error GoTo LookupErrorHandler
    MapRow = Application.WorksheetFunction.VLookup(FieldName, FieldMapRange, 2, False)
    LookupField = True
    Exit Function
LookupErrorHandler:
    On Error GoTo 0
    LookupField = False
End Function

Private Sub SetEntityName(ColNum As Integer, Name As String, ID As String)
    Worksheets("Workpaper").Cells(2, ColNum).Value = Name
    Worksheets("Workpaper").Cells(3, ColNum).Value = ID
End Sub

Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Sub Worksheet_BeforeDoubleClick(ByVal Target As Range, Cancel As Boolean)

    If Target.Column = 3 Then
        If Range("D" & ActiveCell.Row) <> 0 And ActiveCell.Value = "" Then
            ActiveCell.Value = ChrW(&H2713)
        Else
            If ActiveCell.Value = ChrW(&H2713) Then
                ActiveCell.Value = ""
            End If
        End If
    End If
End Sub


Attribute VB_Name = "Sheet2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "StateSelectForm"
Attribute VB_Base = "0{7DEC72A9-9F30-4E7F-BBE3-262A9329C01E}{D583B29A-78D6-422E-9F15-B0781708FBF4}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub CommandButtonOK_Click()
    StateArray(1) = CheckBox2
    StateArray(2) = CheckBox3
    StateArray(3) = CheckBox4
    StateArray(4) = CheckBox5
    StateArray(5) = CheckBox6
    StateArray(6) = CheckBox7
    StateArray(7) = CheckBox8
    StateArray(8) = CheckBox9
    StateArray(9) = CheckBox10
    StateArray(10) = CheckBox11
    StateArray(11) = CheckBox12
    StateArray(12) = CheckBox13
    StateArray(13) = CheckBox14
    StateArray(14) = CheckBox15
    StateArray(15) = CheckBox16
    StateArray(16) = CheckBox17
    StateArray(17) = CheckBox18
    StateArray(18) = CheckBox19
    StateArray(19) = CheckBox20
    StateArray(20) = CheckBox21
    StateArray(21) = CheckBox22
    StateArray(22) = CheckBox23
    StateArray(23) = CheckBox24
    StateArray(24) = CheckBox25
    StateArray(25) = CheckBox26
    StateArray(26) = CheckBox27
    StateArray(27) = CheckBox28
    StateArray(28) = CheckBox29
    StateArray(29) = CheckBox30
    StateArray(30) = CheckBox31
    StateArray(31) = CheckBox32
    StateArray(32) = CheckBox33
    StateArray(33) = CheckBox34
    StateArray(34) = CheckBox35
    StateArray(35) = CheckBox36
    StateArray(36) = CheckBox37
    StateArray(37) = CheckBox38
    StateArray(38) = CheckBox39
    StateArray(39) = CheckBox40
    StateArray(40) = CheckBox41
    StateArray(41) = CheckBox42
    StateArray(42) = CheckBox43
    StateArray(43) = CheckBox44
    StateArray(44) = CheckBox45
    StateArray(45) = CheckBox46
    StateArray(46) = CheckBox47
    StateArray(47) = CheckBox48
    StateArray(48) = CheckBox49
    StateArray(49) = CheckBox50
    StateArray(50) = CheckBox51
    StateArray(51) = CheckBox52
    StateArray(52) = CheckBox53
    StateArray(53) = CheckBox54
    StateArray(54) = CheckBox55
    Unload Me
End Sub

Private Sub UserForm_Activate()
    CheckBox2 = StateArray(1)
    CheckBox3 = StateArray(2)
    CheckBox4 = StateArray(3)
    CheckBox5 = StateArray(4)
    CheckBox6 = StateArray(5)
    CheckBox7 = StateArray(6)
    CheckBox8 = StateArray(7)
    CheckBox9 = StateArray(8)
    CheckBox10 = StateArray(9)
    CheckBox11 = StateArray(10)
    CheckBox12 = StateArray(11)
    CheckBox13 = StateArray(12)
    CheckBox14 = StateArray(13)
    CheckBox15 = StateArray(14)
    CheckBox16 = StateArray(15)
    CheckBox17 = StateArray(16)
    CheckBox18 = StateArray(17)
    CheckBox19 = StateArray(18)
    CheckBox20 = StateArray(19)
    CheckBox21 = StateArray(20)
    CheckBox22 = StateArray(21)
    CheckBox23 = StateArray(22)
    CheckBox24 = StateArray(23)
    CheckBox25 = StateArray(24)
    CheckBox26 = StateArray(25)
    CheckBox27 = StateArray(26)
    CheckBox28 = StateArray(27)
    CheckBox29 = StateArray(28)
    CheckBox30 = StateArray(29)
    CheckBox31 = StateArray(30)
    CheckBox32 = StateArray(31)
    CheckBox33 = StateArray(32)
    CheckBox34 = StateArray(33)
    CheckBox35 = StateArray(34)
    CheckBox36 = StateArray(35)
    CheckBox37 = StateArray(36)
    CheckBox38 = StateArray(37)
    CheckBox39 = StateArray(38)
    CheckBox40 = StateArray(39)
    CheckBox41 = StateArray(40)
    CheckBox42 = StateArray(41)
    CheckBox43 = StateArray(42)
    CheckBox44 = StateArray(43)
    CheckBox45 = StateArray(44)
    CheckBox46 = StateArray(45)
    CheckBox47 = StateArray(46)
    CheckBox48 = StateArray(47)
    CheckBox49 = StateArray(48)
    CheckBox50 = StateArray(49)
    CheckBox51 = StateArray(50)
    CheckBox52 = StateArray(51)
    CheckBox53 = StateArray(52)
    CheckBox54 = StateArray(53)
    CheckBox55 = StateArray(54)
End Sub

Private Sub CommandButtonClearAll_Click()
    Dim i As Integer
    For i = 1 To UBound(StateArray)
        StateArray(i) = False
    Next i
    UserForm_Activate
End Sub

Private Sub CommandButtonSelectAll_Click()
    Dim i As Integer
    For i = 1 To UBound(StateArray)
        StateArray(i) = True
    Next i
    UserForm_Activate
End Sub

Private Sub CommandButtonSelectStatesWData_Click()
    Dim i As Integer
    Dim stateRow As Integer
    Dim shp As Shape
    
    For i = 1 To UBound(StateArray)
        stateRow = i + 1
        If Worksheets("Workpaper").Cells(Worksheets("States").Cells(stateRow, 5).Value, 4).Value <> 0 Then
            Controls.Item("Checkbox" & i + 1).Value = True
        Else
            Controls.Item("Checkbox" & i + 1).Value = False
        End If
    Next i
End Sub


Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True


INQUEST-PP=macro
